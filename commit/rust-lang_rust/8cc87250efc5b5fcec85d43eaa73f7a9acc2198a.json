{"sha": "8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "node_id": "C_kwDOAAsO6NoAKDhjYzg3MjUwZWZjNWI1ZmNlYzg1ZDQzZWFhNzNmN2E5YWNjMjE5OGE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-27T05:45:35Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-07T07:27:42Z"}, "message": "Shorten span for closures.", "tree": {"sha": "557e653c2ca76d3ef22a23081e433102fff2186b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/557e653c2ca76d3ef22a23081e433102fff2186b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "html_url": "https://github.com/rust-lang/rust/commit/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e78e747f53c36e53ff99c94438d2efa26830fc4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e78e747f53c36e53ff99c94438d2efa26830fc4b", "html_url": "https://github.com/rust-lang/rust/commit/e78e747f53c36e53ff99c94438d2efa26830fc4b"}], "stats": {"total": 2225, "additions": 898, "deletions": 1327}, "files": [{"sha": "1d9d2c6d8a33a64ecfe9068badb7e15c7b80736f", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -861,7 +861,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             let arg_pos = args\n                 .iter()\n                 .enumerate()\n-                .filter(|(_, arg)| arg.span == self.body.span)\n+                .filter(|(_, arg)| arg.hir_id == closure_id)\n                 .map(|(pos, _)| pos)\n                 .next();\n             let def_id = hir.local_def_id(item_id);"}, {"sha": "4f3da40e35aa12b6a2f0930c15bd11860e25712d", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1020,6 +1020,7 @@ impl<'hir> Map<'hir> {\n                 _ => named_span(item.span, item.ident, None),\n             },\n             Node::Ctor(_) => return self.opt_span(self.get_parent_node(hir_id)),\n+            Node::Expr(Expr { kind: ExprKind::Closure { fn_decl_span, .. }, .. }) => *fn_decl_span,\n             _ => self.span_with_body(hir_id),\n         };\n         Some(span)"}, {"sha": "74546ed90808559b47d4f09eb0ebc27825fb6063", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -747,14 +747,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let (migration_string, migrated_variables_concat) =\n                 migration_suggestion_for_2229(self.tcx, &need_migrations);\n \n-            let local_def_id = closure_def_id.expect_local();\n-            let closure_hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n-            let closure_span = self.tcx.hir().span(closure_hir_id);\n-            let closure_head_span = self.tcx.sess.source_map().guess_head_span(closure_span);\n+            let closure_hir_id =\n+                self.tcx.hir().local_def_id_to_hir_id(closure_def_id.expect_local());\n+            let closure_head_span = self.tcx.def_span(closure_def_id);\n             self.tcx.struct_span_lint_hir(\n                 lint::builtin::RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES,\n                 closure_hir_id,\n-                 closure_head_span,\n+                closure_head_span,\n                 |lint| {\n                     let mut diagnostics_builder = lint.build(\n                         &reasons.migration_message(),\n@@ -827,12 +826,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         migrated_variables_concat\n                     );\n \n+                    let closure_span = self.tcx.hir().span_with_body(closure_hir_id);\n                     let mut closure_body_span = {\n                         // If the body was entirely expanded from a macro\n                         // invocation, i.e. the body is not contained inside the\n                         // closure span, then we walk up the expansion until we\n                         // find the span before the expansion.\n-                        let s = self.tcx.hir().span(body_id.hir_id);\n+                        let s = self.tcx.hir().span_with_body(body_id.hir_id);\n                         s.find_ancestor_inside(closure_span).unwrap_or(s)\n                     };\n "}, {"sha": "c78c345dec224e70a4a3938e78d3b7f7c964e715", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -14,22 +14,22 @@\n     },\n } */\n \n-fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 13:6]) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-    let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 10:17]) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+    let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n     let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n     let _4: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n     let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n     let mut _6: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:18: 10:18\n-    let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-    let mut _8: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+    let mut _8: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n     scope 1 {\n         debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n     }\n \n     bb0: {\n-        _8 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        switchInt(move _8) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        _8 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+        switchInt(move _8) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n     }\n \n     bb1: {\n@@ -44,11 +44,11 @@ fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 1\n     }\n \n     bb3: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n     }\n \n     bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n     }\n \n     bb5 (cleanup): {\n@@ -57,28 +57,28 @@ fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 1\n     }\n \n     bb6: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n     }\n \n     bb7: {\n-        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n     }\n \n     bb8: {\n         goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb9: {\n-        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n     }\n \n     bb10: {\n-        StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+        StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n     }\n \n     bb11: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n     }\n }"}, {"sha": "9abb0cf2046bdeca53e89bc610bcfd9ffa7ed6be", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,6 +1,6 @@\n // MIR for `main::{closure#0}` before StateTransform\n \n-fn main::{closure#0}(_1: [generator@$DIR/generator-storage-dead-unwind.rs:22:16: 28:6], _2: ()) -> ()\n+fn main::{closure#0}(_1: [generator@$DIR/generator-storage-dead-unwind.rs:22:16: 22:18], _2: ()) -> ()\n yields ()\n  {\n     let mut _0: ();                      // return place in scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 22:19\n@@ -66,7 +66,7 @@ yields ()\n     }\n \n     bb4: {\n-        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:6: 28:6\n+        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:18: 22:18\n     }\n \n     bb5: {\n@@ -82,7 +82,7 @@ yields ()\n     }\n \n     bb7: {\n-        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n+        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 22:18\n     }\n \n     bb8 (cleanup): {\n@@ -104,7 +104,7 @@ yields ()\n     }\n \n     bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n+        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 22:18\n     }\n \n     bb12 (cleanup): {"}, {"sha": "ce587433617f5a98a3cd1e6b50214a8049cb907f", "filename": "src/test/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -14,31 +14,31 @@\n     },\n } */\n \n-fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]>, _2: u8) -> GeneratorState<(), ()> {\n+fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]>, _2: u8) -> GeneratorState<(), ()> {\n     debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19\n-    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n     let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n     let mut _4: !;                       // in scope 0 at $DIR/generator-tiny.rs:21:9: 24:10\n-    let mut _5: ();                      // in scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+    let mut _5: ();                      // in scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n     let _6: u8;                          // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:18\n     let mut _7: ();                      // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:18\n     let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:23:13: 23:21\n     let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:19:25: 19:25\n     let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19\n-    let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+    let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n     scope 1 {\n-        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n+        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n     }\n \n     bb0: {\n-        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]))); // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n-        switchInt(move _11) -> [0_u32: bb1, 3_u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))); // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n+        switchInt(move _11) -> [0_u32: bb1, 3_u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n     }\n \n     bb1: {\n-        _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+        _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n         nop;                             // scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n-        Deinit((((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6])) as variant#3).0: HasDrop)); // scope 0 at $DIR/generator-tiny.rs:20:18: 20:25\n+        Deinit((((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop)); // scope 0 at $DIR/generator-tiny.rs:20:18: 20:25\n         StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n         goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n     }\n@@ -50,7 +50,7 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]\n         Deinit(_0);                      // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         discriminant(_0) = 0;            // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]))) = 3; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))) = 3; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         return;                          // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n     }\n \n@@ -71,14 +71,14 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]\n     }\n \n     bb5: {\n-        StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n-        StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n-        StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n-        _6 = move _2;                    // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n-        goto -> bb3;                     // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+        StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n+        StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n+        StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n+        _6 = move _2;                    // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n+        goto -> bb3;                     // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n     }\n \n     bb6: {\n-        unreachable;                     // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+        unreachable;                     // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n     }\n }"}, {"sha": "fc8118d475adf761c617fab3e2fc99851d565ae1", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -19,8 +19,8 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n             debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:10:17: 10:18\n             let mut _10: i32;            // in scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n             let mut _11: T;              // in scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-            let mut _12: &i32;           // in scope 2 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-            let mut _13: &T;             // in scope 2 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+            let mut _12: &i32;           // in scope 2 at $DIR/inline-closure-captures.rs:11:13: 11:17\n+            let mut _13: &T;             // in scope 2 at $DIR/inline-closure-captures.rs:11:13: 11:17\n         }\n     }\n \n@@ -33,8 +33,8 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         Deinit(_3);                      // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         (_3.0: &i32) = move _4;          // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         (_3.1: &T) = move _5;            // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-        StorageDead(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:11:23: 11:24\n-        StorageDead(_4);                 // scope 0 at $DIR/inline-closure-captures.rs:11:23: 11:24\n+        StorageDead(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:11:16: 11:17\n+        StorageDead(_4);                 // scope 0 at $DIR/inline-closure-captures.rs:11:16: 11:17\n         StorageLive(_6);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:6\n         _6 = &_3;                        // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:6\n         StorageLive(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9"}, {"sha": "51994323c457f146b6a79fb2bb9609dfa5393775", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -4,22 +4,22 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-generator.rs:8:11: 8:11\n       let _1: std::ops::GeneratorState<i32, bool>; // in scope 0 at $DIR/inline-generator.rs:9:9: 9:11\n-      let mut _2: std::pin::Pin<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>; // in scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n-      let mut _3: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n-      let mut _4: [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n+      let mut _2: std::pin::Pin<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>; // in scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n+      let mut _3: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n+      let mut _4: [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n +     let mut _7: bool;                    // in scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n       scope 1 {\n           debug _r => _1;                  // in scope 1 at $DIR/inline-generator.rs:9:9: 9:11\n       }\n +     scope 2 (inlined g) {                // at $DIR/inline-generator.rs:9:28: 9:31\n +     }\n-+     scope 3 (inlined Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>::new) { // at $DIR/inline-generator.rs:9:14: 9:32\n++     scope 3 (inlined Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>::new) { // at $DIR/inline-generator.rs:9:14: 9:32\n +         debug pointer => _3;             // in scope 3 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+         let mut _5: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 3 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         let mut _5: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 3 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         scope 4 {\n-+             scope 5 (inlined Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>::new_unchecked) { // at $SRC_DIR/core/src/pin.rs:LL:COL\n++             scope 5 (inlined Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>::new_unchecked) { // at $SRC_DIR/core/src/pin.rs:LL:COL\n +                 debug pointer => _5;     // in scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+                 let mut _6: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++                 let mut _6: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +             }\n +         }\n +     }\n@@ -29,10 +29,10 @@\n +         let mut _9: bool;                // in scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n +         let mut _10: bool;               // in scope 6 at $DIR/inline-generator.rs:15:9: 15:9\n +         let _11: bool;                   // in scope 6 at $DIR/inline-generator.rs:15:6: 15:7\n-+         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         let mut _13: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         let mut _14: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         let mut _15: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         let mut _13: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         let mut _14: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         let mut _15: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n +     }\n   \n       bb0: {\n@@ -50,11 +50,11 @@\n +         Deinit(_4);                      // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n +         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n           _3 = &mut _4;                    // scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n--         _2 = Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n+-         _2 = Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:14: 9:22\n -                                          // + user_ty: UserType(0)\n--                                          // + literal: Const { ty: fn(&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]) -> Pin<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]> {Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>::new}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn(&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]) -> Pin<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]> {Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb2: {\n@@ -63,24 +63,24 @@\n +         StorageLive(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         _6 = move _5;                    // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         Deinit(_2);                      // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+         (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]) = move _6; // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]) = move _6; // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_5);                 // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/inline-generator.rs:9:31: 9:32\n--         _1 = <[generator@$DIR/inline-generator.rs:15:5: 15:41] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n+-         _1 = <[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:33: 9:39\n--                                          // + literal: Const { ty: for<'r> fn(Pin<&'r mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>, bool) -> GeneratorState<<[generator@$DIR/inline-generator.rs:15:5: 15:41] as Generator<bool>>::Yield, <[generator@$DIR/inline-generator.rs:15:5: 15:41] as Generator<bool>>::Return> {<[generator@$DIR/inline-generator.rs:15:5: 15:41] as Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> fn(Pin<&'r mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>, bool) -> GeneratorState<<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Yield, <[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Return> {<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageLive(_11);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageLive(_12);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageLive(_13);                // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         _13 = move (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]); // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         _12 = discriminant((*_13));      // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         StorageDead(_13);                // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         StorageLive(_13);                // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         _13 = move (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         _12 = discriminant((*_13));      // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         StorageDead(_13);                // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n       }\n   \n -     bb3: {\n@@ -102,7 +102,7 @@\n +     }\n + \n +     bb3: {\n-+         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n +         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n +         StorageLive(_9);                 // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n +         _9 = _11;                        // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n@@ -125,32 +125,32 @@\n +         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         StorageLive(_14);                // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         _14 = move (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]); // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n++         _14 = move (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         discriminant((*_14)) = 3;        // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         StorageDead(_14);                // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:11: 15:39\n +     }\n + \n +     bb7: {\n-+         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n +         StorageDead(_8);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n-+         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n-+         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n-+         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n-+         StorageLive(_15);                // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n-+         _15 = move (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]); // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n-+         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n-+         StorageDead(_15);                // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n-+         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:41: 15:41\n++         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         StorageLive(_15);                // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         _15 = move (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         StorageDead(_15);                // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:8: 15:8\n +     }\n + \n +     bb8: {\n-+         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n +     }\n + \n +     bb9: {\n-+         unreachable;                     // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         unreachable;                     // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n       }\n   }\n   "}, {"sha": "242073574f2b224027c1e7c83ec2805c7c815bb1", "filename": "src/test/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,8 +2,8 @@\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:4:11: 4:11\n-    let _1: [closure@$DIR/issue-76997-inline-scopes-parenting.rs:5:13: 5:33]; // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:5:9: 5:10\n-    let mut _2: &[closure@$DIR/issue-76997-inline-scopes-parenting.rs:5:13: 5:33]; // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:6\n+    let _1: [closure@$DIR/issue-76997-inline-scopes-parenting.rs:5:13: 5:16]; // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:5:9: 5:10\n+    let mut _2: &[closure@$DIR/issue-76997-inline-scopes-parenting.rs:5:13: 5:16]; // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:6\n     let mut _3: ((),);                   // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n     let mut _4: ();                      // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:6:7: 6:9\n     let mut _5: ();                      // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10"}, {"sha": "5808c607752522df3d0257947d780f67b4b31517", "filename": "src/test/mir-opt/retag.main-{closure#0}.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -9,14 +9,14 @@ fn main::{closure#0}(_1: &[closure@main::{closure#0}], _2: &i32) -> &i32 {\n     }\n \n     bb0: {\n-        Retag([fn entry] _1);            // scope 0 at $DIR/retag.rs:40:31: 43:6\n-        Retag([fn entry] _2);            // scope 0 at $DIR/retag.rs:40:31: 43:6\n+        Retag([fn entry] _1);            // scope 0 at $DIR/retag.rs:40:31: 40:48\n+        Retag([fn entry] _2);            // scope 0 at $DIR/retag.rs:40:31: 40:48\n         StorageLive(_3);                 // scope 0 at $DIR/retag.rs:41:13: 41:15\n         _3 = _2;                         // scope 0 at $DIR/retag.rs:41:18: 41:19\n         Retag(_3);                       // scope 0 at $DIR/retag.rs:41:18: 41:19\n         _0 = _2;                         // scope 1 at $DIR/retag.rs:42:9: 42:10\n         Retag(_0);                       // scope 1 at $DIR/retag.rs:42:9: 42:10\n         StorageDead(_3);                 // scope 0 at $DIR/retag.rs:43:5: 43:6\n-        return;                          // scope 0 at $DIR/retag.rs:43:6: 43:6\n+        return;                          // scope 0 at $DIR/retag.rs:40:48: 40:48\n     }\n }"}, {"sha": "89b1ded7f932f6be9262642fcde96891f14619e6", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -121,7 +121,7 @@ fn main() -> () {\n                                          // ]\n         Retag(_14);                      // scope 1 at $DIR/retag.rs:40:31: 43:6\n         _13 = move _14 as for<'r> fn(&'r i32) -> &'r i32 (Pointer(ClosureFnPointer(Normal))); // scope 1 at $DIR/retag.rs:40:31: 43:6\n-        StorageDead(_14);                // scope 1 at $DIR/retag.rs:43:5: 43:6\n+        StorageDead(_14);                // scope 1 at $DIR/retag.rs:40:47: 40:48\n         StorageLive(_15);                // scope 6 at $DIR/retag.rs:44:9: 44:11\n         StorageLive(_16);                // scope 6 at $DIR/retag.rs:44:14: 44:15\n         _16 = _13;                       // scope 6 at $DIR/retag.rs:44:14: 44:15"}, {"sha": "d9ca25519dc8a7b43473be4aba65cd3e36c89a0e", "filename": "src/test/ui/asm/x86_64/type-check-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -30,7 +30,7 @@ LL |         asm!(\"{}\", in(xmm_reg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n    |\n    = note: `SimdNonCopy` does not implement the Copy trait\n \n-error: cannot use value of type `[closure@$DIR/type-check-2.rs:52:28: 52:38]` for inline assembly\n+error: cannot use value of type `[closure@$DIR/type-check-2.rs:52:28: 52:36]` for inline assembly\n   --> $DIR/type-check-2.rs:52:28\n    |\n LL |         asm!(\"{}\", in(reg) |x: i32| x);"}, {"sha": "9b6917df45d2f9b3653c8855dc6383e2fd5c6c80", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -9,11 +9,8 @@ LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n note: required because it's used within this closure\n   --> $DIR/issue-70935-complex-spans.rs:25:13\n    |\n-LL |           baz(|| async{\n-   |  _____________^\n-LL | |             foo(tx.clone());\n-LL | |         }).await;\n-   | |_________^\n+LL |         baz(|| async{\n+   |             ^^\n note: required because it's used within this `async fn` body\n   --> $DIR/issue-70935-complex-spans.rs:9:67\n    |"}, {"sha": "88b646d2792db8a088c111d343e7646c13f27e74", "filename": "src/test/ui/async-await/issue-70935-complex-spans.normal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.normal.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -14,7 +14,7 @@ LL | |             foo(tx.clone());\n LL | |         }).await;\n    | |         - ^^^^^^ await occurs here, with the value maybe used later\n    | |_________|\n-   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:25:13: 27:10]` which is not `Send`\n+   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:25:13: 25:15]` which is not `Send`\n note: the value is later dropped here\n   --> $DIR/issue-70935-complex-spans.rs:27:17\n    |"}, {"sha": "5cbbf89a222a7fcb4b7a08c19c08b15878766d0b", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -24,15 +24,15 @@ LL | fn main() {\n LL |     (|_| 2333).await;\n    |               ^^^^^^ only allowed inside `async` functions and blocks\n \n-error[E0277]: `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n+error[E0277]: `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]` is not a future\n   --> $DIR/issue-62009-1.rs:12:15\n    |\n LL |     (|_| 2333).await;\n-   |               ^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n+   |               ^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]` is not a future\n    |\n-   = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n-   = note: [closure@$DIR/issue-62009-1.rs:12:5: 12:15] must be a future or must implement `IntoFuture` to be awaited\n-   = note: required because of the requirements on the impl of `IntoFuture` for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n+   = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]`\n+   = note: [closure@$DIR/issue-62009-1.rs:12:6: 12:9] must be a future or must implement `IntoFuture` to be awaited\n+   = note: required because of the requirements on the impl of `IntoFuture` for `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]`\n help: remove the `.await`\n    |\n LL -     (|_| 2333).await;"}, {"sha": "37bad64c5bf68582efccf225470cfdb6e660e38d", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -7,7 +7,7 @@ LL |     |y| x + y\n    |     ^^^^^^^^^ expected `()`, found closure\n    |\n    = note: expected unit type `()`\n-                found closure `[closure@$DIR/issue-20862.rs:2:5: 2:14]`\n+                found closure `[closure@$DIR/issue-20862.rs:2:5: 2:8]`\n \n error[E0618]: expected function, found `()`\n   --> $DIR/issue-20862.rs:7:13"}, {"sha": "6235e0db0da1895357e805e7607e658f07f7b3b0", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation-impl-trait.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation-impl-trait.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,15 +1,13 @@\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation-impl-trait.rs:11:9\n    |\n-LL |   fn bar() -> impl Fn() -> usize {\n-   |      ---      ------------------ change this to return `FnMut` instead of `Fn`\n-LL |       let mut x = 0;\n-LL | /     move || {\n-LL | |         x += 1;\n-   | |         ^^^^^^ cannot assign\n-LL | |         x\n-LL | |     }\n-   | |_____- in this closure\n+LL | fn bar() -> impl Fn() -> usize {\n+   |    ---      ------------------ change this to return `FnMut` instead of `Fn`\n+LL |     let mut x = 0;\n+LL |     move || {\n+   |     ------- in this closure\n+LL |         x += 1;\n+   |         ^^^^^^ cannot assign\n \n error: aborting due to previous error\n "}, {"sha": "3b06ed5e80580587f268b02b7c1174616d308356", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -67,16 +67,13 @@ LL |             to_fn(move || z = 42);\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:53:9\n    |\n-LL |   fn foo() -> Box<dyn Fn() -> usize> {\n-   |      ---      ---------------------- change this to return `FnMut` instead of `Fn`\n-LL |       let mut x = 0;\n-LL |       Box::new(move || {\n-   |  ______________-\n-LL | |         x += 1;\n-   | |         ^^^^^^ cannot assign\n-LL | |         x\n-LL | |     })\n-   | |_____- in this closure\n+LL | fn foo() -> Box<dyn Fn() -> usize> {\n+   |    ---      ---------------------- change this to return `FnMut` instead of `Fn`\n+LL |     let mut x = 0;\n+LL |     Box::new(move || {\n+   |              ------- in this closure\n+LL |         x += 1;\n+   |         ^^^^^^ cannot assign\n \n error: aborting due to 7 previous errors\n "}, {"sha": "50513cac2c59eef05cb62c800a2f8f3e18fcff8c", "filename": "src/test/ui/borrowck/borrow-raw-address-of-mutability.stderr", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -29,32 +29,24 @@ LL |     f();\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-raw-address-of-mutability.rs:29:17\n    |\n-LL |   fn make_fn<F: Fn()>(f: F) -> F { f }\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn make_fn<F: Fn()>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       let f = make_fn(|| {\n-   |  _____________-------_-\n-   | |             |\n-   | |             expects `Fn` instead of `FnMut`\n-LL | |         let y = &raw mut x;\n-   | |                 ^^^^^^^^^^ cannot borrow as mutable\n-LL | |     });\n-   | |_____- in this closure\n+LL |     let f = make_fn(|| {\n+   |             ------- expects `Fn` instead of `FnMut`\n+LL |         let y = &raw mut x;\n+   |                 ^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-raw-address-of-mutability.rs:37:17\n    |\n-LL |   fn make_fn<F: Fn()>(f: F) -> F { f }\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn make_fn<F: Fn()>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       let f = make_fn(move || {\n-   |  _____________-------_-\n-   | |             |\n-   | |             expects `Fn` instead of `FnMut`\n-LL | |         let y = &raw mut x;\n-   | |                 ^^^^^^^^^^ cannot borrow as mutable\n-LL | |     });\n-   | |_____- in this closure\n+LL |     let f = make_fn(move || {\n+   |             ------- expects `Fn` instead of `FnMut`\n+LL |         let y = &raw mut x;\n+   |                 ^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 5 previous errors\n "}, {"sha": "2033e4a5730146feae6d47b356500d547fb5ea53", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -4,9 +4,8 @@ error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n LL |     let x = Box::new(0);\n    |         - captured outer variable\n LL |     Box::new(|| x)\n-   |              ---^\n-   |              |  |\n-   |              |  move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |              -- ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |              |\n    |              captured by this `Fn` closure\n \n error: aborting due to previous error"}, {"sha": "8ddc48b2a99cdf0711a8f7812e1f1c4f9c2ee49f", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,18 +1,16 @@\n error[E0507]: cannot move out of `bar`, a captured variable in an `FnMut` closure\n   --> $DIR/borrowck-move-by-capture.rs:9:29\n    |\n-LL |       let bar: Box<_> = Box::new(3);\n-   |           --- captured outer variable\n-LL |       let _g = to_fn_mut(|| {\n-   |  ________________________-\n-LL | |         let _h = to_fn_once(move || -> isize { *bar });\n-   | |                             ^^^^^^^^^^^^^^^^   ----\n-   | |                             |                  |\n-   | |                             |                  variable moved due to use in closure\n-   | |                             |                  move occurs because `bar` has type `Box<isize>`, which does not implement the `Copy` trait\n-   | |                             move out of `bar` occurs here\n-LL | |     });\n-   | |_____- captured by this `FnMut` closure\n+LL |     let bar: Box<_> = Box::new(3);\n+   |         --- captured outer variable\n+LL |     let _g = to_fn_mut(|| {\n+   |                        -- captured by this `FnMut` closure\n+LL |         let _h = to_fn_once(move || -> isize { *bar });\n+   |                             ^^^^^^^^^^^^^^^^   ----\n+   |                             |                  |\n+   |                             |                  variable moved due to use in closure\n+   |                             |                  move occurs because `bar` has type `Box<isize>`, which does not implement the `Copy` trait\n+   |                             move out of `bar` occurs here\n \n error: aborting due to previous error\n "}, {"sha": "d98b3bae4e0b343f097e5c59d99b0d2c1b90a46b", "filename": "src/test/ui/borrowck/issue-53432-nested-closure-outlives-borrowed-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -4,7 +4,7 @@ error: lifetime may not live long enough\n LL |     let _action = move || {\n    |                   -------\n    |                   |     |\n-   |                   |     return type of closure `[closure@$DIR/issue-53432-nested-closure-outlives-borrowed-value.rs:4:9: 4:15]` contains a lifetime `'2`\n+   |                   |     return type of closure `[closure@$DIR/issue-53432-nested-closure-outlives-borrowed-value.rs:4:9: 4:11]` contains a lifetime `'2`\n    |                   lifetime `'1` represents this closure's body\n LL |         || f() // The `nested` closure\n    |         ^^^^^^ returning this value requires that `'1` must outlive `'2`"}, {"sha": "1acabefb893e3ce43699981a2a4b04c30d03676f", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -8,7 +8,7 @@ LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/issue-81899.rs:12:5\n-   |     inside `f::<[closure@$DIR/issue-81899.rs:4:31: 4:37]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |     inside `f::<[closure@$DIR/issue-81899.rs:4:31: 4:34]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "039575a8d79a5633b3e37c6f0273760a4289a8d8", "filename": "src/test/ui/borrowck/issue-87456-point-to-closure.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,21 +1,17 @@\n error[E0507]: cannot move out of `val`, a captured variable in an `FnMut` closure\n   --> $DIR/issue-87456-point-to-closure.rs:10:28\n    |\n-LL |       let val = String::new();\n-   |           --- captured outer variable\n+LL |     let val = String::new();\n+   |         --- captured outer variable\n LL |\n-LL |       take_mut(|| {\n-   |  ______________-\n-LL | |\n-LL | |         let _foo: String = val;\n-   | |                            ^^^\n-   | |                            |\n-   | |                            move occurs because `val` has type `String`, which does not implement the `Copy` trait\n-   | |                            help: consider borrowing here: `&val`\n-LL | |\n-LL | |\n-LL | |     })\n-   | |_____- captured by this `FnMut` closure\n+LL |     take_mut(|| {\n+   |              -- captured by this `FnMut` closure\n+LL |\n+LL |         let _foo: String = val;\n+   |                            ^^^\n+   |                            |\n+   |                            move occurs because `val` has type `String`, which does not implement the `Copy` trait\n+   |                            help: consider borrowing here: `&val`\n \n error: aborting due to previous error\n "}, {"sha": "c7b5d773e82595a125739be7af33f94079669e65", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -8,7 +8,7 @@ LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:11:5\n-   |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:31]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:28]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "f4bb895e6b5a07498d2fe12b615ccd4ddabe3802", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -8,7 +8,7 @@ LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:11:5\n-   |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:37]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:34]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "86557145c3b0788961ae9a784d675412d90a0c2a", "filename": "src/test/ui/borrowck/mutability-errors.stderr", "status": "modified", "additions": 54, "deletions": 104, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -119,146 +119,96 @@ LL |     &mut (*f()).0;\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:40:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       fn_ref(|| {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         x = (1,);\n-   | |         ^^^^^^^^ cannot assign\n-LL | |         x.0 = 1;\n-LL | |         &mut x;\n-LL | |         &mut x.0;\n-LL | |     });\n-   | |_____- in this closure\n+LL |     fn_ref(|| {\n+   |     ------ expects `Fn` instead of `FnMut`\n+LL |         x = (1,);\n+   |         ^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x.0`, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:41:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       fn_ref(|| {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         x = (1,);\n-LL | |         x.0 = 1;\n-   | |         ^^^^^^^ cannot assign\n-LL | |         &mut x;\n-LL | |         &mut x.0;\n-LL | |     });\n-   | |_____- in this closure\n+LL |     fn_ref(|| {\n+   |     ------ expects `Fn` instead of `FnMut`\n+LL |         x = (1,);\n+LL |         x.0 = 1;\n+   |         ^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:42:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n+...\n+LL |     fn_ref(|| {\n+   |     ------ expects `Fn` instead of `FnMut`\n ...\n-LL |       fn_ref(|| {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         x = (1,);\n-LL | |         x.0 = 1;\n-LL | |         &mut x;\n-   | |         ^^^^^^ cannot borrow as mutable\n-LL | |         &mut x.0;\n-LL | |     });\n-   | |_____- in this closure\n+LL |         &mut x;\n+   |         ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:43:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n+...\n+LL |     fn_ref(|| {\n+   |     ------ expects `Fn` instead of `FnMut`\n ...\n-LL |       fn_ref(|| {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         x = (1,);\n-LL | |         x.0 = 1;\n-LL | |         &mut x;\n-LL | |         &mut x.0;\n-   | |         ^^^^^^^^ cannot borrow as mutable\n-LL | |     });\n-   | |_____- in this closure\n+LL |         &mut x.0;\n+   |         ^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:46:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       fn_ref(move || {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         x = (1,);\n-   | |         ^^^^^^^^ cannot assign\n-LL | |         x.0 = 1;\n-LL | |         &mut x;\n-LL | |         &mut x.0;\n-LL | |     });\n-   | |_____- in this closure\n+LL |     fn_ref(move || {\n+   |     ------ expects `Fn` instead of `FnMut`\n+LL |         x = (1,);\n+   |         ^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x.0`, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:47:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       fn_ref(move || {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         x = (1,);\n-LL | |         x.0 = 1;\n-   | |         ^^^^^^^ cannot assign\n-LL | |         &mut x;\n-LL | |         &mut x.0;\n-LL | |     });\n-   | |_____- in this closure\n+LL |     fn_ref(move || {\n+   |     ------ expects `Fn` instead of `FnMut`\n+LL |         x = (1,);\n+LL |         x.0 = 1;\n+   |         ^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:48:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n+...\n+LL |     fn_ref(move || {\n+   |     ------ expects `Fn` instead of `FnMut`\n ...\n-LL |       fn_ref(move || {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         x = (1,);\n-LL | |         x.0 = 1;\n-LL | |         &mut x;\n-   | |         ^^^^^^ cannot borrow as mutable\n-LL | |         &mut x.0;\n-LL | |     });\n-   | |_____- in this closure\n+LL |         &mut x;\n+   |         ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:49:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n+...\n+LL |     fn_ref(move || {\n+   |     ------ expects `Fn` instead of `FnMut`\n ...\n-LL |       fn_ref(move || {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         x = (1,);\n-LL | |         x.0 = 1;\n-LL | |         &mut x;\n-LL | |         &mut x.0;\n-   | |         ^^^^^^^^ cannot borrow as mutable\n-LL | |     });\n-   | |_____- in this closure\n+LL |         &mut x.0;\n+   |         ^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:54:5"}, {"sha": "0c151b097077ec0475c6669fedf1fa9c8ffec71f", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,17 +1,14 @@\n error[E0507]: cannot move out of `y`, a captured variable in an `Fn` closure\n   --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:11:9\n    |\n-LL |       let y = vec![format!(\"World\")];\n-   |           - captured outer variable\n-LL |       call(|| {\n-   |  __________-\n-LL | |         y.into_iter();\n-   | |         ^ ----------- `y` moved due to this method call\n-   | |         |\n-   | |         move occurs because `y` has type `Vec<String>`, which does not implement the `Copy` trait\n-LL | |\n-LL | |     });\n-   | |_____- captured by this `Fn` closure\n+LL |     let y = vec![format!(\"World\")];\n+   |         - captured outer variable\n+LL |     call(|| {\n+   |          -- captured by this `Fn` closure\n+LL |         y.into_iter();\n+   |         ^ ----------- `y` moved due to this method call\n+   |         |\n+   |         move occurs because `y` has type `Vec<String>`, which does not implement the `Copy` trait\n    |\n note: this function takes ownership of the receiver `self`, which moves `y`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL"}, {"sha": "d7104bafeb1d0e627b4bd982e0eefa61a44b4637", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ error: changes to closure capture in Rust 2021 will affect which traits the clos\n   --> $DIR/auto_traits.rs:22:19\n    |\n LL |     thread::spawn(move || unsafe {\n-   |                   ^^^^^^^^^^^^^^ in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` because `fptr` is not fully captured and `fptr.0` does not implement `Send`\n+   |                   ^^^^^^^ in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` because `fptr` is not fully captured and `fptr.0` does not implement `Send`\n ...\n LL |         *fptr.0 = 20;\n    |         ------- in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0`\n@@ -26,7 +26,7 @@ error: changes to closure capture in Rust 2021 will affect which traits the clos\n   --> $DIR/auto_traits.rs:42:19\n    |\n LL |     thread::spawn(move || unsafe {\n-   |                   ^^^^^^^^^^^^^^\n+   |                   ^^^^^^^\n    |                   |\n    |                   in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` because `fptr` is not fully captured and `fptr.0.0` does not implement `Send`\n    |                   in Rust 2018, this closure implements `Sync` as `fptr` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` because `fptr` is not fully captured and `fptr.0.0` does not implement `Sync`"}, {"sha": "c611daf13fda49e7d15a95a444339265d98419b3", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/closure-body-macro-fragment.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,14 +2,10 @@ warning: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/closure-body-macro-fragment.rs:16:17\n    |\n LL |           let f = || $body;\n-   |  _________________^\n-LL | |\n-LL | |         f();\n-LL | |     }};\n-   | |     - in Rust 2018, `a` is dropped here, but in Rust 2021, only `a.0` will be dropped here as part of the closure\n-LL | |     ($body:block) => {{\n-LL | |         m!(@ $body);\n-   | |__________________^\n+   |                   ^^\n+...\n+LL |       }};\n+   |       - in Rust 2018, `a` is dropped here, but in Rust 2021, only `a.0` will be dropped here as part of the closure\n ...\n LL | /     m!({\n LL | |"}, {"sha": "2d0c56aad8d6289361824ed42b9e7bb457b2b0cd", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/macro.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,9 +2,7 @@ error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/macro.rs:19:13\n    |\n LL |     let _ = || dbg!(a.0);\n-   |             ^^^^^^^^---^\n-   |                     |\n-   |                     in Rust 2018, this closure captures all of `a`, but in Rust 2021, it will only capture `a.0`\n+   |             ^^      --- in Rust 2018, this closure captures all of `a`, but in Rust 2021, it will only capture `a.0`\n ...\n LL | }\n    | - in Rust 2018, `a` is dropped here, but in Rust 2021, only `a.0` will be dropped here as part of the closure"}, {"sha": "12760cc7256c91fa8ded5750079fde9592d62e0d", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -26,9 +26,7 @@ error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/migrations_rustfix.rs:33:13\n    |\n LL |     let c = || t.0;\n-   |             ^^^---\n-   |                |\n-   |                in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n+   |             ^^ --- in Rust 2018, this closure captures all of `t`, but in Rust 2021, it will only capture `t.0`\n ...\n LL | }\n    | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure"}, {"sha": "96d5c936fa593bd05f38bf924e7f4f7b9450168d", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -92,7 +92,7 @@ error: changes to closure capture in Rust 2021 will affect which traits the clos\n   --> $DIR/multi_diagnostics.rs:133:19\n    |\n LL |     thread::spawn(move || unsafe {\n-   |                   ^^^^^^^^^^^^^^\n+   |                   ^^^^^^^\n    |                   |\n    |                   in Rust 2018, this closure implements `Send` as `fptr1` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` because `fptr1` is not fully captured and `fptr1.0.0` does not implement `Send`\n    |                   in Rust 2018, this closure implements `Sync` as `fptr1` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` because `fptr1` is not fully captured and `fptr1.0.0` does not implement `Sync`"}, {"sha": "0d9f09ee354edaddcefd8d29fba22480b0d2da3a", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -199,9 +199,7 @@ error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:201:18\n    |\n LL |         let _c = || tup.0;\n-   |                  ^^^-----\n-   |                     |\n-   |                     in Rust 2018, this closure captures all of `tup`, but in Rust 2021, it will only capture `tup.0`\n+   |                  ^^ ----- in Rust 2018, this closure captures all of `tup`, but in Rust 2021, it will only capture `tup.0`\n ...\n LL | }\n    | - in Rust 2018, `tup` is dropped here, but in Rust 2021, only `tup.0` will be dropped here as part of the closure"}, {"sha": "1086cfa2947a9ae3fb15adda6500f5b1fd7a88b7", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -9,12 +9,8 @@ LL |     let t = thread::spawn(|| {\n note: required because it's used within this closure\n   --> $DIR/closure-move-sync.rs:6:27\n    |\n-LL |       let t = thread::spawn(|| {\n-   |  ___________________________^\n-LL | |         recv.recv().unwrap();\n-LL | |\n-LL | |     });\n-   | |_____^\n+LL |     let t = thread::spawn(|| {\n+   |                           ^^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |\n@@ -33,7 +29,7 @@ note: required because it's used within this closure\n   --> $DIR/closure-move-sync.rs:18:19\n    |\n LL |     thread::spawn(|| tx.send(()).unwrap());\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |"}, {"sha": "eab7482e6c4a1817606f72e1e754b7e3ab7730ee", "filename": "src/test/ui/closures/closure-no-fn-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -7,7 +7,7 @@ LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n    |              expected due to this\n    |\n    = note: expected fn pointer `fn(u8) -> u8`\n-                 found closure `[closure@$DIR/closure-no-fn-1.rs:6:29: 6:50]`\n+                 found closure `[closure@$DIR/closure-no-fn-1.rs:6:29: 6:36]`\n note: closures can only be coerced to `fn` types if they do not capture any variables\n   --> $DIR/closure-no-fn-1.rs:6:39\n    |"}, {"sha": "e1f0143abfe0aa3d01c7b61df22f4c66cb46783f", "filename": "src/test/ui/closures/closure-no-fn-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -7,7 +7,7 @@ LL |     let bar: fn() -> u8 = || { b };\n    |              expected due to this\n    |\n    = note: expected fn pointer `fn() -> u8`\n-                 found closure `[closure@$DIR/closure-no-fn-2.rs:6:27: 6:35]`\n+                 found closure `[closure@$DIR/closure-no-fn-2.rs:6:27: 6:29]`\n note: closures can only be coerced to `fn` types if they do not capture any variables\n   --> $DIR/closure-no-fn-2.rs:6:32\n    |"}, {"sha": "6009389b1bb2c5739d90d8b264a3591562eedf5e", "filename": "src/test/ui/closures/closure-no-fn-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-3.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,4 +1,4 @@\n-error[E0605]: non-primitive cast: `[closure@$DIR/closure-no-fn-3.rs:6:27: 6:37]` as `fn() -> u8`\n+error[E0605]: non-primitive cast: `[closure@$DIR/closure-no-fn-3.rs:6:28: 6:30]` as `fn() -> u8`\n   --> $DIR/closure-no-fn-3.rs:6:27\n    |\n LL |     let baz: fn() -> u8 = (|| { b }) as fn() -> u8;"}, {"sha": "d1b7048841a42208cbecf55646179538b478bea3", "filename": "src/test/ui/closures/closure-no-fn-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -12,7 +12,7 @@ LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n    = note: expected fn pointer `fn(usize) -> usize`\n-                 found closure `[closure@$DIR/closure-no-fn-4.rs:5:18: 5:27]`\n+                 found closure `[closure@$DIR/closure-no-fn-4.rs:5:18: 5:21]`\n note: closures can only be coerced to `fn` types if they do not capture any variables\n   --> $DIR/closure-no-fn-4.rs:5:26\n    |"}, {"sha": "a33b847ea92d9ad65a80f598480476bcf1229356", "filename": "src/test/ui/closures/closure-no-fn-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -7,7 +7,7 @@ LL |     let bar: fn() -> u8 = || { a; b; c; d; e };\n    |              expected due to this\n    |\n    = note: expected fn pointer `fn() -> u8`\n-                 found closure `[closure@$DIR/closure-no-fn-5.rs:10:27: 10:47]`\n+                 found closure `[closure@$DIR/closure-no-fn-5.rs:10:27: 10:29]`\n note: closures can only be coerced to `fn` types if they do not capture any variables\n   --> $DIR/closure-no-fn-5.rs:10:32\n    |"}, {"sha": "9dfff8499fdddf4fe4e771893fb801fbacd177fc", "filename": "src/test/ui/closures/closure-reform-bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,14 +2,14 @@ error[E0308]: mismatched types\n   --> $DIR/closure-reform-bad.rs:11:15\n    |\n LL |     let f = |s: &str| println!(\"{}{}\", s, string);\n-   |             ------------------------------------- the found closure\n+   |             --------- the found closure\n LL |     call_bare(f)\n    |     --------- ^ expected fn pointer, found closure\n    |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected fn pointer `for<'r> fn(&'r str)`\n-                 found closure `[closure@$DIR/closure-reform-bad.rs:10:13: 10:50]`\n+                 found closure `[closure@$DIR/closure-reform-bad.rs:10:13: 10:22]`\n note: closures can only be coerced to `fn` types if they do not capture any variables\n   --> $DIR/closure-reform-bad.rs:10:43\n    |"}, {"sha": "35caf71a5e8c78446b58da82bc2db3dc91d7569b", "filename": "src/test/ui/closures/closure-wrong-kind.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-wrong-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure-wrong-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-wrong-kind.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,9 +2,8 @@ error[E0525]: expected a closure that implements the `Fn` trait, but this closur\n   --> $DIR/closure-wrong-kind.rs:10:19\n    |\n LL |     let closure = |_| foo(x);\n-   |                   ^^^^^^^^-^\n-   |                   |       |\n-   |                   |       closure is `FnOnce` because it moves the variable `x` out of its environment\n+   |                   ^^^     - closure is `FnOnce` because it moves the variable `x` out of its environment\n+   |                   |\n    |                   this closure implements `FnOnce`, not `Fn`\n LL |     bar(closure);\n    |     --- the requirement to implement `Fn` derives from here"}, {"sha": "ca8a43328a9e40fe3ea1cec4344fa4262bf2f01f", "filename": "src/test/ui/closures/closure_cap_coerce_many_fail.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -12,7 +12,7 @@ LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n    = note: expected fn item `fn(i32, i32) -> i32 {add}`\n-              found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:9:16: 9:43]`\n+              found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:9:16: 9:22]`\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/closure_cap_coerce_many_fail.rs:18:16\n@@ -23,15 +23,15 @@ LL | |         \"+\" => |a, b| (a + b) as i32,\n    | |                ---------------------\n    | |                |\n    | |                the expected closure\n-   | |                this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:17:16: 17:37]`\n+   | |                this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:17:16: 17:22]`\n LL | |         \"-\" => |a, b| (a - b + cap) as i32,\n    | |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected closure, found a different closure\n LL | |         _ => unimplemented!(),\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:17:16: 17:37]`\n-              found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:18:16: 18:43]`\n+   = note: expected closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:17:16: 17:22]`\n+              found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:18:16: 18:22]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n \n@@ -44,15 +44,15 @@ LL | |         \"+\" => |a, b| (a + b + cap) as i32,\n    | |                ---------------------------\n    | |                |\n    | |                the expected closure\n-   | |                this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:43]`\n+   | |                this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:22]`\n LL | |         \"-\" => |a, b| (a - b) as i32,\n    | |                ^^^^^^^^^^^^^^^^^^^^^ expected closure, found a different closure\n LL | |         _ => unimplemented!(),\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:43]`\n-              found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:27:16: 27:37]`\n+   = note: expected closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:22]`\n+              found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:27:16: 27:22]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n \n@@ -65,15 +65,15 @@ LL | |         \"+\" => |a, b| (a + b + cap) as i32,\n    | |                ---------------------------\n    | |                |\n    | |                the expected closure\n-   | |                this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:43]`\n+   | |                this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:22]`\n LL | |         \"-\" => |a, b| (a - b + cap) as i32,\n    | |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected closure, found a different closure\n LL | |         _ => unimplemented!(),\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:43]`\n-              found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:35:16: 35:43]`\n+   = note: expected closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:22]`\n+              found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:35:16: 35:22]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n "}, {"sha": "b21734f02576701d58ae445e38675f579384edc5", "filename": "src/test/ui/closures/print/closure-print-generic-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-1.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value: `c`\n   --> $DIR/closure-print-generic-1.rs:17:5\n    |\n LL |     let c = to_fn_once(move || {\n-   |         - move occurs because `c` has type `[closure@$DIR/closure-print-generic-1.rs:12:24: 14:6]`, which does not implement the `Copy` trait\n+   |         - move occurs because `c` has type `[closure@$DIR/closure-print-generic-1.rs:12:24: 12:31]`, which does not implement the `Copy` trait\n ...\n LL |     c();\n    |     --- `c` moved due to this call"}, {"sha": "e53277a9396f3fcab31717fdb34e45c8ee0184a2", "filename": "src/test/ui/closures/print/closure-print-generic-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-2.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,14 +2,14 @@ error[E0308]: mismatched types\n   --> $DIR/closure-print-generic-2.rs:6:22\n    |\n LL |         let c = || println!(\"{} {}\", t, x);\n-   |                 -------------------------- the found closure\n+   |                 -- the found closure\n LL |         let c1: () = c;\n    |                 --   ^ expected `()`, found closure\n    |                 |\n    |                 expected due to this\n    |\n    = note: expected unit type `()`\n-                found closure `[closure@$DIR/closure-print-generic-2.rs:5:17: 5:43]`\n+                found closure `[closure@$DIR/closure-print-generic-2.rs:5:17: 5:19]`\n help: use parentheses to call this closure\n    |\n LL |         let c1: () = c();"}, {"sha": "ff89dd340349b81ef11f9e0a720c8f790923b8bf", "filename": "src/test/ui/closures/print/closure-print-generic-trim-off-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/closure-print-generic-trim-off-verbose-2.rs:9:23\n    |\n LL |         let c = || println!(\"{} {}\", t, x);\n-   |                 -------------------------- the found closure\n+   |                 -- the found closure\n LL |         let c1 : () = c;\n    |                  --   ^ expected `()`, found closure\n    |                  |"}, {"sha": "5bbf84f963d7e5ece9340f483a76c268ad907afc", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/closure-print-generic-verbose-2.rs:9:23\n    |\n LL |         let c = || println!(\"{} {}\", t, x);\n-   |                 -------------------------- the found closure\n+   |                 -- the found closure\n LL |         let c1 : () = c;\n    |                  --   ^ expected `()`, found closure\n    |                  |"}, {"sha": "9d614e610ad86fd1fedabd237d7b149804c9d95f", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -32,7 +32,7 @@ LL |     let _ = box { |x| (x as u8) }: Box<dyn Fn(i32) -> _>;\n    |             ^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n    |\n    = note: expected struct `Box<dyn Fn(i32) -> u8>`\n-              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:19: 13:32]>`\n+              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:19: 13:22]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:14:13\n@@ -86,7 +86,7 @@ LL |     let _ = &{ |x| (x as u8) }: &dyn Fn(i32) -> _;\n    |             ^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n    |\n    = note: expected reference `&dyn Fn(i32) -> u8`\n-              found reference `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:16: 21:29]`\n+              found reference `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:16: 21:19]`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:22:13\n@@ -122,7 +122,7 @@ LL |     let _ = Box::new(|x| (x as u8)): Box<dyn Fn(i32) -> _>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n    |\n    = note: expected struct `Box<dyn Fn(i32) -> u8>`\n-              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:22: 26:35]>`\n+              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:22: 26:25]>`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "34debb6831734568330e7b6d8ccfaa32ae753e3f", "filename": "src/test/ui/confuse-field-and-method/issue-33784.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `closure` found for reference `&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:48]>` in the current scope\n+error[E0599]: no method named `closure` found for reference `&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:45]>` in the current scope\n   --> $DIR/issue-33784.rs:27:7\n    |\n LL |     p.closure();\n@@ -9,7 +9,7 @@ help: to call the function stored in `closure`, surround the field access with p\n LL |     (p.closure)();\n    |     +         +\n \n-error[E0599]: no method named `fn_ptr` found for reference `&&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:48]>` in the current scope\n+error[E0599]: no method named `fn_ptr` found for reference `&&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:45]>` in the current scope\n   --> $DIR/issue-33784.rs:29:7\n    |\n LL |     q.fn_ptr();"}, {"sha": "06e29daef456ce7802d8eb0ad7111b461ce1c6bc", "filename": "src/test/ui/functions-closures/fn-help-with-err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -10,11 +10,11 @@ error[E0599]: no method named `blablabla` found for struct `Arc<_>` in the curre\n LL |     arc.blablabla();\n    |         ^^^^^^^^^ method not found in `Arc<_>`\n \n-error[E0599]: no method named `blablabla` found for struct `Arc<[closure@$DIR/fn-help-with-err.rs:10:36: 10:40]>` in the current scope\n+error[E0599]: no method named `blablabla` found for struct `Arc<[closure@$DIR/fn-help-with-err.rs:10:36: 10:38]>` in the current scope\n   --> $DIR/fn-help-with-err.rs:12:10\n    |\n LL |     arc2.blablabla();\n-   |     ---- ^^^^^^^^^ method not found in `Arc<[closure@$DIR/fn-help-with-err.rs:10:36: 10:40]>`\n+   |     ---- ^^^^^^^^^ method not found in `Arc<[closure@$DIR/fn-help-with-err.rs:10:36: 10:38]>`\n    |     |\n    |     this is a function, perhaps you wish to call it\n "}, {"sha": "5bc6ea5600fc58769414aded57d688f22a1261c0", "filename": "src/test/ui/generator/drop-yield-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -4,7 +4,7 @@ error: generator cannot be sent between threads safely\n LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/drop-yield-twice.rs:7:17: 12:6]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/drop-yield-twice.rs:7:17: 7:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n   --> $DIR/drop-yield-twice.rs:9:9\n    |"}, {"sha": "2a39a08ee39b26ff7e2d358508da7bd51c5b18e8", "filename": "src/test/ui/generator/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 19:6] as Generator>::Return == [generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 19:6]`\n+error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 15:36] as Generator>::Return == [generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 15:36]`\n   --> $DIR/generator-yielding-or-returning-itself.rs:15:5\n    |\n LL |     want_cyclic_generator_return(|| {\n@@ -16,7 +16,7 @@ LL | pub fn want_cyclic_generator_return<T>(_: T)\n LL |     where T: Generator<Yield = (), Return = T>\n    |                                    ^^^^^^^^^^ required by this bound in `want_cyclic_generator_return`\n \n-error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6] as Generator>::Yield == [generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6]`\n+error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 28:35] as Generator>::Yield == [generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 28:35]`\n   --> $DIR/generator-yielding-or-returning-itself.rs:28:5\n    |\n LL |     want_cyclic_generator_yield(|| {"}, {"sha": "1d5b97e984fd1d9a0552d624f1085533a354bea5", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -33,11 +33,8 @@ LL |     require_send(send_gen);\n note: required because it's used within this generator\n   --> $DIR/issue-68112.rs:48:5\n    |\n-LL | /     || {\n-LL | |         yield;\n-LL | |         t\n-LL | |     }\n-   | |_____^\n+LL |     || {\n+   |     ^^\n note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n   --> $DIR/issue-68112.rs:45:30\n    |\n@@ -52,12 +49,8 @@ LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>>\n note: required because it's used within this generator\n   --> $DIR/issue-68112.rs:59:20\n    |\n-LL |       let send_gen = || {\n-   |  ____________________^\n-LL | |         let _non_send_gen = make_non_send_generator2();\n-LL | |         yield;\n-LL | |     };\n-   | |_____^\n+LL |     let send_gen = || {\n+   |                    ^^\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:22:25\n    |"}, {"sha": "0b31bb4fdb1a0c6800614c8a498bb412398835a4", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -9,13 +9,8 @@ LL |     assert_send(|| {\n note: required because it's used within this generator\n   --> $DIR/not-send-sync.rs:16:17\n    |\n-LL |       assert_send(|| {\n-   |  _________________^\n-LL | |\n-LL | |         drop(&a);\n-LL | |         yield;\n-LL | |     });\n-   | |_____^\n+LL |     assert_send(|| {\n+   |                 ^^\n note: required by a bound in `assert_send`\n   --> $DIR/not-send-sync.rs:7:23\n    |\n@@ -28,7 +23,7 @@ error: generator cannot be shared between threads safely\n LL |     assert_sync(|| {\n    |     ^^^^^^^^^^^ generator is not `Sync`\n    |\n-   = help: within `[generator@$DIR/not-send-sync.rs:9:17: 13:6]`, the trait `Sync` is not implemented for `Cell<i32>`\n+   = help: within `[generator@$DIR/not-send-sync.rs:9:17: 9:19]`, the trait `Sync` is not implemented for `Cell<i32>`\n note: generator is not `Sync` as this value is used across a yield\n   --> $DIR/not-send-sync.rs:12:9\n    |"}, {"sha": "1004fc64da93ad980d8e957b8054862c3342a414", "filename": "src/test/ui/generator/partial-drop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -4,7 +4,7 @@ error: generator cannot be sent between threads safely\n LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/partial-drop.rs:14:17: 20:6]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/partial-drop.rs:14:17: 14:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n   --> $DIR/partial-drop.rs:19:9\n    |\n@@ -27,7 +27,7 @@ error: generator cannot be sent between threads safely\n LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/partial-drop.rs:22:17: 30:6]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/partial-drop.rs:22:17: 22:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n   --> $DIR/partial-drop.rs:29:9\n    |\n@@ -50,7 +50,7 @@ error: generator cannot be sent between threads safely\n LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/partial-drop.rs:32:17: 39:6]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/partial-drop.rs:32:17: 32:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n   --> $DIR/partial-drop.rs:38:9\n    |"}, {"sha": "5b61f1e8f2dc130df5243a4925951a951a1b36a2", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -31,11 +31,8 @@ LL |     require_send(send_gen);\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:42:5\n    |\n-LL | /     || {\n-LL | |         yield;\n-LL | |         t\n-LL | |     }\n-   | |_____^\n+LL |     || {\n+   |     ^^\n note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n   --> $DIR/generator-print-verbose-1.rs:41:30\n    |\n@@ -50,12 +47,8 @@ LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>>\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:52:20\n    |\n-LL |       let send_gen = || {\n-   |  ____________________^\n-LL | |         let _non_send_gen = make_non_send_generator2();\n-LL | |         yield;\n-LL | |     };\n-   | |_____^\n+LL |     let send_gen = || {\n+   |                    ^^\n note: required by a bound in `require_send`\n   --> $DIR/generator-print-verbose-1.rs:26:25\n    |"}, {"sha": "eb79d2e6eedbd90a5d00e77bfafc0b2d1e906cba", "filename": "src/test/ui/generator/print/generator-print-verbose-2.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -9,13 +9,8 @@ LL |     assert_send(|| {\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-2.rs:19:17\n    |\n-LL |       assert_send(|| {\n-   |  _________________^\n-LL | |\n-LL | |         drop(&a);\n-LL | |         yield;\n-LL | |     });\n-   | |_____^\n+LL |     assert_send(|| {\n+   |                 ^^\n note: required by a bound in `assert_send`\n   --> $DIR/generator-print-verbose-2.rs:10:23\n    |"}, {"sha": "e3859595fd2ce33002ad18721e3c8c9419e172cd", "filename": "src/test/ui/generator/static-not-unpin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6]` cannot be unpinned\n+error[E0277]: `[static generator@$DIR/static-not-unpin.rs:11:25: 11:34]` cannot be unpinned\n   --> $DIR/static-not-unpin.rs:14:18\n    |\n LL |     assert_unpin(generator);\n-   |     ------------ ^^^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6]`\n+   |     ------------ ^^^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:11:25: 11:34]`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "7938fc8097cd2d54267a1b1f4d59b82005ffa240", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -12,7 +12,7 @@ note: return type inferred to be `Result<{integer}, _>` here\n LL |             return Ok(6);\n    |                    ^^^^^\n \n-error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-deduction.rs:7:5: 15:6] as Generator>::Return == i32`\n+error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-deduction.rs:7:5: 7:7] as Generator>::Return == i32`\n   --> $DIR/type-mismatch-signature-deduction.rs:5:13\n    |\n LL | fn foo() -> impl Generator<Return = i32> {"}, {"sha": "c01ab8e347c6c11b3ab6a0490e93a05059962329", "filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -4,7 +4,7 @@ error: higher-ranked lifetime error\n LL |     v.t(|| {});\n    |     ^^^^^^^^^^\n    |\n-   = note: could not prove `[closure@$DIR/issue-59311.rs:17:9: 17:14] well-formed`\n+   = note: could not prove `[closure@$DIR/issue-59311.rs:17:9: 17:11] well-formed`\n \n error: higher-ranked lifetime error\n   --> $DIR/issue-59311.rs:17:9"}, {"sha": "eebce827d1cae5419ae94dcf1dd2702973e6ce2d", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -10,7 +10,7 @@ note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-71955.rs:45:24\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n-   |                        ^^^^^^^^^^^^^^^^\n+   |                        ^^^\n note: the lifetime requirement is introduced here\n   --> $DIR/issue-71955.rs:25:9\n    |\n@@ -29,7 +29,7 @@ note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-71955.rs:45:24\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n-   |                        ^^^^^^^^^^^^^^^^\n+   |                        ^^^\n note: the lifetime requirement is introduced here\n   --> $DIR/issue-71955.rs:25:44\n    |\n@@ -48,7 +48,7 @@ note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-71955.rs:48:24\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n-   |                        ^^^^^^^^^^^^^^^^^^\n+   |                        ^^^\n note: the lifetime requirement is introduced here\n   --> $DIR/issue-71955.rs:25:9\n    |\n@@ -67,7 +67,7 @@ note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-71955.rs:48:24\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n-   |                        ^^^^^^^^^^^^^^^^^^\n+   |                        ^^^\n note: the lifetime requirement is introduced here\n   --> $DIR/issue-71955.rs:25:44\n    |"}, {"sha": "2ed86dfc2366671a53f0edaf95989c68f90eb9f0", "filename": "src/test/ui/hrtb/issue-30786.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:36]>`, but its trait bounds were not satisfied\n+error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:34]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-30786.rs:118:22\n    |\n LL | pub struct Map<S, F> {\n@@ -8,12 +8,12 @@ LL | pub struct Map<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let filter = map.filterx(|x: &_| true);\n-   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:36]>` due to unsatisfied trait bounds\n+   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:34]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:36]>: Stream`\n-      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:36]>: Stream`\n-      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:36]>: Stream`\n+      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:34]>: Stream`\n+      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:34]>: Stream`\n+      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:34]>: Stream`\n   --> $DIR/issue-30786.rs:96:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n@@ -23,7 +23,7 @@ help: one of the expressions' fields has a method of the same name\n LL |     let filter = map.stream.filterx(|x: &_| true);\n    |                      +++++++\n \n-error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:42]>`, but its trait bounds were not satisfied\n+error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-30786.rs:130:24\n    |\n LL | pub struct Filter<S, F> {\n@@ -33,12 +33,12 @@ LL | pub struct Filter<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let count = filter.countx();\n-   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:42]>` due to unsatisfied trait bounds\n+   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:42]>: Stream`\n-      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:42]>: Stream`\n-      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:42]>: Stream`\n+      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>: Stream`\n+      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>: Stream`\n+      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:37]>: Stream`\n   --> $DIR/issue-30786.rs:96:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}"}, {"sha": "79ef56b9fa5cb5d49594db090a9599dafbafd621", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,8 +1,8 @@\n-error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n+error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:20]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:38:19\n    |\n LL |     let v = Unit2.m(\n-   |                   ^ type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n+   |                   ^ type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:20]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n    |\n note: expected this to be `<_ as Ty<'_>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:21:14\n@@ -22,7 +22,7 @@ LL |     where\n LL |         F: for<'r> T0<'r, (<Self as Ty<'r>>::V,), O = <B as Ty<'r>>::V>,\n    |                                                   ^^^^^^^^^^^^^^^^^^^^ required by this bound in `T1::m`\n \n-error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as FnOnce<((&'r u8,),)>>::Output == Unit3`\n+error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:20] as FnOnce<((&'r u8,),)>>::Output == Unit3`\n   --> $DIR/issue-62203-hrtb-ice.rs:40:9\n    |\n LL |       let v = Unit2.m(\n@@ -34,7 +34,7 @@ LL | |             f : |x| { drop(x); Unit4 }\n LL | |         });\n    | |_________^ expected struct `Unit3`, found struct `Unit4`\n    |\n-note: required because of the requirements on the impl of `for<'r> T0<'r, (&'r u8,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]>`\n+note: required because of the requirements on the impl of `for<'r> T0<'r, (&'r u8,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:20]>`\n   --> $DIR/issue-62203-hrtb-ice.rs:17:16\n    |\n LL | impl<'a, A, T> T0<'a, A> for L<T>"}, {"sha": "52fa28145d6648cfb9d131a971bd1df090929bd0", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -14,7 +14,7 @@ note: required because it's used within this closure\n   --> $DIR/auto-trait-leak2.rs:10:5\n    |\n LL |     move |x| p.set(x)\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^\n note: required because it appears within the type `impl Fn(i32)`\n   --> $DIR/auto-trait-leak2.rs:5:16\n    |\n@@ -42,7 +42,7 @@ note: required because it's used within this closure\n   --> $DIR/auto-trait-leak2.rs:38:5\n    |\n LL |     move |x| p.set(x)\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^\n note: required because it appears within the type `impl Fn(i32)`\n   --> $DIR/auto-trait-leak2.rs:33:15\n    |"}, {"sha": "5b05fb2810dff635554be485cc30b3e54faa16c6", "filename": "src/test/ui/impl-trait/issues/issue-74282.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -13,7 +13,7 @@ LL | |     })\n    | |_____^ expected closure, found a different closure\n    |\n    = note: expected opaque type `Closure`\n-                  found closure `[closure@$DIR/issue-74282.rs:8:15: 10:6]`\n+                  found closure `[closure@$DIR/issue-74282.rs:8:15: 8:17]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n note: tuple struct defined here"}, {"sha": "586563c39061e34b2a3256a1ebe4cccf0520756e", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -100,7 +100,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/must_outlive_least_region_or_bound.rs:38:5\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:38:5: 38:31]` captures the lifetime `'b` as defined here\n+   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:38:5: 38:13]` captures the lifetime `'b` as defined here\n LL |     move |_| println!(\"{}\", y)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "1079a86ce9e7345f504aa05a4ced95ac61ee008e", "filename": "src/test/ui/impl-trait/nested-return-type2-tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -5,7 +5,7 @@ LL | fn foo() -> impl Trait<Assoc = Sendable> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Duh` is not implemented for `Sendable`\n    |\n    = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait.rs:27:5: 27:10]`\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait.rs:27:5: 27:7]`\n   --> $DIR/nested-return-type2-tait.rs:14:31\n    |\n LL | impl<R: Duh, F: FnMut() -> R> Trait for F {"}, {"sha": "847b9400085313815233f834c27d13639eed6e73", "filename": "src/test/ui/impl-trait/nested-return-type2-tait2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -5,7 +5,7 @@ LL | fn foo() -> Traitable {\n    |             ^^^^^^^^^ the trait `Duh` is not implemented for `Sendable`\n    |\n    = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait2.rs:28:5: 28:10]`\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait2.rs:28:5: 28:7]`\n   --> $DIR/nested-return-type2-tait2.rs:14:31\n    |\n LL | impl<R: Duh, F: FnMut() -> R> Trait for F {"}, {"sha": "7b7f06b8e13e1d59f438d45275828156445d4e8a", "filename": "src/test/ui/impl-trait/nested-return-type2-tait3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -5,7 +5,7 @@ LL | fn foo() -> Traitable {\n    |             ^^^^^^^^^ the trait `Duh` is not implemented for `impl Send`\n    |\n    = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait3.rs:27:5: 27:10]`\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait3.rs:27:5: 27:7]`\n   --> $DIR/nested-return-type2-tait3.rs:14:31\n    |\n LL | impl<R: Duh, F: FnMut() -> R> Trait for F {"}, {"sha": "f28a084af89a427d6ba8515322ac7bea7645ffa6", "filename": "src/test/ui/impl-trait/nested-return-type2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -5,7 +5,7 @@ LL | fn foo() -> impl Trait<Assoc = impl Send> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Duh` is not implemented for `impl Send`\n    |\n    = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2.rs:23:5: 23:10]`\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2.rs:23:5: 23:7]`\n   --> $DIR/nested-return-type2.rs:12:31\n    |\n LL | impl<R: Duh, F: FnMut() -> R> Trait for F {"}, {"sha": "2e34d3d4275adef3a2fb335c362e233fe796b519", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-indirect.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -54,7 +54,7 @@ LL |   fn closure_capture() -> impl Sized {\n LL | /     move || {\n LL | |         x;\n LL | |     }\n-   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:35:5: 37:6]`\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:35:5: 35:12]`\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:40:29\n@@ -65,7 +65,7 @@ LL |   fn closure_ref_capture() -> impl Sized {\n LL | /     move || {\n LL | |         &x;\n LL | |     }\n-   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:43:5: 45:6]`\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:43:5: 43:12]`\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:48:21\n@@ -74,7 +74,7 @@ LL | fn closure_sig() -> impl Sized {\n    |                     ^^^^^^^^^^ recursive opaque type\n LL |\n LL |     || closure_sig()\n-   |     ---------------- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:21]`\n+   |     ---------------- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:7]`\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:53:23\n@@ -83,7 +83,7 @@ LL | fn generator_sig() -> impl Sized {\n    |                       ^^^^^^^^^^ recursive opaque type\n LL |\n LL |     || generator_sig()\n-   |     ------------------ returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:55:5: 55:23]`\n+   |     ------------------ returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:55:5: 55:7]`\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:58:27\n@@ -95,7 +95,7 @@ LL | /     move || {\n LL | |         yield;\n LL | |         x;\n LL | |     }\n-   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:61:5: 64:6]`\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:61:5: 61:12]`\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:67:35\n@@ -117,7 +117,7 @@ LL | |         let x = generator_hold();\n LL | |         yield;\n LL | |         x;\n LL | |     }\n-   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:74:5: 78:6]`\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:74:5: 74:12]`\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:86:26"}, {"sha": "951abb127c13fdbbb0164f5c7ae3ad19a84a2a1e", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/static-return-lifetime-infered.rs:7:9\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         ----- hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:7:27: 7:34]>` captures the anonymous lifetime defined here\n+   |                         ----- hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:7:27: 7:30]>` captures the anonymous lifetime defined here\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -15,7 +15,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/static-return-lifetime-infered.rs:7:9\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         ----- hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:7:27: 7:34]>` captures the anonymous lifetime defined here\n+   |                         ----- hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:7:27: 7:30]>` captures the anonymous lifetime defined here\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -28,7 +28,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/static-return-lifetime-infered.rs:12:9\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                    -- hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:12:27: 12:34]>` captures the lifetime `'a` as defined here\n+   |                    -- hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:12:27: 12:30]>` captures the lifetime `'a` as defined here\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -41,7 +41,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/static-return-lifetime-infered.rs:12:9\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                    -- hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:12:27: 12:34]>` captures the lifetime `'a` as defined here\n+   |                    -- hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:12:27: 12:30]>` captures the lifetime `'a` as defined here\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "349fb6dafa36548d65390e0785f4d324fdfff9b9", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -11,7 +11,7 @@ note: required because it's used within this closure\n   --> $DIR/interior-mutability.rs:5:18\n    |\n LL |     catch_unwind(|| { x.set(23); });\n-   |                  ^^^^^^^^^^^^^^^^^\n+   |                  ^^\n note: required by a bound in `catch_unwind`\n   --> $SRC_DIR/std/src/panic.rs:LL:COL\n    |"}, {"sha": "1d3bff3a724ba73454dd350a5bdfa8bab3eab8c9", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,18 +1,18 @@\n-error[E0277]: the trait bound `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]: ~const FnOnce<()>` is not satisfied\n+error[E0277]: the trait bound `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:29]: ~const FnOnce<()>` is not satisfied\n   --> $DIR/const-eval-select-bad.rs:6:27\n    |\n LL |     const_eval_select((), || {}, || {});\n-   |     -----------------     ^^^^^ expected an `FnOnce<()>` closure, found `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`\n+   |     -----------------     ^^^^^ expected an `FnOnce<()>` closure, found `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:29]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `~const FnOnce<()>` is not implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`\n-note: the trait `FnOnce<()>` is implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`, but that implementation is not `const`\n+   = help: the trait `~const FnOnce<()>` is not implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:29]`\n+note: the trait `FnOnce<()>` is implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:29]`, but that implementation is not `const`\n   --> $DIR/const-eval-select-bad.rs:6:27\n    |\n LL |     const_eval_select((), || {}, || {});\n    |                           ^^^^^\n-   = note: wrap the `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]` in a closure with no arguments: `|| { /* code */ }`\n+   = note: wrap the `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:29]` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |"}, {"sha": "2c451b07fbe3acb4f88f173dd07c4777008bfe29", "filename": "src/test/ui/issues/issue-12127.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-12127.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-12127.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12127.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -11,7 +11,7 @@ note: this value implements `FnOnce`, which causes it to be moved when called\n    |\n LL |         f();\n    |         ^\n-   = note: move occurs because `f` has type `[closure@$DIR/issue-12127.rs:8:24: 8:41]`, which does not implement the `Copy` trait\n+   = note: move occurs because `f` has type `[closure@$DIR/issue-12127.rs:8:24: 8:30]`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "0c41ca3b3d67445b1bf645a11589c4cc0790f053", "filename": "src/test/ui/issues/issue-21600.stderr", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-21600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-21600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21600.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -12,22 +12,16 @@ LL |         call_it(|| x.gen_mut());\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/issue-21600.rs:14:17\n    |\n-LL |   fn call_it<F>(f: F) where F: Fn() { f(); }\n-   |                    - change this to accept `FnMut` instead of `Fn`\n+LL | fn call_it<F>(f: F) where F: Fn() { f(); }\n+   |                  - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       call_it(|| {\n-   |  _____-------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         call_it(|| x.gen());\n-LL | |         call_it(|| x.gen_mut());\n-   | |                 ^^ - mutable borrow occurs due to use of `x` in closure\n-   | |                 |\n-   | |                 cannot borrow as mutable\n-LL | |\n-LL | |\n-LL | |     });\n-   | |_____- in this closure\n+LL |     call_it(|| {\n+   |     ------- expects `Fn` instead of `FnMut`\n+LL |         call_it(|| x.gen());\n+LL |         call_it(|| x.gen_mut());\n+   |                 ^^ - mutable borrow occurs due to use of `x` in closure\n+   |                 |\n+   |                 cannot borrow as mutable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a42e35c4cad5c922f526b92b65dd202b08612179", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,12 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/issue-24036.rs:3:9\n    |\n LL |     let mut x = |c| c + 1;\n-   |                 --------- the expected closure\n+   |                 --- the expected closure\n LL |     x = |c| c + 1;\n    |         ^^^^^^^^^ expected closure, found a different closure\n    |\n-   = note: expected closure `[closure@$DIR/issue-24036.rs:2:17: 2:26]`\n-              found closure `[closure@$DIR/issue-24036.rs:3:9: 3:18]`\n+   = note: expected closure `[closure@$DIR/issue-24036.rs:2:17: 2:20]`\n+              found closure `[closure@$DIR/issue-24036.rs:3:9: 3:12]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n "}, {"sha": "7230079dcffc1e225d769728334356068a47c198", "filename": "src/test/ui/issues/issue-3044.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,11 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/issue-3044.rs:3:35\n    |\n LL |       needlesArr.iter().fold(|x, y| {\n-   |  ___________________________________^\n+   |  ____________________________------_^\n+   | |                            |\n+   | |                            the expected closure\n LL | |     });\n    | |_____^ expected closure, found `()`\n    |\n-   = note: expected closure `[closure@$DIR/issue-3044.rs:3:28: 4:6]`\n+   = note: expected closure `[closure@$DIR/issue-3044.rs:3:28: 3:34]`\n             found unit type `()`\n \n error[E0061]: this function takes 2 arguments but 1 argument was supplied"}, {"sha": "68337a715e14ff639343f5ad28a5ebbce7da5cd3", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]> as Iterator>::Item == &_`\n+error[E0271]: type mismatch resolving `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]> as Iterator>::Item == &_`\n   --> $DIR/issue-31173.rs:10:10\n    |\n LL |         .cloned()\n@@ -12,11 +12,11 @@ note: required by a bound in `cloned`\n LL |         Self: Sized + Iterator<Item = &'a T>,\n    |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n \n-error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>`, but its trait bounds were not satisfied\n+error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>`, but its trait bounds were not satisfied\n   --> $DIR/issue-31173.rs:12:10\n    |\n LL |         .collect();\n-   |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>` due to unsatisfied trait bounds\n+   |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>` due to unsatisfied trait bounds\n    |\n   ::: $SRC_DIR/core/src/iter/adapters/cloned.rs:LL:COL\n    |\n@@ -29,10 +29,10 @@ LL | pub struct TakeWhile<I, P> {\n    | -------------------------- doesn't satisfy `<_ as Iterator>::Item = &_`\n    |\n    = note: the following trait bounds were not satisfied:\n-           `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]> as Iterator>::Item = &_`\n-           which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>: Iterator`\n-           `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>: Iterator`\n-           which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>: Iterator`\n+           `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]> as Iterator>::Item = &_`\n+           which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>: Iterator`\n+           `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>: Iterator`\n+           which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>: Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7895fdb296d8c41b7646afbd3e26ae0cf41823ed", "filename": "src/test/ui/issues/issue-41880.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -5,7 +5,7 @@ LL | pub struct Iterate<T, F> {\n    |            ------- method `iter` not found for this struct\n ...\n LL |     println!(\"{:?}\", a.iter().take(10).collect::<Vec<usize>>());\n-   |                        ^^^^ method not found in `Iterate<{integer}, [closure@$DIR/issue-41880.rs:26:24: 26:31]>`\n+   |                        ^^^^ method not found in `Iterate<{integer}, [closure@$DIR/issue-41880.rs:26:24: 26:27]>`\n \n error: aborting due to previous error\n "}, {"sha": "ecc1fa523989221b402247149869a8b8986cd092", "filename": "src/test/ui/issues/issue-4335.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -4,9 +4,8 @@ error[E0507]: cannot move out of `*v`, as `v` is a captured variable in an `FnMu\n LL | fn f<'r, T>(v: &'r T) -> Box<dyn FnMut() -> T + 'r> {\n    |             - captured outer variable\n LL |     id(Box::new(|| *v))\n-   |                 ---^^\n-   |                 |  |\n-   |                 |  move occurs because `*v` has type `T`, which does not implement the `Copy` trait\n+   |                 -- ^^ move occurs because `*v` has type `T`, which does not implement the `Copy` trait\n+   |                 |\n    |                 captured by this `FnMut` closure\n \n error: aborting due to previous error"}, {"sha": "3502af7028baa1d487553a6a32aaa3f0c4480774", "filename": "src/test/ui/issues/issue-48838.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-48838.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-48838.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48838.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -5,7 +5,7 @@ LL |     Square = |x| x,\n    |              ^^^^^ expected `isize`, found closure\n    |\n    = note: expected type `isize`\n-           found closure `[closure@$DIR/issue-48838.rs:2:14: 2:19]`\n+           found closure `[closure@$DIR/issue-48838.rs:2:14: 2:17]`\n \n error: aborting due to previous error\n "}, {"sha": "7fea7e5c0985ee9122eeeca55af5cb11d8f6522d", "filename": "src/test/ui/issues/issue-50600.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-50600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-50600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50600.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -5,7 +5,7 @@ LL |     fn([u8; |x: u8| {}]),\n    |             ^^^^^^^^^^ expected `usize`, found closure\n    |\n    = note: expected type `usize`\n-           found closure `[closure@$DIR/issue-50600.rs:2:13: 2:23]`\n+           found closure `[closure@$DIR/issue-50600.rs:2:13: 2:20]`\n \n error: aborting due to previous error\n "}, {"sha": "6973ad271b40de76ee9a9957916ce83fa3d649d5", "filename": "src/test/ui/issues/issue-50688.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-50688.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-50688.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50688.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -5,7 +5,7 @@ LL |     [1; || {}];\n    |         ^^^^^ expected `usize`, found closure\n    |\n    = note: expected type `usize`\n-           found closure `[closure@$DIR/issue-50688.rs:2:9: 2:14]`\n+           found closure `[closure@$DIR/issue-50688.rs:2:9: 2:11]`\n \n error: aborting due to previous error\n "}, {"sha": "44ec626dea5fc7f2fc6248451a00c32d74eaf903", "filename": "src/test/ui/issues/issue-51154.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-51154.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fissues%2Fissue-51154.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51154.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -9,7 +9,7 @@ LL |     let _: Box<F> = Box::new(|| ());\n    |                     arguments to this function are incorrect\n    |\n    = note: expected type parameter `F`\n-                     found closure `[closure@$DIR/issue-51154.rs:2:30: 2:35]`\n+                     found closure `[closure@$DIR/issue-51154.rs:2:30: 2:32]`\n    = help: every closure has a distinct type and so could not always match the caller-chosen type of parameter `F`\n note: associated function defined here\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL"}, {"sha": "eab003a1107829b4dc8ea4626805d109b59fce7d", "filename": "src/test/ui/kindck/kindck-nonsendable-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,16 +2,16 @@ error[E0277]: `Rc<usize>` cannot be sent between threads safely\n   --> $DIR/kindck-nonsendable-1.rs:9:5\n    |\n LL |     bar(move|| foo(x));\n-   |     ^^^ ------------- within this `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22]`\n+   |     ^^^ ------ within this `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:15]`\n    |     |\n    |     `Rc<usize>` cannot be sent between threads safely\n    |\n-   = help: within `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22]`, the trait `Send` is not implemented for `Rc<usize>`\n+   = help: within `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:15]`, the trait `Send` is not implemented for `Rc<usize>`\n note: required because it's used within this closure\n   --> $DIR/kindck-nonsendable-1.rs:9:9\n    |\n LL |     bar(move|| foo(x));\n-   |         ^^^^^^^^^^^^^\n+   |         ^^^^^^\n note: required by a bound in `bar`\n   --> $DIR/kindck-nonsendable-1.rs:5:21\n    |"}, {"sha": "9322e617176a1f10e98f448d58cab829d3aa8488", "filename": "src/test/ui/lifetimes/issue-79187-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -37,7 +37,7 @@ note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-79187-2.rs:8:14\n    |\n LL |     take_foo(|a| a);\n-   |              ^^^^^\n+   |              ^^^\n note: the lifetime requirement is introduced here\n   --> $DIR/issue-79187-2.rs:5:21\n    |"}, {"sha": "3e75e7fed2cc14c51fe32a6a6d65d1245b72c77f", "filename": "src/test/ui/lifetimes/issue-79187.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -10,7 +10,7 @@ note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-79187.rs:4:13\n    |\n LL |     let f = |_| ();\n-   |             ^^^^^^\n+   |             ^^^\n note: the lifetime requirement is introduced here\n   --> $DIR/issue-79187.rs:1:18\n    |"}, {"sha": "8a216360f4e3bff5950b1139b3165e04b7c105ed", "filename": "src/test/ui/lint/trivial_casts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Flint%2Ftrivial_casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Flint%2Ftrivial_casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftrivial_casts.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -128,7 +128,7 @@ LL |     let _ = &baz as &dyn Fn(i32);\n    |\n    = help: cast can be replaced by coercion; this might require a temporary variable\n \n-error: trivial cast: `&[closure@$DIR/trivial_casts.rs:72:13: 72:25]` as `&dyn Fn(i32)`\n+error: trivial cast: `&[closure@$DIR/trivial_casts.rs:72:13: 72:22]` as `&dyn Fn(i32)`\n   --> $DIR/trivial_casts.rs:73:13\n    |\n LL |     let _ = &x as &dyn Fn(i32);"}, {"sha": "040a65d168091c8e4b84b500d4278954c7c3d40a", "filename": "src/test/ui/methods/method-missing-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -9,7 +9,7 @@ help: use parentheses to call the method\n LL |                         .get_x();\n    |                               ++\n \n-error[E0615]: attempted to take value of method `filter_map` on type `Filter<Map<std::slice::Iter<'_, {integer}>, [closure@$DIR/method-missing-call.rs:27:20: 27:25]>, [closure@$DIR/method-missing-call.rs:28:23: 28:35]>`\n+error[E0615]: attempted to take value of method `filter_map` on type `Filter<Map<std::slice::Iter<'_, {integer}>, [closure@$DIR/method-missing-call.rs:27:20: 27:23]>, [closure@$DIR/method-missing-call.rs:28:23: 28:28]>`\n   --> $DIR/method-missing-call.rs:29:16\n    |\n LL |               .filter_map;"}, {"sha": "39abd14990bf3a8ef1e62107b6c9f1613a558ab2", "filename": "src/test/ui/methods/method-not-found-generic-arg-elision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -23,7 +23,7 @@ error[E0599]: no method named `extend` found for struct `Map` in the current sco\n   --> $DIR/method-not-found-generic-arg-elision.rs:87:29\n    |\n LL |     v.iter().map(|x| x * x).extend(std::iter::once(100));\n-   |                             ^^^^^^ method not found in `Map<std::slice::Iter<'_, i32>, [closure@$DIR/method-not-found-generic-arg-elision.rs:87:18: 87:27]>`\n+   |                             ^^^^^^ method not found in `Map<std::slice::Iter<'_, i32>, [closure@$DIR/method-not-found-generic-arg-elision.rs:87:18: 87:21]>`\n \n error[E0599]: no method named `method` found for struct `Wrapper<bool>` in the current scope\n   --> $DIR/method-not-found-generic-arg-elision.rs:90:13"}, {"sha": "d9578f6c8dcf6e26a59873872da391c9af04bd63", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:3:14\n    |\n LL |     a.iter().map(|_: (u32, u32)| 45);\n-   |              ^^^ ------------------ found signature of `fn((u32, u32)) -> _`\n+   |              ^^^ --------------- found signature of `fn((u32, u32)) -> _`\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n    |\n@@ -16,7 +16,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:4:14\n    |\n LL |     a.iter().map(|_: &(u16, u16)| 45);\n-   |              ^^^ ------------------- found signature of `for<'r> fn(&'r (u16, u16)) -> _`\n+   |              ^^^ ---------------- found signature of `for<'r> fn(&'r (u16, u16)) -> _`\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n    |\n@@ -30,7 +30,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:5:14\n    |\n LL |     a.iter().map(|_: (u16, u16)| 45);\n-   |              ^^^ ------------------ found signature of `fn((u16, u16)) -> _`\n+   |              ^^^ --------------- found signature of `fn((u16, u16)) -> _`\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n    |"}, {"sha": "ef76ec63fdaf85c51420f060bc9f0f6c53b6cb36", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -19,7 +19,7 @@ note: this closure does not fulfill the lifetime requirements\n   --> $DIR/closure-mismatch.rs:8:9\n    |\n LL |     baz(|_| ());\n-   |         ^^^^^^\n+   |         ^^^\n note: the lifetime requirement is introduced here\n   --> $DIR/closure-mismatch.rs:5:11\n    |"}, {"sha": "9d1ea70f8a4a4ae33cf9eeaf1838357af74d2e32", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-36053-2.rs:7:32\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                ^^^^^^ -------------- found signature of `for<'r> fn(&'r str) -> _`\n+   |                                ^^^^^^ --------- found signature of `for<'r> fn(&'r str) -> _`\n    |                                |\n    |                                expected signature of `for<'r> fn(&'r &str) -> _`\n    |\n@@ -12,11 +12,11 @@ note: required by a bound in `filter`\n LL |         P: FnMut(&Self::Item) -> bool,\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `filter`\n \n-error[E0599]: the method `count` exists for struct `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>`, but its trait bounds were not satisfied\n+error[E0599]: the method `count` exists for struct `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-36053-2.rs:7:55\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                       --------------  ^^^^^ method cannot be called on `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` due to unsatisfied trait bounds\n+   |                                       ---------       ^^^^^ method cannot be called on `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>` due to unsatisfied trait bounds\n    |                                       |\n    |                                       doesn't satisfy `<_ as FnOnce<(&&str,)>>::Output = bool`\n    |                                       doesn't satisfy `_: FnMut<(&&str,)>`\n@@ -27,12 +27,12 @@ LL | pub struct Filter<I, P> {\n    | ----------------------- doesn't satisfy `_: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n-           `<[closure@$DIR/issue-36053-2.rs:7:39: 7:53] as FnOnce<(&&str,)>>::Output = bool`\n-           which is required by `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>: Iterator`\n-           `[closure@$DIR/issue-36053-2.rs:7:39: 7:53]: FnMut<(&&str,)>`\n-           which is required by `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>: Iterator`\n-           `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>: Iterator`\n-           which is required by `&mut Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>: Iterator`\n+           `<[closure@$DIR/issue-36053-2.rs:7:39: 7:48] as FnOnce<(&&str,)>>::Output = bool`\n+           which is required by `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>: Iterator`\n+           `[closure@$DIR/issue-36053-2.rs:7:39: 7:48]: FnMut<(&&str,)>`\n+           which is required by `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>: Iterator`\n+           `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>: Iterator`\n+           which is required by `&mut Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>: Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "125e446c332590c8ca243b2416029b6da7289196", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -4,9 +4,8 @@ error[E0507]: cannot move out of `i`, a captured variable in an `Fn` closure\n LL |     let i = Box::new(3);\n    |         - captured outer variable\n LL |     let _f = to_fn(|| test(i));\n-   |                    --------^-\n-   |                    |       |\n-   |                    |       move occurs because `i` has type `Box<usize>`, which does not implement the `Copy` trait\n+   |                    --      ^ move occurs because `i` has type `Box<usize>`, which does not implement the `Copy` trait\n+   |                    |\n    |                    captured by this `Fn` closure\n \n error: aborting due to previous error"}, {"sha": "2acf44432c65fde1073d4a4748fab12e4c612e8e", "filename": "src/test/ui/never_type/fallback-closure-wrap.fallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<[closure@$DIR/fallback-closure-wrap.rs:18:40: 21:6] as FnOnce<()>>::Output == ()`\n+error[E0271]: type mismatch resolving `<[closure@$DIR/fallback-closure-wrap.rs:18:40: 18:47] as FnOnce<()>>::Output == ()`\n   --> $DIR/fallback-closure-wrap.rs:18:31\n    |\n LL |       let error = Closure::wrap(Box::new(move || {\n@@ -10,7 +10,7 @@ LL | |     }) as Box<dyn FnMut()>);\n    |\n    = note: expected unit type `()`\n                    found type `!`\n-   = note: required for the cast from `[closure@$DIR/fallback-closure-wrap.rs:18:40: 21:6]` to the object type `dyn FnMut()`\n+   = note: required for the cast from `[closure@$DIR/fallback-closure-wrap.rs:18:40: 18:47]` to the object type `dyn FnMut()`\n \n error: aborting due to previous error\n "}, {"sha": "20bee2caaac0ee33f1279a768f8a730dd2618699", "filename": "src/test/ui/nll/closure-captures.stderr", "status": "modified", "additions": 48, "deletions": 72, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -37,36 +37,28 @@ LL |         x = 1;\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:27:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       fn_ref(|| {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         ||\n-   | |         ^^ cannot borrow as mutable\n-LL | |          x = 1;}\n-   | |__________-_____- in this closure\n-   |            |\n-   |            mutable borrow occurs due to use of `x` in closure\n+LL |     fn_ref(|| {\n+   |     ------ expects `Fn` instead of `FnMut`\n+LL |         ||\n+   |         ^^ cannot borrow as mutable\n+LL |          x = 1;}\n+   |          - mutable borrow occurs due to use of `x` in closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:31:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       fn_ref(move || {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         ||\n-   | |         ^^ cannot borrow as mutable\n-LL | |     x = 1;});\n-   | |_____-_____- in this closure\n-   |       |\n-   |       mutable borrow occurs due to use of `x` in closure\n+LL |     fn_ref(move || {\n+   |     ------ expects `Fn` instead of `FnMut`\n+LL |         ||\n+   |         ^^ cannot borrow as mutable\n+LL |     x = 1;});\n+   |     - mutable borrow occurs due to use of `x` in closure\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/closure-captures.rs:39:10\n@@ -80,19 +72,15 @@ LL |          x = 1;}\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:38:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       fn_ref(|| {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         ||\n-   | |         ^^ cannot borrow as mutable\n-LL | |          x = 1;}\n-   | |__________-_____- in this closure\n-   |            |\n-   |            mutable borrow occurs due to use of `x` in closure\n+LL |     fn_ref(|| {\n+   |     ------ expects `Fn` instead of `FnMut`\n+LL |         ||\n+   |         ^^ cannot borrow as mutable\n+LL |          x = 1;}\n+   |          - mutable borrow occurs due to use of `x` in closure\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/closure-captures.rs:43:5\n@@ -106,53 +94,41 @@ LL |     x = 1;});\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:42:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       fn_ref(move || {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         ||\n-   | |         ^^ cannot borrow as mutable\n-LL | |     x = 1;});\n-   | |_____-_____- in this closure\n-   |       |\n-   |       mutable borrow occurs due to use of `x` in closure\n+LL |     fn_ref(move || {\n+   |     ------ expects `Fn` instead of `FnMut`\n+LL |         ||\n+   |         ^^ cannot borrow as mutable\n+LL |     x = 1;});\n+   |     - mutable borrow occurs due to use of `x` in closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:48:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       fn_ref(|| {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         ||\n-   | |         ^^ cannot borrow as mutable\n-LL | |         *x = 1;});\n-   | |_________--_____- in this closure\n-   |           |\n-   |           mutable borrow occurs due to use of `x` in closure\n+LL |     fn_ref(|| {\n+   |     ------ expects `Fn` instead of `FnMut`\n+LL |         ||\n+   |         ^^ cannot borrow as mutable\n+LL |         *x = 1;});\n+   |         -- mutable borrow occurs due to use of `x` in closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:51:9\n    |\n-LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n-   |                         - change this to accept `FnMut` instead of `Fn`\n+LL | fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                       - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       fn_ref(move || {\n-   |  _____------_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         ||\n-   | |         ^^ cannot borrow as mutable\n-LL | |         *x = 1;});\n-   | |_________--_____- in this closure\n-   |           |\n-   |           mutable borrow occurs due to use of `x` in closure\n+LL |     fn_ref(move || {\n+   |     ------ expects `Fn` instead of `FnMut`\n+LL |         ||\n+   |         ^^ cannot borrow as mutable\n+LL |         *x = 1;});\n+   |         -- mutable borrow occurs due to use of `x` in closure\n \n error: aborting due to 12 previous errors\n "}, {"sha": "f86a19fff8458b6734b23159673f6d795781a827", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ note: no external requirements\n   --> $DIR/escape-argument-callee.rs:26:38\n    |\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n-   |                                      ^^^^^^^^^^^^^\n+   |                                      ^^^^^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,"}, {"sha": "8cd8b43cabec6e59ad725bbac26859de67b7bb48", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ note: no external requirements\n   --> $DIR/escape-argument.rs:26:38\n    |\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n-   |                                      ^^^^^^^^^^^^^\n+   |                                      ^^^^^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,"}, {"sha": "abf80e03928990643f4f283b2fdc6313a1e7cbc3", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/escape-upvar-nested.rs:21:32\n    |\n LL |             let mut closure1 = || p = &y;\n-   |                                ^^^^^^^^^\n+   |                                ^^\n    |\n    = note: defining type: test::{closure#0}::{closure#0} with closure substs [\n                i16,\n@@ -15,12 +15,8 @@ LL |             let mut closure1 = || p = &y;\n note: external requirements\n   --> $DIR/escape-upvar-nested.rs:20:27\n    |\n-LL |           let mut closure = || {\n-   |  ___________________________^\n-LL | |             let mut closure1 = || p = &y;\n-LL | |             closure1();\n-LL | |         };\n-   | |_________^\n+LL |         let mut closure = || {\n+   |                           ^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,"}, {"sha": "bc7546421731a4496ad4ef0e9455297d8f82ad9b", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/escape-upvar-ref.rs:23:27\n    |\n LL |         let mut closure = || p = &y;\n-   |                           ^^^^^^^^^\n+   |                           ^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,"}, {"sha": "b9b0f3ad257898d46409894d82aaf7bbd2ef15b5", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,12 +1,8 @@\n note: no external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:43:9\n    |\n-LL | /         |_outlives1, _outlives2, _outlives3, x, y| {\n-LL | |             // Only works if 'x: 'y:\n-LL | |             let p = x.get();\n-LL | |             demand_y(x, y, p)\n-LL | |         },\n-   | |_________^\n+LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "a2371ee314a775b9b6465920663c8bfd0df64dbb", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,13 +1,8 @@\n note: external requirements\n   --> $DIR/propagate-approximated-ref.rs:43:47\n    |\n-LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |  _______________________________________________^\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "e53ae167f12d6695732358867a09a5152fe723be", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,12 +1,8 @@\n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:21:15\n    |\n-LL |       foo(cell, |cell_a, cell_x| {\n-   |  _______________^\n-LL | |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n-LL | |\n-LL | |     })\n-   | |_____^\n+LL |     foo(cell, |cell_a, cell_x| {\n+   |               ^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: case1::{closure#0} with closure substs [\n                i32,\n@@ -41,11 +37,8 @@ LL | | }\n note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:35:15\n    |\n-LL |       foo(cell, |cell_a, cell_x| {\n-   |  _______________^\n-LL | |         cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static -> borrow error\n-LL | |     })\n-   | |_____^\n+LL |     foo(cell, |cell_a, cell_x| {\n+   |               ^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: case2::{closure#0} with closure substs [\n                i32,"}, {"sha": "c3c7eb1bd9e5ed6f84a4747a8b024f1c365de03b", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,14 +1,8 @@\n note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:32:47\n    |\n-LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |  _______________________________________________^\n-LL | |\n-LL | |\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |                                               ^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "846e5aedb3e73e0638108dc6e818c457afd24aad", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,14 +1,8 @@\n note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:35:47\n    |\n-LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |  _______________________________________________^\n-LL | |\n-LL | |\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "a570932eda9adef27acaf5fb1b0a21c634b99ec3", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,13 +1,8 @@\n note: external requirements\n   --> $DIR/propagate-approximated-val.rs:36:45\n    |\n-LL |       establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n-   |  _____________________________________________^\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(outlives1, outlives2, x.get())\n-LL | |\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,"}, {"sha": "407bc6764d6da11d5d9d87d07259d43e545c4dfb", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,12 +1,8 @@\n note: external requirements\n   --> $DIR/propagate-despite-same-free-region.rs:42:9\n    |\n-LL | /         |_outlives1, _outlives2, x, y| {\n-LL | |             // Only works if 'x: 'y:\n-LL | |             let p = x.get();\n-LL | |             demand_y(x, y, p)\n-LL | |         },\n-   | |_________^\n+LL |         |_outlives1, _outlives2, x, y| {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "fcb55d37f310a01c0ef83bb1e1bc3eb3227f26d2", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,13 +1,8 @@\n note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:35:47\n    |\n-LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |  _______________________________________________^\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |                                               ^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "75beae39e2310e880280d1011920a0b4bad8dfe0", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,13 +1,8 @@\n note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:39:47\n    |\n-LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |  _______________________________________________^\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "58aced2bfcdb18a438e798bd5102a443a662fb00", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,15 +1,8 @@\n note: external requirements\n   --> $DIR/propagate-from-trait-match.rs:32:36\n    |\n-LL |       establish_relationships(value, |value| {\n-   |  ____________________________________^\n-LL | |\n-LL | |\n-LL | |         // This function call requires that\n-...  |\n-LL | |         require(value);\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(value, |value| {\n+   |                                    ^^^^^^^\n    |\n    = note: defining type: supply::<'_#1r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "1c9d0c835494d4005ba9a454ccf16d17eb943ea4", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ note: no external requirements\n   --> $DIR/return-wrong-bound-region.rs:11:16\n    |\n LL |     expect_sig(|a, b| b); // ought to return `a`\n-   |                ^^^^^^^^\n+   |                ^^^^^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,"}, {"sha": "fb61b30f09db29efc150594f1a6cc38b87ac51d5", "filename": "src/test/ui/nll/issue-52663-span-decl-captured-variable.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -4,9 +4,8 @@ error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `Fn`\n LL |        let x = (vec![22], vec![44]);\n    |            - captured outer variable\n LL |        expect_fn(|| drop(x.0));\n-   |                  --------^^^-\n-   |                  |       |\n-   |                  |       move occurs because `x.0` has type `Vec<i32>`, which does not implement the `Copy` trait\n+   |                  --      ^^^ move occurs because `x.0` has type `Vec<i32>`, which does not implement the `Copy` trait\n+   |                  |\n    |                  captured by this `Fn` closure\n \n error: aborting due to previous error"}, {"sha": "036a7a0abfdcc7eecd3b2d9b17ac628460ca1f8a", "filename": "src/test/ui/nll/issue-54556-stephaneyfx.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -10,7 +10,7 @@ LL | }\n    | -\n    | |\n    | `stmt` dropped here while still borrowed\n-   | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `Map<Rows<'_>, [closure@$DIR/issue-54556-stephaneyfx.rs:28:14: 28:23]>`\n+   | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `Map<Rows<'_>, [closure@$DIR/issue-54556-stephaneyfx.rs:28:14: 28:19]>`\n    |\n    = note: the temporary is part of an expression at the end of a block;\n            consider forcing this temporary to be dropped sooner, before the block's local variables are dropped"}, {"sha": "feab2476970a12b9399e7f4bed98282af32d4e92", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:25:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -39,7 +39,7 @@ note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:34:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^\n    |\n    = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -66,7 +66,7 @@ note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:42:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^\n    |\n    = note: defining type: wrong_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -103,7 +103,7 @@ note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:52:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "98063bd0a7674de4a7b1539c974eaf4f6e4d4c5c", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/projection-one-region-closure.rs:45:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -56,7 +56,7 @@ note: external requirements\n   --> $DIR/projection-one-region-closure.rs:56:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -109,7 +109,7 @@ note: external requirements\n   --> $DIR/projection-one-region-closure.rs:70:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -137,7 +137,7 @@ note: external requirements\n   --> $DIR/projection-one-region-closure.rs:80:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "45e61bcbda85e87e0db91c8fd1fb492d14b26f8f", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:37:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -44,7 +44,7 @@ note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:47:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -85,7 +85,7 @@ note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:60:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -113,7 +113,7 @@ note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:69:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -141,7 +141,7 @@ note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:81:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "f2549205b812088af83c01e6fdbd6d173bded20a", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:36:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -28,7 +28,7 @@ note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:45:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -54,7 +54,7 @@ note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:64:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -80,7 +80,7 @@ note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:73:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -106,7 +106,7 @@ note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:85:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "8e1b6fa2e46306f8245b2a560975c67d6062f2ff", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:38:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -40,7 +40,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n@@ -77,7 +77,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:61:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n@@ -105,7 +105,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:70:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n@@ -133,7 +133,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:79:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n@@ -161,7 +161,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:87:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: two_regions::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -203,7 +203,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:97:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -231,7 +231,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:109:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "12c76d198e78004cd93a278f454f8e1d448de95d", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:24:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n-   |                        ^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^\n    |\n    = note: defining type: generic::<T>::{closure#0} with closure substs [\n                i16,\n@@ -27,7 +27,7 @@ note: external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n-   |                        ^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^\n    |\n    = note: defining type: generic_fail::<T>::{closure#0} with closure substs [\n                i16,"}, {"sha": "35741859dffec16033addf686e7d15b9f132ab03", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:23\n    |\n LL |     with_signature(x, |y| y)\n-   |                       ^^^^^\n+   |                       ^^^\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "0261bc39e7127d1d7fd6592ab640ebeb9b1b0068", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,15 +1,8 @@\n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:27:26\n    |\n-LL |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-LL | |\n-LL | |         //\n-LL | |         // See `correct_region`, which explains the point of this\n-...  |\n-LL | |         require(&x, &y)\n-LL | |     })\n-   | |_____^\n+LL |     with_signature(a, b, |x, y| {\n+   |                          ^^^^^^\n    |\n    = note: defining type: no_region::<T>::{closure#0} with closure substs [\n                i32,\n@@ -55,15 +48,8 @@ LL | fn no_region<'a, T: 'a>(a: Cell<&'a ()>, b: T) {\n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n    |\n-LL |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-LL | |         // Key point of this test:\n-LL | |         //\n-LL | |         // The *closure* is being type-checked with all of its free\n-...  |\n-LL | |         require(&x, &y)\n-LL | |     })\n-   | |_____^\n+LL |     with_signature(a, b, |x, y| {\n+   |                          ^^^^^^\n    |\n    = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -90,13 +76,8 @@ LL | | }\n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:64:26\n    |\n-LL |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-LL | |\n-LL | |         // See `correct_region`\n-LL | |         require(&x, &y)\n-LL | |     })\n-   | |_____^\n+LL |     with_signature(a, b, |x, y| {\n+   |                          ^^^^^^\n    |\n    = note: defining type: wrong_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -140,12 +121,8 @@ LL |     T: 'b + 'a,\n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26\n    |\n-LL |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-LL | |         // See `correct_region`\n-LL | |         require(&x, &y)\n-LL | |     })\n-   | |_____^\n+LL |     with_signature(a, b, |x, y| {\n+   |                          ^^^^^^\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "ee332278c30f553d1af704d736fc3b7216e6d43d", "filename": "src/test/ui/nll/user-annotations/adt-nullary-enums.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -30,15 +30,14 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n+LL |     let _closure = || {\n+   |                     - `c` dropped here while still borrowed\n ...\n LL |             SomeEnum::SomeVariant(Cell::new(&c)),\n    |                                   ----------^^-\n    |                                   |         |\n    |                                   |         borrowed value does not live long enough\n    |                                   argument requires that `c` is borrowed for `'a`\n-...\n-LL |     };\n-   |     - `c` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "95bbd62c4fb0d0e70bb5b2b4ba4a0fe3b2da9ea1", "filename": "src/test/ui/nll/user-annotations/adt-tuple-struct-calls.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -28,28 +28,28 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n+LL |     let _closure = || {\n+   |                     - `c` dropped here while still borrowed\n ...\n LL |         f(&c);\n    |         --^^-\n    |         | |\n    |         | borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'a`\n-LL |     };\n-   |     - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-tuple-struct-calls.rs:53:11\n    |\n LL |     let f = SomeStruct::<&'a u32>;\n    |         - lifetime `'1` appears in the type of `f`\n-...\n+LL |     let _closure = || {\n+   |                     - `c` dropped here while still borrowed\n+LL |         let c = 66;\n LL |         f(&c);\n    |         --^^-\n    |         | |\n    |         | borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'1`\n-LL |     };\n-   |     - `c` dropped here while still borrowed\n \n error: aborting due to 4 previous errors\n "}, {"sha": "bd4d121d5691449d68ea1e9b444589148dd54c11", "filename": "src/test/ui/nll/user-annotations/fns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -28,14 +28,14 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-...\n+LL |     let _closure = || {\n+   |                     - `c` dropped here while still borrowed\n+LL |         let c = 66;\n LL |         some_fn::<&'a u32>(&c);\n    |         -------------------^^-\n    |         |                  |\n    |         |                  borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'a`\n-LL |     };\n-   |     - `c` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fcaeb465d140e90880971ffa9a6f0cb9dcbef459", "filename": "src/test/ui/nll/user-annotations/method-call.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -29,13 +29,14 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n ...\n+LL |     let _closure = || {\n+   |                     - `c` dropped here while still borrowed\n+LL |         let c = 66;\n LL |         a.method::<&'a u32>(b,  &c);\n    |         ------------------------^^-\n    |         |                       |\n    |         |                       borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'a`\n-LL |     };\n-   |     - `c` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "328dde9805aaeda70fec35e0700eb01087180ce6", "filename": "src/test/ui/nll/user-annotations/method-ufcs-3.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -29,13 +29,14 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n ...\n+LL |     let _closure = || {\n+   |                     - `c` dropped here while still borrowed\n+LL |         let c = 66;\n LL |         <_ as Bazoom<_>>::method::<&'a u32>(&a, b, &c);\n    |         -------------------------------------------^^-\n    |         |                                          |\n    |         |                                          borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'a`\n-LL |     };\n-   |     - `c` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "249c2fe2fa74efe3aee0f1cce2ea6165293b3beb", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,17 +1,12 @@\n error[E0277]: `Rc<()>` cannot be sent between threads safely\n   --> $DIR/no-send-res-ports.rs:25:5\n    |\n-LL |       thread::spawn(move|| {\n-   |  _____^^^^^^^^^^^^^_-\n-   | |     |\n-   | |     `Rc<()>` cannot be sent between threads safely\n-LL | |\n-LL | |         let y = x;\n-LL | |         println!(\"{:?}\", y);\n-LL | |     });\n-   | |_____- within this `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6]`\n+LL |     thread::spawn(move|| {\n+   |     ^^^^^^^^^^^^^ ------ within this `[closure@$DIR/no-send-res-ports.rs:25:19: 25:25]`\n+   |     |\n+   |     `Rc<()>` cannot be sent between threads safely\n    |\n-   = help: within `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6]`, the trait `Send` is not implemented for `Rc<()>`\n+   = help: within `[closure@$DIR/no-send-res-ports.rs:25:19: 25:25]`, the trait `Send` is not implemented for `Rc<()>`\n note: required because it appears within the type `Port<()>`\n   --> $DIR/no-send-res-ports.rs:5:8\n    |\n@@ -25,13 +20,8 @@ LL |     struct Foo {\n note: required because it's used within this closure\n   --> $DIR/no-send-res-ports.rs:25:19\n    |\n-LL |       thread::spawn(move|| {\n-   |  ___________________^\n-LL | |\n-LL | |         let y = x;\n-LL | |         println!(\"{:?}\", y);\n-LL | |     });\n-   | |_____^\n+LL |     thread::spawn(move|| {\n+   |                   ^^^^^^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |"}, {"sha": "37d94cf0ebd8c515e7c1d1db7fb7a01ad1276c34", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,23 +1,17 @@\n-error[E0277]: the trait bound `S: Clone` is not satisfied in `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n+error[E0277]: the trait bound `S: Clone` is not satisfied in `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`\n   --> $DIR/not-clone-closure.rs:11:23\n    |\n-LL |       let hello = move || {\n-   |  _________________-\n-LL | |         println!(\"Hello {}\", a.0);\n-LL | |     };\n-   | |_____- within this `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n-LL |\n-LL |       let hello = hello.clone();\n-   |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`, the trait `Clone` is not implemented for `S`\n+LL |     let hello = move || {\n+   |                 ------- within this `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`\n+...\n+LL |     let hello = hello.clone();\n+   |                       ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`, the trait `Clone` is not implemented for `S`\n    |\n note: required because it's used within this closure\n   --> $DIR/not-clone-closure.rs:7:17\n    |\n-LL |       let hello = move || {\n-   |  _________________^\n-LL | |         println!(\"Hello {}\", a.0);\n-LL | |     };\n-   | |_____^\n+LL |     let hello = move || {\n+   |                 ^^^^^^^\n help: consider annotating `S` with `#[derive(Clone)]`\n    |\n LL | #[derive(Clone)]"}, {"sha": "858b4e8db0547f2d1a3f6b1f0550af5008ad9d44", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -200,7 +200,7 @@ LL |     { true } || { true }\n    |              ^^^^^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/expr-as-stmt.rs:51:14: 51:25]`\n+           found closure `[closure@$DIR/expr-as-stmt.rs:51:14: 51:16]`\n help: use parentheses to call this closure\n    |\n LL |     { true } (|| { true })()"}, {"sha": "0852c7cb4705d8c862bdf5ab4fd5ff69e8ddfdf7", "filename": "src/test/ui/parser/struct-literal-restrictions-in-lamda.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -24,7 +24,7 @@ LL | |     }.hi() {\n    | |__________^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/struct-literal-restrictions-in-lamda.rs:12:11: 14:11]`\n+           found closure `[closure@$DIR/struct-literal-restrictions-in-lamda.rs:12:11: 12:13]`\n help: use parentheses to call this closure\n    |\n LL ~     while (|| Foo {"}, {"sha": "45e16264973886cf78fa2da18a3224ac4bff20cd", "filename": "src/test/ui/pattern/non-structural-match-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,4 +1,4 @@\n-error: `[closure@$DIR/non-structural-match-types.rs:9:17: 9:22]` cannot be used in patterns\n+error: `[closure@$DIR/non-structural-match-types.rs:9:17: 9:19]` cannot be used in patterns\n   --> $DIR/non-structural-match-types.rs:9:9\n    |\n LL |         const { || {} } => {},"}, {"sha": "fdf817caea78508997742f27a46302ffd0cabb0e", "filename": "src/test/ui/polymorphization/const_parameters/closures.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -14,7 +14,7 @@ LL | pub fn unused<const T: usize>() -> usize {\n    |               -------------- generic parameter `T` is unused\n LL |\n LL |     let add_one = |x: usize| x + 1;\n-   |                   ^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^\n \n error: item has unused generic parameters\n   --> $DIR/closures.rs:17:8\n@@ -29,7 +29,7 @@ LL | pub fn used_parent<const T: usize>() -> usize {\n    |                    -------------- generic parameter `T` is unused\n LL |     let x: usize = T;\n LL |     let add_one = |x: usize| x + 1;\n-   |                   ^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^\n \n error: item has unused generic parameters\n   --> $DIR/closures.rs:48:13\n@@ -38,7 +38,7 @@ LL | pub fn unused_upvar<const T: usize>() -> usize {\n    |                     -------------- generic parameter `T` is unused\n LL |     let x: usize = T;\n LL |     let y = || x;\n-   |             ^^^^\n+   |             ^^\n \n error: aborting due to 4 previous errors; 1 warning emitted\n "}, {"sha": "a24eee5fed1f1ae5159f083fd0982ec74010cb95", "filename": "src/test/ui/polymorphization/generators.stderr", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -10,16 +10,12 @@ LL | #![feature(generic_const_exprs, generators, generator_trait, rustc_attrs)]\n error: item has unused generic parameters\n   --> $DIR/generators.rs:35:5\n    |\n-LL |   pub fn unused_type<T>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n-   |                      - generic parameter `T` is unused\n-LL | /     || {\n-LL | |\n-LL | |         yield 1;\n-LL | |         2\n-LL | |     }\n-   | |_____^\n+LL | pub fn unused_type<T>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n+   |                    - generic parameter `T` is unused\n+LL |     || {\n+   |     ^^\n \n-note: the above error was encountered while instantiating `fn finish::<[generator@$DIR/generators.rs:35:5: 39:6], u32, u32>`\n+note: the above error was encountered while instantiating `fn finish::<[generator@$DIR/generators.rs:35:5: 35:7], u32, u32>`\n   --> $DIR/generators.rs:86:5\n    |\n LL |     finish(unused_type::<u32>());\n@@ -28,16 +24,12 @@ LL |     finish(unused_type::<u32>());\n error: item has unused generic parameters\n   --> $DIR/generators.rs:60:5\n    |\n-LL |   pub fn unused_const<const T: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n-   |                       ------------ generic parameter `T` is unused\n-LL | /     || {\n-LL | |\n-LL | |         yield 1;\n-LL | |         2\n-LL | |     }\n-   | |_____^\n+LL | pub fn unused_const<const T: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n+   |                     ------------ generic parameter `T` is unused\n+LL |     || {\n+   |     ^^\n \n-note: the above error was encountered while instantiating `fn finish::<[generator@$DIR/generators.rs:60:5: 64:6], u32, u32>`\n+note: the above error was encountered while instantiating `fn finish::<[generator@$DIR/generators.rs:60:5: 60:7], u32, u32>`\n   --> $DIR/generators.rs:89:5\n    |\n LL |     finish(unused_const::<1u32>());"}, {"sha": "4773dd4fa2ef18eae00d16c033d799b6c0414a3b", "filename": "src/test/ui/polymorphization/lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -11,7 +11,7 @@ LL | pub fn used<'a, T: Default>(_: &'a u32) -> u32 {\n    |                 - generic parameter `T` is unused\n LL |     let _: T = Default::default();\n LL |     let add_one = |x: u32| x + 1;\n-   |                   ^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e5af1d7515f6c91f5b250a5619574a507fa26b31", "filename": "src/test/ui/polymorphization/predicates.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -19,7 +19,7 @@ LL | impl<'a, I, T: 'a, E> Iterator for Foo<'a, I, E>\n    |          generic parameter `I` is unused\n ...\n LL |         self.find(|_| true)\n-   |                   ^^^^^^^^\n+   |                   ^^^\n \n error: item has unused generic parameters\n   --> $DIR/predicates.rs:59:4"}, {"sha": "94a4a08bd2fc286448208f01f163b66b6a5027f0", "filename": "src/test/ui/polymorphization/type_parameters/closures.stderr", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -5,7 +5,7 @@ LL | pub fn unused<T>() -> u32 {\n    |               - generic parameter `T` is unused\n ...\n LL |     let add_one = |x: u32| x + 1;\n-   |                   ^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^\n \n error: item has unused generic parameters\n   --> $DIR/closures.rs:16:8\n@@ -20,7 +20,7 @@ LL | pub fn used_parent<T: Default>() -> u32 {\n    |                    - generic parameter `T` is unused\n LL |     let _: T = Default::default();\n LL |     let add_one = |x: u32| x + 1;\n-   |                   ^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^\n \n error: item has unused generic parameters\n   --> $DIR/closures.rs:94:23\n@@ -32,7 +32,7 @@ LL |     pub fn unused_all<G: Default>() -> u32 {\n    |                       - generic parameter `G` is unused\n LL |\n LL |         let add_one = |x: u32| x + 1;\n-   |                       ^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^\n \n error: item has unused generic parameters\n   --> $DIR/closures.rs:92:12\n@@ -46,16 +46,11 @@ LL |     pub fn unused_all<G: Default>() -> u32 {\n error: item has unused generic parameters\n   --> $DIR/closures.rs:128:23\n    |\n-LL |       pub fn used_impl<G: Default>() -> u32 {\n-   |                        - generic parameter `G` is unused\n+LL |     pub fn used_impl<G: Default>() -> u32 {\n+   |                      - generic parameter `G` is unused\n LL |\n-LL |           let add_one = |x: u32| {\n-   |  _______________________^\n-LL | |\n-LL | |             let _: F = Default::default();\n-LL | |             x + 1\n-LL | |         };\n-   | |_________^\n+LL |         let add_one = |x: u32| {\n+   |                       ^^^^^^^^\n \n error: item has unused generic parameters\n   --> $DIR/closures.rs:126:12\n@@ -66,16 +61,11 @@ LL |     pub fn used_impl<G: Default>() -> u32 {\n error: item has unused generic parameters\n   --> $DIR/closures.rs:115:23\n    |\n-LL |   impl<F: Default> Foo<F> {\n-   |        - generic parameter `F` is unused\n+LL | impl<F: Default> Foo<F> {\n+   |      - generic parameter `F` is unused\n ...\n-LL |           let add_one = |x: u32| {\n-   |  _______________________^\n-LL | |\n-LL | |             let _: G = Default::default();\n-LL | |             x + 1\n-LL | |         };\n-   | |_________^\n+LL |         let add_one = |x: u32| {\n+   |                       ^^^^^^^^\n \n error: item has unused generic parameters\n   --> $DIR/closures.rs:113:12"}, {"sha": "27f88d281746439de53edd1060d62d003d51c06d", "filename": "src/test/ui/polymorphization/unsized_cast.stderr", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -5,16 +5,16 @@ LL | fn foo<T: Default>() {\n    |        - generic parameter `T` is unused\n LL |     let _: T = Default::default();\n LL |     (|| Box::new(|| {}) as Box<dyn Fn()>)();\n-   |                  ^^^^^\n+   |                  ^^\n \n error: item has unused generic parameters\n-  --> $DIR/unsized_cast.rs:11:5\n+  --> $DIR/unsized_cast.rs:11:6\n    |\n LL | fn foo<T: Default>() {\n    |        - generic parameter `T` is unused\n LL |     let _: T = Default::default();\n LL |     (|| Box::new(|| {}) as Box<dyn Fn()>)();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^\n \n error: item has unused generic parameters\n   --> $DIR/unsized_cast.rs:22:15\n@@ -23,21 +23,16 @@ LL | fn foo2<T: Default>() {\n    |         - generic parameter `T` is unused\n ...\n LL |         call(&|| {}, ());\n-   |               ^^^^^\n+   |               ^^\n \n error: item has unused generic parameters\n-  --> $DIR/unsized_cast.rs:19:5\n+  --> $DIR/unsized_cast.rs:19:6\n    |\n-LL |   fn foo2<T: Default>() {\n-   |           - generic parameter `T` is unused\n-LL |       let _: T = Default::default();\n-LL | /     (|| {\n-LL | |\n-LL | |         let call: extern \"rust-call\" fn(_, _) = Fn::call;\n-LL | |         call(&|| {}, ());\n-LL | |\n-LL | |     })();\n-   | |______^\n+LL | fn foo2<T: Default>() {\n+   |         - generic parameter `T` is unused\n+LL |     let _: T = Default::default();\n+LL |     (|| {\n+   |      ^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "89a832984712ad7c5bc6abd35b64fa1a11f119af", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -9,10 +9,10 @@ LL |     func(&mut iter.map(|x| x + 1))\n    = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n \n-error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>: Iterator`\n+error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>: Iterator`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n-   = note: required because of the requirements on the impl of `Iterator` for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>`\n+   = note: required because of the requirements on the impl of `Iterator` for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "93a1f691c8eefed2b3f01efb936c6c38e81785b6", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1249,7 +1249,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n    |                                         ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:138:41: 138:48]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:138:41: 138:43]`\n help: use parentheses to call this closure\n    |\n LL |     if let Range { start: F, end } = F..(|| true)() {}\n@@ -1449,7 +1449,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n    |                                            ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:203:44: 203:51]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:203:44: 203:46]`\n help: use parentheses to call this closure\n    |\n LL |     while let Range { start: F, end } = F..(|| true)() {}"}, {"sha": "6b43801b5e074fbdd4c1e3a80b57791b08e6eed2", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -29,17 +29,14 @@ LL |     f.f.call_mut(())\n error[E0507]: cannot move out of `f`, a captured variable in an `FnMut` closure\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:57:13\n    |\n-LL |       let mut f = move |g: Box<dyn FnMut(isize)>, b: isize| {\n-   |           ----- captured outer variable\n+LL |     let mut f = move |g: Box<dyn FnMut(isize)>, b: isize| {\n+   |         ----- captured outer variable\n ...\n-LL |       f(Box::new(|a| {\n-   |  ________________-\n-LL | |\n-LL | |         foo(f);\n-   | |             ^ move occurs because `f` has type `[closure@$DIR/borrowck-call-is-borrow-issue-12224.rs:52:17: 54:6]`, which does not implement the `Copy` trait\n-LL | |\n-LL | |     }), 3);\n-   | |_____- captured by this `FnMut` closure\n+LL |     f(Box::new(|a| {\n+   |                --- captured by this `FnMut` closure\n+LL |\n+LL |         foo(f);\n+   |             ^ move occurs because `f` has type `[closure@$DIR/borrowck-call-is-borrow-issue-12224.rs:52:17: 52:58]`, which does not implement the `Copy` trait\n \n error[E0505]: cannot move out of `f` because it is borrowed\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:55:16"}, {"sha": "dcc6078969449de5301dd33abcac8835119b978e", "filename": "src/test/ui/span/move-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -7,7 +7,7 @@ LL |     let x: () = move || ();\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n-                found closure `[closure@$DIR/move-closure.rs:5:17: 5:27]`\n+                found closure `[closure@$DIR/move-closure.rs:5:17: 5:24]`\n help: use parentheses to call this closure\n    |\n LL |     let x: () = (move || ())();"}, {"sha": "c7d420e0aae83efaa353285f4e8c38b6ec81800f", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -21,18 +21,18 @@ help: use parentheses to call the function\n LL |     bar(foo());\n    |            ++\n \n-error[E0277]: `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]` is not a future\n+error[E0277]: `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:33]` is not a future\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:12:9\n    |\n LL |     let async_closure = async || ();\n    |                         -------- consider calling this closure\n LL |     bar(async_closure);\n-   |     --- ^^^^^^^^^^^^^ `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]` is not a future\n+   |     --- ^^^^^^^^^^^^^ `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:33]` is not a future\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]`\n-   = note: [closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36] must be a future or must implement `IntoFuture` to be awaited\n+   = help: the trait `Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:33]`\n+   = note: [closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:33] must be a future or must implement `IntoFuture` to be awaited\n note: required by a bound in `bar`\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:7:16\n    |"}, {"sha": "e06ee4290abd801d35092d3f3f03f3c1ec3921a7", "filename": "src/test/ui/suggestions/dont-suggest-ref/move-into-closure.stderr", "status": "modified", "additions": 256, "deletions": 401, "changes": 657, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,487 +1,342 @@\n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:28:21\n    |\n-LL |       let x = X(Y);\n-   |           - captured outer variable\n-...\n-LL |       consume_fn(|| {\n-   |  ________________-\n-LL | |         let X(_t) = x;\n-   | |               --    ^ help: consider borrowing here: `&x`\n-   | |               |\n-   | |               data moved here\n-   | |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-LL | |\n-LL | |\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `Fn` closure\n+LL |     let x = X(Y);\n+   |         - captured outer variable\n+...\n+LL |     consume_fn(|| {\n+   |                -- captured by this `Fn` closure\n+LL |         let X(_t) = x;\n+   |               --    ^ help: consider borrowing here: `&x`\n+   |               |\n+   |               data moved here\n+   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:32:34\n    |\n-LL |       let e = Either::One(X(Y));\n-   |           - captured outer variable\n-...\n-LL |       consume_fn(|| {\n-   |  ________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-LL | |\n-LL | |         if let Either::One(_t) = e { }\n-   | |                            --    ^ help: consider borrowing here: `&e`\n-   | |                            |\n-   | |                            data moved here\n-   | |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `Fn` closure\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |     consume_fn(|| {\n+   |                -- captured by this `Fn` closure\n+...\n+LL |         if let Either::One(_t) = e { }\n+   |                            --    ^ help: consider borrowing here: `&e`\n+   |                            |\n+   |                            data moved here\n+   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:36:37\n    |\n-LL |       let e = Either::One(X(Y));\n-   |           - captured outer variable\n-...\n-LL |       consume_fn(|| {\n-   |  ________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         while let Either::One(_t) = e { }\n-   | |                               --    ^ help: consider borrowing here: `&e`\n-   | |                               |\n-   | |                               data moved here\n-   | |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `Fn` closure\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |     consume_fn(|| {\n+   |                -- captured by this `Fn` closure\n+...\n+LL |         while let Either::One(_t) = e { }\n+   |                               --    ^ help: consider borrowing here: `&e`\n+   |                               |\n+   |                               data moved here\n+   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:40:15\n    |\n-LL |       let e = Either::One(X(Y));\n-   |           - captured outer variable\n-...\n-LL |       consume_fn(|| {\n-   |  ________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         match e {\n-   | |               ^ help: consider borrowing here: `&e`\n-...  |\n-LL | |             Either::One(_t)\n-   | |                         --\n-   | |                         |\n-   | |                         data moved here\n-   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `Fn` closure\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |     consume_fn(|| {\n+   |                -- captured by this `Fn` closure\n+...\n+LL |         match e {\n+   |               ^ help: consider borrowing here: `&e`\n+...\n+LL |             Either::One(_t)\n+   |                         --\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:47:15\n    |\n-LL |       let e = Either::One(X(Y));\n-   |           - captured outer variable\n-...\n-LL |       consume_fn(|| {\n-   |  ________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         match e {\n-   | |               ^ help: consider borrowing here: `&e`\n-...  |\n-LL | |             Either::One(_t) => (),\n-   | |                         --\n-   | |                         |\n-   | |                         data moved here\n-   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `Fn` closure\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |     consume_fn(|| {\n+   |                -- captured by this `Fn` closure\n+...\n+LL |         match e {\n+   |               ^ help: consider borrowing here: `&e`\n+...\n+LL |             Either::One(_t) => (),\n+   |                         --\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:56:25\n    |\n-LL |       let x = X(Y);\n-   |           - captured outer variable\n-...\n-LL |       consume_fn(|| {\n-   |  ________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         let X(mut _t) = x;\n-   | |               ------    ^ help: consider borrowing here: `&x`\n-   | |               |\n-   | |               data moved here\n-   | |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `Fn` closure\n+LL |     let x = X(Y);\n+   |         - captured outer variable\n+...\n+LL |     consume_fn(|| {\n+   |                -- captured by this `Fn` closure\n+...\n+LL |         let X(mut _t) = x;\n+   |               ------    ^ help: consider borrowing here: `&x`\n+   |               |\n+   |               data moved here\n+   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:60:38\n    |\n-LL |       let mut em = Either::One(X(Y));\n-   |           ------ captured outer variable\n-...\n-LL |       consume_fn(|| {\n-   |  ________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         if let Either::One(mut _t) = em { }\n-   | |                            ------    ^^ help: consider borrowing here: `&em`\n-   | |                            |\n-   | |                            data moved here\n-   | |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `Fn` closure\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |     consume_fn(|| {\n+   |                -- captured by this `Fn` closure\n+...\n+LL |         if let Either::One(mut _t) = em { }\n+   |                            ------    ^^ help: consider borrowing here: `&em`\n+   |                            |\n+   |                            data moved here\n+   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:64:41\n    |\n-LL |       let mut em = Either::One(X(Y));\n-   |           ------ captured outer variable\n-...\n-LL |       consume_fn(|| {\n-   |  ________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         while let Either::One(mut _t) = em { }\n-   | |                               ------    ^^ help: consider borrowing here: `&em`\n-   | |                               |\n-   | |                               data moved here\n-   | |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `Fn` closure\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |     consume_fn(|| {\n+   |                -- captured by this `Fn` closure\n+...\n+LL |         while let Either::One(mut _t) = em { }\n+   |                               ------    ^^ help: consider borrowing here: `&em`\n+   |                               |\n+   |                               data moved here\n+   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:68:15\n    |\n-LL |       let mut em = Either::One(X(Y));\n-   |           ------ captured outer variable\n-...\n-LL |       consume_fn(|| {\n-   |  ________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         match em {\n-   | |               ^^ help: consider borrowing here: `&em`\n-...  |\n-LL | |             Either::One(mut _t)\n-   | |                         ------\n-   | |                         |\n-   | |                         data moved here\n-   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `Fn` closure\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |     consume_fn(|| {\n+   |                -- captured by this `Fn` closure\n+...\n+LL |         match em {\n+   |               ^^ help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t)\n+   |                         ------\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:75:15\n    |\n-LL |       let mut em = Either::One(X(Y));\n-   |           ------ captured outer variable\n-...\n-LL |       consume_fn(|| {\n-   |  ________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         match em {\n-   | |               ^^ help: consider borrowing here: `&em`\n-...  |\n-LL | |             Either::One(mut _t) => (),\n-   | |                         ------\n-   | |                         |\n-   | |                         data moved here\n-   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `Fn` closure\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |     consume_fn(|| {\n+   |                -- captured by this `Fn` closure\n+...\n+LL |         match em {\n+   |               ^^ help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t) => (),\n+   |                         ------\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:95:21\n    |\n-LL |       let x = X(Y);\n-   |           - captured outer variable\n-...\n-LL |       consume_fnmut(|| {\n-   |  ___________________-\n-LL | |         let X(_t) = x;\n-   | |               --    ^ help: consider borrowing here: `&x`\n-   | |               |\n-   | |               data moved here\n-   | |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-LL | |\n-LL | |\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `FnMut` closure\n+LL |     let x = X(Y);\n+   |         - captured outer variable\n+...\n+LL |     consume_fnmut(|| {\n+   |                   -- captured by this `FnMut` closure\n+LL |         let X(_t) = x;\n+   |               --    ^ help: consider borrowing here: `&x`\n+   |               |\n+   |               data moved here\n+   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:99:34\n    |\n-LL |       let e = Either::One(X(Y));\n-   |           - captured outer variable\n-...\n-LL |       consume_fnmut(|| {\n-   |  ___________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-LL | |\n-LL | |         if let Either::One(_t) = e { }\n-   | |                            --    ^ help: consider borrowing here: `&e`\n-   | |                            |\n-   | |                            data moved here\n-   | |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `FnMut` closure\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |     consume_fnmut(|| {\n+   |                   -- captured by this `FnMut` closure\n+...\n+LL |         if let Either::One(_t) = e { }\n+   |                            --    ^ help: consider borrowing here: `&e`\n+   |                            |\n+   |                            data moved here\n+   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:103:37\n    |\n-LL |       let e = Either::One(X(Y));\n-   |           - captured outer variable\n-...\n-LL |       consume_fnmut(|| {\n-   |  ___________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         while let Either::One(_t) = e { }\n-   | |                               --    ^ help: consider borrowing here: `&e`\n-   | |                               |\n-   | |                               data moved here\n-   | |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `FnMut` closure\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |     consume_fnmut(|| {\n+   |                   -- captured by this `FnMut` closure\n+...\n+LL |         while let Either::One(_t) = e { }\n+   |                               --    ^ help: consider borrowing here: `&e`\n+   |                               |\n+   |                               data moved here\n+   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:107:15\n    |\n-LL |       let e = Either::One(X(Y));\n-   |           - captured outer variable\n-...\n-LL |       consume_fnmut(|| {\n-   |  ___________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         match e {\n-   | |               ^ help: consider borrowing here: `&e`\n-...  |\n-LL | |             Either::One(_t)\n-   | |                         --\n-   | |                         |\n-   | |                         data moved here\n-   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `FnMut` closure\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |     consume_fnmut(|| {\n+   |                   -- captured by this `FnMut` closure\n+...\n+LL |         match e {\n+   |               ^ help: consider borrowing here: `&e`\n+...\n+LL |             Either::One(_t)\n+   |                         --\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:114:15\n    |\n-LL |       let e = Either::One(X(Y));\n-   |           - captured outer variable\n-...\n-LL |       consume_fnmut(|| {\n-   |  ___________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         match e {\n-   | |               ^ help: consider borrowing here: `&e`\n-...  |\n-LL | |             Either::One(_t) => (),\n-   | |                         --\n-   | |                         |\n-   | |                         data moved here\n-   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `FnMut` closure\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |     consume_fnmut(|| {\n+   |                   -- captured by this `FnMut` closure\n+...\n+LL |         match e {\n+   |               ^ help: consider borrowing here: `&e`\n+...\n+LL |             Either::One(_t) => (),\n+   |                         --\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:123:25\n    |\n-LL |       let x = X(Y);\n-   |           - captured outer variable\n-...\n-LL |       consume_fnmut(|| {\n-   |  ___________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         let X(mut _t) = x;\n-   | |               ------    ^ help: consider borrowing here: `&x`\n-   | |               |\n-   | |               data moved here\n-   | |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `FnMut` closure\n+LL |     let x = X(Y);\n+   |         - captured outer variable\n+...\n+LL |     consume_fnmut(|| {\n+   |                   -- captured by this `FnMut` closure\n+...\n+LL |         let X(mut _t) = x;\n+   |               ------    ^ help: consider borrowing here: `&x`\n+   |               |\n+   |               data moved here\n+   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:127:38\n    |\n-LL |       let mut em = Either::One(X(Y));\n-   |           ------ captured outer variable\n-...\n-LL |       consume_fnmut(|| {\n-   |  ___________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         if let Either::One(mut _t) = em { }\n-   | |                            ------    ^^ help: consider borrowing here: `&em`\n-   | |                            |\n-   | |                            data moved here\n-   | |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `FnMut` closure\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |     consume_fnmut(|| {\n+   |                   -- captured by this `FnMut` closure\n+...\n+LL |         if let Either::One(mut _t) = em { }\n+   |                            ------    ^^ help: consider borrowing here: `&em`\n+   |                            |\n+   |                            data moved here\n+   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:131:41\n    |\n-LL |       let mut em = Either::One(X(Y));\n-   |           ------ captured outer variable\n-...\n-LL |       consume_fnmut(|| {\n-   |  ___________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         while let Either::One(mut _t) = em { }\n-   | |                               ------    ^^ help: consider borrowing here: `&em`\n-   | |                               |\n-   | |                               data moved here\n-   | |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `FnMut` closure\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |     consume_fnmut(|| {\n+   |                   -- captured by this `FnMut` closure\n+...\n+LL |         while let Either::One(mut _t) = em { }\n+   |                               ------    ^^ help: consider borrowing here: `&em`\n+   |                               |\n+   |                               data moved here\n+   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:135:15\n    |\n-LL |       let mut em = Either::One(X(Y));\n-   |           ------ captured outer variable\n-...\n-LL |       consume_fnmut(|| {\n-   |  ___________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         match em {\n-   | |               ^^ help: consider borrowing here: `&em`\n-...  |\n-LL | |             Either::One(mut _t)\n-   | |                         ------\n-   | |                         |\n-   | |                         data moved here\n-   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `FnMut` closure\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |     consume_fnmut(|| {\n+   |                   -- captured by this `FnMut` closure\n+...\n+LL |         match em {\n+   |               ^^ help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t)\n+   |                         ------\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:142:15\n    |\n-LL |       let mut em = Either::One(X(Y));\n-   |           ------ captured outer variable\n-...\n-LL |       consume_fnmut(|| {\n-   |  ___________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         match em {\n-   | |               ^^ help: consider borrowing here: `&em`\n-...  |\n-LL | |             Either::One(mut _t) => (),\n-   | |                         ------\n-   | |                         |\n-   | |                         data moved here\n-   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `FnMut` closure\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |     consume_fnmut(|| {\n+   |                   -- captured by this `FnMut` closure\n+...\n+LL |         match em {\n+   |               ^^ help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t) => (),\n+   |                         ------\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:150:15\n    |\n-LL |       let mut em = Either::One(X(Y));\n-   |           ------ captured outer variable\n-...\n-LL |       consume_fnmut(|| {\n-   |  ___________________-\n-LL | |         let X(_t) = x;\n-LL | |\n-LL | |\n-...  |\n-LL | |         match em {\n-   | |               ^^ help: consider borrowing here: `&em`\n-...  |\n-LL | |             Either::One(mut _t) => (),\n-   | |                         ------\n-   | |                         |\n-   | |                         data moved here\n-   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `FnMut` closure\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |     consume_fnmut(|| {\n+   |                   -- captured by this `FnMut` closure\n+...\n+LL |         match em {\n+   |               ^^ help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t) => (),\n+   |                         ------\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error: aborting due to 21 previous errors\n "}, {"sha": "fb0a6f70bfb46e051f9681541c81c257073af4fd", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -19,13 +19,13 @@ help: use parentheses to call the function\n LL |     bar(foo());\n    |            ++\n \n-error[E0277]: the trait bound `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]: T` is not satisfied\n+error[E0277]: the trait bound `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:21]: T` is not satisfied\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:19:9\n    |\n LL |     let closure = || S;\n    |                   -- consider calling this closure\n LL |     bar(closure);\n-   |     --- ^^^^^^^ the trait `T` is not implemented for `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]`\n+   |     --- ^^^^^^^ the trait `T` is not implemented for `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:21]`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "e75ce0da82e51ef25f52b0469b336c39fdb65168", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -278,14 +278,14 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:46:20\n    |\n LL |     let closure = || 42;\n-   |                   ----- the found closure\n+   |                   -- the found closure\n LL |     let _: usize = closure;\n    |            -----   ^^^^^^^ expected `usize`, found closure\n    |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n-           found closure `[closure@$DIR/fn-or-tuple-struct-without-args.rs:45:19: 45:24]`\n+           found closure `[closure@$DIR/fn-or-tuple-struct-without-args.rs:45:19: 45:21]`\n help: use parentheses to call this closure\n    |\n LL |     let _: usize = closure();"}, {"sha": "ae0d3efca4727330c16bfc121288e8605d5ed3be", "filename": "src/test/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -30,11 +30,11 @@ help: consider annotating `S` with `#[derive(Clone)]`\n LL | #[derive(Clone)]\n    |\n \n-error[E0277]: `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:33]` cannot be unpinned\n+error[E0277]: `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:22]` cannot be unpinned\n   --> $DIR/issue-84973-blacklist.rs:17:5\n    |\n LL |     f_unpin(static || { yield; });\n-   |     ^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:33]`\n+   |     ^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:22]`\n    |\n    = note: consider using `Box::pin`\n note: required by a bound in `f_unpin`"}, {"sha": "e3fe25d5f9c97e3e3484b3b6e61284a4ef36268f", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -10,7 +10,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/missing-lifetimes-in-signature.rs:19:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n-   |                            ------ hidden type `[closure@$DIR/missing-lifetimes-in-signature.rs:19:5: 22:6]` captures the anonymous lifetime defined here\n+   |                            ------ hidden type `[closure@$DIR/missing-lifetimes-in-signature.rs:19:5: 19:12]` captures the anonymous lifetime defined here\n ...\n LL | /     move || {\n LL | |"}, {"sha": "1d3dff3be3476d4b0678d0881b06c855fc7ca905", "filename": "src/test/ui/suggestions/option-content-move2.stderr", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,22 +1,19 @@\n error[E0507]: cannot move out of `var`, a captured variable in an `FnMut` closure\n   --> $DIR/option-content-move2.rs:9:9\n    |\n-LL |       let mut var = None;\n-   |           ------- captured outer variable\n-LL |       func(|| {\n-   |  __________-\n-LL | |         // Shouldn't suggest `move ||.as_ref()` here\n-LL | |         move || {\n-   | |         ^^^^^^^ move out of `var` occurs here\n-LL | |\n-LL | |             var = Some(NotCopyable);\n-   | |             ---\n-   | |             |\n-   | |             variable moved due to use in closure\n-   | |             move occurs because `var` has type `Option<NotCopyable>`, which does not implement the `Copy` trait\n-LL | |         }\n-LL | |     });\n-   | |_____- captured by this `FnMut` closure\n+LL |     let mut var = None;\n+   |         ------- captured outer variable\n+LL |     func(|| {\n+   |          -- captured by this `FnMut` closure\n+LL |         // Shouldn't suggest `move ||.as_ref()` here\n+LL |         move || {\n+   |         ^^^^^^^ move out of `var` occurs here\n+LL |\n+LL |             var = Some(NotCopyable);\n+   |             ---\n+   |             |\n+   |             variable moved due to use in closure\n+   |             move occurs because `var` has type `Option<NotCopyable>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "2bdaa4e9780ebf3cae2cbd13dbe61cfa01294a11", "filename": "src/test/ui/suggestions/suggest-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -11,7 +11,7 @@ LL | |     };\n    | |_____^ expected struct `Box`, found closure\n    |\n    = note: expected struct `Box<dyn Fn() -> Result<(), ()>>`\n-             found closure `[closure@$DIR/suggest-box.rs:4:47: 7:6]`\n+             found closure `[closure@$DIR/suggest-box.rs:4:47: 4:49]`\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n help: store this in the heap by calling `Box::new`\n    |"}, {"sha": "de64269d1f191de29783161554364d28693b2d88", "filename": "src/test/ui/suggestions/unnamable-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -19,7 +19,7 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n LL | const C: _ = || 42;\n    |          ^ not allowed in type signatures\n    |\n-note: however, the inferred type `[closure@$DIR/unnamable-types.rs:17:14: 17:19]` cannot be named\n+note: however, the inferred type `[closure@$DIR/unnamable-types.rs:17:14: 17:16]` cannot be named\n   --> $DIR/unnamable-types.rs:17:14\n    |\n LL | const C: _ = || 42;\n@@ -31,7 +31,7 @@ error: missing type for `const` item\n LL | const D = S { t: { let i = 0; move || -> i32 { i } } };\n    |       ^\n    |\n-note: however, the inferred type `S<[closure@$DIR/unnamable-types.rs:23:31: 23:51]>` cannot be named\n+note: however, the inferred type `S<[closure@$DIR/unnamable-types.rs:23:31: 23:45]>` cannot be named\n   --> $DIR/unnamable-types.rs:23:11\n    |\n LL | const D = S { t: { let i = 0; move || -> i32 { i } } };\n@@ -55,7 +55,7 @@ error: missing type for `const` item\n LL | const G = || -> i32 { yield 0; return 1; };\n    |       ^\n    |\n-note: however, the inferred type `[generator@$DIR/unnamable-types.rs:37:11: 37:43]` cannot be named\n+note: however, the inferred type `[generator@$DIR/unnamable-types.rs:37:11: 37:20]` cannot be named\n   --> $DIR/unnamable-types.rs:37:11\n    |\n LL | const G = || -> i32 { yield 0; return 1; };"}, {"sha": "86dbd0aac0310a3f7439a21d1076c6910f64d232", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -18,7 +18,7 @@ error[E0275]: overflow evaluating the requirement `(): Sized`\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"512\"]` attribute to your crate (`issue_91949_hangs_on_recursion`)\n    = note: required because of the requirements on the impl of `Iterator` for `std::iter::Empty<()>`\n    = note: 171 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `Iterator` for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), std::iter::Empty<()>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:52]>>`\n+   = note: required because of the requirements on the impl of `Iterator` for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), std::iter::Empty<()>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "828ae21b4808d5299c169d637da9669834e3637d", "filename": "src/test/ui/tuple/wrong_argument_ice-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -6,7 +6,7 @@ LL |       (|| {})(|| {\n LL | |\n LL | |         let b = 1;\n LL | |     });\n-   | |_____- argument of type `[closure@$DIR/wrong_argument_ice-4.rs:2:13: 5:6]` unexpected\n+   | |_____- argument of type `[closure@$DIR/wrong_argument_ice-4.rs:2:13: 2:15]` unexpected\n    |\n note: closure defined here\n   --> $DIR/wrong_argument_ice-4.rs:2:6"}, {"sha": "1b89d55711dbd690c37f78b37af5a46e868d4cdc", "filename": "src/test/ui/type-alias-impl-trait/issue-53092-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092-2.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -30,7 +30,7 @@ error[E0512]: cannot transmute between types of different sizes, or dependently-\n LL | const CONST_BUG: Bug<u8, ()> = unsafe { std::mem::transmute(|_: u8| ()) };\n    |                                         ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: `[closure@$DIR/issue-53092-2.rs:6:61: 6:71]` (0 bits)\n+   = note: source type: `[closure@$DIR/issue-53092-2.rs:6:61: 6:68]` (0 bits)\n    = note: target type: `Bug<u8, ()>` (size can vary because of [type error])\n \n error[E0277]: the trait bound `U: From<T>` is not satisfied"}, {"sha": "f14bf6b0f7f5c23ba58790874d4742fc27994599", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -10,7 +10,7 @@ note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-57611-trait-alias.rs:21:9\n    |\n LL |         |x| x\n-   |         ^^^^^\n+   |         ^^^\n \n error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-57611-trait-alias.rs:21:9"}, {"sha": "110b8d1eea4d7655e83d2206c43ea779bee02f05", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -23,7 +23,7 @@ LL |     || -> Closure { || () }\n    |                     ^^^^^ expected `()`, found closure\n    |\n    = note: expected unit type `()`\n-                found closure `[closure@$DIR/issue-63279.rs:9:21: 9:26]`\n+                found closure `[closure@$DIR/issue-63279.rs:9:21: 9:23]`\n help: use parentheses to call this closure\n    |\n LL |     || -> Closure { (|| ())() }\n@@ -36,7 +36,7 @@ LL |     || -> Closure { || () }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found closure\n    |\n    = note: expected unit type `()`\n-                found closure `[closure@$DIR/issue-63279.rs:9:5: 9:28]`\n+                found closure `[closure@$DIR/issue-63279.rs:9:5: 9:18]`\n help: use parentheses to call this closure\n    |\n LL |     (|| -> Closure { || () })()"}, {"sha": "8d7f7a07b60c727b476d01b3b51b6c3446f95777", "filename": "src/test/ui/type-alias-impl-trait/issue-94429.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<[generator@$DIR/issue-94429.rs:17:9: 19:10] as Generator>::Yield == ()`\n+error[E0271]: type mismatch resolving `<[generator@$DIR/issue-94429.rs:17:9: 17:16] as Generator>::Yield == ()`\n   --> $DIR/issue-94429.rs:15:26\n    |\n LL |     fn run(&mut self) -> Self::Gen {"}, {"sha": "8508f7a38e2399b054d079b300ad17b11bf5ffff", "filename": "src/test/ui/typeck/issue-91334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -43,7 +43,7 @@ LL | fn f(){||yield(((){),\n    |       help: a return type might be missing here: `-> _`\n    |\n    = note: expected unit type `()`\n-              found generator `[generator@$DIR/issue-91334.rs:10:8: 10:23]`\n+              found generator `[generator@$DIR/issue-91334.rs:10:8: 10:10]`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "101aee39559c3c05af984cc1602f09141be5dc41", "filename": "src/test/ui/typeck/return_type_containing_closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -5,7 +5,7 @@ LL |     vec!['a'].iter().map(|c| c)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Map`\n    |\n    = note: expected unit type `()`\n-                 found struct `Map<std::slice::Iter<'_, char>, [closure@$DIR/return_type_containing_closure.rs:3:26: 3:31]>`\n+                 found struct `Map<std::slice::Iter<'_, char>, [closure@$DIR/return_type_containing_closure.rs:3:26: 3:29]>`\n help: consider using a semicolon here\n    |\n LL |     vec!['a'].iter().map(|c| c);"}, {"sha": "bfa3061de0815a8ea4cc7e0499c16eb52394296e", "filename": "src/test/ui/unboxed-closures/unboxed-closure-illegal-move.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -4,9 +4,8 @@ error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn(|| drop(x));\n-   |                       --------^-\n-   |                       |       |\n-   |                       |       move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                       --      ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                       |\n    |                       captured by this `Fn` closure\n \n error[E0507]: cannot move out of `x`, a captured variable in an `FnMut` closure\n@@ -15,9 +14,8 @@ error[E0507]: cannot move out of `x`, a captured variable in an `FnMut` closure\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn_mut(|| drop(x));\n-   |                           --------^-\n-   |                           |       |\n-   |                           |       move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                           --      ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                           |\n    |                           captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n@@ -26,9 +24,8 @@ error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn(move || drop(x));\n-   |                       -------------^-\n-   |                       |            |\n-   |                       |            move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                       -------      ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                       |\n    |                       captured by this `Fn` closure\n \n error[E0507]: cannot move out of `x`, a captured variable in an `FnMut` closure\n@@ -37,9 +34,8 @@ error[E0507]: cannot move out of `x`, a captured variable in an `FnMut` closure\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn_mut(move || drop(x));\n-   |                           -------------^-\n-   |                           |            |\n-   |                           |            move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                           -------      ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                           |\n    |                           captured by this `FnMut` closure\n \n error: aborting due to 4 previous errors"}, {"sha": "85ff49d61a3fff949b9c8b77f7e9e30baeb1eea4", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fn-once-move-from-projection.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fn-once-move-from-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fn-once-move-from-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fn-once-move-from-projection.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -2,9 +2,8 @@ error[E0525]: expected a closure that implements the `Fn` trait, but this closur\n   --> $DIR/unboxed-closures-infer-fn-once-move-from-projection.rs:14:13\n    |\n LL |     let c = || drop(y.0);\n-   |             ^^^^^^^^---^\n-   |             |       |\n-   |             |       closure is `FnOnce` because it moves the variable `y` out of its environment\n+   |             ^^      --- closure is `FnOnce` because it moves the variable `y` out of its environment\n+   |             |\n    |             this closure implements `FnOnce`, not `Fn`\n LL |     foo(c);\n    |     --- the requirement to implement `Fn` derives from here"}, {"sha": "1a63af029c934cd6958f34a67ddf80ee14727217", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutate-upvar.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -28,17 +28,13 @@ LL |         n += 1;\n error[E0594]: cannot assign to `n`, as it is a captured variable in a `Fn` closure\n   --> $DIR/unboxed-closures-mutate-upvar.rs:53:9\n    |\n-LL |   fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       let mut f = to_fn(move || {\n-   |  _________________-----_-\n-   | |                 |\n-   | |                 expects `Fn` instead of `FnMut`\n-LL | |         n += 1;\n-   | |         ^^^^^^ cannot assign\n-LL | |     });\n-   | |_____- in this closure\n+LL |     let mut f = to_fn(move || {\n+   |                 ----- expects `Fn` instead of `FnMut`\n+LL |         n += 1;\n+   |         ^^^^^^ cannot assign\n \n error: aborting due to 4 previous errors\n "}, {"sha": "91d3e609665c4e89b66565f93c245ea20bb9acea", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutated-upvar-from-fn-closure.stderr", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,18 +1,13 @@\n error[E0594]: cannot assign to `counter`, as it is a captured variable in a `Fn` closure\n   --> $DIR/unboxed-closures-mutated-upvar-from-fn-closure.rs:11:9\n    |\n-LL |   fn call<F>(f: F) where F : Fn() {\n-   |                 - change this to accept `FnMut` instead of `Fn`\n+LL | fn call<F>(f: F) where F : Fn() {\n+   |               - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |       call(|| {\n-   |  _____----_-\n-   | |     |\n-   | |     expects `Fn` instead of `FnMut`\n-LL | |         counter += 1;\n-   | |         ^^^^^^^^^^^^ cannot assign\n-LL | |\n-LL | |     });\n-   | |_____- in this closure\n+LL |     call(|| {\n+   |     ---- expects `Fn` instead of `FnMut`\n+LL |         counter += 1;\n+   |         ^^^^^^^^^^^^ cannot assign\n \n error: aborting due to previous error\n "}, {"sha": "4f89afa320d706f1cd6b255628ed311db83dab77", "filename": "src/test/ui/unboxed-closures/unboxed-closures-static-call-wrong-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -1,8 +1,8 @@\n-error[E0599]: no method named `call` found for closure `[closure@$DIR/unboxed-closures-static-call-wrong-trait.rs:6:26: 6:31]` in the current scope\n+error[E0599]: no method named `call` found for closure `[closure@$DIR/unboxed-closures-static-call-wrong-trait.rs:6:26: 6:29]` in the current scope\n   --> $DIR/unboxed-closures-static-call-wrong-trait.rs:7:10\n    |\n LL |     mut_.call((0, ));\n-   |     ---- ^^^^ method not found in `[closure@$DIR/unboxed-closures-static-call-wrong-trait.rs:6:26: 6:31]`\n+   |     ---- ^^^^ method not found in `[closure@$DIR/unboxed-closures-static-call-wrong-trait.rs:6:26: 6:29]`\n    |     |\n    |     this is a function, perhaps you wish to call it\n "}, {"sha": "c96c59afc5a54d77dd79d5e063e7f4710554361b", "filename": "src/test/ui/unsized/box-instead-of-dyn-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funsized%2Fbox-instead-of-dyn-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funsized%2Fbox-instead-of-dyn-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fbox-instead-of-dyn-fn.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -14,8 +14,8 @@ LL | |\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note: expected closure `[closure@$DIR/box-instead-of-dyn-fn.rs:8:9: 8:32]`\n-               found struct `Box<[closure@$DIR/box-instead-of-dyn-fn.rs:10:18: 10:43]>`\n+   = note: expected closure `[closure@$DIR/box-instead-of-dyn-fn.rs:8:9: 8:16]`\n+               found struct `Box<[closure@$DIR/box-instead-of-dyn-fn.rs:10:18: 10:25]>`\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/box-instead-of-dyn-fn.rs:5:56"}, {"sha": "8795aa1687f3de42a1fcc28a294016643d05966e", "filename": "src/test/ui/unsized/issue-91801.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funsized%2Fissue-91801.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftest%2Fui%2Funsized%2Fissue-91801.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-91801.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -5,7 +5,7 @@ LL | fn or<'a>(first: &'static Validator<'a>, second: &'static Validator<'a>) ->\n    |                                                                             ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: use `impl Fn(&'a Something) -> Result<(), ()> + Send + Sync + 'a` as the return type, as all return paths are of type `Box<[closure@$DIR/issue-91801.rs:10:21: 12:6]>`, which implements `Fn(&'a Something) -> Result<(), ()> + Send + Sync + 'a`\n+help: use `impl Fn(&'a Something) -> Result<(), ()> + Send + Sync + 'a` as the return type, as all return paths are of type `Box<[closure@$DIR/issue-91801.rs:10:21: 10:70]>`, which implements `Fn(&'a Something) -> Result<(), ()> + Send + Sync + 'a`\n    |\n LL | fn or<'a>(first: &'static Validator<'a>, second: &'static Validator<'a>) -> impl Fn(&'a Something) -> Result<(), ()> + Send + Sync + 'a {\n    |                                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}, {"sha": "8da2965c6351266b3e80fe480be82b02428e3924", "filename": "src/tools/clippy/tests/ui/crashes/ice-6251.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc87250efc5b5fcec85d43eaa73f7a9acc2198a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6251.stderr?ref=8cc87250efc5b5fcec85d43eaa73f7a9acc2198a", "patch": "@@ -33,7 +33,7 @@ LL | fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n    |                                            ^^^^^^^^^^^ expected `usize`, found closure\n    |\n    = note: expected type `usize`\n-           found closure `[closure@$DIR/ice-6251.rs:4:44: 4:55]`\n+           found closure `[closure@$DIR/ice-6251.rs:4:44: 4:53]`\n \n error: aborting due to 4 previous errors\n "}]}