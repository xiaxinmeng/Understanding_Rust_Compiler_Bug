{"sha": "73a30f8d8bb7a2da0e72d9c04c2cfd8db11b35f3", "node_id": "C_kwDOAAsO6NoAKDczYTMwZjhkOGJiN2EyZGEwZTcyZDljMDRjMmNmZDhkYjExYjM1ZjM", "commit": {"author": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2022-07-05T07:50:42Z"}, "committer": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2022-08-26T20:13:33Z"}, "message": "More tests for invalid_value lint", "tree": {"sha": "34bc1666158db2c3e9ca0e97919ce8248bf0f55d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34bc1666158db2c3e9ca0e97919ce8248bf0f55d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73a30f8d8bb7a2da0e72d9c04c2cfd8db11b35f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73a30f8d8bb7a2da0e72d9c04c2cfd8db11b35f3", "html_url": "https://github.com/rust-lang/rust/commit/73a30f8d8bb7a2da0e72d9c04c2cfd8db11b35f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73a30f8d8bb7a2da0e72d9c04c2cfd8db11b35f3/comments", "author": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "committer": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ddb2d02ed61666125602c399e4492a1e8d1f51", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ddb2d02ed61666125602c399e4492a1e8d1f51", "html_url": "https://github.com/rust-lang/rust/commit/57ddb2d02ed61666125602c399e4492a1e8d1f51"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "dae258407ebb0801cbf888343495196370ff1ca4", "filename": "src/test/ui/lint/uninitialized-zeroed.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73a30f8d8bb7a2da0e72d9c04c2cfd8db11b35f3/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a30f8d8bb7a2da0e72d9c04c2cfd8db11b35f3/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs?ref=73a30f8d8bb7a2da0e72d9c04c2cfd8db11b35f3", "patch": "@@ -103,6 +103,15 @@ fn main() {\n         let _val: i32 = mem::zeroed();\n         let _val: i32 = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n \n+        let _val: f32 = mem::zeroed();\n+        let _val: f32 = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n+        let _val: *const () = mem::zeroed();\n+        let _val: *const () = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n+        let _val: *const [()] = mem::zeroed();\n+        let _val: *const [()] = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n         // Transmute-from-0\n         let _val: &'static i32 = mem::transmute(0usize); //~ ERROR: does not permit zero-initialization\n         let _val: &'static [i32] = mem::transmute((0usize, 0usize)); //~ ERROR: does not permit zero-initialization"}, {"sha": "b46042e7be43f8100e3ea3f68426ba2bb53ad051", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/73a30f8d8bb7a2da0e72d9c04c2cfd8db11b35f3/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73a30f8d8bb7a2da0e72d9c04c2cfd8db11b35f3/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=73a30f8d8bb7a2da0e72d9c04c2cfd8db11b35f3", "patch": "@@ -425,8 +425,41 @@ LL |         let _val: i32 = mem::uninitialized();\n    |\n    = note: integers must not be uninitialized\n \n+error: the type `f32` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:107:25\n+   |\n+LL |         let _val: f32 = mem::uninitialized();\n+   |                         ^^^^^^^^^^^^^^^^^^^^\n+   |                         |\n+   |                         this code causes undefined behavior when executed\n+   |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |\n+   = note: floats must not be uninitialized\n+\n+error: the type `*const ()` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:110:31\n+   |\n+LL |         let _val: *const () = mem::uninitialized();\n+   |                               ^^^^^^^^^^^^^^^^^^^^\n+   |                               |\n+   |                               this code causes undefined behavior when executed\n+   |                               help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |\n+   = note: raw pointers must not be uninitialized\n+\n+error: the type `*const [()]` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:113:33\n+   |\n+LL |         let _val: *const [()] = mem::uninitialized();\n+   |                                 ^^^^^^^^^^^^^^^^^^^^\n+   |                                 |\n+   |                                 this code causes undefined behavior when executed\n+   |                                 help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |\n+   = note: raw pointers must not be uninitialized\n+\n error: the type `&i32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:107:34\n+  --> $DIR/uninitialized-zeroed.rs:116:34\n    |\n LL |         let _val: &'static i32 = mem::transmute(0usize);\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^\n@@ -437,7 +470,7 @@ LL |         let _val: &'static i32 = mem::transmute(0usize);\n    = note: references must be non-null\n \n error: the type `&[i32]` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:108:36\n+  --> $DIR/uninitialized-zeroed.rs:117:36\n    |\n LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -448,7 +481,7 @@ LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    = note: references must be non-null\n \n error: the type `NonZeroU32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:109:32\n+  --> $DIR/uninitialized-zeroed.rs:118:32\n    |\n LL |         let _val: NonZeroU32 = mem::transmute(0);\n    |                                ^^^^^^^^^^^^^^^^^\n@@ -459,7 +492,7 @@ LL |         let _val: NonZeroU32 = mem::transmute(0);\n    = note: `std::num::NonZeroU32` must be non-null\n \n error: the type `NonNull<i32>` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:112:34\n+  --> $DIR/uninitialized-zeroed.rs:121:34\n    |\n LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -470,7 +503,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();\n    = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `NonNull<i32>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:113:34\n+  --> $DIR/uninitialized-zeroed.rs:122:34\n    |\n LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -481,7 +514,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `bool` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:114:26\n+  --> $DIR/uninitialized-zeroed.rs:123:26\n    |\n LL |         let _val: bool = MaybeUninit::uninit().assume_init();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -491,5 +524,5 @@ LL |         let _val: bool = MaybeUninit::uninit().assume_init();\n    |\n    = note: booleans must be either `true` or `false`\n \n-error: aborting due to 40 previous errors\n+error: aborting due to 43 previous errors\n "}]}