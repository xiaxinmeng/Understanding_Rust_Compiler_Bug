{"sha": "6d0d051628503f1147a452ad83c4f24b63c9f395", "node_id": "C_kwDOAAsO6NoAKDZkMGQwNTE2Mjg1MDNmMTE0N2E0NTJhZDgzYzRmMjRiNjNjOWYzOTU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-20T15:12:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-20T15:12:10Z"}, "message": "Simplify", "tree": {"sha": "03a4a380a49cb2c474b4b667984f2cd2cf835e9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03a4a380a49cb2c474b4b667984f2cd2cf835e9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d0d051628503f1147a452ad83c4f24b63c9f395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0d051628503f1147a452ad83c4f24b63c9f395", "html_url": "https://github.com/rust-lang/rust/commit/6d0d051628503f1147a452ad83c4f24b63c9f395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d0d051628503f1147a452ad83c4f24b63c9f395/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "817a6a860971e91e42c0a3624513f90516536dfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/817a6a860971e91e42c0a3624513f90516536dfb", "html_url": "https://github.com/rust-lang/rust/commit/817a6a860971e91e42c0a3624513f90516536dfb"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "2c0c6e0b8394fb14e8e819bc6fa6ea99eef71a1b", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6d0d051628503f1147a452ad83c4f24b63c9f395/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0d051628503f1147a452ad83c4f24b63c9f395/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=6d0d051628503f1147a452ad83c4f24b63c9f395", "patch": "@@ -153,7 +153,7 @@ fn is_valid(scalar: &Scalar, value: i128) -> bool {\n     }\n }\n \n-fn get_name(variant: EnumVariantId, ctx: &mut ConstEvalCtx<'_>) -> String {\n+fn get_name(ctx: &mut ConstEvalCtx<'_>, variant: EnumVariantId) -> String {\n     let loc = variant.parent.lookup(ctx.db.upcast());\n     let children = variant.parent.child_source(ctx.db.upcast());\n     let item_tree = loc.id.item_tree(ctx.db.upcast());\n@@ -167,20 +167,24 @@ pub fn eval_const(\n     expr_id: ExprId,\n     ctx: &mut ConstEvalCtx<'_>,\n ) -> Result<ComputedExpr, ConstEvalError> {\n+    let u128_to_i128 = |it: u128| -> Result<i128, ConstEvalError> {\n+        it.try_into().map_err(|_| ConstEvalError::NotSupported(\"u128 is too big\"))\n+    };\n+\n     let expr = &ctx.exprs[expr_id];\n     match expr {\n         Expr::Missing => match ctx.owner {\n+            // evaluate the implicit variant index of an enum variant without expression\n+            // FIXME: This should return the type of the enum representation\n             DefWithBodyId::VariantId(variant) => {\n                 let prev_idx: u32 = variant.local_id.into_raw().into();\n-                let prev_idx = prev_idx.checked_sub(1).map(|idx| Idx::from_raw(RawIdx::from(idx)));\n+                let prev_idx = prev_idx.checked_sub(1).map(RawIdx::from).map(Idx::from_raw);\n                 let value = match prev_idx {\n-                    Some(prev) => {\n-                        let prev_variant = EnumVariantId { local_id: prev, ..variant };\n+                    Some(local_id) => {\n+                        let prev_variant = EnumVariantId { local_id, parent: variant.parent };\n                         1 + match ctx.db.const_eval_variant(prev_variant)? {\n                             ComputedExpr::Literal(Literal::Int(v, _)) => v,\n-                            ComputedExpr::Literal(Literal::Uint(v, _)) => v\n-                                .try_into()\n-                                .map_err(|_| ConstEvalError::NotSupported(\"too big u128\"))?,\n+                            ComputedExpr::Literal(Literal::Uint(v, _)) => u128_to_i128(v)?,\n                             _ => {\n                                 return Err(ConstEvalError::NotSupported(\n                                     \"Enum can't contain this kind of value\",\n@@ -206,9 +210,7 @@ pub fn eval_const(\n                             return Ok(ComputedExpr::Literal(Literal::Bool(!b)))\n                         }\n                         ComputedExpr::Literal(Literal::Int(v, _)) => v,\n-                        ComputedExpr::Literal(Literal::Uint(v, _)) => v\n-                            .try_into()\n-                            .map_err(|_| ConstEvalError::NotSupported(\"too big u128\"))?,\n+                        ComputedExpr::Literal(Literal::Uint(v, _)) => u128_to_i128(v)?,\n                         _ => return Err(ConstEvalError::NotSupported(\"this kind of operator\")),\n                     };\n                     let r = match ty.kind(Interner) {\n@@ -237,9 +239,7 @@ pub fn eval_const(\n                 hir_def::expr::UnaryOp::Neg => {\n                     let v = match ev {\n                         ComputedExpr::Literal(Literal::Int(v, _)) => v,\n-                        ComputedExpr::Literal(Literal::Uint(v, _)) => v\n-                            .try_into()\n-                            .map_err(|_| ConstEvalError::NotSupported(\"too big u128\"))?,\n+                        ComputedExpr::Literal(Literal::Uint(v, _)) => u128_to_i128(v)?,\n                         _ => return Err(ConstEvalError::NotSupported(\"this kind of operator\")),\n                     };\n                     Ok(ComputedExpr::Literal(Literal::Int(\n@@ -258,16 +258,12 @@ pub fn eval_const(\n             let op = op.ok_or(ConstEvalError::IncompleteExpr)?;\n             let v1 = match lhs {\n                 ComputedExpr::Literal(Literal::Int(v, _)) => v,\n-                ComputedExpr::Literal(Literal::Uint(v, _)) => {\n-                    v.try_into().map_err(|_| ConstEvalError::NotSupported(\"too big u128\"))?\n-                }\n+                ComputedExpr::Literal(Literal::Uint(v, _)) => u128_to_i128(v)?,\n                 _ => return Err(ConstEvalError::NotSupported(\"this kind of operator\")),\n             };\n             let v2 = match rhs {\n                 ComputedExpr::Literal(Literal::Int(v, _)) => v,\n-                ComputedExpr::Literal(Literal::Uint(v, _)) => {\n-                    v.try_into().map_err(|_| ConstEvalError::NotSupported(\"too big u128\"))?\n-                }\n+                ComputedExpr::Literal(Literal::Uint(v, _)) => u128_to_i128(v)?,\n                 _ => return Err(ConstEvalError::NotSupported(\"this kind of operator\")),\n             };\n             match op {\n@@ -380,7 +376,7 @@ pub fn eval_const(\n                 }\n                 ValueNs::EnumVariantId(id) => match ctx.db.const_eval_variant(id)? {\n                     ComputedExpr::Literal(lit) => {\n-                        Ok(ComputedExpr::Enum(get_name(id, ctx), id, lit))\n+                        Ok(ComputedExpr::Enum(get_name(ctx, id), id, lit))\n                     }\n                     _ => Err(ConstEvalError::NotSupported(\n                         \"Enums can't evalute to anything but numbers\",\n@@ -389,6 +385,7 @@ pub fn eval_const(\n                 _ => Err(ConstEvalError::NotSupported(\"path that are not const or local\")),\n             }\n         }\n+        // FIXME: Handle the cast target\n         &Expr::Cast { expr, .. } => match eval_const(expr, ctx)? {\n             ComputedExpr::Enum(_, _, lit) => Ok(ComputedExpr::Literal(lit)),\n             _ => Err(ConstEvalError::NotSupported(\"Can't cast these types\")),\n@@ -463,15 +460,15 @@ pub(crate) fn const_eval_recover(\n     Err(ConstEvalError::Loop)\n }\n \n-pub(crate) fn const_eval_recover_variant(\n+pub(crate) fn const_eval_variant_recover(\n     _: &dyn HirDatabase,\n     _: &[String],\n     _: &EnumVariantId,\n ) -> Result<ComputedExpr, ConstEvalError> {\n     Err(ConstEvalError::Loop)\n }\n \n-pub(crate) fn const_eval_query(\n+pub(crate) fn const_eval_variant_query(\n     db: &dyn HirDatabase,\n     const_id: ConstId,\n ) -> Result<ComputedExpr, ConstEvalError> {"}]}