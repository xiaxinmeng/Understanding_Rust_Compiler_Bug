{"sha": "a15b61780b24a2311a3e42a3437b3418921a3ed3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNWI2MTc4MGIyNGEyMzExYTNlNDJhMzQzN2IzNDE4OTIxYTNlZDM=", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2018-08-22T22:18:45Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2018-08-22T22:18:45Z"}, "message": "tidy: Stop requiring a license header\n\nPreviously approved in rust-lang/rust#43498 ; update tidy to match.", "tree": {"sha": "1aed4c29d183fe9c4429dedd9185cd646314cb7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aed4c29d183fe9c4429dedd9185cd646314cb7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a15b61780b24a2311a3e42a3437b3418921a3ed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a15b61780b24a2311a3e42a3437b3418921a3ed3", "html_url": "https://github.com/rust-lang/rust/commit/a15b61780b24a2311a3e42a3437b3418921a3ed3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a15b61780b24a2311a3e42a3437b3418921a3ed3/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75b0471a8b87c44e0bd953d2a5c36d896128723", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75b0471a8b87c44e0bd953d2a5c36d896128723", "html_url": "https://github.com/rust-lang/rust/commit/b75b0471a8b87c44e0bd953d2a5c36d896128723"}], "stats": {"total": 53, "additions": 0, "deletions": 53}, "files": [{"sha": "6b431ccda0883e9abc8d3a50bd12d86fc8857f4f", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a15b61780b24a2311a3e42a3437b3418921a3ed3/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15b61780b24a2311a3e42a3437b3418921a3ed3/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=a15b61780b24a2311a3e42a3437b3418921a3ed3", "patch": "@@ -17,7 +17,6 @@\n //! * No trailing whitespace\n //! * No CR characters\n //! * No `TODO` or `XXX` directives\n-//! * A valid license header is at the top\n //! * No unexplained ` ```ignore ` or ` ```rust,ignore ` doc tests\n //!\n //! A number of these checks can be opted-out of with various directives like\n@@ -28,16 +27,6 @@ use std::io::prelude::*;\n use std::path::Path;\n \n const COLS: usize = 100;\n-const LICENSE: &'static str = \"\\\n-Copyright <year> The Rust Project Developers. See the COPYRIGHT\n-file at the top-level directory of this distribution and at\n-http://rust-lang.org/COPYRIGHT.\n-\n-Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-<LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-option. This file may not be copied, modified, or distributed\n-except according to those terms.\";\n \n const UNEXPLAINED_IGNORE_DOCTEST_INFO: &str = r#\"unexplained \"```ignore\" doctest; try one:\n \n@@ -168,52 +157,10 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 trailing_new_lines = 0;\n             }\n         }\n-        if !licenseck(file, &contents) {\n-            tidy_error!(bad, \"{}: incorrect license\", file.display());\n-        }\n         match trailing_new_lines {\n             0 => tidy_error!(bad, \"{}: missing trailing newline\", file.display()),\n             1 | 2 => {}\n             n => tidy_error!(bad, \"{}: too many trailing newlines ({})\", file.display(), n),\n         };\n     })\n }\n-\n-fn licenseck(file: &Path, contents: &str) -> bool {\n-    if contents.contains(\"ignore-license\") {\n-        return true\n-    }\n-    let exceptions = [\n-        \"libstd/sync/mpsc/mpsc_queue.rs\",\n-        \"libstd/sync/mpsc/spsc_queue.rs\",\n-    ];\n-    if exceptions.iter().any(|f| file.ends_with(f)) {\n-        return true\n-    }\n-\n-    // Skip the BOM if it's there\n-    let bom = \"\\u{feff}\";\n-    let contents = if contents.starts_with(bom) {&contents[3..]} else {contents};\n-\n-    // See if the license shows up in the first 100 lines\n-    let lines = contents.lines().take(100).collect::<Vec<_>>();\n-    lines.windows(LICENSE.lines().count()).any(|window| {\n-        let offset = if window.iter().all(|w| w.starts_with(\"//\")) {\n-            2\n-        } else if window.iter().all(|w| w.starts_with('#')) {\n-            1\n-        } else if window.iter().all(|w| w.starts_with(\" *\")) {\n-            2\n-        } else {\n-            return false\n-        };\n-        window.iter().map(|a| a[offset..].trim())\n-              .zip(LICENSE.lines()).all(|(a, b)| {\n-            a == b || match b.find(\"<year>\") {\n-                Some(i) => a.starts_with(&b[..i]) && a.ends_with(&b[i+6..]),\n-                None => false,\n-            }\n-        })\n-    })\n-\n-}"}]}