{"sha": "cefff237bf36c4868f047ceb3e98646710ef7ac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZmZmMjM3YmYzNmM0ODY4ZjA0N2NlYjNlOTg2NDY3MTBlZjdhYzA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-16T12:35:34Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-18T11:49:01Z"}, "message": "Make tag, resource and object constructors take their arguments by copy\n\nDoing something like some([1, 2, 3]) will now no longer create a temporary\ncopy of the vector. It will also be easier for the kind checker to see that\nputting a resource into a data-structure constructor is safe.", "tree": {"sha": "34f17776181c9841f492d1736bdaecc9ff48c912", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34f17776181c9841f492d1736bdaecc9ff48c912"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cefff237bf36c4868f047ceb3e98646710ef7ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cefff237bf36c4868f047ceb3e98646710ef7ac0", "html_url": "https://github.com/rust-lang/rust/commit/cefff237bf36c4868f047ceb3e98646710ef7ac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cefff237bf36c4868f047ceb3e98646710ef7ac0/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e0311214160ea0dc7d1ff7347db6c6550c79de2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0311214160ea0dc7d1ff7347db6c6550c79de2", "html_url": "https://github.com/rust-lang/rust/commit/4e0311214160ea0dc7d1ff7347db6c6550c79de2"}], "stats": {"total": 58, "additions": 18, "deletions": 40}, "files": [{"sha": "22f088b26f64642409deb68bae78f8d794deaee2", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cefff237bf36c4868f047ceb3e98646710ef7ac0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefff237bf36c4868f047ceb3e98646710ef7ac0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=cefff237bf36c4868f047ceb3e98646710ef7ac0", "patch": "@@ -3587,8 +3587,8 @@ fn trans_bind_1(cx: @block_ctxt, outgoing_fty: ty::t,\n     };\n \n     // Actually construct the closure\n-    let closure = build_environment\n-        (bcx, lltydescs, env_vals + vec::map(env_expr, bound), true);\n+    let closure = build_environment(bcx, lltydescs, env_vals +\n+                                    vec::map({|x| env_expr(x)}, bound), true);\n     bcx = closure.bcx;\n \n     // Make thunk\n@@ -5163,12 +5163,9 @@ fn trans_res_ctor(cx: @local_ctxt, sp: span, dtor: ast::_fn,\n     let lltop = bcx.llbb;\n     let arg_t = arg_tys_of_fn(ccx, ctor_id)[0].ty;\n     let tup_t = ty::mk_tup(ccx.tcx, [ty::mk_int(ccx.tcx), arg_t]);\n-    let arg;\n-    alt fcx.llargs.find(dtor.decl.inputs[0].id) {\n-      some(local_mem(x)) { arg = load_if_immediate(bcx, x, arg_t); }\n-      some(local_imm(x)) { arg = x; }\n-      _ { ccx.sess.span_fatal(sp, \"unbound dtor decl in trans_res_ctor\"); }\n-    }\n+    let arg = alt fcx.llargs.find(dtor.decl.inputs[0].id) {\n+      some(local_mem(x)) { x }\n+    };\n     let llretptr = fcx.llretptr;\n     if ty::type_has_dynamic_size(ccx.tcx, ret_t) {\n         let llret_t = T_ptr(T_struct([ccx.int_type, llvm::LLVMTypeOf(arg)]));\n@@ -5177,9 +5174,8 @@ fn trans_res_ctor(cx: @local_ctxt, sp: span, dtor: ast::_fn,\n \n     // FIXME: silly checks\n     check type_is_tup_like(bcx, tup_t);\n-    let dst = GEP_tup_like(bcx, tup_t, llretptr, [0, 1]);\n-    bcx = dst.bcx;\n-    bcx = copy_val(bcx, INIT, dst.val, arg, arg_t);\n+    let {bcx, val: dst} = GEP_tup_like(bcx, tup_t, llretptr, [0, 1]);\n+    bcx = memmove_ty(bcx, dst, arg, arg_t);\n     check type_is_tup_like(bcx, tup_t);\n     let flag = GEP_tup_like(bcx, tup_t, llretptr, [0, 0]);\n     bcx = flag.bcx;\n@@ -5206,7 +5202,7 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n     let i = 0u;\n     for varg: ast::variant_arg in variant.node.args {\n         fn_args +=\n-            [{mode: ast::by_ref,\n+            [{mode: ast::by_copy,\n               ty: varg.ty,\n               ident: \"arg\" + uint::to_str(i, 10u),\n               id: varg.id}];\n@@ -5261,11 +5257,9 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n         if ty::type_contains_params(bcx_tcx(bcx), arg_ty) {\n             lldestptr = PointerCast(bcx, lldestptr, val_ty(llarg));\n         }\n-        llarg = load_if_immediate(bcx, llarg, arg_ty);\n-        bcx = copy_val(bcx, INIT, lldestptr, llarg, arg_ty);\n+        bcx = memmove_ty(bcx, lldestptr, llarg, arg_ty);\n         i += 1u;\n     }\n-    bcx = trans_block_cleanups(bcx, find_scope_cx(bcx));\n     build_return(bcx);\n     finish_fn(fcx, lltop);\n }"}, {"sha": "d9f25b801a0ad431c9cbdfe3a5795090fceeb313", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cefff237bf36c4868f047ceb3e98646710ef7ac0/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefff237bf36c4868f047ceb3e98646710ef7ac0/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=cefff237bf36c4868f047ceb3e98646710ef7ac0", "patch": "@@ -41,7 +41,7 @@ fn trans_obj(cx: @local_ctxt, sp: span, ob: ast::_obj, ctor_id: ast::node_id,\n     // we're creating.\n     let fn_args: [ast::arg] = [];\n     for f: ast::obj_field in ob.fields {\n-        fn_args += [{mode: ast::by_ref, ty: f.ty, ident: f.ident,\n+        fn_args += [{mode: ast::by_copy, ty: f.ty, ident: f.ident,\n                      id: f.id}];\n     }\n     let fcx = new_fn_ctxt(cx, sp, llctor_decl);\n@@ -174,28 +174,19 @@ fn trans_obj(cx: @local_ctxt, sp: span, ob: ast::_obj, ctor_id: ast::node_id,\n         let body_fields =\n             GEP_tup_like(bcx, body_ty, body, [0, abi::obj_body_elt_fields]);\n         bcx = body_fields.bcx;\n+        // TODO: can we just get fields_ty out of body_ty instead?\n+        let fields_ty = ty::mk_tup(ccx.tcx, obj_fields);\n         i = 0;\n         for f: ast::obj_field in ob.fields {\n             alt bcx.fcx.llargs.find(f.id) {\n-              some(arg1) {\n-                let arg = alt arg1 {\n-                  local_mem(v) { load_if_immediate(bcx, v, arg_tys[i].ty) }\n-                  local_imm(v) { v }\n-                };\n-                // TODO: can we just get fields_ty out of body_ty instead?\n-                let fields_ty: ty::t = ty::mk_tup(ccx.tcx, obj_fields);\n+              some(local_mem(arg)) {\n                 // Silly check\n                 check type_is_tup_like(bcx, fields_ty);\n                 let field =\n                     GEP_tup_like(bcx, fields_ty, body_fields.val, [0, i]);\n-                bcx = field.bcx;\n-                bcx = copy_val(bcx, INIT, field.val, arg, arg_tys[i].ty);\n+                bcx = memmove_ty(field.bcx, field.val, arg, arg_tys[i].ty);\n                 i += 1;\n               }\n-              none. {\n-                bcx_ccx(bcx).sess.span_fatal(f.ty.span,\n-                                             \"internal error in trans_obj\");\n-              }\n             }\n         }\n "}, {"sha": "1537789629efaf45eb8f8efc3d26aeb071ff0ff9", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cefff237bf36c4868f047ceb3e98646710ef7ac0/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefff237bf36c4868f047ceb3e98646710ef7ac0/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=cefff237bf36c4868f047ceb3e98646710ef7ac0", "patch": "@@ -84,7 +84,6 @@ export mk_type;\n export mk_uint;\n export mk_uniq;\n export mk_var;\n-export mk_iter_body_fn;\n export mode;\n export mt;\n export node_type_table;\n@@ -587,11 +586,6 @@ fn mk_type(_cx: ctxt) -> t { ret idx_type; }\n \n fn mk_native(cx: ctxt, did: def_id) -> t { ret gen_ty(cx, ty_native(did)); }\n \n-fn mk_iter_body_fn(cx: ctxt, output: t) -> t {\n-    ret mk_fn(cx, ast::proto_block, [{mode: ast::by_ref, ty: output}],\n-              ty::mk_nil(cx), ast::return_val, []);\n-}\n-\n // Returns the one-level-deep type structure of the given type.\n pure fn struct(cx: ctxt, typ: t) -> sty { interner::get(*cx.ts, typ).struct }\n "}, {"sha": "567d65d038b016abd583550d2c7676db4f10990b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cefff237bf36c4868f047ceb3e98646710ef7ac0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefff237bf36c4868f047ceb3e98646710ef7ac0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=cefff237bf36c4868f047ceb3e98646710ef7ac0", "patch": "@@ -597,7 +597,7 @@ mod collect {\n         for f: ast::obj_field in ob.fields {\n             let g = bind getter(cx, _);\n             let t_field = ast_ty_to_ty(cx.tcx, g, f.ty);\n-            t_inputs += [{mode: ast::by_ref, ty: t_field}];\n+            t_inputs += [{mode: ast::by_copy, ty: t_field}];\n         }\n \n         let t_fn =\n@@ -646,8 +646,7 @@ mod collect {\n             let t_arg = ty_of_arg(cx, f.decl.inputs[0]);\n             let t_res =\n                 {kinds: ty_param_kinds(tps),\n-                 ty:\n-                     ty::mk_res(cx.tcx, local_def(it.id), t_arg.ty,\n+                 ty: ty::mk_res(cx.tcx, local_def(it.id), t_arg.ty,\n                                 mk_ty_params(cx, tps))};\n             cx.tcx.tcache.insert(local_def(it.id), t_res);\n             ret t_res;\n@@ -708,7 +707,7 @@ mod collect {\n                 let args: [arg] = [];\n                 for va: ast::variant_arg in variant.node.args {\n                     let arg_ty = ast_ty_to_ty(cx.tcx, f, va.ty);\n-                    args += [{mode: ast::by_ref, ty: arg_ty}];\n+                    args += [{mode: ast::by_copy, ty: arg_ty}];\n                 }\n                 let tag_t = ty::mk_tag(cx.tcx, tag_id, ty_param_tys);\n                 // FIXME: this will be different for constrained types\n@@ -785,7 +784,7 @@ mod collect {\n                            mk_ty_params(cx, tps));\n             let t_ctor =\n                 ty::mk_fn(cx.tcx, ast::proto_shared(ast::sugar_normal),\n-                          [t_arg], t_res,\n+                          [{mode: ast::by_copy with t_arg}], t_res,\n                           ast::return_val, []);\n             let t_dtor =\n                 ty::mk_fn(cx.tcx, ast::proto_shared(ast::sugar_normal),"}]}