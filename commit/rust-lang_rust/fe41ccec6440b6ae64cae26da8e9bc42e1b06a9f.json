{"sha": "fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNDFjY2VjNjQ0MGI2YWU2NGNhZTI2ZGE4ZTliYzQyZTFiMDZhOWY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-10-18T18:04:59Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-10-18T18:04:59Z"}, "message": "Rename str::to_unique to str::to_owned.", "tree": {"sha": "038b3992d5ffba228128b9c5a1db9dfeddfb6887", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/038b3992d5ffba228128b9c5a1db9dfeddfb6887"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f", "html_url": "https://github.com/rust-lang/rust/commit/fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac50046a111a1ef6fb58b7e5f368ff6b9b55f89c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac50046a111a1ef6fb58b7e5f368ff6b9b55f89c", "html_url": "https://github.com/rust-lang/rust/commit/ac50046a111a1ef6fb58b7e5f368ff6b9b55f89c"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "d41393c23934c10e4c24b1453c0058bd9b8c1d28", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f", "patch": "@@ -329,11 +329,11 @@ pub mod rt {\n         // For strings, precision is the maximum characters\n         // displayed\n         let mut unpadded = match cv.precision {\n-          CountImplied => s.to_unique(),\n+          CountImplied => s.to_owned(),\n           CountIs(max) => if max as uint < str::char_len(s) {\n             str::substr(s, 0u, max as uint)\n           } else {\n-            s.to_unique()\n+            s.to_owned()\n           }\n         };\n         return unsafe { pad(cv, move unpadded, PadNozero) };"}, {"sha": "50489a820291ce244f2817b473b061ddcff7c21f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f", "patch": "@@ -225,7 +225,7 @@ pub fn swap_unwrap<T>(opt: &mut Option<T>) -> T {\n \n pub pure fn unwrap_expect<T>(opt: Option<T>, reason: &str) -> T {\n     //! As unwrap, but with a specified failure message.\n-    if opt.is_none() { fail reason.to_unique(); }\n+    if opt.is_none() { fail reason.to_owned(); }\n     unwrap(move opt)\n }\n "}, {"sha": "3122f3d7f32e2796bd596c37e42f2f074cdffb50", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f", "patch": "@@ -2135,7 +2135,7 @@ pub trait StrSlice {\n     pure fn trim() -> ~str;\n     pure fn trim_left() -> ~str;\n     pure fn trim_right() -> ~str;\n-    pure fn to_unique() -> ~str;\n+    pure fn to_owned() -> ~str;\n     pure fn to_managed() -> @str;\n     pure fn char_at(i: uint) -> char;\n }\n@@ -2258,7 +2258,7 @@ impl &str: StrSlice {\n     pure fn trim_right() -> ~str { trim_right(self) }\n \n     #[inline]\n-    pure fn to_unique() -> ~str { self.slice(0, self.len()) }\n+    pure fn to_owned() -> ~str { self.slice(0, self.len()) }\n \n     #[inline]\n     pure fn to_managed() -> @str {"}, {"sha": "5f64389e58329a7245c0b853dbc97c302bab145c", "filename": "src/libstd/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=fe41ccec6440b6ae64cae26da8e9bc42e1b06a9f", "patch": "@@ -897,7 +897,7 @@ pub impl Deserializer: serialization::Deserializer {\n                 // FIXME(#3148) This hint should not be necessary.\n                 let obj: &self/~Object = obj;\n \n-                match obj.find_ref(&name.to_unique()) {\n+                match obj.find_ref(&name.to_owned()) {\n                     None => fail fmt!(\"no such field: %s\", name),\n                     Some(json) => {\n                         self.stack.push(json);"}]}