{"sha": "aa076d6144581f9e80b0d0e7091e12c35d5f56ed", "node_id": "C_kwDOAAsO6NoAKGFhMDc2ZDYxNDQ1ODFmOWU4MGIwZDBlNzA5MWUxMmMzNWQ1ZjU2ZWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-03T17:12:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-03T17:12:19Z"}, "message": "Rollup merge of #102613 - TaKO8Ki:fix-part-of-101739, r=compiler-errors\n\nFix ICE #101739\n\nFixes a part of #101739\n\nThis cannot cover the following case. It causes `too many args provided` error and obligation does not have references error. I want your advice to solve the following cases as well in this pull request or a follow-up.\n\n```rust\n#![crate_type = \"lib\"]\n#![feature(transmutability)]\n#![allow(dead_code, incomplete_features, non_camel_case_types)]\n\nmod assert {\n    use std::mem::BikeshedIntrinsicFrom;\n\n    pub fn is_transmutable<\n        Src,\n        Dst,\n        Context,\n        const ASSUME_ALIGNMENT: bool,\n        const ASSUME_LIFETIMES: bool,\n        const ASSUME_VALIDITY: bool,\n        const ASSUME_VISIBILITY: bool,\n    >()\n    where\n        Dst: BikeshedIntrinsicFrom<\n            Src,\n            Context,\n            ASSUME_ALIGNMENT,\n            ASSUME_LIFETIMES,\n            ASSUME_VALIDITY,\n            ASSUME_VISIBILITY,\n        >,\n    {}\n}\n\nfn via_const() {\n    struct Context;\n    #[repr(C)] struct Src;\n    #[repr(C)] struct Dst;\n\n    const FALSE: bool = false;\n\n    assert::is_transmutable::<Src, Dst, Context, FALSE, FALSE, FALSE, FALSE>();\n}\n```", "tree": {"sha": "2cc0280a33452e425a7abe2da581c4f1931c4fa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cc0280a33452e425a7abe2da581c4f1931c4fa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa076d6144581f9e80b0d0e7091e12c35d5f56ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjOxfzCRBK7hj4Ov3rIwAAUHUIAHVh9QJ2thwUjiX7N4gRr37I\n7MhwvndceAQR9nSWOtDNmCZHs7XWMclz1805tK0k8vd3uG9JlTttdRNJVX4po+Xx\n77Z+9buF2C83fwjz3wUGdSAwohkU08PRQJ/S0NbkRiXZriCeueLYSMp3953jAobT\n710lxj840/sbUauEsqVd+9qNRU3LHaMcnI2z9zIKEOKhfxOJ34kfvqV2iTifvUum\noSZTznxlj3eprzaOg6os7lfARm6m4dGaReU6+Qsl7U8ndivls/tIpYii3K3vYoNy\ngPpaeU0voWKXiTzlPjvjrBKehY9n/AoiX303RUXS2+BTI3hg8+IM+DuPba1nZJU=\n=QDIv\n-----END PGP SIGNATURE-----\n", "payload": "tree 2cc0280a33452e425a7abe2da581c4f1931c4fa6\nparent 3374a7d6f85081826e6256f97baca0795af29570\nparent 0e615caa8dc17b5d8ca87e956d37a37364cf5994\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664817139 +0200\ncommitter GitHub <noreply@github.com> 1664817139 +0200\n\nRollup merge of #102613 - TaKO8Ki:fix-part-of-101739, r=compiler-errors\n\nFix ICE #101739\n\nFixes a part of #101739\n\nThis cannot cover the following case. It causes `too many args provided` error and obligation does not have references error. I want your advice to solve the following cases as well in this pull request or a follow-up.\n\n```rust\n#![crate_type = \"lib\"]\n#![feature(transmutability)]\n#![allow(dead_code, incomplete_features, non_camel_case_types)]\n\nmod assert {\n    use std::mem::BikeshedIntrinsicFrom;\n\n    pub fn is_transmutable<\n        Src,\n        Dst,\n        Context,\n        const ASSUME_ALIGNMENT: bool,\n        const ASSUME_LIFETIMES: bool,\n        const ASSUME_VALIDITY: bool,\n        const ASSUME_VISIBILITY: bool,\n    >()\n    where\n        Dst: BikeshedIntrinsicFrom<\n            Src,\n            Context,\n            ASSUME_ALIGNMENT,\n            ASSUME_LIFETIMES,\n            ASSUME_VALIDITY,\n            ASSUME_VISIBILITY,\n        >,\n    {}\n}\n\nfn via_const() {\n    struct Context;\n    #[repr(C)] struct Src;\n    #[repr(C)] struct Dst;\n\n    const FALSE: bool = false;\n\n    assert::is_transmutable::<Src, Dst, Context, FALSE, FALSE, FALSE, FALSE>();\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa076d6144581f9e80b0d0e7091e12c35d5f56ed", "html_url": "https://github.com/rust-lang/rust/commit/aa076d6144581f9e80b0d0e7091e12c35d5f56ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa076d6144581f9e80b0d0e7091e12c35d5f56ed/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3374a7d6f85081826e6256f97baca0795af29570", "url": "https://api.github.com/repos/rust-lang/rust/commits/3374a7d6f85081826e6256f97baca0795af29570", "html_url": "https://github.com/rust-lang/rust/commit/3374a7d6f85081826e6256f97baca0795af29570"}, {"sha": "0e615caa8dc17b5d8ca87e956d37a37364cf5994", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e615caa8dc17b5d8ca87e956d37a37364cf5994", "html_url": "https://github.com/rust-lang/rust/commit/0e615caa8dc17b5d8ca87e956d37a37364cf5994"}], "stats": {"total": 122, "additions": 112, "deletions": 10}, "files": [{"sha": "5c8a76401d23397ce84ef1fcd8383f3e76e6413f", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aa076d6144581f9e80b0d0e7091e12c35d5f56ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa076d6144581f9e80b0d0e7091e12c35d5f56ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=aa076d6144581f9e80b0d0e7091e12c35d5f56ed", "patch": "@@ -11,9 +11,10 @@ use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n-use rustc_middle::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n-use rustc_middle::ty::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n-use rustc_middle::ty::{ToPolyTraitRef, ToPredicate};\n+use rustc_middle::ty::{\n+    self, GenericArg, GenericArgKind, GenericParamDefKind, InternalSubsts, SubstsRef,\n+    ToPolyTraitRef, ToPredicate, Ty, TyCtxt,\n+};\n use rustc_span::def_id::DefId;\n \n use crate::traits::project::{normalize_with_depth, normalize_with_depth_to};\n@@ -289,8 +290,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let scope = type_at(2).skip_binder();\n \n-        let assume =\n-            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, const_at(3));\n+        let Some(assume) =\n+            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, const_at(3)) else {\n+                return Err(Unimplemented);\n+            };\n \n         let cause = obligation.cause.clone();\n "}, {"sha": "51f2eb8606a7f3d96b5612bf63bea12298e99715", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa076d6144581f9e80b0d0e7091e12c35d5f56ed/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa076d6144581f9e80b0d0e7091e12c35d5f56ed/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=aa076d6144581f9e80b0d0e7091e12c35d5f56ed", "patch": "@@ -115,18 +115,23 @@ mod rustc {\n             tcx: TyCtxt<'tcx>,\n             param_env: ParamEnv<'tcx>,\n             c: Const<'tcx>,\n-        ) -> Self {\n+        ) -> Option<Self> {\n             use rustc_middle::ty::ScalarInt;\n             use rustc_middle::ty::TypeVisitable;\n             use rustc_span::symbol::sym;\n \n             let c = c.eval(tcx, param_env);\n \n             if let Some(err) = c.error_reported() {\n-                return Self { alignment: true, lifetimes: true, safety: true, validity: true };\n+                return Some(Self {\n+                    alignment: true,\n+                    lifetimes: true,\n+                    safety: true,\n+                    validity: true,\n+                });\n             }\n \n-            let adt_def = c.ty().ty_adt_def().expect(\"The given `Const` must be an ADT.\");\n+            let adt_def = c.ty().ty_adt_def()?;\n \n             assert_eq!(\n                 tcx.require_lang_item(LangItem::TransmuteOpts, None),\n@@ -148,12 +153,12 @@ mod rustc {\n                 fields[field_idx].unwrap_leaf() == ScalarInt::TRUE\n             };\n \n-            Self {\n+            Some(Self {\n                 alignment: get_field(sym::alignment),\n                 lifetimes: get_field(sym::lifetimes),\n                 safety: get_field(sym::safety),\n                 validity: get_field(sym::validity),\n-            }\n+            })\n         }\n     }\n }"}, {"sha": "bcb8b158edfc5b71081f5f2324dcc91ffed5d043", "filename": "src/test/ui/transmutability/issue-101739-1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aa076d6144581f9e80b0d0e7091e12c35d5f56ed/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa076d6144581f9e80b0d0e7091e12c35d5f56ed/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.rs?ref=aa076d6144581f9e80b0d0e7091e12c35d5f56ed", "patch": "@@ -0,0 +1,21 @@\n+#![feature(transmutability)]\n+\n+mod assert {\n+    use std::mem::BikeshedIntrinsicFrom;\n+\n+    pub fn is_transmutable<Src, Context, const ASSUME_ALIGNMENT: bool>()\n+    where\n+        Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>, //~ ERROR cannot find type `Dst` in this scope\n+        //~^ ERROR mismatched types\n+    {\n+    }\n+}\n+\n+fn via_const() {\n+    struct Context;\n+    struct Src;\n+\n+    assert::is_transmutable::<Src, Context, false>();\n+}\n+\n+fn main() {}"}, {"sha": "5fa741f26fd077fcab991165fa53e51848546d67", "filename": "src/test/ui/transmutability/issue-101739-1.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa076d6144581f9e80b0d0e7091e12c35d5f56ed/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa076d6144581f9e80b0d0e7091e12c35d5f56ed/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.stderr?ref=aa076d6144581f9e80b0d0e7091e12c35d5f56ed", "patch": "@@ -0,0 +1,16 @@\n+error[E0412]: cannot find type `Dst` in this scope\n+  --> $DIR/issue-101739-1.rs:8:9\n+   |\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>,\n+   |         ^^^ not found in this scope\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-101739-1.rs:8:50\n+   |\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>,\n+   |                                                  ^^^^^^^^^^^^^^^^ expected struct `Assume`, found `bool`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0412.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "964a7e49ee614f07767b969c517e17623ab4eb68", "filename": "src/test/ui/transmutability/issue-101739-2.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/aa076d6144581f9e80b0d0e7091e12c35d5f56ed/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa076d6144581f9e80b0d0e7091e12c35d5f56ed/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.rs?ref=aa076d6144581f9e80b0d0e7091e12c35d5f56ed", "patch": "@@ -0,0 +1,37 @@\n+#![crate_type = \"lib\"]\n+#![feature(transmutability)]\n+#![allow(dead_code, incomplete_features, non_camel_case_types)]\n+\n+mod assert {\n+    use std::mem::BikeshedIntrinsicFrom;\n+\n+    pub fn is_transmutable<\n+        Src,\n+        Dst,\n+        Context,\n+        const ASSUME_ALIGNMENT: bool,\n+        const ASSUME_LIFETIMES: bool,\n+        const ASSUME_VALIDITY: bool,\n+        const ASSUME_VISIBILITY: bool,\n+    >()\n+    where\n+        Dst: BikeshedIntrinsicFrom< //~ ERROR this trait takes at most 3 generic arguments but 6 generic arguments were supplied\n+            Src,\n+            Context,\n+            ASSUME_ALIGNMENT,\n+            ASSUME_LIFETIMES,\n+            ASSUME_VALIDITY,\n+            ASSUME_VISIBILITY,\n+        >,\n+    {}\n+}\n+\n+fn via_const() {\n+    struct Context;\n+    #[repr(C)] struct Src;\n+    #[repr(C)] struct Dst;\n+\n+    const FALSE: bool = false;\n+\n+    assert::is_transmutable::<Src, Dst, Context, FALSE, FALSE, FALSE, FALSE>();\n+}"}, {"sha": "3f83d6583b09cc6e723bfdedd1807cff6ebf50a5", "filename": "src/test/ui/transmutability/issue-101739-2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa076d6144581f9e80b0d0e7091e12c35d5f56ed/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa076d6144581f9e80b0d0e7091e12c35d5f56ed/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.stderr?ref=aa076d6144581f9e80b0d0e7091e12c35d5f56ed", "patch": "@@ -0,0 +1,20 @@\n+error[E0107]: this trait takes at most 3 generic arguments but 6 generic arguments were supplied\n+  --> $DIR/issue-101739-2.rs:18:14\n+   |\n+LL |           Dst: BikeshedIntrinsicFrom<\n+   |                ^^^^^^^^^^^^^^^^^^^^^ expected at most 3 generic arguments\n+...\n+LL | /             ASSUME_LIFETIMES,\n+LL | |             ASSUME_VALIDITY,\n+LL | |             ASSUME_VISIBILITY,\n+   | |_____________________________- help: remove these generic arguments\n+   |\n+note: trait defined here, with at most 3 generic parameters: `Src`, `Context`, `ASSUME`\n+  --> $SRC_DIR/core/src/mem/transmutability.rs:LL:COL\n+   |\n+LL | pub unsafe trait BikeshedIntrinsicFrom<Src, Context, const ASSUME: Assume = { Assume::NOTHING }>\n+   |                  ^^^^^^^^^^^^^^^^^^^^^ ---  -------  ------------------------------------------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}]}