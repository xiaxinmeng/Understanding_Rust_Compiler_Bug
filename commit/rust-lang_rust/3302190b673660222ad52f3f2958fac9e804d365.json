{"sha": "3302190b673660222ad52f3f2958fac9e804d365", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMDIxOTBiNjczNjYwMjIyYWQ1MmYzZjI5NThmYWM5ZTgwNGQzNjU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-11-11T22:34:57Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-11-14T12:05:56Z"}, "message": "Clean some error codes diagnostics", "tree": {"sha": "aa1f1713acbfa71579b8e3867f220801633ec80d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa1f1713acbfa71579b8e3867f220801633ec80d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3302190b673660222ad52f3f2958fac9e804d365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3302190b673660222ad52f3f2958fac9e804d365", "html_url": "https://github.com/rust-lang/rust/commit/3302190b673660222ad52f3f2958fac9e804d365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3302190b673660222ad52f3f2958fac9e804d365/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aea1ca014bc2745fd052ce0dd61ddae12acdd52", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aea1ca014bc2745fd052ce0dd61ddae12acdd52", "html_url": "https://github.com/rust-lang/rust/commit/0aea1ca014bc2745fd052ce0dd61ddae12acdd52"}], "stats": {"total": 124, "additions": 71, "deletions": 53}, "files": [{"sha": "e6f8521216b3cd02fc735fe7fcfdc9ca12976dfd", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=3302190b673660222ad52f3f2958fac9e804d365", "patch": "@@ -11,7 +11,8 @@ use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n use syntax_pos::{Span, sym};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_macros::HashStable;\n-use errors::DiagnosticId;\n+\n+use rustc_error_codes::*;\n \n #[derive(HashStable)]\n pub struct LibFeatures {\n@@ -98,15 +99,16 @@ impl LibFeatureCollector<'tcx> {\n             (Some(since), _, false) => {\n                 if let Some(prev_since) = self.lib_features.stable.get(&feature) {\n                     if *prev_since != since {\n-                        let msg = format!(\n-                            \"feature `{}` is declared stable since {}, \\\n-                             but was previously declared stable since {}\",\n-                            feature,\n-                            since,\n-                            prev_since,\n+                        self.span_feature_error(\n+                            span,\n+                            &format!(\n+                                \"feature `{}` is declared stable since {}, \\\n+                                 but was previously declared stable since {}\",\n+                                feature,\n+                                since,\n+                                prev_since,\n+                            ),\n                         );\n-                        self.tcx.sess.struct_span_err_with_code(span, &msg,\n-                            DiagnosticId::Error(\"E0711\".into())).emit();\n                         return;\n                     }\n                 }\n@@ -117,17 +119,27 @@ impl LibFeatureCollector<'tcx> {\n                 self.lib_features.unstable.insert(feature);\n             }\n             (Some(_), _, true) | (None, true, _) => {\n-                let msg = format!(\n-                    \"feature `{}` is declared {}, but was previously declared {}\",\n-                    feature,\n-                    if since.is_some() { \"stable\" } else { \"unstable\" },\n-                    if since.is_none() { \"stable\" } else { \"unstable\" },\n+                self.span_feature_error(\n+                    span,\n+                    &format!(\n+                        \"feature `{}` is declared {}, but was previously declared {}\",\n+                        feature,\n+                        if since.is_some() { \"stable\" } else { \"unstable\" },\n+                        if since.is_none() { \"stable\" } else { \"unstable\" },\n+                    ),\n                 );\n-                self.tcx.sess.struct_span_err_with_code(span, &msg,\n-                    DiagnosticId::Error(\"E0711\".into())).emit();\n             }\n         }\n     }\n+\n+    fn span_feature_error(&self, span: Span, msg: &str) {\n+        struct_span_err!(\n+            self.tcx.sess,\n+            span,\n+            E0711,\n+            \"{}\", &msg,\n+        ).emit();\n+    }\n }\n \n impl Visitor<'tcx> for LibFeatureCollector<'tcx> {"}, {"sha": "5036759da3f0cf626180d6581362c8591d639d29", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=3302190b673660222ad52f3f2958fac9e804d365", "patch": "@@ -12,7 +12,7 @@ use syntax::ThinVec;\n use syntax::util::parser::AssocOp;\n use syntax::struct_span_err;\n \n-use errors::{PResult, Applicability, DiagnosticBuilder, DiagnosticId, pluralize};\n+use errors::{PResult, Applicability, DiagnosticBuilder, pluralize};\n use rustc_data_structures::fx::FxHashSet;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n use log::{debug, trace};\n@@ -1413,19 +1413,19 @@ impl<'a> Parser<'a> {\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n \n-        self.diagnostic()\n-            .struct_span_err_with_code(\n-                pat.span,\n-                \"patterns aren't allowed in methods without bodies\",\n-                DiagnosticId::Error(\"E0642\".into()),\n-            )\n-            .span_suggestion_short(\n-                pat.span,\n-                \"give this argument a name or use an underscore to ignore it\",\n-                \"_\".to_owned(),\n-                Applicability::MachineApplicable,\n-            )\n-            .emit();\n+        struct_span_err!(\n+            self.diagnostic(),\n+            pat.span,\n+            E0642,\n+            \"patterns aren't allowed in methods without bodies\",\n+        )\n+        .span_suggestion_short(\n+            pat.span,\n+            \"give this argument a name or use an underscore to ignore it\",\n+            \"_\".to_owned(),\n+            Applicability::MachineApplicable,\n+        )\n+        .emit();\n \n         // Pretend the pattern is `_`, to avoid duplicate errors from AST validation.\n         let pat = P(Pat {"}, {"sha": "cb496f2ecbe58addd518243a76bf254d80de8f93", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=3302190b673660222ad52f3f2958fac9e804d365", "patch": "@@ -14,12 +14,15 @@ use syntax::ThinVec;\n use syntax::token;\n use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::source_map::{self, respan, Span};\n+use syntax::struct_span_err;\n use syntax_pos::BytePos;\n use syntax_pos::symbol::{kw, sym};\n \n+use rustc_error_codes::*;\n+\n use log::debug;\n use std::mem;\n-use errors::{PResult, Applicability, DiagnosticBuilder, DiagnosticId, StashKey};\n+use errors::{PResult, Applicability, DiagnosticBuilder, StashKey};\n \n /// Whether the type alias or associated type is a concrete type or an opaque type.\n #[derive(Debug)]\n@@ -842,10 +845,11 @@ impl<'a> Parser<'a> {\n                 if let token::DocComment(_) = self.token.kind {\n                     if self.look_ahead(1,\n                     |tok| tok == &token::CloseDelim(token::Brace)) {\n-                        self.diagnostic().struct_span_err_with_code(\n+                        struct_span_err!(\n+                            self.diagnostic(),\n                             self.token.span,\n+                            E0584,\n                             \"found a documentation comment that doesn't document anything\",\n-                            DiagnosticId::Error(\"E0584\".into()),\n                         )\n                         .help(\n                             \"doc comments must come before what they document, maybe a \\"}, {"sha": "f62f0c9a2682ed1cc8ca6726532bf138512729fa", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=3302190b673660222ad52f3f2958fac9e804d365", "patch": "@@ -30,7 +30,7 @@ use syntax::util::comments::{doc_comment_style, strip_doc_comment_decoration};\n use syntax_pos::symbol::{kw, sym, Symbol};\n use syntax_pos::{Span, BytePos, DUMMY_SP, FileName};\n use rustc_data_structures::thin_vec::ThinVec;\n-use errors::{PResult, Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n+use errors::{PResult, Applicability, DiagnosticBuilder, FatalError};\n use log::debug;\n \n use std::borrow::Cow;\n@@ -1251,13 +1251,13 @@ impl<'a> Parser<'a> {\n     /// We are parsing `async fn`. If we are on Rust 2015, emit an error.\n     fn ban_async_in_2015(&self, async_span: Span) {\n         if async_span.rust_2015() {\n-            self.diagnostic()\n-                .struct_span_err_with_code(\n-                    async_span,\n-                    \"`async fn` is not permitted in the 2015 edition\",\n-                    DiagnosticId::Error(\"E0670\".into())\n-                )\n-                .emit();\n+            struct_span_err!(\n+                self.diagnostic(),\n+                async_span,\n+                E0670,\n+                \"`async fn` is not permitted in the 2015 edition\",\n+            )\n+            .emit();\n         }\n     }\n "}, {"sha": "1ebe9b5e120f457016ebdbe7f6a6eb5d5d6c430b", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=3302190b673660222ad52f3f2958fac9e804d365", "patch": "@@ -1,6 +1,6 @@\n use std::cmp::Reverse;\n \n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder};\n use log::debug;\n use rustc::bug;\n use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n@@ -207,11 +207,11 @@ impl<'a> Resolver<'a> {\n                 let origin_sp = origin.iter().copied().collect::<Vec<_>>();\n \n                 let msp = MultiSpan::from_spans(target_sp.clone());\n-                let msg = format!(\"variable `{}` is not bound in all patterns\", name);\n-                let mut err = self.session.struct_span_err_with_code(\n+                let mut err = struct_span_err!(\n+                    self.session,\n                     msp,\n-                    &msg,\n-                    DiagnosticId::Error(\"E0408\".into()),\n+                    E0408,\n+                    \"variable `{}` is not bound in all patterns\", name,\n                 );\n                 for sp in target_sp {\n                     err.span_label(sp, format!(\"pattern doesn't bind `{}`\", name));"}, {"sha": "6508295b8edcafd241c2f4d0ee7d43bba9cab2ef", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=3302190b673660222ad52f3f2958fac9e804d365", "patch": "@@ -13,7 +13,7 @@ use syntax::ast;\n use syntax::feature_gate::{self, GateIssue};\n use syntax_pos::Span;\n use syntax::symbol::sym;\n-use errors::{DiagnosticBuilder, DiagnosticId};\n+use errors::DiagnosticBuilder;\n \n use rustc::hir::itemlikevisit::ParItemLikeVisitor;\n use rustc::hir;\n@@ -847,12 +847,13 @@ fn check_method_receiver<'fcx, 'tcx>(\n }\n \n fn e0307(fcx: &FnCtxt<'fcx, 'tcx>, span: Span, receiver_ty: Ty<'_>) {\n-    fcx.tcx.sess.diagnostic().struct_span_err(\n+    struct_span_err!(\n+        fcx.tcx.sess.diagnostic(),\n         span,\n-        &format!(\"invalid `self` parameter type: {:?}\", receiver_ty)\n+        E0307,\n+        \"invalid `self` parameter type: {:?}\", receiver_ty,\n     ).note(\"type of `self` must be `Self` or a type that dereferences to it\")\n     .help(HELP_FOR_SELF_TYPE)\n-    .code(DiagnosticId::Error(\"E0307\".into()))\n     .emit();\n }\n "}, {"sha": "d9f6d79f218f90b325c74636c3715b9cddd513ab", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3302190b673660222ad52f3f2958fac9e804d365/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3302190b673660222ad52f3f2958fac9e804d365", "patch": "@@ -46,7 +46,7 @@ use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::GenericParamKind;\n use rustc::hir::{self, CodegenFnAttrFlags, CodegenFnAttrs, Unsafety};\n \n-use errors::{Applicability, DiagnosticId, StashKey};\n+use errors::{Applicability, StashKey};\n \n use rustc_error_codes::*;\n \n@@ -160,10 +160,11 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n // Utility types and common code for the above passes.\n \n fn bad_placeholder_type(tcx: TyCtxt<'tcx>, span: Span) -> errors::DiagnosticBuilder<'tcx> {\n-    let mut diag = tcx.sess.struct_span_err_with_code(\n+    let mut diag = struct_span_err!(\n+        tcx.sess,\n         span,\n+        E0121,\n         \"the type placeholder `_` is not allowed within types on item signatures\",\n-        DiagnosticId::Error(\"E0121\".into()),\n     );\n     diag.span_label(span, \"not allowed in type signatures\");\n     diag"}]}