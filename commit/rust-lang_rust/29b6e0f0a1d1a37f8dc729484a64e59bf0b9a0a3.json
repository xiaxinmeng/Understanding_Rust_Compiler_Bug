{"sha": "29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YjZlMGYwYTFkMWEzN2Y4ZGM3Mjk0ODRhNjRlNTliZjBiOWEwYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-13T07:32:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-13T07:32:38Z"}, "message": "Auto merge of #65182 - anp:reify-shim, r=eddyb\n\nAdd `Instance::resolve_for_fn_ptr` (RFC 2091 #2/N)\n\nSupercedes: https://github.com/rust-lang/rust/pull/65082\nDepends on: https://github.com/rust-lang/rust/pull/65037\nTracking issue: https://github.com/rust-lang/rust/issues/47809\n[RFC text](https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md)\n\nsteps taken:\n\n* [x] add a `ReifyShim` that is similar to `VirtualShim` in behavior (see #54183)\n* [x] add `ty::Instance::resolve_for_fn_ptr` (leave `ty::Instance::resolve_vtable` alone), migrate appropriate callers\n* [x] `resolve_for_fn_ptr` returns the shim if calling a `#[track_caller]` function", "tree": {"sha": "b8ba6dfcb88418db3dd9f5f1e93ada676fc7ce70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8ba6dfcb88418db3dd9f5f1e93ada676fc7ce70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "html_url": "https://github.com/rust-lang/rust/commit/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3da6836cc9fd654fa204fe7e113973f7b5b3e5f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3da6836cc9fd654fa204fe7e113973f7b5b3e5f6", "html_url": "https://github.com/rust-lang/rust/commit/3da6836cc9fd654fa204fe7e113973f7b5b3e5f6"}, {"sha": "19f26fafdd6e27847a155a2ba8854c8d4ff61597", "url": "https://api.github.com/repos/rust-lang/rust/commits/19f26fafdd6e27847a155a2ba8854c8d4ff61597", "html_url": "https://github.com/rust-lang/rust/commit/19f26fafdd6e27847a155a2ba8854c8d4ff61597"}], "stats": {"total": 96, "additions": 86, "deletions": 10}, "files": [{"sha": "265ac975ed7a2c1f2e699da4b2f88af94584cf7a", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "patch": "@@ -386,6 +386,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n                             tcx.hir().as_local_hir_id(def_id)\n                         }\n                         InstanceDef::VtableShim(..) |\n+                        InstanceDef::ReifyShim(..) |\n                         InstanceDef::Intrinsic(..) |\n                         InstanceDef::FnPtrShim(..) |\n                         InstanceDef::Virtual(..) |"}, {"sha": "5139c8085a583d7021a0b13fede6e04cdc590e34", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "patch": "@@ -1,3 +1,4 @@\n+use crate::hir::CodegenFnAttrFlags;\n use crate::hir::Unsafety;\n use crate::hir::def::Namespace;\n use crate::hir::def_id::DefId;\n@@ -25,6 +26,14 @@ pub enum InstanceDef<'tcx> {\n     /// `<T as Trait>::method` where `method` receives unsizeable `self: Self`.\n     VtableShim(DefId),\n \n+    /// `fn()` pointer where the function itself cannot be turned into a pointer.\n+    ///\n+    /// One example in the compiler today is functions annotated with `#[track_caller]`, which\n+    /// must have their implicit caller location argument populated for a call. Because this is a\n+    /// required part of the function's ABI but can't be tracked as a property of the function\n+    /// pointer, we create a single \"caller location\" at the site where the function is reified.\n+    ReifyShim(DefId),\n+\n     /// `<fn() as FnTrait>::call_*`\n     /// `DefId` is `FnTrait::call_*`\n     FnPtrShim(DefId, Ty<'tcx>),\n@@ -123,6 +132,7 @@ impl<'tcx> InstanceDef<'tcx> {\n         match *self {\n             InstanceDef::Item(def_id) |\n             InstanceDef::VtableShim(def_id) |\n+            InstanceDef::ReifyShim(def_id) |\n             InstanceDef::FnPtrShim(def_id, _) |\n             InstanceDef::Virtual(def_id, _) |\n             InstanceDef::Intrinsic(def_id, ) |\n@@ -178,6 +188,9 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n             InstanceDef::VtableShim(_) => {\n                 write!(f, \" - shim(vtable)\")\n             }\n+            InstanceDef::ReifyShim(_) => {\n+                write!(f, \" - shim(reify)\")\n+            }\n             InstanceDef::Intrinsic(_) => {\n                 write!(f, \" - intrinsic\")\n             }\n@@ -290,6 +303,30 @@ impl<'tcx> Instance<'tcx> {\n         result\n     }\n \n+    pub fn resolve_for_fn_ptr(\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+    ) -> Option<Instance<'tcx>> {\n+        debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n+        Instance::resolve(tcx, param_env, def_id, substs).map(|resolved| {\n+            let has_track_caller = |def| tcx.codegen_fn_attrs(def).flags\n+                .contains(CodegenFnAttrFlags::TRACK_CALLER);\n+\n+            match resolved.def {\n+                InstanceDef::Item(def_id) if has_track_caller(def_id) => {\n+                    debug!(\" => fn pointer created for function with #[track_caller]\");\n+                    Instance {\n+                        def: InstanceDef::ReifyShim(def_id),\n+                        substs,\n+                    }\n+                },\n+                _ => resolved,\n+            }\n+        })\n+    }\n+\n     pub fn resolve_for_vtable(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "3692caada577c6decff78d289ffeda84e7c81990", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "patch": "@@ -3026,6 +3026,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 self.optimized_mir(did)\n             }\n             ty::InstanceDef::VtableShim(..) |\n+            ty::InstanceDef::ReifyShim(..) |\n             ty::InstanceDef::Intrinsic(..) |\n             ty::InstanceDef::FnPtrShim(..) |\n             ty::InstanceDef::Virtual(..) |"}, {"sha": "8945e1a1debdb9586b0a3fd478636d732ec43d91", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "patch": "@@ -761,6 +761,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n                 Some(ty::InstanceDef::Item(def_id)),\n             ty::InstanceDef::VtableShim(def_id) =>\n                 Some(ty::InstanceDef::VtableShim(def_id)),\n+            ty::InstanceDef::ReifyShim(def_id) =>\n+                Some(ty::InstanceDef::ReifyShim(def_id)),\n             ty::InstanceDef::Intrinsic(def_id) =>\n                 Some(ty::InstanceDef::Intrinsic(def_id)),\n             ty::InstanceDef::FnPtrShim(def_id, ref ty) =>\n@@ -966,6 +968,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n             def: match self.def {\n                 Item(did) => Item(did.fold_with(folder)),\n                 VtableShim(did) => VtableShim(did.fold_with(folder)),\n+                ReifyShim(did) => ReifyShim(did.fold_with(folder)),\n                 Intrinsic(did) => Intrinsic(did.fold_with(folder)),\n                 FnPtrShim(did, ty) => FnPtrShim(\n                     did.fold_with(folder),\n@@ -994,7 +997,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         use crate::ty::InstanceDef::*;\n         self.substs.visit_with(visitor) ||\n         match self.def {\n-            Item(did) | VtableShim(did) | Intrinsic(did) | Virtual(did, _) => {\n+            Item(did) | VtableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {\n                 did.visit_with(visitor)\n             },\n             FnPtrShim(did, ty) | CloneShim(did, ty) => {"}, {"sha": "6ba6774cbf881cb72210a0595d34c17880ec6cff", "filename": "src/librustc_codegen_ssa/callee.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_codegen_ssa%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_codegen_ssa%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcallee.rs?ref=29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "patch": "@@ -18,6 +18,23 @@ pub fn resolve_and_get_fn<'tcx, Cx: CodegenMethods<'tcx>>(\n     )\n }\n \n+pub fn resolve_and_get_fn_for_ptr<'tcx,\n+    Cx: Backend<'tcx> + MiscMethods<'tcx> + TypeMethods<'tcx>\n+>(\n+    cx: &Cx,\n+    def_id: DefId,\n+    substs: SubstsRef<'tcx>,\n+) -> Cx::Value {\n+    cx.get_fn(\n+        ty::Instance::resolve_for_fn_ptr(\n+            cx.tcx(),\n+            ty::ParamEnv::reveal_all(),\n+            def_id,\n+            substs\n+        ).unwrap()\n+    )\n+}\n+\n pub fn resolve_and_get_fn_for_vtable<'tcx,\n     Cx: Backend<'tcx> + MiscMethods<'tcx> + TypeMethods<'tcx>\n >("}, {"sha": "978e7218aa745f1afb7f53e986b337c319c34148", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "patch": "@@ -190,7 +190,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     bug!(\"reifying a fn ptr that requires const arguments\");\n                                 }\n                                 OperandValue::Immediate(\n-                                    callee::resolve_and_get_fn(bx.cx(), def_id, substs))\n+                                    callee::resolve_and_get_fn_for_ptr(bx.cx(), def_id, substs))\n                             }\n                             _ => {\n                                 bug!(\"{} cannot be reified to a fn ptr\", operand.layout.ty)"}, {"sha": "9ab347957f97ac8480ff5ac7f57f4ddbac941887", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "patch": "@@ -44,7 +44,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         if self.tcx.has_attr(def_id, sym::rustc_args_required_const) {\n                             bug!(\"reifying a fn ptr that requires const arguments\");\n                         }\n-                        let instance = self.resolve(def_id, substs)?;\n+\n+                        let instance = ty::Instance::resolve_for_fn_ptr(\n+                            *self.tcx,\n+                            self.param_env,\n+                            def_id,\n+                            substs,\n+                        ).ok_or_else(|| err_inval!(TooGeneric))?;\n+\n                         let fn_ptr = self.memory.create_fn_alloc(FnVal::Instance(instance));\n                         self.write_scalar(Scalar::Ptr(fn_ptr.into()), dest)?;\n                     }"}, {"sha": "11c7cd0d901d0007b5562b4260c330ed6d266bd9", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "patch": "@@ -263,6 +263,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 Ok(())\n             }\n             ty::InstanceDef::VtableShim(..) |\n+            ty::InstanceDef::ReifyShim(..) |\n             ty::InstanceDef::ClosureOnceShim { .. } |\n             ty::InstanceDef::FnPtrShim(..) |\n             ty::InstanceDef::DropGlue(..) |"}, {"sha": "ee7452d3e8b460cae476dbb3fae5e9e227cbe4c1", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "patch": "@@ -721,10 +721,12 @@ fn visit_fn_use<'tcx>(\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n     if let ty::FnDef(def_id, substs) = ty.kind {\n-        let instance = ty::Instance::resolve(tcx,\n-                                             ty::ParamEnv::reveal_all(),\n-                                             def_id,\n-                                             substs).unwrap();\n+        let resolver = if is_direct_call {\n+            ty::Instance::resolve\n+        } else {\n+            ty::Instance::resolve_for_fn_ptr\n+        };\n+        let instance = resolver(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap();\n         visit_instance_use(tcx, instance, is_direct_call, output);\n     }\n }\n@@ -747,6 +749,7 @@ fn visit_instance_use<'tcx>(\n             }\n         }\n         ty::InstanceDef::VtableShim(..) |\n+        ty::InstanceDef::ReifyShim(..) |\n         ty::InstanceDef::Virtual(..) |\n         ty::InstanceDef::DropGlue(_, None) => {\n             // don't need to emit shim if we are calling directly.\n@@ -773,6 +776,7 @@ fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx\n     let def_id = match instance.def {\n         ty::InstanceDef::Item(def_id) => def_id,\n         ty::InstanceDef::VtableShim(..) |\n+        ty::InstanceDef::ReifyShim(..) |\n         ty::InstanceDef::ClosureOnceShim { .. } |\n         ty::InstanceDef::Virtual(..) |\n         ty::InstanceDef::FnPtrShim(..) |"}, {"sha": "b9d38028b72a81f21e8a3cdd4db3317fda5d2410", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "patch": "@@ -339,6 +339,7 @@ fn mono_item_visibility(\n \n         // These are all compiler glue and such, never exported, always hidden.\n         InstanceDef::VtableShim(..) |\n+        InstanceDef::ReifyShim(..) |\n         InstanceDef::FnPtrShim(..) |\n         InstanceDef::Virtual(..) |\n         InstanceDef::Intrinsic(..) |\n@@ -677,6 +678,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n             let def_id = match instance.def {\n                 ty::InstanceDef::Item(def_id) => def_id,\n                 ty::InstanceDef::VtableShim(..) |\n+                ty::InstanceDef::ReifyShim(..) |\n                 ty::InstanceDef::FnPtrShim(..) |\n                 ty::InstanceDef::ClosureOnceShim { .. } |\n                 ty::InstanceDef::Intrinsic(..) |"}, {"sha": "f532a18072fbda480bf227f709e635689f64441d", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=29b6e0f0a1d1a37f8dc729484a64e59bf0b9a0a3", "patch": "@@ -66,9 +66,12 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n                 Some(arg_tys)\n             )\n         }\n-        ty::InstanceDef::Virtual(def_id, _) => {\n-            // We are generating a call back to our def-id, which the\n-            // codegen backend knows to turn to an actual virtual call.\n+        // We are generating a call back to our def-id, which the\n+        // codegen backend knows to turn to an actual virtual call.\n+        ty::InstanceDef::Virtual(def_id, _) |\n+        // ...or we are generating a direct call to a function for which indirect calls must be\n+        // codegen'd differently than direct ones (example: #[track_caller])\n+        ty::InstanceDef::ReifyShim(def_id) => {\n             build_call_shim(\n                 tcx,\n                 def_id,"}]}