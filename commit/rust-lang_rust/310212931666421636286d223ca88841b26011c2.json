{"sha": "310212931666421636286d223ca88841b26011c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMDIxMjkzMTY2NjQyMTYzNjI4NmQyMjNjYTg4ODQxYjI2MDExYzI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-20T17:43:10Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-20T17:43:10Z"}, "message": "Improve return code propagation.\n\nDon't explicitly exit if we reported an evaluation error", "tree": {"sha": "987d36df1cffa2776e980d65fdc8e7c3c4dea146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/987d36df1cffa2776e980d65fdc8e7c3c4dea146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/310212931666421636286d223ca88841b26011c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3Ve0MACgkQtAh+UQ6Y\nsWRzXRAAnpLdeA8hj5Kv4t97q6A07z++NzIjH4qRkpujodvyAXjsYzOnmVZJM6DA\n2C007EMwulmxcv4+n8lMLkxx+xOAjbpYNg5JvQA9CLSutxrLc0uwnJBvb5XD3Amv\nnN8ge/gmP1qIMmlO3mb/2g+vGX7fbLA2dFTFqHK8OS1uIcBre2XhmPPlAYAtMj6+\n2tCgqh1gsesbJjekJmsJX24HiuDvnyLff4Ls4YCa3rn2K2ckrH2UdZQmACmyQb1B\nOLZBXo9/MwbiXQVTpOCDIi0+fQ4mOhZxDEnkQNYLXJenGImu1RCReqN1jK75vfiG\nO2pJ+SU9OSU3yR9rikQaxg2DkYh1z7aoiu7WV+3rDTmOfhVha74W+Yweu6cHPEE9\nnS2NFghkDqcwhKy+9kvjMIvkeewYQ0nrPJHYcWMJ5H4ibm0fd2ABM9UFxRi5gTru\nzj1GK+Dz/xnvil/esoHfXLTYy/FooWjV80ILhws4Q9safszqGRmXtfd6p6O8n7Ve\nEVS0WZkg24+BSQxX9M/Jd6LTIjQu5ITDRd5DLS102EsgjpN+g7ZgcJlnBbvIprBL\nnCEyZ2LRwgrzIxhdVKF/rWr/fcOZc2VUZ8n/R4eltkjggS7IA+YoB/IksR3gJfsu\nGJfelmwx/0OwcmfLnjo5toasVSelDfApE1HVYQBMawr+ypv/YOg=\n=yKdJ\n-----END PGP SIGNATURE-----", "payload": "tree 987d36df1cffa2776e980d65fdc8e7c3c4dea146\nparent 2532b86a3b89acaff5c7793d69bc159de8ddd214\nauthor Aaron Hill <aa1ronham@gmail.com> 1574271790 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1574271790 -0500\n\nImprove return code propagation.\n\nDon't explicitly exit if we reported an evaluation error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/310212931666421636286d223ca88841b26011c2", "html_url": "https://github.com/rust-lang/rust/commit/310212931666421636286d223ca88841b26011c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/310212931666421636286d223ca88841b26011c2/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2532b86a3b89acaff5c7793d69bc159de8ddd214", "url": "https://api.github.com/repos/rust-lang/rust/commits/2532b86a3b89acaff5c7793d69bc159de8ddd214", "html_url": "https://github.com/rust-lang/rust/commit/2532b86a3b89acaff5c7793d69bc159de8ddd214"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "9e95e4b0a466a6113fd6c04edb258741d7824a5b", "filename": "src/bin/miri.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/310212931666421636286d223ca88841b26011c2/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/310212931666421636286d223ca88841b26011c2/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=310212931666421636286d223ca88841b26011c2", "patch": "@@ -15,6 +15,7 @@ extern crate rustc_interface;\n extern crate syntax;\n \n use std::str::FromStr;\n+use std::convert::TryFrom;\n use std::env;\n \n use hex::FromHexError;\n@@ -39,7 +40,9 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n             // Add filename to `miri` arguments.\n             config.args.insert(0, compiler.input().filestem().to_string());\n \n-            miri::eval_main(tcx, entry_def_id, config);\n+            if let Some(return_code) = miri::eval_main(tcx, entry_def_id, config) {\n+                std::process::exit(i32::try_from(return_code).expect(\"Return value was too large!\"));\n+            }\n         });\n \n         compiler.session().abort_if_errors();"}, {"sha": "603c30feb9f46b79bd9e3a616e998b1753a1c3f1", "filename": "src/eval.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/310212931666421636286d223ca88841b26011c2/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/310212931666421636286d223ca88841b26011c2/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=310212931666421636286d223ca88841b26011c2", "patch": "@@ -29,7 +29,10 @@ pub struct MiriConfig {\n     pub seed: Option<u64>,\n }\n \n-// Used by priroda.\n+/// Returns a freshly created `InterpCx`, along with an `MPlaceTy` representing\n+/// the location where the return value of the `start` lang item will be\n+/// written to.\n+/// Used by `priroda` and `miri\n pub fn create_ecx<'mir, 'tcx: 'mir>(\n     tcx: TyCtxt<'tcx>,\n     main_id: DefId,\n@@ -173,7 +176,10 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     Ok((ecx, ret_ptr))\n }\n \n-pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) {\n+/// Evaluates the main function specified by `main_id`.\n+/// Returns `Some(return_code)` if program executed completed.\n+/// Returns `None` if an evaluation error occured\n+pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) -> Option<i64> {\n     let (mut ecx, ret_ptr) = match create_ecx(tcx, main_id, config) {\n         Ok(v) => v,\n         Err(mut err) => {\n@@ -202,13 +208,16 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) {\n             let ignore_leaks = target_os == \"windows\" || target_os == \"macos\";\n             if !ignore_leaks && leaks != 0 {\n                 tcx.sess.err(\"the evaluated program leaked memory\");\n+                // Ignore the provided return code - let the reported error\n+                // determine the return code\n+                return None;\n             }\n-            std::process::exit(return_code as i32);\n+            return Some(return_code)\n         }\n         Err(mut e) => {\n             // Special treatment for some error kinds\n             let msg = match e.kind {\n-                InterpError::Exit(code) => std::process::exit(code),\n+                InterpError::Exit(code) => return Some(code.into()),\n                 err_unsup!(NoMirFor(..)) =>\n                     format!(\"{}. Did you set `MIRI_SYSROOT` to a Miri-enabled sysroot? You can prepare one with `cargo miri setup`.\", e),\n                 _ => e.to_string()\n@@ -251,6 +260,8 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) {\n                     trace!(\"    local {}: {:?}\", i, local.value);\n                 }\n             }\n+            // Let the reported error determine the return code\n+            return None;\n         }\n     }\n }"}]}