{"sha": "72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "node_id": "C_kwDOAAsO6NoAKDcyMDY3Yzc3YmRjMWU4ZTMzOWI5ZWQzNzhhMmMwY2EwYTkzNjdjNGQ", "commit": {"author": {"name": "jonathanCogan", "email": "jonathanecogan@gmail.com", "date": "2022-10-28T22:34:29Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-12-30T13:00:40Z"}, "message": "Replace libstd, libcore, liballoc in docs.", "tree": {"sha": "d747f0dfc416d6c5d07d10c5ec964d1c08b4c3f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d747f0dfc416d6c5d07d10c5ec964d1c08b4c3f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "html_url": "https://github.com/rust-lang/rust/commit/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/comments", "author": {"login": "jonathanCogan", "id": 38228852, "node_id": "MDQ6VXNlcjM4MjI4ODUy", "avatar_url": "https://avatars.githubusercontent.com/u/38228852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathanCogan", "html_url": "https://github.com/jonathanCogan", "followers_url": "https://api.github.com/users/jonathanCogan/followers", "following_url": "https://api.github.com/users/jonathanCogan/following{/other_user}", "gists_url": "https://api.github.com/users/jonathanCogan/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathanCogan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathanCogan/subscriptions", "organizations_url": "https://api.github.com/users/jonathanCogan/orgs", "repos_url": "https://api.github.com/users/jonathanCogan/repos", "events_url": "https://api.github.com/users/jonathanCogan/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathanCogan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6cc345be403d481b4518e151218118c2a9eb4bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6cc345be403d481b4518e151218118c2a9eb4bb", "html_url": "https://github.com/rust-lang/rust/commit/f6cc345be403d481b4518e151218118c2a9eb4bb"}], "stats": {"total": 71, "additions": 35, "deletions": 36}, "files": [{"sha": "7af60183dbb40e607d25bf368e4dbfdd14e0be77", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -3,7 +3,7 @@\n //! This library provides smart pointers and collections for managing\n //! heap-allocated values.\n //!\n-//! This library, like libcore, normally doesn\u2019t need to be used directly\n+//! This library, like core, normally doesn\u2019t need to be used directly\n //! since its contents are re-exported in the [`std` crate](../std/index.html).\n //! Crates that use the `#![no_std]` attribute however will typically\n //! not depend on `std`, so they\u2019d use this crate instead."}, {"sha": "9bcb6c25753a42a72de371f594e68ebc4521a282", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -653,7 +653,7 @@ impl [u8] {\n ///\n /// ```error\n /// error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predica\n-///    --> src/liballoc/slice.rs:608:6\n+///    --> src/alloc/slice.rs:608:6\n ///     |\n /// 608 | impl<T: Clone, V: Borrow<[T]>> Concat for [V] {\n ///     |      ^ unconstrained type parameter"}, {"sha": "51e6a76cea848c540ac8a6beda22fa434c7a6e88", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -558,7 +558,7 @@ impl Display for Arguments<'_> {\n ///\n /// Derived `Debug` formats are not stable, and so may change with future Rust\n /// versions. Additionally, `Debug` implementations of types provided by the\n-/// standard library (`libstd`, `libcore`, `liballoc`, etc.) are not stable, and\n+/// standard library (`std`, `core`, `alloc`, etc.) are not stable, and\n /// may also change with future Rust versions.\n ///\n /// # Examples"}, {"sha": "8338a5d7e5a2199bb1f2a88b378e78c4f189f091", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -90,14 +90,14 @@ pub macro unreachable_2021 {\n     ),\n }\n \n-/// An internal trait used by libstd to pass data from libstd to `panic_unwind`\n-/// and other panic runtimes. Not intended to be stabilized any time soon, do\n-/// not use.\n+/// An internal trait used by std to pass data from std to `panic_unwind` and\n+/// other panic runtimes. Not intended to be stabilized any time soon, do not\n+/// use.\n #[unstable(feature = \"std_internals\", issue = \"none\")]\n #[doc(hidden)]\n pub unsafe trait BoxMeUp {\n     /// Take full ownership of the contents.\n-    /// The return type is actually `Box<dyn Any + Send>`, but we cannot use `Box` in libcore.\n+    /// The return type is actually `Box<dyn Any + Send>`, but we cannot use `Box` in core.\n     ///\n     /// After this method got called, only some dummy default value is left in `self`.\n     /// Calling this method twice, or calling `get` after calling this method, is an error."}, {"sha": "0146a3c2fbf7f02ddbc70f4c26343eb058faa5ba", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -1,8 +1,8 @@\n-//! Panic support for libcore\n+//! Panic support for core\n //!\n //! The core library cannot define panicking, but it does *declare* panicking. This\n-//! means that the functions inside of libcore are allowed to panic, but to be\n-//! useful an upstream crate must define panicking for libcore to use. The current\n+//! means that the functions inside of core are allowed to panic, but to be\n+//! useful an upstream crate must define panicking for core to use. The current\n //! interface for panicking is:\n //!\n //! ```\n@@ -13,7 +13,7 @@\n //! This definition allows for panicking with any general message, but it does not\n //! allow for failing with a `Box<Any>` value. (`PanicInfo` just contains a `&(dyn Any + Send)`,\n //! for which we fill in a dummy value in `PanicInfo::internal_constructor`.)\n-//! The reason for this is that libcore is not allowed to allocate.\n+//! The reason for this is that core is not allowed to allocate.\n //!\n //! This module contains a few other panicking functions, but these are just the\n //! necessary lang items for the compiler. All panics are funneled through this\n@@ -94,7 +94,7 @@ pub fn panic_nounwind(msg: &'static str) -> ! {\n // Next we define a bunch of higher-level wrappers that all bottom out in the two core functions\n // above.\n \n-/// The underlying implementation of libcore's `panic!` macro when no formatting is used.\n+/// The underlying implementation of core's `panic!` macro when no formatting is used.\n // never inline unless panic_immediate_abort to avoid code\n // bloat at the call sites as much as possible\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]"}, {"sha": "12f762ef1932c7f1bd352fb038d6f1d43c313eaa", "filename": "library/core/src/prelude/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fcore%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fcore%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fmod.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -1,8 +1,8 @@\n-//! The libcore prelude\n+//! The core prelude\n //!\n-//! This module is intended for users of libcore which do not link to libstd as\n-//! well. This module is imported by default when `#![no_std]` is used in the\n-//! same manner as the standard library's prelude.\n+//! This module is intended for users of core which do not link to std as well.\n+//! This module is imported by default when `#![no_std]` is used in the same\n+//! manner as the standard library's prelude.\n \n #![stable(feature = \"core_prelude\", since = \"1.4.0\")]\n "}, {"sha": "b8c0c3fd9493285b10117fb8ede4d341ee733607", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -3,7 +3,7 @@\n //! This module contains a sorting algorithm based on Orson Peters' pattern-defeating quicksort,\n //! published at: <https://github.com/orlp/pdqsort>\n //!\n-//! Unstable sorting is compatible with libcore because it doesn't allocate memory, unlike our\n+//! Unstable sorting is compatible with core because it doesn't allocate memory, unlike our\n //! stable sorting implementation.\n \n use crate::cmp;"}, {"sha": "ea3c9a7a663c23d6bfc66d7a5c4c1420ec28c122", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -82,11 +82,11 @@ cfg_if::cfg_if! {\n }\n \n extern \"C\" {\n-    /// Handler in libstd called when a panic object is dropped outside of\n+    /// Handler in std called when a panic object is dropped outside of\n     /// `catch_unwind`.\n     fn __rust_drop_panic() -> !;\n \n-    /// Handler in libstd called when a foreign exception is caught.\n+    /// Handler in std called when a foreign exception is caught.\n     fn __rust_foreign_exception() -> !;\n }\n "}, {"sha": "17bd0a1b33646643e724ae73a00ac38b34033f4e", "filename": "library/proc_macro/src/bridge/fxhash.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fproc_macro%2Fsrc%2Fbridge%2Ffxhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fproc_macro%2Fsrc%2Fbridge%2Ffxhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Ffxhash.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -15,9 +15,9 @@ use std::ops::BitXor;\n /// Type alias for a hashmap using the `fx` hash algorithm.\n pub type FxHashMap<K, V> = HashMap<K, V, BuildHasherDefault<FxHasher>>;\n \n-/// A speedy hash algorithm for use within rustc. The hashmap in liballoc\n-/// by default uses SipHash which isn't quite as speedy as we want. In the\n-/// compiler we're not really worried about DOS attempts, so we use a fast\n+/// A speedy hash algorithm for use within rustc. The hashmap in alloc by\n+/// default uses SipHash which isn't quite as speedy as we want. In the compiler\n+/// we're not really worried about DOS attempts, so we use a fast\n /// non-cryptographic hash.\n ///\n /// This is the same as the algorithm used by Firefox -- which is a homespun"}, {"sha": "7543ffadd4140f5dc99441e5d3a57674252362d2", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -23,10 +23,10 @@\n //!\n //! ## Platform support\n //!\n-//! Not all platforms that libstd compiles for support capturing backtraces.\n-//! Some platforms simply do nothing when capturing a backtrace. To check\n-//! whether the platform supports capturing backtraces you can consult the\n-//! `BacktraceStatus` enum as a result of `Backtrace::status`.\n+//! Not all platforms that std compiles for support capturing backtraces. Some\n+//! platforms simply do nothing when capturing a backtrace. To check whether the\n+//! platform supports capturing backtraces you can consult the `BacktraceStatus`\n+//! enum as a result of `Backtrace::status`.\n //!\n //! Like above with accuracy platform support is done on a best effort basis.\n //! Sometimes libraries might not be available at runtime or something may go"}, {"sha": "b30dd8eecd84c210d709d998cd15a95e77b5d2dc", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -517,7 +517,7 @@ pub fn panicking() -> bool {\n     !panic_count::count_is_zero()\n }\n \n-/// Entry point of panics from the libcore crate (`panic_impl` lang item).\n+/// Entry point of panics from the core crate (`panic_impl` lang item).\n #[cfg(not(test))]\n #[panic_handler]\n pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {"}, {"sha": "0f704994f550ab5810857a8ca26179ba26ea561f", "filename": "library/std/src/sys/unix/android.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fandroid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fandroid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fandroid.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -1,7 +1,7 @@\n //! Android ABI-compatibility module\n //!\n-//! The ABI of Android has changed quite a bit over time, and libstd attempts to\n-//! be both forwards and backwards compatible as much as possible. We want to\n+//! The ABI of Android has changed quite a bit over time, and std attempts to be\n+//! both forwards and backwards compatible as much as possible. We want to\n //! always work with the most recent version of Android, but we also want to\n //! work with older versions of Android for whenever projects need to.\n //!"}, {"sha": "62ffee70becc3d2d56ba87446d2f3b28ea290643", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -1,9 +1,8 @@\n //! Support for \"weak linkage\" to symbols on Unix\n //!\n-//! Some I/O operations we do in libstd require newer versions of OSes but we\n-//! need to maintain binary compatibility with older releases for now. In order\n-//! to use the new functionality when available we use this module for\n-//! detection.\n+//! Some I/O operations we do in std require newer versions of OSes but we need\n+//! to maintain binary compatibility with older releases for now. In order to\n+//! use the new functionality when available we use this module for detection.\n //!\n //! One option to use here is weak linkage, but that is unfortunately only\n //! really workable with ELF. Otherwise, use dlsym to get the symbol value at"}, {"sha": "f0ea1bc3ef8c438a411d9a8783ac48c6dee604ea", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -111,7 +111,7 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n }\n \n /// Fixed frame used to clean the backtrace with `RUST_BACKTRACE=1`. Note that\n-/// this is only inline(never) when backtraces in libstd are enabled, otherwise\n+/// this is only inline(never) when backtraces in std are enabled, otherwise\n /// it's fine to optimize away.\n #[cfg_attr(feature = \"backtrace\", inline(never))]\n pub fn __rust_begin_short_backtrace<F, T>(f: F) -> T\n@@ -127,7 +127,7 @@ where\n }\n \n /// Fixed frame used to clean the backtrace with `RUST_BACKTRACE=1`. Note that\n-/// this is only inline(never) when backtraces in libstd are enabled, otherwise\n+/// this is only inline(never) when backtraces in std are enabled, otherwise\n /// it's fine to optimize away.\n #[cfg_attr(feature = \"backtrace\", inline(never))]\n pub fn __rust_end_short_backtrace<F, T>(f: F) -> T"}, {"sha": "1a2c125566139d11370637b368d3d954314586ff", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "patch": "@@ -1,4 +1,4 @@\n-//! These tests just check that the macros are available in libstd.\n+//! These tests just check that the macros are available in std.\n \n #![cfg_attr(\n     any("}]}