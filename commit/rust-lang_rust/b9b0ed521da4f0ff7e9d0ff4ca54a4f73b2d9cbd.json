{"sha": "b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YjBlZDUyMWRhNGYwZmY3ZTlkMGZmNGNhNTRhNGY3M2IyZDljYmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-28T17:27:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-31T22:47:36Z"}, "message": "green: Switch field privacy as necessary", "tree": {"sha": "a1727be67672e2c362088f6ba4a0f67c5c60a715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1727be67672e2c362088f6ba4a0f67c5c60a715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd", "html_url": "https://github.com/rust-lang/rust/commit/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb08e8fec2d43bc325ae869fcf10a597f38635db", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb08e8fec2d43bc325ae869fcf10a597f38635db", "html_url": "https://github.com/rust-lang/rust/commit/eb08e8fec2d43bc325ae869fcf10a597f38635db"}], "stats": {"total": 81, "additions": 41, "deletions": 40}, "files": [{"sha": "a521c9bee8787e98787157d559448d9bd0d341b9", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd", "patch": "@@ -22,9 +22,9 @@ use std::raw;\n // then misalign the regs again.\n pub struct Context {\n     /// Hold the registers while the task or scheduler is suspended\n-    priv regs: ~Registers,\n+    regs: ~Registers,\n     /// Lower bound and upper bound for the stack\n-    priv stack_bounds: Option<(uint, uint)>,\n+    stack_bounds: Option<(uint, uint)>,\n }\n \n pub type InitFn = extern \"C\" fn(uint, *(), *()) -> !;"}, {"sha": "f2e64dc25a970423d442a5e3e8dbda92250ebb0f", "filename": "src/libgreen/coroutine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Fcoroutine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Fcoroutine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcoroutine.rs?ref=b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd", "patch": "@@ -22,10 +22,10 @@ pub struct Coroutine {\n     ///\n     /// Servo needs this to be public in order to tell SpiderMonkey\n     /// about the stack bounds.\n-    current_stack_segment: Stack,\n+    pub current_stack_segment: Stack,\n \n     /// Always valid if the task is alive and not running.\n-    saved_context: Context\n+    pub saved_context: Context\n }\n \n impl Coroutine {"}, {"sha": "00081c82f5e7047edc890b5f48db97040593bb19", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd", "patch": "@@ -296,10 +296,10 @@ pub fn run(event_loop_factory: fn() -> ~rtio::EventLoop:Send,\n /// Configuration of how an M:N pool of schedulers is spawned.\n pub struct PoolConfig {\n     /// The number of schedulers (OS threads) to spawn into this M:N pool.\n-    threads: uint,\n+    pub threads: uint,\n     /// A factory function used to create new event loops. If this is not\n     /// specified then the default event loop factory is used.\n-    event_loop_factory: fn() -> ~rtio::EventLoop:Send,\n+    pub event_loop_factory: fn() -> ~rtio::EventLoop:Send,\n }\n \n impl PoolConfig {\n@@ -316,17 +316,17 @@ impl PoolConfig {\n /// A structure representing a handle to a pool of schedulers. This handle is\n /// used to keep the pool alive and also reap the status from the pool.\n pub struct SchedPool {\n-    priv id: uint,\n-    priv threads: ~[Thread<()>],\n-    priv handles: ~[SchedHandle],\n-    priv stealers: ~[deque::Stealer<~task::GreenTask>],\n-    priv next_friend: uint,\n-    priv stack_pool: StackPool,\n-    priv deque_pool: deque::BufferPool<~task::GreenTask>,\n-    priv sleepers: SleeperList,\n-    priv factory: fn() -> ~rtio::EventLoop:Send,\n-    priv task_state: TaskState,\n-    priv tasks_done: Receiver<()>,\n+    id: uint,\n+    threads: ~[Thread<()>],\n+    handles: ~[SchedHandle],\n+    stealers: ~[deque::Stealer<~task::GreenTask>],\n+    next_friend: uint,\n+    stack_pool: StackPool,\n+    deque_pool: deque::BufferPool<~task::GreenTask>,\n+    sleepers: SleeperList,\n+    factory: fn() -> ~rtio::EventLoop:Send,\n+    task_state: TaskState,\n+    tasks_done: Receiver<()>,\n }\n \n /// This is an internal state shared among a pool of schedulers. This is used to"}, {"sha": "50666b8c649bc3f3561d0ac90ae1e9bc92bf8758", "filename": "src/libgreen/message_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Fmessage_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Fmessage_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fmessage_queue.rs?ref=b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd", "patch": "@@ -23,11 +23,11 @@ pub fn queue<T: Send>() -> (Consumer<T>, Producer<T>) {\n }\n \n pub struct Producer<T> {\n-    priv inner: UnsafeArc<mpsc::Queue<T>>,\n+    inner: UnsafeArc<mpsc::Queue<T>>,\n }\n \n pub struct Consumer<T> {\n-    priv inner: UnsafeArc<mpsc::Queue<T>>,\n+    inner: UnsafeArc<mpsc::Queue<T>>,\n }\n \n impl<T: Send> Consumer<T> {"}, {"sha": "adfd5908de2ca8c8150affb7b02d7c471d7af638", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd", "patch": "@@ -39,7 +39,12 @@ pub struct Scheduler {\n     /// ID number of the pool that this scheduler is a member of. When\n     /// reawakening green tasks, this is used to ensure that tasks aren't\n     /// reawoken on the wrong pool of schedulers.\n-    pool_id: uint,\n+    pub pool_id: uint,\n+    /// The pool of stacks that this scheduler has cached\n+    pub stack_pool: StackPool,\n+    /// Bookkeeping for the number of tasks which are currently running around\n+    /// inside this pool of schedulers\n+    pub task_state: TaskState,\n     /// There are N work queues, one per scheduler.\n     work_queue: deque::Worker<~GreenTask>,\n     /// Work queues for the other schedulers. These are created by\n@@ -64,7 +69,6 @@ pub struct Scheduler {\n     /// A flag to indicate we've received the shutdown message and should\n     /// no longer try to go to sleep, but exit instead.\n     no_sleep: bool,\n-    stack_pool: StackPool,\n     /// The scheduler runs on a special task. When it is not running\n     /// it is stored here instead of the work queue.\n     sched_task: Option<~GreenTask>,\n@@ -87,9 +91,6 @@ pub struct Scheduler {\n     /// A flag to tell the scheduler loop it needs to do some stealing\n     /// in order to introduce randomness as part of a yield\n     steal_for_yield: bool,\n-    /// Bookkeeping for the number of tasks which are currently running around\n-    /// inside this pool of schedulers\n-    task_state: TaskState,\n \n     // n.b. currently destructors of an object are run in top-to-bottom in order\n     //      of field declaration. Due to its nature, the pausable idle callback\n@@ -99,7 +100,7 @@ pub struct Scheduler {\n     //      destroyed before it's actually destroyed.\n \n     /// The event loop used to drive the scheduler and perform I/O\n-    event_loop: ~EventLoop:Send,\n+    pub event_loop: ~EventLoop:Send,\n }\n \n /// An indication of how hard to work on a given operation, the difference\n@@ -893,9 +894,9 @@ pub enum SchedMessage {\n }\n \n pub struct SchedHandle {\n-    priv remote: ~RemoteCallback:Send,\n-    priv queue: msgq::Producer<SchedMessage>,\n-    sched_id: uint\n+    remote: ~RemoteCallback:Send,\n+    queue: msgq::Producer<SchedMessage>,\n+    pub sched_id: uint\n }\n \n impl SchedHandle {"}, {"sha": "5df866955e656101470378a26a3bcf5edb1f60b3", "filename": "src/libgreen/sleeper_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Fsleeper_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Fsleeper_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsleeper_list.rs?ref=b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd", "patch": "@@ -16,7 +16,7 @@ use std::sync::mpmc_bounded_queue::Queue;\n use sched::SchedHandle;\n \n pub struct SleeperList {\n-    priv q: Queue<SchedHandle>,\n+    q: Queue<SchedHandle>,\n }\n \n impl SleeperList {"}, {"sha": "497c1dc664a72a7e537a350c95fc0c557a282482", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd", "patch": "@@ -15,9 +15,9 @@ use std::libc;\n \n /// A task's stack. The name \"Stack\" is a vestige of segmented stacks.\n pub struct Stack {\n-    priv buf: MemoryMap,\n-    priv min_size: uint,\n-    priv valgrind_id: libc::c_uint,\n+    buf: MemoryMap,\n+    min_size: uint,\n+    valgrind_id: libc::c_uint,\n }\n \n // Try to use MAP_STACK on platforms that support it (it's what we're doing\n@@ -126,7 +126,7 @@ impl Drop for Stack {\n pub struct StackPool {\n     // Ideally this would be some datastructure that preserved ordering on\n     // Stack.min_size.\n-    priv stacks: ~[Stack],\n+    stacks: ~[Stack],\n }\n \n impl StackPool {"}, {"sha": "6fa40c0e42b646c53fd62853b65086c3e1f4540a", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=b9b0ed521da4f0ff7e9d0ff4ca54a4f73b2d9cbd", "patch": "@@ -42,32 +42,32 @@ pub struct GreenTask {\n     /// context and the stack that this task owns. This field is optional to\n     /// relinquish ownership back to a scheduler to recycle stacks at a later\n     /// date.\n-    coroutine: Option<Coroutine>,\n+    pub coroutine: Option<Coroutine>,\n \n     /// Optional handle back into the home sched pool of this task. This field\n     /// is lazily initialized.\n-    handle: Option<SchedHandle>,\n+    pub handle: Option<SchedHandle>,\n \n     /// Slot for maintaining ownership of a scheduler. If a task is running,\n     /// this value will be Some(sched) where the task is running on \"sched\".\n-    sched: Option<~Scheduler>,\n+    pub sched: Option<~Scheduler>,\n \n     /// Temporary ownership slot of a std::rt::task::Task object. This is used\n     /// to squirrel that libstd task away while we're performing green task\n     /// operations.\n-    task: Option<~Task>,\n+    pub task: Option<~Task>,\n \n     /// Dictates whether this is a sched task or a normal green task\n-    task_type: TaskType,\n+    pub task_type: TaskType,\n \n     /// Home pool that this task was spawned into. This field is lazily\n     /// initialized until when the task is initially scheduled, and is used to\n     /// make sure that tasks are always woken up in the correct pool of\n     /// schedulers.\n-    pool_id: uint,\n+    pub pool_id: uint,\n \n     // See the comments in the scheduler about why this is necessary\n-    nasty_deschedule_lock: NativeMutex,\n+    pub nasty_deschedule_lock: NativeMutex,\n }\n \n pub enum TaskType {"}]}