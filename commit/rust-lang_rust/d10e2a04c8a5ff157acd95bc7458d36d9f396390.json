{"sha": "d10e2a04c8a5ff157acd95bc7458d36d9f396390", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMGUyYTA0YzhhNWZmMTU3YWNkOTViYzc0NThkMzZkOWYzOTYzOTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-26T19:06:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-26T19:06:34Z"}, "message": "Merge #6351\n\n6351: Organized completions r=popzxc a=popzxc\n\nThis PR continues the work on refactoring of the `completions` crate.\r\n\r\nIn this episode:\r\n\r\n- Actual completions methods are encapsulated into `completions` module, so they aren't mixed with the rest of the code.\r\n- Name duplication was removed (`complete_attribute` => `completions::attribute`, `completion_context` => `context`).\r\n- `Completions` structure was moved from `item` module to the `completions`.\r\n- `presentation` module was removed, as it was basically a module with `impl` for `Completions`.\r\n- Code approaches were a bit unified here and there.\r\n\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>", "tree": {"sha": "fb68b034d7e56053e5d1b4302e2996f64b024e11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb68b034d7e56053e5d1b4302e2996f64b024e11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d10e2a04c8a5ff157acd95bc7458d36d9f396390", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflx46CRBK7hj4Ov3rIwAAdHIIAAJIkq/eqLJOqUeAKeHWtUG9\nYo8h78Cz0uvmK08g+mSbTWlP+kX+aqHBz19uxT5PM4Gh8Y0ultziP5u2TZT93tge\niyhBF+c7HUZIevg8FtozPEeSbpws/VcVj6mTo4avjUc2If0FwV7xKSjdb8ee7H7f\nqJHlbgMbDv6xnUFO1XRNc5gSwNN5TfW6+ZwGZwznu3LYluhO/5M58qgl+l9w/d+G\nbypwZcedx+r+Xi0udRjlQJchLcEjyLHGXAC2Cdatf3j9CXztJTUo7XDEkDPPyumA\nSH38F8Y9NNvL9odR6Pi95ivt0uxtZ4oNAVQb4Fj/mOLZRxmd0ukdmun2nOMPRko=\n=fv6D\n-----END PGP SIGNATURE-----\n", "payload": "tree fb68b034d7e56053e5d1b4302e2996f64b024e11\nparent d01e412eb1572676a33ad145f3370a7157dbc9df\nparent 357bf0cedc658b7c95952324fda4bbe7f41a3e6a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603739194 +0000\ncommitter GitHub <noreply@github.com> 1603739194 +0000\n\nMerge #6351\n\n6351: Organized completions r=popzxc a=popzxc\n\nThis PR continues the work on refactoring of the `completions` crate.\r\n\r\nIn this episode:\r\n\r\n- Actual completions methods are encapsulated into `completions` module, so they aren't mixed with the rest of the code.\r\n- Name duplication was removed (`complete_attribute` => `completions::attribute`, `completion_context` => `context`).\r\n- `Completions` structure was moved from `item` module to the `completions`.\r\n- `presentation` module was removed, as it was basically a module with `impl` for `Completions`.\r\n- Code approaches were a bit unified here and there.\r\n\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d10e2a04c8a5ff157acd95bc7458d36d9f396390", "html_url": "https://github.com/rust-lang/rust/commit/d10e2a04c8a5ff157acd95bc7458d36d9f396390", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d10e2a04c8a5ff157acd95bc7458d36d9f396390/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d01e412eb1572676a33ad145f3370a7157dbc9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/d01e412eb1572676a33ad145f3370a7157dbc9df", "html_url": "https://github.com/rust-lang/rust/commit/d01e412eb1572676a33ad145f3370a7157dbc9df"}, {"sha": "357bf0cedc658b7c95952324fda4bbe7f41a3e6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/357bf0cedc658b7c95952324fda4bbe7f41a3e6a", "html_url": "https://github.com/rust-lang/rust/commit/357bf0cedc658b7c95952324fda4bbe7f41a3e6a"}], "stats": {"total": 350, "additions": 165, "deletions": 185}, "files": [{"sha": "d5fb85b7944b32660a57617fcf287d467420748e", "filename": "crates/completion/src/completions.rs", "status": "renamed", "additions": 72, "deletions": 30, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -1,37 +1,77 @@\n-//! This modules takes care of rendering various definitions as completion items.\n-//! It also handles scoring (sorting) completions.\n+//! This module defines an accumulator for completions which are going to be presented to user.\n+\n+pub(crate) mod attribute;\n+pub(crate) mod dot;\n+pub(crate) mod record;\n+pub(crate) mod pattern;\n+pub(crate) mod fn_param;\n+pub(crate) mod keyword;\n+pub(crate) mod snippet;\n+pub(crate) mod qualified_path;\n+pub(crate) mod unqualified_path;\n+pub(crate) mod postfix;\n+pub(crate) mod macro_in_item_position;\n+pub(crate) mod trait_impl;\n+pub(crate) mod mod_;\n \n use hir::{HasAttrs, HasSource, HirDisplay, ModPath, Mutability, ScopeDef, StructKind, Type};\n use itertools::Itertools;\n use syntax::{ast::NameOwner, display::*};\n use test_utils::mark;\n \n use crate::{\n-    // display::{const_label, function_declaration, macro_label, type_label},\n-    CompletionScore,\n-    RootDatabase,\n-    {\n-        completion_item::Builder, CompletionContext, CompletionItem, CompletionItemKind,\n-        CompletionKind, Completions,\n-    },\n+    item::Builder, CompletionContext, CompletionItem, CompletionItemKind, CompletionKind,\n+    CompletionScore, RootDatabase,\n };\n \n+/// Represents an in-progress set of completions being built.\n+#[derive(Debug, Default)]\n+pub struct Completions {\n+    buf: Vec<CompletionItem>,\n+}\n+\n+impl Into<Vec<CompletionItem>> for Completions {\n+    fn into(self) -> Vec<CompletionItem> {\n+        self.buf\n+    }\n+}\n+\n+impl Builder {\n+    /// Convenience method, which allows to add a freshly created completion into accumulator\n+    /// without binding it to the variable.\n+    pub(crate) fn add_to(self, acc: &mut Completions) {\n+        acc.add(self.build())\n+    }\n+}\n+\n impl Completions {\n+    pub(crate) fn add(&mut self, item: CompletionItem) {\n+        self.buf.push(item.into())\n+    }\n+\n+    pub(crate) fn add_all<I>(&mut self, items: I)\n+    where\n+        I: IntoIterator,\n+        I::Item: Into<CompletionItem>,\n+    {\n+        items.into_iter().for_each(|item| self.add(item.into()))\n+    }\n+\n     pub(crate) fn add_field(&mut self, ctx: &CompletionContext, field: hir::Field, ty: &Type) {\n         let is_deprecated = is_deprecated(field, ctx.db);\n         let name = field.name(ctx.db);\n-        let mut completion_item =\n+        let mut item =\n             CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.to_string())\n                 .kind(CompletionItemKind::Field)\n                 .detail(ty.display(ctx.db).to_string())\n                 .set_documentation(field.docs(ctx.db))\n                 .set_deprecated(is_deprecated);\n \n         if let Some(score) = compute_score(ctx, &ty, &name.to_string()) {\n-            completion_item = completion_item.set_score(score);\n+            item = item.set_score(score);\n         }\n \n-        completion_item.add_to(self);\n+        item.add_to(self);\n     }\n \n     pub(crate) fn add_tuple_field(&mut self, ctx: &CompletionContext, field: usize, ty: &Type) {\n@@ -57,15 +97,17 @@ impl Completions {\n         let kind = match resolution {\n             ScopeDef::ModuleDef(Module(..)) => CompletionItemKind::Module,\n             ScopeDef::ModuleDef(Function(func)) => {\n-                return self.add_function(ctx, *func, Some(local_name));\n+                self.add_function(ctx, *func, Some(local_name));\n+                return;\n             }\n             ScopeDef::ModuleDef(Adt(hir::Adt::Struct(_))) => CompletionItemKind::Struct,\n             // FIXME: add CompletionItemKind::Union\n             ScopeDef::ModuleDef(Adt(hir::Adt::Union(_))) => CompletionItemKind::Struct,\n             ScopeDef::ModuleDef(Adt(hir::Adt::Enum(_))) => CompletionItemKind::Enum,\n \n             ScopeDef::ModuleDef(EnumVariant(var)) => {\n-                return self.add_enum_variant(ctx, *var, Some(local_name));\n+                self.add_enum_variant(ctx, *var, Some(local_name));\n+                return;\n             }\n             ScopeDef::ModuleDef(Const(..)) => CompletionItemKind::Const,\n             ScopeDef::ModuleDef(Static(..)) => CompletionItemKind::Static,\n@@ -77,13 +119,14 @@ impl Completions {\n             // (does this need its own kind?)\n             ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => CompletionItemKind::TypeParam,\n             ScopeDef::MacroDef(mac) => {\n-                return self.add_macro(ctx, Some(local_name), *mac);\n+                self.add_macro(ctx, Some(local_name), *mac);\n+                return;\n             }\n             ScopeDef::Unknown => {\n-                return self.add(\n-                    CompletionItem::new(CompletionKind::Reference, ctx.source_range(), local_name)\n-                        .kind(CompletionItemKind::UnresolvedReference),\n-                );\n+                CompletionItem::new(CompletionKind::Reference, ctx.source_range(), local_name)\n+                    .kind(CompletionItemKind::UnresolvedReference)\n+                    .add_to(self);\n+                return;\n             }\n         };\n \n@@ -98,12 +141,11 @@ impl Completions {\n             _ => None,\n         };\n \n-        let mut completion_item =\n-            CompletionItem::new(completion_kind, ctx.source_range(), local_name.clone());\n+        let mut item = CompletionItem::new(completion_kind, ctx.source_range(), local_name.clone());\n         if let ScopeDef::Local(local) = resolution {\n             let ty = local.ty(ctx.db);\n             if !ty.is_unknown() {\n-                completion_item = completion_item.detail(ty.display(ctx.db).to_string());\n+                item = item.detail(ty.display(ctx.db).to_string());\n             }\n         };\n \n@@ -114,7 +156,7 @@ impl Completions {\n                 if let Some(score) =\n                     compute_score_from_active(&active_type, &active_name, &ty, &local_name)\n                 {\n-                    completion_item = completion_item.set_score(score);\n+                    item = item.set_score(score);\n                 }\n                 ref_match = refed_type_matches(&active_type, &active_name, &ty, &local_name);\n             }\n@@ -130,15 +172,15 @@ impl Completions {\n                 };\n                 if has_non_default_type_params {\n                     mark::hit!(inserts_angle_brackets_for_generics);\n-                    completion_item = completion_item\n+                    item = item\n                         .lookup_by(local_name.clone())\n                         .label(format!(\"{}<\u2026>\", local_name))\n                         .insert_snippet(cap, format!(\"{}<$0>\", local_name));\n                 }\n             }\n         }\n \n-        completion_item.kind(kind).set_documentation(docs).set_ref_match(ref_match).add_to(self)\n+        item.kind(kind).set_documentation(docs).set_ref_match(ref_match).add_to(self)\n     }\n \n     pub(crate) fn add_macro(\n@@ -190,7 +232,7 @@ impl Completions {\n             }\n         };\n \n-        self.add(builder);\n+        self.add(builder.build());\n     }\n \n     pub(crate) fn add_function(\n@@ -242,7 +284,7 @@ impl Completions {\n \n         builder = builder.add_call_parens(ctx, name, Params::Named(params));\n \n-        self.add(builder)\n+        self.add(builder.build())\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n@@ -506,7 +548,7 @@ mod tests {\n     use test_utils::mark;\n \n     use crate::{\n-        test_utils::{check_edit, check_edit_with_config, do_completion, get_all_completion_items},\n+        test_utils::{check_edit, check_edit_with_config, do_completion, get_all_items},\n         CompletionConfig, CompletionKind, CompletionScore,\n     };\n \n@@ -524,7 +566,7 @@ mod tests {\n             }\n         }\n \n-        let mut completions = get_all_completion_items(CompletionConfig::default(), ra_fixture);\n+        let mut completions = get_all_items(CompletionConfig::default(), ra_fixture);\n         completions.sort_by_key(|it| (Reverse(it.score()), it.label().to_string()));\n         let actual = completions\n             .into_iter()\n@@ -661,7 +703,7 @@ fn main() { let _: m::Spam = S<|> }\n     }\n \n     #[test]\n-    fn sets_deprecated_flag_in_completion_items() {\n+    fn sets_deprecated_flag_in_items() {\n         check(\n             r#\"\n #[deprecated]", "previous_filename": "crates/completion/src/presentation.rs"}, {"sha": "f3d6694589b3e9a5979f4998c5eabb09169db165", "filename": "crates/completion/src/completions/attribute.rs", "status": "renamed", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -7,12 +7,13 @@ use rustc_hash::FxHashSet;\n use syntax::{ast, AstNode, SyntaxKind};\n \n use crate::{\n-    completion_context::CompletionContext,\n-    completion_item::{CompletionItem, CompletionItemKind, CompletionKind, Completions},\n+    context::CompletionContext,\n     generated_lint_completions::{CLIPPY_LINTS, FEATURES},\n+    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    Completions,\n };\n \n-pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n+pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     if ctx.mod_declaration_under_caret.is_some() {\n         return None;\n     }\n@@ -60,7 +61,7 @@ fn complete_attribute_start(acc: &mut Completions, ctx: &CompletionContext, attr\n         }\n \n         if attribute.kind() == ast::AttrKind::Inner || !attr_completion.prefer_inner {\n-            acc.add(item);\n+            acc.add(item.build());\n         }\n     }\n }\n@@ -152,21 +153,15 @@ fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, derive_input:\n                 label.push_str(\", \");\n                 label.push_str(dependency);\n             }\n-            acc.add(\n-                CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label)\n-                    .kind(CompletionItemKind::Attribute),\n-            );\n+            CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label)\n+                .kind(CompletionItemKind::Attribute)\n+                .add_to(acc)\n         }\n \n         for custom_derive_name in get_derive_names_in_scope(ctx).difference(&existing_derives) {\n-            acc.add(\n-                CompletionItem::new(\n-                    CompletionKind::Attribute,\n-                    ctx.source_range(),\n-                    custom_derive_name,\n-                )\n-                .kind(CompletionItemKind::Attribute),\n-            );\n+            CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), custom_derive_name)\n+                .kind(CompletionItemKind::Attribute)\n+                .add_to(acc)\n         }\n     }\n }\n@@ -182,15 +177,14 @@ fn complete_lint(\n             .into_iter()\n             .filter(|completion| !existing_lints.contains(completion.label))\n         {\n-            acc.add(\n-                CompletionItem::new(\n-                    CompletionKind::Attribute,\n-                    ctx.source_range(),\n-                    lint_completion.label,\n-                )\n-                .kind(CompletionItemKind::Attribute)\n-                .detail(lint_completion.description),\n-            );\n+            CompletionItem::new(\n+                CompletionKind::Attribute,\n+                ctx.source_range(),\n+                lint_completion.label,\n+            )\n+            .kind(CompletionItemKind::Attribute)\n+            .detail(lint_completion.description)\n+            .add_to(acc)\n         }\n     }\n }\n@@ -262,9 +256,9 @@ const DEFAULT_DERIVE_COMPLETIONS: &[DeriveCompletion] = &[\n     DeriveCompletion { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },\n ];\n \n-pub(super) struct LintCompletion {\n-    pub(super) label: &'static str,\n-    pub(super) description: &'static str,\n+pub(crate) struct LintCompletion {\n+    pub(crate) label: &'static str,\n+    pub(crate) description: &'static str,\n }\n \n #[rustfmt::skip]", "previous_filename": "crates/completion/src/complete_attribute.rs"}, {"sha": "c9875045ad4676367058f49684b62c807005ebff", "filename": "crates/completion/src/completions/dot.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -4,10 +4,10 @@ use hir::{HasVisibility, Type};\n use rustc_hash::FxHashSet;\n use test_utils::mark;\n \n-use crate::{completion_context::CompletionContext, completion_item::Completions};\n+use crate::{context::CompletionContext, Completions};\n \n /// Complete dot accesses, i.e. fields or methods.\n-pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n     let dot_receiver = match &ctx.dot_receiver {\n         Some(expr) => expr,\n         _ => return,\n@@ -141,7 +141,7 @@ mod inner {\n         private_field: u32,\n         pub pub_field: u32,\n         pub(crate) crate_field: u32,\n-        pub(super) super_field: u32,\n+        pub(crate) super_field: u32,\n     }\n }\n fn foo(a: inner::A) { a.<|> }\n@@ -159,13 +159,13 @@ struct A {}\n mod m {\n     impl super::A {\n         fn private_method(&self) {}\n-        pub(super) fn the_method(&self) {}\n+        pub(crate) fn the_method(&self) {}\n     }\n }\n fn foo(a: A) { a.<|> }\n \"#,\n             expect![[r#\"\n-                me the_method() pub(super) fn the_method(&self)\n+                me the_method() pub(crate) fn the_method(&self)\n             \"#]],\n         );\n     }", "previous_filename": "crates/completion/src/complete_dot.rs"}, {"sha": "e777a53c1d43e74ae09380c108ea2a9a52bafa7c", "filename": "crates/completion/src/completions/fn_param.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -12,7 +12,7 @@ use crate::{CompletionContext, CompletionItem, CompletionKind, Completions};\n /// functions in a file have a `spam: &mut Spam` parameter, a completion with\n /// `spam: &mut Spam` insert text/label and `spam` lookup string will be\n /// suggested.\n-pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_param {\n         return;\n     }", "previous_filename": "crates/completion/src/complete_fn_param.rs"}, {"sha": "c7df1590014d1fd564ab308eee31b7cef59291f1", "filename": "crates/completion/src/completions/keyword.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -5,7 +5,7 @@ use test_utils::mark;\n \n use crate::{CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions};\n \n-pub(super) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n     // complete keyword \"crate\" in use stmt\n     let source_range = ctx.source_range();\n \n@@ -39,7 +39,7 @@ pub(super) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n     }\n }\n \n-pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n     if ctx.token.kind() == SyntaxKind::COMMENT {\n         mark::hit!(no_keyword_completion_in_comments);\n         return;", "previous_filename": "crates/completion/src/complete_keyword.rs"}, {"sha": "82884a181faf7340f316f37f2fa5bcdc9010c578", "filename": "crates/completion/src/completions/macro_in_item_position.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{CompletionContext, Completions};\n \n-pub(super) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &CompletionContext) {\n     // Show only macros in top level.\n     if ctx.is_new_item {\n         ctx.scope.process_all_names(&mut |name, res| {", "previous_filename": "crates/completion/src/complete_macro_in_item_position.rs"}, {"sha": "c96f84171bc74d98f6f622ae853ceede8c48a741", "filename": "crates/completion/src/completions/mod_.rs", "status": "renamed", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -7,13 +7,10 @@ use rustc_hash::FxHashSet;\n \n use crate::{CompletionItem, CompletionItemKind};\n \n-use super::{\n-    completion_context::CompletionContext, completion_item::CompletionKind,\n-    completion_item::Completions,\n-};\n+use crate::{context::CompletionContext, item::CompletionKind, Completions};\n \n /// Complete mod declaration, i.e. `mod <|> ;`\n-pub(super) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n+pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let mod_under_caret = match &ctx.mod_declaration_under_caret {\n         Some(mod_under_caret) if mod_under_caret.item_list().is_some() => return None,\n         Some(mod_under_caret) => mod_under_caret,\n@@ -78,10 +75,9 @@ pub(super) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n             if mod_under_caret.semicolon_token().is_none() {\n                 label.push(';')\n             }\n-            acc.add(\n-                CompletionItem::new(CompletionKind::Magic, ctx.source_range(), &label)\n-                    .kind(CompletionItemKind::Module),\n-            )\n+            CompletionItem::new(CompletionKind::Magic, ctx.source_range(), &label)\n+                .kind(CompletionItemKind::Module)\n+                .add_to(acc)\n         });\n \n     Some(())", "previous_filename": "crates/completion/src/complete_mod.rs"}, {"sha": "7ab7f09febceab276bcace8f414f8cd2e3f9db1d", "filename": "crates/completion/src/completions/pattern.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -3,7 +3,7 @@\n use crate::{CompletionContext, Completions};\n \n /// Completes constats and paths in patterns.\n-pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_pat_binding_or_const {\n         return;\n     }", "previous_filename": "crates/completion/src/complete_pattern.rs"}, {"sha": "348f017bd703c00abd29377055ef2f7c6291769b", "filename": "crates/completion/src/completions/postfix.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -11,13 +11,13 @@ use text_edit::TextEdit;\n \n use self::format_like::add_format_like_completions;\n use crate::{\n-    completion_config::SnippetCap,\n-    completion_context::CompletionContext,\n-    completion_item::{Builder, CompletionKind, Completions},\n-    CompletionItem, CompletionItemKind,\n+    config::SnippetCap,\n+    context::CompletionContext,\n+    item::{Builder, CompletionKind},\n+    CompletionItem, CompletionItemKind, Completions,\n };\n \n-pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.config.enable_postfix_completions {\n         return;\n     }", "previous_filename": "crates/completion/src/complete_postfix.rs"}, {"sha": "f35114ed1ab46bab085aa3ff84766cf7f097c20b", "filename": "crates/completion/src/completions/postfix/format_like.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -15,8 +15,8 @@\n //   + `loge` -> `log::error!(...)`\n \n use crate::{\n-    complete_postfix::postfix_snippet, completion_config::SnippetCap,\n-    completion_context::CompletionContext, completion_item::Completions,\n+    completions::postfix::postfix_snippet, config::SnippetCap, context::CompletionContext,\n+    Completions,\n };\n use syntax::ast::{self, AstToken};\n \n@@ -33,7 +33,7 @@ static KINDS: &[(&str, &str)] = &[\n     (\"loge\", \"log::error!\"),\n ];\n \n-pub(super) fn add_format_like_completions(\n+pub(crate) fn add_format_like_completions(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     dot_receiver: &ast::Expr,\n@@ -70,7 +70,7 @@ fn string_literal_contents(item: &ast::String) -> Option<String> {\n /// Parser for a format-like string. It is more allowing in terms of string contents,\n /// as we expect variable placeholders to be filled with expressions.\n #[derive(Debug)]\n-pub struct FormatStrParser {\n+pub(crate) struct FormatStrParser {\n     input: String,\n     output: String,\n     extracted_expressions: Vec<String>,", "previous_filename": "crates/completion/src/complete_postfix/format_like.rs"}, {"sha": "d9387054dc065959e7e5de0c05be1fee6ec15ff5", "filename": "crates/completion/src/completions/qualified_path.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -7,7 +7,7 @@ use test_utils::mark;\n \n use crate::{CompletionContext, Completions};\n \n-pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let path = match &ctx.path_qual {\n         Some(path) => path.clone(),\n         None => return,\n@@ -369,21 +369,21 @@ struct S;\n \n mod m {\n     impl super::S {\n-        pub(super) fn public_method() { }\n+        pub(crate) fn public_method() { }\n         fn private_method() { }\n-        pub(super) type PublicType = u32;\n+        pub(crate) type PublicType = u32;\n         type PrivateType = u32;\n-        pub(super) const PUBLIC_CONST: u32 = 1;\n+        pub(crate) const PUBLIC_CONST: u32 = 1;\n         const PRIVATE_CONST: u32 = 1;\n     }\n }\n \n fn foo() { let _ = S::<|> }\n \"#,\n             expect![[r#\"\n-                ct PUBLIC_CONST    pub(super) const PUBLIC_CONST: u32 = 1;\n-                ta PublicType      pub(super) type PublicType = u32;\n-                fn public_method() pub(super) fn public_method()\n+                ct PUBLIC_CONST    pub(crate) const PUBLIC_CONST: u32 = 1;\n+                ta PublicType      pub(crate) type PublicType = u32;\n+                fn public_method() pub(crate) fn public_method()\n             \"#]],\n         );\n     }", "previous_filename": "crates/completion/src/complete_qualified_path.rs"}, {"sha": "0f611084b03ffbb046525ccd63bb38b06587803e", "filename": "crates/completion/src/completions/record.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -1,7 +1,7 @@\n //! Complete fields in record literals and patterns.\n use crate::{CompletionContext, Completions};\n \n-pub(super) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n+pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let missing_fields = match (ctx.record_pat_syntax.as_ref(), ctx.record_lit_syntax.as_ref()) {\n         (None, None) => return None,\n         (Some(_), Some(_)) => unreachable!(\"A record cannot be both a literal and a pattern\"),", "previous_filename": "crates/completion/src/complete_record.rs"}, {"sha": "6f0c000781c94bc952cc932b87832e911f26a2d5", "filename": "crates/completion/src/completions/snippet.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -1,8 +1,8 @@\n //! This file provides snippet completions, like `pd` => `eprintln!(...)`.\n \n use crate::{\n-    completion_config::SnippetCap, completion_item::Builder, CompletionContext, CompletionItem,\n-    CompletionItemKind, CompletionKind, Completions,\n+    config::SnippetCap, item::Builder, CompletionContext, CompletionItem, CompletionItemKind,\n+    CompletionKind, Completions,\n };\n \n fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str) -> Builder {\n@@ -11,7 +11,7 @@ fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str)\n         .kind(CompletionItemKind::Snippet)\n }\n \n-pub(super) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n     if !(ctx.is_trivial_path && ctx.function_syntax.is_some()) {\n         return;\n     }\n@@ -24,7 +24,7 @@ pub(super) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n     snippet(ctx, cap, \"ppd\", \"eprintln!(\\\"$0 = {:#?}\\\", $0);\").add_to(acc);\n }\n \n-pub(super) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_new_item {\n         return;\n     }", "previous_filename": "crates/completion/src/complete_snippet.rs"}, {"sha": "a14be9c73b21f02e161645347f6e60f02af1660e", "filename": "crates/completion/src/completions/trait_impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "previous_filename": "crates/completion/src/complete_trait_impl.rs"}, {"sha": "7df58e1da82932c62fe27532a7223275388bec26", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -6,7 +6,7 @@ use test_utils::mark;\n \n use crate::{CompletionContext, Completions};\n \n-pub(super) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n     if !(ctx.is_trivial_path || ctx.is_pat_binding_or_const) {\n         return;\n     }", "previous_filename": "crates/completion/src/complete_unqualified_path.rs"}, {"sha": "71b49ace8bfb0e38a746ff34866d9f3a3cfb46dc", "filename": "crates/completion/src/config.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fconfig.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "previous_filename": "crates/completion/src/completion_config.rs"}, {"sha": "dca304a8f50ce722b121605e9d6486c9f9f09fee", "filename": "crates/completion/src/context.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcontext.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "previous_filename": "crates/completion/src/completion_context.rs"}, {"sha": "87df7f1c94b5b7250865f810c7c6333f8db8145e", "filename": "crates/completion/src/generated_lint_completions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fgenerated_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fgenerated_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fgenerated_lint_completions.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390"}, {"sha": "6d1d085f4bc779e63ebfe1750b11577ac18494c3", "filename": "crates/completion/src/item.rs", "status": "renamed", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -6,7 +6,7 @@ use hir::{Documentation, Mutability};\n use syntax::TextRange;\n use text_edit::TextEdit;\n \n-use crate::completion_config::SnippetCap;\n+use crate::config::SnippetCap;\n \n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n /// It is basically a POD with various properties. To construct a\n@@ -272,10 +272,6 @@ pub(crate) struct Builder {\n }\n \n impl Builder {\n-    pub(crate) fn add_to(self, acc: &mut Completions) {\n-        acc.add(self.build())\n-    }\n-\n     pub(crate) fn build(self) -> CompletionItem {\n         let label = self.label;\n         let text_edit = match self.text_edit {\n@@ -376,28 +372,3 @@ impl<'a> Into<CompletionItem> for Builder {\n         self.build()\n     }\n }\n-\n-/// Represents an in-progress set of completions being built.\n-#[derive(Debug, Default)]\n-pub struct Completions {\n-    buf: Vec<CompletionItem>,\n-}\n-\n-impl Completions {\n-    pub fn add(&mut self, item: impl Into<CompletionItem>) {\n-        self.buf.push(item.into())\n-    }\n-    pub fn add_all<I>(&mut self, items: I)\n-    where\n-        I: IntoIterator,\n-        I::Item: Into<CompletionItem>,\n-    {\n-        items.into_iter().for_each(|item| self.add(item.into()))\n-    }\n-}\n-\n-impl Into<Vec<CompletionItem>> for Completions {\n-    fn into(self) -> Vec<CompletionItem> {\n-        self.buf\n-    }\n-}", "previous_filename": "crates/completion/src/completion_item.rs"}, {"sha": "89c0a997816d758f84a9c078496c4a943088e437", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 23, "deletions": 39, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -1,39 +1,23 @@\n //! `completions` crate provides utilities for generating completions of user input.\n \n-mod completion_config;\n-mod completion_item;\n-mod completion_context;\n-mod presentation;\n+mod config;\n+mod item;\n+mod context;\n mod patterns;\n mod generated_lint_completions;\n #[cfg(test)]\n mod test_utils;\n \n-mod complete_attribute;\n-mod complete_dot;\n-mod complete_record;\n-mod complete_pattern;\n-mod complete_fn_param;\n-mod complete_keyword;\n-mod complete_snippet;\n-mod complete_qualified_path;\n-mod complete_unqualified_path;\n-mod complete_postfix;\n-mod complete_macro_in_item_position;\n-mod complete_trait_impl;\n-mod complete_mod;\n+mod completions;\n \n use ide_db::base_db::FilePosition;\n use ide_db::RootDatabase;\n \n-use crate::{\n-    completion_context::CompletionContext,\n-    completion_item::{CompletionKind, Completions},\n-};\n+use crate::{completions::Completions, context::CompletionContext, item::CompletionKind};\n \n pub use crate::{\n-    completion_config::CompletionConfig,\n-    completion_item::{CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat},\n+    config::CompletionConfig,\n+    item::{CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat},\n };\n \n //FIXME: split the following feature into fine-grained features.\n@@ -118,28 +102,28 @@ pub fn completions(\n     }\n \n     let mut acc = Completions::default();\n-    complete_attribute::complete_attribute(&mut acc, &ctx);\n-    complete_fn_param::complete_fn_param(&mut acc, &ctx);\n-    complete_keyword::complete_expr_keyword(&mut acc, &ctx);\n-    complete_keyword::complete_use_tree_keyword(&mut acc, &ctx);\n-    complete_snippet::complete_expr_snippet(&mut acc, &ctx);\n-    complete_snippet::complete_item_snippet(&mut acc, &ctx);\n-    complete_qualified_path::complete_qualified_path(&mut acc, &ctx);\n-    complete_unqualified_path::complete_unqualified_path(&mut acc, &ctx);\n-    complete_dot::complete_dot(&mut acc, &ctx);\n-    complete_record::complete_record(&mut acc, &ctx);\n-    complete_pattern::complete_pattern(&mut acc, &ctx);\n-    complete_postfix::complete_postfix(&mut acc, &ctx);\n-    complete_macro_in_item_position::complete_macro_in_item_position(&mut acc, &ctx);\n-    complete_trait_impl::complete_trait_impl(&mut acc, &ctx);\n-    complete_mod::complete_mod(&mut acc, &ctx);\n+    completions::attribute::complete_attribute(&mut acc, &ctx);\n+    completions::fn_param::complete_fn_param(&mut acc, &ctx);\n+    completions::keyword::complete_expr_keyword(&mut acc, &ctx);\n+    completions::keyword::complete_use_tree_keyword(&mut acc, &ctx);\n+    completions::snippet::complete_expr_snippet(&mut acc, &ctx);\n+    completions::snippet::complete_item_snippet(&mut acc, &ctx);\n+    completions::qualified_path::complete_qualified_path(&mut acc, &ctx);\n+    completions::unqualified_path::complete_unqualified_path(&mut acc, &ctx);\n+    completions::dot::complete_dot(&mut acc, &ctx);\n+    completions::record::complete_record(&mut acc, &ctx);\n+    completions::pattern::complete_pattern(&mut acc, &ctx);\n+    completions::postfix::complete_postfix(&mut acc, &ctx);\n+    completions::macro_in_item_position::complete_macro_in_item_position(&mut acc, &ctx);\n+    completions::trait_impl::complete_trait_impl(&mut acc, &ctx);\n+    completions::mod_::complete_mod(&mut acc, &ctx);\n \n     Some(acc)\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion_config::CompletionConfig;\n+    use crate::config::CompletionConfig;\n     use crate::test_utils;\n \n     struct DetailAndDocumentation<'a> {"}, {"sha": "4c1b1a83923ac80d00ce3a431ac2de3d104643e5", "filename": "crates/completion/src/test_utils.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -8,7 +8,7 @@ use stdx::{format_to, trim_indent};\n use syntax::{AstNode, NodeOrToken, SyntaxElement};\n use test_utils::{assert_eq_text, RangeOrOffset};\n \n-use crate::{completion_item::CompletionKind, CompletionConfig, CompletionItem};\n+use crate::{item::CompletionKind, CompletionConfig, CompletionItem};\n \n /// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n@@ -32,10 +32,8 @@ pub(crate) fn do_completion_with_config(\n     code: &str,\n     kind: CompletionKind,\n ) -> Vec<CompletionItem> {\n-    let mut kind_completions: Vec<CompletionItem> = get_all_completion_items(config, code)\n-        .into_iter()\n-        .filter(|c| c.completion_kind == kind)\n-        .collect();\n+    let mut kind_completions: Vec<CompletionItem> =\n+        get_all_items(config, code).into_iter().filter(|c| c.completion_kind == kind).collect();\n     kind_completions.sort_by(|l, r| l.label().cmp(r.label()));\n     kind_completions\n }\n@@ -49,10 +47,8 @@ pub(crate) fn completion_list_with_config(\n     code: &str,\n     kind: CompletionKind,\n ) -> String {\n-    let mut kind_completions: Vec<CompletionItem> = get_all_completion_items(config, code)\n-        .into_iter()\n-        .filter(|c| c.completion_kind == kind)\n-        .collect();\n+    let mut kind_completions: Vec<CompletionItem> =\n+        get_all_items(config, code).into_iter().filter(|c| c.completion_kind == kind).collect();\n     kind_completions.sort_by_key(|c| c.label().to_owned());\n     let label_width = kind_completions\n         .iter()\n@@ -121,10 +117,7 @@ pub(crate) fn check_pattern_is_not_applicable(code: &str, check: fn(SyntaxElemen\n     assert!(!check(NodeOrToken::Token(token)));\n }\n \n-pub(crate) fn get_all_completion_items(\n-    config: CompletionConfig,\n-    code: &str,\n-) -> Vec<CompletionItem> {\n+pub(crate) fn get_all_items(config: CompletionConfig, code: &str) -> Vec<CompletionItem> {\n     let (db, position) = position(code);\n     crate::completions(&db, &config, position).unwrap().into()\n }"}, {"sha": "b9742121716c9d6df43c85a0cb2cf18d4a7e42b4", "filename": "xtask/src/codegen/gen_lint_completions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10e2a04c8a5ff157acd95bc7458d36d9f396390/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10e2a04c8a5ff157acd95bc7458d36d9f396390/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs?ref=d10e2a04c8a5ff157acd95bc7458d36d9f396390", "patch": "@@ -20,7 +20,7 @@ pub fn generate_lint_completions(mode: Mode) -> Result<()> {\n \n     let ts_clippy = generate_descriptor_clippy(&Path::new(\"./target/clippy_lints.json\"))?;\n     let ts = quote! {\n-        use crate::complete_attribute::LintCompletion;\n+        use crate::completions::attribute::LintCompletion;\n         #ts_features\n         #ts_clippy\n     };"}]}