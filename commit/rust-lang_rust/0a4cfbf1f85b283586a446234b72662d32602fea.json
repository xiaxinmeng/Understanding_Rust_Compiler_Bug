{"sha": "0a4cfbf1f85b283586a446234b72662d32602fea", "node_id": "C_kwDOAAsO6NoAKDBhNGNmYmYxZjg1YjI4MzU4NmE0NDYyMzRiNzI2NjJkMzI2MDJmZWE", "commit": {"author": {"name": "Jake Swensen", "email": "jake@swensen.io", "date": "2023-04-02T20:32:10Z"}, "committer": {"name": "Jake Swensen", "email": "jake@swensen.io", "date": "2023-05-11T01:41:23Z"}, "message": "fix: warn on empty line outer AttrKind::DocComment\n\nchangelog: [`empty_line_after_doc_comments`]: add lint for checking\nempty lines after rustdoc comments.\n\nFixes: #10395", "tree": {"sha": "d36e8292616a013ff1497e6e51ae884039a1c9e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d36e8292616a013ff1497e6e51ae884039a1c9e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a4cfbf1f85b283586a446234b72662d32602fea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4cfbf1f85b283586a446234b72662d32602fea", "html_url": "https://github.com/rust-lang/rust/commit/0a4cfbf1f85b283586a446234b72662d32602fea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a4cfbf1f85b283586a446234b72662d32602fea/comments", "author": {"login": "jdswensen", "id": 4094606, "node_id": "MDQ6VXNlcjQwOTQ2MDY=", "avatar_url": "https://avatars.githubusercontent.com/u/4094606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdswensen", "html_url": "https://github.com/jdswensen", "followers_url": "https://api.github.com/users/jdswensen/followers", "following_url": "https://api.github.com/users/jdswensen/following{/other_user}", "gists_url": "https://api.github.com/users/jdswensen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdswensen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdswensen/subscriptions", "organizations_url": "https://api.github.com/users/jdswensen/orgs", "repos_url": "https://api.github.com/users/jdswensen/repos", "events_url": "https://api.github.com/users/jdswensen/events{/privacy}", "received_events_url": "https://api.github.com/users/jdswensen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdswensen", "id": 4094606, "node_id": "MDQ6VXNlcjQwOTQ2MDY=", "avatar_url": "https://avatars.githubusercontent.com/u/4094606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdswensen", "html_url": "https://github.com/jdswensen", "followers_url": "https://api.github.com/users/jdswensen/followers", "following_url": "https://api.github.com/users/jdswensen/following{/other_user}", "gists_url": "https://api.github.com/users/jdswensen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdswensen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdswensen/subscriptions", "organizations_url": "https://api.github.com/users/jdswensen/orgs", "repos_url": "https://api.github.com/users/jdswensen/repos", "events_url": "https://api.github.com/users/jdswensen/events{/privacy}", "received_events_url": "https://api.github.com/users/jdswensen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "928349795f9f28f54e69bd0f0ffeed33de5e272a", "url": "https://api.github.com/repos/rust-lang/rust/commits/928349795f9f28f54e69bd0f0ffeed33de5e272a", "html_url": "https://github.com/rust-lang/rust/commit/928349795f9f28f54e69bd0f0ffeed33de5e272a"}], "stats": {"total": 246, "additions": 238, "deletions": 8}, "files": [{"sha": "83aaeee8c186a80114b2ade65f55d0d9ba0ab8af", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a4cfbf1f85b283586a446234b72662d32602fea/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a4cfbf1f85b283586a446234b72662d32602fea/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0a4cfbf1f85b283586a446234b72662d32602fea", "patch": "@@ -4619,6 +4619,7 @@ Released 2018-09-13\n [`else_if_without_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#else_if_without_else\n [`empty_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_drop\n [`empty_enum`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_enum\n+[`empty_line_after_doc_comments`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n [`empty_line_after_outer_attr`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr\n [`empty_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n [`empty_structs_with_brackets`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_structs_with_brackets"}, {"sha": "93d88391a79b4bf964a3e20ca091e58ebfeb5add", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 68, "deletions": 8, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/0a4cfbf1f85b283586a446234b72662d32602fea/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4cfbf1f85b283586a446234b72662d32602fea/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=0a4cfbf1f85b283586a446234b72662d32602fea", "patch": "@@ -176,6 +176,52 @@ declare_clippy_lint! {\n     \"empty line after outer attribute\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for empty lines after documenation comments.\n+    ///\n+    /// ### Why is this bad?\n+    /// The documentation comment was most likely meant to be an inner attribute or regular comment.\n+    /// If it was intended to be a documentation comment, then the empty line should be removed to\n+    /// be more idiomatic.\n+    ///\n+    /// ### Known problems\n+    /// Only detects empty lines immediately following the documentation. If the doc comment is followed\n+    /// by an attribute and then an empty line, this lint will not trigger. Use `empty_line_after_outer_attr`\n+    /// in combination with this lint to detect both cases.\n+    ///\n+    /// Does not detect empty lines after doc attributes (e.g. `#[doc = \"\"]`).\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// /// Some doc comment with a blank line after it.\n+    ///\n+    /// fn not_quite_good_code() { }\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// /// Good (no blank line)\n+    /// fn this_is_fine() { }\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// // Good (convert to a regular comment)\n+    ///\n+    /// fn this_is_fine_too() { }\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// //! Good (convert to a comment on an inner attribute)\n+    ///\n+    /// fn this_is_fine_as_well() { }\n+    /// ```\n+    #[clippy::version = \"1.70.0\"]\n+    pub EMPTY_LINE_AFTER_DOC_COMMENTS,\n+    nursery,\n+    \"empty line after documentation comments\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for `warn`/`deny`/`forbid` attributes targeting the whole clippy::restriction category.\n@@ -604,6 +650,7 @@ impl_lint_pass!(EarlyAttributes => [\n     DEPRECATED_CFG_ATTR,\n     MISMATCHED_TARGET_OS,\n     EMPTY_LINE_AFTER_OUTER_ATTR,\n+    EMPTY_LINE_AFTER_DOC_COMMENTS,\n ]);\n \n impl EarlyLintPass for EarlyAttributes {\n@@ -619,10 +666,16 @@ impl EarlyLintPass for EarlyAttributes {\n     extract_msrv_attr!(EarlyContext);\n }\n \n+/// Check for empty lines after outer attributes.\n+///\n+/// Attributes and documenation comments are both considered outer attributes\n+/// by the AST. However, the average user likely considers them to be different.\n+/// Checking for empty lines after each of these attributes is split into two different\n+/// lints but can share the same logic.\n fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::Item) {\n     let mut iter = item.attrs.iter().peekable();\n     while let Some(attr) = iter.next() {\n-        if matches!(attr.kind, AttrKind::Normal(..))\n+        if (matches!(attr.kind, AttrKind::Normal(..)) || matches!(attr.kind, AttrKind::DocComment(..)))\n             && attr.style == AttrStyle::Outer\n             && is_present_in_source(cx, attr.span)\n         {\n@@ -639,13 +692,20 @@ fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::It\n                 let lines = without_block_comments(lines);\n \n                 if lines.iter().filter(|l| l.trim().is_empty()).count() > 2 {\n-                    span_lint(\n-                        cx,\n-                        EMPTY_LINE_AFTER_OUTER_ATTR,\n-                        begin_of_attr_to_item,\n-                        \"found an empty line after an outer attribute. \\\n-                        Perhaps you forgot to add a `!` to make it an inner attribute?\",\n-                    );\n+                    let (lint_msg, lint_type) = match attr.kind {\n+                        AttrKind::DocComment(..) => (\n+                            \"found an empty line after a doc comment. \\\n+                            Perhaps you need to use `//!` to make a comment on a module, remove the empty line, or make a regular comment with `//`?\",\n+                            EMPTY_LINE_AFTER_DOC_COMMENTS,\n+                        ),\n+                        AttrKind::Normal(..) => (\n+                            \"found an empty line after an outer attribute. \\\n+                            Perhaps you forgot to add a `!` to make it an inner attribute?\",\n+                            EMPTY_LINE_AFTER_OUTER_ATTR,\n+                        ),\n+                    };\n+\n+                    span_lint(cx, lint_type, begin_of_attr_to_item, lint_msg);\n                 }\n             }\n         }"}, {"sha": "260be34a795de66852db26969048ce50249a470b", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a4cfbf1f85b283586a446234b72662d32602fea/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4cfbf1f85b283586a446234b72662d32602fea/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=0a4cfbf1f85b283586a446234b72662d32602fea", "patch": "@@ -48,6 +48,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::attrs::BLANKET_CLIPPY_RESTRICTION_LINTS_INFO,\n     crate::attrs::DEPRECATED_CFG_ATTR_INFO,\n     crate::attrs::DEPRECATED_SEMVER_INFO,\n+    crate::attrs::EMPTY_LINE_AFTER_DOC_COMMENTS_INFO,\n     crate::attrs::EMPTY_LINE_AFTER_OUTER_ATTR_INFO,\n     crate::attrs::INLINE_ALWAYS_INFO,\n     crate::attrs::MISMATCHED_TARGET_OS_INFO,"}, {"sha": "e843770f578543465a47b900709493647e758b6b", "filename": "tests/ui/empty_line_after_doc_comments.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/0a4cfbf1f85b283586a446234b72662d32602fea/tests%2Fui%2Fempty_line_after_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4cfbf1f85b283586a446234b72662d32602fea/tests%2Fui%2Fempty_line_after_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_doc_comments.rs?ref=0a4cfbf1f85b283586a446234b72662d32602fea", "patch": "@@ -0,0 +1,132 @@\n+//@aux-build:proc_macro_attr.rs\n+#![warn(clippy::empty_line_after_doc_comments)]\n+#![allow(clippy::assertions_on_constants)]\n+#![feature(custom_inner_attributes)]\n+#![rustfmt::skip]\n+\n+#[macro_use]\n+extern crate proc_macro_attr;\n+\n+mod some_mod {\n+    //! This doc comment should *NOT* produce a warning\n+\n+    mod some_inner_mod {\n+        fn some_noop() {}\n+    }\n+}\n+\n+/// This should produce a warning\n+\n+fn with_doc_and_newline() { assert!(true)}\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+\n+/// some comment\n+fn with_one_newline_and_comment() { assert!(true) }\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+/// some comment\n+fn with_no_newline_and_comment() { assert!(true) }\n+\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+\n+fn with_one_newline() { assert!(true) }\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+\n+\n+fn with_two_newlines() { assert!(true) }\n+\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+\n+enum Baz {\n+    One,\n+    Two\n+}\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+\n+struct Foo {\n+    one: isize,\n+    two: isize\n+}\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+\n+mod foo {\n+}\n+\n+/// This doc comment should produce a warning\n+\n+/** This is also a doc comment and should produce a warning\n+ */\n+\n+// This should *NOT* produce a warning\n+#[allow(non_camel_case_types)]\n+#[allow(missing_docs)]\n+#[allow(missing_docs)]\n+fn three_attributes() { assert!(true) }\n+\n+// This should *NOT* produce a warning\n+#[doc = \"\n+Returns the escaped value of the textual representation of\n+\n+\"]\n+pub fn function() -> bool {\n+    true\n+}\n+\n+// This should *NOT* produce a warning\n+#[derive(Clone, Copy)]\n+pub enum FooFighter {\n+    Bar1,\n+\n+    Bar2,\n+\n+    Bar3,\n+\n+    Bar4\n+}\n+\n+// This should *NOT* produce a warning because the empty line is inside a block comment\n+#[crate_type = \"lib\"]\n+/*\n+\n+*/\n+pub struct S;\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+/* test */\n+pub struct T;\n+\n+// This should *NOT* produce a warning\n+// See https://github.com/rust-lang/rust-clippy/issues/5567\n+#[fake_async_trait]\n+pub trait Bazz {\n+    fn foo() -> Vec<u8> {\n+        let _i = \"\";\n+\n+\n+\n+        vec![]\n+    }\n+}\n+\n+#[derive(Clone, Copy)]\n+#[dummy(string = \"first line\n+\n+second line\n+\")]\n+pub struct Args;\n+\n+fn main() {}"}, {"sha": "2ca1b51679ed132e4f1c362f5d14d9adf022dfb1", "filename": "tests/ui/empty_line_after_doc_comments.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0a4cfbf1f85b283586a446234b72662d32602fea/tests%2Fui%2Fempty_line_after_doc_comments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a4cfbf1f85b283586a446234b72662d32602fea/tests%2Fui%2Fempty_line_after_doc_comments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_doc_comments.stderr?ref=0a4cfbf1f85b283586a446234b72662d32602fea", "patch": "@@ -0,0 +1,36 @@\n+error: found an empty line after a doc comment. Perhaps you need to use `//!` to make a comment on a module, remove the empty line, or make a regular comment with `//`?\n+  --> $DIR/empty_line_after_doc_comments.rs:18:1\n+   |\n+LL | / /// This should produce a warning\n+LL | |\n+LL | | fn with_doc_and_newline() { assert!(true)}\n+   | |_\n+   |\n+   = note: `-D clippy::empty-line-after-doc-comments` implied by `-D warnings`\n+\n+error: found an empty line after a doc comment. Perhaps you need to use `//!` to make a comment on a module, remove the empty line, or make a regular comment with `//`?\n+  --> $DIR/empty_line_after_doc_comments.rs:68:1\n+   |\n+LL | / /// This doc comment should produce a warning\n+LL | |\n+LL | | /** This is also a doc comment and should produce a warning\n+LL | |  */\n+...  |\n+LL | | #[allow(missing_docs)]\n+LL | | fn three_attributes() { assert!(true) }\n+   | |_\n+\n+error: found an empty line after a doc comment. Perhaps you need to use `//!` to make a comment on a module, remove the empty line, or make a regular comment with `//`?\n+  --> $DIR/empty_line_after_doc_comments.rs:70:1\n+   |\n+LL | / /** This is also a doc comment and should produce a warning\n+LL | |  */\n+LL | |\n+LL | | // This should *NOT* produce a warning\n+...  |\n+LL | | #[allow(missing_docs)]\n+LL | | fn three_attributes() { assert!(true) }\n+   | |_\n+\n+error: aborting due to 3 previous errors\n+"}]}