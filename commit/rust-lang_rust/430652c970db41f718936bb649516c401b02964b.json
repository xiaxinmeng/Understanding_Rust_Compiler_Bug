{"sha": "430652c970db41f718936bb649516c401b02964b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMDY1MmM5NzBkYjQxZjcxODkzNmJiNjQ5NTE2YzQwMWIwMjk2NGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-08T18:06:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-08T18:06:45Z"}, "message": "auto merge of #11370 : alexcrichton/rust/issue-10465, r=pwalton\n\nTurned out to be a 2-line fix, but the compiler fallout was huge.", "tree": {"sha": "a41d51a20c1b3c876a345039bcfdd86a5c9b8cc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a41d51a20c1b3c876a345039bcfdd86a5c9b8cc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/430652c970db41f718936bb649516c401b02964b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/430652c970db41f718936bb649516c401b02964b", "html_url": "https://github.com/rust-lang/rust/commit/430652c970db41f718936bb649516c401b02964b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/430652c970db41f718936bb649516c401b02964b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3a8baafbecdb6e41f001c8f218d4796a9ca8d40", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a8baafbecdb6e41f001c8f218d4796a9ca8d40", "html_url": "https://github.com/rust-lang/rust/commit/f3a8baafbecdb6e41f001c8f218d4796a9ca8d40"}, {"sha": "0547fb9cad4053f3ec66e722b7a05df259d63038", "url": "https://api.github.com/repos/rust-lang/rust/commits/0547fb9cad4053f3ec66e722b7a05df259d63038", "html_url": "https://github.com/rust-lang/rust/commit/0547fb9cad4053f3ec66e722b7a05df259d63038"}], "stats": {"total": 525, "additions": 278, "deletions": 247}, "files": [{"sha": "85def62dc3b55d2878c166c0f87c206b961b770f", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -625,43 +625,43 @@ impl<A: Clone> Clone for DList<A> {\n }\n \n #[cfg(test)]\n-pub fn check_links<T>(list: &DList<T>) {\n-    let mut len = 0u;\n-    let mut last_ptr: Option<&Node<T>> = None;\n-    let mut node_ptr: &Node<T>;\n-    match list.list_head {\n-        None => { assert_eq!(0u, list.length); return }\n-        Some(ref node) => node_ptr = &**node,\n-    }\n-    loop {\n-        match (last_ptr, node_ptr.prev.resolve_immut()) {\n-            (None   , None      ) => {}\n-            (None   , _         ) => fail!(\"prev link for list_head\"),\n-            (Some(p), Some(pptr)) => {\n-                assert_eq!(p as *Node<T>, pptr as *Node<T>);\n-            }\n-            _ => fail!(\"prev link is none, not good\"),\n+mod tests {\n+    use container::Deque;\n+    use extra::test;\n+    use std::rand;\n+    use super::{DList, Node, ListInsertion};\n+\n+    pub fn check_links<T>(list: &DList<T>) {\n+        let mut len = 0u;\n+        let mut last_ptr: Option<&Node<T>> = None;\n+        let mut node_ptr: &Node<T>;\n+        match list.list_head {\n+            None => { assert_eq!(0u, list.length); return }\n+            Some(ref node) => node_ptr = &**node,\n         }\n-        match node_ptr.next {\n-            Some(ref next) => {\n-                last_ptr = Some(node_ptr);\n-                node_ptr = &**next;\n-                len += 1;\n+        loop {\n+            match (last_ptr, node_ptr.prev.resolve_immut()) {\n+                (None   , None      ) => {}\n+                (None   , _         ) => fail!(\"prev link for list_head\"),\n+                (Some(p), Some(pptr)) => {\n+                    assert_eq!(p as *Node<T>, pptr as *Node<T>);\n+                }\n+                _ => fail!(\"prev link is none, not good\"),\n             }\n-            None => {\n-                len += 1;\n-                break;\n+            match node_ptr.next {\n+                Some(ref next) => {\n+                    last_ptr = Some(node_ptr);\n+                    node_ptr = &**next;\n+                    len += 1;\n+                }\n+                None => {\n+                    len += 1;\n+                    break;\n+                }\n             }\n         }\n+        assert_eq!(len, list.length);\n     }\n-    assert_eq!(len, list.length);\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-    use std::rand;\n-    use extra::test;\n \n     #[test]\n     fn test_basic() {"}, {"sha": "748d751a2df412afeac0a4adf462752213ab2f6e", "filename": "src/libextra/json.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -1333,11 +1333,10 @@ impl to_str::ToStr for Error {\n \n #[cfg(test)]\n mod tests {\n-\n     use super::*;\n \n     use std::io;\n-    use serialize::Decodable;\n+    use serialize::{Encodable, Decodable};\n     use treemap::TreeMap;\n \n     #[deriving(Eq, Encodable, Decodable)]"}, {"sha": "44b01caac26bcf7ae68f88d5b0259a32547d83d2", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -34,10 +34,6 @@ Rust extras are part of the standard Rust distribution.\n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n \n-use std::str::{StrSlice, OwnedStr};\n-\n-pub use std::os;\n-\n // Utility modules\n \n pub mod c_vec;\n@@ -108,12 +104,4 @@ pub mod serialize;\n pub mod extra {\n     pub use serialize;\n     pub use test;\n-\n-    // For bootstrapping.\n-    pub use std::clone;\n-    pub use std::condition;\n-    pub use std::cmp;\n-    pub use std::unstable;\n-    pub use std::str;\n-    pub use std::os;\n }"}, {"sha": "ed731298b52a53fd4c441c57c532ef209f1ddadc", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -1434,6 +1434,7 @@ impl BigInt {\n #[cfg(test)]\n mod biguint_tests {\n     use super::*;\n+    use super::RandBigInt;\n \n     use std::cmp::{Less, Equal, Greater};\n     use std::i64;\n@@ -2090,6 +2091,7 @@ mod biguint_tests {\n #[cfg(test)]\n mod bigint_tests {\n     use super::*;\n+    use super::RandBigInt;\n \n     use std::cmp::{Less, Equal, Greater};\n     use std::i64;"}, {"sha": "da49f2372f46756d54bf063a7f0799540aac41c1", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -404,10 +404,11 @@ impl<A> Extendable<A> for RingBuf<A> {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n+    use container::Deque;\n+    use extra::test;\n     use std::clone::Clone;\n     use std::cmp::Eq;\n-    use extra::test;\n+    use super::RingBuf;\n \n     #[test]\n     fn test_simple() {"}, {"sha": "f95c12904ff4fe33643a5c7b89b7c27c1652b78b", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -432,7 +432,6 @@ pub fn freq_count<T: Iterator<U>, U: Eq+Hash>(mut iter: T) -> hashmap::HashMap<U\n \n #[cfg(test)]\n mod tests {\n-\n     use stats::Stats;\n     use stats::Summary;\n     use stats::write_5_number_summary;\n@@ -1018,6 +1017,7 @@ mod tests {\n mod bench {\n     use extra::test::BenchHarness;\n     use std::vec;\n+    use stats::Stats;\n \n     #[bench]\n     fn sum_three_items(bh: &mut BenchHarness) {"}, {"sha": "6a0687d1346a976333317506f039dea1d8a43984", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -1134,6 +1134,7 @@ mod test {\n \n     use extra::getopts::groups::getopts;\n     use syntax::attr;\n+    use syntax::attr::AttrMetaMethods;\n     use syntax::diagnostic;\n \n     // When the user supplies --test we should implicitly supply --cfg test"}, {"sha": "a7f75b9dcc1099e318866095bd48133fae1a19dd", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -16,6 +16,7 @@\n use middle::borrowck::*;\n use mc = middle::mem_categorization;\n use middle::ty;\n+use util::ppaux::Repr;\n use syntax::ast;\n use syntax::codemap::Span;\n "}, {"sha": "e4d816b91bd2536f9f65adae70d11b8be4277381", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 26, "deletions": 57, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -5408,8 +5408,7 @@ impl Resolver {\n         }\n     }\n \n-    fn search_for_traits_containing_method(&mut self, name: Ident)\n-                                               -> ~[DefId] {\n+    fn search_for_traits_containing_method(&mut self, name: Ident) -> ~[DefId] {\n         debug!(\"(searching for traits containing method) looking for '{}'\",\n                self.session.str_of(name));\n \n@@ -5438,71 +5437,41 @@ impl Resolver {\n                 self.populate_module_if_necessary(search_module);\n \n                 let children = search_module.children.borrow();\n-                for (_, &child_name_bindings) in children.get().iter() {\n-                    match child_name_bindings.def_for_namespace(TypeNS) {\n-                        Some(def) => {\n-                            match def {\n-                                DefTrait(trait_def_id) => {\n-                                    if candidate_traits.contains(&trait_def_id) {\n-                                        self.add_trait_info(\n-                                            &mut found_traits,\n-                                            trait_def_id, name);\n-                                    }\n-                                }\n-                                _ => {\n-                                    // Continue.\n-                                }\n-                            }\n-                        }\n-                        None => {\n-                            // Continue.\n-                        }\n+                for (_, &child_names) in children.get().iter() {\n+                    let def = match child_names.def_for_namespace(TypeNS) {\n+                        Some(def) => def,\n+                        None => continue\n+                    };\n+                    let trait_def_id = match def {\n+                        DefTrait(trait_def_id) => trait_def_id,\n+                        _ => continue,\n+                    };\n+                    if candidate_traits.contains(&trait_def_id) {\n+                        self.add_trait_info(&mut found_traits, trait_def_id,\n+                                            name);\n                     }\n                 }\n \n                 // Look for imports.\n                 let import_resolutions = search_module.import_resolutions\n                                                       .borrow();\n-                for (_, &import_resolution) in import_resolutions.get()\n-                                                                 .iter() {\n-                    match import_resolution.target_for_namespace(TypeNS) {\n-                        None => {\n-                            // Continue.\n-                        }\n-                        Some(target) => {\n-                            match target.bindings.def_for_namespace(TypeNS) {\n-                                Some(def) => {\n-                                    match def {\n-                                        DefTrait(trait_def_id) => {\n-                                            if candidate_traits.contains(&trait_def_id) {\n-                                                self.add_trait_info(\n-                                                    &mut found_traits,\n-                                                    trait_def_id, name);\n-                                                self.used_imports.insert(\n-                                                    import_resolution.type_id\n-                                                                     .get());\n-                                            }\n-                                        }\n-                                        _ => {\n-                                            // Continue.\n-                                        }\n-                                    }\n-                                }\n-                                None => {\n-                                    // Continue.\n-                                }\n-                            }\n-                        }\n+                for (_, &import) in import_resolutions.get().iter() {\n+                    let target = match import.target_for_namespace(TypeNS) {\n+                        None => continue,\n+                        Some(target) => target,\n+                    };\n+                    let did = match target.bindings.def_for_namespace(TypeNS) {\n+                        Some(DefTrait(trait_def_id)) => trait_def_id,\n+                        Some(..) | None => continue,\n+                    };\n+                    if candidate_traits.contains(&did) {\n+                        self.add_trait_info(&mut found_traits, did, name);\n+                        self.used_imports.insert(import.type_id.get());\n                     }\n                 }\n \n-                // Move to the next parent.\n                 match search_module.parent_link {\n-                    NoParentLink => {\n-                        // Done.\n-                        break;\n-                    }\n-                    ModuleParentLink(parent_module, _) |\n+                    NoParentLink | ModuleParentLink(..) => break,\n                     BlockParentLink(parent_module, _) => {\n                         search_module = parent_module;\n                     }"}, {"sha": "76378d15bae9eeef08e73bb1957f0ac60aa7c78c", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -57,6 +57,7 @@ use middle::ty;\n use middle::typeck::rscope;\n use middle::typeck::rscope::{RegionScope};\n use middle::typeck::lookup_def_tcx;\n+use util::ppaux::Repr;\n \n use std::vec;\n use syntax::abi::AbiSet;"}, {"sha": "9c359f238f8208cc38b20d9174ee409e1a92e378", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -83,6 +83,7 @@ obtained the type `Foo`, we would never match this method.\n use middle::resolve;\n use middle::ty::*;\n use middle::ty;\n+use middle::typeck::astconv::AstConv;\n use middle::typeck::check::{FnCtxt, impl_self_ty};\n use middle::typeck::check::{structurally_resolved_type};\n use middle::typeck::check::vtable;"}, {"sha": "41757b1a634c540a555fb7356dddb8d003395550", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -107,8 +107,8 @@ use middle::typeck::no_params;\n use middle::typeck::{require_same_types, method_map, vtable_map};\n use middle::lang_items::TypeIdLangItem;\n use util::common::{block_query, indenter, loop_query};\n-use util::ppaux::UserString;\n use util::ppaux;\n+use util::ppaux::{UserString, Repr};\n \n use std::cell::{Cell, RefCell};\n use std::hashmap::HashMap;"}, {"sha": "2670a5d59a1c78e18f896a2eb994ecf7bca420d1", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -31,13 +31,14 @@ this point a bit better.\n use middle::freevars::get_freevars;\n use middle::ty::{ReScope};\n use middle::ty;\n+use middle::typeck::astconv::AstConv;\n use middle::typeck::check::FnCtxt;\n use middle::typeck::check::regionmanip::relate_nested_regions;\n use middle::typeck::infer::resolve_and_force_all_but_regions;\n use middle::typeck::infer::resolve_type;\n use middle::typeck::infer;\n-use util::ppaux::{ty_to_str, region_to_str};\n use middle::pat_util;\n+use util::ppaux::{ty_to_str, region_to_str, Repr};\n \n use syntax::ast::{ManagedSigil, OwnedSigil, BorrowedSigil};\n use syntax::ast::{DefArg, DefBinding, DefLocal, DefSelf, DefUpvar};\n@@ -833,14 +834,14 @@ pub mod guarantor {\n      * but more special purpose.\n      */\n \n-\n+    use middle::typeck::astconv::AstConv;\n     use middle::typeck::check::regionck::Rcx;\n     use middle::typeck::check::regionck::mk_subregion_due_to_derefence;\n     use middle::typeck::infer;\n     use middle::ty;\n     use syntax::ast;\n     use syntax::codemap::Span;\n-    use util::ppaux::{ty_to_str};\n+    use util::ppaux::{ty_to_str, Repr};\n \n     pub fn for_addr_of(rcx: &mut Rcx, expr: &ast::Expr, base: &ast::Expr) {\n         /*!"}, {"sha": "208ba615d232c55c76f325acadc352ff6fe7dfdf", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -12,6 +12,7 @@\n use middle::ty;\n use middle::ty::{AutoAddEnv, AutoDerefRef, AutoObject, param_ty};\n use middle::ty_fold::TypeFolder;\n+use middle::typeck::astconv::AstConv;\n use middle::typeck::check::{FnCtxt, impl_self_ty};\n use middle::typeck::check::{structurally_resolved_type};\n use middle::typeck::infer::fixup_err_to_str;\n@@ -23,6 +24,7 @@ use middle::typeck::{param_numbered, param_self, param_index};\n use middle::subst::Subst;\n use util::common::indenter;\n use util::ppaux;\n+use util::ppaux::Repr;\n \n use std::cell::RefCell;\n use std::hashmap::HashSet;"}, {"sha": "9305ddcc5d136579b1c76f1dba62e5a410357fa4", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -15,6 +15,7 @@\n \n use middle::pat_util;\n use middle::ty;\n+use middle::typeck::astconv::AstConv;\n use middle::typeck::check::{FnCtxt, SelfInfo};\n use middle::typeck::infer::{force_all, resolve_all, resolve_region};\n use middle::typeck::infer::resolve_type;\n@@ -25,6 +26,7 @@ use middle::typeck::method_map_entry;\n use middle::typeck::write_substs_to_tcx;\n use middle::typeck::write_ty_to_tcx;\n use util::ppaux;\n+use util::ppaux::Repr;\n \n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "177b8d9fafc25d06c0ffb9afc31cba556af24e00", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -34,6 +34,7 @@ use middle::typeck::infer::combine::Combine;\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::{new_infer_ctxt, resolve_ivar, resolve_type};\n use middle::typeck::infer;\n+use util::ppaux::Repr;\n use syntax::ast::{Crate, DefId, DefStruct, DefTy};\n use syntax::ast::{item, item_enum, item_impl, item_mod, item_struct};\n use syntax::ast::{LOCAL_CRATE, trait_ref, ty_path};"}, {"sha": "a713ada3706c3c593bc514b9518f2eace4907e91", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -42,6 +42,7 @@ use middle::typeck::astconv;\n use middle::typeck::rscope::*;\n use middle::typeck::{CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx};\n use util::ppaux;\n+use util::ppaux::Repr;\n \n use std::vec;\n use syntax::abi::AbiSet;"}, {"sha": "5971a6b7943bd1279a0e5ebb9102660248c6eacd", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -71,7 +71,7 @@ use middle::ty::{vstore_slice, vstore_box, vstore_uniq};\n use middle::ty::{mt};\n use middle::ty;\n use middle::typeck::infer::{CoerceResult, resolve_type, Coercion};\n-use middle::typeck::infer::combine::CombineFields;\n+use middle::typeck::infer::combine::{CombineFields, Combine};\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::resolve::try_resolve_tvar_shallow;"}, {"sha": "7c232c8168fa998dd0797be5c53ed230fd0fa632", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -51,6 +51,7 @@ use middle::ty::{FloatVar, FnSig, IntVar, TyVar};\n use middle::ty::{IntType, UintType, substs};\n use middle::ty::{BuiltinBounds};\n use middle::ty;\n+use middle::typeck::infer::{then, ToUres};\n use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::sub::Sub;\n@@ -59,6 +60,7 @@ use middle::typeck::infer::unify::InferCtxtMethods;\n use middle::typeck::infer::{InferCtxt, cres, ures};\n use middle::typeck::infer::{TypeTrace};\n use util::common::indent;\n+use util::ppaux::Repr;\n \n use std::result;\n use syntax::ast::{Onceness, purity};"}, {"sha": "137ba657ad5ecb47ec47e94df8409cf667e21795", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -12,6 +12,7 @@\n use middle::ty::{BuiltinBounds};\n use middle::ty::RegionVid;\n use middle::ty;\n+use middle::typeck::infer::then;\n use middle::typeck::infer::combine::*;\n use middle::typeck::infer::lattice::*;\n use middle::typeck::infer::lub::Lub;"}, {"sha": "69bc3e13113442a496f016b1a8bde84f82fc7bc1", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -35,6 +35,7 @@\n \n use middle::ty::{RegionVid, TyVar, Vid};\n use middle::ty;\n+use middle::typeck::infer::{then, ToUres};\n use middle::typeck::infer::*;\n use middle::typeck::infer::combine::*;\n use middle::typeck::infer::glb::Glb;"}, {"sha": "0cb16c8fbfb6074c29c42fd2a2d7f037121198ef", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -12,6 +12,7 @@\n use middle::ty::{BuiltinBounds};\n use middle::ty::RegionVid;\n use middle::ty;\n+use middle::typeck::infer::then;\n use middle::typeck::infer::combine::*;\n use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::lattice::*;"}, {"sha": "f859d3b2add4e01beb7003a7ebbb0a5ab44d2615", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -45,7 +45,6 @@ use syntax::codemap;\n use syntax::codemap::Span;\n use util::common::indent;\n use util::ppaux::{bound_region_to_str, ty_to_str, trait_ref_to_str, Repr};\n-use util::ppaux::{UserString};\n \n pub mod doc;\n pub mod macros;"}, {"sha": "b5e67361378a9d48376a2a5feb295c883d9e09ed", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -12,7 +12,7 @@\n \n \n use middle::ty;\n-use middle::ty::{FreeRegion, Region, RegionVid};\n+use middle::ty::{FreeRegion, Region, RegionVid, Vid};\n use middle::ty::{ReEmpty, ReStatic, ReInfer, ReFree, ReEarlyBound,\n                  ReLateBound};\n use middle::ty::{ReScope, ReVar, ReSkolemized, BrFresh};"}, {"sha": "81faec297a1390ece8c04af9863c61519782b389", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -14,11 +14,12 @@ use middle::ty;\n use middle::ty::TyVar;\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n use middle::typeck::infer::combine::*;\n-use middle::typeck::infer::cres;\n+use middle::typeck::infer::{cres, CresCompare};\n use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::lattice::CombineFieldsLatticeMethods;\n use middle::typeck::infer::lub::Lub;\n+use middle::typeck::infer::then;\n use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::{TypeTrace, Subtype};\n use util::common::{indenter};"}, {"sha": "6ddb023066edfdae4d133ba7530b032e153a01a2", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -204,6 +204,7 @@ use syntax::parse::token;\n use syntax::opt_vec;\n use syntax::visit;\n use syntax::visit::Visitor;\n+use util::ppaux::Repr;\n \n pub fn infer_variance(tcx: ty::ctxt,\n                       crate: &ast::Crate) {"}, {"sha": "73d39d8145fc54070b61b5fa7ee1e4dd53b195af", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -522,7 +522,7 @@ static H256: [u32, ..8] = [\n \n #[cfg(test)]\n mod tests {\n-    use super::{Digest, Sha256};\n+    use super::{Digest, Sha256, FixedBuffer};\n     use std::vec;\n     use std::rand::isaac::IsaacRng;\n     use std::rand::Rng;\n@@ -633,7 +633,7 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     use extra::test::BenchHarness;\n-    use super::Sha256;\n+    use super::{Sha256, FixedBuffer, Digest};\n \n     #[bench]\n     pub fn sha256_10(bh: &mut BenchHarness) {"}, {"sha": "2a1728e2e6b2beb0e8a0d4b5ac22e6c24ce905b8", "filename": "src/librustpkg/api.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustpkg%2Fapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustpkg%2Fapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fapi.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use CtxMethods;\n use context::*;\n use crate::*;\n use crate_id::*;"}, {"sha": "7d39be913b4e655e38edcda354d4c10dc64e0c46", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -10,6 +10,7 @@\n \n // rustpkg unit tests\n \n+use CtxMethods;\n use context::{BuildContext, Context, RustcFlags};\n use std::{os, run, str, task};\n use std::io;"}, {"sha": "8111c8a805def060dbfee38aa8e27eb3ce486e56", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -28,6 +28,7 @@ use syntax::visit::Visitor;\n use syntax::util::small_vector::SmallVector;\n use rustc::back::link::output_type_exe;\n use rustc::back::link;\n+use CtxMethods;\n use context::{in_target, StopBefore, Link, Assemble, BuildContext};\n use crate_id::CrateId;\n use package_source::PkgSrc;"}, {"sha": "5085dd64b6759cdd4e7472e399a5669f5f1669da", "filename": "src/librustuv/async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustuv%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustuv%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fasync.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -125,7 +125,7 @@ impl Drop for AsyncWatcher {\n \n #[cfg(test)]\n mod test_remote {\n-    use std::rt::rtio::Callback;\n+    use std::rt::rtio::{Callback, RemoteCallback};\n     use std::rt::thread::Thread;\n \n     use super::AsyncWatcher;"}, {"sha": "675e852ebaef094aed45461d23fbb2ac45f8c3ea", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -54,7 +54,6 @@ use std::rt::task::{BlockedTask, Task};\n use std::str::raw::from_c_str;\n use std::str;\n use std::task;\n-use std::unstable::finally::Finally;\n \n pub use self::async::AsyncWatcher;\n pub use self::file::{FsRequest, FileWatcher};"}, {"sha": "ee78585fcfd71a7aa3158a2dff92f343afc9898e", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -17,6 +17,7 @@ use std::ptr;\n use std::rt::rtio;\n use std::rt::task::BlockedTask;\n use std::str;\n+use std::unstable::finally::Finally;\n use std::vec;\n \n use homing::{HomingIO, HomeHandle};"}, {"sha": "c52ff2d088d13a767a470b043b4ccdffe1b315b6", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -478,10 +478,10 @@ static ASCII_UPPER_MAP: &'static [u8] = &[\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::*;\n     use str::from_char;\n     use char::from_u32;\n-    use option::{Some, None};\n \n     macro_rules! v2ascii (\n         ( [$($e:expr),*]) => ( [$(Ascii{chr:$e}),*]);"}, {"sha": "aedda59bbac1bd9ce5fe03603dc1702f4f11ab03", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -169,6 +169,7 @@ pub mod raw {\n     use at_vec::capacity;\n     use cast;\n     use cast::{transmute, transmute_copy};\n+    use container::Container;\n     use option::None;\n     use ptr;\n     use mem;"}, {"sha": "a20ddc141479f456294c30d1a961c5d7cc5f9207", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -317,10 +317,7 @@ impl Zero for bool {\n \n #[cfg(test)]\n mod tests {\n-    use cmp::{Equal, Greater, Less, Eq, TotalOrd};\n-    use ops::{BitAnd, BitXor, BitOr};\n-    use from_str::{FromStr, from_str};\n-    use option::{Some, None};\n+    use prelude::*;\n     use super::all_values;\n \n     #[test]"}, {"sha": "b924378a0e720ccd369a18932c563a3fa5968b67", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -377,10 +377,10 @@ pub unsafe fn from_c_multistring(buf: *libc::c_char,\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::*;\n     use libc;\n     use ptr;\n-    use option::{Some, None};\n \n     #[test]\n     fn test_str_multistring_parsing() {\n@@ -568,11 +568,10 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    use iter::range;\n+    use extra::test::BenchHarness;\n     use libc;\n-    use option::Some;\n+    use prelude::*;\n     use ptr;\n-    use extra::test::BenchHarness;\n \n     #[inline]\n     fn check(s: &str, c_str: *libc::c_char) {"}, {"sha": "bf37e5fca6a5f3061452edf0f50fdc8a6ab6962f", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -238,7 +238,7 @@ use rt::local::Local;\n use rt::task::{Task, BlockedTask};\n use rt::thread::Thread;\n use sync::atomics::{AtomicInt, AtomicBool, SeqCst, Relaxed};\n-use vec::{ImmutableVector, OwnedVector};\n+use vec::OwnedVector;\n \n use spsc = sync::spsc_queue;\n use mpsc = sync::mpsc_queue;"}, {"sha": "df7111ca5109224a905ac81712d1f6e6549272e5", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -54,6 +54,7 @@ impl<T: DeepClone + Send + 'static> DeepClone for Gc<T> {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::*;\n     use cell::RefCell;\n "}, {"sha": "fa85f286af7ffa0775c1f68205019eb3c3d7c9f3", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -318,9 +318,10 @@ impl<S: Stream> Decorator<S> for BufferedStream<S> {\n \n #[cfg(test)]\n mod test {\n+    use io::Decorator;\n+    use io;\n     use prelude::*;\n     use super::*;\n-    use io;\n     use super::super::mem::{MemReader, MemWriter};\n     use Harness = extra::test::BenchHarness;\n "}, {"sha": "860ff64401870f7036cc256a2b630c8f28880e9c", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -16,6 +16,7 @@\n use iter::Iterator;\n use option::Option;\n use io::Reader;\n+use vec::OwnedVector;\n \n /// An iterator that reads a single byte on each iteration,\n /// until `.read_byte()` returns `None`.\n@@ -130,10 +131,11 @@ pub fn u64_from_be_bytes(data: &[u8],\n \n #[cfg(test)]\n mod test {\n-    use option::{None, Option, Some};\n+    use unstable::finally::Finally;\n+    use io::Decorator;\n+    use prelude::*;\n     use io::mem::{MemReader, MemWriter};\n-    use io::{Reader, io_error, placeholder_error};\n-    use vec::ImmutableVector;\n+    use io::{io_error, placeholder_error};\n \n     struct InitialZeroByteReader {\n         count: int,\n@@ -375,7 +377,7 @@ mod test {\n     fn push_bytes_fail_reset_len() {\n         // push_bytes unsafely sets the vector length. This is testing that\n         // upon failure the length is reset correctly.\n-        let mut reader = ErroringLaterReader {\n+        let reader = ErroringLaterReader {\n             count: 0,\n         };\n         // FIXME (#7049): Figure out some other way to do this."}, {"sha": "fe29a112262283596d6cca7bacc69a9e15f50f57", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -100,8 +100,8 @@ fn lookup(hostname: Option<&str>, servname: Option<&str>, hint: Option<Hint>)\n \n #[cfg(test)]\n mod test {\n-    use option::Some;\n     use io::net::ip::Ipv4Addr;\n+    use prelude::*;\n     use super::*;\n \n     #[test]"}, {"sha": "4fb631eb3d64667e0cfc2bfe9dc20192f9f1011f", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -10,9 +10,11 @@\n \n use container::Container;\n use from_str::FromStr;\n+use iter::Iterator;\n use option::{Option, None, Some};\n+use str::StrSlice;\n use to_str::ToStr;\n-use vec::{MutableCloneableVector, ImmutableVector};\n+use vec::{MutableCloneableVector, ImmutableVector, MutableVector};\n \n pub type Port = u16;\n \n@@ -335,9 +337,8 @@ impl FromStr for SocketAddr {\n \n #[cfg(test)]\n mod test {\n+    use prelude::*;\n     use super::*;\n-    use from_str::FromStr;\n-    use option::{Option, Some, None};\n \n     #[test]\n     fn test_from_str_ipv4() {"}, {"sha": "eaee48dc6e0f345d80253534ad620cf661a63bf9", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -100,8 +100,6 @@ impl Writer for UdpStream {\n mod test {\n     use super::*;\n     use io::net::ip::{SocketAddr};\n-    use io::*;\n-    use prelude::*;\n \n     iotest!(fn bind_error() {\n         let mut called = false;"}, {"sha": "60e63e95dcc606ccc88c269344f3e13892b904bc", "filename": "src/libstd/io/option.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Foption.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -104,8 +104,9 @@ impl<T, A: Acceptor<T>> Acceptor<T> for Option<A> {\n \n #[cfg(test)]\n mod test {\n-    use option::*;\n+    use prelude::*;\n     use super::super::mem::*;\n+    use io::Decorator;\n     use super::super::{PreviousIoError, io_error};\n \n     #[test]"}, {"sha": "6e6cdfb25dee7ff63a52bbb7bbc59619316c5c3b", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -26,6 +26,7 @@ out.write(bytes!(\"Hello, world!\"));\n \n */\n \n+use container::Container;\n use fmt;\n use io::buffered::LineBufferedWriter;\n use io::{Reader, Writer, io_error, IoError, OtherIoError,\n@@ -37,7 +38,9 @@ use result::{Ok, Err};\n use rt::local::Local;\n use rt::rtio::{DontClose, IoFactory, LocalIo, RtioFileStream, RtioTTY};\n use rt::task::Task;\n+use str::StrSlice;\n use util;\n+use vec::ImmutableVector;\n \n // And so begins the tale of acquiring a uv handle to a stdio stream on all\n // platforms in all situations. Our story begins by splitting the world into two"}, {"sha": "86538c37249ed325e63bc7490207f567136e0a3f", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -193,6 +193,7 @@ pub fn copy<R: Reader, W: Writer>(r: &mut R, w: &mut W) {\n \n #[cfg(test)]\n mod test {\n+    use io::Decorator;\n     use io::mem::{MemReader, MemWriter};\n     use super::*;\n     use prelude::*;"}, {"sha": "0e7e4277dd6cd2a2fb836b80a7dae2eb7e7e9bd9", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -445,6 +445,7 @@ mod tests {\n     use int;\n     use i32;\n     use num;\n+    use num::CheckedDiv;\n     use mem;\n \n     #[test]"}, {"sha": "ba51ac3e88d3e91dbb90866858487e2d470224a6", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -21,7 +21,7 @@ use str;\n use vec::{CopyableVector, ImmutableVector, MutableVector};\n use vec::OwnedVector;\n use num::{NumCast, Zero, One, cast, pow_with_uint, Integer};\n-use num::{Round, Float, FPNaN, FPInfinite};\n+use num::{Round, Float, FPNaN, FPInfinite, ToPrimitive};\n \n pub enum ExponentFormat {\n     ExpNone,"}, {"sha": "1a256981d74ee0c8f9e9685379c65a54352ffe44", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -324,6 +324,7 @@ mod tests {\n     use super::*;\n \n     use num;\n+    use num::CheckedDiv;\n     use mem;\n     use u16;\n "}, {"sha": "f49244a3607ef8ffdb025d39c040b2419c773159", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -457,6 +457,7 @@ pub fn collect<T, Iter: Iterator<Option<T>>, V: FromIterator<T>>(iter: Iter) ->\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use prelude::*;\n \n     use iter::range;\n     use str::StrSlice;"}, {"sha": "4042e13a592d3f67667bd18f20a577165b81c968", "filename": "src/libstd/os.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -81,13 +81,15 @@ pub fn getcwd() -> Path {\n \n #[cfg(windows)]\n pub mod win32 {\n+    use libc::types::os::arch::extra::DWORD;\n     use libc;\n-    use vec;\n-    use str;\n     use option::{None, Option};\n     use option;\n     use os::TMPBUF_SZ;\n-    use libc::types::os::arch::extra::DWORD;\n+    use str::StrSlice;\n+    use str;\n+    use vec::{MutableVector, ImmutableVector, OwnedVector};\n+    use vec;\n \n     pub fn fill_utf16_buf_and_decode(f: |*mut u16, DWORD| -> DWORD)\n         -> Option<~str> {\n@@ -1237,16 +1239,14 @@ pub mod consts {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use c_str::ToCStr;\n-    use option::Some;\n     use option;\n     use os::{env, getcwd, getenv, make_absolute, args};\n     use os::{setenv, unsetenv};\n     use os;\n-    use path::Path;\n     use rand::Rng;\n     use rand;\n-    use str::StrSlice;\n \n \n     #[test]"}, {"sha": "354cc10f022a67adddb4adcebf0c9ce4577b8482", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -687,6 +687,7 @@ fn from_utf8_with_replacement(mut v: &[u8]) -> ~str {\n }\n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::{GenericPath, PosixPath, WindowsPath};\n     use c_str::ToCStr;\n "}, {"sha": "7b94de6c094d6d6a681ff0a9305adc4f07ae8e6b", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -21,7 +21,8 @@ use str;\n use str::Str;\n use to_bytes::IterBytes;\n use vec;\n-use vec::{CopyableVector, RSplitIterator, SplitIterator, Vector, VectorVector};\n+use vec::{CopyableVector, RSplitIterator, SplitIterator, Vector, VectorVector,\n+          ImmutableEqVector, OwnedVector, ImmutableVector, OwnedCopyableVector};\n use super::{BytesContainer, GenericPath, GenericPathUnsafe};\n \n /// Iterator that yields successive components of a Path as &[u8]\n@@ -441,11 +442,9 @@ static dot_dot_static: &'static [u8] = bytes!(\"..\");\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::*;\n-    use option::{Option, Some, None};\n-    use iter::Iterator;\n     use str;\n-    use vec::Vector;\n \n     macro_rules! t(\n         (s: $path:expr, $exp:expr) => (\n@@ -1324,6 +1323,7 @@ mod tests {\n mod bench {\n     use extra::test::BenchHarness;\n     use super::*;\n+    use prelude::*;\n \n     #[bench]\n     fn join_home_dir(bh: &mut BenchHarness) {"}, {"sha": "09b00be7e9d61dfd52c6a220f0d7b7f49534ac9e", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -13,14 +13,16 @@\n use ascii::AsciiCast;\n use c_str::{CString, ToCStr};\n use cast;\n+use clone::Clone;\n+use container::Container;\n use cmp::Eq;\n use from_str::FromStr;\n use iter::{AdditiveIterator, DoubleEndedIterator, Extendable, Invert, Iterator, Map};\n use option::{Option, Some, None};\n use str;\n-use str::{CharSplitIterator, OwnedStr, Str, StrVector};\n+use str::{CharSplitIterator, OwnedStr, Str, StrVector, StrSlice};\n use to_bytes::IterBytes;\n-use vec::Vector;\n+use vec::{Vector, OwnedVector, ImmutableVector};\n use super::{contains_nul, BytesContainer, GenericPath, GenericPathUnsafe};\n \n /// Iterator that yields successive components of a Path as &str\n@@ -1051,11 +1053,9 @@ fn prefix_len(p: Option<PathPrefix>) -> uint {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::*;\n     use super::parse_prefix;\n-    use option::{Some,None};\n-    use iter::Iterator;\n-    use vec::Vector;\n \n     macro_rules! t(\n         (s: $path:expr, $exp:expr) => ("}, {"sha": "336528eeb258bbcebd57dabe830ac5673f677e9d", "filename": "src/libstd/rand/distributions/exponential.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -10,6 +10,7 @@\n \n //! The exponential distribution.\n \n+use num::Exponential;\n use rand::{Rng, Rand};\n use rand::distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n \n@@ -90,10 +91,10 @@ impl IndependentSample<f64> for Exp {\n \n #[cfg(test)]\n mod test {\n+    use rand::distributions::*;\n+    use prelude::*;\n     use rand::*;\n     use super::*;\n-    use iter::range;\n-    use option::{Some, None};\n \n     #[test]\n     fn test_exp() {\n@@ -119,11 +120,11 @@ mod test {\n #[cfg(test)]\n mod bench {\n     use extra::test::BenchHarness;\n+    use mem::size_of;\n+    use prelude::*;\n     use rand::{XorShiftRng, RAND_BENCH_N};\n     use super::*;\n-    use iter::range;\n-    use option::{Some, None};\n-    use mem::size_of;\n+    use rand::distributions::*;\n \n     #[bench]\n     fn rand_exp(bh: &mut BenchHarness) {"}, {"sha": "96efa948015ba35e608b370c2f11b8caccbeea52", "filename": "src/libstd/rand/distributions/gamma.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -10,10 +10,11 @@\n \n //! The Gamma and derived distributions.\n \n+use num::Algebraic;\n+use num;\n use rand::{Rng, Open01};\n-use super::{IndependentSample, Sample, Exp};\n use super::normal::StandardNormal;\n-use num;\n+use super::{IndependentSample, Sample, Exp};\n \n /// The Gamma distribution `Gamma(shape, scale)` distribution.\n ///\n@@ -309,10 +310,10 @@ impl IndependentSample<f64> for StudentT {\n \n #[cfg(test)]\n mod test {\n+    use rand::distributions::*;\n+    use prelude::*;\n     use rand::*;\n     use super::*;\n-    use iter::range;\n-    use option::{Some, None};\n \n     #[test]\n     fn test_chi_squared_one() {\n@@ -370,13 +371,12 @@ mod test {\n \n #[cfg(test)]\n mod bench {\n-    use super::*;\n+    use extra::test::BenchHarness;\n     use mem::size_of;\n+    use prelude::*;\n     use rand::distributions::IndependentSample;\n     use rand::{StdRng, RAND_BENCH_N};\n-    use extra::test::BenchHarness;\n-    use iter::range;\n-    use option::{Some, None};\n+    use super::*;\n \n \n     #[bench]"}, {"sha": "a996233abe3dc7ee1eae44d32af85c0f035e745c", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -20,11 +20,14 @@ that do not need to record state.\n \n */\n \n-use iter::range;\n+use container::Container;\n+use iter::{range, Iterator};\n use option::{Some, None};\n use num;\n+use num::CheckedAdd;\n use rand::{Rng, Rand};\n use clone::Clone;\n+use vec::MutableVector;\n \n pub use self::range::Range;\n pub use self::gamma::{Gamma, ChiSquared, FisherF, StudentT};\n@@ -250,9 +253,9 @@ fn ziggurat<R:Rng>(\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use rand::*;\n     use super::*;\n-    use option::{Some, None};\n \n     #[deriving(Eq)]\n     struct ConstRand(uint);"}, {"sha": "7a15091df9d7d3595a5ac584f9c3afc9159ba572", "filename": "src/libstd/rand/distributions/normal.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -10,6 +10,7 @@\n \n //! The normal and derived distributions.\n \n+use num::Exponential;\n use rand::{Rng, Rand, Open01};\n use rand::distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n \n@@ -147,10 +148,10 @@ impl IndependentSample<f64> for LogNormal {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use rand::*;\n     use super::*;\n-    use iter::range;\n-    use option::{Some, None};\n+    use rand::distributions::*;\n \n     #[test]\n     fn test_normal() {\n@@ -187,11 +188,11 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     use extra::test::BenchHarness;\n+    use mem::size_of;\n+    use prelude::*;\n     use rand::{XorShiftRng, RAND_BENCH_N};\n+    use rand::distributions::*;\n     use super::*;\n-    use iter::range;\n-    use option::{Some, None};\n-    use mem::size_of;\n \n     #[bench]\n     fn rand_normal(bh: &mut BenchHarness) {"}, {"sha": "8141b3d3e896f6d400791ac4191d332921c4c0c3", "filename": "src/libstd/rand/distributions/range.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Frange.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -163,12 +163,11 @@ float_impl! { f64 }\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::*;\n     use rand::*;\n+    use rand::distributions::*;\n     use num::Bounded;\n-    use iter::range;\n-    use option::{Some, None};\n-    use vec::ImmutableVector;\n \n     #[should_fail]\n     #[test]"}, {"sha": "6fd2cde9dfbc6ae77f738bd9490a9e28517e85b8", "filename": "src/libstd/rand/isaac.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fisaac.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -12,8 +12,9 @@\n \n use rand::{Rng, SeedableRng, OSRng};\n use iter::{Iterator, range, range_step, Repeat};\n+use num::Times;\n use option::{None, Some};\n-use vec::raw;\n+use vec::{raw, MutableVector, ImmutableVector};\n use mem;\n \n static RAND_SIZE_LEN: u32 = 8;\n@@ -432,8 +433,7 @@ impl<'a> SeedableRng<&'a [u64]> for Isaac64Rng {\n mod test {\n     use super::*;\n     use rand::{Rng, SeedableRng, OSRng};\n-    use option::Some;\n-    use iter::range;\n+    use prelude::*;\n     use vec;\n \n     #[test]"}, {"sha": "e52a38500112f19faad192ac2b78420a5fc33ca5", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -656,8 +656,7 @@ pub struct Closed01<F>(F);\n \n #[cfg(test)]\n mod test {\n-    use iter::{Iterator, range};\n-    use option::{Option, Some};\n+    use prelude::*;\n     use vec;\n     use super::*;\n \n@@ -845,11 +844,10 @@ static RAND_BENCH_N: u64 = 100;\n \n #[cfg(test)]\n mod bench {\n+    use prelude::*;\n     use extra::test::BenchHarness;\n     use rand::{XorShiftRng, StdRng, IsaacRng, Isaac64Rng, Rng, RAND_BENCH_N};\n     use mem::size_of;\n-    use iter::range;\n-    use option::{Some, None};\n \n     #[bench]\n     fn rand_xorshift(bh: &mut BenchHarness) {"}, {"sha": "a8fd75c1beeedf1d60142b57b0e461c8dda34947", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -106,6 +106,9 @@ impl Rng for OSRng {\n         unsafe { cast::transmute(v) }\n     }\n     fn fill_bytes(&mut self, v: &mut [u8]) {\n+        use container::Container;\n+        use vec::MutableVector;\n+\n         extern {\n             fn rust_win32_rand_gen(hProv: HCRYPTPROV, dwLen: DWORD,\n                                    pbBuffer: *mut BYTE);"}, {"sha": "1c90ef148fc08c17b918ab7f7f5f157fd4423d7c", "filename": "src/libstd/rand/rand_impls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Frand_impls.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -226,9 +226,8 @@ impl<T: Rand + 'static> Rand for @T {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use rand::{Rng, task_rng, Open01, Closed01};\n-    use iter::range;\n-    use option::{None, Some};\n \n     struct ConstantRng(u64);\n     impl Rng for ConstantRng {"}, {"sha": "7af98e418a811f2827b33d569c0cc4c8f6a2c460", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -10,6 +10,7 @@\n \n //! A wrapper around any Reader to treat it as an RNG.\n \n+use container::Container;\n use option::{Some, None};\n use io::Reader;\n \n@@ -77,6 +78,8 @@ mod test {\n     use super::*;\n     use io::mem::MemReader;\n     use cast;\n+    use rand::*;\n+    use prelude::*;\n \n     #[test]\n     fn test_reader_rng_u64() {"}, {"sha": "c0a7d14bf70bfa23c07dbdd4174a1306afb57068", "filename": "src/libstd/rand/reseeding.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freseeding.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -11,8 +11,9 @@\n //! A wrapper around another RNG that reseeds it after it\n //! generates a certain number of random bytes.\n \n-use rand::{Rng, SeedableRng};\n+use container::Container;\n use default::Default;\n+use rand::{Rng, SeedableRng};\n \n /// How many bytes of entropy the underling RNG is allowed to generate\n /// before it is reseeded.\n@@ -141,11 +142,9 @@ impl Default for ReseedWithDefault {\n \n #[cfg(test)]\n mod test {\n+    use prelude::*;\n     use super::*;\n     use rand::{SeedableRng, Rng};\n-    use default::Default;\n-    use iter::range;\n-    use option::{None, Some};\n \n     struct Counter {\n         i: u32"}, {"sha": "ad2305c241017c21d2ea82f5fb1444c2f74a6c4b", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -170,6 +170,7 @@ impl<T> Drop for Rc<T> {\n \n #[cfg(test)]\n mod test_rc {\n+    use prelude::*;\n     use super::*;\n     use cell::RefCell;\n "}, {"sha": "1a4e6d5bcfde95f4ea3b0b5d214d4f65119dfba2", "filename": "src/libstd/result.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -293,10 +293,9 @@ pub fn fold_<T,E,Iter:Iterator<Result<T,E>>>(iterator: Iter) -> Result<(),E> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use prelude::*;\n \n     use iter::range;\n-    use to_str::ToStr;\n-    use vec::ImmutableVector;\n \n     pub fn op1() -> Result<int, ~str> { Ok(666) }\n     pub fn op2() -> Result<int, ~str> { Err(~\"sadface\") }"}, {"sha": "526ad60bb2134a02177f5b26f2cf5d380ff000d6", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -64,8 +64,10 @@ pub unsafe fn init(argc: int, argv: **u8) { realargs::init(argc, argv) }\n #[cfg(target_os = \"freebsd\")]\n mod imp {\n     use cast;\n+    use clone::Clone;\n     #[cfg(not(test))] use libc;\n     use option::{Option, Some, None};\n+    use ptr::RawPtr;\n     use iter::Iterator;\n     #[cfg(not(test))] use str;\n     use unstable::finally::Finally;\n@@ -138,7 +140,7 @@ mod imp {\n \n     #[cfg(test)]\n     mod tests {\n-        use option::{Some, None};\n+        use prelude::*;\n         use super::*;\n         use unstable::finally::Finally;\n "}, {"sha": "7dcbae995ed7b2be3a278e3d8ed8b13fefde5b4d", "filename": "src/libstd/rt/borrowck.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fborrowck.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n use c_str::{ToCStr, CString};\n+use container::Container;\n+use iter::Iterator;\n use libc::{c_char, size_t};\n use option::{Option, None, Some};\n use ptr::RawPtr;\n@@ -19,7 +21,7 @@ use str::OwnedStr;\n use str;\n use uint;\n use unstable::raw;\n-use vec::ImmutableVector;\n+use vec::{ImmutableVector, OwnedVector};\n \n pub static FROZEN_BIT: uint = 1 << (uint::bits - 1);\n pub static MUT_BIT: uint = 1 << (uint::bits - 2);"}, {"sha": "16c1ad25448fc315897c680846a780631809442b", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -10,7 +10,9 @@\n \n use container::MutableSet;\n use hashmap::HashSet;\n+use iter::Iterator;\n use option::{Some, None, Option};\n+use ptr::RawPtr;\n use vec::ImmutableVector;\n use rt::rtio::EventLoop;\n "}, {"sha": "7a417990a4c1ac5dce234334bf552d819758f777", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use libc::{c_void, c_char, size_t, uintptr_t, free, malloc, realloc};\n+use ptr::RawPtr;\n use unstable::intrinsics::TyDesc;\n use unstable::raw;\n use mem::size_of;"}, {"sha": "1be942b2db19a9058a9d69cf2b5dd78ba14b4411", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -11,18 +11,21 @@\n //! The local, garbage collected heap\n \n use cast;\n+use iter::Iterator;\n use libc::{c_void, uintptr_t};\n use libc;\n use mem;\n use ops::Drop;\n use option::{Option, None, Some};\n use ptr;\n+use ptr::RawPtr;\n use rt::env;\n use rt::global_heap;\n use rt::local::Local;\n use rt::task::Task;\n use unstable::intrinsics::TyDesc;\n use unstable::raw;\n+use vec::ImmutableVector;\n \n // This has no meaning with out rtdebug also turned on.\n #[cfg(rtdebug)]"}, {"sha": "f4efd8e27d02e57a79047578f83230aed00c8a14", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -19,6 +19,7 @@\n \n use cast;\n use ops::Drop;\n+use ptr::RawPtr;\n \n #[cfg(windows)]               // mingw-w32 doesn't like thread_local things\n #[cfg(target_os = \"android\")] // see #10686\n@@ -79,6 +80,7 @@ pub unsafe fn borrow<T>() -> Borrowed<T> {\n pub mod compiled {\n     use cast;\n     use option::{Option, Some, None};\n+    use ptr::RawPtr;\n     #[cfg(not(test))] use libc::c_void;\n \n     #[cfg(test)]\n@@ -177,6 +179,7 @@ pub mod native {\n     use libc::c_void;\n     use option::{Option, Some, None};\n     use ptr;\n+    use ptr::RawPtr;\n     use tls = rt::thread_local_storage;\n \n     static mut RT_TLS_KEY: tls::Key = -1;"}, {"sha": "b86a9612d7061dd9e54e109f46127e96679ac37b", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use container::Container;\n use from_str::from_str;\n+use iter::Iterator;\n use libc::exit;\n use option::{Some, None, Option};\n use rt::crate_map::{ModEntry, CrateMap, iter_crate_map, get_crate_map};\n use str::StrSlice;\n-use vec::{ImmutableVector, MutableTotalOrdVector};\n+use vec::{ImmutableVector, MutableTotalOrdVector, OwnedVector};\n #[cfg(test)] use cast::transmute;\n \n struct LogDirective {"}, {"sha": "d839ef62af962528d1ae532160a0f43a10fbfc70", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -58,14 +58,9 @@ Several modules in `core` are clients of `rt`:\n #[allow(missing_doc)];\n \n use any::Any;\n-use clone::Clone;\n-use container::Container;\n-use iter::Iterator;\n use option::Option;\n-use ptr::RawPtr;\n use result::Result;\n use task::TaskOpts;\n-use vec::{OwnedVector, MutableVector, ImmutableVector};\n \n use self::task::{Task, BlockedTask};\n "}, {"sha": "6c94f23778931d358593752f85b6df7e13815f59", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -17,6 +17,7 @@ use any::AnyOwnExt;\n use borrow;\n use cast;\n use cleanup;\n+use clone::Clone;\n use io::Writer;\n use iter::{Iterator, Take};\n use local_data;"}, {"sha": "3a07e8c373b754a035f3a136c215c0d5de34b44d", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -62,6 +62,7 @@ use kinds::Send;\n use libc::{c_void, c_char, size_t};\n use option::{Some, None, Option};\n use prelude::drop;\n+use ptr::RawPtr;\n use result::{Err, Ok};\n use rt::local::Local;\n use rt::task::Task;\n@@ -76,6 +77,7 @@ mod libunwind {\n     //! Unwind library interface\n \n     #[allow(non_camel_case_types)];\n+    #[allow(dead_code)] // these are just bindings\n \n     use libc::{uintptr_t, uint64_t};\n \n@@ -261,7 +263,8 @@ fn rust_exception_class() -> uw::_Unwind_Exception_Class {\n //   This is achieved by overriding the return value in search phase to always\n //   say \"catch!\".\n \n-#[cfg(not(target_arch = \"arm\"))]\n+#[cfg(not(target_arch = \"arm\"), not(test))]\n+#[doc(hidden)]\n pub mod eabi {\n     use uw = super::libunwind;\n     use libc::c_int;\n@@ -277,8 +280,6 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // so we can reference it by name from middle/trans/base.rs\n-    #[doc(hidden)]\n-    #[cfg(not(test))]\n     pub extern \"C\" fn rust_eh_personality(\n         version: c_int,\n         actions: uw::_Unwind_Action,\n@@ -294,8 +295,6 @@ pub mod eabi {\n     }\n \n     #[no_mangle] // referenced from rust_try.ll\n-    #[doc(hidden)]\n-    #[cfg(not(test))]\n     pub extern \"C\" fn rust_eh_personality_catch(\n         version: c_int,\n         actions: uw::_Unwind_Action,\n@@ -318,7 +317,7 @@ pub mod eabi {\n \n // ARM EHABI uses a slightly different personality routine signature,\n // but otherwise works the same.\n-#[cfg(target_arch = \"arm\")]\n+#[cfg(target_arch = \"arm\", not(test))]\n pub mod eabi {\n     use uw = super::libunwind;\n     use libc::c_int;\n@@ -332,8 +331,6 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // so we can reference it by name from middle/trans/base.rs\n-    #[doc(hidden)]\n-    #[cfg(not(test))]\n     pub extern \"C\" fn rust_eh_personality(\n         state: uw::_Unwind_State,\n         ue_header: *uw::_Unwind_Exception,\n@@ -346,8 +343,6 @@ pub mod eabi {\n     }\n \n     #[no_mangle] // referenced from rust_try.ll\n-    #[doc(hidden)]\n-    #[cfg(not(test))]\n     pub extern \"C\" fn rust_eh_personality_catch(\n         state: uw::_Unwind_State,\n         ue_header: *uw::_Unwind_Exception,"}, {"sha": "ee336d7d847d5393b10ffaded77b3a1d4dd0896f", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -11,11 +11,13 @@\n use container::Container;\n use fmt;\n use from_str::FromStr;\n+use iter::Iterator;\n use libc;\n use option::{Some, None, Option};\n use os;\n use str::StrSlice;\n use unstable::running_on_valgrind;\n+use vec::ImmutableVector;\n \n // Indicates whether we should perform expensive sanity checks, including rtassert!\n // XXX: Once the runtime matures remove the `true` below to turn off rtassert, etc."}, {"sha": "3595a7d45aca2e8f858088be8473ef8a5ce1ec73", "filename": "src/libstd/run.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -330,16 +330,15 @@ pub fn process_output(prog: &str, args: &[~str]) -> Option<ProcessOutput> {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use libc::c_int;\n-    use option::{Option, None, Some};\n     use os;\n-    use path::Path;\n     use run;\n     use str;\n     use task::spawn;\n     use unstable::running_on_valgrind;\n     use io::pipe::PipeStream;\n-    use io::{Writer, Reader, io_error, FileNotFound};\n+    use io::{io_error, FileNotFound};\n \n     #[test]\n     #[cfg(not(target_os=\"android\"))] // FIXME(#10380)"}, {"sha": "c8143442d6e37c735cafa8b27740893fd528d4ad", "filename": "src/libstd/send_str.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fsend_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fsend_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsend_str.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -176,14 +176,8 @@ impl IterBytes for SendStr {\n \n #[cfg(test)]\n mod tests {\n-    use clone::{Clone, DeepClone};\n-    use cmp::{TotalEq, Ord, TotalOrd, Equiv};\n-    use cmp::Equal;\n-    use container::Container;\n-    use default::Default;\n+    use prelude::*;\n     use send_str::{SendStrOwned, SendStrStatic};\n-    use str::Str;\n-    use to_str::ToStr;\n \n     #[test]\n     fn test_send_str_traits() {"}, {"sha": "35e188964c101c05cb98532dfc109366866e6c2c", "filename": "src/libstd/str.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -977,11 +977,13 @@ static TAG_CONT_U8: u8 = 128u8;\n /// Unsafe operations\n pub mod raw {\n     use cast;\n+    use container::Container;\n     use libc;\n     use ptr;\n-    use str::{is_utf8, OwnedStr};\n+    use ptr::RawPtr;\n+    use str::{is_utf8, OwnedStr, StrSlice};\n     use vec;\n-    use vec::MutableVector;\n+    use vec::{MutableVector, ImmutableVector, OwnedVector};\n     use unstable::raw::Slice;\n \n     /// Create a Rust string from a *u8 buffer of the given length\n@@ -1137,10 +1139,12 @@ Section: Trait implementations\n #[cfg(not(test))]\n #[allow(missing_doc)]\n pub mod traits {\n-    use ops::Add;\n+    use container::Container;\n     use cmp::{TotalOrd, Ordering, Less, Equal, Greater, Eq, Ord, Equiv, TotalEq};\n-    use super::{Str, eq_slice};\n+    use iter::Iterator;\n+    use ops::Add;\n     use option::{Some, None};\n+    use str::{Str, StrSlice, OwnedStr, eq_slice};\n \n     impl<'a> Add<&'a str,~str> for &'a str {\n         #[inline]\n@@ -2764,14 +2768,11 @@ impl Default for @str {\n \n #[cfg(test)]\n mod tests {\n-    use container::Container;\n-    use option::{None, Some, Option};\n+    use iter::AdditiveIterator;\n+    use prelude::*;\n     use ptr;\n     use str::*;\n-    use vec::{Vector, ImmutableVector, CopyableVector};\n-    use cmp::{TotalOrd, Less, Equal, Greater};\n     use send_str::{SendStrOwned, SendStrStatic};\n-    use from_str::from_str;\n \n     #[test]\n     fn test_eq() {"}, {"sha": "24568fe13e552548cbbea823da3effbac24e0947", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -199,11 +199,12 @@ pub mod dl {\n \n #[cfg(target_os = \"win32\")]\n pub mod dl {\n-    use os;\n     use libc;\n+    use os;\n+    use path::GenericPath;\n     use path;\n     use ptr;\n-    use result::*;\n+    use result::{Ok, Err, Result};\n \n     pub unsafe fn open_external(filename: &path::Path) -> *libc::c_void {\n         os::win32::as_utf16_p(filename.as_str().unwrap(), |raw_name| {"}, {"sha": "4d12435e01a909dfe04d7292a80379d1cbacf8d8", "filename": "src/libstd/unstable/mutex.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Funstable%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Funstable%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmutex.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -167,6 +167,7 @@ mod imp {\n     use libc::c_void;\n     use libc;\n     use ptr;\n+    use ptr::RawPtr;\n \n     type pthread_mutex_t = libc::c_void;\n     type pthread_mutexattr_t = libc::c_void;\n@@ -248,6 +249,8 @@ mod imp {\n     use libc;\n     use libc::{HANDLE, BOOL, LPSECURITY_ATTRIBUTES, c_void, DWORD, LPCSTR};\n     use ptr;\n+    use ptr::RawPtr;\n+\n     type LPCRITICAL_SECTION = *c_void;\n     static SPIN_COUNT: DWORD = 4000;\n "}, {"sha": "66a9d18aaec801f7315a9afbb96a1215ed651700", "filename": "src/libstd/unstable/stack.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Funstable%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Funstable%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fstack.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -36,9 +36,10 @@ static RED_ZONE: uint = 20 * 1024;\n                   //   irrelevant for documentation purposes.\n #[cfg(not(test))] // in testing, use the original libstd's version\n pub extern \"C\" fn rust_stack_exhausted() {\n-    use rt::task::Task;\n     use option::None;\n     use rt::local::Local;\n+    use rt::task::Task;\n+    use str::Str;\n     use unstable::intrinsics;\n \n     unsafe {"}, {"sha": "06c7923bfeda15c36d90668ed5a2e315a36be98c", "filename": "src/libstd/util.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -78,10 +78,7 @@ impl Void {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-\n-    use clone::Clone;\n-    use ops::Drop;\n-    use option::{None, Some};\n+    use prelude::*;\n     use mem::size_of;\n \n     #[test]"}, {"sha": "9964c6842abb1bb6d5800ddcb846f86697b75e3c", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -611,6 +611,7 @@ impl<'a, T> RandomAccessIterator<&'a [T]> for ChunkIter<'a, T> {\n pub mod traits {\n     use super::*;\n \n+    use container::Container;\n     use clone::Clone;\n     use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Equiv};\n     use iter::order;\n@@ -2520,7 +2521,7 @@ pub unsafe fn from_buf<T>(ptr: *T, elts: uint) -> ~[T] {\n pub mod raw {\n     use cast;\n     use ptr;\n-    use vec::{with_capacity, MutableVector};\n+    use vec::{with_capacity, MutableVector, OwnedVector};\n     use unstable::raw::Slice;\n \n     /**\n@@ -2599,8 +2600,9 @@ pub mod raw {\n /// Operations on `[u8]`.\n pub mod bytes {\n     use container::Container;\n-    use vec::MutableVector;\n+    use vec::{MutableVector, OwnedVector, ImmutableVector};\n     use ptr;\n+    use ptr::RawPtr;\n \n     /// A trait for operations on mutable `[u8]`s.\n     pub trait MutableByteVector {\n@@ -2968,10 +2970,10 @@ impl<A> Extendable<A> for ~[A] {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use mem;\n     use vec::*;\n     use cmp::*;\n-    use prelude::*;\n     use rand::{Rng, task_rng};\n \n     fn square(n: uint) -> uint { n * n }\n@@ -4452,13 +4454,11 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     use extra::test::BenchHarness;\n-    use iter::range;\n-    use vec;\n-    use vec::{VectorVector, MutableTotalOrdVector};\n-    use option::*;\n+    use mem;\n+    use prelude::*;\n     use ptr;\n     use rand::{weak_rng, Rng};\n-    use mem;\n+    use vec;\n \n     #[bench]\n     fn iterator(bh: &mut BenchHarness) {"}, {"sha": "1529fbae7e1f2f483eae6ad1e50cc625e249e3f5", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -21,7 +21,6 @@ library.\n use ast::{enum_def, Ident, item, Generics, struct_def};\n use ast::{MetaItem, MetaList, MetaNameValue, MetaWord};\n use ext::base::ExtCtxt;\n-use ext::build::AstBuilder;\n use codemap::Span;\n \n pub mod clone;"}, {"sha": "fb98f766fef00afa6aa8c411f04115d533ba7642", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -1109,6 +1109,7 @@ mod test {\n     use codemap;\n     use codemap::Spanned;\n     use fold;\n+    use fold::*;\n     use parse;\n     use parse::token::{fresh_mark, gensym, intern, ident_to_str};\n     use parse::token;"}, {"sha": "a5e374a7a8b19603c42b0476075eda7b9144bb00", "filename": "src/test/compile-fail/issue-10465.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/430652c970db41f718936bb649516c401b02964b/src%2Ftest%2Fcompile-fail%2Fissue-10465.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430652c970db41f718936bb649516c401b02964b/src%2Ftest%2Fcompile-fail%2Fissue-10465.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10465.rs?ref=430652c970db41f718936bb649516c401b02964b", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod a {\n+    pub trait A {\n+        fn foo(&self);\n+    }\n+\n+}\n+pub mod b {\n+    use a::A;\n+\n+    pub struct B;\n+    impl A for B { fn foo(&self) {} }\n+\n+    pub mod c {\n+        use b::B;\n+\n+        fn foo(b: &B) {\n+            b.foo(); //~ ERROR: does not implement any method in scope named\n+        }\n+    }\n+\n+}\n+\n+fn main() {}"}]}