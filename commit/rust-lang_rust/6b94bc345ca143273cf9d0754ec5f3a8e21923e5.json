{"sha": "6b94bc345ca143273cf9d0754ec5f3a8e21923e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiOTRiYzM0NWNhMTQzMjczY2Y5ZDA3NTRlYzVmM2E4ZTIxOTIzZTU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-15T02:22:59Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-04T20:48:49Z"}, "message": "Add an arena for import directives", "tree": {"sha": "ce0ce1f1c202b4127a8bd6c80bcbcac0b81b0fec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce0ce1f1c202b4127a8bd6c80bcbcac0b81b0fec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b94bc345ca143273cf9d0754ec5f3a8e21923e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b94bc345ca143273cf9d0754ec5f3a8e21923e5", "html_url": "https://github.com/rust-lang/rust/commit/6b94bc345ca143273cf9d0754ec5f3a8e21923e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b94bc345ca143273cf9d0754ec5f3a8e21923e5/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "064f17c6a39af65982aa4bc33eb12ac531b4b32a", "url": "https://api.github.com/repos/rust-lang/rust/commits/064f17c6a39af65982aa4bc33eb12ac531b4b32a", "html_url": "https://github.com/rust-lang/rust/commit/064f17c6a39af65982aa4bc33eb12ac531b4b32a"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "dff6926d2d34a4bde6e20b7c975f36fad039559e", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b94bc345ca143273cf9d0754ec5f3a8e21923e5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b94bc345ca143273cf9d0754ec5f3a8e21923e5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=6b94bc345ca143273cf9d0754ec5f3a8e21923e5", "patch": "@@ -707,9 +707,10 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             }\n         }\n \n-        module_.unresolved_imports\n-               .borrow_mut()\n-               .push(ImportDirective::new(module_path, subclass, span, id, is_public, shadowable));\n+        let directive =\n+            ImportDirective::new(module_path, subclass, span, id, is_public, shadowable);\n+        let directive = self.resolver.arenas.alloc_import_directive(directive);\n+        module_.unresolved_imports.borrow_mut().push(directive);\n         self.unresolved_imports += 1;\n     }\n }"}, {"sha": "50e6e5c398c146633862def789f93363c05c63c4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b94bc345ca143273cf9d0754ec5f3a8e21923e5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b94bc345ca143273cf9d0754ec5f3a8e21923e5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6b94bc345ca143273cf9d0754ec5f3a8e21923e5", "patch": "@@ -812,7 +812,7 @@ pub struct ModuleS<'a> {\n     extern_crate_id: Option<NodeId>,\n \n     resolutions: RefCell<HashMap<(Name, Namespace), NameResolution<'a>>>,\n-    unresolved_imports: RefCell<Vec<ImportDirective>>,\n+    unresolved_imports: RefCell<Vec<&'a ImportDirective>>,\n \n     // The module children of this node, including normal modules and anonymous modules.\n     // Anonymous children are pseudo-modules that are implicitly created around items\n@@ -1167,6 +1167,13 @@ pub struct Resolver<'a, 'tcx: 'a> {\n pub struct ResolverArenas<'a> {\n     modules: arena::TypedArena<ModuleS<'a>>,\n     name_bindings: arena::TypedArena<NameBinding<'a>>,\n+    import_directives: arena::TypedArena<ImportDirective>,\n+}\n+\n+impl<'a> ResolverArenas<'a> {\n+    fn alloc_import_directive(&'a self, import_directive: ImportDirective) -> &'a ImportDirective {\n+        self.import_directives.alloc(import_directive)\n+    }\n }\n \n #[derive(PartialEq)]\n@@ -1234,6 +1241,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         ResolverArenas {\n             modules: arena::TypedArena::new(),\n             name_bindings: arena::TypedArena::new(),\n+            import_directives: arena::TypedArena::new(),\n         }\n     }\n "}, {"sha": "d68ceb81e2a79ac859df71a98385d40806a29859", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b94bc345ca143273cf9d0754ec5f3a8e21923e5/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b94bc345ca143273cf9d0754ec5f3a8e21923e5/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=6b94bc345ca143273cf9d0754ec5f3a8e21923e5", "patch": "@@ -172,7 +172,7 @@ impl<'a> NameResolution<'a> {\n struct ImportResolvingError<'a> {\n     /// Module where the error happened\n     source_module: Module<'a>,\n-    import_directive: ImportDirective,\n+    import_directive: &'a ImportDirective,\n     span: Span,\n     help: String,\n }\n@@ -249,7 +249,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         }\n \n         let path = import_path_to_string(&e.import_directive.module_path,\n-                                         e.import_directive.subclass);\n+                                         &e.import_directive.subclass);\n \n         resolve_error(self.resolver,\n                       e.span,\n@@ -608,7 +608,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     }\n }\n \n-fn import_path_to_string(names: &[Name], subclass: ImportDirectiveSubclass) -> String {\n+fn import_path_to_string(names: &[Name], subclass: &ImportDirectiveSubclass) -> String {\n     if names.is_empty() {\n         import_directive_subclass_to_string(subclass)\n     } else {\n@@ -619,8 +619,8 @@ fn import_path_to_string(names: &[Name], subclass: ImportDirectiveSubclass) -> S\n     }\n }\n \n-fn import_directive_subclass_to_string(subclass: ImportDirectiveSubclass) -> String {\n-    match subclass {\n+fn import_directive_subclass_to_string(subclass: &ImportDirectiveSubclass) -> String {\n+    match *subclass {\n         SingleImport { source, .. } => source.to_string(),\n         GlobImport => \"*\".to_string(),\n     }"}]}