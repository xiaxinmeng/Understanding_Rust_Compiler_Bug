{"sha": "ac60ca0643feb3452688a9ca97c839c155742915", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNjBjYTA2NDNmZWIzNDUyNjg4YTljYTk3YzgzOWMxNTU3NDI5MTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-17T09:14:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-17T09:14:37Z"}, "message": "Auto merge of #63655 - Centril:rollup-ty1ot40, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #62737 (Override Cycle::try_fold)\n - #63505 (Hash the remapped sysroot instead of the original.)\n - #63559 (rustc_codegen_utils: account for 1-indexed anonymous lifetimes in v0 mangling.)\n - #63621 (Modify librustc_llvm to pass -DNDEBUG while compiling.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "dfcd4fc58e4f37e2ca05d7f8a877787fc574a8f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfcd4fc58e4f37e2ca05d7f8a877787fc574a8f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac60ca0643feb3452688a9ca97c839c155742915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac60ca0643feb3452688a9ca97c839c155742915", "html_url": "https://github.com/rust-lang/rust/commit/ac60ca0643feb3452688a9ca97c839c155742915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac60ca0643feb3452688a9ca97c839c155742915/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e910be8d7c7c3ae00a2839b310cc4062d5de8163", "url": "https://api.github.com/repos/rust-lang/rust/commits/e910be8d7c7c3ae00a2839b310cc4062d5de8163", "html_url": "https://github.com/rust-lang/rust/commit/e910be8d7c7c3ae00a2839b310cc4062d5de8163"}, {"sha": "6bce50f390bbdfca66966c26adec42b927670f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bce50f390bbdfca66966c26adec42b927670f4f", "html_url": "https://github.com/rust-lang/rust/commit/6bce50f390bbdfca66966c26adec42b927670f4f"}], "stats": {"total": 87, "additions": 77, "deletions": 10}, "files": [{"sha": "96987d081594f019bfe6350da04d338014777f25", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac60ca0643feb3452688a9ca97c839c155742915/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60ca0643feb3452688a9ca97c839c155742915/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=ac60ca0643feb3452688a9ca97c839c155742915", "patch": "@@ -790,6 +790,9 @@ pub fn build_codegen_backend(builder: &Builder<'_>,\n             if builder.config.llvm_use_libcxx {\n                 cargo.env(\"LLVM_USE_LIBCXX\", \"1\");\n             }\n+            if builder.config.llvm_optimize && !builder.config.llvm_release_debuginfo {\n+                cargo.env(\"LLVM_NDEBUG\", \"1\");\n+            }\n         }\n         _ => panic!(\"unknown backend: {}\", backend),\n     }"}, {"sha": "a63434abd6c9fc172532d5a27f92c3f0cba96c30", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ac60ca0643feb3452688a9ca97c839c155742915/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60ca0643feb3452688a9ca97c839c155742915/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=ac60ca0643feb3452688a9ca97c839c155742915", "patch": "@@ -405,6 +405,36 @@ impl<I> Iterator for Cycle<I> where I: Clone + Iterator {\n             _ => (usize::MAX, None)\n         }\n     }\n+\n+    #[inline]\n+    fn try_fold<Acc, F, R>(&mut self, mut acc: Acc, mut f: F) -> R\n+    where\n+        F: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>,\n+    {\n+        // fully iterate the current iterator. this is necessary because\n+        // `self.iter` may be empty even when `self.orig` isn't\n+        acc = self.iter.try_fold(acc, &mut f)?;\n+        self.iter = self.orig.clone();\n+\n+        // complete a full cycle, keeping track of whether the cycled\n+        // iterator is empty or not. we need to return early in case\n+        // of an empty iterator to prevent an infinite loop\n+        let mut is_empty = true;\n+        acc = self.iter.try_fold(acc, |acc, x| {\n+            is_empty = false;\n+            f(acc, x)\n+        })?;\n+\n+        if is_empty {\n+            return Try::from_ok(acc);\n+        }\n+\n+        loop {\n+            self.iter = self.orig.clone();\n+            acc = self.iter.try_fold(acc, &mut f)?;\n+        }\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]"}, {"sha": "a1a27e1d5380ff50f4487ede0e7e08aa24f7ed79", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac60ca0643feb3452688a9ca97c839c155742915/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60ca0643feb3452688a9ca97c839c155742915/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=ac60ca0643feb3452688a9ca97c839c155742915", "patch": "@@ -1152,6 +1152,18 @@ fn test_cycle() {\n     assert_eq!(empty::<i32>().cycle().fold(0, |acc, x| acc + x), 0);\n \n     assert_eq!(once(1).cycle().skip(1).take(4).fold(0, |acc, x| acc + x), 4);\n+\n+    assert_eq!((0..10).cycle().take(5).sum::<i32>(), 10);\n+    assert_eq!((0..10).cycle().take(15).sum::<i32>(), 55);\n+    assert_eq!((0..10).cycle().take(25).sum::<i32>(), 100);\n+\n+    let mut iter = (0..10).cycle();\n+    iter.nth(14);\n+    assert_eq!(iter.take(8).sum::<i32>(), 38);\n+\n+    let mut iter = (0..10).cycle();\n+    iter.nth(9);\n+    assert_eq!(iter.take(3).sum::<i32>(), 3);\n }\n \n #[test]"}, {"sha": "8e3b910e0da3a89a0b8c8c56baa192f4adbc4d63", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac60ca0643feb3452688a9ca97c839c155742915/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60ca0643feb3452688a9ca97c839c155742915/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ac60ca0643feb3452688a9ca97c839c155742915", "patch": "@@ -395,7 +395,7 @@ top_level_options!(\n         output_types: OutputTypes [TRACKED],\n         search_paths: Vec<SearchPath> [UNTRACKED],\n         libs: Vec<(String, Option<String>, Option<cstore::NativeLibraryKind>)> [TRACKED],\n-        maybe_sysroot: Option<PathBuf> [TRACKED],\n+        maybe_sysroot: Option<PathBuf> [UNTRACKED],\n \n         target_triple: TargetTriple [TRACKED],\n "}, {"sha": "8d6a1d757e014977420ea636bcf74b73b9e2a139", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac60ca0643feb3452688a9ca97c839c155742915/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60ca0643feb3452688a9ca97c839c155742915/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=ac60ca0643feb3452688a9ca97c839c155742915", "patch": "@@ -198,10 +198,14 @@ impl SymbolMangler<'tcx> {\n \n         let lifetimes = regions.into_iter().map(|br| {\n             match br {\n-                ty::BrAnon(i) => i + 1,\n+                ty::BrAnon(i) => {\n+                    // FIXME(eddyb) for some reason, `anonymize_late_bound_regions` starts at `1`.\n+                    assert_ne!(i, 0);\n+                    i - 1\n+                },\n                 _ => bug!(\"symbol_names: non-anonymized region `{:?}` in `{:?}`\", br, value),\n             }\n-        }).max().unwrap_or(0);\n+        }).max().map_or(0, |max| max + 1);\n \n         self.push_opt_integer_62(\"G\", lifetimes as u64);\n         lifetime_depths.end += lifetimes;\n@@ -297,6 +301,10 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             // Late-bound lifetimes use indices starting at 1,\n             // see `BinderLevel` for more details.\n             ty::ReLateBound(debruijn, ty::BrAnon(i)) => {\n+                // FIXME(eddyb) for some reason, `anonymize_late_bound_regions` starts at `1`.\n+                assert_ne!(i, 0);\n+                let i = i - 1;\n+\n                 let binder = &self.binders[self.binders.len() - 1 - debruijn.index()];\n                 let depth = binder.lifetime_depths.start + i;\n "}, {"sha": "40ddd6516429068d293ada9328b3ca24b76f5a83", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac60ca0643feb3452688a9ca97c839c155742915/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60ca0643feb3452688a9ca97c839c155742915/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=ac60ca0643feb3452688a9ca97c839c155742915", "patch": "@@ -151,6 +151,10 @@ fn main() {\n         cfg.define(\"LLVM_RUSTLLVM\", None);\n     }\n \n+    if env::var_os(\"LLVM_NDEBUG\").is_some() {\n+        cfg.define(\"NDEBUG\", None);\n+    }\n+\n     build_helper::rerun_if_changed_anything_in_dir(Path::new(\"../rustllvm\"));\n     cfg.file(\"../rustllvm/PassWrapper.cpp\")\n        .file(\"../rustllvm/RustWrapper.cpp\")"}, {"sha": "45c9a7427230b0d573b6d60c42573d0423f9c4a9", "filename": "src/test/run-make-fulldeps/reproducible-build-2/Makefile", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac60ca0643feb3452688a9ca97c839c155742915/src%2Ftest%2Frun-make-fulldeps%2Freproducible-build-2%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ac60ca0643feb3452688a9ca97c839c155742915/src%2Ftest%2Frun-make-fulldeps%2Freproducible-build-2%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Freproducible-build-2%2FMakefile?ref=ac60ca0643feb3452688a9ca97c839c155742915", "patch": "@@ -5,7 +5,8 @@\n # Objects are reproducible but their path is not.\n \n all:  \\\n-\tfat_lto\n+\tfat_lto \\\n+\tsysroot\n \n fat_lto:\n \trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n@@ -14,3 +15,12 @@ fat_lto:\n \tcp $(TMPDIR)/reproducible-build $(TMPDIR)/reproducible-build-a\n \t$(RUSTC) reproducible-build.rs -C lto=fat\n \tcmp \"$(TMPDIR)/reproducible-build-a\" \"$(TMPDIR)/reproducible-build\" || exit 1\n+\n+sysroot:\n+\trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n+\t$(RUSTC) reproducible-build-aux.rs\n+\t$(RUSTC) reproducible-build.rs --crate-type rlib --sysroot $(shell $(RUSTC) --print sysroot) --remap-path-prefix=$(shell $(RUSTC) --print sysroot)=/sysroot\n+\tcp -r $(shell $(RUSTC) --print sysroot) $(TMPDIR)/sysroot\n+\tcp $(TMPDIR)/libreproducible_build.rlib $(TMPDIR)/libfoo.rlib\n+\t$(RUSTC) reproducible-build.rs --crate-type rlib --sysroot $(TMPDIR)/sysroot --remap-path-prefix=$(TMPDIR)/sysroot=/sysroot\n+\tcmp \"$(TMPDIR)/libreproducible_build.rlib\" \"$(TMPDIR)/libfoo.rlib\" || exit 1"}, {"sha": "137b72dcd9c4468338e90305c105b00f5d28394c", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac60ca0643feb3452688a9ca97c839c155742915/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60ca0643feb3452688a9ca97c839c155742915/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=ac60ca0643feb3452688a9ca97c839c155742915", "patch": "@@ -64,9 +64,9 @@ fn main() {\n             //[legacy]~^ ERROR symbol-name(_ZN198_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method\n             //[legacy]~| ERROR demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method\n             //[legacy]~| ERROR demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method)\n-             //[v0]~^^^^ ERROR symbol-name(_RNvXNCNvCs4fqI2P2rA04_5impl14mains_0ARDNtB6_3Foop5AssocFG0_KCRL0_hEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n-                //[v0]~| ERROR demangling(<[&dyn impl1[317d481089b8c8fe]::Foo<Assoc = for<'a, 'b> extern \"C\" fn(&'b u8)> + impl1[317d481089b8c8fe]::AutoTrait; 3: usize] as impl1[317d481089b8c8fe]::main::{closure#1}::Bar>::method)\n-                //[v0]~| ERROR demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a, 'b> extern \"C\" fn(&'b u8)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n+             //[v0]~^^^^ ERROR symbol-name(_RNvXNCNvCs4fqI2P2rA04_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n+                //[v0]~| ERROR demangling(<[&dyn impl1[317d481089b8c8fe]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8)> + impl1[317d481089b8c8fe]::AutoTrait; 3: usize] as impl1[317d481089b8c8fe]::main::{closure#1}::Bar>::method)\n+                //[v0]~| ERROR demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n             #[rustc_def_path]\n             //[legacy]~^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n                //[v0]~^^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)"}, {"sha": "e024799df867cf4dc7c55e86ebec6dfd37805cc0", "filename": "src/test/ui/symbol-names/impl1.v0.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac60ca0643feb3452688a9ca97c839c155742915/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac60ca0643feb3452688a9ca97c839c155742915/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=ac60ca0643feb3452688a9ca97c839c155742915", "patch": "@@ -46,19 +46,19 @@ error: def-path(bar::<impl foo::Foo>::baz)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RNvXNCNvCs4fqI2P2rA04_5impl14mains_0ARDNtB6_3Foop5AssocFG0_KCRL0_hEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n+error: symbol-name(_RNvXNCNvCs4fqI2P2rA04_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n   --> $DIR/impl1.rs:63:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1[317d481089b8c8fe]::Foo<Assoc = for<'a, 'b> extern \"C\" fn(&'b u8)> + impl1[317d481089b8c8fe]::AutoTrait; 3: usize] as impl1[317d481089b8c8fe]::main::{closure#1}::Bar>::method)\n+error: demangling(<[&dyn impl1[317d481089b8c8fe]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8)> + impl1[317d481089b8c8fe]::AutoTrait; 3: usize] as impl1[317d481089b8c8fe]::main::{closure#1}::Bar>::method)\n   --> $DIR/impl1.rs:63:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a, 'b> extern \"C\" fn(&'b u8)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n+error: demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n   --> $DIR/impl1.rs:63:13\n    |\n LL |             #[rustc_symbol_name]"}]}