{"sha": "23b82c32298002f80724a244c2483fd1e8ec1d54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYjgyYzMyMjk4MDAyZjgwNzI0YTI0NGMyNDgzZmQxZThlYzFkNTQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-12T18:52:37Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T17:39:27Z"}, "message": "resolve: Move macro resolution traces from `Module`s to `Resolver`\n\nTraces already contain module info without that.\nIt's easy to forget to call `finalize_*` on a module.\nIn particular, macros enum and trait modules weren't finalized.\nBy happy accident macros weren't placed into those modules until now.", "tree": {"sha": "560458ed12744a974c651954a446af3bb1f3db56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/560458ed12744a974c651954a446af3bb1f3db56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23b82c32298002f80724a244c2483fd1e8ec1d54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23b82c32298002f80724a244c2483fd1e8ec1d54", "html_url": "https://github.com/rust-lang/rust/commit/23b82c32298002f80724a244c2483fd1e8ec1d54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23b82c32298002f80724a244c2483fd1e8ec1d54/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73dee258c19a6e9e8249a0d7ff1db54014d0c7a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/73dee258c19a6e9e8249a0d7ff1db54014d0c7a1", "html_url": "https://github.com/rust-lang/rust/commit/73dee258c19a6e9e8249a0d7ff1db54014d0c7a1"}], "stats": {"total": 185, "additions": 90, "deletions": 95}, "files": [{"sha": "98ee7203057d0ddf154e2e96c7967f22e79c2dd3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=23b82c32298002f80724a244c2483fd1e8ec1d54", "patch": "@@ -1267,9 +1267,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n \n     fn visit_attribute(&mut self, attr: &'b ast::Attribute) {\n         if !attr.is_sugared_doc && is_builtin_attr(attr) {\n-            self.parent_scope.module.builtin_attrs.borrow_mut().push((\n-                attr.path.segments[0].ident, self.parent_scope.clone()\n-            ));\n+            self.r.builtin_attrs.push((attr.path.segments[0].ident, self.parent_scope.clone()));\n         }\n         visit::walk_attribute(self, attr);\n     }"}, {"sha": "e0869d848508ba6d0c1d961a65bb52bcf45004a1", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=23b82c32298002f80724a244c2483fd1e8ec1d54", "patch": "@@ -574,7 +574,6 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n             self.ribs[ValueNS].push(Rib::new(ModuleRibKind(module)));\n             self.ribs[TypeNS].push(Rib::new(ModuleRibKind(module)));\n \n-            self.r.finalize_current_module_macro_resolutions(module);\n             let ret = f(self);\n \n             self.parent_scope.module = orig_module;\n@@ -1227,7 +1226,6 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n             self.ribs[ValueNS].push(Rib::new(ModuleRibKind(anonymous_module)));\n             self.ribs[TypeNS].push(Rib::new(ModuleRibKind(anonymous_module)));\n             self.parent_scope.module = anonymous_module;\n-            self.r.finalize_current_module_macro_resolutions(anonymous_module);\n         } else {\n             self.ribs[ValueNS].push(Rib::new(NormalRibKind));\n         }\n@@ -1984,7 +1982,6 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n impl<'a> Resolver<'a> {\n     pub(crate) fn late_resolve_crate(&mut self, krate: &Crate) {\n-        self.finalize_current_module_macro_resolutions(self.graph_root);\n         let mut late_resolution_visitor = LateResolutionVisitor::new(self);\n         visit::walk_crate(&mut late_resolution_visitor, krate);\n         for (id, span) in late_resolution_visitor.unused_labels.iter() {"}, {"sha": "3d82ef3d58016e6208baf5053fbcf6130b2eb6b9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=23b82c32298002f80724a244c2483fd1e8ec1d54", "patch": "@@ -418,11 +418,6 @@ pub struct ModuleData<'a> {\n     normal_ancestor_id: DefId,\n \n     resolutions: RefCell<FxHashMap<(Ident, Namespace), &'a RefCell<NameResolution<'a>>>>,\n-    single_segment_macro_resolutions: RefCell<Vec<(Ident, MacroKind, ParentScope<'a>,\n-                                                   Option<&'a NameBinding<'a>>)>>,\n-    multi_segment_macro_resolutions: RefCell<Vec<(Vec<Segment>, Span, MacroKind, ParentScope<'a>,\n-                                                  Option<Res>)>>,\n-    builtin_attrs: RefCell<Vec<(Ident, ParentScope<'a>)>>,\n \n     // Macro invocations that can expand into items in this module.\n     unresolved_invocations: RefCell<FxHashSet<ExpnId>>,\n@@ -459,9 +454,6 @@ impl<'a> ModuleData<'a> {\n             kind,\n             normal_ancestor_id,\n             resolutions: Default::default(),\n-            single_segment_macro_resolutions: RefCell::new(Vec::new()),\n-            multi_segment_macro_resolutions: RefCell::new(Vec::new()),\n-            builtin_attrs: RefCell::new(Vec::new()),\n             unresolved_invocations: Default::default(),\n             no_implicit_prelude: false,\n             glob_importers: RefCell::new(Vec::new()),\n@@ -896,6 +888,12 @@ pub struct Resolver<'a> {\n     local_macro_def_scopes: FxHashMap<NodeId, Module<'a>>,\n     unused_macros: NodeMap<Span>,\n     proc_macro_stubs: NodeSet,\n+    /// Traces collected during macro resolution and validated when it's complete.\n+    single_segment_macro_resolutions: Vec<(Ident, MacroKind, ParentScope<'a>,\n+                                           Option<&'a NameBinding<'a>>)>,\n+    multi_segment_macro_resolutions: Vec<(Vec<Segment>, Span, MacroKind, ParentScope<'a>,\n+                                          Option<Res>)>,\n+    builtin_attrs: Vec<(Ident, ParentScope<'a>)>,\n     /// Some built-in derives mark items they are applied to so they are treated specially later.\n     /// Derive macros cannot modify the item themselves and have to store the markers in the global\n     /// context, so they attach the markers to derive container IDs using this resolver table.\n@@ -1151,6 +1149,9 @@ impl<'a> Resolver<'a> {\n             struct_constructors: Default::default(),\n             unused_macros: Default::default(),\n             proc_macro_stubs: Default::default(),\n+            single_segment_macro_resolutions: Default::default(),\n+            multi_segment_macro_resolutions: Default::default(),\n+            builtin_attrs: Default::default(),\n             special_derives: Default::default(),\n             active_features:\n                 features.declared_lib_features.iter().map(|(feat, ..)| *feat)\n@@ -1203,6 +1204,7 @@ impl<'a> Resolver<'a> {\n     /// Entry point to crate resolution.\n     pub fn resolve_crate(&mut self, krate: &Crate) {\n         ImportResolver { r: self }.finalize_imports();\n+        self.finalize_macro_resolutions();\n \n         self.late_resolve_crate(krate);\n "}, {"sha": "f54f395063c2cb5a1266a9c4e6ba2a505e25aeb5", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=23b82c32298002f80724a244c2483fd1e8ec1d54", "patch": "@@ -366,7 +366,7 @@ impl<'a> Resolver<'a> {\n \n             if trace {\n                 let kind = kind.expect(\"macro kind must be specified if tracing is enabled\");\n-                parent_scope.module.multi_segment_macro_resolutions.borrow_mut()\n+                self.multi_segment_macro_resolutions\n                     .push((path, path_span, kind, parent_scope.clone(), res.ok()));\n             }\n \n@@ -383,7 +383,7 @@ impl<'a> Resolver<'a> {\n \n             if trace {\n                 let kind = kind.expect(\"macro kind must be specified if tracing is enabled\");\n-                parent_scope.module.single_segment_macro_resolutions.borrow_mut()\n+                self.single_segment_macro_resolutions\n                     .push((path[0].ident, kind, parent_scope.clone(), binding.ok()));\n             }\n \n@@ -693,7 +693,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    pub fn finalize_current_module_macro_resolutions(&mut self, module: Module<'a>) {\n+    crate fn finalize_macro_resolutions(&mut self) {\n         let check_consistency = |this: &mut Self, path: &[Segment], span, kind: MacroKind,\n                                  initial_res: Option<Res>, res: Res| {\n             if let Some(initial_res) = initial_res {\n@@ -729,8 +729,7 @@ impl<'a> Resolver<'a> {\n             }\n         };\n \n-        let macro_resolutions =\n-            mem::take(&mut *module.multi_segment_macro_resolutions.borrow_mut());\n+        let macro_resolutions = mem::take(&mut self.multi_segment_macro_resolutions);\n         for (mut path, path_span, kind, parent_scope, initial_res) in macro_resolutions {\n             // FIXME: Path resolution will ICE if segment IDs present.\n             for seg in &mut path { seg.id = None; }\n@@ -757,8 +756,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        let macro_resolutions =\n-            mem::take(&mut *module.single_segment_macro_resolutions.borrow_mut());\n+        let macro_resolutions = mem::take(&mut self.single_segment_macro_resolutions);\n         for (ident, kind, parent_scope, initial_binding) in macro_resolutions {\n             match self.early_resolve_ident_in_lexical_scope(ident, ScopeSet::Macro(kind),\n                                                             &parent_scope, true, true, ident.span) {\n@@ -783,7 +781,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        let builtin_attrs = mem::take(&mut *module.builtin_attrs.borrow_mut());\n+        let builtin_attrs = mem::take(&mut self.builtin_attrs);\n         for (ident, parent_scope) in builtin_attrs {\n             let _ = self.early_resolve_ident_in_lexical_scope(\n                 ident, ScopeSet::Macro(MacroKind::Attr), &parent_scope, true, true, ident.span"}, {"sha": "ef8fcc9ba8a55724dcfc4f145bbf5907c5dabe2c", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=23b82c32298002f80724a244c2483fd1e8ec1d54", "patch": "@@ -848,7 +848,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         directive.vis.set(orig_vis);\n         let module = match path_res {\n             PathResult::Module(module) => {\n-                // Consistency checks, analogous to `finalize_current_module_macro_resolutions`.\n+                // Consistency checks, analogous to `finalize_macro_resolutions`.\n                 if let Some(initial_module) = directive.imported_module.get() {\n                     if !ModuleOrUniformRoot::same_def(module, initial_module) && no_ambiguity {\n                         span_bug!(directive.span, \"inconsistent resolution for an import\");\n@@ -973,7 +973,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n             match binding {\n                 Ok(binding) => {\n-                    // Consistency checks, analogous to `finalize_current_module_macro_resolutions`.\n+                    // Consistency checks, analogous to `finalize_macro_resolutions`.\n                     let initial_res = source_bindings[ns].get().map(|initial_binding| {\n                         all_ns_err = false;\n                         if let Some(target_binding) = target_bindings[ns].get() {"}, {"sha": "676b8b9f056c1288c79909c5340a26eedffa3711", "filename": "src/test/ui/feature-gates/feature-gate-rustc-diagnostic-macros.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-diagnostic-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-diagnostic-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-diagnostic-macros.stderr?ref=23b82c32298002f80724a244c2483fd1e8ec1d54", "patch": "@@ -4,17 +4,17 @@ error: cannot find macro `__build_diagnostic_array!` in this scope\n LL | __build_diagnostic_array!(DIAGNOSTICS);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: cannot find macro `__register_diagnostic!` in this scope\n-  --> $DIR/feature-gate-rustc-diagnostic-macros.rs:4:1\n-   |\n-LL | __register_diagnostic!(E0001);\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-\n error: cannot find macro `__diagnostic_used!` in this scope\n   --> $DIR/feature-gate-rustc-diagnostic-macros.rs:8:5\n    |\n LL |     __diagnostic_used!(E0001);\n    |     ^^^^^^^^^^^^^^^^^\n \n+error: cannot find macro `__register_diagnostic!` in this scope\n+  --> $DIR/feature-gate-rustc-diagnostic-macros.rs:4:1\n+   |\n+LL | __register_diagnostic!(E0001);\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "643f803f62049b1695bd14e3289ab8eb160e2fd9", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=23b82c32298002f80724a244c2483fd1e8ec1d54", "patch": "@@ -1,3 +1,11 @@\n+error: cannot find macro `panic!` in this scope\n+  --> $DIR/no_implicit_prelude.rs:16:9\n+   |\n+LL |         assert_eq!(0, 0);\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n error[E0433]: failed to resolve: use of undeclared type or module `Vec`\n   --> $DIR/no_implicit_prelude.rs:11:9\n    |\n@@ -7,14 +15,6 @@ LL |     fn f() { ::bar::m!(); }\n LL |         Vec::new();\n    |         ^^^ use of undeclared type or module `Vec`\n \n-error: cannot find macro `panic!` in this scope\n-  --> $DIR/no_implicit_prelude.rs:16:9\n-   |\n-LL |         assert_eq!(0, 0);\n-   |         ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n error[E0599]: no method named `clone` found for type `()` in the current scope\n   --> $DIR/no_implicit_prelude.rs:12:12\n    |"}, {"sha": "7d013828bd90857603388ce5092c3ba751bb933a", "filename": "src/test/ui/imports/local-modularized-tricky-fail-1.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr?ref=23b82c32298002f80724a244c2483fd1e8ec1d54", "patch": "@@ -21,25 +21,6 @@ LL | use inner1::*;\n    |     ^^^^^^^^^\n    = help: consider adding an explicit import of `exported` to disambiguate\n \n-error[E0659]: `include` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/local-modularized-tricky-fail-1.rs:46:1\n-   |\n-LL | include!();\n-   | ^^^^^^^ ambiguous name\n-   |\n-   = note: `include` could refer to a macro from prelude\n-note: `include` could also refer to the macro defined here\n-  --> $DIR/local-modularized-tricky-fail-1.rs:17:5\n-   |\n-LL | /     macro_rules! include {\n-LL | |         () => ()\n-LL | |     }\n-   | |_____^\n-...\n-LL |       define_include!();\n-   |       ------------------ in this macro invocation\n-   = help: use `crate::include` to refer to this macro unambiguously\n-\n error[E0659]: `panic` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/local-modularized-tricky-fail-1.rs:35:5\n    |\n@@ -59,6 +40,25 @@ LL |       define_panic!();\n    |       ---------------- in this macro invocation\n    = help: use `crate::panic` to refer to this macro unambiguously\n \n+error[E0659]: `include` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n+  --> $DIR/local-modularized-tricky-fail-1.rs:46:1\n+   |\n+LL | include!();\n+   | ^^^^^^^ ambiguous name\n+   |\n+   = note: `include` could refer to a macro from prelude\n+note: `include` could also refer to the macro defined here\n+  --> $DIR/local-modularized-tricky-fail-1.rs:17:5\n+   |\n+LL | /     macro_rules! include {\n+LL | |         () => ()\n+LL | |     }\n+   | |_____^\n+...\n+LL |       define_include!();\n+   |       ------------------ in this macro invocation\n+   = help: use `crate::include` to refer to this macro unambiguously\n+\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0659`."}, {"sha": "2f2ab20cdf077058cc6e3c15cd3fc3e81e470627", "filename": "src/test/ui/imports/shadow_builtin_macros.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr?ref=23b82c32298002f80724a244c2483fd1e8ec1d54", "patch": "@@ -13,20 +13,6 @@ LL |     use foo::*;\n    = help: consider adding an explicit import of `panic` to disambiguate\n    = help: or use `self::panic` to refer to this macro unambiguously\n \n-error[E0659]: `panic` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/shadow_builtin_macros.rs:20:14\n-   |\n-LL |     fn f() { panic!(); }\n-   |              ^^^^^ ambiguous name\n-   |\n-   = note: `panic` could refer to a macro from prelude\n-note: `panic` could also refer to the macro imported here\n-  --> $DIR/shadow_builtin_macros.rs:19:26\n-   |\n-LL |     ::two_macros::m!(use foo::panic;);\n-   |                          ^^^^^^^^^^\n-   = help: use `self::panic` to refer to this macro unambiguously\n-\n error[E0659]: `panic` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/shadow_builtin_macros.rs:33:5\n    |\n@@ -62,6 +48,20 @@ note: `n` could also refer to the macro imported here\n LL | #[macro_use(n)]\n    |             ^\n \n+error[E0659]: `panic` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n+  --> $DIR/shadow_builtin_macros.rs:20:14\n+   |\n+LL |     fn f() { panic!(); }\n+   |              ^^^^^ ambiguous name\n+   |\n+   = note: `panic` could refer to a macro from prelude\n+note: `panic` could also refer to the macro imported here\n+  --> $DIR/shadow_builtin_macros.rs:19:26\n+   |\n+LL |     ::two_macros::m!(use foo::panic;);\n+   |                          ^^^^^^^^^^\n+   = help: use `self::panic` to refer to this macro unambiguously\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0659`."}, {"sha": "e0d3bb3ecc2e17b4562bbe81b420314a6c7d8814", "filename": "src/test/ui/issues/issue-49074.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr?ref=23b82c32298002f80724a244c2483fd1e8ec1d54", "patch": "@@ -1,9 +1,3 @@\n-error: cannot find attribute macro `marco_use` in this scope\n-  --> $DIR/issue-49074.rs:3:3\n-   |\n-LL | #[marco_use] // typo\n-   |   ^^^^^^^^^ help: a built-in attribute with a similar name exists: `macro_use`\n-\n error: cannot find macro `bar!` in this scope\n   --> $DIR/issue-49074.rs:12:4\n    |\n@@ -12,5 +6,11 @@ LL |    bar!();\n    |\n    = help: have you added the `#[macro_use]` on the module/import?\n \n+error: cannot find attribute macro `marco_use` in this scope\n+  --> $DIR/issue-49074.rs:3:3\n+   |\n+LL | #[marco_use] // typo\n+   |   ^^^^^^^^^ help: a built-in attribute with a similar name exists: `macro_use`\n+\n error: aborting due to 2 previous errors\n "}, {"sha": "0c863e919670dad375f5feb9419eb9d491d26ee8", "filename": "src/test/ui/proc-macro/macro-namespace-reserved-2.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr?ref=23b82c32298002f80724a244c2483fd1e8ec1d54", "patch": "@@ -88,18 +88,6 @@ error: expected derive macro, found macro `crate::my_macro`\n LL | #[derive(crate::my_macro)]\n    |          ^^^^^^^^^^^^^^^ not a derive macro\n \n-error: cannot find attribute macro `my_macro` in this scope\n-  --> $DIR/macro-namespace-reserved-2.rs:38:3\n-   |\n-LL | #[my_macro]\n-   |   ^^^^^^^^\n-\n-error: cannot find derive macro `my_macro` in this scope\n-  --> $DIR/macro-namespace-reserved-2.rs:48:10\n-   |\n-LL | #[derive(my_macro)]\n-   |          ^^^^^^^^\n-\n error: cannot find macro `my_macro_attr!` in this scope\n   --> $DIR/macro-namespace-reserved-2.rs:28:5\n    |\n@@ -112,5 +100,17 @@ error: cannot find macro `MyTrait!` in this scope\n LL |     MyTrait!();\n    |     ^^^^^^^\n \n+error: cannot find attribute macro `my_macro` in this scope\n+  --> $DIR/macro-namespace-reserved-2.rs:38:3\n+   |\n+LL | #[my_macro]\n+   |   ^^^^^^^^\n+\n+error: cannot find derive macro `my_macro` in this scope\n+  --> $DIR/macro-namespace-reserved-2.rs:48:10\n+   |\n+LL | #[derive(my_macro)]\n+   |          ^^^^^^^^\n+\n error: aborting due to 19 previous errors\n "}, {"sha": "856162b318deac96517713556131de2b7ffdcf11", "filename": "src/test/ui/reserved/reserved-attr-on-macro.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23b82c32298002f80724a244c2483fd1e8ec1d54/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr?ref=23b82c32298002f80724a244c2483fd1e8ec1d54", "patch": "@@ -7,12 +7,6 @@ LL | #[rustc_attribute_should_be_reserved]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n-error: cannot find attribute macro `rustc_attribute_should_be_reserved` in this scope\n-  --> $DIR/reserved-attr-on-macro.rs:1:3\n-   |\n-LL | #[rustc_attribute_should_be_reserved]\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: cannot determine resolution for the macro `foo`\n   --> $DIR/reserved-attr-on-macro.rs:10:5\n    |\n@@ -21,6 +15,12 @@ LL |     foo!();\n    |\n    = note: import resolution is stuck, try simplifying macro imports\n \n+error: cannot find attribute macro `rustc_attribute_should_be_reserved` in this scope\n+  --> $DIR/reserved-attr-on-macro.rs:1:3\n+   |\n+LL | #[rustc_attribute_should_be_reserved]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}