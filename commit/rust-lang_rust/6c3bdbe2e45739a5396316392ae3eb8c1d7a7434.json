{"sha": "6c3bdbe2e45739a5396316392ae3eb8c1d7a7434", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjM2JkYmUyZTQ1NzM5YTUzOTYzMTYzOTJhZTNlYjhjMWQ3YTc0MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-25T19:01:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-25T19:01:27Z"}, "message": "auto merge of #13735 : aturon/rust/float-consts-take-2, r=brson\n\nFollow-up on issue #13297 and PR #13710.  Instead of following the (confusing) C/C++ approach\r\nof using `MIN_VALUE` for the smallest *positive* number, we introduce `MIN_POS_VALUE` (and\r\nin the Float trait, `min_pos_value`) to represent this number.\r\n\r\nThis patch also removes a few remaining redundantly-defined constants that were missed last\r\ntime around.", "tree": {"sha": "62f92eb28defb0c6b97b6c9bbd96acb119eb7250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62f92eb28defb0c6b97b6c9bbd96acb119eb7250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c3bdbe2e45739a5396316392ae3eb8c1d7a7434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c3bdbe2e45739a5396316392ae3eb8c1d7a7434", "html_url": "https://github.com/rust-lang/rust/commit/6c3bdbe2e45739a5396316392ae3eb8c1d7a7434", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c3bdbe2e45739a5396316392ae3eb8c1d7a7434/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0be4c3372ab2208e3ae1ddec8b6f1231408265e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0be4c3372ab2208e3ae1ddec8b6f1231408265e2", "html_url": "https://github.com/rust-lang/rust/commit/0be4c3372ab2208e3ae1ddec8b6f1231408265e2"}, {"sha": "b8da4d7704fc71c5cb97eb42459bc6d847e96ea6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8da4d7704fc71c5cb97eb42459bc6d847e96ea6", "html_url": "https://github.com/rust-lang/rust/commit/b8da4d7704fc71c5cb97eb42459bc6d847e96ea6"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "36e5728200bcb7bf44f93035e2a5a5e3a6aa39cb", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c3bdbe2e45739a5396316392ae3eb8c1d7a7434/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c3bdbe2e45739a5396316392ae3eb8c1d7a7434/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=6c3bdbe2e45739a5396316392ae3eb8c1d7a7434", "patch": "@@ -71,9 +71,11 @@ pub static DIGITS: uint = 6u;\n \n pub static EPSILON: f32 = 1.19209290e-07_f32;\n \n-/// Minimum normalized f32 value\n-pub static MIN_VALUE: f32 = 1.17549435e-38_f32;\n-/// Maximum f32 value\n+/// Smallest finite f32 value\n+pub static MIN_VALUE: f32 = -3.40282347e+38_f32;\n+/// Smallest positive, normalized f32 value\n+pub static MIN_POS_VALUE: f32 = 1.17549435e-38_f32;\n+/// Largest finite f32 value\n pub static MAX_VALUE: f32 = 3.40282347e+38_f32;\n \n pub static MIN_EXP: int = -125;\n@@ -90,8 +92,9 @@ pub static NEG_INFINITY: f32 = -1.0_f32/0.0_f32;\n pub mod consts {\n     // FIXME: replace with mathematical constants from cmath.\n \n-    // FIXME(#11621): These constants should be deprecated once CTFE is\n-    // implemented in favour of calling their respective functions in `Float`.\n+    // FIXME(#5527): These constants should be deprecated once associated\n+    // constants are implemented in favour of referencing the respective members\n+    // of `Float`.\n \n     /// Archimedes' constant\n     pub static PI: f32 = 3.14159265358979323846264338327950288_f32;\n@@ -342,6 +345,9 @@ impl Float for f32 {\n     #[inline]\n     fn max_10_exp(_: Option<f32>) -> int { MAX_10_EXP }\n \n+    #[inline]\n+    fn min_pos_value(_: Option<f32>) -> f32 { MIN_POS_VALUE }\n+\n     /// Constructs a floating point number by multiplying `x` by 2 raised to the\n     /// power of `exp`\n     #[inline]"}, {"sha": "6523ac9e8a42129511ce2c4c8ce2bddec77d19af", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6c3bdbe2e45739a5396316392ae3eb8c1d7a7434/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c3bdbe2e45739a5396316392ae3eb8c1d7a7434/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=6c3bdbe2e45739a5396316392ae3eb8c1d7a7434", "patch": "@@ -73,8 +73,9 @@ mod cmath {\n     }\n }\n \n-// FIXME(#11621): These constants should be deprecated once CTFE is implemented\n-// in favour of calling their respective functions in `Bounded` and `Float`.\n+// FIXME(#5527): These constants should be deprecated once associated\n+// constants are implemented in favour of referencing the respective\n+// members of `Bounded` and `Float`.\n \n pub static RADIX: uint = 2u;\n \n@@ -83,9 +84,11 @@ pub static DIGITS: uint = 15u;\n \n pub static EPSILON: f64 = 2.2204460492503131e-16_f64;\n \n-/// Minimum normalized f64 value\n-pub static MIN_VALUE: f64 = 2.2250738585072014e-308_f64;\n-/// Maximum f64 value\n+/// Smallest finite f64 value\n+pub static MIN_VALUE: f64 = -1.7976931348623157e+308_f64;\n+/// Smallest positive, normalized f64 value\n+pub static MIN_POS_VALUE: f64 = 2.2250738585072014e-308_f64;\n+/// Largest finite f64 value\n pub static MAX_VALUE: f64 = 1.7976931348623157e+308_f64;\n \n pub static MIN_EXP: int = -1021;\n@@ -104,8 +107,9 @@ pub static NEG_INFINITY: f64 = -1.0_f64/0.0_f64;\n pub mod consts {\n     // FIXME: replace with mathematical constants from cmath.\n \n-    // FIXME(#11621): These constants should be deprecated once CTFE is\n-    // implemented in favour of calling their respective functions in `Float`.\n+    // FIXME(#5527): These constants should be deprecated once associated\n+    // constants are implemented in favour of referencing the respective members\n+    // of `Float`.\n \n     /// Archimedes' constant\n     pub static PI: f64 = 3.14159265358979323846264338327950288_f64;\n@@ -330,25 +334,28 @@ impl Float for f64 {\n     }\n \n     #[inline]\n-    fn mantissa_digits(_: Option<f64>) -> uint { 53 }\n+    fn mantissa_digits(_: Option<f64>) -> uint { MANTISSA_DIGITS }\n \n     #[inline]\n-    fn digits(_: Option<f64>) -> uint { 15 }\n+    fn digits(_: Option<f64>) -> uint { DIGITS }\n \n     #[inline]\n-    fn epsilon() -> f64 { 2.2204460492503131e-16 }\n+    fn epsilon() -> f64 { EPSILON }\n \n     #[inline]\n-    fn min_exp(_: Option<f64>) -> int { -1021 }\n+    fn min_exp(_: Option<f64>) -> int { MIN_EXP }\n \n     #[inline]\n-    fn max_exp(_: Option<f64>) -> int { 1024 }\n+    fn max_exp(_: Option<f64>) -> int { MAX_EXP }\n \n     #[inline]\n-    fn min_10_exp(_: Option<f64>) -> int { -307 }\n+    fn min_10_exp(_: Option<f64>) -> int { MIN_10_EXP }\n \n     #[inline]\n-    fn max_10_exp(_: Option<f64>) -> int { 308 }\n+    fn max_10_exp(_: Option<f64>) -> int { MAX_10_EXP }\n+\n+    #[inline]\n+    fn min_pos_value(_: Option<f64>) -> f64 { MIN_POS_VALUE }\n \n     /// Constructs a floating point number by multiplying `x` by 2 raised to the\n     /// power of `exp`"}, {"sha": "15269f6b86b7e1a4b0507eef7733881c6559726b", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c3bdbe2e45739a5396316392ae3eb8c1d7a7434/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c3bdbe2e45739a5396316392ae3eb8c1d7a7434/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=6c3bdbe2e45739a5396316392ae3eb8c1d7a7434", "patch": "@@ -190,7 +190,9 @@ pub fn pow<T: One + Mul<T, T>>(mut base: T, mut exp: uint) -> T {\n /// Numbers which have upper and lower bounds\n pub trait Bounded {\n     // FIXME (#5527): These should be associated constants\n+    /// returns the smallest finite number this type can represent\n     fn min_value() -> Self;\n+    /// returns the largest finite number this type can represent\n     fn max_value() -> Self;\n }\n \n@@ -356,6 +358,8 @@ pub trait Float: Signed + Primitive {\n     /// Returns the category that this number falls into.\n     fn classify(self) -> FPCategory;\n \n+    // FIXME (#5527): These should be associated constants\n+\n     /// Returns the number of binary digits of mantissa that this type supports.\n     fn mantissa_digits(unused_self: Option<Self>) -> uint;\n     /// Returns the number of base-10 digits of precision that this type supports.\n@@ -370,6 +374,8 @@ pub trait Float: Signed + Primitive {\n     fn min_10_exp(unused_self: Option<Self>) -> int;\n     /// Returns the maximum base-10 exponent that this type can represent.\n     fn max_10_exp(unused_self: Option<Self>) -> int;\n+    /// Returns the smallest normalized positive number that this type can represent.\n+    fn min_pos_value(unused_self: Option<Self>) -> Self;\n \n     /// Constructs a floating point number created by multiplying `x` by 2\n     /// raised to the power of `exp`.\n@@ -434,6 +440,8 @@ pub trait Float: Signed + Primitive {\n     /// legs of length `x` and `y`.\n     fn hypot(self, other: Self) -> Self;\n \n+    // FIXME (#5527): These should be associated constants\n+\n     /// Archimedes' constant.\n     fn pi() -> Self;\n     /// 2.0 * pi."}]}