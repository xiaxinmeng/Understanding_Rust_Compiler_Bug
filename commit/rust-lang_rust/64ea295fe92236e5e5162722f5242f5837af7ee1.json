{"sha": "64ea295fe92236e5e5162722f5242f5837af7ee1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZWEyOTVmZTkyMjM2ZTVlNTE2MjcyMmY1MjQyZjU4MzdhZjdlZTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-31T07:14:31Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T09:44:44Z"}, "message": "expand: extract error_derive_forbidden_on_non_adt", "tree": {"sha": "e37f650170449b665de561bbf8867935d8eee1b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e37f650170449b665de561bbf8867935d8eee1b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ea295fe92236e5e5162722f5242f5837af7ee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ea295fe92236e5e5162722f5242f5837af7ee1", "html_url": "https://github.com/rust-lang/rust/commit/64ea295fe92236e5e5162722f5242f5837af7ee1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ea295fe92236e5e5162722f5242f5837af7ee1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8b32a9be341761c3927843c27042febbe8ea39a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b32a9be341761c3927843c27042febbe8ea39a", "html_url": "https://github.com/rust-lang/rust/commit/b8b32a9be341761c3927843c27042febbe8ea39a"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "c7c7f62918d721209c2cac407e2063afffc43197", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/64ea295fe92236e5e5162722f5242f5837af7ee1/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ea295fe92236e5e5162722f5242f5837af7ee1/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=64ea295fe92236e5e5162722f5242f5837af7ee1", "patch": "@@ -451,28 +451,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         _ => unreachable!(),\n                     };\n                     if !item.derive_allowed() {\n-                        let attr = attr::find_by_name(item.attrs(), sym::derive)\n-                            .expect(\"`derive` attribute should exist\");\n-                        let span = attr.span;\n-                        let mut err = self.cx.struct_span_err(\n-                            span,\n-                            \"`derive` may only be applied to structs, enums and unions\",\n-                        );\n-                        if let ast::AttrStyle::Inner = attr.style {\n-                            let trait_list = derives\n-                                .iter()\n-                                .map(|t| pprust::path_to_string(t))\n-                                .collect::<Vec<_>>();\n-                            let suggestion = format!(\"#[derive({})]\", trait_list.join(\", \"));\n-                            err.span_suggestion(\n-                                span,\n-                                \"try an outer attribute\",\n-                                suggestion,\n-                                // We don't \ud835\udc58\ud835\udc5b\ud835\udc5c\ud835\udc64 that the following item is an ADT\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        }\n-                        err.emit();\n+                        self.error_derive_forbidden_on_non_adt(&derives, &item);\n                     }\n \n                     let mut item = self.fully_configure(item);\n@@ -521,6 +500,27 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         fragment_with_placeholders\n     }\n \n+    fn error_derive_forbidden_on_non_adt(&self, derives: &[Path], item: &Annotatable) {\n+        let attr =\n+            attr::find_by_name(item.attrs(), sym::derive).expect(\"`derive` attribute should exist\");\n+        let span = attr.span;\n+        let mut err = self\n+            .cx\n+            .struct_span_err(span, \"`derive` may only be applied to structs, enums and unions\");\n+        if let ast::AttrStyle::Inner = attr.style {\n+            let trait_list = derives.iter().map(|t| pprust::path_to_string(t)).collect::<Vec<_>>();\n+            let suggestion = format!(\"#[derive({})]\", trait_list.join(\", \"));\n+            err.span_suggestion(\n+                span,\n+                \"try an outer attribute\",\n+                suggestion,\n+                // We don't \ud835\udc58\ud835\udc5b\ud835\udc5c\ud835\udc64 that the following item is an ADT\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+        err.emit();\n+    }\n+\n     fn resolve_imports(&mut self) {\n         if self.monotonic {\n             self.cx.resolver.resolve_imports();"}]}