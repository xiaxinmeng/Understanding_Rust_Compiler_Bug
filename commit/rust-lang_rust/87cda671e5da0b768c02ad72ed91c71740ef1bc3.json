{"sha": "87cda671e5da0b768c02ad72ed91c71740ef1bc3", "node_id": "C_kwDOAAsO6NoAKDg3Y2RhNjcxZTVkYTBiNzY4YzAyYWQ3MmVkOTFjNzE3NDBlZjFiYzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-12T23:20:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-12T23:20:08Z"}, "message": "Rollup merge of #91749 - ssomers:btree_comments, r=Mark-Simulacrum\n\nBTree: improve public descriptions and comments\n\nBTreeSet has always used the term \"value\" next to and meaning the same thing as \"elements\" (in the mathematical sense but also used for key-value pairs in BTreeMap), while in the BTreeMap sense these \"values\" are known as \"keys\" and definitely not \"values\". Today I had enough of that.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "9521c0fb448e16c6592a6358f2923b4031027a24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9521c0fb448e16c6592a6358f2923b4031027a24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87cda671e5da0b768c02ad72ed91c71740ef1bc3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtoOoCRBK7hj4Ov3rIwAAwyQIAEN6u6zagom4+JHrqfxPidHT\nwg11P2eOhWNb/puEFzxI2vJBIr4l+A/0qMe48s8+r2xG7wjS+kMPZiuZyvYQAZby\nuIbNlXaK6I7sekzdEJPFp/cxuLPa9fGodNgJj5fts9K10UDN0N8WgJycnO+5+iD3\nmrzLG8wXleSNULptIAnHwHjpfzkyQPLKHoW7iprBVH7uvv9GXRMIlGIheUa5zB0S\nvZdksJAh9qpAPcoITL8B+QFquZFatDlHoIwScYXg7Lcd27aFyKewIoxpdAe8pn2s\nHXd2F8lg2vt9r07ArxPhJMVrSkPxfyrJTI87LsiG9jTXehh7n/XhyCKJ0bFawpE=\n=1CqQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 9521c0fb448e16c6592a6358f2923b4031027a24\nparent 6227d42928b0caef4ebb258df7247c1f85fb9e83\nparent 27b4b19c8c9f0618b71cfb9af4269c1aa0ebc5ff\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639351208 +0100\ncommitter GitHub <noreply@github.com> 1639351208 +0100\n\nRollup merge of #91749 - ssomers:btree_comments, r=Mark-Simulacrum\n\nBTree: improve public descriptions and comments\n\nBTreeSet has always used the term \"value\" next to and meaning the same thing as \"elements\" (in the mathematical sense but also used for key-value pairs in BTreeMap), while in the BTreeMap sense these \"values\" are known as \"keys\" and definitely not \"values\". Today I had enough of that.\n\nr? `@Mark-Simulacrum`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87cda671e5da0b768c02ad72ed91c71740ef1bc3", "html_url": "https://github.com/rust-lang/rust/commit/87cda671e5da0b768c02ad72ed91c71740ef1bc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87cda671e5da0b768c02ad72ed91c71740ef1bc3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6227d42928b0caef4ebb258df7247c1f85fb9e83", "url": "https://api.github.com/repos/rust-lang/rust/commits/6227d42928b0caef4ebb258df7247c1f85fb9e83", "html_url": "https://github.com/rust-lang/rust/commit/6227d42928b0caef4ebb258df7247c1f85fb9e83"}, {"sha": "27b4b19c8c9f0618b71cfb9af4269c1aa0ebc5ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b4b19c8c9f0618b71cfb9af4269c1aa0ebc5ff", "html_url": "https://github.com/rust-lang/rust/commit/27b4b19c8c9f0618b71cfb9af4269c1aa0ebc5ff"}], "stats": {"total": 113, "additions": 58, "deletions": 55}, "files": [{"sha": "394c21bf51cd26f6395119e9b3558ad0ade51baf", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 56, "deletions": 53, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/87cda671e5da0b768c02ad72ed91c71740ef1bc3/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87cda671e5da0b768c02ad72ed91c71740ef1bc3/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=87cda671e5da0b768c02ad72ed91c71740ef1bc3", "patch": "@@ -155,7 +155,7 @@ enum DifferenceInner<'a, T: 'a> {\n         self_iter: Iter<'a, T>,\n         other_set: &'a BTreeSet<T>,\n     },\n-    Iterate(Iter<'a, T>), // simply produce all values in `self`\n+    Iterate(Iter<'a, T>), // simply produce all elements in `self`\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n@@ -207,7 +207,7 @@ enum IntersectionInner<'a, T: 'a> {\n         small_iter: Iter<'a, T>,\n         large_set: &'a BTreeSet<T>,\n     },\n-    Answer(Option<&'a T>), // return a specific value or emptiness\n+    Answer(Option<&'a T>), // return a specific element or emptiness\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n@@ -295,8 +295,8 @@ impl<T> BTreeSet<T> {\n         Range { iter: self.map.range(range) }\n     }\n \n-    /// Visits the values representing the difference,\n-    /// i.e., the values that are in `self` but not in `other`,\n+    /// Visits the elements representing the difference,\n+    /// i.e., the elements that are in `self` but not in `other`,\n     /// in ascending order.\n     ///\n     /// # Examples\n@@ -356,8 +356,8 @@ impl<T> BTreeSet<T> {\n         }\n     }\n \n-    /// Visits the values representing the symmetric difference,\n-    /// i.e., the values that are in `self` or in `other` but not in both,\n+    /// Visits the elements representing the symmetric difference,\n+    /// i.e., the elements that are in `self` or in `other` but not in both,\n     /// in ascending order.\n     ///\n     /// # Examples\n@@ -384,8 +384,8 @@ impl<T> BTreeSet<T> {\n         SymmetricDifference(MergeIterInner::new(self.iter(), other.iter()))\n     }\n \n-    /// Visits the values representing the intersection,\n-    /// i.e., the values that are both in `self` and `other`,\n+    /// Visits the elements representing the intersection,\n+    /// i.e., the elements that are both in `self` and `other`,\n     /// in ascending order.\n     ///\n     /// # Examples\n@@ -437,8 +437,8 @@ impl<T> BTreeSet<T> {\n         }\n     }\n \n-    /// Visits the values representing the union,\n-    /// i.e., all the values in `self` or `other`, without duplicates,\n+    /// Visits the elements representing the union,\n+    /// i.e., all the elements in `self` or `other`, without duplicates,\n     /// in ascending order.\n     ///\n     /// # Examples\n@@ -463,7 +463,7 @@ impl<T> BTreeSet<T> {\n         Union(MergeIterInner::new(self.iter(), other.iter()))\n     }\n \n-    /// Clears the set, removing all values.\n+    /// Clears the set, removing all elements.\n     ///\n     /// # Examples\n     ///\n@@ -480,11 +480,11 @@ impl<T> BTreeSet<T> {\n         self.map.clear()\n     }\n \n-    /// Returns `true` if the set contains a value.\n+    /// Returns `true` if the set contains an element equal to the value.\n     ///\n-    /// The value may be any borrowed form of the set's value type,\n+    /// The value may be any borrowed form of the set's element type,\n     /// but the ordering on the borrowed form *must* match the\n-    /// ordering on the value type.\n+    /// ordering on the element type.\n     ///\n     /// # Examples\n     ///\n@@ -504,11 +504,12 @@ impl<T> BTreeSet<T> {\n         self.map.contains_key(value)\n     }\n \n-    /// Returns a reference to the value in the set, if any, that is equal to the given value.\n+    /// Returns a reference to the element in the set, if any, that is equal to\n+    /// the value.\n     ///\n-    /// The value may be any borrowed form of the set's value type,\n+    /// The value may be any borrowed form of the set's element type,\n     /// but the ordering on the borrowed form *must* match the\n-    /// ordering on the value type.\n+    /// ordering on the element type.\n     ///\n     /// # Examples\n     ///\n@@ -555,7 +556,7 @@ impl<T> BTreeSet<T> {\n     }\n \n     /// Returns `true` if the set is a subset of another,\n-    /// i.e., `other` contains at least all the values in `self`.\n+    /// i.e., `other` contains at least all the elements in `self`.\n     ///\n     /// # Examples\n     ///\n@@ -632,7 +633,7 @@ impl<T> BTreeSet<T> {\n     }\n \n     /// Returns `true` if the set is a superset of another,\n-    /// i.e., `self` contains at least all the values in `other`.\n+    /// i.e., `self` contains at least all the elements in `other`.\n     ///\n     /// # Examples\n     ///\n@@ -660,8 +661,8 @@ impl<T> BTreeSet<T> {\n         other.is_subset(self)\n     }\n \n-    /// Returns a reference to the first value in the set, if any.\n-    /// This value is always the minimum of all values in the set.\n+    /// Returns a reference to the first element in the set, if any.\n+    /// This element is always the minimum of all elements in the set.\n     ///\n     /// # Examples\n     ///\n@@ -687,8 +688,8 @@ impl<T> BTreeSet<T> {\n         self.map.first_key_value().map(|(k, _)| k)\n     }\n \n-    /// Returns a reference to the last value in the set, if any.\n-    /// This value is always the maximum of all values in the set.\n+    /// Returns a reference to the last element in the set, if any.\n+    /// This element is always the maximum of all elements in the set.\n     ///\n     /// # Examples\n     ///\n@@ -714,8 +715,8 @@ impl<T> BTreeSet<T> {\n         self.map.last_key_value().map(|(k, _)| k)\n     }\n \n-    /// Removes the first value from the set and returns it, if any.\n-    /// The first value is always the minimum value in the set.\n+    /// Removes the first element from the set and returns it, if any.\n+    /// The first element is always the minimum element in the set.\n     ///\n     /// # Examples\n     ///\n@@ -739,8 +740,8 @@ impl<T> BTreeSet<T> {\n         self.map.pop_first().map(|kv| kv.0)\n     }\n \n-    /// Removes the last value from the set and returns it, if any.\n-    /// The last value is always the maximum value in the set.\n+    /// Removes the last element from the set and returns it, if any.\n+    /// The last element is always the maximum element in the set.\n     ///\n     /// # Examples\n     ///\n@@ -766,10 +767,10 @@ impl<T> BTreeSet<T> {\n \n     /// Adds a value to the set.\n     ///\n-    /// If the set did not have this value present, `true` is returned.\n+    /// If the set did not have an equal element present, `true` is returned.\n     ///\n-    /// If the set did have this value present, `false` is returned, and the\n-    /// entry is not updated. See the [module-level documentation] for more.\n+    /// If the set did have an equal element present, `false` is returned, and\n+    /// the entry is not updated. See the [module-level documentation] for more.\n     ///\n     /// [module-level documentation]: index.html#insert-and-complex-keys\n     ///\n@@ -792,8 +793,8 @@ impl<T> BTreeSet<T> {\n         self.map.insert(value, ()).is_none()\n     }\n \n-    /// Adds a value to the set, replacing the existing value, if any, that is equal to the given\n-    /// one. Returns the replaced value.\n+    /// Adds a value to the set, replacing the existing element, if any, that is\n+    /// equal to the value. Returns the replaced element.\n     ///\n     /// # Examples\n     ///\n@@ -815,12 +816,12 @@ impl<T> BTreeSet<T> {\n         Recover::replace(&mut self.map, value)\n     }\n \n-    /// Removes a value from the set. Returns whether the value was\n-    /// present in the set.\n+    /// If the set contains an element equal to the value, removes it from the\n+    /// set and drops it. Returns whether such an element was present.\n     ///\n-    /// The value may be any borrowed form of the set's value type,\n+    /// The value may be any borrowed form of the set's element type,\n     /// but the ordering on the borrowed form *must* match the\n-    /// ordering on the value type.\n+    /// ordering on the element type.\n     ///\n     /// # Examples\n     ///\n@@ -842,11 +843,12 @@ impl<T> BTreeSet<T> {\n         self.map.remove(value).is_some()\n     }\n \n-    /// Removes and returns the value in the set, if any, that is equal to the given one.\n+    /// Removes and returns the element in the set, if any, that is equal to\n+    /// the value.\n     ///\n-    /// The value may be any borrowed form of the set's value type,\n+    /// The value may be any borrowed form of the set's element type,\n     /// but the ordering on the borrowed form *must* match the\n-    /// ordering on the value type.\n+    /// ordering on the element type.\n     ///\n     /// # Examples\n     ///\n@@ -926,8 +928,8 @@ impl<T> BTreeSet<T> {\n         self.map.append(&mut other.map);\n     }\n \n-    /// Splits the collection into two at the given value. Returns everything after the given value,\n-    /// including the value.\n+    /// Splits the collection into two at the value. Returns a new collection\n+    /// with all elements greater than or equal to the value.\n     ///\n     /// # Examples\n     ///\n@@ -963,20 +965,20 @@ impl<T> BTreeSet<T> {\n         BTreeSet { map: self.map.split_off(value) }\n     }\n \n-    /// Creates an iterator that visits all values in ascending order and uses a closure\n-    /// to determine if a value should be removed.\n+    /// Creates an iterator that visits all elements in ascending order and\n+    /// uses a closure to determine if an element should be removed.\n     ///\n-    /// If the closure returns `true`, the value is removed from the set and yielded. If\n-    /// the closure returns `false`, or panics, the value remains in the set and will\n-    /// not be yielded.\n+    /// If the closure returns `true`, the element is removed from the set and\n+    /// yielded. If the closure returns `false`, or panics, the element remains\n+    /// in the set and will not be yielded.\n     ///\n-    /// If the iterator is only partially consumed or not consumed at all, each of the\n-    /// remaining values is still subjected to the closure and removed and dropped if it\n-    /// returns `true`.\n+    /// If the iterator is only partially consumed or not consumed at all, each\n+    /// of the remaining elements is still subjected to the closure and removed\n+    /// and dropped if it returns `true`.\n     ///\n-    /// It is unspecified how many more values will be subjected to the closure if a\n-    /// panic occurs in the closure, or if a panic occurs while dropping a value, or if\n-    /// the `DrainFilter` itself is leaked.\n+    /// It is unspecified how many more elements will be subjected to the\n+    /// closure if a panic occurs in the closure, or if a panic occurs while\n+    /// dropping an element, or if the `DrainFilter` itself is leaked.\n     ///\n     /// # Examples\n     ///\n@@ -1001,7 +1003,8 @@ impl<T> BTreeSet<T> {\n         DrainFilter { pred, inner: self.map.drain_filter_inner() }\n     }\n \n-    /// Gets an iterator that visits the values in the `BTreeSet` in ascending order.\n+    /// Gets an iterator that visits the elements in the `BTreeSet` in ascending\n+    /// order.\n     ///\n     /// # Examples\n     ///"}, {"sha": "bcf5f5f72510e199093cf978e87411166e3003bc", "filename": "library/alloc/src/collections/btree/testing/crash_test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87cda671e5da0b768c02ad72ed91c71740ef1bc3/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ftesting%2Fcrash_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87cda671e5da0b768c02ad72ed91c71740ef1bc3/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ftesting%2Fcrash_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ftesting%2Fcrash_test.rs?ref=87cda671e5da0b768c02ad72ed91c71740ef1bc3", "patch": "@@ -1,3 +1,4 @@\n+// We avoid relying on anything else in the crate, apart from the `Debug` trait.\n use crate::fmt::Debug;\n use std::cmp::Ordering;\n use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n@@ -7,8 +8,7 @@ use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n /// Events are `clone`, `drop` or some anonymous `query`.\n ///\n /// Crash test dummies are identified and ordered by an id, so they can be used\n-/// as keys in a BTreeMap. The implementation intentionally uses does not rely\n-/// on anything defined in the crate, apart from the `Debug` trait.\n+/// as keys in a BTreeMap.\n #[derive(Debug)]\n pub struct CrashTestDummy {\n     pub id: usize,"}]}