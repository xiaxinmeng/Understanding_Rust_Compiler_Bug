{"sha": "5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMGM2YTY5ZTA3NWQ5YzdkMTllMjgyNjRiYjg5NDFmNzJlY2FmNGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-19T16:37:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-19T16:37:58Z"}, "message": "Auto merge of #61962 - Centril:rollup-y6sg1zw, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #60667 ( Add functions for building raw slices to libcore )\n - #61547 (Support `cfg` and `cfg_attr` on generic parameters)\n - #61861 (Update rustfmt and rls)\n - #61940 (Make Place::ty iterate)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "340f2e3775fb368108e2fe31ba8b24c9aa521111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/340f2e3775fb368108e2fe31ba8b24c9aa521111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "html_url": "https://github.com/rust-lang/rust/commit/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e79b2a18a21e6b178d73473bb8fdbf3d18c66051", "url": "https://api.github.com/repos/rust-lang/rust/commits/e79b2a18a21e6b178d73473bb8fdbf3d18c66051", "html_url": "https://github.com/rust-lang/rust/commit/e79b2a18a21e6b178d73473bb8fdbf3d18c66051"}, {"sha": "bf6c505c23a1026282cc0518743c9cd6e727c2aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf6c505c23a1026282cc0518743c9cd6e727c2aa", "html_url": "https://github.com/rust-lang/rust/commit/bf6c505c23a1026282cc0518743c9cd6e727c2aa"}], "stats": {"total": 499, "additions": 286, "deletions": 213}, "files": [{"sha": "9af1c28b3c2bd98156d78f4af7c13e216e022497", "filename": "Cargo.lock", "status": "modified", "additions": 104, "deletions": 82, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "patch": "@@ -813,14 +813,6 @@ dependencies = [\n  \"strum_macros 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"ena\"\n-version = \"0.11.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"ena\"\n version = \"0.13.0\"\n@@ -2136,7 +2128,7 @@ dependencies = [\n \n [[package]]\n name = \"racer\"\n-version = \"2.1.22\"\n+version = \"2.1.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2147,7 +2139,7 @@ dependencies = [\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2375,7 +2367,7 @@ dependencies = [\n  \"lsp-types 0.57.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ordslice 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"racer 2.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"racer 2.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rayon 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2388,7 +2380,7 @@ dependencies = [\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0\",\n  \"rustc_tools_util 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustfmt-nightly 1.2.2\",\n+ \"rustfmt-nightly 1.3.0\",\n  \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.81 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2499,20 +2491,21 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-arena\"\n-version = \"407.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-graphviz\"\n-version = \"407.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_cratesio_shim\"\n-version = \"407.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2522,85 +2515,104 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"407.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ena 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ena 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-graphviz 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-graphviz 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-rayon 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-rayon-core 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-rayon-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"407.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"annotate-snippets 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustc-ap-rustc_macros\"\n+version = \"491.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"407.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"407.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"407.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"407.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-arena 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-arena 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -2632,16 +2644,6 @@ dependencies = [\n  \"rustc_target 0.0.0\",\n ]\n \n-[[package]]\n-name = \"rustc-rayon\"\n-version = \"0.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"crossbeam-deque 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-rayon-core 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"rustc-rayon\"\n version = \"0.2.0\"\n@@ -2652,17 +2654,6 @@ dependencies = [\n  \"rustc-rayon-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"rustc-rayon-core\"\n-version = \"0.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"crossbeam-deque 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"rustc-rayon-core\"\n version = \"0.2.0\"\n@@ -3212,9 +3203,19 @@ dependencies = [\n  \"serde_json 1.0.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustfmt-config_proc_macro\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rustfmt-nightly\"\n-version = \"1.2.2\"\n+version = \"1.3.0\"\n dependencies = [\n  \"annotate-snippets 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3231,13 +3232,14 @@ dependencies = [\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0\",\n+ \"rustfmt-config_proc_macro 0.1.0\",\n  \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.81 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3489,6 +3491,26 @@ name = \"strsim\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"structopt\"\n+version = \"0.2.16\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt-derive 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"structopt-derive\"\n+version = \"0.2.16\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"heck 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"strum\"\n version = \"0.11.0\"\n@@ -4344,7 +4366,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum dlmalloc 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f283302e035e61c23f2b86b3093e8c6273a4c3125742d6087e96ade001ca5e63\"\n \"checksum either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3be565ca5c557d7f59e7cfcf1844f9e3033650c929c6566f511e8005f205c1d0\"\n \"checksum elasticlunr-rs 2.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a99a310cd1f9770e7bf8e48810c7bcbb0e078c8fb23a8c7bcf0da4c2bf61a455\"\n-\"checksum ena 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f56c93cc076508c549d9bb747f79aa9b4eb098be7b8cad8830c3137ef52d1e00\"\n \"checksum ena 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dc01d68e08ca384955a3aeba9217102ca1aa85b6e168639bf27739f1d749d87\"\n \"checksum env_logger 0.5.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15b0a4d2e39f8420210be8b27eeda28029729e2fd4291019455016c348240c38\"\n \"checksum env_logger 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afb070faf94c85d17d50ca44f6ad076bce18ae92f0037d350947240a36e9d42e\"\n@@ -4483,7 +4504,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n \"checksum quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"faf4799c5d274f3868a4aae320a0a182cbd2baee377b378f080e16a23e9d80db\"\n-\"checksum racer 2.1.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e4323343f25bc372dc9293ac6b5cd3034b32784af1e7de9366b4db71466d8c7\"\n+\"checksum racer 2.1.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94dbdea3d959d8f76a2e303b3eadf107fd76da886b231291e649168613d432fb\"\n \"checksum rand 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"552840b97013b1a26992c11eac34bdd778e464601a4c2054b5f0bff7c6761293\"\n \"checksum rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae9d223d52ae411a33cf7e54ec6034ec165df296ccd23533d671a28252b6f66a\"\n \"checksum rand_chacha 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"771b009e3a508cb67e8823dda454aaa5368c7bc1c16829fb77d3e980440dd34a\"\n@@ -4510,20 +4531,19 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rls-data 0.19.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76c72ea97e045be5f6290bb157ebdc5ee9f2b093831ff72adfaf59025cf5c491\"\n \"checksum rls-span 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1cb4694410d8d2ce43ccff3682f1c782158a018d5a9a92185675677f7533eb3\"\n \"checksum rls-vfs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ce4b57b25b4330ed5ec14028fc02141e083ddafda327e7eb598dc0569c8c83c9\"\n-\"checksum rustc-ap-arena 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5aab2fb5e5becf1c9183f6c63b8714817a3e780a20b4fe6b3920751c98a18225\"\n-\"checksum rustc-ap-graphviz 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0235ff613d4f96176ea56748010b5d8e978605cc47856ba9bb5372f4f38e9c03\"\n-\"checksum rustc-ap-rustc_cratesio_shim 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"63e04a90b0dd8597da83633961698c61a2948f50c9d4b9a71e8afafc0ba0f158\"\n-\"checksum rustc-ap-rustc_data_structures 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c03988d65fc5130787df32e8ea91738f78a8ed62b7a5bdd77f10e5cceb531d8e\"\n-\"checksum rustc-ap-rustc_errors 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8b33b9dc34f9fa50bf7e6fd14f2f3c1adc69833acf43c10f3e9795bd4d613712\"\n-\"checksum rustc-ap-rustc_target 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e6de75caef2c7acba11994614266d60238653657677934817ab368d169333cba\"\n-\"checksum rustc-ap-serialize 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf09c60aaee892b0fd107544cfe607d8d463e7f33da34aa823566b8fd2b17f53\"\n-\"checksum rustc-ap-syntax 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"69f38cc120ff317678bbda8c4f58c1bbc1de64b615383ab01480482dde5e95a1\"\n-\"checksum rustc-ap-syntax_pos 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20a0a201141c5c416b1924b079eeefc7b013e34ece0740ce4997f358b3684a7f\"\n+\"checksum rustc-ap-arena 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc0ad4318f3425229ed7b117275368b83269bec75f9609d4965dcb9752483c86\"\n+\"checksum rustc-ap-graphviz 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b80b7ea7902919f397c4bb12d102abe896fced7893d09d84bcac233e555bb388\"\n+\"checksum rustc-ap-rustc_cratesio_shim 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"752463d2b80039d23e42e667a9f6fe08213bd865f6ea301fb35f8068d94955ac\"\n+\"checksum rustc-ap-rustc_data_structures 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5c3d6a14181e11c132d0ef97a6c27e1bb1d4da09682d02222393875c10d1c364\"\n+\"checksum rustc-ap-rustc_errors 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"55caea8426565de362e8df0df737e43b9f22d632e0e52710cbfe316acc6ce2f0\"\n+\"checksum rustc-ap-rustc_macros 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"071420d762d2c779d1d4972356f37f5d049dcdd6c49e78f1b037e04c5a0f1a19\"\n+\"checksum rustc-ap-rustc_target 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d5464696d0748e3019b9e5daca5fcadc53889dc2bca1dc26bf42001fd1c4194f\"\n+\"checksum rustc-ap-serialize 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9464445c11c15cf32ef27815b3ec89315b0ed73c6c771cbcf8543be59a3c1502\"\n+\"checksum rustc-ap-syntax 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff53245ae370d8e8073dc9cc13f8921e6110d0ccd208b64c388c5653fa6b9c83\"\n+\"checksum rustc-ap-syntax_pos 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41896f0eb2eb2f4ddba406939aa6b07386160fa38bee8cde3f7f0d85663e3d47\"\n \"checksum rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7f4dccf6f4891ebcc0c39f9b6eb1a83b9bf5d747cb439ec6fba4f3b977038af\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n-\"checksum rustc-rayon 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8d98c51d9cbbe810c8b6693236d3412d8cd60513ff27a3e1b6af483dca0af544\"\n \"checksum rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d2e07e19601f21c59aad953c2632172ba70cb27e685771514ea66e4062b3363\"\n-\"checksum rustc-rayon-core 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"526e7b6d2707a5b9bec3927d424ad70fa3cfc68e0ac1b75e46cdbbc95adc5108\"\n \"checksum rustc-rayon-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"79d38ca7cbc22fa59f09d8534ea4b27f67b0facf0cbe274433aceea227a02543\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n \"checksum rustc_tools_util 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b725dadae9fabc488df69a287f5a99c5eaf5d10853842a8a3dfac52476f544ee\"\n@@ -4557,6 +4577,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b1884d1bc09741d466d9b14e6d37ac89d6909cbcac41dd9ae982d4d063bbedfc\"\n \"checksum strip-ansi-escapes 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d63676e2abafa709460982ddc02a3bb586b6d15a49b75c212e06edd3933acee\"\n \"checksum strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb4f380125926a99e52bc279241539c018323fab05ad6368b56f93d9369ff550\"\n+\"checksum structopt 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa19a5a708e22bb5be31c1b6108a2a902f909c4b9ba85cba44c06632386bc0ff\"\n+\"checksum structopt-derive 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6d59d0ae8ef8de16e49e3ca7afa16024a3e0dfd974a75ef93fdc5464e34523f\"\n \"checksum strum 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6c3a2071519ab6a48f465808c4c1ffdd00dfc8e93111d02b4fc5abab177676e\"\n \"checksum strum_macros 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8baacebd7b7c9b864d83a6ba7a246232983e277b86fa5cdec77f565715a4b136\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\""}, {"sha": "ba88fde6ebc97afa70aa3f7eddecafd1b93171ea", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "patch": "@@ -230,6 +230,53 @@ pub const fn null<T>() -> *const T { 0 as *const T }\n #[rustc_promotable]\n pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n \n+#[repr(C)]\n+pub(crate) union Repr<T> {\n+    pub(crate) rust: *const [T],\n+    rust_mut: *mut [T],\n+    pub(crate) raw: FatPtr<T>,\n+}\n+\n+#[repr(C)]\n+pub(crate) struct FatPtr<T> {\n+    data: *const T,\n+    pub(crate) len: usize,\n+}\n+\n+/// Forms a slice from a pointer and a length.\n+///\n+/// The `len` argument is the number of **elements**, not the number of bytes.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// #![feature(slice_from_raw_parts)]\n+/// use std::ptr;\n+///\n+/// // create a slice pointer when starting out with a pointer to the first element\n+/// let mut x = [5, 6, 7];\n+/// let ptr = &mut x[0] as *mut _;\n+/// let slice = ptr::slice_from_raw_parts_mut(ptr, 3);\n+/// assert_eq!(unsafe { &*slice }[2], 7);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"slice_from_raw_parts\", reason = \"recently added\", issue = \"36925\")]\n+pub fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n+    unsafe { Repr { raw: FatPtr { data, len } }.rust }\n+}\n+\n+/// Performs the same functionality as [`from_raw_parts`], except that a\n+/// mutable slice is returned.\n+///\n+/// See the documentation of [`from_raw_parts`] for more details.\n+///\n+/// [`from_raw_parts`]: ../../std/slice/fn.from_raw_parts.html\n+#[inline]\n+#[unstable(feature = \"slice_from_raw_parts\", reason = \"recently added\", issue = \"36925\")]\n+pub fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n+    unsafe { Repr { raw: FatPtr { data, len } }.rust_mut }\n+}\n+\n /// Swaps the values at two mutable locations of the same type, without\n /// deinitializing either.\n ///"}, {"sha": "af1b20a4c10cfc0539fba0d835bebca40b3994aa", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "patch": "@@ -45,19 +45,6 @@ pub mod memchr;\n mod rotate;\n mod sort;\n \n-#[repr(C)]\n-union Repr<'a, T: 'a> {\n-    rust: &'a [T],\n-    rust_mut: &'a mut [T],\n-    raw: FatPtr<T>,\n-}\n-\n-#[repr(C)]\n-struct FatPtr<T> {\n-    data: *const T,\n-    len: usize,\n-}\n-\n //\n // Extension traits\n //\n@@ -78,7 +65,7 @@ impl<T> [T] {\n     #[rustc_const_unstable(feature = \"const_slice_len\")]\n     pub const fn len(&self) -> usize {\n         unsafe {\n-            Repr { rust: self }.raw.len\n+            crate::ptr::Repr { rust: self }.raw.len\n         }\n     }\n \n@@ -5195,7 +5182,7 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n     debug_assert!(data as usize % mem::align_of::<T>() == 0, \"attempt to create unaligned slice\");\n     debug_assert!(mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n                   \"attempt to create slice covering half the address space\");\n-    Repr { raw: FatPtr { data, len } }.rust\n+    &*ptr::slice_from_raw_parts(data, len)\n }\n \n /// Performs the same functionality as [`from_raw_parts`], except that a\n@@ -5216,7 +5203,7 @@ pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T]\n     debug_assert!(data as usize % mem::align_of::<T>() == 0, \"attempt to create unaligned slice\");\n     debug_assert!(mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n                   \"attempt to create slice covering half the address space\");\n-    Repr { raw: FatPtr { data, len } }.rust_mut\n+    &mut *ptr::slice_from_raw_parts_mut(data, len)\n }\n \n /// Converts a reference to T into a slice of length 1 (without copying)."}, {"sha": "2079a2a34e7effb5813492e1f875c47e64a7d7b3", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "patch": "@@ -122,13 +122,25 @@ impl<'tcx> Place<'tcx> {\n     where\n         D: HasLocalDecls<'tcx>,\n     {\n-        match *self {\n-            Place::Base(PlaceBase::Local(index)) =>\n-                PlaceTy::from_ty(local_decls.local_decls()[index].ty),\n-            Place::Base(PlaceBase::Static(ref data)) =>\n-                PlaceTy::from_ty(data.ty),\n-            Place::Projection(ref proj) =>\n-                proj.base.ty(local_decls, tcx).projection_ty(tcx, &proj.elem),\n+        self.iterate(|place_base, place_projections| {\n+            let mut place_ty = place_base.ty(local_decls);\n+\n+            for proj in place_projections {\n+                place_ty = place_ty.projection_ty(tcx, &proj.elem);\n+            }\n+\n+            place_ty\n+        })\n+    }\n+}\n+\n+impl<'tcx> PlaceBase<'tcx> {\n+    pub fn ty<D>(&self, local_decls: &D) -> PlaceTy<'tcx>\n+        where D: HasLocalDecls<'tcx>\n+    {\n+        match self {\n+            PlaceBase::Local(index) => PlaceTy::from_ty(local_decls.local_decls()[*index].ty),\n+            PlaceBase::Static(data) => PlaceTy::from_ty(data.ty),\n         }\n     }\n }"}, {"sha": "3b42e1de61497244f0fb038431d7ed9e507d8f7f", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "patch": "@@ -240,6 +240,10 @@ impl<'a> StripUnconfigured<'a> {\n         items.flat_map_in_place(|item| self.configure(item));\n     }\n \n+    pub fn configure_generic_params(&mut self, params: &mut Vec<ast::GenericParam>) {\n+        params.flat_map_in_place(|param| self.configure(param));\n+    }\n+\n     fn configure_variant_data(&mut self, vdata: &mut ast::VariantData) {\n         match vdata {\n             ast::VariantData::Struct(fields, ..) | ast::VariantData::Tuple(fields, _) =>\n@@ -301,22 +305,6 @@ impl<'a> StripUnconfigured<'a> {\n     pub fn configure_fn_decl(&mut self, fn_decl: &mut ast::FnDecl) {\n         fn_decl.inputs.flat_map_in_place(|arg| self.configure(arg));\n     }\n-\n-    /// Denies `#[cfg]` on generic parameters until we decide what to do with it.\n-    /// See issue #51279.\n-    pub fn disallow_cfg_on_generic_param(&mut self, param: &ast::GenericParam) {\n-        for attr in param.attrs() {\n-            let offending_attr = if attr.check_name(sym::cfg) {\n-                \"cfg\"\n-            } else if attr.check_name(sym::cfg_attr) {\n-                \"cfg_attr\"\n-            } else {\n-                continue;\n-            };\n-            let msg = format!(\"#[{}] cannot be applied on a generic parameter\", offending_attr);\n-            self.sess.span_diagnostic.span_err(attr.span, &msg);\n-        }\n-    }\n }\n \n impl<'a> MutVisitor for StripUnconfigured<'a> {"}, {"sha": "cfd67575b6fe120ac720d12bb3e776e73143b5be", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "patch": "@@ -1329,9 +1329,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n     }\n \n-    fn visit_generic_param(&mut self, param: &mut ast::GenericParam) {\n-        self.cfg.disallow_cfg_on_generic_param(&param);\n-        noop_visit_generic_param(param, self)\n+    fn visit_generic_params(&mut self, params: &mut Vec<ast::GenericParam>) {\n+        self.cfg.configure_generic_params(params);\n+        noop_visit_generic_params(params, self);\n     }\n \n     fn visit_attribute(&mut self, at: &mut ast::Attribute) {"}, {"sha": "d80d3ea7b7fe9a1f33560c7c4772822f1417e381", "filename": "src/test/ui/conditional-compilation/cfg-generic-params.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.rs?ref=5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "patch": "@@ -0,0 +1,38 @@\n+// compile-flags:--cfg yes\n+\n+fn f_lt<#[cfg(yes)] 'a: 'a, #[cfg(no)] T>() {}\n+fn f_ty<#[cfg(no)] 'a: 'a, #[cfg(yes)] T>() {}\n+\n+type FnGood = for<#[cfg(yes)] 'a, #[cfg(no)] T> fn(); // OK\n+type FnBad = for<#[cfg(no)] 'a, #[cfg(yes)] T> fn();\n+//~^ ERROR only lifetime parameters can be used in this context\n+\n+type PolyGood = dyn for<#[cfg(yes)] 'a, #[cfg(no)] T> Copy; // OK\n+type PolyBad = dyn for<#[cfg(no)] 'a, #[cfg(yes)] T> Copy;\n+//~^ ERROR only lifetime parameters can be used in this context\n+\n+struct WhereGood where for<#[cfg(yes)] 'a, #[cfg(no)] T> u8: Copy; // OK\n+struct WhereBad where for<#[cfg(no)] 'a, #[cfg(yes)] T> u8: Copy;\n+//~^ ERROR only lifetime parameters can be used in this context\n+\n+fn f_lt_no<#[cfg_attr(no, unknown)] 'a>() {} // OK\n+fn f_lt_yes<#[cfg_attr(yes, unknown)] 'a>() {} //~ ERROR attribute `unknown` is currently unknown\n+fn f_ty_no<#[cfg_attr(no, unknown)] T>() {} // OK\n+fn f_ty_yes<#[cfg_attr(yes, unknown)] T>() {} //~ ERROR attribute `unknown` is currently unknown\n+\n+type FnNo = for<#[cfg_attr(no, unknown)] 'a> fn(); // OK\n+type FnYes = for<#[cfg_attr(yes, unknown)] 'a> fn();\n+//~^ ERROR attribute `unknown` is currently unknown\n+\n+type PolyNo = dyn for<#[cfg_attr(no, unknown)] 'a> Copy; // OK\n+type PolyYes = dyn for<#[cfg_attr(yes, unknown)] 'a> Copy;\n+//~^ ERROR attribute `unknown` is currently unknown\n+\n+struct WhereNo where for<#[cfg_attr(no, unknown)] 'a> u8: Copy; // OK\n+struct WhereYes where for<#[cfg_attr(yes, unknown)] 'a> u8: Copy;\n+//~^ ERROR attribute `unknown` is currently unknown\n+\n+fn main() {\n+    f_lt::<'static>();\n+    f_ty::<u8>();\n+}"}, {"sha": "40ca44d9db59c7f1b26728a3aef09831b737abf8", "filename": "src/test/ui/conditional-compilation/cfg-generic-params.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr?ref=5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "patch": "@@ -0,0 +1,66 @@\n+error: only lifetime parameters can be used in this context\n+  --> $DIR/cfg-generic-params.rs:7:45\n+   |\n+LL | type FnBad = for<#[cfg(no)] 'a, #[cfg(yes)] T> fn();\n+   |                                             ^\n+\n+error: only lifetime parameters can be used in this context\n+  --> $DIR/cfg-generic-params.rs:11:51\n+   |\n+LL | type PolyBad = dyn for<#[cfg(no)] 'a, #[cfg(yes)] T> Copy;\n+   |                                                   ^\n+\n+error: only lifetime parameters can be used in this context\n+  --> $DIR/cfg-generic-params.rs:15:54\n+   |\n+LL | struct WhereBad where for<#[cfg(no)] 'a, #[cfg(yes)] T> u8: Copy;\n+   |                                                      ^\n+\n+error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/cfg-generic-params.rs:19:29\n+   |\n+LL | fn f_lt_yes<#[cfg_attr(yes, unknown)] 'a>() {}\n+   |                             ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/cfg-generic-params.rs:21:29\n+   |\n+LL | fn f_ty_yes<#[cfg_attr(yes, unknown)] T>() {}\n+   |                             ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/cfg-generic-params.rs:24:34\n+   |\n+LL | type FnYes = for<#[cfg_attr(yes, unknown)] 'a> fn();\n+   |                                  ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/cfg-generic-params.rs:28:40\n+   |\n+LL | type PolyYes = dyn for<#[cfg_attr(yes, unknown)] 'a> Copy;\n+   |                                        ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/cfg-generic-params.rs:32:43\n+   |\n+LL | struct WhereYes where for<#[cfg_attr(yes, unknown)] 'a> u8: Copy;\n+   |                                           ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "f8f3626caabe7bd3f97d5190d8199c15ae310254", "filename": "src/test/ui/issues/issue-51279.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e79b2a18a21e6b178d73473bb8fdbf3d18c66051/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e79b2a18a21e6b178d73473bb8fdbf3d18c66051/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs?ref=e79b2a18a21e6b178d73473bb8fdbf3d18c66051", "patch": "@@ -1,27 +0,0 @@\n-pub struct X<#[cfg(none)] 'a, #[cfg(none)] T>(&'a T);\n-//~^ ERROR #[cfg] cannot be applied on a generic parameter\n-//~^^ ERROR #[cfg] cannot be applied on a generic parameter\n-\n-impl<#[cfg(none)] 'a, #[cfg(none)] T> X<'a, T> {}\n-//~^ ERROR #[cfg] cannot be applied on a generic parameter\n-//~^^ ERROR #[cfg] cannot be applied on a generic parameter\n-\n-pub fn f<#[cfg(none)] 'a, #[cfg(none)] T>(_: &'a T) {}\n-//~^ ERROR #[cfg] cannot be applied on a generic parameter\n-//~^^ ERROR #[cfg] cannot be applied on a generic parameter\n-\n-#[cfg(none)]\n-pub struct Y<#[cfg(none)] T>(T); // shouldn't care when the entire item is stripped out\n-\n-struct M<T>(*const T);\n-\n-impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n-    //~^ ERROR #[cfg_attr] cannot be applied on a generic parameter\n-    fn drop(&mut self) {}\n-}\n-\n-type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n-//~^ ERROR #[cfg] cannot be applied on a generic parameter\n-//~| ERROR attribute `ignored` is currently unknown to the compiler\n-\n-fn main() {}"}, {"sha": "9dd4a9f23814cb9b10fac4c4a2e527d136524caf", "filename": "src/test/ui/issues/issue-51279.stderr", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e79b2a18a21e6b178d73473bb8fdbf3d18c66051/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e79b2a18a21e6b178d73473bb8fdbf3d18c66051/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr?ref=e79b2a18a21e6b178d73473bb8fdbf3d18c66051", "patch": "@@ -1,60 +0,0 @@\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:1:14\n-   |\n-LL | pub struct X<#[cfg(none)] 'a, #[cfg(none)] T>(&'a T);\n-   |              ^^^^^^^^^^^^\n-\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:1:31\n-   |\n-LL | pub struct X<#[cfg(none)] 'a, #[cfg(none)] T>(&'a T);\n-   |                               ^^^^^^^^^^^^\n-\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:5:6\n-   |\n-LL | impl<#[cfg(none)] 'a, #[cfg(none)] T> X<'a, T> {}\n-   |      ^^^^^^^^^^^^\n-\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:5:23\n-   |\n-LL | impl<#[cfg(none)] 'a, #[cfg(none)] T> X<'a, T> {}\n-   |                       ^^^^^^^^^^^^\n-\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:9:10\n-   |\n-LL | pub fn f<#[cfg(none)] 'a, #[cfg(none)] T>(_: &'a T) {}\n-   |          ^^^^^^^^^^^^\n-\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:9:27\n-   |\n-LL | pub fn f<#[cfg(none)] 'a, #[cfg(none)] T>(_: &'a T) {}\n-   |                           ^^^^^^^^^^^^\n-\n-error: #[cfg_attr] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:18:6\n-   |\n-LL | impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:23:23\n-   |\n-LL | type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n-   |                       ^^^^^^^^^^^^\n-\n-error[E0658]: The attribute `ignored` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/issue-51279.rs:23:8\n-   |\n-LL | type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n-   |        ^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n-\n-error: aborting due to 9 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "3e519650cea91a4b785cd773a3e5965553f74249", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "patch": "@@ -1 +1 @@\n-Subproject commit 483dcbc73f9923e98c71ec9df11ee3d0d5cfb467\n+Subproject commit 3e519650cea91a4b785cd773a3e5965553f74249"}, {"sha": "d33450247b17d92a951d9663822c5a3635a37dde", "filename": "src/tools/rustfmt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt?ref=5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "patch": "@@ -1 +1 @@\n-Subproject commit 5274b49caa1a7db6ac10c76bf1a3d5710ccef569\n+Subproject commit d33450247b17d92a951d9663822c5a3635a37dde"}]}