{"sha": "667a54623dde8c96255bf4817cd7210a0a9035f2", "node_id": "C_kwDOAAsO6NoAKDY2N2E1NDYyM2RkZThjOTYyNTViZjQ4MTdjZDcyMTBhMGE5MDM1ZjI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-23T21:39:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-23T21:39:14Z"}, "message": "Rollup merge of #98365 - jyn514:improve-obligation-errors-review-comments, r=eholk\n\nAddress review comments from #98259\n\nIt got approved so fast I didn't have time to make changes xD\n\nr? ``@eholk``", "tree": {"sha": "3ccda3dcdbed62463845eb18509dd9b3ee84982f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ccda3dcdbed62463845eb18509dd9b3ee84982f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/667a54623dde8c96255bf4817cd7210a0a9035f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJitN2CCRBK7hj4Ov3rIwAAw9gIAHAqlZDrLpxB1yK+mW/Rs/7Q\nHa4b5g2WQlyyPxqd6ih+5BpUuXB3qOhwnSpH25L1gwYZr4un2hrAXzWCJoy5Akle\nYzA3uJDcBZjvjyyKa1SKFUtO+IYfKDA0v5U0MoZUn4tyvEnjSO9GYSqTPsGWCRcQ\nzCm41akrO2vG7aEuYw4b9qLMp3THdw8S6c3NyOZ7Sn0bBKBmNlhe2N5c2kDuOp0q\ntvVa2UekLDRKQ11UPIM2Lc8aCC1lAxUz73Im0jZem06xFtoItoj8iGBDfoGLOZrG\n1geu5f2QavS2YmRIjEMQa/i4649+0E5/k4T0R32dNNqogwo7ssCJXAjqvt2Gm/s=\n=OUl8\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ccda3dcdbed62463845eb18509dd9b3ee84982f\nparent e749ba20616de16d0643d1dd2155bd32fd02d51f\nparent b052d76586988040c6ae8aef609794ae16cc28dc\nauthor Michael Goulet <michael@errs.io> 1656020354 -0700\ncommitter GitHub <noreply@github.com> 1656020354 -0700\n\nRollup merge of #98365 - jyn514:improve-obligation-errors-review-comments, r=eholk\n\nAddress review comments from #98259\n\nIt got approved so fast I didn't have time to make changes xD\n\nr? ``@eholk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/667a54623dde8c96255bf4817cd7210a0a9035f2", "html_url": "https://github.com/rust-lang/rust/commit/667a54623dde8c96255bf4817cd7210a0a9035f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/667a54623dde8c96255bf4817cd7210a0a9035f2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e749ba20616de16d0643d1dd2155bd32fd02d51f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e749ba20616de16d0643d1dd2155bd32fd02d51f", "html_url": "https://github.com/rust-lang/rust/commit/e749ba20616de16d0643d1dd2155bd32fd02d51f"}, {"sha": "b052d76586988040c6ae8aef609794ae16cc28dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b052d76586988040c6ae8aef609794ae16cc28dc", "html_url": "https://github.com/rust-lang/rust/commit/b052d76586988040c6ae8aef609794ae16cc28dc"}], "stats": {"total": 58, "additions": 27, "deletions": 31}, "files": [{"sha": "c3df9a66fe7186881df6ab4c29b8501ef23e98ed", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/667a54623dde8c96255bf4817cd7210a0a9035f2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/667a54623dde8c96255bf4817cd7210a0a9035f2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=667a54623dde8c96255bf4817cd7210a0a9035f2", "patch": "@@ -74,7 +74,7 @@ use std::mem;\n use std::ops::{Bound, Deref};\n use std::sync::Arc;\n \n-use super::RvalueScopes;\n+use super::{ImplPolarity, RvalueScopes};\n \n pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n@@ -2230,6 +2230,20 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n+    /// Given a `ty`, return whether it's an `impl Future<...>`.\n+    pub fn ty_is_opaque_future(self, ty: Ty<'_>) -> bool {\n+        let ty::Opaque(def_id, _) = ty.kind() else { return false };\n+        let future_trait = self.lang_items().future_trait().unwrap();\n+\n+        self.explicit_item_bounds(def_id).iter().any(|(predicate, _)| {\n+            let ty::PredicateKind::Trait(trait_predicate) = predicate.kind().skip_binder() else {\n+                return false;\n+            };\n+            trait_predicate.trait_ref.def_id == future_trait\n+                && trait_predicate.polarity == ImplPolarity::Positive\n+        })\n+    }\n+\n     /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)\n     /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used\n     /// to identify which traits may define a given associated type to help avoid cycle errors."}, {"sha": "fbe66d7dcdd2bd98e0fb4589383139017178fdba", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/667a54623dde8c96255bf4817cd7210a0a9035f2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/667a54623dde8c96255bf4817cd7210a0a9035f2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=667a54623dde8c96255bf4817cd7210a0a9035f2", "patch": "@@ -8,7 +8,6 @@ use crate::infer::InferCtxt;\n use crate::traits::normalize_to;\n \n use hir::HirId;\n-use rustc_ast::Movability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n@@ -2395,19 +2394,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 };\n \n-                let future_trait = self.tcx.lang_items().future_trait().unwrap();\n-                let opaque_ty_is_future = |def_id| {\n-                    self.tcx.explicit_item_bounds(def_id).iter().any(|(predicate, _)| {\n-                        if let ty::PredicateKind::Trait(trait_predicate) =\n-                            predicate.kind().skip_binder()\n-                        {\n-                            trait_predicate.trait_ref.def_id == future_trait\n-                        } else {\n-                            false\n-                        }\n-                    })\n-                };\n-\n                 let from_generator = tcx.lang_items().from_generator_fn().unwrap();\n \n                 // Don't print the tuple of capture types\n@@ -2433,13 +2419,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                                 // If the previous type is `from_generator`, this is the future generated by the body of an async function.\n                                 // Avoid printing it twice (it was already printed in the `ty::Generator` arm below).\n-                                let is_future = opaque_ty_is_future(def_id);\n+                                let is_future = tcx.ty_is_opaque_future(ty);\n                                 debug!(\n                                     ?obligated_types,\n                                     ?is_future,\n                                     \"note_obligation_cause_code: check for async fn\"\n                                 );\n-                                if opaque_ty_is_future(def_id)\n+                                if is_future\n                                     && obligated_types.last().map_or(false, |ty| match ty.kind() {\n                                         ty::Opaque(last_def_id, _) => {\n                                             tcx.parent(*last_def_id) == from_generator\n@@ -2464,15 +2450,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 }\n                                 err.note(msg.trim_end_matches(\", \"))\n                             }\n-                            ty::Generator(def_id, _, movability) => {\n+                            ty::Generator(def_id, _, _) => {\n                                 let sp = self.tcx.def_span(def_id);\n \n                                 // Special-case this to say \"async block\" instead of `[static generator]`.\n-                                let kind = if *movability == Movability::Static {\n-                                    \"async block\"\n-                                } else {\n-                                    \"generator\"\n-                                };\n+                                let kind = tcx.generator_kind(def_id).unwrap();\n                                 err.span_note(\n                                     sp,\n                                     &format!(\"required because it's used within this {}\", kind),"}, {"sha": "4285fbbeceb604f72011b33290dfc7ed0cfe46be", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/667a54623dde8c96255bf4817cd7210a0a9035f2/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/667a54623dde8c96255bf4817cd7210a0a9035f2/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=667a54623dde8c96255bf4817cd7210a0a9035f2", "patch": "@@ -42,7 +42,7 @@ LL |     require_send(send_fut);\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n-note: required because it's used within this async block\n+note: required because it's used within this `async fn` body\n   --> $DIR/issue-68112.rs:47:31\n    |\n LL | async fn ready2<T>(t: T) -> T { t }\n@@ -53,7 +53,7 @@ note: required because it appears within the type `impl Future<Output = Arc<RefC\n LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `i32`, `Ready<i32>`\n-note: required because it's used within this async block\n+note: required because it's used within this `async` block\n   --> $DIR/issue-68112.rs:55:26\n    |\n LL |       let send_fut = async {"}, {"sha": "43b7cb8cece365d8b488b449db1a2e7b33ea0702", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/667a54623dde8c96255bf4817cd7210a0a9035f2/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/667a54623dde8c96255bf4817cd7210a0a9035f2/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=667a54623dde8c96255bf4817cd7210a0a9035f2", "patch": "@@ -14,7 +14,7 @@ LL |           baz(|| async{\n LL | |             foo(tx.clone());\n LL | |         }).await;\n    | |_________^\n-note: required because it's used within this async block\n+note: required because it's used within this `async fn` body\n   --> $DIR/issue-70935-complex-spans.rs:9:67\n    |\n LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n@@ -23,7 +23,7 @@ LL | |\n LL | | }\n    | |_^\n    = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = ()>`, `()`\n-note: required because it's used within this async block\n+note: required because it's used within this `async` block\n   --> $DIR/issue-70935-complex-spans.rs:23:16\n    |\n LL |       async move {"}, {"sha": "f45ce1f25efa0b7a6364ad1171911ab49aa5bb78", "filename": "src/test/ui/async-await/issue-70935-complex-spans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/667a54623dde8c96255bf4817cd7210a0a9035f2/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/667a54623dde8c96255bf4817cd7210a0a9035f2/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs?ref=667a54623dde8c96255bf4817cd7210a0a9035f2", "patch": "@@ -7,7 +7,7 @@\n use std::future::Future;\n \n async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n-//[drop_tracking]~^ within this async block\n+//[drop_tracking]~^ within this `async fn` body\n }\n \n fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n@@ -21,7 +21,7 @@ fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n     //[drop_tracking]~|  NOTE: in this expansion\n     //[drop_tracking]~|  NOTE: in this expansion\n     async move {\n-    //[drop_tracking]~^ within this async block\n+    //[drop_tracking]~^ within this `async` block\n         baz(|| async{ //[drop_tracking]~ NOTE: used within this closure\n             foo(tx.clone());\n         }).await;"}, {"sha": "fe0fce7afd9f9c8a4a21d5e37579102a6b178366", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/667a54623dde8c96255bf4817cd7210a0a9035f2/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/667a54623dde8c96255bf4817cd7210a0a9035f2/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs?ref=667a54623dde8c96255bf4817cd7210a0a9035f2", "patch": "@@ -26,7 +26,7 @@ impl Drop for NotSend {\n impl !Send for NotSend {}\n \n async fn foo() {\n-//~^ NOTE used within this async block\n+//~^ NOTE used within this `async fn` body\n //~| NOTE within this `impl Future\n     let mut x = (NotSend {},);\n     drop(x.0);"}, {"sha": "05f5358340a9877866270449c9af8702fd094606", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/667a54623dde8c96255bf4817cd7210a0a9035f2/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/667a54623dde8c96255bf4817cd7210a0a9035f2/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr?ref=667a54623dde8c96255bf4817cd7210a0a9035f2", "patch": "@@ -12,7 +12,7 @@ LL | async fn foo() {\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `NotSend`\n    = note: required because it appears within the type `(NotSend,)`\n    = note: required because it captures the following types: `ResumeTy`, `(NotSend,)`, `impl Future<Output = ()>`, `()`\n-note: required because it's used within this async block\n+note: required because it's used within this `async fn` body\n   --> $DIR/partial-drop-partial-reinit.rs:28:16\n    |\n LL |   async fn foo() {"}]}