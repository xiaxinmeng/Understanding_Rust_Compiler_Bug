{"sha": "3c87772a8a4f00cfcce26615ae7808f278c61c44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjODc3NzJhOGE0ZjAwY2ZjY2UyNjYxNWFlNzgwOGYyNzhjNjFjNDQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-01-04T18:22:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-04T18:22:48Z"}, "message": "Rollup merge of #67709 - petrochenkov:nodedup2, r=Centril\n\nIntroduce an option for disabling deduplication of diagnostics\n\nWith the intent of using it in UI tests (https://github.com/rust-lang/rust/pull/67122).\n\nThe option is boolean (`-Z deduplicate-diagnostics=yes/no`) and can be specified multiple times with later values overriding earlier values (`-Z deduplicate-diagnostics=no -Z deduplicate-diagnostics=yes` == `-Z deduplicate-diagnostics=yes`), so it can be set in a hierarchical way, e.g. UI testing infra may disable the deduplication by default with specific tests being able to enable it back.", "tree": {"sha": "400cb52b902d96f7be1ea66eeea50cb63ba37ba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/400cb52b902d96f7be1ea66eeea50cb63ba37ba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c87772a8a4f00cfcce26615ae7808f278c61c44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeENf4CRBK7hj4Ov3rIwAAdHIIAE5ZXNsNgRfZtN6hC7c4hEkp\nCG8gHJX7aaW3Cd+UoBzkEo5YC98o+rYn/tkDqks1q3RFbW8SlPBBIJM26c6aO2pN\nxD4Z2UTpe34d4U1MkB/EEyr6izD8aViNKNV/9RzCT9hh1YcXkSv0cJ156n+cdv6M\nw9757WTVYV2b88v6VK8t3wck4RGGPKbOo75R0+KPhIJ5n1ZJwsOuxmojlygBZ4O6\n87Dmicv1C5OGTYfUlUVG9jeB/6OnyTsvYXxHM5xLdpsjRysmvV9HfmQDep3I7p4a\nqRlPpuRmshuAqHcdBFrlzNNVx1kN5uuBNYN8Q9aUnotWVpzgzfan3Af4cZ0vuG4=\n=OeNb\n-----END PGP SIGNATURE-----\n", "payload": "tree 400cb52b902d96f7be1ea66eeea50cb63ba37ba8\nparent cce055daef93bfa50b11b1d3368811fe586d8a42\nparent 5bf810599306fd880b0946ecb3e1ec37ca72762f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1578162168 +0530\ncommitter GitHub <noreply@github.com> 1578162168 +0530\n\nRollup merge of #67709 - petrochenkov:nodedup2, r=Centril\n\nIntroduce an option for disabling deduplication of diagnostics\n\nWith the intent of using it in UI tests (https://github.com/rust-lang/rust/pull/67122).\n\nThe option is boolean (`-Z deduplicate-diagnostics=yes/no`) and can be specified multiple times with later values overriding earlier values (`-Z deduplicate-diagnostics=no -Z deduplicate-diagnostics=yes` == `-Z deduplicate-diagnostics=yes`), so it can be set in a hierarchical way, e.g. UI testing infra may disable the deduplication by default with specific tests being able to enable it back.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c87772a8a4f00cfcce26615ae7808f278c61c44", "html_url": "https://github.com/rust-lang/rust/commit/3c87772a8a4f00cfcce26615ae7808f278c61c44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c87772a8a4f00cfcce26615ae7808f278c61c44/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cce055daef93bfa50b11b1d3368811fe586d8a42", "url": "https://api.github.com/repos/rust-lang/rust/commits/cce055daef93bfa50b11b1d3368811fe586d8a42", "html_url": "https://github.com/rust-lang/rust/commit/cce055daef93bfa50b11b1d3368811fe586d8a42"}, {"sha": "5bf810599306fd880b0946ecb3e1ec37ca72762f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf810599306fd880b0946ecb3e1ec37ca72762f", "html_url": "https://github.com/rust-lang/rust/commit/5bf810599306fd880b0946ecb3e1ec37ca72762f"}], "stats": {"total": 130, "additions": 67, "deletions": 63}, "files": [{"sha": "2279ed859540811d6d45d536323493ba0cf08c87", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=3c87772a8a4f00cfcce26615ae7808f278c61c44", "patch": "@@ -329,6 +329,8 @@ pub struct HandlerFlags {\n     /// show macro backtraces even for non-local macros.\n     /// (rustc: see `-Z external-macro-backtrace`)\n     pub external_macro_backtrace: bool,\n+    /// If true, identical diagnostics are reported only once.\n+    pub deduplicate_diagnostics: bool,\n }\n \n impl Drop for HandlerInner {\n@@ -736,16 +738,17 @@ impl HandlerInner {\n             self.emitted_diagnostic_codes.insert(code.clone());\n         }\n \n-        let diagnostic_hash = {\n+        let already_emitted = |this: &mut Self| {\n             use std::hash::Hash;\n             let mut hasher = StableHasher::new();\n             diagnostic.hash(&mut hasher);\n-            hasher.finish()\n+            let diagnostic_hash = hasher.finish();\n+            !this.emitted_diagnostics.insert(diagnostic_hash)\n         };\n \n-        // Only emit the diagnostic if we haven't already emitted an equivalent\n-        // one:\n-        if self.emitted_diagnostics.insert(diagnostic_hash) {\n+        // Only emit the diagnostic if we've been asked to deduplicate and\n+        // haven't already emitted an equivalent diagnostic.\n+        if !(self.flags.deduplicate_diagnostics && already_emitted(self)) {\n             self.emitter.emit_diagnostic(diagnostic);\n             if diagnostic.is_error() {\n                 self.deduplicated_err_count += 1;"}, {"sha": "b6b22e298ca6234725164416e38c81ea571ea3db", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=3c87772a8a4f00cfcce26615ae7808f278c61c44", "patch": "@@ -20,7 +20,7 @@ use rustc_span::source_map::{FileName, FilePathMapping};\n use rustc_span::symbol::{sym, Symbol};\n \n use rustc_errors::emitter::HumanReadableErrorType;\n-use rustc_errors::{ColorConfig, FatalError, Handler};\n+use rustc_errors::{ColorConfig, FatalError, Handler, HandlerFlags};\n \n use getopts;\n \n@@ -597,6 +597,17 @@ impl DebuggingOptions {\n     pub fn ui_testing(&self) -> bool {\n         self.ui_testing.unwrap_or(false)\n     }\n+\n+    pub fn diagnostic_handler_flags(&self, can_emit_warnings: bool) -> HandlerFlags {\n+        HandlerFlags {\n+            can_emit_warnings,\n+            treat_err_as_bug: self.treat_err_as_bug,\n+            dont_buffer_diagnostics: self.dont_buffer_diagnostics,\n+            report_delayed_bugs: self.report_delayed_bugs,\n+            external_macro_backtrace: self.external_macro_backtrace,\n+            deduplicate_diagnostics: self.deduplicate_diagnostics.unwrap_or(true),\n+        }\n+    }\n }\n \n // The type of entry function, so users can have their own entry functions"}, {"sha": "656c1b019b2e2ead069151c9589be1316b61a693", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=3c87772a8a4f00cfcce26615ae7808f278c61c44", "patch": "@@ -946,4 +946,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     insert_sideeffect: bool = (false, parse_bool, [TRACKED],\n         \"fix undefined behavior when a thread doesn't eventually make progress \\\n          (such as entering an empty infinite loop) by inserting llvm.sideeffect\"),\n+    deduplicate_diagnostics: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n+        \"deduplicate identical diagnostics\"),\n }"}, {"sha": "15911db46fe0bf6654a26419eff29173503687c9", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=3c87772a8a4f00cfcce26615ae7808f278c61c44", "patch": "@@ -941,15 +941,8 @@ pub fn build_session_with_source_map(\n         .last()\n         .unwrap_or(false);\n     let cap_lints_allow = sopts.lint_cap.map_or(false, |cap| cap == lint::Allow);\n-\n     let can_emit_warnings = !(warnings_allow || cap_lints_allow);\n \n-    let treat_err_as_bug = sopts.debugging_opts.treat_err_as_bug;\n-    let dont_buffer_diagnostics = sopts.debugging_opts.dont_buffer_diagnostics;\n-    let report_delayed_bugs = sopts.debugging_opts.report_delayed_bugs;\n-\n-    let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n-\n     let write_dest = match diagnostics_output {\n         DiagnosticOutput::Default => None,\n         DiagnosticOutput::Raw(write) => Some(write),\n@@ -958,14 +951,7 @@ pub fn build_session_with_source_map(\n \n     let diagnostic_handler = rustc_errors::Handler::with_emitter_and_flags(\n         emitter,\n-        rustc_errors::HandlerFlags {\n-            can_emit_warnings,\n-            treat_err_as_bug,\n-            report_delayed_bugs,\n-            dont_buffer_diagnostics,\n-            external_macro_backtrace,\n-            ..Default::default()\n-        },\n+        sopts.debugging_opts.diagnostic_handler_flags(can_emit_warnings),\n     );\n \n     build_session_(sopts, local_crate_source_file, diagnostic_handler, source_map, lint_caps)"}, {"sha": "0af25efc04234fd23577ea5e50535f2d411fc0ac", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=3c87772a8a4f00cfcce26615ae7808f278c61c44", "patch": "@@ -269,12 +269,7 @@ impl Options {\n         let codegen_options = build_codegen_options(matches, error_format);\n         let debugging_options = build_debugging_options(matches, error_format);\n \n-        let diag = new_handler(\n-            error_format,\n-            None,\n-            debugging_options.treat_err_as_bug,\n-            debugging_options.ui_testing(),\n-        );\n+        let diag = new_handler(error_format, None, &debugging_options);\n \n         // check for deprecated options\n         check_deprecated_options(&matches, &diag);"}, {"sha": "f53f3a75e095cffeef803bbc4e3acebdb1a4923e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3c87772a8a4f00cfcce26615ae7808f278c61c44", "patch": "@@ -35,7 +35,7 @@ use crate::html::render::RenderInfo;\n \n use crate::passes;\n \n-pub use rustc::session::config::{CodegenOptions, Input, Options};\n+pub use rustc::session::config::{CodegenOptions, DebuggingOptions, Input, Options};\n pub use rustc::session::search_paths::SearchPath;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n@@ -170,12 +170,8 @@ impl<'tcx> DocContext<'tcx> {\n pub fn new_handler(\n     error_format: ErrorOutputType,\n     source_map: Option<Lrc<source_map::SourceMap>>,\n-    treat_err_as_bug: Option<usize>,\n-    ui_testing: bool,\n+    debugging_opts: &DebuggingOptions,\n ) -> errors::Handler {\n-    // rustdoc doesn't override (or allow to override) anything from this that is relevant here, so\n-    // stick to the defaults\n-    let sessopts = Options::default();\n     let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n         ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n@@ -184,34 +180,25 @@ pub fn new_handler(\n                     color_config,\n                     source_map.map(|cm| cm as _),\n                     short,\n-                    sessopts.debugging_opts.teach,\n-                    sessopts.debugging_opts.terminal_width,\n+                    debugging_opts.teach,\n+                    debugging_opts.terminal_width,\n                     false,\n                 )\n-                .ui_testing(ui_testing),\n+                .ui_testing(debugging_opts.ui_testing()),\n             )\n         }\n         ErrorOutputType::Json { pretty, json_rendered } => {\n             let source_map = source_map.unwrap_or_else(|| {\n-                Lrc::new(source_map::SourceMap::new(sessopts.file_path_mapping()))\n+                Lrc::new(source_map::SourceMap::new(source_map::FilePathMapping::empty()))\n             });\n             Box::new(\n                 JsonEmitter::stderr(None, source_map, pretty, json_rendered, false)\n-                    .ui_testing(ui_testing),\n+                    .ui_testing(debugging_opts.ui_testing()),\n             )\n         }\n     };\n \n-    errors::Handler::with_emitter_and_flags(\n-        emitter,\n-        errors::HandlerFlags {\n-            can_emit_warnings: true,\n-            treat_err_as_bug,\n-            report_delayed_bugs: false,\n-            external_macro_backtrace: false,\n-            ..Default::default()\n-        },\n-    )\n+    errors::Handler::with_emitter_and_flags(emitter, debugging_opts.diagnostic_handler_flags(true))\n }\n \n pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOptions) {"}, {"sha": "c8a32306194df1bc733395bfe0e0cdf7157dc05c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3c87772a8a4f00cfcce26615ae7808f278c61c44", "patch": "@@ -445,12 +445,7 @@ fn main_args(args: &[String]) -> i32 {\n }\n \n fn main_options(options: config::Options) -> i32 {\n-    let diag = core::new_handler(\n-        options.error_format,\n-        None,\n-        options.debugging_options.treat_err_as_bug,\n-        options.debugging_options.ui_testing(),\n-    );\n+    let diag = core::new_handler(options.error_format, None, &options.debugging_options);\n \n     match (options.should_test, options.markdown_input()) {\n         (true, true) => return markdown::test(options, &diag),\n@@ -463,12 +458,7 @@ fn main_options(options: config::Options) -> i32 {\n \n     // need to move these items separately because we lose them by the time the closure is called,\n     // but we can't crates the Handler ahead of time because it's not Send\n-    let diag_opts = (\n-        options.error_format,\n-        options.debugging_options.treat_err_as_bug,\n-        options.debugging_options.ui_testing(),\n-        options.edition,\n-    );\n+    let diag_opts = (options.error_format, options.edition, options.debugging_options.clone());\n     let show_coverage = options.show_coverage;\n     rust_input(options, move |out| {\n         if show_coverage {\n@@ -479,8 +469,8 @@ fn main_options(options: config::Options) -> i32 {\n \n         let Output { krate, renderinfo, renderopts } = out;\n         info!(\"going to format\");\n-        let (error_format, treat_err_as_bug, ui_testing, edition) = diag_opts;\n-        let diag = core::new_handler(error_format, None, treat_err_as_bug, ui_testing);\n+        let (error_format, edition, debugging_options) = diag_opts;\n+        let diag = core::new_handler(error_format, None, &debugging_options);\n         match html::render::run(krate, renderopts, renderinfo, &diag, edition) {\n             Ok(_) => rustc_driver::EXIT_SUCCESS,\n             Err(e) => {"}, {"sha": "3493b7c54c43b4773bf440a7f927305976a7c040", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=3c87772a8a4f00cfcce26615ae7808f278c61c44", "patch": "@@ -10,7 +10,7 @@ error: internal compiler error: mutable allocation in constant\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:345:17\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:347:17\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n error: internal compiler error: unexpected panic"}, {"sha": "1acfce506229f522f4bd21a5937b853272f4e62e", "filename": "src/test/ui/deduplicate-diagnostics.deduplicate.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.deduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.deduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.deduplicate.stderr?ref=3c87772a8a4f00cfcce26615ae7808f278c61c44", "patch": "@@ -0,0 +1,8 @@\n+error: cannot find derive macro `Unresolved` in this scope\n+  --> $DIR/deduplicate-diagnostics.rs:4:10\n+   |\n+LL | #[derive(Unresolved)]\n+   |          ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "325da3b5d915bb67232e751a01dbc1a9cfd1bc5a", "filename": "src/test/ui/deduplicate-diagnostics.duplicate.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.duplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.duplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.duplicate.stderr?ref=3c87772a8a4f00cfcce26615ae7808f278c61c44", "patch": "@@ -0,0 +1,14 @@\n+error: cannot find derive macro `Unresolved` in this scope\n+  --> $DIR/deduplicate-diagnostics.rs:4:10\n+   |\n+LL | #[derive(Unresolved)]\n+   |          ^^^^^^^^^^\n+\n+error: cannot find derive macro `Unresolved` in this scope\n+  --> $DIR/deduplicate-diagnostics.rs:4:10\n+   |\n+LL | #[derive(Unresolved)]\n+   |          ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4a1f503d757a50d806cb4eed24f38a9f9341f5bd", "filename": "src/test/ui/deduplicate-diagnostics.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c87772a8a4f00cfcce26615ae7808f278c61c44/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeduplicate-diagnostics.rs?ref=3c87772a8a4f00cfcce26615ae7808f278c61c44", "patch": "@@ -0,0 +1,8 @@\n+// revisions: duplicate deduplicate\n+//[duplicate] compile-flags: -Z deduplicate-diagnostics=no\n+\n+#[derive(Unresolved)] //~ ERROR cannot find derive macro `Unresolved` in this scope\n+                      //[duplicate]~| ERROR cannot find derive macro `Unresolved` in this scope\n+struct S;\n+\n+fn main() {}"}]}