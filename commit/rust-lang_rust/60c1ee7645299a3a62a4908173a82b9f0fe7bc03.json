{"sha": "60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYzFlZTc2NDUyOTlhM2E2MmE0OTA4MTczYTgyYjlmMGZlN2JjMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-02T02:24:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-02T02:24:15Z"}, "message": "Auto merge of #52787 - riscv-rust:riscv-rust-pr, r=alexcrichton\n\nEnable RISCV\n\n- Enable LLVM backend.\n- Implement call abi.\n- Add built-in target riscv32imac-unknown-none.\n- Enable CI.", "tree": {"sha": "378fdc750b59708f677ff3c6314b925343223347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/378fdc750b59708f677ff3c6314b925343223347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "html_url": "https://github.com/rust-lang/rust/commit/60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d9405fb6caa5eac18e5a28685e4f30dcbde6d45", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9405fb6caa5eac18e5a28685e4f30dcbde6d45", "html_url": "https://github.com/rust-lang/rust/commit/1d9405fb6caa5eac18e5a28685e4f30dcbde6d45"}, {"sha": "d974dc9a7896cafe5daec28ab7dae19f14e2e971", "url": "https://api.github.com/repos/rust-lang/rust/commits/d974dc9a7896cafe5daec28ab7dae19f14e2e971", "html_url": "https://github.com/rust-lang/rust/commit/d974dc9a7896cafe5daec28ab7dae19f14e2e971"}], "stats": {"total": 143, "additions": 139, "deletions": 4}, "files": [{"sha": "eb7cd61a1b07e7a936e126db5f9e622421d291a5", "filename": "config.toml.example", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "patch": "@@ -61,8 +61,8 @@\n # the same format as above, but since these targets are experimental, they are\n # not built by default and the experimental Rust compilation targets that depend\n # on them will not work unless the user opts in to building them. By default the\n-# `WebAssembly` target is enabled when compiling LLVM from scratch.\n-#experimental-targets = \"WebAssembly\"\n+# `WebAssembly` and `RISCV` targets are enabled when compiling LLVM from scratch.\n+#experimental-targets = \"WebAssembly;RISCV\"\n \n # Cap the number of parallel linker invocations when compiling LLVM.\n # This can be useful when building LLVM with debug info, which significantly"}, {"sha": "1a94d597ef895d6e5ba8b0cdc0ceab073ca1ffec", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "patch": "@@ -507,7 +507,7 @@ impl Config {\n             set(&mut config.llvm_link_shared, llvm.link_shared);\n             config.llvm_targets = llvm.targets.clone();\n             config.llvm_experimental_targets = llvm.experimental_targets.clone()\n-                .unwrap_or(\"WebAssembly\".to_string());\n+                .unwrap_or(\"WebAssembly;RISCV\".to_string());\n             config.llvm_link_jobs = llvm.link_jobs;\n             config.llvm_clang_cl = llvm.clang_cl.clone();\n         }"}, {"sha": "bfc5e712f76c3aa1802e5a66fe45472454728b9b", "filename": "src/ci/docker/dist-various-1/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile?ref=60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "patch": "@@ -102,6 +102,7 @@ ENV TARGETS=$TARGETS,thumbv6m-none-eabi\n ENV TARGETS=$TARGETS,thumbv7m-none-eabi\n ENV TARGETS=$TARGETS,thumbv7em-none-eabi\n ENV TARGETS=$TARGETS,thumbv7em-none-eabihf\n+ENV TARGETS=$TARGETS,riscv32imac-unknown-none-elf\n \n ENV CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \\\n     CC_mips_unknown_linux_musl=mips-openwrt-linux-gcc \\"}, {"sha": "4e24a26983d48754a9a84dd78cb2d1b083f18866", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "patch": "@@ -100,6 +100,10 @@ fn main() {\n         optional_components.push(\"hexagon\");\n     }\n \n+    if major > 6 {\n+        optional_components.push(\"riscv\");\n+    }\n+\n     // FIXME: surely we don't need all these components, right? Stuff like mcjit\n     //        or interpreter the compiler itself never uses.\n     let required_components = &[\"ipo\","}, {"sha": "ffa97bd6fa59d3a385d5738440a54d8527134871", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "patch": "@@ -90,6 +90,12 @@ pub fn initialize_available_targets() {\n                  LLVMInitializeMSP430Target,\n                  LLVMInitializeMSP430TargetMC,\n                  LLVMInitializeMSP430AsmPrinter);\n+    init_target!(llvm_component = \"riscv\",\n+                 LLVMInitializeRISCVTargetInfo,\n+                 LLVMInitializeRISCVTarget,\n+                 LLVMInitializeRISCVTargetMC,\n+                 LLVMInitializeRISCVAsmPrinter,\n+                 LLVMInitializeRISCVAsmParser);\n     init_target!(llvm_component = \"sparc\",\n                  LLVMInitializeSparcTargetInfo,\n                  LLVMInitializeSparcTarget,"}, {"sha": "f65fa341231e3893facf13ff9de9fe84b373a5d5", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "patch": "@@ -23,6 +23,7 @@ mod nvptx;\n mod nvptx64;\n mod powerpc;\n mod powerpc64;\n+mod riscv;\n mod s390x;\n mod sparc;\n mod sparc64;\n@@ -500,6 +501,8 @@ impl<'a, Ty> FnType<'a, Ty> {\n             \"nvptx\" => nvptx::compute_abi_info(self),\n             \"nvptx64\" => nvptx64::compute_abi_info(self),\n             \"hexagon\" => hexagon::compute_abi_info(self),\n+            \"riscv32\" => riscv::compute_abi_info(self, 32),\n+            \"riscv64\" => riscv::compute_abi_info(self, 64),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "fe0d7485c158bea8105e2363cf52405bacac5c12", "filename": "src/librustc_target/abi/call/riscv.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Flibrustc_target%2Fabi%2Fcall%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Flibrustc_target%2Fabi%2Fcall%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Friscv.rs?ref=60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Reference: RISC-V ELF psABI specification\n+// https://github.com/riscv/riscv-elf-psabi-doc\n+\n+use abi::call::{ArgType, FnType};\n+\n+fn classify_ret_ty<Ty>(arg: &mut ArgType<Ty>, xlen: u64) {\n+    // \"Scalars wider than 2\u2715XLEN are passed by reference and are replaced in\n+    // the argument list with the address.\"\n+    // \"Aggregates larger than 2\u2715XLEN bits are passed by reference and are\n+    // replaced in the argument list with the address, as are C++ aggregates\n+    // with nontrivial copy constructors, destructors, or vtables.\"\n+    if arg.layout.size.bits() > 2 * xlen {\n+        arg.make_indirect();\n+    }\n+\n+    // \"When passed in registers, scalars narrower than XLEN bits are widened\n+    // according to the sign of their type up to 32 bits, then sign-extended to\n+    // XLEN bits.\"\n+    arg.extend_integer_width_to(xlen); // this method only affects integer scalars\n+}\n+\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>, xlen: u64) {\n+    // \"Scalars wider than 2\u2715XLEN are passed by reference and are replaced in\n+    // the argument list with the address.\"\n+    // \"Aggregates larger than 2\u2715XLEN bits are passed by reference and are\n+    // replaced in the argument list with the address, as are C++ aggregates\n+    // with nontrivial copy constructors, destructors, or vtables.\"\n+    if arg.layout.size.bits() > 2 * xlen {\n+        arg.make_indirect();\n+    }\n+\n+    // \"When passed in registers, scalars narrower than XLEN bits are widened\n+    // according to the sign of their type up to 32 bits, then sign-extended to\n+    // XLEN bits.\"\n+    arg.extend_integer_width_to(xlen); // this method only affects integer scalars\n+}\n+\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>, xlen: u64) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(&mut fty.ret, xlen);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg_ty(arg, xlen);\n+    }\n+}"}, {"sha": "6faab77d7709f3cc7d320f12f742f928dde72e6c", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "patch": "@@ -377,6 +377,8 @@ supported_targets! {\n \n     (\"aarch64-unknown-hermit\", aarch64_unknown_hermit),\n     (\"x86_64-unknown-hermit\", x86_64_unknown_hermit),\n+\n+    (\"riscv32imac-unknown-none-elf\", riscv32imac_unknown_none_elf),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "cfd73e371ddacad71372f84857d1e35f971093a3", "filename": "src/librustc_target/spec/riscv32imac_unknown_none_elf.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use spec::abi::{Abi};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n+        llvm_target: \"riscv32\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        arch: \"riscv32\".to_string(),\n+        linker_flavor: LinkerFlavor::Ld,\n+\n+        options: TargetOptions {\n+            linker: Some(\"riscv32-unknown-elf-ld\".to_string()),\n+            cpu: \"generic-rv32\".to_string(),\n+            max_atomic_width: Some(32),\n+            atomic_cas: false, // incomplete +a extension\n+            features: \"+m,+a\".to_string(), // disable +c extension\n+            executables: true,\n+            panic_strategy: PanicStrategy::Abort,\n+            relocation_model: \"static\".to_string(),\n+            abi_blacklist: vec![\n+                Abi::Cdecl,\n+                Abi::Stdcall,\n+                Abi::Fastcall,\n+                Abi::Vectorcall,\n+                Abi::Thiscall,\n+                Abi::Aapcs,\n+                Abi::Win64,\n+                Abi::SysV64,\n+                Abi::PtxKernel,\n+                Abi::Msp430Interrupt,\n+                Abi::X86Interrupt,\n+            ],\n+            .. Default::default()\n+        },\n+    })\n+}"}, {"sha": "7305dc71cbf63fa5bd14fc2b8d6e7edb74e4b832", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "patch": "@@ -171,6 +171,12 @@ bool LLVMRustPassManagerBuilderPopulateThinLTOPassManager(\n #define SUBTARGET_MSP430\n #endif\n \n+#ifdef LLVM_COMPONENT_RISCV\n+#define SUBTARGET_RISCV SUBTARGET(RISCV)\n+#else\n+#define SUBTARGET_RISCV\n+#endif\n+\n #ifdef LLVM_COMPONENT_SPARC\n #define SUBTARGET_SPARC SUBTARGET(Sparc)\n #else\n@@ -192,7 +198,8 @@ bool LLVMRustPassManagerBuilderPopulateThinLTOPassManager(\n   SUBTARGET_SYSTEMZ                                                            \\\n   SUBTARGET_MSP430                                                             \\\n   SUBTARGET_SPARC                                                              \\\n-  SUBTARGET_HEXAGON\n+  SUBTARGET_HEXAGON                                                            \\\n+  SUBTARGET_RISCV                                                              \\\n \n #define SUBTARGET(x)                                                           \\\n   namespace llvm {                                                             \\"}, {"sha": "fd8fb54503a6ff85fde21499942d040608360f02", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c1ee7645299a3a62a4908173a82b9f0fe7bc03/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=60c1ee7645299a3a62a4908173a82b9f0fe7bc03", "patch": "@@ -89,6 +89,7 @@ static TARGETS: &'static [&'static str] = &[\n     \"powerpc64-unknown-linux-gnu\",\n     \"powerpc64le-unknown-linux-gnu\",\n     \"powerpc64le-unknown-linux-musl\",\n+    \"riscv32imac-unknown-none-elf\",\n     \"s390x-unknown-linux-gnu\",\n     \"sparc-unknown-linux-gnu\",\n     \"sparc64-unknown-linux-gnu\","}]}