{"sha": "0162f8e6e16152224de4704ecd72d537c27046fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNjJmOGU2ZTE2MTUyMjI0ZGU0NzA0ZWNkNzJkNTM3YzI3MDQ2ZmU=", "commit": {"author": {"name": "JustAPerson", "email": "jpriest8@ymail.com", "date": "2014-04-13T19:26:02Z"}, "committer": {"name": "JustAPerson", "email": "jpriest8@ymail.com", "date": "2014-04-14T21:53:06Z"}, "message": "Only check --crate-type flags if present.\n\nBefore, normal compilation and the --crate-file-name flag would\ngenerate output based on both #![crate_type] attributes and\n--crate-type flags. Now, if one or more flag is specified by command\nline, only those will be used.\n\nCloses #11573.", "tree": {"sha": "eb0c8caec512bcebddb7607c90c7c263135f1baa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb0c8caec512bcebddb7607c90c7c263135f1baa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0162f8e6e16152224de4704ecd72d537c27046fe", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0162f8e6e16152224de4704ecd72d537c27046fe", "html_url": "https://github.com/rust-lang/rust/commit/0162f8e6e16152224de4704ecd72d537c27046fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0162f8e6e16152224de4704ecd72d537c27046fe/comments", "author": {"login": "JustAPerson", "id": 789308, "node_id": "MDQ6VXNlcjc4OTMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/789308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JustAPerson", "html_url": "https://github.com/JustAPerson", "followers_url": "https://api.github.com/users/JustAPerson/followers", "following_url": "https://api.github.com/users/JustAPerson/following{/other_user}", "gists_url": "https://api.github.com/users/JustAPerson/gists{/gist_id}", "starred_url": "https://api.github.com/users/JustAPerson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JustAPerson/subscriptions", "organizations_url": "https://api.github.com/users/JustAPerson/orgs", "repos_url": "https://api.github.com/users/JustAPerson/repos", "events_url": "https://api.github.com/users/JustAPerson/events{/privacy}", "received_events_url": "https://api.github.com/users/JustAPerson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JustAPerson", "id": 789308, "node_id": "MDQ6VXNlcjc4OTMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/789308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JustAPerson", "html_url": "https://github.com/JustAPerson", "followers_url": "https://api.github.com/users/JustAPerson/followers", "following_url": "https://api.github.com/users/JustAPerson/following{/other_user}", "gists_url": "https://api.github.com/users/JustAPerson/gists{/gist_id}", "starred_url": "https://api.github.com/users/JustAPerson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JustAPerson/subscriptions", "organizations_url": "https://api.github.com/users/JustAPerson/orgs", "repos_url": "https://api.github.com/users/JustAPerson/repos", "events_url": "https://api.github.com/users/JustAPerson/events{/privacy}", "received_events_url": "https://api.github.com/users/JustAPerson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae", "html_url": "https://github.com/rust-lang/rust/commit/ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae"}], "stats": {"total": 109, "additions": 74, "deletions": 35}, "files": [{"sha": "f2df445a5a276de6c3b800b954016662dc1cae04", "filename": "src/doc/rust.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0162f8e6e16152224de4704ecd72d537c27046fe/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/0162f8e6e16152224de4704ecd72d537c27046fe/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=0162f8e6e16152224de4704ecd72d537c27046fe", "patch": "@@ -3920,7 +3920,9 @@ link Rust crates together, and more information about native libraries can be\n found in the [ffi tutorial][ffi].\n \n In one session of compilation, the compiler can generate multiple artifacts\n-through the usage of command line flags and the `crate_type` attribute.\n+through the usage of either command line flags or the `crate_type` attribute.\n+If one or more command line flag is specified, all `crate_type` attributes will\n+be ignored in favor of only building the artifacts specified by command line.\n \n * `--crate-type=bin`, `#[crate_type = \"bin\"]` - A runnable executable will be\n   produced.  This requires that there is a `main` function in the crate which\n@@ -3963,7 +3965,10 @@ through the usage of command line flags and the `crate_type` attribute.\n \n Note that these outputs are stackable in the sense that if multiple are\n specified, then the compiler will produce each form of output at once without\n-having to recompile.\n+having to recompile. However, this only applies for outputs specified by the same\n+method. If only `crate_type` attributes are specified, then they will all be\n+built, but if one or more `--crate-type` command line flag is specified,\n+then only those outputs will be built.\n \n With all these different kinds of outputs, if crate A depends on crate B, then\n the compiler could find B in various different forms throughout the system. The"}, {"sha": "f9a429a2a16879b422bc607bfcb558964e9b303b", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 41, "deletions": 33, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0162f8e6e16152224de4704ecd72d537c27046fe/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0162f8e6e16152224de4704ecd72d537c27046fe/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=0162f8e6e16152224de4704ecd72d537c27046fe", "patch": "@@ -498,43 +498,51 @@ pub fn collect_crate_types(session: &Session,\n     if session.opts.test {\n         return vec!(CrateTypeExecutable)\n     }\n+\n+    // Only check command line flags if present. If no types are specified by\n+    // command line, then reuse the empty `base` Vec to hold the types that\n+    // will be found in crate attributes.\n     let mut base = session.opts.crate_types.clone();\n-    let iter = attrs.iter().filter_map(|a| {\n-        if a.name().equiv(&(\"crate_type\")) {\n-            match a.value_str() {\n-                Some(ref n) if n.equiv(&(\"rlib\")) => Some(CrateTypeRlib),\n-                Some(ref n) if n.equiv(&(\"dylib\")) => Some(CrateTypeDylib),\n-                Some(ref n) if n.equiv(&(\"lib\")) => {\n-                    Some(default_lib_output())\n-                }\n-                Some(ref n) if n.equiv(&(\"staticlib\")) => {\n-                    Some(CrateTypeStaticlib)\n-                }\n-                Some(ref n) if n.equiv(&(\"bin\")) => Some(CrateTypeExecutable),\n-                Some(_) => {\n-                    session.add_lint(lint::UnknownCrateType,\n-                                     ast::CRATE_NODE_ID,\n-                                     a.span,\n-                                     ~\"invalid `crate_type` value\");\n-                    None\n-                }\n-                _ => {\n-                    session.add_lint(lint::UnknownCrateType, ast::CRATE_NODE_ID,\n-                                    a.span, ~\"`crate_type` requires a value\");\n-                    None\n+    if base.len() > 0 {\n+        return base\n+    } else {\n+        let iter = attrs.iter().filter_map(|a| {\n+            if a.name().equiv(&(\"crate_type\")) {\n+                match a.value_str() {\n+                    Some(ref n) if n.equiv(&(\"rlib\")) => Some(CrateTypeRlib),\n+                    Some(ref n) if n.equiv(&(\"dylib\")) => Some(CrateTypeDylib),\n+                    Some(ref n) if n.equiv(&(\"lib\")) => {\n+                        Some(default_lib_output())\n+                    }\n+                    Some(ref n) if n.equiv(&(\"staticlib\")) => {\n+                        Some(CrateTypeStaticlib)\n+                    }\n+                    Some(ref n) if n.equiv(&(\"bin\")) => Some(CrateTypeExecutable),\n+                    Some(_) => {\n+                        session.add_lint(lint::UnknownCrateType,\n+                                         ast::CRATE_NODE_ID,\n+                                         a.span,\n+                                         ~\"invalid `crate_type` value\");\n+                        None\n+                    }\n+                    _ => {\n+                        session.add_lint(lint::UnknownCrateType, ast::CRATE_NODE_ID,\n+                                        a.span, ~\"`crate_type` requires a value\");\n+                        None\n+                    }\n                 }\n+            } else {\n+                None\n             }\n-        } else {\n-            None\n+        });\n+        base.extend(iter);\n+        if base.len() == 0 {\n+            base.push(CrateTypeExecutable);\n         }\n-    });\n-    base.extend(iter);\n-    if base.len() == 0 {\n-        base.push(CrateTypeExecutable);\n-    }\n-    base.as_mut_slice().sort();\n-    base.dedup();\n-    return base;\n+        base.as_mut_slice().sort();\n+        base.dedup();\n+        return base;\n+    }\n }\n \n pub fn sess_os_to_meta_os(os: abi::Os) -> metadata::loader::Os {"}, {"sha": "c28bc7c7b5e93b09807c78c4fb5859beba92fa3d", "filename": "src/test/run-make/obey-crate-type-flag/Makefile", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0162f8e6e16152224de4704ecd72d537c27046fe/src%2Ftest%2Frun-make%2Fobey-crate-type-flag%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0162f8e6e16152224de4704ecd72d537c27046fe/src%2Ftest%2Frun-make%2Fobey-crate-type-flag%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fobey-crate-type-flag%2FMakefile?ref=0162f8e6e16152224de4704ecd72d537c27046fe", "patch": "@@ -0,0 +1,13 @@\n+-include ../tools.mk\n+\n+# check that rustc builds all crate_type attributes\n+# delete rlib\n+# delete whatever dylib is made for this system\n+# check that rustc only builds --crate-type flags, ignoring attributes\n+# fail if an rlib was built\n+all:\n+\t$(RUSTC) test.rs\n+\trm $(TMPDIR)/libtest*.rlib\n+\trm $(TMPDIR)/libtest*\n+\t$(RUSTC) --crate-type dylib test.rs\n+\trm $(TMPDIR)/libtest*.rlib && exit 1 || exit 0"}, {"sha": "8eb82b48eacf7baf30a9ea77bc7855835ab9de45", "filename": "src/test/run-make/obey-crate-type-flag/test.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0162f8e6e16152224de4704ecd72d537c27046fe/src%2Ftest%2Frun-make%2Fobey-crate-type-flag%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0162f8e6e16152224de4704ecd72d537c27046fe/src%2Ftest%2Frun-make%2Fobey-crate-type-flag%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fobey-crate-type-flag%2Ftest.rs?ref=0162f8e6e16152224de4704ecd72d537c27046fe", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+"}]}