{"sha": "e1f735a5d1d39cd1d609fe7708bd79639cfa0e64", "node_id": "C_kwDOAAsO6NoAKGUxZjczNWE1ZDFkMzljZDFkNjA5ZmU3NzA4YmQ3OTYzOWNmYTBlNjQ", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-09-29T16:33:58Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-09-30T13:44:38Z"}, "message": "don't repeat lifetime names from outer binder in print", "tree": {"sha": "d82e3489b4945eed8799759fe6c75be510c9d9d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d82e3489b4945eed8799759fe6c75be510c9d9d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1f735a5d1d39cd1d609fe7708bd79639cfa0e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f735a5d1d39cd1d609fe7708bd79639cfa0e64", "html_url": "https://github.com/rust-lang/rust/commit/e1f735a5d1d39cd1d609fe7708bd79639cfa0e64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1f735a5d1d39cd1d609fe7708bd79639cfa0e64/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f914b82a754c6d85c0a909ab152f5b611defef73", "url": "https://api.github.com/repos/rust-lang/rust/commits/f914b82a754c6d85c0a909ab152f5b611defef73", "html_url": "https://github.com/rust-lang/rust/commit/f914b82a754c6d85c0a909ab152f5b611defef73"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "ad76422ef6618b632a2b8b81cbb56b49b1613143", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 57, "deletions": 12, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e1f735a5d1d39cd1d609fe7708bd79639cfa0e64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f735a5d1d39cd1d609fe7708bd79639cfa0e64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e1f735a5d1d39cd1d609fe7708bd79639cfa0e64", "patch": "@@ -2055,7 +2055,14 @@ struct RegionFolder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     current_index: ty::DebruijnIndex,\n     region_map: BTreeMap<ty::BoundRegion, ty::Region<'tcx>>,\n-    name: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n+    name: &'a mut (\n+                dyn FnMut(\n+        Option<ty::DebruijnIndex>,\n+        ty::DebruijnIndex,\n+        ty::BoundRegion,\n+    ) -> ty::Region<'tcx>\n+                    + 'a\n+            ),\n }\n \n impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n@@ -2086,7 +2093,9 @@ impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         let name = &mut self.name;\n         let region = match *r {\n-            ty::ReLateBound(_, br) => *self.region_map.entry(br).or_insert_with(|| name(br)),\n+            ty::ReLateBound(db, br) => {\n+                *self.region_map.entry(br).or_insert_with(|| name(Some(db), self.current_index, br))\n+            }\n             ty::RePlaceholder(ty::PlaceholderRegion { name: kind, .. }) => {\n                 // If this is an anonymous placeholder, don't rename. Otherwise, in some\n                 // async fns, we get a `for<'r> Send` bound\n@@ -2095,7 +2104,10 @@ impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n                     _ => {\n                         // Index doesn't matter, since this is just for naming and these never get bound\n                         let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind };\n-                        *self.region_map.entry(br).or_insert_with(|| name(br))\n+                        *self\n+                            .region_map\n+                            .entry(br)\n+                            .or_insert_with(|| name(None, self.current_index, br))\n                     }\n                 }\n             }\n@@ -2234,24 +2246,57 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             })\n         } else {\n             let tcx = self.tcx;\n-            let mut name = |br: ty::BoundRegion| {\n-                start_or_continue(&mut self, \"for<\", \", \");\n-                let kind = match br.kind {\n+            let mut name = |db: Option<ty::DebruijnIndex>,\n+                            binder_level: ty::DebruijnIndex,\n+                            br: ty::BoundRegion| {\n+                let (name, kind) = match br.kind {\n                     ty::BrAnon(_) | ty::BrEnv => {\n                         let name = next_name(&self);\n-                        do_continue(&mut self, name);\n-                        ty::BrNamed(CRATE_DEF_ID.to_def_id(), name)\n+\n+                        if let Some(db) = db {\n+                            if db > binder_level {\n+                                let kind = ty::BrNamed(CRATE_DEF_ID.to_def_id(), name);\n+                                return tcx.mk_region(ty::ReLateBound(\n+                                    ty::INNERMOST,\n+                                    ty::BoundRegion { var: br.var, kind },\n+                                ));\n+                            }\n+                        }\n+\n+                        (name, ty::BrNamed(CRATE_DEF_ID.to_def_id(), name))\n                     }\n                     ty::BrNamed(def_id, kw::UnderscoreLifetime) => {\n                         let name = next_name(&self);\n-                        do_continue(&mut self, name);\n-                        ty::BrNamed(def_id, name)\n+\n+                        if let Some(db) = db {\n+                            if db > binder_level {\n+                                let kind = ty::BrNamed(def_id, name);\n+                                return tcx.mk_region(ty::ReLateBound(\n+                                    ty::INNERMOST,\n+                                    ty::BoundRegion { var: br.var, kind },\n+                                ));\n+                            }\n+                        }\n+\n+                        (name, ty::BrNamed(def_id, name))\n                     }\n                     ty::BrNamed(_, name) => {\n-                        do_continue(&mut self, name);\n-                        br.kind\n+                        if let Some(db) = db {\n+                            if db > binder_level {\n+                                let kind = br.kind;\n+                                return tcx.mk_region(ty::ReLateBound(\n+                                    ty::INNERMOST,\n+                                    ty::BoundRegion { var: br.var, kind },\n+                                ));\n+                            }\n+                        }\n+\n+                        (name, br.kind)\n                     }\n                 };\n+\n+                start_or_continue(&mut self, \"for<\", \", \");\n+                do_continue(&mut self, name);\n                 tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { var: br.var, kind }))\n             };\n             let mut folder = RegionFolder {"}]}