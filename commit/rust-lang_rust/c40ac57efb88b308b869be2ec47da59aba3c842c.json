{"sha": "c40ac57efb88b308b869be2ec47da59aba3c842c", "node_id": "C_kwDOAAsO6NoAKGM0MGFjNTdlZmI4OGIzMDhiODY5YmUyZWM0N2RhNTlhYmEzYzg0MmM", "commit": {"author": {"name": "Xuanwo", "email": "github@xuanwo.io", "date": "2021-12-28T03:28:05Z"}, "committer": {"name": "Xuanwo", "email": "github@xuanwo.io", "date": "2021-12-28T03:28:05Z"}, "message": "Add try_reserve for OsString\n\nSigned-off-by: Xuanwo <github@xuanwo.io>", "tree": {"sha": "23707be8198766bbe546c93cb8e593a6928cd5e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23707be8198766bbe546c93cb8e593a6928cd5e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c40ac57efb88b308b869be2ec47da59aba3c842c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQQxsjGJMURYQAE8nJHEI7T6a0jpRQUCYcqEVAAKCRDEI7T6a0jp\nRbxPAQCAQlp6lNaqtBsyvNz67bDGeQKZ/bMq3vNqcOpvK3RRLwD9E5cYHAhTi1At\nfloC/KvEmdKAw+12VrpIQrXVq6LqhAE=\n=7wYJ\n-----END PGP SIGNATURE-----", "payload": "tree 23707be8198766bbe546c93cb8e593a6928cd5e6\nparent 4ee34f355101db4d7a97455589c9dbc335d7a963\nauthor Xuanwo <github@xuanwo.io> 1640662085 +0800\ncommitter Xuanwo <github@xuanwo.io> 1640662085 +0800\n\nAdd try_reserve for OsString\n\nSigned-off-by: Xuanwo <github@xuanwo.io>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c40ac57efb88b308b869be2ec47da59aba3c842c", "html_url": "https://github.com/rust-lang/rust/commit/c40ac57efb88b308b869be2ec47da59aba3c842c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c40ac57efb88b308b869be2ec47da59aba3c842c/comments", "author": {"login": "Xuanwo", "id": 5351546, "node_id": "MDQ6VXNlcjUzNTE1NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5351546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xuanwo", "html_url": "https://github.com/Xuanwo", "followers_url": "https://api.github.com/users/Xuanwo/followers", "following_url": "https://api.github.com/users/Xuanwo/following{/other_user}", "gists_url": "https://api.github.com/users/Xuanwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xuanwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xuanwo/subscriptions", "organizations_url": "https://api.github.com/users/Xuanwo/orgs", "repos_url": "https://api.github.com/users/Xuanwo/repos", "events_url": "https://api.github.com/users/Xuanwo/events{/privacy}", "received_events_url": "https://api.github.com/users/Xuanwo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xuanwo", "id": 5351546, "node_id": "MDQ6VXNlcjUzNTE1NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5351546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xuanwo", "html_url": "https://github.com/Xuanwo", "followers_url": "https://api.github.com/users/Xuanwo/followers", "following_url": "https://api.github.com/users/Xuanwo/following{/other_user}", "gists_url": "https://api.github.com/users/Xuanwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xuanwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xuanwo/subscriptions", "organizations_url": "https://api.github.com/users/Xuanwo/orgs", "repos_url": "https://api.github.com/users/Xuanwo/repos", "events_url": "https://api.github.com/users/Xuanwo/events{/privacy}", "received_events_url": "https://api.github.com/users/Xuanwo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ee34f355101db4d7a97455589c9dbc335d7a963", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee34f355101db4d7a97455589c9dbc335d7a963", "html_url": "https://github.com/rust-lang/rust/commit/4ee34f355101db4d7a97455589c9dbc335d7a963"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "2933018a495362e80391b68be208dab7c08e3229", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/c40ac57efb88b308b869be2ec47da59aba3c842c/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40ac57efb88b308b869be2ec47da59aba3c842c/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=c40ac57efb88b308b869be2ec47da59aba3c842c", "patch": "@@ -3,6 +3,7 @@ mod tests;\n \n use crate::borrow::{Borrow, Cow};\n use crate::cmp;\n+use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n use crate::iter::{Extend, FromIterator};\n@@ -265,6 +266,43 @@ impl OsString {\n         self.inner.reserve(additional)\n     }\n \n+    /// Tries to reserve capacity for at least `additional` more elements to be inserted\n+    /// in the given `OsString`. The collection may reserve more space to avoid\n+    /// frequent reallocations. After calling `try_reserve`, capacity will be\n+    /// greater than or equal to `self.len() + additional`. Does nothing if\n+    /// capacity is already sufficient.\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_reserve_2)]\n+    /// use std::ffi::OsString;\n+    /// use std::collections::TryReserveError;\n+    ///\n+    /// fn find_max_slow(data: &str) -> Result<OsString, TryReserveError> {\n+    ///     let mut s = OsString::new();\n+    ///\n+    ///     // Pre-reserve the memory, exiting if we can't\n+    ///     s.try_reserve(data.len())?;\n+    ///\n+    ///     // Now we know this can't OOM in the middle of our complex work\n+    ///     s.push(data);\n+    ///\n+    ///     Ok(s)\n+    /// }\n+    /// # find_max_slow(\"123\").expect(\"why is the test harness OOMing on 12 bytes?\");\n+    /// ```\n+    #[unstable(feature = \"try_reserve_2\", issue = \"91789\")]\n+    #[inline]\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve(additional)\n+    }\n+\n     /// Reserves the minimum capacity for exactly `additional` more capacity to\n     /// be inserted in the given `OsString`. Does nothing if the capacity is\n     /// already sufficient.\n@@ -290,6 +328,49 @@ impl OsString {\n         self.inner.reserve_exact(additional)\n     }\n \n+    /// Tries to reserve the minimum capacity for exactly `additional`\n+    /// elements to be inserted in the given `OsString`. After calling\n+    /// `try_reserve_exact`, capacity will be greater than or equal to\n+    /// `self.len() + additional` if it returns `Ok(())`.\n+    /// Does nothing if the capacity is already sufficient.\n+    ///\n+    /// Note that the allocator may give the collection more space than it\n+    /// requests. Therefore, capacity can not be relied upon to be precisely\n+    /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n+    ///\n+    /// [`try_reserve`]: OsString::try_reserve\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_reserve_2)]\n+    /// use std::ffi::OsString;\n+    /// use std::collections::TryReserveError;\n+    ///\n+    /// fn find_max_slow(data: &str) -> Result<OsString, TryReserveError> {\n+    ///     let mut s = OsString::from(data);\n+    ///\n+    ///     // Pre-reserve the memory, exiting if we can't\n+    ///     s.try_reserve_exact(data.len())?;\n+    ///\n+    ///     // Now we know this can't OOM in the middle of our complex work\n+    ///     s.push(data);\n+    ///\n+    ///     Ok(s)\n+    /// }\n+    /// # find_max_slow(\"123\").expect(\"why is the test harness OOMing on 12 bytes?\");\n+    /// ```\n+    #[unstable(feature = \"try_reserve_2\", issue = \"91789\")]\n+    #[inline]\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve_exact(additional)\n+    }\n+\n     /// Shrinks the capacity of the `OsString` to match its length.\n     ///\n     /// # Examples"}, {"sha": "ccbc182240cf3ddc9551bb188f38bdc12cefe60d", "filename": "library/std/src/sys/unix/os_str.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c40ac57efb88b308b869be2ec47da59aba3c842c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40ac57efb88b308b869be2ec47da59aba3c842c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs?ref=c40ac57efb88b308b869be2ec47da59aba3c842c", "patch": "@@ -2,6 +2,7 @@\n //! systems: just a `Vec<u8>`/`[u8]`.\n \n use crate::borrow::Cow;\n+use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::fmt::Write;\n use crate::mem;\n@@ -112,11 +113,21 @@ impl Buf {\n         self.inner.reserve(additional)\n     }\n \n+    #[inline]\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve(additional)\n+    }\n+\n     #[inline]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.inner.reserve_exact(additional)\n     }\n \n+    #[inline]\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve_exact(additional)\n+    }\n+\n     #[inline]\n     pub fn shrink_to_fit(&mut self) {\n         self.inner.shrink_to_fit()"}]}