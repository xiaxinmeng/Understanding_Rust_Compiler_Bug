{"sha": "70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYzliM2IzNWJhNzAyYTBmMGQwZTc3NGZhMGQyYjJmZWM0YjkxNWY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-10T13:15:14Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-10T13:16:27Z"}, "message": "Better self profiling integration", "tree": {"sha": "cb9f7db8c88e2275ec54eb2b0d7fbd97a76630c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb9f7db8c88e2275ec54eb2b0d7fbd97a76630c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f", "html_url": "https://github.com/rust-lang/rust/commit/70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d65ba25ba740396f4cb748ab6320737e5797699a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d65ba25ba740396f4cb748ab6320737e5797699a", "html_url": "https://github.com/rust-lang/rust/commit/d65ba25ba740396f4cb748ab6320737e5797699a"}], "stats": {"total": 87, "additions": 50, "deletions": 37}, "files": [{"sha": "c301db32b72adb4c0ad1f63ad3fd86bfaafd28b5", "filename": ".gitignore", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f", "patch": "@@ -4,6 +4,8 @@ target\n *.o\n perf.data\n perf.data.old\n+*.events\n+*.string*\n /build_sysroot/sysroot\n /build_sysroot/sysroot_src\n /build_sysroot/Cargo.lock"}, {"sha": "4d1d5df8a89b0fb1627b2617b4d8e7129d12b8bd", "filename": "src/base.rs", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f", "patch": "@@ -61,8 +61,10 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n         fx.bcx.switch_to_block(entry_block);\n         crate::trap::trap_unreachable(&mut fx, \"function has uninhabited argument\");\n     } else {\n-        crate::abi::codegen_fn_prelude(&mut fx, start_ebb);\n-        codegen_fn_content(&mut fx);\n+        tcx.sess.time(\"codegen clif ir\", || {\n+            tcx.sess.time(\"codegen prelude\", || crate::abi::codegen_fn_prelude(&mut fx, start_ebb));\n+            codegen_fn_content(&mut fx);\n+        });\n     }\n \n     // Recover all necessary data from fx, before accessing func will prevent future access to it.\n@@ -78,10 +80,13 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     verify_func(tcx, &clif_comments, &context.func);\n \n     // Perform rust specific optimizations\n-    crate::optimize::optimize_function(cx.tcx, instance, context, &mut clif_comments);\n+    tcx.sess.time(\"optimize clif ir\", || {\n+        crate::optimize::optimize_function(tcx, instance, context, &mut clif_comments);\n+    });\n \n     // Define function\n-    cx.module.define_function(func_id, context).unwrap();\n+    let module = &mut cx.module;\n+    tcx.sess.time(\"define function\", || module.define_function(func_id, context).unwrap());\n \n     // Write optimized function to file for debugging\n     #[cfg(debug_assertions)]\n@@ -102,30 +107,34 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n \n     // Define debuginfo for function\n     let isa = cx.module.isa();\n-    debug_context\n-        .as_mut()\n-        .map(|x| x.define(context, isa, &source_info_set, local_map));\n+    tcx.sess.time(\"generate debug info\", || {\n+        debug_context\n+            .as_mut()\n+            .map(|x| x.define(context, isa, &source_info_set, local_map));\n+    });\n \n     // Clear context to make it usable for the next function\n     context.clear();\n }\n \n pub fn verify_func(tcx: TyCtxt, writer: &crate::pretty_clif::CommentWriter, func: &Function) {\n-    let flags = settings::Flags::new(settings::builder());\n-    match ::cranelift_codegen::verify_function(&func, &flags) {\n-        Ok(_) => {}\n-        Err(err) => {\n-            tcx.sess.err(&format!(\"{:?}\", err));\n-            let pretty_error = ::cranelift_codegen::print_errors::pretty_verifier_error(\n-                &func,\n-                None,\n-                Some(Box::new(writer)),\n-                err,\n-            );\n-            tcx.sess\n-                .fatal(&format!(\"cranelift verify error:\\n{}\", pretty_error));\n+    tcx.sess.time(\"verify clif ir\", || {\n+        let flags = settings::Flags::new(settings::builder());\n+        match ::cranelift_codegen::verify_function(&func, &flags) {\n+            Ok(_) => {}\n+            Err(err) => {\n+                tcx.sess.err(&format!(\"{:?}\", err));\n+                let pretty_error = ::cranelift_codegen::print_errors::pretty_verifier_error(\n+                    &func,\n+                    None,\n+                    Some(Box::new(writer)),\n+                    err,\n+                );\n+                tcx.sess\n+                    .fatal(&format!(\"cranelift verify error:\\n{}\", pretty_error));\n+            }\n         }\n-    }\n+    });\n }\n \n fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n@@ -225,13 +234,13 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                 cleanup: _,\n                 from_hir_call: _,\n             } => {\n-                crate::abi::codegen_terminator_call(\n+                fx.tcx.sess.time(\"codegen call\", || crate::abi::codegen_terminator_call(\n                     fx,\n                     func,\n                     args,\n                     destination,\n                     bb_data.terminator().source_info.span,\n-                );\n+                ));\n             }\n             TerminatorKind::Resume | TerminatorKind::Abort => {\n                 trap_unreachable(fx, \"[corruption] Unwinding bb reached.\");"}, {"sha": "8a1edc12a8e006451ae4b47de343c6f28409e304", "filename": "src/driver.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=70c9b3b35ba702a0f0d0e774fa0d2b2fec4b915f", "patch": "@@ -294,18 +294,20 @@ fn codegen_mono_items<'tcx>(\n ) {\n     let mut cx = CodegenCx::new(tcx, module, debug_context);\n \n-    time(\"codegen mono items\", move || {\n-        for (&mono_item, &(linkage, visibility)) in &mono_items {\n-            match mono_item {\n-                MonoItem::Fn(instance) => {\n-                    let (name, sig) =\n-                        get_function_name_and_sig(tcx, cx.module.isa().triple(), instance, false);\n-                    let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-                    cx.module.declare_function(&name, linkage, &sig).unwrap();\n+    time(tcx.sess, \"codegen mono items\", move || {\n+        tcx.sess.time(\"predefine functions\", || {\n+            for (&mono_item, &(linkage, visibility)) in &mono_items {\n+                match mono_item {\n+                    MonoItem::Fn(instance) => {\n+                        let (name, sig) =\n+                            get_function_name_and_sig(tcx, cx.module.isa().triple(), instance, false);\n+                        let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+                        cx.module.declare_function(&name, linkage, &sig).unwrap();\n+                    }\n+                    MonoItem::Static(_) | MonoItem::GlobalAsm(_) => {}\n                 }\n-                MonoItem::Static(_) | MonoItem::GlobalAsm(_) => {}\n             }\n-        }\n+        });\n \n         for (mono_item, (linkage, visibility)) in mono_items {\n             crate::unimpl::try_unimpl(tcx, || {\n@@ -314,7 +316,7 @@ fn codegen_mono_items<'tcx>(\n             });\n         }\n \n-        cx.finalize();\n+        tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n     });\n }\n \n@@ -350,7 +352,7 @@ fn trans_mono_item<'clif, 'tcx, B: Backend + 'static>(\n                 }\n             });\n \n-            crate::base::trans_fn(cx, inst, linkage);\n+            cx.tcx.sess.time(\"codegen fn\", || crate::base::trans_fn(cx, inst, linkage));\n         }\n         MonoItem::Static(def_id) => {\n             crate::constant::codegen_static(&mut cx.constants_cx, def_id);\n@@ -361,10 +363,10 @@ fn trans_mono_item<'clif, 'tcx, B: Backend + 'static>(\n     }\n }\n \n-fn time<R>(name: &str, f: impl FnOnce() -> R) -> R {\n+fn time<R>(sess: &Session, name: &str, f: impl FnOnce() -> R) -> R {\n     println!(\"[{}] start\", name);\n     let before = std::time::Instant::now();\n-    let res = f();\n+    let res = sess.time(name, f);\n     let after = std::time::Instant::now();\n     println!(\"[{}] end time: {:?}\", name, after - before);\n     res"}]}