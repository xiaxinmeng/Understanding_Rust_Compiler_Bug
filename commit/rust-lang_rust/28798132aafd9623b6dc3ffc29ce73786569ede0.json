{"sha": "28798132aafd9623b6dc3ffc29ce73786569ede0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Nzk4MTMyYWFmZDk2MjNiNmRjM2ZmYzI5Y2U3Mzc4NjU2OWVkZTA=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-25T20:46:12Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-25T20:46:12Z"}, "message": "Move to intra doc links for core::ptr::non_null", "tree": {"sha": "af69a568e5442c084ff28a3d08c6d351c0d1f92f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af69a568e5442c084ff28a3d08c6d351c0d1f92f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28798132aafd9623b6dc3ffc29ce73786569ede0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28798132aafd9623b6dc3ffc29ce73786569ede0", "html_url": "https://github.com/rust-lang/rust/commit/28798132aafd9623b6dc3ffc29ce73786569ede0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28798132aafd9623b6dc3ffc29ce73786569ede0/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "663d2f5cd3163f17eddb74ee1e028d542255f21a", "url": "https://api.github.com/repos/rust-lang/rust/commits/663d2f5cd3163f17eddb74ee1e028d542255f21a", "html_url": "https://github.com/rust-lang/rust/commit/663d2f5cd3163f17eddb74ee1e028d542255f21a"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "87a59c873b1976340924cbcd86ed7e89a085d1ba", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/28798132aafd9623b6dc3ffc29ce73786569ede0/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28798132aafd9623b6dc3ffc29ce73786569ede0/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=28798132aafd9623b6dc3ffc29ce73786569ede0", "patch": "@@ -34,8 +34,8 @@ use crate::slice::{self, SliceIndex};\n /// it is your responsibility to ensure that `as_mut` is never called, and `as_ptr`\n /// is never used for mutation.\n ///\n-/// [`PhantomData`]: ../marker/struct.PhantomData.html\n-/// [`UnsafeCell<T>`]: ../cell/struct.UnsafeCell.html\n+/// [`PhantomData`]: crate::marker::PhantomData\n+/// [`UnsafeCell<T>`]: crate::cell::UnsafeCell\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n #[repr(transparent)]\n #[rustc_layout_scalar_valid_range_start(1)]\n@@ -82,8 +82,8 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// For the mutable counterpart see [`as_uninit_mut`].\n     ///\n-    /// [`as_ref`]: #method.as_ref\n-    /// [`as_uninit_mut`]: #method.as_uninit_mut\n+    /// [`as_ref`]: NonNull::as_ref\n+    /// [`as_uninit_mut`]: NonNull::as_uninit_mut\n     ///\n     /// # Safety\n     ///\n@@ -114,8 +114,8 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// For the shared counterpart see [`as_uninit_ref`].\n     ///\n-    /// [`as_mut`]: #method.as_mut\n-    /// [`as_uninit_ref`]: #method.as_uninit_ref\n+    /// [`as_mut`]: NonNull::as_mut\n+    /// [`as_uninit_ref`]: NonNull::as_uninit_ref\n     ///\n     /// # Safety\n     ///\n@@ -181,8 +181,8 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// For the mutable counterpart see [`as_mut`].\n     ///\n-    /// [`as_uninit_ref`]: #method.as_uninit_ref\n-    /// [`as_mut`]: #method.as_mut\n+    /// [`as_uninit_ref`]: NonNull::as_uninit_ref\n+    /// [`as_mut`]: NonNull::as_mut\n     ///\n     /// # Safety\n     ///\n@@ -217,8 +217,8 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// For the shared counterpart see [`as_ref`].\n     ///\n-    /// [`as_uninit_mut`]: #method.as_uninit_mut\n-    /// [`as_ref`]: #method.as_ref\n+    /// [`as_uninit_mut`]: NonNull::as_uninit_mut\n+    /// [`as_ref`]: NonNull::as_ref\n     ///\n     /// # Safety\n     ///\n@@ -266,8 +266,6 @@ impl<T> NonNull<[T]> {\n     /// This function is safe, but dereferencing the return value is unsafe.\n     /// See the documentation of [`slice::from_raw_parts`] for slice safety requirements.\n     ///\n-    /// [`slice::from_raw_parts`]: ../../std/slice/fn.from_raw_parts.html\n-    ///\n     /// # Examples\n     ///\n     /// ```rust\n@@ -357,8 +355,8 @@ impl<T> NonNull<[T]> {\n     ///\n     /// For the mutable counterpart see [`as_uninit_slice_mut`].\n     ///\n-    /// [`as_ref`]: #method.as_ref\n-    /// [`as_uninit_slice_mut`]: #method.as_uninit_slice_mut\n+    /// [`as_ref`]: NonNull::as_ref\n+    /// [`as_uninit_slice_mut`]: NonNull::as_uninit_slice_mut\n     ///\n     /// # Safety\n     ///\n@@ -386,10 +384,9 @@ impl<T> NonNull<[T]> {\n     ///\n     /// This applies even if the result of this method is unused!\n     ///\n-    /// See also [`slice::from_raw_parts`][].\n+    /// See also [`slice::from_raw_parts`].\n     ///\n     /// [valid]: crate::ptr#safety\n-    /// [`NonNull::dangling()`]: NonNull::dangling\n     /// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n@@ -403,8 +400,8 @@ impl<T> NonNull<[T]> {\n     ///\n     /// For the shared counterpart see [`as_uninit_slice`].\n     ///\n-    /// [`as_mut`]: #method.as_mut\n-    /// [`as_uninit_slice`]: #method.as_uninit_slice\n+    /// [`as_mut`]: NonNull::as_mut\n+    /// [`as_uninit_slice`]: NonNull::as_uninit_slice\n     ///\n     /// # Safety\n     ///\n@@ -432,10 +429,9 @@ impl<T> NonNull<[T]> {\n     ///\n     /// This applies even if the result of this method is unused!\n     ///\n-    /// See also [`slice::from_raw_parts_mut`][].\n+    /// See also [`slice::from_raw_parts_mut`].\n     ///\n     /// [valid]: crate::ptr#safety\n-    /// [`NonNull::dangling()`]: NonNull::dangling\n     /// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n     ///\n     /// # Examples"}]}