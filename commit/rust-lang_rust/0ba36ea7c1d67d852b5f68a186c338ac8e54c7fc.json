{"sha": "0ba36ea7c1d67d852b5f68a186c338ac8e54c7fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYTM2ZWE3YzFkNjdkODUyYjVmNjhhMTg2YzMzOGFjOGU1NGM3ZmM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-31T21:19:58Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-04T21:43:14Z"}, "message": "Add some useful methods to `HygieneData`.", "tree": {"sha": "f72f640696e897b9aee71bbf40bf3919cb034307", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f72f640696e897b9aee71bbf40bf3919cb034307"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ba36ea7c1d67d852b5f68a186c338ac8e54c7fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba36ea7c1d67d852b5f68a186c338ac8e54c7fc", "html_url": "https://github.com/rust-lang/rust/commit/0ba36ea7c1d67d852b5f68a186c338ac8e54c7fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ba36ea7c1d67d852b5f68a186c338ac8e54c7fc/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8797e8cabdd47d1731bbd12099d0cd5503d22d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/8797e8cabdd47d1731bbd12099d0cd5503d22d76", "html_url": "https://github.com/rust-lang/rust/commit/8797e8cabdd47d1731bbd12099d0cd5503d22d76"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "c23d27879f781ff4253c73688287880909a664b4", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0ba36ea7c1d67d852b5f68a186c338ac8e54c7fc/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba36ea7c1d67d852b5f68a186c338ac8e54c7fc/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=0ba36ea7c1d67d852b5f68a186c338ac8e54c7fc", "patch": "@@ -200,10 +200,6 @@ impl HygieneData {\n         GLOBALS.with(|globals| f(&mut *globals.hygiene_data.borrow_mut()))\n     }\n \n-    fn outer(&self, ctxt: SyntaxContext) -> Mark {\n-        self.syntax_contexts[ctxt.0 as usize].outer_mark\n-    }\n-\n     fn expn_info(&self, mark: Mark) -> Option<ExpnInfo> {\n         self.marks[mark.0 as usize].expn_info.clone()\n     }\n@@ -217,6 +213,26 @@ impl HygieneData {\n         }\n         true\n     }\n+\n+    fn modern(&self, ctxt: SyntaxContext) -> SyntaxContext {\n+        self.syntax_contexts[ctxt.0 as usize].opaque\n+    }\n+\n+    fn modern_and_legacy(&self, ctxt: SyntaxContext) -> SyntaxContext {\n+        self.syntax_contexts[ctxt.0 as usize].opaque_and_semitransparent\n+    }\n+\n+    fn outer(&self, ctxt: SyntaxContext) -> Mark {\n+        self.syntax_contexts[ctxt.0 as usize].outer_mark\n+    }\n+\n+    fn transparency(&self, ctxt: SyntaxContext) -> Transparency {\n+        self.syntax_contexts[ctxt.0 as usize].transparency\n+    }\n+\n+    fn prev_ctxt(&self, ctxt: SyntaxContext) -> SyntaxContext {\n+        self.syntax_contexts[ctxt.0 as usize].prev_ctxt\n+    }\n }\n \n pub fn clear_markings() {\n@@ -388,7 +404,7 @@ impl SyntaxContext {\n     pub fn remove_mark(&mut self) -> Mark {\n         HygieneData::with(|data| {\n             let outer_mark = data.syntax_contexts[self.0 as usize].outer_mark;\n-            *self = data.syntax_contexts[self.0 as usize].prev_ctxt;\n+            *self = data.prev_ctxt(*self);\n             outer_mark\n         })\n     }\n@@ -397,9 +413,11 @@ impl SyntaxContext {\n         HygieneData::with(|data| {\n             let mut marks = Vec::new();\n             while self != SyntaxContext::empty() {\n-                let ctxt_data = &data.syntax_contexts[self.0 as usize];\n-                marks.push((ctxt_data.outer_mark, ctxt_data.transparency));\n-                self = ctxt_data.prev_ctxt;\n+                let outer_mark = data.outer(self);\n+                let transparency = data.transparency(self);\n+                let prev_ctxt = data.prev_ctxt(self);\n+                marks.push((outer_mark, transparency));\n+                self = prev_ctxt;\n             }\n             marks.reverse();\n             marks\n@@ -506,12 +524,12 @@ impl SyntaxContext {\n \n     #[inline]\n     pub fn modern(self) -> SyntaxContext {\n-        HygieneData::with(|data| data.syntax_contexts[self.0 as usize].opaque)\n+        HygieneData::with(|data| data.modern(self))\n     }\n \n     #[inline]\n     pub fn modern_and_legacy(self) -> SyntaxContext {\n-        HygieneData::with(|data| data.syntax_contexts[self.0 as usize].opaque_and_semitransparent)\n+        HygieneData::with(|data| data.modern_and_legacy(self))\n     }\n \n     #[inline]"}]}