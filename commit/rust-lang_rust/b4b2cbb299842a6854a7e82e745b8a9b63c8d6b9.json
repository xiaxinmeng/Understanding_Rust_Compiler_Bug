{"sha": "b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YjJjYmIyOTk4NDJhNjg1NGE3ZTgyZTc0NWI4YTliNjNjOGQ2Yjk=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-06-15T03:16:03Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-06-22T00:24:20Z"}, "message": "Change calls for TypeName stuff to methods", "tree": {"sha": "7ffc75d2c19fbd10c871dc6fbac7ecaa3f0c4741", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ffc75d2c19fbd10c871dc6fbac7ecaa3f0c4741"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "html_url": "https://github.com/rust-lang/rust/commit/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/comments", "author": null, "committer": null, "parents": [{"sha": "3dbdb3a3646931cb11db90d65971da8b16d819e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbdb3a3646931cb11db90d65971da8b16d819e4", "html_url": "https://github.com/rust-lang/rust/commit/3dbdb3a3646931cb11db90d65971da8b16d819e4"}], "stats": {"total": 159, "additions": 78, "deletions": 81}, "files": [{"sha": "4ed8ee6d157ec6303372e8baea124e01093244f9", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "patch": "@@ -2143,7 +2143,7 @@ impl TypeNames {\n     }\n \n     pub fn find_type(&self, s: &str) -> Option<TypeRef> {\n-        self.named_types.find_equiv(s).map_consume(|x| *x)\n+        self.named_types.find_equiv(&s).map_consume(|x| *x)\n     }\n \n     pub fn type_to_str(&self, ty: TypeRef) -> ~str {\n@@ -2181,7 +2181,7 @@ impl TypeNames {\n                 }\n                 Struct => {\n                     let tys = struct_tys(ty);\n-                    let tys = tys.map(|ty| self.type_to_str(ty)).connect(\", \");\n+                    let tys = tys.map(|&ty| self.type_to_str(ty)).connect(\", \");\n                     fmt!(\"{%s}\", tys)\n                 }\n                 Array => {\n@@ -2195,9 +2195,16 @@ impl TypeNames {\n                     let el_ty = self.type_to_str(el_ty);\n                     fmt!(\"*%s\", el_ty)\n                 }\n+                _ => fail!(\"Unknown Type Kind (%u)\", kind as uint)\n             }\n         }\n     }\n+\n+    pub fn val_to_str(&self, val: ValueRef) -> ~str {\n+        unsafe {\n+            self.type_to_str(llvm::LLVMTypeOf(val))\n+        }\n+    }\n }\n \n pub fn float_width(llt: TypeRef) -> uint {"}, {"sha": "2b46b3b27248682ec8c82a020699682ab00ed5e0", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "patch": "@@ -381,7 +381,7 @@ pub fn expand_nested_bindings<'r>(bcx: block,\n            bcx.to_str(),\n            matches_to_str(bcx, m),\n            col,\n-           bcx.val_str(val));\n+           bcx.val_to_str(val));\n     let _indenter = indenter();\n \n     do m.map |br| {\n@@ -428,7 +428,7 @@ pub fn enter_match<'r>(bcx: block,\n            bcx.to_str(),\n            matches_to_str(bcx, m),\n            col,\n-           bcx.val_str(val));\n+           bcx.val_to_str(val));\n     let _indenter = indenter();\n \n     let mut result = ~[];\n@@ -474,7 +474,7 @@ pub fn enter_default<'r>(bcx: block,\n            bcx.to_str(),\n            matches_to_str(bcx, m),\n            col,\n-           bcx.val_str(val));\n+           bcx.val_to_str(val));\n     let _indenter = indenter();\n \n     do enter_match(bcx, dm, m, col, val) |p| {\n@@ -521,7 +521,7 @@ pub fn enter_opt<'r>(bcx: block,\n            bcx.to_str(),\n            matches_to_str(bcx, m),\n            col,\n-           bcx.val_str(val));\n+           bcx.val_to_str(val));\n     let _indenter = indenter();\n \n     let tcx = bcx.tcx();\n@@ -632,7 +632,7 @@ pub fn enter_rec_or_struct<'r>(bcx: block,\n            bcx.to_str(),\n            matches_to_str(bcx, m),\n            col,\n-           bcx.val_str(val));\n+           bcx.val_to_str(val));\n     let _indenter = indenter();\n \n     let dummy = @ast::pat {id: 0, node: ast::pat_wild, span: dummy_sp()};\n@@ -667,7 +667,7 @@ pub fn enter_tup<'r>(bcx: block,\n            bcx.to_str(),\n            matches_to_str(bcx, m),\n            col,\n-           bcx.val_str(val));\n+           bcx.val_to_str(val));\n     let _indenter = indenter();\n \n     let dummy = @ast::pat {id: 0, node: ast::pat_wild, span: dummy_sp()};\n@@ -695,7 +695,7 @@ pub fn enter_tuple_struct<'r>(bcx: block,\n            bcx.to_str(),\n            matches_to_str(bcx, m),\n            col,\n-           bcx.val_str(val));\n+           bcx.val_to_str(val));\n     let _indenter = indenter();\n \n     let dummy = @ast::pat {id: 0, node: ast::pat_wild, span: dummy_sp()};\n@@ -720,7 +720,7 @@ pub fn enter_box<'r>(bcx: block,\n            bcx.to_str(),\n            matches_to_str(bcx, m),\n            col,\n-           bcx.val_str(val));\n+           bcx.val_to_str(val));\n     let _indenter = indenter();\n \n     let dummy = @ast::pat {id: 0, node: ast::pat_wild, span: dummy_sp()};\n@@ -747,7 +747,7 @@ pub fn enter_uniq<'r>(bcx: block,\n            bcx.to_str(),\n            matches_to_str(bcx, m),\n            col,\n-           bcx.val_str(val));\n+           bcx.val_to_str(val));\n     let _indenter = indenter();\n \n     let dummy = @ast::pat {id: 0, node: ast::pat_wild, span: dummy_sp()};\n@@ -774,7 +774,7 @@ pub fn enter_region<'r>(bcx: block,\n            bcx.to_str(),\n            matches_to_str(bcx, m),\n            col,\n-           bcx.val_str(val));\n+           bcx.val_to_str(val));\n     let _indenter = indenter();\n \n     let dummy = @ast::pat { id: 0, node: ast::pat_wild, span: dummy_sp() };\n@@ -1202,9 +1202,7 @@ fn insert_lllocals(bcx: block,\n             }\n         };\n \n-        debug!(\"binding %? to %s\",\n-               binding_info.id,\n-               val_str(bcx.ccx().tn, llval));\n+        debug!(\"binding %? to %s\", binding_info.id, bcx.val_to_str(llval));\n         llmap.insert(binding_info.id, llval);\n     }\n     return bcx;\n@@ -1221,7 +1219,7 @@ pub fn compile_guard(bcx: block,\n            bcx.to_str(),\n            bcx.expr_to_str(guard_expr),\n            matches_to_str(bcx, m),\n-           vals.map(|v| bcx.val_str(*v)));\n+           vals.map(|v| bcx.val_to_str(*v)));\n     let _indenter = indenter();\n \n     let mut bcx = bcx;\n@@ -1272,7 +1270,7 @@ pub fn compile_submatch(bcx: block,\n     debug!(\"compile_submatch(bcx=%s, m=%s, vals=%?)\",\n            bcx.to_str(),\n            matches_to_str(bcx, m),\n-           vals.map(|v| bcx.val_str(*v)));\n+           vals.map(|v| bcx.val_to_str(*v)));\n     let _indenter = indenter();\n \n     /*"}, {"sha": "f6c9c15f19bd7054044fff0a7ae1134441eeee46", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "patch": "@@ -191,8 +191,8 @@ pub fn Invoke(cx: block,\n     check_not_terminated(cx);\n     terminate(cx, \"Invoke\");\n     debug!(\"Invoke(%s with arguments (%s))\",\n-           val_str(cx.ccx().tn, Fn),\n-           Args.map(|a| val_str(cx.ccx().tn, *a).to_owned()).connect(\", \"));\n+           cx.val_to_str(Fn),\n+           Args.map(|a| cx.val_to_str(*a)).connect(\", \"));\n     unsafe {\n         count_insn(cx, \"invoke\");\n         llvm::LLVMBuildInvoke(B(cx),\n@@ -576,8 +576,8 @@ pub fn Store(cx: block, Val: ValueRef, Ptr: ValueRef) {\n     unsafe {\n         if cx.unreachable { return; }\n         debug!(\"Store %s -> %s\",\n-               val_str(cx.ccx().tn, Val),\n-               val_str(cx.ccx().tn, Ptr));\n+               cx.val_to_str(Val),\n+               cx.val_to_str(Ptr));\n         count_insn(cx, \"store\");\n         llvm::LLVMBuildStore(B(cx), Val, Ptr);\n     }\n@@ -587,8 +587,8 @@ pub fn AtomicStore(cx: block, Val: ValueRef, Ptr: ValueRef, order: AtomicOrderin\n     unsafe {\n         if cx.unreachable { return; }\n         debug!(\"Store %s -> %s\",\n-               val_str(cx.ccx().tn, Val),\n-               val_str(cx.ccx().tn, Ptr));\n+               cx.val_to_str(Val),\n+               cx.val_to_str(Ptr));\n         count_insn(cx, \"store.atomic\");\n         let align = llalign_of_min(cx.ccx(), cx.ccx().int_type);\n         llvm::LLVMBuildAtomicStore(B(cx), Val, Ptr, order, align as c_uint);\n@@ -911,11 +911,11 @@ pub fn InlineAsmCall(cx: block, asm: *c_char, cons: *c_char,\n                          else          { lib::llvm::False };\n \n         let argtys = do inputs.map |v| {\n-            debug!(\"Asm Input Type: %?\", val_str(cx.ccx().tn, *v));\n+            debug!(\"Asm Input Type: %?\", cx.val_to_str(*v));\n             val_ty(*v)\n         };\n \n-        debug!(\"Asm Output Type: %?\", ty_str(cx.ccx().tn, output));\n+        debug!(\"Asm Output Type: %?\", cx.ccx().tn.type_to_str(output));\n         let llfty = T_fn(argtys, output);\n         let v = llvm::LLVMInlineAsm(llfty, asm, cons, volatile,\n                                     alignstack, dia as c_uint);\n@@ -930,8 +930,8 @@ pub fn Call(cx: block, Fn: ValueRef, Args: &[ValueRef]) -> ValueRef {\n         count_insn(cx, \"call\");\n \n         debug!(\"Call(Fn=%s, Args=%?)\",\n-               val_str(cx.ccx().tn, Fn),\n-               Args.map(|arg| val_str(cx.ccx().tn, *arg)));\n+               cx.val_to_str(Fn),\n+               Args.map(|arg| cx.val_to_str(*arg)));\n \n         do vec::as_imm_buf(Args) |ptr, len| {\n             llvm::LLVMBuildCall(B(cx), Fn, ptr, len as c_uint, noname())"}, {"sha": "e5006c854cdabd793c84af895c0dad6813fcd1e1", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "patch": "@@ -572,9 +572,9 @@ pub fn trans_call_inner(in_cx: block,\n \n         // Uncomment this to debug calls.\n         /*\n-        io::println(fmt!(\"calling: %s\", bcx.val_str(llfn)));\n+        io::println(fmt!(\"calling: %s\", bcx.val_to_str(llfn)));\n         for llargs.each |llarg| {\n-            io::println(fmt!(\"arg: %s\", bcx.val_str(*llarg)));\n+            io::println(fmt!(\"arg: %s\", bcx.val_to_str(*llarg)));\n         }\n         io::println(\"---\");\n         */\n@@ -731,7 +731,7 @@ pub fn trans_arg_expr(bcx: block,\n            formal_arg_ty.repr(bcx.tcx()),\n            self_mode,\n            arg_expr.repr(bcx.tcx()),\n-           ret_flag.map(|v| bcx.val_str(*v)));\n+           ret_flag.map(|v| bcx.val_to_str(*v)));\n \n     // translate the arg expr to a datum\n     let arg_datumblock = match ret_flag {\n@@ -842,11 +842,11 @@ pub fn trans_arg_expr(bcx: block,\n                 ty::ByCopy => llformal_arg_ty,\n             };\n             debug!(\"casting actual type (%s) to match formal (%s)\",\n-                   bcx.val_str(val), bcx.llty_str(llformal_arg_ty));\n+                   bcx.val_to_str(val), bcx.llty_str(llformal_arg_ty));\n             val = PointerCast(bcx, val, llformal_arg_ty);\n         }\n     }\n \n-    debug!(\"--- trans_arg_expr passing %s\", val_str(bcx.ccx().tn, val));\n+    debug!(\"--- trans_arg_expr passing %s\", bcx.val_to_str(val));\n     return rslt(bcx, val);\n }"}, {"sha": "b8bf295e809ae722fc25760cd43ae9cbd25ede78", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "patch": "@@ -17,7 +17,7 @@ use driver::session;\n use driver::session::Session;\n use lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n use lib::llvm::{True, False, Bool};\n-use lib::llvm::{llvm, TypeNames, associate_type, name_has_type};\n+use lib::llvm::{llvm, TypeNames};\n use lib;\n use middle::trans::base;\n use middle::trans::build;\n@@ -372,7 +372,7 @@ pub fn add_clean(bcx: block, val: ValueRef, t: ty::t) {\n     if !ty::type_needs_drop(bcx.tcx(), t) { return; }\n     debug!(\"add_clean(%s, %s, %s)\",\n            bcx.to_str(),\n-           val_str(bcx.ccx().tn, val),\n+           bcx.val_to_str(val),\n            t.repr(bcx.tcx()));\n     let (root, rooted) = root_for_cleanup(bcx, val, t);\n     let cleanup_type = cleanup_type(bcx.tcx(), t);\n@@ -387,7 +387,7 @@ pub fn add_clean(bcx: block, val: ValueRef, t: ty::t) {\n pub fn add_clean_temp_immediate(cx: block, val: ValueRef, ty: ty::t) {\n     if !ty::type_needs_drop(cx.tcx(), ty) { return; }\n     debug!(\"add_clean_temp_immediate(%s, %s, %s)\",\n-           cx.to_str(), val_str(cx.ccx().tn, val),\n+           cx.to_str(), cx.val_to_str(val),\n            ty.repr(cx.tcx()));\n     let cleanup_type = cleanup_type(cx.tcx(), ty);\n     do in_scope_cx(cx) |scope_info| {\n@@ -400,7 +400,7 @@ pub fn add_clean_temp_immediate(cx: block, val: ValueRef, ty: ty::t) {\n pub fn add_clean_temp_mem(bcx: block, val: ValueRef, t: ty::t) {\n     if !ty::type_needs_drop(bcx.tcx(), t) { return; }\n     debug!(\"add_clean_temp_mem(%s, %s, %s)\",\n-           bcx.to_str(), val_str(bcx.ccx().tn, val),\n+           bcx.to_str(), bcx.val_to_str(val),\n            t.repr(bcx.tcx()));\n     let (root, rooted) = root_for_cleanup(bcx, val, t);\n     let cleanup_type = cleanup_type(bcx.tcx(), t);\n@@ -427,8 +427,8 @@ pub fn add_clean_return_to_mut(bcx: block,\n \n     debug!(\"add_clean_return_to_mut(%s, %s, %s)\",\n            bcx.to_str(),\n-           val_str(bcx.ccx().tn, frozen_val_ref),\n-           val_str(bcx.ccx().tn, bits_val_ref));\n+           bcx.val_to_str(frozen_val_ref),\n+           bcx.val_to_str(bits_val_ref));\n     do in_scope_cx(bcx) |scope_info| {\n         scope_info.cleanups.push(\n             clean_temp(\n@@ -623,20 +623,12 @@ impl Result {\n     }\n }\n \n-pub fn ty_str(tn: @TypeNames, t: TypeRef) -> @str {\n-    return lib::llvm::type_to_str(tn, t);\n-}\n-\n pub fn val_ty(v: ValueRef) -> TypeRef {\n     unsafe {\n         return llvm::LLVMTypeOf(v);\n     }\n }\n \n-pub fn val_str(tn: @TypeNames, v: ValueRef) -> @str {\n-    return ty_str(tn, val_ty(v));\n-}\n-\n pub fn in_scope_cx(cx: block, f: &fn(si: @mut scope_info)) {\n     let mut cur = cx;\n     loop {\n@@ -664,27 +656,27 @@ pub fn block_parent(cx: block) -> block {\n // Accessors\n \n impl block_ {\n-    pub fn ccx(@mut self) -> @mut CrateContext { self.fcx.ccx }\n-    pub fn tcx(@mut self) -> ty::ctxt { self.fcx.ccx.tcx }\n-    pub fn sess(@mut self) -> Session { self.fcx.ccx.sess }\n+    pub fn ccx(&self) -> @mut CrateContext { self.fcx.ccx }\n+    pub fn tcx(&self) -> ty::ctxt { self.fcx.ccx.tcx }\n+    pub fn sess(&self) -> Session { self.fcx.ccx.sess }\n \n-    pub fn node_id_to_str(@mut self, id: ast::node_id) -> ~str {\n+    pub fn node_id_to_str(&self, id: ast::node_id) -> ~str {\n         ast_map::node_id_to_str(self.tcx().items, id, self.sess().intr())\n     }\n \n-    pub fn expr_to_str(@mut self, e: @ast::expr) -> ~str {\n+    pub fn expr_to_str(&self, e: @ast::expr) -> ~str {\n         e.repr(self.tcx())\n     }\n \n-    pub fn expr_is_lval(@mut self, e: @ast::expr) -> bool {\n+    pub fn expr_is_lval(&self, e: @ast::expr) -> bool {\n         ty::expr_is_lval(self.tcx(), self.ccx().maps.method_map, e)\n     }\n \n-    pub fn expr_kind(@mut self, e: @ast::expr) -> ty::ExprKind {\n+    pub fn expr_kind(&self, e: @ast::expr) -> ty::ExprKind {\n         ty::expr_kind(self.tcx(), self.ccx().maps.method_map, e)\n     }\n \n-    pub fn def(@mut self, nid: ast::node_id) -> ast::def {\n+    pub fn def(&self, nid: ast::node_id) -> ast::def {\n         match self.tcx().def_map.find(&nid) {\n             Some(&v) => v,\n             None => {\n@@ -694,19 +686,19 @@ impl block_ {\n         }\n     }\n \n-    pub fn val_str(@mut self, val: ValueRef) -> @str {\n-        val_str(self.ccx().tn, val)\n+    pub fn val_to_str(&self, val: ValueRef) -> ~str {\n+        self.ccx().tn.val_to_str(val)\n     }\n \n-    pub fn llty_str(@mut self, llty: TypeRef) -> @str {\n-        ty_str(self.ccx().tn, llty)\n+    pub fn llty_str(&self, llty: TypeRef) -> ~str {\n+        self.ccx().tn.type_to_str(llty)\n     }\n \n-    pub fn ty_to_str(@mut self, t: ty::t) -> ~str {\n+    pub fn ty_to_str(&self, t: ty::t) -> ~str {\n         t.repr(self.tcx())\n     }\n \n-    pub fn to_str(@mut self) -> ~str {\n+    pub fn to_str(&self) -> ~str {\n         unsafe {\n             match self.node_info {\n                 Some(node_info) => fmt!(\"[block %d]\", node_info.id),\n@@ -885,12 +877,12 @@ pub fn T_tydesc_field(cx: &CrateContext, field: uint) -> TypeRef {\n \n pub fn T_generic_glue_fn(cx: &mut CrateContext) -> TypeRef {\n     let s = @\"glue_fn\";\n-    match name_has_type(cx.tn, s) {\n+    match cx.tn.find_type(s) {\n       Some(t) => return t,\n       _ => ()\n     }\n     let t = T_tydesc_field(cx, abi::tydesc_field_drop_glue);\n-    associate_type(cx.tn, s, t);\n+    cx.tn.associate_type(s, t);\n     return t;\n }\n \n@@ -1227,7 +1219,7 @@ pub fn const_get_elt(cx: &CrateContext, v: ValueRef, us: &[c_uint])\n         };\n \n         debug!(\"const_get_elt(v=%s, us=%?, r=%s)\",\n-               val_str(cx.tn, v), us, val_str(cx.tn, r));\n+               cx.tn.val_to_str(v), us, cx.tn.val_to_str(r));\n \n         return r;\n     }"}, {"sha": "76b7189a9d4c25fe32e6bd10d8fad54801d8a98e", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "patch": "@@ -14,7 +14,7 @@ use back::{upcall};\n use driver::session;\n use lib::llvm::{ContextRef, ModuleRef, ValueRef, TypeRef};\n use lib::llvm::{llvm, TargetData, TypeNames};\n-use lib::llvm::{mk_target_data, mk_type_names};\n+use lib::llvm::{mk_target_data};\n use lib;\n use metadata::common::LinkMeta;\n use middle::astencode;\n@@ -138,7 +138,7 @@ impl CrateContext {\n             let targ_cfg = sess.targ_cfg;\n \n             let td = mk_target_data(sess.targ_cfg.target_strs.data_layout);\n-            let tn = TypeNames::new();\n+            let mut tn = TypeNames::new();\n \n             let mut intrinsics = base::declare_intrinsics(llmod);\n             if sess.opts.extra_debuginfo {"}, {"sha": "c162318824f563ad8095e8fdf894bce6dd598ea2", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "patch": "@@ -280,7 +280,7 @@ impl Datum {\n         }\n \n         debug!(\"copy_to(self=%s, action=%?, dst=%s)\",\n-               self.to_str(bcx.ccx()), action, bcx.val_str(dst));\n+               self.to_str(bcx.ccx()), action, bcx.val_to_str(dst));\n \n         // Watch out for the case where we are writing the copying the\n         // value into the same location we read it out from.  We want\n@@ -345,7 +345,7 @@ impl Datum {\n         let mut bcx = bcx;\n \n         debug!(\"move_to(self=%s, action=%?, dst=%s)\",\n-               self.to_str(bcx.ccx()), action, bcx.val_str(dst));\n+               self.to_str(bcx.ccx()), action, bcx.val_to_str(dst));\n \n         if ty::type_is_nil(self.ty) || ty::type_is_bot(self.ty) {\n             return bcx;\n@@ -409,7 +409,7 @@ impl Datum {\n \n     pub fn to_str(&self, ccx: &CrateContext) -> ~str {\n         fmt!(\"Datum { val=%s, ty=%s, mode=%? }\",\n-             val_str(ccx.tn, self.val),\n+             ccx.tn.val_to_str(self.val),\n              ty_to_str(ccx.tcx, self.ty),\n              self.mode)\n     }"}, {"sha": "d79e725a2b7dc08761bff98e5a838d9bcf8381dc", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "patch": "@@ -173,7 +173,7 @@ pub enum Dest {\n impl Dest {\n     pub fn to_str(&self, ccx: &CrateContext) -> ~str {\n         match *self {\n-            SaveIn(v) => fmt!(\"SaveIn(%s)\", val_str(ccx.tn, v)),\n+            SaveIn(v) => fmt!(\"SaveIn(%s)\", ccx.tn.val_to_str(v)),\n             Ignore => ~\"Ignore\"\n         }\n     }\n@@ -914,8 +914,8 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n             len = Sub(bcx, len, C_uint(bcx.ccx(), 1u));\n         }\n \n-        debug!(\"trans_index: base %s\", val_str(bcx.ccx().tn, base));\n-        debug!(\"trans_index: len %s\", val_str(bcx.ccx().tn, len));\n+        debug!(\"trans_index: base %s\", bcx.val_to_str(base));\n+        debug!(\"trans_index: len %s\", bcx.val_to_str(len));\n \n         let bounds_check = ICmp(bcx, lib::llvm::IntUGE, scaled_ix, len);\n         let bcx = do with_cond(bcx, bounds_check) |bcx| {\n@@ -1081,7 +1081,7 @@ pub fn trans_local_var(bcx: block, def: ast::def) -> Datum {\n         };\n         let ty = node_id_type(bcx, nid);\n         debug!(\"take_local(nid=%?, v=%s, ty=%s)\",\n-               nid, bcx.val_str(v), bcx.ty_to_str(ty));\n+               nid, bcx.val_to_str(v), bcx.ty_to_str(ty));\n         Datum {\n             val: v,\n             ty: ty,"}, {"sha": "dc3fe3fb931579b34c7c443b40b5bcc37bd28eb7", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "patch": "@@ -140,7 +140,7 @@ pub fn static_size_of_enum(cx: &mut CrateContext, t: ty::t) -> uint {\n \n                 debug!(\"static_size_of_enum: variant %s type %s\",\n                        cx.tcx.sess.str_of(variant.name),\n-                       ty_str(cx.tn, T_struct(lltypes, false)));\n+                       cx.tn.type_to_str(T_struct(lltypes, false)));\n \n                 let this_size = llsize_of_real(cx, T_struct(lltypes, false));\n                 if max_size < this_size {"}, {"sha": "ee429a247465f9b4bc1db91b1ecfe837473ff5ce", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "patch": "@@ -623,7 +623,7 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n \n     // Load the vtable from the @Trait pair\n     debug!(\"(translating trait callee) loading vtable from pair %s\",\n-           val_str(bcx.ccx().tn, llpair));\n+           bcx.val_to_str(llpair));\n     let llvtable = Load(bcx,\n                       PointerCast(bcx,\n                                   GEPi(bcx, llpair,"}, {"sha": "cb7e2cb4e6e154a1336d1190e234848fe1d52275", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "patch": "@@ -96,7 +96,7 @@ impl Reflector {\n         debug!(\"passing %u args:\", args.len());\n         let bcx = self.bcx;\n         for args.iter().enumerate().advance |(i, a)| {\n-            debug!(\"arg %u: %s\", i, val_str(bcx.ccx().tn, *a));\n+            debug!(\"arg %u: %s\", i, bcx.val_to_str(*a));\n         }\n         let bool_ty = ty::mk_bool();\n         let scratch = scratch_datum(bcx, bool_ty, false);"}, {"sha": "b39fff61d64f1da5a6261ef93f337a31e3972a2a", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "patch": "@@ -155,8 +155,8 @@ impl VecTypes {\n         fmt!(\"VecTypes {vec_ty=%s, unit_ty=%s, llunit_ty=%s, llunit_size=%s}\",\n              ty_to_str(ccx.tcx, self.vec_ty),\n              ty_to_str(ccx.tcx, self.unit_ty),\n-             ty_str(ccx.tn, self.llunit_ty),\n-             val_str(ccx.tn, self.llunit_size))\n+             ccx.tn.type_to_str(self.llunit_ty),\n+             ccx.tn.val_to_str(self.llunit_size))\n     }\n }\n \n@@ -336,7 +336,7 @@ pub fn trans_uniq_or_managed_vstore(bcx: block,\n     let dataptr = get_dataptr(bcx, get_bodyptr(bcx, val));\n \n     debug!(\"alloc_vec() returned val=%s, dataptr=%s\",\n-           bcx.val_str(val), bcx.val_str(dataptr));\n+           bcx.val_to_str(val), bcx.val_to_str(dataptr));\n \n     let bcx = write_content(bcx, &vt, vstore_expr,\n                             content_expr, SaveIn(dataptr));\n@@ -389,7 +389,7 @@ pub fn write_content(bcx: block,\n                     for elements.iter().enumerate().advance |(i, element)| {\n                         let lleltptr = GEPi(bcx, lldest, [i]);\n                         debug!(\"writing index %? with lleltptr=%?\",\n-                               i, bcx.val_str(lleltptr));\n+                               i, bcx.val_to_str(lleltptr));\n                         bcx = expr::trans_into(bcx, *element,\n                                                SaveIn(lleltptr));\n                         add_clean_temp_mem(bcx, lleltptr, vt.unit_ty);"}, {"sha": "91885f4dc4ff168beb42a9bfc82a79e4c1978347", "filename": "src/librustc/middle/trans/write_guard.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs?ref=b4b2cbb299842a6854a7e82e745b8a9b63c8d6b9", "patch": "@@ -64,8 +64,8 @@ pub fn return_to_mut(mut bcx: block,\n     debug!(\"write_guard::return_to_mut(root_key=%?, %s, %s, %s)\",\n            root_key,\n            bcx.to_str(),\n-           val_str(bcx.ccx().tn, frozen_val_ref),\n-           val_str(bcx.ccx().tn, bits_val_ref));\n+           bcx.val_to_str(frozen_val_ref),\n+           bcx.val_to_str(bits_val_ref));\n \n     let box_ptr =\n         Load(bcx, PointerCast(bcx,"}]}