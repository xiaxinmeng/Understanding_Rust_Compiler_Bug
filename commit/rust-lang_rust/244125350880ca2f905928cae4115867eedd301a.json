{"sha": "244125350880ca2f905928cae4115867eedd301a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NDEyNTM1MDg4MGNhMmY5MDU5MjhjYWU0MTE1ODY3ZWVkZDMwMWE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-11T20:35:39Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-12T10:38:27Z"}, "message": "Fix fallout from `deny(unused_lifetimes)`.", "tree": {"sha": "f8741d6ba0faad55ede30137152f4957d3848dc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8741d6ba0faad55ede30137152f4957d3848dc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/244125350880ca2f905928cae4115867eedd301a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/244125350880ca2f905928cae4115867eedd301a", "html_url": "https://github.com/rust-lang/rust/commit/244125350880ca2f905928cae4115867eedd301a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/244125350880ca2f905928cae4115867eedd301a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37799a5552d308da5d74d9654036f2f541f3c8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/37799a5552d308da5d74d9654036f2f541f3c8c3", "html_url": "https://github.com/rust-lang/rust/commit/37799a5552d308da5d74d9654036f2f541f3c8c3"}], "stats": {"total": 1169, "additions": 583, "deletions": 586}, "files": [{"sha": "a6a688460dd6f34b8f84457979d87f59fe88b0c0", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -30,7 +30,7 @@ struct LoopScope {\n     break_index: CFGIndex,    // where to go on a `break`\n }\n \n-pub fn construct<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn construct<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                            body: &hir::Body) -> CFG {\n     let mut graph = graph::Graph::new();\n     let entry = graph.add_node(CFGNodeData::Entry);"}, {"sha": "887f550f351b61af7e973911872ec76650baedfe", "filename": "src/librustc/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -49,7 +49,7 @@ pub type CFGNode = graph::Node<CFGNodeData>;\n pub type CFGEdge = graph::Edge<CFGEdgeData>;\n \n impl CFG {\n-    pub fn new<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub fn new<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                          body: &hir::Body) -> CFG {\n         construct::construct(tcx, body)\n     }"}, {"sha": "6789912a03e2fe1a7c9dc60cac77389869ff394d", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -842,7 +842,7 @@ impl DepGraph {\n     //\n     // This method will only load queries that will end up in the disk cache.\n     // Other queries will not be executed.\n-    pub fn exec_cache_promotions<'a, 'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+    pub fn exec_cache_promotions<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n         let green_nodes: Vec<DepNode> = {\n             let data = self.data.as_ref().unwrap();\n             data.colors.values.indices().filter_map(|prev_index| {"}, {"sha": "e03d18950a6901b988ba5bf07bf1dd6a57f13722", "filename": "src/librustc/dep_graph/safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fsafe.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -33,7 +33,7 @@ impl DepGraphSafe for DefId {\n \n /// The type context itself can be used to access all kinds of tracked\n /// state, but those accesses should always generate read events.\n-impl<'a, 'gcx, 'tcx> DepGraphSafe for TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> DepGraphSafe for TyCtxt<'tcx, 'gcx, 'tcx> {\n }\n \n /// Tuples make it easy to build up state."}, {"sha": "c1d070f53af03209b15f30e7f7b87556ce290eb0", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -478,7 +478,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n     /// `self.var_values == [Type(u32), Lifetime('a), Type(u64)]`\n     /// we'll return a substitution `subst` with:\n     /// `subst.var_values == [Type(^0), Lifetime(^1), Type(^2)]`.\n-    pub fn make_identity<'a>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Self {\n+    pub fn make_identity(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Self {\n         use crate::ty::subst::UnpackedKind;\n \n         CanonicalVarValues {"}, {"sha": "137cae149d6e55bf4d99ceed571f3f0cf41caa2e", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -67,7 +67,7 @@ mod need_type_info;\n \n pub mod nice_region_error;\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     pub fn note_and_explain_region(\n         self,\n         region_scope_tree: &region::ScopeTree,"}, {"sha": "5b04e6d1f0a843248768410d6d4e1815ecf8d390", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -1624,7 +1624,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for ShallowResolver<'a, 'gcx, 'tcx>\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TypeTrace<'tcx> {\n+impl<'gcx, 'tcx> TypeTrace<'tcx> {\n     pub fn span(&self) -> Span {\n         self.cause.span\n     }"}, {"sha": "cf7765c8f12f9cb9d60a019bb729785bef9fe9c5", "filename": "src/librustc/infer/outlives/free_region_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -28,7 +28,7 @@ impl<'tcx> FreeRegionMap<'tcx> {\n     /// cases, this is more conservative than necessary, in order to\n     /// avoid making arbitrary choices. See\n     /// `TransitiveRelation::postdom_upper_bound` for more details.\n-    pub fn lub_free_regions<'a, 'gcx>(&self,\n+    pub fn lub_free_regions<'gcx>(&self,\n                                       tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                       r_a: Region<'tcx>,\n                                       r_b: Region<'tcx>)\n@@ -90,7 +90,7 @@ impl_stable_hash_for!(struct FreeRegionMap<'tcx> {\n \n impl<'a, 'tcx> Lift<'tcx> for FreeRegionMap<'a> {\n     type Lifted = FreeRegionMap<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<FreeRegionMap<'tcx>> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<FreeRegionMap<'tcx>> {\n         self.relation.maybe_map(|&fr| tcx.lift(&fr))\n                      .map(|relation| FreeRegionMap { relation })\n     }"}, {"sha": "ff186718f99b71e09dbe78113ed29e45d8b930cd", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -849,7 +849,7 @@ impl<'tcx> fmt::Display for GenericKind<'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> GenericKind<'tcx> {\n+impl<'gcx, 'tcx> GenericKind<'tcx> {\n     pub fn to_ty(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n         match *self {\n             GenericKind::Param(ref p) => p.to_ty(tcx),"}, {"sha": "6a46ed50679ef944d15e7fcc31c43d0206835ce3", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -10,7 +10,7 @@ use std::marker::PhantomData;\n use std::cell::RefMut;\n \n pub trait ToType {\n-    fn to_type<'a, 'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx>;\n+    fn to_type<'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx>;\n }\n \n impl UnifyKey for ty::IntVid {\n@@ -52,7 +52,7 @@ impl UnifyKey for ty::RegionVid {\n }\n \n impl ToType for IntVarValue {\n-    fn to_type<'a, 'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n+    fn to_type<'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n         match *self {\n             ty::IntType(i) => tcx.mk_mach_int(i),\n             ty::UintType(i) => tcx.mk_mach_uint(i),\n@@ -72,7 +72,7 @@ impl UnifyKey for ty::FloatVid {\n impl EqUnifyValue for FloatVarValue {}\n \n impl ToType for FloatVarValue {\n-    fn to_type<'a, 'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n+    fn to_type<'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n         tcx.mk_mach_float(self.0)\n     }\n }"}, {"sha": "6311639d67765585476382bde8cda855e416fb73", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -766,7 +766,7 @@ pub fn maybe_lint_level_root(tcx: TyCtxt<'_, '_, '_>, id: hir::HirId) -> bool {\n     attrs.iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some())\n }\n \n-fn lint_levels<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, cnum: CrateNum)\n+fn lint_levels<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, cnum: CrateNum)\n     -> &'tcx LintLevelMap\n {\n     assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "38e453191a363f00857dd7fa51b7c6cf79370fb5", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -264,7 +264,7 @@ macro_rules! BraceStructLiftImpl {\n         {\n             type Lifted = $lifted;\n \n-            fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<$lifted> {\n+            fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<$lifted> {\n                 $(let $field = tcx.lift(&self.$field)?;)*\n                 Some(Self::Lifted { $($field),* })\n             }\n@@ -283,7 +283,7 @@ macro_rules! EnumLiftImpl {\n         {\n             type Lifted = $lifted;\n \n-            fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<$lifted> {\n+            fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<$lifted> {\n                 EnumLiftImpl!(@Variants(self, tcx) input($($variants)*) output())\n             }\n         }"}, {"sha": "16fed08e0d0e6ce37cbd1ca98fd9903ef68883cb", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -211,7 +211,7 @@ pub trait CrateStore {\n     fn crates_untracked(&self) -> Vec<CrateNum>;\n \n     // utility functions\n-    fn encode_metadata<'a, 'tcx>(&self,\n+    fn encode_metadata<'tcx>(&self,\n                                  tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n                                  -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];"}, {"sha": "ca23722da320ea6f63d97e398eaba4af442359eb", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -26,7 +26,7 @@ use syntax_pos;\n // explored. For example, if it's a live Node::Item that is a\n // function, then we should explore its block to check for codes that\n // may need to be marked as live.\n-fn should_explore<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn should_explore<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                             hir_id: hir::HirId) -> bool {\n     match tcx.hir().find_by_hir_id(hir_id) {\n         Some(Node::Item(..)) |\n@@ -423,7 +423,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n     }\n }\n \n-fn create_and_seed_worklist<'a, 'tcx>(\n+fn create_and_seed_worklist<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     access_levels: &privacy::AccessLevels,\n     krate: &hir::Crate,\n@@ -451,7 +451,7 @@ fn create_and_seed_worklist<'a, 'tcx>(\n     (life_seeder.worklist, life_seeder.struct_constructors)\n }\n \n-fn find_live<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn find_live<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                        access_levels: &privacy::AccessLevels,\n                        krate: &hir::Crate)\n                        -> FxHashSet<hir::HirId> {\n@@ -660,7 +660,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     }\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n     let krate = tcx.hir().krate();\n     let live_symbols = find_live(tcx, access_levels, krate);"}, {"sha": "c5ab8f79baa58c7d36b590004ed6deb44267b824", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -81,7 +81,7 @@ pub enum Linkage {\n     Dynamic,\n }\n \n-pub fn calculate<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn calculate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     let sess = &tcx.sess;\n     let fmts = sess.crate_types.borrow().iter().map(|&ty| {\n         let linkage = calculate_type(tcx, ty);\n@@ -92,7 +92,7 @@ pub fn calculate<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     sess.dependency_formats.set(fmts);\n }\n \n-fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn calculate_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                             ty: config::CrateType) -> DependencyList {\n \n     let sess = &tcx.sess;\n@@ -267,7 +267,7 @@ fn add_library(tcx: TyCtxt<'_, '_, '_>,\n     }\n }\n \n-fn attempt_static<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Option<DependencyList> {\n+fn attempt_static<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Option<DependencyList> {\n     let sess = &tcx.sess;\n     let crates = cstore::used_crates(tcx, RequireStatic);\n     if !crates.iter().by_ref().all(|&(_, ref p)| p.is_some()) {\n@@ -324,7 +324,7 @@ fn activate_injected_dep(injected: Option<CrateNum>,\n \n // After the linkage for a crate has been determined we need to verify that\n // there's only going to be one allocator in the output.\n-fn verify_ok<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, list: &[Linkage]) {\n+fn verify_ok<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, list: &[Linkage]) {\n     let sess = &tcx.sess;\n     if list.len() == 0 {\n         return"}, {"sha": "ba890e62770895776be4bd32d52045413a19c0f9", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -36,7 +36,7 @@ struct ExprVisitor<'tcx> {\n \n /// If the type is `Option<T>`, it will return `T`, otherwise\n /// the type itself. Works on most `Option`-like types.\n-fn unpack_option_like<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn unpack_option_like<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                 ty: Ty<'tcx>)\n                                 -> Ty<'tcx> {\n     let (def, substs) = match ty.sty {"}, {"sha": "c70179b5818c6ba979d899c64136e39743ebfa1b", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -217,7 +217,7 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n }\n \n /// Traverse and collect all the lang items in all crates.\n-pub fn collect<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> LanguageItems {\n+pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> LanguageItems {\n     // Initialize the collector.\n     let mut collector = LanguageItemCollector::new(tcx);\n \n@@ -402,7 +402,7 @@ language_item_table! {\n     Rc,                          \"rc\",                 rc,                      Target::Struct;\n }\n \n-impl<'a, 'tcx, 'gcx> TyCtxt<'gcx, 'tcx, 'gcx> {\n+impl<'tcx, 'gcx> TyCtxt<'gcx, 'tcx, 'gcx> {\n     /// Returns the `DefId` for a given `LangItem`.\n     /// If not found, fatally abort compilation.\n     pub fn require_lang_item(&self, lang_item: LangItem) -> DefId {"}, {"sha": "a6f305d73898fc136acba067a711c58fe4353bef", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -142,7 +142,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     }\n }\n \n-pub fn collect<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> LibFeatures {\n+pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n     intravisit::walk_crate(&mut collector, tcx.hir().krate());\n     collector.lib_features"}, {"sha": "3a8afed724c1b890e98a497b3f995fa8c4b76df2", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -166,7 +166,7 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_, '_, '_>) -> Strin\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n+impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n@@ -411,7 +411,7 @@ fn visit_fn<'a, 'tcx: 'a>(ir: &mut IrMaps<'tcx>,\n     lsets.warn_about_unused_args(body, entry_ln);\n }\n \n-fn add_from_pat<'a, 'tcx>(ir: &mut IrMaps<'tcx>, pat: &P<hir::Pat>) {\n+fn add_from_pat<'tcx>(ir: &mut IrMaps<'tcx>, pat: &P<hir::Pat>) {\n     // For struct patterns, take note of which fields used shorthand\n     // (`x` rather than `x: x`).\n     let mut shorthand_field_ids = HirIdSet::default();\n@@ -457,19 +457,19 @@ fn add_from_pat<'a, 'tcx>(ir: &mut IrMaps<'tcx>, pat: &P<hir::Pat>) {\n     });\n }\n \n-fn visit_local<'a, 'tcx>(ir: &mut IrMaps<'tcx>, local: &'tcx hir::Local) {\n+fn visit_local<'tcx>(ir: &mut IrMaps<'tcx>, local: &'tcx hir::Local) {\n     add_from_pat(ir, &local.pat);\n     intravisit::walk_local(ir, local);\n }\n \n-fn visit_arm<'a, 'tcx>(ir: &mut IrMaps<'tcx>, arm: &'tcx hir::Arm) {\n+fn visit_arm<'tcx>(ir: &mut IrMaps<'tcx>, arm: &'tcx hir::Arm) {\n     for pat in &arm.pats {\n         add_from_pat(ir, pat);\n     }\n     intravisit::walk_arm(ir, arm);\n }\n \n-fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'tcx>, expr: &'tcx Expr) {\n+fn visit_expr<'tcx>(ir: &mut IrMaps<'tcx>, expr: &'tcx Expr) {\n     match expr.node {\n       // live nodes required for uses or definitions of variables:\n       hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) => {"}, {"sha": "1488b61dddc0813908870533fd6f9eb875713bf0", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -44,7 +44,7 @@ fn item_might_be_inlined(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn method_might_be_inlined<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn method_might_be_inlined<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                      impl_item: &hir::ImplItem,\n                                      impl_src: DefId) -> bool {\n     let codegen_fn_attrs = tcx.codegen_fn_attrs(impl_item.hir_id.owner_def_id());\n@@ -391,7 +391,7 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n #[derive(Clone, HashStable)]\n pub struct ReachableSet(pub Lrc<HirIdSet>);\n \n-fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, crate_num: CrateNum) -> ReachableSet {\n+fn reachable_set<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, crate_num: CrateNum) -> ReachableSet {\n     debug_assert!(crate_num == LOCAL_CRATE);\n \n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);"}, {"sha": "c7c838e43155673b54ad22782a84a968f475c9ec", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -646,7 +646,7 @@ impl<'tcx> ScopeTree {\n \n     /// Assuming that the provided region was defined within this `ScopeTree`,\n     /// returns the outermost `Scope` that the region outlives.\n-    pub fn early_free_scope<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn early_free_scope<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                       br: &ty::EarlyBoundRegion)\n                                       -> Scope {\n         let param_owner = tcx.parent(br.def_id).unwrap();\n@@ -677,7 +677,7 @@ impl<'tcx> ScopeTree {\n \n     /// Assuming that the provided region was defined within this `ScopeTree`,\n     /// returns the outermost `Scope` that the region outlives.\n-    pub fn free_scope<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, fr: &ty::FreeRegion)\n+    pub fn free_scope<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, fr: &ty::FreeRegion)\n                                  -> Scope {\n         let param_owner = match fr.bound_region {\n             ty::BoundRegion::BrNamed(def_id, _) => {\n@@ -748,7 +748,7 @@ fn record_var_lifetime(visitor: &mut RegionResolutionVisitor<'_>,\n     }\n }\n \n-fn resolve_block<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, blk: &'tcx hir::Block) {\n+fn resolve_block<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, blk: &'tcx hir::Block) {\n     debug!(\"resolve_block(blk.hir_id={:?})\", blk.hir_id);\n \n     let prev_cx = visitor.cx;\n@@ -816,7 +816,7 @@ fn resolve_block<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, blk: &'t\n     visitor.cx = prev_cx;\n }\n \n-fn resolve_arm<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, arm: &'tcx hir::Arm) {\n+fn resolve_arm<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, arm: &'tcx hir::Arm) {\n     let prev_cx = visitor.cx;\n \n     visitor.enter_scope(\n@@ -838,7 +838,7 @@ fn resolve_arm<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, arm: &'tcx\n     visitor.cx = prev_cx;\n }\n \n-fn resolve_pat<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, pat: &'tcx hir::Pat) {\n+fn resolve_pat<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, pat: &'tcx hir::Pat) {\n     visitor.record_child_scope(Scope { id: pat.hir_id.local_id, data: ScopeData::Node });\n \n     // If this is a binding then record the lifetime of that binding.\n@@ -855,7 +855,7 @@ fn resolve_pat<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, pat: &'tcx\n     debug!(\"resolve_pat - post-increment {} pat = {:?}\", visitor.expr_and_pat_count, pat);\n }\n \n-fn resolve_stmt<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, stmt: &'tcx hir::Stmt) {\n+fn resolve_stmt<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, stmt: &'tcx hir::Stmt) {\n     let stmt_id = stmt.hir_id.local_id;\n     debug!(\"resolve_stmt(stmt.id={:?})\", stmt_id);\n \n@@ -874,7 +874,7 @@ fn resolve_stmt<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, stmt: &'t\n     visitor.cx.parent = prev_parent;\n }\n \n-fn resolve_expr<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx hir::Expr) {\n+fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx hir::Expr) {\n     debug!(\"resolve_expr - pre-increment {} expr = {:?}\", visitor.expr_and_pat_count, expr);\n \n     let prev_cx = visitor.cx;\n@@ -977,7 +977,7 @@ fn resolve_expr<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'t\n     visitor.cx = prev_cx;\n }\n \n-fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>,\n+fn resolve_local<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>,\n                            pat: Option<&'tcx hir::Pat>,\n                            init: Option<&'tcx hir::Expr>) {\n     debug!(\"resolve_local(pat={:?}, init={:?})\", pat, init);\n@@ -1127,7 +1127,7 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>,\n     ///        | box E&\n     ///        | E& as ...\n     ///        | ( E& )\n-    fn record_rvalue_scope_if_borrow_expr<'a, 'tcx>(\n+    fn record_rvalue_scope_if_borrow_expr<'tcx>(\n         visitor: &mut RegionResolutionVisitor<'tcx>,\n         expr: &hir::Expr,\n         blk_id: Option<Scope>)\n@@ -1178,7 +1178,7 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>,\n     ///        | <rvalue>\n     ///\n     /// Note: ET is intended to match \"rvalues or places based on rvalues\".\n-    fn record_rvalue_scope<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>,\n+    fn record_rvalue_scope<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>,\n                                      expr: &hir::Expr,\n                                      blk_scope: Option<Scope>) {\n         let mut expr = expr;\n@@ -1205,7 +1205,7 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>,\n     }\n }\n \n-impl<'a, 'tcx> RegionResolutionVisitor<'tcx> {\n+impl<'tcx> RegionResolutionVisitor<'tcx> {\n     /// Records the current parent (if any) as the parent of `child_scope`.\n     /// Returns the depth of `child_scope`.\n     fn record_child_scope(&mut self, child_scope: Scope) -> ScopeDepth {\n@@ -1235,7 +1235,7 @@ impl<'a, 'tcx> RegionResolutionVisitor<'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::None\n     }\n@@ -1327,7 +1327,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n     }\n }\n \n-fn region_scope_tree<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n+fn region_scope_tree<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n     -> &'tcx ScopeTree\n {\n     let closure_base_def_id = tcx.closure_base_def_id(def_id);"}, {"sha": "b812ef504eeac0485c6c78d828839e3394a27bb5", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -389,7 +389,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Index<'tcx> {\n+impl<'tcx> Index<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Index<'tcx> {\n         let is_staged_api =\n             tcx.sess.opts.debugging_opts.force_unstable_if_unmarked ||\n@@ -521,7 +521,7 @@ pub enum EvalResult {\n     Unmarked,\n }\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     // See issue #38412.\n     fn skip_stability_check_due_to_privacy(self, mut def_id: DefId) -> bool {\n         // Check if `def_id` is a trait method.\n@@ -827,7 +827,7 @@ impl Visitor<'tcx> for Checker<'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     pub fn lookup_deprecation(self, id: DefId) -> Option<Deprecation> {\n         self.lookup_deprecation_entry(id).map(|depr| depr.attr)\n     }\n@@ -836,7 +836,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n /// Given the list of enabled features that were not language features (i.e., that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n-pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check_unused_or_stable_features<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n@@ -920,7 +920,7 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n     // don't lint about unused features. We should reenable this one day!\n }\n \n-fn unnecessary_stable_feature_lint<'a, 'tcx>(\n+fn unnecessary_stable_feature_lint<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     span: Span,\n     feature: Symbol,"}, {"sha": "d7c340c4040ac46bb59c07f998c2c3d31908c125", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -24,7 +24,7 @@ struct Context<'a, 'tcx: 'a> {\n \n /// Checks the crate for usage of weak lang items, returning a vector of all the\n /// language items required by this crate, but not defined yet.\n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                              items: &mut lang_items::LanguageItems) {\n     // These are never called by user code, they're generated by the compiler.\n     // They will never implicitly be added to the `missing` array unless we do\n@@ -72,7 +72,7 @@ pub fn whitelisted(tcx: TyCtxt<'_, '_, '_>, lang_item: lang_items::LangItem) ->\n     false\n }\n \n-fn verify<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn verify<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                     items: &lang_items::LanguageItems) {\n     // We only need to check for the presence of weak lang items if we're\n     // emitting something that's not an rlib.\n@@ -142,7 +142,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, 'gcx> TyCtxt<'gcx, 'tcx, 'gcx> {\n+impl<'tcx, 'gcx> TyCtxt<'gcx, 'tcx, 'gcx> {\n     pub fn is_weak_lang_item(&self, item_def_id: DefId) -> bool {\n         let lang_items = self.lang_items();\n         let did = Some(item_def_id);"}, {"sha": "35ac2ccb28922a7bb76bb7b5b956e36c98055716", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> fmt::Display for FrameInfo<'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n+impl<'gcx, 'tcx> ConstEvalErr<'tcx> {\n     pub fn struct_error(&self,\n         tcx: TyCtxtAt<'gcx, 'tcx>,\n         message: &str)\n@@ -172,7 +172,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n     }\n }\n \n-pub fn struct_error<'a, 'gcx, 'tcx>(\n+pub fn struct_error<'gcx, 'tcx>(\n     tcx: TyCtxtAt<'gcx, 'tcx>,\n     msg: &str,\n ) -> DiagnosticBuilder<'tcx> {"}, {"sha": "48d5f0d0f49315e385d277bb689c0ff9fe210888", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -64,10 +64,7 @@ enum AllocDiscriminant {\n     Static,\n }\n \n-pub fn specialized_encode_alloc_id<\n-    'a, 'tcx,\n-    E: Encoder,\n->(\n+pub fn specialized_encode_alloc_id<'tcx, E: Encoder>(\n     encoder: &mut E,\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     alloc_id: AllocId,\n@@ -147,7 +144,7 @@ pub struct AllocDecodingSession<'s> {\n impl<'s> AllocDecodingSession<'s> {\n \n     // Decodes an AllocId in a thread-safe way.\n-    pub fn decode_alloc_id<'a, 'tcx, D>(&self,\n+    pub fn decode_alloc_id<'tcx, D>(&self,\n                                         decoder: &mut D)\n                                         -> Result<AllocId, D::Error>\n         where D: TyDecoder<'tcx>,"}, {"sha": "46e8468847e9632033e3208bceb3c8195b2b121c", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -1240,7 +1240,7 @@ impl<'tcx> Terminator<'tcx> {\n }\n \n impl<'tcx> TerminatorKind<'tcx> {\n-    pub fn if_<'a, 'gcx>(\n+    pub fn if_<'gcx>(\n         tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n         cond: Operand<'tcx>,\n         t: BasicBlock,\n@@ -2323,7 +2323,7 @@ impl<'tcx> Operand<'tcx> {\n     /// Convenience helper to make a constant that refers to the fn\n     /// with given `DefId` and substs. Since this is used to synthesize\n     /// MIR, assumes `user_ty` is None.\n-    pub fn function_handle<'a>(\n+    pub fn function_handle(\n         tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,"}, {"sha": "cc169aa30ccf81dfcfe256c39bc4af88ee0ece70", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -48,7 +48,7 @@ pub enum MonoItem<'tcx> {\n }\n \n impl<'tcx> MonoItem<'tcx> {\n-    pub fn size_estimate<'a>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> usize {\n+    pub fn size_estimate(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> usize {\n         match *self {\n             MonoItem::Fn(instance) => {\n                 // Estimate the size of a function based on how many statements\n@@ -195,7 +195,7 @@ impl<'tcx> MonoItem<'tcx> {\n             }\n         };\n \n-        fn to_string_internal<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        fn to_string_internal<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                         prefix: &str,\n                                         instance: Instance<'tcx>,\n                                         debug: bool)\n@@ -334,7 +334,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n         base_n::encode(hash, base_n::CASE_INSENSITIVE)\n     }\n \n-    pub fn estimate_size<'a>(&mut self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+    pub fn estimate_size(&mut self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n         // Estimate the size of a codegen unit as (approximately) the number of MIR\n         // statements it corresponds to.\n         self.size_estimate = Some(self.items.keys().map(|mi| mi.size_estimate(tcx)).sum());\n@@ -369,7 +369,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n             })\n     }\n \n-    pub fn items_in_deterministic_order<'a>(&self,\n+    pub fn items_in_deterministic_order(&self,\n                                         tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n                                         -> Vec<(MonoItem<'tcx>,\n                                                 (Linkage, Visibility))> {\n@@ -378,7 +378,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n         #[derive(PartialEq, Eq, PartialOrd, Ord)]\n         pub struct ItemSortKey(Option<HirId>, SymbolName);\n \n-        fn item_sort_key<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        fn item_sort_key<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                    item: MonoItem<'tcx>) -> ItemSortKey {\n             ItemSortKey(match item {\n                 MonoItem::Fn(ref instance) => {"}, {"sha": "696bec3e0a2bad4378f032d4095eb16f81ec4a04", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -21,7 +21,7 @@ pub struct PlaceTy<'tcx> {\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(PlaceTy<'_>, 16);\n \n-impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n+impl<'gcx, 'tcx> PlaceTy<'tcx> {\n     pub fn from_ty(ty: Ty<'tcx>) -> PlaceTy<'tcx> {\n         PlaceTy { ty, variant_index: None }\n     }\n@@ -121,7 +121,7 @@ BraceStructTypeFoldableImpl! {\n }\n \n impl<'tcx> Place<'tcx> {\n-    pub fn ty<'a, 'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> PlaceTy<'tcx>\n+    pub fn ty<'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> PlaceTy<'tcx>\n         where D: HasLocalDecls<'tcx>\n     {\n         match *self {\n@@ -141,7 +141,7 @@ pub enum RvalueInitializationState {\n }\n \n impl<'tcx> Rvalue<'tcx> {\n-    pub fn ty<'a, 'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx>\n+    pub fn ty<'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx>\n         where D: HasLocalDecls<'tcx>\n     {\n         match *self {\n@@ -222,7 +222,7 @@ impl<'tcx> Rvalue<'tcx> {\n }\n \n impl<'tcx> Operand<'tcx> {\n-    pub fn ty<'a, 'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx>\n+    pub fn ty<'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx>\n         where D: HasLocalDecls<'tcx>\n     {\n         match self {\n@@ -234,7 +234,7 @@ impl<'tcx> Operand<'tcx> {\n }\n \n impl<'tcx> BinOp {\n-      pub fn ty<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+      pub fn ty<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                           lhs_ty: Ty<'tcx>,\n                           rhs_ty: Ty<'tcx>)\n                           -> Ty<'tcx> {"}, {"sha": "cc10107f682d58d11886d03784b203a16144c77e", "filename": "src/librustc/traits/codegen/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -18,7 +18,7 @@ use crate::ty::fold::TypeFoldable;\n /// that type check should guarantee to us that all nested\n /// obligations *could be* resolved if we wanted to.\n /// Assumes that this is run after the entire crate has been successfully type-checked.\n-pub fn codegen_fulfill_obligation<'a, 'tcx>(ty: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn codegen_fulfill_obligation<'tcx>(ty: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                           (param_env, trait_ref):\n                                           (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>))\n                                           -> Vtable<'tcx, ()>\n@@ -74,7 +74,7 @@ pub fn codegen_fulfill_obligation<'a, 'tcx>(ty: TyCtxt<'tcx, 'tcx, 'tcx>,\n     })\n }\n \n-impl<'a, 'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n     /// Monomorphizes a type from the AST by first applying the\n     /// in-scope substitutions and then normalizing any associated\n     /// types."}, {"sha": "763c752ab301f5dd8e5e616a1315dbac43f7d598", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -183,7 +183,7 @@ fn overlap_within_probe(\n     Some(OverlapResult { impl_header, intercrate_ambiguity_causes, involves_placeholder })\n }\n \n-pub fn trait_ref_is_knowable<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn trait_ref_is_knowable<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                              trait_ref: ty::TraitRef<'tcx>)\n                                              -> Option<Conflict>\n {\n@@ -229,7 +229,7 @@ pub fn trait_ref_is_knowable<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     }\n }\n \n-pub fn trait_ref_is_local_or_fundamental<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn trait_ref_is_local_or_fundamental<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                                          trait_ref: ty::TraitRef<'tcx>)\n                                                          -> bool {\n     trait_ref.def_id.krate == LOCAL_CRATE || tcx.has_attr(trait_ref.def_id, sym::fundamental)\n@@ -246,7 +246,7 @@ pub enum OrphanCheckErr<'tcx> {\n ///\n /// 1. All type parameters in `Self` must be \"covered\" by some local type constructor.\n /// 2. Some local type must appear in `Self`.\n-pub fn orphan_check<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn orphan_check<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                     impl_def_id: DefId)\n                                     -> Result<(), OrphanCheckErr<'tcx>>\n {"}, {"sha": "5ed627ccee4bd9a95b310551ed05aea50ed98c63", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -1249,7 +1249,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                            found: ty::PolyTraitRef<'tcx>)\n         -> DiagnosticBuilder<'tcx>\n     {\n-        fn build_fn_sig_string<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        fn build_fn_sig_string<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                                trait_ref: &ty::TraitRef<'tcx>) -> String {\n             let inputs = trait_ref.substs.type_at(1);\n             let sig = if let ty::Tuple(inputs) = inputs.sty {\n@@ -1294,7 +1294,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     pub fn recursive_type_with_infinite_size_error(self,\n                                                    type_def_id: DefId)\n                                                    -> DiagnosticBuilder<'tcx>"}, {"sha": "e6bab57584f437eb7a6747040a49f73c02461840", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -140,7 +140,7 @@ pub struct ObligationCause<'tcx> {\n }\n \n impl<'tcx> ObligationCause<'tcx> {\n-    pub fn span<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Span {\n+    pub fn span<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Span {\n         match self.code {\n             ObligationCauseCode::CompareImplMethodObligation { .. } |\n             ObligationCauseCode::MainFunctionType |\n@@ -363,7 +363,7 @@ impl<'tcx> DomainGoal<'tcx> {\n }\n \n impl<'tcx> GoalKind<'tcx> {\n-    pub fn from_poly_domain_goal<'a, 'gcx>(\n+    pub fn from_poly_domain_goal<'gcx>(\n         domain_goal: PolyDomainGoal<'tcx>,\n         tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     ) -> GoalKind<'tcx> {\n@@ -710,7 +710,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'gcx, 'tcx>(\n     }\n }\n \n-fn do_normalize_predicates<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn do_normalize_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                      region_context: DefId,\n                                      cause: ObligationCause<'tcx>,\n                                      elaborated_env: ty::ParamEnv<'tcx>,\n@@ -795,7 +795,7 @@ fn do_normalize_predicates<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n \n // FIXME: this is gonna need to be removed ...\n /// Normalizes the parameter environment, reporting errors if they occur.\n-pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn normalize_param_env_or_error<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                               region_context: DefId,\n                                               unnormalized_env: ty::ParamEnv<'tcx>,\n                                               cause: ObligationCause<'tcx>)\n@@ -936,7 +936,7 @@ pub fn fully_normalize<'a, 'gcx, 'tcx, T>(\n /// environment. If this returns false, then either normalize\n /// encountered an error or one of the predicates did not hold. Used\n /// when creating vtables to check for unsatisfiable methods.\n-fn normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn normalize_and_test_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                            predicates: Vec<ty::Predicate<'tcx>>)\n                                            -> bool\n {\n@@ -965,7 +965,7 @@ fn normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     result\n }\n \n-fn substitute_normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn substitute_normalize_and_test_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                       key: (DefId, SubstsRef<'tcx>))\n                                                       -> bool\n {\n@@ -983,7 +983,7 @@ fn substitute_normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 't\n /// Given a trait `trait_ref`, iterates the vtable entries\n /// that come from `trait_ref`, including its supertraits.\n #[inline] // FIXME(#35870): avoid closures being unexported due to `impl Trait`.\n-fn vtable_methods<'a, 'tcx>(\n+fn vtable_methods<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>)\n     -> &'tcx [Option<(DefId, SubstsRef<'tcx>)>]\n@@ -1205,17 +1205,17 @@ where\n     type LiftedDelayedLiteral: Debug + 'tcx;\n     type LiftedLiteral: Debug + 'tcx;\n \n-    fn lift_ex_clause_to_tcx<'a, 'gcx>(\n+    fn lift_ex_clause_to_tcx<'gcx>(\n         ex_clause: &chalk_engine::ExClause<Self>,\n         tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     ) -> Option<Self::LiftedExClause>;\n \n-    fn lift_delayed_literal_to_tcx<'a, 'gcx>(\n+    fn lift_delayed_literal_to_tcx<'gcx>(\n         ex_clause: &chalk_engine::DelayedLiteral<Self>,\n         tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     ) -> Option<Self::LiftedDelayedLiteral>;\n \n-    fn lift_literal_to_tcx<'a, 'gcx>(\n+    fn lift_literal_to_tcx<'gcx>(\n         ex_clause: &chalk_engine::Literal<Self>,\n         tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     ) -> Option<Self::LiftedLiteral>;"}, {"sha": "6923d1c0230d78ab05d1810e89a3e130d3ae945c", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -83,7 +83,7 @@ pub enum MethodViolationCode {\n     UndispatchableReceiver,\n }\n \n-impl<'a, 'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n \n     /// Returns the object safety violations that affect\n     /// astconv -- currently, `Self` in supertraits. This is needed\n@@ -703,7 +703,7 @@ impl<'a, 'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n     }\n }\n \n-pub(super) fn is_object_safe_provider<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub(super) fn is_object_safe_provider<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                 trait_def_id: DefId) -> bool {\n     tcx.object_safety_violations(trait_def_id).is_empty()\n }"}, {"sha": "e01e5b8b0b903fea2db7ba84585ea644cd0a1ca7", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -51,7 +51,7 @@ fn parse_error(tcx: TyCtxt<'_, '_, '_>, span: Span,\n     ErrorReported\n }\n \n-impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n+impl<'gcx, 'tcx> OnUnimplementedDirective {\n     fn parse(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                  trait_def_id: DefId,\n                  items: &[NestedMetaItem],\n@@ -214,7 +214,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n+impl<'gcx, 'tcx> OnUnimplementedFormatString {\n     fn try_parse(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                      trait_def_id: DefId,\n                      from: LocalInternedString,"}, {"sha": "45cc8b255aa43ccd848832e12d188ca3326c2a1c", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -836,7 +836,7 @@ struct Progress<'tcx> {\n }\n \n impl<'tcx> Progress<'tcx> {\n-    fn error<'a,'gcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Self {\n+    fn error<'gcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Self {\n         Progress {\n             ty: tcx.types.err,\n             obligations: vec![],"}, {"sha": "bab6fd542deb09854a256a9aa54dc6401687a424", "filename": "src/librustc/traits/query/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -10,7 +10,7 @@\n use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n \n-impl<'cx, 'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n     /// Erase the regions in `value` and then fully normalize all the\n     /// types found within. The result will also have regions erased.\n     ///"}, {"sha": "30270c72d1bd65399365eb6be3d7f28cf399e480", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -300,7 +300,7 @@ enum SelectionCandidate<'tcx> {\n \n impl<'a, 'tcx> ty::Lift<'tcx> for SelectionCandidate<'a> {\n     type Lifted = SelectionCandidate<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         Some(match *self {\n             BuiltinCandidate { has_nested } => BuiltinCandidate { has_nested },\n             ImplCandidate(def_id) => ImplCandidate(def_id),"}, {"sha": "6acee698c8e76644c754c271eecaf85271efa107", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -109,7 +109,7 @@ pub fn translate_substs<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n /// the kind `kind`, and trait method substitutions `substs`, in\n /// that impl, a less specialized impl, or the trait default,\n /// whichever applies.\n-pub fn find_associated_item<'a, 'tcx>(\n+pub fn find_associated_item<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     item: &ty::AssocItem,\n@@ -149,7 +149,7 @@ pub fn find_associated_item<'a, 'tcx>(\n /// Specialization is determined by the sets of types to which the impls apply;\n /// `impl1` specializes `impl2` if it applies to a subset of the types `impl2` applies\n /// to.\n-pub(super) fn specializes<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub(super) fn specializes<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                     (impl1_def_id, impl2_def_id): (DefId, DefId))\n     -> bool\n {\n@@ -285,7 +285,7 @@ fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n }\n \n // Query provider for `specialization_graph_of`.\n-pub(super) fn specialization_graph_provider<'a, 'tcx>(\n+pub(super) fn specialization_graph_provider<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     trait_id: DefId,\n ) -> &'tcx specialization_graph::Graph {"}, {"sha": "6650cda435d5a734fcf45fdc48d6b0d91717d319", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -81,7 +81,7 @@ enum Inserted {\n     ShouldRecurseOn(DefId),\n }\n \n-impl<'a, 'gcx, 'tcx> Children {\n+impl<'gcx, 'tcx> Children {\n     /// Insert an impl into this set of children without comparing to any existing impls.\n     fn insert_blindly(&mut self,\n                       tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n@@ -282,7 +282,7 @@ impl<I, J> Iterator for PotentialSiblings<I, J>\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> Graph {\n+impl<'gcx, 'tcx> Graph {\n     pub fn new() -> Graph {\n         Graph {\n             parent: Default::default(),\n@@ -414,7 +414,7 @@ pub enum Node {\n     Trait(DefId),\n }\n \n-impl<'a, 'gcx, 'tcx> Node {\n+impl<'gcx, 'tcx> Node {\n     pub fn is_from_trait(&self) -> bool {\n         match *self {\n             Node::Trait(..) => true,"}, {"sha": "f5853b69e8b7b5395f1a71aa015553851c9e11d1", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -446,7 +446,7 @@ impl<'tcx> fmt::Display for traits::Clause<'tcx> {\n \n impl<'a, 'tcx> Lift<'tcx> for traits::SelectionError<'a> {\n     type Lifted = traits::SelectionError<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             super::Unimplemented => Some(super::Unimplemented),\n             super::OutputTypeParameterMismatch(a, b, ref err) => {\n@@ -464,7 +464,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::SelectionError<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n     type Lifted = traits::ObligationCauseCode<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             super::ReturnNoExpression => Some(super::ReturnNoExpression),\n             super::MiscObligation => Some(super::MiscObligation),\n@@ -546,7 +546,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for traits::DerivedObligationCause<'a> {\n     type Lifted = traits::DerivedObligationCause<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.parent_trait_ref).and_then(|trait_ref|\n             tcx.lift(&*self.parent_code)\n                .map(|code| traits::DerivedObligationCause {\n@@ -559,7 +559,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::DerivedObligationCause<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCause<'a> {\n     type Lifted = traits::ObligationCause<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.code).map(|code| traits::ObligationCause {\n             span: self.span,\n             body_id: self.body_id,\n@@ -571,7 +571,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCause<'a> {\n // For codegen only.\n impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n     type Lifted = traits::Vtable<'tcx, ()>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match self.clone() {\n             traits::VtableImpl(traits::VtableImplData {\n                 impl_def_id,\n@@ -691,7 +691,7 @@ EnumLiftImpl! {\n \n impl<'a, 'tcx> Lift<'tcx> for traits::Environment<'a> {\n     type Lifted = traits::Environment<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.clauses).map(|clauses| {\n             traits::Environment {\n                 clauses,\n@@ -702,7 +702,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Environment<'a> {\n \n impl<'a, 'tcx, G: Lift<'tcx>> Lift<'tcx> for traits::InEnvironment<'a, G> {\n     type Lifted = traits::InEnvironment<'tcx, G::Lifted>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.environment).and_then(|environment| {\n             tcx.lift(&self.goal).map(|goal| {\n                 traits::InEnvironment {\n@@ -721,7 +721,7 @@ where\n {\n     type Lifted = C::LiftedExClause;\n \n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         <C as traits::ChalkContextLift>::lift_ex_clause_to_tcx(self, tcx)\n     }\n }\n@@ -733,7 +733,7 @@ where\n {\n     type Lifted = C::LiftedDelayedLiteral;\n \n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         <C as traits::ChalkContextLift>::lift_delayed_literal_to_tcx(self, tcx)\n     }\n }\n@@ -745,7 +745,7 @@ where\n {\n     type Lifted = C::LiftedLiteral;\n \n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         <C as traits::ChalkContextLift>::lift_literal_to_tcx(self, tcx)\n     }\n }"}, {"sha": "e77ac75279e337e03ee5f4bf1993c9a70e262084", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -12,7 +12,7 @@ use crate::util::nodemap::FxHashSet;\n \n use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext, Normalized};\n \n-fn anonymize_predicate<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn anonymize_predicate<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                        pred: &ty::Predicate<'tcx>)\n                                        -> ty::Predicate<'tcx> {\n     match *pred {\n@@ -93,15 +93,15 @@ pub struct Elaborator<'gcx, 'tcx> {\n     visited: PredicateSet<'gcx, 'tcx>,\n }\n \n-pub fn elaborate_trait_ref<'cx, 'gcx, 'tcx>(\n+pub fn elaborate_trait_ref<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>)\n     -> Elaborator<'gcx, 'tcx>\n {\n     elaborate_predicates(tcx, vec![trait_ref.to_predicate()])\n }\n \n-pub fn elaborate_trait_refs<'cx, 'gcx, 'tcx>(\n+pub fn elaborate_trait_refs<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     trait_refs: impl Iterator<Item = ty::PolyTraitRef<'tcx>>)\n     -> Elaborator<'gcx, 'tcx>\n@@ -110,7 +110,7 @@ pub fn elaborate_trait_refs<'cx, 'gcx, 'tcx>(\n     elaborate_predicates(tcx, predicates)\n }\n \n-pub fn elaborate_predicates<'cx, 'gcx, 'tcx>(\n+pub fn elaborate_predicates<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     mut predicates: Vec<ty::Predicate<'tcx>>)\n     -> Elaborator<'gcx, 'tcx>\n@@ -256,13 +256,13 @@ impl Iterator for Elaborator<'gcx, 'tcx> {\n \n pub type Supertraits<'gcx, 'tcx> = FilterToTraits<Elaborator<'gcx, 'tcx>>;\n \n-pub fn supertraits<'cx, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn supertraits<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                     trait_ref: ty::PolyTraitRef<'tcx>)\n                                     -> Supertraits<'gcx, 'tcx> {\n     elaborate_trait_ref(tcx, trait_ref).filter_to_traits()\n }\n \n-pub fn transitive_bounds<'cx, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn transitive_bounds<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                           bounds: impl Iterator<Item = ty::PolyTraitRef<'tcx>>)\n                                           -> Supertraits<'gcx, 'tcx> {\n     elaborate_trait_refs(tcx, bounds).filter_to_traits()\n@@ -337,7 +337,7 @@ impl<'tcx> TraitAliasExpansionInfo<'tcx> {\n     }\n }\n \n-pub fn expand_trait_aliases<'cx, 'gcx, 'tcx>(\n+pub fn expand_trait_aliases<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     trait_refs: impl IntoIterator<Item = (ty::PolyTraitRef<'tcx>, Span)>\n ) -> TraitAliasExpander<'gcx, 'tcx> {\n@@ -348,7 +348,7 @@ pub fn expand_trait_aliases<'cx, 'gcx, 'tcx>(\n     TraitAliasExpander { tcx, stack: items }\n }\n \n-impl<'cx, 'gcx, 'tcx> TraitAliasExpander<'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TraitAliasExpander<'gcx, 'tcx> {\n     /// If `item` is a trait alias and its predicate has not yet been visited, then expands `item`\n     /// to the definition, pushes the resulting expansion onto `self.stack`, and returns `false`.\n     /// Otherwise, immediately returns `true` if `item` is a regular trait, or `false` if it is a\n@@ -393,7 +393,7 @@ impl<'cx, 'gcx, 'tcx> TraitAliasExpander<'gcx, 'tcx> {\n     }\n }\n \n-impl<'cx, 'gcx, 'tcx> Iterator for TraitAliasExpander<'gcx, 'tcx> {\n+impl<'gcx, 'tcx> Iterator for TraitAliasExpander<'gcx, 'tcx> {\n     type Item = TraitAliasExpansionInfo<'tcx>;\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n@@ -420,7 +420,7 @@ pub struct SupertraitDefIds<'gcx, 'tcx> {\n     visited: FxHashSet<DefId>,\n }\n \n-pub fn supertrait_def_ids<'cx, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn supertrait_def_ids<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                            trait_def_id: DefId)\n                                            -> SupertraitDefIds<'gcx, 'tcx>\n {\n@@ -552,7 +552,7 @@ pub fn predicate_for_trait_ref<'tcx>(\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     pub fn predicate_for_trait_def(self,\n                                    param_env: ty::ParamEnv<'tcx>,\n                                    cause: ObligationCause<'tcx>,"}, {"sha": "bdc5cd3fb330ad75997c8a9de43da14ff2db22ac", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -103,7 +103,7 @@ pub struct OverloadedDeref<'tcx> {\n     pub mutbl: hir::Mutability,\n }\n \n-impl<'a, 'gcx, 'tcx> OverloadedDeref<'tcx> {\n+impl<'gcx, 'tcx> OverloadedDeref<'tcx> {\n     pub fn method_call(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, source: Ty<'tcx>)\n                        -> (DefId, SubstsRef<'tcx>) {\n         let trait_def_id = match self.mutbl {"}, {"sha": "fed7caef0d4d2b5f7d0b456305485581ad116578", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -6,7 +6,7 @@ use syntax_pos::symbol::{sym, Symbol};\n use crate::hir::map::blocks::FnLikeNode;\n use syntax::attr;\n \n-impl<'a, 'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n     /// Whether the `def_id` counts as const fn in your current crate, considering all active\n     /// feature gates\n     pub fn is_const_fn(self, def_id: DefId) -> bool {\n@@ -69,7 +69,7 @@ impl<'a, 'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n \n pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n     /// only checks whether the function has a `const` modifier\n-    fn is_const_fn_raw<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+    fn is_const_fn_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n         let hir_id = tcx.hir().as_local_hir_id(def_id)\n                               .expect(\"Non-local call to local provider is_const_fn\");\n \n@@ -83,7 +83,7 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n         }\n     }\n \n-    fn is_promotable_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+    fn is_promotable_const_fn<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n         tcx.is_const_fn(def_id) && match tcx.lookup_stability(def_id) {\n             Some(stab) => {\n                 if cfg!(debug_assertions) && stab.promotable {\n@@ -101,7 +101,7 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n         }\n     }\n \n-    fn const_fn_is_allowed_fn_ptr<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+    fn const_fn_is_allowed_fn_ptr<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n         tcx.is_const_fn(def_id) &&\n             tcx.lookup_stability(def_id)\n                 .map(|stab| stab.allow_const_fn_ptr).unwrap_or(false)"}, {"sha": "8212822ba82c712dcc775715ce3f2a93f0c04aa7", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -1666,7 +1666,7 @@ impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n     pub fn encode_metadata(self)\n         -> EncodedMetadata\n     {\n@@ -1725,15 +1725,15 @@ impl<'gcx> GlobalCtxt<'gcx> {\n /// e.g., `()` or `u8`, was interned in a different context.\n pub trait Lift<'tcx>: fmt::Debug {\n     type Lifted: fmt::Debug + 'tcx;\n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted>;\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted>;\n }\n \n \n macro_rules! nop_lift {\n     ($ty:ty => $lifted:ty) => {\n         impl<'a, 'tcx> Lift<'tcx> for $ty {\n             type Lifted = $lifted;\n-            fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+            fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n                 if tcx.interners.arena.in_arena(*self as *const _) {\n                     return Some(unsafe { mem::transmute(*self) });\n                 }\n@@ -1752,7 +1752,7 @@ macro_rules! nop_list_lift {\n     ($ty:ty => $lifted:ty) => {\n         impl<'a, 'tcx> Lift<'tcx> for &'a List<$ty> {\n             type Lifted = &'tcx List<$lifted>;\n-            fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+            fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n                 if self.is_empty() {\n                     return Some(List::empty());\n                 }\n@@ -1978,7 +1978,7 @@ pub mod tls {\n     /// Creates a TyCtxt and ImplicitCtxt based on the GCX_PTR thread local.\n     /// This is used in the deadlock handler.\n     pub unsafe fn with_global<F, R>(f: F) -> R\n-        where F: for<'a, 'gcx, 'tcx> FnOnce(TyCtxt<'tcx, 'gcx, 'tcx>) -> R\n+        where F: for<'gcx, 'tcx> FnOnce(TyCtxt<'tcx, 'gcx, 'tcx>) -> R\n     {\n         let gcx = GCX_PTR.with(|lock| *lock.lock());\n         assert!(gcx != 0);\n@@ -2065,7 +2065,7 @@ pub mod tls {\n     /// Panics if there is no ImplicitCtxt available\n     #[inline]\n     pub fn with<F, R>(f: F) -> R\n-        where F: for<'a, 'gcx, 'tcx> FnOnce(TyCtxt<'tcx, 'gcx, 'tcx>) -> R\n+        where F: for<'gcx, 'tcx> FnOnce(TyCtxt<'tcx, 'gcx, 'tcx>) -> R\n     {\n         with_context(|context| f(context.tcx))\n     }\n@@ -2074,7 +2074,7 @@ pub mod tls {\n     /// The closure is passed None if there is no ImplicitCtxt available\n     #[inline]\n     pub fn with_opt<F, R>(f: F) -> R\n-        where F: for<'a, 'gcx, 'tcx> FnOnce(Option<TyCtxt<'tcx, 'gcx, 'tcx>>) -> R\n+        where F: for<'gcx, 'tcx> FnOnce(Option<TyCtxt<'tcx, 'gcx, 'tcx>>) -> R\n     {\n         with_context_opt(|opt_context| f(opt_context.map(|context| context.tcx)))\n     }\n@@ -2151,7 +2151,7 @@ macro_rules! sty_debug_print {\n     }}\n }\n \n-impl<'a, 'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n     pub fn print_debug_stats(self) {\n         sty_debug_print!(\n             self,\n@@ -2400,7 +2400,7 @@ intern_method! {\n     ) -> List<CanonicalVarInfo>\n }\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     /// Given a `fn` type, returns an equivalent `unsafe fn` type;\n     /// that is, a `fn` type that is equivalent in every way for being\n     /// unsafe."}, {"sha": "df189d01a629a57a805ddf9ecb35c5b026ad1945", "filename": "src/librustc/ty/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferase_regions.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -8,13 +8,13 @@ pub(super) fn provide(providers: &mut ty::query::Providers<'_>) {\n     };\n }\n \n-fn erase_regions_ty<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n+fn erase_regions_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n     // N.B., use `super_fold_with` here. If we used `fold_with`, it\n     // could invoke the `erase_regions_ty` query recursively.\n     ty.super_fold_with(&mut RegionEraserVisitor { tcx })\n }\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     /// Returns an equivalent value with all free regions removed (note\n     /// that late-bound regions remain, because they are important for\n     /// subtyping, but they are anonymized and normalized as well).."}, {"sha": "632bbe229de3298b78fafa4811aa369069f831e9", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -183,7 +183,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n+impl<'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n     pub fn sort_string(&self, tcx: TyCtxt<'lcx, 'gcx, 'lcx>) -> Cow<'static, str> {\n         match self.sty {\n             ty::Bool | ty::Char | ty::Int(_) |\n@@ -249,7 +249,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     pub fn note_and_explain_type_err(self,\n                                      db: &mut DiagnosticBuilder<'_>,\n                                      err: &TypeError<'tcx>,"}, {"sha": "f858c92ff0d0ffd6514a58f8ce4d85bfd8d31fb4", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -55,7 +55,7 @@ pub enum SimplifiedTypeGen<D>\n /// then we can't say much about whether two types would unify. Put another way,\n /// `can_simplify_params` should be true if type parameters appear free in `ty` and `false` if they\n /// are to be considered bound.\n-pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn simplify_type<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                      ty: Ty<'_>,\n                                      can_simplify_params: bool)\n                                      -> Option<SimplifiedType>"}, {"sha": "1698d8d3cdd649cb4cb4f06c69bbbde838198bfe", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -235,7 +235,7 @@ impl<'gcx, 'tcx, F, G, H> TypeFolder<'gcx, 'tcx> for BottomUpFolder<'gcx, 'tcx,\n ///////////////////////////////////////////////////////////////////////////\n // Region folder\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     /// Collects the free and escaping regions in `value` into `region_set`. Returns\n     /// whether any late-bound regions were skipped\n     pub fn collect_regions<T>(self,\n@@ -542,7 +542,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for BoundVarReplacer<'a, 'gcx, 'tcx>\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     /// Replaces all regions bound by the given `Binder` with the\n     /// results returned by the closure; the closure is expected to\n     /// return a free region (relative to this binder), and hence the\n@@ -817,7 +817,7 @@ impl TypeFolder<'gcx, 'tcx> for Shifter<'gcx, 'tcx> {\n     }\n }\n \n-pub fn shift_region<'a, 'gcx, 'tcx>(\n+pub fn shift_region<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     region: ty::Region<'tcx>,\n     amount: u32\n@@ -832,7 +832,7 @@ pub fn shift_region<'a, 'gcx, 'tcx>(\n     }\n }\n \n-pub fn shift_vars<'a, 'gcx, 'tcx, T>(\n+pub fn shift_vars<'gcx, 'tcx, T>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     value: &T,\n     amount: u32\n@@ -843,7 +843,7 @@ pub fn shift_vars<'a, 'gcx, 'tcx, T>(\n     value.fold_with(&mut Shifter::new(tcx, amount, Direction::In))\n }\n \n-pub fn shift_out_vars<'a, 'gcx, 'tcx, T>(\n+pub fn shift_out_vars<'gcx, 'tcx, T>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     value: &T,\n     amount: u32"}, {"sha": "ebe23b27117f2985ecf4f686b136bc74ea1a0809", "filename": "src/librustc/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -21,7 +21,7 @@ pub struct DefIdForest {\n     root_ids: SmallVec<[DefId; 1]>,\n }\n \n-impl<'a, 'gcx, 'tcx> DefIdForest {\n+impl<'gcx, 'tcx> DefIdForest {\n     /// Creates an empty forest.\n     pub fn empty() -> DefIdForest {\n         DefIdForest {"}, {"sha": "1c9b06cb6b475cdfa019bfef82bb1097e256e4ff", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -51,7 +51,7 @@ mod def_id_forest;\n // This code should only compile in modules where the uninhabitedness of Foo is\n // visible.\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     /// Checks whether a type is visibly uninhabited from a particular module.\n     /// # Example\n     /// ```rust\n@@ -106,7 +106,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> AdtDef {\n+impl<'gcx, 'tcx> AdtDef {\n     /// Calculate the forest of DefIds from which this adt is visibly uninhabited.\n     fn uninhabited_from(\n         &self,\n@@ -124,7 +124,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> VariantDef {\n+impl<'gcx, 'tcx> VariantDef {\n     /// Calculate the forest of DefIds from which this variant is visibly uninhabited.\n     pub fn uninhabited_from(\n         &self,\n@@ -150,7 +150,7 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> FieldDef {\n+impl<'gcx, 'tcx> FieldDef {\n     /// Calculate the forest of DefIds from which this field is visibly uninhabited.\n     fn uninhabited_from(\n         &self,\n@@ -180,7 +180,7 @@ impl<'a, 'gcx, 'tcx> FieldDef {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n+impl<'gcx, 'tcx> TyS<'tcx> {\n     /// Calculate the forest of DefIds from which this type is visibly uninhabited.\n     fn uninhabited_from(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> DefIdForest\n     {"}, {"sha": "92c64e8614e9aa11f1ff6945f105c384394fab5d", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -42,7 +42,7 @@ pub enum InstanceDef<'tcx> {\n     CloneShim(DefId, Ty<'tcx>),\n }\n \n-impl<'a, 'tcx> Instance<'tcx> {\n+impl<'tcx> Instance<'tcx> {\n     pub fn ty(&self,\n               tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n               -> Ty<'tcx>\n@@ -136,11 +136,11 @@ impl<'tcx> InstanceDef<'tcx> {\n     }\n \n     #[inline]\n-    pub fn attrs<'a>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> ty::Attributes<'tcx> {\n+    pub fn attrs(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> ty::Attributes<'tcx> {\n         tcx.get_attrs(self.def_id())\n     }\n \n-    pub fn is_inline<'a>(\n+    pub fn is_inline(\n         &self,\n         tcx: TyCtxt<'tcx, 'tcx, 'tcx>\n     ) -> bool {\n@@ -156,7 +156,7 @@ impl<'tcx> InstanceDef<'tcx> {\n         }\n     }\n \n-    pub fn requires_local<'a>(\n+    pub fn requires_local(\n         &self,\n         tcx: TyCtxt<'tcx, 'tcx, 'tcx>\n     ) -> bool {\n@@ -209,7 +209,7 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n     }\n }\n \n-impl<'a, 'b, 'tcx> Instance<'tcx> {\n+impl<'b, 'tcx> Instance<'tcx> {\n     pub fn new(def_id: DefId, substs: SubstsRef<'tcx>)\n                -> Instance<'tcx> {\n         assert!(!substs.has_escaping_bound_vars(),\n@@ -376,7 +376,7 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n     }\n }\n \n-fn resolve_associated_item<'a, 'tcx>(\n+fn resolve_associated_item<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     trait_item: &ty::AssocItem,\n     param_env: ty::ParamEnv<'tcx>,"}, {"sha": "4c76d36f11c7bc5a0ec76bdc3aac26709f76b8d1", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -31,9 +31,9 @@ use rustc_target::abi::call::{\n \n \n pub trait IntegerExt {\n-    fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, signed: bool) -> Ty<'tcx>;\n+    fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, signed: bool) -> Ty<'tcx>;\n     fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer;\n-    fn repr_discr<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn repr_discr<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                             ty: Ty<'tcx>,\n                             repr: &ReprOptions,\n                             min: i128,\n@@ -42,7 +42,7 @@ pub trait IntegerExt {\n }\n \n impl IntegerExt for Integer {\n-    fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, signed: bool) -> Ty<'tcx> {\n+    fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, signed: bool) -> Ty<'tcx> {\n         match (*self, signed) {\n             (I8, false) => tcx.types.u8,\n             (I16, false) => tcx.types.u16,\n@@ -77,7 +77,7 @@ impl IntegerExt for Integer {\n     /// signed discriminant range and #[repr] attribute.\n     /// N.B.: u128 values above i128::MAX will be treated as signed, but\n     /// that shouldn't affect anything, other than maybe debuginfo.\n-    fn repr_discr<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn repr_discr<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                             ty: Ty<'tcx>,\n                             repr: &ReprOptions,\n                             min: i128,\n@@ -126,11 +126,11 @@ impl IntegerExt for Integer {\n }\n \n pub trait PrimitiveExt {\n-    fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Ty<'tcx>;\n+    fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Ty<'tcx>;\n }\n \n impl PrimitiveExt for Primitive {\n-    fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Ty<'tcx> {\n+    fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Ty<'tcx> {\n         match *self {\n             Int(i, signed) => i.to_ty(tcx, signed),\n             Float(FloatTy::F32) => tcx.types.f32,\n@@ -171,7 +171,7 @@ impl<'tcx> fmt::Display for LayoutError<'tcx> {\n     }\n }\n \n-fn layout_raw<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn layout_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                         query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                         -> Result<&'tcx LayoutDetails, LayoutError<'tcx>>\n {\n@@ -226,7 +226,7 @@ enum StructKind {\n     Prefixed(Size, Align),\n }\n \n-impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>> {\n+impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>> {\n     fn scalar_pair(&self, a: Scalar, b: Scalar) -> LayoutDetails {\n         let dl = self.data_layout();\n         let b_align = b.value.align(dl);\n@@ -1221,7 +1221,7 @@ enum SavedLocalEligibility {\n // Also included in the layout are the upvars and the discriminant.\n // These are included as fields on the \"outer\" layout; they are not part\n // of any variant.\n-impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>> {\n+impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>> {\n     /// Compute the eligibility and assignment of each local.\n     fn generator_saved_local_eligibility(&self, info: &GeneratorLayout<'tcx>)\n     -> (BitSet<GeneratorSavedLocal>, IndexVec<GeneratorSavedLocal, SavedLocalEligibility>) {\n@@ -1603,7 +1603,7 @@ pub enum SizeSkeleton<'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> SizeSkeleton<'tcx> {\n+impl<'tcx> SizeSkeleton<'tcx> {\n     pub fn compute(ty: Ty<'tcx>,\n                    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                    param_env: ty::ParamEnv<'tcx>)\n@@ -1734,13 +1734,13 @@ pub trait HasParamEnv<'tcx> {\n     fn param_env(&self) -> ty::ParamEnv<'tcx>;\n }\n \n-impl<'a, 'gcx, 'tcx> HasDataLayout for TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> HasDataLayout for TyCtxt<'tcx, 'gcx, 'tcx> {\n     fn data_layout(&self) -> &TargetDataLayout {\n         &self.data_layout\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> HasTyCtxt<'gcx> for TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> HasTyCtxt<'gcx> for TyCtxt<'tcx, 'gcx, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'gcx, 'gcx> {\n         self.global_tcx()\n     }\n@@ -1796,7 +1796,7 @@ impl<T, E> MaybeResult<T> for Result<T, E> {\n \n pub type TyLayout<'tcx> = ::rustc_target::abi::TyLayout<'tcx, Ty<'tcx>>;\n \n-impl<'a, 'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>> {\n+impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>> {\n     type Ty = Ty<'tcx>;\n     type TyLayout = Result<TyLayout<'tcx>, LayoutError<'tcx>>;\n \n@@ -2187,7 +2187,7 @@ struct Niche {\n }\n \n impl Niche {\n-    fn reserve<'a, 'tcx>(\n+    fn reserve<'tcx>(\n         &self,\n         cx: &LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>>,\n         count: u128,\n@@ -2205,7 +2205,7 @@ impl Niche {\n     }\n }\n \n-impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>> {\n+impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>> {\n     /// Find the offset of a niche leaf field, starting from\n     /// the given type and recursing through aggregates.\n     // FIXME(eddyb) traverse already optimized enums."}, {"sha": "be19b2d945cbf7c2f8e50144109d6e89682c1ff4", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -213,7 +213,7 @@ impl AssocItem {\n         }\n     }\n \n-    pub fn signature<'a, 'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> String {\n+    pub fn signature<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> String {\n         match self.kind {\n             ty::AssocKind::Method => {\n                 // We skip the binder here because the binder would deanonymize all\n@@ -259,7 +259,7 @@ pub trait DefIdTree: Copy {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> DefIdTree for TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> DefIdTree for TyCtxt<'tcx, 'gcx, 'tcx> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n         self.def_key(id).parent.map(|index| DefId { index: index, ..id })\n     }\n@@ -912,7 +912,7 @@ pub struct Generics {\n     pub has_late_bound_regions: Option<Span>,\n }\n \n-impl<'a, 'gcx, 'tcx> Generics {\n+impl<'gcx, 'tcx> Generics {\n     pub fn count(&self) -> usize {\n         self.parent_count + self.params.len()\n     }\n@@ -1019,7 +1019,7 @@ pub struct GenericPredicates<'tcx> {\n impl<'tcx> serialize::UseSpecializedEncodable for GenericPredicates<'tcx> {}\n impl<'tcx> serialize::UseSpecializedDecodable for GenericPredicates<'tcx> {}\n \n-impl<'a, 'gcx, 'tcx> GenericPredicates<'tcx> {\n+impl<'gcx, 'tcx> GenericPredicates<'tcx> {\n     pub fn instantiate(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, substs: SubstsRef<'tcx>)\n                        -> InstantiatedPredicates<'tcx> {\n         let mut instantiated = InstantiatedPredicates::empty();\n@@ -1128,7 +1128,7 @@ impl<'tcx> AsRef<Predicate<'tcx>> for Predicate<'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> Predicate<'tcx> {\n+impl<'gcx, 'tcx> Predicate<'tcx> {\n     /// Performs a substitution suitable for going from a\n     /// poly-trait-ref to supertraits that must hold if that\n     /// poly-trait-ref holds. This is slightly different from a normal\n@@ -1838,7 +1838,7 @@ pub struct VariantDef {\n     pub recovered: bool,\n }\n \n-impl<'a, 'gcx, 'tcx> VariantDef {\n+impl<'gcx, 'tcx> VariantDef {\n     /// Creates a new `VariantDef`.\n     ///\n     /// `variant_did` is the `DefId` that identifies the enum variant (if this `VariantDef`\n@@ -2563,7 +2563,7 @@ impl<'gcx, 'tcx> AdtDef {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> FieldDef {\n+impl<'gcx, 'tcx> FieldDef {\n     pub fn ty(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {\n         tcx.type_of(self.did).subst(tcx, subst)\n     }\n@@ -2586,7 +2586,7 @@ pub enum ClosureKind {\n     FnOnce,\n }\n \n-impl<'a, 'tcx> ClosureKind {\n+impl<'tcx> ClosureKind {\n     // This is the initial value used when doing upvar inference.\n     pub const LATTICE_BOTTOM: ClosureKind = ClosureKind::Fn;\n \n@@ -3131,7 +3131,7 @@ impl Iterator for AssocItemsIterator<'_, '_> {\n     }\n }\n \n-fn associated_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> AssocItem {\n+fn associated_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> AssocItem {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let parent_id = tcx.hir().get_parent_item(id);\n     let parent_def_id = tcx.hir().local_def_id_from_hir_id(parent_id);\n@@ -3176,7 +3176,7 @@ pub struct AdtSizedConstraint<'tcx>(pub &'tcx [Ty<'tcx>]);\n ///       such.\n ///     - a Error, if a type contained itself. The representability\n ///       check should catch this case.\n-fn adt_sized_constraint<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn adt_sized_constraint<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                   def_id: DefId)\n                                   -> AdtSizedConstraint<'tcx> {\n     let def = tcx.adt_def(def_id);\n@@ -3192,7 +3192,7 @@ fn adt_sized_constraint<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     AdtSizedConstraint(result)\n }\n \n-fn associated_item_def_ids<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn associated_item_def_ids<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                      def_id: DefId)\n                                      -> &'tcx [DefId] {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -3217,14 +3217,14 @@ fn associated_item_def_ids<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn def_span<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Span {\n+fn def_span<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Span {\n     tcx.hir().span_if_local(def_id).unwrap()\n }\n \n /// If the given `DefId` describes an item belonging to a trait,\n /// returns the `DefId` of the trait that the trait item belongs to;\n /// otherwise, returns `None`.\n-fn trait_of_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Option<DefId> {\n+fn trait_of_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Option<DefId> {\n     tcx.opt_associated_item(def_id)\n         .and_then(|associated_item| {\n             match associated_item.container {\n@@ -3247,7 +3247,7 @@ pub fn is_impl_trait_defn(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<DefI\n }\n \n /// See `ParamEnv` struct definition for details.\n-fn param_env<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn param_env<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                        def_id: DefId)\n                        -> ParamEnv<'tcx>\n {\n@@ -3285,26 +3285,26 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)\n }\n \n-fn crate_disambiguator<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn crate_disambiguator<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                  crate_num: CrateNum) -> CrateDisambiguator {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     tcx.sess.local_crate_disambiguator()\n }\n \n-fn original_crate_name<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn original_crate_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                  crate_num: CrateNum) -> Symbol {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     tcx.crate_name.clone()\n }\n \n-fn crate_hash<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn crate_hash<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                         crate_num: CrateNum)\n                         -> Svh {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     tcx.hir().crate_hash\n }\n \n-fn instance_def_size_estimate<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn instance_def_size_estimate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                         instance_def: InstanceDef<'tcx>)\n                                         -> usize {\n     match instance_def {\n@@ -3321,7 +3321,7 @@ fn instance_def_size_estimate<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n /// If `def_id` is an issue 33140 hack impl, returns its self type; otherwise, returns `None`.\n ///\n /// See [`ImplOverlapKind::Issue33140`] for more details.\n-fn issue33140_self_ty<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn issue33140_self_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                 def_id: DefId)\n                                 -> Option<Ty<'tcx>>\n {"}, {"sha": "1d80d86e7a82a07f59b5e3a7eb428e05b06b139f", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -45,7 +45,7 @@ pub enum Component<'tcx> {\n     EscapingProjection(Vec<Component<'tcx>>),\n }\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     /// Push onto `out` all the things that must outlive `'a` for the condition\n     /// `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.\n     pub fn push_outlives_components(&self, ty0: Ty<'tcx>,"}, {"sha": "d6b0951fd0311c2fc033e755431fc13bb8a0b7a2", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -87,7 +87,7 @@ macro_rules! impl_disk_cacheable_query(\n             }\n \n             #[inline]\n-            fn try_load_from_disk<'a>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+            fn try_load_from_disk(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                       id: SerializedDepNodeIndex)\n                                       -> Option<Self::Value> {\n                 tcx.queries.on_disk_cache.try_load_query_result(tcx, id)"}, {"sha": "7f8ba215cea2cf8744097bd05a49dcd25299ee9a", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -156,7 +156,7 @@ impl<'sess> OnDiskCache<'sess> {\n         }\n     }\n \n-    pub fn serialize<'a, 'tcx, E>(&self,\n+    pub fn serialize<'tcx, E>(&self,\n                                   tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                   encoder: &mut E)\n                                   -> Result<(), E::Error>\n@@ -326,7 +326,7 @@ impl<'sess> OnDiskCache<'sess> {\n     }\n \n     /// Loads a diagnostic emitted during the previous compilation session.\n-    pub fn load_diagnostics<'a, 'tcx>(&self,\n+    pub fn load_diagnostics<'tcx>(&self,\n                                       tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                       dep_node_index: SerializedDepNodeIndex)\n                                       -> Vec<Diagnostic> {"}, {"sha": "e151f9d111cf78d5afd21be1d4e6ee8667cdfb92", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -259,7 +259,7 @@ impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n         compute: F)\n     -> R\n     where\n-        F: for<'b, 'lcx> FnOnce(TyCtxt<'lcx, 'gcx, 'lcx>) -> R\n+        F: for<'lcx> FnOnce(TyCtxt<'lcx, 'gcx, 'lcx>) -> R\n     {\n         // The TyCtxt stored in TLS has the same global interner lifetime\n         // as `self`, so we use `with_related_context` to relate the 'gcx lifetimes"}, {"sha": "016d4792e11ce7edd62c58ce0f57d4603ca23170", "filename": "src/librustc/ty/query/values.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -4,24 +4,24 @@ use crate::ty::util::NeedsDrop;\n use syntax::symbol::InternedString;\n \n pub(super) trait Value<'tcx>: Sized {\n-    fn from_cycle_error<'a>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Self;\n+    fn from_cycle_error(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Self;\n }\n \n impl<'tcx, T> Value<'tcx> for T {\n-    default fn from_cycle_error<'a>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> T {\n+    default fn from_cycle_error(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> T {\n         tcx.sess.abort_if_errors();\n         bug!(\"Value::from_cycle_error called without errors\");\n     }\n }\n \n impl<'tcx> Value<'tcx> for Ty<'tcx> {\n-    fn from_cycle_error<'a>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Ty<'tcx> {\n+    fn from_cycle_error(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Ty<'tcx> {\n         tcx.types.err\n     }\n }\n \n impl<'tcx> Value<'tcx> for ty::SymbolName {\n-    fn from_cycle_error<'a>(_: TyCtxt<'tcx, 'tcx, 'tcx>) -> Self {\n+    fn from_cycle_error(_: TyCtxt<'tcx, 'tcx, 'tcx>) -> Self {\n         ty::SymbolName { name: InternedString::intern(\"<error>\") }\n     }\n }"}, {"sha": "8b98bf22cf91a1adcc7c789243211f172754013e", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -337,14 +337,14 @@ CloneTypeFoldableAndLiftImpls! {\n // FIXME(eddyb) replace all the uses of `Option::map` with `?`.\n impl<'tcx, A: Lift<'tcx>, B: Lift<'tcx>> Lift<'tcx> for (A, B) {\n     type Lifted = (A::Lifted, B::Lifted);\n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.0).and_then(|a| tcx.lift(&self.1).map(|b| (a, b)))\n     }\n }\n \n impl<'tcx, A: Lift<'tcx>, B: Lift<'tcx>, C: Lift<'tcx>> Lift<'tcx> for (A, B, C) {\n     type Lifted = (A::Lifted, B::Lifted, C::Lifted);\n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.0).and_then(|a| {\n             tcx.lift(&self.1).and_then(|b| tcx.lift(&self.2).map(|c| (a, b, c)))\n         })\n@@ -353,7 +353,7 @@ impl<'tcx, A: Lift<'tcx>, B: Lift<'tcx>, C: Lift<'tcx>> Lift<'tcx> for (A, B, C)\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for Option<T> {\n     type Lifted = Option<T::Lifted>;\n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             Some(ref x) => tcx.lift(x).map(Some),\n             None => Some(None)\n@@ -363,7 +363,7 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for Option<T> {\n \n impl<'tcx, T: Lift<'tcx>, E: Lift<'tcx>> Lift<'tcx> for Result<T, E> {\n     type Lifted = Result<T::Lifted, E::Lifted>;\n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             Ok(ref x) => tcx.lift(x).map(Ok),\n             Err(ref e) => tcx.lift(e).map(Err)\n@@ -373,14 +373,14 @@ impl<'tcx, T: Lift<'tcx>, E: Lift<'tcx>> Lift<'tcx> for Result<T, E> {\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for Box<T> {\n     type Lifted = Box<T::Lifted>;\n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&**self).map(Box::new)\n     }\n }\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for [T] {\n     type Lifted = Vec<T::Lifted>;\n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         // type annotation needed to inform `projection_must_outlive`\n         let mut result : Vec<<T as Lift<'tcx>>::Lifted>\n             = Vec::with_capacity(self.len());\n@@ -397,14 +397,14 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for [T] {\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for Vec<T> {\n     type Lifted = Vec<T::Lifted>;\n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self[..])\n     }\n }\n \n impl<'tcx, I: Idx, T: Lift<'tcx>> Lift<'tcx> for IndexVec<I, T> {\n     type Lifted = IndexVec<I, T::Lifted>;\n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         self.iter()\n             .map(|e| tcx.lift(e))\n             .collect()\n@@ -413,7 +413,7 @@ impl<'tcx, I: Idx, T: Lift<'tcx>> Lift<'tcx> for IndexVec<I, T> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::TraitRef<'a> {\n     type Lifted = ty::TraitRef<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.substs).map(|substs| ty::TraitRef {\n             def_id: self.def_id,\n             substs,\n@@ -423,7 +423,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::TraitRef<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialTraitRef<'a> {\n     type Lifted = ty::ExistentialTraitRef<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.substs).map(|substs| ty::ExistentialTraitRef {\n             def_id: self.def_id,\n             substs,\n@@ -433,7 +433,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialTraitRef<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialPredicate<'a> {\n     type Lifted = ty::ExistentialPredicate<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match self {\n             ty::ExistentialPredicate::Trait(x) => {\n                 tcx.lift(x).map(ty::ExistentialPredicate::Trait)\n@@ -450,7 +450,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialPredicate<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> {\n     type Lifted = ty::TraitPredicate<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n                              -> Option<ty::TraitPredicate<'tcx>> {\n         tcx.lift(&self.trait_ref).map(|trait_ref| ty::TraitPredicate {\n             trait_ref,\n@@ -460,7 +460,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::SubtypePredicate<'a> {\n     type Lifted = ty::SubtypePredicate<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n                              -> Option<ty::SubtypePredicate<'tcx>> {\n         tcx.lift(&(self.a, self.b)).map(|(a, b)| ty::SubtypePredicate {\n             a_is_expected: self.a_is_expected,\n@@ -472,14 +472,14 @@ impl<'a, 'tcx> Lift<'tcx> for ty::SubtypePredicate<'a> {\n \n impl<'tcx, A: Copy+Lift<'tcx>, B: Copy+Lift<'tcx>> Lift<'tcx> for ty::OutlivesPredicate<A, B> {\n     type Lifted = ty::OutlivesPredicate<A::Lifted, B::Lifted>;\n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&(self.0, self.1)).map(|(a, b)| ty::OutlivesPredicate(a, b))\n     }\n }\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionTy<'a> {\n     type Lifted = ty::ProjectionTy<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n                              -> Option<ty::ProjectionTy<'tcx>> {\n         tcx.lift(&self.substs).map(|substs| {\n             ty::ProjectionTy {\n@@ -492,7 +492,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionTy<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionPredicate<'a> {\n     type Lifted = ty::ProjectionPredicate<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n                              -> Option<ty::ProjectionPredicate<'tcx>> {\n         tcx.lift(&(self.projection_ty, self.ty)).map(|(projection_ty, ty)| {\n             ty::ProjectionPredicate {\n@@ -505,7 +505,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionPredicate<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialProjection<'a> {\n     type Lifted = ty::ExistentialProjection<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.substs).map(|substs| {\n             ty::ExistentialProjection {\n                 substs,\n@@ -518,7 +518,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialProjection<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::Predicate<'a> {\n     type Lifted = ty::Predicate<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             ty::Predicate::Trait(ref binder) => {\n                 tcx.lift(binder).map(ty::Predicate::Trait)\n@@ -558,14 +558,14 @@ impl<'a, 'tcx> Lift<'tcx> for ty::Predicate<'a> {\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::Binder<T> {\n     type Lifted = ty::Binder<T::Lifted>;\n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(self.skip_binder()).map(ty::Binder::bind)\n     }\n }\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n     type Lifted = ty::ParamEnv<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.caller_bounds).map(|caller_bounds| {\n             ty::ParamEnv {\n                 reveal: self.reveal,\n@@ -578,7 +578,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n \n impl<'a, 'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::ParamEnvAnd<'a, T> {\n     type Lifted = ty::ParamEnvAnd<'tcx, T::Lifted>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.param_env).and_then(|param_env| {\n             tcx.lift(&self.value).map(|value| {\n                 ty::ParamEnvAnd {\n@@ -592,7 +592,7 @@ impl<'a, 'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::ParamEnvAnd<'a, T> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ClosureSubsts<'a> {\n     type Lifted = ty::ClosureSubsts<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.substs).map(|substs| {\n             ty::ClosureSubsts { substs }\n         })\n@@ -601,7 +601,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ClosureSubsts<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::GeneratorSubsts<'a> {\n     type Lifted = ty::GeneratorSubsts<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.substs).map(|substs| {\n             ty::GeneratorSubsts { substs }\n         })\n@@ -610,7 +610,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::GeneratorSubsts<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::Adjustment<'a> {\n     type Lifted = ty::adjustment::Adjustment<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.kind).and_then(|kind| {\n             tcx.lift(&self.target).map(|target| {\n                 ty::adjustment::Adjustment { kind, target }\n@@ -621,7 +621,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::Adjustment<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::Adjust<'a> {\n     type Lifted = ty::adjustment::Adjust<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             ty::adjustment::Adjust::NeverToAny =>\n                 Some(ty::adjustment::Adjust::NeverToAny),\n@@ -639,7 +639,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::Adjust<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::OverloadedDeref<'a> {\n     type Lifted = ty::adjustment::OverloadedDeref<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.region).map(|region| {\n             ty::adjustment::OverloadedDeref {\n                 region,\n@@ -651,7 +651,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::OverloadedDeref<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::AutoBorrow<'a> {\n     type Lifted = ty::adjustment::AutoBorrow<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             ty::adjustment::AutoBorrow::Ref(r, m) => {\n                 tcx.lift(&r).map(|r| ty::adjustment::AutoBorrow::Ref(r, m))\n@@ -665,7 +665,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::AutoBorrow<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::GenSig<'a> {\n     type Lifted = ty::GenSig<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&(self.yield_ty, self.return_ty))\n            .map(|(yield_ty, return_ty)| {\n                ty::GenSig {\n@@ -678,7 +678,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::GenSig<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::FnSig<'a> {\n     type Lifted = ty::FnSig<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.inputs_and_output).map(|x| {\n             ty::FnSig {\n                 inputs_and_output: x,\n@@ -692,7 +692,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::FnSig<'a> {\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::error::ExpectedFound<T> {\n     type Lifted = ty::error::ExpectedFound<T::Lifted>;\n-    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.expected).and_then(|expected| {\n             tcx.lift(&self.found).map(|found| {\n                 ty::error::ExpectedFound {\n@@ -706,7 +706,7 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::error::ExpectedFound<T> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n     type Lifted = ty::error::TypeError<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         use crate::ty::error::TypeError::*;\n \n         Some(match *self {\n@@ -743,7 +743,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n     type Lifted = ty::InstanceDef<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             ty::InstanceDef::Item(def_id) =>\n                 Some(ty::InstanceDef::Item(def_id)),"}, {"sha": "248d037fa5edc46c0695f37041ad8b84931cc234", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -590,7 +590,7 @@ pub enum ExistentialPredicate<'tcx> {\n     AutoTrait(DefId),\n }\n \n-impl<'a, 'gcx, 'tcx> ExistentialPredicate<'tcx> {\n+impl<'gcx, 'tcx> ExistentialPredicate<'tcx> {\n     /// Compares via an ordering that will not change if modules are reordered or other changes are\n     /// made to the tree. In particular, this ordering is preserved across incremental compilations.\n     pub fn stable_cmp(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, other: &Self) -> Ordering {\n@@ -610,7 +610,7 @@ impl<'a, 'gcx, 'tcx> ExistentialPredicate<'tcx> {\n \n }\n \n-impl<'a, 'gcx, 'tcx> Binder<ExistentialPredicate<'tcx>> {\n+impl<'gcx, 'tcx> Binder<ExistentialPredicate<'tcx>> {\n     pub fn with_self_ty(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, self_ty: Ty<'tcx>)\n         -> ty::Predicate<'tcx> {\n         use crate::ty::ToPredicate;\n@@ -744,7 +744,7 @@ impl<'tcx> TraitRef<'tcx> {\n \n     /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n     /// are the parameters defined on trait.\n-    pub fn identity<'a, 'gcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>, def_id: DefId) -> TraitRef<'tcx> {\n+    pub fn identity<'gcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>, def_id: DefId) -> TraitRef<'tcx> {\n         TraitRef {\n             def_id,\n             substs: InternalSubsts::identity_for_item(tcx, def_id),\n@@ -808,7 +808,7 @@ pub struct ExistentialTraitRef<'tcx> {\n     pub substs: SubstsRef<'tcx>,\n }\n \n-impl<'a, 'gcx, 'tcx> ExistentialTraitRef<'tcx> {\n+impl<'gcx, 'tcx> ExistentialTraitRef<'tcx> {\n     pub fn input_types<'b>(&'b self) -> impl DoubleEndedIterator<Item=Ty<'tcx>> + 'b {\n         // Select only the \"input types\" from a trait-reference. For\n         // now this is all the types that appear in the\n@@ -1112,7 +1112,7 @@ pub struct ParamTy {\n     pub name: InternedString,\n }\n \n-impl<'a, 'gcx, 'tcx> ParamTy {\n+impl<'gcx, 'tcx> ParamTy {\n     pub fn new(index: u32, name: InternedString) -> ParamTy {\n         ParamTy { index, name: name }\n     }\n@@ -1144,7 +1144,7 @@ pub struct ParamConst {\n     pub name: InternedString,\n }\n \n-impl<'a, 'gcx, 'tcx> ParamConst {\n+impl<'gcx, 'tcx> ParamConst {\n     pub fn new(index: u32, name: InternedString) -> ParamConst {\n         ParamConst { index, name }\n     }\n@@ -1408,7 +1408,7 @@ pub struct ExistentialProjection<'tcx> {\n \n pub type PolyExistentialProjection<'tcx> = Binder<ExistentialProjection<'tcx>>;\n \n-impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n+impl<'tcx, 'gcx> ExistentialProjection<'tcx> {\n     /// Extracts the underlying existential trait reference from this projection.\n     /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,\n     /// then this function would return a `exists T. T: Iterator` existential trait\n@@ -1438,7 +1438,7 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, 'gcx> PolyExistentialProjection<'tcx> {\n+impl<'tcx, 'gcx> PolyExistentialProjection<'tcx> {\n     pub fn with_self_ty(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, self_ty: Ty<'tcx>)\n         -> ty::PolyProjectionPredicate<'tcx> {\n         self.map_bound(|p| p.with_self_ty(tcx, self_ty))\n@@ -1664,7 +1664,7 @@ impl RegionKind {\n }\n \n /// Type utilities\n-impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n+impl<'gcx, 'tcx> TyS<'tcx> {\n     #[inline]\n     pub fn is_unit(&self) -> bool {\n         match self.sty {"}, {"sha": "276a2592ac7afb2901d9699adb2147014d9f612e", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> Kind<'tcx> {\n impl<'a, 'tcx> Lift<'tcx> for Kind<'a> {\n     type Lifted = Kind<'tcx>;\n \n-    fn lift_to_tcx<'cx, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match self.unpack() {\n             UnpackedKind::Lifetime(lt) => tcx.lift(&lt).map(|lt| lt.into()),\n             UnpackedKind::Type(ty) => tcx.lift(&ty).map(|ty| ty.into()),\n@@ -414,19 +414,19 @@ impl<'tcx> serialize::UseSpecializedDecodable for SubstsRef<'tcx> {}\n // there is more information available (for better errors).\n \n pub trait Subst<'tcx>: Sized {\n-    fn subst<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    fn subst<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                        substs: &[Kind<'tcx>]) -> Self {\n         self.subst_spanned(tcx, substs, None)\n     }\n \n-    fn subst_spanned<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    fn subst_spanned<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                substs: &[Kind<'tcx>],\n                                span: Option<Span>)\n                                -> Self;\n }\n \n impl<'tcx, T:TypeFoldable<'tcx>> Subst<'tcx> for T {\n-    fn subst_spanned<'a, 'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    fn subst_spanned<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                substs: &[Kind<'tcx>],\n                                span: Option<Span>)\n                                -> T"}, {"sha": "b7a4199067224665fc54f6d5b86b482729a3f4cb", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -46,7 +46,7 @@ pub struct TraitImpls {\n     non_blanket_impls: FxHashMap<fast_reject::SimplifiedType, Vec<DefId>>,\n }\n \n-impl<'a, 'gcx, 'tcx> TraitDef {\n+impl<'gcx, 'tcx> TraitDef {\n     pub fn new(def_id: DefId,\n                unsafety: hir::Unsafety,\n                paren_sugar: bool,\n@@ -71,7 +71,7 @@ impl<'a, 'gcx, 'tcx> TraitDef {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     pub fn for_each_impl<F: FnMut(DefId)>(self, def_id: DefId, mut f: F) {\n         let impls = self.trait_impls_of(def_id);\n \n@@ -148,7 +148,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n }\n \n // Query provider for `trait_impls_of`.\n-pub(super) fn trait_impls_of_provider<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub(super) fn trait_impls_of_provider<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                 trait_id: DefId)\n                                                 -> &'tcx TraitImpls {\n     let mut impls = TraitImpls::default();"}, {"sha": "a9b2dbe1d95b0849e11389dca27345d504a1fe27", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -51,10 +51,10 @@ impl<'tcx> fmt::Display for Discr<'tcx> {\n \n impl<'tcx> Discr<'tcx> {\n     /// Adds `1` to the value and wraps around if the maximum for the type is reached.\n-    pub fn wrap_incr<'a, 'gcx>(self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Self {\n+    pub fn wrap_incr<'gcx>(self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Self {\n         self.checked_add(tcx, 1).0\n     }\n-    pub fn checked_add<'a, 'gcx>(self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, n: u128) -> (Self, bool) {\n+    pub fn checked_add<'gcx>(self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, n: u128) -> (Self, bool) {\n         let (int, signed) = match self.ty.sty {\n             Int(ity) => (Integer::from_attr(&tcx, SignedInt(ity)), true),\n             Uint(uty) => (Integer::from_attr(&tcx, UnsignedInt(uty)), false),\n@@ -104,14 +104,14 @@ impl<'tcx> Discr<'tcx> {\n }\n \n pub trait IntTypeExt {\n-    fn to_ty<'a, 'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx>;\n-    fn disr_incr<'a, 'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, val: Option<Discr<'tcx>>)\n+    fn to_ty<'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx>;\n+    fn disr_incr<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, val: Option<Discr<'tcx>>)\n                            -> Option<Discr<'tcx>>;\n-    fn initial_discriminant<'a, 'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Discr<'tcx>;\n+    fn initial_discriminant<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Discr<'tcx>;\n }\n \n impl IntTypeExt for attr::IntType {\n-    fn to_ty<'a, 'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n+    fn to_ty<'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n         match *self {\n             SignedInt(ast::IntTy::I8)       => tcx.types.i8,\n             SignedInt(ast::IntTy::I16)      => tcx.types.i16,\n@@ -128,14 +128,14 @@ impl IntTypeExt for attr::IntType {\n         }\n     }\n \n-    fn initial_discriminant<'a, 'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Discr<'tcx> {\n+    fn initial_discriminant<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Discr<'tcx> {\n         Discr {\n             val: 0,\n             ty: self.to_ty(tcx)\n         }\n     }\n \n-    fn disr_incr<'a, 'tcx>(\n+    fn disr_incr<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n         val: Option<Discr<'tcx>>,\n@@ -178,7 +178,7 @@ pub enum Representability {\n }\n \n impl<'tcx> ty::ParamEnv<'tcx> {\n-    pub fn can_type_implement_copy<'a>(self,\n+    pub fn can_type_implement_copy(self,\n                                        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                        self_type: Ty<'tcx>)\n                                        -> Result<(), CopyImplementationError<'tcx>> {\n@@ -228,7 +228,7 @@ impl<'tcx> ty::ParamEnv<'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n     /// Creates a hash of the type `Ty` which will be the same no matter what crate\n     /// context it's calculated within. This is used by the `type_id` intrinsic.\n     pub fn type_id_hash(self, ty: Ty<'tcx>) -> u64 {\n@@ -249,7 +249,7 @@ impl<'a, 'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     pub fn has_error_field(self, ty: Ty<'tcx>) -> bool {\n         if let ty::Adt(def, substs) = ty.sty {\n             for field in def.all_fields() {\n@@ -687,7 +687,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> ty::TyS<'tcx> {\n+impl<'tcx> ty::TyS<'tcx> {\n     /// Checks whether values of this type `T` are *moved* or *copied*\n     /// when referenced -- this amounts to a check for whether `T:\n     /// Copy`, but note that we **don't** consider lifetimes when\n@@ -778,7 +778,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             })\n         }\n \n-        fn are_inner_types_recursive<'a, 'tcx>(\n+        fn are_inner_types_recursive<'tcx>(\n             tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span,\n             seen: &mut Vec<Ty<'tcx>>,\n             representable_cache: &mut FxHashMap<Ty<'tcx>, Representability>,\n@@ -838,7 +838,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n         // Does the type `ty` directly (without indirection through a pointer)\n         // contain any types on stack `seen`?\n-        fn is_type_structurally_recursive<'a, 'tcx>(\n+        fn is_type_structurally_recursive<'tcx>(\n             tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n             sp: Span,\n             seen: &mut Vec<Ty<'tcx>>,\n@@ -859,7 +859,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             representability\n         }\n \n-        fn is_type_structurally_recursive_inner<'a, 'tcx>(\n+        fn is_type_structurally_recursive_inner<'tcx>(\n             tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n             sp: Span,\n             seen: &mut Vec<Ty<'tcx>>,\n@@ -937,7 +937,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n     }\n }\n \n-fn is_copy_raw<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_copy_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                          query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                          -> bool\n {\n@@ -953,7 +953,7 @@ fn is_copy_raw<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n         ))\n }\n \n-fn is_sized_raw<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_sized_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                           -> bool\n {\n@@ -969,7 +969,7 @@ fn is_sized_raw<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n         ))\n }\n \n-fn is_freeze_raw<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_freeze_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                            query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                            -> bool\n {\n@@ -988,7 +988,7 @@ fn is_freeze_raw<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n #[derive(Clone, HashStable)]\n pub struct NeedsDrop(pub bool);\n \n-fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                             query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                             -> NeedsDrop\n {"}, {"sha": "3bd0ddce5d271ae1fdb37a45a02073a0ff1471f3", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -508,7 +508,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n /// they declare `trait SomeTrait : 'static`, for example, then\n /// `'static` would appear in the list. The hard work is done by\n /// `ty::required_region_bounds`, see that for more information.\n-pub fn object_region_bounds<'a, 'gcx, 'tcx>(\n+pub fn object_region_bounds<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     existential_predicates: ty::Binder<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>)\n     -> Vec<ty::Region<'tcx>>"}, {"sha": "d76178d7eac687a3e771f6240255af07885f7426", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -179,7 +179,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for CheckLoanCtxt<'a, 'tcx> {\n     fn decl_without_init(&mut self, _id: hir::HirId, _span: Span) { }\n }\n \n-pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n+pub fn check_loans<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                      dfcx_loans: &LoanDataFlow<'tcx>,\n                                      move_data: &move_data::FlowedMoveData<'tcx>,\n                                      all_loans: &[Loan<'tcx>],"}, {"sha": "6d79a086089286c4840968dd3251363d7ca79df4", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -45,7 +45,7 @@ pub enum PatternSource<'tcx> {\n ///\n /// In this latter case, this function will return `PatternSource::LetDecl`\n /// with a reference to the let\n-fn get_pattern_source<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, pat: &Pat) -> PatternSource<'tcx> {\n+fn get_pattern_source<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, pat: &Pat) -> PatternSource<'tcx> {\n \n     let parent = tcx.hir().get_parent_node_by_hir_id(pat.hir_id);\n "}, {"sha": "00626c2f2b91c03fa6ac16f1c04ca654eadf73ec", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -53,7 +53,7 @@ pub struct LoanDataFlowOperator;\n \n pub type LoanDataFlow<'tcx> = DataFlowContext<'tcx, LoanDataFlowOperator>;\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     tcx.par_body_owners(|body_owner_def_id| {\n         tcx.ensure().borrowck(body_owner_def_id);\n     });\n@@ -73,7 +73,7 @@ pub struct AnalysisData<'tcx> {\n     pub move_data: move_data::FlowedMoveData<'tcx>,\n }\n \n-fn borrowck<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, owner_def_id: DefId)\n+fn borrowck<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, owner_def_id: DefId)\n     -> &'tcx BorrowCheckResult\n {\n     assert!(tcx.use_ast_borrowck() || tcx.migrate_borrowck());"}, {"sha": "037f1120d96b45af7cdc121ad5138bdc8e48012c", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -91,14 +91,14 @@ fn get_cfg_indices<'a>(id: hir::ItemLocalId,\n     index.get(&id).map_or(&[], |v| &v[..])\n }\n \n-impl<'a, 'tcx, O: DataFlowOperator> DataFlowContext<'tcx, O> {\n+impl<'tcx, O: DataFlowOperator> DataFlowContext<'tcx, O> {\n     fn has_bitset_for_local_id(&self, n: hir::ItemLocalId) -> bool {\n         assert!(n != hir::DUMMY_ITEM_LOCAL_ID);\n         self.local_id_to_index.contains_key(&n)\n     }\n }\n \n-impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'tcx, O> {\n+impl<'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'tcx, O> {\n     fn nested(&self, state: &mut pprust::State<'_>, nested: pprust::Nested) -> io::Result<()> {\n         pprust::PpAnn::nested(self.tcx.hir(), state, nested)\n     }\n@@ -224,7 +224,7 @@ pub enum KillFrom {\n     Execution,\n }\n \n-impl<'a, 'tcx, O: DataFlowOperator> DataFlowContext<'tcx, O> {\n+impl<'tcx, O: DataFlowOperator> DataFlowContext<'tcx, O> {\n     pub fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                analysis_name: &'static str,\n                body: Option<&hir::Body>,\n@@ -500,7 +500,7 @@ impl<'a, 'tcx, O: DataFlowOperator> DataFlowContext<'tcx, O> {\n }\n \n // N.B. `Clone + 'static` only needed for pretty printing.\n-impl<'a, 'tcx, O: DataFlowOperator + Clone + 'static> DataFlowContext<'tcx, O> {\n+impl<'tcx, O: DataFlowOperator + Clone + 'static> DataFlowContext<'tcx, O> {\n     pub fn propagate(&mut self, cfg: &cfg::CFG, body: &hir::Body) {\n         //! Performs the data flow analysis.\n "}, {"sha": "8d6652d05df5f0e7869cffaec1e2a059f628a71e", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -46,7 +46,7 @@ pub fn crates_export_threshold(crate_types: &[config::CrateType]) -> SymbolExpor\n     }\n }\n \n-fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn reachable_non_generics_provider<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                              cnum: CrateNum)\n                                              -> &'tcx DefIdMap<SymbolExportLevel>\n {\n@@ -157,7 +157,7 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     tcx.arena.alloc(reachable_non_generics)\n }\n \n-fn is_reachable_non_generic_provider_local<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_reachable_non_generic_provider_local<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                      def_id: DefId)\n                                                      -> bool {\n     let export_threshold = threshold(tcx);\n@@ -169,13 +169,13 @@ fn is_reachable_non_generic_provider_local<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tc\n     }\n }\n \n-fn is_reachable_non_generic_provider_extern<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_reachable_non_generic_provider_extern<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                       def_id: DefId)\n                                                       -> bool {\n     tcx.reachable_non_generics(def_id.krate).contains_key(&def_id)\n }\n \n-fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn exported_symbols_provider_local<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                              cnum: CrateNum)\n                                              -> Arc<Vec<(ExportedSymbol<'tcx>,\n                                                          SymbolExportLevel)>>\n@@ -278,7 +278,7 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     Arc::new(symbols)\n }\n \n-fn upstream_monomorphizations_provider<'a, 'tcx>(\n+fn upstream_monomorphizations_provider<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     cnum: CrateNum)\n     -> &'tcx DefIdMap<FxHashMap<SubstsRef<'tcx>, CrateNum>>\n@@ -328,7 +328,7 @@ fn upstream_monomorphizations_provider<'a, 'tcx>(\n     tcx.arena.alloc(instances)\n }\n \n-fn upstream_monomorphizations_for_provider<'a, 'tcx>(\n+fn upstream_monomorphizations_for_provider<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId)\n     -> Option<&'tcx FxHashMap<SubstsRef<'tcx>, CrateNum>>"}, {"sha": "b80f01467af0b4de4db496de8ed390e7bd9c8b36", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -703,7 +703,7 @@ impl<B: ExtraBackendMethods> Drop for AbortCodegenOnDrop<B> {\n     }\n }\n \n-fn assert_and_save_dep_graph<'ll, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+fn assert_and_save_dep_graph<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     time(tcx.sess,\n          \"assert dep graph\",\n          || ::rustc_incremental::assert_dep_graph(tcx));\n@@ -850,7 +850,7 @@ pub fn provide_both(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn determine_cgu_reuse<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn determine_cgu_reuse<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                  cgu: &CodegenUnit<'tcx>)\n                                  -> CguReuse {\n     if !tcx.dep_graph.is_fully_enabled() {"}, {"sha": "695a1c1cbcf88f7f0046cb1c9d517ab23979e363", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::fx::FxHashSet;\n // any caching, i.e., calling the function twice with the same type will also do\n // the work twice. The `qualified` parameter only affects the first level of the\n // type name, further levels (i.e., type parameters) are always fully qualified.\n-pub fn compute_debuginfo_type_name<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn compute_debuginfo_type_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                              t: Ty<'tcx>,\n                                              qualified: bool)\n                                              -> String {\n@@ -20,7 +20,7 @@ pub fn compute_debuginfo_type_name<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n \n // Pushes the name of the type as it should be stored in debuginfo on the\n // `output` String. See also compute_debuginfo_type_name().\n-pub fn push_debuginfo_type_name<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn push_debuginfo_type_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                           t: Ty<'tcx>,\n                                           qualified: bool,\n                                           output: &mut String,\n@@ -228,7 +228,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     // reconstructed for items from non-local crates. For local crates, this\n     // would be possible but with inlining and LTO we have to use the least\n     // common denominator - otherwise we would run into conflicts.\n-    fn push_type_params<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn push_type_params<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                   substs: SubstsRef<'tcx>,\n                                   output: &mut String,\n                                   visited: &mut FxHashSet<Ty<'tcx>>) {"}, {"sha": "40333874c0007823206dc443f8381eceee0c57ee", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -32,13 +32,13 @@ impl<'tcx, T> Backend<'tcx> for T where\n \n pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Send {\n     fn new_metadata(&self, sess: TyCtxt<'_, '_, '_>, mod_name: &str) -> Self::Module;\n-    fn write_compressed_metadata<'b, 'gcx>(\n+    fn write_compressed_metadata<'gcx>(\n         &self,\n         tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n         metadata: &EncodedMetadata,\n         llvm_module: &mut Self::Module,\n     );\n-    fn codegen_allocator<'b, 'gcx>(\n+    fn codegen_allocator<'gcx>(\n         &self,\n         tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n         mods: &mut Self::Module,"}, {"sha": "e29bb751b9a0900728dff1000c8a69318e51c11e", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -34,7 +34,7 @@ pub trait CodegenBackend {\n     fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync>;\n     fn provide(&self, _providers: &mut Providers<'_>);\n     fn provide_extern(&self, _providers: &mut Providers<'_>);\n-    fn codegen_crate<'a, 'tcx>(\n+    fn codegen_crate<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n         metadata: EncodedMetadata,"}, {"sha": "41e972f869f7d645b806f3f47424e7130e713ddc", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -68,7 +68,7 @@ pub(super) fn mangle(\n     printer.path.finish(hash)\n }\n \n-fn get_symbol_hash<'a, 'tcx>(\n+fn get_symbol_hash<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n \n     // instance this name will be for"}, {"sha": "3d82557d4c5b1ba54f98b4fad8fd56d4923b13c7", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -11,7 +11,7 @@ use syntax::symbol::{Symbol, sym};\n const SYMBOL_NAME: Symbol = sym::rustc_symbol_name;\n const DEF_PATH: Symbol = sym::rustc_def_path;\n \n-pub fn report_symbol_names<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn report_symbol_names<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     // if the `rustc_attrs` feature is not enabled, then the\n     // attributes we are interested in cannot be present anyway, so\n     // skip the walk."}, {"sha": "64d405721807fecd644bad4780e703d407b5cdeb", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -617,7 +617,7 @@ impl UserIdentifiedItem {\n     }\n }\n \n-fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n+fn print_flowgraph<'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n                                        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                        code: blocks::Code<'tcx>,\n                                        mode: PpFlowGraphMode,"}, {"sha": "a43a508ba96e7a0c90bddf73e9d472add3f7a86c", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -51,7 +51,7 @@ use std::io::Write;\n use syntax::ast;\n use syntax_pos::Span;\n \n-pub fn assert_dep_graph<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn assert_dep_graph<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.debugging_opts.dump_dep_graph {\n             dump_graph(tcx);\n@@ -184,7 +184,7 @@ impl Visitor<'tcx> for IfThisChanged<'tcx> {\n     }\n }\n \n-fn check_paths<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_paths<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                          if_this_changed: &Sources,\n                          then_this_would_need: &Targets)\n {"}, {"sha": "7f1a9f8b88e53c4dfd08d6f01612d86c6fab7daa", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -35,7 +35,7 @@ const MODULE: Symbol = sym::module;\n const CFG: Symbol = sym::cfg;\n const KIND: Symbol = sym::kind;\n \n-pub fn assert_module_sources<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn assert_module_sources<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.incremental.is_none() {\n             return;"}, {"sha": "e28ee041bff362dffa4327b5d27bb9672ae1fca4", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -206,7 +206,7 @@ impl Assertion {\n     }\n }\n \n-pub fn check_dirty_clean_annotations<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check_dirty_clean_annotations<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     // can't add `#[rustc_dirty]` etc without opting in to this feature\n     if !tcx.features().rustc_attrs {\n         return;"}, {"sha": "afcd4c01dbd09e2d6b92fe5d8a3a1c19b357f2f9", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -15,7 +15,7 @@ use super::fs::*;\n use super::file_format;\n use super::work_product;\n \n-pub fn dep_graph_tcx_init<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn dep_graph_tcx_init<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     if !tcx.dep_graph.is_fully_enabled() {\n         return\n     }"}, {"sha": "27133b87d32a164dae3d03e1e54797c084b25b2d", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -15,7 +15,7 @@ use super::dirty_clean;\n use super::file_format;\n use super::work_product;\n \n-pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn save_dep_graph<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     debug!(\"save_dep_graph()\");\n     tcx.dep_graph.with_ignore(|| {\n         let sess = tcx.sess;"}, {"sha": "0bb5457d3286026e5d9e86acd370d9cded89a3d8", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -519,11 +519,11 @@ enum FfiResult<'tcx> {\n     },\n }\n \n-fn is_zst<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, did: DefId, ty: Ty<'tcx>) -> bool {\n+fn is_zst<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, did: DefId, ty: Ty<'tcx>) -> bool {\n     tcx.layout_of(tcx.param_env(did).and(ty)).map(|layout| layout.is_zst()).unwrap_or(false)\n }\n \n-fn ty_is_known_nonnull<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n+fn ty_is_known_nonnull<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.sty {\n         ty::FnPtr(_) => true,\n         ty::Ref(..) => true,\n@@ -555,7 +555,7 @@ fn ty_is_known_nonnull<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) ->\n /// to function pointers, references, core::num::NonZero*,\n /// core::ptr::NonNull, and #[repr(transparent)] newtypes.\n /// FIXME: This duplicates code in codegen.\n-fn is_repr_nullable_ptr<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_repr_nullable_ptr<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                   ty: Ty<'tcx>,\n                                   ty_def: &'tcx ty::AdtDef,\n                                   substs: SubstsRef<'tcx>)"}, {"sha": "87ca766bbaa93cfff8310dc90a0b164ce08cd342", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -550,7 +550,7 @@ impl CrateStore for cstore::CStore {\n         self.do_postorder_cnums_untracked()\n     }\n \n-    fn encode_metadata<'a, 'tcx>(&self,\n+    fn encode_metadata<'tcx>(&self,\n                                  tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n                                  -> EncodedMetadata\n     {"}, {"sha": "b7b9a739371e1500487ab0fe145c61d5f13e7eac", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -65,7 +65,7 @@ macro_rules! encoder_methods {\n     }\n }\n \n-impl<'a, 'tcx> Encoder for EncodeContext<'tcx> {\n+impl<'tcx> Encoder for EncodeContext<'tcx> {\n     type Error = <opaque::Encoder as Encoder>::Error;\n \n     fn emit_unit(&mut self) -> Result<(), Self::Error> {"}, {"sha": "f3e1e3ad80d891308b8086e767bb17a39d48019b", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -3,7 +3,7 @@ use rustc::hir;\n use rustc::middle::cstore::ForeignModule;\n use rustc::ty::TyCtxt;\n \n-pub fn collect<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Vec<ForeignModule> {\n+pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Vec<ForeignModule> {\n     let mut collector = Collector {\n         tcx,\n         modules: Vec::new(),"}, {"sha": "7e99e3d8a4c3cf2690ee260e97382d1eb41ee325", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -4,7 +4,7 @@ use rustc::ty::TyCtxt;\n use rustc_target::spec::abi::Abi;\n use syntax::symbol::sym;\n \n-pub fn collect<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Vec<String> {\n+pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Vec<String> {\n     let mut collector = Collector {\n         args: Vec::new(),\n     };"}, {"sha": "801acbfd34699c619633b7057295c6a218e705c3", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -11,7 +11,7 @@ use syntax::feature_gate::{self, GateIssue};\n use syntax::symbol::{Symbol, sym};\n use syntax::{span_err, struct_span_err};\n \n-pub fn collect<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Vec<NativeLibrary> {\n+pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Vec<NativeLibrary> {\n     let mut collector = Collector {\n         tcx,\n         libs: Vec::new(),"}, {"sha": "1bcdf226720934b0f74b264f4c768b960dfdef33", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -87,7 +87,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> BorrowCheckResult<'tcx> {\n+fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> BorrowCheckResult<'tcx> {\n     let input_body = tcx.mir_validated(def_id);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id));\n "}, {"sha": "38e6e55e40a97f8ac6d58fcd5f182505c82734d3", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -522,7 +522,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-fn suggest_ampmut_self<'cx, 'gcx, 'tcx>(\n+fn suggest_ampmut_self<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     local_decl: &mir::LocalDecl<'tcx>,\n ) -> (Span, String) {\n@@ -555,7 +555,7 @@ fn suggest_ampmut_self<'cx, 'gcx, 'tcx>(\n //\n // This implementation attempts to emulate AST-borrowck prioritization\n // by trying (3.), then (2.) and finally falling back on (1.).\n-fn suggest_ampmut<'cx, 'gcx, 'tcx>(\n+fn suggest_ampmut<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     local: Local,"}, {"sha": "534a91d39a0cee4d6c2f7b0747f2b1e951bfe84b", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -51,7 +51,7 @@ impl BorrowExplanation {\n             _ => true,\n         }\n     }\n-    pub(in crate::borrow_check) fn add_explanation_to_diagnostic<'cx, 'gcx, 'tcx>(\n+    pub(in crate::borrow_check) fn add_explanation_to_diagnostic<'gcx, 'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n         body: &Body<'tcx>,"}, {"sha": "5a8de5c9dbdda1f22caf1f0cb043ea898e5688c5", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::TerminatorKind;\n use rustc::mir::{Operand, BorrowKind};\n use rustc_data_structures::graph::dominators::Dominators;\n \n-pub(super) fn generate_invalidates<'cx, 'gcx, 'tcx>(\n+pub(super) fn generate_invalidates<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     all_facts: &mut Option<AllFacts>,\n     location_table: &LocationTable,"}, {"sha": "44d2916daa58489e3bf6fe6ddad40eafa077e93f", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -22,7 +22,7 @@ pub(super) enum Control {\n }\n \n /// Encapsulates the idea of iterating over every borrow that involves a particular path\n-pub(super) fn each_borrow_involving_path<'a, 'tcx, 'gcx: 'tcx, F, I, S> (\n+pub(super) fn each_borrow_involving_path<'tcx, 'gcx: 'tcx, F, I, S> (\n     s: &mut S,\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     body: &Body<'tcx>,"}, {"sha": "858ca958ca18630599a0ca7d20e238b95efbe605", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -298,7 +298,7 @@ fn place_components_conflict<'gcx, 'tcx>(\n // Given that the bases of `elem1` and `elem2` are always either equal\n // or disjoint (and have the same type!), return the overlap situation\n // between `elem1` and `elem2`.\n-fn place_base_conflict<'a, 'gcx: 'tcx, 'tcx>(\n+fn place_base_conflict<'gcx: 'tcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     elem1: &PlaceBase<'tcx>,\n     elem2: &PlaceBase<'tcx>,\n@@ -365,7 +365,7 @@ fn place_base_conflict<'a, 'gcx: 'tcx, 'tcx>(\n // Given that the bases of `elem1` and `elem2` are always either equal\n // or disjoint (and have the same type!), return the overlap situation\n // between `elem1` and `elem2`.\n-fn place_projection_conflict<'a, 'gcx: 'tcx, 'tcx>(\n+fn place_projection_conflict<'gcx: 'tcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     pi1: &Projection<'tcx>,"}, {"sha": "564e2ddc64b3f432c35de7a7e506dae42e38ae9f", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -25,7 +25,7 @@ use syntax_pos::Span;\n use super::lints;\n \n /// Construct the MIR for a given `DefId`.\n-pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Body<'tcx> {\n+pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Body<'tcx> {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n     // Figure out what primary body this item has.\n@@ -234,7 +234,7 @@ impl<'gcx: 'tcx, 'tcx> MutVisitor<'tcx> for GlobalizeMir<'gcx> {\n ///////////////////////////////////////////////////////////////////////////\n // BuildMir -- walks a crate, looking for fn items and methods to build MIR from\n \n-fn liberated_closure_env_ty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn liberated_closure_env_ty<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                             closure_expr_id: hir::HirId,\n                                             body_id: hir::BodyId)\n                                             -> Ty<'tcx> {\n@@ -551,7 +551,7 @@ macro_rules! unpack {\n     };\n }\n \n-fn should_abort_on_panic<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn should_abort_on_panic<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                          fn_def_id: DefId,\n                                          abi: Abi)\n                                          -> bool {"}, {"sha": "f7cc8c22b0451cf1b8ba39148f8aa7c8867efa93", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -46,7 +46,7 @@ pub fn move_path_children_matching<'tcx, F>(move_data: &MoveData<'tcx>,\n /// is no need to maintain separate drop flags to track such state.\n //\n // FIXME: we have to do something for moving slice patterns.\n-fn place_contents_drop_state_cannot_differ<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn place_contents_drop_state_cannot_differ<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                                             body: &Body<'tcx>,\n                                                             place: &mir::Place<'tcx>) -> bool {\n     let ty = place.ty(body, tcx).ty;\n@@ -72,7 +72,7 @@ fn place_contents_drop_state_cannot_differ<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gc\n     }\n }\n \n-pub(crate) fn on_lookup_result_bits<'a, 'gcx, 'tcx, F>(\n+pub(crate) fn on_lookup_result_bits<'gcx, 'tcx, F>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,\n@@ -90,15 +90,15 @@ pub(crate) fn on_lookup_result_bits<'a, 'gcx, 'tcx, F>(\n     }\n }\n \n-pub(crate) fn on_all_children_bits<'a, 'gcx, 'tcx, F>(\n+pub(crate) fn on_all_children_bits<'gcx, 'tcx, F>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,\n     move_path_index: MovePathIndex,\n     mut each_child: F)\n     where F: FnMut(MovePathIndex)\n {\n-    fn is_terminal_path<'a, 'gcx, 'tcx>(\n+    fn is_terminal_path<'gcx, 'tcx>(\n         tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n         body: &Body<'tcx>,\n         move_data: &MoveData<'tcx>,\n@@ -108,7 +108,7 @@ pub(crate) fn on_all_children_bits<'a, 'gcx, 'tcx, F>(\n             tcx, body, &move_data.move_paths[path].place)\n     }\n \n-    fn on_all_children_bits<'a, 'gcx, 'tcx, F>(\n+    fn on_all_children_bits<'gcx, 'tcx, F>(\n         tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n         body: &Body<'tcx>,\n         move_data: &MoveData<'tcx>,\n@@ -131,7 +131,7 @@ pub(crate) fn on_all_children_bits<'a, 'gcx, 'tcx, F>(\n     on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);\n }\n \n-pub(crate) fn on_all_drop_children_bits<'a, 'gcx, 'tcx, F>(\n+pub(crate) fn on_all_drop_children_bits<'gcx, 'tcx, F>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'gcx, 'tcx>,\n@@ -154,7 +154,7 @@ pub(crate) fn on_all_drop_children_bits<'a, 'gcx, 'tcx, F>(\n     })\n }\n \n-pub(crate) fn drop_flag_effects_for_function_entry<'a, 'gcx, 'tcx, F>(\n+pub(crate) fn drop_flag_effects_for_function_entry<'gcx, 'tcx, F>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'gcx, 'tcx>,\n@@ -171,7 +171,7 @@ pub(crate) fn drop_flag_effects_for_function_entry<'a, 'gcx, 'tcx, F>(\n     }\n }\n \n-pub(crate) fn drop_flag_effects_for_location<'a, 'gcx, 'tcx, F>(\n+pub(crate) fn drop_flag_effects_for_location<'gcx, 'tcx, F>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'gcx, 'tcx>,\n@@ -203,7 +203,7 @@ pub(crate) fn drop_flag_effects_for_location<'a, 'gcx, 'tcx, F>(\n     );\n }\n \n-pub(crate) fn for_location_inits<'a, 'gcx, 'tcx, F>(\n+pub(crate) fn for_location_inits<'gcx, 'tcx, F>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,"}, {"sha": "ecc252adb6dc0a9838164bd51b4e1677fe164d57", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n     }\n }\n \n-pub(super) fn gather_moves<'a, 'gcx, 'tcx>(\n+pub(super) fn gather_moves<'gcx, 'tcx>(\n     body: &Body<'tcx>,\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>\n ) -> Result<MoveData<'tcx>, (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {"}, {"sha": "2d8d3a28fd6f16522f4d5312d77e9265cee279ed", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -305,7 +305,7 @@ impl<'tcx> MoveError<'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> MoveData<'tcx> {\n+impl<'gcx, 'tcx> MoveData<'tcx> {\n     pub fn gather_moves(body: &Body<'tcx>, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n                         -> Result<Self, (Self, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {\n         builder::gather_moves(body, tcx)"}, {"sha": "04eeb6333fd930227ebb0f0d8a4d2d425eeafc69", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -9,7 +9,7 @@ crate enum LitToConstError {\n     Reported,\n }\n \n-crate fn lit_to_const<'a, 'gcx, 'tcx>(\n+crate fn lit_to_const<'gcx, 'tcx>(\n     lit: &'tcx ast::LitKind,\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     ty: Ty<'tcx>,"}, {"sha": "7a1fd7843a6ee49f8d52622087352b8dc85a8925", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -1630,7 +1630,7 @@ fn constructor_intersects_pattern<'p, 'a: 'p, 'tcx: 'a>(\n     }\n }\n \n-fn constructor_covered_by_range<'a, 'tcx>(\n+fn constructor_covered_by_range<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     ctor: &Constructor<'tcx>,\n     pat: &Pattern<'tcx>,"}, {"sha": "9b85ea53fa3ec5361b8c4689bf48ed5646dd156f", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -26,7 +26,7 @@ use std::slice;\n use syntax::ptr::P;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n-pub(crate) fn check_match<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+pub(crate) fn check_match<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     let body_id = if let Some(id) = tcx.hir().as_local_hir_id(def_id) {\n         tcx.hir().body_owned_by(id)\n     } else {"}, {"sha": "1a69f37ac2dede3c32c572743f09bc1018d0e70d", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -1242,7 +1242,7 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n     }\n }\n \n-pub fn compare_const_vals<'a, 'gcx, 'tcx>(\n+pub fn compare_const_vals<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     a: &'tcx ty::Const<'tcx>,\n     b: &'tcx ty::Const<'tcx>,"}, {"sha": "2ce3fef38f54f4d3f5a867e7a2f4003a6072d45c", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -212,7 +212,7 @@ impl Write for AbsolutePathPrinter<'_> {\n \n /// Produces an absolute path representation of the given type. See also the documentation on\n /// `std::any::type_name`\n-pub fn type_name<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n+pub fn type_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n     let alloc = alloc_type_name(tcx, ty);\n     tcx.mk_const(ty::Const {\n         val: ConstValue::Slice {\n@@ -225,7 +225,7 @@ pub fn type_name<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) -> &'tcx\n }\n \n /// Directly returns an `Allocation` containing an absolute path representation of the given type.\n-pub(super) fn alloc_type_name<'a, 'tcx>(\n+pub(super) fn alloc_type_name<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     ty: Ty<'tcx>\n ) -> &'tcx Allocation {"}, {"sha": "15ef05ca8cea49ef91641e7b21562901cbd8c0b0", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -45,7 +45,7 @@ pub(crate) struct InfiniteLoopDetector<'mir, 'tcx> {\n \n impl<'mir, 'tcx> InfiniteLoopDetector<'mir, 'tcx>\n {\n-    pub fn observe_and_analyze<'b>(\n+    pub fn observe_and_analyze(\n         &mut self,\n         tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n         span: Span,"}, {"sha": "641f1f47ea4078022db1cc42901922dd23bec3f4", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -281,7 +281,7 @@ impl<'tcx> InliningMap<'tcx> {\n     }\n }\n \n-pub fn collect_crate_mono_items<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn collect_crate_mono_items<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                           mode: MonoItemCollectionMode)\n                                           -> (FxHashSet<MonoItem<'tcx>>,\n                                                      InliningMap<'tcx>) {\n@@ -315,7 +315,7 @@ pub fn collect_crate_mono_items<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n \n // Find all non-generic items by walking the HIR. These items serve as roots to\n // start monomorphizing from.\n-fn collect_roots<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn collect_roots<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                            mode: MonoItemCollectionMode)\n                            -> Vec<MonoItem<'tcx>> {\n     debug!(\"Collecting roots\");\n@@ -413,7 +413,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     debug!(\"END collect_items_rec({})\", starting_point.to_string(tcx, true));\n }\n \n-fn record_accesses<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn record_accesses<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                              caller: MonoItem<'tcx>,\n                              callees: &[MonoItem<'tcx>],\n                              inlining_map: MTRef<'_, MTLock<InliningMap<'tcx>>>) {\n@@ -429,7 +429,7 @@ fn record_accesses<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     inlining_map.lock_mut().record_accesses(caller, accesses);\n }\n \n-fn check_recursion_limit<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_recursion_limit<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                    instance: Instance<'tcx>,\n                                    recursion_depths: &mut DefIdMap<usize>)\n                                    -> (DefId, usize) {\n@@ -463,7 +463,7 @@ fn check_recursion_limit<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     (def_id, recursion_depth)\n }\n \n-fn check_type_length_limit<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                      instance: Instance<'tcx>)\n {\n     let type_length = instance.substs.types().flat_map(|ty| ty.walk()).count();\n@@ -679,7 +679,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n     }\n }\n \n-fn visit_drop_use<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn visit_drop_use<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                             ty: Ty<'tcx>,\n                             is_direct_call: bool,\n                             output: &mut Vec<MonoItem<'tcx>>)\n@@ -688,7 +688,7 @@ fn visit_drop_use<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     visit_instance_use(tcx, instance, is_direct_call, output);\n }\n \n-fn visit_fn_use<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn visit_fn_use<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           ty: Ty<'tcx>,\n                           is_direct_call: bool,\n                           output: &mut Vec<MonoItem<'tcx>>)\n@@ -702,7 +702,7 @@ fn visit_fn_use<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn visit_instance_use<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn visit_instance_use<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                 instance: ty::Instance<'tcx>,\n                                 is_direct_call: bool,\n                                 output: &mut Vec<MonoItem<'tcx>>)\n@@ -741,7 +741,7 @@ fn visit_instance_use<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n // Returns true if we should codegen an instance in the local crate.\n // Returns false if we can just link to the upstream crate and therefore don't\n // need a mono item.\n-fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, instance: &Instance<'tcx>)\n+fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, instance: &Instance<'tcx>)\n                                          -> bool {\n     let def_id = match instance.def {\n         ty::InstanceDef::Item(def_id) => def_id,\n@@ -776,7 +776,7 @@ fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, instance\n     }\n     return true;\n \n-    fn is_available_upstream_generic<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn is_available_upstream_generic<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                def_id: DefId,\n                                                substs: SubstsRef<'tcx>)\n                                                -> bool {\n@@ -841,7 +841,7 @@ fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, instance\n ///\n /// Finally, there is also the case of custom unsizing coercions, e.g., for\n /// smart pointers such as `Rc` and `Arc`.\n-fn find_vtable_types_for_unsizing<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn find_vtable_types_for_unsizing<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                             source_ty: Ty<'tcx>,\n                                             target_ty: Ty<'tcx>)\n                                             -> (Ty<'tcx>, Ty<'tcx>) {\n@@ -914,7 +914,7 @@ fn create_fn_mono_item<'tcx>(instance: Instance<'tcx>) -> MonoItem<'tcx> {\n \n /// Creates a `MonoItem` for each method that is referenced by the vtable for\n /// the given trait/impl pair.\n-fn create_mono_items_for_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn create_mono_items_for_vtable_methods<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                   trait_ty: Ty<'tcx>,\n                                                   impl_ty: Ty<'tcx>,\n                                                   output: &mut Vec<MonoItem<'tcx>>) {\n@@ -1107,12 +1107,12 @@ impl RootCollector<'_, 'v> {\n     }\n }\n \n-fn item_requires_monomorphization<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+fn item_requires_monomorphization<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n     let generics = tcx.generics_of(def_id);\n     generics.requires_monomorphization(tcx)\n }\n \n-fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn create_mono_items_for_default_impls<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                  item: &'tcx hir::Item,\n                                                  output: &mut Vec<MonoItem<'tcx>>) {\n     match item.node {\n@@ -1176,7 +1176,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n /// Scan the miri alloc in order to find function calls, closures, and drop-glue\n-fn collect_miri<'a, 'tcx>(\n+fn collect_miri<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     alloc_id: AllocId,\n     output: &mut Vec<MonoItem<'tcx>>,\n@@ -1207,7 +1207,7 @@ fn collect_miri<'a, 'tcx>(\n }\n \n /// Scan the MIR in order to find function calls, closures, and drop-glue\n-fn collect_neighbours<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn collect_neighbours<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                 instance: Instance<'tcx>,\n                                 output: &mut Vec<MonoItem<'tcx>>)\n {\n@@ -1237,7 +1237,7 @@ fn collect_neighbours<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn def_id_to_string<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn def_id_to_string<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                               def_id: DefId)\n                               -> String {\n     let mut output = String::new();\n@@ -1246,7 +1246,7 @@ fn def_id_to_string<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     output\n }\n \n-fn collect_const<'a, 'tcx>(\n+fn collect_const<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     constant: &'tcx ty::Const<'tcx>,\n     param_substs: SubstsRef<'tcx>,"}, {"sha": "1e9b13cc60c211a614cb03f5006a09a739402688", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -5,7 +5,7 @@ use rustc::ty::{self, Ty, TyCtxt};\n pub mod collector;\n pub mod partitioning;\n \n-pub fn custom_coerce_unsize_info<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn custom_coerce_unsize_info<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                            source_ty: Ty<'tcx>,\n                                            target_ty: Ty<'tcx>)\n                                            -> CustomCoerceUnsized {"}, {"sha": "db786b5320bb7986b390a1f9534750891e683fb3", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -125,7 +125,7 @@ fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder<'_, '_>) -> Inter\n     name_builder.build_cgu_name(LOCAL_CRATE, &[\"fallback\"], Some(\"cgu\"))\n }\n \n-pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn partition<'tcx, I>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                               mono_items: I,\n                               strategy: PartitioningStrategy,\n                               inlining_map: &InliningMap<'tcx>)\n@@ -201,7 +201,7 @@ struct PostInliningPartitioning<'tcx> {\n     internalization_candidates: FxHashSet<MonoItem<'tcx>>,\n }\n \n-fn place_root_mono_items<'a, 'tcx, I>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn place_root_mono_items<'tcx, I>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                              mono_items: I)\n                                              -> PreInliningPartitioning<'tcx>\n     where I: Iterator<Item = MonoItem<'tcx>>\n@@ -585,7 +585,7 @@ fn place_inlined_mono_items<'tcx>(initial_partitioning: PreInliningPartitioning<\n     }\n }\n \n-fn internalize_symbols<'a, 'tcx>(_tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn internalize_symbols<'tcx>(_tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                  partitioning: &mut PostInliningPartitioning<'tcx>,\n                                  inlining_map: &InliningMap<'tcx>) {\n     if partitioning.codegen_units.len() == 1 {\n@@ -650,7 +650,7 @@ fn internalize_symbols<'a, 'tcx>(_tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn characteristic_def_id_of_mono_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn characteristic_def_id_of_mono_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                 mono_item: MonoItem<'tcx>)\n                                                 -> Option<DefId> {\n     match mono_item {\n@@ -830,7 +830,7 @@ fn assert_symbols_are_distinct<'a, 'tcx: 'a, I>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, m\n     }\n }\n \n-fn collect_and_partition_mono_items<'a, 'tcx>(\n+fn collect_and_partition_mono_items<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     cnum: CrateNum,\n ) -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>)"}, {"sha": "cde7e685a0e83584d96ccba00ab95f05fecd10ad", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -26,7 +26,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.mir_shims = make_shim;\n }\n \n-fn make_shim<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn make_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                        instance: ty::InstanceDef<'tcx>)\n                        -> &'tcx Body<'tcx>\n {\n@@ -166,7 +166,7 @@ fn local_decls_for_sig<'tcx>(sig: &ty::FnSig<'tcx>, span: Span)\n         .collect()\n }\n \n-fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                              def_id: DefId,\n                              ty: Option<Ty<'tcx>>)\n                              -> Body<'tcx>\n@@ -306,7 +306,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n }\n \n /// Builds a `Clone::clone` shim for `self_ty`. Here, `def_id` is `Clone::clone`.\n-fn build_clone_shim<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                               def_id: DefId,\n                               self_ty: Ty<'tcx>)\n                               -> Body<'tcx>\n@@ -691,7 +691,7 @@ impl CloneShimBuilder<'tcx> {\n ///\n /// If `untuple_args` is a vec of types, the second argument of the\n /// function will be untupled as these types.\n-fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn build_call_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                              def_id: DefId,\n                              rcvr_adjustment: Adjustment,\n                              call_kind: CallKind,"}, {"sha": "18b219422d1a593e13c34f15bffa9746bd68c7f7", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -31,7 +31,7 @@ pub use self::AddCallGuards::*;\n  */\n \n impl MirPass for AddCallGuards {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           _tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {"}, {"sha": "1b9f2093ac12069ad893755053fedd550f0ca7a5", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -40,7 +40,7 @@ use crate::util;\n pub struct AddMovesForPackedDrops;\n \n impl MirPass for AddMovesForPackedDrops {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>)\n@@ -50,7 +50,7 @@ impl MirPass for AddMovesForPackedDrops {\n     }\n }\n \n-pub fn add_moves_for_packed_drops<'a, 'tcx>(\n+pub fn add_moves_for_packed_drops<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     body: &mut Body<'tcx>,\n     def_id: DefId)\n@@ -59,7 +59,7 @@ pub fn add_moves_for_packed_drops<'a, 'tcx>(\n     patch.apply(body);\n }\n \n-fn add_moves_for_packed_drops_patch<'a, 'tcx>(\n+fn add_moves_for_packed_drops_patch<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     body: &Body<'tcx>,\n     def_id: DefId)\n@@ -90,7 +90,7 @@ fn add_moves_for_packed_drops_patch<'a, 'tcx>(\n     patch\n }\n \n-fn add_move_for_packed_drop<'a, 'tcx>(\n+fn add_move_for_packed_drop<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     body: &Body<'tcx>,\n     patch: &mut MirPatch<'tcx>,"}, {"sha": "43ff3619bf1689c99af3e248d8b29267f0c2b81e", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -48,7 +48,7 @@ fn is_stable<'tcx>(\n \n /// Determine whether this type may have a reference in it, recursing below compound types but\n /// not below references.\n-fn may_have_reference<'a, 'gcx, 'tcx>(ty: Ty<'tcx>, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> bool {\n+fn may_have_reference<'gcx, 'tcx>(ty: Ty<'tcx>, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> bool {\n     match ty.sty {\n         // Primitive types that are not references\n         ty::Bool | ty::Char |\n@@ -74,7 +74,7 @@ fn may_have_reference<'a, 'gcx, 'tcx>(ty: Ty<'tcx>, tcx: TyCtxt<'tcx, 'gcx, 'tcx\n }\n \n impl MirPass for AddRetag {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>)"}, {"sha": "e418ac7a7c7df4fdfe77b4358e901499c1416c40", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -505,7 +505,7 @@ fn check_unused_unsafe<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     hir::intravisit::Visitor::visit_body(&mut visitor, body);\n }\n \n-fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n+fn unsafety_check_result<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n                                    -> UnsafetyCheckResult\n {\n     debug!(\"unsafety_violations({:?})\", def_id);\n@@ -546,7 +546,7 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n     }\n }\n \n-fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+fn unsafe_derive_on_repr_packed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     let lint_hir_id = tcx.hir().as_local_hir_id(def_id).unwrap_or_else(||\n         bug!(\"checking unsafety for non-local def id {:?}\", def_id));\n \n@@ -603,7 +603,7 @@ fn report_unused_unsafe(tcx: TyCtxt<'_, '_, '_>,\n     db.emit();\n }\n \n-fn builtin_derive_def_id<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Option<DefId> {\n+fn builtin_derive_def_id<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Option<DefId> {\n     debug!(\"builtin_derive_def_id({:?})\", def_id);\n     if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n         if tcx.has_attr(impl_def_id, sym::automatically_derived) {\n@@ -619,7 +619,7 @@ fn builtin_derive_def_id<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n     }\n }\n \n-pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     debug!(\"check_unsafety({:?})\", def_id);\n \n     // closures are handled by their parent fn."}, {"sha": "0484f5c8b389c3f72d935108304e1bdb71b79629", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -27,7 +27,7 @@ pub struct CleanupNonCodegenStatements;\n pub struct DeleteNonCodegenStatements;\n \n impl MirPass for CleanupNonCodegenStatements {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           _tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _source: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {"}, {"sha": "1a42b01f452c2049674b61f9e72f9d886e585408", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -31,7 +31,7 @@ use crate::transform::{MirPass, MirSource};\n pub struct ConstProp;\n \n impl MirPass for ConstProp {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           source: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n@@ -599,7 +599,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n }\n \n-fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn type_size_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           param_env: ty::ParamEnv<'tcx>,\n                           ty: Ty<'tcx>) -> Option<u64> {\n     tcx.layout_of(param_env.and(ty)).ok().map(|layout| layout.size.bytes())"}, {"sha": "64e139bfe9152df991048b41553c29e2ef7843ab", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -30,7 +30,7 @@ use crate::util::def_use::DefUseAnalysis;\n pub struct CopyPropagation;\n \n impl MirPass for CopyPropagation {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _source: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {"}, {"sha": "e43f1f6f5806618b9e787ac66562ad5b02fc94a5", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -6,7 +6,7 @@ use crate::util::expand_aggregate;\n pub struct Deaggregator;\n \n impl MirPass for Deaggregator {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _source: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {"}, {"sha": "77ba0ceb7c362756fb56f7ef044d8871d0037045", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -18,7 +18,7 @@ impl MirPass for Marker {\n         Cow::Borrowed(self.0)\n     }\n \n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           _tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _source: MirSource<'tcx>,\n                           _body: &mut Body<'tcx>)\n@@ -38,7 +38,7 @@ impl fmt::Display for Disambiguator {\n }\n \n \n-pub fn on_mir_pass<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn on_mir_pass<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                              pass_num: &dyn fmt::Display,\n                              pass_name: &str,\n                              source: MirSource<'tcx>,\n@@ -55,7 +55,7 @@ pub fn on_mir_pass<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-pub fn emit_mir<'a, 'tcx>(\n+pub fn emit_mir<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     outputs: &OutputFilenames)\n     -> io::Result<()>"}, {"sha": "66977bfabf408d6b8aa780ff5f0e63ddb00e9a79", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -21,7 +21,7 @@ use syntax_pos::Span;\n pub struct ElaborateDrops;\n \n impl MirPass for ElaborateDrops {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>)\n@@ -77,7 +77,7 @@ impl MirPass for ElaborateDrops {\n /// Returns the set of basic blocks whose unwind edges are known\n /// to not be reachable, because they are `drop` terminators\n /// that can't drop anything.\n-fn find_dead_unwinds<'a, 'tcx>(\n+fn find_dead_unwinds< 'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     body: &Body<'tcx>,\n     def_id: hir::def_id::DefId,\n@@ -141,7 +141,7 @@ struct InitializationData {\n }\n \n impl InitializationData {\n-    fn apply_location<'a,'tcx>(&mut self,\n+    fn apply_location<'tcx>(&mut self,\n                                tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                body: &Body<'tcx>,\n                                env: &MoveDataParamEnv<'tcx, 'tcx>,"}, {"sha": "8a5a5fea393df7f1007cdc1ae042df4f3a428f9e", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -50,7 +50,7 @@ impl MutVisitor<'tcx> for EraseRegionsVisitor<'tcx> {\n pub struct EraseRegions;\n \n impl MirPass for EraseRegions {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {"}, {"sha": "0ded39e21a091e10f16cb10304c76376b1a416e5", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -310,7 +310,7 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n     }\n }\n \n-fn make_generator_state_argument_indirect<'a, 'tcx>(\n+fn make_generator_state_argument_indirect<'tcx>(\n                 tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                 def_id: DefId,\n                 body: &mut Body<'tcx>) {\n@@ -335,7 +335,7 @@ fn make_generator_state_argument_indirect<'a, 'tcx>(\n     DerefArgVisitor.visit_body(body);\n }\n \n-fn make_generator_state_argument_pinned<'a, 'tcx>(\n+fn make_generator_state_argument_pinned<'tcx>(\n                 tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                 body: &mut Body<'tcx>) {\n     let ref_gen_ty = body.local_decls.raw[1].ty;\n@@ -678,7 +678,7 @@ impl<'body, 'tcx: 'body, 's> StorageConflictVisitor<'body, 'tcx, 's> {\n     }\n }\n \n-fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn compute_layout<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                             source: MirSource<'tcx>,\n                             upvars: &Vec<Ty<'tcx>>,\n                             interior: Ty<'tcx>,\n@@ -767,7 +767,7 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     (remap, layout, storage_liveness)\n }\n \n-fn insert_switch<'a, 'tcx>(body: &mut Body<'tcx>,\n+fn insert_switch<'tcx>(body: &mut Body<'tcx>,\n                            cases: Vec<(usize, BasicBlock)>,\n                            transform: &TransformVisitor<'tcx>,\n                            default: TerminatorKind<'tcx>) {\n@@ -797,7 +797,7 @@ fn insert_switch<'a, 'tcx>(body: &mut Body<'tcx>,\n     }\n }\n \n-fn elaborate_generator_drops<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                        def_id: DefId,\n                                        body: &mut Body<'tcx>) {\n     use crate::util::elaborate_drops::{elaborate_drop, Unwind};\n@@ -848,7 +848,7 @@ fn elaborate_generator_drops<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     elaborator.patch.apply(body);\n }\n \n-fn create_generator_drop_shim<'a, 'tcx>(\n+fn create_generator_drop_shim<'tcx>(\n                 tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                 transform: &TransformVisitor<'tcx>,\n                 def_id: DefId,\n@@ -939,7 +939,7 @@ fn insert_term_block<'tcx>(body: &mut Body<'tcx>, kind: TerminatorKind<'tcx>) ->\n     term_block\n }\n \n-fn insert_panic_block<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn insert_panic_block<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                 body: &mut Body<'tcx>,\n                                 message: AssertMessage<'tcx>) -> BasicBlock {\n     let assert_block = BasicBlock::new(body.basic_blocks().len());\n@@ -969,7 +969,7 @@ fn insert_panic_block<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     assert_block\n }\n \n-fn create_generator_resume_function<'a, 'tcx>(\n+fn create_generator_resume_function<'tcx>(\n         tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n         transform: TransformVisitor<'tcx>,\n         def_id: DefId,\n@@ -1042,7 +1042,7 @@ fn insert_clean_drop<'tcx>(body: &mut Body<'tcx>) -> BasicBlock {\n     drop_clean\n }\n \n-fn create_cases<'a, 'tcx, F>(body: &mut Body<'tcx>,\n+fn create_cases<'tcx, F>(body: &mut Body<'tcx>,\n                           transform: &TransformVisitor<'tcx>,\n                           target: F) -> Vec<(usize, BasicBlock)>\n     where F: Fn(&SuspensionPoint) -> Option<BasicBlock> {\n@@ -1083,7 +1083,7 @@ fn create_cases<'a, 'tcx, F>(body: &mut Body<'tcx>,\n }\n \n impl MirPass for StateTransform {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                     source: MirSource<'tcx>,\n                     body: &mut Body<'tcx>) {"}, {"sha": "fdbf4ea8d9f1ca48b23192f2d519a74a4ac9cdf3", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -38,7 +38,7 @@ struct CallSite<'tcx> {\n }\n \n impl MirPass for Inline {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           source: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n@@ -631,7 +631,7 @@ impl Inliner<'tcx> {\n     }\n }\n \n-fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn type_size_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           param_env: ty::ParamEnv<'tcx>,\n                           ty: Ty<'tcx>) -> Option<u64> {\n     tcx.layout_of(param_env.and(ty)).ok().map(|layout| layout.size.bytes())"}, {"sha": "784e3ed5187f113d156761a58861f4583805b88b", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -12,7 +12,7 @@ use crate::transform::{MirPass, MirSource};\n pub struct InstCombine;\n \n impl MirPass for InstCombine {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {"}, {"sha": "47ac87ad795fa91a61faf2274b56e4bfd376b5d6", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -10,7 +10,7 @@ use crate::transform::{MirPass, MirSource};\n pub struct Lower128Bit;\n \n impl MirPass for Lower128Bit {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n@@ -25,7 +25,7 @@ impl MirPass for Lower128Bit {\n }\n \n impl Lower128Bit {\n-    fn lower_128bit_ops<'a, 'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, body: &mut Body<'tcx>) {\n+    fn lower_128bit_ops<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, body: &mut Body<'tcx>) {\n         let mut new_blocks = Vec::new();\n         let cur_len = body.basic_blocks().len();\n \n@@ -120,7 +120,7 @@ impl Lower128Bit {\n     }\n }\n \n-fn check_lang_item_type<'a, 'tcx, D>(\n+fn check_lang_item_type<'tcx, D>(\n     lang_item: LangItem,\n     place: &Place<'tcx>,\n     lhs: &Operand<'tcx>,\n@@ -172,7 +172,7 @@ enum RhsKind {\n }\n \n impl RhsKind {\n-    fn ty<'a, 'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Option<Ty<'tcx>> {\n+    fn ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Option<Ty<'tcx>> {\n         match *self {\n             RhsKind::Unchanged => None,\n             RhsKind::ForceU128 => Some(tcx.types.u128),"}, {"sha": "c569f8d65f6c5f60a99305002657dec727fb961a", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -50,13 +50,13 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn is_mir_available<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+fn is_mir_available<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n     tcx.mir_keys(def_id.krate).contains(&def_id)\n }\n \n /// Finds the full set of `DefId`s within the current crate that have\n /// MIR associated with them.\n-fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, krate: CrateNum)\n+fn mir_keys<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, krate: CrateNum)\n                       -> &'tcx DefIdSet {\n     assert_eq!(krate, LOCAL_CRATE);\n \n@@ -95,7 +95,7 @@ fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, krate: CrateNum)\n     tcx.arena.alloc(set)\n }\n \n-fn mir_built<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_built<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     let mir = build::mir_build(tcx, def_id);\n     tcx.alloc_steal_mir(mir)\n }\n@@ -142,7 +142,7 @@ pub trait MirPass {\n         default_name::<Self>()\n     }\n \n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           source: MirSource<'tcx>,\n                           body: &mut Body<'tcx>);\n@@ -196,7 +196,7 @@ pub fn run_passes(\n     }\n }\n \n-fn mir_const<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_const<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n     let _ = tcx.unsafety_check_result(def_id);\n \n@@ -227,7 +227,7 @@ fn mir_validated(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Bo\n     tcx.alloc_steal_mir(body)\n }\n \n-fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n+fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n     if tcx.is_constructor(def_id) {\n         // There's no reason to run all of the MIR passes on constructors when\n         // we can just output the MIR we want directly. This also saves const"}, {"sha": "38a5fc4c2398db74055988efad76defa18e45076", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -9,15 +9,15 @@ use crate::transform::{MirPass, MirSource};\n pub struct NoLandingPads;\n \n impl MirPass for NoLandingPads {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         no_landing_pads(tcx, body)\n     }\n }\n \n-pub fn no_landing_pads<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, body: &mut Body<'tcx>) {\n+pub fn no_landing_pads<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, body: &mut Body<'tcx>) {\n     if tcx.sess.no_landing_pads() {\n         NoLandingPads.visit_body(body);\n     }"}, {"sha": "63cd10f8e26fc81b32c603474e0d85d148814686", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -369,7 +369,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n     }\n }\n \n-pub fn promote_candidates<'a, 'tcx>(body: &mut Body<'tcx>,\n+pub fn promote_candidates<'tcx>(body: &mut Body<'tcx>,\n                                     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                     mut temps: IndexVec<Local, TempState>,\n                                     candidates: Vec<Candidate>) {"}, {"sha": "c0ff2d00a397995cdf61636f18f41afebbd1b7e1", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -1472,7 +1472,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn mir_const_qualif<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                               def_id: DefId)\n                               -> (u8, &'tcx BitSet<Local>) {\n     // N.B., this `borrow()` is guaranteed to be valid (i.e., the value\n@@ -1492,7 +1492,7 @@ fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n pub struct QualifyAndPromoteConstants;\n \n impl MirPass for QualifyAndPromoteConstants {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {"}, {"sha": "5a9b30d32de3c1c813697c9da073f2b077c0303e", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -9,7 +9,7 @@ use crate::util::patch::MirPatch;\n /// code for these.\n pub struct RemoveNoopLandingPads;\n \n-pub fn remove_noop_landing_pads<'a, 'tcx>(\n+pub fn remove_noop_landing_pads<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     body: &mut Body<'tcx>)\n {\n@@ -22,7 +22,7 @@ pub fn remove_noop_landing_pads<'a, 'tcx>(\n }\n \n impl MirPass for RemoveNoopLandingPads {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {"}, {"sha": "adaea15a17a10d9fd93cb4536b00a1e4ad0efe74", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -25,7 +25,7 @@ use crate::dataflow::has_rustc_mir_with;\n pub struct SanityCheck;\n \n impl MirPass for SanityCheck {\n-    fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = src.def_id();\n         if !tcx.has_attr(def_id, sym::rustc_mir) {\n@@ -84,7 +84,7 @@ impl MirPass for SanityCheck {\n /// (If there are any calls to `rustc_peek` that do not match the\n /// expression form above, then that emits an error as well, but those\n /// errors are not intended to be used for unit tests.)\n-pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn sanity_check_via_rustc_peek<'tcx, O>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                 body: &Body<'tcx>,\n                                                 def_id: DefId,\n                                                 _attributes: &[ast::Attribute],\n@@ -101,7 +101,7 @@ pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn each_block<'tcx, O>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                            body: &Body<'tcx>,\n                            results: &DataflowResults<'tcx, O>,\n                            bb: mir::BasicBlock) where"}, {"sha": "92b7a76c5fa377a6420e74876284a79c913ef3f7", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -57,7 +57,7 @@ impl MirPass for SimplifyCfg {\n         Cow::Borrowed(&self.label)\n     }\n \n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           _tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n@@ -296,7 +296,7 @@ pub fn remove_dead_blocks(body: &mut Body<'_>) {\n pub struct SimplifyLocals;\n \n impl MirPass for SimplifyLocals {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {"}, {"sha": "41f2572c2f562bb589b28fa83ee33f7b7e5db459", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -19,7 +19,7 @@ impl MirPass for SimplifyBranches {\n         Cow::Borrowed(&self.label)\n     }\n \n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {"}, {"sha": "7eae82c019c885dcd35fdcaab51c11f89d6d2bd9", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -37,7 +37,7 @@ use crate::util::patch::MirPatch;\n pub struct UniformArrayMoveOut;\n \n impl MirPass for UniformArrayMoveOut {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n@@ -162,7 +162,7 @@ impl<'a, 'tcx> UniformArrayMoveOutVisitor<'a, 'tcx> {\n pub struct RestoreSubsliceArrayMoveOut;\n \n impl MirPass for RestoreSubsliceArrayMoveOut {\n-    fn run_pass<'a, 'tcx>(&self,\n+    fn run_pass<'tcx>(&self,\n                           tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {"}, {"sha": "5ca867d796e99eabebb8f80a7d1492a013d8707b", "filename": "src/librustc_mir/util/alignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Futil%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Futil%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Falignment.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -4,7 +4,7 @@ use rustc::mir::*;\n /// Returns `true` if this place is allowed to be less aligned\n /// than its containing struct (because it is within a packed\n /// struct).\n-pub fn is_disaligned<'a, 'tcx, L>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn is_disaligned<'tcx, L>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                   local_decls: &L,\n                                   param_env: ty::ParamEnv<'tcx>,\n                                   place: &Place<'tcx>)\n@@ -32,7 +32,7 @@ pub fn is_disaligned<'a, 'tcx, L>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn is_within_packed<'a, 'tcx, L>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_within_packed<'tcx, L>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                  local_decls: &L,\n                                  place: &Place<'tcx>)\n                                  -> bool"}, {"sha": "ba00fab7b8d5756d40d0cafb973590c1f4c5d0d7", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -133,7 +133,7 @@ fn write_edges<W: Write>(source: BasicBlock, body: &Body<'_>, w: &mut W) -> io::\n /// Write the graphviz DOT label for the overall graph. This is essentially a block of text that\n /// will appear below the graph, showing the type of the `fn` this MIR represents and the types of\n /// all the variables and temporaries.\n-fn write_graph_label<'a, 'gcx, 'tcx, W: Write>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn write_graph_label<'gcx, 'tcx, W: Write>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                                def_id: DefId,\n                                                body: &Body<'_>,\n                                                w: &mut W)"}, {"sha": "900e3d19670bf7243fe301855f76a7ae2739da1b", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -254,7 +254,7 @@ fn block<'tcx>(\n     visitor.defs_uses\n }\n \n-pub fn dump_mir<'a, 'tcx>(\n+pub fn dump_mir<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     pass_name: &str,\n     source: MirSource<'tcx>,\n@@ -271,7 +271,7 @@ pub fn dump_mir<'a, 'tcx>(\n     dump_matched_mir_node(tcx, pass_name, &node_path, source, body, result);\n }\n \n-fn dump_matched_mir_node<'a, 'tcx>(\n+fn dump_matched_mir_node<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     pass_name: &str,\n     node_path: &str,\n@@ -294,7 +294,7 @@ fn dump_matched_mir_node<'a, 'tcx>(\n     });\n }\n \n-pub fn write_mir_fn<'a, 'tcx>(\n+pub fn write_mir_fn<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     src: MirSource<'tcx>,\n     body: &Body<'tcx>,"}, {"sha": "da3735e87f6b43e467c1ce639477c667dca6fba0", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -21,7 +21,7 @@ pub use self::graphviz::{graphviz_safe_def_name, write_mir_graphviz};\n pub use self::graphviz::write_node_label as write_graphviz_node_label;\n \n /// If possible, suggest replacing `ref` with `ref mut`.\n-pub fn suggest_ref_mut<'cx, 'gcx, 'tcx>(\n+pub fn suggest_ref_mut<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     binding_span: Span,\n ) -> Option<(String)> {"}, {"sha": "d5c13610e2f7a4c950b5bb963888a8d2f1456bce", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -62,7 +62,7 @@ pub enum PassWhere {\n ///   or `typeck` appears in the name.\n /// - `foo & nll | bar & typeck` == match if `foo` and `nll` both appear in the name\n ///   or `typeck` and `bar` both appear in the name.\n-pub fn dump_mir<'a, 'gcx, 'tcx, F>(\n+pub fn dump_mir<'gcx, 'tcx, F>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n@@ -93,7 +93,7 @@ pub fn dump_mir<'a, 'gcx, 'tcx, F>(\n     );\n }\n \n-pub fn dump_enabled<'a, 'gcx, 'tcx>(\n+pub fn dump_enabled<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     pass_name: &str,\n     source: MirSource<'tcx>,\n@@ -117,7 +117,7 @@ pub fn dump_enabled<'a, 'gcx, 'tcx>(\n // `def_path_str()` would otherwise trigger `type_of`, and this can\n // run while we are already attempting to evaluate `type_of`.\n \n-fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n+fn dump_matched_mir_node<'gcx, 'tcx, F>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n@@ -240,7 +240,7 @@ pub(crate) fn create_dump_file(\n }\n \n /// Write out a human-readable textual representation for the given MIR.\n-pub fn write_mir_pretty<'a, 'gcx, 'tcx>(\n+pub fn write_mir_pretty<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     single: Option<DefId>,\n     w: &mut dyn Write,\n@@ -279,7 +279,7 @@ pub fn write_mir_pretty<'a, 'gcx, 'tcx>(\n     Ok(())\n }\n \n-pub fn write_mir_fn<'a, 'gcx, 'tcx, F>(\n+pub fn write_mir_fn<'gcx, 'tcx, F>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     src: MirSource<'tcx>,\n     body: &Body<'tcx>,\n@@ -303,7 +303,7 @@ where\n }\n \n /// Write out a human-readable textual representation for the given basic block.\n-pub fn write_basic_block<'cx, 'gcx, 'tcx, F>(\n+pub fn write_basic_block<'gcx, 'tcx, F>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     block: BasicBlock,\n     body: &Body<'tcx>,\n@@ -370,7 +370,7 @@ where\n /// After we print the main statement, we sometimes dump extra\n /// information. There's often a lot of little things \"nuzzled up\" in\n /// a statement.\n-fn write_extra<'cx, 'gcx, 'tcx, F>(\n+fn write_extra<'gcx, 'tcx, F>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     write: &mut dyn Write,\n     mut visit_op: F,\n@@ -538,7 +538,7 @@ fn write_scope_tree(\n \n /// Write out a human-readable textual representation of the MIR's `fn` type and the types of its\n /// local variables (both user-defined bindings and compiler temporaries).\n-pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n+pub fn write_mir_intro<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     src: MirSource<'tcx>,\n     body: &Body<'_>,"}, {"sha": "b256ff487401e8b70e198ebda3cee55e3306c351", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -14,7 +14,7 @@ use rustc::ty::TyCtxt;\n use syntax::ast::Attribute;\n use syntax::symbol::sym;\n \n-pub fn test_layout<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn test_layout<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     if tcx.features().rustc_attrs {\n         // if the `rustc_attrs` feature is not enabled, don't bother testing layout\n         tcx.hir()"}, {"sha": "29d6bd300278526bd9dc68795d57326f4d470689", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -39,7 +39,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn const_is_rvalue_promotable_to_static<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn const_is_rvalue_promotable_to_static<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                   def_id: DefId)\n                                                   -> bool\n {\n@@ -51,7 +51,7 @@ fn const_is_rvalue_promotable_to_static<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     tcx.rvalue_promotable_map(def_id).contains(&body_id.hir_id.local_id)\n }\n \n-fn rvalue_promotable_map<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn rvalue_promotable_map<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                    def_id: DefId)\n                                    -> &'tcx ItemLocalSet\n {"}, {"sha": "9cf433abc6e68e1990a5014b671b20a49918337e", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -220,7 +220,7 @@ impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>\n     }\n }\n \n-fn def_id_visibility<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n+fn def_id_visibility<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n                                -> (ty::Visibility, Span, &'static str) {\n     match tcx.hir().as_local_hir_id(def_id) {\n         Some(hir_id) => {\n@@ -331,7 +331,7 @@ fn item_tables<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     if tcx.has_typeck_tables(def_id) { tcx.typeck_tables_of(def_id) } else { empty_tables }\n }\n \n-fn min<'a, 'tcx>(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+fn min<'tcx>(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n                  -> ty::Visibility {\n     if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }\n }"}, {"sha": "fede04fdce23e70d5d22213d6f94dfda3d34df86", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -672,7 +672,7 @@ crate fn provide(p: &mut Providers<'_>) {\n     };\n }\n \n-crate fn evaluate_goal<'a, 'tcx>(\n+crate fn evaluate_goal<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     goal: ChalkCanonicalGoal<'tcx>\n ) -> Result<"}, {"sha": "3de64f4f4c43e58e664c6c9f3c0d000968b43b1a", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -146,7 +146,7 @@ fn dropck_outlives<'tcx>(\n \n /// Returns a set of constraints that needs to be satisfied in\n /// order for `ty` to be valid for destruction.\n-fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n+fn dtorck_constraint_for_ty<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     span: Span,\n     for_ty: Ty<'tcx>,\n@@ -279,7 +279,7 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n }\n \n /// Calculates the dtorck constraint for a type.\n-crate fn adt_dtorck_constraint<'a, 'tcx>(\n+crate fn adt_dtorck_constraint<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Result<DtorckConstraint<'tcx>, NoSolution> {"}, {"sha": "569836680b5fe5cb5e5b1bb1114f1fb7c68666d7", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -127,7 +127,7 @@ impl ClauseVisitor<'a, 'tcx> {\n     }\n }\n \n-crate fn program_clauses_for_env<'a, 'tcx>(\n+crate fn program_clauses_for_env<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     environment: Environment<'tcx>,\n ) -> Clauses<'tcx> {\n@@ -160,7 +160,7 @@ crate fn program_clauses_for_env<'a, 'tcx>(\n     );\n }\n \n-crate fn environment<'a, 'tcx>(\n+crate fn environment<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId\n ) -> Environment<'tcx> {"}, {"sha": "59b61abee8f5274da58e72fd0eaad05bd91af534", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> IntoWellFormedGoal for DomainGoal<'tcx> {\n     }\n }\n \n-crate fn program_clauses_for<'a, 'tcx>(\n+crate fn program_clauses_for<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Clauses<'tcx> {\n@@ -184,7 +184,7 @@ crate fn program_clauses_for<'a, 'tcx>(\n     }\n }\n \n-fn program_clauses_for_trait<'a, 'tcx>(\n+fn program_clauses_for_trait<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Clauses<'tcx> {\n@@ -343,7 +343,7 @@ fn program_clauses_for_impl(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Cla\n     tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::bind(clause))))\n }\n \n-pub fn program_clauses_for_type_def<'a, 'tcx>(\n+pub fn program_clauses_for_type_def<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Clauses<'tcx> {\n@@ -420,7 +420,7 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n     tcx.mk_clauses(iter::once(well_formed_clause).chain(from_env_clauses))\n }\n \n-pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n+pub fn program_clauses_for_associated_type_def<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     item_id: DefId,\n ) -> Clauses<'tcx> {\n@@ -558,7 +558,7 @@ pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n     tcx.mk_clauses(clauses)\n }\n \n-pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n+pub fn program_clauses_for_associated_type_value<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     item_id: DefId,\n ) -> Clauses<'tcx> {\n@@ -620,7 +620,7 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n     tcx.mk_clauses(iter::once(normalize_clause))\n }\n \n-pub fn dump_program_clauses<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn dump_program_clauses<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     if !tcx.features().rustc_attrs {\n         return;\n     }"}, {"sha": "92a28defa5553f461455096813152391cba4988d", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -461,7 +461,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     ///   instantiate a `Kind`.\n     /// - `inferred_kind`: if no parameter was provided, and inference is enabled, then\n     ///   creates a suitable inference variable.\n-    pub fn create_substs_for_generic_args<'a, 'b>(\n+    pub fn create_substs_for_generic_args<'b>(\n         tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n         def_id: DefId,\n         parent_substs: &[Kind<'tcx>],\n@@ -2415,7 +2415,7 @@ pub struct Bounds<'tcx> {\n     pub implicitly_sized: Option<Span>,\n }\n \n-impl<'a, 'gcx, 'tcx> Bounds<'tcx> {\n+impl<'gcx, 'tcx> Bounds<'tcx> {\n     /// Converts a bounds list into a flat set of predicates (like\n     /// where-clauses). Because some of our bounds listings (e.g.,\n     /// regions) don't include the self-type, you must supply the"}, {"sha": "6281b20f24af2bc807bbd7f627b964cfdede6140", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -239,7 +239,7 @@ impl<'a, 'gcx, 'tcx> Autoderef<'a, 'gcx, 'tcx> {\n     }\n }\n \n-pub fn report_autoderef_recursion_limit_error<'a, 'gcx, 'tcx>(\n+pub fn report_autoderef_recursion_limit_error<'gcx, 'tcx>(\n     tcx: TyCtxt<'tcx, 'gcx, 'tcx>, span: Span, ty: Ty<'tcx>)\n {\n     // We've reached the recursion limit, error gracefully."}, {"sha": "920dbff7b8cc6366f4817b5a228c3c96b47d6441", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -23,7 +23,7 @@ use super::{Inherited, FnCtxt, potentially_plural_count};\n /// - `trait_m`: the method in the trait\n /// - `impl_trait_ref`: the TraitRef corresponding to the trait implementation\n \n-pub fn compare_impl_method<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn compare_impl_method<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                      impl_m: &ty::AssocItem,\n                                      impl_m_span: Span,\n                                      trait_m: &ty::AssocItem,\n@@ -73,7 +73,7 @@ pub fn compare_impl_method<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn compare_predicate_entailment<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                           impl_m: &ty::AssocItem,\n                                           impl_m_span: Span,\n                                           trait_m: &ty::AssocItem,\n@@ -355,7 +355,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     })\n }\n \n-fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_region_bounds_on_impl_method<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                 span: Span,\n                                                 impl_m: &ty::AssocItem,\n                                                 trait_m: &ty::AssocItem,\n@@ -495,7 +495,7 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n     }\n }\n \n-fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn compare_self_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                impl_m: &ty::AssocItem,\n                                impl_m_span: Span,\n                                trait_m: &ty::AssocItem,\n@@ -580,7 +580,7 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     Ok(())\n }\n \n-fn compare_number_of_generics<'a, 'tcx>(\n+fn compare_number_of_generics<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     impl_: &ty::AssocItem,\n     _impl_span: Span,\n@@ -695,7 +695,7 @@ fn compare_number_of_generics<'a, 'tcx>(\n     }\n }\n \n-fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn compare_number_of_method_arguments<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                 impl_m: &ty::AssocItem,\n                                                 impl_m_span: Span,\n                                                 trait_m: &ty::AssocItem,\n@@ -779,7 +779,7 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     Ok(())\n }\n \n-fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn compare_synthetic_generics<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                         impl_m: &ty::AssocItem,\n                                         trait_m: &ty::AssocItem)\n                                         -> Result<(), ErrorReported> {\n@@ -951,7 +951,7 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn compare_const_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                     impl_c: &ty::AssocItem,\n                                     impl_c_span: Span,\n                                     trait_c: &ty::AssocItem,"}, {"sha": "6094fd1f5f2fc1081363756186851fe0667c4d2e", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -29,7 +29,7 @@ use syntax_pos::Span;\n ///    struct/enum definition for the nominal type itself (i.e.\n ///    cannot do `struct S<T>; impl<T:Clone> Drop for S<T> { ... }`).\n ///\n-pub fn check_drop_impl<'a, 'tcx>(\n+pub fn check_drop_impl<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     drop_impl_did: DefId,\n ) -> Result<(), ErrorReported> {\n@@ -64,7 +64,7 @@ pub fn check_drop_impl<'a, 'tcx>(\n     }\n }\n \n-fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n+fn ensure_drop_params_and_item_params_correspond<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     drop_impl_did: DefId,\n     drop_impl_ty: Ty<'tcx>,\n@@ -140,7 +140,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n \n /// Confirms that every predicate imposed by dtor_predicates is\n /// implied by assuming the predicates attached to self_type_did.\n-fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n+fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     drop_impl_did: DefId,\n     dtor_predicates: &ty::GenericPredicates<'tcx>,"}, {"sha": "21f4660b08e5c1f3be116c43658cc2de95beac8c", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -13,7 +13,7 @@ use rustc::hir;\n \n use std::iter;\n \n-fn equate_intrinsic_type<'a, 'tcx>(\n+fn equate_intrinsic_type<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     it: &hir::ForeignItem,\n     n_tps: usize,\n@@ -79,7 +79,7 @@ pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n \n /// Remember to add all intrinsics here, in librustc_codegen_llvm/intrinsic.rs,\n /// and in libcore/intrinsics.rs\n-pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn check_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                       it: &hir::ForeignItem) {\n     let param = |n| tcx.mk_ty_param(n, InternedString::intern(&format!(\"P{}\", n)));\n     let name = it.ident.as_str();\n@@ -400,7 +400,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n /// Type-check `extern \"platform-intrinsic\" { ... }` functions.\n-pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn check_platform_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                it: &hir::ForeignItem) {\n     let param = |n| {\n         let name = InternedString::intern(&format!(\"P{}\", n));"}, {"sha": "96ee140bcfecb64e87697c9d242615e6ab5b897d", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -395,7 +395,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     providers.method_autoderef_steps = method_autoderef_steps;\n }\n \n-fn method_autoderef_steps<'a, 'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+fn method_autoderef_steps<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n                                           goal: CanonicalTyGoal<'tcx>)\n                                           -> MethodAutoderefStepsResult<'gcx>\n {"}, {"sha": "05da24bb62c998915ac5c18c499e8b707963756d", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -775,12 +775,12 @@ impl Ord for TraitInfo {\n }\n \n /// Retrieves all traits in this crate and any dependent crates.\n-pub fn all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Vec<TraitInfo> {\n+pub fn all_traits<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Vec<TraitInfo> {\n     tcx.all_traits(LOCAL_CRATE).iter().map(|&def_id| TraitInfo { def_id }).collect()\n }\n \n /// Computes all traits in this crate and any dependent crates.\n-fn compute_all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Vec<DefId> {\n+fn compute_all_traits<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Vec<DefId> {\n     use hir::itemlikevisit;\n \n     let mut traits = vec![];"}, {"sha": "c1111e3ae4695bf766da6a293d539c0f59f07204", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -695,7 +695,7 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n }\n \n-pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n+pub fn check_wf_new<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n     tcx.sess.track_errors(|| {\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n         tcx.hir().krate().par_visit_all_item_likes(&mut visit);\n@@ -706,22 +706,22 @@ fn check_mod_item_types<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, module_def_id: DefI\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n }\n \n-fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, crate_num: CrateNum) {\n+fn typeck_item_bodies<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, crate_num: CrateNum) {\n     debug_assert!(crate_num == LOCAL_CRATE);\n     tcx.par_body_owners(|body_owner_def_id| {\n         tcx.ensure().typeck_tables_of(body_owner_def_id);\n     });\n }\n \n-fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     wfcheck::check_item_well_formed(tcx, def_id);\n }\n \n-fn check_trait_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+fn check_trait_item_well_formed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     wfcheck::check_trait_item(tcx, def_id);\n }\n \n-fn check_impl_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+fn check_impl_item_well_formed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     wfcheck::check_impl_item(tcx, def_id);\n }\n \n@@ -741,7 +741,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn adt_destructor<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn adt_destructor<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                             def_id: DefId)\n                             -> Option<ty::Destructor> {\n     tcx.calculate_dtor(def_id, &mut dropck::check_drop_impl)\n@@ -756,7 +756,7 @@ fn adt_destructor<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n /// may not succeed. In some cases where this function returns `None`\n /// (notably closures), `typeck_tables(def_id)` would wind up\n /// redirecting to the owning function.\n-fn primary_body_of<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn primary_body_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                              id: hir::HirId)\n                              -> Option<(hir::BodyId, Option<&'tcx hir::FnDecl>)>\n {\n@@ -797,7 +797,7 @@ fn primary_body_of<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn has_typeck_tables<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn has_typeck_tables<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                def_id: DefId)\n                                -> bool {\n     // Closures' tables come from their outermost function,\n@@ -811,13 +811,13 @@ fn has_typeck_tables<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     primary_body_of(tcx, id).is_some()\n }\n \n-fn used_trait_imports<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn used_trait_imports<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                 def_id: DefId)\n                                 -> &'tcx DefIdSet {\n     &*tcx.typeck_tables_of(def_id).used_trait_imports\n }\n \n-fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                               def_id: DefId)\n                               -> &'tcx ty::TypeckTables<'tcx> {\n     // Closures' tables come from their outermost function,\n@@ -919,7 +919,7 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     tables\n }\n \n-fn check_abi<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, span: Span, abi: Abi) {\n+fn check_abi<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, span: Span, abi: Abi) {\n     if !tcx.sess.target.target.is_abi_supported(abi) {\n         struct_span_err!(tcx.sess, span, E0570,\n             \"The ABI `{}` is not supported for the current target\", abi).emit()\n@@ -1287,7 +1287,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     (fcx, gen_ty)\n }\n \n-fn check_struct<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_struct<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                           id: hir::HirId,\n                           span: Span) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n@@ -1303,7 +1303,7 @@ fn check_struct<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     check_packed(tcx, span, def_id);\n }\n \n-fn check_union<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_union<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                          id: hir::HirId,\n                          span: Span) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n@@ -1314,7 +1314,7 @@ fn check_union<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     check_packed(tcx, span, def_id);\n }\n \n-fn check_opaque<'a, 'tcx>(\n+fn check_opaque<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n     substs: SubstsRef<'tcx>,\n@@ -1335,7 +1335,7 @@ fn check_opaque<'a, 'tcx>(\n     }\n }\n \n-pub fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, it: &'tcx hir::Item) {\n+pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, it: &'tcx hir::Item) {\n     debug!(\n         \"check_item_type(it.hir_id={}, it.name={})\",\n         it.hir_id,\n@@ -1472,15 +1472,15 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_, '_, '_>, id: DefId, span\n     }\n }\n \n-fn check_on_unimplemented<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_on_unimplemented<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                     trait_def_id: DefId,\n                                     item: &hir::Item) {\n     let item_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n     // an error would be reported if this fails.\n     let _ = traits::OnUnimplementedDirective::of_item(tcx, trait_def_id, item_def_id);\n }\n \n-fn report_forbidden_specialization<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn report_forbidden_specialization<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                              impl_item: &hir::ImplItem,\n                                              parent_impl: DefId)\n {\n@@ -1506,7 +1506,7 @@ fn report_forbidden_specialization<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     err.emit();\n }\n \n-fn check_specialization_validity<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_specialization_validity<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                            trait_def: &ty::TraitDef,\n                                            trait_item: &ty::AssocItem,\n                                            impl_id: DefId,\n@@ -1532,7 +1532,7 @@ fn check_specialization_validity<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n \n }\n \n-fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_impl_items_against_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                             impl_span: Span,\n                                             impl_id: DefId,\n                                             impl_trait_ref: ty::TraitRef<'tcx>,\n@@ -1693,7 +1693,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n /// Checks whether a type can be represented in memory. In particular, it\n /// identifies types that contain themselves without indirection through a\n /// pointer, which would mean their size is unbounded.\n-fn check_representable<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_representable<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                  sp: Span,\n                                  item_def_id: DefId)\n                                  -> bool {\n@@ -1718,7 +1718,7 @@ fn check_representable<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     return true\n }\n \n-pub fn check_simd<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: DefId) {\n+pub fn check_simd<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: DefId) {\n     let t = tcx.type_of(def_id);\n     if let ty::Adt(def, substs) = t.sty {\n         if def.is_struct() {\n@@ -1747,7 +1747,7 @@ pub fn check_simd<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: Def\n     }\n }\n \n-fn check_packed<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: DefId) {\n+fn check_packed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: DefId) {\n     let repr = tcx.adt_def(def_id).repr;\n     if repr.packed() {\n         for attr in tcx.get_attrs(def_id).iter() {\n@@ -1771,7 +1771,7 @@ fn check_packed<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: DefId\n     }\n }\n \n-fn check_packed_inner<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_packed_inner<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                 def_id: DefId,\n                                 stack: &mut Vec<DefId>) -> bool {\n     let t = tcx.type_of(def_id);\n@@ -1801,7 +1801,7 @@ fn check_packed_inner<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     false\n }\n \n-fn check_transparent<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: DefId) {\n+fn check_transparent<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: DefId) {\n     let adt = tcx.adt_def(def_id);\n     if !adt.repr.transparent() {\n         return;\n@@ -1881,7 +1881,7 @@ fn check_transparent<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id:\n }\n \n #[allow(trivial_numeric_casts)]\n-pub fn check_enum<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                             sp: Span,\n                             vs: &'tcx [hir::Variant],\n                             id: hir::HirId) {\n@@ -1945,7 +1945,7 @@ pub fn check_enum<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     check_transparent(tcx, sp, def_id);\n }\n \n-fn report_unexpected_variant_res<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn report_unexpected_variant_res<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                                  res: Res,\n                                                  span: Span,\n                                                  qpath: &QPath) {\n@@ -5700,7 +5700,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn check_bounds_are_used<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                        generics: &ty::Generics,\n                                        ty: Ty<'tcx>) {\n     let own_counts = generics.own_counts();"}, {"sha": "34d6892c18f5743c62faef9c8655b5e88989aa07", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -68,7 +68,7 @@ impl<'gcx, 'tcx> CheckWfFcxBuilder<'gcx, 'tcx> {\n /// We do this check as a pre-pass before checking fn bodies because if these constraints are\n /// not included it frequently leads to confusing errors in fn bodies. So it's better to check\n /// the types first.\n-pub fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+pub fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let item = tcx.hir().expect_item_by_hir_id(hir_id);\n \n@@ -156,7 +156,7 @@ pub fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: D\n     }\n }\n \n-pub fn check_trait_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+pub fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let trait_item = tcx.hir().expect_trait_item(hir_id);\n \n@@ -167,7 +167,7 @@ pub fn check_trait_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n }\n \n-pub fn check_impl_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+pub fn check_impl_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let impl_item = tcx.hir().expect_impl_item(hir_id);\n \n@@ -178,7 +178,7 @@ pub fn check_impl_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     check_associated_item(tcx, impl_item.hir_id, impl_item.span, method_sig);\n }\n \n-fn check_associated_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_associated_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                    item_id: hir::HirId,\n                                    span: Span,\n                                    sig_if_method: Option<&hir::MethodSig>) {\n@@ -242,7 +242,7 @@ fn for_id<'gcx: 'tcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx, 'gcx>, id: hir::HirId, span:\n }\n \n /// In a type definition, we check that to ensure that the types of the fields are well-formed.\n-fn check_type_defn<'a, 'tcx, F>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_type_defn<'tcx, F>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                 item: &hir::Item, all_sized: bool, mut lookup_fields: F)\n     where F: for<'fcx, 'gcx, 'tcx2> FnMut(&FnCtxt<'fcx, 'gcx, 'tcx2>) -> Vec<AdtVariant<'tcx2>>\n {\n@@ -312,7 +312,7 @@ fn check_type_defn<'a, 'tcx, F>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     });\n }\n \n-fn check_trait<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item: &hir::Item) {\n+fn check_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item: &hir::Item) {\n     debug!(\"check_trait: {:?}\", item.hir_id);\n \n     let trait_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n@@ -335,7 +335,7 @@ fn check_trait<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item: &hir::Item) {\n     });\n }\n \n-fn check_item_fn<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item: &hir::Item) {\n+fn check_item_fn<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item: &hir::Item) {\n     for_item(tcx, item).with_fcx(|fcx, tcx| {\n         let def_id = fcx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         let sig = fcx.tcx.fn_sig(def_id);\n@@ -347,7 +347,7 @@ fn check_item_fn<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item: &hir::Item) {\n     })\n }\n \n-fn check_item_type<'a, 'tcx>(\n+fn check_item_type<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     item_id: hir::HirId,\n     ty_span: Span,\n@@ -380,7 +380,7 @@ fn check_item_type<'a, 'tcx>(\n     });\n }\n \n-fn check_impl<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                         item: &hir::Item,\n                         ast_self_ty: &hir::Ty,\n                         ast_trait_ref: &Option<hir::TraitRef>)\n@@ -421,7 +421,7 @@ fn check_impl<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n /// Checks where-clauses and inline bounds that are declared on `def_id`.\n-fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n+fn check_where_clauses<'gcx, 'fcx, 'tcx>(\n     tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n     fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n     span: Span,\n@@ -574,7 +574,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n     }\n }\n \n-fn check_fn_or_method<'a, 'fcx, 'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+fn check_fn_or_method<'fcx, 'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n                                             fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n                                             span: Span,\n                                             sig: ty::PolyFnSig<'tcx>,\n@@ -616,7 +616,7 @@ fn check_fn_or_method<'a, 'fcx, 'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n /// fn b<T>() -> Foo<T, u32> { .. }\n /// ```\n ///\n-fn check_existential_types<'a, 'fcx, 'gcx, 'tcx>(\n+fn check_existential_types<'fcx, 'gcx, 'tcx>(\n     tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n     fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n     fn_def_id: DefId,\n@@ -930,7 +930,7 @@ fn receiver_is_valid<'fcx, 'tcx, 'gcx>(\n     true\n }\n \n-fn check_variances_for_type_defn<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_variances_for_type_defn<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                            item: &hir::Item,\n                                            hir_generics: &hir::Generics)\n {\n@@ -971,7 +971,7 @@ fn check_variances_for_type_defn<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn report_bivariance<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn report_bivariance<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                span: Span,\n                                param_name: ast::Name)\n {\n@@ -1133,7 +1133,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-fn error_392<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, span: Span, param_name: ast::Name)\n+fn error_392<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, span: Span, param_name: ast::Name)\n                        -> DiagnosticBuilder<'tcx> {\n     let mut err = struct_span_err!(tcx.sess, span, E0392,\n                   \"parameter `{}` is never used\", param_name);"}, {"sha": "bb587da9314f8ae746314775f1ac6236c4869013", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -13,7 +13,7 @@ use rustc::util::nodemap::DefIdSet;\n \n use rustc_data_structures::fx::FxHashMap;\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     let mut used_trait_imports = DefIdSet::default();\n     for &body_id in tcx.hir().krate().bodies.keys() {\n         let item_def_id = tcx.hir().body_owner_def_id(body_id);"}, {"sha": "497392e7661f4b85af7d77714bab2e9d782480f8", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::def_id::DefId;\n use hir::Node;\n use rustc::hir::{self, ItemKind};\n \n-pub fn check_trait<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, trait_def_id: DefId) {\n+pub fn check_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, trait_def_id: DefId) {\n     Checker { tcx, trait_def_id }\n         .check(tcx.lang_items().drop_trait(), visit_implementation_of_drop)\n         .check(tcx.lang_items().copy_trait(), visit_implementation_of_copy)\n@@ -45,7 +45,7 @@ impl<'tcx> Checker<'tcx> {\n     }\n }\n \n-fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_drop<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_did: DefId) {\n     if let ty::Adt(..) = tcx.type_of(impl_did).sty {\n         /* do nothing */\n     } else {\n@@ -73,7 +73,7 @@ fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_di\n     }\n }\n \n-fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_copy<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_copy: impl_did={:?}\", impl_did);\n \n     let impl_hir_id = if let Some(n) = tcx.hir().as_local_hir_id(impl_did) {\n@@ -153,7 +153,7 @@ fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_di\n     }\n }\n \n-fn visit_implementation_of_dispatch_from_dyn<'a, 'tcx>(\n+fn visit_implementation_of_dispatch_from_dyn<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     impl_did: DefId,\n ) {\n@@ -324,7 +324,7 @@ fn visit_implementation_of_dispatch_from_dyn<'a, 'tcx>(\n     }\n }\n \n-pub fn coerce_unsized_info<'a, 'gcx>(gcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+pub fn coerce_unsized_info<'gcx>(gcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n                                      impl_did: DefId)\n                                      -> CoerceUnsizedInfo {\n     debug!(\"compute_coerce_unsized_info(impl_did={:?})\", impl_did);"}, {"sha": "edef3897261122821e7c92445d48722af42384fe", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -17,7 +17,7 @@ use syntax::ast;\n use syntax_pos::Span;\n \n /// On-demand query: yields a map containing all types mapped to their inherent impls.\n-pub fn crate_inherent_impls<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn crate_inherent_impls<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                       crate_num: CrateNum)\n                                       -> &'tcx CrateInherentImpls {\n     assert_eq!(crate_num, LOCAL_CRATE);\n@@ -32,7 +32,7 @@ pub fn crate_inherent_impls<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n /// On-demand query: yields a vector of the inherent impls for a specific type.\n-pub fn inherent_impls<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn inherent_impls<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                 ty_def_id: DefId)\n                                 -> &'tcx [DefId] {\n     assert!(ty_def_id.is_local());"}, {"sha": "e1b8169e0c90c7d60f1e17dda234c7e75164dd11", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::traits::{self, IntercrateMode};\n use rustc::ty::TyCtxt;\n \n-pub fn crate_inherent_impls_overlap_check<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn crate_inherent_impls_overlap_check<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                     crate_num: CrateNum) {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let krate = tcx.hir().krate();"}, {"sha": "3ec88cbbd29ddaf477ad8161e5540e6c715b10c4", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -18,7 +18,7 @@ mod inherent_impls_overlap;\n mod orphan;\n mod unsafety;\n \n-fn check_impl<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_id: HirId) {\n+fn check_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_id: HirId) {\n     let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n \n     // If there are no traits, then this implementation must have a\n@@ -132,7 +132,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+fn coherent_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     let impls = tcx.hir().trait_impls(def_id);\n     for &impl_id in impls {\n         check_impl(tcx, impl_id);\n@@ -143,7 +143,7 @@ fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     builtin::check_trait(tcx, def_id);\n }\n \n-pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check_coherence<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     for &trait_def_id in tcx.hir().krate().trait_impls.keys() {\n         tcx.ensure().coherent_trait(trait_def_id);\n     }\n@@ -159,7 +159,7 @@ pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n /// Overlap: no two impls for the same trait are implemented for the\n /// same type. Likewise, no two inherent impls for a given type\n /// constructor provide a method with the same name.\n-fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_id: HirId) {\n+fn check_impl_overlap<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_id: HirId) {\n     let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n     let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n     let trait_def_id = trait_ref.def_id;"}, {"sha": "a9307f2669553c614471850557b04d21c10c145e", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n-pub fn check<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     let mut orphan = OrphanChecker { tcx };\n     tcx.hir().krate().visit_all_item_likes(&mut orphan);\n }"}, {"sha": "b5369a8777d220374f6ae95949948f06a4523690", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -5,7 +5,7 @@ use rustc::ty::TyCtxt;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, Unsafety};\n \n-pub fn check<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     let mut unsafety = UnsafetyChecker { tcx };\n     tcx.hir().krate().visit_all_item_likes(&mut unsafety);\n }"}, {"sha": "b012468f50966bf59b629889b3e218c5d3fe86ee", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -253,7 +253,7 @@ impl AstConv<'tcx, 'tcx> for ItemCtxt<'tcx> {\n     }\n }\n \n-fn type_param_predicates<'a, 'tcx>(\n+fn type_param_predicates<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     (item_def_id, def_id): (DefId, DefId),\n ) -> &'tcx ty::GenericPredicates<'tcx> {\n@@ -381,7 +381,7 @@ impl ItemCtxt<'tcx> {\n /// parameter with ID `param_id`. We use this so as to avoid running\n /// `ast_ty_to_ty`, because we want to avoid triggering an all-out\n /// conversion of the type to avoid inducing unnecessary cycles.\n-fn is_param<'a, 'tcx>(\n+fn is_param<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     ast_ty: &hir::Ty,\n     param_id: hir::HirId,\n@@ -398,7 +398,7 @@ fn is_param<'a, 'tcx>(\n     }\n }\n \n-fn convert_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item_id: hir::HirId) {\n+fn convert_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item_id: hir::HirId) {\n     let it = tcx.hir().expect_item_by_hir_id(item_id);\n     debug!(\"convert: item {} with id {}\", it.ident, it.hir_id);\n     let def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n@@ -480,7 +480,7 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item_id: hir::HirId) {\n     }\n }\n \n-fn convert_trait_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, trait_item_id: hir::HirId) {\n+fn convert_trait_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, trait_item_id: hir::HirId) {\n     let trait_item = tcx.hir().expect_trait_item(trait_item_id);\n     let def_id = tcx.hir().local_def_id_from_hir_id(trait_item.hir_id);\n     tcx.generics_of(def_id);\n@@ -501,7 +501,7 @@ fn convert_trait_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, trait_item_id: hi\n     tcx.predicates_of(def_id);\n }\n \n-fn convert_impl_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_item_id: hir::HirId) {\n+fn convert_impl_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_item_id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(impl_item_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n@@ -511,14 +511,14 @@ fn convert_impl_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_item_id: hir:\n     }\n }\n \n-fn convert_variant_ctor<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ctor_id: hir::HirId) {\n+fn convert_variant_ctor<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ctor_id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(ctor_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n     tcx.predicates_of(def_id);\n }\n \n-fn convert_enum_variant_types<'a, 'tcx>(\n+fn convert_enum_variant_types<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n     variants: &[hir::Variant],\n@@ -570,7 +570,7 @@ fn convert_enum_variant_types<'a, 'tcx>(\n     }\n }\n \n-fn convert_variant<'a, 'tcx>(\n+fn convert_variant<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     variant_did: Option<DefId>,\n     ctor_did: Option<DefId>,\n@@ -627,7 +627,7 @@ fn convert_variant<'a, 'tcx>(\n     )\n }\n \n-fn adt_def<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::AdtDef {\n+fn adt_def<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::AdtDef {\n     use rustc::hir::*;\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -694,7 +694,7 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::\n /// Ensures that the super-predicates of the trait with a `DefId`\n /// of `trait_def_id` are converted and stored. This also ensures that\n /// the transitive super-predicates are converted.\n-fn super_predicates_of<'a, 'tcx>(\n+fn super_predicates_of<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     trait_def_id: DefId,\n ) -> &'tcx ty::GenericPredicates<'tcx> {\n@@ -748,7 +748,7 @@ fn super_predicates_of<'a, 'tcx>(\n     })\n }\n \n-fn trait_def<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::TraitDef {\n+fn trait_def<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::TraitDef {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let item = tcx.hir().expect_item_by_hir_id(hir_id);\n \n@@ -779,7 +779,7 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n     tcx.arena.alloc(def)\n }\n \n-fn has_late_bound_regions<'a, 'tcx>(\n+fn has_late_bound_regions<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     node: Node<'tcx>,\n ) -> Option<Span> {\n@@ -840,7 +840,7 @@ fn has_late_bound_regions<'a, 'tcx>(\n         }\n     }\n \n-    fn has_late_bound_regions<'a, 'tcx>(\n+    fn has_late_bound_regions<'tcx>(\n         tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n         generics: &'tcx hir::Generics,\n         decl: &'tcx hir::FnDecl,\n@@ -890,7 +890,7 @@ fn has_late_bound_regions<'a, 'tcx>(\n     }\n }\n \n-fn generics_of<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Generics {\n+fn generics_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Generics {\n     use rustc::hir::*;\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -1133,7 +1133,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     })\n }\n \n-fn report_assoc_ty_on_inherent_impl<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, span: Span) {\n+fn report_assoc_ty_on_inherent_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, span: Span) {\n     span_err!(\n         tcx.sess,\n         span,\n@@ -1142,15 +1142,15 @@ fn report_assoc_ty_on_inherent_impl<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, spa\n     );\n }\n \n-fn type_of<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n+fn type_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     checked_type_of(tcx, def_id, true).unwrap()\n }\n \n /// Same as [`type_of`] but returns [`Option`] instead of failing.\n ///\n /// If you want to fail anyway, you can set the `fail` parameter to true, but in this case,\n /// you'd better just call [`type_of`] directly.\n-pub fn checked_type_of<'a, 'tcx>(\n+pub fn checked_type_of<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n     fail: bool,\n@@ -1479,7 +1479,7 @@ pub fn checked_type_of<'a, 'tcx>(\n     })\n }\n \n-fn find_existential_constraints<'a, 'tcx>(\n+fn find_existential_constraints<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Ty<'tcx> {\n@@ -1700,7 +1700,7 @@ fn find_existential_constraints<'a, 'tcx>(\n     }\n }\n \n-fn fn_sig<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n+fn fn_sig<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n     use rustc::hir::*;\n     use rustc::hir::Node::*;\n \n@@ -1776,7 +1776,7 @@ fn fn_sig<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> ty::PolyFnS\n     }\n }\n \n-fn impl_trait_ref<'a, 'tcx>(\n+fn impl_trait_ref<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Option<ty::TraitRef<'tcx>> {\n@@ -1794,7 +1794,7 @@ fn impl_trait_ref<'a, 'tcx>(\n     }\n }\n \n-fn impl_polarity<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> hir::ImplPolarity {\n+fn impl_polarity<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> hir::ImplPolarity {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     match tcx.hir().expect_item_by_hir_id(hir_id).node {\n         hir::ItemKind::Impl(_, polarity, ..) => polarity,\n@@ -1825,7 +1825,7 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx: 'a>(\n /// Returns a list of type predicates for the definition with ID `def_id`, including inferred\n /// lifetime constraints. This includes all predicates returned by `explicit_predicates_of`, plus\n /// inferred constraints concerning which regions outlive other regions.\n-fn predicates_defined_on<'a, 'tcx>(\n+fn predicates_defined_on<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> &'tcx ty::GenericPredicates<'tcx> {\n@@ -1855,7 +1855,7 @@ fn predicates_defined_on<'a, 'tcx>(\n /// Returns a list of all type predicates (explicit and implicit) for the definition with\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits.\n-fn predicates_of<'a, 'tcx>(\n+fn predicates_of<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> &'tcx ty::GenericPredicates<'tcx> {\n@@ -1885,7 +1885,7 @@ fn predicates_of<'a, 'tcx>(\n \n /// Returns a list of user-specified type predicates for the definition with ID `def_id`.\n /// N.B., this does not include any implied/inferred constraints.\n-fn explicit_predicates_of<'a, 'tcx>(\n+fn explicit_predicates_of<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> &'tcx ty::GenericPredicates<'tcx> {\n@@ -2248,7 +2248,7 @@ fn predicates_from_bound<'tcx>(\n     }\n }\n \n-fn compute_sig_of_foreign_fn_decl<'a, 'tcx>(\n+fn compute_sig_of_foreign_fn_decl<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n     decl: &hir::FnDecl,\n@@ -2293,15 +2293,15 @@ fn compute_sig_of_foreign_fn_decl<'a, 'tcx>(\n     fty\n }\n \n-fn is_foreign_item<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+fn is_foreign_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n     match tcx.hir().get_if_local(def_id) {\n         Some(Node::ForeignItem(..)) => true,\n         Some(_) => false,\n         _ => bug!(\"is_foreign_item applied to non-local def-id {:?}\", def_id),\n     }\n }\n \n-fn static_mutability<'a, 'tcx>(\n+fn static_mutability<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Option<hir::Mutability> {\n@@ -2412,7 +2412,7 @@ fn from_target_feature(\n     }\n }\n \n-fn linkage_by_name<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId, name: &str) -> Linkage {\n+fn linkage_by_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId, name: &str) -> Linkage {\n     use rustc::mir::mono::Linkage::*;\n \n     // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n@@ -2447,7 +2447,7 @@ fn linkage_by_name<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId, name:\n     }\n }\n \n-fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, id: DefId) -> CodegenFnAttrs {\n+fn codegen_fn_attrs<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, id: DefId) -> CodegenFnAttrs {\n     let attrs = tcx.get_attrs(id);\n \n     let mut codegen_fn_attrs = CodegenFnAttrs::new();"}, {"sha": "834e939f40f771dfa66e05ce2a54f1d85becb1a1", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -49,7 +49,7 @@ use syntax_pos::Span;\n /// impl<'a> Trait<Foo> for Bar { type X = &'a i32; }\n /// //   ^ 'a is unused and appears in assoc type, error\n /// ```\n-pub fn impl_wf_check<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn impl_wf_check<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     // We will tag this as part of the WF check -- logically, it is,\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n@@ -92,7 +92,7 @@ impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n     fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem) { }\n }\n \n-fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn enforce_impl_params_are_constrained<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                                  impl_def_id: DefId,\n                                                  impl_item_refs: &[hir::ImplItemRef])\n {\n@@ -186,7 +186,7 @@ fn report_unused_parameter(tcx: TyCtxt<'_, '_, '_>,\n }\n \n /// Enforce that we do not have two items in an impl with the same name.\n-fn enforce_impl_items_are_distinct<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn enforce_impl_items_are_distinct<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                              impl_item_refs: &[hir::ImplItemRef])\n {\n     let mut seen_type_items = FxHashMap::default();"}, {"sha": "74ff8ad0f17538ae33b99dea01ed8f77ebc62628", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -124,7 +124,7 @@ pub struct TypeAndSubsts<'tcx> {\n     ty: Ty<'tcx>,\n }\n \n-fn check_type_alias_enum_variants_enabled<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn check_type_alias_enum_variants_enabled<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n                                                           span: Span) {\n     if !tcx.features().type_alias_enum_variants {\n         let mut err = tcx.sess.struct_span_err(\n@@ -151,7 +151,7 @@ fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_, '_, '_>,\n     }\n }\n \n-fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn require_same_types<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                 cause: &ObligationCause<'tcx>,\n                                 expected: Ty<'tcx>,\n                                 actual: Ty<'tcx>)\n@@ -179,7 +179,7 @@ fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     })\n }\n \n-fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, main_def_id: DefId) {\n+fn check_main_fn_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, main_def_id: DefId) {\n     let main_id = tcx.hir().as_local_hir_id(main_def_id).unwrap();\n     let main_span = tcx.def_span(main_def_id);\n     let main_t = tcx.type_of(main_def_id);\n@@ -244,7 +244,7 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, main_def_id: DefId)\n     }\n }\n \n-fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, start_def_id: DefId) {\n+fn check_start_fn_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, start_def_id: DefId) {\n     let start_id = tcx.hir().as_local_hir_id(start_def_id).unwrap();\n     let start_span = tcx.def_span(start_def_id);\n     let start_t = tcx.type_of(start_def_id);\n@@ -301,7 +301,7 @@ fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, start_def_id: DefI\n     }\n }\n \n-fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+fn check_for_entry_fn<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     match tcx.entry_fn(LOCAL_CRATE) {\n         Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id),\n         Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id),\n@@ -318,7 +318,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     impl_wf_check::provide(providers);\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n                              -> Result<(), ErrorReported>\n {\n     tcx.sess.profiler(|p| p.start_activity(\"type-check crate\"));\n@@ -381,7 +381,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n \n /// A quasi-deprecated helper used in rustdoc and clippy to get\n /// the type from a HIR node.\n-pub fn hir_ty_to_ty<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_ty: &hir::Ty) -> Ty<'tcx> {\n+pub fn hir_ty_to_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_ty: &hir::Ty) -> Ty<'tcx> {\n     // In case there are any projections, etc., find the \"environment\"\n     // def-ID that will be used to determine the traits/predicates in\n     // scope.  This is derived from the enclosing item-like thing.\n@@ -392,7 +392,7 @@ pub fn hir_ty_to_ty<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_ty: &hir::Ty) -\n     astconv::AstConv::ast_ty_to_ty(&item_cx, hir_ty)\n }\n \n-pub fn hir_trait_to_predicates<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_trait: &hir::TraitRef)\n+pub fn hir_trait_to_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_trait: &hir::TraitRef)\n         -> (ty::PolyTraitRef<'tcx>, Bounds<'tcx>) {\n     // In case there are any projections, etc., find the \"environment\"\n     // def-ID that will be used to determine the traits/predicates in"}, {"sha": "3966a7c1776a10d54a2e637f737021f773e3fca6", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -20,7 +20,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn inferred_outlives_of<'a, 'tcx>(\n+fn inferred_outlives_of<'tcx>(\n     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     item_def_id: DefId,\n ) -> &'tcx [ty::Predicate<'tcx>] {"}, {"sha": "2b0ab9069368550821ee2a489fbf509c1651e599", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n use syntax::symbol::sym;\n \n-pub fn test_inferred_outlives<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn test_inferred_outlives<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     tcx.hir()\n        .krate()\n        .visit_all_item_likes(&mut OutlivesTest { tcx });"}, {"sha": "a9d12a0b291b4a8d80366e30a3b80a6422012624", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -34,7 +34,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn crate_variances<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, crate_num: CrateNum)\n+fn crate_variances<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, crate_num: CrateNum)\n                              -> &'tcx CrateVariancesMap<'tcx> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let mut arena = arena::TypedArena::default();\n@@ -43,7 +43,7 @@ fn crate_variances<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, crate_num: CrateNum)\n     tcx.arena.alloc(solve::solve_constraints(constraints_cx))\n }\n \n-fn variances_of<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item_def_id: DefId)\n+fn variances_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item_def_id: DefId)\n                           -> &'tcx [ty::Variance] {\n     let id = tcx.hir().as_local_hir_id(item_def_id).expect(\"expected local def-id\");\n     let unsupported = || {"}, {"sha": "0ff86f5a8cfde511603cf84d18133f99470769ed", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n use syntax::symbol::sym;\n \n-pub fn test_variance<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn test_variance<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     tcx.hir().krate().visit_all_item_likes(&mut VarianceTest { tcx });\n }\n "}, {"sha": "2bf80198381da622cdb6a086636fb4912758d51d", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244125350880ca2f905928cae4115867eedd301a/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=244125350880ca2f905928cae4115867eedd301a", "patch": "@@ -313,7 +313,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         lifetime_predicates\n     }\n \n-    fn extract_for_generics<'b, 'c, 'd>(\n+    fn extract_for_generics<'c, 'd>(\n         &self,\n         tcx: TyCtxt<'d, 'c, 'd>,\n         pred: ty::Predicate<'d>,\n@@ -448,7 +448,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // * Fn bounds are handled specially - instead of leaving it as 'T: Fn(), <T as Fn::Output> =\n     // K', we use the dedicated syntax 'T: Fn() -> K'\n     // * We explcitly add a '?Sized' bound if we didn't find any 'Sized' predicates for a type\n-    fn param_env_to_generics<'b, 'c, 'cx>(\n+    fn param_env_to_generics<'c, 'cx>(\n         &self,\n         tcx: TyCtxt<'cx, 'c, 'cx>,\n         param_env_def_id: DefId,"}]}