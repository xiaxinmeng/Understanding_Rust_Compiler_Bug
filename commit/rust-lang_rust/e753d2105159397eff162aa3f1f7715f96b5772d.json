{"sha": "e753d2105159397eff162aa3f1f7715f96b5772d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NTNkMjEwNTE1OTM5N2VmZjE2MmFhM2YxZjc3MTVmOTZiNTc3MmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-04T10:23:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-04T10:23:34Z"}, "message": "miri: accept extern types in structs if they are the only field", "tree": {"sha": "ea9e25100dd93fc13f2065472731929298ffc038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea9e25100dd93fc13f2065472731929298ffc038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e753d2105159397eff162aa3f1f7715f96b5772d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e753d2105159397eff162aa3f1f7715f96b5772d", "html_url": "https://github.com/rust-lang/rust/commit/e753d2105159397eff162aa3f1f7715f96b5772d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e753d2105159397eff162aa3f1f7715f96b5772d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d69fe7a2fa31108ee7d23515cec7dd151d08331", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d69fe7a2fa31108ee7d23515cec7dd151d08331", "html_url": "https://github.com/rust-lang/rust/commit/6d69fe7a2fa31108ee7d23515cec7dd151d08331"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "48a8d0bbe56d645b67d4de12786716f8dbdcf43a", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e753d2105159397eff162aa3f1f7715f96b5772d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e753d2105159397eff162aa3f1f7715f96b5772d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=e753d2105159397eff162aa3f1f7715f96b5772d", "patch": "@@ -371,8 +371,19 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                 // the last field).  Can't have foreign types here, how would we\n                 // adjust alignment and size for them?\n                 let field = layout.field(self, layout.fields.count() - 1)?;\n-                let (unsized_size, unsized_align) = self.size_and_align_of(metadata, field)?\n-                    .expect(\"Fields cannot be extern types\");\n+                let (unsized_size, unsized_align) = match self.size_and_align_of(metadata, field)? {\n+                    Some(size_and_align) => size_and_align,\n+                    None => {\n+                        // A field with extern type.  If this is the only field,\n+                        // we treat this struct just the same.  Else, this is an error\n+                        // (for now).\n+                        if layout.fields.count() == 1 {\n+                            return Ok(None)\n+                        } else {\n+                            bug!(\"Fields cannot be extern types, unless they are the only field\")\n+                        }\n+                    }\n+                };\n \n                 // FIXME (#26403, #27023): We should be adding padding\n                 // to `sized_size` (to accommodate the `unsized_align`"}, {"sha": "8bd29aff841cfa1843a4651da289e2e8923b2f56", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e753d2105159397eff162aa3f1f7715f96b5772d/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e753d2105159397eff162aa3f1f7715f96b5772d/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=e753d2105159397eff162aa3f1f7715f96b5772d", "patch": "@@ -354,7 +354,8 @@ where\n         let (meta, offset) = if field_layout.is_unsized() {\n             // re-use parent metadata to determine dynamic field layout\n             let (_, align) = self.size_and_align_of(base.meta, field_layout)?\n-                .expect(\"Fields cannot be extern types\");\n+                // If this is an extern type, we fall back to its static size and alignment.\n+                .unwrap_or_else(|| base.layout.size_and_align());\n             (base.meta, offset.abi_align(align))\n         } else {\n             // base.meta could be present; we might be accessing a sized field of an unsized"}, {"sha": "bf8965e83618239f3b5eb1c332d1c780fda3e83a", "filename": "src/test/ui/consts/const-eval/issue-55541.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e753d2105159397eff162aa3f1f7715f96b5772d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e753d2105159397eff162aa3f1f7715f96b5772d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs?ref=e753d2105159397eff162aa3f1f7715f96b5772d", "patch": "@@ -0,0 +1,21 @@\n+// compile-pass\n+\n+// Test that we can handle newtypes wrapping extern types\n+\n+#![feature(extern_types, const_transmute)]\n+\n+extern \"C\" {\n+  pub type ExternType;\n+}\n+unsafe impl Sync for ExternType {}\n+\n+#[repr(transparent)]\n+pub struct Wrapper(ExternType);\n+\n+static MAGIC_FFI_STATIC: u8 = 42;\n+\n+pub static MAGIC_FFI_REF: &'static Wrapper = unsafe {\n+  std::mem::transmute(&MAGIC_FFI_STATIC)\n+};\n+\n+fn main() {}"}]}