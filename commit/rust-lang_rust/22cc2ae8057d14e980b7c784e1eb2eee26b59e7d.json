{"sha": "22cc2ae8057d14e980b7c784e1eb2eee26b59e7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyY2MyYWU4MDU3ZDE0ZTk4MGI3Yzc4NGUxZWIyZWVlMjZiNTllN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-20T15:02:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-20T15:02:26Z"}, "message": "Auto merge of #55119 - varkor:unwarned-match-on-never, r=nikomatsakis\n\nAllow explicit matches on ! without warning\n\nIt's now possible to explicitly match on `!` without an unreachable code warning. This seems desirable as promoting explicitness.\n\nFixes https://github.com/rust-lang/rust/issues/55116.", "tree": {"sha": "4ff90fbd9a966c13c6649d0d983f285b5f2d4101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ff90fbd9a966c13c6649d0d983f285b5f2d4101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d", "html_url": "https://github.com/rust-lang/rust/commit/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca2639e82ec4a18d7359efbfb555ea69dd644c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2639e82ec4a18d7359efbfb555ea69dd644c97", "html_url": "https://github.com/rust-lang/rust/commit/ca2639e82ec4a18d7359efbfb555ea69dd644c97"}, {"sha": "26346467c52e34c730f3e924be7d635d69b4f737", "url": "https://api.github.com/repos/rust-lang/rust/commits/26346467c52e34c730f3e924be7d635d69b4f737", "html_url": "https://github.com/rust-lang/rust/commit/26346467c52e34c730f3e924be7d635d69b4f737"}], "stats": {"total": 118, "additions": 64, "deletions": 54}, "files": [{"sha": "4f155995cd3d2dc01b66e7806c49ca7dd6eba1ce", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=22cc2ae8057d14e980b7c784e1eb2eee26b59e7d", "patch": "@@ -608,19 +608,20 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             self.check_expr_has_type_or_error(discrim, discrim_ty);\n         };\n \n-        // If the discriminant diverges, the match is pointless (e.g.,\n-        // `match (return) { }`).\n-        self.warn_if_unreachable(expr.id, expr.span, \"expression\");\n-\n         // If there are no arms, that is a diverging match; a special case.\n         if arms.is_empty() {\n             self.diverges.set(self.diverges.get() | Diverges::Always);\n             return tcx.types.never;\n         }\n \n+        if self.diverges.get().always() {\n+            for arm in arms {\n+                self.warn_if_unreachable(arm.body.id, arm.body.span, \"arm\");\n+            }\n+        }\n+\n         // Otherwise, we have to union together the types that the\n         // arms produce and so forth.\n-\n         let discrim_diverges = self.diverges.get();\n         self.diverges.set(Diverges::Maybe);\n "}, {"sha": "aae0f3135d8f5a2505b391ada3c8c8bb0deb4d63", "filename": "src/test/ui/match/match-unreachable-warning-with-diverging-discrim.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Ftest%2Fui%2Fmatch%2Fmatch-unreachable-warning-with-diverging-discrim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Ftest%2Fui%2Fmatch%2Fmatch-unreachable-warning-with-diverging-discrim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-unreachable-warning-with-diverging-discrim.rs?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(unused_parens)]\n-#![deny(unreachable_code)]\n-\n-fn main() {\n-    match (return) { } //~ ERROR unreachable expression\n-}"}, {"sha": "10a86f92fe1511df4a3a9bc3c71300764b73f987", "filename": "src/test/ui/match/match-unreachable-warning-with-diverging-discrim.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Ftest%2Fui%2Fmatch%2Fmatch-unreachable-warning-with-diverging-discrim.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca2639e82ec4a18d7359efbfb555ea69dd644c97/src%2Ftest%2Fui%2Fmatch%2Fmatch-unreachable-warning-with-diverging-discrim.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-unreachable-warning-with-diverging-discrim.stderr?ref=ca2639e82ec4a18d7359efbfb555ea69dd644c97", "patch": "@@ -1,14 +0,0 @@\n-error: unreachable expression\n-  --> $DIR/match-unreachable-warning-with-diverging-discrim.rs:15:5\n-   |\n-LL |     match (return) { } //~ ERROR unreachable expression\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/match-unreachable-warning-with-diverging-discrim.rs:12:9\n-   |\n-LL | #![deny(unreachable_code)]\n-   |         ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "73f2612980514afc943304f114d6ba33f16bf9b2", "filename": "src/test/ui/reachable/expr_match.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d/src%2Ftest%2Fui%2Freachable%2Fexpr_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d/src%2Ftest%2Fui%2Freachable%2Fexpr_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.rs?ref=22cc2ae8057d14e980b7c784e1eb2eee26b59e7d", "patch": "@@ -13,12 +13,6 @@\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n \n-fn a() {\n-    // The match is considered unreachable here, because the `return`\n-    // diverges:\n-    match {return} { } //~ ERROR unreachable\n-}\n-\n fn b() {\n     match () { () => return }\n     println!(\"I am dead\");"}, {"sha": "fe1a0c4ea11e3381a0859c0ff8539102eb01c58a", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=22cc2ae8057d14e980b7c784e1eb2eee26b59e7d", "patch": "@@ -1,30 +1,23 @@\n-error: unreachable expression\n-  --> $DIR/expr_match.rs:19:5\n+error: unreachable statement\n+  --> $DIR/expr_match.rs:18:5\n    |\n-LL |     match {return} { } //~ ERROR unreachable\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     println!(\"I am dead\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/expr_match.rs:14:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-\n-error: unreachable statement\n-  --> $DIR/expr_match.rs:24:5\n-   |\n-LL |     println!(\"I am dead\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_match.rs:35:5\n+  --> $DIR/expr_match.rs:29:5\n    |\n LL |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "71f8fe3a783e2247ba69b35d8fea2865f6e588ec", "filename": "src/test/ui/unreachable/unwarned-match-on-never.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d/src%2Ftest%2Fui%2Funreachable%2Funwarned-match-on-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d/src%2Ftest%2Fui%2Funreachable%2Funwarned-match-on-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funwarned-match-on-never.rs?ref=22cc2ae8057d14e980b7c784e1eb2eee26b59e7d", "patch": "@@ -0,0 +1,24 @@\n+#![deny(unreachable_code)]\n+#![allow(dead_code)]\n+\n+#![feature(never_type)]\n+\n+fn foo(x: !) -> bool {\n+    // Explicit matches on the never type are unwarned.\n+    match x {}\n+    // But matches in unreachable code are warned.\n+    match x {} //~ ERROR unreachable expression\n+}\n+\n+fn bar() {\n+    match (return) {\n+        () => () //~ ERROR unreachable arm\n+    }\n+}\n+\n+fn main() {\n+    return;\n+    match () { //~ ERROR unreachable expression\n+        () => (),\n+    }\n+}"}, {"sha": "8807e5f04e5858bb6a3f4a7f81e4ba03a041af05", "filename": "src/test/ui/unreachable/unwarned-match-on-never.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d/src%2Ftest%2Fui%2Funreachable%2Funwarned-match-on-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22cc2ae8057d14e980b7c784e1eb2eee26b59e7d/src%2Ftest%2Fui%2Funreachable%2Funwarned-match-on-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funwarned-match-on-never.stderr?ref=22cc2ae8057d14e980b7c784e1eb2eee26b59e7d", "patch": "@@ -0,0 +1,28 @@\n+error: unreachable expression\n+  --> $DIR/unwarned-match-on-never.rs:10:5\n+   |\n+LL |     match x {} //~ ERROR unreachable expression\n+   |     ^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/unwarned-match-on-never.rs:1:9\n+   |\n+LL | #![deny(unreachable_code)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: unreachable arm\n+  --> $DIR/unwarned-match-on-never.rs:15:15\n+   |\n+LL |         () => () //~ ERROR unreachable arm\n+   |               ^^\n+\n+error: unreachable expression\n+  --> $DIR/unwarned-match-on-never.rs:21:5\n+   |\n+LL | /     match () { //~ ERROR unreachable expression\n+LL | |         () => (),\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 3 previous errors\n+"}]}