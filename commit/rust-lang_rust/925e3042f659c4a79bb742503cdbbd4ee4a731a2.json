{"sha": "925e3042f659c4a79bb742503cdbbd4ee4a731a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNWUzMDQyZjY1OWM0YTc5YmI3NDI1MDNjZGJiZDRlZTRhNzMxYTI=", "commit": {"author": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-10-18T22:57:48Z"}, "committer": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-10-19T20:16:52Z"}, "message": "Fix resolve_type_vars_with_obligations not resolving const inference\nvariables.", "tree": {"sha": "d609bdcc450b8ee24b84b71b360804c6a2fab86b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d609bdcc450b8ee24b84b71b360804c6a2fab86b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/925e3042f659c4a79bb742503cdbbd4ee4a731a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/925e3042f659c4a79bb742503cdbbd4ee4a731a2", "html_url": "https://github.com/rust-lang/rust/commit/925e3042f659c4a79bb742503cdbbd4ee4a731a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/925e3042f659c4a79bb742503cdbbd4ee4a731a2/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c49187530d1e5599101ff74bcf3f82888e768def", "url": "https://api.github.com/repos/rust-lang/rust/commits/c49187530d1e5599101ff74bcf3f82888e768def", "html_url": "https://github.com/rust-lang/rust/commit/c49187530d1e5599101ff74bcf3f82888e768def"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "7c3a338366c9af3f3edf3ab291006e33411875b3", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/925e3042f659c4a79bb742503cdbbd4ee4a731a2/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925e3042f659c4a79bb742503cdbbd4ee4a731a2/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=925e3042f659c4a79bb742503cdbbd4ee4a731a2", "patch": "@@ -1,7 +1,7 @@\n use super::{InferCtxt, FixupError, FixupResult, Span};\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::mir::interpret::ConstValue;\n-use crate::ty::{self, Ty, Const, TyCtxt, TypeFoldable, InferConst, TypeFlags};\n+use crate::ty::{self, Ty, Const, TyCtxt, TypeFoldable, InferConst};\n use crate::ty::fold::{TypeFolder, TypeVisitor};\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -29,7 +29,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.has_infer_types() {\n+        if !t.has_infer_types() && !t.has_infer_consts() {\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n         } else {\n             let t = self.infcx.shallow_resolve(t);\n@@ -38,7 +38,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: &'tcx Const<'tcx>) -> &'tcx Const<'tcx> {\n-        if !ct.has_type_flags(TypeFlags::HAS_CT_INFER) {\n+        if !ct.has_infer_consts() {\n             ct // micro-optimize -- if there is nothing in this const that this fold affects...\n         } else {\n             let ct = self.infcx.shallow_resolve(ct);"}, {"sha": "a95ed589c3e2a8950442fb0aabebd81105723f01", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/925e3042f659c4a79bb742503cdbbd4ee4a731a2/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925e3042f659c4a79bb742503cdbbd4ee4a731a2/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=925e3042f659c4a79bb742503cdbbd4ee4a731a2", "patch": "@@ -88,6 +88,9 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn has_infer_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_INFER)\n     }\n+    fn has_infer_consts(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_CT_INFER)\n+    }\n     fn has_local_value(&self) -> bool {\n         self.has_type_flags(TypeFlags::KEEP_IN_LOCAL_TCX)\n     }"}, {"sha": "013282848226df8765adb9efc85d925feca68725", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/925e3042f659c4a79bb742503cdbbd4ee4a731a2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925e3042f659c4a79bb742503cdbbd4ee4a731a2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=925e3042f659c4a79bb742503cdbbd4ee4a731a2", "patch": "@@ -2448,14 +2448,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"resolve_type_vars_with_obligations(ty={:?})\", ty);\n \n         // No Infer()? Nothing needs doing.\n-        if !ty.has_infer_types() {\n+        if !ty.has_infer_types() && !ty.has_infer_consts() {\n             debug!(\"resolve_type_vars_with_obligations: ty={:?}\", ty);\n             return ty;\n         }\n \n         // If `ty` is a type variable, see whether we already know what it is.\n         ty = self.resolve_vars_if_possible(&ty);\n-        if !ty.has_infer_types() {\n+        if !ty.has_infer_types() && !ty.has_infer_consts()  {\n             debug!(\"resolve_type_vars_with_obligations: ty={:?}\", ty);\n             return ty;\n         }"}, {"sha": "7090cb880fd497b3c587a5d2519466bbd061426b", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/925e3042f659c4a79bb742503cdbbd4ee4a731a2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/925e3042f659c4a79bb742503cdbbd4ee4a731a2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr?ref=925e3042f659c4a79bb742503cdbbd4ee4a731a2", "patch": "@@ -1,20 +1,20 @@\n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:6:41\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:6:67\n    |\n LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `3usize`, found `2usize`\n+   |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n    |\n-   = note: expected type `const_generic_lib::Struct<3usize>`\n-              found type `const_generic_lib::Struct<_: usize>`\n+   = note: expected type `[u8; 3]`\n+              found type `[u8; 2]`\n \n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:8:39\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:8:65\n    |\n LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2usize`, found `3usize`\n+   |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements\n    |\n-   = note: expected type `const_generic_lib::Struct<2usize>`\n-              found type `const_generic_lib::Struct<_: usize>`\n+   = note: expected type `[u8; 2]`\n+              found type `[u8; 3]`\n \n error: aborting due to 2 previous errors\n "}]}