{"sha": "ee1474acc43fbf657b0fc910c139cf63cef34dc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMTQ3NGFjYzQzZmJmNjU3YjBmYzkxMGMxMzljZjYzY2VmMzRkYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-11T08:48:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-11T08:48:26Z"}, "message": "Auto merge of #58972 - QuietMisdreavus:intra-doc-link-imports, r=GuillaumeGomez\n\nrustdoc: don't process `Crate::external_traits` when collecting intra-doc links\n\nPart of https://github.com/rust-lang/rust/issues/58745, closes https://github.com/rust-lang/rust/pull/58917\n\nThe `collect-intra-doc-links` pass keeps track of the modules it recurses through as it processes items. This is used to know what module to give the resolver when looking up links. When looking through the regular items of the crate, this works fine, but the `DocFolder` trait as written doesn't just process the main crate hierarchy - it also processes the trait items in the `external_traits` map. This is useful for other passes (so they can strip out `#[doc(hidden)]` items, for example), but here it creates a situation where we're processing items \"outside\" the regular module hierarchy. Since everything in `external_traits` is defined outside the current crate, we can't fall back to finding its module scope like we do with local items.\n\nSkipping this collection saves us from emitting some spurious warnings. We don't even lose anything by skipping it, either - the docs loaded from here are only ever rendered through `html::render::document_short` which strips any links out, so the fact that the links haven't been loaded doesn't matter. Hopefully this removes most of the remaining spurious resolution warnings from intra-doc links.\n\nr? @GuillaumeGomez", "tree": {"sha": "fd745ececfc824a079812d67b787133a4e04cad2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd745ececfc824a079812d67b787133a4e04cad2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee1474acc43fbf657b0fc910c139cf63cef34dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1474acc43fbf657b0fc910c139cf63cef34dc8", "html_url": "https://github.com/rust-lang/rust/commit/ee1474acc43fbf657b0fc910c139cf63cef34dc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee1474acc43fbf657b0fc910c139cf63cef34dc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d21bebe18d6851f52ddcc404e875260560599521", "url": "https://api.github.com/repos/rust-lang/rust/commits/d21bebe18d6851f52ddcc404e875260560599521", "html_url": "https://github.com/rust-lang/rust/commit/d21bebe18d6851f52ddcc404e875260560599521"}, {"sha": "49cde404124c8217808c71972f206443f49bffc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/49cde404124c8217808c71972f206443f49bffc7", "html_url": "https://github.com/rust-lang/rust/commit/49cde404124c8217808c71972f206443f49bffc7"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "dbc55b62ef848a5d1dd61e42b3d04a2d341edf5c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee1474acc43fbf657b0fc910c139cf63cef34dc8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1474acc43fbf657b0fc910c139cf63cef34dc8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=ee1474acc43fbf657b0fc910c139cf63cef34dc8", "patch": "@@ -196,6 +196,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 _ => Err(())\n             }\n         } else {\n+            debug!(\"attempting to resolve item without parent module: {}\", path_str);\n             Err(())\n         }\n     }\n@@ -404,6 +405,15 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             self.fold_item_recur(item)\n         }\n     }\n+\n+    // FIXME: if we can resolve intra-doc links from other crates, we can use the stock\n+    // `fold_crate`, but until then we should avoid scanning `krate.external_traits` since those\n+    // will never resolve properly\n+    fn fold_crate(&mut self, mut c: Crate) -> Crate {\n+        c.module = c.module.take().and_then(|module| self.fold_item(module));\n+\n+        c\n+    }\n }\n \n /// Resolves a string as a macro."}, {"sha": "6142dcda986cf0b951a30a664ce56685fa7e8349", "filename": "src/test/rustdoc/auxiliary/intra-links-external-traits.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee1474acc43fbf657b0fc910c139cf63cef34dc8/src%2Ftest%2Frustdoc%2Fauxiliary%2Fintra-links-external-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1474acc43fbf657b0fc910c139cf63cef34dc8/src%2Ftest%2Frustdoc%2Fauxiliary%2Fintra-links-external-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fintra-links-external-traits.rs?ref=ee1474acc43fbf657b0fc910c139cf63cef34dc8", "patch": "@@ -0,0 +1,6 @@\n+pub trait ThisTrait {\n+    fn asdf(&self);\n+\n+    /// let's link to [`asdf`](ThisTrait::asdf)\n+    fn qwop(&self);\n+}"}, {"sha": "d6b4a8ad58ad7d6d85567ac4f2b6a01b2b1159bb", "filename": "src/test/rustdoc/intra-links-external-traits.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee1474acc43fbf657b0fc910c139cf63cef34dc8/src%2Ftest%2Frustdoc%2Fintra-links-external-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1474acc43fbf657b0fc910c139cf63cef34dc8/src%2Ftest%2Frustdoc%2Fintra-links-external-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-links-external-traits.rs?ref=ee1474acc43fbf657b0fc910c139cf63cef34dc8", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:intra-links-external-traits.rs\n+// ignore-cross-compile\n+\n+#![crate_name = \"outer\"]\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+// using a trait that has intra-doc links on it from another crate (whether re-exporting or just\n+// implementing it) used to give spurious resolution failure warnings\n+\n+extern crate intra_links_external_traits;\n+\n+pub use intra_links_external_traits::ThisTrait;"}]}