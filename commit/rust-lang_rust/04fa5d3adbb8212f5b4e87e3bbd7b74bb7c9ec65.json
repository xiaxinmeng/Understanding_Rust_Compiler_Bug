{"sha": "04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZmE1ZDNhZGJiODIxMmY1YjRlODdlM2JiZDdiNzRiYjdjOWVjNjU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-22T00:35:29Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-22T15:07:55Z"}, "message": "Remove Ty prefix from Ty{Foreign|Param}", "tree": {"sha": "ba27d455ed89ba5d5a70a8265cc062fc2c52aae7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba27d455ed89ba5d5a70a8265cc062fc2c52aae7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "html_url": "https://github.com/rust-lang/rust/commit/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f637da50c56a22f745fd056691da8c86824cd9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f637da50c56a22f745fd056691da8c86824cd9b", "html_url": "https://github.com/rust-lang/rust/commit/6f637da50c56a22f745fd056691da8c86824cd9b"}], "stats": {"total": 320, "additions": 160, "deletions": 160}, "files": [{"sha": "a4b2e18ec10064d7b32c1c0fa58339d69b7e267f", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -53,13 +53,13 @@ pub enum Def {\n     Existential(DefId),\n     /// `type Foo = Bar;`\n     TyAlias(DefId),\n-    TyForeign(DefId),\n+    Foreign(DefId),\n     TraitAlias(DefId),\n     AssociatedTy(DefId),\n     /// `existential type Foo: Bar;`\n     AssociatedExistential(DefId),\n     PrimTy(hir::PrimTy),\n-    TyParam(DefId),\n+    Param(DefId),\n     SelfTy(Option<DefId> /* trait */, Option<DefId> /* impl */),\n     ToolMod, // e.g. `rustfmt` in `#[rustfmt::skip]`\n \n@@ -269,10 +269,10 @@ impl Def {\n             Def::Fn(id) | Def::Mod(id) | Def::Static(id, _) |\n             Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) |\n             Def::TyAlias(id) | Def::TraitAlias(id) |\n-            Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n+            Def::AssociatedTy(id) | Def::Param(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n             Def::AssociatedConst(id) | Def::Macro(id, ..) |\n-            Def::Existential(id) | Def::AssociatedExistential(id) | Def::TyForeign(id) => {\n+            Def::Existential(id) | Def::AssociatedExistential(id) | Def::Foreign(id) => {\n                 id\n             }\n \n@@ -311,11 +311,11 @@ impl Def {\n             Def::StructCtor(.., CtorKind::Fictive) => bug!(\"impossible struct constructor\"),\n             Def::Union(..) => \"union\",\n             Def::Trait(..) => \"trait\",\n-            Def::TyForeign(..) => \"foreign type\",\n+            Def::Foreign(..) => \"foreign type\",\n             Def::Method(..) => \"method\",\n             Def::Const(..) => \"constant\",\n             Def::AssociatedConst(..) => \"associated constant\",\n-            Def::TyParam(..) => \"type parameter\",\n+            Def::Param(..) => \"type parameter\",\n             Def::PrimTy(..) => \"builtin type\",\n             Def::Local(..) => \"local variable\",\n             Def::Upvar(..) => \"closure capture\","}, {"sha": "4251e4e9eaa27603a0896f3d9591bcec1714e2f5", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -1183,7 +1183,7 @@ impl<'a> LoweringContext<'a> {\n                     }\n                     ImplTraitContext::Universal(in_band_ty_params) => {\n                         self.lower_node_id(def_node_id);\n-                        // Add a definition for the in-band TyParam\n+                        // Add a definition for the in-band Param\n                         let def_index = self\n                             .resolver\n                             .definitions()\n@@ -1213,7 +1213,7 @@ impl<'a> LoweringContext<'a> {\n                             None,\n                             P(hir::Path {\n                                 span,\n-                                def: Def::TyParam(DefId::local(def_index)),\n+                                def: Def::Param(DefId::local(def_index)),\n                                 segments: hir_vec![hir::PathSegment::from_ident(ident)],\n                             }),\n                         ))\n@@ -2352,7 +2352,7 @@ impl<'a> LoweringContext<'a> {\n                                 if path.segments.len() == 1\n                                     && bound_pred.bound_generic_params.is_empty() =>\n                             {\n-                                if let Some(Def::TyParam(def_id)) = self.resolver\n+                                if let Some(Def::Param(def_id)) = self.resolver\n                                     .get_resolution(bound_pred.bounded_ty.id)\n                                     .map(|d| d.base_def())\n                                 {"}, {"sha": "b48e9a1f45c27ded38e507c463ef9f81897b2005", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -453,7 +453,7 @@ impl<'hir> Map<'hir> {\n                 match item.node {\n                     ForeignItemKind::Fn(..) => Some(Def::Fn(def_id)),\n                     ForeignItemKind::Static(_, m) => Some(Def::Static(def_id, m)),\n-                    ForeignItemKind::Type => Some(Def::TyForeign(def_id)),\n+                    ForeignItemKind::Type => Some(Def::Foreign(def_id)),\n                 }\n             }\n             NodeTraitItem(item) => {\n@@ -499,7 +499,7 @@ impl<'hir> Map<'hir> {\n             NodeGenericParam(param) => {\n                 Some(match param.kind {\n                     GenericParamKind::Lifetime { .. } => Def::Local(param.id),\n-                    GenericParamKind::Type { .. } => Def::TyParam(self.local_def_id(param.id)),\n+                    GenericParamKind::Type { .. } => Def::Param(self.local_def_id(param.id)),\n                 })\n             }\n         }"}, {"sha": "cb822d01534480342ba75b746704b3da4675afd7", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -1010,9 +1010,9 @@ impl_stable_hash_for!(enum hir::def::Def {\n     AssociatedTy(def_id),\n     AssociatedExistential(def_id),\n     PrimTy(prim_ty),\n-    TyParam(def_id),\n+    Param(def_id),\n     SelfTy(trait_def_id, impl_def_id),\n-    TyForeign(def_id),\n+    Foreign(def_id),\n     Fn(def_id),\n     Const(def_id),\n     Static(def_id, is_mutbl),"}, {"sha": "a3d7aca329792784c60f509aae070142d1371e52", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -874,10 +874,10 @@ for ty::TyKind<'gcx>\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n             }\n-            TyParam(param_ty) => {\n+            Param(param_ty) => {\n                 param_ty.hash_stable(hcx, hasher);\n             }\n-            TyForeign(def_id) => {\n+            Foreign(def_id) => {\n                 def_id.hash_stable(hcx, hasher);\n             }\n             Infer(infer_ty) => {"}, {"sha": "02f8b4648f1665ae26f6d47b8c8273687a0254b2", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -283,8 +283,8 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n             | ty::Never\n             | ty::Tuple(..)\n             | ty::Projection(..)\n-            | ty::TyForeign(..)\n-            | ty::TyParam(..)\n+            | ty::Foreign(..)\n+            | ty::Param(..)\n             | ty::Anon(..) => {\n                 if t.flags.intersects(self.needs_canonical_flags) {\n                     t.super_fold_with(self)"}, {"sha": "4f83c7c4d0ccc601027c9aabd81273ed92dbd761", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -1123,7 +1123,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         let type_param = generics.type_param(param, self.tcx);\n                         let hir = &self.tcx.hir;\n                         hir.as_local_node_id(type_param.def_id).map(|id| {\n-                            // Get the `hir::TyParam` to verify whether it already has any bounds.\n+                            // Get the `hir::Param` to verify whether it already has any bounds.\n                             // We do this to avoid suggesting code that ends up as `T: 'a'b`,\n                             // instead we suggest `T: 'a + 'b` in that case.\n                             let mut has_bounds = false;"}, {"sha": "c1c16677ccc902d0b380e110f785306925766317", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -193,8 +193,8 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::Never |\n             ty::Tuple(..) |\n             ty::Projection(..) |\n-            ty::TyForeign(..) |\n-            ty::TyParam(..) |\n+            ty::Foreign(..) |\n+            ty::Param(..) |\n             ty::Closure(..) |\n             ty::GeneratorWitness(..) |\n             ty::Anon(..) => {"}, {"sha": "817280b97e0315f8997e76e31c95dc70352eefbd", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -450,7 +450,7 @@ where\n \n     fn type_bound(&self, ty: Ty<'tcx>) -> VerifyBound<'tcx> {\n         match ty.sty {\n-            ty::TyParam(p) => self.param_bound(p),\n+            ty::Param(p) => self.param_bound(p),\n             ty::Projection(data) => {\n                 let declared_bounds = self.projection_declared_bounds(data);\n                 self.projection_bound(declared_bounds, data)"}, {"sha": "84890abc85d6f1fbc90053973b42be1d08366b7a", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -1326,7 +1326,7 @@ fn object_lifetime_defaults_for_item(\n                     _ => continue,\n                 };\n \n-                if def == Def::TyParam(param_def_id) {\n+                if def == Def::Param(param_def_id) {\n                     add_bounds(&mut set, &data.bounds);\n                 }\n             }"}, {"sha": "ed95aa73078a92f5282e1137fd8a0b24d21fa969", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -606,7 +606,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         }\n \n         return match substs.type_at(0).sty {\n-            ty::TyParam(_) => true,\n+            ty::Param(_) => true,\n             ty::Projection(p) => self.is_of_param(p.substs),\n             _ => false,\n         };"}, {"sha": "dd0fc7ebfcef6d2ee2284bbd9e9898d70b5f8e58", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -407,7 +407,7 @@ fn uncovered_tys<'tcx>(tcx: TyCtxt, ty: Ty<'tcx>, in_crate: InCrate)\n \n fn is_possibly_remote_type(ty: Ty, _in_crate: InCrate) -> bool {\n     match ty.sty {\n-        ty::Projection(..) | ty::TyParam(..) => true,\n+        ty::Projection(..) | ty::Param(..) => true,\n         _ => false,\n     }\n }\n@@ -455,7 +455,7 @@ fn ty_is_local_constructor(ty: Ty, in_crate: InCrate) -> bool {\n         ty::Ref(..) |\n         ty::Never |\n         ty::Tuple(..) |\n-        ty::TyParam(..) |\n+        ty::Param(..) |\n         ty::Projection(..) => {\n             false\n         }\n@@ -468,7 +468,7 @@ fn ty_is_local_constructor(ty: Ty, in_crate: InCrate) -> bool {\n         },\n \n         ty::Adt(def, _) => def_id_is_local(def.did, in_crate),\n-        ty::TyForeign(did) => def_id_is_local(did, in_crate),\n+        ty::Foreign(did) => def_id_is_local(did, in_crate),\n \n         ty::Dynamic(ref tt, ..) => {\n             tt.principal().map_or(false, |p| {"}, {"sha": "e095984d07f95e4481cb2e22e630c5dd9d734a0f", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -256,7 +256,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 ty::Closure(..) => Some(9),\n                 ty::Tuple(..) => Some(10),\n                 ty::Projection(..) => Some(11),\n-                ty::TyParam(..) => Some(12),\n+                ty::Param(..) => Some(12),\n                 ty::Anon(..) => Some(13),\n                 ty::Never => Some(14),\n                 ty::Adt(adt, ..) => match adt.adt_kind() {\n@@ -265,7 +265,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     AdtKind::Enum => Some(17),\n                 },\n                 ty::Generator(..) => Some(18),\n-                ty::TyForeign(..) => Some(19),\n+                ty::Foreign(..) => Some(19),\n                 ty::GeneratorWitness(..) => Some(20),\n                 ty::Infer(..) | ty::Error => None\n             }\n@@ -785,7 +785,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n                 let found_did = match found_trait_ty.sty {\n                     ty::Closure(did, _) |\n-                    ty::TyForeign(did) |\n+                    ty::Foreign(did) |\n                     ty::FnDef(did, _) => Some(did),\n                     ty::Adt(def, _) => Some(def.did),\n                     _ => None,\n@@ -1348,7 +1348,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.infcx.tcx }\n \n             fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-                if let ty::TyParam(ty::ParamTy {name, ..}) = ty.sty {\n+                if let ty::Param(ty::ParamTy {name, ..}) = ty.sty {\n                     let infcx = self.infcx;\n                     self.var_map.entry(ty).or_insert_with(||\n                         infcx.next_ty_var("}, {"sha": "17d55b77625b2c5cc347cbec2229b5c4d9a9978d", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -371,7 +371,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let mut error = false;\n         ty.maybe_walk(|ty| {\n             match ty.sty {\n-                ty::TyParam(ref param_ty) => {\n+                ty::Param(ref param_ty) => {\n                     if param_ty.is_self() {\n                         error = true;\n                     }"}, {"sha": "63552ba4a3064ddf088d26cf0c1c2151e084e585", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -228,7 +228,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) ->\n         | ty::RawPtr(_)\n         | ty::Ref(..)\n         | ty::TyStr\n-        | ty::TyForeign(..)\n+        | ty::Foreign(..)\n         | ty::Error => true,\n \n         // [T; N] and [T] have same properties as T.\n@@ -257,7 +257,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) ->\n         // The following *might* require a destructor: it would deeper inspection to tell.\n         ty::Dynamic(..)\n         | ty::Projection(..)\n-        | ty::TyParam(_)\n+        | ty::Param(_)\n         | ty::Anon(..)\n         | ty::Infer(_)\n         | ty::Generator(..) => false,"}, {"sha": "d2d7b8c37ccd21faa8ace915a2c14eefe37c1f34", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -1810,13 +1810,13 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     // say nothing; a candidate may be added by\n                     // `assemble_candidates_from_object_ty`.\n                 }\n-                ty::TyForeign(..) => {\n+                ty::Foreign(..) => {\n                     // Since the contents of foreign types is unknown,\n                     // we don't add any `..` impl. Default traits could\n                     // still be provided by a manual implementation for\n                     // this trait and type.\n                 }\n-                ty::TyParam(..) |\n+                ty::Param(..) |\n                 ty::Projection(..) => {\n                     // In these cases, we don't know what the actual\n                     // type is.  Therefore, we cannot break it down\n@@ -2189,7 +2189,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Where(ty::Binder::dummy(Vec::new()))\n             }\n \n-            ty::TyStr | ty::Slice(_) | ty::Dynamic(..) | ty::TyForeign(..) => None,\n+            ty::TyStr | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,\n \n             ty::Tuple(tys) => {\n                 Where(ty::Binder::bind(tys.last().into_iter().cloned().collect()))\n@@ -2203,7 +2203,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 ))\n             }\n \n-            ty::Projection(_) | ty::TyParam(_) | ty::Anon(..) => None,\n+            ty::Projection(_) | ty::Param(_) | ty::Anon(..) => None,\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n             ty::Infer(ty::CanonicalTy(_)) |\n@@ -2239,7 +2239,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             ty::Dynamic(..) | ty::TyStr | ty::Slice(..) |\n-            ty::Generator(..) | ty::GeneratorWitness(..) | ty::TyForeign(..) |\n+            ty::Generator(..) | ty::GeneratorWitness(..) | ty::Foreign(..) |\n             ty::Ref(_, _, hir::MutMutable) => {\n                 None\n             }\n@@ -2265,7 +2265,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 }\n             }\n \n-            ty::Adt(..) | ty::Projection(..) | ty::TyParam(..) | ty::Anon(..) => {\n+            ty::Adt(..) | ty::Projection(..) | ty::Param(..) | ty::Anon(..) => {\n                 // Fallback to whatever user-defined impls exist in this case.\n                 None\n             }\n@@ -2316,8 +2316,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             ty::Dynamic(..) |\n-            ty::TyParam(..) |\n-            ty::TyForeign(..) |\n+            ty::Param(..) |\n+            ty::Foreign(..) |\n             ty::Projection(..) |\n             ty::Infer(ty::CanonicalTy(_)) |\n             ty::Infer(ty::TyVar(_)) |\n@@ -3072,7 +3072,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 let mut ty_params = BitArray::new(substs_a.types().count());\n                 let mut found = false;\n                 for ty in field.walk() {\n-                    if let ty::TyParam(p) = ty.sty {\n+                    if let ty::Param(p) = ty.sty {\n                         ty_params.insert(p.idx as usize);\n                         found = true;\n                     }"}, {"sha": "9343eff9e79b4f2f43407ade6b09ea0e74d85a8e", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -90,7 +90,7 @@ pub fn translate_substs<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                 .unwrap()\n                                 .subst(infcx.tcx, &source_substs);\n \n-    // translate the Self and TyParam parts of the substitution, since those\n+    // translate the Self and Param parts of the substitution, since those\n     // vary across impls\n     let target_substs = match target_node {\n         specialization_graph::Node::Impl(target_impl) => {"}, {"sha": "b725823b406082d98b8e9c9bd3a002d34d702ae8", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -2078,7 +2078,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             self,\n             Adt, Array, Slice, RawPtr, Ref, FnDef, FnPtr,\n             Generator, GeneratorWitness, Dynamic, Closure, Tuple,\n-            TyParam, Infer, Projection, Anon, TyForeign);\n+            Param, Infer, Projection, Anon, Foreign);\n \n         println!(\"Substs interner: #{}\", self.interners.substs.borrow().len());\n         println!(\"Region interner: #{}\", self.interners.region.borrow().len());\n@@ -2387,7 +2387,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {\n-        self.mk_ty(TyForeign(def_id))\n+        self.mk_ty(Foreign(def_id))\n     }\n \n     pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n@@ -2532,7 +2532,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn mk_ty_param(self,\n                     index: u32,\n                     name: InternedString) -> Ty<'tcx> {\n-        self.mk_ty(TyParam(ParamTy { idx: index, name: name }))\n+        self.mk_ty(Param(ParamTy { idx: index, name: name }))\n     }\n \n     pub fn mk_self_type(self) -> Ty<'tcx> {"}, {"sha": "d367a5e4bcf884071bb2533e50235d894c5058f8", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -180,7 +180,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::Tuple(ref tys) if tys.is_empty() => self.to_string(),\n \n             ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.item_path_str(def.did)),\n-            ty::TyForeign(def_id) => format!(\"extern type `{}`\", tcx.item_path_str(def_id)),\n+            ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.item_path_str(def_id)),\n             ty::Array(_, n) => {\n                 match n.assert_usize(tcx) {\n                     Some(n) => format!(\"array of {} elements\", n),\n@@ -222,7 +222,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::Infer(ty::FreshIntTy(_)) => \"skolemized integral type\".to_string(),\n             ty::Infer(ty::FreshFloatTy(_)) => \"skolemized floating-point type\".to_string(),\n             ty::Projection(_) => \"associated type\".to_string(),\n-            ty::TyParam(ref p) => {\n+            ty::Param(ref p) => {\n                 if p.is_self() {\n                     \"Self\".to_string()\n                 } else {"}, {"sha": "d4eda9e96f21dac51b93ec0d5004487417395baa", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -103,7 +103,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::FnPtr(ref f) => {\n             Some(FunctionSimplifiedType(f.skip_binder().inputs().len()))\n         }\n-        ty::Projection(_) | ty::TyParam(_) => {\n+        ty::Projection(_) | ty::Param(_) => {\n             if can_simplify_params {\n                 // In normalized types, projections don't unify with\n                 // anything. when lazy normalization happens, this\n@@ -118,7 +118,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::Anon(def_id, _) => {\n             Some(AnonSimplifiedType(def_id))\n         }\n-        ty::TyForeign(def_id) => {\n+        ty::Foreign(def_id) => {\n             Some(ForeignSimplifiedType(def_id))\n         }\n         ty::Infer(_) | ty::Error => None,"}, {"sha": "bdff532933c3b4e01a3af9bc5d5d9d7b037604e4", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -76,7 +76,7 @@ impl FlagComputation {\n             &ty::TyUint(_) |\n             &ty::Never |\n             &ty::TyStr |\n-            &ty::TyForeign(..) => {\n+            &ty::Foreign(..) => {\n             }\n \n             // You might think that we could just return Error for\n@@ -90,7 +90,7 @@ impl FlagComputation {\n                 self.add_flags(TypeFlags::HAS_TY_ERR)\n             }\n \n-            &ty::TyParam(ref p) => {\n+            &ty::Param(ref p) => {\n                 self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 if p.is_self() {\n                     self.add_flags(TypeFlags::HAS_SELF);"}, {"sha": "b8d68111284a8b5d28eac4fc839cfb1b152e49de", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            ty::TyForeign(did) => self.push_item_path(buffer, did),\n+            ty::Foreign(did) => self.push_item_path(buffer, did),\n \n             ty::TyBool |\n             ty::TyChar |\n@@ -375,7 +375,7 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n         ty::FnDef(def_id, _) |\n         ty::Closure(def_id, _) |\n         ty::Generator(def_id, _, _) |\n-        ty::TyForeign(def_id) => Some(def_id),\n+        ty::Foreign(def_id) => Some(def_id),\n \n         ty::TyBool |\n         ty::TyChar |\n@@ -384,7 +384,7 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n         ty::TyStr |\n         ty::FnPtr(_) |\n         ty::Projection(_) |\n-        ty::TyParam(_) |\n+        ty::Param(_) |\n         ty::Anon(..) |\n         ty::Infer(_) |\n         ty::Error |"}, {"sha": "9bff0784283d898c9b2f28f656eb49abf97dedec", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -521,7 +521,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n                 let unsized_part = tcx.struct_tail(pointee);\n                 let metadata = match unsized_part.sty {\n-                    ty::TyForeign(..) => {\n+                    ty::Foreign(..) => {\n                         return Ok(tcx.intern_layout(LayoutDetails::scalar(self, data_ptr)));\n                     }\n                     ty::Slice(_) | ty::TyStr => {\n@@ -594,7 +594,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             ty::FnDef(..) => {\n                 univariant(&[], &ReprOptions::default(), StructKind::AlwaysSized)?\n             }\n-            ty::Dynamic(..) | ty::TyForeign(..) => {\n+            ty::Dynamic(..) | ty::Foreign(..) => {\n                 let mut unit = univariant_uninterned(&[], &ReprOptions::default(),\n                   StructKind::AlwaysSized)?;\n                 match unit.abi {\n@@ -1113,7 +1113,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             ty::GeneratorWitness(..) | ty::Infer(_) => {\n                 bug!(\"LayoutDetails::compute: unexpected type `{}`\", ty)\n             }\n-            ty::TyParam(_) | ty::Error => {\n+            ty::Param(_) | ty::Error => {\n                 return Err(LayoutError::Unknown(ty));\n             }\n         })\n@@ -1299,7 +1299,7 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n                 let non_zero = !ty.is_unsafe_ptr();\n                 let tail = tcx.struct_tail(pointee);\n                 match tail.sty {\n-                    ty::TyParam(_) | ty::Projection(_) => {\n+                    ty::Param(_) | ty::Projection(_) => {\n                         debug_assert!(tail.has_param_types() || tail.has_self_ty());\n                         Ok(SizeSkeleton::Pointer {\n                             non_zero,\n@@ -1591,7 +1591,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n             ty::Never |\n             ty::FnDef(..) |\n             ty::GeneratorWitness(..) |\n-            ty::TyForeign(..) |\n+            ty::Foreign(..) |\n             ty::Dynamic(..) => {\n                 bug!(\"TyLayout::field_type({:?}): not applicable\", this)\n             }\n@@ -1686,7 +1686,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                 }\n             }\n \n-            ty::Projection(_) | ty::Anon(..) | ty::TyParam(_) |\n+            ty::Projection(_) | ty::Anon(..) | ty::Param(_) |\n             ty::Infer(_) | ty::Error => {\n                 bug!(\"TyLayout::field_type: unexpected type `{}`\", this.ty)\n             }"}, {"sha": "3b1f91c5d74319f320efcac0439f5ceafbf0de31", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -2239,7 +2239,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n             TyStr |\n             Dynamic(..) |\n             Slice(_) |\n-            TyForeign(..) |\n+            Foreign(..) |\n             Error |\n             GeneratorWitness(..) => {\n                 // these are never sized - return the target type\n@@ -2270,7 +2270,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 vec![ty]\n             }\n \n-            TyParam(..) => {\n+            Param(..) => {\n                 // perf hack: if there is a `T: Sized` bound, then\n                 // we know that `T` is Sized and do not need to check\n                 // it on the impl."}, {"sha": "884f366de4f8c3444db530f6b00d506ec6fcd481", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -94,7 +94,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n             // OutlivesTypeParameterEnv -- the actual checking that `X:'a`\n             // is implied by the environment is done in regionck.\n-            ty::TyParam(p) => {\n+            ty::Param(p) => {\n                 out.push(Component::Param(p));\n             }\n \n@@ -145,7 +145,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::Never |           // ...\n             ty::Adt(..) |         // OutlivesNominalType\n             ty::Anon(..) |        // OutlivesNominalType (ish)\n-            ty::TyForeign(..) |     // OutlivesNominalType\n+            ty::Foreign(..) |     // OutlivesNominalType\n             ty::TyStr |             // OutlivesScalar (ish)\n             ty::Array(..) |       // ...\n             ty::Slice(..) |       // ..."}, {"sha": "c65efdd946ccf621d30cd2173526b6711eab6db6", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -387,7 +387,7 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             Ok(a)\n         }\n \n-        (&ty::TyParam(ref a_p), &ty::TyParam(ref b_p))\n+        (&ty::Param(ref a_p), &ty::Param(ref b_p))\n             if a_p.idx == b_p.idx =>\n         {\n             Ok(a)\n@@ -400,7 +400,7 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             Ok(tcx.mk_adt(a_def, substs))\n         }\n \n-        (&ty::TyForeign(a_id), &ty::TyForeign(b_id))\n+        (&ty::Foreign(a_id), &ty::Foreign(b_id))\n             if a_id == b_id =>\n         {\n             Ok(tcx.mk_foreign(a_id))"}, {"sha": "4dbbf50caa8845abba396cb5bdf74852adf9aecd", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -862,7 +862,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::Anon(did, substs) => ty::Anon(did, substs.fold_with(folder)),\n             ty::TyBool | ty::TyChar | ty::TyStr | ty::TyInt(_) |\n             ty::TyUint(_) | ty::TyFloat(_) | ty::Error | ty::Infer(_) |\n-            ty::TyParam(..) | ty::Never | ty::TyForeign(..) => return self\n+            ty::Param(..) | ty::Never | ty::Foreign(..) => return self\n         };\n \n         if self.sty == sty {\n@@ -897,7 +897,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::Anon(_, ref substs) => substs.visit_with(visitor),\n             ty::TyBool | ty::TyChar | ty::TyStr | ty::TyInt(_) |\n             ty::TyUint(_) | ty::TyFloat(_) | ty::Error | ty::Infer(_) |\n-            ty::TyParam(..) | ty::Never | ty::TyForeign(..) => false,\n+            ty::Param(..) | ty::Never | ty::Foreign(..) => false,\n         }\n     }\n "}, {"sha": "9c3da83814f67712b58a85976317f2dbcec9d532", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -101,13 +101,13 @@ pub enum TyKind<'tcx> {\n \n     /// Structures, enumerations and unions.\n     ///\n-    /// Substs here, possibly against intuition, *may* contain `TyParam`s.\n+    /// Substs here, possibly against intuition, *may* contain `Param`s.\n     /// That is, even after substitution it is possible that there are type\n     /// variables. This happens when the `Adt` corresponds to an ADT\n     /// definition and not a concrete use of it.\n     Adt(&'tcx AdtDef, &'tcx Substs<'tcx>),\n \n-    TyForeign(DefId),\n+    Foreign(DefId),\n \n     /// The pointee of a string slice. Written as `str`.\n     TyStr,\n@@ -166,7 +166,7 @@ pub enum TyKind<'tcx> {\n     Anon(DefId, &'tcx Substs<'tcx>),\n \n     /// A type parameter; for example, `T` in `fn f<T>(x: T) {}\n-    TyParam(ParamTy),\n+    Param(ParamTy),\n \n     /// A type variable used during type-checking.\n     Infer(InferTy),\n@@ -1058,7 +1058,7 @@ pub type Region<'tcx> = &'tcx RegionKind;\n /// the likes of `liberate_late_bound_regions`. The distinction exists\n /// because higher-ranked lifetimes aren't supported in all places. See [1][2].\n ///\n-/// Unlike TyParam-s, bound regions are not supposed to exist \"in the wild\"\n+/// Unlike Param-s, bound regions are not supposed to exist \"in the wild\"\n /// outside their binder, e.g. in types passed to type inference, and\n /// should first be substituted (by skolemized regions, free regions,\n /// or region variables).\n@@ -1514,14 +1514,14 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn is_param(&self, index: u32) -> bool {\n         match self.sty {\n-            ty::TyParam(ref data) => data.idx == index,\n+            ty::Param(ref data) => data.idx == index,\n             _ => false,\n         }\n     }\n \n     pub fn is_self(&self) -> bool {\n         match self.sty {\n-            TyParam(ref p) => p.is_self(),\n+            Param(ref p) => p.is_self(),\n             _ => false,\n         }\n     }\n@@ -1714,7 +1714,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn has_concrete_skeleton(&self) -> bool {\n         match self.sty {\n-            TyParam(_) | Infer(_) | Error => false,\n+            Param(_) | Infer(_) | Error => false,\n             _ => true,\n         }\n     }\n@@ -1815,8 +1815,8 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             RawPtr(_) |\n             Never |\n             Tuple(..) |\n-            TyForeign(..) |\n-            TyParam(_) |\n+            Foreign(..) |\n+            Param(_) |\n             Infer(_) |\n             Error => {\n                 vec![]\n@@ -1867,7 +1867,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             ty::Never | ty::Error =>\n                 true,\n \n-            ty::TyStr | ty::Slice(_) | ty::Dynamic(..) | ty::TyForeign(..) =>\n+            ty::TyStr | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) =>\n                 false,\n \n             ty::Tuple(tys) =>\n@@ -1876,7 +1876,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             ty::Adt(def, _substs) =>\n                 def.sized_constraint(tcx).is_empty(),\n \n-            ty::Projection(_) | ty::TyParam(_) | ty::Anon(..) => false,\n+            ty::Projection(_) | ty::Param(_) | ty::Anon(..) => false,\n \n             ty::Infer(ty::TyVar(_)) => false,\n "}, {"sha": "0e85c68b8b1deeb0732bdb7f259198a0ac9cd57c", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -449,7 +449,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for SubstFolder<'a, 'gcx, 'tcx> {\n         self.ty_stack_depth += 1;\n \n         let t1 = match t.sty {\n-            ty::TyParam(p) => {\n+            ty::Param(p) => {\n                 self.ty_for_param(p, t)\n             }\n             _ => {"}, {"sha": "6b0734cc99263e56ab1997ecd5538392d6f80fb3", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -503,7 +503,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         !impl_generics.region_param(ebr, self).pure_wrt_drop\n                     }\n                     UnpackedKind::Type(&ty::TyS {\n-                        sty: ty::TyKind::TyParam(ref pt), ..\n+                        sty: ty::TyKind::Param(ref pt), ..\n                     }) => {\n                         !impl_generics.type_param(pt, self).pure_wrt_drop\n                     }\n@@ -930,7 +930,7 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ty::RawPtr(_) | ty::Ref(..) | ty::TyStr => false,\n \n         // Foreign types can never have destructors\n-        ty::TyForeign(..) => false,\n+        ty::Foreign(..) => false,\n \n         // `ManuallyDrop` doesn't have a destructor regardless of field types.\n         ty::Adt(def, _) if Some(def.did) == tcx.lang_items().manually_drop() => false,\n@@ -955,7 +955,7 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Can refer to a type which may drop.\n         // FIXME(eddyb) check this against a ParamEnv.\n-        ty::Dynamic(..) | ty::Projection(..) | ty::TyParam(_) |\n+        ty::Dynamic(..) | ty::Projection(..) | ty::Param(_) |\n         ty::Anon(..) | ty::Infer(_) | ty::Error => true,\n \n         // Structural recursion."}, {"sha": "b40e0968fd85855fa7c305a49ae18409f3854b36", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -82,8 +82,8 @@ pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> AccIntoIter<TypeWalkerArray<'tcx>> {\n fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n     match parent_ty.sty {\n         ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n-        ty::TyStr | ty::Infer(_) | ty::TyParam(_) | ty::Never | ty::Error |\n-        ty::TyForeign(..) => {\n+        ty::TyStr | ty::Infer(_) | ty::Param(_) | ty::Never | ty::Error |\n+        ty::Foreign(..) => {\n         }\n         ty::Array(ty, len) => {\n             push_const(stack, len);"}, {"sha": "56eaaa942f562825fbc65eddd5810deb81e235c2", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -257,8 +257,8 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                 ty::TyStr |\n                 ty::GeneratorWitness(..) |\n                 ty::Never |\n-                ty::TyParam(_) |\n-                ty::TyForeign(..) => {\n+                ty::Param(_) |\n+                ty::Foreign(..) => {\n                     // WfScalar, WfParameter, etc\n                 }\n "}, {"sha": "18901fcb4f2c229e16592a9bc10a82349efe12d7", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -16,8 +16,8 @@ use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use ty::{TyBool, TyChar, Adt};\n use ty::{Error, TyStr, Array, Slice, TyFloat, FnDef, FnPtr};\n-use ty::{TyParam, RawPtr, Ref, Never, Tuple};\n-use ty::{Closure, Generator, GeneratorWitness, TyForeign, Projection, Anon};\n+use ty::{Param, RawPtr, Ref, Never, Tuple};\n+use ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Anon};\n use ty::{Dynamic, TyInt, TyUint, Infer};\n use ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n use util::nodemap::FxHashSet;\n@@ -1086,7 +1086,7 @@ define_print! {\n                 }\n                 Infer(infer_ty) => write!(f, \"{}\", infer_ty),\n                 Error => write!(f, \"[type error]\"),\n-                TyParam(ref param_ty) => write!(f, \"{}\", param_ty),\n+                Param(ref param_ty) => write!(f, \"{}\", param_ty),\n                 Adt(def, substs) => cx.parameterized(f, substs, def.did, &[]),\n                 Dynamic(data, r) => {\n                     let r = r.print_to_string(cx);\n@@ -1101,7 +1101,7 @@ define_print! {\n                         Ok(())\n                     }\n                 }\n-                TyForeign(def_id) => parameterized(f, subst::Substs::empty(), def_id, &[]),\n+                Foreign(def_id) => parameterized(f, subst::Substs::empty(), def_id, &[]),\n                 Projection(ref data) => data.print(f, cx),\n                 Anon(def_id, substs) => {\n                     if cx.is_verbose {"}, {"sha": "2ee4bec5ac26739b56a5bfd70872c934682d7778", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -434,7 +434,7 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n \n         let tail = self.tcx.struct_tail(ty);\n         match tail.sty {\n-            ty::TyForeign(..) => false,\n+            ty::Foreign(..) => false,\n             ty::TyStr | ty::Slice(..) | ty::Dynamic(..) => true,\n             _ => bug!(\"unexpected unsized tail: {:?}\", tail.sty),\n         }"}, {"sha": "670b7e1fdab4fa697fee788a8828c5bd18493823", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -585,7 +585,7 @@ pub fn type_metadata(\n                         trait_pointer_metadata(cx, t, None, unique_type_id),\n             false)\n         }\n-        ty::TyForeign(..) => {\n+        ty::Foreign(..) => {\n             MetadataCreationResult::new(\n                         foreign_type_metadata(cx, t, unique_type_id),\n             false)"}, {"sha": "0b138d48119bd469b35b4e50989d87b47df2b11e", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -48,7 +48,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         ty::TyInt(int_ty) => output.push_str(int_ty.ty_to_string()),\n         ty::TyUint(uint_ty) => output.push_str(uint_ty.ty_to_string()),\n         ty::TyFloat(float_ty) => output.push_str(float_ty.ty_to_string()),\n-        ty::TyForeign(def_id) => push_item_name(cx, def_id, qualified, output),\n+        ty::Foreign(def_id) => push_item_name(cx, def_id, qualified, output),\n         ty::Adt(def, substs) => {\n             push_item_name(cx, def.did, qualified, output);\n             push_type_params(cx, substs, output);\n@@ -176,7 +176,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         ty::Projection(..) |\n         ty::Anon(..) |\n         ty::GeneratorWitness(..) |\n-        ty::TyParam(_) => {\n+        ty::Param(_) => {\n             bug!(\"debuginfo: Trying to create type name for \\\n                 unexpected type: {:?}\", t);\n         }"}, {"sha": "f280589b7a020e2651e0dc65e0351f4161063785", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -211,7 +211,7 @@ impl PlaceRef<'ll, 'tcx> {\n                 return simple();\n             }\n             _ if !field.is_unsized() => return simple(),\n-            ty::Slice(..) | ty::TyStr | ty::TyForeign(..) => return simple(),\n+            ty::Slice(..) | ty::TyStr | ty::Foreign(..) => return simple(),\n             ty::Adt(def, _) => {\n                 if def.repr.packed() {\n                     // FIXME(eddyb) generalize the adjustment when we"}, {"sha": "0864b127faec31ebedbacf95f6357fd6351e985a", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -62,7 +62,7 @@ fn uncached_llvm_type<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         // FIXME(eddyb) producing readable type names for trait objects can result\n         // in problematically distinct types due to HRTB and subtyping (see #47638).\n         // ty::Dynamic(..) |\n-        ty::TyForeign(..) |\n+        ty::Foreign(..) |\n         ty::TyStr => {\n             let mut name = String::with_capacity(32);\n             let printer = DefPathBasedNames::new(cx.tcx, true, true);"}, {"sha": "d4bb5769c75b04dac3985a7bc95684102e5a09a8", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -1510,7 +1510,7 @@ impl TypeAliasBounds {\n                 match ty.node {\n                     hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => {\n                         match path.def {\n-                            Def::TyParam(_) => true,\n+                            Def::Param(_) => true,\n                             _ => false\n                         }\n                     }"}, {"sha": "ac7894543bec1c546244808005b985f163084ac3", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -712,9 +712,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 FfiSafe\n             }\n \n-            ty::TyForeign(..) => FfiSafe,\n+            ty::Foreign(..) => FfiSafe,\n \n-            ty::TyParam(..) |\n+            ty::Param(..) |\n             ty::Infer(..) |\n             ty::Error |\n             ty::Closure(..) |"}, {"sha": "292355b6656201f8fb94cb132c827dcb1d237df9", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -429,7 +429,7 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Trait(_) => Def::Trait(did),\n             EntryKind::Enum(..) => Def::Enum(did),\n             EntryKind::MacroDef(_) => Def::Macro(did, MacroKind::Bang),\n-            EntryKind::ForeignType => Def::TyForeign(did),\n+            EntryKind::ForeignType => Def::Foreign(did),\n \n             EntryKind::ForeignMod |\n             EntryKind::GlobalAsm |"}, {"sha": "592a833a347c31bab83de80e862450ba63025d9c", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -838,7 +838,7 @@ fn find_vtable_types_for_unsizing<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n             let tail = tcx.struct_tail(ty);\n             match tail.sty {\n-                ty::TyForeign(..) => false,\n+                ty::Foreign(..) => false,\n                 ty::TyStr | ty::Slice(..) | ty::Dynamic(..) => true,\n                 _ => bug!(\"unexpected unsized tail: {:?}\", tail.sty),\n             }"}, {"sha": "c743efc26f6efb7727807fd9a849b0528f627d75", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -327,7 +327,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                         output);\n                 }\n             },\n-            ty::TyForeign(did) => self.push_def_path(did, output),\n+            ty::Foreign(did) => self.push_def_path(did, output),\n             ty::FnDef(..) |\n             ty::FnPtr(_) => {\n                 let sig = t.fn_sig(self.tcx);\n@@ -383,7 +383,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             ty::Error |\n             ty::Infer(_) |\n             ty::Projection(..) |\n-            ty::TyParam(_) |\n+            ty::Param(_) |\n             ty::GeneratorWitness(_) |\n             ty::Anon(..) => {\n                 bug!(\"DefPathBasedNames: Trying to create type name for \\"}, {"sha": "dd536d673cf4d154249f7771322ade2f3d133c2e", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -90,7 +90,7 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n     fn item_ty_level(&self, item_def_id: DefId) -> Option<AccessLevel> {\n         let ty_def_id = match self.tcx.type_of(item_def_id).sty {\n             ty::Adt(adt, _) => adt.did,\n-            ty::TyForeign(did) => did,\n+            ty::Foreign(did) => did,\n             ty::Dynamic(ref obj, ..) if obj.principal().is_some() =>\n                 obj.principal().unwrap().def_id(),\n             ty::Projection(ref proj) => proj.trait_ref(self.tcx).def_id,\n@@ -471,7 +471,7 @@ impl<'b, 'a, 'tcx> TypeVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'b\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n         let ty_def_id = match ty.sty {\n             ty::Adt(adt, _) => Some(adt.did),\n-            ty::TyForeign(did) => Some(did),\n+            ty::Foreign(did) => Some(did),\n             ty::Dynamic(ref obj, ..) => obj.principal().map(|p| p.def_id()),\n             ty::Projection(ref proj) => Some(proj.item_def_id),\n             ty::FnDef(def_id, ..) |\n@@ -898,7 +898,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         match ty.sty {\n             ty::Adt(&ty::AdtDef { did: def_id, .. }, ..) |\n             ty::FnDef(def_id, ..) |\n-            ty::TyForeign(def_id) => {\n+            ty::Foreign(def_id) => {\n                 if !self.item_is_accessible(def_id) {\n                     let msg = format!(\"type `{}` is private\", ty);\n                     self.tcx.sess.span_err(self.span, &msg);\n@@ -1435,7 +1435,7 @@ impl<'a, 'tcx: 'a> TypeVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n         let ty_def_id = match ty.sty {\n             ty::Adt(adt, _) => Some(adt.did),\n-            ty::TyForeign(did) => Some(did),\n+            ty::Foreign(did) => Some(did),\n             ty::Dynamic(ref obj, ..) => obj.principal().map(|p| p.def_id()),\n             ty::Projection(ref proj) => {\n                 if self.required_visibility == ty::Visibility::Invisible {"}, {"sha": "0c55ae65ec7f4aa60f9117072d3932efb79200b0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -656,7 +656,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 (Def::Static(self.definitions.local_def_id(item.id), m), ValueNS)\n             }\n             ForeignItemKind::Ty => {\n-                (Def::TyForeign(self.definitions.local_def_id(item.id)), TypeNS)\n+                (Def::Foreign(self.definitions.local_def_id(item.id)), TypeNS)\n             }\n             ForeignItemKind::Macro(_) => unreachable!(),\n         };\n@@ -692,7 +692,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                                              span);\n                 self.define(parent, ident, TypeNS, (module, vis, DUMMY_SP, expansion));\n             }\n-            Def::Variant(..) | Def::TyAlias(..) | Def::TyForeign(..) => {\n+            Def::Variant(..) | Def::TyAlias(..) | Def::Foreign(..) => {\n                 self.define(parent, ident, TypeNS, (def, vis, DUMMY_SP, expansion));\n             }\n             Def::Fn(..) | Def::Static(..) | Def::Const(..) | Def::VariantCtor(..) => {"}, {"sha": "b731cc21f2bd7e322e2a8cb128980a1c04d4fae4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -204,14 +204,14 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n                                     \"`Self` type implicitly declared here, on the `impl`\");\n                     }\n                 },\n-                Def::TyParam(typaram_defid) => {\n+                Def::Param(typaram_defid) => {\n                     if let Some(typaram_span) = resolver.definitions.opt_span(typaram_defid) {\n                         err.span_label(typaram_span, \"type variable from outer function\");\n                     }\n                 },\n                 _ => {\n                     bug!(\"TypeParametersFromOuterFunction should only be used with Def::SelfTy or \\\n-                         Def::TyParam\")\n+                         Def::Param\")\n                 }\n             }\n \n@@ -537,9 +537,9 @@ impl<'a> PathSource<'a> {\n             PathSource::Type => match def {\n                 Def::Struct(..) | Def::Union(..) | Def::Enum(..) |\n                 Def::Trait(..) | Def::TyAlias(..) | Def::AssociatedTy(..) |\n-                Def::PrimTy(..) | Def::TyParam(..) | Def::SelfTy(..) |\n+                Def::PrimTy(..) | Def::Param(..) | Def::SelfTy(..) |\n                 Def::Existential(..) |\n-                Def::TyForeign(..) => true,\n+                Def::Foreign(..) => true,\n                 _ => false,\n             },\n             PathSource::Trait(AliasPossibility::No) => match def {\n@@ -2359,7 +2359,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                             seen_bindings.entry(ident).or_insert(param.ident.span);\n \n                         // Plain insert (no renaming).\n-                        let def = Def::TyParam(self.definitions.local_def_id(param.id));\n+                        let def = Def::Param(self.definitions.local_def_id(param.id));\n                             function_type_rib.bindings.insert(ident, def);\n                             self.record_def(param.id, PathResolution::new(def));\n                         }\n@@ -3765,7 +3765,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     }\n                 }\n             }\n-            Def::TyParam(..) | Def::SelfTy(..) => {\n+            Def::Param(..) | Def::SelfTy(..) => {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind | TraitOrImplItemRibKind | ClosureRibKind(..) |"}, {"sha": "2d9768db113258082e6967efa3e4af73022b4ede", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -747,13 +747,13 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             HirDef::Union(def_id) |\n             HirDef::Enum(def_id) |\n             HirDef::TyAlias(def_id) |\n-            HirDef::TyForeign(def_id) |\n+            HirDef::Foreign(def_id) |\n             HirDef::TraitAlias(def_id) |\n             HirDef::AssociatedExistential(def_id) |\n             HirDef::AssociatedTy(def_id) |\n             HirDef::Trait(def_id) |\n             HirDef::Existential(def_id) |\n-            HirDef::TyParam(def_id) => {\n+            HirDef::Param(def_id) => {\n                 let span = self.span_from_span(sub_span);\n                 Some(Ref {\n                     kind: RefKind::Type,"}, {"sha": "8e7d3d2c1757ca83fea72062fb3fb2856a137693", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -119,7 +119,7 @@ fn dropck_outlives<'tcx>(\n                         match ty.sty {\n                             // All parameters live for the duration of the\n                             // function.\n-                            ty::TyParam(..) => {}\n+                            ty::Param(..) => {}\n \n                             // A projection that we couldn't resolve - it\n                             // might have a destructor.\n@@ -180,7 +180,7 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n         | ty::TyFloat(_)\n         | ty::TyStr\n         | ty::Never\n-        | ty::TyForeign(..)\n+        | ty::Foreign(..)\n         | ty::RawPtr(..)\n         | ty::Ref(..)\n         | ty::FnDef(..)\n@@ -266,7 +266,7 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n         }),\n \n         // Types that can't be resolved. Pass them forward.\n-        ty::Projection(..) | ty::Anon(..) | ty::TyParam(..) => Ok(DtorckConstraint {\n+        ty::Projection(..) | ty::Anon(..) | ty::Param(..) => Ok(DtorckConstraint {\n             outlives: vec![],\n             dtorck_types: vec![ty],\n             overflows: vec![],"}, {"sha": "00434fff23830c63c8195c1639386909c47caa29", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -1239,8 +1239,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                     Err(ErrorReported) => return (tcx.types.err, Def::Err),\n                 }\n             }\n-            (&ty::TyParam(_), Def::SelfTy(Some(param_did), None)) |\n-            (&ty::TyParam(_), Def::TyParam(param_did)) => {\n+            (&ty::Param(_), Def::SelfTy(Some(param_did), None)) |\n+            (&ty::Param(_), Def::Param(param_did)) => {\n                 match self.find_bound_for_assoc_item(param_did, assoc_name, span) {\n                     Ok(bound) => bound,\n                     Err(ErrorReported) => return (tcx.types.err, Def::Err),\n@@ -1387,7 +1387,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 )\n             }\n             Def::Enum(did) | Def::TyAlias(did) | Def::Struct(did) |\n-            Def::Union(did) | Def::TyForeign(did) => {\n+            Def::Union(did) | Def::Foreign(did) => {\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(path.segments.split_last().unwrap().1);\n                 self.ast_path_to_ty(span, did, path.segments.last().unwrap())\n@@ -1401,7 +1401,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                                     tcx.parent_def_id(did).unwrap(),\n                                     path.segments.last().unwrap())\n             }\n-            Def::TyParam(did) => {\n+            Def::Param(did) => {\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(&path.segments);\n "}, {"sha": "3bf54ff822ffc4e5e2719871c3908fa98624bfce", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -121,11 +121,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             },\n \n             // Pointers to foreign types are thin, despite being unsized\n-            ty::TyForeign(..) => Some(PointerKind::Thin),\n+            ty::Foreign(..) => Some(PointerKind::Thin),\n             // We should really try to normalize here.\n             ty::Projection(ref pi) => Some(PointerKind::OfProjection(pi)),\n             ty::Anon(def_id, substs) => Some(PointerKind::OfAnon(def_id, substs)),\n-            ty::TyParam(ref p) => Some(PointerKind::OfParam(p)),\n+            ty::Param(ref p) => Some(PointerKind::OfParam(p)),\n             // Insufficient type information.\n             ty::Infer(_) => None,\n "}, {"sha": "3f32e26c1b49193a94fbc1ad6e4c51e3759dd6ac", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -830,7 +830,7 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 hir::intravisit::walk_ty(self, ty);\n                                 match ty.node {\n                                     hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => {\n-                                        if let hir::def::Def::TyParam(def_id) = path.def {\n+                                        if let hir::def::Def::Param(def_id) = path.def {\n                                             if def_id == self.1 {\n                                                 self.0 = Some(ty.span);\n                                             }"}, {"sha": "120d423654449c45978111ed886e6b1568e40a10", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -459,10 +459,10 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             ty::Adt(def, _) => {\n                 self.assemble_inherent_impl_candidates_for_type(def.did);\n             }\n-            ty::TyForeign(did) => {\n+            ty::Foreign(did) => {\n                 self.assemble_inherent_impl_candidates_for_type(did);\n             }\n-            ty::TyParam(p) => {\n+            ty::Param(p) => {\n                 self.assemble_inherent_candidates_from_param(self_ty, p);\n             }\n             ty::TyChar => {\n@@ -652,7 +652,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 match *predicate {\n                     ty::Predicate::Trait(ref trait_predicate) => {\n                         match trait_predicate.skip_binder().trait_ref.self_ty().sty {\n-                            ty::TyParam(ref p) if *p == param_ty => {\n+                            ty::Param(ref p) if *p == param_ty => {\n                                 Some(trait_predicate.to_poly_trait_ref())\n                             }\n                             _ => None,"}, {"sha": "0bef176b499a46532cd92d89f348bfc7b6508c9b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -639,12 +639,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         fn is_local(ty: Ty) -> bool {\n             match ty.sty {\n                 ty::Adt(def, _) => def.did.is_local(),\n-                ty::TyForeign(did) => did.is_local(),\n+                ty::Foreign(did) => did.is_local(),\n \n                 ty::Dynamic(ref tr, ..) => tr.principal()\n                     .map_or(false, |p| p.def_id().is_local()),\n \n-                ty::TyParam(_) => true,\n+                ty::Param(_) => true,\n \n                 // everything else (primitive types etc.) is effectively\n                 // non-local (there are \"edge\" cases, e.g. (LocalType,), but"}, {"sha": "231bf8f1cbca731e194f6b8625a6034103dfa01b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -1647,7 +1647,7 @@ pub fn check_simd<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: DefId\n                 return;\n             }\n             match e.sty {\n-                ty::TyParam(_) => { /* struct<T>(T, T, T, T) is ok */ }\n+                ty::Param(_) => { /* struct<T>(T, T, T, T) is ok */ }\n                 _ if e.is_machine()  => { /* struct(u8, u8, u8, u8) is ok */ }\n                 _ => {\n                     span_err!(tcx.sess, sp, E0077,\n@@ -5155,7 +5155,7 @@ pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut types_used = vec![false; own_counts.types];\n \n     for leaf_ty in ty.walk() {\n-        if let ty::TyParam(ty::ParamTy { idx, .. }) = leaf_ty.sty {\n+        if let ty::Param(ty::ParamTy { idx, .. }) = leaf_ty.sty {\n             debug!(\"Found use of ty param num {}\", idx);\n             types_used[idx as usize - own_counts.lifetimes] = true;\n         } else if let ty::Error = leaf_ty.sty {"}, {"sha": "69ef89137346d207ec2e70ea765ccb5719caf393", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -311,7 +311,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g. \"Hello \" += \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n-                                } else if let ty::TyParam(_) = lhs_ty.sty {\n+                                } else if let ty::Param(_) = lhs_ty.sty {\n                                     // FIXME: point to span of param\n                                     err.note(&format!(\n                                         \"`{}` might need a bound for `{}`\",\n@@ -385,7 +385,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g. \"Hello \" + \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n-                                } else if let ty::TyParam(_) = lhs_ty.sty {\n+                                } else if let ty::Param(_) = lhs_ty.sty {\n                                     // FIXME: point to span of param\n                                     err.note(&format!(\n                                         \"`{}` might need a bound for `{}`\","}, {"sha": "99e0e8775b0cddf413dd35f6780265fe2ecb28d6", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -454,7 +454,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n                 match t.sty {\n-                    ty::TyParam(p) => {\n+                    ty::Param(p) => {\n                         self.params.insert(p.idx);\n                         t.super_visit_with(self)\n                     }\n@@ -588,7 +588,7 @@ fn check_existential_types<'a, 'fcx, 'gcx, 'tcx>(\n                         for (subst, param) in substs.iter().zip(&generics.params) {\n                             match subst.unpack() {\n                                 ty::subst::UnpackedKind::Type(ty) => match ty.sty {\n-                                    ty::TyParam(..) => {},\n+                                    ty::Param(..) => {},\n                                     // prevent `fn foo() -> Foo<u32>` from being defining\n                                     _ => {\n                                         tcx"}, {"sha": "1e147b6c2638d02e11794764314dca09f8a7cfd7", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -417,7 +417,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                     fldop: |ty| {\n                         trace!(\"checking type {:?}: {:#?}\", ty, ty.sty);\n                         // find a type parameter\n-                        if let ty::TyParam(..) = ty.sty {\n+                        if let ty::Param(..) = ty.sty {\n                             // look it up in the substitution list\n                             assert_eq!(anon_defn.substs.len(), generics.params.len());\n                             for (subst, param) in anon_defn.substs.iter().zip(&generics.params) {"}, {"sha": "857ade7a423782760762467d345d4e89ac63112d", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentCollect<'a, 'tcx> {\n             ty::Adt(def, _) => {\n                 self.check_def_id(item, def.did);\n             }\n-            ty::TyForeign(did) => {\n+            ty::Foreign(did) => {\n                 self.check_def_id(item, did);\n             }\n             ty::Dynamic(ref data, ..) if data.principal().is_some() => {"}, {"sha": "f9b89488232d26e5b098b7efffa7bdd1a4faa041", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -115,7 +115,7 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     let self_ty = trait_ref.self_ty();\n                     let opt_self_def_id = match self_ty.sty {\n                         ty::Adt(self_def, _) => Some(self_def.did),\n-                        ty::TyForeign(did) => Some(did),\n+                        ty::Foreign(did) => Some(did),\n                         _ => None,\n                     };\n "}, {"sha": "143285782296db9e8e447e7373080cf114b6e2b7", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -350,7 +350,7 @@ fn is_param<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = ast_ty.node {\n         match path.def {\n             Def::SelfTy(Some(def_id), None) |\n-            Def::TyParam(def_id) => {\n+            Def::Param(def_id) => {\n                 def_id == tcx.hir.local_def_id(param_id)\n             }\n             _ => false"}, {"sha": "37b0b83ccd0880851c6a523e55575e245e11b396", "filename": "src/librustc_typeck/constrained_type_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_type_params.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n                 // projections are not injective\n                 return false;\n             }\n-            ty::TyParam(data) => {\n+            ty::Param(data) => {\n                 self.parameters.push(Parameter::from(data));\n             }\n             _ => {}"}, {"sha": "3d5b499bdc75ff569d40eda1d8a4879d83ef7ec6", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -262,7 +262,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n \n         match ty.sty {\n             ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n-            ty::TyStr | ty::Never | ty::TyForeign(..) => {\n+            ty::TyStr | ty::Never | ty::Foreign(..) => {\n                 // leaf type -- noop\n             }\n \n@@ -323,7 +323,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 }\n             }\n \n-            ty::TyParam(ref data) => {\n+            ty::Param(ref data) => {\n                 self.add_constraint(current, data.idx, variance);\n             }\n "}, {"sha": "ec5db1e7f9abedca190b35febbbe2ee4f6e2d459", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -83,7 +83,7 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHa\n             ret.extend(build_impls(cx, did, true));\n             clean::EnumItem(build_enum(cx, did))\n         }\n-        Def::TyForeign(did) => {\n+        Def::Foreign(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Foreign);\n             ret.extend(build_impls(cx, did, false));\n             clean::ForeignTypeItem"}, {"sha": "ab97c4400d3297ceb88315a48418f5e4fb522651", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -2411,7 +2411,7 @@ impl Clean<Type> for hir::Ty {\n                     return new_ty;\n                 }\n \n-                if let Def::TyParam(did) = path.def {\n+                if let Def::Param(did) = path.def {\n                     if let Some(bounds) = cx.impl_trait_bounds.borrow_mut().remove(&did) {\n                         return ImplTrait(bounds);\n                     }\n@@ -2460,7 +2460,7 @@ impl Clean<Type> for hir::Ty {\n                                 }\n                                 hir::GenericParamKind::Type { ref default, .. } => {\n                                     let ty_param_def =\n-                                        Def::TyParam(cx.tcx.hir.local_def_id(param.id));\n+                                        Def::Param(cx.tcx.hir.local_def_id(param.id));\n                                     let mut j = 0;\n                                     let type_ = generic_args.args.iter().find_map(|arg| {\n                                         match arg {\n@@ -2602,7 +2602,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     is_generic: false,\n                 }\n             }\n-            ty::TyForeign(did) => {\n+            ty::Foreign(did) => {\n                 inline::record_extern_fqn(cx, did, TypeKind::Foreign);\n                 let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n                                          None, false, vec![], Substs::empty());\n@@ -2661,7 +2661,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n             ty::Projection(ref data) => data.clean(cx),\n \n-            ty::TyParam(ref p) => Generic(p.name.to_string()),\n+            ty::Param(ref p) => Generic(p.name.to_string()),\n \n             ty::Anon(def_id, substs) => {\n                 // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n@@ -3710,10 +3710,10 @@ fn resolve_type(cx: &DocContext,\n         Def::SelfTy(..) if path.segments.len() == 1 => {\n             return Generic(keywords::SelfType.name().to_string());\n         }\n-        Def::TyParam(..) if path.segments.len() == 1 => {\n+        Def::Param(..) if path.segments.len() == 1 => {\n             return Generic(format!(\"{:#}\", path));\n         }\n-        Def::SelfTy(..) | Def::TyParam(..) | Def::AssociatedTy(..) => true,\n+        Def::SelfTy(..) | Def::Param(..) | Def::AssociatedTy(..) => true,\n         _ => false,\n     };\n     let did = register_def(&*cx, path.def);\n@@ -3731,7 +3731,7 @@ pub fn register_def(cx: &DocContext, def: Def) -> DefId {\n         Def::Struct(i) => (i, TypeKind::Struct),\n         Def::Union(i) => (i, TypeKind::Union),\n         Def::Mod(i) => (i, TypeKind::Module),\n-        Def::TyForeign(i) => (i, TypeKind::Foreign),\n+        Def::Foreign(i) => (i, TypeKind::Foreign),\n         Def::Const(i) => (i, TypeKind::Const),\n         Def::Static(i, _) => (i, TypeKind::Static),\n         Def::Variant(i) => (cx.tcx.parent_def_id(i).expect(\"cannot get parent def id\"),"}, {"sha": "d08031cd219001c83d24fd24c878588b1afd65d7", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> DocContext<'a, 'tcx, 'rcx, 'cstore> {\n                 None,\n                 P(hir::Path {\n                     span: DUMMY_SP,\n-                    def: Def::TyParam(param.def_id),\n+                    def: Def::Param(param.def_id),\n                     segments: HirVec::from_vec(vec![\n                         hir::PathSegment::from_ident(Ident::from_interned_str(param.name))\n                     ]),"}, {"sha": "db32a324521c6435e87dfd55fb985224c6496c44", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -267,7 +267,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n                 Def::Struct(did) |\n                 Def::Union(did) |\n                 Def::Enum(did) |\n-                Def::TyForeign(did) |\n+                Def::Foreign(did) |\n                 Def::TyAlias(did) if !self_is_hidden => {\n                     self.cx.access_levels.borrow_mut().map.insert(did, AccessLevel::Public);\n                 },"}, {"sha": "50ebbacc506b9eeaef8fde518783544c3e6bd2d3", "filename": "src/test/run-pass/auxiliary/issue13507.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -89,7 +89,7 @@ pub mod testtypes {\n     pub type FooNil = ();\n     pub type FooTuple = (u8, i8, bool);\n \n-    // Skipping TyParam\n+    // Skipping Param\n \n     // Skipping Infer\n "}, {"sha": "e836d5a9844741c4c68493d2ba43490f20ee939b", "filename": "src/test/ui/privacy/private-inferred-type-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-1.rs?ref=04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "patch": "@@ -11,15 +11,15 @@\n trait Arr0 {\n     fn arr0_secret(&self);\n }\n-trait TyParam {\n+trait Param {\n     fn ty_param_secret(&self);\n }\n \n mod m {\n     struct Priv;\n \n     impl ::Arr0 for [Priv; 0] { fn arr0_secret(&self) {} }\n-    impl ::TyParam for Option<Priv> { fn ty_param_secret(&self) {} }\n+    impl ::Param for Option<Priv> { fn ty_param_secret(&self) {} }\n }\n \n fn main() {"}]}