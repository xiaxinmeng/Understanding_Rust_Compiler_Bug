{"sha": "ce59f1aac53ba209d0a97af720f596f943fcfbaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNTlmMWFhYzUzYmEyMDlkMGE5N2FmNzIwZjU5NmY5NDNmY2ZiYWE=", "commit": {"author": {"name": "Richard Cobbe", "email": "ricobbe@microsoft.com", "date": "2021-07-12T19:46:27Z"}, "committer": {"name": "Richard Cobbe", "email": "ricobbe@microsoft.com", "date": "2021-07-16T18:10:31Z"}, "message": "Consider all fields when comparing DllImports, to remove nondetermininsm in multiple-definitions test", "tree": {"sha": "1057d44c311966db4373bd17d19afdd2b49a138e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1057d44c311966db4373bd17d19afdd2b49a138e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce59f1aac53ba209d0a97af720f596f943fcfbaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce59f1aac53ba209d0a97af720f596f943fcfbaa", "html_url": "https://github.com/rust-lang/rust/commit/ce59f1aac53ba209d0a97af720f596f943fcfbaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce59f1aac53ba209d0a97af720f596f943fcfbaa/comments", "author": {"login": "ricobbe", "id": 30275542, "node_id": "MDQ6VXNlcjMwMjc1NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/30275542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricobbe", "html_url": "https://github.com/ricobbe", "followers_url": "https://api.github.com/users/ricobbe/followers", "following_url": "https://api.github.com/users/ricobbe/following{/other_user}", "gists_url": "https://api.github.com/users/ricobbe/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricobbe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricobbe/subscriptions", "organizations_url": "https://api.github.com/users/ricobbe/orgs", "repos_url": "https://api.github.com/users/ricobbe/repos", "events_url": "https://api.github.com/users/ricobbe/events{/privacy}", "received_events_url": "https://api.github.com/users/ricobbe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ricobbe", "id": 30275542, "node_id": "MDQ6VXNlcjMwMjc1NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/30275542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricobbe", "html_url": "https://github.com/ricobbe", "followers_url": "https://api.github.com/users/ricobbe/followers", "following_url": "https://api.github.com/users/ricobbe/following{/other_user}", "gists_url": "https://api.github.com/users/ricobbe/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricobbe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricobbe/subscriptions", "organizations_url": "https://api.github.com/users/ricobbe/orgs", "repos_url": "https://api.github.com/users/ricobbe/repos", "events_url": "https://api.github.com/users/ricobbe/events{/privacy}", "received_events_url": "https://api.github.com/users/ricobbe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5a2ccee81406303324016d03399fac68ceb6718", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a2ccee81406303324016d03399fac68ceb6718", "html_url": "https://github.com/rust-lang/rust/commit/b5a2ccee81406303324016d03399fac68ceb6718"}], "stats": {"total": 166, "additions": 91, "deletions": 75}, "files": [{"sha": "e32dae49131ab0487d7e0a704425f54ffc7cf6b0", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce59f1aac53ba209d0a97af720f596f943fcfbaa/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce59f1aac53ba209d0a97af720f596f943fcfbaa/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=ce59f1aac53ba209d0a97af720f596f943fcfbaa", "patch": "@@ -221,9 +221,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             sess,\n             &codegen_results,\n             outputs,\n-        );\n-\n-        Ok(())\n+        )\n     }\n }\n "}, {"sha": "aa4db1622b233fcac03486718649d51e7aa5fc96", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce59f1aac53ba209d0a97af720f596f943fcfbaa/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce59f1aac53ba209d0a97af720f596f943fcfbaa/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=ce59f1aac53ba209d0a97af720f596f943fcfbaa", "patch": "@@ -292,9 +292,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n \n         // Run the linker on any artifacts that resulted from the LLVM run.\n         // This should produce either a finished executable or library.\n-        link_binary::<LlvmArchiveBuilder<'_>>(sess, &codegen_results, outputs);\n-\n-        Ok(())\n+        link_binary::<LlvmArchiveBuilder<'_>>(sess, &codegen_results, outputs)\n     }\n }\n "}, {"sha": "773a1c500b2f6e324a2b32ac18a09df9935eaa9e", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 49, "deletions": 65, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/ce59f1aac53ba209d0a97af720f596f943fcfbaa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce59f1aac53ba209d0a97af720f596f943fcfbaa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=ce59f1aac53ba209d0a97af720f596f943fcfbaa", "patch": "@@ -1,9 +1,9 @@\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n-use rustc_errors::Handler;\n+use rustc_errors::{ErrorReported, Handler};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n-use rustc_middle::middle::cstore::{DllCallingConvention, DllImport};\n+use rustc_middle::middle::cstore::DllImport;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest};\n@@ -35,7 +35,6 @@ use object::{Architecture, BinaryFormat, Endianness, FileFlags, SectionFlags, Se\n use tempfile::Builder as TempFileBuilder;\n \n use std::ffi::OsString;\n-use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n use std::{ascii, char, env, fmt, fs, io, mem, str};\n@@ -54,7 +53,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n     sess: &'a Session,\n     codegen_results: &CodegenResults,\n     outputs: &OutputFilenames,\n-) {\n+) -> Result<(), ErrorReported> {\n     let _timer = sess.timer(\"link_binary\");\n     let output_metadata = sess.opts.output_types.contains_key(&OutputType::Metadata);\n     for &crate_type in sess.crate_types().iter() {\n@@ -95,11 +94,17 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n             match crate_type {\n                 CrateType::Rlib => {\n                     let _timer = sess.timer(\"link_rlib\");\n-                    link_rlib::<B>(sess, codegen_results, RlibFlavor::Normal, &out_filename, &path)\n-                        .build();\n+                    link_rlib::<B>(\n+                        sess,\n+                        codegen_results,\n+                        RlibFlavor::Normal,\n+                        &out_filename,\n+                        &path,\n+                    )?\n+                    .build();\n                 }\n                 CrateType::Staticlib => {\n-                    link_staticlib::<B>(sess, codegen_results, &out_filename, &path);\n+                    link_staticlib::<B>(sess, codegen_results, &out_filename, &path)?;\n                 }\n                 _ => {\n                     link_natively::<B>(\n@@ -145,6 +150,8 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n             }\n         }\n     });\n+\n+    Ok(())\n }\n \n pub fn each_linked_rlib(\n@@ -220,7 +227,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     flavor: RlibFlavor,\n     out_filename: &Path,\n     tmpdir: &MaybeTempDir,\n-) -> B {\n+) -> Result<B, ErrorReported> {\n     info!(\"preparing rlib to {:?}\", out_filename);\n     let mut ab = <B as ArchiveBuilder>::new(sess, out_filename, None);\n \n@@ -259,7 +266,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     for (raw_dylib_name, raw_dylib_imports) in\n-        collate_raw_dylibs(sess, &codegen_results.crate_info.used_libraries)\n+        collate_raw_dylibs(sess, &codegen_results.crate_info.used_libraries)?\n     {\n         ab.inject_dll_import_lib(&raw_dylib_name, &raw_dylib_imports, tmpdir);\n     }\n@@ -312,7 +319,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n             }\n         }\n     }\n-    return ab;\n+    return Ok(ab);\n \n     // For rlibs we \"pack\" rustc metadata into a dummy object file. When rustc\n     // creates a dylib crate type it will pass `--whole-archive` (or the\n@@ -454,65 +461,40 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n fn collate_raw_dylibs(\n     sess: &Session,\n     used_libraries: &[NativeLib],\n-) -> Vec<(String, Vec<DllImport>)> {\n-    let mut dylib_table: FxHashMap<String, FxHashSet<DllImport>> = FxHashMap::default();\n+) -> Result<Vec<(String, Vec<DllImport>)>, ErrorReported> {\n+    // Use index maps to preserve original order of imports and libraries.\n+    let mut dylib_table = FxIndexMap::<String, FxIndexMap<Symbol, &DllImport>>::default();\n \n     for lib in used_libraries {\n         if lib.kind == NativeLibKind::RawDylib {\n-            let name = lib.name.unwrap_or_else(||\n-                bug!(\"`link` attribute with kind = \\\"raw-dylib\\\" and no name should have caused error earlier\")\n-            );\n-            let name = if matches!(lib.verbatim, Some(true)) {\n-                name.to_string()\n-            } else {\n-                format!(\"{}.dll\", name)\n-            };\n-            dylib_table.entry(name).or_default().extend(lib.dll_imports.iter().cloned());\n-        }\n-    }\n-\n-    // Rustc already signals an error if we have two imports with the same name but different\n-    // calling conventions (or function signatures), so we don't have pay attention to those\n-    // when ordering.\n-    // FIXME: when we add support for ordinals, figure out if we need to do anything if we\n-    // have two DllImport values with the same name but different ordinals.\n-    let mut result: Vec<(String, Vec<DllImport>)> = dylib_table\n-        .into_iter()\n-        .map(|(lib_name, import_table)| {\n-            let mut imports = Vec::from_iter(import_table.into_iter());\n-            imports.sort_unstable_by_key(|x: &DllImport| x.name.as_str());\n-            (lib_name, imports)\n-        })\n-        .collect::<Vec<_>>();\n-    result.sort_unstable_by(|a: &(String, Vec<DllImport>), b: &(String, Vec<DllImport>)| {\n-        a.0.cmp(&b.0)\n-    });\n-    let result = result;\n-\n-    // Check for multiple imports with the same name but different calling conventions or\n-    // (when relevant) argument list sizes.  Rustc only signals an error for this if the\n-    // declarations are at the same scope level; if one shadows the other, we only get a lint\n-    // warning.\n-    for (library, imports) in &result {\n-        let mut import_table: FxHashMap<Symbol, DllCallingConvention> = FxHashMap::default();\n-        for import in imports {\n-            if let Some(old_convention) =\n-                import_table.insert(import.name, import.calling_convention)\n-            {\n-                if import.calling_convention != old_convention {\n-                    sess.span_fatal(\n-                        import.span,\n-                        &format!(\n-                            \"multiple definitions of external function `{}` from library `{}` have different calling conventions\",\n-                            import.name,\n-                            library,\n-                    ));\n+            let ext = if matches!(lib.verbatim, Some(true)) { \"\" } else { \".dll\" };\n+            let name = format!(\"{}{}\", lib.name.expect(\"unnamed raw-dylib library\"), ext);\n+            let imports = dylib_table.entry(name.clone()).or_default();\n+            for import in &lib.dll_imports {\n+                if let Some(old_import) = imports.insert(import.name, import) {\n+                    // FIXME: when we add support for ordinals, figure out if we need to do anything\n+                    // if we have two DllImport values with the same name but different ordinals.\n+                    if import.calling_convention != old_import.calling_convention {\n+                        sess.span_err(\n+                            import.span,\n+                            &format!(\n+                                \"multiple declarations of external function `{}` from \\\n+                                 library `{}` have different calling conventions\",\n+                                import.name, name,\n+                            ),\n+                        );\n+                    }\n                 }\n             }\n         }\n     }\n-\n-    result\n+    sess.compile_status()?;\n+    Ok(dylib_table\n+        .into_iter()\n+        .map(|(name, imports)| {\n+            (name, imports.into_iter().map(|(_, import)| import.clone()).collect())\n+        })\n+        .collect())\n }\n \n /// Create a static archive.\n@@ -531,9 +513,9 @@ fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n     codegen_results: &CodegenResults,\n     out_filename: &Path,\n     tempdir: &MaybeTempDir,\n-) {\n+) -> Result<(), ErrorReported> {\n     let mut ab =\n-        link_rlib::<B>(sess, codegen_results, RlibFlavor::StaticlibBase, out_filename, tempdir);\n+        link_rlib::<B>(sess, codegen_results, RlibFlavor::StaticlibBase, out_filename, tempdir)?;\n     let mut all_native_libs = vec![];\n \n     let res = each_linked_rlib(&codegen_results.crate_info, &mut |cnum, path| {\n@@ -581,6 +563,8 @@ fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n             print_native_static_libs(sess, &all_native_libs);\n         }\n     }\n+\n+    Ok(())\n }\n \n fn escape_stdout_stderr_string(s: &[u8]) -> String {"}, {"sha": "04a1f39663c6fd663c3e7262a5d751b36f22bb06", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce59f1aac53ba209d0a97af720f596f943fcfbaa/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce59f1aac53ba209d0a97af720f596f943fcfbaa/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ce59f1aac53ba209d0a97af720f596f943fcfbaa", "patch": "@@ -1569,7 +1569,7 @@ impl EncodeContext<'a, 'tcx> {\n     fn encode_native_libraries(&mut self) -> Lazy<[NativeLib]> {\n         empty_proc_macro!(self);\n         let used_libraries = self.tcx.native_libraries(LOCAL_CRATE);\n-        self.lazy(used_libraries.iter().cloned())\n+        self.lazy(used_libraries.iter())\n     }\n \n     fn encode_foreign_modules(&mut self) -> Lazy<[ForeignModule]> {"}, {"sha": "61bc2d60124109ccece7a2aaf358704ef20c878a", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce59f1aac53ba209d0a97af720f596f943fcfbaa/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce59f1aac53ba209d0a97af720f596f943fcfbaa/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=ce59f1aac53ba209d0a97af720f596f943fcfbaa", "patch": "@@ -66,7 +66,7 @@ pub enum LinkagePreference {\n     RequireStatic,\n }\n \n-#[derive(Clone, Debug, Encodable, Decodable, HashStable)]\n+#[derive(Debug, Encodable, Decodable, HashStable)]\n pub struct NativeLib {\n     pub kind: NativeLibKind,\n     pub name: Option<Symbol>,\n@@ -77,7 +77,7 @@ pub struct NativeLib {\n     pub dll_imports: Vec<DllImport>,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Encodable, Decodable, Hash, HashStable)]\n+#[derive(Clone, Debug, Encodable, Decodable, HashStable)]\n pub struct DllImport {\n     pub name: Symbol,\n     pub ordinal: Option<u16>,\n@@ -94,7 +94,7 @@ pub struct DllImport {\n ///\n /// The usize value, where present, indicates the size of the function's argument list\n /// in bytes.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Encodable, Decodable, Hash, HashStable)]\n+#[derive(Clone, PartialEq, Debug, Encodable, Decodable, HashStable)]\n pub enum DllCallingConvention {\n     C,\n     Stdcall(usize),"}, {"sha": "d02bebc9d61d26a87d895d88743b7f2046a52613", "filename": "src/test/ui/rfc-2627-raw-dylib/multiple-declarations.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce59f1aac53ba209d0a97af720f596f943fcfbaa/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce59f1aac53ba209d0a97af720f596f943fcfbaa/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs?ref=ce59f1aac53ba209d0a97af720f596f943fcfbaa", "patch": "@@ -0,0 +1,19 @@\n+// only-i686-pc-windows-msvc\n+// compile-flags: --crate-type lib --emit link\n+#![allow(clashing_extern_declarations)]\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+#[link(name = \"foo\", kind = \"raw-dylib\")]\n+extern \"C\" {\n+    fn f(x: i32);\n+}\n+\n+pub fn lib_main() {\n+    #[link(name = \"foo\", kind = \"raw-dylib\")]\n+    extern \"stdcall\" {\n+        fn f(x: i32);\n+        //~^ ERROR multiple declarations of external function `f` from library `foo.dll` have different calling conventions\n+    }\n+\n+    unsafe { f(42); }\n+}"}, {"sha": "a9cfd6b23f9f8d8df177d128e41c89b089c084ad", "filename": "src/test/ui/rfc-2627-raw-dylib/multiple-declarations.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce59f1aac53ba209d0a97af720f596f943fcfbaa/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce59f1aac53ba209d0a97af720f596f943fcfbaa/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr?ref=ce59f1aac53ba209d0a97af720f596f943fcfbaa", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/multiple-declarations.rs:4:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: multiple declarations of external function `f` from library `foo.dll` have different calling conventions\n+  --> $DIR/multiple-declarations.rs:14:9\n+   |\n+LL |         fn f(x: i32);\n+   |         ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}