{"sha": "afe1a256ce6612c8c98b5f8a15f797dced1cf696", "node_id": "C_kwDOAAsO6NoAKGFmZTFhMjU2Y2U2NjEyYzhjOThiNWY4YTE1Zjc5N2RjZWQxY2Y2OTY", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-28T08:32:11Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-29T14:30:54Z"}, "message": "Use futex-based locks and thread parker on OpenBSD.", "tree": {"sha": "358b01537f80d04e3be16067348df5da42bf91e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/358b01537f80d04e3be16067348df5da42bf91e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afe1a256ce6612c8c98b5f8a15f797dced1cf696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afe1a256ce6612c8c98b5f8a15f797dced1cf696", "html_url": "https://github.com/rust-lang/rust/commit/afe1a256ce6612c8c98b5f8a15f797dced1cf696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afe1a256ce6612c8c98b5f8a15f797dced1cf696/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87937d3b6c302dfedfa5c4b94d0a30985d46298d", "url": "https://api.github.com/repos/rust-lang/rust/commits/87937d3b6c302dfedfa5c4b94d0a30985d46298d", "html_url": "https://github.com/rust-lang/rust/commit/87937d3b6c302dfedfa5c4b94d0a30985d46298d"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "f86dd560d633986699ce0c51118074b7f8dab946", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/afe1a256ce6612c8c98b5f8a15f797dced1cf696/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe1a256ce6612c8c98b5f8a15f797dced1cf696/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=afe1a256ce6612c8c98b5f8a15f797dced1cf696", "patch": "@@ -1,7 +1,8 @@\n #![cfg(any(\n     target_os = \"linux\",\n     target_os = \"android\",\n-    all(target_os = \"emscripten\", target_feature = \"atomics\")\n+    all(target_os = \"emscripten\", target_feature = \"atomics\"),\n+    target_os = \"openbsd\",\n ))]\n \n use crate::sync::atomic::AtomicU32;\n@@ -81,6 +82,55 @@ pub fn futex_wake_all(futex: &AtomicU32) {\n     }\n }\n \n+#[cfg(target_os = \"openbsd\")]\n+pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n+    use crate::convert::TryInto;\n+    use crate::ptr::{null, null_mut};\n+    let timespec = timeout.and_then(|d| {\n+        Some(libc::timespec {\n+            // Sleep forever if the timeout is longer than fits in a timespec.\n+            tv_sec: d.as_secs().try_into().ok()?,\n+            // This conversion never truncates, as subsec_nanos is always <1e9.\n+            tv_nsec: d.subsec_nanos() as _,\n+        })\n+    });\n+\n+    let r = unsafe {\n+        libc::futex(\n+            futex as *const AtomicU32 as *mut u32,\n+            libc::FUTEX_WAIT,\n+            expected as i32,\n+            timespec.as_ref().map_or(null(), |t| t as *const libc::timespec),\n+            null_mut(),\n+        )\n+    };\n+\n+    r == 0 || super::os::errno() != libc::ETIMEDOUT\n+}\n+\n+#[cfg(target_os = \"openbsd\")]\n+pub fn futex_wake(futex: &AtomicU32) -> bool {\n+    use crate::ptr::{null, null_mut};\n+    unsafe {\n+        libc::futex(futex as *const AtomicU32 as *mut u32, libc::FUTEX_WAKE, 1, null(), null_mut())\n+            > 0\n+    }\n+}\n+\n+#[cfg(target_os = \"openbsd\")]\n+pub fn futex_wake_all(futex: &AtomicU32) {\n+    use crate::ptr::{null, null_mut};\n+    unsafe {\n+        libc::futex(\n+            futex as *const AtomicU32 as *mut u32,\n+            libc::FUTEX_WAKE,\n+            i32::MAX,\n+            null(),\n+            null_mut(),\n+        );\n+    }\n+}\n+\n #[cfg(target_os = \"emscripten\")]\n extern \"C\" {\n     fn emscripten_futex_wake(addr: *const AtomicU32, count: libc::c_int) -> libc::c_int;"}, {"sha": "f7ec4763a046354397fa62dcc44bd9230d730ebf", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afe1a256ce6612c8c98b5f8a15f797dced1cf696/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe1a256ce6612c8c98b5f8a15f797dced1cf696/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=afe1a256ce6612c8c98b5f8a15f797dced1cf696", "patch": "@@ -3,6 +3,7 @@ cfg_if::cfg_if! {\n         target_os = \"linux\",\n         target_os = \"android\",\n         all(target_os = \"emscripten\", target_feature = \"atomics\"),\n+        target_os = \"openbsd\",\n     ))] {\n         mod futex;\n         mod futex_rwlock;"}, {"sha": "bb6a40f8379845d1035e75bbf50ddcfae965e50f", "filename": "library/std/src/sys_common/thread_parker/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afe1a256ce6612c8c98b5f8a15f797dced1cf696/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe1a256ce6612c8c98b5f8a15f797dced1cf696/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs?ref=afe1a256ce6612c8c98b5f8a15f797dced1cf696", "patch": "@@ -3,6 +3,7 @@ cfg_if::cfg_if! {\n         target_os = \"linux\",\n         target_os = \"android\",\n         all(target_arch = \"wasm32\", target_feature = \"atomics\"),\n+        target_os = \"openbsd\",\n     ))] {\n         mod futex;\n         pub use futex::Parker;"}]}