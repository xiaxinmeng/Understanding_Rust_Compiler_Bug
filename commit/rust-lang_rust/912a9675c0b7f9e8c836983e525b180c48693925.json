{"sha": "912a9675c0b7f9e8c836983e525b180c48693925", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMmE5Njc1YzBiN2Y5ZThjODM2OTgzZTUyNWIxODBjNDg2OTM5MjU=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-05-14T21:39:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-15T20:50:33Z"}, "message": "Make `from_bits` in `bitflags!` safe; add `from_bits_truncate`\n\nPreviously, the `from_bits` function in the `std::bitflags::bitflags`\nmacro was marked as unsafe, as it did not check that the bits being\nconverted actually corresponded to flags.\n\nThis patch changes the function to check against the full set of\npossible flags and return an `Option` which is `None` if a non-flag bit\nis set. It also adds a `from_bits_truncate` function which simply zeros\nany bits not corresponding to a flag.\n\nThis addresses the concern raised in https://github.com/mozilla/rust/pull/13897", "tree": {"sha": "3543072ddff4c87068ed5b191db6b57660662fb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3543072ddff4c87068ed5b191db6b57660662fb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/912a9675c0b7f9e8c836983e525b180c48693925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/912a9675c0b7f9e8c836983e525b180c48693925", "html_url": "https://github.com/rust-lang/rust/commit/912a9675c0b7f9e8c836983e525b180c48693925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/912a9675c0b7f9e8c836983e525b180c48693925/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d547de998d33e5b688533f4159ea997c940d9431", "url": "https://api.github.com/repos/rust-lang/rust/commits/d547de998d33e5b688533f4159ea997c940d9431", "html_url": "https://github.com/rust-lang/rust/commit/d547de998d33e5b688533f4159ea997c940d9431"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "046d2875d553101700a56b970ca2c6a72098e52c", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/912a9675c0b7f9e8c836983e525b180c48693925/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912a9675c0b7f9e8c836983e525b180c48693925/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=912a9675c0b7f9e8c836983e525b180c48693925", "patch": "@@ -493,9 +493,7 @@ fn mkstat(stat: &libc::stat) -> io::FileStat {\n     io::FileStat {\n         size: stat.st_size as u64,\n         kind: kind,\n-        perm: unsafe {\n-            io::FilePermission::from_bits(stat.st_mode as u32) & io::AllPermissions\n-        },\n+        perm: io::FilePermission::from_bits_truncate(stat.st_mode as u32),\n         created: mktime(stat.st_ctime as u64, stat.st_ctime_nsec as u64),\n         modified: mktime(stat.st_mtime as u64, stat.st_mtime_nsec as u64),\n         accessed: mktime(stat.st_atime as u64, stat.st_atime_nsec as u64),"}, {"sha": "3222c912dd0857fe6f3afea505dd7b47c6d7eef8", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/912a9675c0b7f9e8c836983e525b180c48693925/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912a9675c0b7f9e8c836983e525b180c48693925/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=912a9675c0b7f9e8c836983e525b180c48693925", "patch": "@@ -492,9 +492,7 @@ fn mkstat(stat: &libc::stat) -> io::FileStat {\n     io::FileStat {\n         size: stat.st_size as u64,\n         kind: kind,\n-        perm: unsafe {\n-          io::FilePermission::from_bits(stat.st_mode as u32)  & io::AllPermissions\n-        },\n+        perm: io::FilePermission::from_bits_truncate(stat.st_mode as u32),\n         created: stat.st_ctime as u64,\n         modified: stat.st_mtime as u64,\n         accessed: stat.st_atime as u64,"}, {"sha": "12636a3c490ad0ca64daafe083f8ff9dea0eb5d7", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/912a9675c0b7f9e8c836983e525b180c48693925/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912a9675c0b7f9e8c836983e525b180c48693925/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=912a9675c0b7f9e8c836983e525b180c48693925", "patch": "@@ -285,9 +285,7 @@ impl FsRequest {\n         FileStat {\n             size: stat.st_size as u64,\n             kind: kind,\n-            perm: unsafe {\n-                io::FilePermission::from_bits(stat.st_mode as u32) & io::AllPermissions\n-            },\n+            perm: io::FilePermission::from_bits_truncate(stat.st_mode as u32),\n             created: to_msec(stat.st_birthtim),\n             modified: to_msec(stat.st_mtim),\n             accessed: to_msec(stat.st_atim),"}, {"sha": "163ccd22552d36fed65495580b6c4a5c1b7798a0", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/912a9675c0b7f9e8c836983e525b180c48693925/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912a9675c0b7f9e8c836983e525b180c48693925/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=912a9675c0b7f9e8c836983e525b180c48693925", "patch": "@@ -136,10 +136,20 @@ macro_rules! bitflags(\n                 self.bits\n             }\n \n-            /// Convert from underlying bit representation. Unsafe because the\n-            /// bits are not guaranteed to represent valid flags.\n-            pub unsafe fn from_bits(bits: $T) -> $BitFlags {\n-                $BitFlags { bits: bits }\n+            /// Convert from underlying bit representation, unless that\n+            /// representation contains bits that do not correspond to a flag.\n+            pub fn from_bits(bits: $T) -> ::std::option::Option<$BitFlags> {\n+                if (bits & !$BitFlags::all().bits()) != 0 {\n+                    ::std::option::None\n+                } else {\n+                    ::std::option::Some($BitFlags { bits: bits })\n+                }\n+            }\n+\n+            /// Convert from underlying bit representation, dropping any bits\n+            /// that do not correspond to flags.\n+            pub fn from_bits_truncate(bits: $T) -> $BitFlags {\n+                $BitFlags { bits: bits } & $BitFlags::all()\n             }\n \n             /// Returns `true` if no flags are currently stored.\n@@ -209,6 +219,7 @@ macro_rules! bitflags(\n \n #[cfg(test)]\n mod tests {\n+    use option::{Some, None};\n     use ops::{BitOr, BitAnd, Sub, Not};\n \n     bitflags!(\n@@ -231,9 +242,21 @@ mod tests {\n \n     #[test]\n     fn test_from_bits() {\n-        assert!(unsafe { Flags::from_bits(0x00000000) } == Flags::empty());\n-        assert!(unsafe { Flags::from_bits(0x00000001) } == FlagA);\n-        assert!(unsafe { Flags::from_bits(0x00000111) } == FlagABC);\n+        assert!(Flags::from_bits(0) == Some(Flags::empty()));\n+        assert!(Flags::from_bits(0x1) == Some(FlagA));\n+        assert!(Flags::from_bits(0x10) == Some(FlagB));\n+        assert!(Flags::from_bits(0x11) == Some(FlagA | FlagB));\n+        assert!(Flags::from_bits(0x1000) == None);\n+    }\n+\n+    #[test]\n+    fn test_from_bits_truncate() {\n+        assert!(Flags::from_bits_truncate(0) == Flags::empty());\n+        assert!(Flags::from_bits_truncate(0x1) == FlagA);\n+        assert!(Flags::from_bits_truncate(0x10) == FlagB);\n+        assert!(Flags::from_bits_truncate(0x11) == (FlagA | FlagB));\n+        assert!(Flags::from_bits_truncate(0x1000) == Flags::empty());\n+        assert!(Flags::from_bits_truncate(0x1001) == FlagA);\n     }\n \n     #[test]"}]}