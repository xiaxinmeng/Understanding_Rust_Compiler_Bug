{"sha": "42e4c1aef6594aac2d27b4bb31896e023863817d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZTRjMWFlZjY1OTRhYWMyZDI3YjRiYjMxODk2ZTAyMzg2MzgxN2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-30T20:03:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-30T20:03:29Z"}, "message": "rollup merge of #21747: nikomatsakis/issue-21726-projection-subtyping\n\nMake subtyping for projection types stricter. Fixes #21726.\n\nr? @pnkfelix", "tree": {"sha": "d480f74a516a9aadc8ba8e305ea88f3c7b0b76a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d480f74a516a9aadc8ba8e305ea88f3c7b0b76a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42e4c1aef6594aac2d27b4bb31896e023863817d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42e4c1aef6594aac2d27b4bb31896e023863817d", "html_url": "https://github.com/rust-lang/rust/commit/42e4c1aef6594aac2d27b4bb31896e023863817d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42e4c1aef6594aac2d27b4bb31896e023863817d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8f2726b398631d2649248c4b6416f43a298f3da", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f2726b398631d2649248c4b6416f43a298f3da", "html_url": "https://github.com/rust-lang/rust/commit/c8f2726b398631d2649248c4b6416f43a298f3da"}, {"sha": "f1ace34d5ca0233e1649b699f795efc108f1e685", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ace34d5ca0233e1649b699f795efc108f1e685", "html_url": "https://github.com/rust-lang/rust/commit/f1ace34d5ca0233e1649b699f795efc108f1e685"}], "stats": {"total": 139, "additions": 137, "deletions": 2}, "files": [{"sha": "8b29ef9b8800feb9499c0ba8a17871517bf7c962", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42e4c1aef6594aac2d27b4bb31896e023863817d/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e4c1aef6594aac2d27b4bb31896e023863817d/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=42e4c1aef6594aac2d27b4bb31896e023863817d", "patch": "@@ -263,7 +263,13 @@ pub trait Combine<'tcx> : Sized {\n             Err(ty::terr_projection_name_mismatched(\n                 expected_found(self, a.item_name, b.item_name)))\n         } else {\n-            let trait_ref = try!(self.trait_refs(&*a.trait_ref, &*b.trait_ref));\n+            // Note that the trait refs for the projection must be\n+            // *equal*. This is because there is no inherent\n+            // relationship between `<T as Foo>::Bar` and `<U as\n+            // Foo>::Bar` that we can derive based on how `T` relates\n+            // to `U`. Issue #21726 contains further discussion and\n+            // in-depth examples.\n+            let trait_ref = try!(self.equate().trait_refs(&*a.trait_ref, &*b.trait_ref));\n             Ok(ty::ProjectionTy { trait_ref: Rc::new(trait_ref), item_name: a.item_name })\n         }\n     }"}, {"sha": "6c5950e4df5bab540f01fc43893f299dc6acd096", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42e4c1aef6594aac2d27b4bb31896e023863817d/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e4c1aef6594aac2d27b4bb31896e023863817d/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=42e4c1aef6594aac2d27b4bb31896e023863817d", "patch": "@@ -793,7 +793,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                     trait_def.generics.types.as_slice(),\n                     trait_def.generics.regions.as_slice(),\n                     trait_ref.substs,\n-                    variance);\n+                    self.invariant);\n             }\n \n             ty::ty_trait(ref data) => {"}, {"sha": "f9106ba3960b13879ebebe6781b76f0ce6c5d2c5", "filename": "src/test/compile-fail/associated-types-subtyping-1.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/42e4c1aef6594aac2d27b4bb31896e023863817d/src%2Ftest%2Fcompile-fail%2Fassociated-types-subtyping-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e4c1aef6594aac2d27b4bb31896e023863817d/src%2Ftest%2Fcompile-fail%2Fassociated-types-subtyping-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-subtyping-1.rs?ref=42e4c1aef6594aac2d27b4bb31896e023863817d", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused_variables)]\n+\n+trait Trait<'a> {\n+    type Type;\n+\n+    fn method(&'a self) { }\n+}\n+\n+fn method1<'a,'b,T>(x: &'a T, y: &'b T)\n+    where T : for<'z> Trait<'z>, 'a : 'b\n+{\n+    // Note that &'static T <: &'a T.\n+    let a: <T as Trait<'a>>::Type = loop { };\n+    let b: <T as Trait<'b>>::Type = loop { };\n+    let _: <T as Trait<'a>>::Type = a;\n+}\n+\n+fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n+    where T : for<'z> Trait<'z>, 'a : 'b\n+{\n+    // Note that &'static T <: &'a T.\n+    let a: <T as Trait<'a>>::Type = loop { };\n+    let b: <T as Trait<'b>>::Type = loop { };\n+    let _: <T as Trait<'b>>::Type = a; //~ ERROR mismatched types\n+}\n+\n+fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n+    where T : for<'z> Trait<'z>, 'a : 'b\n+{\n+    // Note that &'static T <: &'a T.\n+    let a: <T as Trait<'a>>::Type = loop { };\n+    let b: <T as Trait<'b>>::Type = loop { };\n+    let _: <T as Trait<'a>>::Type = b; //~ ERROR mismatched types\n+}\n+\n+fn method4<'a,'b,T>(x: &'a T, y: &'b T)\n+    where T : for<'z> Trait<'z>, 'a : 'b\n+{\n+    // Note that &'static T <: &'a T.\n+    let a: <T as Trait<'a>>::Type = loop { };\n+    let b: <T as Trait<'b>>::Type = loop { };\n+    let _: <T as Trait<'b>>::Type = b;\n+}\n+\n+fn main() { }"}, {"sha": "ecb2287769bbd01c045c502512a9d7f72eb780c9", "filename": "src/test/compile-fail/variance-associated-types.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/42e4c1aef6594aac2d27b4bb31896e023863817d/src%2Ftest%2Fcompile-fail%2Fvariance-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e4c1aef6594aac2d27b4bb31896e023863817d/src%2Ftest%2Fcompile-fail%2Fvariance-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-associated-types.rs?ref=42e4c1aef6594aac2d27b4bb31896e023863817d", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the variance computation considers types/regions that\n+// appear in projections to be invariant.\n+\n+trait Trait<'a> {\n+    type Type;\n+\n+    fn method(&'a self) { }\n+}\n+\n+#[rustc_variance]\n+struct Foo<'a, T : Trait<'a>> { //~ ERROR ItemVariances(types=[[+];[];[]], regions=[[-];[];[]])\n+    field: (T, &'a ())\n+}\n+\n+#[rustc_variance]\n+struct Bar<'a, T : Trait<'a>> { //~ ERROR ItemVariances(types=[[o];[];[]], regions=[[o];[];[]])\n+    field: <T as Trait<'a>>::Type\n+}\n+\n+fn main() { }"}, {"sha": "09d1a3bca6901723076782e3c107d73cc7a771c2", "filename": "src/test/run-pass/issue-21726.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/42e4c1aef6594aac2d27b4bb31896e023863817d/src%2Ftest%2Frun-pass%2Fissue-21726.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e4c1aef6594aac2d27b4bb31896e023863817d/src%2Ftest%2Frun-pass%2Fissue-21726.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21726.rs?ref=42e4c1aef6594aac2d27b4bb31896e023863817d", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #21726: an issue arose around the rules for\n+// subtyping of projection types that resulted in an unconstrained\n+// region, yielding region inference failures.\n+\n+fn main() { }\n+\n+fn foo<'a>(s: &'a str) {\n+    let b: B<()> = B::new(s, ());\n+    b.get_short();\n+}\n+\n+trait IntoRef<'a> {\n+    type T: Clone;\n+    fn into_ref(self, &'a str) -> Self::T;\n+}\n+\n+impl<'a> IntoRef<'a> for () {\n+    type T = &'a str;\n+    fn into_ref(self, s: &'a str) -> &'a str {\n+        s\n+    }\n+}\n+\n+struct B<'a, P: IntoRef<'a>>(P::T);\n+\n+impl<'a, P: IntoRef<'a>> B<'a, P> {\n+    fn new(s: &'a str, i: P) -> B<'a, P> {\n+        B(i.into_ref(s))\n+    }\n+\n+    fn get_short(&self) -> P::T {\n+        self.0.clone()\n+    }\n+}"}]}