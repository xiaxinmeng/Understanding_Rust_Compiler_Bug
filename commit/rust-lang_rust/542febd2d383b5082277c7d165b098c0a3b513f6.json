{"sha": "542febd2d383b5082277c7d165b098c0a3b513f6", "node_id": "C_kwDOAAsO6NoAKDU0MmZlYmQyZDM4M2I1MDgyMjc3YzdkMTY1YjA5OGMwYTNiNTEzZjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-20T13:33:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-20T13:33:50Z"}, "message": "Auto merge of #103290 - matthiaskrgr:rollup-ngozai3, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #103197 (Stabilize proc_macro::Span::source_text)\n - #103251 (Fix item declaration highlighting)\n - #103262 (Adjusting test to needs-unwind, with linking issue)\n - #103268 (rustdoc: remove no-op CSS `nav.sub { font-size: 1rem }`)\n - #103272 (Remove extra spaces in docs)\n - #103276 (Erase regions before checking for `Default` in uninitialized binding error)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e69615b35a7c7731da8d8bad39d0a4f99ed12c4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e69615b35a7c7731da8d8bad39d0a4f99ed12c4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/542febd2d383b5082277c7d165b098c0a3b513f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/542febd2d383b5082277c7d165b098c0a3b513f6", "html_url": "https://github.com/rust-lang/rust/commit/542febd2d383b5082277c7d165b098c0a3b513f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/542febd2d383b5082277c7d165b098c0a3b513f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53728ff751df4c271d4ea565b6871057a3504fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/53728ff751df4c271d4ea565b6871057a3504fc5", "html_url": "https://github.com/rust-lang/rust/commit/53728ff751df4c271d4ea565b6871057a3504fc5"}, {"sha": "e29ecb70af4551d1fb73d5cbee776613adfbf507", "url": "https://api.github.com/repos/rust-lang/rust/commits/e29ecb70af4551d1fb73d5cbee776613adfbf507", "html_url": "https://github.com/rust-lang/rust/commit/e29ecb70af4551d1fb73d5cbee776613adfbf507"}], "stats": {"total": 229, "additions": 191, "deletions": 38}, "files": [{"sha": "3f5d9fb62066dad36c2319a4e1d322dceb7a3d1e", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/542febd2d383b5082277c7d165b098c0a3b513f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542febd2d383b5082277c7d165b098c0a3b513f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=542febd2d383b5082277c7d165b098c0a3b513f6", "patch": "@@ -492,10 +492,17 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let Some(default_trait) = tcx.get_diagnostic_item(sym::Default) else {\n                 return false;\n             };\n+            // Regions are already solved, so we must use a fresh InferCtxt,\n+            // but the type has region variables, so erase those.\n             tcx.infer_ctxt()\n                 .build()\n-                .type_implements_trait(default_trait, ty, ty::List::empty(), param_env)\n-                .may_apply()\n+                .type_implements_trait(\n+                    default_trait,\n+                    tcx.erase_regions(ty),\n+                    ty::List::empty(),\n+                    param_env,\n+                )\n+                .must_apply_modulo_regions()\n         };\n \n         let assign_value = match ty.kind() {"}, {"sha": "edc68d6fae51bcb03f01a099ff20b0f489af9780", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/542febd2d383b5082277c7d165b098c0a3b513f6/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542febd2d383b5082277c7d165b098c0a3b513f6/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=542febd2d383b5082277c7d165b098c0a3b513f6", "patch": "@@ -294,7 +294,7 @@ impl AtomicBool {\n     /// ```\n     /// use std::sync::atomic::AtomicBool;\n     ///\n-    /// let atomic_true  = AtomicBool::new(true);\n+    /// let atomic_true = AtomicBool::new(true);\n     /// let atomic_false = AtomicBool::new(false);\n     /// ```\n     #[inline]\n@@ -1179,7 +1179,7 @@ impl<T> AtomicPtr<T> {\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n     /// let ptr = &mut 5;\n-    /// let some_ptr  = AtomicPtr::new(ptr);\n+    /// let some_ptr = AtomicPtr::new(ptr);\n     ///\n     /// let value = some_ptr.load(Ordering::Relaxed);\n     /// ```\n@@ -1206,7 +1206,7 @@ impl<T> AtomicPtr<T> {\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n     /// let ptr = &mut 5;\n-    /// let some_ptr  = AtomicPtr::new(ptr);\n+    /// let some_ptr = AtomicPtr::new(ptr);\n     ///\n     /// let other_ptr = &mut 10;\n     ///\n@@ -1238,7 +1238,7 @@ impl<T> AtomicPtr<T> {\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n     /// let ptr = &mut 5;\n-    /// let some_ptr  = AtomicPtr::new(ptr);\n+    /// let some_ptr = AtomicPtr::new(ptr);\n     ///\n     /// let other_ptr = &mut 10;\n     ///\n@@ -1290,9 +1290,9 @@ impl<T> AtomicPtr<T> {\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n     /// let ptr = &mut 5;\n-    /// let some_ptr  = AtomicPtr::new(ptr);\n+    /// let some_ptr = AtomicPtr::new(ptr);\n     ///\n-    /// let other_ptr   = &mut 10;\n+    /// let other_ptr = &mut 10;\n     ///\n     /// let value = some_ptr.compare_and_swap(ptr, other_ptr, Ordering::Relaxed);\n     /// ```\n@@ -1333,9 +1333,9 @@ impl<T> AtomicPtr<T> {\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n     /// let ptr = &mut 5;\n-    /// let some_ptr  = AtomicPtr::new(ptr);\n+    /// let some_ptr = AtomicPtr::new(ptr);\n     ///\n-    /// let other_ptr   = &mut 10;\n+    /// let other_ptr = &mut 10;\n     ///\n     /// let value = some_ptr.compare_exchange(ptr, other_ptr,\n     ///                                       Ordering::SeqCst, Ordering::Relaxed);"}, {"sha": "8001fcff6484bdfe8a5306ff51304762f9491d4c", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/542febd2d383b5082277c7d165b098c0a3b513f6/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542febd2d383b5082277c7d165b098c0a3b513f6/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=542febd2d383b5082277c7d165b098c0a3b513f6", "patch": "@@ -546,7 +546,7 @@ impl Span {\n     /// Note: The observable result of a macro should only rely on the tokens and\n     /// not on this source text. The result of this function is a best effort to\n     /// be used for diagnostics only.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n+    #[stable(feature = \"proc_macro_source_text\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn source_text(&self) -> Option<String> {\n         self.0.source_text()\n     }"}, {"sha": "746a510c488f9fb9203a9315f616e9419134943b", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=542febd2d383b5082277c7d165b098c0a3b513f6", "patch": "@@ -229,44 +229,44 @@ h1 a,\n \tcolor: var(--main-color);\n }\n \n-span.enum, a.enum,\n-span.struct, a.struct,\n-span.union, a.union,\n-span.primitive, a.primitive,\n-span.type, a.type,\n-span.foreigntype, a.foreigntype {\n+.content span.enum, .content a.enum,\n+.content span.struct, .content a.struct,\n+.content span.union, .content a.union,\n+.content span.primitive, .content a.primitive,\n+.content span.type, .content a.type,\n+.content span.foreigntype, .content a.foreigntype {\n \tcolor: var(--type-link-color);\n }\n \n-span.trait, a.trait,\n-span.traitalias, a.traitalias {\n+.content span.trait, .content a.trait,\n+.content span.traitalias, .content a.traitalias {\n \tcolor: var(--trait-link-color);\n }\n \n-span.associatedtype, a.associatedtype,\n-span.constant, a.constant,\n-span.static, a.static {\n+.content span.associatedtype, .content a.associatedtype,\n+.content span.constant, .content a.constant,\n+.content span.static, .content a.static {\n \tcolor: var(--assoc-item-link-color);\n }\n \n-span.fn, a.fn,\n-.fnname,\n-span.method, a.method,\n-span.tymethod, a.tymethod {\n+.content span.fn, .content a.fn,\n+.content .fnname,\n+.content span.method, .content a.method,\n+.content span.tymethod, .content a.tymethod {\n \tcolor: var(--function-link-color);\n }\n \n-span.attr, a.attr,\n-span.derive, a.derive,\n-span.macro, a.macro {\n+.content span.attr, .content a.attr,\n+.content span.derive, .content a.derive,\n+.content span.macro, .content a.macro {\n \tcolor: var(--macro-link-color);\n }\n \n-span.mod, a.mod {\n+.content span.mod, .content a.mod {\n \tcolor: var(--mod-link-color);\n }\n \n-span.keyword, a.keyword {\n+.content span.keyword, .content a.keyword {\n \tcolor: var(--keyword-link-color);\n }\n \n@@ -697,7 +697,6 @@ pre, .rustdoc.source .example-wrap {\n \n nav.sub {\n \tposition: relative;\n-\tfont-size: 1rem;\n \tflex-grow: 1;\n \tmargin-bottom: 25px;\n }"}, {"sha": "ce688287a743363dab3548a68e061ddfe9c0ba50", "filename": "src/test/rustdoc-gui/item-decl-colors.goml", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Ftest%2Frustdoc-gui%2Fitem-decl-colors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Ftest%2Frustdoc-gui%2Fitem-decl-colors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-decl-colors.goml?ref=542febd2d383b5082277c7d165b098c0a3b513f6", "patch": "@@ -0,0 +1,74 @@\n+// This test ensures that the color of the items in the type decl are working as expected.\n+define-function: (\n+    \"check-colors\",\n+    (\n+        theme,\n+        attr_color,\n+        trait_color,\n+        struct_color,\n+        enum_color,\n+        primitive_color,\n+        constant_color,\n+        fn_color,\n+        assoc_type_color,\n+    ),\n+    [\n+        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/struct.WithGenerics.html\"),\n+        (\"show-text\", true),\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        (\"reload\"),\n+        (\"assert-css\", (\".item-decl .code-attribute\", {\"color\": |attr_color|}, ALL)),\n+        (\"assert-css\", (\".item-decl .trait\", {\"color\": |trait_color|}, ALL)),\n+        // We need to add `code` here because otherwise it would select the parent too.\n+        (\"assert-css\", (\".item-decl code .struct\", {\"color\": |struct_color|}, ALL)),\n+        (\"assert-css\", (\".item-decl .enum\", {\"color\": |enum_color|}, ALL)),\n+        (\"assert-css\", (\".item-decl .primitive\", {\"color\": |primitive_color|}, ALL)),\n+        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/trait.TraitWithoutGenerics.html\"),\n+        (\"assert-css\", (\".item-decl .constant\", {\"color\": |constant_color|}, ALL)),\n+        (\"assert-css\", (\".item-decl .fnname\", {\"color\": |fn_color|}, ALL)),\n+        (\"assert-css\", (\".item-decl .associatedtype\", {\"color\": |assoc_type_color|}, ALL)),\n+    ],\n+)\n+\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"ayu\",\n+        \"attr_color\": \"rgb(153, 153, 153)\",\n+        \"trait_color\": \"rgb(57, 175, 215)\",\n+        \"struct_color\": \"rgb(255, 160, 165)\",\n+        \"enum_color\": \"rgb(255, 160, 165)\",\n+        \"primitive_color\": \"rgb(255, 160, 165)\",\n+        \"constant_color\": \"rgb(57, 175, 215)\",\n+        \"fn_color\": \"rgb(253, 214, 135)\",\n+        \"assoc_type_color\": \"rgb(57, 175, 215)\",\n+    },\n+)\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"dark\",\n+        \"attr_color\": \"rgb(153, 153, 153)\",\n+        \"trait_color\": \"rgb(183, 140, 242)\",\n+        \"struct_color\": \"rgb(45, 191, 184)\",\n+        \"enum_color\": \"rgb(45, 191, 184)\",\n+        \"primitive_color\": \"rgb(45, 191, 184)\",\n+        \"constant_color\": \"rgb(210, 153, 29)\",\n+        \"fn_color\": \"rgb(43, 171, 99)\",\n+        \"assoc_type_color\": \"rgb(210, 153, 29)\",\n+    },\n+)\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"light\",\n+        \"attr_color\": \"rgb(153, 153, 153)\",\n+        \"trait_color\": \"rgb(110, 79, 201)\",\n+        \"struct_color\": \"rgb(173, 55, 138)\",\n+        \"enum_color\": \"rgb(173, 55, 138)\",\n+        \"primitive_color\": \"rgb(173, 55, 138)\",\n+        \"constant_color\": \"rgb(56, 115, 173)\",\n+        \"fn_color\": \"rgb(173, 124, 55)\",\n+        \"assoc_type_color\": \"rgb(56, 115, 173)\",\n+    },\n+)"}, {"sha": "5058630f469f8711f30c9ab8014a37dcbd5c759d", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=542febd2d383b5082277c7d165b098c0a3b513f6", "patch": "@@ -20,11 +20,12 @@ assert-text: (\".sidebar-elems section ul > li:nth-child(2)\", \"Modules\")\n assert-text: (\".sidebar-elems section ul > li:nth-child(3)\", \"Macros\")\n assert-text: (\".sidebar-elems section ul > li:nth-child(4)\", \"Structs\")\n assert-text: (\".sidebar-elems section ul > li:nth-child(5)\", \"Enums\")\n-assert-text: (\".sidebar-elems section ul > li:nth-child(6)\", \"Traits\")\n-assert-text: (\".sidebar-elems section ul > li:nth-child(7)\", \"Functions\")\n-assert-text: (\".sidebar-elems section ul > li:nth-child(8)\", \"Type Definitions\")\n-assert-text: (\".sidebar-elems section ul > li:nth-child(9)\", \"Unions\")\n-assert-text: (\".sidebar-elems section ul > li:nth-child(10)\", \"Keywords\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(6)\", \"Constants\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(7)\", \"Traits\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(8)\", \"Functions\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(9)\", \"Type Definitions\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(10)\", \"Unions\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(11)\", \"Keywords\")\n assert-text: (\"#structs + .item-table .item-left > a\", \"Foo\")\n click: \"#structs + .item-table .item-left > a\"\n "}, {"sha": "77617e10beb7082333bd1674c2146c517eda67d7", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=542febd2d383b5082277c7d165b098c0a3b513f6", "patch": "@@ -5,6 +5,7 @@\n #![crate_name = \"test_docs\"]\n #![feature(rustdoc_internals)]\n #![feature(doc_cfg)]\n+#![feature(associated_type_defaults)]\n \n /*!\n Enable the feature <span class=\"stab portability\"><code>some-feature</code></span> to enjoy\n@@ -386,3 +387,20 @@ impl TypeWithNoDocblocks {\n pub unsafe fn unsafe_fn() {}\n \n pub fn safe_fn() {}\n+\n+#[repr(C)]\n+pub struct WithGenerics<T: TraitWithNoDocblocks, S = String, E = WhoLetTheDogOut, P = i8> {\n+    s: S,\n+    t: T,\n+    e: E,\n+    p: P,\n+}\n+\n+pub const CONST: u8 = 0;\n+\n+pub trait TraitWithoutGenerics {\n+    const C: u8 = CONST;\n+    type T = SomeType;\n+\n+    fn foo();\n+}"}, {"sha": "46565f61ca9a4b01de90b15c719af21dedbe22a8", "filename": "src/test/ui/borrowck/issue-103250.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Ftest%2Fui%2Fborrowck%2Fissue-103250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Ftest%2Fui%2Fborrowck%2Fissue-103250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-103250.rs?ref=542febd2d383b5082277c7d165b098c0a3b513f6", "patch": "@@ -0,0 +1,37 @@\n+// edition:2021\n+\n+type TranslateFn = Box<dyn Fn(String, String) -> String>;\n+\n+pub struct DeviceCluster {\n+    devices: Vec<Device>,\n+}\n+\n+impl DeviceCluster {\n+    pub async fn do_something(&mut self) -> Result<String, Box<dyn std::error::Error>> {\n+        let mut last_error: Box<dyn std::error::Error>;\n+\n+        for device in &mut self.devices {\n+            match device.do_something().await {\n+                Ok(info) => {\n+                    return Ok(info);\n+                }\n+                Err(e) => {}\n+            }\n+        }\n+\n+        Err(last_error)\n+        //~^ ERROR used binding `last_error` isn't initialized\n+    }\n+}\n+\n+pub struct Device {\n+    translate_fn: Option<TranslateFn>,\n+}\n+\n+impl Device {\n+    pub async fn do_something(&mut self) -> Result<String, Box<dyn std::error::Error>> {\n+        Ok(String::from(\"\"))\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4a237835222f55bf9cbc63a1a217cc67131cc0a3", "filename": "src/test/ui/borrowck/issue-103250.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Ftest%2Fui%2Fborrowck%2Fissue-103250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Ftest%2Fui%2Fborrowck%2Fissue-103250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-103250.stderr?ref=542febd2d383b5082277c7d165b098c0a3b513f6", "patch": "@@ -0,0 +1,17 @@\n+error[E0381]: used binding `last_error` isn't initialized\n+  --> $DIR/issue-103250.rs:22:13\n+   |\n+LL |         let mut last_error: Box<dyn std::error::Error>;\n+   |             -------------- binding declared here but left uninitialized\n+...\n+LL |         Err(last_error)\n+   |             ^^^^^^^^^^ `last_error` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |         let mut last_error: Box<dyn std::error::Error> = todo!();\n+   |                                                        +++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "585874e273df0f425141cdca3b0bc5ffa98460f3", "filename": "src/test/ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-fn-signature-verification-for-explicit-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542febd2d383b5082277c7d165b098c0a3b513f6/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-fn-signature-verification-for-explicit-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-fn-signature-verification-for-explicit-return-type.rs?ref=542febd2d383b5082277c7d165b098c0a3b513f6", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-fuchsia Test must be run out-of-process\n+// needs-unwind (#73509)\n \n #![feature(test)]\n "}]}