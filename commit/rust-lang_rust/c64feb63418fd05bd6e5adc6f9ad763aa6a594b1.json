{"sha": "c64feb63418fd05bd6e5adc6f9ad763aa6a594b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NGZlYjYzNDE4ZmQwNWJkNmU1YWRjNmY5YWQ3NjNhYTZhNTk0YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-19T21:36:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-19T21:36:14Z"}, "message": "Auto merge of #24592 - P1start:style-lints-changes, r=alexcrichton\n\nPassing a non-snake-case name to `#![crate_name]` or `--crate-name` will now yield a warning from the `non_snake_case` lint.", "tree": {"sha": "e1c61469380b23f00566bf74f81285ee26ae610d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1c61469380b23f00566bf74f81285ee26ae610d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c64feb63418fd05bd6e5adc6f9ad763aa6a594b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c64feb63418fd05bd6e5adc6f9ad763aa6a594b1", "html_url": "https://github.com/rust-lang/rust/commit/c64feb63418fd05bd6e5adc6f9ad763aa6a594b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c64feb63418fd05bd6e5adc6f9ad763aa6a594b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da355efc1c8bde662da6f0289b492ce694bb398c", "url": "https://api.github.com/repos/rust-lang/rust/commits/da355efc1c8bde662da6f0289b492ce694bb398c", "html_url": "https://github.com/rust-lang/rust/commit/da355efc1c8bde662da6f0289b492ce694bb398c"}, {"sha": "c163f89310577121ba86b45bfb7a93ca6a7c7a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/c163f89310577121ba86b45bfb7a93ca6a7c7a61", "html_url": "https://github.com/rust-lang/rust/commit/c163f89310577121ba86b45bfb7a93ca6a7c7a61"}], "stats": {"total": 87, "additions": 65, "deletions": 22}, "files": [{"sha": "7f1a4b659edb4059215714f043716e3b6731be65", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c64feb63418fd05bd6e5adc6f9ad763aa6a594b1/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c64feb63418fd05bd6e5adc6f9ad763aa6a594b1/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c64feb63418fd05bd6e5adc6f9ad763aa6a594b1", "patch": "@@ -910,9 +910,8 @@ impl NonSnakeCase {\n         words.connect(\"_\")\n     }\n \n-    fn check_snake_case(&self, cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n-        fn is_snake_case(ident: ast::Ident) -> bool {\n-            let ident = token::get_ident(ident);\n+    fn check_snake_case(&self, cx: &Context, sort: &str, name: &str, span: Option<Span>) {\n+        fn is_snake_case(ident: &str) -> bool {\n             if ident.is_empty() {\n                 return true;\n             }\n@@ -931,18 +930,18 @@ impl NonSnakeCase {\n             })\n         }\n \n-        let s = token::get_ident(ident);\n-\n-        if !is_snake_case(ident) {\n-            let sc = NonSnakeCase::to_snake_case(&s);\n-            if sc != &s[..] {\n-                cx.span_lint(NON_SNAKE_CASE, span,\n-                    &*format!(\"{} `{}` should have a snake case name such as `{}`\",\n-                            sort, s, sc));\n+        if !is_snake_case(name) {\n+            let sc = NonSnakeCase::to_snake_case(name);\n+            let msg = if sc != name {\n+                format!(\"{} `{}` should have a snake case name such as `{}`\",\n+                        sort, name, sc)\n             } else {\n-                cx.span_lint(NON_SNAKE_CASE, span,\n-                    &*format!(\"{} `{}` should have a snake case name\",\n-                            sort, s));\n+                format!(\"{} `{}` should have a snake case name\",\n+                        sort, name)\n+            };\n+            match span {\n+                Some(span) => cx.span_lint(NON_SNAKE_CASE, span, &msg),\n+                None => cx.lint(NON_SNAKE_CASE, &msg),\n             }\n         }\n     }\n@@ -953,47 +952,59 @@ impl LintPass for NonSnakeCase {\n         lint_array!(NON_SNAKE_CASE)\n     }\n \n+    fn check_crate(&mut self, cx: &Context, cr: &ast::Crate) {\n+        let attr_crate_name = cr.attrs.iter().find(|at| at.check_name(\"crate_name\"))\n+                                      .and_then(|at| at.value_str().map(|s| (at, s)));\n+        if let Some(ref name) = cx.tcx.sess.opts.crate_name {\n+            self.check_snake_case(cx, \"crate\", name, None);\n+        } else if let Some((attr, ref name)) = attr_crate_name {\n+            self.check_snake_case(cx, \"crate\", name, Some(attr.span));\n+        }\n+    }\n+\n     fn check_fn(&mut self, cx: &Context,\n                 fk: visit::FnKind, _: &ast::FnDecl,\n                 _: &ast::Block, span: Span, id: ast::NodeId) {\n         match fk {\n             visit::FkMethod(ident, _, _) => match method_context(cx, id, span) {\n                 MethodContext::PlainImpl => {\n-                    self.check_snake_case(cx, \"method\", ident, span)\n+                    self.check_snake_case(cx, \"method\", &token::get_ident(ident), Some(span))\n                 },\n                 MethodContext::TraitDefaultImpl => {\n-                    self.check_snake_case(cx, \"trait method\", ident, span)\n+                    self.check_snake_case(cx, \"trait method\", &token::get_ident(ident), Some(span))\n                 },\n                 _ => (),\n             },\n             visit::FkItemFn(ident, _, _, _, _) => {\n-                self.check_snake_case(cx, \"function\", ident, span)\n+                self.check_snake_case(cx, \"function\", &token::get_ident(ident), Some(span))\n             },\n             _ => (),\n         }\n     }\n \n     fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n         if let ast::ItemMod(_) = it.node {\n-            self.check_snake_case(cx, \"module\", it.ident, it.span);\n+            self.check_snake_case(cx, \"module\", &token::get_ident(it.ident), Some(it.span));\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &Context, trait_item: &ast::TraitItem) {\n         if let ast::MethodTraitItem(_, None) = trait_item.node {\n-            self.check_snake_case(cx, \"trait method\", trait_item.ident, trait_item.span);\n+            self.check_snake_case(cx, \"trait method\", &token::get_ident(trait_item.ident),\n+                                  Some(trait_item.span));\n         }\n     }\n \n     fn check_lifetime_def(&mut self, cx: &Context, t: &ast::LifetimeDef) {\n-        self.check_snake_case(cx, \"lifetime\", t.lifetime.name.ident(), t.lifetime.span);\n+        self.check_snake_case(cx, \"lifetime\", &token::get_ident(t.lifetime.name.ident()),\n+                              Some(t.lifetime.span));\n     }\n \n     fn check_pat(&mut self, cx: &Context, p: &ast::Pat) {\n         if let &ast::PatIdent(_, ref path1, _) = &p.node {\n             let def = cx.tcx.def_map.borrow().get(&p.id).map(|d| d.full_def());\n             if let Some(def::DefLocal(_)) = def {\n-                self.check_snake_case(cx, \"variable\", path1.node, p.span);\n+                self.check_snake_case(cx, \"variable\", &token::get_ident(path1.node), Some(p.span));\n             }\n         }\n     }\n@@ -1002,7 +1013,8 @@ impl LintPass for NonSnakeCase {\n                         _: ast::Ident, _: &ast::Generics, _: ast::NodeId) {\n         for sf in &s.fields {\n             if let ast::StructField_ { kind: ast::NamedField(ident, _), .. } = sf.node {\n-                self.check_snake_case(cx, \"structure field\", ident, sf.span);\n+                self.check_snake_case(cx, \"structure field\", &token::get_ident(ident),\n+                                      Some(sf.span));\n             }\n         }\n     }"}, {"sha": "fe22c21df244a71ed7170ce1c49cd38e18749968", "filename": "src/test/compile-fail/lint-non-snake-case-crate-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c64feb63418fd05bd6e5adc6f9ad763aa6a594b1/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c64feb63418fd05bd6e5adc6f9ad763aa6a594b1/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-crate-2.rs?ref=c64feb63418fd05bd6e5adc6f9ad763aa6a594b1", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --crate-name NonSnakeCase\n+// error-pattern: crate `NonSnakeCase` should have a snake case name such as `non_snake_case`\n+\n+#![deny(non_snake_case)]\n+\n+fn main() {}"}, {"sha": "9ca0a34e6ff26bdd6199f41edf23082005360c8f", "filename": "src/test/compile-fail/lint-non-snake-case-crate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c64feb63418fd05bd6e5adc6f9ad763aa6a594b1/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c64feb63418fd05bd6e5adc6f9ad763aa6a594b1/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-crate.rs?ref=c64feb63418fd05bd6e5adc6f9ad763aa6a594b1", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"NonSnakeCase\"]\n+//~^ ERROR crate `NonSnakeCase` should have a snake case name such as `non_snake_case`\n+#![deny(non_snake_case)]\n+\n+fn main() {}"}]}