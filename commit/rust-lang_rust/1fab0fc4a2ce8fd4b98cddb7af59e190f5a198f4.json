{"sha": "1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4", "node_id": "C_kwDOAAsO6NoAKDFmYWIwZmM0YTJjZThmZDRiOThjZGRiN2FmNTllMTkwZjVhMTk4ZjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-03T19:06:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-03T19:06:27Z"}, "message": "Rollup merge of #108599 - nikic:drop-init, r=cuviper\n\nRemove legacy PM leftovers\n\nThis drops two leftovers of legacy PM usage:\n * We don't need to initialize passes anymore.\n * The pass listing was still using legacy PM passes. Replace it with the corresponding new PM listing.", "tree": {"sha": "4a8f406ecb45c1c6b85a1f24af733d6001876fcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a8f406ecb45c1c6b85a1f24af733d6001876fcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkAkUzCRBK7hj4Ov3rIwAAzMkIABOHyrcK9jenj91338bXxvlA\n7xWeInnebEfLmdhRPUw6skm+X4BJeICv7XRYe7GCvJcXFIhYxoeVULkd1xXm+AMS\njd42wrv2AS4zrsink/BPMt3Zj9yLXAqyjqMZYcjd2Cwy01g0MKOrJeyQvXFh7eH7\n2ATZTcvdJtETcAtkzkogWIbzV3mDSnPy4UBaW3cC4gPZ7bTHxrk5S94soiK5ejED\nDeTRO855pG5V5/k2nBVt9lb+697MFOWFs5kEA2EPV5Td5Vnfj/ee6ppc9Q4ScEYg\n7f+I41M6FY5dW91wTLwusQkv9yUfCrjrIsOjDaAkW3Er2cPhMfMxDk3C0irGIBA=\n=Pzoa\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a8f406ecb45c1c6b85a1f24af733d6001876fcf\nparent 44e794f8abd0396af158a1dee59c30f60dc2ee3a\nparent 655a810b665053ebef1739a3b662b79d232d75f4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677870387 +0100\ncommitter GitHub <noreply@github.com> 1677870387 +0100\n\nRollup merge of #108599 - nikic:drop-init, r=cuviper\n\nRemove legacy PM leftovers\n\nThis drops two leftovers of legacy PM usage:\n * We don't need to initialize passes anymore.\n * The pass listing was still using legacy PM passes. Replace it with the corresponding new PM listing.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4", "html_url": "https://github.com/rust-lang/rust/commit/1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44e794f8abd0396af158a1dee59c30f60dc2ee3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/44e794f8abd0396af158a1dee59c30f60dc2ee3a", "html_url": "https://github.com/rust-lang/rust/commit/44e794f8abd0396af158a1dee59c30f60dc2ee3a"}, {"sha": "655a810b665053ebef1739a3b662b79d232d75f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/655a810b665053ebef1739a3b662b79d232d75f4", "html_url": "https://github.com/rust-lang/rust/commit/655a810b665053ebef1739a3b662b79d232d75f4"}], "stats": {"total": 40, "additions": 2, "deletions": 38}, "files": [{"sha": "253c2ca7c768e15a59ad1dd73728506a9c648dd0", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4", "patch": "@@ -1814,8 +1814,6 @@ extern \"C\" {\n     /// Creates a legacy pass manager -- only used for final codegen.\n     pub fn LLVMCreatePassManager<'a>() -> &'a mut PassManager<'a>;\n \n-    pub fn LLVMInitializePasses();\n-\n     pub fn LLVMTimeTraceProfilerInitialize();\n \n     pub fn LLVMTimeTraceProfilerFinishThread();"}, {"sha": "ba58a2e68e91b75b319822783db4b4bef383b832", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4", "patch": "@@ -120,8 +120,6 @@ unsafe fn configure_llvm(sess: &Session) {\n         llvm::LLVMTimeTraceProfilerInitialize();\n     }\n \n-    llvm::LLVMInitializePasses();\n-\n     rustc_llvm::initialize_available_targets();\n \n     llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int, llvm_args.as_ptr());"}, {"sha": "4761ce83fabf18524c4255efb1cee290e70a5262", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=1fab0fc4a2ce8fd4b98cddb7af59e190f5a198f4", "patch": "@@ -9,7 +9,6 @@\n #include \"llvm/Analysis/TargetLibraryInfo.h\"\n #include \"llvm/Analysis/TargetTransformInfo.h\"\n #include \"llvm/CodeGen/TargetSubtargetInfo.h\"\n-#include \"llvm/InitializePasses.h\"\n #include \"llvm/IR/AutoUpgrade.h\"\n #include \"llvm/IR/AssemblyAnnotationWriter.h\"\n #include \"llvm/IR/IntrinsicInst.h\"\n@@ -58,22 +57,6 @@ typedef struct LLVMOpaqueTargetMachine *LLVMTargetMachineRef;\n DEFINE_STDCXX_CONVERSION_FUNCTIONS(Pass, LLVMPassRef)\n DEFINE_STDCXX_CONVERSION_FUNCTIONS(TargetMachine, LLVMTargetMachineRef)\n \n-extern \"C\" void LLVMInitializePasses() {\n-  PassRegistry &Registry = *PassRegistry::getPassRegistry();\n-  initializeCore(Registry);\n-  initializeCodeGen(Registry);\n-  initializeScalarOpts(Registry);\n-  initializeVectorization(Registry);\n-  initializeIPO(Registry);\n-  initializeAnalysis(Registry);\n-  initializeTransformUtils(Registry);\n-  initializeInstCombine(Registry);\n-#if LLVM_VERSION_LT(16, 0)\n-  initializeInstrumentation(Registry);\n-#endif\n-  initializeTarget(Registry);\n-}\n-\n extern \"C\" void LLVMTimeTraceProfilerInitialize() {\n   timeTraceProfilerInitialize(\n       /* TimeTraceGranularity */ 0,\n@@ -1004,23 +987,8 @@ LLVMRustPrintModule(LLVMModuleRef M, const char *Path, DemangleFn Demangle) {\n }\n \n extern \"C\" void LLVMRustPrintPasses() {\n-  LLVMInitializePasses();\n-  struct MyListener : PassRegistrationListener {\n-    void passEnumerate(const PassInfo *Info) {\n-      StringRef PassArg = Info->getPassArgument();\n-      StringRef PassName = Info->getPassName();\n-      if (!PassArg.empty()) {\n-        // These unsigned->signed casts could theoretically overflow, but\n-        // realistically never will (and even if, the result is implementation\n-        // defined rather plain UB).\n-        printf(\"%15.*s - %.*s\\n\", (int)PassArg.size(), PassArg.data(),\n-               (int)PassName.size(), PassName.data());\n-      }\n-    }\n-  } Listener;\n-\n-  PassRegistry *PR = PassRegistry::getPassRegistry();\n-  PR->enumerateWith(&Listener);\n+  PassBuilder PB;\n+  PB.printPassNames(outs());\n }\n \n extern \"C\" void LLVMRustRunRestrictionPass(LLVMModuleRef M, char **Symbols,"}]}