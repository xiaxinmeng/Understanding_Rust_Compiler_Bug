{"sha": "cecb3be49a03589a8651cd7b1250db139544dc5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlY2IzYmU0OWEwMzU4OWE4NjUxY2Q3YjEyNTBkYjEzOTU0NGRjNWQ=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-09-16T21:10:05Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-07T19:44:10Z"}, "message": "Improve diagnostics for functions in `struct` definitions", "tree": {"sha": "14e09f0b1bbfeb3f6472f6a102806270e9e51b1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e09f0b1bbfeb3f6472f6a102806270e9e51b1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cecb3be49a03589a8651cd7b1250db139544dc5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cecb3be49a03589a8651cd7b1250db139544dc5d", "html_url": "https://github.com/rust-lang/rust/commit/cecb3be49a03589a8651cd7b1250db139544dc5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cecb3be49a03589a8651cd7b1250db139544dc5d/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "377d1a984cd2a53327092b90aa1d8b7e22d1e347", "url": "https://api.github.com/repos/rust-lang/rust/commits/377d1a984cd2a53327092b90aa1d8b7e22d1e347", "html_url": "https://github.com/rust-lang/rust/commit/377d1a984cd2a53327092b90aa1d8b7e22d1e347"}], "stats": {"total": 61, "additions": 42, "deletions": 19}, "files": [{"sha": "60a6cb28a177dcc47e0019b37bcb3bc85ce5bcc1", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cecb3be49a03589a8651cd7b1250db139544dc5d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecb3be49a03589a8651cd7b1250db139544dc5d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=cecb3be49a03589a8651cd7b1250db139544dc5d", "patch": "@@ -1402,7 +1402,7 @@ impl<'a> Parser<'a> {\n         vis: Visibility,\n         attrs: Vec<Attribute>,\n     ) -> PResult<'a, FieldDef> {\n-        let name = self.parse_ident_common(false)?;\n+        let name = self.parse_field_ident(lo)?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n         Ok(FieldDef {\n@@ -1416,6 +1416,29 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    /// Parses a field identifier. Specialized version of `parse_ident_common`\n+    /// for better diagnostics and suggestions.\n+    fn parse_field_ident(&mut self, lo: Span) -> PResult<'a, Ident> {\n+        let (ident, is_raw) = self.ident_or_err()?;\n+        if !is_raw && ident.is_reserved() {\n+            let err = if self.check_fn_front_matter(false) {\n+                let _ = self.parse_fn(&mut Vec::new(), |_| true, lo);\n+                let mut err = self.struct_span_err(\n+                    lo.to(self.prev_token.span),\n+                    \"functions are not allowed in struct definitions\",\n+                );\n+                err.help(\"unlike in C++, Java, and C#, functions are declared in `impl` blocks\");\n+                err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");\n+                err\n+            } else {\n+                self.expected_ident_found()\n+            };\n+            return Err(err);\n+        }\n+        self.bump();\n+        Ok(ident)\n+    }\n+\n     /// Parses a declarative macro 2.0 definition.\n     /// The `macro` keyword has already been parsed.\n     /// ```"}, {"sha": "74481e236f31c7c3846addced8f2a4869e4dac91", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cecb3be49a03589a8651cd7b1250db139544dc5d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecb3be49a03589a8651cd7b1250db139544dc5d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=cecb3be49a03589a8651cd7b1250db139544dc5d", "patch": "@@ -522,27 +522,27 @@ impl<'a> Parser<'a> {\n         self.parse_ident_common(true)\n     }\n \n+    fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {\n+        self.token.ident().ok_or_else(|| match self.prev_token.kind {\n+            TokenKind::DocComment(..) => {\n+                self.span_fatal_err(self.prev_token.span, Error::UselessDocComment)\n+            }\n+            _ => self.expected_ident_found(),\n+        })\n+    }\n+\n     fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {\n-        match self.token.ident() {\n-            Some((ident, is_raw)) => {\n-                if !is_raw && ident.is_reserved() {\n-                    let mut err = self.expected_ident_found();\n-                    if recover {\n-                        err.emit();\n-                    } else {\n-                        return Err(err);\n-                    }\n-                }\n-                self.bump();\n-                Ok(ident)\n+        let (ident, is_raw) = self.ident_or_err()?;\n+        if !is_raw && ident.is_reserved() {\n+            let mut err = self.expected_ident_found();\n+            if recover {\n+                err.emit();\n+            } else {\n+                return Err(err);\n             }\n-            _ => Err(match self.prev_token.kind {\n-                TokenKind::DocComment(..) => {\n-                    self.span_fatal_err(self.prev_token.span, Error::UselessDocComment)\n-                }\n-                _ => self.expected_ident_found(),\n-            }),\n         }\n+        self.bump();\n+        Ok(ident)\n     }\n \n     /// Checks if the next token is `tok`, and returns `true` if so."}]}