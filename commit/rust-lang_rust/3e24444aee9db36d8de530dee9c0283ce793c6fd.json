{"sha": "3e24444aee9db36d8de530dee9c0283ce793c6fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMjQ0NDRhZWU5ZGIzNmQ4ZGU1MzBkZWU5YzAyODNjZTc5M2M2ZmQ=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-24T02:23:01Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-26T09:17:37Z"}, "message": "Cacheproc-macro dlls", "tree": {"sha": "563cda6d1d536a55d24bd153bcd4188c68ae1998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/563cda6d1d536a55d24bd153bcd4188c68ae1998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e24444aee9db36d8de530dee9c0283ce793c6fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e24444aee9db36d8de530dee9c0283ce793c6fd", "html_url": "https://github.com/rust-lang/rust/commit/3e24444aee9db36d8de530dee9c0283ce793c6fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e24444aee9db36d8de530dee9c0283ce793c6fd/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef67e0a497a3f0b65c11bf443e0d35c8e51bd26f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef67e0a497a3f0b65c11bf443e0d35c8e51bd26f", "html_url": "https://github.com/rust-lang/rust/commit/ef67e0a497a3f0b65c11bf443e0d35c8e51bd26f"}], "stats": {"total": 128, "additions": 70, "deletions": 58}, "files": [{"sha": "1437794c9e23a3030a97bda224f6dc9cadaf8437", "filename": "crates/ra_proc_macro_srv/src/cli.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e24444aee9db36d8de530dee9c0283ce793c6fd/crates%2Fra_proc_macro_srv%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e24444aee9db36d8de530dee9c0283ce793c6fd/crates%2Fra_proc_macro_srv%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Fcli.rs?ref=3e24444aee9db36d8de530dee9c0283ce793c6fd", "patch": "@@ -1,15 +1,17 @@\n //! Driver for proc macro server\n \n-use crate::{expand_task, list_macros};\n+use crate::ProcMacroSrv;\n use ra_proc_macro::msg::{self, Message};\n use std::io;\n \n pub fn run() -> io::Result<()> {\n+    let mut srv = ProcMacroSrv::default();\n+\n     while let Some(req) = read_request()? {\n         let res = match req {\n-            msg::Request::ListMacro(task) => Ok(msg::Response::ListMacro(list_macros(&task))),\n+            msg::Request::ListMacro(task) => srv.list_macros(&task).map(msg::Response::ListMacro),\n             msg::Request::ExpansionMacro(task) => {\n-                expand_task(&task).map(msg::Response::ExpansionMacro)\n+                srv.expand(&task).map(msg::Response::ExpansionMacro)\n             }\n         };\n "}, {"sha": "476bc5c01422374fb88a7c6db67aa7054e9ce101", "filename": "crates/ra_proc_macro_srv/src/dylib.rs", "status": "modified", "additions": 33, "deletions": 35, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3e24444aee9db36d8de530dee9c0283ce793c6fd/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e24444aee9db36d8de530dee9c0283ce793c6fd/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs?ref=3e24444aee9db36d8de530dee9c0283ce793c6fd", "patch": "@@ -112,7 +112,7 @@ impl ProcMacroLibraryLibloading {\n type ProcMacroLibraryImpl = ProcMacroLibraryLibloading;\n \n pub struct Expander {\n-    libs: Vec<ProcMacroLibraryImpl>,\n+    inner: ProcMacroLibraryImpl,\n }\n \n impl Expander {\n@@ -125,7 +125,7 @@ impl Expander {\n \n         let library = ProcMacroLibraryImpl::open(&lib).map_err(|e| e.to_string())?;\n \n-        Ok(Expander { libs: vec![library] })\n+        Ok(Expander { inner: library })\n     }\n \n     pub fn expand(\n@@ -141,48 +141,46 @@ impl Expander {\n                 TokenStream::with_subtree(attr.clone())\n             });\n \n-        for lib in &self.libs {\n-            for proc_macro in &lib.exported_macros {\n-                match proc_macro {\n-                    bridge::client::ProcMacro::CustomDerive { trait_name, client, .. }\n-                        if *trait_name == macro_name =>\n-                    {\n-                        let res = client.run(\n-                            &crate::proc_macro::bridge::server::SameThread,\n-                            crate::rustc_server::Rustc::default(),\n-                            parsed_body,\n-                        );\n-                        return res.map(|it| it.subtree);\n-                    }\n-                    bridge::client::ProcMacro::Bang { name, client } if *name == macro_name => {\n-                        let res = client.run(\n-                            &crate::proc_macro::bridge::server::SameThread,\n-                            crate::rustc_server::Rustc::default(),\n-                            parsed_body,\n-                        );\n-                        return res.map(|it| it.subtree);\n-                    }\n-                    bridge::client::ProcMacro::Attr { name, client } if *name == macro_name => {\n-                        let res = client.run(\n-                            &crate::proc_macro::bridge::server::SameThread,\n-                            crate::rustc_server::Rustc::default(),\n-                            parsed_attributes,\n-                            parsed_body,\n-                        );\n-                        return res.map(|it| it.subtree);\n-                    }\n-                    _ => continue,\n+        for proc_macro in &self.inner.exported_macros {\n+            match proc_macro {\n+                bridge::client::ProcMacro::CustomDerive { trait_name, client, .. }\n+                    if *trait_name == macro_name =>\n+                {\n+                    let res = client.run(\n+                        &crate::proc_macro::bridge::server::SameThread,\n+                        crate::rustc_server::Rustc::default(),\n+                        parsed_body,\n+                    );\n+                    return res.map(|it| it.subtree);\n+                }\n+                bridge::client::ProcMacro::Bang { name, client } if *name == macro_name => {\n+                    let res = client.run(\n+                        &crate::proc_macro::bridge::server::SameThread,\n+                        crate::rustc_server::Rustc::default(),\n+                        parsed_body,\n+                    );\n+                    return res.map(|it| it.subtree);\n+                }\n+                bridge::client::ProcMacro::Attr { name, client } if *name == macro_name => {\n+                    let res = client.run(\n+                        &crate::proc_macro::bridge::server::SameThread,\n+                        crate::rustc_server::Rustc::default(),\n+                        parsed_attributes,\n+                        parsed_body,\n+                    );\n+                    return res.map(|it| it.subtree);\n                 }\n+                _ => continue,\n             }\n         }\n \n         Err(bridge::PanicMessage::String(\"Nothing to expand\".to_string()))\n     }\n \n     pub fn list_macros(&self) -> Vec<(String, ProcMacroKind)> {\n-        self.libs\n+        self.inner\n+            .exported_macros\n             .iter()\n-            .flat_map(|it| &it.exported_macros)\n             .map(|proc_macro| match proc_macro {\n                 bridge::client::ProcMacro::CustomDerive { trait_name, .. } => {\n                     (trait_name.to_string(), ProcMacroKind::CustomDerive)"}, {"sha": "0954bd6b51521e4b4ed3cd50c7c4aae4a5491ece", "filename": "crates/ra_proc_macro_srv/src/lib.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3e24444aee9db36d8de530dee9c0283ce793c6fd/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e24444aee9db36d8de530dee9c0283ce793c6fd/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs?ref=3e24444aee9db36d8de530dee9c0283ce793c6fd", "patch": "@@ -21,28 +21,40 @@ mod dylib;\n \n use proc_macro::bridge::client::TokenStream;\n use ra_proc_macro::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask};\n-use std::path::Path;\n-\n-pub(crate) fn expand_task(task: &ExpansionTask) -> Result<ExpansionResult, String> {\n-    let expander = create_expander(&task.lib);\n+use std::{\n+    collections::{hash_map::Entry, HashMap},\n+    path::{Path, PathBuf},\n+};\n+\n+#[derive(Default)]\n+pub(crate) struct ProcMacroSrv {\n+    expanders: HashMap<PathBuf, dylib::Expander>,\n+}\n \n-    match expander.expand(&task.macro_name, &task.macro_body, task.attributes.as_ref()) {\n-        Ok(expansion) => Ok(ExpansionResult { expansion }),\n-        Err(msg) => {\n-            Err(format!(\"Cannot perform expansion for {}: error {:?}\", &task.macro_name, msg))\n+impl ProcMacroSrv {\n+    pub fn expand(&mut self, task: &ExpansionTask) -> Result<ExpansionResult, String> {\n+        let expander = self.expander(&task.lib)?;\n+        match expander.expand(&task.macro_name, &task.macro_body, task.attributes.as_ref()) {\n+            Ok(expansion) => Ok(ExpansionResult { expansion }),\n+            Err(msg) => {\n+                Err(format!(\"Cannot perform expansion for {}: error {:?}\", &task.macro_name, msg))\n+            }\n         }\n     }\n-}\n-\n-pub(crate) fn list_macros(task: &ListMacrosTask) -> ListMacrosResult {\n-    let expander = create_expander(&task.lib);\n \n-    ListMacrosResult { macros: expander.list_macros() }\n-}\n+    pub fn list_macros(&mut self, task: &ListMacrosTask) -> Result<ListMacrosResult, String> {\n+        let expander = self.expander(&task.lib)?;\n+        Ok(ListMacrosResult { macros: expander.list_macros() })\n+    }\n \n-fn create_expander(lib: &Path) -> dylib::Expander {\n-    dylib::Expander::new(lib)\n-        .unwrap_or_else(|err| panic!(\"Cannot create expander for {}: {:?}\", lib.display(), err))\n+    fn expander(&mut self, path: &Path) -> Result<&dylib::Expander, String> {\n+        Ok(match self.expanders.entry(path.to_path_buf()) {\n+            Entry::Vacant(v) => v.insert(dylib::Expander::new(path).map_err(|err| {\n+                format!(\"Cannot create expander for {}: {:?}\", path.display(), err)\n+            })?),\n+            Entry::Occupied(e) => e.into_mut(),\n+        })\n+    }\n }\n \n pub mod cli;"}, {"sha": "646a427c5653546f4638b319c681509a11cc16eb", "filename": "crates/ra_proc_macro_srv/src/tests/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e24444aee9db36d8de530dee9c0283ce793c6fd/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e24444aee9db36d8de530dee9c0283ce793c6fd/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs?ref=3e24444aee9db36d8de530dee9c0283ce793c6fd", "patch": "@@ -1,7 +1,7 @@\n //! utils used in proc-macro tests\n \n use crate::dylib;\n-use crate::list_macros;\n+use crate::ProcMacroSrv;\n pub use difference::Changeset as __Changeset;\n use ra_proc_macro::ListMacrosTask;\n use std::str::FromStr;\n@@ -59,7 +59,7 @@ pub fn assert_expand(\n pub fn list(crate_name: &str, version: &str) -> Vec<String> {\n     let path = fixtures::dylib_path(crate_name, version);\n     let task = ListMacrosTask { lib: path };\n-\n-    let res = list_macros(&task);\n+    let mut srv = ProcMacroSrv::default();\n+    let res = srv.list_macros(&task).unwrap();\n     res.macros.into_iter().map(|(name, kind)| format!(\"{} [{:?}]\", name, kind)).collect()\n }"}]}