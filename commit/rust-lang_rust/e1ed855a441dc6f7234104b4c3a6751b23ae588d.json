{"sha": "e1ed855a441dc6f7234104b4c3a6751b23ae588d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZWQ4NTVhNDQxZGM2ZjcyMzQxMDRiNGMzYTY3NTFiMjNhZTU4OGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-17T14:02:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-17T14:02:57Z"}, "message": "more tests -- also one showing why we are not done yet", "tree": {"sha": "3ce43255ece79a9ca50070c8c549ac45caa688ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ce43255ece79a9ca50070c8c549ac45caa688ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1ed855a441dc6f7234104b4c3a6751b23ae588d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ed855a441dc6f7234104b4c3a6751b23ae588d", "html_url": "https://github.com/rust-lang/rust/commit/e1ed855a441dc6f7234104b4c3a6751b23ae588d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1ed855a441dc6f7234104b4c3a6751b23ae588d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a313183b1bfe6f2324ae2dc30673e1649cf3859", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a313183b1bfe6f2324ae2dc30673e1649cf3859", "html_url": "https://github.com/rust-lang/rust/commit/0a313183b1bfe6f2324ae2dc30673e1649cf3859"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "d734caf1d97aebe05e7440f4c77775fca0b6e8f4", "filename": "tests/compile-fail/stacked_borrows/shared_rw_borrows_are_weak1.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1ed855a441dc6f7234104b4c3a6751b23ae588d/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ed855a441dc6f7234104b4c3a6751b23ae588d/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs?ref=e1ed855a441dc6f7234104b4c3a6751b23ae588d", "patch": "@@ -0,0 +1,14 @@\n+// We want to test that granting a SharedReadWrite will be added\n+// *below* an already granted Unique -- so writing to\n+// the SharedReadWrite will invalidate the Unique.\n+\n+use std::mem;\n+use std::cell::Cell;\n+\n+fn main() { unsafe {\n+    let x = &mut Cell::new(0);\n+    let y: &mut Cell<i32> = mem::transmute(&mut *x); // launder lifetime\n+    let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n+    shr_rw.set(1);\n+    y.get_mut(); //~ ERROR borrow stack\n+} }"}, {"sha": "942bb503db02753ca74ce8f02afc9d082c68139b", "filename": "tests/compile-fail/stacked_borrows/shared_rw_borrows_are_weak2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1ed855a441dc6f7234104b4c3a6751b23ae588d/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ed855a441dc6f7234104b4c3a6751b23ae588d/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs?ref=e1ed855a441dc6f7234104b4c3a6751b23ae588d", "patch": "@@ -0,0 +1,14 @@\n+// We want to test that granting a SharedReadWrite will be added\n+// *below* an already granted SharedReadWrite -- so writing to\n+// the SharedReadWrite will invalidate the SharedReadWrite.\n+\n+use std::mem;\n+use std::cell::RefCell;\n+\n+fn main() { unsafe {\n+    let x = &mut RefCell::new(0);\n+    let y: &i32 = mem::transmute(&*x.borrow()); // launder lifetime\n+    let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n+    shr_rw.replace(1);\n+    let _val = *y; //~ ERROR borrow stack\n+} }"}, {"sha": "7d84e33b3d6b3ff7dafea2f6263bec3bedb0bff1", "filename": "tests/run-pass/stacked-borrows/stacked-borrows.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1ed855a441dc6f7234104b4c3a6751b23ae588d/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ed855a441dc6f7234104b4c3a6751b23ae588d/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs?ref=e1ed855a441dc6f7234104b4c3a6751b23ae588d", "patch": "@@ -11,6 +11,7 @@ fn main() {\n     drop_after_sharing();\n     direct_mut_to_const_raw();\n     two_raw();\n+    shr_and_raw();\n }\n \n // Deref a raw ptr to access a field of a large struct, where the field\n@@ -136,3 +137,15 @@ fn two_raw() { unsafe {\n     *y1 += 2;\n     *y2 += 1;\n } }\n+\n+// Make sure that creating a *mut does not invalidate existing shared references.\n+fn shr_and_raw() { /* unsafe {\n+    use std::mem;\n+    // FIXME: This is currently disabled because \"as *mut _\" incurs a reborrow.\n+    let x = &mut 0;\n+    let y1: &i32 = mem::transmute(&*x); // launder lifetimes\n+    let y2 = x as *mut _;\n+    let _val = *y1;\n+    *y2 += 1;\n+    // TODO: Once this works, add compile-fail test that tries to read from y1 again.\n+} */ }"}]}