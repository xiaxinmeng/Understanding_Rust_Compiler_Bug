{"sha": "f8b36bbc3b968754b71844d942286e81415627b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YjM2YmJjM2I5Njg3NTRiNzE4NDRkOTQyMjg2ZTgxNDE1NjI3Yjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-07T15:32:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-07T15:42:36Z"}, "message": "Rename File -> SourceFileNode", "tree": {"sha": "72be8cc4bac951b00746291e4b357b86def7d4c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72be8cc4bac951b00746291e4b357b86def7d4c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8b36bbc3b968754b71844d942286e81415627b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b36bbc3b968754b71844d942286e81415627b8", "html_url": "https://github.com/rust-lang/rust/commit/f8b36bbc3b968754b71844d942286e81415627b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8b36bbc3b968754b71844d942286e81415627b8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2119fe214303325e86174b139d7ad8193b2ce251", "url": "https://api.github.com/repos/rust-lang/rust/commits/2119fe214303325e86174b139d7ad8193b2ce251", "html_url": "https://github.com/rust-lang/rust/commit/2119fe214303325e86174b139d7ad8193b2ce251"}], "stats": {"total": 219, "additions": 117, "deletions": 102}, "files": [{"sha": "689d4c92f8e884fa16623a38ef17da31ac139840", "filename": "crates/ra_analysis/src/completion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -2,7 +2,7 @@ use ra_editor::find_node_at_offset;\n use ra_syntax::{\n     algo::visit::{visitor, visitor_ctx, Visitor, VisitorCtx},\n     ast::{self, AstChildren, LoopBodyOwner, ModuleItemOwner},\n-    AstNode, AtomEdit, File,\n+    AstNode, AtomEdit, SourceFileNode,\n     SyntaxKind::*,\n     SyntaxNodeRef, TextUnit,\n };\n@@ -63,7 +63,7 @@ pub(crate) fn resolve_based_completion(\n pub(crate) fn find_target_module(\n     module_tree: &ModuleTree,\n     module_id: ModuleId,\n-    file: &File,\n+    file: &SourceFileNode,\n     offset: TextUnit,\n ) -> Option<ModuleId> {\n     let name_ref: ast::NameRef = find_node_at_offset(file.syntax(), offset)?;\n@@ -142,7 +142,7 @@ pub(crate) fn scope_completion(\n }\n \n fn complete_module_items(\n-    file: &File,\n+    file: &SourceFileNode,\n     items: AstChildren<ast::ModuleItem>,\n     this_item: Option<ast::NameRef>,\n     acc: &mut Vec<CompletionItem>,\n@@ -164,7 +164,7 @@ fn complete_module_items(\n     );\n }\n \n-fn complete_name_ref(file: &File, name_ref: ast::NameRef, acc: &mut Vec<CompletionItem>) {\n+fn complete_name_ref(file: &SourceFileNode, name_ref: ast::NameRef, acc: &mut Vec<CompletionItem>) {\n     if !is_node::<ast::Path>(name_ref.syntax()) {\n         return;\n     }\n@@ -239,7 +239,7 @@ fn is_node<'a, N: AstNode<'a>>(node: SyntaxNodeRef<'a>) -> bool {\n }\n \n fn complete_expr_keywords(\n-    file: &File,\n+    file: &SourceFileNode,\n     fn_def: ast::FnDef,\n     name_ref: ast::NameRef,\n     acc: &mut Vec<CompletionItem>,"}, {"sha": "194f1a6b082fb53c28d0a840c1cea5674d69c8bb", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -1,7 +1,7 @@\n use std::sync::Arc;\n \n use ra_editor::LineIndex;\n-use ra_syntax::{File, SyntaxNode};\n+use ra_syntax::{SourceFileNode, SyntaxNode};\n use salsa::{self, Database};\n \n use crate::{\n@@ -85,7 +85,7 @@ salsa::database_storage! {\n \n salsa::query_group! {\n     pub(crate) trait SyntaxDatabase: crate::input::FilesDatabase {\n-        fn file_syntax(file_id: FileId) -> File {\n+        fn file_syntax(file_id: FileId) -> SourceFileNode {\n             type FileSyntaxQuery;\n         }\n         fn file_lines(file_id: FileId) -> Arc<LineIndex> {\n@@ -103,9 +103,9 @@ salsa::query_group! {\n     }\n }\n \n-fn file_syntax(db: &impl SyntaxDatabase, file_id: FileId) -> File {\n+fn file_syntax(db: &impl SyntaxDatabase, file_id: FileId) -> SourceFileNode {\n     let text = db.file_text(file_id);\n-    File::parse(&*text)\n+    SourceFileNode::parse(&*text)\n }\n fn file_lines(db: &impl SyntaxDatabase, file_id: FileId) -> Arc<LineIndex> {\n     let text = db.file_text(file_id);"}, {"sha": "bbe16947cc49c918e0eebb2d9cf9c5cc64ca1aa3", "filename": "crates/ra_analysis/src/descriptors/function/scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -272,7 +272,7 @@ pub fn resolve_local_name<'a>(\n #[cfg(test)]\n mod tests {\n     use ra_editor::find_node_at_offset;\n-    use ra_syntax::File;\n+    use ra_syntax::SourceFileNode;\n     use test_utils::extract_offset;\n \n     use super::*;\n@@ -287,7 +287,7 @@ mod tests {\n             buf.push_str(&code[off..]);\n             buf\n         };\n-        let file = File::parse(&code);\n+        let file = SourceFileNode::parse(&code);\n         let marker: ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n         let fn_def: ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n         let scopes = FnScopes::new(fn_def);\n@@ -376,7 +376,7 @@ mod tests {\n \n     fn do_check_local_name(code: &str, expected_offset: u32) {\n         let (off, code) = extract_offset(code);\n-        let file = File::parse(&code);\n+        let file = SourceFileNode::parse(&code);\n         let fn_def: ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n         let name_ref: ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n "}, {"sha": "5fcbc3cb052cd8ff03a1c9256648e55a3aff585f", "filename": "crates/ra_analysis/src/descriptors/module/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fscope.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -95,10 +95,10 @@ fn collect_imports(tree: ast::UseTree, acc: &mut Vec<Entry>) {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use ra_syntax::{ast::ModuleItemOwner, File};\n+    use ra_syntax::{ast::ModuleItemOwner, SourceFileNode};\n \n     fn do_check(code: &str, expected: &[&str]) {\n-        let file = File::parse(&code);\n+        let file = SourceFileNode::parse(&code);\n         let scope = ModuleScope::new(file.ast().items());\n         let actual = scope.entries.iter().map(|it| it.name()).collect::<Vec<_>>();\n         assert_eq!(expected, actual.as_slice());"}, {"sha": "00c4a08bd5c6f696f0b26a8c738840c28d190a2d", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -7,7 +7,7 @@ use std::{\n use ra_editor::{self, find_node_at_offset, FileSymbol, LineIndex, LocalEdit};\n use ra_syntax::{\n     ast::{self, ArgListOwner, Expr, NameOwner},\n-    AstNode, File, SmolStr,\n+    AstNode, SourceFileNode, SmolStr,\n     SyntaxKind::*,\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n@@ -27,7 +27,7 @@ use crate::{\n     input::{FilesDatabase, SourceRoot, SourceRootId, WORKSPACE},\n     symbol_index::SymbolIndex,\n     AnalysisChange, Cancelable, CrateGraph, CrateId, Diagnostic, FileId, FileResolver,\n-    FileSystemEdit, FilePosition, Query, SourceChange, SourceFileEdit,\n+    FileSystemEdit, FilePosition, Query, SourceChange, SourceFileNodeEdit,\n };\n \n #[derive(Clone, Debug)]\n@@ -180,7 +180,7 @@ impl fmt::Debug for AnalysisImpl {\n }\n \n impl AnalysisImpl {\n-    pub fn file_syntax(&self, file_id: FileId) -> File {\n+    pub fn file_syntax(&self, file_id: FileId) -> SourceFileNode {\n         self.db.file_syntax(file_id)\n     }\n     pub fn file_line_index(&self, file_id: FileId) -> Arc<LineIndex> {\n@@ -562,7 +562,7 @@ impl AnalysisImpl {\n \n impl SourceChange {\n     pub(crate) fn from_local_edit(file_id: FileId, label: &str, edit: LocalEdit) -> SourceChange {\n-        let file_edit = SourceFileEdit {\n+        let file_edit = SourceFileNodeEdit {\n             file_id,\n             edits: edit.edit.into_atoms(),\n         };"}, {"sha": "ad0273edc044c247e3157062740008ae74486255", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -20,7 +20,7 @@ pub mod mock_analysis;\n \n use std::{fmt, sync::Arc};\n \n-use ra_syntax::{AtomEdit, File, TextRange, TextUnit};\n+use ra_syntax::{AtomEdit, SourceFileNode, TextRange, TextUnit};\n use rayon::prelude::*;\n use relative_path::RelativePathBuf;\n \n@@ -128,13 +128,13 @@ pub struct FilePosition {\n #[derive(Debug)]\n pub struct SourceChange {\n     pub label: String,\n-    pub source_file_edits: Vec<SourceFileEdit>,\n+    pub source_file_edits: Vec<SourceFileNodeEdit>,\n     pub file_system_edits: Vec<FileSystemEdit>,\n     pub cursor_position: Option<FilePosition>,\n }\n \n #[derive(Debug)]\n-pub struct SourceFileEdit {\n+pub struct SourceFileNodeEdit {\n     pub file_id: FileId,\n     pub edits: Vec<AtomEdit>,\n }\n@@ -204,16 +204,16 @@ pub struct Analysis {\n }\n \n impl Analysis {\n-    pub fn file_syntax(&self, file_id: FileId) -> File {\n+    pub fn file_syntax(&self, file_id: FileId) -> SourceFileNode {\n         self.imp.file_syntax(file_id).clone()\n     }\n     pub fn file_line_index(&self, file_id: FileId) -> Arc<LineIndex> {\n         self.imp.file_line_index(file_id)\n     }\n-    pub fn extend_selection(&self, file: &File, range: TextRange) -> TextRange {\n+    pub fn extend_selection(&self, file: &SourceFileNode, range: TextRange) -> TextRange {\n         ra_editor::extend_selection(file, range).unwrap_or(range)\n     }\n-    pub fn matching_brace(&self, file: &File, offset: TextUnit) -> Option<TextUnit> {\n+    pub fn matching_brace(&self, file: &SourceFileNode, offset: TextUnit) -> Option<TextUnit> {\n         ra_editor::matching_brace(file, offset)\n     }\n     pub fn syntax_tree(&self, file_id: FileId) -> String {\n@@ -309,7 +309,7 @@ pub struct LibraryData {\n impl LibraryData {\n     pub fn prepare(files: Vec<(FileId, String)>, file_resolver: Arc<FileResolver>) -> LibraryData {\n         let symbol_index = SymbolIndex::for_files(files.par_iter().map(|(file_id, text)| {\n-            let file = File::parse(text);\n+            let file = SourceFileNode::parse(text);\n             (*file_id, file)\n         }));\n         LibraryData {"}, {"sha": "3a0667ecda90f6e8eb482dcbd5aec5dd35944dd2", "filename": "crates/ra_analysis/src/symbol_index.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -6,7 +6,7 @@ use std::{\n use fst::{self, Streamer};\n use ra_editor::{file_symbols, FileSymbol};\n use ra_syntax::{\n-    File,\n+    SourceFileNode,\n     SyntaxKind::{self, *},\n };\n use rayon::prelude::*;\n@@ -34,7 +34,9 @@ impl Hash for SymbolIndex {\n }\n \n impl SymbolIndex {\n-    pub(crate) fn for_files(files: impl ParallelIterator<Item = (FileId, File)>) -> SymbolIndex {\n+    pub(crate) fn for_files(\n+        files: impl ParallelIterator<Item = (FileId, SourceFileNode)>,\n+    ) -> SymbolIndex {\n         let mut symbols = files\n             .flat_map(|(file_id, file)| {\n                 file_symbols(&file)\n@@ -51,7 +53,7 @@ impl SymbolIndex {\n         SymbolIndex { symbols, map }\n     }\n \n-    pub(crate) fn for_file(file_id: FileId, file: File) -> SymbolIndex {\n+    pub(crate) fn for_file(file_id: FileId, file: SourceFileNode) -> SymbolIndex {\n         SymbolIndex::for_files(rayon::iter::once((file_id, file)))\n     }\n }"}, {"sha": "e45934ce099a98ed0e432c684fd33d24b307c9d7", "filename": "crates/ra_analysis/src/syntax_ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -1,4 +1,4 @@\n-use ra_syntax::{File, SyntaxKind, SyntaxNode, SyntaxNodeRef, TextRange};\n+use ra_syntax::{SourceFileNode, SyntaxKind, SyntaxNode, SyntaxNodeRef, TextRange};\n \n use crate::db::SyntaxDatabase;\n use crate::FileId;\n@@ -43,7 +43,7 @@ impl LocalSyntaxPtr {\n         }\n     }\n \n-    pub(crate) fn resolve(self, file: &File) -> SyntaxNode {\n+    pub(crate) fn resolve(self, file: &SourceFileNode) -> SyntaxNode {\n         let mut curr = file.syntax();\n         loop {\n             if curr.range() == self.range && curr.kind() == self.kind {\n@@ -67,7 +67,7 @@ impl LocalSyntaxPtr {\n #[test]\n fn test_local_syntax_ptr() {\n     use ra_syntax::{ast, AstNode};\n-    let file = File::parse(\"struct Foo { f: u32, }\");\n+    let file = SourceFileNode::parse(\"struct Foo { f: u32, }\");\n     let field = file\n         .syntax()\n         .descendants()"}, {"sha": "5ca86df4dd523ccb83dc4e6eab2aafcc898eb3c3", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -11,7 +11,7 @@ use std::{fs, io::Read, path::Path, time::Instant};\n use clap::{App, Arg, SubCommand};\n use join_to_string::join;\n use ra_editor::{extend_selection, file_structure, syntax_tree};\n-use ra_syntax::{File, TextRange};\n+use ra_syntax::{SourceFileNode, TextRange};\n use tools::collect_tests;\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n@@ -79,9 +79,9 @@ fn main() -> Result<()> {\n     Ok(())\n }\n \n-fn file() -> Result<File> {\n+fn file() -> Result<SourceFileNode> {\n     let text = read_stdin()?;\n-    Ok(File::parse(&text))\n+    Ok(SourceFileNode::parse(&text))\n }\n \n fn read_stdin() -> Result<String> {\n@@ -100,12 +100,12 @@ fn render_test(file: &Path, line: usize) -> Result<(String, String)> {\n         None => bail!(\"No test found at line {} at {}\", line, file.display()),\n         Some((_start_line, test)) => test,\n     };\n-    let file = File::parse(&test.text);\n+    let file = SourceFileNode::parse(&test.text);\n     let tree = syntax_tree(&file);\n     Ok((test.text, tree))\n }\n \n-fn selections(file: &File, start: u32, end: u32) -> String {\n+fn selections(file: &SourceFileNode, start: u32, end: u32) -> String {\n     let mut ranges = Vec::new();\n     let mut cur = Some(TextRange::from_to((start - 1).into(), (end - 1).into()));\n     while let Some(r) = cur {"}, {"sha": "0139b19d3a0c1416cb2569599b07c13a1b2e0db8", "filename": "crates/ra_editor/src/code_actions.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -3,7 +3,7 @@ use join_to_string::join;\n use ra_syntax::{\n     algo::{find_covering_node, find_leaf_at_offset},\n     ast::{self, AstNode, AttrsOwner, NameOwner, TypeParamsOwner},\n-    Direction, File,\n+    Direction, SourceFileNode,\n     SyntaxKind::{COMMA, WHITESPACE},\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n@@ -16,7 +16,10 @@ pub struct LocalEdit {\n     pub cursor_position: Option<TextUnit>,\n }\n \n-pub fn flip_comma<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> LocalEdit + 'a> {\n+pub fn flip_comma<'a>(\n+    file: &'a SourceFileNode,\n+    offset: TextUnit,\n+) -> Option<impl FnOnce() -> LocalEdit + 'a> {\n     let syntax = file.syntax();\n \n     let comma = find_leaf_at_offset(syntax, offset).find(|leaf| leaf.kind() == COMMA)?;\n@@ -33,7 +36,10 @@ pub fn flip_comma<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce()\n     })\n }\n \n-pub fn add_derive<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> LocalEdit + 'a> {\n+pub fn add_derive<'a>(\n+    file: &'a SourceFileNode,\n+    offset: TextUnit,\n+) -> Option<impl FnOnce() -> LocalEdit + 'a> {\n     let nominal = find_node_at_offset::<ast::NominalDef>(file.syntax(), offset)?;\n     Some(move || {\n         let derive_attr = nominal\n@@ -58,7 +64,10 @@ pub fn add_derive<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce()\n     })\n }\n \n-pub fn add_impl<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> LocalEdit + 'a> {\n+pub fn add_impl<'a>(\n+    file: &'a SourceFileNode,\n+    offset: TextUnit,\n+) -> Option<impl FnOnce() -> LocalEdit + 'a> {\n     let nominal = find_node_at_offset::<ast::NominalDef>(file.syntax(), offset)?;\n     let name = nominal.name()?;\n \n@@ -98,7 +107,7 @@ pub fn add_impl<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() ->\n }\n \n pub fn introduce_variable<'a>(\n-    file: &'a File,\n+    file: &'a SourceFileNode,\n     range: TextRange,\n ) -> Option<impl FnOnce() -> LocalEdit + 'a> {\n     let node = find_covering_node(file.syntax(), range);"}, {"sha": "8f11d5364b749f89785b271b87dc2ca387900e91", "filename": "crates/ra_editor/src/extend_selection.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -1,11 +1,11 @@\n use ra_syntax::{\n     algo::{find_covering_node, find_leaf_at_offset, LeafAtOffset},\n-    Direction, File,\n+    Direction, SourceFileNode,\n     SyntaxKind::*,\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n \n-pub fn extend_selection(file: &File, range: TextRange) -> Option<TextRange> {\n+pub fn extend_selection(file: &SourceFileNode, range: TextRange) -> Option<TextRange> {\n     let syntax = file.syntax();\n     extend(syntax.borrowed(), range)\n }\n@@ -120,7 +120,7 @@ mod tests {\n \n     fn do_check(before: &str, afters: &[&str]) {\n         let (cursor, before) = extract_offset(before);\n-        let file = File::parse(&before);\n+        let file = SourceFileNode::parse(&before);\n         let mut range = TextRange::offset_len(cursor, 0.into());\n         for &after in afters {\n             range = extend_selection(&file, range).unwrap();"}, {"sha": "2a8fa3cda95df5dcde2a7aa9d9272f123acc179b", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -1,7 +1,7 @@\n use rustc_hash::FxHashSet;\n \n use ra_syntax::{\n-    ast, AstNode, Direction, File,\n+    ast, AstNode, Direction, SourceFileNode,\n     SyntaxKind::{self, *},\n     SyntaxNodeRef, TextRange,\n };\n@@ -18,7 +18,7 @@ pub struct Fold {\n     pub kind: FoldKind,\n }\n \n-pub fn folding_ranges(file: &File) -> Vec<Fold> {\n+pub fn folding_ranges(file: &SourceFileNode) -> Vec<Fold> {\n     let mut res = vec![];\n     let mut visited_comments = FxHashSet::default();\n     let mut visited_imports = FxHashSet::default();\n@@ -171,7 +171,7 @@ mod tests {\n \n     fn do_check(text: &str, fold_kinds: &[FoldKind]) {\n         let (ranges, text) = extract_ranges(text);\n-        let file = File::parse(&text);\n+        let file = SourceFileNode::parse(&text);\n         let folds = folding_ranges(&file);\n \n         assert_eq!("}, {"sha": "ff4e8303de67635681a7e22a116b275aa3fe7eda", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -30,7 +30,7 @@ pub use ra_syntax::AtomEdit;\n use ra_syntax::{\n     algo::find_leaf_at_offset,\n     ast::{self, AstNode, NameOwner},\n-    File,\n+    SourceFileNode,\n     Location,\n     SyntaxKind::{self, *},\n     SyntaxNodeRef, TextRange, TextUnit,\n@@ -60,7 +60,7 @@ pub enum RunnableKind {\n     Bin,\n }\n \n-pub fn matching_brace(file: &File, offset: TextUnit) -> Option<TextUnit> {\n+pub fn matching_brace(file: &SourceFileNode, offset: TextUnit) -> Option<TextUnit> {\n     const BRACES: &[SyntaxKind] = &[\n         L_CURLY, R_CURLY, L_BRACK, R_BRACK, L_PAREN, R_PAREN, L_ANGLE, R_ANGLE,\n     ];\n@@ -78,7 +78,7 @@ pub fn matching_brace(file: &File, offset: TextUnit) -> Option<TextUnit> {\n     Some(matching_node.range().start())\n }\n \n-pub fn highlight(file: &File) -> Vec<HighlightedRange> {\n+pub fn highlight(file: &SourceFileNode) -> Vec<HighlightedRange> {\n     let mut res = Vec::new();\n     for node in file.syntax().descendants() {\n         let tag = match node.kind() {\n@@ -100,7 +100,7 @@ pub fn highlight(file: &File) -> Vec<HighlightedRange> {\n     res\n }\n \n-pub fn diagnostics(file: &File) -> Vec<Diagnostic> {\n+pub fn diagnostics(file: &SourceFileNode) -> Vec<Diagnostic> {\n     fn location_to_range(location: Location) -> TextRange {\n         match location {\n             Location::Offset(offset) => TextRange::offset_len(offset, 1.into()),\n@@ -117,11 +117,11 @@ pub fn diagnostics(file: &File) -> Vec<Diagnostic> {\n         .collect()\n }\n \n-pub fn syntax_tree(file: &File) -> String {\n+pub fn syntax_tree(file: &SourceFileNode) -> String {\n     ::ra_syntax::utils::dump_tree(file.syntax())\n }\n \n-pub fn runnables(file: &File) -> Vec<Runnable> {\n+pub fn runnables(file: &SourceFileNode) -> Vec<Runnable> {\n     file.syntax()\n         .descendants()\n         .filter_map(ast::FnDef::cast)\n@@ -163,7 +163,7 @@ mod tests {\n \n     #[test]\n     fn test_highlighting() {\n-        let file = File::parse(\n+        let file = SourceFileNode::parse(\n             r#\"\n // comment\n fn main() {}\n@@ -184,7 +184,7 @@ fn main() {}\n \n     #[test]\n     fn test_runnables() {\n-        let file = File::parse(\n+        let file = SourceFileNode::parse(\n             r#\"\n fn main() {}\n \n@@ -209,7 +209,7 @@ fn test_foo() {}\n     fn test_matching_brace() {\n         fn do_check(before: &str, after: &str) {\n             let (pos, before) = extract_offset(before);\n-            let file = File::parse(&before);\n+            let file = SourceFileNode::parse(&before);\n             let new_pos = match matching_brace(&file, pos) {\n                 None => pos,\n                 Some(pos) => pos,"}, {"sha": "6d3b0514a2321332331c16fb28382ecbf0284754", "filename": "crates/ra_editor/src/symbols.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fsymbols.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -3,7 +3,7 @@ use crate::TextRange;\n use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n     ast::{self, DocCommentsOwner, NameOwner},\n-    AstNode, File, SmolStr, SyntaxKind, SyntaxNodeRef, WalkEvent,\n+    AstNode, SourceFileNode, SmolStr, SyntaxKind, SyntaxNodeRef, WalkEvent,\n };\n \n #[derive(Debug, Clone)]\n@@ -23,7 +23,7 @@ pub struct FileSymbol {\n }\n \n impl FileSymbol {\n-    pub fn docs(&self, file: &File) -> Option<String> {\n+    pub fn docs(&self, file: &SourceFileNode) -> Option<String> {\n         file.syntax()\n             .descendants()\n             .filter(|node| node.kind() == self.kind && node.range() == self.node_range)\n@@ -52,7 +52,7 @@ impl FileSymbol {\n     }\n }\n \n-pub fn file_symbols(file: &File) -> Vec<FileSymbol> {\n+pub fn file_symbols(file: &SourceFileNode) -> Vec<FileSymbol> {\n     file.syntax().descendants().filter_map(to_symbol).collect()\n }\n \n@@ -77,7 +77,7 @@ fn to_symbol(node: SyntaxNodeRef) -> Option<FileSymbol> {\n         .accept(node)?\n }\n \n-pub fn file_structure(file: &File) -> Vec<StructureNode> {\n+pub fn file_structure(file: &SourceFileNode) -> Vec<StructureNode> {\n     let mut res = Vec::new();\n     let mut stack = Vec::new();\n \n@@ -153,7 +153,7 @@ mod tests {\n \n     #[test]\n     fn test_file_structure() {\n-        let file = File::parse(\n+        let file = SourceFileNode::parse(\n             r#\"\n struct Foo {\n     x: i32"}, {"sha": "cbeb6433b1b7d37bdb78224e6e580e65f0b7c300", "filename": "crates/ra_editor/src/test_utils.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftest_utils.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -1,10 +1,14 @@\n use crate::LocalEdit;\n pub use crate::_test_utils::*;\n-use ra_syntax::{File, TextRange, TextUnit};\n+use ra_syntax::{SourceFileNode, TextRange, TextUnit};\n \n-pub fn check_action<F: Fn(&File, TextUnit) -> Option<LocalEdit>>(before: &str, after: &str, f: F) {\n+pub fn check_action<F: Fn(&SourceFileNode, TextUnit) -> Option<LocalEdit>>(\n+    before: &str,\n+    after: &str,\n+    f: F,\n+) {\n     let (before_cursor_pos, before) = extract_offset(before);\n-    let file = File::parse(&before);\n+    let file = SourceFileNode::parse(&before);\n     let result = f(&file, before_cursor_pos).expect(\"code action is not applicable\");\n     let actual = result.edit.apply(&before);\n     let actual_cursor_pos = match result.cursor_position {\n@@ -15,13 +19,13 @@ pub fn check_action<F: Fn(&File, TextUnit) -> Option<LocalEdit>>(before: &str, a\n     assert_eq_text!(after, &actual);\n }\n \n-pub fn check_action_range<F: Fn(&File, TextRange) -> Option<LocalEdit>>(\n+pub fn check_action_range<F: Fn(&SourceFileNode, TextRange) -> Option<LocalEdit>>(\n     before: &str,\n     after: &str,\n     f: F,\n ) {\n     let (range, before) = extract_range(before);\n-    let file = File::parse(&before);\n+    let file = SourceFileNode::parse(&before);\n     let result = f(&file, range).expect(\"code action is not applicable\");\n     let actual = result.edit.apply(&before);\n     let actual_cursor_pos = match result.cursor_position {"}, {"sha": "f894d83922a6901f682ad0bef1e30ac2fb2f8169", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -4,14 +4,14 @@ use ra_syntax::{\n     algo::{find_covering_node, find_leaf_at_offset, LeafAtOffset},\n     ast,\n     text_utils::{contains_offset_nonstrict, intersect},\n-    AstNode, File, SyntaxKind,\n+    AstNode, SourceFileNode, SyntaxKind,\n     SyntaxKind::*,\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n \n use crate::{find_node_at_offset, EditBuilder, LocalEdit};\n \n-pub fn join_lines(file: &File, range: TextRange) -> LocalEdit {\n+pub fn join_lines(file: &SourceFileNode, range: TextRange) -> LocalEdit {\n     let range = if range.is_empty() {\n         let syntax = file.syntax();\n         let text = syntax.text().slice(range.start()..);\n@@ -55,7 +55,7 @@ pub fn join_lines(file: &File, range: TextRange) -> LocalEdit {\n     }\n }\n \n-pub fn on_enter(file: &File, offset: TextUnit) -> Option<LocalEdit> {\n+pub fn on_enter(file: &SourceFileNode, offset: TextUnit) -> Option<LocalEdit> {\n     let comment = find_leaf_at_offset(file.syntax(), offset)\n         .left_biased()\n         .and_then(ast::Comment::cast)?;\n@@ -80,7 +80,7 @@ pub fn on_enter(file: &File, offset: TextUnit) -> Option<LocalEdit> {\n     })\n }\n \n-fn node_indent<'a>(file: &'a File, node: SyntaxNodeRef) -> Option<&'a str> {\n+fn node_indent<'a>(file: &'a SourceFileNode, node: SyntaxNodeRef) -> Option<&'a str> {\n     let ws = match find_leaf_at_offset(file.syntax(), node.range().start()) {\n         LeafAtOffset::Between(l, r) => {\n             assert!(r == node);\n@@ -100,7 +100,7 @@ fn node_indent<'a>(file: &'a File, node: SyntaxNodeRef) -> Option<&'a str> {\n     Some(&text[pos..])\n }\n \n-pub fn on_eq_typed(file: &File, offset: TextUnit) -> Option<LocalEdit> {\n+pub fn on_eq_typed(file: &SourceFileNode, offset: TextUnit) -> Option<LocalEdit> {\n     let let_stmt: ast::LetStmt = find_node_at_offset(file.syntax(), offset)?;\n     if let_stmt.has_semi() {\n         return None;\n@@ -390,7 +390,7 @@ fn foo() {\n \n     fn check_join_lines_sel(before: &str, after: &str) {\n         let (sel, before) = extract_range(before);\n-        let file = File::parse(&before);\n+        let file = SourceFileNode::parse(&before);\n         let result = join_lines(&file, sel);\n         let actual = result.edit.apply(&before);\n         assert_eq_text!(after, &actual);\n@@ -469,7 +469,7 @@ pub fn handle_find_matching_brace() {\n     fn test_on_eq_typed() {\n         fn do_check(before: &str, after: &str) {\n             let (offset, before) = extract_offset(before);\n-            let file = File::parse(&before);\n+            let file = SourceFileNode::parse(&before);\n             let result = on_eq_typed(&file, offset).unwrap();\n             let actual = result.edit.apply(&before);\n             assert_eq_text!(after, &actual);\n@@ -513,7 +513,7 @@ fn foo() {\n     fn test_on_enter() {\n         fn apply_on_enter(before: &str) -> Option<String> {\n             let (offset, before) = extract_offset(before);\n-            let file = File::parse(&before);\n+            let file = SourceFileNode::parse(&before);\n             let result = on_enter(&file, offset)?;\n             let actual = result.edit.apply(&before);\n             let actual = add_cursor(&actual, result.cursor_position.unwrap());"}, {"sha": "e5a2449c24eb3d7b16ce2f6f0a9a5ee1f13ac215", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -2,7 +2,7 @@ use languageserver_types::{\n     Location, Position, Range, SymbolKind, TextDocumentEdit, TextDocumentIdentifier,\n     TextDocumentItem, TextDocumentPositionParams, TextEdit, Url, VersionedTextDocumentIdentifier,\n };\n-use ra_analysis::{FileId, FileSystemEdit, SourceChange, SourceFileEdit, FilePosition};\n+use ra_analysis::{FileId, FileSystemEdit, SourceChange, SourceFileNodeEdit, FilePosition};\n use ra_editor::{AtomEdit, Edit, LineCol, LineIndex};\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n \n@@ -257,7 +257,7 @@ fn translate_offset_with_edit(\n     }\n }\n \n-impl TryConvWith for SourceFileEdit {\n+impl TryConvWith for SourceFileNodeEdit {\n     type Ctx = ServerWorld;\n     type Output = TextDocumentEdit;\n     fn try_conv_with(self, world: &ServerWorld) -> Result<TextDocumentEdit> {"}, {"sha": "9f8066c70936ede951873a0e08cb6f23332c8dd9", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -61,37 +61,37 @@ pub use crate::{\n \n use crate::yellow::GreenNode;\n \n-// TODO: pick a single name for everything. SourceFile maybe?\n+// TODO: pick a single name for everything. SourceFileNode maybe?\n /// File represents a parse tree for a single Rust file.\n-pub type File = ast::RootNode;\n+pub type SourceFileNode = ast::RootNode;\n \n-impl File {\n-    fn new(green: GreenNode, errors: Vec<SyntaxError>) -> File {\n+impl SourceFileNode {\n+    fn new(green: GreenNode, errors: Vec<SyntaxError>) -> SourceFileNode {\n         let root = SyntaxNode::new(green, errors);\n         if cfg!(debug_assertions) {\n             utils::validate_block_structure(root.borrowed());\n         }\n         assert_eq!(root.kind(), SyntaxKind::ROOT);\n         ast::RootNode { syntax: root }\n     }\n-    pub fn parse(text: &str) -> File {\n+    pub fn parse(text: &str) -> SourceFileNode {\n         let tokens = tokenize(&text);\n         let (green, errors) =\n             parser_impl::parse_with(yellow::GreenBuilder::new(), text, &tokens, grammar::root);\n-        File::new(green, errors)\n+        SourceFileNode::new(green, errors)\n     }\n-    pub fn reparse(&self, edit: &AtomEdit) -> File {\n+    pub fn reparse(&self, edit: &AtomEdit) -> SourceFileNode {\n         self.incremental_reparse(edit)\n             .unwrap_or_else(|| self.full_reparse(edit))\n     }\n-    pub fn incremental_reparse(&self, edit: &AtomEdit) -> Option<File> {\n+    pub fn incremental_reparse(&self, edit: &AtomEdit) -> Option<SourceFileNode> {\n         reparsing::incremental_reparse(self.syntax(), edit, self.errors())\n-            .map(|(green_node, errors)| File::new(green_node, errors))\n+            .map(|(green_node, errors)| SourceFileNode::new(green_node, errors))\n     }\n-    fn full_reparse(&self, edit: &AtomEdit) -> File {\n+    fn full_reparse(&self, edit: &AtomEdit) -> SourceFileNode {\n         let text =\n             text_utils::replace_range(self.syntax().text().to_string(), edit.delete, &edit.insert);\n-        File::parse(&text)\n+        SourceFileNode::parse(&text)\n     }\n     /// Typed AST representation of the parse tree.\n     pub fn ast(&self) -> ast::Root {"}, {"sha": "d48133166c7b5cb9a87d2a1b759101b4571ece9d", "filename": "crates/ra_syntax/src/reparsing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Freparsing.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -180,7 +180,7 @@ fn merge_errors(\n #[cfg(test)]\n mod tests {\n     use super::{\n-        super::{test_utils::extract_range, text_utils::replace_range, utils::dump_tree, File},\n+        super::{test_utils::extract_range, text_utils::replace_range, utils::dump_tree, SourceFileNode},\n         reparse_block, reparse_leaf, AtomEdit, GreenNode, SyntaxError, SyntaxNodeRef,\n };\n \n@@ -192,9 +192,9 @@ mod tests {\n         let (range, before) = extract_range(before);\n         let after = replace_range(before.clone(), range, replace_with);\n \n-        let fully_reparsed = File::parse(&after);\n+        let fully_reparsed = SourceFileNode::parse(&after);\n         let incrementally_reparsed = {\n-            let f = File::parse(&before);\n+            let f = SourceFileNode::parse(&before);\n             let edit = AtomEdit {\n                 delete: range,\n                 insert: replace_with.to_string(),\n@@ -203,7 +203,7 @@ mod tests {\n                 reparser(f.syntax(), &edit).expect(\"cannot incrementally reparse\");\n             let green_root = node.replace_with(green);\n             let errors = super::merge_errors(f.errors(), new_errors, node, &edit);\n-            File::new(green_root, errors)\n+            SourceFileNode::new(green_root, errors)\n         };\n \n         assert_eq_text!("}, {"sha": "5bbdf80bb75f19a55f9c6cd7560ae9eda28aa482", "filename": "crates/ra_syntax/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_syntax%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_syntax%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Futils.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -1,4 +1,4 @@\n-use crate::{File, SyntaxKind, SyntaxNodeRef, WalkEvent};\n+use crate::{SourceFileNode, SyntaxKind, SyntaxNodeRef, WalkEvent};\n use std::fmt::Write;\n use std::str;\n \n@@ -45,7 +45,7 @@ pub fn dump_tree(syntax: SyntaxNodeRef) -> String {\n }\n \n pub fn check_fuzz_invariants(text: &str) {\n-    let file = File::parse(text);\n+    let file = SourceFileNode::parse(text);\n     let root = file.syntax();\n     validate_block_structure(root);\n     let _ = file.ast();"}, {"sha": "a10b297c0f061195187ad0c5f9eec6f947ee4275", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -5,15 +5,15 @@ use arrayvec::ArrayString;\n use crate::{\n     algo::visit::{visitor_ctx, VisitorCtx},\n     ast::{self, AstNode},\n-    File,\n+    SourceFileNode,\n     string_lexing::{self, CharComponentKind},\n     yellow::{\n         SyntaxError,\n         SyntaxErrorKind::*,\n     },\n };\n \n-pub(crate) fn validate(file: &File) -> Vec<SyntaxError> {\n+pub(crate) fn validate(file: &SourceFileNode) -> Vec<SyntaxError> {\n     let mut errors = Vec::new();\n     for node in file.syntax().descendants() {\n         let _ = visitor_ctx(&mut errors)\n@@ -155,11 +155,11 @@ fn is_ascii_escape(code: char) -> bool {\n \n #[cfg(test)]\n mod test {\n-    use crate::File;\n+    use crate::SourceFileNode;\n \n-    fn build_file(literal: &str) -> File {\n+    fn build_file(literal: &str) -> SourceFileNode {\n         let src = format!(\"const C: char = '{}';\", literal);\n-        File::parse(&src)\n+        SourceFileNode::parse(&src)\n     }\n \n     fn assert_valid_char(literal: &str) {"}, {"sha": "67acc9020a4d3930b905b7bc991d4461508e729a", "filename": "crates/ra_syntax/tests/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_syntax%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/crates%2Fra_syntax%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Ftest.rs?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -11,7 +11,7 @@ use std::{\n \n use ra_syntax::{\n     utils::{check_fuzz_invariants, dump_tree},\n-    File,\n+    SourceFileNode,\n };\n \n #[test]\n@@ -25,7 +25,7 @@ fn lexer_tests() {\n #[test]\n fn parser_tests() {\n     dir_tests(&[\"parser/inline\", \"parser/ok\", \"parser/err\"], |text| {\n-        let file = File::parse(text);\n+        let file = SourceFileNode::parse(text);\n         dump_tree(file.syntax())\n     })\n }"}, {"sha": "ec420d1abb1434f102975624d3f7bec97055c2f1", "filename": "editors/code/src/commands/apply_source_change.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8b36bbc3b968754b71844d942286e81415627b8/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f8b36bbc3b968754b71844d942286e81415627b8/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts?ref=f8b36bbc3b968754b71844d942286e81415627b8", "patch": "@@ -12,14 +12,14 @@ interface FileSystemEdit {\n \n export interface SourceChange {\n     label: string;\n-    sourceFileEdits: lc.TextDocumentEdit[];\n+    SourceFileNodeEdits: lc.TextDocumentEdit[];\n     fileSystemEdits: FileSystemEdit[];\n     cursorPosition?: lc.TextDocumentPositionParams;\n }\n \n export async function handle(change: SourceChange) {\n     const wsEdit = new vscode.WorkspaceEdit();\n-    for (const sourceEdit of change.sourceFileEdits) {\n+    for (const sourceEdit of change.SourceFileNodeEdits) {\n         const uri = Server.client.protocol2CodeConverter.asUri(\n             sourceEdit.textDocument.uri\n         );"}]}