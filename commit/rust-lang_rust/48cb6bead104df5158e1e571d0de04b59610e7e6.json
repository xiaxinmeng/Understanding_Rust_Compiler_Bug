{"sha": "48cb6bead104df5158e1e571d0de04b59610e7e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4Y2I2YmVhZDEwNGRmNTE1OGUxZTU3MWQwZGUwNGI1OTYxMGU3ZTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-24T03:16:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-24T03:16:18Z"}, "message": "Rollup merge of #59739 - cramertj:stabilize, r=withoutboats\n\nStabilize futures_api\n\ncc https://github.com/rust-lang/rust/issues/59725.\nBased on https://github.com/rust-lang/rust/pull/59733 and https://github.com/rust-lang/rust/pull/59119 -- only the last two commits here are relevant.\n\nr? @withoutboats , @oli-obk for the introduction of `rustc_allow_const_fn_ptr`.", "tree": {"sha": "07b71ec48f84c17e385af632f57174ab0dee5117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b71ec48f84c17e385af632f57174ab0dee5117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48cb6bead104df5158e1e571d0de04b59610e7e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcv9UCCRBK7hj4Ov3rIwAAdHIIABoUYD0C9u4uizdBO3MWVOaL\nqmGnk23+/d8JCFwkHhkadJMA7jJi+TetbB+MyZTLkAuus5N5JTHPEy1kyJ40vZ7F\n2Q6tGjjmN4Xqpf4cYBKpF/nNxXCcRGA8HnTBXsFxv69mckCs/4uUQZ36T4M8h4WA\nyrjh2JtG55Lj+BRhMqFTOUmQW95pXk0z5v1UE7XrQ35M7Xtx8+zOWSPqnTkwKEg/\njG4oEFMUOzK5y3EbHDOGt6PoH+vzFx1Xr6fD5Q55Khd5GU0M2yw4xVa0I0EUq7j+\nOnou3PTehB9D48g3xvz/XuTnT5Cy3oy9mASXKwFGEk8rdXZyaGkdfaBIagJrMAY=\n=oR7d\n-----END PGP SIGNATURE-----\n", "payload": "tree 07b71ec48f84c17e385af632f57174ab0dee5117\nparent 5f82b5b8828202d53be0d0e11504094bbcf28806\nparent 3f966dcd53faabd8313d29a4e1ba2464995e624a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556075778 +0200\ncommitter GitHub <noreply@github.com> 1556075778 +0200\n\nRollup merge of #59739 - cramertj:stabilize, r=withoutboats\n\nStabilize futures_api\n\ncc https://github.com/rust-lang/rust/issues/59725.\nBased on https://github.com/rust-lang/rust/pull/59733 and https://github.com/rust-lang/rust/pull/59119 -- only the last two commits here are relevant.\n\nr? @withoutboats , @oli-obk for the introduction of `rustc_allow_const_fn_ptr`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48cb6bead104df5158e1e571d0de04b59610e7e6", "html_url": "https://github.com/rust-lang/rust/commit/48cb6bead104df5158e1e571d0de04b59610e7e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48cb6bead104df5158e1e571d0de04b59610e7e6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f82b5b8828202d53be0d0e11504094bbcf28806", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f82b5b8828202d53be0d0e11504094bbcf28806", "html_url": "https://github.com/rust-lang/rust/commit/5f82b5b8828202d53be0d0e11504094bbcf28806"}, {"sha": "3f966dcd53faabd8313d29a4e1ba2464995e624a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f966dcd53faabd8313d29a4e1ba2464995e624a", "html_url": "https://github.com/rust-lang/rust/commit/3f966dcd53faabd8313d29a4e1ba2464995e624a"}], "stats": {"total": 249, "additions": 178, "deletions": 71}, "files": [{"sha": "207359ed6968f029879a267b042d0d7244cc7561", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -911,7 +911,7 @@ impl<G: ?Sized + Generator> Generator for Pin<Box<G>> {\n     }\n }\n \n-#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<F: ?Sized + Future + Unpin> Future for Box<F> {\n     type Output = F::Output;\n "}, {"sha": "eb673488170b64a15d6acc145ddf6465a513d09f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -85,7 +85,6 @@\n #![feature(fmt_internals)]\n #![feature(fn_traits)]\n #![feature(fundamental)]\n-#![feature(futures_api)]\n #![feature(lang_items)]\n #![feature(libc)]\n #![feature(needs_allocator)]"}, {"sha": "504330a023b31408115f2c8fbdb8c902d25fcf36", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,6 +1,4 @@\n-#![unstable(feature = \"futures_api\",\n-            reason = \"futures in libcore are unstable\",\n-            issue = \"50547\")]\n+#![stable(feature = \"futures_api\", since = \"1.36.0\")]\n \n use crate::marker::Unpin;\n use crate::ops;\n@@ -26,8 +24,10 @@ use crate::task::{Context, Poll};\n /// `await!` the value.\n #[doc(spotlight)]\n #[must_use = \"futures do nothing unless polled\"]\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub trait Future {\n     /// The type of value produced on completion.\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     type Output;\n \n     /// Attempt to resolve the future to a final value, registering\n@@ -92,9 +92,11 @@ pub trait Future {\n     /// [`Context`]: ../task/struct.Context.html\n     /// [`Waker`]: ../task/struct.Waker.html\n     /// [`Waker::wake`]: ../task/struct.Waker.html#method.wake\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n }\n \n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<F: ?Sized + Future + Unpin> Future for &mut F {\n     type Output = F::Output;\n \n@@ -103,6 +105,7 @@ impl<F: ?Sized + Future + Unpin> Future for &mut F {\n     }\n }\n \n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<P> Future for Pin<P>\n where\n     P: Unpin + ops::DerefMut,"}, {"sha": "89ea4713cfdaaa43b377e9bc18fa49735940a48b", "filename": "src/libcore/future/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibcore%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibcore%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fmod.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,8 +1,7 @@\n-#![unstable(feature = \"futures_api\",\n-            reason = \"futures in libcore are unstable\",\n-            issue = \"50547\")]\n+#![stable(feature = \"futures_api\", since = \"1.36.0\")]\n \n //! Asynchronous values.\n \n mod future;\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub use self::future::Future;"}, {"sha": "ef090928392cd70eff1404c260d9a9dea3c3cc1b", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,11 +1,11 @@\n-#![unstable(feature = \"futures_api\",\n-            reason = \"futures in libcore are unstable\",\n-            issue = \"50547\")]\n+#![stable(feature = \"futures_api\", since = \"1.36.0\")]\n \n //! Types and Traits for working with asynchronous tasks.\n \n mod poll;\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub use self::poll::Poll;\n \n mod wake;\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub use self::wake::{Context, Waker, RawWaker, RawWakerVTable};"}, {"sha": "3db70d5e7645f1eccb4e288aa71c67c562768357", "filename": "src/libcore/task/poll.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibcore%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibcore%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fpoll.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,6 +1,4 @@\n-#![unstable(feature = \"futures_api\",\n-            reason = \"futures in libcore are unstable\",\n-            issue = \"50547\")]\n+#![stable(feature = \"futures_api\", since = \"1.36.0\")]\n \n use crate::ops::Try;\n use crate::result::Result;\n@@ -9,20 +7,27 @@ use crate::result::Result;\n /// scheduled to receive a wakeup instead.\n #[must_use = \"this `Poll` may be a `Pending` variant, which should be handled\"]\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub enum Poll<T> {\n     /// Represents that a value is immediately ready.\n-    Ready(T),\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    Ready(\n+        #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+        T\n+    ),\n \n     /// Represents that a value is not ready yet.\n     ///\n     /// When a function returns `Pending`, the function *must* also\n     /// ensure that the current task is scheduled to be awoken when\n     /// progress can be made.\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     Pending,\n }\n \n impl<T> Poll<T> {\n     /// Changes the ready value of this `Poll` with the closure provided.\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn map<U, F>(self, f: F) -> Poll<U>\n         where F: FnOnce(T) -> U\n     {\n@@ -34,6 +39,7 @@ impl<T> Poll<T> {\n \n     /// Returns `true` if this is `Poll::Ready`\n     #[inline]\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn is_ready(&self) -> bool {\n         match *self {\n             Poll::Ready(_) => true,\n@@ -43,13 +49,15 @@ impl<T> Poll<T> {\n \n     /// Returns `true` if this is `Poll::Pending`\n     #[inline]\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn is_pending(&self) -> bool {\n         !self.is_ready()\n     }\n }\n \n impl<T, E> Poll<Result<T, E>> {\n     /// Changes the success value of this `Poll` with the closure provided.\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn map_ok<U, F>(self, f: F) -> Poll<Result<U, E>>\n         where F: FnOnce(T) -> U\n     {\n@@ -61,6 +69,7 @@ impl<T, E> Poll<Result<T, E>> {\n     }\n \n     /// Changes the error value of this `Poll` with the closure provided.\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn map_err<U, F>(self, f: F) -> Poll<Result<T, U>>\n         where F: FnOnce(E) -> U\n     {\n@@ -72,12 +81,14 @@ impl<T, E> Poll<Result<T, E>> {\n     }\n }\n \n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<T> From<T> for Poll<T> {\n     fn from(t: T) -> Poll<T> {\n         Poll::Ready(t)\n     }\n }\n \n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<T, E> Try for Poll<Result<T, E>> {\n     type Ok = Poll<T>;\n     type Error = E;\n@@ -102,6 +113,7 @@ impl<T, E> Try for Poll<Result<T, E>> {\n     }\n }\n \n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<T, E> Try for Poll<Option<Result<T, E>>> {\n     type Ok = Poll<Option<T>>;\n     type Error = E;"}, {"sha": "b4e91249832051d7d6fa7482669c6f5bfbb186e7", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,6 +1,4 @@\n-#![unstable(feature = \"futures_api\",\n-            reason = \"futures in libcore are unstable\",\n-            issue = \"50547\")]\n+#![stable(feature = \"futures_api\", since = \"1.36.0\")]\n \n use crate::fmt;\n use crate::marker::{PhantomData, Unpin};\n@@ -13,6 +11,7 @@ use crate::marker::{PhantomData, Unpin};\n /// It consists of a data pointer and a [virtual function pointer table (vtable)][vtable] that\n /// customizes the behavior of the `RawWaker`.\n #[derive(PartialEq, Debug)]\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct RawWaker {\n     /// A data pointer, which can be used to store arbitrary data as required\n     /// by the executor. This could be e.g. a type-erased pointer to an `Arc`\n@@ -37,9 +36,7 @@ impl RawWaker {\n     /// from a `RawWaker`. For each operation on the `Waker`, the associated\n     /// function in the `vtable` of the underlying `RawWaker` will be called.\n     #[rustc_promotable]\n-    #[unstable(feature = \"futures_api\",\n-            reason = \"futures in libcore are unstable\",\n-            issue = \"50547\")]\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub const fn new(data: *const (), vtable: &'static RawWakerVTable) -> RawWaker {\n         RawWaker {\n             data,\n@@ -58,6 +55,7 @@ impl RawWaker {\n /// pointer of a properly constructed [`RawWaker`] object from inside the\n /// [`RawWaker`] implementation. Calling one of the contained functions using\n /// any other `data` pointer will cause undefined behavior.\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n #[derive(PartialEq, Copy, Clone, Debug)]\n pub struct RawWakerVTable {\n     /// This function will be called when the [`RawWaker`] gets cloned, e.g. when\n@@ -131,9 +129,14 @@ impl RawWakerVTable {\n     /// resources that are associated with this instance of a [`RawWaker`] and\n     /// associated task.\n     #[rustc_promotable]\n-    #[unstable(feature = \"futures_api\",\n-            reason = \"futures in libcore are unstable\",\n-            issue = \"50547\")]\n+    #[cfg_attr(stage0, unstable(feature = \"futures_api_const_fn_ptr\", issue = \"50547\"))]\n+    #[cfg_attr(not(stage0), stable(feature = \"futures_api\", since = \"1.36.0\"))]\n+    // `rustc_allow_const_fn_ptr` is a hack that should not be used anywhere else\n+    // without first consulting with T-Lang.\n+    //\n+    // FIXME: remove whenever we have a stable way to accept fn pointers from const fn\n+    // (see https://github.com/rust-rfcs/const-eval/issues/19#issuecomment-472799062)\n+    #[cfg_attr(not(stage0), rustc_allow_const_fn_ptr)]\n     pub const fn new(\n         clone: unsafe fn(*const ()) -> RawWaker,\n         wake: unsafe fn(*const ()),\n@@ -153,6 +156,7 @@ impl RawWakerVTable {\n ///\n /// Currently, `Context` only serves to provide access to a `&Waker`\n /// which can be used to wake the current task.\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct Context<'a> {\n     waker: &'a Waker,\n     // Ensure we future-proof against variance changes by forcing\n@@ -164,6 +168,7 @@ pub struct Context<'a> {\n \n impl<'a> Context<'a> {\n     /// Create a new `Context` from a `&Waker`.\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[inline]\n     pub fn from_waker(waker: &'a Waker) -> Self {\n         Context {\n@@ -173,12 +178,14 @@ impl<'a> Context<'a> {\n     }\n \n     /// Returns a reference to the `Waker` for the current task.\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[inline]\n     pub fn waker(&self) -> &'a Waker {\n         &self.waker\n     }\n }\n \n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl fmt::Debug for Context<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Context\")\n@@ -195,17 +202,22 @@ impl fmt::Debug for Context<'_> {\n ///\n /// Implements [`Clone`], [`Send`], and [`Sync`].\n #[repr(transparent)]\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct Waker {\n     waker: RawWaker,\n }\n \n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl Unpin for Waker {}\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n unsafe impl Send for Waker {}\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n unsafe impl Sync for Waker {}\n \n impl Waker {\n     /// Wake up the task associated with this `Waker`.\n     #[inline]\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn wake(self) {\n         // The actual wakeup call is delegated through a virtual function call\n         // to the implementation which is defined by the executor.\n@@ -227,6 +239,7 @@ impl Waker {\n     /// where an owned `Waker` is available. This method should be preferred to\n     /// calling `waker.clone().wake()`.\n     #[inline]\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn wake_by_ref(&self) {\n         // The actual wakeup call is delegated through a virtual function call\n         // to the implementation which is defined by the executor.\n@@ -243,6 +256,7 @@ impl Waker {\n     ///\n     /// This function is primarily used for optimization purposes.\n     #[inline]\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn will_wake(&self, other: &Waker) -> bool {\n         self.waker == other.waker\n     }\n@@ -253,13 +267,15 @@ impl Waker {\n     /// in [`RawWaker`]'s and [`RawWakerVTable`]'s documentation is not upheld.\n     /// Therefore this method is unsafe.\n     #[inline]\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub unsafe fn from_raw(waker: RawWaker) -> Waker {\n         Waker {\n             waker,\n         }\n     }\n }\n \n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl Clone for Waker {\n     #[inline]\n     fn clone(&self) -> Self {\n@@ -272,6 +288,7 @@ impl Clone for Waker {\n     }\n }\n \n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl Drop for Waker {\n     #[inline]\n     fn drop(&mut self) {\n@@ -282,6 +299,7 @@ impl Drop for Waker {\n     }\n }\n \n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl fmt::Debug for Waker {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let vtable_ptr = self.waker.vtable as *const RawWakerVTable;"}, {"sha": "40cce8e77c0e049028d51d44bc9f8879ef43d226", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -121,6 +121,7 @@ impl_stable_hash_for!(struct ::syntax::attr::Stability {\n     feature,\n     rustc_depr,\n     promotable,\n+    allow_const_fn_ptr,\n     const_stability\n });\n "}, {"sha": "8ce86f70a551f929047f774c79f79bad228dc42e", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -441,6 +441,7 @@ impl<'a, 'tcx> Index<'tcx> {\n                     rustc_depr: None,\n                     const_stability: None,\n                     promotable: false,\n+                    allow_const_fn_ptr: false,\n                 });\n                 annotator.parent_stab = Some(stability);\n             }"}, {"sha": "1861420b408b6ccf79494c8e2aa3d0161ae68abb", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -235,6 +235,8 @@ rustc_queries! {\n         /// constructor function).\n         query is_promotable_const_fn(_: DefId) -> bool {}\n \n+        query const_fn_is_allowed_fn_ptr(_: DefId) -> bool {}\n+\n         /// True if this is a foreign item (i.e., linked via `extern { ... }`).\n         query is_foreign_item(_: DefId) -> bool {}\n "}, {"sha": "7298b548f3197ab248581f3d9fa70aacffef76cb", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -95,9 +95,16 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n         }\n     }\n \n+    fn const_fn_is_allowed_fn_ptr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+        tcx.is_const_fn(def_id) &&\n+            tcx.lookup_stability(def_id)\n+                .map(|stab| stab.allow_const_fn_ptr).unwrap_or(false)\n+    }\n+\n     *providers = Providers {\n         is_const_fn_raw,\n         is_promotable_const_fn,\n+        const_fn_is_allowed_fn_ptr,\n         ..*providers\n     };\n }"}, {"sha": "d5f04ca64e4c4ecb8907fe909aa0461b89ea03cc", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -60,13 +60,14 @@ pub fn is_min_const_fn(\n     }\n \n     for local in &mir.local_decls {\n-        check_ty(tcx, local.ty, local.source_info.span)?;\n+        check_ty(tcx, local.ty, local.source_info.span, def_id)?;\n     }\n     // impl trait is gone in MIR, so check the return type manually\n     check_ty(\n         tcx,\n         tcx.fn_sig(def_id).output().skip_binder(),\n         mir.local_decls.iter().next().unwrap().source_info.span,\n+        def_id,\n     )?;\n \n     for bb in mir.basic_blocks() {\n@@ -82,6 +83,7 @@ fn check_ty(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ty: ty::Ty<'tcx>,\n     span: Span,\n+    fn_def_id: DefId,\n ) -> McfResult {\n     for ty in ty.walk() {\n         match ty.sty {\n@@ -91,7 +93,9 @@ fn check_ty(\n             )),\n             ty::Opaque(..) => return Err((span, \"`impl Trait` in const fn is unstable\".into())),\n             ty::FnPtr(..) => {\n-                return Err((span, \"function pointers in const fn are unstable\".into()))\n+                if !tcx.const_fn_is_allowed_fn_ptr(fn_def_id) {\n+                    return Err((span, \"function pointers in const fn are unstable\".into()))\n+                }\n             }\n             ty::Dynamic(preds, _) => {\n                 for pred in preds.iter() {"}, {"sha": "c18a314116bf0001cedb408cd40862a0a974ad3d", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -9,6 +9,7 @@ use core::task::{Context, Poll};\n use core::ops::{Drop, Generator, GeneratorState};\n \n #[doc(inline)]\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub use core::future::*;\n \n /// Wrap a generator in a future."}, {"sha": "bdec0c347f546643f3bb7f8d37ea55b23fe5a118", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -263,7 +263,6 @@\n #![feature(fixed_size_array)]\n #![feature(fn_traits)]\n #![feature(fnbox)]\n-#![feature(futures_api)]\n #![feature(generator_trait)]\n #![feature(hash_raw_entry)]\n #![feature(hashmap_internals)]\n@@ -458,18 +457,15 @@ pub mod process;\n pub mod sync;\n pub mod time;\n \n-#[unstable(feature = \"futures_api\",\n-           reason = \"futures in libcore are unstable\",\n-           issue = \"50547\")]\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub mod task {\n     //! Types and Traits for working with asynchronous tasks.\n     #[doc(inline)]\n+    #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub use core::task::*;\n }\n \n-#[unstable(feature = \"futures_api\",\n-           reason = \"futures in libcore are unstable\",\n-           issue = \"50547\")]\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub mod future;\n \n // Platform-abstraction modules"}, {"sha": "7a3b5d30500a93a6cda9cb84d06aa5baa5f56c16", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -319,7 +319,7 @@ impl<T: fmt::Debug> fmt::Debug for AssertUnwindSafe<T> {\n     }\n }\n \n-#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<F: Future> Future for AssertUnwindSafe<F> {\n     type Output = F::Output;\n "}, {"sha": "db821f4e5369d2b0c971a6aca7d37988878fddba", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -114,6 +114,8 @@ pub struct Stability {\n     pub const_stability: Option<Symbol>,\n     /// whether the function has a `#[rustc_promotable]` attribute\n     pub promotable: bool,\n+    /// whether the function has a `#[rustc_allow_const_fn_ptr]` attribute\n+    pub allow_const_fn_ptr: bool,\n }\n \n /// The available stability levels.\n@@ -178,6 +180,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n     let mut rustc_depr: Option<RustcDeprecation> = None;\n     let mut rustc_const_unstable: Option<Symbol> = None;\n     let mut promotable = false;\n+    let mut allow_const_fn_ptr = false;\n     let diagnostic = &sess.span_diagnostic;\n \n     'outer: for attr in attrs_iter {\n@@ -187,6 +190,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n             \"unstable\",\n             \"stable\",\n             \"rustc_promotable\",\n+            \"rustc_allow_const_fn_ptr\",\n         ].iter().any(|&s| attr.path == s) {\n             continue // not a stability level\n         }\n@@ -198,6 +202,9 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n         if attr.path == \"rustc_promotable\" {\n             promotable = true;\n         }\n+        if attr.path == \"rustc_allow_const_fn_ptr\" {\n+            allow_const_fn_ptr = true;\n+        }\n         // attributes with data\n         else if let Some(MetaItem { node: MetaItemKind::List(ref metas), .. }) = meta {\n             let meta = meta.as_ref().unwrap();\n@@ -354,6 +361,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                 rustc_depr: None,\n                                 const_stability: None,\n                                 promotable: false,\n+                                allow_const_fn_ptr: false,\n                             })\n                         }\n                         (None, _, _) => {\n@@ -418,6 +426,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                 rustc_depr: None,\n                                 const_stability: None,\n                                 promotable: false,\n+                                allow_const_fn_ptr: false,\n                             })\n                         }\n                         (None, _) => {\n@@ -458,13 +467,14 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n     }\n \n     // Merge the const-unstable info into the stability info\n-    if promotable {\n+    if promotable || allow_const_fn_ptr {\n         if let Some(ref mut stab) = stab {\n-            stab.promotable = true;\n+            stab.promotable = promotable;\n+            stab.allow_const_fn_ptr = allow_const_fn_ptr;\n         } else {\n             span_err!(diagnostic, item_sp, E0717,\n-                      \"rustc_promotable attribute must be paired with \\\n-                       either stable or unstable attribute\");\n+                      \"rustc_promotable and rustc_allow_const_fn_ptr attributes \\\n+                      must be paired with either stable or unstable attribute\");\n         }\n     }\n "}, {"sha": "39472ae11fbc565ef63835a6b56da59921c200b6", "filename": "src/test/compile-fail/must_use-in-stdlib-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,5 +1,5 @@\n #![deny(unused_must_use)]\n-#![feature(arbitrary_self_types, futures_api)]\n+#![feature(arbitrary_self_types)]\n \n use std::iter::Iterator;\n use std::future::Future;"}, {"sha": "e1b4328debd9a8918e7bea0c3e4aa16326bc31a9", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n // aux-build:arc_wake.rs\n \n-#![feature(async_await, await_macro, futures_api)]\n+#![feature(async_await, await_macro)]\n \n extern crate arc_wake;\n "}, {"sha": "c21886f26f467e2176460fc166f95d0d9ee3cc6c", "filename": "src/test/run-pass/auxiliary/arc_wake.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Frun-pass%2Fauxiliary%2Farc_wake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Frun-pass%2Fauxiliary%2Farc_wake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Farc_wake.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(futures_api)]\n-\n use std::sync::Arc;\n use std::task::{\n     Waker, RawWaker, RawWakerVTable,"}, {"sha": "ee77053fd5b6af5ef957f3a852696d36935c4e3a", "filename": "src/test/run-pass/futures-api.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffutures-api.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,7 +1,5 @@\n // aux-build:arc_wake.rs\n \n-#![feature(futures_api)]\n-\n extern crate arc_wake;\n \n use std::future::Future;"}, {"sha": "961c412f5ecb2751bf86551d087beb84becbf77a", "filename": "src/test/run-pass/issue-54716.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Frun-pass%2Fissue-54716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Frun-pass%2Fissue-54716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-54716.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -3,7 +3,7 @@\n // run-pass\n \n #![allow(unused_variables)]\n-#![feature(async_await, await_macro, futures_api)]\n+#![feature(async_await, await_macro)]\n \n extern crate arc_wake;\n "}, {"sha": "12be6582a21e8e5df40d5dd24b7396ebcd3eae03", "filename": "src/test/run-pass/issue-55809.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Frun-pass%2Fissue-55809.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Frun-pass%2Fissue-55809.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-55809.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n // run-pass\n \n-#![feature(async_await, await_macro, futures_api)]\n+#![feature(async_await, await_macro)]\n \n trait Foo { }\n "}, {"sha": "7384f7027d185a1714bd29ff226c4bb80465ca6a", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(async_await, futures_api)]\n+#![feature(async_await)]\n \n // @has async_fn/fn.foo.html '//pre[@class=\"rust fn\"]' 'pub async fn foo() -> Option<Foo>'\n pub async fn foo() -> Option<Foo> {"}, {"sha": "e3ac817b15ca580e5e9484c8436793020c78f3a4", "filename": "src/test/ui/async-fn-multiple-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fasync-fn-multiple-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fasync-fn-multiple-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-fn-multiple-lifetimes.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(arbitrary_self_types, async_await, await_macro, futures_api, pin)]\n+#![feature(arbitrary_self_types, async_await, await_macro, pin)]\n \n use std::ops::Add;\n "}, {"sha": "3992607c387e11acb8a958d47aa6924b3146e6cc", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -0,0 +1,10 @@\n+#![feature(rustc_attrs, staged_api)]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+const fn error(_: fn()) {} //~ ERROR function pointers in const fn are unstable\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_allow_const_fn_ptr]\n+const fn compiles(_: fn()) {}\n+\n+fn main() {}"}, {"sha": "e6e1ced6592a24498af60f789566d37ab35af7c6", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -0,0 +1,12 @@\n+error[E0723]: function pointers in const fn are unstable\n+  --> $DIR/allow_const_fn_ptr.rs:4:16\n+   |\n+LL | const fn error(_: fn()) {}\n+   |                ^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "0395795ef7bfe03e84f18e75f38dd384ae88c24d", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_feature_gate.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -0,0 +1,11 @@\n+#![feature(staged_api)]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+const fn error(_: fn()) {}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_allow_const_fn_ptr]\n+//~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved\n+const fn compiles(_: fn()) {}\n+\n+fn main() {}"}, {"sha": "c934307e918b931a1a779ac8eb1f42f00ddf4e87", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_feature_gate.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n+  --> $DIR/allow_const_fn_ptr_feature_gate.rs:7:3\n+   |\n+LL | #[rustc_allow_const_fn_ptr]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1d8b95ab1a2fdeddb1ab8061ea5268e5d966ab65", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -0,0 +1,18 @@\n+// run-pass\n+\n+#![feature(rustc_attrs, staged_api)]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_allow_const_fn_ptr]\n+const fn takes_fn_ptr(_: fn()) {}\n+\n+const FN: fn() = || ();\n+\n+const fn gives_fn_ptr() {\n+    takes_fn_ptr(FN)\n+}\n+\n+fn main() {\n+    gives_fn_ptr();\n+}"}, {"sha": "e1111f9e0e4b952f26e494921bd24334f3ffdf6f", "filename": "src/test/ui/editions/edition-deny-async-fns-2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,6 +1,6 @@\n // edition:2015\n \n-#![feature(futures_api, async_await)]\n+#![feature(async_await)]\n \n async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n "}, {"sha": "801aeb82aa266dfed97da4d9d23b22532988b8cf", "filename": "src/test/ui/feature-gates/feature-gate-async-await-2015-edition.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,7 +1,5 @@\n // edition:2015\n \n-#![feature(futures_api)]\n-\n async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n                   //~^ ERROR async fn is unstable\n "}, {"sha": "b419f1232dfab6110f33d526f20b68a4e6ec5cb6", "filename": "src/test/ui/feature-gates/feature-gate-async-await-2015-edition.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,23 +1,23 @@\n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:5:1\n+  --> $DIR/feature-gate-async-await-2015-edition.rs:3:1\n    |\n LL | async fn foo() {}\n    | ^^^^^\n \n error[E0422]: cannot find struct, variant or union type `async` in this scope\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:9:13\n+  --> $DIR/feature-gate-async-await-2015-edition.rs:7:13\n    |\n LL |     let _ = async {};\n    |             ^^^^^ not found in this scope\n \n error[E0425]: cannot find value `async` in this scope\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:10:13\n+  --> $DIR/feature-gate-async-await-2015-edition.rs:8:13\n    |\n LL |     let _ = async || { true };\n    |             ^^^^^ not found in this scope\n \n error[E0658]: async fn is unstable\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:5:1\n+  --> $DIR/feature-gate-async-await-2015-edition.rs:3:1\n    |\n LL | async fn foo() {}\n    | ^^^^^^^^^^^^^^^^^"}, {"sha": "9cfefef4129de27e3e9e957db9099df93f6957fd", "filename": "src/test/ui/feature-gates/feature-gate-async-await.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(futures_api)]\n-\n struct S;\n \n impl S {"}, {"sha": "43e41b4545869e568c6f86bf5cf1ceb8467693ec", "filename": "src/test/ui/feature-gates/feature-gate-async-await.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,11 +1,11 @@\n error[E0706]: trait fns cannot be declared `async`\n-  --> $DIR/feature-gate-async-await.rs:12:5\n+  --> $DIR/feature-gate-async-await.rs:10:5\n    |\n LL |     async fn foo();\n    |     ^^^^^^^^^^^^^^^\n \n error[E0658]: async fn is unstable\n-  --> $DIR/feature-gate-async-await.rs:8:5\n+  --> $DIR/feature-gate-async-await.rs:6:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^^^^^^^^^^^^^\n@@ -14,7 +14,7 @@ LL |     async fn foo() {}\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n error[E0658]: async fn is unstable\n-  --> $DIR/feature-gate-async-await.rs:12:5\n+  --> $DIR/feature-gate-async-await.rs:10:5\n    |\n LL |     async fn foo();\n    |     ^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ LL |     async fn foo();\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n error[E0658]: async fn is unstable\n-  --> $DIR/feature-gate-async-await.rs:16:1\n+  --> $DIR/feature-gate-async-await.rs:14:1\n    |\n LL | async fn foo() {}\n    | ^^^^^^^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL | async fn foo() {}\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n error[E0658]: async blocks are unstable\n-  --> $DIR/feature-gate-async-await.rs:19:13\n+  --> $DIR/feature-gate-async-await.rs:17:13\n    |\n LL |     let _ = async {};\n    |             ^^^^^^^^\n@@ -41,7 +41,7 @@ LL |     let _ = async {};\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n error[E0658]: async closures are unstable\n-  --> $DIR/feature-gate-async-await.rs:20:13\n+  --> $DIR/feature-gate-async-await.rs:18:13\n    |\n LL |     let _ = async || {};\n    |             ^^^^^^^^^^^"}, {"sha": "a4e080119345e8f1791f4e77496f4d468d98bcb3", "filename": "src/test/ui/impl-trait/recursive-async-impl-trait-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -2,7 +2,7 @@\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden when using `async` and `await`.\n \n-#![feature(await_macro, async_await, futures_api, generators)]\n+#![feature(await_macro, async_await, generators)]\n \n async fn recursive_async_function() -> () { //~ ERROR\n     await!(recursive_async_function());"}, {"sha": "2428b560b7001184fac39f554ad2c28188b8b68e", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,7 +1,7 @@\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden.\n \n-#![feature(futures_api, generators)]\n+#![feature(generators)]\n \n fn option(i: i32) -> impl Sized { //~ ERROR\n     if i < 0 {"}, {"sha": "d6f18875c9e3abc6a42adc5f3342938193fab0b6", "filename": "src/test/ui/issues/issue-54974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fissues%2Fissue-54974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fissues%2Fissue-54974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54974.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,7 +1,7 @@\n // compile-pass\n // edition:2018\n \n-#![feature(async_await, await_macro, futures_api)]\n+#![feature(async_await, await_macro)]\n \n use std::sync::Arc;\n "}, {"sha": "4572e543f22de015b7c14b6bea6017aa17c54c33", "filename": "src/test/ui/issues/issue-55324.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fissues%2Fissue-55324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fissues%2Fissue-55324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55324.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,7 +1,7 @@\n // compile-pass\n // edition:2018\n \n-#![feature(async_await, await_macro, futures_api)]\n+#![feature(async_await, await_macro)]\n \n use std::future::Future;\n "}, {"sha": "99d87b2273c2f2bfd20cb80c1f4cb5da1c84873d", "filename": "src/test/ui/issues/issue-58885.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fissues%2Fissue-58885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fissues%2Fissue-58885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58885.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,7 +1,7 @@\n // compile-pass\n // edition:2018\n \n-#![feature(async_await, await_macro, futures_api)]\n+#![feature(async_await, await_macro)]\n \n struct Xyz {\n     a: u64,"}, {"sha": "c758244002ff6e14930e187b11eab12f68a31096", "filename": "src/test/ui/issues/issue-59001.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fissues%2Fissue-59001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fissues%2Fissue-59001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59001.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,7 +1,7 @@\n // compile-pass\n // edition:2018\n \n-#![feature(async_await, await_macro, futures_api)]\n+#![feature(async_await, await_macro)]\n \n use std::future::Future;\n "}, {"sha": "345f19b06233bfcfb8b23f1643375d9475f5035b", "filename": "src/test/ui/no-args-non-move-async-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fno-args-non-move-async-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Fno-args-non-move-async-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-args-non-move-async-closure.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(arbitrary_self_types, async_await, await_macro, futures_api, pin)]\n+#![feature(async_await, await_macro)]\n \n fn main() {\n     let _ = async |x: u8| {};"}, {"sha": "f63950ad5e9058981224fd1ca8e6f6ebd90cbf01", "filename": "src/test/ui/try-poll.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Ftry-poll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cb6bead104df5158e1e571d0de04b59610e7e6/src%2Ftest%2Fui%2Ftry-poll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-poll.rs?ref=48cb6bead104df5158e1e571d0de04b59610e7e6", "patch": "@@ -1,7 +1,6 @@\n // compile-pass\n \n #![allow(dead_code, unused)]\n-#![feature(futures_api)]\n \n use std::task::Poll;\n "}]}