{"sha": "9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7", "node_id": "C_kwDOAAsO6NoAKDlhNGQ0ZDVlNmIwZDY4ZmJhY2M0MWU0MmZjOGNiNGJkZTNjMmFlYTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-09T09:07:03Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-09T09:07:03Z"}, "message": "Remove unnecessary lift calls from rustdoc", "tree": {"sha": "3d40ca28bae848a8127bb821410c008adf353d52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d40ca28bae848a8127bb821410c008adf353d52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7", "html_url": "https://github.com/rust-lang/rust/commit/9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f382c2748aec2ada91eff88840c996644ff0f70d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f382c2748aec2ada91eff88840c996644ff0f70d", "html_url": "https://github.com/rust-lang/rust/commit/f382c2748aec2ada91eff88840c996644ff0f70d"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "11e49a56f5fcf66069890179f7e7b8f8c11be177", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7", "patch": "@@ -22,7 +22,7 @@ use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::InternalSubsts;\n-use rustc_middle::ty::{self, AdtKind, DefIdTree, EarlyBinder, Lift, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtKind, DefIdTree, EarlyBinder, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -176,8 +176,6 @@ fn clean_poly_trait_ref_with_bindings<'tcx>(\n     poly_trait_ref: ty::PolyTraitRef<'tcx>,\n     bindings: ThinVec<TypeBinding>,\n ) -> GenericBound {\n-    let poly_trait_ref = poly_trait_ref.lift_to_tcx(cx.tcx).unwrap();\n-\n     // collect any late bound regions\n     let late_bound_regions: Vec<_> = cx\n         .tcx\n@@ -417,8 +415,7 @@ fn clean_projection<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     def_id: Option<DefId>,\n ) -> Type {\n-    let lifted = ty.lift_to_tcx(cx.tcx).unwrap();\n-    let trait_ = clean_trait_ref_with_bindings(cx, lifted.trait_ref(cx.tcx), ThinVec::new());\n+    let trait_ = clean_trait_ref_with_bindings(cx, ty.trait_ref(cx.tcx), ThinVec::new());\n     let self_type = clean_middle_ty(ty.self_ty(), cx, None);\n     let self_def_id = if let Some(def_id) = def_id {\n         cx.tcx.opt_parent(def_id).or(Some(def_id))\n@@ -1552,7 +1549,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n }\n \n /// Returns `None` if the type could not be normalized\n-fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'_>) -> Option<Ty<'tcx>> {\n+fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n     // HACK: low-churn fix for #79459 while we wait for a trait normalization fix\n     if !cx.tcx.sess.opts.unstable_opts.normalize_docs {\n         return None;\n@@ -1563,11 +1560,10 @@ fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'_>) -> Option<Ty<'tcx>> {\n     use rustc_middle::traits::ObligationCause;\n \n     // Try to normalize `<X as Y>::T` to a type\n-    let lifted = ty.lift_to_tcx(cx.tcx).unwrap();\n     let infcx = cx.tcx.infer_ctxt().build();\n     let normalized = infcx\n         .at(&ObligationCause::dummy(), cx.param_env)\n-        .normalize(lifted)\n+        .normalize(ty)\n         .map(|resolved| infcx.resolve_vars_if_possible(resolved.value));\n     match normalized {\n         Ok(normalized_value) => {\n@@ -1597,8 +1593,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         ty::Float(float_ty) => Primitive(float_ty.into()),\n         ty::Str => Primitive(PrimitiveType::Str),\n         ty::Slice(ty) => Slice(Box::new(clean_middle_ty(ty, cx, None))),\n-        ty::Array(ty, n) => {\n-            let mut n = cx.tcx.lift(n).expect(\"array lift failed\");\n+        ty::Array(ty, mut n) => {\n             n = n.eval(cx.tcx, ty::ParamEnv::reveal_all());\n             let n = print_const(cx, n);\n             Array(Box::new(clean_middle_ty(ty, cx, None)), n)\n@@ -1610,7 +1605,6 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             type_: Box::new(clean_middle_ty(ty, cx, None)),\n         },\n         ty::FnDef(..) | ty::FnPtr(_) => {\n-            let ty = cx.tcx.lift(this).expect(\"FnPtr lift failed\");\n             let sig = ty.fn_sig(cx.tcx);\n             let decl = clean_fn_decl_from_did_and_sig(cx, None, sig);\n             BareFunction(Box::new(BareFunctionDecl {\n@@ -1668,8 +1662,6 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                 .map(|pb| TypeBinding {\n                     assoc: projection_to_path_segment(\n                         pb.skip_binder()\n-                            .lift_to_tcx(cx.tcx)\n-                            .unwrap()\n                             // HACK(compiler-errors): Doesn't actually matter what self\n                             // type we put here, because we're only using the GAT's substs.\n                             .with_self_ty(cx.tcx, cx.tcx.types.self_param)\n@@ -1702,7 +1694,6 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         ty::Opaque(def_id, substs) => {\n             // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n             // by looking up the bounds associated with the def_id.\n-            let substs = cx.tcx.lift(substs).expect(\"Opaque lift failed\");\n             let bounds = cx\n                 .tcx\n                 .explicit_item_bounds(def_id)"}, {"sha": "4572a712258abf582b8fe7a1c76b0c0282b8e074", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7", "patch": "@@ -304,9 +304,9 @@ fn format_integer_with_underscore_sep(num: &str) -> String {\n         .collect()\n }\n \n-fn print_const_with_custom_print_scalar(\n-    tcx: TyCtxt<'_>,\n-    ct: mir::ConstantKind<'_>,\n+fn print_const_with_custom_print_scalar<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ct: mir::ConstantKind<'tcx>,\n     underscores_and_type: bool,\n ) -> String {\n     // Use a slightly different format for integer types which always shows the actual value.\n@@ -320,7 +320,7 @@ fn print_const_with_custom_print_scalar(\n             }\n         }\n         (mir::ConstantKind::Val(ConstValue::Scalar(int), _), ty::Int(i)) => {\n-            let ty = tcx.lift(ct.ty()).unwrap();\n+            let ty = ct.ty();\n             let size = tcx.layout_of(ty::ParamEnv::empty().and(ty)).unwrap().size;\n             let data = int.assert_bits(size);\n             let sign_extended_data = size.sign_extend(data) as i128;"}]}