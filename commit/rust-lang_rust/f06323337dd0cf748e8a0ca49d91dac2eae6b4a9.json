{"sha": "f06323337dd0cf748e8a0ca49d91dac2eae6b4a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNjMyMzMzN2RkMGNmNzQ4ZThhMGNhNDlkOTFkYWMyZWFlNmI0YTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-08-17T23:51:52Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-08-18T03:25:46Z"}, "message": "Verify that an `if` condition block returns a value", "tree": {"sha": "d54890bcfaf44fe77098b6de042892eefba586b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d54890bcfaf44fe77098b6de042892eefba586b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9", "html_url": "https://github.com/rust-lang/rust/commit/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20a2716206ca879ad9848cbb4ac9fcc739dd3f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/20a2716206ca879ad9848cbb4ac9fcc739dd3f77", "html_url": "https://github.com/rust-lang/rust/commit/20a2716206ca879ad9848cbb4ac9fcc739dd3f77"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "747d1a44923f1c4053303cf2b0aec05ff0d56df2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f06323337dd0cf748e8a0ca49d91dac2eae6b4a9", "patch": "@@ -844,6 +844,32 @@ pub struct Expr {\n     pub attrs: ThinVec<Attribute>\n }\n \n+impl Expr {\n+    /// Wether this expression would be valid somewhere that expects a value, for example, an `if`\n+    /// condition.\n+    pub fn returns(&self) -> bool {\n+        if let ExprKind::Block(ref block) = self.node {\n+            match block.stmts.last().map(|last_stmt| &last_stmt.node) {\n+                // implicit return\n+                Some(&StmtKind::Expr(_)) => true,\n+                Some(&StmtKind::Semi(ref expr)) => {\n+                    if let ExprKind::Ret(_) = expr.node {\n+                        // last statement is explicit return\n+                        true\n+                    } else {\n+                        false\n+                    }\n+                }\n+                // This is a block that doesn't end in either an implicit or explicit return\n+                _ => false,\n+            }\n+        } else {\n+            // This is not a block, it is a value\n+            true\n+        }\n+    }\n+}\n+\n impl fmt::Debug for Expr {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"expr({}: {})\", self.id, pprust::expr_to_string(self))"}, {"sha": "85d2a485bfa75a67d4b32ec48558cc662e974432", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f06323337dd0cf748e8a0ca49d91dac2eae6b4a9", "patch": "@@ -2968,7 +2968,12 @@ impl<'a> Parser<'a> {\n         }\n         let lo = self.prev_span;\n         let cond = self.parse_expr_res(RESTRICTION_NO_STRUCT_LITERAL, None)?;\n-        if self.eat_keyword(keywords::Else) {\n+\n+        // Verify that the parsed `if` condition makes sense as a condition. If it is a block, then\n+        // verify that the last statement is either an implicit return (no `;`) or an explicit\n+        // return. This won't catch blocks with an explicit `return`, but that would be caught by\n+        // the dead code lint.\n+        if self.eat_keyword(keywords::Else) || !cond.returns() {\n             let sp = lo.next_point();\n             let mut err = self.diagnostic()\n                 .struct_span_err(sp, \"missing condition for `if` statemement\");"}, {"sha": "863780439127642bce9520c075fe565469d6f555", "filename": "src/test/ui/issue-13483.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9/src%2Ftest%2Fui%2Fissue-13483.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9/src%2Ftest%2Fui%2Fissue-13483.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13483.rs?ref=f06323337dd0cf748e8a0ca49d91dac2eae6b4a9", "patch": "@@ -10,7 +10,16 @@\n \n fn main() {\n     if true {\n-    } else if { //ERROR: MISSING CONDITIONAL\n+    } else if {\n     } else {\n-    };\n+    }\n }\n+\n+fn foo() {\n+    if true {\n+    } else if {\n+    }\n+    bar();\n+}\n+\n+fn bar() {}"}, {"sha": "3446969dfd21311b504756e2628f1297f96b345a", "filename": "src/test/ui/issue-13483.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9/src%2Ftest%2Fui%2Fissue-13483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9/src%2Ftest%2Fui%2Fissue-13483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13483.stderr?ref=f06323337dd0cf748e8a0ca49d91dac2eae6b4a9", "patch": "@@ -1,8 +1,14 @@\n error: missing condition for `if` statemement\n   --> $DIR/issue-13483.rs:13:14\n    |\n-13 |     } else if { //ERROR: MISSING CONDITIONAL\n+13 |     } else if {\n    |              ^ expected if condition here\n \n-error: aborting due to previous error\n+error: missing condition for `if` statemement\n+  --> $DIR/issue-13483.rs:20:14\n+   |\n+20 |     } else if {\n+   |              ^ expected if condition here\n+\n+error: aborting due to 2 previous errors\n "}]}