{"sha": "a61616a016aadb41cb18cc898f1ce9ff70709607", "node_id": "C_kwDOAAsO6NoAKGE2MTYxNmEwMTZhYWRiNDFjYjE4Y2M4OThmMWNlOWZmNzA3MDk2MDc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-24T17:27:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-29T16:19:40Z"}, "message": "Move canonicalization code around", "tree": {"sha": "a69dd6f4f4e8a02da33a7b3fe8aa893cd57892e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a69dd6f4f4e8a02da33a7b3fe8aa893cd57892e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a61616a016aadb41cb18cc898f1ce9ff70709607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a61616a016aadb41cb18cc898f1ce9ff70709607", "html_url": "https://github.com/rust-lang/rust/commit/a61616a016aadb41cb18cc898f1ce9ff70709607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a61616a016aadb41cb18cc898f1ce9ff70709607/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f89c7c32dcee0e01bb1eda00fbdb77a9ab5e281", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f89c7c32dcee0e01bb1eda00fbdb77a9ab5e281", "html_url": "https://github.com/rust-lang/rust/commit/7f89c7c32dcee0e01bb1eda00fbdb77a9ab5e281"}], "stats": {"total": 119, "additions": 47, "deletions": 72}, "files": [{"sha": "7ee4f33230630d0a55a93f0000985a8301708aa9", "filename": "compiler/rustc_trait_selection/src/solve/canonicalize.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a61616a016aadb41cb18cc898f1ce9ff70709607/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61616a016aadb41cb18cc898f1ce9ff70709607/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs?ref=a61616a016aadb41cb18cc898f1ce9ff70709607", "previous_filename": "compiler/rustc_trait_selection/src/solve/canonical/canonicalize.rs"}, {"sha": "e64b4a7656f256dc0bbe5b4230bfc951b719cec1", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 6, "deletions": 55, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a61616a016aadb41cb18cc898f1ce9ff70709607/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61616a016aadb41cb18cc898f1ce9ff70709607/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=a61616a016aadb41cb18cc898f1ce9ff70709607", "patch": "@@ -1,17 +1,14 @@\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::at::ToTrace;\n-use rustc_infer::infer::canonical::query_response::make_query_region_constraints;\n-use rustc_infer::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarValues};\n+use rustc_infer::infer::canonical::CanonicalVarValues;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{\n     DefineOpaqueTypes, InferCtxt, InferOk, LateBoundRegionConversionTime, TyCtxtInferExt,\n };\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::traits::solve::{\n-    CanonicalGoal, Certainty, ExternalConstraints, ExternalConstraintsData, MaybeCause, QueryResult,\n-};\n+use rustc_middle::traits::solve::{CanonicalGoal, Certainty, MaybeCause, QueryResult};\n use rustc_middle::ty::{\n     self, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n     TypeVisitor,\n@@ -21,11 +18,12 @@ use std::ops::ControlFlow;\n \n use crate::traits::specialization_graph;\n \n-use super::canonical::{CanonicalizeMode, Canonicalizer};\n use super::search_graph::{self, OverflowHandler};\n use super::SolverMode;\n use super::{search_graph::SearchGraph, Goal};\n \n+mod canonical;\n+\n pub struct EvalCtxt<'a, 'tcx> {\n     /// The inference context that backs (mostly) inference and placeholder terms\n     /// instantiated while solving goals.\n@@ -414,7 +412,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 if let &ty::Infer(ty::TyVar(vid)) = ty.kind() {\n                     match self.infcx.probe_ty_var(vid) {\n                         Ok(value) => bug!(\"resolved var in query: {goal:?} {value:?}\"),\n-                        Err(universe) => universe == self.universe(),\n+                        Err(universe) => universe == self.infcx.universe(),\n                     }\n                 } else {\n                     false\n@@ -424,7 +422,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 if let ty::ConstKind::Infer(ty::InferConst::Var(vid)) = ct.kind() {\n                     match self.infcx.probe_const_var(vid) {\n                         Ok(value) => bug!(\"resolved var in query: {goal:?} {value:?}\"),\n-                        Err(universe) => universe == self.universe(),\n+                        Err(universe) => universe == self.infcx.universe(),\n                     }\n                 } else {\n                     false\n@@ -566,22 +564,6 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         self.infcx.fresh_substs_for_item(DUMMY_SP, def_id)\n     }\n \n-    pub(super) fn universe(&self) -> ty::UniverseIndex {\n-        self.infcx.universe()\n-    }\n-\n-    pub(super) fn create_next_universe(&self) -> ty::UniverseIndex {\n-        self.infcx.create_next_universe()\n-    }\n-\n-    pub(super) fn instantiate_canonical_var(\n-        &self,\n-        cv_info: CanonicalVarInfo<'tcx>,\n-        universe_map: impl Fn(ty::UniverseIndex) -> ty::UniverseIndex,\n-    ) -> ty::GenericArg<'tcx> {\n-        self.infcx.instantiate_canonical_var(DUMMY_SP, cv_info, universe_map)\n-    }\n-\n     pub(super) fn translate_substs(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -621,35 +603,4 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         crate::traits::wf::unnormalized_obligations(self.infcx, param_env, arg)\n             .map(|obligations| obligations.into_iter().map(|obligation| obligation.into()))\n     }\n-\n-    #[instrument(level = \"debug\", skip(self), ret)]\n-    pub(super) fn compute_external_query_constraints(\n-        &self,\n-    ) -> Result<ExternalConstraints<'tcx>, NoSolution> {\n-        // Cannot use `take_registered_region_obligations` as we may compute the response\n-        // inside of a `probe` whenever we have multiple choices inside of the solver.\n-        let region_obligations = self.infcx.inner.borrow().region_obligations().to_owned();\n-        let region_constraints = self.infcx.with_region_constraints(|region_constraints| {\n-            make_query_region_constraints(\n-                self.tcx(),\n-                region_obligations\n-                    .iter()\n-                    .map(|r_o| (r_o.sup_type, r_o.sub_region, r_o.origin.to_constraint_category())),\n-                region_constraints,\n-            )\n-        });\n-        let opaque_types = self.infcx.clone_opaque_types_for_query_response();\n-        Ok(self\n-            .tcx()\n-            .mk_external_constraints(ExternalConstraintsData { region_constraints, opaque_types }))\n-    }\n-\n-    pub(super) fn canonicalize<T: TypeFoldable<TyCtxt<'tcx>>>(\n-        &self,\n-        canonicalize_mode: CanonicalizeMode,\n-        variables: &mut Vec<ty::GenericArg<'tcx>>,\n-        value: T,\n-    ) -> Canonical<'tcx, T> {\n-        Canonicalizer::canonicalize(self.infcx, canonicalize_mode, variables, value)\n-    }\n }"}, {"sha": "ee90488730a645cfa941ea5ac18442a2a22b235a", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "renamed", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a61616a016aadb41cb18cc898f1ce9ff70709607/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61616a016aadb41cb18cc898f1ce9ff70709607/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=a61616a016aadb41cb18cc898f1ce9ff70709607", "patch": "@@ -8,20 +8,19 @@\n /// section of the [rustc-dev-guide][c].\n ///\n /// [c]: https://rustc-dev-guide.rust-lang.org/solve/canonicalization.html\n-pub use self::canonicalize::{CanonicalizeMode, Canonicalizer};\n-\n use super::{CanonicalGoal, Certainty, EvalCtxt, Goal};\n-use super::{CanonicalResponse, QueryResult, Response};\n+use crate::solve::canonicalize::{CanonicalizeMode, Canonicalizer};\n+use crate::solve::{CanonicalResponse, QueryResult, Response};\n+use rustc_infer::infer::canonical::query_response::make_query_region_constraints;\n use rustc_infer::infer::canonical::CanonicalVarValues;\n use rustc_infer::infer::canonical::{CanonicalExt, QueryRegionConstraints};\n-use rustc_infer::traits::query::NoSolution;\n-use rustc_infer::traits::solve::ExternalConstraintsData;\n+use rustc_middle::traits::query::NoSolution;\n+use rustc_middle::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n use rustc_middle::ty::{self, GenericArgKind};\n+use rustc_span::DUMMY_SP;\n use std::iter;\n use std::ops::Deref;\n \n-mod canonicalize;\n-\n impl<'tcx> EvalCtxt<'_, 'tcx> {\n     /// Canonicalizes the goal remembering the original values\n     /// for each bound variable.\n@@ -30,7 +29,12 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         goal: Goal<'tcx, ty::Predicate<'tcx>>,\n     ) -> (Vec<ty::GenericArg<'tcx>>, CanonicalGoal<'tcx>) {\n         let mut orig_values = Default::default();\n-        let canonical_goal = self.canonicalize(CanonicalizeMode::Input, &mut orig_values, goal);\n+        let canonical_goal = Canonicalizer::canonicalize(\n+            self.infcx,\n+            CanonicalizeMode::Input,\n+            &mut orig_values,\n+            goal,\n+        );\n         (orig_values, canonical_goal)\n     }\n \n@@ -41,7 +45,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     /// - `external_constraints`: additional constraints which aren't expressable\n     ///   using simple unification of inference variables.\n     #[instrument(level = \"debug\", skip(self))]\n-    pub(super) fn evaluate_added_goals_and_make_canonical_response(\n+    pub(in crate::solve) fn evaluate_added_goals_and_make_canonical_response(\n         &mut self,\n         certainty: Certainty,\n     ) -> QueryResult<'tcx> {\n@@ -51,14 +55,35 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         let external_constraints = self.compute_external_query_constraints()?;\n \n         let response = Response { var_values: self.var_values, external_constraints, certainty };\n-        let canonical = self.canonicalize(\n+        let canonical = Canonicalizer::canonicalize(\n+            self.infcx,\n             CanonicalizeMode::Response { max_input_universe: self.max_input_universe },\n             &mut Default::default(),\n             response,\n         );\n         Ok(canonical)\n     }\n \n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    fn compute_external_query_constraints(&self) -> Result<ExternalConstraints<'tcx>, NoSolution> {\n+        // Cannot use `take_registered_region_obligations` as we may compute the response\n+        // inside of a `probe` whenever we have multiple choices inside of the solver.\n+        let region_obligations = self.infcx.inner.borrow().region_obligations().to_owned();\n+        let region_constraints = self.infcx.with_region_constraints(|region_constraints| {\n+            make_query_region_constraints(\n+                self.tcx(),\n+                region_obligations\n+                    .iter()\n+                    .map(|r_o| (r_o.sup_type, r_o.sub_region, r_o.origin.to_constraint_category())),\n+                region_constraints,\n+            )\n+        });\n+        let opaque_types = self.infcx.clone_opaque_types_for_query_response();\n+        Ok(self\n+            .tcx()\n+            .mk_external_constraints(ExternalConstraintsData { region_constraints, opaque_types }))\n+    }\n+\n     /// After calling a canonical query, we apply the constraints returned\n     /// by the query using this function.\n     ///\n@@ -98,10 +123,10 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         // FIXME: Longterm canonical queries should deal with all placeholders\n         // created inside of the query directly instead of returning them to the\n         // caller.\n-        let prev_universe = self.universe();\n+        let prev_universe = self.infcx.universe();\n         let universes_created_in_query = response.max_universe.index() + 1;\n         for _ in 0..universes_created_in_query {\n-            self.create_next_universe();\n+            self.infcx.create_next_universe();\n         }\n \n         let var_values = response.value.var_values;\n@@ -144,7 +169,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                     // A variable from inside a binder of the query. While ideally these shouldn't\n                     // exist at all (see the FIXME at the start of this method), we have to deal with\n                     // them for now.\n-                    self.instantiate_canonical_var(info, |idx| {\n+                    self.infcx.instantiate_canonical_var(DUMMY_SP, info, |idx| {\n                         ty::UniverseIndex::from(prev_universe.index() + idx.index())\n                     })\n                 } else if info.is_existential() {\n@@ -158,7 +183,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                     if let Some(v) = opt_values[index] {\n                         v\n                     } else {\n-                        self.instantiate_canonical_var(info, |_| prev_universe)\n+                        self.infcx.instantiate_canonical_var(DUMMY_SP, info, |_| prev_universe)\n                     }\n                 } else {\n                     // For placeholders which were already part of the input, we simply map this", "previous_filename": "compiler/rustc_trait_selection/src/solve/canonical/mod.rs"}, {"sha": "1925043e5fdcc59638b2a5a910591bede36fabc9", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a61616a016aadb41cb18cc898f1ce9ff70709607/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61616a016aadb41cb18cc898f1ce9ff70709607/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=a61616a016aadb41cb18cc898f1ce9ff70709607", "patch": "@@ -15,16 +15,15 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::traits::solve::{\n-    CanonicalGoal, CanonicalResponse, Certainty, ExternalConstraintsData, Goal, QueryResult,\n-    Response,\n+    CanonicalResponse, Certainty, ExternalConstraintsData, Goal, QueryResult, Response,\n };\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{\n     CoercePredicate, RegionOutlivesPredicate, SubtypePredicate, TypeOutlivesPredicate,\n };\n \n mod assembly;\n-mod canonical;\n+mod canonicalize;\n mod eval_ctxt;\n mod fulfill;\n mod project_goals;"}]}