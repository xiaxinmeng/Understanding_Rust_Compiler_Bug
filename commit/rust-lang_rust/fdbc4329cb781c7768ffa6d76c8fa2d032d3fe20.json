{"sha": "fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "node_id": "C_kwDOAAsO6NoAKGZkYmM0MzI5Y2I3ODFjNzc2OGZmYTZkNzZjOGZhMmQwMzJkM2ZlMjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-22T18:26:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-22T18:26:51Z"}, "message": "Auto merge of #108340 - eggyal:remove_traversal_trait_aliases, r=oli-obk\n\nRemove type-traversal trait aliases\n\n#107924 moved the type traversal (folding and visiting) traits into the type library, but created trait aliases in `rustc_middle` to minimise both the API churn for trait consumers and the arising boilerplate.  As mentioned in that PR, an alternative approach of defining subtraits with blanket implementations of the respective supertraits was also considered at that time but was ruled out as not adding much value.\n\nUnfortunately, it has since emerged that rust-analyzer has difficulty with these trait aliases at present, resulting in a degraded contributor experience (see the recent [r-a has become useless](https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/r-a.20has.20become.20useless) topic on the #t-compiler/help Zulip stream).\n\nThis PR removes the trait aliases, and accordingly the underlying type library traits are now used directly; they are parameterised by `TyCtxt<'tcx>` rather than just the `'tcx` lifetime, and imports have been updated to reflect the fact that the trait aliases' explicitly named traits are no longer automatically brought into scope.  These changes also roll-back the (no-longer required) workarounds to #107747 that were made in b409329c624b9e3bbd7d8e07697e2e9f861a45b6.\n\nSince this PR is just a find+replace together with the changes necessary for compilation & tidy to pass, it's currently just one mega-commit.  Let me know if you'd like it broken up.\n\nr? `@oli-obk`", "tree": {"sha": "71139ec1fd77ba8b0e84349fe83144742fd7c0ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71139ec1fd77ba8b0e84349fe83144742fd7c0ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "html_url": "https://github.com/rust-lang/rust/commit/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b869e84e581612f4a30a4bca63bd9e90e9a17003", "url": "https://api.github.com/repos/rust-lang/rust/commits/b869e84e581612f4a30a4bca63bd9e90e9a17003", "html_url": "https://github.com/rust-lang/rust/commit/b869e84e581612f4a30a4bca63bd9e90e9a17003"}, {"sha": "a9b2354a1d78de9a641fe626cef9309027a6ea39", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b2354a1d78de9a641fe626cef9309027a6ea39", "html_url": "https://github.com/rust-lang/rust/commit/a9b2354a1d78de9a641fe626cef9309027a6ea39"}], "stats": {"total": 1227, "additions": 658, "deletions": 569}, "files": [{"sha": "1427f5cb31d9c8c14b5a983782e7bbb808f8d6c6", "filename": "compiler/rustc_borrowck/src/constraint_generation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, RegionVid, Ty};\n+use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt};\n \n use crate::{\n     borrow_set::BorrowSet, facts::AllFacts, location::LocationTable, nll::ToRegionVid,\n@@ -165,7 +165,7 @@ impl<'cx, 'tcx> ConstraintGeneration<'cx, 'tcx> {\n     /// `location`.\n     fn add_regular_live_constraint<T>(&mut self, live_ty: T, location: Location)\n     where\n-        T: TypeVisitable<'tcx>,\n+        T: TypeVisitable<TyCtxt<'tcx>>,\n     {\n         debug!(\"add_regular_live_constraint(live_ty={:?}, location={:?})\", live_ty, location);\n "}, {"sha": "68205fa45587bb4579060e88285f0459cc15dcbc", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -106,7 +106,7 @@ impl<'tcx> ToUniverseInfo<'tcx>\n     }\n }\n \n-impl<'tcx, T: Copy + fmt::Display + TypeFoldable<'tcx> + 'tcx> ToUniverseInfo<'tcx>\n+impl<'tcx, T: Copy + fmt::Display + TypeFoldable<TyCtxt<'tcx>> + 'tcx> ToUniverseInfo<'tcx>\n     for Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::Normalize<T>>>\n {\n     fn to_universe_info(self, base_universe: ty::UniverseIndex) -> UniverseInfo<'tcx> {\n@@ -258,7 +258,7 @@ struct NormalizeQuery<'tcx, T> {\n \n impl<'tcx, T> TypeOpInfo<'tcx> for NormalizeQuery<'tcx, T>\n where\n-    T: Copy + fmt::Display + TypeFoldable<'tcx> + 'tcx,\n+    T: Copy + fmt::Display + TypeFoldable<TyCtxt<'tcx>> + 'tcx,\n {\n     fn fallback_error(\n         &self,"}, {"sha": "941da2dd3b5fcabe51421c926e1d56eabb1258bc", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::traits::ObligationCauseCode;\n-use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable, TypeVisitableExt};\n use rustc_span::Span;\n \n use crate::{\n@@ -1366,7 +1366,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// we use this kind of hacky solution.\n     fn normalize_to_scc_representatives<T>(&self, tcx: TyCtxt<'tcx>, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         tcx.fold_regions(value, |r, _db| {\n             let vid = self.to_region_vid(r);"}, {"sha": "ae1d89de80efeef26057e9c4e6828a3aa1badab0", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -6,7 +6,7 @@ use rustc_infer::infer::TyCtxtInferExt as _;\n use rustc_infer::infer::{DefiningAnchor, InferCtxt};\n use rustc_infer::traits::{Obligation, ObligationCause};\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n-use rustc_middle::ty::visit::TypeVisitable;\n+use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n@@ -178,7 +178,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// region names in error messages.\n     pub(crate) fn name_regions<T>(&self, tcx: TyCtxt<'tcx>, ty: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         tcx.fold_regions(ty, |region, _| match *region {\n             ty::ReVar(vid) => {"}, {"sha": "016f6f78dfa1d4144cfb3c44623a992d325cb122", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -38,7 +38,7 @@ pub(crate) fn renumber_regions<'tcx, T, F>(\n     get_ctxt_fn: F,\n ) -> T\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeFoldable<TyCtxt<'tcx>>,\n     F: Fn() -> RegionCtxt,\n {\n     infcx.tcx.fold_regions(value, |_region, _depth| {\n@@ -89,7 +89,7 @@ struct NllVisitor<'a, 'tcx> {\n impl<'a, 'tcx> NllVisitor<'a, 'tcx> {\n     fn renumber_regions<T, F>(&mut self, value: T, region_ctxt_fn: F) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n         F: Fn() -> RegionCtxt,\n     {\n         renumber_regions(self.infcx, value, region_ctxt_fn)"}, {"sha": "1be20f1870706ffd1e390d27147ac3db0bb884ab", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -2,7 +2,7 @@ use std::fmt;\n \n use rustc_infer::infer::{canonical::Canonical, InferOk};\n use rustc_middle::mir::ConstraintCategory;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOpOutput};\n@@ -66,7 +66,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         canonical: &Canonical<'tcx, T>,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let old_universe = self.infcx.universe();\n "}, {"sha": "504633c6a5c3942cbbd482303ddb4b4dd15a5e26", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -6,8 +6,8 @@ use rustc_infer::infer::region_constraints::{GenericKind, VerifyBound};\n use rustc_infer::infer::{self, InferCtxt, SubregionOrigin};\n use rustc_middle::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, ConstraintCategory};\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{TypeFoldable, TypeVisitableExt};\n use rustc_span::{Span, DUMMY_SP};\n \n use crate::{\n@@ -171,7 +171,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n     ///\n     /// FIXME: This should get removed once higher ranked region obligations\n     /// are dealt with during trait solving.\n-    fn replace_placeholders_with_nll<T: TypeFoldable<'tcx>>(&mut self, value: T) -> T {\n+    fn replace_placeholders_with_nll<T: TypeFoldable<TyCtxt<'tcx>>>(&mut self, value: T) -> T {\n         if value.has_placeholders() {\n             self.tcx.fold_regions(value, |r, _| match *r {\n                 ty::RePlaceholder(placeholder) => {"}, {"sha": "473c0596300731ddaddc797d5e2b0e656c976732", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -3,7 +3,7 @@ use rustc_index::bit_set::HybridBitSet;\n use rustc_index::interval::IntervalSet;\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_middle::mir::{BasicBlock, Body, ConstraintCategory, Local, Location};\n-use rustc_middle::ty::{Ty, TypeVisitable};\n+use rustc_middle::ty::{Ty, TyCtxt, TypeVisitable, TypeVisitableExt};\n use rustc_trait_selection::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc_trait_selection::traits::query::type_op::outlives::DropckOutlives;\n use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n@@ -477,7 +477,7 @@ impl<'tcx> LivenessContext<'_, '_, '_, 'tcx> {\n     /// points `live_at`.\n     fn add_use_live_facts_for(\n         &mut self,\n-        value: impl TypeVisitable<'tcx>,\n+        value: impl TypeVisitable<TyCtxt<'tcx>>,\n         live_at: &IntervalSet<PointIndex>,\n     ) {\n         debug!(\"add_use_live_facts_for(value={:?})\", value);\n@@ -542,7 +542,7 @@ impl<'tcx> LivenessContext<'_, '_, '_, 'tcx> {\n     fn make_all_regions_live(\n         elements: &RegionValueElements,\n         typeck: &mut TypeChecker<'_, 'tcx>,\n-        value: impl TypeVisitable<'tcx>,\n+        value: impl TypeVisitable<TyCtxt<'tcx>>,\n         live_at: &IntervalSet<PointIndex>,\n     ) {\n         debug!(\"make_all_regions_live(value={:?})\", value);"}, {"sha": "eb0fa1b6859ac6d8f1f550dff25c72819799c9af", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -30,7 +30,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::{SubstsRef, UserSubsts};\n-use rustc_middle::ty::visit::TypeVisitable;\n+use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{\n     self, Binder, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, Dynamic,\n     OpaqueHiddenType, OpaqueTypeKey, RegionVid, Ty, TyCtxt, UserType, UserTypeAnnotationIndex,"}, {"sha": "3e8731755fc60fefb6fa99731b066232c957384c", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -728,7 +728,7 @@ trait InferCtxtExt<'tcx> {\n         value: T,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx>;\n+        T: TypeFoldable<TyCtxt<'tcx>>;\n \n     fn replace_bound_regions_with_nll_infer_vars<T>(\n         &self,\n@@ -738,7 +738,7 @@ trait InferCtxtExt<'tcx> {\n         indices: &mut UniversalRegionIndices<'tcx>,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx>;\n+        T: TypeFoldable<TyCtxt<'tcx>>;\n \n     fn replace_late_bound_regions_with_nll_infer_vars_in_recursive_scope(\n         &self,\n@@ -761,7 +761,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n         value: T,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.infcx.tcx.fold_regions(value, |region, _depth| {\n             let name = match region.get_name() {\n@@ -785,7 +785,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n         indices: &mut UniversalRegionIndices<'tcx>,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let (value, _map) = self.tcx.replace_late_bound_regions(value, |br| {\n             debug!(?br);\n@@ -906,7 +906,7 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     /// returned by `to_region_vid`.\n     pub fn fold_to_region_vids<T>(&self, tcx: TyCtxt<'tcx>, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         tcx.fold_regions(value, |region, _| tcx.mk_re_var(self.to_region_vid(region)))\n     }"}, {"sha": "722e2754e8381b9ec113115d8be7ec4b87803c79", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -374,7 +374,7 @@ impl<'tcx> HasTargetSpec for FunctionCx<'_, '_, 'tcx> {\n impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n     pub(crate) fn monomorphize<T>(&self, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx> + Copy,\n+        T: TypeFoldable<TyCtxt<'tcx>> + Copy,\n     {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.tcx,"}, {"sha": "80ce3dc932873fa46e45290a1f2e8113d2974299", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -86,7 +86,7 @@ mod prelude {\n     pub(crate) use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout};\n     pub(crate) use rustc_middle::ty::{\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n-        TypeFoldable, UintTy,\n+        TypeFoldable, TypeVisitableExt, UintTy,\n     };\n     pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx};\n "}, {"sha": "9e3a22ee05d7ce1c51874636c0b121dc37fe8ec6", "filename": "compiler/rustc_codegen_gcc/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcallee.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,6 +1,6 @@\n use gccjit::{FunctionType, RValue};\n use rustc_codegen_ssa::traits::BaseTypeMethods;\n-use rustc_middle::ty::{self, Instance, TypeVisitable};\n+use rustc_middle::ty::{self, Instance, TypeVisitableExt};\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt};\n \n use crate::abi::FnAbiGccExt;"}, {"sha": "a7c868354fb27a9adbd2108570b409c44c079d73", "filename": "compiler/rustc_codegen_gcc/src/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_gcc%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_gcc%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fmono_item.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,7 +1,7 @@\n use rustc_codegen_ssa::traits::PreDefineMethods;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n-use rustc_middle::ty::{self, Instance, TypeVisitable};\n+use rustc_middle::ty::{self, Instance, TypeVisitableExt};\n use rustc_middle::ty::layout::{FnAbiOf, LayoutOf};\n use rustc_span::def_id::DefId;\n "}, {"sha": "ea2ce765053ffb83318e664f28ea5b20aebdb645", "filename": "compiler/rustc_codegen_gcc/src/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -3,7 +3,7 @@ use std::fmt::Write;\n use gccjit::{Struct, Type};\n use crate::rustc_codegen_ssa::traits::{BaseTypeMethods, DerivedTypeMethods, LayoutTypeMethods};\n use rustc_middle::bug;\n-use rustc_middle::ty::{self, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n use rustc_middle::ty::layout::{FnAbiOf, LayoutOf, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_target::abi::{self, Abi, F32, F64, FieldsShape, Int, Integer, Pointer, PointeeInfo, Size, TyAbiInterface, Variants};"}, {"sha": "6ee2a05ffd7b5b32ce7a6b7567bc494677fb2742", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -13,7 +13,7 @@ use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n \n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt};\n-use rustc_middle::ty::{self, Instance, TypeVisitable};\n+use rustc_middle::ty::{self, Instance, TypeVisitableExt};\n \n /// Codegens a reference to a fn/method item, monomorphizing and\n /// inlining as it goes."}, {"sha": "5392534cfcb79e72df2a23014789c084851a615e", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -27,7 +27,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::mir;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, Instance, ParamEnv, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Instance, ParamEnv, Ty, TypeVisitableExt};\n use rustc_session::config::{self, DebugInfo};\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;"}, {"sha": "d0ae36349df1ae75adc8f00368902365c777d16c", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n pub use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n use rustc_middle::ty::layout::{FnAbiOf, LayoutOf};\n-use rustc_middle::ty::{self, Instance, TypeVisitable};\n+use rustc_middle::ty::{self, Instance, TypeVisitableExt};\n use rustc_session::config::CrateType;\n use rustc_target::spec::RelocModel;\n "}, {"sha": "e264ce78f0d67444886842ac3e61a8a7959d9836", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -5,7 +5,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n use rustc_middle::ty::layout::{FnAbiOf, LayoutOf, TyAndLayout};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n-use rustc_middle::ty::{self, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n use rustc_target::abi::{Abi, Align, FieldsShape};\n use rustc_target::abi::{Int, Pointer, F32, F64};\n use rustc_target::abi::{PointeeInfo, Scalar, Size, TyAbiInterface, Variants};"}, {"sha": "cdc3e1dc237b23f96285b2a28b3bc86276f319c1", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -16,7 +16,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, AssertKind, SwitchTargets};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n-use rustc_middle::ty::{self, Instance, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Instance, Ty, TypeVisitableExt};\n use rustc_session::config::OptLevel;\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};"}, {"sha": "2ec9fdbf44f11ca9fb19a6e91faa3282999ca065", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -3,7 +3,7 @@ use crate::traits::*;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, TyAndLayout};\n-use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitableExt};\n use rustc_target::abi::call::{FnAbi, PassMode};\n \n use std::iter;\n@@ -105,7 +105,7 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn monomorphize<T>(&self, value: T) -> T\n     where\n-        T: Copy + TypeFoldable<'tcx>,\n+        T: Copy + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         debug!(\"monomorphize: self.instance={:?}\", self.instance);\n         self.instance.subst_mir_and_normalize_erasing_regions("}, {"sha": "3db102e484dfa78cd8854c5a67b1c41fc4cff32d", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -489,7 +489,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     /// Call this on things you got out of the MIR (so it is as generic as the current\n     /// stack frame), to bring it into the proper environment for this interpreter.\n-    pub(super) fn subst_from_current_frame_and_normalize_erasing_regions<T: TypeFoldable<'tcx>>(\n+    pub(super) fn subst_from_current_frame_and_normalize_erasing_regions<\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n+    >(\n         &self,\n         value: T,\n     ) -> Result<T, InterpError<'tcx>> {\n@@ -498,7 +500,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     /// Call this on things you got out of the MIR (so it is as generic as the provided\n     /// stack frame), to bring it into the proper environment for this interpreter.\n-    pub(super) fn subst_from_frame_and_normalize_erasing_regions<T: TypeFoldable<'tcx>>(\n+    pub(super) fn subst_from_frame_and_normalize_erasing_regions<T: TypeFoldable<TyCtxt<'tcx>>>(\n         &self,\n         frame: &Frame<'mir, 'tcx, M::Provenance, M::FrameExtra>,\n         value: T,"}, {"sha": "bf2b4ee69abfb048dd8ce6fff1542b86fadeb3e0", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,5 +1,7 @@\n use rustc_middle::mir::interpret::InterpResult;\n-use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::{\n+    self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitableExt, TypeVisitor,\n+};\n use std::ops::ControlFlow;\n \n /// Checks whether a type contains generic parameters which require substitution.\n@@ -9,7 +11,7 @@ use std::ops::ControlFlow;\n /// case these parameters are unused.\n pub(crate) fn ensure_monomorphic_enough<'tcx, T>(tcx: TyCtxt<'tcx>, ty: T) -> InterpResult<'tcx>\n where\n-    T: TypeVisitable<'tcx>,\n+    T: TypeVisitable<TyCtxt<'tcx>>,\n {\n     debug!(\"ensure_monomorphic_enough: ty={:?}\", ty);\n     if !ty.needs_subst() {"}, {"sha": "e4366f655e4712462a793fc5f6c18abe3a753298", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceC\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt};\n-use rustc_middle::ty::{Binder, TraitRef, TypeVisitable};\n+use rustc_middle::ty::{Binder, TraitRef, TypeVisitableExt};\n use rustc_mir_dataflow::{self, Analysis};\n use rustc_span::{sym, Span, Symbol};\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;"}, {"sha": "ba08f5d30d94b3a46e3fe72d0402a82e7213163e", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::mir::traversal::ReversePostorderIter;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{self, List, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, List, TyCtxt, TypeVisitableExt};\n use rustc_span::Span;\n \n use rustc_index::vec::{Idx, IndexVec};"}, {"sha": "3af2d0c4e668a61d5000c7c4a1d38423f888cd10", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::mir::{\n     RetagKind, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n     TerminatorKind, UnOp, START_BLOCK,\n };\n-use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeVisitableExt};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};"}, {"sha": "3764b9f68f572f1dc272366103ea6aa2c9ffee42", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -35,7 +35,7 @@ use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, SubstsRef};\n use rustc_middle::ty::DynKind;\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, Const, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Const, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeVisitableExt};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::edition::Edition;"}, {"sha": "ba2d4319af6e20b2918f3b3117d61c74280baa89", "filename": "compiler/rustc_hir_analysis/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::NormalizeExt;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n use rustc_infer::infer::InferCtxt;\n-use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::Limit;\n use rustc_span::def_id::LocalDefId;"}, {"sha": "3ca886f11d1f831cd2393291997f9bfef99016a9", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -23,6 +23,7 @@ use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n use rustc_middle::ty::{\n     self, AdtDef, DefIdTree, ParamEnv, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n+    TypeVisitableExt,\n };\n use rustc_session::lint::builtin::{UNINHABITED_STATIC, UNSUPPORTED_CALLING_CONVENTIONS};\n use rustc_span::symbol::sym;\n@@ -255,7 +256,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         selftys: Vec<(Span, Option<String>)>,\n     }\n \n-    impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for ProhibitOpaqueVisitor<'tcx> {\n+    impl<'tcx> ty::visit::TypeVisitor<TyCtxt<'tcx>> for ProhibitOpaqueVisitor<'tcx> {\n         type BreakTy = Ty<'tcx>;\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -1418,7 +1419,7 @@ fn opaque_type_cycle_error(\n                     opaques: Vec<DefId>,\n                     closures: Vec<DefId>,\n                 }\n-                impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypeCollector {\n+                impl<'tcx> ty::visit::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypeCollector {\n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n                             ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {"}, {"sha": "50005582f7cecc18757ac1db6c9d6771f4d354d7", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -16,7 +16,8 @@ use rustc_infer::traits::util;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::util::ExplicitSelf;\n use rustc_middle::ty::{\n-    self, ir::TypeFolder, DefIdTree, InternalSubsts, Ty, TypeFoldable, TypeSuperFoldable,\n+    self, DefIdTree, InternalSubsts, Ty, TypeFoldable, TypeFolder, TypeSuperFoldable,\n+    TypeVisitableExt,\n };\n use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt};\n use rustc_span::Span;"}, {"sha": "b1d5a27be9397dee6ff0f37cfdde09296ebe8f00", "filename": "compiler/rustc_hir_analysis/src/check/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast::InlineAsmTemplatePiece;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-use rustc_middle::ty::{self, Article, FloatTy, IntTy, Ty, TyCtxt, TypeVisitable, UintTy};\n+use rustc_middle::ty::{self, Article, FloatTy, IntTy, Ty, TyCtxt, TypeVisitableExt, UintTy};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{Symbol, DUMMY_SP};"}, {"sha": "25be62534a5dab790b9e698e4a01e7d0d98eb7a3", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -16,8 +16,8 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n-    self, ir::TypeVisitor, AdtKind, GenericParamDefKind, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperVisitable,\n+    self, AdtKind, GenericParamDefKind, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n+    TypeVisitable, TypeVisitableExt, TypeVisitor,\n };\n use rustc_middle::ty::{GenericArgKind, InternalSubsts};\n use rustc_session::parse::feature_err;\n@@ -56,7 +56,7 @@ impl<'tcx> WfCheckingCtxt<'_, 'tcx> {\n     // `ObligationCtxt::normalize`, but provides a nice `ObligationCauseCode`.\n     fn normalize<T>(&self, span: Span, loc: Option<WellFormedLoc>, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.ocx.normalize(\n             &ObligationCause::new(span, self.body_def_id, ObligationCauseCode::WellFormed(loc)),\n@@ -510,7 +510,7 @@ fn augment_param_env<'tcx>(\n ///     fn into_iter<'a>(&'a self) -> Self::Iter<'a>;\n /// }\n /// ```\n-fn gather_gat_bounds<'tcx, T: TypeFoldable<'tcx>>(\n+fn gather_gat_bounds<'tcx, T: TypeFoldable<TyCtxt<'tcx>>>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     item_def_id: hir::OwnerId,\n@@ -708,7 +708,7 @@ struct GATSubstCollector<'tcx> {\n }\n \n impl<'tcx> GATSubstCollector<'tcx> {\n-    fn visit<T: TypeFoldable<'tcx>>(\n+    fn visit<T: TypeFoldable<TyCtxt<'tcx>>>(\n         gat: DefId,\n         t: T,\n     ) -> (FxHashSet<(ty::Region<'tcx>, usize)>, FxHashSet<(Ty<'tcx>, usize)>) {\n@@ -1382,7 +1382,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             struct CountParams {\n                 params: FxHashSet<u32>,\n             }\n-            impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for CountParams {\n+            impl<'tcx> ty::visit::TypeVisitor<TyCtxt<'tcx>> for CountParams {\n                 type BreakTy = ();\n \n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "875c5f1fd00430c02ca623f05fda8d45c1644dbd", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -11,7 +11,7 @@ use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::infer::{self, RegionResolutionError};\n use rustc_middle::ty::adjustment::CoerceUnsizedInfo;\n-use rustc_middle::ty::{self, suggest_constraining_type_params, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, suggest_constraining_type_params, Ty, TyCtxt, TypeVisitableExt};\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n use rustc_trait_selection::traits::misc::{\n     type_allowed_to_implement_copy, CopyImplementationError, InfringingFieldsReason,"}, {"sha": "23490bc091c1c75496322f8f4f862dbfaab85d4b", "filename": "compiler/rustc_hir_analysis/src/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -8,7 +8,7 @@\n use rustc_errors::{error_code, struct_span_err};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::sym;\n use rustc_trait_selection::traits;\n "}, {"sha": "52c4a376fb2dc0788fec714c30cf22f70c8b3aca", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -8,7 +8,8 @@ use rustc_hir as hir;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IgnoreRegions;\n use rustc_middle::ty::{\n-    self, ir::TypeVisitor, AliasKind, ImplPolarity, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n+    self, AliasKind, ImplPolarity, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n+    TypeVisitor,\n };\n use rustc_session::lint;\n use rustc_span::def_id::{DefId, LocalDefId};"}, {"sha": "6c00b8ff7bdeed3ce74cb6524eb4c03e475aed3e", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::{GenericArg, GenericParam, GenericParamKind, HirIdMap, LifetimeNa\n use rustc_middle::bug;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_bound_vars::*;\n-use rustc_middle::ty::{self, ir::TypeVisitor, DefIdTree, TyCtxt, TypeSuperVisitable};\n+use rustc_middle::ty::{self, DefIdTree, TyCtxt, TypeSuperVisitable, TypeVisitor};\n use rustc_session::lint;\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::{sym, Ident};"}, {"sha": "c013f1bdb316576a4b602ea92868da881bad5bfb", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{\n-    self, ir::TypeFolder, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeSuperFoldable, TypeVisitable,\n+    self, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitableExt,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};"}, {"sha": "e18b0f082798b3f661fa256fb2384ba7357d8a54", "filename": "compiler/rustc_hir_analysis/src/constrained_generic_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::source_map::Span;\n use std::ops::ControlFlow;\n@@ -43,7 +43,7 @@ pub fn parameters_for_impl<'tcx>(\n /// of parameters whose values are needed in order to constrain `ty` - these\n /// differ, with the latter being a superset, in the presence of projections.\n pub fn parameters_for<'tcx>(\n-    t: &impl TypeVisitable<'tcx>,\n+    t: &impl TypeVisitable<TyCtxt<'tcx>>,\n     include_nonconstraining: bool,\n ) -> Vec<Parameter> {\n     let mut collector = ParameterCollector { parameters: vec![], include_nonconstraining };"}, {"sha": "e330fcc785770e632284e6649c56051e14cf7a71", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{ForeignItem, ForeignItemKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{ObligationCause, WellFormedLoc};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, ir::TypeFolder, Region, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Region, TyCtxt, TypeFoldable, TypeFolder};\n use rustc_span::def_id::LocalDefId;\n use rustc_trait_selection::traits;\n "}, {"sha": "82a96f8e67408582d0b7b1834b422a527abb009e", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -16,7 +16,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::{Span, Symbol};\n \n mod min_specialization;"}, {"sha": "daa5d15704d878bb1af381400eac0bb108a60e80", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -76,7 +76,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::specialization_graph::Node;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n-use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n use rustc_trait_selection::traits::outlives_bounds::InferCtxtExt as _;"}, {"sha": "089491bef5ea5a216fc8cd7221dfbfbfe70a8cb7", "filename": "compiler/rustc_hir_analysis/src/structured_errors/missing_cast_for_variadic_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,6 +1,6 @@\n use crate::structured_errors::StructuredDiagnostic;\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n-use rustc_middle::ty::{Ty, TypeVisitable};\n+use rustc_middle::ty::{Ty, TypeVisitableExt};\n use rustc_session::Session;\n use rustc_span::Span;\n "}, {"sha": "3b9fb367813d8f7c405b4170aa3be84cbf59feb2", "filename": "compiler/rustc_hir_analysis/src/structured_errors/sized_unsized_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,6 +1,6 @@\n use crate::structured_errors::StructuredDiagnostic;\n use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n-use rustc_middle::ty::{Ty, TypeVisitable};\n+use rustc_middle::ty::{Ty, TypeVisitableExt};\n use rustc_session::Session;\n use rustc_span::Span;\n "}, {"sha": "5d5c8ca604a04f77ccd0c02286d751b4f9f93720", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -7,10 +7,8 @@ use rustc_arena::DroplessArena;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n-#[cfg(not(bootstrap))]\n-use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{self, CrateVariancesMap, SubstsRef, Ty, TyCtxt};\n-use rustc_middle::ty::{DefIdTree, TypeSuperVisitable};\n+use rustc_middle::ty::{DefIdTree, TypeSuperVisitable, TypeVisitable};\n use std::ops::ControlFlow;\n \n /// Defines the `TermsContext` basically houses an arena where we can\n@@ -101,7 +99,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n         }\n     }\n \n-    impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypeLifetimeCollector<'tcx> {\n+    impl<'tcx> ty::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypeLifetimeCollector<'tcx> {\n         #[instrument(level = \"trace\", skip(self), ret)]\n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::RegionKind::ReEarlyBound(ebr) = r.kind() {"}, {"sha": "ebb08a0cc04a83bb54fe7f8069b0d39c13c73938", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n use rustc_middle::ty::SubstsRef;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;"}, {"sha": "316c2a7eeeb4bc99b0dfc10aa4fa3611c8280f84", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -41,7 +41,7 @@ use rustc_middle::mir::Mutability;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::cast::{CastKind, CastTy};\n use rustc_middle::ty::error::TypeError;\n-use rustc_middle::ty::{self, Ty, TypeAndMut, TypeVisitable, VariantDef};\n+use rustc_middle::ty::{self, Ty, TypeAndMut, TypeVisitableExt, VariantDef};\n use rustc_session::lint;\n use rustc_session::Session;\n use rustc_span::def_id::{DefId, LOCAL_CRATE};"}, {"sha": "0eff3a2f9c2e69923990d95ebea66fa73d46d61f", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -11,8 +11,8 @@ use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_infer::infer::{InferOk, InferResult};\n use rustc_macros::{TypeFoldable, TypeVisitable};\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt, TypeSuperVisitable};\n+use rustc_middle::ty::visit::{TypeVisitable, TypeVisitableExt};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::sym;"}, {"sha": "706eb3f8647f27f8ae27a3ec1c45f6861d3b8391", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -54,7 +54,7 @@ use rustc_middle::ty::adjustment::{\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::visit::TypeVisitable;\n+use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{self, Ty, TypeAndMut};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;"}, {"sha": "34d62987c3b0afc12cd6d20cb5c2b6c2b9c3d81b", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::{BottomUpFolder, TypeFolder};\n use rustc_middle::ty::print::{with_forced_trimmed_paths, with_no_trimmed_paths};\n use rustc_middle::ty::relate::TypeRelation;\n-use rustc_middle::ty::{self, Article, AssocItem, Ty, TypeAndMut, TypeVisitable};\n+use rustc_middle::ty::{self, Article, AssocItem, Ty, TypeAndMut, TypeVisitableExt};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, Span};\n use rustc_trait_selection::infer::InferCtxtExt as _;"}, {"sha": "4a7bb1b04391e7cb27d5fea87e3a7da96e04f0d4", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -42,7 +42,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n use rustc_middle::ty::error::TypeError::FieldMisMatch;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AdtKind, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, AdtKind, Ty, TypeVisitableExt};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_session::parse::feature_err;\n use rustc_span::edit_distance::find_best_match_for_name;"}, {"sha": "67de75301ad52402e97a7dcac87e88b89f3d7725", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -23,9 +23,9 @@ use rustc_infer::infer::InferResult;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::visit::TypeVisitable;\n+use rustc_middle::ty::visit::{TypeVisitable, TypeVisitableExt};\n use rustc_middle::ty::{\n-    self, AdtKind, CanonicalUserType, DefIdTree, GenericParamDefKind, Ty, UserType,\n+    self, AdtKind, CanonicalUserType, DefIdTree, GenericParamDefKind, Ty, TyCtxt, UserType,\n };\n use rustc_middle::ty::{GenericArgKind, SubstsRef, UserSelfTy, UserSubsts};\n use rustc_session::lint;\n@@ -315,7 +315,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub(in super::super) fn normalize<T>(&self, span: Span, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.register_infer_ok_obligations(\n             self.at(&self.misc(span), self.param_env).normalize(value),\n@@ -443,7 +443,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // sufficiently enforced with erased regions. =)\n     fn can_contain_user_lifetime_bounds<T>(t: T) -> bool\n     where\n-        T: TypeVisitable<'tcx>,\n+        T: TypeVisitable<TyCtxt<'tcx>>,\n     {\n         t.has_free_regions() || t.has_projections() || t.has_infer_types()\n     }"}, {"sha": "d64492e503db0544139527cc93090c107033d68f", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::ObligationCauseCode;\n use rustc_middle::ty::{\n-    self, ir::TypeVisitor, DefIdTree, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n+    self, DefIdTree, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_span::{self, Span};\n use rustc_trait_selection::traits;\n@@ -243,7 +243,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         true\n     }\n \n-    fn find_ambiguous_parameter_in<T: TypeVisitable<'tcx>>(\n+    fn find_ambiguous_parameter_in<T: TypeVisitable<TyCtxt<'tcx>>>(\n         &self,\n         item_def_id: DefId,\n         t: T,"}, {"sha": "bddf78a5419dfc53511fc74421b05f6ca3d29c9d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -25,7 +25,7 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::TypeTrace;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n-use rustc_middle::ty::visit::TypeVisitable;\n+use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{self, DefIdTree, IsSuggestable, Ty};\n use rustc_session::Session;\n use rustc_span::symbol::{kw, Ident};"}, {"sha": "1dea3e6f900d4dd72741396cc0ecbca9fe405963", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -18,7 +18,7 @@ use rustc_infer::infer::error_reporting::TypeErrCtxt;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{self, Const, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Const, Ty, TyCtxt, TypeVisitableExt};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::{self, Span, DUMMY_SP};"}, {"sha": "1c7f131f3d7e328ffed41b64b8dbd675907a034c", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{\n     self, suggest_constraining_type_params, Binder, DefIdTree, IsSuggestable, ToPredicate, Ty,\n-    TypeVisitable,\n+    TypeVisitableExt,\n };\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;"}, {"sha": "adedb5b742884c9c2a6a9a86f2accdbcf316817e", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -12,7 +12,7 @@ use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::{\n     hir::map::Map,\n-    ty::{ParamEnv, TyCtxt, TypeVisitable, TypeckResults},\n+    ty::{ParamEnv, TyCtxt, TypeVisitableExt, TypeckResults},\n };\n use std::mem::swap;\n "}, {"sha": "fa3887362d99caa3ec6196ba076e07bca69b82f3", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_middle::ty::{ParamEnv, TyCtxt};\n use rustc_middle::{\n     hir::place::{PlaceBase, Projection, ProjectionKind},\n-    ty::TypeVisitable,\n+    ty::TypeVisitableExt,\n };\n \n pub(super) fn find_consumed_and_borrowed<'a, 'tcx>("}, {"sha": "e5f9292290ffe9e5d980132cf55159ad585d2ece", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -16,7 +16,7 @@ use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind};\n use rustc_infer::infer::RegionVariableOrigin;\n use rustc_middle::middle::region::{self, Scope, ScopeData, YieldData};\n use rustc_middle::ty::fold::FnMutDelegate;\n-use rustc_middle::ty::{self, BoundVariableKind, RvalueScopes, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, BoundVariableKind, RvalueScopes, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};"}, {"sha": "26020382d8148cc6a06634c9870a5bfb0b925f9a", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_hir::HirIdMap;\n use rustc_infer::infer;\n use rustc_infer::infer::{DefiningAnchor, InferCtxt, InferOk, TyCtxtInferExt};\n-use rustc_middle::ty::visit::TypeVisitable;\n+use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefIdMap;\n use rustc_span::{self, Span};"}, {"sha": "19d2befc438791342225f5e90cefe32ca7756374", "filename": "compiler/rustc_hir_typeck/src/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -3,7 +3,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n use rustc_target::abi::{Pointer, VariantIdx};\n \n use super::FnCtxt;"}, {"sha": "e50f5c77552dcdf79248e3af188f3dc6510d384c", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -51,7 +51,7 @@\n use rustc_middle::hir::place::*;\n use rustc_middle::ty::adjustment;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n \n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir as hir;\n@@ -126,7 +126,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n \n     fn resolve_vars_if_possible<T>(&self, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.infcx.resolve_vars_if_possible(value)\n     }"}, {"sha": "169f128e0a00388c700451bbb443846be9568d3a", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc_middle::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{self, SubstsRef};\n-use rustc_middle::ty::{self, GenericParamDefKind, Ty};\n+use rustc_middle::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n use rustc_middle::ty::{InternalSubsts, UserSubsts, UserType};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::traits;\n@@ -635,7 +635,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n     fn instantiate_binder_with_fresh_vars<T>(&self, value: ty::Binder<'tcx, T>) -> T\n     where\n-        T: TypeFoldable<'tcx> + Copy,\n+        T: TypeFoldable<TyCtxt<'tcx>> + Copy,\n     {\n         self.fcx.instantiate_binder_with_fresh_vars(self.span, infer::FnCall, value)\n     }"}, {"sha": "0456dd56c340e219a56f650d75ef7223f1444d9d", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer::{self, InferOk};\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n-use rustc_middle::ty::{self, GenericParamDefKind, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, GenericParamDefKind, Ty, TypeVisitableExt};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;"}, {"sha": "fc876802a4b9c0c3e107bc270c797507bc971c3d", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::AssocItem;\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::ToPredicate;\n-use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt, TypeFoldable, TypeVisitableExt};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use rustc_session::lint;\n use rustc_span::def_id::DefId;\n@@ -1905,7 +1905,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ///    so forth.\n     fn erase_late_bound_regions<T>(&self, value: ty::Binder<'tcx, T>) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.tcx.erase_late_bound_regions(value)\n     }"}, {"sha": "f3f15ee0ae40621204bbc69c6a6e3a3e580f0810", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::DeepRejectCtxt;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::print::{with_crate_prefix, with_forced_trimmed_paths};\n-use rustc_middle::ty::{self, DefIdTree, GenericArgKind, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, DefIdTree, GenericArgKind, Ty, TyCtxt, TypeVisitableExt};\n use rustc_middle::ty::{IsSuggestable, ToPolyTraitRef};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Symbol;"}, {"sha": "bb9d93d5057bebc4c57bf799b3b7a7f3e7c92df0", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::ty::adjustment::{\n };\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{\n-    self, ir::TypeFolder, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeSuperFoldable, TypeVisitable,\n+    self, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitableExt,\n };\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;"}, {"sha": "b739324099db336f1790ee00434cd649d661bf4c", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::{HirId, Pat, PatKind};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::middle::stability::EvalResult;\n-use rustc_middle::ty::{self, Adt, BindingMode, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Adt, BindingMode, Ty, TypeVisitableExt};\n use rustc_session::lint::builtin::NON_EXHAUSTIVE_OMITTED_PATTERNS;\n use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::hygiene::DesugaringKind;"}, {"sha": "0394567cb0977de3d8a9cda927b29b44eb8ce373", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -13,8 +13,8 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n-use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n-use rustc_middle::ty::visit::TypeSuperVisitable;\n+use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitableExt};\n use rustc_middle::ty::TypeckResults;\n use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n@@ -561,7 +561,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             struct RecursionChecker {\n                 def_id: LocalDefId,\n             }\n-            impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for RecursionChecker {\n+            impl<'tcx> ty::TypeVisitor<TyCtxt<'tcx>> for RecursionChecker {\n                 type BreakTy = ();\n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *t.kind() {\n@@ -685,7 +685,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n     fn resolve<T>(&mut self, x: T, span: &dyn Locatable) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let mut resolver = Resolver::new(self.fcx, span, self.body);\n         let x = x.fold_with(&mut resolver);"}, {"sha": "f66f6bd4ae1bcd91458b96ebab76960cbb436b9c", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -10,9 +10,9 @@ use crate::infer::canonical::{\n };\n use crate::infer::InferCtxt;\n use rustc_middle::ty::flags::FlagComputation;\n-use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::GenericArg;\n-use rustc_middle::ty::{self, BoundVar, InferConst, List, Ty, TyCtxt, TypeFlags};\n+use rustc_middle::ty::{self, BoundVar, InferConst, List, Ty, TyCtxt, TypeFlags, TypeVisitableExt};\n use std::sync::atomic::Ordering;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -41,7 +41,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         query_state: &mut OriginalQueryValues<'tcx>,\n     ) -> Canonical<'tcx, V>\n     where\n-        V: TypeFoldable<'tcx>,\n+        V: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);\n \n@@ -60,7 +60,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         query_state: &mut OriginalQueryValues<'tcx>,\n     ) -> Canonical<'tcx, V>\n     where\n-        V: TypeFoldable<'tcx>,\n+        V: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);\n \n@@ -100,7 +100,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// [c]: https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html#canonicalizing-the-query-result\n     pub fn canonicalize_response<V>(&self, value: V) -> Canonical<'tcx, V>\n     where\n-        V: TypeFoldable<'tcx>,\n+        V: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let mut query_state = OriginalQueryValues::default();\n         Canonicalizer::canonicalize(\n@@ -114,7 +114,7 @@ impl<'tcx> InferCtxt<'tcx> {\n \n     pub fn canonicalize_user_type_annotation<V>(&self, value: V) -> Canonical<'tcx, V>\n     where\n-        V: TypeFoldable<'tcx>,\n+        V: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let mut query_state = OriginalQueryValues::default();\n         Canonicalizer::canonicalize(\n@@ -136,7 +136,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         query_state: &mut OriginalQueryValues<'tcx>,\n     ) -> Canonical<'tcx, V>\n     where\n-        V: TypeFoldable<'tcx>,\n+        V: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);\n \n@@ -333,7 +333,7 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n \n     fn fold_binder<T>(&mut self, t: ty::Binder<'tcx, T>) -> ty::Binder<'tcx, T>\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.binder_index.shift_in(1);\n         let t = t.super_fold_with(self);\n@@ -530,7 +530,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         query_state: &mut OriginalQueryValues<'tcx>,\n     ) -> Canonical<'tcx, V>\n     where\n-        V: TypeFoldable<'tcx>,\n+        V: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let needs_canonical_flags = if canonicalize_region_mode.any() {\n             TypeFlags::NEEDS_INFER |"}, {"sha": "4053546f00c3db3d5dd1965951626e72e895a934", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -26,7 +26,7 @@ use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin, TypeVari\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::GenericArg;\n-use rustc_middle::ty::{self, List};\n+use rustc_middle::ty::{self, List, TyCtxt};\n use rustc_span::source_map::Span;\n \n pub use rustc_middle::infer::canonical::*;\n@@ -55,7 +55,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         canonical: &Canonical<'tcx, T>,\n     ) -> (T, CanonicalVarValues<'tcx>)\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         // For each universe that is referred to in the incoming\n         // query, create a universe in our local inference context. In"}, {"sha": "d3470d70f6571815582d4c9c400df7be6ecedec5", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         fulfill_cx: &mut dyn TraitEngine<'tcx>,\n     ) -> Fallible<CanonicalQueryResponse<'tcx, T>>\n     where\n-        T: Debug + TypeFoldable<'tcx>,\n+        T: Debug + TypeFoldable<TyCtxt<'tcx>>,\n         Canonical<'tcx, QueryResponse<'tcx, T>>: ArenaAllocatable<'tcx>,\n     {\n         let query_response = self.make_query_response(inference_vars, answer, fulfill_cx)?;\n@@ -85,7 +85,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         answer: T,\n     ) -> Canonical<'tcx, QueryResponse<'tcx, T>>\n     where\n-        T: Debug + TypeFoldable<'tcx>,\n+        T: Debug + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.canonicalize_response(QueryResponse {\n             var_values: inference_vars,\n@@ -106,7 +106,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         fulfill_cx: &mut dyn TraitEngine<'tcx>,\n     ) -> Result<QueryResponse<'tcx, T>, NoSolution>\n     where\n-        T: Debug + TypeFoldable<'tcx>,\n+        T: Debug + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let tcx = self.tcx;\n \n@@ -180,7 +180,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n     ) -> InferResult<'tcx, R>\n     where\n-        R: Debug + TypeFoldable<'tcx>,\n+        R: Debug + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let InferOk { value: result_subst, mut obligations } =\n             self.query_response_substitution(cause, param_env, original_values, query_response)?;\n@@ -242,7 +242,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         output_query_region_constraints: &mut QueryRegionConstraints<'tcx>,\n     ) -> InferResult<'tcx, R>\n     where\n-        R: Debug + TypeFoldable<'tcx>,\n+        R: Debug + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let InferOk { value: result_subst, mut obligations } = self\n             .query_response_substitution_guess(cause, param_env, original_values, query_response)?;\n@@ -356,7 +356,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n     ) -> InferResult<'tcx, CanonicalVarValues<'tcx>>\n     where\n-        R: Debug + TypeFoldable<'tcx>,\n+        R: Debug + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         debug!(\n             \"query_response_substitution(original_values={:#?}, query_response={:#?})\",\n@@ -401,7 +401,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n     ) -> InferResult<'tcx, CanonicalVarValues<'tcx>>\n     where\n-        R: Debug + TypeFoldable<'tcx>,\n+        R: Debug + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         debug!(\n             \"query_response_substitution_guess(original_values={:#?}, query_response={:#?})\",\n@@ -523,7 +523,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n     ) -> InferResult<'tcx, ()>\n     where\n-        R: Debug + TypeFoldable<'tcx>,\n+        R: Debug + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         // A closure that yields the result value for the given\n         // canonical variable; this is taken from"}, {"sha": "c5c6fc41b9e910eb6406a89d10fdc612973302c5", "filename": "compiler/rustc_infer/src/infer/canonical/substitute.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -16,7 +16,7 @@ pub(super) trait CanonicalExt<'tcx, V> {\n     /// with the value given in `var_values`.\n     fn substitute(&self, tcx: TyCtxt<'tcx>, var_values: &CanonicalVarValues<'tcx>) -> V\n     where\n-        V: TypeFoldable<'tcx>;\n+        V: TypeFoldable<TyCtxt<'tcx>>;\n \n     /// Allows one to apply a substitute to some subset of\n     /// `self.value`. Invoke `projection_fn` with `self.value` to get\n@@ -31,13 +31,13 @@ pub(super) trait CanonicalExt<'tcx, V> {\n         projection_fn: impl FnOnce(&V) -> T,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx>;\n+        T: TypeFoldable<TyCtxt<'tcx>>;\n }\n \n impl<'tcx, V> CanonicalExt<'tcx, V> for Canonical<'tcx, V> {\n     fn substitute(&self, tcx: TyCtxt<'tcx>, var_values: &CanonicalVarValues<'tcx>) -> V\n     where\n-        V: TypeFoldable<'tcx>,\n+        V: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.substitute_projected(tcx, var_values, |value| value.clone())\n     }\n@@ -49,7 +49,7 @@ impl<'tcx, V> CanonicalExt<'tcx, V> for Canonical<'tcx, V> {\n         projection_fn: impl FnOnce(&V) -> T,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         assert_eq!(self.variables.len(), var_values.len());\n         let value = projection_fn(&self.value);\n@@ -66,7 +66,7 @@ pub(super) fn substitute_value<'tcx, T>(\n     value: T,\n ) -> T\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeFoldable<TyCtxt<'tcx>>,\n {\n     if var_values.var_values.is_empty() {\n         value"}, {"sha": "243545640f9f1cc15a136d2b0d0ac285bc838164", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -40,8 +40,8 @@ use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{\n-    self, ir::FallibleTypeFolder, AliasKind, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperFoldable,\n+    self, AliasKind, FallibleTypeFolder, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperFoldable, TypeVisitableExt,\n };\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::{Span, DUMMY_SP};"}, {"sha": "f830e9b3c53fce6870bf6e26f2a08eadd50f450a", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -6,7 +6,7 @@ use super::Subtype;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::TyVar;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n \n use rustc_hir::def_id::DefId;\n "}, {"sha": "95635405f894db8a89c2d4a251d253c179f6dc75", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -72,7 +72,7 @@ use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_middle::ty::relate::{self, RelateResult, TypeRelation};\n use rustc_middle::ty::{\n     self, error::TypeError, List, Region, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n-    TypeVisitable,\n+    TypeVisitable, TypeVisitableExt,\n };\n use rustc_span::{sym, symbol::kw, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n@@ -1450,8 +1450,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         impl<'tcx> OpaqueTypesVisitor<'tcx> {\n             fn visit_expected_found(\n                 tcx: TyCtxt<'tcx>,\n-                expected: impl TypeVisitable<'tcx>,\n-                found: impl TypeVisitable<'tcx>,\n+                expected: impl TypeVisitable<TyCtxt<'tcx>>,\n+                found: impl TypeVisitable<TyCtxt<'tcx>>,\n                 ignore_span: Span,\n             ) -> Self {\n                 let mut types_visitor = OpaqueTypesVisitor {\n@@ -1501,7 +1501,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypesVisitor<'tcx> {\n+        impl<'tcx> ty::visit::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypesVisitor<'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if let Some((kind, def_id)) = TyCategory::from_ty(self.tcx, t) {\n                     let span = self.tcx.def_span(def_id);\n@@ -2206,7 +2206,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     }\n \n     /// Returns a string of the form \"expected `{}`, found `{}`\".\n-    fn expected_found_str<T: fmt::Display + TypeFoldable<'tcx>>(\n+    fn expected_found_str<T: fmt::Display + TypeFoldable<TyCtxt<'tcx>>>(\n         &self,\n         exp_found: ty::error::ExpectedFound<T>,\n     ) -> Option<(DiagnosticStyledString, DiagnosticStyledString, Option<PathBuf>, Option<PathBuf>)>"}, {"sha": "b06ff10d86eb092d08e4c5e01e43e563950f0601", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -17,8 +17,7 @@ use rustc_hir::{\n     TyKind,\n };\n use rustc_middle::ty::{\n-    self, ir::TypeVisitor, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt,\n-    TypeSuperVisitable,\n+    self, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::Span;"}, {"sha": "2875448ee157c173f78a5baafc5edd0ed3a5d0be", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for HighlightBuilder<'tcx> {\n+        impl<'tcx> ty::visit::TypeVisitor<TyCtxt<'tcx>> for HighlightBuilder<'tcx> {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if !r.has_name() && self.counter <= 3 {\n                     self.highlight.highlighting_region(r, self.counter);"}, {"sha": "db4b8af4683e37dd68153668250dfaf197189437", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -143,7 +143,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n     fn includes_region(\n         &self,\n-        ty: Binder<'tcx, impl TypeVisitable<'tcx>>,\n+        ty: Binder<'tcx, impl TypeVisitable<TyCtxt<'tcx>>>,\n         region: ty::BoundRegionKind,\n     ) -> bool {\n         let late_bound_regions = self.tcx().collect_referenced_late_bound_regions(&ty);"}, {"sha": "55dcfd05e0ad38d8df346943dfc903266fb43900", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::traits::{\n     StatementAsExpression,\n };\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self as ty, IsSuggestable, Ty, TypeVisitable};\n+use rustc_middle::ty::{self as ty, IsSuggestable, Ty, TypeVisitableExt};\n use rustc_span::{sym, BytePos, Span};\n \n use crate::errors::{"}, {"sha": "f09f93abf45d6f7488ef241cb923a51ebbbbd5c7", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -33,8 +33,8 @@\n use super::InferCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::infer::unify_key::ToType;\n-use rustc_middle::ty::fold::ir::TypeFolder;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::fold::TypeFolder;\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitableExt};\n use std::collections::hash_map::Entry;\n \n pub struct TypeFreshener<'a, 'tcx> {"}, {"sha": "86c2c2be4a805000a1f9700aa4a088843323db3e", "filename": "compiler/rustc_infer/src/infer/fudge.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::{self, ConstVid, FloatVid, IntVid, RegionVid, Ty, TyCtxt, TyVid};\n \n use super::type_variable::TypeVariableOrigin;\n@@ -98,7 +98,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     pub fn fudge_inference_if_ok<T, E, F>(&self, f: F) -> Result<T, E>\n     where\n         F: FnOnce() -> Result<T, E>,\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let variable_lengths = self.variable_lengths();\n         let (mut fudger, value) = self.probe(|_| {"}, {"sha": "37ef022f8271cad02d6d63b78fe22d171a6c00bf", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -7,7 +7,7 @@ use super::Subtype;\n \n use crate::traits::{ObligationCause, PredicateObligations};\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n \n /// \"Greatest lower bound\" (common subtype)\n pub struct Glb<'combine, 'infcx, 'tcx> {"}, {"sha": "d1897cf24b4a0cc9ffa1c88800561c126ca9e429", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -6,7 +6,7 @@ use super::{HigherRankedType, InferCtxt};\n use crate::infer::CombinedSnapshot;\n use rustc_middle::ty::fold::FnMutDelegate;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::{self, Binder, TypeFoldable};\n+use rustc_middle::ty::{self, Binder, TyCtxt, TypeFoldable};\n \n impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n     /// Checks whether `for<..> sub <: for<..> sup` holds.\n@@ -72,7 +72,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     #[instrument(level = \"debug\", skip(self), ret)]\n     pub fn instantiate_binder_with_placeholders<T>(&self, binder: ty::Binder<'tcx, T>) -> T\n     where\n-        T: TypeFoldable<'tcx> + Copy,\n+        T: TypeFoldable<TyCtxt<'tcx>> + Copy,\n     {\n         if let Some(inner) = binder.no_bound_vars() {\n             return inner;"}, {"sha": "175d02bc3cdc04d475af3391a104f4a58fa24389", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1024,7 +1024,7 @@ impl<'tcx> fmt::Debug for RegionAndOrigin<'tcx> {\n impl<'tcx> LexicalRegionResolutions<'tcx> {\n     fn normalize<T>(&self, tcx: TyCtxt<'tcx>, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         tcx.fold_regions(value, |r, _db| self.resolve_region(tcx, r))\n     }"}, {"sha": "f541fcbceedb36598bceffc50874c0a82c59c58b", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -7,7 +7,7 @@ use super::Subtype;\n \n use crate::traits::{ObligationCause, PredicateObligations};\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n \n /// \"Least upper bound\" (common supertype)\n pub struct Lub<'combine, 'infcx, 'tcx> {"}, {"sha": "cf8007c964dc04dd0f68afaad1bf3d47a989f321", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -26,10 +26,10 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::traits::select;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::BoundVarReplacerDelegate;\n-use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n-use rustc_middle::ty::visit::TypeVisitable;\n+use rustc_middle::ty::visit::{TypeVisitable, TypeVisitableExt};\n pub use rustc_middle::ty::IntVarValue;\n use rustc_middle::ty::{self, GenericParamDefKind, InferConst, InferTy, Ty, TyCtxt};\n use rustc_middle::ty::{ConstVid, FloatVid, IntVid, TyVid};\n@@ -617,7 +617,7 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n         canonical: &Canonical<'tcx, T>,\n     ) -> (InferCtxt<'tcx>, T, CanonicalVarValues<'tcx>)\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let infcx = self.build();\n         let (value, subst) = infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);\n@@ -697,7 +697,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         self.in_snapshot.get()\n     }\n \n-    pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {\n+    pub fn freshen<T: TypeFoldable<TyCtxt<'tcx>>>(&self, t: T) -> T {\n         t.fold_with(&mut self.freshener())\n     }\n \n@@ -1371,7 +1371,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// will be resolving them as well, e.g. in a loop).\n     pub fn shallow_resolve<T>(&self, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         value.fold_with(&mut ShallowResolver { infcx: self })\n     }\n@@ -1388,7 +1388,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// at will.\n     pub fn resolve_vars_if_possible<T>(&self, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         if !value.has_non_region_infer() {\n             return value;\n@@ -1399,7 +1399,7 @@ impl<'tcx> InferCtxt<'tcx> {\n \n     pub fn resolve_numeric_literals_with_default<T>(&self, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         if !value.needs_infer() {\n             return value; // Avoid duplicated subst-folding.\n@@ -1414,7 +1414,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         value: &T,\n     ) -> Option<(ty::Term<'tcx>, Option<Span>)>\n     where\n-        T: TypeVisitable<'tcx>,\n+        T: TypeVisitable<TyCtxt<'tcx>>,\n     {\n         value.visit_with(&mut resolve::UnresolvedTypeOrConstFinder::new(self)).break_value()\n     }\n@@ -1429,7 +1429,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         }\n     }\n \n-    pub fn fully_resolve<T: TypeFoldable<'tcx>>(&self, value: T) -> FixupResult<'tcx, T> {\n+    pub fn fully_resolve<T: TypeFoldable<TyCtxt<'tcx>>>(&self, value: T) -> FixupResult<'tcx, T> {\n         /*!\n          * Attempts to resolve all type/region/const variables in\n          * `value`. Region inference must have been run already (e.g.,\n@@ -1462,7 +1462,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         value: ty::Binder<'tcx, T>,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx> + Copy,\n+        T: TypeFoldable<TyCtxt<'tcx>> + Copy,\n     {\n         if let Some(inner) = value.no_bound_vars() {\n             return inner;"}, {"sha": "214a5850fb6b260d06eb6c0924636a508f6da6dd", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -29,7 +29,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitableExt, TypeVisitor};\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n use rustc_span::{Span, Symbol};\n use std::fmt::Debug;\n@@ -797,7 +797,7 @@ struct ScopeInstantiator<'me, 'tcx> {\n }\n \n impl<'me, 'tcx> TypeVisitor<TyCtxt<'tcx>> for ScopeInstantiator<'me, 'tcx> {\n-    fn visit_binder<T: TypeVisitable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {"}, {"sha": "d5c824d4c41c8e654ba35acc602b19826bf1003b", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -12,8 +12,8 @@ use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::GenericArgKind;\n use rustc_middle::ty::{\n-    self, ir::TypeVisitor, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperVisitable, TypeVisitable,\n+    self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n+    TypeVisitable, TypeVisitableExt, TypeVisitor,\n };\n use rustc_span::Span;\n \n@@ -45,7 +45,7 @@ pub struct OpaqueTypeDecl<'tcx> {\n impl<'tcx> InferCtxt<'tcx> {\n     /// This is a backwards compatibility hack to prevent breaking changes from\n     /// lazy TAIT around RPIT handling.\n-    pub fn replace_opaque_types_with_inference_vars<T: TypeFoldable<'tcx>>(\n+    pub fn replace_opaque_types_with_inference_vars<T: TypeFoldable<TyCtxt<'tcx>>>(\n         &self,\n         value: T,\n         body_id: LocalDefId,\n@@ -427,7 +427,7 @@ impl<'tcx, OP> TypeVisitor<TyCtxt<'tcx>> for ConstrainOpaqueTypeRegionVisitor<'t\n where\n     OP: FnMut(ty::Region<'tcx>),\n {\n-    fn visit_binder<T: TypeVisitable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {"}, {"sha": "ff23087fe8d8aae4d4582d4424068f0e6e5d625a", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -4,7 +4,7 @@\n \n use rustc_data_structures::sso::SsoHashSet;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n use smallvec::{smallvec, SmallVec};\n \n #[derive(Debug)]"}, {"sha": "bbe7d4c63f7947937c8ba37015410e4e3bc17f60", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -69,7 +69,7 @@ use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{self, Region, SubstsRef, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Region, SubstsRef, Ty, TyCtxt, TypeVisitableExt};\n use smallvec::smallvec;\n \n impl<'tcx> InferCtxt<'tcx> {"}, {"sha": "3c6cc2b90010f664f9d427b687f20f06ad49c41d", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,7 +1,7 @@\n use std::collections::hash_map::Entry;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_middle::ty::{\n     self,\n     error::TypeError,"}, {"sha": "5bb35832930bf88c86170c3ec1807ff4be774b22", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,11 +1,8 @@\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::{FixupError, FixupResult, InferCtxt, Span};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::ty::fold::{\n-    ir::{FallibleTypeFolder, TypeFolder},\n-    TypeSuperFoldable,\n-};\n-use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable};\n+use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitableExt, TypeVisitor};\n use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable};\n \n use std::ops::ControlFlow;\n@@ -200,7 +197,7 @@ impl<'a, 'tcx> TypeVisitor<TyCtxt<'tcx>> for UnresolvedTypeOrConstFinder<'a, 'tc\n /// then an `Err` result is returned.\n pub fn fully_resolve<'tcx, T>(infcx: &InferCtxt<'tcx>, value: T) -> FixupResult<'tcx, T>\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeFoldable<TyCtxt<'tcx>>,\n {\n     value.try_fold_with(&mut FullTypeResolver { infcx })\n }"}, {"sha": "b4e647dcc9bf541bf21d364a927a67bbc67a413a", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -3,7 +3,7 @@ use super::{ObligationEmittingRelation, SubregionOrigin};\n \n use crate::traits::{Obligation, PredicateObligations};\n use rustc_middle::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::visit::TypeVisitable;\n+use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::TyVar;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use std::mem;"}, {"sha": "3a5273b0359e4a1aa01a5571f95ab98f8adf69b5", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -2,7 +2,7 @@ use crate::traits;\n use crate::traits::project::Normalized;\n use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable};\n use rustc_middle::ty::visit::{TypeVisitable, TypeVisitor};\n-use rustc_middle::ty::{self, ir, TyCtxt};\n+use rustc_middle::ty::{self, TyCtxt};\n \n use std::fmt;\n use std::ops::ControlFlow;\n@@ -61,8 +61,13 @@ impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // TypeFoldable implementations.\n \n-impl<'tcx, O: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for traits::Obligation<'tcx, O> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx, O: TypeFoldable<TyCtxt<'tcx>>> TypeFoldable<TyCtxt<'tcx>>\n+    for traits::Obligation<'tcx, O>\n+{\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         Ok(traits::Obligation {\n             cause: self.cause,\n             recursion_depth: self.recursion_depth,\n@@ -72,8 +77,10 @@ impl<'tcx, O: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for traits::Obl\n     }\n }\n \n-impl<'tcx, O: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for traits::Obligation<'tcx, O> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<'tcx, O: TypeVisitable<TyCtxt<'tcx>>> TypeVisitable<TyCtxt<'tcx>>\n+    for traits::Obligation<'tcx, O>\n+{\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.predicate.visit_with(visitor)?;\n         self.param_env.visit_with(visitor)\n     }"}, {"sha": "4da7f3f502f12422f1166e53fd12664867097100", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1584,7 +1584,7 @@ declare_lint_pass!(\n \n impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n-        use rustc_middle::ty::visit::TypeVisitable;\n+        use rustc_middle::ty::visit::TypeVisitableExt;\n         use rustc_middle::ty::Clause;\n         use rustc_middle::ty::PredicateKind::*;\n "}, {"sha": "f1ba192f2bcc02e6c026720a95df4dd6304a12ed", "filename": "compiler/rustc_lint/src/enum_intrinsics_non_enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -4,7 +4,7 @@ use crate::{\n     LateContext, LateLintPass,\n };\n use rustc_hir as hir;\n-use rustc_middle::ty::{visit::TypeVisitable, Ty};\n+use rustc_middle::ty::{visit::TypeVisitableExt, Ty};\n use rustc_span::{symbol::sym, Span};\n \n declare_lint! {"}, {"sha": "85958c4170569574ddc786191fcd13224dac2d3c", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -16,7 +16,9 @@ use rustc_hir as hir;\n use rustc_hir::{is_range_literal, Expr, ExprKind, Node};\n use rustc_middle::ty::layout::{IntegerExt, LayoutOf, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::{\n+    self, AdtKind, DefIdTree, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n+};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n@@ -1147,7 +1149,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n         struct ProhibitOpaqueTypes;\n-        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for ProhibitOpaqueTypes {\n+        impl<'tcx> ty::visit::TypeVisitor<TyCtxt<'tcx>> for ProhibitOpaqueTypes {\n             type BreakTy = Ty<'tcx>;\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "388e254cd64530fe82b7cd9f043c7a59957fa360", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -37,16 +37,16 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n                 bind.to_token_stream()\n             } else {\n                 quote! {\n-                    ::rustc_middle::ty::fold::ir::TypeFoldable::try_fold_with(#bind, __folder)?\n+                    ::rustc_middle::ty::fold::TypeFoldable::try_fold_with(#bind, __folder)?\n                 }\n             }\n         })\n     });\n \n     s.bound_impl(\n-        quote!(::rustc_middle::ty::fold::ir::TypeFoldable<::rustc_middle::ty::TyCtxt<'tcx>>),\n+        quote!(::rustc_middle::ty::fold::TypeFoldable<::rustc_middle::ty::TyCtxt<'tcx>>),\n         quote! {\n-            fn try_fold_with<__F: ::rustc_middle::ty::fold::FallibleTypeFolder<'tcx>>(\n+            fn try_fold_with<__F: ::rustc_middle::ty::fold::FallibleTypeFolder<::rustc_middle::ty::TyCtxt<'tcx>>>(\n                 self,\n                 __folder: &mut __F\n             ) -> Result<Self, __F::Error> {"}, {"sha": "f6f4c4779c302e48a7cad8ffa720a5bd413226d3", "filename": "compiler/rustc_macros/src/type_visitable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -30,15 +30,15 @@ pub fn type_visitable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2:\n     s.add_bounds(synstructure::AddBounds::Generics);\n     let body_visit = s.each(|bind| {\n         quote! {\n-            ::rustc_middle::ty::visit::ir::TypeVisitable::visit_with(#bind, __visitor)?;\n+            ::rustc_middle::ty::visit::TypeVisitable::visit_with(#bind, __visitor)?;\n         }\n     });\n     s.bind_with(|_| synstructure::BindStyle::Move);\n \n     s.bound_impl(\n-        quote!(::rustc_middle::ty::visit::ir::TypeVisitable<::rustc_middle::ty::TyCtxt<'tcx>>),\n+        quote!(::rustc_middle::ty::visit::TypeVisitable<::rustc_middle::ty::TyCtxt<'tcx>>),\n         quote! {\n-            fn visit_with<__V: ::rustc_middle::ty::visit::TypeVisitor<'tcx>>(\n+            fn visit_with<__V: ::rustc_middle::ty::visit::TypeVisitor<::rustc_middle::ty::TyCtxt<'tcx>>>(\n                 &self,\n                 __visitor: &mut __V\n             ) -> ::std::ops::ControlFlow<__V::BreakTy> {"}, {"sha": "e134ef8489c77f84656ed7aaf2998314528faf1f", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -42,8 +42,8 @@ pub struct Canonical<'tcx, V> {\n \n pub type CanonicalVarInfos<'tcx> = &'tcx List<CanonicalVarInfo<'tcx>>;\n \n-impl<'tcx> ty::ir::TypeFoldable<TyCtxt<'tcx>> for CanonicalVarInfos<'tcx> {\n-    fn try_fold_with<F: ty::FallibleTypeFolder<'tcx>>(\n+impl<'tcx> ty::TypeFoldable<TyCtxt<'tcx>> for CanonicalVarInfos<'tcx> {\n+    fn try_fold_with<F: ty::FallibleTypeFolder<TyCtxt<'tcx>>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {"}, {"sha": "a8d71ce030c2a230f61dd33848a496b4e5c78201", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -69,26 +69,26 @@ macro_rules! CloneLiftImpls {\n macro_rules! TrivialTypeTraversalImpls {\n     (for <$tcx:lifetime> { $($ty:ty,)+ }) => {\n         $(\n-            impl<$tcx> $crate::ty::fold::ir::TypeFoldable<$crate::ty::TyCtxt<$tcx>> for $ty {\n-                fn try_fold_with<F: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n+            impl<$tcx> $crate::ty::fold::TypeFoldable<$crate::ty::TyCtxt<$tcx>> for $ty {\n+                fn try_fold_with<F: $crate::ty::fold::FallibleTypeFolder<$crate::ty::TyCtxt<$tcx>>>(\n                     self,\n                     _: &mut F,\n                 ) -> ::std::result::Result<Self, F::Error> {\n                     Ok(self)\n                 }\n \n                 #[inline]\n-                fn fold_with<F: $crate::ty::fold::TypeFolder<$tcx>>(\n+                fn fold_with<F: $crate::ty::fold::TypeFolder<$crate::ty::TyCtxt<$tcx>>>(\n                     self,\n                     _: &mut F,\n                 ) -> Self {\n                     self\n                 }\n             }\n \n-            impl<$tcx> $crate::ty::visit::ir::TypeVisitable<$crate::ty::TyCtxt<$tcx>> for $ty {\n+            impl<$tcx> $crate::ty::visit::TypeVisitable<$crate::ty::TyCtxt<$tcx>> for $ty {\n                 #[inline]\n-                fn visit_with<F: $crate::ty::visit::TypeVisitor<$tcx>>(\n+                fn visit_with<F: $crate::ty::visit::TypeVisitor<$crate::ty::TyCtxt<$tcx>>>(\n                     &self,\n                     _: &mut F)\n                     -> ::std::ops::ControlFlow<F::BreakTy>"}, {"sha": "856d821a5cf1452473575395b27592da2f6cc99b", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -2,7 +2,7 @@ use super::{ErrorHandled, EvalToConstValueResult, EvalToValTreeResult, GlobalId}\n \n use crate::mir;\n use crate::ty::subst::InternalSubsts;\n-use crate::ty::visit::TypeVisitable;\n+use crate::ty::visit::TypeVisitableExt;\n use crate::ty::{self, query::TyCtxtAt, query::TyCtxtEnsure, TyCtxt};\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;"}, {"sha": "ccd8a333866935d6027bb476bee98724e0449ec4", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -7,10 +7,10 @@ use crate::mir::interpret::{\n };\n use crate::mir::visit::MirVisitable;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{ir::TypeFoldable, FallibleTypeFolder};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFoldable};\n use crate::ty::print::{FmtPrinter, Printer};\n-use crate::ty::visit::{TypeVisitable, TypeVisitor};\n-use crate::ty::{self, ir, DefIdTree, List, Ty, TyCtxt};\n+use crate::ty::visit::{TypeVisitable, TypeVisitableExt, TypeVisitor};\n+use crate::ty::{self, DefIdTree, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, ScalarInt, UserTypeAnnotationIndex};\n use crate::ty::{GenericArg, InternalSubsts, SubstsRef};\n \n@@ -2755,16 +2755,22 @@ impl UserTypeProjection {\n }\n \n impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for UserTypeProjection {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         Ok(UserTypeProjection {\n             base: self.base.try_fold_with(folder)?,\n             projs: self.projs.try_fold_with(folder)?,\n         })\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for UserTypeProjection {\n-    fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for UserTypeProjection {\n+    fn visit_with<Vs: TypeVisitor<TyCtxt<'tcx>>>(\n+        &self,\n+        visitor: &mut Vs,\n+    ) -> ControlFlow<Vs::BreakTy> {\n         self.base.visit_with(visitor)\n         // Note: there's nothing in `self.proj` to visit.\n     }"}, {"sha": "d0936d950b361ce43bf1566153f1cf54fb4481bb", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -31,19 +31,28 @@ TrivialTypeTraversalImpls! {\n }\n \n impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx [InlineAsmTemplatePiece] {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        _folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx [Span] {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        _folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<PlaceElem<'tcx>> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_place_elems(v))\n     }\n }"}, {"sha": "c4f8718754f5f0ec40a3c67830655047a604602e", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -14,7 +14,7 @@ use rustc_span::source_map::Span;\n \n pub mod type_op {\n     use crate::ty::fold::TypeFoldable;\n-    use crate::ty::{Predicate, Ty, UserType};\n+    use crate::ty::{Predicate, Ty, TyCtxt, UserType};\n     use std::fmt;\n \n     #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, Lift)]\n@@ -64,7 +64,7 @@ pub mod type_op {\n \n     impl<'tcx, T> Normalize<T>\n     where\n-        T: fmt::Debug + TypeFoldable<'tcx>,\n+        T: fmt::Debug + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         pub fn new(value: T) -> Self {\n             Self { value }"}, {"sha": "aadbce9e2ff3f9b6517a23b3d717b1ec6798228b", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -3,8 +3,7 @@ use std::ops::ControlFlow;\n use rustc_data_structures::intern::Interned;\n \n use crate::ty::{\n-    ir::{self, TypeFoldable, TypeVisitable},\n-    FallibleTypeFolder, Ty, TyCtxt, TypeFolder, TypeVisitor,\n+    FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeVisitable, TypeVisitor,\n };\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n@@ -27,8 +26,11 @@ pub struct ExternalConstraintsData<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ExternalConstraints<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        Ok(ir::FallibleTypeFolder::interner(folder).intern_external_constraints(\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n+        Ok(FallibleTypeFolder::interner(folder).intern_external_constraints(\n             ExternalConstraintsData {\n                 regions: (),\n                 opaque_types: self\n@@ -40,16 +42,16 @@ impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ExternalConstraints<'tcx> {\n         ))\n     }\n \n-    fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        ir::TypeFolder::interner(folder).intern_external_constraints(ExternalConstraintsData {\n+    fn fold_with<F: TypeFolder<TyCtxt<'tcx>>>(self, folder: &mut F) -> Self {\n+        TypeFolder::interner(folder).intern_external_constraints(ExternalConstraintsData {\n             regions: (),\n             opaque_types: self.opaque_types.iter().map(|opaque| opaque.fold_with(folder)).collect(),\n         })\n     }\n }\n \n impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for ExternalConstraints<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(\n         &self,\n         visitor: &mut V,\n     ) -> std::ops::ControlFlow<V::BreakTy> {"}, {"sha": "c016f7227509969128cbebe4d1bf470bfedeb22a", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,6 +1,6 @@\n use crate::error::StrictCoherenceNeedsNegativeCoherence;\n use crate::ty::fast_reject::SimplifiedType;\n-use crate::ty::visit::TypeVisitable;\n+use crate::ty::visit::TypeVisitableExt;\n use crate::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::ErrorGuaranteed;"}, {"sha": "f889ce82706b388989165a3da46847ad7a433cef", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,6 +1,7 @@\n //! A subset of a mir body used for const evaluatability checking.\n use crate::ty::{\n-    self, ir::TypeFolder, Const, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n+    self, Const, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n+    TypeVisitableExt,\n };\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n@@ -47,7 +48,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         Ok(ac?.map(|ac| EarlyBinder(ac)))\n     }\n \n-    pub fn expand_abstract_consts<T: TypeFoldable<'tcx>>(self, ac: T) -> T {\n+    pub fn expand_abstract_consts<T: TypeFoldable<TyCtxt<'tcx>>>(self, ac: T) -> T {\n         struct Expander<'tcx> {\n             tcx: TyCtxt<'tcx>,\n         }"}, {"sha": "560caa041a70250434e78586466cc3399fe28347", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -4,7 +4,7 @@ use crate::mir::interpret::{AllocId, ConstValue, Scalar};\n use crate::ty::abstract_const::CastKind;\n use crate::ty::subst::{InternalSubsts, SubstsRef};\n use crate::ty::ParamEnv;\n-use crate::ty::{self, List, Ty, TyCtxt, TypeVisitable};\n+use crate::ty::{self, List, Ty, TyCtxt, TypeVisitableExt};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;"}, {"sha": "e894e1aaf3695d4a973bef27d09a2a677b25d611", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -3,10 +3,9 @@\n use std::ops::ControlFlow;\n \n use crate::ty::{\n-    ir::{FallibleTypeFolder, TypeVisitor},\n-    visit::TypeVisitable,\n-    AliasTy, Const, ConstKind, DefIdTree, InferConst, InferTy, Opaque, PolyTraitPredicate,\n-    Projection, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeSuperVisitable,\n+    AliasTy, Const, ConstKind, DefIdTree, FallibleTypeFolder, InferConst, InferTy, Opaque,\n+    PolyTraitPredicate, Projection, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n+    TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -95,7 +94,7 @@ pub trait IsSuggestable<'tcx>: Sized {\n \n impl<'tcx, T> IsSuggestable<'tcx> for T\n where\n-    T: TypeVisitable<'tcx> + TypeFoldable<'tcx>,\n+    T: TypeVisitable<TyCtxt<'tcx>> + TypeFoldable<TyCtxt<'tcx>>,\n {\n     fn is_suggestable(self, tcx: TyCtxt<'tcx>, infer_suggestable: bool) -> bool {\n         self.visit_with(&mut IsSuggestableVisitor { tcx, infer_suggestable }).is_continue()"}, {"sha": "38377324832448d2990d8b7d83aafcb5f05ed227", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,5 +1,5 @@\n-use crate::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n-use crate::ty::{self, Ty, TyCtxt, TypeFlags};\n+use crate::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use crate::ty::{self, Ty, TyCtxt, TypeFlags, TypeVisitableExt};\n \n pub(super) fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { erase_regions_ty, ..*providers };\n@@ -17,7 +17,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// subtyping, but they are anonymized and normalized as well)..\n     pub fn erase_regions<T>(self, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         // If there's nothing to erase avoid performing the query at all\n         if !value.has_type_flags(TypeFlags::HAS_LATE_BOUND | TypeFlags::HAS_FREE_REGIONS) {\n@@ -45,7 +45,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for RegionEraserVisitor<'tcx> {\n \n     fn fold_binder<T>(&mut self, t: ty::Binder<'tcx, T>) -> ty::Binder<'tcx, T>\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let u = self.tcx.anonymize_bound_vars(t);\n         u.super_fold_with(self)"}, {"sha": "59deade0a0714ed01e0dfb538bd066d6dbc9dee9", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,6 +1,6 @@\n use crate::mir::Mutability;\n use crate::ty::subst::GenericArgKind;\n-use crate::ty::{self, Ty, TyCtxt, TypeVisitable};\n+use crate::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n use rustc_hir::def_id::DefId;\n use std::fmt::Debug;\n use std::hash::Hash;"}, {"sha": "e8a73832ce4c02a2191bae7e1627d6632aab7c3a", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 20, "deletions": 29, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,19 +1,10 @@\n-use crate::ty::{self, Binder, BoundTy, Ty, TyCtxt, TypeVisitable};\n+use crate::ty::{self, Binder, BoundTy, Ty, TyCtxt, TypeVisitableExt};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::DefId;\n \n use std::collections::BTreeMap;\n \n-pub trait TypeFoldable<'tcx> = ir::TypeFoldable<TyCtxt<'tcx>> + TypeVisitable<'tcx>;\n-pub trait TypeSuperFoldable<'tcx> = ir::TypeSuperFoldable<TyCtxt<'tcx>>;\n-pub trait TypeFolder<'tcx> = ir::TypeFolder<TyCtxt<'tcx>>;\n-pub trait FallibleTypeFolder<'tcx> = ir::FallibleTypeFolder<TyCtxt<'tcx>>;\n-\n-pub mod ir {\n-    pub use rustc_type_ir::fold::{\n-        FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable,\n-    };\n-}\n+pub use rustc_type_ir::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n \n ///////////////////////////////////////////////////////////////////////////\n // Some sample folders\n@@ -30,7 +21,7 @@ where\n     pub ct_op: H,\n }\n \n-impl<'tcx, F, G, H> ir::TypeFolder<TyCtxt<'tcx>> for BottomUpFolder<'tcx, F, G, H>\n+impl<'tcx, F, G, H> TypeFolder<TyCtxt<'tcx>> for BottomUpFolder<'tcx, F, G, H>\n where\n     F: FnMut(Ty<'tcx>) -> Ty<'tcx>,\n     G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,\n@@ -69,7 +60,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         mut f: impl FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         value.fold_with(&mut RegionFolder::new(self, &mut f))\n     }\n@@ -80,7 +71,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         mut f: impl FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n     ) -> T\n     where\n-        T: TypeSuperFoldable<'tcx>,\n+        T: TypeSuperFoldable<TyCtxt<'tcx>>,\n     {\n         value.super_fold_with(&mut RegionFolder::new(self, &mut f))\n     }\n@@ -120,12 +111,12 @@ impl<'a, 'tcx> RegionFolder<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> ir::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n     fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(\n+    fn fold_binder<T: TypeFoldable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,\n     ) -> ty::Binder<'tcx, T> {\n@@ -194,15 +185,15 @@ impl<'tcx, D: BoundVarReplacerDelegate<'tcx>> BoundVarReplacer<'tcx, D> {\n     }\n }\n \n-impl<'tcx, D> ir::TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'tcx, D>\n+impl<'tcx, D> TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'tcx, D>\n where\n     D: BoundVarReplacerDelegate<'tcx>,\n {\n     fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(\n+    fn fold_binder<T: TypeFoldable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,\n     ) -> ty::Binder<'tcx, T> {\n@@ -280,7 +271,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n     where\n         F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let mut region_map = BTreeMap::new();\n         let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));\n@@ -295,7 +286,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> T\n     where\n         F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let value = value.skip_binder();\n         if !value.has_escaping_bound_vars() {\n@@ -314,7 +305,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping\n     /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`\n     /// closure replaces escaping bound consts.\n-    pub fn replace_escaping_bound_vars_uncached<T: TypeFoldable<'tcx>>(\n+    pub fn replace_escaping_bound_vars_uncached<T: TypeFoldable<TyCtxt<'tcx>>>(\n         self,\n         value: T,\n         delegate: impl BoundVarReplacerDelegate<'tcx>,\n@@ -330,7 +321,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Replaces all types or regions bound by the given `Binder`. The `fld_r`\n     /// closure replaces bound regions, the `fld_t` closure replaces bound\n     /// types, and `fld_c` replaces bound constants.\n-    pub fn replace_bound_vars_uncached<T: TypeFoldable<'tcx>>(\n+    pub fn replace_bound_vars_uncached<T: TypeFoldable<TyCtxt<'tcx>>>(\n         self,\n         value: Binder<'tcx, T>,\n         delegate: impl BoundVarReplacerDelegate<'tcx>,\n@@ -346,7 +337,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         value: ty::Binder<'tcx, T>,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.replace_late_bound_regions_uncached(value, |br| {\n             self.mk_re_free(all_outlive_scope, br.kind)\n@@ -355,7 +346,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let shift_bv = |bv: ty::BoundVar| ty::BoundVar::from_usize(bv.as_usize() + bound_vars);\n         self.replace_escaping_bound_vars_uncached(\n@@ -381,15 +372,15 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// method lookup and a few other places where precise region relationships are not required.\n     pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0\n     }\n \n     /// Anonymize all bound variables in `value`, this is mostly used to improve caching.\n     pub fn anonymize_bound_vars<T>(self, value: Binder<'tcx, T>) -> Binder<'tcx, T>\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         struct Anonymize<'a, 'tcx> {\n             tcx: TyCtxt<'tcx>,\n@@ -457,12 +448,12 @@ impl<'tcx> Shifter<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFolder<TyCtxt<'tcx>> for Shifter<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Shifter<'tcx> {\n     fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(\n+    fn fold_binder<T: TypeFoldable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,\n     ) -> ty::Binder<'tcx, T> {\n@@ -525,7 +516,7 @@ pub fn shift_region<'tcx>(\n \n pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeFoldable<TyCtxt<'tcx>>,\n {\n     debug!(\"shift_vars(value={:?}, amount={})\", value, amount);\n "}, {"sha": "d07fa0e546f3410fc1b62822eadb747a88ad4f5b", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,7 +1,7 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n-use crate::ty::{EarlyBinder, InternalSubsts, SubstsRef};\n+use crate::ty::{EarlyBinder, InternalSubsts, SubstsRef, TypeVisitableExt};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};\n@@ -589,7 +589,7 @@ impl<'tcx> Instance<'tcx> {\n \n     pub fn subst_mir<T>(&self, tcx: TyCtxt<'tcx>, v: &T) -> T\n     where\n-        T: TypeFoldable<'tcx> + Copy,\n+        T: TypeFoldable<TyCtxt<'tcx>> + Copy,\n     {\n         if let Some(substs) = self.substs_for_mir_body() {\n             EarlyBinder(*v).subst(tcx, substs)\n@@ -606,7 +606,7 @@ impl<'tcx> Instance<'tcx> {\n         v: T,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx> + Clone,\n+        T: TypeFoldable<TyCtxt<'tcx>> + Clone,\n     {\n         if let Some(substs) = self.substs_for_mir_body() {\n             tcx.subst_and_normalize_erasing_regions(substs, param_env, v)\n@@ -623,7 +623,7 @@ impl<'tcx> Instance<'tcx> {\n         v: T,\n     ) -> Result<T, NormalizationError<'tcx>>\n     where\n-        T: TypeFoldable<'tcx> + Clone,\n+        T: TypeFoldable<TyCtxt<'tcx>> + Clone,\n     {\n         if let Some(substs) = self.substs_for_mir_body() {\n             tcx.try_subst_and_normalize_erasing_regions(substs, param_env, v)\n@@ -674,7 +674,7 @@ fn polymorphize<'tcx>(\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl<'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for PolymorphizationFolder<'tcx> {\n+    impl<'tcx> ty::TypeFolder<TyCtxt<'tcx>> for PolymorphizationFolder<'tcx> {\n         fn interner(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }"}, {"sha": "146803df02bcdbe5380ece625cfd782c87d3a323", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,7 +1,7 @@\n use crate::fluent_generated as fluent;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::normalize_erasing_regions::NormalizationError;\n-use crate::ty::{self, ReprOptions, Ty, TyCtxt, TypeVisitable};\n+use crate::ty::{self, ReprOptions, Ty, TyCtxt, TypeVisitableExt};\n use rustc_errors::{DiagnosticBuilder, Handler, IntoDiagnostic};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -1121,13 +1121,6 @@ impl From<call::AdjustForForeignAbiError> for FnAbiError<'_> {\n \n impl<'tcx> fmt::Display for FnAbiError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        #[cfg(bootstrap)]\n-        match self {\n-            Self::Layout(err) => fmt::Display::fmt(err, f),\n-            Self::AdjustForForeignAbi(err) => fmt::Display::fmt(err, f),\n-        }\n-\n-        #[cfg(not(bootstrap))]\n         match self {\n             Self::Layout(err) => err.fmt(f),\n             Self::AdjustForForeignAbi(err) => err.fmt(f),"}, {"sha": "7dcc3ff4e7b3394b7cd13ad665edf763f8a7923a", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -12,7 +12,7 @@\n #![allow(rustc::usage_of_ty_tykind)]\n \n pub use self::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n-pub use self::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+pub use self::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitableExt, TypeVisitor};\n pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n@@ -145,10 +145,6 @@ mod structural_impls;\n mod sty;\n mod typeck_results;\n \n-pub mod ir {\n-    pub use super::{fold::ir::*, visit::ir::*};\n-}\n-\n // Data types\n \n pub type RegisteredTools = FxHashSet<Ident>;\n@@ -921,14 +917,17 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Term<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for Term<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for Term<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         Ok(self.unpack().try_fold_with(folder)?.pack())\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for Term<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for Term<'tcx> {\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.unpack().visit_with(visitor)\n     }\n }\n@@ -1626,8 +1625,8 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ParamEnv<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ParamEnv<'tcx> {\n-    fn try_fold_with<F: ty::fold::FallibleTypeFolder<'tcx>>(\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ParamEnv<'tcx> {\n+    fn try_fold_with<F: ty::fold::FallibleTypeFolder<TyCtxt<'tcx>>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -1639,8 +1638,8 @@ impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ParamEnv<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ParamEnv<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for ParamEnv<'tcx> {\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.caller_bounds().visit_with(visitor)?;\n         self.reveal().visit_with(visitor)\n     }\n@@ -1765,7 +1764,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// `where Box<u32>: Copy`, which are clearly never\n     /// satisfiable. We generally want to behave as if they were true,\n     /// although the surrounding function is never reachable.\n-    pub fn and<T: TypeVisitable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {\n+    pub fn and<T: TypeVisitable<TyCtxt<'tcx>>>(self, value: T) -> ParamEnvAnd<'tcx, T> {\n         match self.reveal() {\n             Reveal::UserFacing => ParamEnvAnd { param_env: self, value },\n "}, {"sha": "57c8f3075b0011ca253cc298fae10a3684fedb05", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -9,11 +9,8 @@\n \n use crate::mir;\n use crate::traits::query::NoSolution;\n-use crate::ty::fold::{\n-    ir::{FallibleTypeFolder, TypeFolder},\n-    TypeFoldable,\n-};\n-use crate::ty::{self, EarlyBinder, SubstsRef, Ty, TyCtxt};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder};\n+use crate::ty::{self, EarlyBinder, SubstsRef, Ty, TyCtxt, TypeVisitableExt};\n \n #[derive(Debug, Copy, Clone, HashStable, TyEncodable, TyDecodable)]\n pub enum NormalizationError<'tcx> {\n@@ -41,7 +38,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[tracing::instrument(level = \"debug\", skip(self, param_env))]\n     pub fn normalize_erasing_regions<T>(self, param_env: ty::ParamEnv<'tcx>, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         debug!(\n             \"normalize_erasing_regions::<{}>(value={:?}, param_env={:?})\",\n@@ -73,7 +70,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         value: T,\n     ) -> Result<T, NormalizationError<'tcx>>\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         debug!(\n             \"try_normalize_erasing_regions::<{}>(value={:?}, param_env={:?})\",\n@@ -110,7 +107,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         value: ty::Binder<'tcx, T>,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let value = self.erase_late_bound_regions(value);\n         self.normalize_erasing_regions(param_env, value)\n@@ -130,7 +127,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         value: ty::Binder<'tcx, T>,\n     ) -> Result<T, NormalizationError<'tcx>>\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let value = self.erase_late_bound_regions(value);\n         self.try_normalize_erasing_regions(param_env, value)\n@@ -148,7 +145,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         value: T,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         debug!(\n             \"subst_and_normalize_erasing_regions(\\\n@@ -172,7 +169,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         value: T,\n     ) -> Result<T, NormalizationError<'tcx>>\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         debug!(\n             \"subst_and_normalize_erasing_regions(\\"}, {"sha": "195bd8a381809334fe562b741c99edde47902d23", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,9 +1,7 @@\n use crate::error::ConstNotUsedTraitAlias;\n-use crate::ty::fold::{ir::TypeFolder, TypeSuperFoldable};\n+use crate::ty::fold::{TypeFolder, TypeSuperFoldable};\n use crate::ty::subst::{GenericArg, GenericArgKind};\n-#[cfg(not(bootstrap))]\n-use crate::ty::TypeFoldable;\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_span::def_id::DefId;\n use rustc_span::Span;"}, {"sha": "6a053c368d8eccea70ee869e62f17d4c1c42fdb0", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,7 +1,7 @@\n use crate::mir::interpret::{AllocRange, GlobalAlloc, Pointer, Provenance, Scalar};\n use crate::ty::{\n     self, ConstInt, DefIdTree, ParamConst, ScalarInt, Term, TermKind, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperFoldable, TypeSuperVisitable, TypeVisitable,\n+    TypeSuperFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n };\n use crate::ty::{GenericArg, GenericArgKind};\n use rustc_apfloat::ieee::{Double, Single};\n@@ -225,7 +225,7 @@ pub trait PrettyPrinter<'tcx>:\n \n     fn in_binder<T>(self, value: &ty::Binder<'tcx, T>) -> Result<Self, Self::Error>\n     where\n-        T: Print<'tcx, Self, Output = Self, Error = Self::Error> + TypeFoldable<'tcx>,\n+        T: Print<'tcx, Self, Output = Self, Error = Self::Error> + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         value.as_ref().skip_binder().print(self)\n     }\n@@ -236,7 +236,7 @@ pub trait PrettyPrinter<'tcx>:\n         f: F,\n     ) -> Result<Self, Self::Error>\n     where\n-        T: Print<'tcx, Self, Output = Self, Error = Self::Error> + TypeFoldable<'tcx>,\n+        T: Print<'tcx, Self, Output = Self, Error = Self::Error> + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         f(value.as_ref().skip_binder(), self)\n     }\n@@ -2033,7 +2033,7 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n \n     fn in_binder<T>(self, value: &ty::Binder<'tcx, T>) -> Result<Self, Self::Error>\n     where\n-        T: Print<'tcx, Self, Output = Self, Error = Self::Error> + TypeFoldable<'tcx>,\n+        T: Print<'tcx, Self, Output = Self, Error = Self::Error> + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.pretty_in_binder(value)\n     }\n@@ -2044,7 +2044,7 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n         f: C,\n     ) -> Result<Self, Self::Error>\n     where\n-        T: Print<'tcx, Self, Output = Self, Error = Self::Error> + TypeFoldable<'tcx>,\n+        T: Print<'tcx, Self, Output = Self, Error = Self::Error> + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.pretty_wrap_binder(value, f)\n     }\n@@ -2224,12 +2224,12 @@ struct RegionFolder<'a, 'tcx> {\n             ),\n }\n \n-impl<'a, 'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n+impl<'a, 'tcx> ty::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n     fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(\n+    fn fold_binder<T: TypeFoldable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,\n     ) -> ty::Binder<'tcx, T> {\n@@ -2289,7 +2289,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n         value: &ty::Binder<'tcx, T>,\n     ) -> Result<(Self, T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>), fmt::Error>\n     where\n-        T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n+        T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         fn name_by_region_index(\n             index: usize,\n@@ -2452,7 +2452,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n \n     pub fn pretty_in_binder<T>(self, value: &ty::Binder<'tcx, T>) -> Result<Self, fmt::Error>\n     where\n-        T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n+        T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let old_region_index = self.region_index;\n         let (new, new_value, _) = self.name_all_regions(value)?;\n@@ -2468,7 +2468,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n         f: C,\n     ) -> Result<Self, fmt::Error>\n     where\n-        T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n+        T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<TyCtxt<'tcx>>,\n     {\n         let old_region_index = self.region_index;\n         let (new, new_value, _) = self.name_all_regions(value)?;\n@@ -2480,7 +2480,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n \n     fn prepare_region_info<T>(&mut self, value: &ty::Binder<'tcx, T>)\n     where\n-        T: TypeVisitable<'tcx>,\n+        T: TypeVisitable<TyCtxt<'tcx>>,\n     {\n         struct RegionNameCollector<'tcx> {\n             used_region_names: FxHashSet<Symbol>,\n@@ -2496,7 +2496,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for RegionNameCollector<'tcx> {\n+        impl<'tcx> ty::visit::TypeVisitor<TyCtxt<'tcx>> for RegionNameCollector<'tcx> {\n             type BreakTy = ();\n \n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -2533,7 +2533,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n \n impl<'tcx, T, P: PrettyPrinter<'tcx>> Print<'tcx, P> for ty::Binder<'tcx, T>\n where\n-    T: Print<'tcx, P, Output = P, Error = P::Error> + TypeFoldable<'tcx>,\n+    T: Print<'tcx, P, Output = P, Error = P::Error> + TypeFoldable<TyCtxt<'tcx>>,\n {\n     type Output = P;\n     type Error = P::Error;"}, {"sha": "3dfa5e953b5c7139e1ccff9255793ceba484f928", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -105,7 +105,7 @@ pub trait TypeRelation<'tcx>: Sized {\n         T: Relate<'tcx>;\n }\n \n-pub trait Relate<'tcx>: TypeFoldable<'tcx> + PartialEq + Copy {\n+pub trait Relate<'tcx>: TypeFoldable<TyCtxt<'tcx>> + PartialEq + Copy {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n         a: Self,"}, {"sha": "fbe5d8ccff57063d22648bb3afd4311179256402", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 113, "deletions": 54, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -5,10 +5,10 @@\n \n use crate::mir::interpret;\n use crate::mir::{Field, ProjectionKind};\n-use crate::ty::fold::{ir::TypeSuperFoldable, FallibleTypeFolder, TypeFoldable};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n-use crate::ty::visit::{ir::TypeSuperVisitable, TypeVisitable, TypeVisitor};\n-use crate::ty::{self, ir, AliasTy, InferConst, Lift, Term, TermKind, Ty, TyCtxt};\n+use crate::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use crate::ty::{self, AliasTy, InferConst, Lift, Term, TermKind, Ty, TyCtxt};\n use rustc_hir::def::Namespace;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_target::abi::TyAndLayout;\n@@ -372,77 +372,103 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n // Traversal implementations.\n \n /// AdtDefs are basically the same as a DefId.\n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        _folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(\n+        &self,\n+        _visitor: &mut V,\n+    ) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx, T: TypeFoldable<TyCtxt<'tcx>>> TypeFoldable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         folder.try_fold_binder(self)\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<'tcx, T: TypeVisitable<TyCtxt<'tcx>>> TypeVisitable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_binder(self)\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+impl<'tcx, T: TypeFoldable<TyCtxt<'tcx>>> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n+    fn try_super_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n         self.try_map_bound(|ty| ty.try_fold_with(folder))\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<'tcx, T: TypeVisitable<TyCtxt<'tcx>>> TypeSuperVisitable<TyCtxt<'tcx>>\n+    for ty::Binder<'tcx, T>\n+{\n+    fn super_visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(\n+        &self,\n+        visitor: &mut V,\n+    ) -> ControlFlow<V::BreakTy> {\n         self.as_ref().skip_binder().visit_with(visitor)\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_poly_existential_predicates(v))\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Const<'tcx>> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Const<'tcx>> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_const_list(v))\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ProjectionKind> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ProjectionKind> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for Ty<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for Ty<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         folder.try_fold_ty(self)\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for Ty<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for Ty<'tcx> {\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(*self)\n     }\n }\n \n impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for Ty<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -492,7 +518,10 @@ impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for Ty<'tcx> {\n }\n \n impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for Ty<'tcx> {\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn super_visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(\n+        &self,\n+        visitor: &mut V,\n+    ) -> ControlFlow<V::BreakTy> {\n         match self.kind() {\n             ty::RawPtr(ref tm) => tm.visit_with(visitor),\n             ty::Array(typ, sz) => {\n@@ -535,20 +564,23 @@ impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         folder.try_fold_region(self)\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_region(*self)\n     }\n }\n \n impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n         self,\n         _folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -557,25 +589,31 @@ impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n }\n \n impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn super_visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(\n+        &self,\n+        _visitor: &mut V,\n+    ) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         folder.try_fold_predicate(self)\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_predicate(*self)\n     }\n }\n \n impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -585,31 +623,40 @@ impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n }\n \n impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn super_visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(\n+        &self,\n+        visitor: &mut V,\n+    ) -> ControlFlow<V::BreakTy> {\n         self.kind().visit_with(visitor)\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Predicate<'tcx>> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Predicate<'tcx>> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         folder.try_fold_const(self)\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_const(*self)\n     }\n }\n \n impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -624,32 +671,44 @@ impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n }\n \n impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn super_visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(\n+        &self,\n+        visitor: &mut V,\n+    ) -> ControlFlow<V::BreakTy> {\n         self.ty().visit_with(visitor)?;\n         self.kind().visit_with(visitor)\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for InferConst<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for InferConst<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        _folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for InferConst<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for InferConst<'tcx> {\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(\n+        &self,\n+        _visitor: &mut V,\n+    ) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n }\n \n impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::UnevaluatedConst<'tcx> {\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn super_visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(\n+        &self,\n+        visitor: &mut V,\n+    ) -> ControlFlow<V::BreakTy> {\n         self.substs.visit_with(visitor)\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for TyAndLayout<'tcx, Ty<'tcx>> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for TyAndLayout<'tcx, Ty<'tcx>> {\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(self.ty)\n     }\n }"}, {"sha": "7563656f91bbf602f2ef6d534d5a956aa7184090", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -7,10 +7,8 @@ use crate::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use crate::ty::visit::ValidateBoundVars;\n use crate::ty::InferTy::*;\n use crate::ty::{\n-    self,\n-    ir::{FallibleTypeFolder, TypeVisitor},\n-    AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeFoldable, TypeSuperFoldable,\n-    TypeSuperVisitable, TypeVisitable,\n+    self, AdtDef, DefIdTree, Discr, FallibleTypeFolder, Term, Ty, TyCtxt, TypeFlags, TypeFoldable,\n+    TypeSuperFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitableExt, TypeVisitor,\n };\n use crate::ty::{List, ParamEnv};\n use hir::def::DefKind;\n@@ -985,7 +983,7 @@ pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);\n \n impl<'tcx, T> Binder<'tcx, T>\n where\n-    T: TypeVisitable<'tcx>,\n+    T: TypeVisitable<TyCtxt<'tcx>>,\n {\n     /// Wraps `value` in a binder, asserting that `value` does not\n     /// contain any bound vars that would be bound by the\n@@ -1053,14 +1051,14 @@ impl<'tcx, T> Binder<'tcx, T> {\n         Binder(value, self.1)\n     }\n \n-    pub fn map_bound_ref<F, U: TypeVisitable<'tcx>>(&self, f: F) -> Binder<'tcx, U>\n+    pub fn map_bound_ref<F, U: TypeVisitable<TyCtxt<'tcx>>>(&self, f: F) -> Binder<'tcx, U>\n     where\n         F: FnOnce(&T) -> U,\n     {\n         self.as_ref().map_bound(f)\n     }\n \n-    pub fn map_bound<F, U: TypeVisitable<'tcx>>(self, f: F) -> Binder<'tcx, U>\n+    pub fn map_bound<F, U: TypeVisitable<TyCtxt<'tcx>>>(self, f: F) -> Binder<'tcx, U>\n     where\n         F: FnOnce(T) -> U,\n     {\n@@ -1072,7 +1070,10 @@ impl<'tcx, T> Binder<'tcx, T> {\n         Binder(value, self.1)\n     }\n \n-    pub fn try_map_bound<F, U: TypeVisitable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>\n+    pub fn try_map_bound<F, U: TypeVisitable<TyCtxt<'tcx>>, E>(\n+        self,\n+        f: F,\n+    ) -> Result<Binder<'tcx, U>, E>\n     where\n         F: FnOnce(T) -> Result<U, E>,\n     {\n@@ -1095,7 +1096,7 @@ impl<'tcx, T> Binder<'tcx, T> {\n     /// in `bind`. This may be (debug) asserted in the future.\n     pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>\n     where\n-        U: TypeVisitable<'tcx>,\n+        U: TypeVisitable<TyCtxt<'tcx>>,\n     {\n         if cfg!(debug_assertions) {\n             let mut validator = ValidateBoundVars::new(self.bound_vars());\n@@ -1116,7 +1117,7 @@ impl<'tcx, T> Binder<'tcx, T> {\n     /// would not be that useful.)\n     pub fn no_bound_vars(self) -> Option<T>\n     where\n-        T: TypeVisitable<'tcx>,\n+        T: TypeVisitable<TyCtxt<'tcx>>,\n     {\n         if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }\n     }\n@@ -1164,7 +1165,7 @@ impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for SkipBindersAt<'tcx> {\n \n     fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n     where\n-        T: ty::TypeFoldable<'tcx>,\n+        T: ty::TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.index.shift_in(1);\n         let value = t.try_map_bound(|t| t.try_fold_with(self));"}, {"sha": "1ed3ef5745b6fb0146629e3687b8409aa6a1180d", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 35, "deletions": 26, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,10 +1,10 @@\n // Type substitutions.\n \n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{ir::TypeFolder, FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n-use crate::ty::visit::{TypeVisitable, TypeVisitor};\n-use crate::ty::{self, ir, Lift, List, ParamConst, Ty, TyCtxt};\n+use crate::ty::visit::{TypeVisitable, TypeVisitableExt, TypeVisitor};\n+use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n use rustc_data_structures::intern::Interned;\n use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n@@ -227,8 +227,11 @@ impl<'a, 'tcx> Lift<'tcx> for GenericArg<'a> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for GenericArg<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for GenericArg<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.try_fold_with(folder).map(Into::into),\n             GenericArgKind::Type(ty) => ty.try_fold_with(folder).map(Into::into),\n@@ -237,8 +240,8 @@ impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for GenericArg<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for GenericArg<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for GenericArg<'tcx> {\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),\n             GenericArgKind::Type(ty) => ty.visit_with(visitor),\n@@ -473,8 +476,11 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for SubstsRef<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for SubstsRef<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         // This code is hot enough that it's worth specializing for the most\n         // common length lists, to avoid the overhead of `SmallVec` creation.\n         // The match arms are in order of frequency. The 1, 2, and 0 cases are\n@@ -505,8 +511,11 @@ impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for SubstsRef<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<Ty<'tcx>> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<Ty<'tcx>> {\n+    fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n         // This code is fairly hot, though not as hot as `SubstsRef`.\n         //\n         // When compiling stage 2, I get the following results:\n@@ -537,9 +546,9 @@ impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<Ty<'tcx>> {\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for &'tcx ty::List<T> {\n+impl<'tcx, T: TypeVisitable<TyCtxt<'tcx>>> TypeVisitable<TyCtxt<'tcx>> for &'tcx ty::List<T> {\n     #[inline]\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -555,8 +564,8 @@ impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for &'tcx ty:\n pub struct EarlyBinder<T>(pub T);\n \n /// For early binders, you should first call `subst` before using any visitors.\n-impl<'tcx, T> !ir::TypeFoldable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n-impl<'tcx, T> !ir::TypeVisitable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n+impl<'tcx, T> !TypeFoldable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n+impl<'tcx, T> !TypeVisitable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n \n impl<T> EarlyBinder<T> {\n     pub fn as_ref(&self) -> EarlyBinder<&T> {\n@@ -617,7 +626,7 @@ impl<T, U> EarlyBinder<(T, U)> {\n \n impl<'tcx, 's, I: IntoIterator> EarlyBinder<I>\n where\n-    I::Item: TypeFoldable<'tcx>,\n+    I::Item: TypeFoldable<TyCtxt<'tcx>>,\n {\n     pub fn subst_iter(\n         self,\n@@ -636,7 +645,7 @@ pub struct SubstIter<'s, 'tcx, I: IntoIterator> {\n \n impl<'tcx, I: IntoIterator> Iterator for SubstIter<'_, 'tcx, I>\n where\n-    I::Item: TypeFoldable<'tcx>,\n+    I::Item: TypeFoldable<TyCtxt<'tcx>>,\n {\n     type Item = I::Item;\n \n@@ -652,7 +661,7 @@ where\n impl<'tcx, I: IntoIterator> DoubleEndedIterator for SubstIter<'_, 'tcx, I>\n where\n     I::IntoIter: DoubleEndedIterator,\n-    I::Item: TypeFoldable<'tcx>,\n+    I::Item: TypeFoldable<TyCtxt<'tcx>>,\n {\n     fn next_back(&mut self) -> Option<Self::Item> {\n         Some(EarlyBinder(self.it.next_back()?).subst(self.tcx, self.substs))\n@@ -662,14 +671,14 @@ where\n impl<'tcx, I: IntoIterator> ExactSizeIterator for SubstIter<'_, 'tcx, I>\n where\n     I::IntoIter: ExactSizeIterator,\n-    I::Item: TypeFoldable<'tcx>,\n+    I::Item: TypeFoldable<TyCtxt<'tcx>>,\n {\n }\n \n impl<'tcx, 's, I: IntoIterator> EarlyBinder<I>\n where\n     I::Item: Deref,\n-    <I::Item as Deref>::Target: Copy + TypeFoldable<'tcx>,\n+    <I::Item as Deref>::Target: Copy + TypeFoldable<TyCtxt<'tcx>>,\n {\n     pub fn subst_iter_copied(\n         self,\n@@ -689,7 +698,7 @@ pub struct SubstIterCopied<'a, 'tcx, I: IntoIterator> {\n impl<'tcx, I: IntoIterator> Iterator for SubstIterCopied<'_, 'tcx, I>\n where\n     I::Item: Deref,\n-    <I::Item as Deref>::Target: Copy + TypeFoldable<'tcx>,\n+    <I::Item as Deref>::Target: Copy + TypeFoldable<TyCtxt<'tcx>>,\n {\n     type Item = <I::Item as Deref>::Target;\n \n@@ -706,7 +715,7 @@ impl<'tcx, I: IntoIterator> DoubleEndedIterator for SubstIterCopied<'_, 'tcx, I>\n where\n     I::IntoIter: DoubleEndedIterator,\n     I::Item: Deref,\n-    <I::Item as Deref>::Target: Copy + TypeFoldable<'tcx>,\n+    <I::Item as Deref>::Target: Copy + TypeFoldable<TyCtxt<'tcx>>,\n {\n     fn next_back(&mut self) -> Option<Self::Item> {\n         Some(EarlyBinder(*self.it.next_back()?).subst(self.tcx, self.substs))\n@@ -717,7 +726,7 @@ impl<'tcx, I: IntoIterator> ExactSizeIterator for SubstIterCopied<'_, 'tcx, I>\n where\n     I::IntoIter: ExactSizeIterator,\n     I::Item: Deref,\n-    <I::Item as Deref>::Target: Copy + TypeFoldable<'tcx>,\n+    <I::Item as Deref>::Target: Copy + TypeFoldable<TyCtxt<'tcx>>,\n {\n }\n \n@@ -743,7 +752,7 @@ impl<T: Iterator> Iterator for EarlyBinderIter<T> {\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> ty::EarlyBinder<T> {\n+impl<'tcx, T: TypeFoldable<TyCtxt<'tcx>>> ty::EarlyBinder<T> {\n     pub fn subst(self, tcx: TyCtxt<'tcx>, substs: &[GenericArg<'tcx>]) -> T {\n         let mut folder = SubstFolder { tcx, substs, binders_passed: 0 };\n         self.0.fold_with(&mut folder)\n@@ -784,7 +793,7 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for SubstFolder<'a, 'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(\n+    fn fold_binder<T: TypeFoldable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,\n     ) -> ty::Binder<'tcx, T> {\n@@ -977,7 +986,7 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n     /// As indicated in the diagram, here the same type `&'a i32` is substituted once, but in the\n     /// first case we do not increase the De Bruijn index and in the second case we do. The reason\n     /// is that only in the second case have we passed through a fn binder.\n-    fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {\n+    fn shift_vars_through_binders<T: TypeFoldable<TyCtxt<'tcx>>>(&self, val: T) -> T {\n         debug!(\n             \"shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})\",\n             val,"}, {"sha": "233c0df2d3c77acede02e6a2e2e2c6e0ee54be75", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,6 +1,6 @@\n use crate::traits::specialization_graph;\n use crate::ty::fast_reject::{self, SimplifiedType, TreatParams};\n-use crate::ty::visit::TypeVisitable;\n+use crate::ty::visit::TypeVisitableExt;\n use crate::ty::{Ident, Ty, TyCtxt};\n use hir::def_id::LOCAL_CRATE;\n use rustc_hir as hir;"}, {"sha": "2ac3adda80b948762022e5a95c940a5df19f6c8f", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -4,8 +4,8 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n use crate::ty::layout::IntegerExt;\n use crate::ty::{\n-    self, ir::TypeFolder, DefIdTree, FallibleTypeFolder, ToPredicate, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperFoldable,\n+    self, DefIdTree, FallibleTypeFolder, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeFolder,\n+    TypeSuperFoldable, TypeVisitableExt,\n };\n use crate::ty::{GenericArgKind, SubstsRef};\n use rustc_apfloat::Float as _;\n@@ -1349,8 +1349,8 @@ pub fn fold_list<'tcx, F, T>(\n     intern: impl FnOnce(TyCtxt<'tcx>, &[T]) -> &'tcx ty::List<T>,\n ) -> Result<&'tcx ty::List<T>, F::Error>\n where\n-    F: FallibleTypeFolder<'tcx>,\n-    T: TypeFoldable<'tcx> + PartialEq + Copy,\n+    F: FallibleTypeFolder<TyCtxt<'tcx>>,\n+    T: TypeFoldable<TyCtxt<'tcx>> + PartialEq + Copy,\n {\n     let mut iter = list.iter();\n     // Look for the first element that changed"}, {"sha": "6814cadb9a8e4137095472ed0f732663cf759c7f", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -5,15 +5,9 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sso::SsoHashSet;\n use std::ops::ControlFlow;\n \n-pub trait TypeVisitable<'tcx> = ir::TypeVisitable<TyCtxt<'tcx>> + TypeVisitableExt<'tcx>;\n-pub trait TypeSuperVisitable<'tcx> = ir::TypeSuperVisitable<TyCtxt<'tcx>>;\n-pub trait TypeVisitor<'tcx> = ir::TypeVisitor<TyCtxt<'tcx>>;\n+pub use rustc_type_ir::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n \n-pub mod ir {\n-    pub use rustc_type_ir::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n-}\n-\n-pub trait TypeVisitableExt<'tcx>: ir::TypeVisitable<TyCtxt<'tcx>> {\n+pub trait TypeVisitableExt<'tcx>: TypeVisitable<TyCtxt<'tcx>> {\n     /// Returns `true` if `self` has any late-bound regions that are either\n     /// bound by `binder` or bound by some binder outside of `binder`.\n     /// If `binder` is `ty::INNERMOST`, this indicates whether\n@@ -135,7 +129,7 @@ pub trait TypeVisitableExt<'tcx>: ir::TypeVisitable<TyCtxt<'tcx>> {\n     }\n }\n \n-impl<'tcx, T: ir::TypeVisitable<TyCtxt<'tcx>>> TypeVisitableExt<'tcx> for T {}\n+impl<'tcx, T: TypeVisitable<TyCtxt<'tcx>>> TypeVisitableExt<'tcx> for T {}\n \n ///////////////////////////////////////////////////////////////////////////\n // Region folder\n@@ -144,7 +138,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Invoke `callback` on every region appearing free in `value`.\n     pub fn for_each_free_region(\n         self,\n-        value: &impl TypeVisitable<'tcx>,\n+        value: &impl TypeVisitable<TyCtxt<'tcx>>,\n         mut callback: impl FnMut(ty::Region<'tcx>),\n     ) {\n         self.any_free_region_meets(value, |r| {\n@@ -156,7 +150,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns `true` if `callback` returns true for every region appearing free in `value`.\n     pub fn all_free_regions_meet(\n         self,\n-        value: &impl TypeVisitable<'tcx>,\n+        value: &impl TypeVisitable<TyCtxt<'tcx>>,\n         mut callback: impl FnMut(ty::Region<'tcx>) -> bool,\n     ) -> bool {\n         !self.any_free_region_meets(value, |r| !callback(r))\n@@ -165,7 +159,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns `true` if `callback` returns true for some region appearing free in `value`.\n     pub fn any_free_region_meets(\n         self,\n-        value: &impl TypeVisitable<'tcx>,\n+        value: &impl TypeVisitable<TyCtxt<'tcx>>,\n         callback: impl FnMut(ty::Region<'tcx>) -> bool,\n     ) -> bool {\n         struct RegionVisitor<F> {\n@@ -190,13 +184,13 @@ impl<'tcx> TyCtxt<'tcx> {\n             callback: F,\n         }\n \n-        impl<'tcx, F> ir::TypeVisitor<TyCtxt<'tcx>> for RegionVisitor<F>\n+        impl<'tcx, F> TypeVisitor<TyCtxt<'tcx>> for RegionVisitor<F>\n         where\n             F: FnMut(ty::Region<'tcx>) -> bool,\n         {\n             type BreakTy = ();\n \n-            fn visit_binder<T: TypeVisitable<'tcx>>(\n+            fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(\n                 &mut self,\n                 t: &Binder<'tcx, T>,\n             ) -> ControlFlow<Self::BreakTy> {\n@@ -243,7 +237,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         value: &Binder<'tcx, T>,\n     ) -> FxHashSet<ty::BoundRegionKind>\n     where\n-        T: TypeVisitable<'tcx>,\n+        T: TypeVisitable<TyCtxt<'tcx>>,\n     {\n         self.collect_late_bound_regions(value, true)\n     }\n@@ -254,7 +248,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         value: &Binder<'tcx, T>,\n     ) -> FxHashSet<ty::BoundRegionKind>\n     where\n-        T: TypeVisitable<'tcx>,\n+        T: TypeVisitable<TyCtxt<'tcx>>,\n     {\n         self.collect_late_bound_regions(value, false)\n     }\n@@ -265,7 +259,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         just_constraint: bool,\n     ) -> FxHashSet<ty::BoundRegionKind>\n     where\n-        T: TypeVisitable<'tcx>,\n+        T: TypeVisitable<TyCtxt<'tcx>>,\n     {\n         let mut collector = LateBoundRegionsCollector::new(just_constraint);\n         let result = value.as_ref().skip_binder().visit_with(&mut collector);\n@@ -292,10 +286,10 @@ impl<'tcx> ValidateBoundVars<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for ValidateBoundVars<'tcx> {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ValidateBoundVars<'tcx> {\n     type BreakTy = ();\n \n-    fn visit_binder<T: TypeVisitable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {\n@@ -404,10 +398,10 @@ struct HasEscapingVarsVisitor {\n     outer_index: ty::DebruijnIndex,\n }\n \n-impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for HasEscapingVarsVisitor {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for HasEscapingVarsVisitor {\n     type BreakTy = FoundEscapingVars;\n \n-    fn visit_binder<T: TypeVisitable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {\n@@ -481,7 +475,7 @@ impl std::fmt::Debug for HasTypeFlagsVisitor {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for HasTypeFlagsVisitor {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for HasTypeFlagsVisitor {\n     type BreakTy = FoundFlags;\n \n     #[inline]\n@@ -551,8 +545,8 @@ impl LateBoundRegionsCollector {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for LateBoundRegionsCollector {\n-    fn visit_binder<T: TypeVisitable<'tcx>>(\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for LateBoundRegionsCollector {\n+    fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {\n@@ -613,7 +607,7 @@ impl MaxUniverse {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for MaxUniverse {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for MaxUniverse {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::Placeholder(placeholder) = t.kind() {\n             self.max_universe = ty::UniverseIndex::from_u32("}, {"sha": "c34105174ef2a6a1b8b72b3256e2b41e26aef7fc", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -5,7 +5,7 @@ use crate::build::Builder;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty;\n-use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::TypeVisitableExt;\n use smallvec::SmallVec;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {"}, {"sha": "53bef1eb772ea4afc154aadc8467522f5d8aab33", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::mir::*;\n use rustc_middle::thir::{\n     self, BindingMode, Expr, ExprId, LintLevel, LocalVarId, Param, ParamId, PatKind, Thir,\n };\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable, TypeckResults};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt, TypeckResults};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_span::Symbol;"}, {"sha": "6b2eefce24d5069e681057907f53d6fb7cc03013", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::mir::visit::{\n use rustc_middle::mir::*;\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::InternalSubsts;\n-use rustc_middle::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::{def_id::DefId, Span};\n use rustc_target::abi::{self, Align, HasDataLayout, Size, TargetDataLayout};\n use rustc_target::spec::abi::Abi as CallAbi;"}, {"sha": "6c1980ff3ad93ca628784b2a00c7226d29823e35", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -21,7 +21,9 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::InternalSubsts;\n-use rustc_middle::ty::{self, ConstInt, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{\n+    self, ConstInt, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeVisitableExt,\n+};\n use rustc_session::lint;\n use rustc_span::Span;\n use rustc_target::abi::{HasDataLayout, Size, TargetDataLayout};"}, {"sha": "792457c80b0b7faeeb80cf4e5a84b38734a087b1", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::mir::TerminatorKind;\n-use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_middle::ty::{self, subst::SubstsRef, InstanceDef, TyCtxt};\n use rustc_session::Limit;\n "}, {"sha": "bdd1e8fb98f75ae2ff84e3f0ab1246240e027f52", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -35,7 +35,7 @@ use rustc_middle::mir::{\n     TerminatorKind,\n };\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::sym;\n \n #[macro_use]"}, {"sha": "ff409a8071611d2992d933ba2b4d4d8a7044f57e", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -189,7 +189,9 @@ use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n-use rustc_middle::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, VtblEntry};\n+use rustc_middle::ty::{\n+    self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitableExt, VtblEntry,\n+};\n use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n use rustc_session::config::EntryFnType;\n use rustc_session::lint::builtin::LARGE_ASSIGNMENTS;\n@@ -658,7 +660,7 @@ struct MirNeighborCollector<'a, 'tcx> {\n impl<'a, 'tcx> MirNeighborCollector<'a, 'tcx> {\n     pub fn monomorphize<T>(&self, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         debug!(\"monomorphize: self.instance={:?}\", self.instance);\n         self.instance.subst_mir_and_normalize_erasing_regions("}, {"sha": "2c56edd89bc31d3d07e2d1a0009fbae7e184de5a", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::middle::exported_symbols::{SymbolExportInfo, SymbolExportLevel\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, Linkage, Visibility};\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n use rustc_middle::ty::print::characteristic_def_id_of_type;\n-use rustc_middle::ty::{self, visit::TypeVisitable, DefIdTree, InstanceDef, TyCtxt};\n+use rustc_middle::ty::{self, visit::TypeVisitableExt, DefIdTree, InstanceDef, TyCtxt};\n use rustc_span::symbol::Symbol;\n \n use super::PartitioningCx;"}, {"sha": "b7c3dbcc09139e7450e57bb5db6d12547f17ced6", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::{\n     self,\n     query::Providers,\n     subst::SubstsRef,\n-    visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable},\n+    visit::{TypeSuperVisitable, TypeVisitable, TypeVisitableExt, TypeVisitor},\n     Const, Ty, TyCtxt, UnusedGenericParams,\n };\n use rustc_span::symbol::sym;"}, {"sha": "b383bd2773784a4473895fae7110cb7d52debdf8", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -30,7 +30,7 @@ use rustc_middle::span_bug;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Const, DefIdTree, GenericParamDefKind};\n-use rustc_middle::ty::{ir::TypeVisitor, TraitRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym, Ident};\n@@ -85,7 +85,10 @@ trait DefIdVisitor<'tcx> {\n             dummy: Default::default(),\n         }\n     }\n-    fn visit(&mut self, ty_fragment: impl TypeVisitable<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit(\n+        &mut self,\n+        ty_fragment: impl TypeVisitable<TyCtxt<'tcx>>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         ty_fragment.visit_with(&mut self.skeleton())\n     }\n     fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "2368468c89123b799bbfc6a099df9d9aa0dc7b6f", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -3,7 +3,7 @@ use rustc_hir::def_id::CrateNum;\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_middle::ty::print::{PrettyPrinter, Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, Instance, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Instance, Ty, TyCtxt, TypeVisitableExt};\n use rustc_middle::util::common::record_time;\n \n use std::fmt::{self, Write};"}, {"sha": "2f20d42139c8d133cc408f754d68d0804da792ab", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -8,7 +8,8 @@ use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::print::{Print, Printer};\n use rustc_middle::ty::{\n-    self, EarlyBinder, FloatTy, Instance, IntTy, Ty, TyCtxt, TypeVisitable, UintTy,\n+    self, EarlyBinder, FloatTy, Instance, IntTy, Ty, TyCtxt, TypeVisitable, TypeVisitableExt,\n+    UintTy,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_span::symbol::kw;\n@@ -204,7 +205,7 @@ impl<'tcx> SymbolMangler<'tcx> {\n         print_value: impl FnOnce(&'a mut Self, &T) -> Result<&'a mut Self, !>,\n     ) -> Result<&'a mut Self, !>\n     where\n-        T: TypeVisitable<'tcx>,\n+        T: TypeVisitable<TyCtxt<'tcx>>,\n     {\n         // FIXME(non-lifetime-binders): What to do here?\n         let regions = if value.has_late_bound_regions() {"}, {"sha": "015029b7ac42233d790b435647dcd38041f7fbc7", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::infer::canonical::{Canonical, CanonicalQueryResponse, QueryResponse};\n use rustc_middle::traits::query::Fallible;\n-use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitableExt};\n use rustc_middle::ty::{GenericArg, ToPredicate};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -104,8 +104,8 @@ pub trait InferCtxtBuilderExt<'tcx> {\n         operation: impl FnOnce(&ObligationCtxt<'_, 'tcx>, K) -> Fallible<R>,\n     ) -> Fallible<CanonicalQueryResponse<'tcx, R>>\n     where\n-        K: TypeFoldable<'tcx>,\n-        R: Debug + TypeFoldable<'tcx>,\n+        K: TypeFoldable<TyCtxt<'tcx>>,\n+        R: Debug + TypeFoldable<TyCtxt<'tcx>>,\n         Canonical<'tcx, QueryResponse<'tcx, R>>: ArenaAllocatable<'tcx>;\n }\n \n@@ -125,15 +125,15 @@ impl<'tcx> InferCtxtBuilderExt<'tcx> for InferCtxtBuilder<'tcx> {\n     /// In part because we would need a `for<'tcx>` sort of\n     /// bound for the closure and in part because it is convenient to\n     /// have `'tcx` be free on this function so that we can talk about\n-    /// `K: TypeFoldable<'tcx>`.)\n+    /// `K: TypeFoldable<TyCtxt<'tcx>>`.)\n     fn enter_canonical_trait_query<K, R>(\n         &mut self,\n         canonical_key: &Canonical<'tcx, K>,\n         operation: impl FnOnce(&ObligationCtxt<'_, 'tcx>, K) -> Fallible<R>,\n     ) -> Fallible<CanonicalQueryResponse<'tcx, R>>\n     where\n-        K: TypeFoldable<'tcx>,\n-        R: Debug + TypeFoldable<'tcx>,\n+        K: TypeFoldable<TyCtxt<'tcx>>,\n+        R: Debug + TypeFoldable<TyCtxt<'tcx>>,\n         Canonical<'tcx, QueryResponse<'tcx, R>>: ArenaAllocatable<'tcx>,\n     {\n         let (infcx, key, canonical_inference_vars) ="}, {"sha": "6172a9539f64ded9606ec312257a7f7ee6485e3f", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -82,7 +82,7 @@ pub(super) enum CandidateSource {\n }\n \n /// Methods used to assemble candidates for either trait or projection goals.\n-pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy + Eq {\n+pub(super) trait GoalKind<'tcx>: TypeFoldable<TyCtxt<'tcx>> + Copy + Eq {\n     fn self_ty(self) -> Ty<'tcx>;\n \n     fn with_self_ty(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self;"}, {"sha": "c8097e81953d999d4b43e9f49251176b5894a778", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -6,7 +6,10 @@ use rustc_infer::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable};\n+use rustc_middle::ty::{\n+    self, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n+    TypeVisitor,\n+};\n use rustc_span::DUMMY_SP;\n use std::ops::ControlFlow;\n \n@@ -137,7 +140,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             })\n     }\n \n-    pub(super) fn instantiate_binder_with_infer<T: TypeFoldable<'tcx> + Copy>(\n+    pub(super) fn instantiate_binder_with_infer<T: TypeFoldable<TyCtxt<'tcx>> + Copy>(\n         &self,\n         value: ty::Binder<'tcx, T>,\n     ) -> T {\n@@ -148,7 +151,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         )\n     }\n \n-    pub(super) fn instantiate_binder_with_placeholders<T: TypeFoldable<'tcx> + Copy>(\n+    pub(super) fn instantiate_binder_with_placeholders<T: TypeFoldable<TyCtxt<'tcx>> + Copy>(\n         &self,\n         value: ty::Binder<'tcx, T>,\n     ) -> T {\n@@ -157,7 +160,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n \n     pub(super) fn resolve_vars_if_possible<T>(&self, value: T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.infcx.resolve_vars_if_possible(value)\n     }"}, {"sha": "08c24ce13a5d0b0675aada06b49438ec1f88fae5", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -14,7 +14,7 @@ use rustc_infer::traits::Reveal;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::ProjectionPredicate;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_middle::ty::{ToPredicate, TypeVisitable};\n+use rustc_middle::ty::{ToPredicate, TypeVisitableExt};\n use rustc_span::{sym, DUMMY_SP};\n use std::iter;\n "}, {"sha": "aff79739d45ffc414aa65197263a92b9f933b5ee", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -10,7 +10,7 @@ use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt};\n-use rustc_middle::ty::{TraitPredicate, TypeVisitable};\n+use rustc_middle::ty::{TraitPredicate, TypeVisitableExt};\n use rustc_span::DUMMY_SP;\n \n pub mod structural_traits;"}, {"sha": "6f2b0856d516a3cc474d8b65caf10783f6aa4f44", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -8,9 +8,8 @@ use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::InferCtxt;\n use crate::traits::project::ProjectAndUnifyResult;\n use rustc_middle::mir::interpret::ErrorHandled;\n-use rustc_middle::ty::fold::{ir::TypeFolder, TypeSuperFoldable};\n-#[cfg(not(bootstrap))]\n-use rustc_middle::ty::visit::TypeVisitable;\n+use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{ImplPolarity, Region, RegionVid};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};"}, {"sha": "b42a49eb47b9097ec11957bad9fd5180f41fe55e", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -8,7 +8,7 @@ use crate::traits::{\n     SelectionError, TraitEngine,\n };\n use rustc_data_structures::fx::FxIndexSet;\n-use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::TypeVisitableExt;\n \n pub struct FulfillmentContext<'tcx> {\n     obligations: FxIndexSet<PredicateObligation<'tcx>>,"}, {"sha": "6b688c322c786e4e0c702501444f4aa352f2bc73", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -21,8 +21,8 @@ use rustc_infer::infer::{DefiningAnchor, InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::util;\n use rustc_middle::traits::specialization_graph::OverlapMode;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n-use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, ir::TypeVisitor, ImplSubject, Ty, TyCtxt};\n+use rustc_middle::ty::visit::{TypeVisitable, TypeVisitableExt};\n+use rustc_middle::ty::{self, ImplSubject, Ty, TyCtxt, TypeVisitor};\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n use std::fmt::Debug;"}, {"sha": "345e84990ed03463f013336993188a12feb666e8", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::mir::interpret::ErrorHandled;\n \n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n-use rustc_middle::ty::{self, ir::TypeVisitor, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, TyCtxt, TypeVisitable, TypeVisitableExt, TypeVisitor};\n \n use rustc_span::Span;\n use std::ops::ControlFlow;"}, {"sha": "b20636174eeacd584e9200c0d6eadd4d3fc7151e", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         });\n     }\n \n-    pub fn normalize<T: TypeFoldable<'tcx>>(\n+    pub fn normalize<T: TypeFoldable<TyCtxt<'tcx>>>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -220,7 +220,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         answer: T,\n     ) -> Fallible<CanonicalQueryResponse<'tcx, T>>\n     where\n-        T: Debug + TypeFoldable<'tcx>,\n+        T: Debug + TypeFoldable<TyCtxt<'tcx>>,\n         Canonical<'tcx, QueryResponse<'tcx, T>>: ArenaAllocatable<'tcx>,\n     {\n         self.infcx.make_canonicalized_query_response("}, {"sha": "a844a1494e26259e6d845628b061bcd27a7c39f3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -34,10 +34,11 @@ use rustc_infer::infer::{InferOk, TypeTrace};\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::fold::{ir::TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::print::{with_forced_trimmed_paths, FmtPrinter, Print};\n use rustc_middle::ty::{\n     self, SubtypePredicate, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n+    TypeVisitable, TypeVisitableExt,\n };\n use rustc_session::config::TraitSolver;\n use rustc_session::Limit;\n@@ -108,7 +109,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>\n     where\n         T: fmt::Display\n-            + TypeFoldable<'tcx>\n+            + TypeFoldable<TyCtxt<'tcx>>\n             + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n         <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n \n@@ -121,7 +122,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n     ) -> !\n     where\n         T: fmt::Display\n-            + TypeFoldable<'tcx>\n+            + TypeFoldable<TyCtxt<'tcx>>\n             + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n         <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n \n@@ -491,7 +492,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     ) -> !\n     where\n         T: fmt::Display\n-            + TypeFoldable<'tcx>\n+            + TypeFoldable<TyCtxt<'tcx>>\n             + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n         <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n     {\n@@ -511,7 +512,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>\n     where\n         T: fmt::Display\n-            + TypeFoldable<'tcx>\n+            + TypeFoldable<TyCtxt<'tcx>>\n             + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n         <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n     {\n@@ -2970,7 +2971,7 @@ impl ArgKind {\n \n struct HasNumericInferVisitor;\n \n-impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for HasNumericInferVisitor {\n+impl<'tcx> ty::TypeVisitor<TyCtxt<'tcx>> for HasNumericInferVisitor {\n     type BreakTy = ();\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "84945ff28fe57d29ca332ecc66af0ddbf3e6bf27", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -30,10 +30,10 @@ use rustc_middle::hir::map;\n use rustc_middle::ty::error::TypeError::{self, Sorts};\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{\n-    self, ir::TypeFolder, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind,\n-    DefIdTree, GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, InternalSubsts,\n-    IsSuggestable, ToPredicate, Ty, TyCtxt, TypeAndMut, TypeFoldable, TypeSuperFoldable,\n-    TypeckResults,\n+    self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n+    GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, InternalSubsts,\n+    IsSuggestable, ToPredicate, Ty, TyCtxt, TypeAndMut, TypeFoldable, TypeFolder,\n+    TypeSuperFoldable, TypeVisitableExt, TypeckResults,\n };\n use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::{sym, Ident, Symbol};"}, {"sha": "da2416b96467e7c275514ec8ee5d5661a297d783", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, Binder, Const, TypeVisitable};\n+use rustc_middle::ty::{self, Binder, Const, TypeVisitableExt};\n use std::marker::PhantomData;\n \n use super::const_evaluatable;"}, {"sha": "b94346b09560a2b7e086303c852c15d7608071de", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -8,7 +8,7 @@ use rustc_infer::infer::canonical::Canonical;\n use rustc_infer::infer::{RegionResolutionError, TyCtxtInferExt};\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::{infer::outlives::env::OutlivesEnvironment, traits::FulfillmentError};\n-use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::DUMMY_SP;\n \n use super::outlives_bounds::InferCtxtExt;"}, {"sha": "c8b233bfe26aa6ea6abf52360dd8e25937d624ec", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -27,7 +27,7 @@ use crate::traits::error_reporting::TypeErrCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use rustc_errors::ErrorGuaranteed;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::visit::TypeVisitable;\n+use rustc_middle::ty::visit::{TypeVisitable, TypeVisitableExt};\n use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeSuperVisitable};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use rustc_span::def_id::{DefId, CRATE_DEF_ID};\n@@ -141,7 +141,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n fn pred_known_to_hold_modulo_regions<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    pred: impl ToPredicate<'tcx> + TypeVisitable<'tcx>,\n+    pred: impl ToPredicate<'tcx> + TypeVisitable<TyCtxt<'tcx>>,\n     span: Span,\n ) -> bool {\n     let has_non_region_infer = pred.has_non_region_infer();\n@@ -371,7 +371,7 @@ pub fn fully_normalize<'tcx, T>(\n     value: T,\n ) -> Result<T, Vec<FulfillmentError<'tcx>>>\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeFoldable<TyCtxt<'tcx>>,\n {\n     let ocx = ObligationCtxt::new(infcx);\n     debug!(?value);\n@@ -481,7 +481,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n         generics: &'tcx ty::Generics,\n         trait_item_def_id: DefId,\n     }\n-    impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for ReferencesOnlyParentGenerics<'tcx> {\n+    impl<'tcx> ty::TypeVisitor<TyCtxt<'tcx>> for ReferencesOnlyParentGenerics<'tcx> {\n         type BreakTy = ();\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             // If this is a parameter from the trait item's own generics, then bail"}, {"sha": "b87f75422ef60925d6edf2910e831a122be0e6e1", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -19,7 +19,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n use rustc_middle::ty::{\n-    self, ir::TypeVisitor, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n+    self, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n@@ -790,7 +790,7 @@ fn receiver_is_dispatchable<'tcx>(\n     infcx.predicate_must_hold_modulo_regions(&obligation)\n }\n \n-fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n+fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<TyCtxt<'tcx>>>(\n     tcx: TyCtxt<'tcx>,\n     trait_def_id: DefId,\n     value: T,"}, {"sha": "279725b16d8a6956f7078c15ff0f060b1e13efdd", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -30,8 +30,8 @@ use rustc_infer::infer::at::At;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_infer::traits::ImplSourceBuiltinData;\n use rustc_middle::traits::select::OverflowError;\n-use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n-use rustc_middle::ty::visit::{MaxUniverse, TypeVisitable};\n+use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::visit::{MaxUniverse, TypeVisitable, TypeVisitableExt};\n use rustc_middle::ty::DefIdTree;\n use rustc_middle::ty::{self, Term, ToPredicate, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n@@ -53,11 +53,11 @@ pub trait NormalizeExt<'tcx> {\n     ///\n     /// This normalization should be used when the type contains inference variables or the\n     /// projection may be fallible.\n-    fn normalize<T: TypeFoldable<'tcx>>(&self, t: T) -> InferOk<'tcx, T>;\n+    fn normalize<T: TypeFoldable<TyCtxt<'tcx>>>(&self, t: T) -> InferOk<'tcx, T>;\n }\n \n impl<'tcx> NormalizeExt<'tcx> for At<'_, 'tcx> {\n-    fn normalize<T: TypeFoldable<'tcx>>(&self, value: T) -> InferOk<'tcx, T> {\n+    fn normalize<T: TypeFoldable<TyCtxt<'tcx>>>(&self, value: T) -> InferOk<'tcx, T> {\n         let mut selcx = SelectionContext::new(self.infcx);\n         let Normalized { value, obligations } =\n             normalize_with_depth(&mut selcx, self.param_env, self.cause.clone(), 0, value);\n@@ -312,7 +312,7 @@ pub(crate) fn normalize_with_depth<'a, 'b, 'tcx, T>(\n     value: T,\n ) -> Normalized<'tcx, T>\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeFoldable<TyCtxt<'tcx>>,\n {\n     let mut obligations = Vec::new();\n     let value = normalize_with_depth_to(selcx, param_env, cause, depth, value, &mut obligations);\n@@ -329,7 +329,7 @@ pub(crate) fn normalize_with_depth_to<'a, 'b, 'tcx, T>(\n     obligations: &mut Vec<PredicateObligation<'tcx>>,\n ) -> T\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeFoldable<TyCtxt<'tcx>>,\n {\n     debug!(obligations.len = obligations.len());\n     let mut normalizer = AssocTypeNormalizer::new(selcx, param_env, cause, depth, obligations);\n@@ -349,7 +349,7 @@ pub(crate) fn try_normalize_with_depth_to<'a, 'b, 'tcx, T>(\n     obligations: &mut Vec<PredicateObligation<'tcx>>,\n ) -> T\n where\n-    T: TypeFoldable<'tcx>,\n+    T: TypeFoldable<TyCtxt<'tcx>>,\n {\n     debug!(obligations.len = obligations.len());\n     let mut normalizer = AssocTypeNormalizer::new_without_eager_inference_replacement(\n@@ -365,7 +365,10 @@ where\n     result\n }\n \n-pub(crate) fn needs_normalization<'tcx, T: TypeVisitable<'tcx>>(value: &T, reveal: Reveal) -> bool {\n+pub(crate) fn needs_normalization<'tcx, T: TypeVisitable<TyCtxt<'tcx>>>(\n+    value: &T,\n+    reveal: Reveal,\n+) -> bool {\n     match reveal {\n         Reveal::UserFacing => value\n             .has_type_flags(ty::TypeFlags::HAS_TY_PROJECTION | ty::TypeFlags::HAS_CT_PROJECTION),\n@@ -427,7 +430,7 @@ impl<'a, 'b, 'tcx> AssocTypeNormalizer<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn fold<T: TypeFoldable<'tcx>>(&mut self, value: T) -> T {\n+    fn fold<T: TypeFoldable<TyCtxt<'tcx>>>(&mut self, value: T) -> T {\n         let value = self.selcx.infcx.resolve_vars_if_possible(value);\n         debug!(?value);\n \n@@ -450,7 +453,7 @@ impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx\n         self.selcx.tcx()\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(\n+    fn fold_binder<T: TypeFoldable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,\n     ) -> ty::Binder<'tcx, T> {\n@@ -669,7 +672,12 @@ pub struct BoundVarReplacer<'me, 'tcx> {\n ///\n /// FIXME(@lcnr): We may even consider experimenting with eagerly replacing bound vars during\n /// normalization as well, at which point this function will be unnecessary and can be removed.\n-pub fn with_replaced_escaping_bound_vars<'a, 'tcx, T: TypeFoldable<'tcx>, R: TypeFoldable<'tcx>>(\n+pub fn with_replaced_escaping_bound_vars<\n+    'a,\n+    'tcx,\n+    T: TypeFoldable<TyCtxt<'tcx>>,\n+    R: TypeFoldable<TyCtxt<'tcx>>,\n+>(\n     infcx: &'a InferCtxt<'tcx>,\n     universe_indices: &'a mut Vec<Option<ty::UniverseIndex>>,\n     value: T,\n@@ -695,7 +703,7 @@ pub fn with_replaced_escaping_bound_vars<'a, 'tcx, T: TypeFoldable<'tcx>, R: Typ\n impl<'me, 'tcx> BoundVarReplacer<'me, 'tcx> {\n     /// Returns `Some` if we *were* able to replace bound vars. If there are any bound vars that\n     /// use a binding level above `universe_indices.len()`, we fail.\n-    pub fn replace_bound_vars<T: TypeFoldable<'tcx>>(\n+    pub fn replace_bound_vars<T: TypeFoldable<TyCtxt<'tcx>>>(\n         infcx: &'me InferCtxt<'tcx>,\n         universe_indices: &'me mut Vec<Option<ty::UniverseIndex>>,\n         value: T,\n@@ -742,7 +750,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'_, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(\n+    fn fold_binder<T: TypeFoldable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,\n     ) -> ty::Binder<'tcx, T> {\n@@ -823,7 +831,7 @@ pub struct PlaceholderReplacer<'me, 'tcx> {\n }\n \n impl<'me, 'tcx> PlaceholderReplacer<'me, 'tcx> {\n-    pub fn replace_placeholders<T: TypeFoldable<'tcx>>(\n+    pub fn replace_placeholders<T: TypeFoldable<TyCtxt<'tcx>>>(\n         infcx: &'me InferCtxt<'tcx>,\n         mapped_regions: BTreeMap<ty::PlaceholderRegion, ty::BoundRegion>,\n         mapped_types: BTreeMap<ty::PlaceholderType, ty::BoundTy>,\n@@ -848,7 +856,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for PlaceholderReplacer<'_, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(\n+    fn fold_binder<T: TypeFoldable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,\n     ) -> ty::Binder<'tcx, T> {"}, {"sha": "b0cec3ce7a3ea059ac2d2e45c51f169cef8fd2bf", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -11,9 +11,9 @@ use crate::traits::{ObligationCause, PredicateObligation, Reveal};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n-use rustc_middle::ty::fold::{ir::FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable};\n-use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt};\n+use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitableExt};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n use rustc_span::DUMMY_SP;\n \n use std::ops::ControlFlow;\n@@ -32,7 +32,7 @@ pub trait QueryNormalizeExt<'tcx> {\n     /// use [`TyCtxt::normalize_erasing_regions`], which wraps this procedure.\n     fn query_normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>\n     where\n-        T: TypeFoldable<'tcx>;\n+        T: TypeFoldable<TyCtxt<'tcx>>;\n }\n \n impl<'cx, 'tcx> QueryNormalizeExt<'tcx> for At<'cx, 'tcx> {\n@@ -51,7 +51,7 @@ impl<'cx, 'tcx> QueryNormalizeExt<'tcx> for At<'cx, 'tcx> {\n     /// and other details are still \"under development\".\n     fn query_normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         debug!(\n             \"normalize::<{}>(value={:?}, param_env={:?}, cause={:?})\",\n@@ -116,7 +116,7 @@ struct MaxEscapingBoundVarVisitor {\n }\n \n impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for MaxEscapingBoundVarVisitor {\n-    fn visit_binder<T: TypeVisitable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {\n@@ -177,7 +177,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx>\n         self.infcx.tcx\n     }\n \n-    fn try_fold_binder<T: TypeFoldable<'tcx>>(\n+    fn try_fold_binder<T: TypeFoldable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,\n     ) -> Result<ty::Binder<'tcx, T>, Self::Error> {"}, {"sha": "9e8bc8bce9a8f5ebf16634a940540f2d5951939f", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -54,8 +54,8 @@ pub struct TypeOpOutput<'tcx, Op: TypeOp<'tcx>> {\n /// which produces the resulting query region constraints.\n ///\n /// [c]: https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html\n-pub trait QueryTypeOp<'tcx>: fmt::Debug + Copy + TypeFoldable<'tcx> + 'tcx {\n-    type QueryResponse: TypeFoldable<'tcx>;\n+pub trait QueryTypeOp<'tcx>: fmt::Debug + Copy + TypeFoldable<TyCtxt<'tcx>> + 'tcx {\n+    type QueryResponse: TypeFoldable<TyCtxt<'tcx>>;\n \n     /// Give query the option for a simple fast path that never\n     /// actually hits the tcx cache lookup etc. Return `Some(r)` with"}, {"sha": "5b216c0769236eccc77d8ee8de0e1a273e6ec715", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/normalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,7 +1,7 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n use crate::traits::query::Fallible;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt, TypeVisitableExt};\n use std::fmt;\n \n pub use rustc_middle::traits::query::type_op::Normalize;\n@@ -24,7 +24,7 @@ where\n     }\n }\n \n-pub trait Normalizable<'tcx>: fmt::Debug + TypeFoldable<'tcx> + Lift<'tcx> + Copy {\n+pub trait Normalizable<'tcx>: fmt::Debug + TypeFoldable<TyCtxt<'tcx>> + Lift<'tcx> + Copy {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,"}, {"sha": "4ad13dcb645eb7e5458bde5bf4918014bb56f626", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -9,7 +9,7 @@ use hir::LangItem;\n use rustc_hir as hir;\n use rustc_infer::traits::ObligationCause;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n-use rustc_middle::ty::{self, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n use rustc_target::spec::abi::Abi;\n \n use crate::traits;"}, {"sha": "270f513ce3cd146837b3c942d0e530e16e14d7f7", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -12,7 +12,7 @@ use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n use rustc_middle::ty::{\n     self, Binder, GenericParamDefKind, InternalSubsts, SubstsRef, ToPolyTraitRef, ToPredicate,\n-    TraitRef, Ty, TyCtxt, TypeVisitable,\n+    TraitRef, Ty, TyCtxt, TypeVisitableExt,\n };\n use rustc_session::config::TraitSolver;\n use rustc_span::def_id::DefId;"}, {"sha": "e7e0f8838a4329c7b201761cca70139d99e65f13", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -49,7 +49,7 @@ use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n-use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable, TypeVisitableExt};\n use rustc_session::config::TraitSolver;\n use rustc_span::symbol::sym;\n \n@@ -1406,7 +1406,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// The weird return type of this function allows it to be used with the `try` (`?`)\n     /// operator within certain functions.\n     #[inline(always)]\n-    fn check_recursion_limit<T: Display + TypeFoldable<'tcx>, V>(\n+    fn check_recursion_limit<T: Display + TypeFoldable<TyCtxt<'tcx>>, V>(\n         &self,\n         obligation: &Obligation<'tcx, T>,\n         error_obligation: &Obligation<'tcx, V>,"}, {"sha": "61ed9ef2ec18449459c4cc3cadf91401be21aa6e", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -4,7 +4,7 @@ use crate::traits;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams};\n-use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n \n pub use rustc_middle::traits::specialization_graph::*;\n "}, {"sha": "e38ae9381c1d7d794630abe9c9c19d5fa37dd302", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,8 +1,6 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-#[cfg(not(bootstrap))]\n-use rustc_middle::ty::TypeVisitable;\n-use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt, TypeSuperVisitable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use rustc_span::Span;\n use std::ops::ControlFlow;\n "}, {"sha": "0c55c35ffb4895b31fb38422dab5d7cc9a9160a6", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -4,7 +4,7 @@ use smallvec::SmallVec;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::{self, ImplSubject, ToPredicate, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, ImplSubject, ToPredicate, Ty, TyCtxt, TypeVisitableExt};\n use rustc_middle::ty::{GenericArg, SubstsRef};\n \n use super::NormalizeExt;"}, {"sha": "a4e9928f8b2cf2de4577734a8da8ee09e34eaa6d", "filename": "compiler/rustc_trait_selection/src/traits/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::traits::util::PredicateSet;\n use rustc_infer::traits::ImplSource;\n-use rustc_middle::ty::visit::TypeVisitable;\n+use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, VtblEntry};\n use rustc_span::{sym, Span};"}, {"sha": "d498af359c58487ad3b2ca35ba7fdc831d638852", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -3,7 +3,7 @@ use crate::traits;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "f8c8f744e6d5338f0aebb84a05a50ccded646de9", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -769,12 +769,12 @@ struct ReplaceOpaqueTyFolder<'tcx> {\n     binder_index: ty::DebruijnIndex,\n }\n \n-impl<'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for ReplaceOpaqueTyFolder<'tcx> {\n+impl<'tcx> ty::TypeFolder<TyCtxt<'tcx>> for ReplaceOpaqueTyFolder<'tcx> {\n     fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(\n+    fn fold_binder<T: TypeFoldable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,\n     ) -> ty::Binder<'tcx, T> {"}, {"sha": "fe80de5a06907ff1fe9840b3148023a47e2af9d0", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -35,9 +35,8 @@ use rustc_ast::ast;\n use rustc_middle::traits::{ChalkEnvironmentAndGoal, ChalkRustInterner as RustInterner};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n-    self,\n-    ir::{TypeFolder, TypeVisitor},\n-    Binder, Region, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeSuperVisitable, TypeVisitable,\n+    self, Binder, Region, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n+    TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_span::def_id::DefId;\n \n@@ -880,7 +879,7 @@ impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::AliasEqBound<RustInterner<'tcx>\n /// It's important to note that because of prior substitution, we may have\n /// late-bound regions, even outside of fn contexts, since this is the best way\n /// to prep types for chalk lowering.\n-pub(crate) fn collect_bound_vars<'tcx, T: TypeFoldable<'tcx>>(\n+pub(crate) fn collect_bound_vars<'tcx, T: TypeFoldable<TyCtxt<'tcx>>>(\n     interner: RustInterner<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     ty: Binder<'tcx, T>,\n@@ -931,7 +930,7 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n }\n \n impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for BoundVarsCollector<'tcx> {\n-    fn visit_binder<T: TypeVisitable<'tcx>>(\n+    fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {\n@@ -1016,7 +1015,10 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for NamedBoundVarSubstitutor<'a, 'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T> {\n+    fn fold_binder<T: TypeFoldable<TyCtxt<'tcx>>>(\n+        &mut self,\n+        t: Binder<'tcx, T>,\n+    ) -> Binder<'tcx, T> {\n         self.binder_index.shift_in(1);\n         let result = t.super_fold_with(self);\n         self.binder_index.shift_out(1);\n@@ -1072,7 +1074,10 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T> {\n+    fn fold_binder<T: TypeFoldable<TyCtxt<'tcx>>>(\n+        &mut self,\n+        t: Binder<'tcx, T>,\n+    ) -> Binder<'tcx, T> {\n         self.binder_index.shift_in(1);\n         let result = t.super_fold_with(self);\n         self.binder_index.shift_out(1);"}, {"sha": "5855a8e28dd1d0e0efd8de964215de1046e5353d", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -9,7 +9,7 @@ pub(crate) mod lowering;\n use rustc_middle::infer::canonical::{CanonicalTyVarKind, CanonicalVarKind};\n use rustc_middle::traits::ChalkRustInterner;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitable};\n \n use rustc_infer::infer::canonical::{\n     Canonical, CanonicalVarValues, Certainty, QueryRegionConstraints, QueryResponse,"}, {"sha": "ddd4ca1436c09d66a8fea937b48d3e69b0fe0028", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -7,7 +7,7 @@ use rustc_infer::infer::outlives::components::{push_outlives_components, Compone\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::query::OutlivesBound;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;"}, {"sha": "f0597f19225c86c3ff4bdf57094ffffe36c6f701", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,7 +1,7 @@\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, ParamEnvAnd, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, ParamEnvAnd, TyCtxt, TypeFoldable, TypeVisitableExt};\n use rustc_trait_selection::traits::query::normalize::QueryNormalizeExt;\n use rustc_trait_selection::traits::{Normalized, ObligationCause};\n use std::sync::atomic::Ordering;\n@@ -22,7 +22,7 @@ pub(crate) fn provide(p: &mut Providers) {\n     };\n }\n \n-fn try_normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq + Copy>(\n+fn try_normalize_after_erasing_regions<'tcx, T: TypeFoldable<TyCtxt<'tcx>> + PartialEq + Copy>(\n     tcx: TyCtxt<'tcx>,\n     goal: ParamEnvAnd<'tcx, T>,\n ) -> Result<T, NoSolution> {"}, {"sha": "e0fd487b3d37f0ea2e67bacc38cb28b0ec7c4e7b", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -161,7 +161,7 @@ fn type_op_normalize<'tcx, T>(\n     key: ParamEnvAnd<'tcx, Normalize<T>>,\n ) -> Fallible<T>\n where\n-    T: fmt::Debug + TypeFoldable<'tcx> + Lift<'tcx>,\n+    T: fmt::Debug + TypeFoldable<TyCtxt<'tcx>> + Lift<'tcx>,\n {\n     let (param_env, Normalize { value }) = key.into_parts();\n     let Normalized { value, obligations } ="}, {"sha": "4b4a8ebd079fc863df6218206f04271c751f05d5", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -117,7 +117,7 @@ mod rustc {\n             c: Const<'tcx>,\n         ) -> Option<Self> {\n             use rustc_middle::ty::ScalarInt;\n-            use rustc_middle::ty::TypeVisitable;\n+            use rustc_middle::ty::TypeVisitableExt;\n             use rustc_span::symbol::sym;\n \n             let c = c.eval(tcx, param_env);"}, {"sha": "ae824a31f759fdc84091b06db47060a721783e09", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n use rustc_middle::thir::visit;\n use rustc_middle::thir::visit::Visitor;\n use rustc_middle::ty::abstract_const::CastKind;\n-use rustc_middle::ty::{self, Expr, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Expr, TyCtxt, TypeVisitableExt};\n use rustc_middle::{mir, thir};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;"}, {"sha": "2eaeca73da75f578392f870e94de87a06e1e5288", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -3,7 +3,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, Instance, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Instance, TyCtxt, TypeVisitableExt};\n use rustc_span::sym;\n use rustc_trait_selection::traits;\n use traits::{translate_substs, Reveal};"}, {"sha": "a400fbfe683eff3adde7b1d895f950ff4fd74b32", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::ty::layout::{\n     IntegerExt, LayoutCx, LayoutError, LayoutOf, TyAndLayout, MAX_SIMD_LANES,\n };\n use rustc_middle::ty::{\n-    self, subst::SubstsRef, AdtDef, EarlyBinder, ReprOptions, Ty, TyCtxt, TypeVisitable,\n+    self, subst::SubstsRef, AdtDef, EarlyBinder, ReprOptions, Ty, TyCtxt, TypeVisitableExt,\n };\n use rustc_session::{DataTypeKind, FieldInfo, FieldKind, SizeKind, VariantInfo};\n use rustc_span::symbol::Symbol;"}, {"sha": "a47e7ce23e3c0b81012a3d5d18d2ae6a9f98aaef", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -2,11 +2,9 @@ use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n-#[cfg(not(bootstrap))]\n-use rustc_middle::ty::ir::TypeVisitable;\n use rustc_middle::ty::{\n-    self, ir::TypeVisitor, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n-    TypeSuperVisitable,\n+    self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n+    TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_session::config::TraitSolver;\n use rustc_span::def_id::{DefId, CRATE_DEF_ID};"}, {"sha": "58223f322b21e68cffaf0a58a30c328def6baa52", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -22,9 +22,9 @@ use rustc_hir::PredicateOrigin;\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_bound_vars as rbv;\n-use rustc_middle::ty::fold::ir::TypeFolder;\n+use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::InternalSubsts;\n-use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_middle::ty::{self, AdtKind, DefIdTree, EarlyBinder, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::hygiene::{AstPass, MacroKind};"}, {"sha": "ef46e23123b92a7fa121d99e72a0077b61b42eea", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::mir::{Rvalue, StatementKind};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::{\n     self, Binder, BoundVariableKind, Clause, EarlyBinder, FnSig, GenericArgKind, List, ParamTy, PredicateKind,\n-    ProjectionPredicate, Ty, TyCtxt, TypeVisitable, TypeckResults,\n+    ProjectionPredicate, Ty, TyCtxt, TypeVisitableExt, TypeckResults,\n };\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span, Symbol};"}, {"sha": "b2071f4dcb1e2b5589eecdb578f65258317dcb74", "filename": "src/tools/clippy/clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::{Closure, Expr, ExprKind, Param, PatKind, Unsafety};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n-use rustc_middle::ty::{self, EarlyBinder, SubstsRef, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, EarlyBinder, SubstsRef, Ty, TypeVisitableExt};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n "}, {"sha": "5a533261cad8c336e5f6ba7b58ee763ae262efe6", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::{def_path_def_ids, trait_ref_of_method};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_middle::ty::{Adt, Array, Ref, Slice, Tuple, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::LocalDefId;"}, {"sha": "da3b6fa9899df7b29a8cacfe3a1310b9006539fe", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -18,7 +18,7 @@ use rustc_hir_typeck::expr_use_visitor as euv;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n-use rustc_middle::ty::{self, TypeVisitable};\n+use rustc_middle::ty::{self, TypeVisitableExt};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::kw;"}, {"sha": "6bdb9aa5a26d213bc2393998df675d7412ee4002", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, Expr, GenericArg, Mutability, Path, TyKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n \n /// Checks for `transmute_ptr_to_ref` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`."}, {"sha": "56207fe767c5716107cca75b48388463013e2a93", "filename": "src/tools/clippy/clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n \n /// Checks for `useless_transmute` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`."}, {"sha": "f7adc9d35558b8eaae9b16223409574bb89b4723", "filename": "src/tools/clippy/clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, QPath, TyKind};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_span::symbol::sym;\n \n use super::{utils, REDUNDANT_ALLOCATION};"}, {"sha": "d3062f3d2e36002f3dcf5e2135535397e29dc8d4", "filename": "src/tools/clippy/clippy_lints/src/types/vec_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::{self as hir, def_id::DefId, GenericArg, QPath, TyKind};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::LateContext;\n use rustc_middle::ty::layout::LayoutOf;\n-use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_span::symbol::sym;\n \n use super::VEC_BOX;"}, {"sha": "93e4b023c5c79a6e03f3cfcb0d7994b50706ead0", "filename": "src/tools/clippy/clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{self as hir, HirId, ItemKind, Node};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::layout::LayoutOf as _;\n-use rustc_middle::ty::{Adt, Ty, TypeVisitable};\n+use rustc_middle::ty::{Adt, Ty, TypeVisitableExt};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n "}, {"sha": "f02f8ecb43d7204568c012be76a2d7d4d87a10d0", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -104,7 +104,7 @@ use rustc_middle::ty::fast_reject::SimplifiedType::{\n     PtrSimplifiedType, SliceSimplifiedType, StrSimplifiedType, UintSimplifiedType,\n };\n use rustc_middle::ty::{\n-    layout::IntegerExt, BorrowKind, ClosureKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeVisitable, UpvarCapture,\n+    layout::IntegerExt, BorrowKind, ClosureKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeVisitableExt, UpvarCapture,\n };\n use rustc_middle::ty::{FloatTy, IntTy, UintTy};\n use rustc_span::hygiene::{ExpnKind, MacroKind};"}, {"sha": "920ce8e655be01d9dc44d38d4d2364c66026e906", "filename": "src/tools/clippy/clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_lint::LateContext;\n use rustc_middle::mir::{self, visit::Visitor as _, Mutability};\n-use rustc_middle::ty::{self, visit::ir::TypeVisitor, TyCtxt};\n+use rustc_middle::ty::{self, visit::TypeVisitor, TyCtxt};\n use rustc_mir_dataflow::{impls::MaybeStorageLive, Analysis, ResultsCursor};\n use std::borrow::Cow;\n use std::ops::ControlFlow;"}, {"sha": "34b9bb5994efa6ad8879c4df4626de3c207a6f0d", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -17,8 +17,8 @@ use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n     self, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate,\n-    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, ir::TypeVisitor, UintTy,\n-    VariantDef, VariantDiscr,\n+    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n+    VariantDef, VariantDiscr, TypeVisitableExt,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_span::symbol::Ident;\n@@ -847,7 +847,7 @@ pub fn for_each_top_level_late_bound_region<B>(\n                 ControlFlow::Continue(())\n             }\n         }\n-        fn visit_binder<T: TypeVisitable<'tcx>>(&mut self, t: &Binder<'tcx, T>) -> ControlFlow<Self::BreakTy> {\n+        fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(&mut self, t: &Binder<'tcx, T>) -> ControlFlow<Self::BreakTy> {\n             self.index += 1;\n             let res = t.super_visit_with(self);\n             self.index -= 1;"}, {"sha": "d2e34c00b6422e20633427c68213d7e6c62cc746", "filename": "tests/ui/impl-trait/normalize-tait-in-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/tests%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/tests%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.rs?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -2,6 +2,7 @@\n // failure-status: 101\n // normalize-stderr-test \"note: .*\\n\\n\" -> \"\"\n // normalize-stderr-test \"thread 'rustc' panicked.*\\n\" -> \"\"\n+// normalize-stderr-test \"(error: internal compiler error: [^:]+):\\d+:\\d+: \" -> \"$1:LL:CC: \"\n // rustc-env:RUST_BACKTRACE=0\n \n #![feature(type_alias_impl_trait)]"}, {"sha": "84b00918724e0c5bedc634daccbf21c4a3c7ac07", "filename": "tests/ui/impl-trait/normalize-tait-in-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/tests%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20/tests%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr?ref=fdbc4329cb781c7768ffa6d76c8fa2d032d3fe20", "patch": "@@ -1,4 +1,4 @@\n-error: internal compiler error: compiler/rustc_middle/src/ty/normalize_erasing_regions.rs:201:90: Failed to normalize <for<'a, 'b> fn(&'a Alias<'b>) {foo} as std::ops::FnOnce<(&&S,)>>::Output, maybe try to call `try_normalize_erasing_regions` instead\n+error: internal compiler error: compiler/rustc_middle/src/ty/normalize_erasing_regions.rs:LL:CC: Failed to normalize <for<'a, 'b> fn(&'a Alias<'b>) {foo} as std::ops::FnOnce<(&&S,)>>::Output, maybe try to call `try_normalize_erasing_regions` instead\n \n query stack during panic:\n #0 [eval_to_allocation_raw] const-evaluating + checking `BAR`"}]}