{"sha": "500ab357c263eaa8ae55ed1323daa946def5b7b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMGFiMzU3YzI2M2VhYThhZTU1ZWQxMzIzZGFhOTQ2ZGVmNWI3YjY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-08-29T19:47:44Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-01T13:43:44Z"}, "message": "ICH: Cleanup some comments.", "tree": {"sha": "b317aabc7c9ce5940b63f6cb56b5752276504803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b317aabc7c9ce5940b63f6cb56b5752276504803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/500ab357c263eaa8ae55ed1323daa946def5b7b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/500ab357c263eaa8ae55ed1323daa946def5b7b6", "html_url": "https://github.com/rust-lang/rust/commit/500ab357c263eaa8ae55ed1323daa946def5b7b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/500ab357c263eaa8ae55ed1323daa946def5b7b6/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6785256557d6a4c21d53806637042871babc7302", "url": "https://api.github.com/repos/rust-lang/rust/commits/6785256557d6a4c21d53806637042871babc7302", "html_url": "https://github.com/rust-lang/rust/commit/6785256557d6a4c21d53806637042871babc7302"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "702eed9d96fc524d08404067333d73e35bdc4614", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/500ab357c263eaa8ae55ed1323daa946def5b7b6/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500ab357c263eaa8ae55ed1323daa946def5b7b6/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=500ab357c263eaa8ae55ed1323daa946def5b7b6", "patch": "@@ -45,7 +45,7 @@ pub struct StrictVersionHashVisitor<'a, 'hash: 'a, 'tcx: 'hash> {\n \n struct CachingCodemapView<'tcx> {\n     codemap: &'tcx CodeMap,\n-    // Format: (line number, line-start, line_end, file)\n+    // Format: (line number, line-start, line-end, file)\n     line_cache: [(usize, BytePos, BytePos, Rc<FileMap>); 4],\n     eviction_index: usize,\n }\n@@ -100,7 +100,7 @@ impl<'tcx> CachingCodemapView<'tcx> {\n         let line_index = file.lookup_line(pos).unwrap();\n         let (line_start, line_end) = file.line_bounds(line_index);\n \n-        // Just overwrite some cache entry. If we got this for, all of them\n+        // Just overwrite some cache entry. If we got this far, all of them\n         // point to the wrong file.\n         self.line_cache[self.eviction_index] = (line_index + 1,\n                                                 line_start,\n@@ -131,11 +131,11 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n         self.def_path_hashes.hash(def_id)\n     }\n \n-    // Hash a span in a stable way. If we would just hash the spans BytePos\n-    // fields that would be similar hashing pointers since those or just offsets\n-    // into the CodeMap. Instead, we hash the (file name, line, column) triple,\n-    // which stays the same even if the containing FileMap has moved within the\n-    // CodeMap.\n+    // Hash a span in a stable way. We can't directly hash the span's BytePos\n+    // fields (that would be similar to hashing pointers, since those are just\n+    // offsets into the CodeMap). Instead, we hash the (file name, line, column)\n+    // triple, which stays the same even if the containing FileMap has moved\n+    // within the CodeMap.\n     // Also note that we are hashing byte offsets for the column, not unicode\n     // codepoint offsets. For the purpose of the hash that's sufficient.\n     fn hash_span(&mut self, span: Span) {\n@@ -462,7 +462,6 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n     fn visit_generics(&mut self, g: &'tcx Generics) {\n         debug!(\"visit_generics: st={:?}\", self.st);\n         SawGenerics.hash(self.st);\n-        // FIXME: nested stuff\n         visit::walk_generics(self, g)\n     }\n \n@@ -605,7 +604,8 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n             SawMacroDef.hash(self.st);\n             hash_attrs!(self, &macro_def.attrs);\n             visit::walk_macro_def(self, macro_def)\n-            // FIXME: We should hash the body of the macro too.\n+            // FIXME(mw): We should hash the body of the macro too but we don't\n+            //            have a stable way of doing so yet.\n         }\n     }\n }"}]}