{"sha": "38bdd0e0198196b545aeb64f0305707de163a83a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YmRkMGUwMTk4MTk2YjU0NWFlYjY0ZjAzMDU3MDdkZTE2M2E4M2E=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-26T20:01:16Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-27T15:33:02Z"}, "message": "Make all tests use type_alias_impl_trait feature instead of min", "tree": {"sha": "36613e7a32edcc0a49338fad8f29bdca0ed7abec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36613e7a32edcc0a49338fad8f29bdca0ed7abec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38bdd0e0198196b545aeb64f0305707de163a83a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmEAJzYACgkQgTGiTgx5\n76+2+g/8D+l/uz2bsLBYEbRiZnFA5SwkV40JQ92B0LP31rN2mKTosP/mmya7S/eh\nHPTu9b2G4mW7EnLajxtgbdSJZH6/gpXzM+s0N/WqSgMSmWb+5qWEYCp0kyY/9gyL\nQ1maQwxgtKc5/i+ViD/9Ds7mNlPg+zTigBolBQHI5yzFVc5/6QCVW+M2GwUx4utm\n6UpV2gVI63kArKu1GeTKqJTQJKGrp+EuwwQatQw5txExN5LvjgsSIukPvNtN4qAR\nl/wrWG0sFPT8KZfh3dbjkNOitWcWmqi3HDtgEWa5M4XS84GrvxiewREndl70c6vI\nLNkXT2WxXNOphJa4fqXKyH++6wrEcO8uFI/uDIrT/er2aHtm/O0aiEf70Ly2iOxr\nONY+4FiIsMfxkkRbNwP52Kq29OS1pof0mdXjQTRQyTRaAdDkP5YlpLTBPXBhJO5n\n4QdmfmNpVMqRf4vW5nwcryEVap3VS60X+PCAGvlMlt9sUBZmPQf9S6wT9KOdUP0v\nmS5Ln1xbYb/s5jCmUj4PQulC2zmsicncwt+ojhiiEq5NJLlq8vLMyc1gaeu9eaa4\nchwIyw2IfkwmxEnKCxuy1cJ3BqLlivNOmXSKIIr3dUC9HZZdmaNZfxz5Q1nPhNCR\nR/9/qtcf4/qBXhVedgum4pq9vROn7ESKCNTGlMGiGnB1qlK6a5s=\n=G8b2\n-----END PGP SIGNATURE-----", "payload": "tree 36613e7a32edcc0a49338fad8f29bdca0ed7abec\nparent 5bff8429a0655320c1aef0c16fb0fd2ec0184a9a\nauthor Santiago Pastorino <spastorino@gmail.com> 1627329676 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1627399982 -0300\n\nMake all tests use type_alias_impl_trait feature instead of min\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38bdd0e0198196b545aeb64f0305707de163a83a", "html_url": "https://github.com/rust-lang/rust/commit/38bdd0e0198196b545aeb64f0305707de163a83a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38bdd0e0198196b545aeb64f0305707de163a83a/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "html_url": "https://github.com/rust-lang/rust/commit/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a"}], "stats": {"total": 3236, "additions": 2713, "deletions": 523}, "files": [{"sha": "89b59e5f00f1c4cbdaed0612dd64349b0daf413a", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -287,7 +287,7 @@ impl<'a> PostExpansionVisitor<'a> {\n                 if let ast::TyKind::ImplTrait(..) = ty.kind {\n                     gate_feature_post!(\n                         &self.vis,\n-                        min_type_alias_impl_trait,\n+                        type_alias_impl_trait,\n                         ty.span,\n                         \"`impl Trait` in type aliases is unstable\"\n                     );"}, {"sha": "daa08ec25823bf9fc0db6bb4798d7ff62e79be07", "filename": "src/test/rustdoc-ui/coverage/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,7 +2,7 @@\n // check-pass\n \n #![feature(trait_alias)]\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n /// look at this trait right here\n pub trait ThisTrait {"}, {"sha": "31dd786cbbf8974bdea235940088b5a8ede648ad", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n pub trait ValidTrait {}\n type ImplTrait = impl ValidTrait;"}, {"sha": "c18a024af4bbc88eca84a20d221af858989b75a5", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n pub trait ValidTrait {}\n type ImplTrait = impl ValidTrait;"}, {"sha": "e05a3bc6d91807673ae47ea45433ed8f8d37d90e", "filename": "src/test/rustdoc/auxiliary/issue-73061.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-73061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-73061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-73061.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,6 @@\n //edition:2018\n \n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n pub trait Foo {\n     type X: std::future::Future<Output = ()>;"}, {"sha": "54c3f856ddb3c0ad8a2f901c2e8a3e3ae9a5d0c7", "filename": "src/test/rustdoc/impl-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n trait MyTrait {}\n impl MyTrait for i32 {}"}, {"sha": "1ccf5ac46119adcf609cb37ab7809e468ac787ba", "filename": "src/test/rustdoc/return-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Frustdoc%2Freturn-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Frustdoc%2Freturn-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freturn-impl-trait.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n pub trait Backend {}\n "}, {"sha": "e1dc6f8f4b63dbefcee231e0b5b29ab824b765e0", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,5 @@\n #![feature(associated_type_bounds)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![feature(untagged_unions)]\n \n use std::iter;"}, {"sha": "e4f4836f71ab21827cd5d434f97b1e390dfee745", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "added", "additions": 483, "deletions": 0, "changes": 483, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,483 @@\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:7:36\n+   |\n+LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> {\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:11:36\n+   |\n+LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> {\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:15:39\n+   |\n+LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> {\n+   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:21:29\n+   |\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:28:29\n+   |\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:35:32\n+   |\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:41:34\n+   |\n+LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> {\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:45:34\n+   |\n+LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> {\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:49:37\n+   |\n+LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> {\n+   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:55:29\n+   |\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:62:29\n+   |\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:69:32\n+   |\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:75:35\n+   |\n+LL | union UI1<T: Iterator<Item: Copy, Item: Send>> {\n+   |                       ----------  ^^^^^^^^^^ re-bound here\n+   |                       |\n+   |                       `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:79:35\n+   |\n+LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> {\n+   |                       ----------  ^^^^^^^^^^ re-bound here\n+   |                       |\n+   |                       `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:83:38\n+   |\n+LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> {\n+   |                       -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                       |\n+   |                       `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:89:29\n+   |\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:96:29\n+   |\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:103:32\n+   |\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:109:32\n+   |\n+LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:111:32\n+   |\n+LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:113:35\n+   |\n+LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n+   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:117:29\n+   |\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:123:29\n+   |\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:129:32\n+   |\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:143:40\n+   |\n+LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:145:40\n+   |\n+LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:147:43\n+   |\n+LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n+   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:150:35\n+   |\n+LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n+   |                       ----------  ^^^^^^^^^^ re-bound here\n+   |                       |\n+   |                       `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:152:35\n+   |\n+LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n+   |                       ----------  ^^^^^^^^^^ re-bound here\n+   |                       |\n+   |                       `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:154:38\n+   |\n+LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n+   |                       -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                       |\n+   |                       `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:158:29\n+   |\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:163:29\n+   |\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:168:32\n+   |\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:172:36\n+   |\n+LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:174:36\n+   |\n+LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:176:39\n+   |\n+LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n+   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:178:40\n+   |\n+LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:180:40\n+   |\n+LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:182:43\n+   |\n+LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n+   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:185:36\n+   |\n+LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:187:36\n+   |\n+LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:189:39\n+   |\n+LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n+   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:191:34\n+   |\n+LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:193:34\n+   |\n+LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:195:37\n+   |\n+LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n+   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:199:29\n+   |\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:205:29\n+   |\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:211:32\n+   |\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:217:32\n+   |\n+LL |     Self: Iterator<Item: Copy, Item: Send>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:217:32\n+   |\n+LL |     Self: Iterator<Item: Copy, Item: Send>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:224:32\n+   |\n+LL |     Self: Iterator<Item: Copy, Item: Copy>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:224:32\n+   |\n+LL |     Self: Iterator<Item: Copy, Item: Copy>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:231:35\n+   |\n+LL |     Self: Iterator<Item: 'static, Item: 'static>,\n+   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:231:35\n+   |\n+LL |     Self: Iterator<Item: 'static, Item: 'static>,\n+   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:249:40\n+   |\n+LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:251:44\n+   |\n+LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n+   |                                ----------  ^^^^^^^^^^ re-bound here\n+   |                                |\n+   |                                `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:253:43\n+   |\n+LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n+   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:237:34\n+   |\n+LL |     type A: Iterator<Item: Copy, Item: Send>;\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:241:34\n+   |\n+LL |     type A: Iterator<Item: Copy, Item: Copy>;\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:245:37\n+   |\n+LL |     type A: Iterator<Item: 'static, Item: 'static>;\n+   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error: aborting due to 60 previous errors\n+\n+For more information about this error, try `rustc --explain E0719`."}, {"sha": "e223a8957417011c80ce11162ff1e756fbd97d39", "filename": "src/test/ui/associated-type-bounds/trait-alias-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // run-pass\n \n #![feature(associated_type_bounds)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::ops::Add;\n "}, {"sha": "4d2e39f4da60c788e9e625a3a62584b5daf508ac", "filename": "src/test/ui/associated-types/issue-63591.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // check-pass\n \n #![feature(associated_type_bounds)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "66a3b07c3bd968d86523c5c269ced1838d44933d", "filename": "src/test/ui/async-await/issues/issue-60655-latebound-regions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -3,9 +3,7 @@\n // check-pass\n // edition:2018\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::future::Future;\n "}, {"sha": "e0bb7dbfae9f1f793113f91a5ea60b519adfa496", "filename": "src/test/ui/entry-point/imported_main_const_fn_item_type_forbidden.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,5 +1,5 @@\n #![feature(imported_main)]\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n #![allow(incomplete_features)]\n //~^^^ ERROR `main` function not found in crate\n pub mod foo {"}, {"sha": "6aa170fdfd2a77aea894d41a2ec135e1047841f9", "filename": "src/test/ui/entry-point/imported_main_const_fn_item_type_forbidden.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,7 +2,7 @@ error[E0601]: `main` function not found in crate `imported_main_const_fn_item_ty\n   --> $DIR/imported_main_const_fn_item_type_forbidden.rs:1:1\n    |\n LL | / #![feature(imported_main)]\n-LL | | #![feature(min_type_alias_impl_trait)]\n+LL | | #![feature(type_alias_impl_trait)]\n LL | | #![allow(incomplete_features)]\n LL | |\n ...  |"}, {"sha": "c87f1f4f00de67fee9136341f1467831f2c3fa87", "filename": "src/test/ui/feature-gates/feature-gate-min_type_alias_impl_trait.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -5,7 +5,7 @@ LL | type Foo = impl Debug;\n    |            ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/feature-gate-min_type_alias_impl_trait.rs:12:16\n@@ -14,7 +14,7 @@ LL |     type Baa = impl Debug;\n    |                ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: associated type defaults are unstable\n   --> $DIR/feature-gate-min_type_alias_impl_trait.rs:23:5\n@@ -32,7 +32,7 @@ LL |     type Assoc = impl Debug;\n    |                  ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/feature-gate-min_type_alias_impl_trait.rs:29:24\n@@ -41,7 +41,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    |                        ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/feature-gate-min_type_alias_impl_trait.rs:29:37\n@@ -50,7 +50,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    |                                     ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/feature-gate-min_type_alias_impl_trait.rs:29:49\n@@ -59,7 +59,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/feature-gate-min_type_alias_impl_trait.rs:29:70\n@@ -68,7 +68,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    |                                                                      ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/feature-gate-min_type_alias_impl_trait.rs:40:21\n@@ -77,7 +77,7 @@ LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debu\n    |                     ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/feature-gate-min_type_alias_impl_trait.rs:40:34\n@@ -86,7 +86,7 @@ LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debu\n    |                                  ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/feature-gate-min_type_alias_impl_trait.rs:40:46\n@@ -95,7 +95,7 @@ LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debu\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/feature-gate-min_type_alias_impl_trait.rs:40:67\n@@ -104,7 +104,7 @@ LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debu\n    |                                                                   ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/feature-gate-min_type_alias_impl_trait.rs:23:18"}, {"sha": "ea82837d4bf55364de91c9d446cbe7fcacfbae4c", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,5 +1,5 @@\n // ignore-compare-mode-chalk\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n use std::fmt::Debug;\n \n type Foo = impl Debug;\n@@ -13,7 +13,7 @@ fn define() -> Bar {\n type Foo2 = impl Debug;\n \n fn define2() {\n-    let x = || -> Foo2 { 42 }; //~ ERROR not permitted here\n+    let x = || -> Foo2 { 42 };\n }\n \n type Foo3 = impl Debug;"}, {"sha": "da3ddb1c50979f852528bc26518b9b028dd54c88", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -10,15 +10,6 @@ LL |     Bar(42)\n    = note: expected opaque type `impl Debug`\n                      found type `{integer}`\n \n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:16:19\n-   |\n-LL |     let x = || -> Foo2 { 42 };\n-   |                   ^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n error[E0308]: mismatched types\n   --> $DIR/feature-gate-type_alias_impl_trait.rs:23:18\n    |\n@@ -77,7 +68,6 @@ error: could not find defining uses\n LL | type Foo4 = impl Debug;\n    |             ^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0308, E0658.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7c3d187409a2f808cc94660797888fa78a518312", "filename": "src/test/ui/generator/layout-error.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -3,9 +3,7 @@\n //\n // edition:2018\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n use std::future::Future;\n \n pub struct Task<F: Future>(F);\n@@ -26,5 +24,5 @@ fn main() {\n     type F = impl Future;\n     // Check that statics are inhabited computes they layout.\n     static POOL: Task<F> = Task::new();\n-    Task::spawn(&POOL, || cb()); //[min_tait]~ ERROR type alias impl trait is not permitted here\n+    Task::spawn(&POOL, || cb());\n }"}, {"sha": "b1a258f4f2ca7d10214377632981648d158528e1", "filename": "src/test/ui/generator/layout-error.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `Foo` in this scope\n+  --> $DIR/layout-error.rs:21:17\n+   |\n+LL |         let a = Foo;\n+   |                 ^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "d0e648ee775fa3159f1844f8dfce640d2d73a1f0", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -5,9 +5,7 @@\n //\n // aux-build:metadata-sufficient-for-layout.rs\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait, rustc_attrs)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait, rustc_attrs)]\n #![feature(generator_trait)]\n \n extern crate metadata_sufficient_for_layout;"}, {"sha": "3488b04f2267ed6b608decb6a25545c1b0184548", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,8 @@\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/metadata-sufficient-for-layout.rs:25:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6c7c46b0e3dbbedb83184ced46bf061757a82363", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-generic-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "cdda341cad87ab1bcfb827eb4c7408b0da86da81", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-trivial.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "d0661d66f4b48dd25508aba00c6dffe98e0af2bd", "filename": "src/test/ui/impl-trait/associated-impl-trait-type.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "cf2773f4ef59dc921a6e919aab056bb13c89f94a", "filename": "src/test/ui/impl-trait/auto-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // Tests that type alias impls traits do not leak auto-traits for\n // the purposes of coherence checking\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait OpaqueTrait {}\n impl<T> OpaqueTrait for T {}"}, {"sha": "26cd8fb6a9b5c44ecfab90bc567522a4b2a025f3", "filename": "src/test/ui/impl-trait/auto-trait.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n+  --> $DIR/auto-trait.rs:21:1\n+   |\n+LL | impl<T: Send> AnotherTrait for T {}\n+   | -------------------------------- first implementation here\n+...\n+LL | impl AnotherTrait for D<OpaqueType> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "51718079d2c48fb6c54e20c909d7e01d154302be", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -4,7 +4,7 @@\n //[sa] compile-flags: -Z save-analysis\n //-^ To make this the regression test for #75962.\n \n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n // See issue 60414\n "}, {"sha": "72a060abae3e77f7267dce6b001cf52f48004ddb", "filename": "src/test/ui/impl-trait/issue-55872-1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "6411c1b5d1ca2c080f27aa0b5dc4be1b204dea2a", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,48 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/issue-55872-1.rs:14:5\n+   |\n+LL |     fn foo<T>() -> Self::E;\n+   |     ----------------------- definition of `foo` from trait\n+...\n+LL |     fn foo<T: Default>() -> Self::E {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n+\n+error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n+  --> $DIR/issue-55872-1.rs:10:14\n+   |\n+LL |     type E = impl Copy;\n+   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n+   |\n+   = note: required because it appears within the type `(S, T)`\n+help: consider further restricting this bound\n+   |\n+LL | impl<S: Default + std::marker::Copy> Bar for S {\n+   |                 ^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n+  --> $DIR/issue-55872-1.rs:10:14\n+   |\n+LL |     type E = impl Copy;\n+   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n+   |\n+   = note: required because it appears within the type `(S, T)`\n+help: consider further restricting this bound\n+   |\n+LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n+   |                       ^^^^^^^^^^^^^^^^^^^\n+\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872-1.rs:14:37\n+   |\n+LL |       fn foo<T: Default>() -> Self::E {\n+   |  _____________________________________^\n+LL | |\n+LL | |\n+LL | |         (S::default(), T::default())\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0276, E0277.\n+For more information about an error, try `rustc --explain E0276`."}, {"sha": "6eda1dc62ec62895a1a8b197a2547ddee3283bb2", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // edition:2018\n // ignore-compare-mode-chalk\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "58c5ee45051af2159fcfd9994ccc2ec5d69544cc", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n+  --> $DIR/issue-55872-2.rs:13:14\n+   |\n+LL |     type E = impl std::marker::Copy;\n+   |              ^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n+\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872-2.rs:15:28\n+   |\n+LL |       fn foo<T>() -> Self::E {\n+   |  ____________________________^\n+LL | |\n+LL | |         async {}\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "bbd940254178ce45ffe4dfff6ec5c35b8808f50d", "filename": "src/test/ui/impl-trait/issue-55872.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,5 @@\n // ignore-compare-mode-chalk\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "60654ec34610fc24321c244905b55dc66950a454", "filename": "src/test/ui/impl-trait/issue-55872.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,12 @@\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872.rs:13:28\n+   |\n+LL |       fn foo<T>() -> Self::E {\n+   |  ____________________________^\n+LL | |\n+LL | |         || ()\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a6976daff01864dc63eb8944029556f9167e8db4", "filename": "src/test/ui/impl-trait/issue-86465.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n type X<'a, 'b> = impl std::fmt::Debug;\n "}, {"sha": "7b9c2c53aad4fac996de58910bdfb72f9051966d", "filename": "src/test/ui/impl-trait/issues/issue-53457.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,6 @@\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-\n+#![feature(type_alias_impl_trait)]\n type X = impl Clone;\n \n fn bar<F: Fn(&i32) + Clone>(f: F) -> F {"}, {"sha": "853c2a82bede4b000b4045c55c48cbf2cf15c488", "filename": "src/test/ui/impl-trait/issues/issue-70877.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-#![allow(incomplete_features)]\n+#![feature(type_alias_impl_trait)]\n \n type FooArg<'a> = &'a dyn ToString;\n type FooRet = impl std::fmt::Debug;"}, {"sha": "b6861039f6a993db2d99ca577a4e34e70e665e03", "filename": "src/test/ui/impl-trait/issues/issue-70877.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,15 @@\n+error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n+  --> $DIR/issue-70877.rs:7:12\n+   |\n+LL | type FooRet = impl std::fmt::Debug;\n+   |               -------------------- the found opaque type\n+...\n+LL | type Foo = impl Iterator<Item = FooItem>;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found opaque type\n+   |\n+   = note: expected struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n+              found struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "bdbd20f9d2b884d500e152aee0cb66e2d947ebe8", "filename": "src/test/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type F = impl core::future::Future<Output = u8>;\n "}, {"sha": "f42d66d12435c2e933f6053d2970aec5d56a8728", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-78722.rs:12:20\n+   |\n+LL | type F = impl core::future::Future<Output = u8>;\n+   |          -------------------------------------- the expected opaque type\n+...\n+LL |         let f: F = async { 1 };\n+   |                -   ^^^^^^^^^^^ expected opaque type, found a different opaque type\n+   |                |\n+   |                expected due to this\n+   | \n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:5:10>)\n+              found opaque type `impl Future` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n+   = note: distinct uses of `impl Trait` result in different opaque types\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8cc4fef890abf8a40c3460ffa309e191203b15f3", "filename": "src/test/ui/impl-trait/issues/issue-86201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,5 +1,5 @@\n #![feature(unboxed_closures)]\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n type FunType = impl Fn<()>;\n //~^ could not find defining uses"}, {"sha": "96d891b2cf1d7276b1d8fc9ab2aeff81d7f770e3", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // compile-flags:-Zborrowck=mir\n \n #![feature(member_constraints)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n #[derive(Clone)]\n struct CopyIfEq<T, U>(T, U);"}, {"sha": "59105f11805cd0c27de0c55025cf579a87873da1", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,15 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/error-handling-2.rs:13:60\n+   |\n+LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n+   |                                                            ^^^^^^^^^\n+   |\n+note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 13:8\n+  --> $DIR/error-handling-2.rs:13:8\n+   |\n+LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n+   |        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "6d88f16ea8abb86c095242a2b4639809932d42da", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // compile-flags:-Zborrowck=mir\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n #[derive(Clone)]\n struct CopyIfEq<T, U>(T, U);"}, {"sha": "ccd0040030da2044edde008cdd951cc306c6b5ee", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,15 @@\n+error: lifetime may not live long enough\n+  --> $DIR/error-handling.rs:22:16\n+   |\n+LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |         let _: &'b i32 = *u.0;\n+   |                ^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+error: aborting due to previous error\n+"}, {"sha": "529dcd8ece6f84b81c2aa496f8de1da89cf600b5", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -3,7 +3,7 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n "}, {"sha": "d173fe83fb7913c35699f933005570245680faac", "filename": "src/test/ui/impl-trait/negative-reasoning.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // Tests that we cannot assume that an opaque type does *not* implement some\n // other trait\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait OpaqueTrait {}\n impl<T> OpaqueTrait for T {}"}, {"sha": "e39a8e53f7985cbe87b2f75059443eca18c1e88a", "filename": "src/test/ui/impl-trait/negative-reasoning.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n+  --> $DIR/negative-reasoning.rs:19:1\n+   |\n+LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n+   | ------------------------------------------- first implementation here\n+...\n+LL | impl AnotherTrait for D<OpaqueType> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n+   |\n+   = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `impl OpaqueTrait` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "3499b2859267caafb2d755c190dc9394fc9b3f71", "filename": "src/test/ui/impl-trait/type-alias-generic-param.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -3,9 +3,7 @@\n // types in 'item' position when generic parameters are involved\n //\n // run-pass\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait Meow {\n     type MeowType;"}, {"sha": "91be4efd56a154889cd6908b0337802312bffe5b", "filename": "src/test/ui/impl-trait/type-alias-impl-trait-in-fn-body.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "7f11d30dbaa5faafe272cfcbf75da31e42a04b37", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -23,7 +23,7 @@ LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/where-allowed.rs:154:23\n@@ -32,7 +32,7 @@ LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/where-allowed.rs:157:39\n@@ -41,7 +41,7 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:15:40"}, {"sha": "88bbbd143fb8ba9407f08355edee91ea638c99ee", "filename": "src/test/ui/issues/issue-60662.full_tait.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stdout?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: -Z unpretty=hir\n \n // revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n #![feature(type_alias_impl_trait)]\n #[prelude_import]\n use ::std::prelude::rust_2015::*;"}, {"sha": "c2495556f60292cca954e0c3a43797df4f80969c", "filename": "src/test/ui/issues/issue-60662.min_tait.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fissues%2Fissue-60662.min_tait.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fissues%2Fissue-60662.min_tait.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.min_tait.stdout?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: -Z unpretty=hir\n \n // revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n #[prelude_import]\n use ::std::prelude::rust_2015::*;\n #[macro_use]"}, {"sha": "b9faa668b80ebbbc7c70538ac6910436561591d5", "filename": "src/test/ui/issues/issue-60662.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // check-pass\n // compile-flags: -Z unpretty=hir\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait Animal {}\n "}, {"sha": "14a49f20e6b22f9850e8c588f4c779f8e78d7a9b", "filename": "src/test/ui/issues/issue-60662.stdout", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+// compile-flags: -Z unpretty=hir\n+\n+#![feature(type_alias_impl_trait)]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+\n+trait Animal { }\n+\n+fn main() {\n+              pub type ServeFut = /*impl Trait*/;\n+          }"}, {"sha": "299151df6649339dc6ed3bda802793e040a83668", "filename": "src/test/ui/layout/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,5 +1,5 @@\n // normalize-stderr-test \"pref: Align \\{\\n *pow2: [1-3],\\n *\\}\" -> \"pref: $$PREF_ALIGN\"\n-#![feature(never_type, rustc_attrs, min_type_alias_impl_trait)]\n+#![feature(never_type, rustc_attrs, type_alias_impl_trait)]\n #![crate_type = \"lib\"]\n \n #[rustc_layout(debug)]"}, {"sha": "6321b3c76e4d18a8bbedcf9e087aa0e17f24807e", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,5 @@\n #![feature(extern_types)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n #![warn(unused_attributes)]\n "}, {"sha": "6ac884c12ceb9a7df3455f0d8d7dcae478ad3e87", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,72 @@\n+warning: `#[inline]` is ignored on constants\n+  --> $DIR/inline-trait-and-foreign-items.rs:7:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/inline-trait-and-foreign-items.rs:4:9\n+   |\n+LL | #![warn(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:11:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type T;\n+   |     ------- not a function or closure\n+\n+warning: `#[inline]` is ignored on constants\n+  --> $DIR/inline-trait-and-foreign-items.rs:18:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:22:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type T = Self;\n+   |     -------------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:25:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type U = impl Trait;\n+   |     -------------------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:30:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     static X: u32;\n+   |     -------------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:33:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type T;\n+   |     ------- not a function or closure\n+\n+error: could not find defining uses\n+  --> $DIR/inline-trait-and-foreign-items.rs:26:14\n+   |\n+LL |     type U = impl Trait;\n+   |              ^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0518`."}, {"sha": "fe578f51b63a0e4280b580764c0458b5eb7f5139", "filename": "src/test/ui/lint/lint-ctypes-73249-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n pub trait Baz {}"}, {"sha": "36dbe3217d75ada5d0e445ea6b3f217c669109cf", "filename": "src/test/ui/lint/lint-ctypes-73249-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,15 @@\n+error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73249-2.rs:26:25\n+   |\n+LL |     pub fn lint_me() -> A<()>;\n+   |                         ^^^^^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73249-2.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error\n+"}, {"sha": "ec12de00739e4b7a24ad66fc80e0e7523ae4a4a4", "filename": "src/test/ui/lint/lint-ctypes-73249-3.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n pub trait Baz {}"}, {"sha": "e987ec90228c1d4bc19027c8a4da6f8e4fe4b8e0", "filename": "src/test/ui/lint/lint-ctypes-73249-3.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,15 @@\n+error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73249-3.rs:20:25\n+   |\n+LL |     pub fn lint_me() -> A;\n+   |                         ^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73249-3.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error\n+"}, {"sha": "58c2d7a501ad5060a4b2991b41f40c25bdf44d99", "filename": "src/test/ui/lint/lint-ctypes-73249-5.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n pub trait Baz {}"}, {"sha": "749714c7df8d7535a446ac02a182f62890736157", "filename": "src/test/ui/lint/lint-ctypes-73249-5.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,15 @@\n+error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73249-5.rs:20:25\n+   |\n+LL |     pub fn lint_me() -> A;\n+   |                         ^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73249-5.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error\n+"}, {"sha": "dc4c7efd7ef233e5b5be66822eff261c43594b9d", "filename": "src/test/ui/lint/lint-ctypes-73251-1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n pub trait Baz {}"}, {"sha": "505ccd5a930ce4de02f6e80852f954da8c681e6b", "filename": "src/test/ui/lint/lint-ctypes-73251-1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,15 @@\n+error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73251-1.rs:23:25\n+   |\n+LL |     pub fn lint_me() -> <u32 as Foo>::Assoc;\n+   |                         ^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73251-1.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error\n+"}, {"sha": "79effd054b083f0db31ef8c209c0e91cb15b0fc3", "filename": "src/test/ui/lint/lint-ctypes-73251-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n pub trait TraitA {"}, {"sha": "94ee95d422e086f7cf7c7445f95ee9147d1869ef", "filename": "src/test/ui/lint/lint-ctypes-73251-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,15 @@\n+error: `extern` block uses type `impl TraitA`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73251-2.rs:36:25\n+   |\n+LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73251-2.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error\n+"}, {"sha": "ebc2ca77b67a13a31510dc6f1485dbddf33334b6", "filename": "src/test/ui/lint/lint-ctypes-73251.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n pub trait Foo {"}, {"sha": "fadb7471952f59e384375dbb7a193b82b8b7852f", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n type A = impl Fn();"}, {"sha": "9d46f6d936e25273f97ebd28d286b65691e1662a", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,15 @@\n+error: `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:11:17\n+   |\n+LL |     pub fn a(_: A);\n+   |                 ^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error\n+"}, {"sha": "cb56eaa0b13d920eae77bbf1355e9f732ce08119", "filename": "src/test/ui/mir/issue-75053.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // compile-flags: -Z mir-opt-level=3\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait, rustc_attrs)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait, rustc_attrs)]\n \n use std::marker::PhantomData;\n "}, {"sha": "64e59e6c44825ef0a97b47c4ad313cef3deea071", "filename": "src/test/ui/mir/issue-75053.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fmir%2Fissue-75053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fmir%2Fissue-75053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,8 @@\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-75053.rs:46:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "fba72c13170feafd8a227547155f3134fb4c1b3f", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,9 +2,7 @@\n // This test also ensures that the checks are performed even inside private modules.\n \n #![feature(associated_type_defaults)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n mod m {\n     struct Priv;"}, {"sha": "ba62a228b09fe66c60213fbce885f78f18f91707", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,68 @@\n+error[E0446]: private type `Priv` in public interface\n+  --> $DIR/private-in-public-assoc-ty.rs:17:9\n+   |\n+LL |     struct Priv;\n+   |     ------------ `Priv` declared as private\n+...\n+LL |         type A = Priv;\n+   |         ^^^^^^^^^^^^^^ can't leak private type\n+\n+warning: private trait `PrivTr` in public interface (error E0445)\n+  --> $DIR/private-in-public-assoc-ty.rs:24:9\n+   |\n+LL |         type Alias1: PrivTr;\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(private_in_public)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+warning: private type `Priv` in public interface (error E0446)\n+  --> $DIR/private-in-public-assoc-ty.rs:27:9\n+   |\n+LL |         type Alias2: PubTrAux1<Priv> = u8;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+warning: private type `Priv` in public interface (error E0446)\n+  --> $DIR/private-in-public-assoc-ty.rs:30:9\n+   |\n+LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+error[E0446]: private type `Priv` in public interface\n+  --> $DIR/private-in-public-assoc-ty.rs:34:9\n+   |\n+LL |     struct Priv;\n+   |     ------------ `Priv` declared as private\n+...\n+LL |         type Alias4 = Priv;\n+   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n+\n+error[E0446]: private type `Priv` in public interface\n+  --> $DIR/private-in-public-assoc-ty.rs:41:9\n+   |\n+LL |     struct Priv;\n+   |     ------------ `Priv` declared as private\n+...\n+LL |         type Alias1 = Priv;\n+   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n+\n+error[E0445]: private trait `PrivTr` in public interface\n+  --> $DIR/private-in-public-assoc-ty.rs:44:9\n+   |\n+LL |     trait PrivTr {}\n+   |     ------------ `PrivTr` declared as private\n+...\n+LL |         type Exist = impl PrivTr;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+\n+error: aborting due to 4 previous errors; 3 warnings emitted\n+\n+Some errors have detailed explanations: E0445, E0446.\n+For more information about an error, try `rustc --explain E0445`."}, {"sha": "c7df31529bcf348aa12ba88f31b63c1ee1984f79", "filename": "src/test/ui/privacy/private-in-public-type-alias-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![deny(private_in_public)]\n \n pub type Pub = impl Default;"}, {"sha": "96af085c5b6b8d8692ed0c7d8e2f196447589cf1", "filename": "src/test/ui/save-analysis/issue-68621.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // compile-flags: -Zsave-analysis\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait Trait {}\n "}, {"sha": "3af6d0a3e076e74dcfb886c0e0d77e79037a64a2", "filename": "src/test/ui/save-analysis/issue-68621.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,8 @@\n+error: could not find defining uses\n+  --> $DIR/issue-68621.rs:14:19\n+   |\n+LL |     type Future = impl Trait;\n+   |                   ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0013d5d66f172389733c6123a51f0394ef2f1da4", "filename": "src/test/ui/traits/alias/issue-83613.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n trait OpaqueTrait {}\n impl<T> OpaqueTrait for T {}\n type OpaqueType = impl OpaqueTrait;"}, {"sha": "d53f562e99f4bf8ee866c554f5b0a1bb7cdcde09", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,9 +2,7 @@\n // const generics in an associated opaque type\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n "}, {"sha": "e0c1b023861278b69a07989c53c0dd367693ae14", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/assoc-type-const.rs:6:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "3f34b00ec77e1b139d044e01e4f5118da263f1b8", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // Tests that we don't allow unconstrained lifetime parameters in impls when\n // the lifetime is used in an associated opaque type.\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait UnwrapItemsExt {\n     type Iter;"}, {"sha": "e594dc577b1cd1378ce73a76b2bdaed35921cf75", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/assoc-type-lifetime-unconstrained.rs:17:6\n+   |\n+LL | impl<'a, I> UnwrapItemsExt for I {\n+   |      ^^ unconstrained lifetime parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "39f785d8cc55d5d6e58d6a306112e5fe5c108ede", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,9 +2,7 @@\n // lifetimes are used in an associated opaque type\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait UnwrapItemsExt<'a> {\n     type Iter;"}, {"sha": "42f07d49ffe25355e713f06e17f7dc3c600f2854", "filename": "src/test/ui/type-alias-impl-trait/associated-type-alias-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "e7bca2231de4b97366cbdb55537838f56114b95b", "filename": "src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // Crate that exports an opaque `impl Trait` type. Used for testing cross-crate.\n \n #![crate_type = \"rlib\"]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n pub type Foo = impl std::fmt::Debug;\n "}, {"sha": "119f7df1ffdad4b359c10354ed9d9db6aabbe668", "filename": "src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // Crate that exports an opaque `impl Trait` type. Used for testing cross-crate.\n \n #![crate_type = \"rlib\"]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n pub trait View {\n     type Tmp: Iterator<Item = u32>;"}, {"sha": "b9b50f0b77aa389a47eea3dd47e28b44b30d4d19", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n #![allow(warnings)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {\n }"}, {"sha": "a15074c35936bb2d10cd04ac5d8b5cb27908c086", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "c9d6a43b9094ace0c5ea08b930d92eca1f44439a", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/bound_reduction2.rs:15:46\n+   |\n+LL | fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n+   |                                              ^^^^^^^^^^^^^\n+   |\n+note: used non-generic type `<T as TraitWithAssoc>::Assoc` for generic parameter\n+  --> $DIR/bound_reduction2.rs:9:10\n+   |\n+LL | type Foo<V> = impl Trait<V>;\n+   |          ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c0359159aebeac4e0eaee315bf260c6351b100c1", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // Make sure that we check that impl trait types implement the traits that they\n // claim to.\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type X<T> = impl Clone;\n //~^ ERROR the trait bound `T: Clone` is not satisfied"}, {"sha": "c1f58aa6de6636806332de891339c741f1660027", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the trait bound `T: Clone` is not satisfied\n+  --> $DIR/bounds-are-checked-2.rs:6:13\n+   |\n+LL | type X<T> = impl Clone;\n+   |             ^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | type X<T: std::clone::Clone> = impl Clone;\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "eecef2338c146095d6e4ae31c4cc73c5612fc10a", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // Make sure that we check that impl trait types implement the traits that they\n // claim to.\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type X<'a> = impl Into<&'static str> + From<&'a str>;\n //~^ ERROR mismatched types"}, {"sha": "d5fafe05887b9e1175e473810bd85f587d3a9b8d", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,26 @@\n+warning: unnecessary lifetime parameter `'a`\n+  --> $DIR/bounds-are-checked.rs:9:6\n+   |\n+LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n+   |      ^^^^^^^^^^^\n+   |\n+   = help: you can use the `'static` lifetime directly, in place of `'a`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/bounds-are-checked.rs:6:14\n+   |\n+LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected trait `From<&'a str>`\n+              found trait `From<&'static str>`\n+note: the lifetime `'a` as defined on the item at 6:8...\n+  --> $DIR/bounds-are-checked.rs:6:8\n+   |\n+LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n+   |        ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1c0f83d6c12da643ed6803a60db80bd303345c3a", "filename": "src/test/ui/type-alias-impl-trait/coherence.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,5 @@\n // aux-build:foreign-crate.rs\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n extern crate foreign_crate;\n "}, {"sha": "6ede0fa14ba707abf6d2b180935d86e69d52ac19", "filename": "src/test/ui/type-alias-impl-trait/coherence.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/coherence.rs:14:6\n+   |\n+LL | impl<T> foreign_crate::ForeignTrait for AliasOfForeignType<T> {}\n+   |      ^ unconstrained type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "c4bf56a919721140d2f3168ebd76ef65c9673ecc", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "21c2e8a9db618ceffe81427738ab2ddc426244b6", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,8 @@\n+error: could not find defining uses\n+  --> $DIR/declared_but_never_defined.rs:6:12\n+   |\n+LL | type Bar = impl std::fmt::Debug;\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7ea517eb734a459701bfd6d1887416af6f228559", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "0b4c262bbb43b97f0a52e7bb8d9a60cc75a83d2c", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,23 @@\n+error: could not find defining uses\n+  --> $DIR/declared_but_not_defined_in_scope.rs:7:20\n+   |\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/declared_but_not_defined_in_scope.rs:11:5\n+   |\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |                    ---------------------- the expected opaque type\n+...\n+LL | fn bomp() -> boo::Boo {\n+   |              -------- expected `impl Debug` because of return type\n+LL |     \"\"\n+   |     ^^ expected opaque type, found `&str`\n+   |\n+   = note: expected opaque type `impl Debug`\n+                found reference `&'static str`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "272af7a5204fc919af3e8929b5f00db19915a797", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "eaa716bc71c3e4ebb17b379c942ecaa6466c5f9c", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/different_defining_uses.rs:12:1\n+   |\n+LL | fn bar() -> Foo {\n+   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `i32`\n+   |\n+note: previous use here\n+  --> $DIR/different_defining_uses.rs:8:1\n+   |\n+LL | fn foo() -> Foo {\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "95cbcfec2dc1557762ecb7b9976446b0c62d0234", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "6274029e4f524b0772100efea89953411b7bb57e", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,26 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/different_defining_uses_never_type.rs:12:1\n+   |\n+LL | fn bar() -> Foo {\n+   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n+   |\n+note: previous use here\n+  --> $DIR/different_defining_uses_never_type.rs:8:1\n+   |\n+LL | fn foo() -> Foo {\n+   | ^^^^^^^^^^^^^^^\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/different_defining_uses_never_type.rs:17:1\n+   |\n+LL | fn boo() -> Foo {\n+   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n+   |\n+note: previous use here\n+  --> $DIR/different_defining_uses_never_type.rs:8:1\n+   |\n+LL | fn foo() -> Foo {\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8549687ea78145ffafddbdef704065771492ac4c", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "fe1ca2230dacade16cd3108df900f4f594ce49cb", "filename": "src/test/ui/type-alias-impl-trait/fallback.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,9 +2,7 @@\n // inference variable being completely unconstrained.\n //\n // check-pass\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type Foo = impl Copy;\n "}, {"sha": "075351307589b332a0c25c9e201795208f8de492", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "f8a058170e37f3de8d039ee6d78257802a1dd822", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/generic_different_defining_uses.rs:11:1\n+   |\n+LL | fn my_iter2<T>(t: T) -> MyIter<T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n+   |\n+note: previous use here\n+  --> $DIR/generic_different_defining_uses.rs:7:1\n+   |\n+LL | fn my_iter<T>(t: T) -> MyIter<T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "31f992976b1898ccd7cc71773c6b95669560a24a", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "08b26b8fc1307de927f4d60bccb3e2675ce23791", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_lifetime_param.rs:7:26\n+   |\n+LL | fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n+   |                          ^^^^^^^^^^^\n+   |\n+note: lifetime used multiple times\n+  --> $DIR/generic_duplicate_lifetime_param.rs:5:10\n+   |\n+LL | type Two<'a, 'b> = impl std::fmt::Debug;\n+   |          ^^  ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e45950c4926b13fd11e1337f781fed428b084eab", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,5 @@\n #![feature(const_generics)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![allow(incomplete_features)]\n \n use std::fmt::Debug;\n@@ -14,16 +12,16 @@ type TwoLifetimes<'a, 'b> = impl Debug;\n type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n \n fn one_ty<T: Debug>(t: T) -> TwoTys<T, T> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR non-defining opaque type use in defining scope\n     t\n }\n \n fn one_lifetime<'a>(t: &'a u32) -> TwoLifetimes<'a, 'a> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR non-defining opaque type use in defining scope\n     t\n }\n \n fn one_const<const N: usize>(t: *mut [u8; N]) -> TwoConsts<N, N> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR non-defining opaque type use in defining scope\n     t\n }"}, {"sha": "7ea5efd4e6b02841a2e85882aa42eb1986ea93b8", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,38 @@\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use.rs:14:30\n+   |\n+LL | fn one_ty<T: Debug>(t: T) -> TwoTys<T, T> {\n+   |                              ^^^^^^^^^^^^\n+   |\n+note: type used multiple times\n+  --> $DIR/generic_duplicate_param_use.rs:10:13\n+   |\n+LL | type TwoTys<T, U> = impl Debug;\n+   |             ^  ^\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use.rs:19:36\n+   |\n+LL | fn one_lifetime<'a>(t: &'a u32) -> TwoLifetimes<'a, 'a> {\n+   |                                    ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lifetime used multiple times\n+  --> $DIR/generic_duplicate_param_use.rs:11:19\n+   |\n+LL | type TwoLifetimes<'a, 'b> = impl Debug;\n+   |                   ^^  ^^\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use.rs:24:50\n+   |\n+LL | fn one_const<const N: usize>(t: *mut [u8; N]) -> TwoConsts<N, N> {\n+   |                                                  ^^^^^^^^^^^^^^^\n+   |\n+note: constant used multiple times\n+  --> $DIR/generic_duplicate_param_use.rs:12:22\n+   |\n+LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n+   |                      ^               ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c17d595dbb3ad23e07b33f73bad8e6b4dee960d8", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use10.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "a74731df69515f05d454255d9746e4fed54d9845", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "d87e8c5783b65e1020d8b275a000b90171239f26", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use2.rs:10:27\n+   |\n+LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n+   |                           ^^^^^^^^^\n+   |\n+note: type used multiple times\n+  --> $DIR/generic_duplicate_param_use2.rs:8:10\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |          ^  ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0597b8385d25255673bdc496fad0fd92b64f9fc5", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "711de855f0d10978edf72e5311010b57b21d8bb2", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use3.rs:10:27\n+   |\n+LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n+   |                           ^^^^^^^^^\n+   |\n+note: type used multiple times\n+  --> $DIR/generic_duplicate_param_use3.rs:8:10\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |          ^  ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e77c94988f73e4fd7614b1dd76e6563e06282746", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "fcf01f5164ae4aa770e52ada1ed7076194640d13", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use4.rs:10:27\n+   |\n+LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n+   |                           ^^^^^^^^^\n+   |\n+note: type used multiple times\n+  --> $DIR/generic_duplicate_param_use4.rs:8:10\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |          ^  ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "dd2f202cf5dc0305b8d5283f31412de0093f5066", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "cb43b897cf9be0bab78496f031949c38e11d0e7b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,39 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/generic_duplicate_param_use5.rs:16:1\n+   |\n+LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, U)`, got `(U, T)`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use5.rs:12:1\n+   |\n+LL | fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use5.rs:8:18\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n+   |           ^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `U` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use5.rs:8:18\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |                  ^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n+help: consider restricting type parameter `U`\n+   |\n+LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n+   |              ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d54d3cd62e0209c91734996228a2c51b1c33b103", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "509da2320e862cef301bf4cfd4cd5df439d116c1", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,27 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/generic_duplicate_param_use6.rs:15:1\n+   |\n+LL | fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, T)`, got `(U, T)`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use6.rs:11:1\n+   |\n+LL | fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use6.rs:8:18\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, T)`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n+   |           ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "feebf81eef2a7f87274fe42a3b7952fa261737f4", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use7.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "4a723b64cdc4f372c517d0b808f9562c24683c8b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "a09f2506258fb14288e30f4f69a038095b829672", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,27 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/generic_duplicate_param_use8.rs:14:1\n+   |\n+LL | fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use8.rs:10:1\n+   |\n+LL | fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use8.rs:7:18\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, u32)`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n+   |           ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "747081933172b50aca38ca1e5efeaca93a347e5b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "68a30820951fa0533408b30893d980eb775b6ce9", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,51 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/generic_duplicate_param_use9.rs:21:1\n+   |\n+LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use9.rs:17:1\n+   |\n+LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n+  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+   |\n+LL | type Two<A, B> = impl Debug;\n+   |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n+   |\n+   = note: required because it appears within the type `(A, B, <A as Foo>::Bar)`\n+help: consider restricting type parameter `A`\n+   |\n+LL | type Two<A: Foo, B> = impl Debug;\n+   |           ^^^^^\n+\n+error[E0277]: `A` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+   |\n+LL | type Two<A, B> = impl Debug;\n+   |                  ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n+help: consider restricting type parameter `A`\n+   |\n+LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n+   |           ^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `B` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+   |\n+LL | type Two<A, B> = impl Debug;\n+   |                  ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n+help: consider restricting type parameter `B`\n+   |\n+LL | type Two<A, B: std::fmt::Debug> = impl Debug;\n+   |              ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "e109c38c98695a4302586bc478d4adacc65d12bf", "filename": "src/test/ui/type-alias-impl-trait/generic_lifetime_param.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "9f1bffff77c97fd34b47dd3c2a7268376f63ba49", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,5 @@\n #![feature(const_generics)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![allow(incomplete_features)]\n \n use std::fmt::Debug;\n@@ -15,16 +13,16 @@ type OneConst<const X: usize> = impl Debug;\n // Not defining uses, because they doesn't define *all* possible generics.\n \n fn concrete_ty() -> OneTy<u32> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR non-defining opaque type use in defining scope\n     5u32\n }\n \n fn concrete_lifetime() -> OneLifetime<'static> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR non-defining opaque type use in defining scope\n     6u32\n }\n \n-fn concrete_const() -> OneConst<{123}> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+fn concrete_const() -> OneConst<{ 123 }> {\n+    //~^ ERROR non-defining opaque type use in defining scope\n     7u32\n }"}, {"sha": "eb0c296bb626a565b53d1ebf0c908cdc002c0a0f", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,35 @@\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_nondefining_use.rs:15:21\n+   |\n+LL | fn concrete_ty() -> OneTy<u32> {\n+   |                     ^^^^^^^^^^\n+   |\n+note: used non-generic type `u32` for generic parameter\n+  --> $DIR/generic_nondefining_use.rs:9:12\n+   |\n+LL | type OneTy<T> = impl Debug;\n+   |            ^\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_nondefining_use.rs:20:27\n+   |\n+LL | type OneLifetime<'a> = impl Debug;\n+   |                  -- cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n+...\n+LL | fn concrete_lifetime() -> OneLifetime<'static> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_nondefining_use.rs:25:24\n+   |\n+LL | fn concrete_const() -> OneConst<{ 123 }> {\n+   |                        ^^^^^^^^^^^^^^^^^\n+   |\n+note: used non-generic constant `{ 123 }` for generic parameter\n+  --> $DIR/generic_nondefining_use.rs:11:21\n+   |\n+LL | type OneConst<const X: usize> = impl Debug;\n+   |                     ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "dd6300a64f42e0c95193436578f432aeaedc50db", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "8015ff7eded9061fc4f84aec174c66bfe1db052d", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,18 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_not_used.rs:5:33\n+   |\n+LL | type WrongGeneric<T: 'static> = impl 'static;\n+   |                                 ^^^^^^^^^^^^\n+\n+error: type parameter `V` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/generic_not_used.rs:8:73\n+   |\n+LL |   fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n+   |  _________________________________________________________________________^\n+LL | |\n+LL | |     v\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9c6b93b7ba0405c111e4cae57631b155e95ee03d", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {\n     let y = 42;"}, {"sha": "18d8daa05e63d168fb413a3ca948c39316897749", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,33 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n+   |\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                        ^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n+   |\n+LL |     let z: i32 = x;\n+   |            ---   ^ expected `i32`, found opaque type\n+   |            |\n+   |            expected due to this\n+...\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                        ------------ the found opaque type\n+   |\n+   = note:     expected type `i32`\n+           found opaque type `impl Sized`\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n+   |\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                        ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+...\n+LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0308, E0310.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "766ee36c02be2662034d0c9e8402e79f6f8ff6fe", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "cefc5d99b379ed68381731bfcb85f0817b527d22", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,23 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_underconstrained.rs:6:35\n+   |\n+LL | type Underconstrained<T: Trait> = impl 'static;\n+   |                                   ^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `T: Trait` is not satisfied\n+  --> $DIR/generic_underconstrained.rs:10:31\n+   |\n+LL | type Underconstrained<T: Trait> = impl 'static;\n+   |                          ----- required by this bound in `Underconstrained`\n+...\n+LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n+   |                               ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn underconstrain<T: Trait>(_: T) -> Underconstrained<T> {\n+   |                    ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "cd7c962e2d15b06bbd30805c9a44b96163cb752e", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "8bba62a913e114cc6eed413aa2cd12e74ab71cc9", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,43 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_underconstrained2.rs:5:45\n+   |\n+LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n+   |                                             ^^^^^^^^^^^^\n+\n+error: at least one trait must be specified\n+  --> $DIR/generic_underconstrained2.rs:14:46\n+   |\n+LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n+   |                                              ^^^^^^^^^^^^\n+\n+error[E0277]: `U` doesn't implement `Debug`\n+  --> $DIR/generic_underconstrained2.rs:9:33\n+   |\n+LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n+   |                          --------------- required by this bound in `Underconstrained`\n+...\n+LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n+   |                                 ^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+help: consider restricting type parameter `U`\n+   |\n+LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n+   |                      ^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `V` doesn't implement `Debug`\n+  --> $DIR/generic_underconstrained2.rs:18:43\n+   |\n+LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n+   |                           --------------- required by this bound in `Underconstrained2`\n+...\n+LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n+   |                                           ^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+help: consider restricting type parameter `V`\n+   |\n+LL | fn underconstrained2<U, V: std::fmt::Debug>(_: U, _: V) -> Underconstrained2<V> {\n+   |                          ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "851c2f66c475a2a39fcaaaaab3d9d2304106a7bc", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // Ensure that we don't ICE if associated type impl trait is used in an impl\n // with an unconstrained type parameter.\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait X {\n     type I;"}, {"sha": "8cf8fb1d16c4d8f997ecd6dd1f74dccb827aadcc", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/impl-with-unconstrained-param.rs:11:6\n+   |\n+LL | impl<T> X for () {\n+   |      ^ unconstrained type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "c46c4715924e59439ba11f562da9504b1d4e606f", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // Regression test for issue 67856\n \n #![feature(unboxed_closures)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![feature(fn_traits)]\n \n trait MyTrait {}"}, {"sha": "e1e259187f5f9d60dcf06708993001c6cccad442", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,23 @@\n+error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`\n+  --> $DIR/incoherent-assoc-imp-trait.rs:10:1\n+   |\n+LL | impl<F> FnOnce<()> for &F {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<A, F> FnOnce<A> for &F\n+             where F: Fn<A>, F: ?Sized;\n+\n+error[E0210]: type parameter `F` must be used as the type parameter for some local type (e.g., `MyStruct<F>`)\n+  --> $DIR/incoherent-assoc-imp-trait.rs:10:6\n+   |\n+LL | impl<F> FnOnce<()> for &F {\n+   |      ^ type parameter `F` must be used as the type parameter for some local type\n+   |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0119, E0210.\n+For more information about an error, try `rustc --explain E0119`."}, {"sha": "68231d43f629e396d203161185bb5c6a231c7ab7", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,24 +0,0 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-52843-closure-constrain.rs:12:22\n-   |\n-LL |     let null = || -> Opaque { 0 };\n-   |                      ^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-52843-closure-constrain.rs:12:16\n-   |\n-LL |     let null = || -> Opaque { 0 };\n-   |                ^^^^^^^^^^^^^^^^^^ expected `String`, got `[type error]`\n-   |\n-note: previous use here\n-  --> $DIR/issue-52843-closure-constrain.rs:11:5\n-   |\n-LL |     fn _unused() -> Opaque { String::new() }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "50eeff0b18fd44eb1252568f3733d31b0744f98c", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,15 +1,13 @@\n // Checks to ensure that we properly detect when a closure constrains an opaque type\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {\n     type Opaque = impl Debug;\n     fn _unused() -> Opaque { String::new() }\n-    let null = || -> Opaque { 0 }; //[min_tait]~ ERROR: not permitted here\n+    let null = || -> Opaque { 0 };\n     //~^ ERROR: concrete type differs from previous defining opaque type use\n     println!(\"{:?}\", null());\n }"}, {"sha": "d82050e263ee6648438c786990310899e53aa43f", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/issue-52843-closure-constrain.rs:10:16\n+   |\n+LL |     let null = || -> Opaque { 0 };\n+   |                ^^^^^^^^^^^^^^^^^^ expected `String`, got `i32`\n+   |\n+note: previous use here\n+  --> $DIR/issue-52843-closure-constrain.rs:9:5\n+   |\n+LL |     fn _unused() -> Opaque { String::new() }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b24959d7207200afdd2a19c2fce03982b42ee843", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type Foo<T> = impl Default;\n //~^ ERROR: the trait bound `T: Default` is not satisfied"}, {"sha": "8718a57d9d4f363b5b1218480f11f529e30a6971", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the trait bound `T: Default` is not satisfied\n+  --> $DIR/issue-52843.rs:3:15\n+   |\n+LL | type Foo<T> = impl Default;\n+   |               ^^^^^^^^^^^^ the trait `Default` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Foo<T: std::default::Default> = impl Default;\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "554215fe8945576bd6d0933dcb08c84b89476075", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.full_tait.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,9 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53096.rs:13:1\n+error[E0636]: the feature `type_alias_impl_trait` has already been declared\n+  --> $DIR/issue-53096.rs:4:32\n    |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0636`."}, {"sha": "792bd16527be83bde6ac9a00826a3c3ee037e6fc", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,5 @@\n #![feature(const_impl_trait, const_fn_fn_ptr_basics, rustc_attrs)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type Foo = impl Fn() -> usize;\n const fn bar() -> Foo {"}, {"sha": "0af3a75f8532e51154f1ab5b5907e79c7af10b2c", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,8 @@\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-53096.rs:11:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "37b330ba4b8fc39620c1b612155a76968db5b36b", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,5 @@\n // ignore-compare-mode-chalk\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "4c8144a2359309a5f19a7724d317b9f0e2c91ec1", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,12 @@\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-53598.rs:20:42\n+   |\n+LL |       fn foo<T: Debug>(_: T) -> Self::Item {\n+   |  __________________________________________^\n+LL | |\n+LL | |         S::<T>(Default::default())\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to previous error\n+"}, {"sha": "176118200e5eda77159ddc43e42ed367e3934fb7", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,5 @@\n #![feature(const_impl_trait, generators, generator_trait, rustc_attrs)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::ops::Generator;\n "}, {"sha": "eb1c9603a60d65edaed75e865de779ce1001d7b0", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,8 @@\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:19:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "af0780ab0b998aaad268e96d12727f6eebbb4383", "filename": "src/test/ui/type-alias-impl-trait/issue-55099-lifetime-inference.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -3,9 +3,7 @@\n // Tests that we don't incorrectly consider a lifetime to part\n // of the concrete type\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait Future {}\n "}, {"sha": "3a7a5da075f11b841922ceeca209f97ebf952537", "filename": "src/test/ui/type-alias-impl-trait/issue-57188-associate-impl-capture.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,9 +2,7 @@\n \n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n struct Baz<'a> {\n     source: &'a str,"}, {"sha": "a55fbf9c48a5776a95728c8ca8a66535f22f227d", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -3,9 +3,7 @@\n // FIXME: This should compile, but it currently doesn't\n \n #![feature(trait_alias)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait Foo {\n     type Bar: Baz<Self, Self>;"}, {"sha": "f87beb66d995e6fbd31d11f627b0feeb5cd78893", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,11 @@\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f1db4d3291b40709ade965658f99167fefc8e654", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // ignore-compare-mode-chalk\n #![feature(arbitrary_self_types)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::ops::Deref;\n "}, {"sha": "c701e3e74ef591cecee73607b7c2ca1df6cf8e52", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,12 @@\n+error: type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-57700.rs:16:58\n+   |\n+LL |       fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n+   |  __________________________________________________________^\n+LL | |\n+LL | |         self\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to previous error\n+"}, {"sha": "fcab2c7db2605a341fd2be2d2a66e74caed89247", "filename": "src/test/ui/type-alias-impl-trait/issue-57807-associated-type.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,9 +2,7 @@\n // that we properly unify associated types within\n // a type alias impl trait\n // check-pass\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait Bar {\n     type A;"}, {"sha": "96ac7860283ac3b6f63e53dbd34def8a7095ccae", "filename": "src/test/ui/type-alias-impl-trait/issue-58887.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait UnwrapItemsExt {\n     type Iter;"}, {"sha": "7303cbab4a813bb3aedca9667790beb3c5cc1408", "filename": "src/test/ui/type-alias-impl-trait/issue-58951.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type A = impl Iterator;\n "}, {"sha": "9abdd70bbd9275dbfcc1afe9d71323e36662671b", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -5,7 +5,7 @@ LL |     type Item = impl Bug;\n    |                 ^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: type alias impl trait is not permitted here\n   --> $DIR/issue-60371.rs:13:40"}, {"sha": "9b2d21192cd89313eaf7409202e5849aefb7d7c2", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.full_tait.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,9 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-60407.rs:10:1\n+error[E0636]: the feature `type_alias_impl_trait` has already been declared\n+  --> $DIR/issue-60407.rs:3:32\n    |\n-LL | fn main() {\n-   | ^^^^^^^^^\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0636`."}, {"sha": "b833429c7692249b79d617f9a62771d9ea140b37", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait, rustc_attrs)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait, rustc_attrs)]\n \n type Debuggable = impl core::fmt::Debug;\n "}, {"sha": "fecee27797a548422223eb85b0d7f6f0c40b7cbc", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,8 @@\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-60407.rs:8:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "78def0d1136de8c5e7d0c0afde4b3a57ce2bbe2e", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait IterBits {\n     type BitsIter: Iterator<Item = u8>;"}, {"sha": "66fa862ef9d7aa5e827a55eb8ed456a1d53f7baf", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/issue-60564.rs:19:34\n+   |\n+LL |     fn iter_bits(self, n: u8) -> Self::BitsIter {\n+   |                                  ^^^^^^^^^^^^^^\n+   |\n+note: used non-generic type `u8` for generic parameter\n+  --> $DIR/issue-60564.rs:8:25\n+   |\n+LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n+   |                         ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "36779a0ce89c33b5839222c6721502834216a0c0", "filename": "src/test/ui/type-alias-impl-trait/issue-62000-associate-impl-trait-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,9 +2,7 @@\n \n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait MyTrait {\n     type AssocType: Send;"}, {"sha": "7414611a748936fb6797b9175a04f0176ca32558", "filename": "src/test/ui/type-alias-impl-trait/issue-63263-closure-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -4,7 +4,7 @@\n \n // check-pass\n \n-#![feature(min_type_alias_impl_trait, type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n pub type Closure = impl FnOnce();\n "}, {"sha": "a93d2dfcee5088eb95b4aa364ec8a0f082f5fd84", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,22 +0,0 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-63279.rs:10:11\n-   |\n-LL |     || -> Closure { || () }\n-   |           ^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:10:5: 10:28] as FnOnce<()>>::Output == ()`\n-  --> $DIR/issue-63279.rs:7:16\n-   |\n-LL | type Closure = impl FnOnce();\n-   |                ^^^^^^^^^^^^^ expected `()`, found opaque type\n-   |\n-   = note: expected unit type `()`\n-            found opaque type `impl FnOnce<()>`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0271, E0658.\n-For more information about an error, try `rustc --explain E0271`."}, {"sha": "b97192a2aed4a19aa4b2eb86d6227c57fe837875", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,13 +1,11 @@\n // compile-flags: -Zsave-analysis\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type Closure = impl FnOnce(); //~ ERROR: type mismatch resolving\n \n fn c() -> Closure {\n-    || -> Closure { || () } //[min_tait]~ ERROR: not permitted here\n+    || -> Closure { || () }\n }\n \n fn main() {}"}, {"sha": "63a83a60ff876bb4d94c2a54892aa0de18b1affb", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,12 @@\n+error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:8:5: 8:28] as FnOnce<()>>::Output == ()`\n+  --> $DIR/issue-63279.rs:5:16\n+   |\n+LL | type Closure = impl FnOnce();\n+   |                ^^^^^^^^^^^^^ expected `()`, found opaque type\n+   |\n+   = note: expected unit type `()`\n+            found opaque type `impl FnOnce<()>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "ff4fd5dcec73c87b4a5763888470ee0513caa328", "filename": "src/test/ui/type-alias-impl-trait/issue-63355.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n #![feature(type_alias_impl_trait)]\n #![allow(incomplete_features)]\n \n@@ -28,7 +28,7 @@ impl Bar for () {\n     }\n }\n \n-// FIXME(#86731): The below is illegal use of `min_type_alias_impl_trait`\n+// FIXME(#86731): The below is illegal use of `type_alias_impl_trait`\n // but the compiler doesn't report it, we should fix it.\n pub type FooImpl = impl Foo;\n pub type BarImpl = impl Bar<Foo = FooImpl>;"}, {"sha": "28f4a85c9f29039b45a1391c184361e67a43e2e2", "filename": "src/test/ui/type-alias-impl-trait/issue-63677-type-alias-coherence.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,9 +2,7 @@\n // Regression test for issue #63677 - ensure that\n // coherence checking can properly handle 'impl trait'\n // in type aliases\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n pub trait Trait {}\n pub struct S1<T>(T);"}, {"sha": "273928c4d663dbddaab863eced50c441b8f6c721", "filename": "src/test/ui/type-alias-impl-trait/issue-65384.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n #![feature(type_alias_impl_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "98d20d6ca0d563588086a9846992cced0b67b1ef", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,9 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:17:1\n+error[E0636]: the feature `type_alias_impl_trait` has already been declared\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:5:32\n    |\n-LL | fn main() {\n-   | ^^^^^^^^^\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0636`."}, {"sha": "6798ecb9489f864017e6efb89e5340c66ec20189", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bff8429a0655320c1aef0c16fb0fd2ec0184a9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.min_tait.stderr?ref=5bff8429a0655320c1aef0c16fb0fd2ec0184a9a", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:19:13\n-   |\n-LL |     take(|| {});\n-   |             ^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:21:13\n-   |\n-LL |     take(|| {});\n-   |             ^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "0f0cd4e9227b4f40f1382fcbdef5c231bf242efb", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // compile-flags: -Zsave-analysis\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait, rustc_attrs)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait, rustc_attrs)]\n \n type T = impl Sized;\n // The concrete type referred by impl-trait-type-alias(`T`) is guaranteed\n@@ -15,9 +13,7 @@ fn take(_: fn() -> T) {}\n \n #[rustc_error]\n fn main() {\n-    //[full_tait]~^ ERROR fatal error triggered by #[rustc_error]\n+    //~^ ERROR fatal error triggered by #[rustc_error]\n     take(|| {});\n-    //[min_tait]~^ ERROR not permitted here\n     take(|| {});\n-    //[min_tait]~^ ERROR not permitted here\n }"}, {"sha": "f3683f2bf96075822fe70b9e42ac9cd542fb994f", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,8 @@\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:15:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "af6d5010920173c815a265894666c9f27eec5d47", "filename": "src/test/ui/type-alias-impl-trait/issue-65918.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65918.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65918.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65918.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,9 +2,7 @@\n \n // build-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::marker::PhantomData;\n "}, {"sha": "d97270c3124d1620574553fe6d8a91e028aefafd", "filename": "src/test/ui/type-alias-impl-trait/issue-66580-closure-coherence.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,9 +2,7 @@\n // Ensures that we don't try to determine whether a closure\n // is foreign when it's the underlying type of an opaque type\n // check-pass\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type Closure = impl FnOnce();\n "}, {"sha": "cd219328a995a27fd0905b8bc816fcda27238361", "filename": "src/test/ui/type-alias-impl-trait/issue-67844-nested-opaque.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -3,9 +3,7 @@\n // Ensures that we properly handle nested TAIT occurrences\n // with generic parameters\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait WithAssoc {\n     type AssocType;"}, {"sha": "3b6decbe9c65e5cf5e5d75123246fc66ebd33a01", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,9 +2,7 @@\n // Ensures that we don't ICE when emitting an error\n // for a non-defining use when lifetimes are involved\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n trait Trait<T> {}\n type Alias<'a, U> = impl Trait<U>;\n fn f<'a>() -> Alias<'a, ()> {}"}, {"sha": "c2fa54f50f881214050a05d210964a8c152bd080", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/issue-68368-non-defining-use.rs:8:15\n+   |\n+LL | fn f<'a>() -> Alias<'a, ()> {}\n+   |               ^^^^^^^^^^^^^\n+   |\n+note: used non-generic type `()` for generic parameter\n+  --> $DIR/issue-68368-non-defining-use.rs:7:16\n+   |\n+LL | type Alias<'a, U> = impl Trait<U>;\n+   |                ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6732902c09a504d7aef29f1291d36a998cfe3a8e", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // Regression test for #69136\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait SomeTrait {}\n "}, {"sha": "fe45e39d938f009e1b340cd155fbc6fb322cbe0b", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,11 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:17:65\n+   |\n+LL | type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n+   |             -                                                   ^^ undeclared lifetime\n+   |             |\n+   |             help: consider introducing lifetime `'a` here: `'a,`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "a6916eda8b093c294a61ed786ee52b87d4f26688", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-ok.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,9 +2,7 @@\n \n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait SomeTrait {}\n "}, {"sha": "a9bd6daf2acf77fbd96f6e4308e67298f5ea1c16", "filename": "src/test/ui/type-alias-impl-trait/issue-69323.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n \n-// revisions: min full\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::iter::{once, Chain};\n "}, {"sha": "dff0d89d465dd4573681b0b20b30236dc195e688", "filename": "src/test/ui/type-alias-impl-trait/issue-70121.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n pub type Successors<'a> = impl Iterator<Item = &'a ()>;\n "}, {"sha": "bb4104b3d2519903699a152fe0fe0efe20377b87", "filename": "src/test/ui/type-alias-impl-trait/issue-74244.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait Allocator {\n     type Buffer;"}, {"sha": "ff6bacd277e1ed9bb89ceabc2ac99c684535aa58", "filename": "src/test/ui/type-alias-impl-trait/issue-74244.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-74244.rs:9:6\n+   |\n+LL | impl<T> Allocator for DefaultAllocator {\n+   |      ^ unconstrained type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "4345b5d886ee2e52bb9d8f424b248750253103dd", "filename": "src/test/ui/type-alias-impl-trait/issue-74761-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -9,8 +9,6 @@ impl<'a, 'b> A for () {\n     //~^ ERROR the lifetime parameter `'a` is not constrained\n     //~| ERROR the lifetime parameter `'b` is not constrained\n     type B = impl core::fmt::Debug;\n-    //~^ ERROR is unstable\n-\n \n     fn f(&self) -> Self::B {}\n }"}, {"sha": "7a321458b0bf177837409a838d66c81600788f84", "filename": "src/test/ui/type-alias-impl-trait/issue-74761-2.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,12 +1,3 @@\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/issue-74761-2.rs:11:14\n-   |\n-LL |     type B = impl core::fmt::Debug;\n-   |              ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n-\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n   --> $DIR/issue-74761-2.rs:8:6\n    |\n@@ -19,7 +10,6 @@ error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait,\n LL | impl<'a, 'b> A for () {\n    |          ^^ unconstrained lifetime parameter\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0207, E0658.\n-For more information about an error, try `rustc --explain E0207`.\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "d26ca5c3ead38cdc045ff6db63621571db69589a", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n pub trait A {\n     type B;"}, {"sha": "1d016fe070f9c6ebd8489174e8d50d664e632411", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,15 @@\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-74761.rs:7:6\n+   |\n+LL | impl<'a, 'b> A for () {\n+   |      ^^ unconstrained lifetime parameter\n+\n+error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-74761.rs:7:10\n+   |\n+LL | impl<'a, 'b> A for () {\n+   |          ^^ unconstrained lifetime parameter\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "fb56cc54d634b42dc635175e1343eb1566fb6fdf", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // Regression test for issue #76202\n // Tests that we don't ICE when we have a trait impl on a TAIT.\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait Dummy {}\n impl Dummy for () {}"}, {"sha": "8689ee53660f6b703a43c315042613d56170c106", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:16:1\n+   |\n+LL | impl Test for F {\n+   | ^^^^^^^^^^^^^^^\n+   |\n+note: type alias impl trait defined here\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:9:10\n+   |\n+LL | type F = impl Dummy;\n+   |          ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "fccbfb74fa2ce7be3d69465c7d4ddb621c52e127", "filename": "src/test/ui/type-alias-impl-trait/issue-78450.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(min_type_alias_impl_trait)]\n #![feature(type_alias_impl_trait)]\n \n pub trait AssociatedImpl {"}, {"sha": "f412b2d0e7db7959e0685b46b989e0126d57d902", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-pass.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n "}, {"sha": "371dff475d1d787cd79fc49add979dd465335cba", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,7 +2,7 @@\n // This test used to cause unsoundness, since one of the two possible\n // resolutions was chosen at random instead of erroring due to conflicts.\n \n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n type X<A, B> = impl Into<&'static A>;\n //~^ ERROR the trait bound `&'static B: From<&A>` is not satisfied"}, {"sha": "06e1990fd7f456dbd959ea132c5c77ba40299eea", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,7 +2,7 @@\n // This test used to cause unsoundness, since one of the two possible\n // resolutions was chosen at random instead of erroring due to conflicts.\n \n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n "}, {"sha": "bcd9aeff6b451a839dc74293e2505bcbb2d4f834", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -2,7 +2,7 @@\n // This test used to cause unsoundness, since one of the two possible\n // resolutions was chosen at random instead of erroring due to conflicts.\n \n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n "}, {"sha": "6282264d8fee59cdccf392c9afbfb686c992c032", "filename": "src/test/ui/type-alias-impl-trait/nested_type_alias_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n mod my_mod {\n     use std::fmt::Debug;"}, {"sha": "8787c023eb0c78708e7a8554b3c4ef7eb4860889", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "b438f84451649f248c1f67c21917291a87510f7e", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: mismatched types\n+  --> $DIR/never_reveal_concrete_type.rs:13:27\n+   |\n+LL | type NoReveal = impl std::fmt::Debug;\n+   |                 -------------------- the found opaque type\n+...\n+LL |     let _: &'static str = x;\n+   |            ------------   ^ expected `&str`, found opaque type\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected reference `&'static str`\n+            found opaque type `impl Debug`\n+\n+error[E0605]: non-primitive cast: `impl Debug` as `&'static str`\n+  --> $DIR/never_reveal_concrete_type.rs:14:13\n+   |\n+LL |     let _ = x as &'static str;\n+   |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0605.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "1197c7bc58ece3859519faa1ef1f8fcf80bdf8bf", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,9 +1,7 @@\n // Issue 52985: user code provides no use case that allows a type alias `impl Trait`\n // We now emit a 'could not find defining uses' error\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type Foo = impl Copy; //~ could not find defining uses\n "}, {"sha": "61025e846921e3dfc7c39d65c1178c702a95df40", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,8 @@\n+error: could not find defining uses\n+  --> $DIR/no_inferrable_concrete_type.rs:6:12\n+   |\n+LL | type Foo = impl Copy;\n+   |            ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "61153b1e17141ce5ffd6d123e12aa636f01b6f7e", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "67752acb8c9afd6d389ea21ba76e00135b818ccb", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,31 @@\n+error[E0308]: mismatched types\n+  --> $DIR/no_revealing_outside_defining_module.rs:15:19\n+   |\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |                    ---------------------- the found opaque type\n+...\n+LL |     let _: &str = bomp();\n+   |            ----   ^^^^^^ expected `&str`, found opaque type\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected reference `&str`\n+            found opaque type `impl Debug`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/no_revealing_outside_defining_module.rs:19:5\n+   |\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |                    ---------------------- the expected opaque type\n+...\n+LL | fn bomp() -> boo::Boo {\n+   |              -------- expected `impl Debug` because of return type\n+LL |     \"\"\n+   |     ^^ expected opaque type, found `&str`\n+   |\n+   = note: expected opaque type `impl Debug`\n+                found reference `&'static str`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "f29b980dfd0e578e0177ea2a574c3d18ff6b1c2d", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "2fa236b373a40e482f9b5249ee24a8e3215d590a", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/not_a_defining_use.rs:9:27\n+   |\n+LL | fn two<T: Debug>(t: T) -> Two<T, u32> {\n+   |                           ^^^^^^^^^^^\n+   |\n+note: used non-generic type `u32` for generic parameter\n+  --> $DIR/not_a_defining_use.rs:7:13\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |             ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "fbb7a4d58e4bafd37ddd4e7ba36777105defaeb0", "filename": "src/test/ui/type-alias-impl-trait/not_well_formed.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "91c1d031e4e5e80dd83bc3adf1ed0fdeb5d93645", "filename": "src/test/ui/type-alias-impl-trait/not_well_formed.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,9 @@\n+error[E0220]: associated type `Assoc` not found for `V`\n+  --> $DIR/not_well_formed.rs:9:29\n+   |\n+LL | type Foo<V> = impl Trait<V::Assoc>;\n+   |                             ^^^^^ associated type `Assoc` not found\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0220`."}, {"sha": "51a7b6454c35ef3189deb551f1a578b3e16d2dda", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,5 @@\n #![feature(const_impl_trait)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type Bar = impl Send;\n "}, {"sha": "7e41b374452a3c2a9f99a40c9096e3e9cd51f1a5", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,8 @@\n+error: `impl Send` cannot be used in patterns\n+  --> $DIR/structural-match-no-leak.rs:15:9\n+   |\n+LL |         LEAK_FREE => (),\n+   |         ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "73558d39ad56163a69a0fa30840a9f31885d8414", "filename": "src/test/ui/type-alias-impl-trait/structural-match.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,7 +1,5 @@\n #![feature(const_impl_trait)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type Foo = impl Send;\n "}, {"sha": "b43f2148dea5ec84c4abe5e24a08a38325286aa8", "filename": "src/test/ui/type-alias-impl-trait/structural-match.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,8 @@\n+error: `impl Send` cannot be used in patterns\n+  --> $DIR/structural-match.rs:16:9\n+   |\n+LL |         VALUE => (),\n+   |         ^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1a8113848f9239349e8e4bf1132ca1024707d28e", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n // Ensures that `const` items can constrain an opaque `impl Trait`.\n "}, {"sha": "e2567e87ac676700f0bf7c5ad00152f0c4472a6f", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-alias-impl-trait-const.rs:10:19\n+   |\n+LL | pub type Foo = impl Debug;\n+   |                ---------- the expected opaque type\n+...\n+LL | const _FOO: Foo = 5;\n+   |                   ^ expected opaque type, found integer\n+   |\n+   = note: expected opaque type `impl Debug`\n+                     found type `{integer}`\n+\n+error: could not find defining uses\n+  --> $DIR/type-alias-impl-trait-const.rs:7:16\n+   |\n+LL | pub type Foo = impl Debug;\n+   |                ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "07c891f0638c7234d03092ced5ca513dec71971b", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-fns.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fns.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n // Regression test for issue #61863\n "}, {"sha": "c5e8068e5c8e90776d8a536eeff821694a9239ef", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-sized.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-sized.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type A = impl Sized;\n fn f1() -> A {"}, {"sha": "86c9d482143832135e0c278e0108b42e26ae3e63", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-tuple.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-tuple.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![allow(dead_code)]\n \n pub trait MyTrait {}"}, {"sha": "efbf4f1e351f7b699bc4a5c2c2d930653fd82408", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-unconstrained-lifetime.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // regression test for #74018\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n trait Trait {\n     type Associated;"}, {"sha": "8cdce2f8e81cae60b653c0ccbcc4bc45a249aa87", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-unconstrained-lifetime.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/type-alias-impl-trait-unconstrained-lifetime.rs:10:6\n+   |\n+LL | impl<'a, I: Iterator<Item = i32>> Trait for (i32, I) {\n+   |      ^^ unconstrained lifetime parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "c009952eab75051197e6698707e3e6d57120f40c", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type Foo = impl Fn() -> Foo;\n //~^ ERROR: could not find defining uses"}, {"sha": "726f4ea6e00f71c5006f71ec819b6db13d0544f8", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,8 @@\n+error: could not find defining uses\n+  --> $DIR/type-alias-impl-trait-with-cycle-error.rs:3:12\n+   |\n+LL | type Foo = impl Fn() -> Foo;\n+   |            ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f3898bca64b9b3b94f3ebb813c45313d92ab55d0", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n pub trait Bar<T> {\n     type Item;"}, {"sha": "3947cc4d27055f5972f5b183beba416da1604957", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,8 @@\n+error: could not find defining uses\n+  --> $DIR/type-alias-impl-trait-with-cycle-error2.rs:7:12\n+   |\n+LL | type Foo = impl Bar<Foo, Item = Foo>;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8ca279eec921b114ac74d188db0f3eb0ba62b04f", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-no-traits.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n type Foo = impl 'static;\n //~^ ERROR: at least one trait must be specified"}, {"sha": "3f7acd3383010a190581d9146cad5b1c1e9ee9df", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-no-traits.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: at least one trait must be specified\n+  --> $DIR/type-alias-impl-trait-with-no-traits.rs:3:12\n+   |\n+LL | type Foo = impl 'static;\n+   |            ^^^^^^^^^^^^\n+\n+error: at least one trait must be specified\n+  --> $DIR/type-alias-impl-trait-with-no-traits.rs:10:13\n+   |\n+LL | fn bar() -> impl 'static {\n+   |             ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "80192d19af98b5cd9d63f5f89b664570a558dc1d", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -3,9 +3,7 @@\n #![allow(dead_code)]\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {\n     assert_eq!(foo().to_string(), \"foo\");"}, {"sha": "fd954801dc047c95593dab02422e2cb882b4ad43", "filename": "src/test/ui/type-alias-impl-trait/type-alias-nested-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-nested-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-nested-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-nested-impl-trait.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n use std::iter::{once, Chain};\n "}, {"sha": "04a5c58cd36e9293a90d3a30c1611cd32561a1e7", "filename": "src/test/ui/type-alias-impl-trait/unused_generic_param.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,6 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "4e11854b071894de30927861c2b9c5a19747b802", "filename": "src/test/ui/type-alias-impl-trait/unused_generic_param.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,14 @@\n+error: at least one trait must be specified\n+  --> $DIR/unused_generic_param.rs:5:28\n+   |\n+LL | type PartiallyDefined<T> = impl 'static;\n+   |                            ^^^^^^^^^^^^\n+\n+error: at least one trait must be specified\n+  --> $DIR/unused_generic_param.rs:12:29\n+   |\n+LL | type PartiallyDefined2<T> = impl 'static;\n+   |                             ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a3b75543510aebea747308fb7172ef7cb6a4694d", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -1,8 +1,6 @@\n // Needed for `type Y = impl Trait<_>` and `type B = _;`\n #![feature(associated_type_defaults)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n // This test checks that it is not possible to enable global type\n // inference by using the `_` type placeholder.\n "}, {"sha": "4827439bfbfe4f9f0e416c4a1787a3e81e0b8eaa", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "added", "additions": 638, "deletions": 0, "changes": 638, "blob_url": "https://github.com/rust-lang/rust/blob/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38bdd0e0198196b545aeb64f0305707de163a83a/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=38bdd0e0198196b545aeb64f0305707de163a83a", "patch": "@@ -0,0 +1,638 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/typeck_type_placeholder_item.rs:154:18\n+   |\n+LL | struct BadStruct<_>(_);\n+   |                  ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/typeck_type_placeholder_item.rs:157:16\n+   |\n+LL | trait BadTrait<_> {}\n+   |                ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/typeck_type_placeholder_item.rs:167:19\n+   |\n+LL | struct BadStruct1<_, _>(_);\n+   |                   ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/typeck_type_placeholder_item.rs:167:22\n+   |\n+LL | struct BadStruct1<_, _>(_);\n+   |                      ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/typeck_type_placeholder_item.rs:172:19\n+   |\n+LL | struct BadStruct2<_, T>(_, T);\n+   |                   ^ expected identifier, found reserved identifier\n+\n+error: associated constant in `impl` without body\n+  --> $DIR/typeck_type_placeholder_item.rs:205:5\n+   |\n+LL |     const C: _;\n+   |     ^^^^^^^^^^-\n+   |               |\n+   |               help: provide a definition for the constant: `= <expr>;`\n+\n+error[E0403]: the name `_` is already used for a generic parameter in this item's generic parameters\n+  --> $DIR/typeck_type_placeholder_item.rs:167:22\n+   |\n+LL | struct BadStruct1<_, _>(_);\n+   |                   -  ^ already used\n+   |                   |\n+   |                   first use of `_`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:7:14\n+   |\n+LL | fn test() -> _ { 5 }\n+   |              ^\n+   |              |\n+   |              not allowed in type signatures\n+   |              help: replace with the correct return type: `i32`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:10:16\n+   |\n+LL | fn test2() -> (_, _) { (5, 5) }\n+   |               -^--^-\n+   |               ||  |\n+   |               ||  not allowed in type signatures\n+   |               |not allowed in type signatures\n+   |               help: replace with the correct return type: `(i32, i32)`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:13:15\n+   |\n+LL | static TEST3: _ = \"test\";\n+   |               ^\n+   |               |\n+   |               not allowed in type signatures\n+   |               help: replace with the correct type: `&str`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:16:15\n+   |\n+LL | static TEST4: _ = 145;\n+   |               ^\n+   |               |\n+   |               not allowed in type signatures\n+   |               help: replace with the correct type: `i32`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:19:15\n+   |\n+LL | static TEST5: (_, _) = (1, 2);\n+   |               ^^^^^^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:22:13\n+   |\n+LL | fn test6(_: _) { }\n+   |             ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | fn test6<T>(_: T) { }\n+   |         ^^^    ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:25:18\n+   |\n+LL | fn test6_b<T>(_: _, _: T) { }\n+   |                  ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | fn test6_b<T, U>(_: U, _: T) { }\n+   |             ^^^     ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:28:30\n+   |\n+LL | fn test6_c<T, K, L, A, B>(_: _, _: (T, K, L, A, B)) { }\n+   |                              ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | fn test6_c<T, K, L, A, B, U>(_: U, _: (T, K, L, A, B)) { }\n+   |                         ^^^     ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:31:13\n+   |\n+LL | fn test7(x: _) { let _x: usize = x; }\n+   |             ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | fn test7<T>(x: T) { let _x: usize = x; }\n+   |         ^^^    ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:34:22\n+   |\n+LL | fn test8(_f: fn() -> _) { }\n+   |                      ^\n+   |                      |\n+   |                      not allowed in type signatures\n+   |                      help: use type parameters instead: `T`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:34:22\n+   |\n+LL | fn test8(_f: fn() -> _) { }\n+   |                      ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | fn test8<T>(_f: fn() -> T) { }\n+   |         ^^^             ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:48:26\n+   |\n+LL | fn test11(x: &usize) -> &_ {\n+   |                         -^\n+   |                         ||\n+   |                         |not allowed in type signatures\n+   |                         help: replace with the correct return type: `&'static &'static usize`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:53:52\n+   |\n+LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n+   |                                      --------------^\n+   |                                      |             |\n+   |                                      |             not allowed in type signatures\n+   |                                      help: replace with the correct return type: `*const *const usize`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+  --> $DIR/typeck_type_placeholder_item.rs:67:8\n+   |\n+LL |     a: _,\n+   |        ^ not allowed in type signatures\n+LL |\n+LL |     b: (_, _),\n+   |         ^  ^ not allowed in type signatures\n+   |         |\n+   |         not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | struct Test10<T> {\n+LL |     a: T,\n+LL |\n+LL |     b: (T, T),\n+   |\n+\n+error: missing type for `static` item\n+  --> $DIR/typeck_type_placeholder_item.rs:73:12\n+   |\n+LL |     static A = 42;\n+   |            ^ help: provide a type for the static variable: `A: i32`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:75:15\n+   |\n+LL |     static B: _ = 42;\n+   |               ^\n+   |               |\n+   |               not allowed in type signatures\n+   |               help: replace with the correct type: `i32`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:77:15\n+   |\n+LL |     static C: Option<_> = Some(42);\n+   |               ^^^^^^^^^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:79:21\n+   |\n+LL |     fn fn_test() -> _ { 5 }\n+   |                     ^\n+   |                     |\n+   |                     not allowed in type signatures\n+   |                     help: replace with the correct return type: `i32`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:82:23\n+   |\n+LL |     fn fn_test2() -> (_, _) { (5, 5) }\n+   |                      -^--^-\n+   |                      ||  |\n+   |                      ||  not allowed in type signatures\n+   |                      |not allowed in type signatures\n+   |                      help: replace with the correct return type: `(i32, i32)`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:85:22\n+   |\n+LL |     static FN_TEST3: _ = \"test\";\n+   |                      ^\n+   |                      |\n+   |                      not allowed in type signatures\n+   |                      help: replace with the correct type: `&str`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:88:22\n+   |\n+LL |     static FN_TEST4: _ = 145;\n+   |                      ^\n+   |                      |\n+   |                      not allowed in type signatures\n+   |                      help: replace with the correct type: `i32`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:91:22\n+   |\n+LL |     static FN_TEST5: (_, _) = (1, 2);\n+   |                      ^^^^^^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:94:20\n+   |\n+LL |     fn fn_test6(_: _) { }\n+   |                    ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn fn_test6<T>(_: T) { }\n+   |                ^^^    ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:97:20\n+   |\n+LL |     fn fn_test7(x: _) { let _x: usize = x; }\n+   |                    ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n+   |                ^^^    ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:100:29\n+   |\n+LL |     fn fn_test8(_f: fn() -> _) { }\n+   |                             ^\n+   |                             |\n+   |                             not allowed in type signatures\n+   |                             help: use type parameters instead: `T`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:100:29\n+   |\n+LL |     fn fn_test8(_f: fn() -> _) { }\n+   |                             ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn fn_test8<T>(_f: fn() -> T) { }\n+   |                ^^^             ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+  --> $DIR/typeck_type_placeholder_item.rs:123:12\n+   |\n+LL |         a: _,\n+   |            ^ not allowed in type signatures\n+LL |\n+LL |         b: (_, _),\n+   |             ^  ^ not allowed in type signatures\n+   |             |\n+   |             not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     struct FnTest10<T> {\n+LL |         a: T,\n+LL |\n+LL |         b: (T, T),\n+   |\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/typeck_type_placeholder_item.rs:128:18\n+   |\n+LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n+   |                  ^ cannot infer type\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:128:28\n+   |\n+LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n+   |                            ^  ^ not allowed in type signatures\n+   |                            |\n+   |                            not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:132:30\n+   |\n+LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n+   |                             -^--^-\n+   |                             ||  |\n+   |                             ||  not allowed in type signatures\n+   |                             |not allowed in type signatures\n+   |                             help: replace with the correct return type: `(i32, i32)`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:135:33\n+   |\n+LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n+   |                           ------^-\n+   |                           |     |\n+   |                           |     not allowed in type signatures\n+   |                           help: replace with the correct return type: `(i32, i32)`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+  --> $DIR/typeck_type_placeholder_item.rs:154:21\n+   |\n+LL | struct BadStruct<_>(_);\n+   |                     ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | struct BadStruct<T>(T);\n+   |                  ^  ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for implementations\n+  --> $DIR/typeck_type_placeholder_item.rs:159:15\n+   |\n+LL | impl BadTrait<_> for BadStruct<_> {}\n+   |               ^                ^ not allowed in type signatures\n+   |               |\n+   |               not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | impl<T> BadTrait<T> for BadStruct<T> {}\n+   |     ^^^          ^                ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for opaque types\n+  --> $DIR/typeck_type_placeholder_item.rs:162:34\n+   |\n+LL | fn impl_trait() -> impl BadTrait<_> {\n+   |                                  ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+  --> $DIR/typeck_type_placeholder_item.rs:167:25\n+   |\n+LL | struct BadStruct1<_, _>(_);\n+   |                         ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | struct BadStruct1<T, _>(T);\n+   |                   ^     ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+  --> $DIR/typeck_type_placeholder_item.rs:172:25\n+   |\n+LL | struct BadStruct2<_, T>(_, T);\n+   |                         ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | struct BadStruct2<U, T>(U, T);\n+   |                   ^     ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for type aliases\n+  --> $DIR/typeck_type_placeholder_item.rs:176:14\n+   |\n+LL | type X = Box<_>;\n+   |              ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for opaque types\n+  --> $DIR/typeck_type_placeholder_item.rs:182:21\n+   |\n+LL | type Y = impl Trait<_>;\n+   |                     ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:216:31\n+   |\n+LL | fn value() -> Option<&'static _> {\n+   |               ----------------^-\n+   |               |               |\n+   |               |               not allowed in type signatures\n+   |               help: replace with the correct return type: `Option<&'static u8>`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:221:10\n+   |\n+LL | const _: Option<_> = map(value);\n+   |          ^^^^^^^^^\n+   |          |\n+   |          not allowed in type signatures\n+   |          help: replace with the correct type: `Option<u8>`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:140:31\n+   |\n+LL |     fn method_test1(&self, x: _);\n+   |                               ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn method_test1<T>(&self, x: T);\n+   |                    ^^^           ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:142:31\n+   |\n+LL |     fn method_test2(&self, x: _) -> _;\n+   |                               ^     ^ not allowed in type signatures\n+   |                               |\n+   |                               not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn method_test2<T>(&self, x: T) -> T;\n+   |                    ^^^           ^     ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:144:31\n+   |\n+LL |     fn method_test3(&self) -> _;\n+   |                               ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn method_test3<T>(&self) -> T;\n+   |                    ^^^           ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:146:26\n+   |\n+LL |     fn assoc_fn_test1(x: _);\n+   |                          ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn assoc_fn_test1<T>(x: T);\n+   |                      ^^^    ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:148:26\n+   |\n+LL |     fn assoc_fn_test2(x: _) -> _;\n+   |                          ^     ^ not allowed in type signatures\n+   |                          |\n+   |                          not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn assoc_fn_test2<T>(x: T) -> T;\n+   |                      ^^^    ^     ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:150:28\n+   |\n+LL |     fn assoc_fn_test3() -> _;\n+   |                            ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn assoc_fn_test3<T>() -> T;\n+   |                      ^^^      ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/typeck_type_placeholder_item.rs:190:14\n+   |\n+LL |     type B = _;\n+   |              ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:192:14\n+   |\n+LL |     const C: _;\n+   |              ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:194:14\n+   |\n+LL |     const D: _ = 42;\n+   |              ^\n+   |              |\n+   |              not allowed in type signatures\n+   |              help: replace with the correct type: `i32`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/typeck_type_placeholder_item.rs:197:26\n+   |\n+LL |     type F: std::ops::Fn(_);\n+   |                          ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:41:24\n+   |\n+LL |     fn test9(&self) -> _ { () }\n+   |                        ^\n+   |                        |\n+   |                        not allowed in type signatures\n+   |                        help: replace with the correct return type: `()`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:44:27\n+   |\n+LL |     fn test10(&self, _x : _) { }\n+   |                           ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn test10<T>(&self, _x : T) { }\n+   |              ^^^             ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:59:24\n+   |\n+LL |     fn clone(&self) -> _ { Test9 }\n+   |                        ^\n+   |                        |\n+   |                        not allowed in type signatures\n+   |                        help: replace with the correct return type: `Test9`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:62:37\n+   |\n+LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n+   |                                     ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n+   |                  ^^^                   ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:107:31\n+   |\n+LL |         fn fn_test9(&self) -> _ { () }\n+   |                               ^\n+   |                               |\n+   |                               not allowed in type signatures\n+   |                               help: replace with the correct return type: `()`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:110:34\n+   |\n+LL |         fn fn_test10(&self, _x : _) { }\n+   |                                  ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |         fn fn_test10<T>(&self, _x : T) { }\n+   |                     ^^^             ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:115:28\n+   |\n+LL |         fn clone(&self) -> _ { FnTest9 }\n+   |                            ^\n+   |                            |\n+   |                            not allowed in type signatures\n+   |                            help: replace with the correct return type: `FnTest9`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:118:41\n+   |\n+LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n+   |                                         ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n+   |                      ^^^                   ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/typeck_type_placeholder_item.rs:201:14\n+   |\n+LL |     type A = _;\n+   |              ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/typeck_type_placeholder_item.rs:203:14\n+   |\n+LL |     type B = _;\n+   |              ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:205:14\n+   |\n+LL |     const C: _;\n+   |              ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:208:14\n+   |\n+LL |     const D: _ = 42;\n+   |              ^\n+   |              |\n+   |              not allowed in type signatures\n+   |              help: replace with the correct type: `i32`\n+\n+error: aborting due to 69 previous errors\n+\n+Some errors have detailed explanations: E0121, E0282, E0403.\n+For more information about an error, try `rustc --explain E0121`."}]}