{"sha": "4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiY2FiYmQ0NWE3YjFhNTc2NDY1ZmY1ZTk4MGQ2M2ZjZDZjZDM0ZTA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-04-16T12:16:36Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-05-03T15:30:10Z"}, "message": "add comments and tests", "tree": {"sha": "253a373c13cf5275d1c22d3b002b7f9649c32b6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/253a373c13cf5275d1c22d3b002b7f9649c32b6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0", "html_url": "https://github.com/rust-lang/rust/commit/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73f39a026a5a4e7ac37eb4f4840a9cf25ac5d0a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/73f39a026a5a4e7ac37eb4f4840a9cf25ac5d0a5", "html_url": "https://github.com/rust-lang/rust/commit/73f39a026a5a4e7ac37eb4f4840a9cf25ac5d0a5"}], "stats": {"total": 86, "additions": 73, "deletions": 13}, "files": [{"sha": "d2b7354abb9b8a5f2e22ce1eacb106a5c8139c67", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0", "patch": "@@ -1721,6 +1721,17 @@ impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n \n     /// Returns a simpler type such that `Self: Sized` if and only\n     /// if that type is Sized, or `TyErr` if this type is recursive.\n+    ///\n+    /// This is generally the `struct_tail` if this is a struct, or a\n+    /// tuple of them if this is an enum.\n+    ///\n+    /// Oddly enough, checking that the sized-constraint is Sized is\n+    /// actually more expressive than checking all members:\n+    /// the Sized trait is inductive, so an associated type that references\n+    /// Self would prevent its containing ADT from being Sized.\n+    ///\n+    /// Due to normalization being eager, this applies even if\n+    /// the associated type is behind a pointer, e.g. issue #31299.\n     pub fn sized_constraint(&self, tcx: &ty::TyCtxt<'tcx>) -> Ty<'tcx> {\n         let dep_node = DepNode::SizedConstraint(self.did);\n         match self.sized_constraint.get(dep_node) {\n@@ -1749,6 +1760,7 @@ impl<'tcx> AdtDefData<'tcx, 'tcx> {\n             .collect();\n \n         match tys.len() {\n+            _ if tys.references_error() => tcx.types.err,\n             0 => tcx.types.bool,\n             1 => tys[0],\n             _ => tcx.mk_tup(tys)\n@@ -1768,7 +1780,7 @@ impl<'tcx> AdtDefData<'tcx, 'tcx> {\n                 tcx.types.bool\n             }\n \n-            TyStr | TyTrait(..) | TySlice(_) => {\n+            TyStr | TyTrait(..) | TySlice(_) | TyError => {\n                 // these are never sized - return the target type\n                 ty\n             }\n@@ -1797,6 +1809,10 @@ impl<'tcx> AdtDefData<'tcx, 'tcx> {\n             }\n \n             TyParam(..) => {\n+                // perf hack: if there is a `T: Sized` bound, then\n+                // we know that `T` is Sized and do not need to check\n+                // it on the impl.\n+\n                 let sized_trait = match tcx.lang_items.sized_trait() {\n                     Some(x) => x,\n                     _ => return ty\n@@ -1815,7 +1831,7 @@ impl<'tcx> AdtDefData<'tcx, 'tcx> {\n                 }\n             }\n \n-            TyInfer(..) | TyError => {\n+            TyInfer(..) => {\n                 bug!(\"unexpected type `{:?}` in sized_constraint_for_ty\",\n                      ty)\n             }\n@@ -1824,9 +1840,21 @@ impl<'tcx> AdtDefData<'tcx, 'tcx> {\n         result\n     }\n \n-    /// Calculates the Sized-constraint. This replaces all always-Sized\n-    /// types with bool. I could have made the TyIVar an Option, but that\n-    /// would have been so much code.\n+    /// Calculates the Sized-constraint.\n+    ///\n+    /// As the Sized-constraint of enums can be a *set* of types,\n+    /// the Sized-constraint may need to be a set also. Because introducing\n+    /// a new type of IVar is currently a complex affair, the Sized-constraint\n+    /// may be a tuple.\n+    ///\n+    /// In fact, there are only a few options for the constraint:\n+    ///     - `bool`, if the type is always Sized\n+    ///     - an obviously-unsized type\n+    ///     - a type parameter or projection whose Sizedness can't be known\n+    ///     - a tuple of type parameters or projections, if there are multiple\n+    ///       such.\n+    ///     - a TyError, if a type contained itself. The representability\n+    ///       check should catch this case.\n     fn calculate_sized_constraint_inner(&'tcx self, tcx: &ty::TyCtxt<'tcx>,\n                                         stack: &mut Vec<AdtDefMaster<'tcx>>)\n     {"}, {"sha": "f39fb0e31c6ee570089ac16b8dc1674e7f2f7e60", "filename": "src/test/compile-fail/issue-17431-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0/src%2Ftest%2Fcompile-fail%2Fissue-17431-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0/src%2Ftest%2Fcompile-fail%2Fissue-17431-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-2.rs?ref=4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n struct Baz { q: Option<Foo> }\n+//~^ ERROR recursive type `Baz` has infinite size\n \n struct Foo { q: Option<Baz> }\n //~^ ERROR recursive type `Foo` has infinite size"}, {"sha": "2919b0b3caca6b2ae82de94b8ab7092afd4619b5", "filename": "src/test/compile-fail/issue-26548.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0/src%2Ftest%2Fcompile-fail%2Fissue-26548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0/src%2Ftest%2Fcompile-fail%2Fissue-26548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26548.rs?ref=4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// error-pattern: overflow representing the type `S`\n+\n trait Mirror { type It: ?Sized; }\n impl<T: ?Sized> Mirror for T { type It = Self; }\n struct S(Option<<S as Mirror>::It>);\n-//~^ ERROR recursive type `S` has infinite size\n \n fn main() {\n     let _s = S(None);"}, {"sha": "2a0773af73bbfef375ec0aa7aaf296d7de7412b5", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0", "patch": "@@ -23,5 +23,4 @@ pub fn main() {\n     let arr: &[_] = &[1, 2, 3];\n     let range = *arr..;\n     //~^ ERROR `[_]: std::marker::Sized` is not satisfied\n-    //~| ERROR `[_]: std::marker::Sized` is not satisfied\n }"}, {"sha": "712b4ac22f068f890bcc9f2f2d9a7cf06d7ec64e", "filename": "src/test/compile-fail/sized-cycle-note.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0/src%2Ftest%2Fcompile-fail%2Fsized-cycle-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0/src%2Ftest%2Fcompile-fail%2Fsized-cycle-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsized-cycle-note.rs?ref=4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0", "patch": "@@ -17,14 +17,9 @@\n // 2. it should elaborate the steps that led to the cycle.\n \n struct Baz { q: Option<Foo> }\n-\n+//~^ ERROR recursive type `Baz` has infinite size\n struct Foo { q: Option<Baz> }\n //~^ ERROR recursive type `Foo` has infinite size\n-//~| NOTE type `Foo` is embedded within `std::option::Option<Foo>`...\n-//~| NOTE ...which in turn is embedded within `std::option::Option<Foo>`...\n-//~| NOTE ...which in turn is embedded within `Baz`...\n-//~| NOTE ...which in turn is embedded within `std::option::Option<Baz>`...\n-//~| NOTE ...which in turn is embedded within `Foo`, completing the cycle.\n \n impl Foo { fn bar(&self) {} }\n "}, {"sha": "e49e13c458fa06ac90e5745a4b99fc99473d88c5", "filename": "src/test/run-pass/issue-31299.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0/src%2Ftest%2Frun-pass%2Fissue-31299.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0/src%2Ftest%2Frun-pass%2Fissue-31299.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-31299.rs?ref=4bcabbd45a7b1a576465ff5e980d63fcd6cd34e0", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #31299. This was generating an overflow error\n+// because of eager normalization:\n+//\n+// proving `M: Sized` requires\n+// - proving `PtrBack<Vec<M>>: Sized` requis\n+//   - normalizing `Vec<<Vec<M> as Front>::Back>>: Sized` requires\n+//     - proving `Vec<M>: Front` requires\n+//       - `M: Sized` <-- cycle!\n+//\n+// If we skip the normalization step, though, everything goes fine.\n+\n+trait Front {\n+    type Back;\n+}\n+\n+impl<T> Front for Vec<T> {\n+    type Back = Vec<T>;\n+}\n+\n+struct PtrBack<T: Front>(Vec<T::Back>);\n+\n+struct M(PtrBack<Vec<M>>);\n+\n+fn main() {\n+    std::mem::size_of::<M>();\n+}"}]}