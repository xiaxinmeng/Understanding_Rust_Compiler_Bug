{"sha": "d846169b1598fc9953a2ecc3fb2f0a557ba5a014", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NDYxNjliMTU5OGZjOTk1M2EyZWNjM2ZiMmYwYTU1N2JhNWEwMTQ=", "commit": {"author": {"name": "Tycho Sci", "email": "tychosci@gmail.com", "date": "2012-02-07T08:15:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-09T20:15:30Z"}, "message": "cargo: 2 modes -> 3 modes, and clarify them\n\n* -g or --mode=user to create/use .cargo under $HOME\n* -G or --mode=system to create/use .cargo under sysroot\n* by default, `cargo` uses .cargo under current working directory", "tree": {"sha": "c55115826581aa75dfc5d0e68dbc90236d4bed56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c55115826581aa75dfc5d0e68dbc90236d4bed56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d846169b1598fc9953a2ecc3fb2f0a557ba5a014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d846169b1598fc9953a2ecc3fb2f0a557ba5a014", "html_url": "https://github.com/rust-lang/rust/commit/d846169b1598fc9953a2ecc3fb2f0a557ba5a014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d846169b1598fc9953a2ecc3fb2f0a557ba5a014/comments", "author": {"login": "tychosci", "id": 1026254, "node_id": "MDQ6VXNlcjEwMjYyNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1026254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tychosci", "html_url": "https://github.com/tychosci", "followers_url": "https://api.github.com/users/tychosci/followers", "following_url": "https://api.github.com/users/tychosci/following{/other_user}", "gists_url": "https://api.github.com/users/tychosci/gists{/gist_id}", "starred_url": "https://api.github.com/users/tychosci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tychosci/subscriptions", "organizations_url": "https://api.github.com/users/tychosci/orgs", "repos_url": "https://api.github.com/users/tychosci/repos", "events_url": "https://api.github.com/users/tychosci/events{/privacy}", "received_events_url": "https://api.github.com/users/tychosci/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48e206ee8117c12b7f75fbb3e0497272a965c5bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/48e206ee8117c12b7f75fbb3e0497272a965c5bf", "html_url": "https://github.com/rust-lang/rust/commit/48e206ee8117c12b7f75fbb3e0497272a965c5bf"}], "stats": {"total": 90, "additions": 67, "deletions": 23}, "files": [{"sha": "c168b2c45502c4ce3b8383ce6e0eb6e566e4557c", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 58, "deletions": 20, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d846169b1598fc9953a2ecc3fb2f0a557ba5a014/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d846169b1598fc9953a2ecc3fb2f0a557ba5a014/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=d846169b1598fc9953a2ecc3fb2f0a557ba5a014", "patch": "@@ -5,7 +5,8 @@ use std;\n \n import rustc::syntax::{ast, codemap};\n import rustc::syntax::parse::parser;\n-import rustc::util::filesearch::{get_cargo_root, get_cargo_root_nearest};\n+import rustc::util::filesearch::{get_cargo_root, get_cargo_root_nearest,\n+                                 get_cargo_sysroot};\n import rustc::driver::diagnostic;\n \n import std::fs;\n@@ -20,7 +21,7 @@ import str;\n import std::tempfile;\n import vec;\n import std::getopts;\n-import getopts::{optflag, opt_present};\n+import getopts::{optflag, optopt, opt_present};\n \n enum _src {\n     /* Break cycles in package <-> source */\n@@ -69,12 +70,14 @@ type pkg = {\n \n type options = {\n     test: bool,\n-    cwd: bool,\n+    mode: mode,\n     free: [str],\n };\n \n+enum mode { system_mode, user_mode, local_mode }\n+\n fn opts() -> [getopts::opt] {\n-    [optflag(\"g\"), optflag(\"global\"), optflag(\"test\")]\n+    [optflag(\"g\"), optflag(\"G\"), optopt(\"mode\"), optflag(\"test\")]\n }\n \n fn info(msg: str) {\n@@ -343,21 +346,40 @@ fn build_cargo_options(argv: [str]) -> options {\n     };\n \n     let test = opt_present(match, \"test\");\n-    let cwd = !(opt_present(match, \"g\") || opt_present(match, \"global\"));\n+    let mode = if opt_present(match, \"G\") {\n+        if opt_present(match, \"mode\") { fail \"--mode and -G both provided\"; }\n+        if opt_present(match, \"g\") { fail \"-G and -g both provided\"; }\n+        system_mode\n+    } else if opt_present(match, \"g\") {\n+        if opt_present(match, \"mode\") { fail \"--mode and -g both provided\"; }\n+        if opt_present(match, \"G\") { fail \"-G and -g both provided\"; }\n+        user_mode\n+    } else if opt_present(match, \"mode\") {\n+        alt getopts::opt_str(match, \"mode\") {\n+            \"system\" { system_mode }\n+            \"user\" { user_mode }\n+            \"local\" { local_mode }\n+            _ { fail \"argument to `mode` must be one of `system`\" +\n+                \", `user`, or `normal`\";\n+            }\n+        }\n+    } else {\n+        local_mode\n+    };\n \n-    {test: test, cwd: cwd, free: match.free}\n+    {test: test, mode: mode, free: match.free}\n }\n \n fn configure(opts: options) -> cargo {\n-    let get_cargo_dir = if opts.cwd {\n-        get_cargo_root_nearest\n-    } else {\n-        get_cargo_root\n+    let get_cargo_dir = alt opts.mode {\n+        system_mode { get_cargo_sysroot }\n+        user_mode { get_cargo_root }\n+        local_mode { get_cargo_root_nearest }\n     };\n \n     let p = alt get_cargo_dir() {\n-      result::ok(p) { p }\n-      result::err(e) { fail e }\n+        result::ok(p) { p }\n+        result::err(e) { fail e }\n     };\n \n     let sources = map::new_str_hash::<source>();\n@@ -736,6 +758,8 @@ fn cmd_init(c: cargo) {\n     }\n     info(#fmt[\"signature ok for sources.json\"]);\n     run::run_program(\"cp\", [srcfile, destsrcfile]);\n+\n+    info(#fmt[\"Initialized .cargo in %s\", c.root]);\n }\n \n fn print_pkg(s: source, p: package) {\n@@ -775,14 +799,28 @@ fn cmd_search(c: cargo) {\n }\n \n fn cmd_usage() {\n-    print(\"Usage: cargo <verb> [args...]\");\n-    print(\"  init                                          Set up .cargo\");\n-    print(\"  install [--test] [source/]package-name        Install by name\");\n-    print(\"  install [--test] uuid:[source/]package-uuid   Install by uuid\");\n-    print(\"  list [source]                                 List packages\");\n-    print(\"  search <name | '*'> [tags...]                 Search packages\");\n-    print(\"  sync                                          Sync all sources\");\n-    print(\"  usage                                         This\");\n+    print(\"Usage: cargo <verb> [options] [args...]\" +\n+          \"\n+\n+    init                                          Set up .cargo\n+    install [--test] [source/]package-name        Install by name\n+    install [--test] uuid:[source/]package-uuid   Install by uuid\n+    list [source]                                 List packages\n+    search <name | '*'> [tags...]                 Search packages\n+    sync                                          Sync all sources\n+    usage                                         This\n+\n+Options:\n+\n+    --mode=[system,user,local]   change mode as (system/user/local)\n+    -g                           equivalent to --mode=user\n+    -G                           equivalent to --mode=system\n+\n+NOTE:\n+This command creates/uses local-level .cargo by default.\n+To create/use user-level .cargo, use option -g/--mode=user.\n+To create/use system-level .cargo, use option -G/--mode=system.\n+\");\n }\n \n fn main(argv: [str]) {"}, {"sha": "82859ce22f1e133e0495238dd8de6d2b331a4d67", "filename": "src/comp/util/filesearch.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d846169b1598fc9953a2ecc3fb2f0a557ba5a014/src%2Fcomp%2Futil%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d846169b1598fc9953a2ecc3fb2f0a557ba5a014/src%2Fcomp%2Futil%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Ffilesearch.rs?ref=d846169b1598fc9953a2ecc3fb2f0a557ba5a014", "patch": "@@ -10,6 +10,7 @@ export pick;\n export pick_file;\n export search;\n export relative_target_lib_path;\n+export get_cargo_sysroot;\n export get_cargo_root;\n export get_cargo_root_nearest;\n export libdir;\n@@ -47,6 +48,8 @@ fn mk_filesearch(maybe_sysroot: option<fs::path>,\n                   result::ok(p) { [p] }\n                   result::err(p) { [] }\n                 }\n+                + [fs::connect(fs::connect(self.sysroot, \".cargo\"),\n+                               libdir())]\n         }\n         fn get_target_lib_path() -> fs::path {\n             make_target_lib_path(self.sysroot, self.target_triple)\n@@ -109,6 +112,10 @@ fn get_sysroot(maybe_sysroot: option<fs::path>) -> fs::path {\n     }\n }\n \n+fn get_cargo_sysroot() -> result::t<fs::path, str> {\n+    result::ok(fs::connect(get_default_sysroot(),  \".cargo\"))\n+}\n+\n fn get_cargo_root() -> result::t<fs::path, str> {\n     alt generic_os::getenv(\"CARGO_ROOT\") {\n         some(_p) { result::ok(_p) }\n@@ -129,9 +136,8 @@ fn get_cargo_root_nearest() -> result::t<fs::path, str> {\n         let cwd_cargo = fs::connect(cwd, \".cargo\");\n         let par_cargo = fs::connect(dirname, \".cargo\");\n \n-        // FIXME: this duplicates lib path\n-        if cwd_cargo == p {\n-            ret result::ok(p);\n+        if fs::path_is_dir(cwd_cargo) || cwd_cargo == p {\n+            ret result::ok(cwd_cargo);\n         }\n \n         while vec::is_not_empty(dirpath) && par_cargo != p {"}]}