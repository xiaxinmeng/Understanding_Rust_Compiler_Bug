{"sha": "982a9662c51b7746fd8aa1347034520667de2e8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MmE5NjYyYzUxYjc3NDZmZDhhYTEzNDcwMzQ1MjA2NjdkZTJlOGE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:01:58Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:01:58Z"}, "message": "Mention `alloc` in the name of the interning methods", "tree": {"sha": "f63a8ad3798c84f4ccc3de71fe27a5ea2f2b6799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f63a8ad3798c84f4ccc3de71fe27a5ea2f2b6799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/982a9662c51b7746fd8aa1347034520667de2e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/982a9662c51b7746fd8aa1347034520667de2e8a", "html_url": "https://github.com/rust-lang/rust/commit/982a9662c51b7746fd8aa1347034520667de2e8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/982a9662c51b7746fd8aa1347034520667de2e8a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760df2c3d0e0ef2f12b164bfbf32348d555fbe15", "url": "https://api.github.com/repos/rust-lang/rust/commits/760df2c3d0e0ef2f12b164bfbf32348d555fbe15", "html_url": "https://github.com/rust-lang/rust/commit/760df2c3d0e0ef2f12b164bfbf32348d555fbe15"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "4d0956f018f6a2453b1c138dd6ce86e53abae90f", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/982a9662c51b7746fd8aa1347034520667de2e8a/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a9662c51b7746fd8aa1347034520667de2e8a/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=982a9662c51b7746fd8aa1347034520667de2e8a", "patch": "@@ -255,7 +255,7 @@ impl<'s> AllocDecodingSession<'s> {\n                     // We already have a reserved AllocId.\n                     let alloc_id = alloc_id.unwrap();\n                     trace!(\"decoded alloc {:?} {:#?}\", alloc_id, allocation);\n-                    decoder.tcx().alloc_map.lock().set_id_same_memory(alloc_id, allocation);\n+                    decoder.tcx().alloc_map.lock().set_alloc_id_same_memory(alloc_id, allocation);\n                     Ok(alloc_id)\n                 },\n                 AllocDiscriminant::Fn => {\n@@ -325,8 +325,8 @@ impl<'tcx> AllocMap<'tcx> {\n     /// Obtains a new allocation ID that can be referenced but does not\n     /// yet have an allocation backing it.\n     ///\n-    /// Make sure to call `set_id_memory` or `set_id_same_memory` before returning such an\n-    /// `AllocId` from a query.\n+    /// Make sure to call `set_alloc_id_memory` or `set_alloc_id_same_memory` before returning such\n+    /// an `AllocId` from a query.\n     pub fn reserve(\n         &mut self,\n     ) -> AllocId {\n@@ -390,21 +390,21 @@ impl<'tcx> AllocMap<'tcx> {\n     // inside rustc?\n     pub fn allocate(&mut self, mem: &'tcx Allocation) -> AllocId {\n         let id = self.reserve();\n-        self.set_id_memory(id, mem);\n+        self.set_alloc_id_memory(id, mem);\n         id\n     }\n \n     /// Freeze an `AllocId` created with `reserve` by pointing it at an `Allocation`. Trying to\n     /// call this function twice, even with the same `Allocation` will ICE the compiler.\n-    pub fn set_id_memory(&mut self, id: AllocId, mem: &'tcx Allocation) {\n+    pub fn set_alloc_id_memory(&mut self, id: AllocId, mem: &'tcx Allocation) {\n         if let Some(old) = self.id_to_kind.insert(id, AllocKind::Memory(mem)) {\n             bug!(\"tried to set allocation id {}, but it was already existing as {:#?}\", id, old);\n         }\n     }\n \n     /// Freeze an `AllocId` created with `reserve` by pointing it at an `Allocation`. May be called\n     /// twice for the same `(AllocId, Allocation)` pair.\n-    pub fn set_id_same_memory(&mut self, id: AllocId, mem: &'tcx Allocation) {\n+    pub fn set_alloc_id_same_memory(&mut self, id: AllocId, mem: &'tcx Allocation) {\n         self.id_to_kind.insert_same(id, AllocKind::Memory(mem));\n     }\n }"}, {"sha": "a42821a8c067732051ef858391b167866461b49b", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982a9662c51b7746fd8aa1347034520667de2e8a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a9662c51b7746fd8aa1347034520667de2e8a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=982a9662c51b7746fd8aa1347034520667de2e8a", "patch": "@@ -638,7 +638,7 @@ where\n         // ensure llvm knows not to put this into immutable memory\n         alloc.mutability = mutability;\n         let alloc = self.tcx.intern_const_alloc(alloc);\n-        self.tcx.alloc_map.lock().set_id_memory(alloc_id, alloc);\n+        self.tcx.alloc_map.lock().set_alloc_id_memory(alloc_id, alloc);\n         // recurse into inner allocations\n         for &(_, alloc) in alloc.relocations.values() {\n             // FIXME: Reusing the mutability here is likely incorrect.  It is originally"}]}