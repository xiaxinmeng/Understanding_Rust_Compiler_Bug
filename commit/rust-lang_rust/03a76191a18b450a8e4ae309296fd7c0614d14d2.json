{"sha": "03a76191a18b450a8e4ae309296fd7c0614d14d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYTc2MTkxYTE4YjQ1MGE4ZTRhZTMwOTI5NmZkN2MwNjE0ZDE0ZDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-03T10:05:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-03T10:05:50Z"}, "message": "Rename ProjectRoot -> ProjectManifest", "tree": {"sha": "bcc25e58278379aff447e9d8f3ce5c5402649e6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcc25e58278379aff447e9d8f3ce5c5402649e6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03a76191a18b450a8e4ae309296fd7c0614d14d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03a76191a18b450a8e4ae309296fd7c0614d14d2", "html_url": "https://github.com/rust-lang/rust/commit/03a76191a18b450a8e4ae309296fd7c0614d14d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03a76191a18b450a8e4ae309296fd7c0614d14d2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a88de809f13f3b4abe0ffa11ff87c6f845050bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a88de809f13f3b4abe0ffa11ff87c6f845050bd", "html_url": "https://github.com/rust-lang/rust/commit/0a88de809f13f3b4abe0ffa11ff87c6f845050bd"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "a9961269026a374d02857770d726af47e69c53f3", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/03a76191a18b450a8e4ae309296fd7c0614d14d2/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a76191a18b450a8e4ae309296fd7c0614d14d2/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=03a76191a18b450a8e4ae309296fd7c0614d14d2", "patch": "@@ -58,24 +58,24 @@ impl PackageRoot {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash, Ord, PartialOrd)]\n-pub enum ProjectRoot {\n+pub enum ProjectManifest {\n     ProjectJson(PathBuf),\n     CargoToml(PathBuf),\n }\n \n-impl ProjectRoot {\n-    pub fn from_manifest_file(path: PathBuf) -> Result<ProjectRoot> {\n+impl ProjectManifest {\n+    pub fn from_manifest_file(path: PathBuf) -> Result<ProjectManifest> {\n         if path.ends_with(\"rust-project.json\") {\n-            return Ok(ProjectRoot::ProjectJson(path));\n+            return Ok(ProjectManifest::ProjectJson(path));\n         }\n         if path.ends_with(\"Cargo.toml\") {\n-            return Ok(ProjectRoot::CargoToml(path));\n+            return Ok(ProjectManifest::CargoToml(path));\n         }\n         bail!(\"project root must point to Cargo.toml or rust-project.json: {}\", path.display())\n     }\n \n-    pub fn discover_single(path: &Path) -> Result<ProjectRoot> {\n-        let mut candidates = ProjectRoot::discover(path)?;\n+    pub fn discover_single(path: &Path) -> Result<ProjectManifest> {\n+        let mut candidates = ProjectManifest::discover(path)?;\n         let res = match candidates.pop() {\n             None => bail!(\"no projects\"),\n             Some(it) => it,\n@@ -87,12 +87,12 @@ impl ProjectRoot {\n         Ok(res)\n     }\n \n-    pub fn discover(path: &Path) -> io::Result<Vec<ProjectRoot>> {\n+    pub fn discover(path: &Path) -> io::Result<Vec<ProjectManifest>> {\n         if let Some(project_json) = find_in_parent_dirs(path, \"rust-project.json\") {\n-            return Ok(vec![ProjectRoot::ProjectJson(project_json)]);\n+            return Ok(vec![ProjectManifest::ProjectJson(project_json)]);\n         }\n         return find_cargo_toml(path)\n-            .map(|paths| paths.into_iter().map(ProjectRoot::CargoToml).collect());\n+            .map(|paths| paths.into_iter().map(ProjectManifest::CargoToml).collect());\n \n         fn find_cargo_toml(path: &Path) -> io::Result<Vec<PathBuf>> {\n             match find_in_parent_dirs(path, \"Cargo.toml\") {\n@@ -129,10 +129,10 @@ impl ProjectRoot {\n         }\n     }\n \n-    pub fn discover_all(paths: &[impl AsRef<Path>]) -> Vec<ProjectRoot> {\n+    pub fn discover_all(paths: &[impl AsRef<Path>]) -> Vec<ProjectManifest> {\n         let mut res = paths\n             .iter()\n-            .filter_map(|it| ProjectRoot::discover(it.as_ref()).ok())\n+            .filter_map(|it| ProjectManifest::discover(it.as_ref()).ok())\n             .flatten()\n             .collect::<FxHashSet<_>>()\n             .into_iter()\n@@ -144,12 +144,12 @@ impl ProjectRoot {\n \n impl ProjectWorkspace {\n     pub fn load(\n-        root: ProjectRoot,\n+        root: ProjectManifest,\n         cargo_features: &CargoConfig,\n         with_sysroot: bool,\n     ) -> Result<ProjectWorkspace> {\n         let res = match root {\n-            ProjectRoot::ProjectJson(project_json) => {\n+            ProjectManifest::ProjectJson(project_json) => {\n                 let file = File::open(&project_json).with_context(|| {\n                     format!(\"Failed to open json file {}\", project_json.display())\n                 })?;\n@@ -160,7 +160,7 @@ impl ProjectWorkspace {\n                     })?,\n                 }\n             }\n-            ProjectRoot::CargoToml(cargo_toml) => {\n+            ProjectManifest::CargoToml(cargo_toml) => {\n                 let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml, cargo_features)\n                     .with_context(|| {\n                         format!("}, {"sha": "67491b42a7a9325862d07991b9f7b0ae337a28a7", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03a76191a18b450a8e4ae309296fd7c0614d14d2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a76191a18b450a8e4ae309296fd7c0614d14d2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=03a76191a18b450a8e4ae309296fd7c0614d14d2", "patch": "@@ -8,7 +8,7 @@ use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{ExternSourceId, FileId, SourceRootId};\n use ra_ide::{AnalysisChange, AnalysisHost};\n use ra_project_model::{\n-    get_rustc_cfg_options, CargoConfig, PackageRoot, ProcMacroClient, ProjectRoot, ProjectWorkspace,\n+    get_rustc_cfg_options, CargoConfig, PackageRoot, ProcMacroClient, ProjectManifest, ProjectWorkspace,\n };\n use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -28,7 +28,7 @@ pub fn load_cargo(\n     with_proc_macro: bool,\n ) -> Result<(AnalysisHost, FxHashMap<SourceRootId, PackageRoot>)> {\n     let root = std::env::current_dir()?.join(root);\n-    let root = ProjectRoot::discover_single(&root)?;\n+    let root = ProjectManifest::discover_single(&root)?;\n     let ws = ProjectWorkspace::load(\n         root,\n         &CargoConfig { load_out_dirs_from_check, ..Default::default() },"}, {"sha": "ea5b4c91c80f69d0fca3f28a2327180ad7897f6c", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03a76191a18b450a8e4ae309296fd7c0614d14d2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a76191a18b450a8e4ae309296fd7c0614d14d2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=03a76191a18b450a8e4ae309296fd7c0614d14d2", "patch": "@@ -28,7 +28,7 @@ use lsp_types::{\n use ra_flycheck::{CheckTask, Status};\n use ra_ide::{Canceled, FileId, LibraryData, LineIndex, SourceRootId};\n use ra_prof::profile;\n-use ra_project_model::{PackageRoot, ProjectRoot, ProjectWorkspace};\n+use ra_project_model::{PackageRoot, ProjectManifest, ProjectWorkspace};\n use ra_vfs::{VfsFile, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n use rustc_hash::FxHashSet;\n@@ -96,7 +96,7 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n     let mut global_state = {\n         let workspaces = {\n             // FIXME: support dynamic workspace loading.\n-            let project_roots = ProjectRoot::discover_all(&ws_roots);\n+            let project_roots = ProjectManifest::discover_all(&ws_roots);\n \n             if project_roots.is_empty() && config.notifications.cargo_toml_not_found {\n                 show_message("}]}