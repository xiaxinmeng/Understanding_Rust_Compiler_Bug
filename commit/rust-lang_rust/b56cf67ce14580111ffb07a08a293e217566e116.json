{"sha": "b56cf67ce14580111ffb07a08a293e217566e116", "node_id": "C_kwDOAAsO6NoAKGI1NmNmNjdjZTE0NTgwMTExZmZiMDdhMDhhMjkzZTIxNzU2NmUxMTY", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-05-23T01:57:58Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-08-04T14:29:32Z"}, "message": "Add some docs for BorrowBuf\n\nSigned-off-by: Nick Cameron <nrc@ncameron.org>", "tree": {"sha": "e9bf9d9144028c67d3ffc5e091faae7735ec317b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9bf9d9144028c67d3ffc5e091faae7735ec317b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b56cf67ce14580111ffb07a08a293e217566e116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b56cf67ce14580111ffb07a08a293e217566e116", "html_url": "https://github.com/rust-lang/rust/commit/b56cf67ce14580111ffb07a08a293e217566e116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b56cf67ce14580111ffb07a08a293e217566e116/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1aae4d27902aaaa0d8e7d1a76d030b4fc90f329", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1aae4d27902aaaa0d8e7d1a76d030b4fc90f329", "html_url": "https://github.com/rust-lang/rust/commit/c1aae4d27902aaaa0d8e7d1a76d030b4fc90f329"}], "stats": {"total": 84, "additions": 60, "deletions": 24}, "files": [{"sha": "8783763fd425fad45e60bb742e67b39462c7f6a1", "filename": "library/std/src/io/readbuf.rs", "status": "modified", "additions": 60, "deletions": 24, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/b56cf67ce14580111ffb07a08a293e217566e116/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56cf67ce14580111ffb07a08a293e217566e116/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs?ref=b56cf67ce14580111ffb07a08a293e217566e116", "patch": "@@ -7,8 +7,7 @@ use crate::cmp;\n use crate::fmt::{self, Debug, Formatter};\n use crate::mem::MaybeUninit;\n \n-// TODO docs\n-/// A wrapper around a byte buffer that is incrementally filled and initialized.\n+/// A borrowed byte buffer which is incrementally filled and initialized.\n ///\n /// This type is a sort of \"double cursor\". It tracks three regions in the buffer: a region at the beginning of the\n /// buffer that has been logically filled with data, a region that has been initialized at some point but not yet\n@@ -21,9 +20,20 @@ use crate::mem::MaybeUninit;\n /// [ filled |         unfilled         ]\n /// [    initialized    | uninitialized ]\n /// ```\n+///\n+/// A `BorrowBuf` is created around some existing data (or capacity for data) via a unique reference\n+/// (`&mut`). The `BorrowBuf` can be configured (e.g., using `clear` or `set_init`), but otherwise\n+/// is read-only. To write into the buffer, use `unfilled` to create a `BorrowCursor`. The cursor\n+/// has write-only access to the unfilled portion of the buffer (you can think of it like a\n+/// write-only iterator).\n+///\n+/// The lifetime `'a` is a bound on the lifetime of the underlying data.\n pub struct BorrowBuf<'a> {\n+    /// The buffer's underlying data.\n     buf: &'a mut [MaybeUninit<u8>],\n+    /// The length of `self.buf` which is known to be filled.\n     filled: usize,\n+    /// The length of `self.buf` which is known to be initialized.\n     initialized: usize,\n }\n \n@@ -37,7 +47,7 @@ impl Debug for BorrowBuf<'_> {\n     }\n }\n \n-/// Creates a new `BorrowBuf` from a fully initialized slice.\n+/// Create a new `BorrowBuf` from a fully initialized slice.\n impl<'a> From<&'a mut [u8]> for BorrowBuf<'a> {\n     #[inline]\n     fn from(slice: &'a mut [u8]) -> BorrowBuf<'a> {\n@@ -52,7 +62,7 @@ impl<'a> From<&'a mut [u8]> for BorrowBuf<'a> {\n     }\n }\n \n-/// Creates a new `BorrowBuf` from a fully uninitialized buffer.\n+/// Create a new `BorrowBuf` from an uninitialized buffer.\n ///\n /// Use `set_init` if part of the buffer is known to be already initialized.\n impl<'a> From<&'a mut [MaybeUninit<u8>]> for BorrowBuf<'a> {\n@@ -90,7 +100,7 @@ impl<'a> BorrowBuf<'a> {\n \n     /// Returns a cursor over the unfilled part of the buffer.\n     #[inline]\n-    pub fn unfilled<'b>(&'b mut self) -> BorrowCursor<'a, 'b> {\n+    pub fn unfilled<'this>(&'this mut self) -> BorrowCursor<'this, 'a> {\n         BorrowCursor { start: self.filled, buf: self }\n     }\n \n@@ -118,20 +128,36 @@ impl<'a> BorrowBuf<'a> {\n     }\n }\n \n-/// A cursor view of a [`BorrowBuf`](BorrowBuf).\n+/// A writeable view of the unfilled portion of a [`BorrowBuf`](BorrowBuf).\n+///\n+/// Provides access to the initialized and uninitialized parts of the underlying `BorrowBuf`.\n+/// Data can be written directly to the cursor by using [`append`](BorrowCursor::append) or\n+/// indirectly by getting a slice of part or all of the cursor and writing into the slice. In the\n+/// indirect case, the caller must call [`advance`](BorrowCursor::advance) after writing to inform\n+/// the cursor how many bytes have been written.\n ///\n-/// Provides mutable access to the unfilled portion (both initialised and uninitialised data) from\n-/// the buffer.\n+/// Once data is written to the cursor, it becomes part of the filled portion of the underlying\n+/// `BorrowBuf` and can no longer be accessed or re-written by the cursor. I.e., the cursor tracks\n+/// the unfilled part of the underlying `BorrowBuf`.\n+///\n+/// The `'buf` lifetime is a bound on the lifetime of the underlying buffer. `'data` is a bound on\n+/// that buffer's underlying data.\n #[derive(Debug)]\n-pub struct BorrowCursor<'a, 'b> {\n-    buf: &'b mut BorrowBuf<'a>,\n+pub struct BorrowCursor<'buf, 'data> {\n+    /// The underlying buffer.\n+    buf: &'buf mut BorrowBuf<'data>,\n+    /// The length of the filled portion of the underlying buffer at the time of the cursor's\n+    /// creation.\n     start: usize,\n }\n \n-impl<'a, 'b> BorrowCursor<'a, 'b> {\n+impl<'buf, 'data> BorrowCursor<'buf, 'data> {\n     /// Clone this cursor.\n+    ///\n+    /// Since a cursor maintains unique access to its underlying buffer, the cloned cursor is not\n+    /// accessible while the clone is alive.\n     #[inline]\n-    pub fn clone<'c>(&'c mut self) -> BorrowCursor<'a, 'c> {\n+    pub fn clone<'this>(&'this mut self) -> BorrowCursor<'this, 'data> {\n         BorrowCursor { buf: self.buf, start: self.start }\n     }\n \n@@ -141,14 +167,16 @@ impl<'a, 'b> BorrowCursor<'a, 'b> {\n         self.buf.capacity() - self.buf.filled\n     }\n \n-    /// Returns the number of bytes written to this cursor.\n-    // TODO check for reuse uses\n+    /// Returns the number of bytes written to this cursor since it was created from a `BorrowBuf`.\n+    ///\n+    /// Note that if this cursor is a clone of another, then the count returned is the count written\n+    /// via either cursor, not the count since the cursor was cloned.\n     #[inline]\n     pub fn written(&self) -> usize {\n         self.buf.filled - self.start\n     }\n \n-    /// Returns a shared reference to the initialized portion of the buffer.\n+    /// Returns a shared reference to the initialized portion of the cursor.\n     #[inline]\n     pub fn init_ref(&self) -> &[u8] {\n         //SAFETY: We only slice the initialized part of the buffer, which is always valid\n@@ -157,7 +185,7 @@ impl<'a, 'b> BorrowCursor<'a, 'b> {\n         }\n     }\n \n-    /// Returns a mutable reference to the initialized portion of the buffer.\n+    /// Returns a mutable reference to the initialized portion of the cursor.\n     #[inline]\n     pub fn init_mut(&mut self) -> &mut [u8] {\n         //SAFETY: We only slice the initialized part of the buffer, which is always valid\n@@ -168,25 +196,33 @@ impl<'a, 'b> BorrowCursor<'a, 'b> {\n         }\n     }\n \n-    /// Returns a mutable reference to the uninitialized part of the buffer.\n+    /// Returns a mutable reference to the uninitialized part of the cursor.\n     ///\n     /// It is safe to uninitialize any of these bytes.\n     #[inline]\n     pub fn uninit_mut(&mut self) -> &mut [MaybeUninit<u8>] {\n         &mut self.buf.buf[self.buf.initialized..]\n     }\n \n-    /// A view of the cursor as a mutable slice of `MaybeUninit<u8>`.\n+    /// Returns a mutable reference to the whole cursor.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The caller must not uninitialize any bytes in the initialized portion of the cursor.\n     #[inline]\n     pub unsafe fn as_mut(&mut self) -> &mut [MaybeUninit<u8>] {\n         &mut self.buf.buf[self.buf.filled..]\n     }\n \n-    /// Increases the size of the filled region of the buffer.\n+    /// Advance the cursor by asserting that `n` bytes have been filled.\n+    ///\n+    /// After advancing, the `n` bytes are no longer accessible via the cursor and can only be\n+    /// accessed via the underlying buffer. I.e., the buffer's filled portion grows by `n` elements\n+    /// and its unfilled portion (and the capacity of this cursor) shrinks by `n` elements.\n     ///\n     /// # Safety\n     ///\n-    /// The caller must ensure that the first `n` elements of the cursor have been properly\n+    /// The caller must ensure that the first `n` bytes of the cursor have been properly\n     /// initialised.\n     #[inline]\n     pub unsafe fn advance(&mut self, n: usize) -> &mut Self {\n@@ -195,7 +231,7 @@ impl<'a, 'b> BorrowCursor<'a, 'b> {\n         self\n     }\n \n-    /// Initialised all bytes in the cursor.\n+    /// Initializes all bytes in the cursor.\n     #[inline]\n     pub fn ensure_init(&mut self) -> &mut Self {\n         for byte in self.uninit_mut() {\n@@ -208,8 +244,8 @@ impl<'a, 'b> BorrowCursor<'a, 'b> {\n \n     /// Asserts that the first `n` unfilled bytes of the cursor are initialized.\n     ///\n-    /// `BorrowBuf` assumes that bytes are never de-initialized, so this method does nothing when called with fewer\n-    /// bytes than are already known to be initialized.\n+    /// `BorrowBuf` assumes that bytes are never de-initialized, so this method does nothing when\n+    /// called with fewer bytes than are already known to be initialized.\n     ///\n     /// # Safety\n     ///\n@@ -220,7 +256,7 @@ impl<'a, 'b> BorrowCursor<'a, 'b> {\n         self\n     }\n \n-    /// Appends data to the cursor, advancing the position within its buffer.\n+    /// Appends data to the cursor, advancing position within its buffer.\n     ///\n     /// # Panics\n     ///"}]}