{"sha": "db955d33b7a54df6ba90bef713110bc2f85b2830", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOTU1ZDMzYjdhNTRkZjZiYTkwYmVmNzEzMTEwYmMyZjg1YjI4MzA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-04T01:41:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-04T01:42:35Z"}, "message": "rustboot: Say exactly which name was unbound when reporting unbound name errors", "tree": {"sha": "9c6bf7174d76556e18905f574b27af58b73c4490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c6bf7174d76556e18905f574b27af58b73c4490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db955d33b7a54df6ba90bef713110bc2f85b2830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db955d33b7a54df6ba90bef713110bc2f85b2830", "html_url": "https://github.com/rust-lang/rust/commit/db955d33b7a54df6ba90bef713110bc2f85b2830", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db955d33b7a54df6ba90bef713110bc2f85b2830/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3d666bfdf3ef87a91eace7b533e433945b06d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d666bfdf3ef87a91eace7b533e433945b06d76", "html_url": "https://github.com/rust-lang/rust/commit/a3d666bfdf3ef87a91eace7b533e433945b06d76"}], "stats": {"total": 125, "additions": 73, "deletions": 52}, "files": [{"sha": "3d52f23a1d93240ddcc7879e61b3556da7a9e21a", "filename": "src/boot/me/effect.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db955d33b7a54df6ba90bef713110bc2f85b2830/src%2Fboot%2Fme%2Feffect.ml", "raw_url": "https://github.com/rust-lang/rust/raw/db955d33b7a54df6ba90bef713110bc2f85b2830/src%2Fboot%2Fme%2Feffect.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Feffect.ml?ref=db955d33b7a54df6ba90bef713110bc2f85b2830", "patch": "@@ -273,8 +273,8 @@ let process_crate\n   let root_scope = [ SCOPE_crate crate ] in\n   let auth_effect name eff =\n     match lookup_by_name cx [] root_scope name with\n-        None -> ()\n-      | Some (_, id) ->\n+        RES_failed _ -> ()\n+      | RES_ok (_, id) ->\n           if defn_id_is_item cx id\n           then htab_put item_auth id eff\n           else err (Some id) \"auth clause in crate refers to non-item\""}, {"sha": "ed8011c33bb6fcfba8bbdef4054dc77182cf3e75", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/db955d33b7a54df6ba90bef713110bc2f85b2830/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/db955d33b7a54df6ba90bef713110bc2f85b2830/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=db955d33b7a54df6ba90bef713110bc2f85b2830", "patch": "@@ -228,6 +228,13 @@ let all_item_collecting_visitor\n         Walk.visit_stmt_pre = visit_stmt_pre; }\n ;;\n \n+let report_error (full_name:Ast.name) (unbound_name:Ast.name) =\n+  if full_name = unbound_name then\n+    err None \"unbound name '%a'\" Ast.sprintf_name full_name\n+  else\n+    err None \"unbound name '%a' in name '%a'\" Ast.sprintf_name unbound_name\n+      Ast.sprintf_name full_name\n+;;\n \n let lookup_type_node_by_name\n     (cx:ctxt)\n@@ -238,8 +245,8 @@ let lookup_type_node_by_name\n               log cx \"lookup_simple_type_by_name %a\"\n                 Ast.sprintf_name name);\n   match lookup_by_name cx [] scopes name with\n-      None -> err None \"unknown name: %a\" Ast.sprintf_name name\n-    | Some (_, id) ->\n+      RES_failed name' -> report_error name name'\n+    | RES_ok (_, id) ->\n         match htab_search cx.ctxt_all_defns id with\n             Some (DEFN_item { Ast.decl_item = Ast.MOD_ITEM_type _;\n                               Ast.decl_params = _ })\n@@ -274,8 +281,8 @@ let rec lookup_type_by_name\n               log cx \"+++ lookup_type_by_name %a\"\n                 Ast.sprintf_name name);\n   match lookup_by_name cx [] scopes name with\n-      None -> err None \"unknown name: %a\" Ast.sprintf_name name\n-    | Some (scopes', id) ->\n+      RES_failed name' -> report_error name name'\n+    | RES_ok (scopes', id) ->\n         let ty, params =\n           match htab_search cx.ctxt_all_defns id with\n               Some (DEFN_item { Ast.decl_item = Ast.MOD_ITEM_type (_, t);\n@@ -614,17 +621,17 @@ let lval_base_resolving_visitor\n   let lookup_defn_by_ident id ident =\n     log cx \"looking up slot or item with ident '%s'\" ident;\n     match lookup cx (!scopes) (Ast.KEY_ident ident) with\n-        None -> err (Some id) \"unresolved identifier '%s'\" ident\n-      | Some (_, id) -> (log cx \"resolved to node id #%d\"\n+        RES_failed _ -> err (Some id) \"unresolved identifier '%s'\" ident\n+      | RES_ok (_, id) -> (log cx \"resolved to node id #%d\"\n                            (int_of_node id); id)\n   in\n   let lookup_slot_by_temp id temp =\n     log cx \"looking up temp slot #%d\" (int_of_temp temp);\n     let res = lookup cx (!scopes) (Ast.KEY_temp temp) in\n       match res with\n-          None -> err\n+          RES_failed _ -> err\n             (Some id) \"unresolved temp node #%d\" (int_of_temp temp)\n-        | Some (_, id) ->\n+        | RES_ok (_, id) ->\n             (log cx \"resolved to node id #%d\" (int_of_node id); id)\n   in\n   let lookup_defn_by_name_base id nb ="}, {"sha": "56c52a3cb171d8e3680e384ea2ce2ee30f144d19", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 52, "deletions": 38, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/db955d33b7a54df6ba90bef713110bc2f85b2830/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/db955d33b7a54df6ba90bef713110bc2f85b2830/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=db955d33b7a54df6ba90bef713110bc2f85b2830", "patch": "@@ -1950,7 +1950,13 @@ visitor =\n \n (* Generic lookup, used for slots, items, types, etc. *)\n \n-type resolved = ((scope list * node_id) option) ;;\n+type resolved =\n+    RES_ok of scope list * node_id\n+  | RES_failed of Ast.name\n+;;\n+\n+let no_such_ident ident = RES_failed (Ast.NAME_base (Ast.BASE_ident ident))\n+let no_such_temp temp = RES_failed (Ast.NAME_base (Ast.BASE_temp temp))\n \n let get_mod_item\n     (cx:ctxt)\n@@ -2000,20 +2006,20 @@ let rec project_ident_from_items\n   in\n \n   if not (inside || (exports_permit view ident))\n-  then None\n+  then no_such_ident ident\n   else\n     match htab_search items ident with\n         Some i ->\n           found cx scopes i.id\n       | None ->\n           match htab_search view.Ast.view_imports ident with\n-              None -> None\n+              None -> no_such_ident ident\n             | Some name ->\n                 lookup_by_name cx lchk scopes name\n \n and found cx scopes id =\n   Hashtbl.replace cx.ctxt_node_referenced id ();\n-  Some (scopes, id)\n+  RES_ok (scopes, id)\n \n and project_name_comp_from_resolved\n     (cx:ctxt)\n@@ -2022,8 +2028,8 @@ and project_name_comp_from_resolved\n     (ext:Ast.name_component)\n     : resolved =\n   match mod_res with\n-      None -> None\n-    | Some (scopes, id) ->\n+      RES_failed _ -> mod_res\n+    | RES_ok (scopes, id) ->\n         let scope = (SCOPE_mod_item {id=id; node=get_item cx id}) in\n         let scopes = scope :: scopes in\n         let ident = get_name_comp_ident ext in\n@@ -2054,27 +2060,37 @@ and lookup_by_ident\n     : resolved =\n \n   let check_slots scopes islots =\n-    arr_search islots\n-      (fun _ (sloti,ident') ->\n-         if ident = ident'\n-         then found cx scopes sloti.id\n-         else None)\n+    let rec search i =\n+      if i == (Array.length islots) then\n+        no_such_ident ident\n+      else\n+        let (sloti, ident') = islots.(i) in\n+        if ident = ident'\n+        then found cx scopes sloti.id\n+        else search (i + 1)\n+    in\n+    search 0\n   in\n \n   let check_params scopes params =\n-    arr_search params\n-      (fun _ {node=(i,_); id=id} ->\n-         if i = ident\n-         then found cx scopes id\n-         else None)\n+    let rec search i =\n+      if i == (Array.length params) then\n+        no_such_ident ident\n+      else\n+        let { node = (ident', _); id = id } = params.(i) in\n+        if ident = ident'\n+        then found cx scopes id\n+        else search (i + 1)\n+    in\n+    search 0\n   in\n \n   let passed_capture_scope = ref false in\n \n   let would_capture r =\n     match r with\n-        None -> None\n-      | Some _ ->\n+        RES_failed _ -> r\n+      | RES_ok _ ->\n           if !passed_capture_scope\n           then err None \"attempted dynamic environment-capture\"\n           else r\n@@ -2091,7 +2107,7 @@ and lookup_by_ident\n                 | None ->\n                     match htab_search block_items ident with\n                         Some id -> found cx scopes id\n-                      | None -> None\n+                      | None -> no_such_ident ident\n             end\n \n       | SCOPE_crate crate ->\n@@ -2115,21 +2131,21 @@ and lookup_by_ident\n                     project_ident_from_items cx lchk\n                       scopes item.id md ident true\n \n-                | _ -> None\n+                | _ -> no_such_ident ident\n             in\n               match item_match with\n-                  Some _ -> item_match\n-                | None ->\n+                  RES_ok _ -> item_match\n+                | RES_failed _ ->\n                     would_capture\n                       (check_params scopes item.node.Ast.decl_params)\n           end\n   in\n   let rec search scopes =\n     match scopes with\n-        [] -> None\n+        [] -> no_such_ident ident\n       | scope::rest ->\n           match check_scope scopes scope with\n-              None ->\n+              RES_failed _ ->\n                 begin\n                   let is_ty_item i =\n                     match i.node.Ast.decl_item with\n@@ -2157,28 +2173,26 @@ let lookup_by_temp\n     (cx:ctxt)\n     (scopes:scope list)\n     (temp:temp_id)\n-    : ((scope list * node_id) option) =\n-  let passed_item_scope = ref false in\n-  let check_scope scope =\n-    if !passed_item_scope\n-    then None\n-    else\n-      match scope with\n-          SCOPE_block block_id ->\n+    : resolved =\n+  let rec search scopes' =\n+    match scopes' with\n+        (SCOPE_block block_id)::scopes'' ->\n             let block_slots = Hashtbl.find cx.ctxt_block_slots block_id in\n-              htab_search block_slots (Ast.KEY_temp temp)\n-        | _ ->\n-            passed_item_scope := true;\n-            None\n+            begin\n+              match htab_search block_slots (Ast.KEY_temp temp) with\n+                  Some slot -> RES_ok (scopes', slot)\n+                | None -> search scopes''\n+            end\n+      | _ -> no_such_temp temp\n   in\n-    list_search_ctxt scopes check_scope\n+  search scopes\n ;;\n \n let lookup\n     (cx:ctxt)\n     (scopes:scope list)\n     (key:Ast.slot_key)\n-    : ((scope list * node_id) option) =\n+    : resolved =\n   match key with\n       Ast.KEY_temp temp -> lookup_by_temp cx scopes temp\n     | Ast.KEY_ident ident -> lookup_by_ident cx [] scopes ident"}, {"sha": "4ca0caf28bbb79dc0c328d9cf9d316a475ef41a0", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db955d33b7a54df6ba90bef713110bc2f85b2830/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/db955d33b7a54df6ba90bef713110bc2f85b2830/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=db955d33b7a54df6ba90bef713110bc2f85b2830", "patch": "@@ -119,7 +119,7 @@ let determine_constr_key\n \n   let cid =\n     match lookup_by_name cx [] scopes c.Ast.constr_name with\n-        Some (_, cid) ->\n+        RES_ok (_, cid) ->\n           if defn_id_is_item cx cid\n           then\n             begin\n@@ -134,7 +134,7 @@ let determine_constr_key\n             end\n           else\n             bug () \"slot used as predicate\"\n-      | None -> bug () \"predicate not found\"\n+      | RES_failed _ -> bug () \"predicate not found\"\n   in\n \n   let constr_arg_of_carg carg =\n@@ -153,8 +153,8 @@ let determine_constr_key\n               | Ast.CARG_base (Ast.BASE_named nb) ->\n                   begin\n                     match lookup_by_name cx [] scopes (Ast.NAME_base nb) with\n-                        None -> bug () \"constraint-arg not found\"\n-                      | Some (_, aid) ->\n+                        RES_failed _ -> bug () \"constraint-arg not found\"\n+                      | RES_ok (_, aid) ->\n                           if defn_id_is_slot cx aid\n                           then\n                             if type_has_state cx"}]}