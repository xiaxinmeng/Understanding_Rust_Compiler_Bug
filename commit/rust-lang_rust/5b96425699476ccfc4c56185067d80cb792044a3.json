{"sha": "5b96425699476ccfc4c56185067d80cb792044a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOTY0MjU2OTk0NzZjY2ZjNGM1NjE4NTA2N2Q4MGNiNzkyMDQ0YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-12T11:46:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-12T11:46:01Z"}, "message": "Auto merge of #59910 - Centril:rollup-yjv7b06, r=Centril\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #59680 (Document the -Z flag to the rustc book)\n - #59711 (Add back the substring test)\n - #59806 (compiletest: Improve no_prefer_dynamic docs)\n - #59809 (Make trait_methods_not_found use a lock)\n - #59811 (Kill dead code dominator code.)\n - #59814 (Fix broken links on std::boxed doc page)\n - #59821 (improve unknown enum variant errors)\n - #59831 (Remove strange formatting in `Ordering` docs.)\n - #59836 (std::ops::Div examples: correct nominator to numerator)\n - #59857 (SGX target: fix cfg(test) build)\n - #59876 (Update TRPL to use mdbook 0.2)\n - #59880 (Remove note about transmute for float bitpatterns.)\n - #59889 (Update diagnostics.rs)\n - #59891 (Fix the link to sort_by_cached_key)\n - #59894 (save-analysis: Pull associated type definition using `qpath_def`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "93661aac57f5072c15308e697c06f199e0b6853c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93661aac57f5072c15308e697c06f199e0b6853c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b96425699476ccfc4c56185067d80cb792044a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b96425699476ccfc4c56185067d80cb792044a3", "html_url": "https://github.com/rust-lang/rust/commit/5b96425699476ccfc4c56185067d80cb792044a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b96425699476ccfc4c56185067d80cb792044a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "876a3bcb157a0ceb752adf972955d7413f870650", "url": "https://api.github.com/repos/rust-lang/rust/commits/876a3bcb157a0ceb752adf972955d7413f870650", "html_url": "https://github.com/rust-lang/rust/commit/876a3bcb157a0ceb752adf972955d7413f870650"}, {"sha": "7a8329f5dacae9352a0ea72f9ab136c38403d20a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a8329f5dacae9352a0ea72f9ab136c38403d20a", "html_url": "https://github.com/rust-lang/rust/commit/7a8329f5dacae9352a0ea72f9ab136c38403d20a"}], "stats": {"total": 504, "additions": 295, "deletions": 209}, "files": [{"sha": "fcaaa73bdc0f40eb7ad650a67e1a3e119aa3d4e9", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -133,7 +133,7 @@ Compatibility Notes\n [`num::NonZeroI64`]: https://doc.rust-lang.org/std/num/struct.NonZeroI64.html\n [`num::NonZeroI8`]: https://doc.rust-lang.org/std/num/struct.NonZeroI8.html\n [`num::NonZeroIsize`]: https://doc.rust-lang.org/std/num/struct.NonZeroIsize.html\n-[`slice::sort_by_cached_key`]: https://doc.rust-lang.org/std/slice/fn.sort_by_cached_key\n+[`slice::sort_by_cached_key`]: https://doc.rust-lang.org/std/primitive.slice.html#method.sort_by_cached_key\n [`str::escape_debug`]: https://doc.rust-lang.org/std/primitive.str.html#method.escape_debug\n [`str::escape_default`]: https://doc.rust-lang.org/std/primitive.str.html#method.escape_default\n [`str::escape_unicode`]: https://doc.rust-lang.org/std/primitive.str.html#method.escape_unicode"}, {"sha": "330f66c1df0df74a1032752e00a8e893abfbb72d", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -277,7 +277,7 @@ impl Step for TheBook {\n         builder.ensure(Rustbook {\n             target,\n             name: INTERNER.intern_string(name.to_string()),\n-            version: RustbookVersion::MdBook1,\n+            version: RustbookVersion::MdBook2,\n         });\n \n         // building older edition redirects\n@@ -286,21 +286,21 @@ impl Step for TheBook {\n         builder.ensure(Rustbook {\n             target,\n             name: INTERNER.intern_string(source_name),\n-            version: RustbookVersion::MdBook1,\n+            version: RustbookVersion::MdBook2,\n         });\n \n         let source_name = format!(\"{}/second-edition\", name);\n         builder.ensure(Rustbook {\n             target,\n             name: INTERNER.intern_string(source_name),\n-            version: RustbookVersion::MdBook1,\n+            version: RustbookVersion::MdBook2,\n         });\n \n         let source_name = format!(\"{}/2018-edition\", name);\n         builder.ensure(Rustbook {\n             target,\n             name: INTERNER.intern_string(source_name),\n-            version: RustbookVersion::MdBook1,\n+            version: RustbookVersion::MdBook2,\n         });\n \n         // build the version info page and CSS"}, {"sha": "dfb40284ef6cfd00bceb4ec1e8d9e5a93e47d019", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -86,6 +86,13 @@ This flag will set which lints should be set to the [deny level](lints/levels.ht\n \n This flag will set which lints should be set to the [forbid level](lints/levels.html#forbid).\n \n+## `-Z`: set unstable options\n+\n+This flag will allow you to set unstable options of rustc. In order to set multiple options,\n+the -Z flag can be used multiple times. For example: `rustc -Z verbose -Z time`.\n+Specifying options with -Z is only available on nightly. To view all available options\n+run: `rustc -Z help`.\n+\n ## `--cap-lints`: set the most restrictive lint level\n \n This flag lets you 'cap' lints, for more, [see here](lints/levels.html#capping-lints)."}, {"sha": "6a6a9146e2432b47327d735fde002fe27ba28d8b", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -63,6 +63,8 @@\n //!\n //! [dereferencing]: ../../std/ops/trait.Deref.html\n //! [`Box`]: struct.Box.html\n+//! [`Global`]: ../alloc/struct.Global.html\n+//! [`Layout`]: ../alloc/struct.Layout.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "14908108fc5a6e72e1927bcd06aa9aed205aec0c", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -286,13 +286,13 @@ pub struct AssertParamIsEq<T: Eq + ?Sized> { _field: ::marker::PhantomData<T> }\n #[derive(Clone, Copy, PartialEq, Debug, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Ordering {\n-    /// An ordering where a compared value is less [than another].\n+    /// An ordering where a compared value is less than another.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Less = -1,\n-    /// An ordering where a compared value is equal [to another].\n+    /// An ordering where a compared value is equal to another.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Equal = 0,\n-    /// An ordering where a compared value is greater [than another].\n+    /// An ordering where a compared value is greater than another.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Greater = 1,\n }"}, {"sha": "05acd7bd011874d270ebfc8574a2dbb77178255f", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -737,16 +737,6 @@ extern \"rust-intrinsic\" {\n     ///\n     /// There are a few things that `transmute` is really useful for.\n     ///\n-    /// Getting the bitpattern of a floating point type (or, more generally,\n-    /// type punning, when `T` and `U` aren't pointers):\n-    ///\n-    /// ```\n-    /// let bitpattern = unsafe {\n-    ///     std::mem::transmute::<f32, u32>(1.0)\n-    /// };\n-    /// assert_eq!(bitpattern, 0x3F800000);\n-    /// ```\n-    ///\n     /// Turning a pointer into a function pointer. This is *not* portable to\n     /// machines where function pointers and data pointers have different sizes.\n     ///"}, {"sha": "8139305f5302dd3b750368111fc01391121b9585", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -220,21 +220,21 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// // derive `Eq` and `PartialEq`.\n /// #[derive(Debug, Eq, PartialEq)]\n /// struct Rational {\n-///     nominator: usize,\n+///     numerator: usize,\n ///     denominator: usize,\n /// }\n ///\n /// impl Rational {\n-///     fn new(nominator: usize, denominator: usize) -> Self {\n+///     fn new(numerator: usize, denominator: usize) -> Self {\n ///         if denominator == 0 {\n ///             panic!(\"Zero is an invalid denominator!\");\n ///         }\n ///\n ///         // Reduce to lowest terms by dividing by the greatest common\n ///         // divisor.\n-///         let gcd = gcd(nominator, denominator);\n+///         let gcd = gcd(numerator, denominator);\n ///         Rational {\n-///             nominator: nominator / gcd,\n+///             numerator: numerator / gcd,\n ///             denominator: denominator / gcd,\n ///         }\n ///     }\n@@ -245,9 +245,9 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///     type Output = Self;\n ///\n ///     fn mul(self, rhs: Self) -> Self {\n-///         let nominator = self.nominator * rhs.nominator;\n+///         let numerator = self.numerator * rhs.numerator;\n ///         let denominator = self.denominator * rhs.denominator;\n-///         Rational::new(nominator, denominator)\n+///         Rational::new(numerator, denominator)\n ///     }\n /// }\n ///\n@@ -340,21 +340,21 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// // derive `Eq` and `PartialEq`.\n /// #[derive(Debug, Eq, PartialEq)]\n /// struct Rational {\n-///     nominator: usize,\n+///     numerator: usize,\n ///     denominator: usize,\n /// }\n ///\n /// impl Rational {\n-///     fn new(nominator: usize, denominator: usize) -> Self {\n+///     fn new(numerator: usize, denominator: usize) -> Self {\n ///         if denominator == 0 {\n ///             panic!(\"Zero is an invalid denominator!\");\n ///         }\n ///\n ///         // Reduce to lowest terms by dividing by the greatest common\n ///         // divisor.\n-///         let gcd = gcd(nominator, denominator);\n+///         let gcd = gcd(numerator, denominator);\n ///         Rational {\n-///             nominator: nominator / gcd,\n+///             numerator: numerator / gcd,\n ///             denominator: denominator / gcd,\n ///         }\n ///     }\n@@ -365,13 +365,13 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///     type Output = Self;\n ///\n ///     fn div(self, rhs: Self) -> Self::Output {\n-///         if rhs.nominator == 0 {\n+///         if rhs.numerator == 0 {\n ///             panic!(\"Cannot divide by zero-valued `Rational`!\");\n ///         }\n ///\n-///         let nominator = self.nominator * rhs.denominator;\n-///         let denominator = self.denominator * rhs.nominator;\n-///         Rational::new(nominator, denominator)\n+///         let numerator = self.numerator * rhs.denominator;\n+///         let denominator = self.denominator * rhs.numerator;\n+///         Rational::new(numerator, denominator)\n ///     }\n /// }\n ///"}, {"sha": "9cd6c30e272f50970a9de3370c8af0055e526e79", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -166,7 +166,7 @@ pub struct Session {\n     pub driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n \n     /// `Span`s of trait methods that weren't found to avoid emitting object safety errors\n-    pub trait_methods_not_found: OneThread<RefCell<FxHashSet<Span>>>,\n+    pub trait_methods_not_found: Lock<FxHashSet<Span>>,\n }\n \n pub struct PerfStats {\n@@ -1236,7 +1236,7 @@ fn build_session_(\n         has_global_allocator: Once::new(),\n         has_panic_handler: Once::new(),\n         driver_lint_caps,\n-        trait_methods_not_found: OneThread::new(RefCell::new(Default::default())),\n+        trait_methods_not_found: Lock::new(Default::default()),\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "93a2a261c6fdeeaa49061d0064a0000e45eb945c", "filename": "src/librustc_data_structures/graph/dominators/mod.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -8,8 +8,6 @@ use super::super::indexed_vec::{Idx, IndexVec};\n use super::iterate::reverse_post_order;\n use super::ControlFlowGraph;\n \n-use std::fmt;\n-\n #[cfg(test)]\n mod test;\n \n@@ -158,48 +156,3 @@ impl<'dom, Node: Idx> Iterator for Iter<'dom, Node> {\n         }\n     }\n }\n-\n-pub struct DominatorTree<N: Idx> {\n-    root: N,\n-    children: IndexVec<N, Vec<N>>,\n-}\n-\n-impl<Node: Idx> DominatorTree<Node> {\n-    pub fn children(&self, node: Node) -> &[Node] {\n-        &self.children[node]\n-    }\n-}\n-\n-impl<Node: Idx> fmt::Debug for DominatorTree<Node> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Debug::fmt(\n-            &DominatorTreeNode {\n-                tree: self,\n-                node: self.root,\n-            },\n-            fmt,\n-        )\n-    }\n-}\n-\n-struct DominatorTreeNode<'tree, Node: Idx> {\n-    tree: &'tree DominatorTree<Node>,\n-    node: Node,\n-}\n-\n-impl<'tree, Node: Idx> fmt::Debug for DominatorTreeNode<'tree, Node> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let subtrees: Vec<_> = self.tree\n-            .children(self.node)\n-            .iter()\n-            .map(|&child| DominatorTreeNode {\n-                tree: self.tree,\n-                node: child,\n-            })\n-            .collect();\n-        fmt.debug_tuple(\"\")\n-            .field(&self.node)\n-            .field(&subtrees)\n-            .finish()\n-    }\n-}"}, {"sha": "66c7c9d0eae7e53de36e854819c8138a3d9db90a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -744,7 +744,7 @@ fn usage(verbose: bool, include_unstable_options: bool) {\n     }\n     let message = \"Usage: rustc [OPTIONS] INPUT\";\n     let nightly_help = if nightly_options::is_nightly_build() {\n-        \"\\n    -Z help             Print internal options for debugging rustc\"\n+        \"\\n    -Z help             Print unstable compiler options\"\n     } else {\n         \"\"\n     };\n@@ -892,7 +892,7 @@ Available lint options:\n }\n \n fn describe_debug_flags() {\n-    println!(\"\\nAvailable debug options:\\n\");\n+    println!(\"\\nAvailable options:\\n\");\n     print_flag_list(\"-Z\", config::DB_OPTIONS);\n }\n "}, {"sha": "c8836fe51931ebd9497213e5c3a5e9e7b38485ed", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -2307,10 +2307,10 @@ let q = *p;\n ```\n \n Here, the expression `&foo()` is borrowing the expression\n-`foo()`. As `foo()` is call to a function, and not the name of\n+`foo()`. As `foo()` is a call to a function, and not the name of\n a variable, this creates a **temporary** -- that temporary stores\n the return value from `foo()` so that it can be borrowed.\n-So you might imagine that `let p = bar(&foo())` is equivalent\n+You could imagine that `let p = bar(&foo());` is equivalent\n to this:\n \n ```compile_fail,E0597"}, {"sha": "d6923b4490d59f13d86cd3d22df776135ac1da4f", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -23,7 +23,6 @@ use rustc::middle::cstore::ExternCrate;\n use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc::{bug, span_bug};\n-use rustc_typeck::hir_ty_to_ty;\n use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n use rustc_data_structures::sync::Lrc;\n \n@@ -648,6 +647,10 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             Node::Pat(&hir::Pat {\n                 node: hir::PatKind::TupleStruct(ref qpath, ..),\n                 ..\n+            }) |\n+            Node::Ty(&hir::Ty {\n+                node: hir::TyKind::Path(ref qpath),\n+                ..\n             }) => {\n                 let hir_id = self.tcx.hir().node_to_hir_id(id);\n                 self.tables.qpath_def(qpath, hir_id)\n@@ -658,25 +661,6 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 ..\n             }) => HirDef::Local(self.tcx.hir().hir_to_node_id(canonical_id)),\n \n-            Node::Ty(ty) => if let hir::Ty {\n-                node: hir::TyKind::Path(ref qpath),\n-                ..\n-            } = *ty\n-            {\n-                match *qpath {\n-                    hir::QPath::Resolved(_, ref path) => path.def,\n-                    hir::QPath::TypeRelative(..) => {\n-                        let ty = hir_ty_to_ty(self.tcx, ty);\n-                        if let ty::Projection(proj) = ty.sty {\n-                            return HirDef::AssociatedTy(proj.item_def_id);\n-                        }\n-                        HirDef::Err\n-                    }\n-                }\n-            } else {\n-                HirDef::Err\n-            },\n-\n             _ => HirDef::Err,\n         }\n     }"}, {"sha": "0c206b27f80589b91917fdfd82e4dfe2ef28ca79", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -1362,27 +1362,32 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                     let msg = format!(\"expected type, found variant `{}`\", assoc_ident);\n                     tcx.sess.span_err(span, &msg);\n                 } else if qself_ty.is_enum() {\n-                    // Report as incorrect enum variant rather than ambiguous type.\n                     let mut err = tcx.sess.struct_span_err(\n-                        span,\n-                        &format!(\"no variant `{}` on enum `{}`\", &assoc_ident.as_str(), qself_ty),\n+                        assoc_ident.span,\n+                        &format!(\"no variant `{}` in enum `{}`\", assoc_ident, qself_ty),\n                     );\n-                    // Check if it was a typo.\n+\n                     let adt_def = qself_ty.ty_adt_def().expect(\"enum is not an ADT\");\n                     if let Some(suggested_name) = find_best_match_for_name(\n                         adt_def.variants.iter().map(|variant| &variant.ident.name),\n                         &assoc_ident.as_str(),\n                         None,\n                     ) {\n                         err.span_suggestion(\n-                            span,\n-                            \"did you mean\",\n-                            format!(\"{}::{}\", qself_ty, suggested_name),\n+                            assoc_ident.span,\n+                            \"there is a variant with a similar name\",\n+                            suggested_name.to_string(),\n                             Applicability::MaybeIncorrect,\n                         );\n                     } else {\n-                        err.span_label(span, \"unknown variant\");\n+                        err.span_label(span, format!(\"variant not found in `{}`\", qself_ty));\n                     }\n+\n+                    if let Some(sp) = tcx.hir().span_if_local(adt_def.did) {\n+                        let sp = tcx.sess.source_map().def_span(sp);\n+                        err.span_label(sp, format!(\"variant `{}` not found here\", assoc_ident));\n+                    }\n+\n                     err.emit();\n                 } else if !qself_ty.references_error() {\n                     // Don't print `TyErr` to the user."}, {"sha": "31b7724d63816e0a4bc1e75e4182a4d5e895c22e", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -14,11 +14,11 @@ use rustc::hir::map as hir_map;\n use rustc::hir::print;\n use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc::traits::Obligation;\n-use rustc::ty::{self, Adt, Ty, TyCtxt, ToPolyTraitRef, ToPredicate, TypeFoldable};\n+use rustc::ty::{self, Ty, TyCtxt, ToPolyTraitRef, ToPredicate, TypeFoldable};\n use rustc::ty::print::with_crate_prefix;\n use syntax_pos::{Span, FileName};\n use syntax::ast;\n-use syntax::util::lev_distance::find_best_match_for_name;\n+use syntax::util::lev_distance;\n \n use std::cmp::Ordering;\n \n@@ -188,17 +188,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let actual = self.resolve_type_vars_if_possible(&rcvr_ty);\n                 let ty_str = self.ty_to_string(actual);\n                 let is_method = mode == Mode::MethodCall;\n-                let mut suggestion = None;\n                 let item_kind = if is_method {\n                     \"method\"\n                 } else if actual.is_enum() {\n-                    if let Adt(ref adt_def, _) = actual.sty {\n-                        let names = adt_def.variants.iter().map(|s| &s.ident.name);\n-                        suggestion = find_best_match_for_name(names,\n-                                                              &item_name.as_str(),\n-                                                              None);\n-                    }\n-                    \"variant\"\n+                    \"variant or associated item\"\n                 } else {\n                     match (item_name.as_str().chars().next(), actual.is_fresh_ty()) {\n                         (Some(name), false) if name.is_lowercase() => {\n@@ -299,25 +292,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         return;\n                     } else {\n                         span = item_name.span;\n-                        let mut err = struct_span_err!(\n+                        struct_span_err!(\n                             tcx.sess,\n                             span,\n                             E0599,\n                             \"no {} named `{}` found for type `{}` in the current scope\",\n                             item_kind,\n                             item_name,\n                             ty_str\n-                        );\n-                        if let Some(suggestion) = suggestion {\n-                            // enum variant\n-                            err.span_suggestion(\n-                                span,\n-                                \"did you mean\",\n-                                suggestion.to_string(),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        }\n-                        err\n+                        )\n                     }\n                 } else {\n                     tcx.sess.diagnostic().struct_dummy()\n@@ -469,14 +452,36 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                   out_of_scope_traits);\n                 }\n \n+                if actual.is_enum() {\n+                    let adt_def = actual.ty_adt_def().expect(\"enum is not an ADT\");\n+                    if let Some(suggestion) = lev_distance::find_best_match_for_name(\n+                        adt_def.variants.iter().map(|s| &s.ident.name),\n+                        &item_name.as_str(),\n+                        None,\n+                    ) {\n+                        err.span_suggestion(\n+                            span,\n+                            \"there is a variant with a similar name\",\n+                            suggestion.to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+\n                 if let Some(lev_candidate) = lev_candidate {\n+                    let def = lev_candidate.def();\n                     err.span_suggestion(\n                         span,\n-                        \"did you mean\",\n+                        &format!(\n+                            \"there is {} {} with a similar name\",\n+                            def.article(),\n+                            def.kind_name(),\n+                        ),\n                         lev_candidate.ident.to_string(),\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n+\n                 err.emit();\n             }\n "}, {"sha": "710c84a6bc980f04b855cb5a84f221a6d4606868", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -379,7 +379,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     }\n }\n \n-/// A quasi-deprecated helper used in rustdoc and save-analysis to get\n+/// A quasi-deprecated helper used in rustdoc and clippy to get\n /// the type from a HIR node.\n pub fn hir_ty_to_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hir_ty: &hir::Ty) -> Ty<'tcx> {\n     // In case there are any projections etc, find the \"environment\""}, {"sha": "40daec758a9fc18d53ad9947b91d682d5cc622ca", "filename": "src/libstd/sys/sgx/alloc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibstd%2Fsys%2Fsgx%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Flibstd%2Fsys%2Fsgx%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Falloc.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -1,4 +1,4 @@\n-use crate::alloc::{self, GlobalAlloc, Layout, System};\n+use crate::alloc::{GlobalAlloc, Layout, System};\n \n use super::waitqueue::SpinMutex;\n \n@@ -36,11 +36,11 @@ unsafe impl GlobalAlloc for System {\n #[cfg(not(test))]\n #[no_mangle]\n pub unsafe extern \"C\" fn __rust_c_alloc(size: usize, align: usize) -> *mut u8 {\n-    alloc::alloc(Layout::from_size_align_unchecked(size, align))\n+    crate::alloc::alloc(Layout::from_size_align_unchecked(size, align))\n }\n \n #[cfg(not(test))]\n #[no_mangle]\n pub unsafe extern \"C\" fn __rust_c_dealloc(ptr: *mut u8, size: usize, align: usize) {\n-    alloc::dealloc(ptr, Layout::from_size_align_unchecked(size, align))\n+    crate::alloc::dealloc(ptr, Layout::from_size_align_unchecked(size, align))\n }"}, {"sha": "af05cd1ad34d172402fea99a8862b9902ae39615", "filename": "src/test/rustdoc-js/substring.js", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Frustdoc-js%2Fsubstring.js", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Frustdoc-js%2Fsubstring.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fsubstring.js?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -0,0 +1,8 @@\n+const QUERY = 'waker_from';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'substring::SuperWaker', 'name': 'local_waker_from_nonlocal' },\n+        { 'path': 'substring::SuperWakerTask', 'name': 'local_waker_from_nonlocal' },\n+    ],\n+};"}, {"sha": "e729c722c79990b1e4477d2aa798f1b3ba1507ca", "filename": "src/test/rustdoc-js/substring.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Frustdoc-js%2Fsubstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Frustdoc-js%2Fsubstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fsubstring.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -0,0 +1,21 @@\n+pub struct SuperWaker;\n+\n+impl SuperWaker {\n+    pub fn local_waker_from_nonlocal() {}\n+    pub fn local_waker_frm_nonlocal() {}\n+    pub fn some_method() {}\n+    pub fn some_other_method() {}\n+    pub fn waker_non_local() {}\n+    pub fn from_non_local() {}\n+}\n+\n+pub struct SuperWakerTask;\n+\n+impl SuperWakerTask {\n+    pub fn local_waker_from_nonlocal() {}\n+    pub fn local_waker_frm_nonlocal() {}\n+    pub fn some_method() {}\n+    pub fn some_other_method() {}\n+    pub fn waker_non_local() {}\n+    pub fn from_non_local() {}\n+}"}, {"sha": "30ba258155bb9cef28ff2a5c759d2833166fb251", "filename": "src/test/ui/associated-item/associated-item-enum.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -0,0 +1,20 @@\n+enum Enum { Variant }\n+\n+impl Enum {\n+    const MISSPELLABLE: i32 = 0;\n+    fn misspellable() {}\n+}\n+\n+trait Trait {\n+    fn misspellable_trait() {}\n+}\n+\n+impl Trait for Enum {\n+    fn misspellable_trait() {}\n+}\n+\n+fn main() {\n+    Enum::mispellable(); //~ ERROR no variant or associated item\n+    Enum::mispellable_trait(); //~ ERROR no variant or associated item\n+    Enum::MISPELLABLE; //~ ERROR no variant or associated item\n+}"}, {"sha": "5a62b9736dedda5e145ba823f43c3d5da016e912", "filename": "src/test/ui/associated-item/associated-item-enum.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -0,0 +1,36 @@\n+error[E0599]: no variant or associated item named `mispellable` found for type `Enum` in the current scope\n+  --> $DIR/associated-item-enum.rs:17:11\n+   |\n+LL | enum Enum { Variant }\n+   | --------- variant or associated item `mispellable` not found here\n+...\n+LL |     Enum::mispellable();\n+   |           ^^^^^^^^^^^\n+   |           |\n+   |           variant or associated item not found in `Enum`\n+   |           help: there is a method with a similar name: `misspellable`\n+\n+error[E0599]: no variant or associated item named `mispellable_trait` found for type `Enum` in the current scope\n+  --> $DIR/associated-item-enum.rs:18:11\n+   |\n+LL | enum Enum { Variant }\n+   | --------- variant or associated item `mispellable_trait` not found here\n+...\n+LL |     Enum::mispellable_trait();\n+   |           ^^^^^^^^^^^^^^^^^ variant or associated item not found in `Enum`\n+\n+error[E0599]: no variant or associated item named `MISPELLABLE` found for type `Enum` in the current scope\n+  --> $DIR/associated-item-enum.rs:19:11\n+   |\n+LL | enum Enum { Variant }\n+   | --------- variant or associated item `MISPELLABLE` not found here\n+...\n+LL |     Enum::MISPELLABLE;\n+   |           ^^^^^^^^^^^\n+   |           |\n+   |           variant or associated item not found in `Enum`\n+   |           help: there is an associated constant with a similar name: `MISSPELLABLE`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "f2e0d379d1b3084416f4805c882922847f2d8e4b", "filename": "src/test/ui/auto-ref-slice-plus-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `test_mut` found for type `std::vec::Vec<{integer}\n   --> $DIR/auto-ref-slice-plus-ref.rs:7:7\n    |\n LL |     a.test_mut();\n-   |       ^^^^^^^^ help: did you mean: `get_mut`\n+   |       ^^^^^^^^ help: there is a method with a similar name: `get_mut`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `test_mut`, perhaps you need to implement it:"}, {"sha": "237b8c54ce301dffb03a4631f0da665182cae777", "filename": "src/test/ui/block-result/issue-3563.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `b` found for type `&Self` in the current scope\n   --> $DIR/issue-3563.rs:3:17\n    |\n LL |         || self.b()\n-   |                 ^ help: did you mean: `a`\n+   |                 ^ help: there is a method with a similar name: `a`\n \n error: aborting due to previous error\n "}, {"sha": "890f6800c22af7bb03f08829f369060c6f5ecd73", "filename": "src/test/ui/bogus-tag.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fbogus-tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fbogus-tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbogus-tag.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -1,11 +1,11 @@\n-error[E0599]: no variant named `Hsl` found for type `Color` in the current scope\n+error[E0599]: no variant or associated item named `Hsl` found for type `Color` in the current scope\n   --> $DIR/bogus-tag.rs:7:16\n    |\n LL | enum Color { Rgb(isize, isize, isize), Rgba(isize, isize, isize, isize), }\n-   | ---------- variant `Hsl` not found here\n+   | ---------- variant or associated item `Hsl` not found here\n ...\n LL |         Color::Hsl(h, s, l) => { println!(\"hsl\"); }\n-   |                ^^^ variant not found in `Color`\n+   |                ^^^ variant or associated item not found in `Color`\n \n error: aborting due to previous error\n "}, {"sha": "e33fcb70db7751b7ea711773b135edcd20577d4c", "filename": "src/test/ui/empty/empty-struct-braces-expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -19,6 +19,8 @@ fn main() {\n \n     let xe1 = XEmpty1; //~ ERROR expected value, found struct `XEmpty1`\n     let xe1 = XEmpty1(); //~ ERROR expected function, found struct `XEmpty1`\n-    let xe3 = XE::Empty3; //~ ERROR no variant named `Empty3` found for type\n-    let xe3 = XE::Empty3(); //~ ERROR no variant named `Empty3` found for type\n+    let xe3 = XE::Empty3; //~ ERROR no variant or associated item named `Empty3` found for type\n+    let xe3 = XE::Empty3(); //~ ERROR no variant or associated item named `Empty3` found for type\n+\n+    XE::Empty1 {}; //~ ERROR no variant `Empty1` in enum `empty_struct::XE`\n }"}, {"sha": "f5609c8e1bf7b0df980faf27bf07232223be4622", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -46,25 +46,31 @@ LL |     let xe1 = XEmpty1();\n    |               did you mean `XEmpty1 { /* fields */ }`?\n    |               help: a unit struct with a similar name exists: `XEmpty2`\n \n-error[E0599]: no variant named `Empty3` found for type `empty_struct::XE` in the current scope\n+error[E0599]: no variant or associated item named `Empty3` found for type `empty_struct::XE` in the current scope\n   --> $DIR/empty-struct-braces-expr.rs:22:19\n    |\n LL |     let xe3 = XE::Empty3;\n    |                   ^^^^^^\n    |                   |\n-   |                   variant not found in `empty_struct::XE`\n-   |                   help: did you mean: `XEmpty3`\n+   |                   variant or associated item not found in `empty_struct::XE`\n+   |                   help: there is a variant with a similar name: `XEmpty3`\n \n-error[E0599]: no variant named `Empty3` found for type `empty_struct::XE` in the current scope\n+error[E0599]: no variant or associated item named `Empty3` found for type `empty_struct::XE` in the current scope\n   --> $DIR/empty-struct-braces-expr.rs:23:19\n    |\n LL |     let xe3 = XE::Empty3();\n    |                   ^^^^^^\n    |                   |\n-   |                   variant not found in `empty_struct::XE`\n-   |                   help: did you mean: `XEmpty3`\n+   |                   variant or associated item not found in `empty_struct::XE`\n+   |                   help: there is a variant with a similar name: `XEmpty3`\n \n-error: aborting due to 8 previous errors\n+error: no variant `Empty1` in enum `empty_struct::XE`\n+  --> $DIR/empty-struct-braces-expr.rs:25:9\n+   |\n+LL |     XE::Empty1 {};\n+   |         ^^^^^^ help: there is a variant with a similar name: `XEmpty3`\n+\n+error: aborting due to 9 previous errors\n \n Some errors occurred: E0423, E0599.\n For more information about an error, try `rustc --explain E0423`."}, {"sha": "98a354b1bd0fc5f5f7b337c5ed034d777de63725", "filename": "src/test/ui/issues/issue-22933-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -2,7 +2,7 @@ enum Delicious {\n     Pie      = 0x1,\n     Apple    = 0x2,\n     ApplePie = Delicious::Apple as isize | Delicious::PIE as isize,\n-    //~^ ERROR no variant named `PIE` found for type `Delicious`\n+    //~^ ERROR no variant or associated item named `PIE` found for type `Delicious`\n }\n \n fn main() {}"}, {"sha": "72038ea20a3fae86b269f5060ca868f2c359cc93", "filename": "src/test/ui/issues/issue-22933-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -1,11 +1,11 @@\n-error[E0599]: no variant named `PIE` found for type `Delicious` in the current scope\n+error[E0599]: no variant or associated item named `PIE` found for type `Delicious` in the current scope\n   --> $DIR/issue-22933-2.rs:4:55\n    |\n LL | enum Delicious {\n-   | -------------- variant `PIE` not found here\n+   | -------------- variant or associated item `PIE` not found here\n ...\n LL |     ApplePie = Delicious::Apple as isize | Delicious::PIE as isize,\n-   |                                                       ^^^ variant not found in `Delicious`\n+   |                                                       ^^^ variant or associated item not found in `Delicious`\n \n error: aborting due to previous error\n "}, {"sha": "7c15598448d7fe6ccd01a16ff1f81cd874918934", "filename": "src/test/ui/issues/issue-23173.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-23173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-23173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23173.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -6,12 +6,8 @@ struct Struct {\n fn use_token(token: &Token) { unimplemented!() }\n \n fn main() {\n-    use_token(&Token::Homura);\n-    //~^ ERROR no variant named `Homura`\n-    Struct::method();\n-    //~^ ERROR no function or associated item named `method` found for type\n-    Struct::method;\n-    //~^ ERROR no function or associated item named `method` found for type\n-    Struct::Assoc;\n-    //~^ ERROR no associated item named `Assoc` found for type `Struct` in\n+    use_token(&Token::Homura); //~ ERROR no variant or associated item named `Homura`\n+    Struct::method(); //~ ERROR no function or associated item named `method` found for type\n+    Struct::method; //~ ERROR no function or associated item named `method` found for type\n+    Struct::Assoc; //~ ERROR no associated item named `Assoc` found for type `Struct` in\n }"}, {"sha": "699e41156fa808e463690e04cbbc941895f3fa63", "filename": "src/test/ui/issues/issue-23173.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-23173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-23173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23173.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -1,14 +1,14 @@\n-error[E0599]: no variant named `Homura` found for type `Token` in the current scope\n+error[E0599]: no variant or associated item named `Homura` found for type `Token` in the current scope\n   --> $DIR/issue-23173.rs:9:23\n    |\n LL | enum Token { LeftParen, RightParen, Plus, Minus, /* etc */ }\n-   | ---------- variant `Homura` not found here\n+   | ---------- variant or associated item `Homura` not found here\n ...\n LL |     use_token(&Token::Homura);\n-   |                       ^^^^^^ variant not found in `Token`\n+   |                       ^^^^^^ variant or associated item not found in `Token`\n \n error[E0599]: no function or associated item named `method` found for type `Struct` in the current scope\n-  --> $DIR/issue-23173.rs:11:13\n+  --> $DIR/issue-23173.rs:10:13\n    |\n LL | struct Struct {\n    | ------------- function or associated item `method` not found for this\n@@ -17,7 +17,7 @@ LL |     Struct::method();\n    |             ^^^^^^ function or associated item not found in `Struct`\n \n error[E0599]: no function or associated item named `method` found for type `Struct` in the current scope\n-  --> $DIR/issue-23173.rs:13:13\n+  --> $DIR/issue-23173.rs:11:13\n    |\n LL | struct Struct {\n    | ------------- function or associated item `method` not found for this\n@@ -26,7 +26,7 @@ LL |     Struct::method;\n    |             ^^^^^^ function or associated item not found in `Struct`\n \n error[E0599]: no associated item named `Assoc` found for type `Struct` in the current scope\n-  --> $DIR/issue-23173.rs:15:13\n+  --> $DIR/issue-23173.rs:12:13\n    |\n LL | struct Struct {\n    | ------------- associated item `Assoc` not found for this"}, {"sha": "157f20d22d8ae85d00b7b8306c2c054989d6993d", "filename": "src/test/ui/issues/issue-23217.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-23217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-23217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23217.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -1,6 +1,5 @@\n pub enum SomeEnum {\n-    B = SomeEnum::A,\n-    //~^ ERROR no variant named `A` found for type `SomeEnum`\n+    B = SomeEnum::A, //~ ERROR no variant or associated item named `A` found for type `SomeEnum`\n }\n \n fn main() {}"}, {"sha": "97100ed375374b70c5bbdec22d18c6366291aa92", "filename": "src/test/ui/issues/issue-23217.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-23217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-23217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23217.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -1,13 +1,13 @@\n-error[E0599]: no variant named `A` found for type `SomeEnum` in the current scope\n+error[E0599]: no variant or associated item named `A` found for type `SomeEnum` in the current scope\n   --> $DIR/issue-23217.rs:2:19\n    |\n LL | pub enum SomeEnum {\n-   | ----------------- variant `A` not found here\n+   | ----------------- variant or associated item `A` not found here\n LL |     B = SomeEnum::A,\n    |                   ^\n    |                   |\n-   |                   variant not found in `SomeEnum`\n-   |                   help: did you mean: `B`\n+   |                   variant or associated item not found in `SomeEnum`\n+   |                   help: there is a variant with a similar name: `B`\n \n error: aborting due to previous error\n "}, {"sha": "f3a8019e2329ce0c12ca822537d5404dca6e17ad", "filename": "src/test/ui/issues/issue-28344.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -11,7 +11,7 @@ LL |     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n    |                         ^^^^^\n    |                         |\n    |                         function or associated item not found in `dyn std::ops::BitXor<_>`\n-   |                         help: did you mean: `bitxor`\n+   |                         help: there is a method with a similar name: `bitxor`\n \n error[E0191]: the value of the associated type `Output` (from the trait `std::ops::BitXor`) must be specified\n   --> $DIR/issue-28344.rs:8:13\n@@ -26,7 +26,7 @@ LL |     let g = BitXor::bitor;\n    |                     ^^^^^\n    |                     |\n    |                     function or associated item not found in `dyn std::ops::BitXor<_>`\n-   |                     help: did you mean: `bitxor`\n+   |                     help: there is a method with a similar name: `bitxor`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6493565d2164719b9b51cf36c6cf35c469b78b0e", "filename": "src/test/ui/issues/issue-28971.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-28971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-28971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28971.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -1,13 +1,11 @@\n-// This should not cause an ICE\n-\n enum Foo {\n     Bar(u8)\n }\n fn main(){\n     foo(|| {\n         match Foo::Bar(1) {\n             Foo::Baz(..) => (),\n-            //~^ ERROR no variant named `Baz` found for type `Foo`\n+            //~^ ERROR no variant or associated item named `Baz` found for type `Foo`\n             _ => (),\n         }\n     });"}, {"sha": "7411896443dfe80d153807fd8a884ef8a3409ea9", "filename": "src/test/ui/issues/issue-28971.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-28971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-28971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28971.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -1,14 +1,14 @@\n-error[E0599]: no variant named `Baz` found for type `Foo` in the current scope\n-  --> $DIR/issue-28971.rs:9:18\n+error[E0599]: no variant or associated item named `Baz` found for type `Foo` in the current scope\n+  --> $DIR/issue-28971.rs:7:18\n    |\n LL | enum Foo {\n-   | -------- variant `Baz` not found here\n+   | -------- variant or associated item `Baz` not found here\n ...\n LL |             Foo::Baz(..) => (),\n    |                  ^^^\n    |                  |\n-   |                  variant not found in `Foo`\n-   |                  help: did you mean: `Bar`\n+   |                  variant or associated item not found in `Foo`\n+   |                  help: there is a variant with a similar name: `Bar`\n \n error: aborting due to previous error\n "}, {"sha": "fc2c3679e13b8c3ef67d9db03b9d36592f73a4bc", "filename": "src/test/ui/issues/issue-34209.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-34209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-34209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34209.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -4,8 +4,7 @@ enum S {\n \n fn bug(l: S) {\n     match l {\n-        S::B { } => { },\n-        //~^ ERROR no variant `B` on enum `S`\n+        S::B {} => {}, //~ ERROR no variant `B` in enum `S`\n     }\n }\n "}, {"sha": "194bb2bfab8ae29d532aff3f1a62515cfa96639c", "filename": "src/test/ui/issues/issue-34209.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -1,8 +1,11 @@\n-error: no variant `B` on enum `S`\n-  --> $DIR/issue-34209.rs:7:9\n+error: no variant `B` in enum `S`\n+  --> $DIR/issue-34209.rs:7:12\n    |\n-LL |         S::B { } => { },\n-   |         ^^^^ help: did you mean: `S::A`\n+LL | enum S {\n+   | ------ variant `B` not found here\n+...\n+LL |         S::B {} => {},\n+   |            ^ help: there is a variant with a similar name: `A`\n \n error: aborting due to previous error\n "}, {"sha": "333036127eadbd0fe4d34e4b5402c04fda871067", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-deref-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `deref_err` found for type `std::result::Result<_,\n   --> $DIR/result-deref-err.rs:4:28\n    |\n LL |     let _result = &Err(41).deref_err();\n-   |                            ^^^^^^^^^ help: did you mean: `deref_ok`\n+   |                            ^^^^^^^^^ help: there is a method with a similar name: `deref_ok`\n    |\n    = note: the method `deref_err` exists but the following trait bounds were not satisfied:\n            `{integer} : std::ops::Deref`"}, {"sha": "ad4a4deb5a8863f60f10653b4cf21410e37ec6e4", "filename": "src/test/ui/suggestions/suggest-methods.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -5,19 +5,19 @@ LL | struct Foo;\n    | ----------- method `bat` not found for this\n ...\n LL |     f.bat(1.0);\n-   |       ^^^ help: did you mean: `bar`\n+   |       ^^^ help: there is a method with a similar name: `bar`\n \n error[E0599]: no method named `is_emtpy` found for type `std::string::String` in the current scope\n   --> $DIR/suggest-methods.rs:21:15\n    |\n LL |     let _ = s.is_emtpy();\n-   |               ^^^^^^^^ help: did you mean: `is_empty`\n+   |               ^^^^^^^^ help: there is a method with a similar name: `is_empty`\n \n error[E0599]: no method named `count_eos` found for type `u32` in the current scope\n   --> $DIR/suggest-methods.rs:25:19\n    |\n LL |     let _ = 63u32.count_eos();\n-   |                   ^^^^^^^^^ help: did you mean: `count_zeros`\n+   |                   ^^^^^^^^^ help: there is a method with a similar name: `count_zeros`\n \n error[E0599]: no method named `count_o` found for type `u32` in the current scope\n   --> $DIR/suggest-methods.rs:28:19"}, {"sha": "d418834432e0844e15183c03703d97b8877b0538", "filename": "src/test/ui/suggestions/suggest-variants.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -12,4 +12,7 @@ fn main() {\n     println!(\"My shape is {:?}\", Shape::Squareee { size: 5});  //~ ERROR no variant `Squareee`\n     println!(\"My shape is {:?}\", Shape::Circl { size: 5}); //~ ERROR no variant `Circl`\n     println!(\"My shape is {:?}\", Shape::Rombus{ size: 5}); //~ ERROR no variant `Rombus`\n+    Shape::Squareee; //~ ERROR no variant\n+    Shape::Circl; //~ ERROR no variant\n+    Shape::Rombus; //~ ERROR no variant\n }"}, {"sha": "ef0ba70c34066e1b9dce4aaa8599f68a332afc6d", "filename": "src/test/ui/suggestions/suggest-variants.stderr", "status": "modified", "additions": 55, "deletions": 10, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -1,20 +1,65 @@\n-error: no variant `Squareee` on enum `Shape`\n-  --> $DIR/suggest-variants.rs:12:34\n+error: no variant `Squareee` in enum `Shape`\n+  --> $DIR/suggest-variants.rs:12:41\n    |\n+LL | enum Shape {\n+   | ---------- variant `Squareee` not found here\n+...\n LL |     println!(\"My shape is {:?}\", Shape::Squareee { size: 5});\n-   |                                  ^^^^^^^^^^^^^^^ help: did you mean: `Shape::Square`\n+   |                                         ^^^^^^^^ help: there is a variant with a similar name: `Square`\n \n-error: no variant `Circl` on enum `Shape`\n-  --> $DIR/suggest-variants.rs:13:34\n+error: no variant `Circl` in enum `Shape`\n+  --> $DIR/suggest-variants.rs:13:41\n    |\n+LL | enum Shape {\n+   | ---------- variant `Circl` not found here\n+...\n LL |     println!(\"My shape is {:?}\", Shape::Circl { size: 5});\n-   |                                  ^^^^^^^^^^^^ help: did you mean: `Shape::Circle`\n+   |                                         ^^^^^ help: there is a variant with a similar name: `Circle`\n \n-error: no variant `Rombus` on enum `Shape`\n-  --> $DIR/suggest-variants.rs:14:34\n+error: no variant `Rombus` in enum `Shape`\n+  --> $DIR/suggest-variants.rs:14:41\n    |\n+LL | enum Shape {\n+   | ---------- variant `Rombus` not found here\n+...\n LL |     println!(\"My shape is {:?}\", Shape::Rombus{ size: 5});\n-   |                                  ^^^^^^^^^^^^^ unknown variant\n+   |                                  -------^^^^^^\n+   |                                  |\n+   |                                  variant not found in `Shape`\n \n-error: aborting due to 3 previous errors\n+error[E0599]: no variant or associated item named `Squareee` found for type `Shape` in the current scope\n+  --> $DIR/suggest-variants.rs:15:12\n+   |\n+LL | enum Shape {\n+   | ---------- variant or associated item `Squareee` not found here\n+...\n+LL |     Shape::Squareee;\n+   |            ^^^^^^^^\n+   |            |\n+   |            variant or associated item not found in `Shape`\n+   |            help: there is a variant with a similar name: `Square`\n+\n+error[E0599]: no variant or associated item named `Circl` found for type `Shape` in the current scope\n+  --> $DIR/suggest-variants.rs:16:12\n+   |\n+LL | enum Shape {\n+   | ---------- variant or associated item `Circl` not found here\n+...\n+LL |     Shape::Circl;\n+   |            ^^^^^\n+   |            |\n+   |            variant or associated item not found in `Shape`\n+   |            help: there is a variant with a similar name: `Circle`\n+\n+error[E0599]: no variant or associated item named `Rombus` found for type `Shape` in the current scope\n+  --> $DIR/suggest-variants.rs:17:12\n+   |\n+LL | enum Shape {\n+   | ---------- variant or associated item `Rombus` not found here\n+...\n+LL |     Shape::Rombus;\n+   |            ^^^^^^ variant or associated item not found in `Shape`\n+\n+error: aborting due to 6 previous errors\n \n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "2fe837e99d33f916f00e4f2b32b3ef7c0520a262", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b96425699476ccfc4c56185067d80cb792044a3/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=5b96425699476ccfc4c56185067d80cb792044a3", "patch": "@@ -303,6 +303,10 @@ pub struct TestProps {\n     // For UI tests, allows compiler to generate arbitrary output to stderr\n     pub dont_check_compiler_stderr: bool,\n     // Don't force a --crate-type=dylib flag on the command line\n+    //\n+    // Set this for example if you have an auxiliary test file that contains\n+    // a proc-macro and needs `#![crate_type = \"proc-macro\"]`. This ensures\n+    // that the aux file is compiled as a `proc-macro` and not as a `dylib`.\n     pub no_prefer_dynamic: bool,\n     // Run --pretty expanded when running pretty printing tests\n     pub pretty_expanded: bool,\n@@ -490,7 +494,7 @@ impl TestProps {\n             }\n \n             if !self.compile_pass {\n-                // run-pass implies must_compile_successfully\n+                // run-pass implies compile_pass\n                 self.compile_pass = config.parse_compile_pass(ln) || self.run_pass;\n             }\n "}]}