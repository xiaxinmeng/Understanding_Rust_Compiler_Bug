{"sha": "95feaee35307ebe9ebd517cbe5ba09feecc54284", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZmVhZWUzNTMwN2ViZTllYmQ1MTdjYmU1YmEwOWZlZWNjNTQyODQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-25T19:16:33Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-25T19:16:33Z"}, "message": "In doc reference, don't mention references, and stub out a section for classes", "tree": {"sha": "c5a74917f57082f687dd18cfa0b4ccd8b540e536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5a74917f57082f687dd18cfa0b4ccd8b540e536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95feaee35307ebe9ebd517cbe5ba09feecc54284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95feaee35307ebe9ebd517cbe5ba09feecc54284", "html_url": "https://github.com/rust-lang/rust/commit/95feaee35307ebe9ebd517cbe5ba09feecc54284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95feaee35307ebe9ebd517cbe5ba09feecc54284/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf92940f72bf4eb0e2881b275dc76772c93b8f47", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf92940f72bf4eb0e2881b275dc76772c93b8f47", "html_url": "https://github.com/rust-lang/rust/commit/bf92940f72bf4eb0e2881b275dc76772c93b8f47"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "bb9da7aaf9b78af2eb72a33d87b6666b8f94495c", "filename": "doc/rust.md", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/95feaee35307ebe9ebd517cbe5ba09feecc54284/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/95feaee35307ebe9ebd517cbe5ba09feecc54284/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=95feaee35307ebe9ebd517cbe5ba09feecc54284", "patch": "@@ -1127,30 +1127,40 @@ enum list<T> {\n let a: list<int> = cons(7, @cons(13, @nil));\n ~~~~\n \n-### Resources\n+### Classes\n \n-_Resources_ are values that have a destructor associated with them. A\n-_resource item_ is used to declare resource type and constructor.\n+TODO: more about classes\n+\n+_Classes_ are named record types that may have a destructor associated\n+with them, as well as fields and methods. For historical reasons, we\n+may call a class with a destructor and a single field a \"resource\".\n+\n+A _class item_ declares a class type:\n \n ~~~~\n-resource file_descriptor(fd: libc::c_int) {\n-    libc::close(fd);\n+class file_descriptor {\n+    let fd: libc::c_int;\n+    new(fd: libc::c_int) { self.fd = fd; }\n+    drop { libc::close(self.fd); }\n }\n ~~~~\n \n Calling the `file_descriptor` constructor function on an integer will\n produce a value with the `file_descriptor` type. Resource types have a\n-noncopyable [type kind](#type-kinds), and thus may not be copied. The\n-semantics guarantee that for each constructed resources value, the\n-destructor will run once: when the value is disposed of (barring\n-drastic program termination that somehow prevents unwinding from taking\n-place). For stack-allocated values, disposal happens when the value\n-goes out of scope. For values in shared boxes, it happens when the\n-reference count of the box reaches zero.\n-\n-The argument to the resource constructor is stored in the resulting\n-value, and can be accessed using the dereference (`*`) [unary\n-operator](#unary-operator-expressions).\n+noncopyable [type kind](#type-kinds), and thus may not be\n+copied. Class types that don't have destructors may be copied if all\n+their fields are copyable. The semantics guarantee that for each\n+constructed resource value, the destructor will run once: when the\n+value is disposed of (barring drastic program termination that somehow\n+prevents unwinding from taking place). For stack-allocated values,\n+disposal happens when the value goes out of scope. For values in\n+shared boxes, it happens when the reference count of the box reaches\n+zero.\n+\n+The argument or arguments to the class constructor may be stored in\n+the class's named fields, and can be accessed by a field reference. In\n+this case, the `file_descriptor`'s data field would be accessed like\n+`f.fd`, if `f` is a value of type `file_descriptor`.\n \n ### Interfaces\n "}]}