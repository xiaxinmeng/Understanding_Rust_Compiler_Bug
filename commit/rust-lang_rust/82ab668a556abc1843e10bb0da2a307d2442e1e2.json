{"sha": "82ab668a556abc1843e10bb0da2a307d2442e1e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYWI2NjhhNTU2YWJjMTg0M2UxMGJiMGRhMmEzMDdkMjQ0MmUxZTI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-26T11:32:45Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-26T21:47:53Z"}, "message": "Further foundational stuff on `ProjectionKind` before I add it to `AscribeUserType`.", "tree": {"sha": "fa4abac9ebcb0cdbb8b64ed12790eb4cc275208e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa4abac9ebcb0cdbb8b64ed12790eb4cc275208e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82ab668a556abc1843e10bb0da2a307d2442e1e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82ab668a556abc1843e10bb0da2a307d2442e1e2", "html_url": "https://github.com/rust-lang/rust/commit/82ab668a556abc1843e10bb0da2a307d2442e1e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82ab668a556abc1843e10bb0da2a307d2442e1e2/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47e2d825e1615813d9b5b3b97e20cfe169f5097f", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e2d825e1615813d9b5b3b97e20cfe169f5097f", "html_url": "https://github.com/rust-lang/rust/commit/47e2d825e1615813d9b5b3b97e20cfe169f5097f"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "d4b47db608163ed9ee293c46b35c723de274af18", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/82ab668a556abc1843e10bb0da2a307d2442e1e2/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab668a556abc1843e10bb0da2a307d2442e1e2/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=82ab668a556abc1843e10bb0da2a307d2442e1e2", "patch": "@@ -1888,6 +1888,24 @@ impl<'a, 'tcx> Lift<'tcx> for &'a List<CanonicalVarInfo> {\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for &'a List<ProjectionKind<'a>> {\n+    type Lifted = &'tcx List<ProjectionKind<'tcx>>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        if self.len() == 0 {\n+            return Some(List::empty());\n+        }\n+        if tcx.interners.arena.in_arena(*self as *const _) {\n+            return Some(unsafe { mem::transmute(*self) });\n+        }\n+        // Also try in the global tcx if we're not that.\n+        if !tcx.is_global() {\n+            self.lift_to_tcx(tcx.global_tcx())\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n pub mod tls {\n     use super::{GlobalCtxt, TyCtxt};\n "}, {"sha": "62827ea20c31db48a1c168f9e8c41c5e3a159cc5", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82ab668a556abc1843e10bb0da2a307d2442e1e2/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab668a556abc1843e10bb0da2a307d2442e1e2/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=82ab668a556abc1843e10bb0da2a307d2442e1e2", "patch": "@@ -13,6 +13,7 @@\n //! hand, though we've recently added some macros (e.g.,\n //! `BraceStructLiftImpl!`) to help with the tedium.\n \n+use mir::ProjectionKind;\n use mir::interpret::ConstValue;\n use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n@@ -628,6 +629,17 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n     }\n }\n \n+impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind<'tcx>> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        let v = self.iter().map(|t| t.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n+        folder.tcx().intern_projs(&v)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.iter().any(|t| t.visit_with(visitor))\n+    }\n+}\n+\n impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         use ty::InstanceDef::*;"}]}