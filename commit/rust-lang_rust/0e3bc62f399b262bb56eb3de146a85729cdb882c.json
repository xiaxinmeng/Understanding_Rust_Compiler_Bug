{"sha": "0e3bc62f399b262bb56eb3de146a85729cdb882c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlM2JjNjJmMzk5YjI2MmJiNTZlYjNkZTE0NmE4NTcyOWNkYjg4MmM=", "commit": {"author": {"name": "Nathan", "email": "nathan.whitaker01@gmail.com", "date": "2019-08-25T23:17:32Z"}, "committer": {"name": "Nathan", "email": "nathan.whitaker01@gmail.com", "date": "2019-08-26T01:09:19Z"}, "message": "Allow checking of both compile & run output for run-pass tests", "tree": {"sha": "0f4ccd8003932ff6778c8615cd340be0b47fd57f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f4ccd8003932ff6778c8615cd340be0b47fd57f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e3bc62f399b262bb56eb3de146a85729cdb882c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3bc62f399b262bb56eb3de146a85729cdb882c", "html_url": "https://github.com/rust-lang/rust/commit/0e3bc62f399b262bb56eb3de146a85729cdb882c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e3bc62f399b262bb56eb3de146a85729cdb882c/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9ba8f9596ac282b3254edbb9a7176771fb6ba24", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9ba8f9596ac282b3254edbb9a7176771fb6ba24", "html_url": "https://github.com/rust-lang/rust/commit/b9ba8f9596ac282b3254edbb9a7176771fb6ba24"}], "stats": {"total": 52, "additions": 34, "deletions": 18}, "files": [{"sha": "edb9eb7d860e2da24a80125063b49056c29a3c3c", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e3bc62f399b262bb56eb3de146a85729cdb882c/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3bc62f399b262bb56eb3de146a85729cdb882c/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=0e3bc62f399b262bb56eb3de146a85729cdb882c", "patch": "@@ -333,10 +333,12 @@ pub fn expected_output_path(\n     testpaths.file.with_extension(extension)\n }\n \n-pub const UI_EXTENSIONS: &[&str] = &[UI_STDERR, UI_STDOUT, UI_FIXED];\n+pub const UI_EXTENSIONS: &[&str] = &[UI_STDERR, UI_STDOUT, UI_FIXED, UI_RUN_STDERR, UI_RUN_STDOUT];\n pub const UI_STDERR: &str = \"stderr\";\n pub const UI_STDOUT: &str = \"stdout\";\n pub const UI_FIXED: &str = \"fixed\";\n+pub const UI_RUN_STDERR: &str = \"run.stderr\";\n+pub const UI_RUN_STDOUT: &str = \"run.stdout\";\n \n /// Absolute path to the directory where all output for all tests in the given\n /// `relative_dir` group should reside. Example:"}, {"sha": "7b5e0752b3673bcf0ebb65bc4e35d39b5169a644", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0e3bc62f399b262bb56eb3de146a85729cdb882c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3bc62f399b262bb56eb3de146a85729cdb882c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=0e3bc62f399b262bb56eb3de146a85729cdb882c", "patch": "@@ -2,6 +2,7 @@\n \n use crate::common::{CompareMode, PassMode};\n use crate::common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n+use crate::common::{UI_RUN_STDERR, UI_RUN_STDOUT};\n use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n use crate::common::{Codegen, CodegenUnits, Rustdoc};\n use crate::common::{DebugInfoCdb, DebugInfoGdbLldb, DebugInfoGdb, DebugInfoLldb};\n@@ -288,6 +289,11 @@ enum ReadFrom {\n     Stdin(String),\n }\n \n+enum TestOutput {\n+    Compile,\n+    Run,\n+}\n+\n impl<'test> TestCx<'test> {\n     /// Code executed for each revision in turn (or, if there are no\n     /// revisions, exactly once, with revision == None).\n@@ -2934,9 +2940,16 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn load_compare_outputs(&self, proc_res: &ProcRes, explicit_format: bool) -> usize {\n-        let expected_stderr = self.load_expected_output(UI_STDERR);\n-        let expected_stdout = self.load_expected_output(UI_STDOUT);\n+    fn load_compare_outputs(&self, proc_res: &ProcRes,\n+        output_kind: TestOutput, explicit_format: bool) -> usize {\n+\n+        let (stderr_kind, stdout_kind) = match output_kind {\n+            TestOutput::Compile => (UI_STDERR, UI_STDOUT),\n+            TestOutput::Run => (UI_RUN_STDERR, UI_RUN_STDOUT)\n+        };\n+\n+        let expected_stderr = self.load_expected_output(stderr_kind);\n+        let expected_stdout = self.load_expected_output(stdout_kind);\n \n         let normalized_stdout =\n             self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout);\n@@ -2949,11 +2962,19 @@ impl<'test> TestCx<'test> {\n \n         let normalized_stderr = self.normalize_output(&stderr, &self.props.normalize_stderr);\n         let mut errors = 0;\n-        if !self.props.dont_check_compiler_stdout {\n-            errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n-        }\n-        if !self.props.dont_check_compiler_stderr {\n-            errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n+        match output_kind {\n+            TestOutput::Compile => {\n+                if !self.props.dont_check_compiler_stdout {\n+                    errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n+                }\n+                if !self.props.dont_check_compiler_stderr {\n+                    errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n+                }\n+            }\n+            TestOutput::Run => {\n+                errors += self.compare_output(stdout_kind, &normalized_stdout, &expected_stdout);\n+                errors += self.compare_output(stderr_kind, &normalized_stderr, &expected_stderr);\n+            }\n         }\n         errors\n     }\n@@ -2975,14 +2996,7 @@ impl<'test> TestCx<'test> {\n         let modes_to_prune = vec![CompareMode::Nll];\n         self.prune_duplicate_outputs(&modes_to_prune);\n \n-        // if the user specified to check the results of the\n-        // run-pass test, delay loading and comparing output\n-        // until execution of the binary\n-        let mut errors = if !self.props.check_run_results {\n-            self.load_compare_outputs(&proc_res, explicit)\n-        } else {\n-            0\n-        };\n+        let mut errors = self.load_compare_outputs(&proc_res, TestOutput::Compile, explicit);\n \n         if self.config.compare_mode.is_some() {\n             // don't test rustfix with nll right now\n@@ -3062,7 +3076,7 @@ impl<'test> TestCx<'test> {\n         if self.should_run_successfully() {\n             let proc_res = self.exec_compiled_test();\n             let run_output_errors = if self.props.check_run_results {\n-                self.load_compare_outputs(&proc_res, explicit)\n+                self.load_compare_outputs(&proc_res, TestOutput::Run, explicit)\n             } else {\n                 0\n             };"}]}