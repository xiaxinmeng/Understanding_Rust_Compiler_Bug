{"sha": "0320ebdd101b01abe5f24e9efcef7c15005fd3a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMjBlYmRkMTAxYjAxYWJlNWYyNGU5ZWZjZWY3YzE1MDA1ZmQzYTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-09T10:11:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-09T10:11:59Z"}, "message": "Use `Index` for CrateGraph", "tree": {"sha": "37d5176dfabe886b1eadb2ddb16fbb6834df0a16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37d5176dfabe886b1eadb2ddb16fbb6834df0a16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0320ebdd101b01abe5f24e9efcef7c15005fd3a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0320ebdd101b01abe5f24e9efcef7c15005fd3a5", "html_url": "https://github.com/rust-lang/rust/commit/0320ebdd101b01abe5f24e9efcef7c15005fd3a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "html_url": "https://github.com/rust-lang/rust/commit/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "cd078e43a3930f181e153be3b09849a266cf1f7f", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=0320ebdd101b01abe5f24e9efcef7c15005fd3a5", "patch": "@@ -6,7 +6,7 @@\n //! actual IO. See `vfs` and `project_model` in the `rust-analyzer` crate for how\n //! actual IO is done and lowered to input.\n \n-use std::{fmt, str::FromStr};\n+use std::{fmt, ops, str::FromStr};\n \n use ra_cfg::CfgOptions;\n use ra_syntax::SmolStr;\n@@ -174,10 +174,6 @@ impl CrateGraph {\n         self.arena.keys().copied()\n     }\n \n-    pub fn crate_data(&self, crate_id: &CrateId) -> &CrateData {\n-        &self.arena[crate_id]\n-    }\n-\n     // FIXME: this only finds one crate with the given root; we could have multiple\n     pub fn crate_id_for_crate_root(&self, file_id: FileId) -> Option<CrateId> {\n         let (&crate_id, _) =\n@@ -207,7 +203,7 @@ impl CrateGraph {\n             return false;\n         }\n \n-        for dep in &self.crate_data(&from).dependencies {\n+        for dep in &self[from].dependencies {\n             let crate_id = dep.crate_id();\n             if crate_id == target {\n                 return true;\n@@ -221,6 +217,13 @@ impl CrateGraph {\n     }\n }\n \n+impl ops::Index<CrateId> for CrateGraph {\n+    type Output = CrateData;\n+    fn index(&self, crate_id: CrateId) -> &CrateData {\n+        &self.arena[&crate_id]\n+    }\n+}\n+\n impl CrateId {\n     pub fn shift(self, amount: u32) -> CrateId {\n         CrateId(self.0 + amount)\n@@ -376,7 +379,7 @@ mod tests {\n             .add_dep(crate1, CrateName::normalize_dashes(\"crate-name-with-dashes\"), crate2)\n             .is_ok());\n         assert_eq!(\n-            graph.crate_data(&crate1).dependencies,\n+            graph[crate1].dependencies,\n             vec![Dependency { crate_id: crate2, name: \"crate_name_with_dashes\".into() }]\n         );\n     }"}, {"sha": "a53c4961eefbe97fbcbb635040b1ad9721ed9310", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=0320ebdd101b01abe5f24e9efcef7c15005fd3a5", "patch": "@@ -54,8 +54,7 @@ pub struct CrateDependency {\n \n impl Crate {\n     pub fn dependencies(self, db: &impl DefDatabase) -> Vec<CrateDependency> {\n-        db.crate_graph()\n-            .crate_data(&self.id)\n+        db.crate_graph()[self.id]\n             .dependencies\n             .iter()\n             .map(|dep| {\n@@ -72,7 +71,7 @@ impl Crate {\n         crate_graph\n             .iter()\n             .filter(|&krate| {\n-                crate_graph.crate_data(&krate).dependencies.iter().any(|it| it.crate_id == self.id)\n+                crate_graph[krate].dependencies.iter().any(|it| it.crate_id == self.id)\n             })\n             .map(|id| Crate { id })\n             .collect()\n@@ -84,11 +83,11 @@ impl Crate {\n     }\n \n     pub fn root_file(self, db: &impl DefDatabase) -> FileId {\n-        db.crate_graph().crate_data(&self.id).root_file_id\n+        db.crate_graph()[self.id].root_file_id\n     }\n \n     pub fn edition(self, db: &impl DefDatabase) -> Edition {\n-        db.crate_graph().crate_data(&self.id).edition\n+        db.crate_graph()[self.id].edition\n     }\n \n     pub fn all(db: &impl DefDatabase) -> Vec<Crate> {"}, {"sha": "07ca74ec3d8cd46da5f307816b6da51da8bbfd5c", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=0320ebdd101b01abe5f24e9efcef7c15005fd3a5", "patch": "@@ -176,7 +176,7 @@ fn find_importable_locations(\n     // directly (only through reexports in direct dependencies).\n     for krate in Some(from.krate)\n         .into_iter()\n-        .chain(crate_graph.crate_data(&from.krate).dependencies.iter().map(|dep| dep.crate_id))\n+        .chain(crate_graph[from.krate].dependencies.iter().map(|dep| dep.crate_id))\n     {\n         result.extend(\n             importable_locations_in_crate(db, item, krate)"}, {"sha": "6de49730e8b75f62d0235846469d78d08fab5df7", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=0320ebdd101b01abe5f24e9efcef7c15005fd3a5", "patch": "@@ -116,8 +116,7 @@ impl LangItems {\n         if let Some(target) = start_crate_target {\n             return Some(*target);\n         }\n-        db.crate_graph()\n-            .crate_data(&start_crate)\n+        db.crate_graph()[start_crate]\n             .dependencies\n             .iter()\n             .find_map(|dep| db.lang_item(dep.crate_id, item.clone()))"}, {"sha": "066b43ef9a596cfe68a002897552239949b8c17b", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=0320ebdd101b01abe5f24e9efcef7c15005fd3a5", "patch": "@@ -179,7 +179,7 @@ impl CrateDefMap {\n     pub(crate) fn crate_def_map_query(db: &impl DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {\n         let _p = profile(\"crate_def_map_query\");\n         let def_map = {\n-            let edition = db.crate_graph().crate_data(&krate).edition;\n+            let edition = db.crate_graph()[krate].edition;\n             let mut modules: Arena<LocalModuleId, ModuleData> = Arena::default();\n             let root = modules.alloc(ModuleData::default());\n             CrateDefMap {"}, {"sha": "bfa3db47afe7d99f3899f462432deec314d32cad", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=0320ebdd101b01abe5f24e9efcef7c15005fd3a5", "patch": "@@ -34,7 +34,7 @@ pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> C\n     let crate_graph = db.crate_graph();\n \n     // populate external prelude\n-    for dep in &crate_graph.crate_data(&def_map.krate).dependencies {\n+    for dep in &crate_graph[def_map.krate].dependencies {\n         let dep_def_map = db.crate_def_map(dep.crate_id);\n         log::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.crate_id);\n         def_map.extern_prelude.insert(\n@@ -128,7 +128,7 @@ where\n     DB: DefDatabase,\n {\n     fn collect(&mut self) {\n-        let file_id = self.db.crate_graph().crate_data(&self.def_map.krate).root_file_id;\n+        let file_id = self.db.crate_graph()[self.def_map.krate].root_file_id;\n         let raw_items = self.db.raw_items(file_id.into());\n         let module_id = self.def_map.root;\n         self.def_map.modules[module_id].origin = ModuleOrigin::CrateRoot { definition: file_id };\n@@ -954,7 +954,7 @@ mod tests {\n         let krate = db.test_crate();\n \n         let def_map = {\n-            let edition = db.crate_graph().crate_data(&krate).edition;\n+            let edition = db.crate_graph()[krate].edition;\n             let mut modules: Arena<LocalModuleId, ModuleData> = Arena::default();\n             let root = modules.alloc(ModuleData::default());\n             CrateDefMap {"}, {"sha": "6e1c8e42aeed62851131b8c885a56d79ca7393a7", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=0320ebdd101b01abe5f24e9efcef7c15005fd3a5", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn impls_for_trait_query(\n     // will only ever get called for a few crates near the root of the tree (the\n     // ones the user is editing), so this may actually be a waste of memory. I'm\n     // doing it like this mainly for simplicity for now.\n-    for dep in &db.crate_graph().crate_data(&krate).dependencies {\n+    for dep in &db.crate_graph()[krate].dependencies {\n         impls.extend(db.impls_for_trait(dep.crate_id, trait_).iter());\n     }\n     let crate_impl_defs = db.impls_in_crate(krate);"}, {"sha": "25e038a55dde22922e73948d149dda24c505e334", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=0320ebdd101b01abe5f24e9efcef7c15005fd3a5", "patch": "@@ -121,7 +121,7 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n \n fn determine_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n     let mod_path = def.module(db).map(|module| {\n-        once(db.crate_graph().crate_data(&module.krate().into()).display_name.clone())\n+        once(db.crate_graph()[module.krate().into()].display_name.clone())\n             .chain(\n                 module\n                     .path_to_root(db)"}, {"sha": "c60e86aead536bf3065ae9fe1447ff9d0d86f3d8", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0320ebdd101b01abe5f24e9efcef7c15005fd3a5/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=0320ebdd101b01abe5f24e9efcef7c15005fd3a5", "patch": "@@ -421,12 +421,12 @@ impl Analysis {\n \n     /// Returns the edition of the given crate.\n     pub fn crate_edition(&self, crate_id: CrateId) -> Cancelable<Edition> {\n-        self.with_db(|db| db.crate_graph().crate_data(&crate_id).edition)\n+        self.with_db(|db| db.crate_graph()[crate_id].edition)\n     }\n \n     /// Returns the root file of the given crate.\n     pub fn crate_root(&self, crate_id: CrateId) -> Cancelable<FileId> {\n-        self.with_db(|db| db.crate_graph().crate_data(&crate_id).root_file_id)\n+        self.with_db(|db| db.crate_graph()[crate_id].root_file_id)\n     }\n \n     /// Returns the set of possible targets to run for the current file."}]}