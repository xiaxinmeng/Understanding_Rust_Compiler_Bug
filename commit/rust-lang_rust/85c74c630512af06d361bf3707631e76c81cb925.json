{"sha": "85c74c630512af06d361bf3707631e76c81cb925", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1Yzc0YzYzMDUxMmFmMDZkMzYxYmYzNzA3NjMxZTc2YzgxY2I5MjU=", "commit": {"author": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-03-29T03:16:11Z"}, "committer": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-04-01T18:04:09Z"}, "message": "cleanup: Test formatting", "tree": {"sha": "b372299c82886afcd664fbe639125cff3d4b2617", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b372299c82886afcd664fbe639125cff3d4b2617"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85c74c630512af06d361bf3707631e76c81cb925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85c74c630512af06d361bf3707631e76c81cb925", "html_url": "https://github.com/rust-lang/rust/commit/85c74c630512af06d361bf3707631e76c81cb925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85c74c630512af06d361bf3707631e76c81cb925/comments", "author": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a01138cb4f7448ba4cef4b3236ef05a546125ec9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a01138cb4f7448ba4cef4b3236ef05a546125ec9", "html_url": "https://github.com/rust-lang/rust/commit/a01138cb4f7448ba4cef4b3236ef05a546125ec9"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "94abc0b34bc62d781a5a1c252027be86d6166680", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/85c74c630512af06d361bf3707631e76c81cb925/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c74c630512af06d361bf3707631e76c81cb925/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=85c74c630512af06d361bf3707631e76c81cb925", "patch": "@@ -1770,7 +1770,8 @@ mod test {\n     // suggests that this can only occur in the presence of local-expand, which\n     // we have no plans to support. ... unless it's needed for item hygiene....\n     #[ignore]\n-    #[test] fn issue_8062(){\n+    #[test]\n+    fn issue_8062(){\n         run_renaming_test(\n             &(\"fn main() {let hrcoo = 19; macro_rules! getx(()=>(hrcoo)); getx!();}\",\n               vec!(vec!(0)), true), 0)\n@@ -1781,7 +1782,8 @@ mod test {\n     // (just g) along the other, so the result of the whole thing should\n     // be \"let z_123 = 3; z_123\"\n     #[ignore]\n-    #[test] fn issue_6994(){\n+    #[test]\n+    fn issue_6994(){\n         run_renaming_test(\n             &(\"macro_rules! g (($x:ident) =>\n               ({macro_rules! f(($y:ident)=>({let $y=3;$x}));f!($x)}));\n@@ -1792,7 +1794,8 @@ mod test {\n \n     // match variable hygiene. Should expand into\n     // fn z() {match 8 {x_1 => {match 9 {x_2 | x_2 if x_2 == x_1 => x_2 + x_1}}}}\n-    #[test] fn issue_9384(){\n+    #[test]\n+    fn issue_9384(){\n         run_renaming_test(\n             &(\"macro_rules! bad_macro (($ex:expr) => ({match 9 {x | x if x == $ex => x + $ex}}));\n               fn z() {match 8 {x => bad_macro!(x)}}\",\n@@ -1805,7 +1808,8 @@ mod test {\n     // interpolated nodes weren't getting labeled.\n     // should expand into\n     // fn main(){let g1_1 = 13; g1_1}}\n-    #[test] fn pat_expand_issue_15221(){\n+    #[test]\n+    fn pat_expand_issue_15221(){\n         run_renaming_test(\n             &(\"macro_rules! inner ( ($e:pat ) => ($e));\n               macro_rules! outer ( ($e:pat ) => (inner!($e)));\n@@ -1821,7 +1825,8 @@ mod test {\n \n     // method arg hygiene\n     // method expands to fn get_x(&self_0, x_1: i32) {self_0 + self_2 + x_3 + x_1}\n-    #[test] fn method_arg_hygiene(){\n+    #[test]\n+    fn method_arg_hygiene(){\n         run_renaming_test(\n             &(\"macro_rules! inject_x (()=>(x));\n               macro_rules! inject_self (()=>(self));\n@@ -1834,7 +1839,8 @@ mod test {\n \n     // ooh, got another bite?\n     // expands to struct A; impl A {fn thingy(&self_1) {self_1;}}\n-    #[test] fn method_arg_hygiene_2(){\n+    #[test]\n+    fn method_arg_hygiene_2(){\n         run_renaming_test(\n             &(\"struct A;\n               macro_rules! add_method (($T:ty) =>\n@@ -1847,7 +1853,8 @@ mod test {\n \n     // item fn hygiene\n     // expands to fn q(x_1: i32){fn g(x_2: i32){x_2 + x_1};}\n-    #[test] fn issue_9383(){\n+    #[test]\n+    fn issue_9383(){\n         run_renaming_test(\n             &(\"macro_rules! bad_macro (($ex:expr) => (fn g(x: i32){ x + $ex }));\n               fn q(x: i32) { bad_macro!(x); }\",\n@@ -1857,7 +1864,8 @@ mod test {\n \n     // closure arg hygiene (ExprClosure)\n     // expands to fn f(){(|x_1 : i32| {(x_2 + x_1)})(3);}\n-    #[test] fn closure_arg_hygiene(){\n+    #[test]\n+    fn closure_arg_hygiene(){\n         run_renaming_test(\n             &(\"macro_rules! inject_x (()=>(x));\n             fn f(){(|x : i32| {(inject_x!() + x)})(3);}\",\n@@ -1867,7 +1875,8 @@ mod test {\n     }\n \n     // macro_rules in method position. Sadly, unimplemented.\n-    #[test] fn macro_in_method_posn(){\n+    #[test]\n+    fn macro_in_method_posn(){\n         expand_crate_str(\n             \"macro_rules! my_method (() => (fn thirteen(&self) -> i32 {13}));\n             struct A;\n@@ -1877,7 +1886,8 @@ mod test {\n \n     // another nested macro\n     // expands to impl Entries {fn size_hint(&self_1) {self_1;}\n-    #[test] fn item_macro_workaround(){\n+    #[test]\n+    fn item_macro_workaround(){\n         run_renaming_test(\n             &(\"macro_rules! item { ($i:item) => {$i}}\n               struct Entries;\n@@ -1961,7 +1971,8 @@ mod test {\n         }\n     }\n \n-    #[test] fn fmt_in_macro_used_inside_module_macro() {\n+    #[test]\n+    fn fmt_in_macro_used_inside_module_macro() {\n         let crate_str = \"macro_rules! fmt_wrap(($b:expr)=>($b.to_string()));\n macro_rules! foo_module (() => (mod generated { fn a() { let xx = 147; fmt_wrap!(xx);}}));\n foo_module!();"}]}