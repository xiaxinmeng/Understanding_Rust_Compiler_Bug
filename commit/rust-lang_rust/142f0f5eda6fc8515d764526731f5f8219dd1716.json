{"sha": "142f0f5eda6fc8515d764526731f5f8219dd1716", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MmYwZjVlZGE2ZmM4NTE1ZDc2NDUyNjczMWY1ZjgyMTlkZDE3MTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-16T08:18:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-16T08:18:38Z"}, "message": "Auto merge of #6448 - mikerite:interning_defined_symbol, r=Manishearth\n\nNew internal lint: Interning defined symbol\n\nNew internal lint: interning_defined_symbol\n\nchangelog: none", "tree": {"sha": "add07550807218b8a77ce20446b68e96b351f469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add07550807218b8a77ce20446b68e96b351f469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/142f0f5eda6fc8515d764526731f5f8219dd1716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/142f0f5eda6fc8515d764526731f5f8219dd1716", "html_url": "https://github.com/rust-lang/rust/commit/142f0f5eda6fc8515d764526731f5f8219dd1716", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/142f0f5eda6fc8515d764526731f5f8219dd1716/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c83e5684d653356155434849a6b14efc98afbf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c83e5684d653356155434849a6b14efc98afbf2", "html_url": "https://github.com/rust-lang/rust/commit/6c83e5684d653356155434849a6b14efc98afbf2"}, {"sha": "f732cc5cd6aeb06e07bd478d78fccaa625daa685", "url": "https://api.github.com/repos/rust-lang/rust/commits/f732cc5cd6aeb06e07bd478d78fccaa625daa685", "html_url": "https://github.com/rust-lang/rust/commit/f732cc5cd6aeb06e07bd478d78fccaa625daa685"}], "stats": {"total": 204, "additions": 194, "deletions": 10}, "files": [{"sha": "0498d469c00b671e2ce41dda35d02c2832bccbd3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=142f0f5eda6fc8515d764526731f5f8219dd1716", "patch": "@@ -511,6 +511,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         #[cfg(feature = \"internal-lints\")]\n         &utils::internal_lints::DEFAULT_LINT,\n         #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::INTERNING_DEFINED_SYMBOL,\n+        #[cfg(feature = \"internal-lints\")]\n         &utils::internal_lints::INVALID_PATHS,\n         #[cfg(feature = \"internal-lints\")]\n         &utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n@@ -958,6 +960,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n         store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n         store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n+        store.register_late_pass(|| box utils::internal_lints::InterningDefinedSymbol::default());\n         store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n         store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n         store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n@@ -1349,6 +1352,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS),\n         LintId::of(&utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n         LintId::of(&utils::internal_lints::DEFAULT_LINT),\n+        LintId::of(&utils::internal_lints::INTERNING_DEFINED_SYMBOL),\n         LintId::of(&utils::internal_lints::INVALID_PATHS),\n         LintId::of(&utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n         LintId::of(&utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM),"}, {"sha": "b97d97ea1a5ef140eb6bfa2aa6d103c76fa3eb30", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=142f0f5eda6fc8515d764526731f5f8219dd1716", "patch": "@@ -8,6 +8,7 @@ use rustc_lint::LintContext;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n     /// **What it does:**\n@@ -51,7 +52,7 @@ impl LateLintPass<'_> for ManualOkOr {\n             if args.len() == 3;\n             let method_receiver = &args[0];\n             let ty = cx.typeck_results().expr_ty(method_receiver);\n-            if is_type_diagnostic_item(cx, ty, sym!(option_type));\n+            if is_type_diagnostic_item(cx, ty, sym::option_type);\n             let or_expr = &args[1];\n             if is_ok_wrapping(cx, &args[2]);\n             if let ExprKind::Call(Expr { kind: ExprKind::Path(err_path), .. }, &[ref err_arg]) = or_expr.kind;"}, {"sha": "37691f27be48f97c636063949bd5caa27af594f3", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=142f0f5eda6fc8515d764526731f5f8219dd1716", "patch": "@@ -1568,7 +1568,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 lint_expect_fun_call(cx, expr, *method_span, &method_call.ident.as_str(), args);\n \n                 let self_ty = cx.typeck_results().expr_ty_adjusted(&args[0]);\n-                if args.len() == 1 && method_call.ident.name == sym!(clone) {\n+                if args.len() == 1 && method_call.ident.name == sym::clone {\n                     lint_clone_on_copy(cx, expr, &args[0], self_ty);\n                     lint_clone_on_ref_ptr(cx, expr, &args[0]);\n                 }\n@@ -1592,7 +1592,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                             }\n                         }\n                     },\n-                    ty::Ref(..) if method_call.ident.name == sym!(into_iter) => {\n+                    ty::Ref(..) if method_call.ident.name == sym::into_iter => {\n                         lint_into_iter(cx, expr, self_ty, *method_span);\n                     },\n                     _ => (),\n@@ -2647,9 +2647,9 @@ fn lint_unwrap(cx: &LateContext<'_>, expr: &hir::Expr<'_>, unwrap_args: &[hir::E\n fn lint_expect(cx: &LateContext<'_>, expr: &hir::Expr<'_>, expect_args: &[hir::Expr<'_>]) {\n     let obj_ty = cx.typeck_results().expr_ty(&expect_args[0]).peel_refs();\n \n-    let mess = if is_type_diagnostic_item(cx, obj_ty, sym!(option_type)) {\n+    let mess = if is_type_diagnostic_item(cx, obj_ty, sym::option_type) {\n         Some((EXPECT_USED, \"an Option\", \"None\"))\n-    } else if is_type_diagnostic_item(cx, obj_ty, sym!(result_type)) {\n+    } else if is_type_diagnostic_item(cx, obj_ty, sym::result_type) {\n         Some((EXPECT_USED, \"a Result\", \"Err\"))\n     } else {\n         None\n@@ -3142,7 +3142,7 @@ fn lint_search_is_some<'tcx>(\n     else if search_method == \"find\" {\n         let is_string_or_str_slice = |e| {\n             let self_ty = cx.typeck_results().expr_ty(e).peel_refs();\n-            if is_type_diagnostic_item(cx, self_ty, sym!(string_type)) {\n+            if is_type_diagnostic_item(cx, self_ty, sym::string_type) {\n                 true\n             } else {\n                 *self_ty.kind() == ty::Str"}, {"sha": "803ebada54b790cd2f172e3455cc6f3123e5347d", "filename": "clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fref_option_ref.rs?ref=142f0f5eda6fc8515d764526731f5f8219dd1716", "patch": "@@ -2,6 +2,7 @@ use crate::utils::{last_path_segment, snippet, span_lint_and_sugg};\n use rustc_hir::{GenericArg, Mutability, Ty, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n \n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -41,7 +42,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n             if let Some(res) = last.res;\n             if let Some(def_id) = res.opt_def_id();\n \n-            if cx.tcx.is_diagnostic_item(sym!(option_type), def_id);\n+            if cx.tcx.is_diagnostic_item(sym::option_type, def_id);\n             if let Some(ref params) = last_path_segment(qpath).args ;\n             if !params.parenthesized;\n             if let Some(inner_ty) = params.args.iter().find_map(|arg| match arg {"}, {"sha": "31dd5965473d3e9c0affb5c1f2a627de8cda1ff8", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=142f0f5eda6fc8515d764526731f5f8219dd1716", "patch": "@@ -372,7 +372,7 @@ impl LateLintPass<'_> for StringToString {\n             if let ExprKind::MethodCall(path, _, args, _) = &expr.kind;\n             if path.ident.name == sym!(to_string);\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n-            if is_type_diagnostic_item(cx, ty, sym!(string_type));\n+            if is_type_diagnostic_item(cx, ty, sym::string_type);\n             then {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "5b9a80f92db69963ec0256e8c8e404549d9f1a87", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=142f0f5eda6fc8515d764526731f5f8219dd1716", "patch": "@@ -9,6 +9,7 @@ use rustc_hir::{Body, ExprKind, FnDecl, HirId, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n declare_clippy_lint! {\n@@ -82,9 +83,9 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n             }\n         }\n \n-        let (return_type, path) = if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(option_type)) {\n+        let (return_type, path) = if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::option_type) {\n             (\"Option\", &paths::OPTION_SOME)\n-        } else if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(result_type)) {\n+        } else if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type) {\n             (\"Result\", &paths::RESULT_OK)\n         } else {\n             return;"}, {"sha": "9ba39f73ee884e8806576e1d8a19331d19975d49", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=142f0f5eda6fc8515d764526731f5f8219dd1716", "patch": "@@ -15,6 +15,7 @@ use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Node, Path, StmtKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n+use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n@@ -247,6 +248,30 @@ declare_clippy_lint! {\n     \"invalid path\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:**\n+    /// Checks for interning symbols that have already been pre-interned and defined as constants.\n+    ///\n+    /// **Why is this bad?**\n+    /// It's faster and easier to use the symbol constant.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// let _ = sym!(f32);\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// let _ = sym::f32;\n+    /// ```\n+    pub INTERNING_DEFINED_SYMBOL,\n+    internal,\n+    \"interning a symbol that is pre-interned and defined as a constant\"\n+}\n+\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n@@ -840,3 +865,56 @@ impl<'tcx> LateLintPass<'tcx> for InvalidPaths {\n         }\n     }\n }\n+\n+#[derive(Default)]\n+pub struct InterningDefinedSymbol {\n+    // Maps the symbol value to the constant name.\n+    symbol_map: FxHashMap<u32, String>,\n+}\n+\n+impl_lint_pass!(InterningDefinedSymbol => [INTERNING_DEFINED_SYMBOL]);\n+\n+impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n+    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+        if !self.symbol_map.is_empty() {\n+            return;\n+        }\n+\n+        if let Some(Res::Def(_, def_id)) = path_to_res(cx, &paths::SYM_MODULE) {\n+            for item in cx.tcx.item_children(def_id).iter() {\n+                if_chain! {\n+                    if let Res::Def(DefKind::Const, item_def_id) = item.res;\n+                    let ty = cx.tcx.type_of(item_def_id);\n+                    if match_type(cx, ty, &paths::SYMBOL);\n+                    if let Ok(ConstValue::Scalar(value)) = cx.tcx.const_eval_poly(item_def_id);\n+                    if let Ok(value) = value.to_u32();\n+                    then {\n+                        self.symbol_map.insert(value, item.ident.to_string());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::Call(func, [arg]) = &expr.kind;\n+            if let ty::FnDef(def_id, _) = cx.typeck_results().expr_ty(func).kind();\n+            if match_def_path(cx, *def_id, &paths::SYMBOL_INTERN);\n+            if let Some(Constant::Str(arg)) = constant_simple(cx, cx.typeck_results(), arg);\n+            let value = Symbol::intern(&arg).as_u32();\n+            if let Some(symbol_const) = self.symbol_map.get(&value);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    INTERNING_DEFINED_SYMBOL,\n+                    is_expn_of(expr.span, \"sym\").unwrap_or(expr.span),\n+                    \"interning a defined symbol\",\n+                    \"try\",\n+                    format!(\"rustc_span::symbol::sym::{}\", symbol_const),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "2080a49a11cd668ffc27626fd85be35bd9759803", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142f0f5eda6fc8515d764526731f5f8219dd1716/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=142f0f5eda6fc8515d764526731f5f8219dd1716", "patch": "@@ -146,6 +146,12 @@ pub const STR_FROM_UTF8: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8\"];\n pub const STR_LEN: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"len\"];\n pub const STR_STARTS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"starts_with\"];\n #[cfg(feature = \"internal-lints\")]\n+pub const SYMBOL: [&str; 3] = [\"rustc_span\", \"symbol\", \"Symbol\"];\n+#[cfg(feature = \"internal-lints\")]\n+pub const SYMBOL_INTERN: [&str; 4] = [\"rustc_span\", \"symbol\", \"Symbol\", \"intern\"];\n+#[cfg(feature = \"internal-lints\")]\n+pub const SYM_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"sym\"];\n+#[cfg(feature = \"internal-lints\")]\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];\n pub const TO_OWNED: [&str; 3] = [\"alloc\", \"borrow\", \"ToOwned\"];\n pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"];"}, {"sha": "c6b84d2ef650b890d5bd29b31192cc5ceaff6488", "filename": "tests/ui-internal/interning_defined_symbol.fixed", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/142f0f5eda6fc8515d764526731f5f8219dd1716/tests%2Fui-internal%2Finterning_defined_symbol.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/142f0f5eda6fc8515d764526731f5f8219dd1716/tests%2Fui-internal%2Finterning_defined_symbol.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finterning_defined_symbol.fixed?ref=142f0f5eda6fc8515d764526731f5f8219dd1716", "patch": "@@ -0,0 +1,33 @@\n+// run-rustfix\n+#![deny(clippy::internal)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_span;\n+\n+use rustc_span::symbol::Symbol;\n+\n+macro_rules! sym {\n+    ($tt:tt) => {\n+        rustc_span::symbol::Symbol::intern(stringify!($tt))\n+    };\n+}\n+\n+fn main() {\n+    // Direct use of Symbol::intern\n+    let _ = rustc_span::symbol::sym::f32;\n+\n+    // Using a sym macro\n+    let _ = rustc_span::symbol::sym::f32;\n+\n+    // Correct suggestion when symbol isn't stringified constant name\n+    let _ = rustc_span::symbol::sym::proc_dash_macro;\n+\n+    // Interning a symbol that is not defined\n+    let _ = Symbol::intern(\"xyz123\");\n+    let _ = sym!(xyz123);\n+\n+    // Using a different `intern` function\n+    let _ = intern(\"f32\");\n+}\n+\n+fn intern(_: &str) {}"}, {"sha": "9ec82d4ad0baed230a4e6f1e542e43471d6c6d2a", "filename": "tests/ui-internal/interning_defined_symbol.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/142f0f5eda6fc8515d764526731f5f8219dd1716/tests%2Fui-internal%2Finterning_defined_symbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142f0f5eda6fc8515d764526731f5f8219dd1716/tests%2Fui-internal%2Finterning_defined_symbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finterning_defined_symbol.rs?ref=142f0f5eda6fc8515d764526731f5f8219dd1716", "patch": "@@ -0,0 +1,33 @@\n+// run-rustfix\n+#![deny(clippy::internal)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_span;\n+\n+use rustc_span::symbol::Symbol;\n+\n+macro_rules! sym {\n+    ($tt:tt) => {\n+        rustc_span::symbol::Symbol::intern(stringify!($tt))\n+    };\n+}\n+\n+fn main() {\n+    // Direct use of Symbol::intern\n+    let _ = Symbol::intern(\"f32\");\n+\n+    // Using a sym macro\n+    let _ = sym!(f32);\n+\n+    // Correct suggestion when symbol isn't stringified constant name\n+    let _ = Symbol::intern(\"proc-macro\");\n+\n+    // Interning a symbol that is not defined\n+    let _ = Symbol::intern(\"xyz123\");\n+    let _ = sym!(xyz123);\n+\n+    // Using a different `intern` function\n+    let _ = intern(\"f32\");\n+}\n+\n+fn intern(_: &str) {}"}, {"sha": "74b906c8a5797205bc9b46ff4ee55e3ed5d1c9c1", "filename": "tests/ui-internal/interning_defined_symbol.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/142f0f5eda6fc8515d764526731f5f8219dd1716/tests%2Fui-internal%2Finterning_defined_symbol.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142f0f5eda6fc8515d764526731f5f8219dd1716/tests%2Fui-internal%2Finterning_defined_symbol.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finterning_defined_symbol.stderr?ref=142f0f5eda6fc8515d764526731f5f8219dd1716", "patch": "@@ -0,0 +1,27 @@\n+error: interning a defined symbol\n+  --> $DIR/interning_defined_symbol.rs:17:13\n+   |\n+LL |     let _ = Symbol::intern(\"f32\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::symbol::sym::f32`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/interning_defined_symbol.rs:2:9\n+   |\n+LL | #![deny(clippy::internal)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: `#[deny(clippy::interning_defined_symbol)]` implied by `#[deny(clippy::internal)]`\n+\n+error: interning a defined symbol\n+  --> $DIR/interning_defined_symbol.rs:20:13\n+   |\n+LL |     let _ = sym!(f32);\n+   |             ^^^^^^^^^ help: try: `rustc_span::symbol::sym::f32`\n+\n+error: interning a defined symbol\n+  --> $DIR/interning_defined_symbol.rs:23:13\n+   |\n+LL |     let _ = Symbol::intern(\"proc-macro\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::symbol::sym::proc_dash_macro`\n+\n+error: aborting due to 3 previous errors\n+"}]}