{"sha": "10fbdb832b2ad5807b89a005f9d4bccaec231fb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZmJkYjgzMmIyYWQ1ODA3Yjg5YTAwNWY5ZDRiY2NhZWMyMzFmYjE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-02-16T03:45:37Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-02-16T03:45:37Z"}, "message": "save-analysis: power through bracket mis-counts\n\nCloses #47981\n\nThis is pretty unsatisfying since it is working around a span bug. However, I can't track down the span bug and it could be in the parser, proc macro expansion, the user macro, or Syn (or any other library that can manipulate spans). Given that user code can cause this error, I think we need to be more robust here.", "tree": {"sha": "6c73195f437dc8040c152a55b623c7ea8b7a5488", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c73195f437dc8040c152a55b623c7ea8b7a5488"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10fbdb832b2ad5807b89a005f9d4bccaec231fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10fbdb832b2ad5807b89a005f9d4bccaec231fb1", "html_url": "https://github.com/rust-lang/rust/commit/10fbdb832b2ad5807b89a005f9d4bccaec231fb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10fbdb832b2ad5807b89a005f9d4bccaec231fb1/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ec5a99aaa0084d97a9e845b34fdf03d1462c475", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec5a99aaa0084d97a9e845b34fdf03d1462c475", "html_url": "https://github.com/rust-lang/rust/commit/3ec5a99aaa0084d97a9e845b34fdf03d1462c475"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "d5a58c08cbe5a0d950c2ae9bb89b94ea5f5d3737", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/10fbdb832b2ad5807b89a005f9d4bccaec231fb1/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fbdb832b2ad5807b89a005f9d4bccaec231fb1/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=10fbdb832b2ad5807b89a005f9d4bccaec231fb1", "patch": "@@ -115,7 +115,7 @@ impl<'a> SpanUtils<'a> {\n         // We keep track of the following two counts - the depth of nesting of\n         // angle brackets, and the depth of nesting of square brackets. For the\n         // angle bracket count, we only count tokens which occur outside of any\n-        // square brackets (i.e. bracket_count == 0). The intutition here is\n+        // square brackets (i.e. bracket_count == 0). The intuition here is\n         // that we want to count angle brackets in the type, but not any which\n         // could be in expression context (because these could mean 'less than',\n         // etc.).\n@@ -151,18 +151,20 @@ impl<'a> SpanUtils<'a> {\n             }\n             prev = next;\n         }\n-        if angle_count != 0 || bracket_count != 0 {\n-            let loc = self.sess.codemap().lookup_char_pos(span.lo());\n-            span_bug!(\n-                span,\n-                \"Mis-counted brackets when breaking path? Parsing '{}' \\\n-                 in {}, line {}\",\n-                self.snippet(span),\n-                loc.file.name,\n-                loc.line\n-            );\n+        #[cfg(debug_assertions)] {\n+            if angle_count != 0 || bracket_count != 0 {\n+                let loc = self.sess.codemap().lookup_char_pos(span.lo());\n+                span_bug!(\n+                    span,\n+                    \"Mis-counted brackets when breaking path? Parsing '{}' \\\n+                     in {}, line {}\",\n+                    self.snippet(span),\n+                    loc.file.name,\n+                    loc.line\n+                );\n+            }\n         }\n-        if result.is_none() && prev.tok.is_ident() && angle_count == 0 {\n+        if result.is_none() && prev.tok.is_ident() {\n             return Some(prev.sp);\n         }\n         result"}]}