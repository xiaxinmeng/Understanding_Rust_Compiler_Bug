{"sha": "bfb80064d2dd37bd1e7009d98aa585253f5a2812", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYjgwMDY0ZDJkZDM3YmQxZTcwMDlkOThhYTU4NTI1M2Y1YTI4MTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-09T06:53:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-10T03:00:16Z"}, "message": "rt: Add methods to rust_task_thread for borrowing C stacks", "tree": {"sha": "bec247b9a873be925ebd3ef35ea52018d499a03b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec247b9a873be925ebd3ef35ea52018d499a03b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfb80064d2dd37bd1e7009d98aa585253f5a2812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb80064d2dd37bd1e7009d98aa585253f5a2812", "html_url": "https://github.com/rust-lang/rust/commit/bfb80064d2dd37bd1e7009d98aa585253f5a2812", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfb80064d2dd37bd1e7009d98aa585253f5a2812/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fe506bdca714fe2b8b005b1d190091d221c4044", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe506bdca714fe2b8b005b1d190091d221c4044", "html_url": "https://github.com/rust-lang/rust/commit/8fe506bdca714fe2b8b005b1d190091d221c4044"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "4129969057cb4bc3c1197c9871545bd7f85b6ab0", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bfb80064d2dd37bd1e7009d98aa585253f5a2812/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/bfb80064d2dd37bd1e7009d98aa585253f5a2812/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=bfb80064d2dd37bd1e7009d98aa585253f5a2812", "patch": "@@ -13,6 +13,8 @@ pthread_key_t rust_task_thread::task_key;\n DWORD rust_task_thread::task_key;\n #endif\n \n+const size_t C_STACK_SIZE = (1024*1024);\n+\n bool rust_task_thread::tls_initialized = false;\n \n rust_task_thread::rust_task_thread(rust_scheduler *sched,\n@@ -34,7 +36,8 @@ rust_task_thread::rust_task_thread(rust_scheduler *sched,\n     id(id),\n     min_stack_size(kernel->env->min_stack_size),\n     env(kernel->env),\n-    should_exit(false)\n+    should_exit(false),\n+    cached_c_stack(NULL)\n {\n     LOGPTR(this, \"new dom\", (uintptr_t)this);\n     isaac_init(kernel, &rctx);\n@@ -58,6 +61,10 @@ rust_task_thread::~rust_task_thread() {\n #ifndef __WIN32__\n     pthread_attr_destroy(&attr);\n #endif\n+\n+    if (cached_c_stack) {\n+        destroy_stack(kernel, cached_c_stack);\n+    }\n }\n \n void\n@@ -367,6 +374,27 @@ rust_task_thread::exit() {\n     lock.signal();\n }\n \n+stk_seg *\n+rust_task_thread::borrow_c_stack() {\n+\n+    if (cached_c_stack) {\n+        stk_seg *your_stack = cached_c_stack;\n+        cached_c_stack = NULL;\n+        return your_stack;\n+    } else {\n+        return create_stack(kernel, C_STACK_SIZE);\n+    }\n+}\n+\n+void\n+rust_task_thread::return_c_stack(stk_seg *stack) {\n+    if (cached_c_stack) {\n+        destroy_stack(kernel, stack);\n+    } else {\n+        cached_c_stack = stack;\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "360e4e44e0ba44c21b853207eea3179129eee8d0", "filename": "src/rt/rust_task_thread.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bfb80064d2dd37bd1e7009d98aa585253f5a2812/src%2Frt%2Frust_task_thread.h", "raw_url": "https://github.com/rust-lang/rust/raw/bfb80064d2dd37bd1e7009d98aa585253f5a2812/src%2Frt%2Frust_task_thread.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.h?ref=bfb80064d2dd37bd1e7009d98aa585253f5a2812", "patch": "@@ -1,6 +1,7 @@\n #ifndef RUST_TASK_THREAD_H\n #define RUST_TASK_THREAD_H\n \n+#include \"rust_stack.h\"\n #include \"context.h\"\n \n #ifndef _WIN32\n@@ -91,6 +92,12 @@ struct rust_task_thread : public kernel_owned<rust_task_thread>,\n \n     bool should_exit;\n \n+private:\n+\n+    stk_seg *cached_c_stack;\n+\n+public:\n+\n     // Only a pointer to 'name' is kept, so it must live as long as this\n     // domain.\n     rust_task_thread(rust_scheduler *sched, rust_srv *srv, int id);\n@@ -127,6 +134,10 @@ struct rust_task_thread : public kernel_owned<rust_task_thread>,\n \n     // Tells the scheduler to exit it's scheduling loop and thread\n     void exit();\n+\n+    // Called by tasks when they need a stack on which to run C code\n+    stk_seg *borrow_c_stack();\n+    void return_c_stack(stk_seg *stack);\n };\n \n inline rust_log &"}]}