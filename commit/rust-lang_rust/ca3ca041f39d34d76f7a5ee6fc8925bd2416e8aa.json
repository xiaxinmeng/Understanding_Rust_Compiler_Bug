{"sha": "ca3ca041f39d34d76f7a5ee6fc8925bd2416e8aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhM2NhMDQxZjM5ZDM0ZDc2ZjdhNWVlNmZjODkyNWJkMjQxNmU4YWE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-24T15:56:42Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-24T15:56:42Z"}, "message": "Add very basic char / str literal handling to rustc lexer.", "tree": {"sha": "2e41e31ac0240636ba34e9aa6d48c2bdf17f37af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e41e31ac0240636ba34e9aa6d48c2bdf17f37af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca3ca041f39d34d76f7a5ee6fc8925bd2416e8aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3ca041f39d34d76f7a5ee6fc8925bd2416e8aa", "html_url": "https://github.com/rust-lang/rust/commit/ca3ca041f39d34d76f7a5ee6fc8925bd2416e8aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca3ca041f39d34d76f7a5ee6fc8925bd2416e8aa/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df3ea680eae217a9677495d690dbf768ad7614e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/df3ea680eae217a9677495d690dbf768ad7614e0", "html_url": "https://github.com/rust-lang/rust/commit/df3ea680eae217a9677495d690dbf768ad7614e0"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "10c16b8df884178efe21a7ff854f8050120ec610", "filename": "src/comp/fe/lexer.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ca3ca041f39d34d76f7a5ee6fc8925bd2416e8aa/src%2Fcomp%2Ffe%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca3ca041f39d34d76f7a5ee6fc8925bd2416e8aa/src%2Fcomp%2Ffe%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffe%2Flexer.rs?ref=ca3ca041f39d34d76f7a5ee6fc8925bd2416e8aa", "patch": "@@ -126,6 +126,62 @@ fn next_token(stdio_reader rdr) -> token.token {\n             }\n         }\n \n+        case ('\\'') {\n+            // FIXME: general utf8-consumption support.\n+            auto c2 = next(rdr);\n+            if (c2 == '\\\\') {\n+                c2 = next(rdr);\n+                alt (c2) {\n+                    case ('n') { c2 = '\\n'; }\n+                    case ('r') { c2 = '\\r'; }\n+                    case ('t') { c2 = '\\t'; }\n+                    case ('\\\\') { c2 = '\\\\'; }\n+                    case ('\\'') { c2 = '\\''; }\n+                    // FIXME: unicode numeric escapes.\n+                    case (_) {\n+                        log \"unknown character escape\";\n+                        log c2;\n+                        fail;\n+                    }\n+                }\n+            }\n+            if (next(rdr) != '\\'') {\n+                log \"unterminated character constant\";\n+                fail;\n+            }\n+            ret token.LIT_CHAR(c2);\n+        }\n+\n+        case ('\"') {\n+            // FIXME: general utf8-consumption support.\n+            auto c2 = next(rdr);\n+            while (c2 != '\"') {\n+                alt (c2) {\n+                    case ('\\\\') {\n+                        c2 = next(rdr);\n+                        alt (c2) {\n+                            case ('n') { accum_str += '\\n' as u8; }\n+                            case ('r') { accum_str += '\\r' as u8; }\n+                            case ('t') { accum_str += '\\t' as u8; }\n+                            case ('\\\\') { accum_str += '\\\\' as u8; }\n+                            case ('\"') { accum_str += '\"' as u8; }\n+                            // FIXME: unicode numeric escapes.\n+                            case (_) {\n+                                log \"unknown string escape\";\n+                                log c2;\n+                                fail;\n+                            }\n+                        }\n+                    }\n+                    case (_) {\n+                        accum_str += c2 as u8;\n+                    }\n+                }\n+                c2 = next(rdr);\n+            }\n+            ret token.LIT_STR(accum_str);\n+        }\n+\n         case ('-') {\n             auto c2 = next(rdr);\n             if (c2 == '>') {"}]}