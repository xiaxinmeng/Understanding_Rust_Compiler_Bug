{"sha": "3aa1122ec25d15a2a73a295f8298ad9c38b09a10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYTExMjJlYzI1ZDE1YTJhNzNhMjk1ZjgyOThhZDljMzhiMDlhMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-14T04:31:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-14T04:31:42Z"}, "message": "auto merge of #6461 : thestinger/rust/fix_priority_queue, r=pcwalton\n\nuninit() would result in potentially running a destructor on arbitrary\r\nmemory if the Ord implementation throws", "tree": {"sha": "03f57b431321b9a5453bbfb3462847b91e2c38ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03f57b431321b9a5453bbfb3462847b91e2c38ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aa1122ec25d15a2a73a295f8298ad9c38b09a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa1122ec25d15a2a73a295f8298ad9c38b09a10", "html_url": "https://github.com/rust-lang/rust/commit/3aa1122ec25d15a2a73a295f8298ad9c38b09a10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aa1122ec25d15a2a73a295f8298ad9c38b09a10/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62640f5c0535bf12037b99096b21d8674c16d713", "url": "https://api.github.com/repos/rust-lang/rust/commits/62640f5c0535bf12037b99096b21d8674c16d713", "html_url": "https://github.com/rust-lang/rust/commit/62640f5c0535bf12037b99096b21d8674c16d713"}, {"sha": "e1a199227635deddbdf010b3a79c2c96112909d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a199227635deddbdf010b3a79c2c96112909d7", "html_url": "https://github.com/rust-lang/rust/commit/e1a199227635deddbdf010b3a79c2c96112909d7"}], "stats": {"total": 60, "additions": 4, "deletions": 56}, "files": [{"sha": "3c96a8e145d8082b748e492af7aff20f0fee63a2", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 4, "deletions": 56, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1122ec25d15a2a73a295f8298ad9c38b09a10/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1122ec25d15a2a73a295f8298ad9c38b09a10/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=3aa1122ec25d15a2a73a295f8298ad9c38b09a10", "patch": "@@ -12,14 +12,7 @@\n \n use core::old_iter::BaseIter;\n use core::util::{replace, swap};\n-\n-#[abi = \"rust-intrinsic\"]\n-extern \"rust-intrinsic\" {\n-    fn move_val_init<T>(dst: &mut T, src: T);\n-    fn init<T>() -> T;\n-    #[cfg(not(stage0))]\n-    fn uninit<T>() -> T;\n-}\n+use core::unstable::intrinsics::{init, move_val_init};\n \n pub struct PriorityQueue<T> {\n     priv data: ~[T],\n@@ -141,33 +134,13 @@ pub impl <T:Ord> PriorityQueue<T> {\n \n     // The implementations of siftup and siftdown use unsafe blocks in\n     // order to move an element out of the vector (leaving behind a\n-    // junk element), shift along the others and move it back into the\n+    // zeroed element), shift along the others and move it back into the\n     // vector over the junk element.  This reduces the constant factor\n     // compared to using swaps, which involves twice as many moves.\n \n-    #[cfg(not(stage0))]\n-    priv fn siftup(&mut self, start: uint, mut pos: uint) {\n-        unsafe {\n-            let new = *ptr::to_unsafe_ptr(&self.data[pos]);\n-\n-            while pos > start {\n-                let parent = (pos - 1) >> 1;\n-                if new > self.data[parent] {\n-                    let x = replace(&mut self.data[parent], uninit());\n-                    move_val_init(&mut self.data[pos], x);\n-                    pos = parent;\n-                    loop\n-                }\n-                break\n-            }\n-            move_val_init(&mut self.data[pos], new);\n-        }\n-    }\n-\n-    #[cfg(stage0)]\n     priv fn siftup(&mut self, start: uint, mut pos: uint) {\n         unsafe {\n-            let new = *ptr::to_unsafe_ptr(&self.data[pos]);\n+            let new = replace(&mut self.data[pos], init());\n \n             while pos > start {\n                 let parent = (pos - 1) >> 1;\n@@ -183,35 +156,10 @@ pub impl <T:Ord> PriorityQueue<T> {\n         }\n     }\n \n-\n-    #[cfg(not(stage0))]\n-    priv fn siftdown_range(&mut self, mut pos: uint, end: uint) {\n-        unsafe {\n-            let start = pos;\n-            let new = *ptr::to_unsafe_ptr(&self.data[pos]);\n-\n-            let mut child = 2 * pos + 1;\n-            while child < end {\n-                let right = child + 1;\n-                if right < end && !(self.data[child] > self.data[right]) {\n-                    child = right;\n-                }\n-                let x = replace(&mut self.data[child], uninit());\n-                move_val_init(&mut self.data[pos], x);\n-                pos = child;\n-                child = 2 * pos + 1;\n-            }\n-\n-            move_val_init(&mut self.data[pos], new);\n-            self.siftup(start, pos);\n-        }\n-    }\n-\n-    #[cfg(stage0)]\n     priv fn siftdown_range(&mut self, mut pos: uint, end: uint) {\n         unsafe {\n             let start = pos;\n-            let new = *ptr::to_unsafe_ptr(&self.data[pos]);\n+            let new = replace(&mut self.data[pos], init());\n \n             let mut child = 2 * pos + 1;\n             while child < end {"}]}