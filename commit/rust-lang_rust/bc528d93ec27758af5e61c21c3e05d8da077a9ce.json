{"sha": "bc528d93ec27758af5e61c21c3e05d8da077a9ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNTI4ZDkzZWMyNzc1OGFmNWU2MWMyMWMzZTA1ZDhkYTA3N2E5Y2U=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-30T13:55:31Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-30T13:55:31Z"}, "message": "Allow `layout_of_local` to also use cached layouts", "tree": {"sha": "b759a0d28e5a37ed30e788e0721185e4f5a24bf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b759a0d28e5a37ed30e788e0721185e4f5a24bf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc528d93ec27758af5e61c21c3e05d8da077a9ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc528d93ec27758af5e61c21c3e05d8da077a9ce", "html_url": "https://github.com/rust-lang/rust/commit/bc528d93ec27758af5e61c21c3e05d8da077a9ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc528d93ec27758af5e61c21c3e05d8da077a9ce/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cfb05fd23b5ecc6a13f4629844ff81ac758497c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cfb05fd23b5ecc6a13f4629844ff81ac758497c", "html_url": "https://github.com/rust-lang/rust/commit/7cfb05fd23b5ecc6a13f4629844ff81ac758497c"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "d890e2fbe46da0a486392e249025ea1c2b8479d7", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bc528d93ec27758af5e61c21c3e05d8da077a9ce/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc528d93ec27758af5e61c21c3e05d8da077a9ce/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=bc528d93ec27758af5e61c21c3e05d8da077a9ce", "patch": "@@ -317,13 +317,16 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n     pub fn layout_of_local(\n         &self,\n         frame: &Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,\n-        local: mir::Local\n+        local: mir::Local,\n+        layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, TyLayout<'tcx>> {\n         let cell = &frame.locals[local].layout;\n         if cell.get().is_none() {\n+            let layout = ::interpret::operand::from_known_layout(layout, || {\n             let local_ty = frame.mir.local_decls[local].ty;\n             let local_ty = self.monomorphize_with_substs(local_ty, frame.instance.substs);\n-            let layout = self.layout_of(local_ty)?;\n+                self.layout_of(local_ty)\n+            })?;\n             cell.set(Some(layout));\n         }\n \n@@ -507,7 +510,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                 match local.state {\n                     LocalState::Live(_) => {\n                         // This needs to be peoperly initialized.\n-                        let layout = self.layout_of_local(self.frame(), idx)?;\n+                        let layout = self.layout_of_local(self.frame(), idx, None)?;\n                         local.state = LocalState::Live(self.uninit_operand(layout)?);\n                     }\n                     LocalState::Dead => {\n@@ -601,7 +604,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         assert!(local != mir::RETURN_PLACE, \"Cannot make return place live\");\n         trace!(\"{:?} is now live\", local);\n \n-        let layout = self.layout_of_local(self.frame(), local)?;\n+        let layout = self.layout_of_local(self.frame(), local, None)?;\n         let init = LocalState::Live(self.uninit_operand(layout)?);\n         // StorageLive *always* kills the value that's currently stored\n         Ok(mem::replace(&mut self.frame_mut().locals[local].state, init))"}, {"sha": "a7e92d56794091fdbee5eeb24803d600eaadab24", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc528d93ec27758af5e61c21c3e05d8da077a9ce/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc528d93ec27758af5e61c21c3e05d8da077a9ce/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=bc528d93ec27758af5e61c21c3e05d8da077a9ce", "patch": "@@ -227,7 +227,7 @@ impl<'tcx, Tag> OpTy<'tcx, Tag>\n // Use the existing layout if given (but sanity check in debug mode),\n // or compute the layout.\n #[inline(always)]\n-fn from_known_layout<'tcx>(\n+pub(super) fn from_known_layout<'tcx>(\n     layout: Option<TyLayout<'tcx>>,\n     compute: impl FnOnce() -> EvalResult<'tcx, TyLayout<'tcx>>\n ) -> EvalResult<'tcx, TyLayout<'tcx>> {\n@@ -461,10 +461,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         &self,\n         frame: &super::Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,\n         local: mir::Local,\n+        layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         assert_ne!(local, mir::RETURN_PLACE);\n         let op = *frame.locals[local].access()?;\n-        let layout = self.layout_of_local(frame, local)?;\n+        let layout = self.layout_of_local(frame, local, layout)?;\n         Ok(OpTy { op, layout })\n     }\n \n@@ -473,14 +474,15 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     fn eval_place_to_op(\n         &self,\n         mir_place: &mir::Place<'tcx>,\n+        layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         use rustc::mir::Place::*;\n         let op = match *mir_place {\n             Local(mir::RETURN_PLACE) => return err!(ReadFromReturnPointer),\n-            Local(local) => self.access_local(self.frame(), local)?,\n+            Local(local) => self.access_local(self.frame(), local, layout)?,\n \n             Projection(ref proj) => {\n-                let op = self.eval_place_to_op(&proj.base)?;\n+                let op = self.eval_place_to_op(&proj.base, None)?;\n                 self.operand_projection(op, &proj.elem)?\n             }\n \n@@ -504,7 +506,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             // FIXME: do some more logic on `move` to invalidate the old location\n             Copy(ref place) |\n             Move(ref place) =>\n-                self.eval_place_to_op(place)?,\n+                self.eval_place_to_op(place, layout)?,\n \n             Constant(ref constant) => {\n                 let layout = from_known_layout(layout, || {"}, {"sha": "ffb8ec899a07db3c09263d569bb4f621f073fa4a", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc528d93ec27758af5e61c21c3e05d8da077a9ce/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc528d93ec27758af5e61c21c3e05d8da077a9ce/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=bc528d93ec27758af5e61c21c3e05d8da077a9ce", "patch": "@@ -624,7 +624,7 @@ where\n                     // their layout on return.\n                     PlaceTy {\n                         place: *return_place,\n-                        layout: self.layout_of_local(self.frame(), mir::RETURN_PLACE)?,\n+                        layout: self.layout_of_local(self.frame(), mir::RETURN_PLACE, None)?,\n                     },\n                 None => return err!(InvalidNullPointerUsage),\n             },\n@@ -633,7 +633,7 @@ where\n                     frame: self.cur_frame(),\n                     local,\n                 },\n-                layout: self.layout_of_local(self.frame(), local)?,\n+                layout: self.layout_of_local(self.frame(), local, None)?,\n             },\n \n             Projection(ref proj) => {\n@@ -901,7 +901,7 @@ where\n                         // We need the layout of the local.  We can NOT use the layout we got,\n                         // that might e.g., be an inner field of a struct with `Scalar` layout,\n                         // that has different alignment than the outer field.\n-                        let local_layout = self.layout_of_local(&self.stack[frame], local)?;\n+                        let local_layout = self.layout_of_local(&self.stack[frame], local, None)?;\n                         let ptr = self.allocate(local_layout, MemoryKind::Stack);\n                         // We don't have to validate as we can assume the local\n                         // was already valid for its type."}, {"sha": "7e823524c180c81de4c638401347fe3502b7fdc5", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc528d93ec27758af5e61c21c3e05d8da077a9ce/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc528d93ec27758af5e61c21c3e05d8da077a9ce/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=bc528d93ec27758af5e61c21c3e05d8da077a9ce", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         mir.spread_arg,\n                         mir.args_iter()\n                             .map(|local|\n-                                (local, self.layout_of_local(self.frame(), local).unwrap().ty)\n+                                (local, self.layout_of_local(self.frame(), local, None).unwrap().ty)\n                             )\n                             .collect::<Vec<_>>()\n                     );\n@@ -383,7 +383,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         }\n                     } else {\n                         let callee_layout =\n-                            self.layout_of_local(self.frame(), mir::RETURN_PLACE)?;\n+                            self.layout_of_local(self.frame(), mir::RETURN_PLACE, None)?;\n                         if !callee_layout.abi.is_uninhabited() {\n                             return err!(FunctionRetMismatch(\n                                 self.tcx.types.never, callee_layout.ty"}]}