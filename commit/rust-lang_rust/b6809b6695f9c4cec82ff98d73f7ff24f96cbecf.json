{"sha": "b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ODA5YjY2OTVmOWM0Y2VjODJmZjk4ZDczZjdmZjI0Zjk2Y2JlY2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-11T12:51:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-11T13:29:33Z"}, "message": "rename", "tree": {"sha": "dd095e6ef28971355b4553a91c081a340f5defa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd095e6ef28971355b4553a91c081a340f5defa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "html_url": "https://github.com/rust-lang/rust/commit/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c2ba945ed331f0ce95eddd5b2183aa6fdf0f94b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2ba945ed331f0ce95eddd5b2183aa6fdf0f94b", "html_url": "https://github.com/rust-lang/rust/commit/6c2ba945ed331f0ce95eddd5b2183aa6fdf0f94b"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "c3674ffdcc9a7579882aebaa1f74daa34a1cc3c9", "filename": "crates/ra_assists/src/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs?ref=b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn add_explicit_type(mut ctx: AssistCtx<impl HirDatabase>) -> Option<\n     }\n     // Infer type\n     let db = ctx.db;\n-    let analyzer = hir::SourceAnalyser::new(db, ctx.frange.file_id, stmt.syntax());\n+    let analyzer = hir::SourceAnalyzer::new(db, ctx.frange.file_id, stmt.syntax());\n     let ty = analyzer.type_of(db, expr)?;\n     // Assist not applicable if the type is unknown\n     if is_unknown(&ty) {"}, {"sha": "04b3f3c7622cd924ae5e41dc11629447561cf389", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "patch": "@@ -45,7 +45,7 @@ fn add_missing_impl_members_inner(\n     let trait_def = {\n         let file_id = ctx.frange.file_id;\n         let position = FilePosition { file_id, offset: impl_node.syntax().range().start() };\n-        let analyser = hir::SourceAnalyser::new(ctx.db, position.file_id, impl_node.syntax());\n+        let analyser = hir::SourceAnalyzer::new(ctx.db, position.file_id, impl_node.syntax());\n \n         resolve_target_trait_def(ctx.db, &analyser, impl_node)?\n     };\n@@ -121,13 +121,13 @@ fn add_missing_impl_members_inner(\n /// implemented) to a `ast::TraitDef`.\n fn resolve_target_trait_def(\n     db: &impl HirDatabase,\n-    binder: &hir::SourceAnalyser,\n+    analyzer: &hir::SourceAnalyzer,\n     impl_block: &ast::ImplBlock,\n ) -> Option<TreeArc<ast::TraitDef>> {\n     let ast_path =\n         impl_block.target_trait().map(AstNode::syntax).and_then(ast::PathType::cast)?.path()?;\n \n-    match binder.resolve_path(db, &ast_path) {\n+    match analyzer.resolve_path(db, &ast_path) {\n         Some(hir::PathResolution::Def(hir::ModuleDef::Trait(def))) => Some(def.source(db).1),\n         _ => None,\n     }"}, {"sha": "8110b2676be9a4f5b2588d59bc866d1c645e5d63", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "patch": "@@ -20,7 +20,7 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     }\n \n     let expr = match_expr.expr()?;\n-    let analyzer = hir::SourceAnalyser::new(ctx.db, ctx.frange.file_id, expr.syntax());\n+    let analyzer = hir::SourceAnalyzer::new(ctx.db, ctx.frange.file_id, expr.syntax());\n     let match_expr_ty = analyzer.type_of(ctx.db, expr)?;\n     let enum_def = match_expr_ty.autoderef(ctx.db).find_map(|ty| match ty.as_adt() {\n         Some((AdtDef::Enum(e), _)) => Some(e),"}, {"sha": "81f762e8d8658c67075c62a27eba79c5dafd472c", "filename": "crates/ra_assists/src/fill_struct_fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs?ref=b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "patch": "@@ -51,7 +51,7 @@ where\n     }\n \n     fn evaluate_struct_def_fields(&mut self) -> Option<()> {\n-        let analyzer = hir::SourceAnalyser::new(\n+        let analyzer = hir::SourceAnalyzer::new(\n             self.ctx.db,\n             self.ctx.frange.file_id,\n             self.struct_lit.syntax(),"}, {"sha": "3ca810a8bce66900cdc93b3f9955c783fb9e45a7", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "patch": "@@ -66,7 +66,7 @@ pub use self::{\n     adt::AdtDef,\n     expr::{ExprScopes, ScopesWithSourceMap, ScopeEntryWithSyntax},\n     resolve::{Resolver, Resolution},\n-    source_binder::{SourceAnalyser, PathResolution},\n+    source_binder::{SourceAnalyzer, PathResolution},\n };\n \n pub use self::code_model_api::{"}, {"sha": "309e33ca93adbea776c485ff592f19fd9eb539f7", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "patch": "@@ -261,9 +261,9 @@ fn try_get_resolver_for_node(\n     }\n }\n \n-// Name is bad, don't use inside HIR\n+/// `SourceAnalyzer`\n #[derive(Debug)]\n-pub struct SourceAnalyser {\n+pub struct SourceAnalyzer {\n     resolver: Resolver,\n     body_source_map: Option<Arc<crate::expr::BodySourceMap>>,\n     infer: Option<Arc<crate::ty::InferenceResult>>,\n@@ -281,18 +281,18 @@ pub enum PathResolution {\n     AssocItem(crate::ImplItem),\n }\n \n-impl SourceAnalyser {\n-    pub fn new(db: &impl HirDatabase, file_id: FileId, node: &SyntaxNode) -> SourceAnalyser {\n+impl SourceAnalyzer {\n+    pub fn new(db: &impl HirDatabase, file_id: FileId, node: &SyntaxNode) -> SourceAnalyzer {\n         let resolver = resolver_for_node(db, file_id, node);\n         let function = function_from_child_node(db, file_id, node);\n         if let Some(function) = function {\n-            SourceAnalyser {\n+            SourceAnalyzer {\n                 resolver,\n                 body_source_map: Some(function.body_source_map(db)),\n                 infer: Some(function.infer(db)),\n             }\n         } else {\n-            SourceAnalyser { resolver, body_source_map: None, infer: None }\n+            SourceAnalyzer { resolver, body_source_map: None, infer: None }\n         }\n     }\n "}, {"sha": "a6676cad5cefc9f36080064f6e21a4bfbfc4f181", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "patch": "@@ -17,7 +17,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let calling_node = FnCallNode::with_node(syntax, position.offset)?;\n     let name_ref = calling_node.name_ref()?;\n \n-    let analyser = hir::SourceAnalyser::new(db, position.file_id, name_ref.syntax());\n+    let analyser = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax());\n     let function = match calling_node {\n         FnCallNode::CallExpr(expr) => {\n             //FIXME: apply subst"}, {"sha": "98cdccef7fdece99ae6a8230dd9b53e765433334", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "patch": "@@ -14,7 +14,7 @@ use crate::{db, FilePosition};\n #[derive(Debug)]\n pub(crate) struct CompletionContext<'a> {\n     pub(super) db: &'a db::RootDatabase,\n-    pub(super) analyzer: hir::SourceAnalyser,\n+    pub(super) analyzer: hir::SourceAnalyzer,\n     pub(super) offset: TextUnit,\n     pub(super) token: SyntaxToken<'a>,\n     pub(super) resolver: Resolver,\n@@ -50,7 +50,7 @@ impl<'a> CompletionContext<'a> {\n         let resolver = source_binder::resolver_for_position(db, position);\n         let module = source_binder::module_from_position(db, position);\n         let token = find_token_at_offset(original_file.syntax(), position.offset).left_biased()?;\n-        let analyzer = hir::SourceAnalyser::new(db, position.file_id, token.parent());\n+        let analyzer = hir::SourceAnalyzer::new(db, position.file_id, token.parent());\n         let mut ctx = CompletionContext {\n             db,\n             analyzer,"}, {"sha": "1f1a8d1261b8529742543a104bebd3ca95825fdd", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn reference_definition(\n ) -> ReferenceResult {\n     use self::ReferenceResult::*;\n \n-    let analyzer = hir::SourceAnalyser::new(db, file_id, name_ref.syntax());\n+    let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax());\n \n     // Special cases:\n "}, {"sha": "0cba5a6651c172e6686a59ea8b578c64e414a307", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "patch": "@@ -132,7 +132,7 @@ pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n         .ancestors()\n         .take_while(|it| it.range() == leaf_node.range())\n         .find(|&it| ast::Expr::cast(it).is_some() || ast::Pat::cast(it).is_some())?;\n-    let analyzer = hir::SourceAnalyser::new(db, frange.file_id, node);\n+    let analyzer = hir::SourceAnalyzer::new(db, frange.file_id, node);\n     let ty = if let Some(ty) = ast::Expr::cast(node).and_then(|e| analyzer.type_of(db, e)) {\n         ty\n     } else if let Some(ty) = ast::Pat::cast(node).and_then(|p| analyzer.type_of_pat(db, p)) {"}]}