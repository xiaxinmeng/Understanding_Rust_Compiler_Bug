{"sha": "9f70efb31aa9345e07b547b3d4f63a1e08b53c49", "node_id": "C_kwDOAAsO6NoAKDlmNzBlZmIzMWFhOTM0NWUwN2I1NDdiM2Q0ZjYzYTFlMDhiNTNjNDk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-02T16:37:51Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-02T16:38:08Z"}, "message": "only suppress coercion error if type is definitely unsized", "tree": {"sha": "5cf2293447fd39d31d11c8c20685743b75d71ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cf2293447fd39d31d11c8c20685743b75d71ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f70efb31aa9345e07b547b3d4f63a1e08b53c49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f70efb31aa9345e07b547b3d4f63a1e08b53c49", "html_url": "https://github.com/rust-lang/rust/commit/9f70efb31aa9345e07b547b3d4f63a1e08b53c49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f70efb31aa9345e07b547b3d4f63a1e08b53c49/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "789dd0b2a2cd68c129ba9b0aa1008939209adcfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/789dd0b2a2cd68c129ba9b0aa1008939209adcfd", "html_url": "https://github.com/rust-lang/rust/commit/789dd0b2a2cd68c129ba9b0aa1008939209adcfd"}], "stats": {"total": 92, "additions": 81, "deletions": 11}, "files": [{"sha": "ba49e0c41618a38bb61bfa794202b6cba877a853", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9f70efb31aa9345e07b547b3d4f63a1e08b53c49/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f70efb31aa9345e07b547b3d4f63a1e08b53c49/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=9f70efb31aa9345e07b547b3d4f63a1e08b53c49", "patch": "@@ -1595,7 +1595,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             Some(blk_id),\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n-                            unsized_return = self.is_return_ty_unsized(fcx, blk_id);\n+                            unsized_return = self.is_return_ty_definitely_unsized(fcx);\n                         }\n                         if let Some(expression) = expression\n                             && let hir::ExprKind::Loop(loop_blk, ..) = expression.kind {\n@@ -1614,8 +1614,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             None,\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n-                            let id = fcx.tcx.hir().parent_id(id);\n-                            unsized_return = self.is_return_ty_unsized(fcx, id);\n+                            unsized_return = self.is_return_ty_definitely_unsized(fcx);\n                         }\n                     }\n                     _ => {\n@@ -1896,15 +1895,24 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         err.help(\"you could instead create a new `enum` with a variant for each returned type\");\n     }\n \n-    fn is_return_ty_unsized<'a>(&self, fcx: &FnCtxt<'a, 'tcx>, blk_id: hir::HirId) -> bool {\n-        if let Some((_, fn_decl, _)) = fcx.get_fn_decl(blk_id)\n-            && let hir::FnRetTy::Return(ty) = fn_decl.output\n-            && let ty = fcx.astconv().ast_ty_to_ty( ty)\n-            && let ty::Dynamic(..) = ty.kind()\n-        {\n-            return true;\n+    /// Checks whether the return type is unsized via an obligation, which makes\n+    /// sure we consider `dyn Trait: Sized` where clauses, which are trivially\n+    /// false but technically valid for typeck.\n+    fn is_return_ty_definitely_unsized(&self, fcx: &FnCtxt<'_, 'tcx>) -> bool {\n+        if let Some(sig) = fcx.body_fn_sig() {\n+            !fcx.predicate_may_hold(&Obligation::new(\n+                fcx.tcx,\n+                ObligationCause::dummy(),\n+                fcx.param_env,\n+                ty::TraitRef::new(\n+                    fcx.tcx,\n+                    fcx.tcx.require_lang_item(hir::LangItem::Sized, None),\n+                    [sig.output()],\n+                ),\n+            ))\n+        } else {\n+            false\n         }\n-        false\n     }\n \n     pub fn complete<'a>(self, fcx: &FnCtxt<'a, 'tcx>) -> Ty<'tcx> {"}, {"sha": "328f154dcbc3e0c7f5ec3ed7f8707ee5d674c3e3", "filename": "tests/ui/typeck/return-dyn-type-mismatch-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f70efb31aa9345e07b547b3d4f63a1e08b53c49/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f70efb31aa9345e07b547b3d4f63a1e08b53c49/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch-2.rs?ref=9f70efb31aa9345e07b547b3d4f63a1e08b53c49", "patch": "@@ -0,0 +1,11 @@\n+trait Trait<T> {}\n+\n+fn foo<T>() -> dyn Trait<T>\n+where\n+    dyn Trait<T>: Sized, // pesky sized predicate\n+{\n+    42\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "9c368e83834b10c71c6c2bfb57456936c3773538", "filename": "tests/ui/typeck/return-dyn-type-mismatch-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f70efb31aa9345e07b547b3d4f63a1e08b53c49/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f70efb31aa9345e07b547b3d4f63a1e08b53c49/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch-2.stderr?ref=9f70efb31aa9345e07b547b3d4f63a1e08b53c49", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/return-dyn-type-mismatch-2.rs:7:5\n+   |\n+LL | fn foo<T>() -> dyn Trait<T>\n+   |                ------------ expected `(dyn Trait<T> + 'static)` because of return type\n+...\n+LL |     42\n+   |     ^^ expected `dyn Trait`, found integer\n+   |\n+   = note: expected trait object `(dyn Trait<T> + 'static)`\n+                      found type `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "93718f70f41938a651fc7423e99130c5a70b7124", "filename": "tests/ui/typeck/return-dyn-type-mismatch.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9f70efb31aa9345e07b547b3d4f63a1e08b53c49/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f70efb31aa9345e07b547b3d4f63a1e08b53c49/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch.rs?ref=9f70efb31aa9345e07b547b3d4f63a1e08b53c49", "patch": "@@ -0,0 +1,21 @@\n+pub trait TestTrait {\n+    type MyType;\n+\n+    fn func() -> Option<Self>\n+    where\n+        Self: Sized;\n+}\n+\n+impl<T> dyn TestTrait<MyType = T>\n+where\n+    Self: Sized, // pesky sized predicate\n+{\n+    fn other_func() -> dyn TestTrait<MyType = T> {\n+        match Self::func() {\n+            None => None,\n+            //~^ ERROR mismatched types\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9d0a609d87f81bb437d8f7c383228f227a2135f9", "filename": "tests/ui/typeck/return-dyn-type-mismatch.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f70efb31aa9345e07b547b3d4f63a1e08b53c49/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f70efb31aa9345e07b547b3d4f63a1e08b53c49/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch.stderr?ref=9f70efb31aa9345e07b547b3d4f63a1e08b53c49", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/return-dyn-type-mismatch.rs:15:21\n+   |\n+LL |     fn other_func() -> dyn TestTrait<MyType = T> {\n+   |                        ------------------------- expected `(dyn TestTrait<MyType = T> + 'static)` because of return type\n+LL |         match Self::func() {\n+LL |             None => None,\n+   |                     ^^^^ expected `dyn TestTrait`, found `Option<_>`\n+   |\n+   = note: expected trait object `(dyn TestTrait<MyType = T> + 'static)`\n+                      found enum `Option<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}