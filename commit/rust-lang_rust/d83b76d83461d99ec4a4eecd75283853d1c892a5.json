{"sha": "d83b76d83461d99ec4a4eecd75283853d1c892a5", "node_id": "C_kwDOAAsO6NoAKGQ4M2I3NmQ4MzQ2MWQ5OWVjNGE0ZWVjZDc1MjgzODUzZDFjODkyYTU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-11T17:48:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-11T17:48:45Z"}, "message": "Merge #10747\n\n10747: fix: Remove faulty logic for ascending test attributes for runnables r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10744\r\n\r\n- This logic is currently not required as we do not expand test/bench anymore for the time being\r\n- The implementation of this was flawed to begin with as it just skipped out of macro expansions instead of ascending the trees inside expansions\r\n\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "79a98a4a14d8a6ab987e583ef29f249ca7ff461a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79a98a4a14d8a6ab987e583ef29f249ca7ff461a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d83b76d83461d99ec4a4eecd75283853d1c892a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhjVd9CRBK7hj4Ov3rIwAAqfMIAG/Ftbs8f83c9dTIK925bcAr\n2kA5nQD7ks1jgaDILvHvVHgOwEhCSjgUZ5lG0yah8Vup9Ke4+ISlGmpHqAKUf8s4\n3YYENYafNb8KaOV1OEtGb6iyoFLnxmc5j3xkAqXS8nOrD/d1SOI+IczHW1NaSt4j\n/qrdS/7/b0YMUj3H8QgJxPv7NJdgvBpdH7iA7wOEBmPOhT3nhSTFRSjLEp8LjOq5\ne4IjkOEixZEB9vgxV+BQay2LE4z6aQOVtn8ElzKQA0UUyR58A6SDh2wkb4CnHB1v\nLkBlpgclMBsdrZ75R5qI3PsO/mg75lIuOSnblw588NBy/KqW5MsO1fi8edQC30g=\n=EeVd\n-----END PGP SIGNATURE-----\n", "payload": "tree 79a98a4a14d8a6ab987e583ef29f249ca7ff461a\nparent 23a980af62816b2f46cbc5e4060e75eb1044ff8d\nparent 2d7f5891f7c7d19342ccddb53436527d1ca7e2b4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1636652925 +0000\ncommitter GitHub <noreply@github.com> 1636652925 +0000\n\nMerge #10747\n\n10747: fix: Remove faulty logic for ascending test attributes for runnables r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10744\r\n\r\n- This logic is currently not required as we do not expand test/bench anymore for the time being\r\n- The implementation of this was flawed to begin with as it just skipped out of macro expansions instead of ascending the trees inside expansions\r\n\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d83b76d83461d99ec4a4eecd75283853d1c892a5", "html_url": "https://github.com/rust-lang/rust/commit/d83b76d83461d99ec4a4eecd75283853d1c892a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d83b76d83461d99ec4a4eecd75283853d1c892a5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23a980af62816b2f46cbc5e4060e75eb1044ff8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/23a980af62816b2f46cbc5e4060e75eb1044ff8d", "html_url": "https://github.com/rust-lang/rust/commit/23a980af62816b2f46cbc5e4060e75eb1044ff8d"}, {"sha": "2d7f5891f7c7d19342ccddb53436527d1ca7e2b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7f5891f7c7d19342ccddb53436527d1ca7e2b4", "html_url": "https://github.com/rust-lang/rust/commit/2d7f5891f7c7d19342ccddb53436527d1ca7e2b4"}], "stats": {"total": 26, "additions": 2, "deletions": 24}, "files": [{"sha": "0c4fdfa0fe59c248fa893b9856010252069bcecc", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d83b76d83461d99ec4a4eecd75283853d1c892a5/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d83b76d83461d99ec4a4eecd75283853d1c892a5/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=d83b76d83461d99ec4a4eecd75283853d1c892a5", "patch": "@@ -699,23 +699,6 @@ impl<N: AstNode> InFile<N> {\n     pub fn syntax(&self) -> InFile<&SyntaxNode> {\n         self.with_value(self.value.syntax())\n     }\n-\n-    pub fn nodes_with_attributes<'db>(\n-        self,\n-        db: &'db dyn db::AstDatabase,\n-    ) -> impl Iterator<Item = InFile<N>> + 'db\n-    where\n-        N: 'db,\n-    {\n-        iter::successors(Some(self), move |node| {\n-            let InFile { file_id, value } = node.file_id.call_node(db)?;\n-            N::cast(value).map(|n| InFile::new(file_id, n))\n-        })\n-    }\n-\n-    pub fn node_with_attributes(self, db: &dyn db::AstDatabase) -> InFile<N> {\n-        self.nodes_with_attributes(db).last().unwrap()\n-    }\n }\n \n /// In Rust, macros expand token trees to token trees. When we want to turn a"}, {"sha": "40c6b2115988c7158559c24307e366acf36d2a5a", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d83b76d83461d99ec4a4eecd75283853d1c892a5/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d83b76d83461d99ec4a4eecd75283853d1c892a5/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=d83b76d83461d99ec4a4eecd75283853d1c892a5", "patch": "@@ -236,9 +236,7 @@ fn find_related_tests(\n                 .filter_map(|token| token.ancestors().find_map(ast::Fn::cast))\n                 .map(|f| hir::InFile::new(sema.hir_file_for(f.syntax()), f));\n \n-            for fn_def in functions {\n-                // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n-                let InFile { value: fn_def, .. } = &fn_def.node_with_attributes(sema.db);\n+            for InFile { value: ref fn_def, .. } in functions {\n                 if let Some(runnable) = as_test_runnable(sema, fn_def) {\n                     // direct test\n                     tests.insert(runnable);\n@@ -294,8 +292,7 @@ fn parent_test_module(sema: &Semantics<RootDatabase>, fn_def: &ast::Fn) -> Optio\n }\n \n pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) -> Option<Runnable> {\n-    // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n-    let func = def.source(sema.db)?.node_with_attributes(sema.db);\n+    let func = def.source(sema.db)?;\n     let name_string = def.name(sema.db).to_string();\n \n     let root = def.module(sema.db).krate().root_module(sema.db);\n@@ -504,8 +501,6 @@ fn has_test_function_or_multiple_test_submodules(\n         match item {\n             hir::ModuleDef::Function(f) => {\n                 if let Some(it) = f.source(sema.db) {\n-                    // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n-                    let it = it.node_with_attributes(sema.db);\n                     if test_related_attribute(&it.value).is_some() {\n                         return true;\n                     }"}]}