{"sha": "0ab3f1762e4ca6486857ad12922de6b0aa0ab424", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYjNmMTc2MmU0Y2E2NDg2ODU3YWQxMjkyMmRlNmIwYWEwYWI0MjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-30T10:34:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-30T10:34:56Z"}, "message": "Auto merge of #4113 - rust-lang:author, r=flip1995\n\nFix `Block`  dump in author lint\n\nchangelog: The `#[clippy::author]` attribute now emits correct pattern code for block expressions", "tree": {"sha": "0b820e0da4ed66f06119e93952f7407ab849f172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b820e0da4ed66f06119e93952f7407ab849f172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ab3f1762e4ca6486857ad12922de6b0aa0ab424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab3f1762e4ca6486857ad12922de6b0aa0ab424", "html_url": "https://github.com/rust-lang/rust/commit/0ab3f1762e4ca6486857ad12922de6b0aa0ab424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ab3f1762e4ca6486857ad12922de6b0aa0ab424/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2f51228152a139a2a8aaba59b8a4e68f498ff26", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f51228152a139a2a8aaba59b8a4e68f498ff26", "html_url": "https://github.com/rust-lang/rust/commit/d2f51228152a139a2a8aaba59b8a4e68f498ff26"}, {"sha": "3908d86f8a4502d53b79dbc02371b2130b8fb512", "url": "https://api.github.com/repos/rust-lang/rust/commits/3908d86f8a4502d53b79dbc02371b2130b8fb512", "html_url": "https://github.com/rust-lang/rust/commit/3908d86f8a4502d53b79dbc02371b2130b8fb512"}], "stats": {"total": 73, "additions": 65, "deletions": 8}, "files": [{"sha": "d66e2b5f86400d996b220c9c311df80f30e29d90", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0ab3f1762e4ca6486857ad12922de6b0aa0ab424/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab3f1762e4ca6486857ad12922de6b0aa0ab424/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=0ab3f1762e4ca6486857ad12922de6b0aa0ab424", "patch": "@@ -4,7 +4,7 @@\n use crate::utils::{get_attr, higher};\n use rustc::hir;\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n-use rustc::hir::{BindingAnnotation, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n+use rustc::hir::{BindingAnnotation, Block, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::session::Session;\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -511,6 +511,17 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n         }\n     }\n \n+    fn visit_block(&mut self, block: &Block) {\n+        let trailing_pat = self.next(\"trailing_expr\");\n+        println!(\"    if let Some({}) = &{}.expr;\", trailing_pat, self.current);\n+        println!(\"    if {}.stmts.len() == {};\", self.current, block.stmts.len());\n+        let current = self.current.clone();\n+        for (i, stmt) in block.stmts.iter().enumerate() {\n+            self.current = format!(\"{}.stmts[{}]\", current, i);\n+            self.visit_stmt(stmt);\n+        }\n+    }\n+\n     #[allow(clippy::too_many_lines)]\n     fn visit_pat(&mut self, pat: &Pat) {\n         print!(\"    if let PatKind::\");"}, {"sha": "c7d173388a5fe849516e1a92f2321d010152838b", "filename": "tests/ui/author/blocks.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ab3f1762e4ca6486857ad12922de6b0aa0ab424/tests%2Fui%2Fauthor%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab3f1762e4ca6486857ad12922de6b0aa0ab424/tests%2Fui%2Fauthor%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.rs?ref=0ab3f1762e4ca6486857ad12922de6b0aa0ab424", "patch": "@@ -0,0 +1,15 @@\n+#![feature(stmt_expr_attributes)]\n+\n+#[rustfmt::skip]\n+fn main() {\n+    #[clippy::author]\n+    {\n+        ;;;;\n+    }\n+}\n+\n+#[clippy::author]\n+fn foo() {\n+    let x = 42i32;\n+    -x;\n+}"}, {"sha": "a54a1422d8b35a1b25ee988ce5acaa6f5e238415", "filename": "tests/ui/author/blocks.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ab3f1762e4ca6486857ad12922de6b0aa0ab424/tests%2Fui%2Fauthor%2Fblocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ab3f1762e4ca6486857ad12922de6b0aa0ab424/tests%2Fui%2Fauthor%2Fblocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.stderr?ref=0ab3f1762e4ca6486857ad12922de6b0aa0ab424", "patch": "@@ -0,0 +1,10 @@\n+error: statement with no effect\n+  --> $DIR/blocks.rs:14:5\n+   |\n+LL |     -x;\n+   |     ^^^\n+   |\n+   = note: `-D clippy::no-effect` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0128b3b02898be74f869a73ce9b4196fdad97709", "filename": "tests/ui/author/blocks.stdout", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0ab3f1762e4ca6486857ad12922de6b0aa0ab424/tests%2Fui%2Fauthor%2Fblocks.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0ab3f1762e4ca6486857ad12922de6b0aa0ab424/tests%2Fui%2Fauthor%2Fblocks.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.stdout?ref=0ab3f1762e4ca6486857ad12922de6b0aa0ab424", "patch": "@@ -0,0 +1,13 @@\n+if_chain! {\n+    if let ExprKind::Block(ref block) = expr.node;\n+    if let Some(trailing_expr) = &block.expr;\n+    if block.stmts.len() == 0;\n+    then {\n+        // report your lint here\n+    }\n+}\n+if_chain! {\n+    then {\n+        // report your lint here\n+    }\n+}"}, {"sha": "7ce04e44b03deb929fd6bd3cfca4be00a9d0e258", "filename": "tests/ui/author/for_loop.stdout", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ab3f1762e4ca6486857ad12922de6b0aa0ab424/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0ab3f1762e4ca6486857ad12922de6b0aa0ab424/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stdout?ref=0ab3f1762e4ca6486857ad12922de6b0aa0ab424", "patch": "@@ -11,10 +11,12 @@ if_chain! {\n     // unimplemented: field checks\n     if arms.len() == 1;\n     if let ExprKind::Loop(ref body, ref label, LoopSource::ForLoop) = arms[0].body.node;\n-    if let StmtKind::Local(ref local) = body.node;\n+    if let Some(trailing_expr) = &body.expr;\n+    if body.stmts.len() == 4;\n+    if let StmtKind::Local(ref local) = body.stmts[0].node;\n     if let PatKind::Binding(BindingAnnotation::Mutable, _, name, None) = local.pat.node;\n     if name.node.as_str() == \"__next\";\n-    if let StmtKind::Expr(ref e, _) = local.pat.node\n+    if let StmtKind::Expr(ref e, _) = body.stmts[1].node\n     if let ExprKind::Match(ref expr2, ref arms1, MatchSource::ForLoopDesugar) = e.node;\n     if let ExprKind::Call(ref func1, ref args1) = expr2.node;\n     if let ExprKind::Path(ref path2) = func1.node;\n@@ -38,15 +40,17 @@ if_chain! {\n     if arms1[1].pats.len() == 1;\n     if let PatKind::Path(ref path7) = arms1[1].pats[0].node;\n     if match_qpath(path7, &[\"{{root}}\", \"std\", \"option\", \"Option\", \"None\"]);\n-    if let StmtKind::Local(ref local1) = path7.node;\n+    if let StmtKind::Local(ref local1) = body.stmts[2].node;\n     if let Some(ref init) = local1.init;\n     if let ExprKind::Path(ref path8) = init.node;\n     if match_qpath(path8, &[\"__next\"]);\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local1.pat.node;\n     if name1.node.as_str() == \"y\";\n-    if let StmtKind::Expr(ref e1, _) = local1.pat.node\n+    if let StmtKind::Expr(ref e1, _) = body.stmts[3].node\n     if let ExprKind::Block(ref block) = e1.node;\n-    if let StmtKind::Local(ref local2) = block.node;\n+    if let Some(trailing_expr1) = &block.expr;\n+    if block.stmts.len() == 1;\n+    if let StmtKind::Local(ref local2) = block.stmts[0].node;\n     if let Some(ref init1) = local2.init;\n     if let ExprKind::Path(ref path9) = init1.node;\n     if match_qpath(path9, &[\"y\"]);"}, {"sha": "be8260007b2171036bb80a0489a3cff26227f325", "filename": "tests/ui/author/if.stdout", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ab3f1762e4ca6486857ad12922de6b0aa0ab424/tests%2Fui%2Fauthor%2Fif.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0ab3f1762e4ca6486857ad12922de6b0aa0ab424/tests%2Fui%2Fauthor%2Fif.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.stdout?ref=0ab3f1762e4ca6486857ad12922de6b0aa0ab424", "patch": "@@ -3,7 +3,9 @@ if_chain! {\n     if let Some(ref init) = local.init;\n     if let Some((ref cond, ref then, Some(else_))) = higher::if_block(&init);\n     if let ExprKind::Block(ref block) = else_.node;\n-    if let StmtKind::Semi(ref e, _) = block.node\n+    if let Some(trailing_expr) = &block.expr;\n+    if block.stmts.len() == 1;\n+    if let StmtKind::Semi(ref e, _) = block.stmts[0].node\n     if let ExprKind::Binary(ref op, ref left, ref right) = e.node;\n     if BinOpKind::Eq == op.node;\n     if let ExprKind::Lit(ref lit) = left.node;\n@@ -13,7 +15,9 @@ if_chain! {\n     if let ExprKind::Lit(ref lit2) = cond.node;\n     if let LitKind::Bool(true) = lit2.node;\n     if let ExprKind::Block(ref block1) = then.node;\n-    if let StmtKind::Semi(ref e1, _) = block1.node\n+    if let Some(trailing_expr1) = &block1.expr;\n+    if block1.stmts.len() == 1;\n+    if let StmtKind::Semi(ref e1, _) = block1.stmts[0].node\n     if let ExprKind::Binary(ref op1, ref left1, ref right1) = e1.node;\n     if BinOpKind::Eq == op1.node;\n     if let ExprKind::Lit(ref lit3) = left1.node;"}]}