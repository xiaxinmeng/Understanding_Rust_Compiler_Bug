{"sha": "5421d94960018235654c7fb39aa1c502a3564621", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MjFkOTQ5NjAwMTgyMzU2NTRjN2ZiMzlhYTFjNTAyYTM1NjQ2MjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-07T04:28:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-07T04:28:08Z"}, "message": "Auto merge of #63152 - estebank:big-array, r=oli-obk\n\nAlways error on `SizeOverflow` during mir evaluation\n\nFix #55878, fix #25116.\n\nr? @oli-obk", "tree": {"sha": "94e448a45847ae2399b08318100992d50fd654fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94e448a45847ae2399b08318100992d50fd654fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5421d94960018235654c7fb39aa1c502a3564621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5421d94960018235654c7fb39aa1c502a3564621", "html_url": "https://github.com/rust-lang/rust/commit/5421d94960018235654c7fb39aa1c502a3564621", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5421d94960018235654c7fb39aa1c502a3564621/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "615c46086a994f088c9ed569fc36df229ae115b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/615c46086a994f088c9ed569fc36df229ae115b6", "html_url": "https://github.com/rust-lang/rust/commit/615c46086a994f088c9ed569fc36df229ae115b6"}, {"sha": "3144b0aa04e9a1857cfb50ba556f4634c56a81e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3144b0aa04e9a1857cfb50ba556f4634c56a81e7", "html_url": "https://github.com/rust-lang/rust/commit/3144b0aa04e9a1857cfb50ba556f4634c56a81e7"}], "stats": {"total": 246, "additions": 172, "deletions": 74}, "files": [{"sha": "f53d2ffb6df548cc8c6ddf373585dd46e7a4ace3", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -137,17 +137,17 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         message: &str,\n         lint_root: Option<hir::HirId>,\n     ) -> Result<DiagnosticBuilder<'tcx>, ErrorHandled> {\n-        match self.error {\n+        let must_error = match self.error {\n             err_inval!(Layout(LayoutError::Unknown(_))) |\n             err_inval!(TooGeneric) =>\n                 return Err(ErrorHandled::TooGeneric),\n-            err_inval!(Layout(LayoutError::SizeOverflow(_))) |\n             err_inval!(TypeckError) =>\n                 return Err(ErrorHandled::Reported),\n-            _ => {},\n-        }\n+            err_inval!(Layout(LayoutError::SizeOverflow(_))) => true,\n+            _ => false,\n+        };\n         trace!(\"reporting const eval failure at {:?}\", self.span);\n-        let mut err = if let Some(lint_root) = lint_root {\n+        let mut err = if let (Some(lint_root), false) = (lint_root, must_error) {\n             let hir_id = self.stacktrace\n                 .iter()\n                 .rev()\n@@ -160,10 +160,14 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 tcx.span,\n                 message,\n             )\n+        } else if must_error {\n+            struct_error(tcx, &self.error.to_string())\n         } else {\n             struct_error(tcx, message)\n         };\n-        err.span_label(self.span, self.error.to_string());\n+        if !must_error {\n+            err.span_label(self.span, self.error.to_string());\n+        }\n         // Skip the last, which is just the environment of the constant.  The stacktrace\n         // is sometimes empty because we create \"fake\" eval contexts in CTFE to do work\n         // on constant values.\n@@ -335,7 +339,7 @@ impl fmt::Debug for InvalidProgramInfo<'tcx> {\n             TypeckError =>\n                 write!(f, \"encountered constants with type errors, stopping evaluation\"),\n             Layout(ref err) =>\n-                write!(f, \"rustc layout computation failed: {:?}\", err),\n+                write!(f, \"{}\", err),\n         }\n     }\n }"}, {"sha": "a2aaaddf0931c2e4135a76d675a43a3b7ee97c30", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -30,6 +30,7 @@ use std::iter;\n use std::str;\n use std::sync::Arc;\n use syntax::symbol::LocalInternedString;\n+use syntax::source_map::{DUMMY_SP, Span};\n use crate::abi::Abi;\n \n /// There is one `CodegenCx` per compilation unit. Each one has its own LLVM\n@@ -860,9 +861,13 @@ impl LayoutOf for CodegenCx<'ll, 'tcx> {\n     type TyLayout = TyLayout<'tcx>;\n \n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n+        self.spanned_layout_of(ty, DUMMY_SP)\n+    }\n+\n+    fn spanned_layout_of(&self, ty: Ty<'tcx>, span: Span) -> Self::TyLayout {\n         self.tcx.layout_of(ty::ParamEnv::reveal_all().and(ty))\n             .unwrap_or_else(|e| if let LayoutError::SizeOverflow(_) = e {\n-                self.sess().fatal(&e.to_string())\n+                self.sess().span_fatal(span, &e.to_string())\n             } else {\n                 bug!(\"failed to get layout for `{}`: {}\", ty, e)\n             })"}, {"sha": "cc0c733c224103e077e92c5250a8129a1dd7b4ab", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -9,6 +9,7 @@ use rustc::mir::visit::{Visitor, PlaceContext, MutatingUseContext, NonMutatingUs\n use rustc::mir::traversal;\n use rustc::ty;\n use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n+use syntax_pos::DUMMY_SP;\n use super::FunctionCx;\n use crate::traits::*;\n \n@@ -20,10 +21,13 @@ pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     analyzer.visit_body(mir);\n \n-    for (index, ty) in mir.local_decls.iter().map(|l| l.ty).enumerate() {\n+    for (index, (ty, span)) in mir.local_decls.iter()\n+        .map(|l| (l.ty, l.source_info.span))\n+        .enumerate()\n+    {\n         let ty = fx.monomorphize(&ty);\n         debug!(\"local {} has type {:?}\", index, ty);\n-        let layout = fx.cx.layout_of(ty);\n+        let layout = fx.cx.spanned_layout_of(ty, span);\n         if fx.cx.is_backend_immediate(layout) {\n             // These sorts of types are immediates that we can store\n             // in an Value without an alloca.\n@@ -93,10 +97,12 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n         }\n     }\n \n-    fn process_place(&mut self,\n-                     place_ref: &mir::PlaceRef<'_, 'tcx>,\n-                     context: PlaceContext,\n-                     location: Location) {\n+    fn process_place(\n+        &mut self,\n+        place_ref: &mir::PlaceRef<'_, 'tcx>,\n+        context: PlaceContext,\n+        location: Location,\n+    ) {\n         let cx = self.fx.cx;\n \n         if let Some(proj) = place_ref.projection {\n@@ -116,12 +122,17 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n                     .projection_ty(cx.tcx(), &proj.elem)\n                     .ty;\n                 let elem_ty = self.fx.monomorphize(&elem_ty);\n-                if cx.layout_of(elem_ty).is_zst() {\n+                let span = if let mir::PlaceBase::Local(index) = place_ref.base {\n+                    self.fx.mir.local_decls[*index].source_info.span\n+                } else {\n+                    DUMMY_SP\n+                };\n+                if cx.spanned_layout_of(elem_ty, span).is_zst() {\n                     return;\n                 }\n \n                 if let mir::ProjectionElem::Field(..) = proj.elem {\n-                    let layout = cx.layout_of(base_ty.ty);\n+                    let layout = cx.spanned_layout_of(base_ty.ty, span);\n                     if cx.is_backend_immediate(layout) || cx.is_backend_scalar_pair(layout) {\n                         // Recurse with the same context, instead of `Projection`,\n                         // potentially stopping at non-operand projections,\n@@ -188,7 +199,8 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n             projection: None,\n         } = *place {\n             self.assign(index, location);\n-            if !self.fx.rvalue_creates_operand(rvalue) {\n+            let decl_span = self.fx.mir.local_decls[index].source_info.span;\n+            if !self.fx.rvalue_creates_operand(rvalue, decl_span) {\n                 self.not_ssa(index);\n             }\n         } else {"}, {"sha": "9da1e5024ba3addc90513f8998c46187303f1d10", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -6,6 +6,7 @@ use rustc::middle::lang_items::ExchangeMallocFnLangItem;\n use rustc_apfloat::{ieee, Float, Status, Round};\n use std::{u128, i128};\n use syntax::symbol::sym;\n+use syntax::source_map::{DUMMY_SP, Span};\n \n use crate::base;\n use crate::MemFlags;\n@@ -136,7 +137,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             _ => {\n-                assert!(self.rvalue_creates_operand(rvalue));\n+                assert!(self.rvalue_creates_operand(rvalue, DUMMY_SP));\n                 let (mut bx, temp) = self.codegen_rvalue_operand(bx, rvalue);\n                 temp.val.store(&mut bx, dest);\n                 bx\n@@ -169,7 +170,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         mut bx: Bx,\n         rvalue: &mir::Rvalue<'tcx>\n     ) -> (Bx, OperandRef<'tcx, Bx::Value>) {\n-        assert!(self.rvalue_creates_operand(rvalue), \"cannot codegen {:?} to operand\", rvalue);\n+        assert!(\n+            self.rvalue_creates_operand(rvalue, DUMMY_SP),\n+            \"cannot codegen {:?} to operand\",\n+            rvalue,\n+        );\n \n         match *rvalue {\n             mir::Rvalue::Cast(ref kind, ref source, mir_cast_ty) => {\n@@ -691,7 +696,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n }\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n-    pub fn rvalue_creates_operand(&self, rvalue: &mir::Rvalue<'tcx>) -> bool {\n+    pub fn rvalue_creates_operand(&self, rvalue: &mir::Rvalue<'tcx>, span: Span) -> bool {\n         match *rvalue {\n             mir::Rvalue::Ref(..) |\n             mir::Rvalue::Len(..) |\n@@ -707,7 +712,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::Rvalue::Aggregate(..) => {\n                 let ty = rvalue.ty(self.mir, self.cx.tcx());\n                 let ty = self.monomorphize(&ty);\n-                self.cx.layout_of(ty).is_zst()\n+                self.cx.spanned_layout_of(ty, span).is_zst()\n             }\n         }\n "}, {"sha": "1f23d8c017ccd0d570262de6eb2e5fca27494012", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -506,7 +506,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn push_stack_frame(\n         &mut self,\n         instance: ty::Instance<'tcx>,\n-        span: source_map::Span,\n+        span: Span,\n         body: &'mir mir::Body<'tcx>,\n         return_place: Option<PlaceTy<'tcx, M::PointerTag>>,\n         return_to_block: StackPopCleanup,"}, {"sha": "dd7ae742a63c622ed11307520a8e2e94c9a1c489", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -9,6 +9,7 @@ use std::ops::{Add, Deref, Sub, Mul, AddAssign, Range, RangeInclusive};\n use rustc_data_structures::newtype_index;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use syntax_pos::symbol::{sym, Symbol};\n+use syntax_pos::Span;\n \n pub mod call;\n \n@@ -1012,6 +1013,9 @@ pub trait LayoutOf {\n     type TyLayout;\n \n     fn layout_of(&self, ty: Self::Ty) -> Self::TyLayout;\n+    fn spanned_layout_of(&self, ty: Self::Ty, _span: Span) -> Self::TyLayout {\n+        self.layout_of(ty)\n+    }\n }\n \n #[derive(Copy, Clone, PartialEq, Eq)]"}, {"sha": "fc10824f0c03cf3e85384b3a09d61e8667592d9b", "filename": "src/test/compile-fail/consts/const-err3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "previous_filename": "src/test/compile-fail/const-err3.rs"}, {"sha": "1de23f2a5e94f29067fdec0b74243f195f27b6a3", "filename": "src/test/compile-fail/consts/const-fn-error.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "previous_filename": "src/test/compile-fail/const-fn-error.rs"}, {"sha": "aa1dd58d2463d3237fd170666a63c55aad2849a7", "filename": "src/test/compile-fail/consts/issue-55878.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fcompile-fail%2Fconsts%2Fissue-55878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fcompile-fail%2Fconsts%2Fissue-55878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fissue-55878.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -0,0 +1,7 @@\n+// normalize-stderr-64bit \"18446744073709551615\" -> \"SIZE\"\n+// normalize-stderr-32bit \"4294967295\" -> \"SIZE\"\n+\n+// error-pattern: is too big for the current architecture\n+fn main() {\n+    println!(\"Size: {}\", std::mem::size_of::<[u8; std::u64::MAX as usize]>());\n+}"}, {"sha": "9f98f4d753190c197cf09dd05a5e3da73f19316f", "filename": "src/test/ui/huge-array-simple-32.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-array-simple-32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-array-simple-32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array-simple-32.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -0,0 +1,11 @@\n+// ignore-64bit\n+\n+// FIXME https://github.com/rust-lang/rust/issues/59774\n+// normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+#![allow(exceeding_bitshifts)]\n+\n+fn main() {\n+    let _fat: [u8; (1<<31)+(1<<15)] = //~ ERROR too big for the current architecture\n+        [0; (1u32<<31) as usize +(1u32<<15) as usize];\n+}"}, {"sha": "16372b02750ae6c7fddbaad44d9f8c2a37c3046e", "filename": "src/test/ui/huge-array-simple-32.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-array-simple-32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-array-simple-32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array-simple-32.stderr?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -0,0 +1,8 @@\n+error: the type `[u8; 2147516416]` is too big for the current architecture\n+  --> $DIR/huge-array-simple-32.rs:9:9\n+   |\n+LL |     let _fat: [u8; (1<<31)+(1<<15)] =\n+   |         ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f72d69ee747b84b95f7caba65eaae57f2fb48f47", "filename": "src/test/ui/huge-array-simple-64.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-array-simple-64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-array-simple-64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array-simple-64.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -0,0 +1,11 @@\n+// ignore-32bit\n+\n+// FIXME https://github.com/rust-lang/rust/issues/59774\n+// normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+#![allow(exceeding_bitshifts)]\n+\n+fn main() {\n+    let _fat: [u8; (1<<61)+(1<<31)] = //~ ERROR too big for the current architecture\n+        [0; (1u64<<61) as usize +(1u64<<31) as usize];\n+}"}, {"sha": "6ed89269f0fb8e346bbd6c7aab63fb8ed182668b", "filename": "src/test/ui/huge-array-simple-64.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-array-simple-64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-array-simple-64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array-simple-64.stderr?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -0,0 +1,8 @@\n+error: the type `[u8; 2305843011361177600]` is too big for the current architecture\n+  --> $DIR/huge-array-simple-64.rs:9:9\n+   |\n+LL |     let _fat: [u8; (1<<61)+(1<<31)] =\n+   |         ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0ff27168a7d8634ac737ad8cbe1658f728f4cd51", "filename": "src/test/ui/huge-array-simple.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fhuge-array-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fhuge-array-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array-simple.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -1,20 +0,0 @@\n-// error-pattern: too big for the current architecture\n-\n-// normalize-stderr-test \"; \\d+]\" -> \"; N]\"\n-\n-// FIXME https://github.com/rust-lang/rust/issues/59774\n-// normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n-// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n-#![allow(exceeding_bitshifts)]\n-\n-#[cfg(target_pointer_width = \"64\")]\n-fn main() {\n-    let _fat : [u8; (1<<61)+(1<<31)] =\n-        [0; (1u64<<61) as usize +(1u64<<31) as usize];\n-}\n-\n-#[cfg(target_pointer_width = \"32\")]\n-fn main() {\n-    let _fat : [u8; (1<<31)+(1<<15)] =\n-        [0; (1u32<<31) as usize +(1u32<<15) as usize];\n-}"}, {"sha": "3e9c86296cec2ecdd74b1f022001b76d73dfd927", "filename": "src/test/ui/huge-array-simple.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fhuge-array-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fhuge-array-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array-simple.stderr?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -1,4 +0,0 @@\n-error: the type `[u8; N]` is too big for the current architecture\n-\n-error: aborting due to previous error\n-"}, {"sha": "1ecf012e04be4cb1a1695b6e9b5b953cc0e2a66a", "filename": "src/test/ui/huge-array.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -1,11 +1,10 @@\n-// error-pattern:; 1518600000\n-\n // FIXME https://github.com/rust-lang/rust/issues/59774\n // normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n \n fn generic<T: Copy>(t: T) {\n     let s: [T; 1518600000] = [t; 1518600000];\n+    //~^ ERROR the type `[[u8; 1518599999]; 1518600000]` is too big for the current architecture\n }\n \n fn main() {"}, {"sha": "823d974f4290ee4e8912900ca4fee36a37a79a64", "filename": "src/test/ui/huge-array.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array.stderr?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -1,4 +1,8 @@\n error: the type `[[u8; 1518599999]; 1518600000]` is too big for the current architecture\n+  --> $DIR/huge-array.rs:6:9\n+   |\n+LL |     let s: [T; 1518600000] = [t; 1518600000];\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "98d0ba6e15c096422e2796769804a3b97775e3ec", "filename": "src/test/ui/huge-enum.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-enum.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -6,11 +6,12 @@\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n \n #[cfg(target_pointer_width = \"32\")]\n-fn main() {\n-    let big: Option<[u32; (1<<29)-1]> = None;\n-}\n+type BIG = Option<[u32; (1<<29)-1]>;\n \n #[cfg(target_pointer_width = \"64\")]\n+type BIG = Option<[u32; (1<<45)-1]>;\n+\n fn main() {\n-    let big: Option<[u32; (1<<45)-1]> = None;\n+    let big: BIG = None;\n+    //~^ ERROR is too big for the current architecture\n }"}, {"sha": "1f16c81a8f45ecac7a58611d36fdd22ba2f694fa", "filename": "src/test/ui/huge-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-enum.stderr?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -1,4 +1,8 @@\n error: the type `TYPE` is too big for the current architecture\n+  --> $DIR/huge-enum.rs:15:9\n+   |\n+LL |     let big: BIG = None;\n+   |         ^^^\n \n error: aborting due to previous error\n "}, {"sha": "e120cae7fdd148a822c2b6855de49206d6bb716f", "filename": "src/test/ui/huge-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-struct.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -47,4 +47,6 @@ struct S1M<T> { val: S1k<S1k<T>> }\n \n fn main() {\n     let fat: Option<S1M<S1M<S1M<u32>>>> = None;\n+    //~^ ERROR the type `S32<S1M<S1M<u32>>>` is too big for the current architecture\n+\n }"}, {"sha": "5c2140df481262a1ca1e7637d5b9992b825c7619", "filename": "src/test/ui/huge-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fhuge-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-struct.stderr?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -1,4 +1,8 @@\n error: the type `SXX<SXX<SXX<u32>>>` is too big for the current architecture\n+  --> $DIR/huge-struct.rs:49:9\n+   |\n+LL |     let fat: Option<SXX<SXX<SXX<u32>>>> = None;\n+   |         ^^^\n \n error: aborting due to previous error\n "}, {"sha": "65d33a61348a596590de9810f7a02202d487f81d", "filename": "src/test/ui/issues/issue-15919-32.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fissues%2Fissue-15919-32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fissues%2Fissue-15919-32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15919-32.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -0,0 +1,12 @@\n+// ignore-64bit\n+\n+// FIXME https://github.com/rust-lang/rust/issues/59774\n+// normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+\n+fn main() {\n+    let x = [0usize; 0xffff_ffff]; //~ ERROR too big\n+}\n+\n+// This and the -64 version of this test need to have different literals, as we can't rely on\n+// conditional compilation for them while retaining the same spans/lines."}, {"sha": "7f5d9262d39a75f34c33cce0313aa5a6ae995c86", "filename": "src/test/ui/issues/issue-15919-32.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fissues%2Fissue-15919-32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fissues%2Fissue-15919-32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15919-32.stderr?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -0,0 +1,8 @@\n+error: the type `[usize; 4294967295]` is too big for the current architecture\n+  --> $DIR/issue-15919-32.rs:8:9\n+   |\n+LL |     let x = [0usize; 0xffff_ffff];\n+   |         ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "abd20cc1cee418c5b0cf9961d601e0a29103245a", "filename": "src/test/ui/issues/issue-15919-64.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fissues%2Fissue-15919-64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fissues%2Fissue-15919-64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15919-64.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -0,0 +1,12 @@\n+// ignore-32bit\n+\n+// FIXME https://github.com/rust-lang/rust/issues/59774\n+// normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+\n+fn main() {\n+    let x = [0usize; 0xffff_ffff_ffff_ffff]; //~ ERROR too big\n+}\n+\n+// This and the -32 version of this test need to have different literals, as we can't rely on\n+// conditional compilation for them while retaining the same spans/lines."}, {"sha": "571b87d9961c0ed1da25e17a5a656943aef0f369", "filename": "src/test/ui/issues/issue-15919-64.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fissues%2Fissue-15919-64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fissues%2Fissue-15919-64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15919-64.stderr?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -0,0 +1,8 @@\n+error: the type `[usize; 18446744073709551615]` is too big for the current architecture\n+  --> $DIR/issue-15919-64.rs:8:9\n+   |\n+LL |     let x = [0usize; 0xffff_ffff_ffff_ffff];\n+   |         ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a7ac4802a12d5b78cce7b1596f6b7d0bafa419a5", "filename": "src/test/ui/issues/issue-15919.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fissues%2Fissue-15919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fissues%2Fissue-15919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15919.rs?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -1,16 +0,0 @@\n-// error-pattern: too big for the current architecture\n-// normalize-stderr-test \"\\[usize; \\d+\\]\" -> \"[usize; N]\"\n-\n-// FIXME https://github.com/rust-lang/rust/issues/59774\n-// normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n-// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n-\n-#[cfg(target_pointer_width = \"32\")]\n-fn main() {\n-    let x = [0usize; 0xffff_ffff];\n-}\n-\n-#[cfg(target_pointer_width = \"64\")]\n-fn main() {\n-    let x = [0usize; 0xffff_ffff_ffff_ffff];\n-}"}, {"sha": "e4e88cc47cfe7d11d13ba3ed8e56425729bf41c0", "filename": "src/test/ui/issues/issue-15919.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fissues%2Fissue-15919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/615c46086a994f088c9ed569fc36df229ae115b6/src%2Ftest%2Fui%2Fissues%2Fissue-15919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15919.stderr?ref=615c46086a994f088c9ed569fc36df229ae115b6", "patch": "@@ -1,4 +0,0 @@\n-error: the type `[usize; N]` is too big for the current architecture\n-\n-error: aborting due to previous error\n-"}, {"sha": "5ba5b9847d0852ee229be67e1937bb5f0102615c", "filename": "src/test/ui/issues/issue-56762.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fissues%2Fissue-56762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fissues%2Fissue-56762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56762.rs?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -17,6 +17,8 @@ impl TooBigArray {\n }\n \n static MY_TOO_BIG_ARRAY_1: TooBigArray = TooBigArray::new();\n+//~^ ERROR the type `[u8; 2305843009213693951]` is too big for the current architecture\n static MY_TOO_BIG_ARRAY_2: [u8; HUGE_SIZE] = [0x00; HUGE_SIZE];\n+//~^ ERROR the type `[u8; 2305843009213693951]` is too big for the current architecture\n \n fn main() { }"}, {"sha": "69626d4bc7a9e73b0090597f1f1c9ee25d51daea", "filename": "src/test/ui/issues/issue-56762.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fissues%2Fissue-56762.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5421d94960018235654c7fb39aa1c502a3564621/src%2Ftest%2Fui%2Fissues%2Fissue-56762.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56762.stderr?ref=5421d94960018235654c7fb39aa1c502a3564621", "patch": "@@ -1,4 +1,15 @@\n-error: the type `[u8; 2305843009213693951]` is too big for the current architecture\n+error[E0080]: the type `[u8; 2305843009213693951]` is too big for the current architecture\n+  --> $DIR/issue-56762.rs:19:1\n+   |\n+LL | static MY_TOO_BIG_ARRAY_1: TooBigArray = TooBigArray::new();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0080]: the type `[u8; 2305843009213693951]` is too big for the current architecture\n+  --> $DIR/issue-56762.rs:21:1\n+   |\n+LL | static MY_TOO_BIG_ARRAY_2: [u8; HUGE_SIZE] = [0x00; HUGE_SIZE];\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}]}