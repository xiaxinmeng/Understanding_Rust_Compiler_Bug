{"sha": "781866f3a95da0e4a35151cc24523f186ce19c79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MTg2NmYzYTk1ZGEwZTRhMzUxNTFjYzI0NTIzZjE4NmNlMTljNzk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-09T22:28:07Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-19T19:47:31Z"}, "message": "More HashStable.", "tree": {"sha": "744a3080d6ad4564ff4ce3c4ab1b3a2ab190dab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/744a3080d6ad4564ff4ce3c4ab1b3a2ab190dab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/781866f3a95da0e4a35151cc24523f186ce19c79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/781866f3a95da0e4a35151cc24523f186ce19c79", "html_url": "https://github.com/rust-lang/rust/commit/781866f3a95da0e4a35151cc24523f186ce19c79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/781866f3a95da0e4a35151cc24523f186ce19c79/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4bc3f05f54915a962620bfcb8dff7aff0d849f5", "html_url": "https://github.com/rust-lang/rust/commit/c4bc3f05f54915a962620bfcb8dff7aff0d849f5"}], "stats": {"total": 109, "additions": 15, "deletions": 94}, "files": [{"sha": "17ab0c187a2fc1c4a14c88c60dd6a4f63f55fa61", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=781866f3a95da0e4a35151cc24523f186ce19c79", "patch": "@@ -578,7 +578,7 @@ impl<'tcx> DepNodeParams<'tcx> for HirId {\n /// the need to be mapped or unmapped. (This ensures we can serialize\n /// them even in the absence of a tcx.)\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         RustcEncodable, RustcDecodable)]\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub struct WorkProductId {\n     hash: Fingerprint\n }\n@@ -599,7 +599,3 @@ impl WorkProductId {\n         }\n     }\n }\n-\n-impl_stable_hash_for!(struct crate::dep_graph::WorkProductId {\n-    hash\n-});"}, {"sha": "34daf185b29527e182d47ee790835f1ead8ec6e3", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=781866f3a95da0e4a35151cc24523f186ce19c79", "patch": "@@ -251,7 +251,7 @@ pub struct CodegenUnit<'tcx> {\n     size_estimate: Option<usize>,\n }\n \n-#[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub enum Linkage {\n     External,\n     AvailableExternally,\n@@ -266,33 +266,13 @@ pub enum Linkage {\n     Common,\n }\n \n-impl_stable_hash_for!(enum self::Linkage {\n-    External,\n-    AvailableExternally,\n-    LinkOnceAny,\n-    LinkOnceODR,\n-    WeakAny,\n-    WeakODR,\n-    Appending,\n-    Internal,\n-    Private,\n-    ExternalWeak,\n-    Common\n-});\n-\n-#[derive(Copy, Clone, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug, HashStable)]\n pub enum Visibility {\n     Default,\n     Hidden,\n     Protected,\n }\n \n-impl_stable_hash_for!(enum self::Visibility {\n-    Default,\n-    Hidden,\n-    Protected\n-});\n-\n impl<'tcx> CodegenUnit<'tcx> {\n     pub fn new(name: Symbol) -> CodegenUnit<'tcx> {\n         CodegenUnit {"}, {"sha": "66683cab95960409216a1a795d78c018b6d31c9a", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=781866f3a95da0e4a35151cc24523f186ce19c79", "patch": "@@ -40,7 +40,7 @@ pub type CanonicalTypeOpProvePredicateGoal<'tcx> =\n pub type CanonicalTypeOpNormalizeGoal<'tcx, T> =\n     Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::normalize::Normalize<T>>>;\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct NoSolution;\n \n pub type Fallible<T> = Result<T, NoSolution>;\n@@ -50,5 +50,3 @@ impl<'tcx> From<TypeError<'tcx>> for NoSolution {\n         NoSolution\n     }\n }\n-\n-impl_stable_hash_for!(struct NoSolution { });"}, {"sha": "ee8b73f86a61a033520a68361326684dc1123675", "filename": "src/librustc/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=781866f3a95da0e4a35151cc24523f186ce19c79", "patch": "@@ -4,7 +4,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n use crate::ty::subst::UserSubsts;\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n pub struct AscribeUserType<'tcx> {\n     pub mir_ty: Ty<'tcx>,\n     pub def_id: DefId,\n@@ -38,9 +38,3 @@ impl<'tcx> super::QueryTypeOp<'tcx> for AscribeUserType<'tcx> {\n         tcx.type_op_ascribe_user_type(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    struct AscribeUserType<'tcx> {\n-        mir_ty, def_id, user_substs\n-    }\n-}"}, {"sha": "8ea800cced2134a351b7b541032305748b4830ae", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=781866f3a95da0e4a35151cc24523f186ce19c79", "patch": "@@ -2,7 +2,7 @@ use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n pub struct Eq<'tcx> {\n     pub a: Ty<'tcx>,\n     pub b: Ty<'tcx>,\n@@ -35,7 +35,3 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Eq<'tcx> {\n         tcx.type_op_eq(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    struct Eq<'tcx> { a, b }\n-}"}, {"sha": "6f45d76a8e9d7d9b4ffd23a06848aa7195de5613", "filename": "src/librustc/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=781866f3a95da0e4a35151cc24523f186ce19c79", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::outlives_bounds::OutlivesBound;\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Clone, Debug, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, HashStable, TypeFoldable, Lift)]\n pub struct ImpliedOutlivesBounds<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n@@ -39,7 +39,3 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ImpliedOutlivesBounds<'tcx> {\n         tcx.implied_outlives_bounds(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    struct ImpliedOutlivesBounds<'tcx> { ty }\n-}"}, {"sha": "f905d5a019ec8c3d30a2a608a91ecc5669fe7a4a", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=781866f3a95da0e4a35151cc24523f186ce19c79", "patch": "@@ -4,7 +4,7 @@ use crate::traits::query::Fallible;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n pub struct Normalize<T> {\n     pub value: T,\n }\n@@ -82,9 +82,3 @@ impl Normalizable<'tcx> for ty::FnSig<'tcx> {\n         tcx.type_op_normalize_fn_sig(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    impl<T> for struct Normalize<T> {\n-        value\n-    }\n-}"}, {"sha": "83d51b6d3ebf78500cd227dd13080ebe078d2455", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=781866f3a95da0e4a35151cc24523f186ce19c79", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::dropck_outlives::{DropckOutlivesResult, trivial_dropck\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, HashStable, TypeFoldable, Lift)]\n pub struct DropckOutlives<'tcx> {\n     dropped_ty: Ty<'tcx>,\n }\n@@ -53,7 +53,3 @@ impl super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n         tcx.dropck_outlives(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    struct DropckOutlives<'tcx> { dropped_ty }\n-}"}, {"sha": "c0a0cbe9a3876029ae201bd03874ed69639de6d8", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=781866f3a95da0e4a35151cc24523f186ce19c79", "patch": "@@ -2,7 +2,7 @@ use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Predicate, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n pub struct ProvePredicate<'tcx> {\n     pub predicate: Predicate<'tcx>,\n }\n@@ -44,7 +44,3 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n         tcx.type_op_prove_predicate(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    struct ProvePredicate<'tcx> { predicate }\n-}"}, {"sha": "76292f9dea085cc29425c9e2a7da6c07c52e2b09", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=781866f3a95da0e4a35151cc24523f186ce19c79", "patch": "@@ -2,7 +2,7 @@ use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n pub struct Subtype<'tcx> {\n     pub sub: Ty<'tcx>,\n     pub sup: Ty<'tcx>,\n@@ -35,7 +35,3 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Subtype<'tcx> {\n         tcx.type_op_subtype(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    struct Subtype<'tcx> { sub, sup }\n-}"}, {"sha": "ffc94cf2b125eb870905c98e4f9bdb64b79dfa3c", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=781866f3a95da0e4a35151cc24523f186ce19c79", "patch": "@@ -367,7 +367,6 @@ enum BuiltinImplConditions<'tcx> {\n     Ambiguous,\n }\n \n-#[derive(Copy, Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]\n /// The result of trait evaluation. The order is important\n /// here as the evaluation of a list is the maximum of the\n /// evaluations.\n@@ -380,6 +379,7 @@ enum BuiltinImplConditions<'tcx> {\n ///     all the \"potential success\" candidates can potentially succeed,\n ///     so they are noops when unioned with a definite error, and within\n ///     the categories it's easy to see that the unions are correct.\n+#[derive(Copy, Clone, Debug, PartialOrd, Ord, PartialEq, Eq, HashStable)]\n pub enum EvaluationResult {\n     /// Evaluation successful\n     EvaluatedToOk,\n@@ -478,21 +478,10 @@ impl EvaluationResult {\n     }\n }\n \n-impl_stable_hash_for!(enum self::EvaluationResult {\n-    EvaluatedToOk,\n-    EvaluatedToOkModuloRegions,\n-    EvaluatedToAmbig,\n-    EvaluatedToUnknown,\n-    EvaluatedToRecur,\n-    EvaluatedToErr\n-});\n-\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n /// Indicates that trait evaluation caused overflow.\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable)]\n pub struct OverflowError;\n \n-impl_stable_hash_for!(struct OverflowError {});\n-\n impl<'tcx> From<OverflowError> for SelectionError<'tcx> {\n     fn from(OverflowError: OverflowError) -> SelectionError<'tcx> {\n         SelectionError::Overflow"}, {"sha": "d945c756f6662d1045b8f333528c597273513a5c", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=781866f3a95da0e4a35151cc24523f186ce19c79", "patch": "@@ -24,7 +24,7 @@ use crate::util::nodemap::{DefIdMap, FxHashMap};\n ///   parents of a given specializing impl, which is needed for extracting\n ///   default items amongst other things. In the simple \"chain\" rule, every impl\n ///   has at most one parent.\n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(RustcEncodable, RustcDecodable, HashStable)]\n pub struct Graph {\n     // All impls have a parent; the \"root\" impls have as their parent the `def_id`\n     // of the trait.\n@@ -535,8 +535,3 @@ impl<'a> HashStable<StableHashingContext<'a>> for Children {\n         ich::hash_stable_trait_impls(hcx, hasher, blanket_impls, nonblanket_impls);\n     }\n }\n-\n-impl_stable_hash_for!(struct self::Graph {\n-    parent,\n-    children\n-});"}, {"sha": "491e09dff09506561cbbf5d09e447aa3565bf018", "filename": "src/librustc/ty/binding.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Fty%2Fbinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781866f3a95da0e4a35151cc24523f186ce19c79/src%2Flibrustc%2Fty%2Fbinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fbinding.rs?ref=781866f3a95da0e4a35151cc24523f186ce19c79", "patch": "@@ -2,7 +2,7 @@ use crate::hir::BindingAnnotation::*;\n use crate::hir::BindingAnnotation;\n use crate::hir::Mutability;\n \n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy, HashStable)]\n pub enum BindingMode {\n     BindByReference(Mutability),\n     BindByValue(Mutability),\n@@ -20,8 +20,3 @@ impl BindingMode {\n         }\n     }\n }\n-\n-impl_stable_hash_for!(enum self::BindingMode {\n-    BindByReference(mutability),\n-    BindByValue(mutability)\n-});"}]}