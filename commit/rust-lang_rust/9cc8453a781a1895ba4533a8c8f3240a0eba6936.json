{"sha": "9cc8453a781a1895ba4533a8c8f3240a0eba6936", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYzg0NTNhNzgxYTE4OTViYTQ1MzNhOGM4ZjMyNDBhMGViYTY5MzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-25T16:45:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-14T09:21:56Z"}, "message": "Adjust feature gates to allow for parenthetical notation to be used\nwith the fn traits", "tree": {"sha": "f7b6078711accc227017d55c769afd6077ef241b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7b6078711accc227017d55c769afd6077ef241b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cc8453a781a1895ba4533a8c8f3240a0eba6936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc8453a781a1895ba4533a8c8f3240a0eba6936", "html_url": "https://github.com/rust-lang/rust/commit/9cc8453a781a1895ba4533a8c8f3240a0eba6936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cc8453a781a1895ba4533a8c8f3240a0eba6936/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "698db04a8d44df3d2805b25b9b461a886b9933cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/698db04a8d44df3d2805b25b9b461a886b9933cd", "html_url": "https://github.com/rust-lang/rust/commit/698db04a8d44df3d2805b25b9b461a886b9933cd"}], "stats": {"total": 106, "additions": 59, "deletions": 47}, "files": [{"sha": "dd5cb8e3b4d242bfa19ed8c776acebdeee785aad", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8453a781a1895ba4533a8c8f3240a0eba6936/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8453a781a1895ba4533a8c8f3240a0eba6936/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=9cc8453a781a1895ba4533a8c8f3240a0eba6936", "patch": "@@ -67,5 +67,6 @@ register_diagnostics!(\n     E0173,\n     E0174,\n     E0177,\n-    E0178\n+    E0178,\n+    E0179 // parenthesized params may only be used with a trait\n )"}, {"sha": "8d5528b3709ad1a7c608fc10810735acefd57aa6", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8453a781a1895ba4533a8c8f3240a0eba6936/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8453a781a1895ba4533a8c8f3240a0eba6936/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=9cc8453a781a1895ba4533a8c8f3240a0eba6936", "patch": "@@ -114,6 +114,22 @@ impl LanguageItems {\n         }\n     }\n \n+    pub fn fn_trait_kind(&self, id: ast::DefId) -> Option<ty::UnboxedClosureKind> {\n+        let def_id_kinds = [\n+            (self.fn_trait(), ty::FnUnboxedClosureKind),\n+            (self.fn_mut_trait(), ty::FnMutUnboxedClosureKind),\n+            (self.fn_once_trait(), ty::FnOnceUnboxedClosureKind),\n+            ];\n+\n+        for &(opt_def_id, kind) in def_id_kinds.iter() {\n+            if Some(id) == opt_def_id {\n+                return Some(kind);\n+            }\n+        }\n+\n+        None\n+    }\n+\n     $(\n         #[allow(dead_code)]\n         pub fn $method(&self) -> Option<ast::DefId> {"}, {"sha": "7ee627dbe14551a5883269fe709885696b65c496", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8453a781a1895ba4533a8c8f3240a0eba6936/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8453a781a1895ba4533a8c8f3240a0eba6936/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9cc8453a781a1895ba4533a8c8f3240a0eba6936", "patch": "@@ -235,7 +235,7 @@ fn ast_path_substs_for_ty<'tcx,AC,RS>(\n             convert_angle_bracketed_parameters(this, rscope, data)\n         }\n         ast::ParenthesizedParameters(ref data) => {\n-            span_err!(tcx.sess, path.span, E0169,\n+            span_err!(tcx.sess, path.span, E0173,\n                       \"parenthesized parameters may only be used with a trait\");\n             (Vec::new(), convert_parenthesized_parameters(this, data), Vec::new())\n         }\n@@ -581,6 +581,19 @@ fn ast_path_to_trait_ref<'tcx,AC,RS>(\n             convert_angle_bracketed_parameters(this, &shifted_rscope, data)\n         }\n         ast::ParenthesizedParameters(ref data) => {\n+            // For now, require that parenthetical notation be used\n+            // only with `Fn()` etc.\n+            if !this.tcx().sess.features.borrow().unboxed_closures &&\n+                this.tcx().lang_items.fn_trait_kind(trait_def_id).is_none()\n+            {\n+                this.tcx().sess.span_err(path.span,\n+                                         \"parenthetical notation is only stable when \\\n+                                         used with the `Fn` family of traits\");\n+                span_help!(this.tcx().sess, path.span,\n+                           \"add `#![feature(unboxed_closures)]` to \\\n+                            the crate attributes to enable\");\n+            }\n+\n             (Vec::new(), convert_parenthesized_parameters(this, data), Vec::new())\n         }\n     };"}, {"sha": "4e027005931a9f089e0bc5d7d86a3c2cd22f5ae7", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8453a781a1895ba4533a8c8f3240a0eba6936/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8453a781a1895ba4533a8c8f3240a0eba6936/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=9cc8453a781a1895ba4533a8c8f3240a0eba6936", "patch": "@@ -188,42 +188,35 @@ fn deduce_unboxed_closure_expectations_from_trait_ref<'a,'tcx>(\n     debug!(\"deduce_unboxed_closure_expectations_from_object_type({})\",\n            trait_ref.repr(tcx));\n \n-    let def_id_kinds = [\n-        (tcx.lang_items.fn_trait(), ty::FnUnboxedClosureKind),\n-        (tcx.lang_items.fn_mut_trait(), ty::FnMutUnboxedClosureKind),\n-        (tcx.lang_items.fn_once_trait(), ty::FnOnceUnboxedClosureKind),\n-    ];\n-\n-    for &(def_id, kind) in def_id_kinds.iter() {\n-        if Some(trait_ref.def_id) == def_id {\n-            debug!(\"found object type {}\", kind);\n-\n-            let arg_param_ty = *trait_ref.substs.types.get(subst::TypeSpace, 0);\n-            let arg_param_ty = fcx.infcx().resolve_type_vars_if_possible(arg_param_ty);\n-            debug!(\"arg_param_ty {}\", arg_param_ty.repr(tcx));\n-\n-            let input_tys = match arg_param_ty.sty {\n-                ty::ty_tup(ref tys) => { (*tys).clone() }\n-                _ => { continue; }\n-            };\n-            debug!(\"input_tys {}\", input_tys.repr(tcx));\n+    let kind = match tcx.lang_items.fn_trait_kind(trait_ref.def_id) {\n+        Some(k) => k,\n+        None => { return None; }\n+    };\n \n-            let ret_param_ty = *trait_ref.substs.types.get(subst::TypeSpace, 1);\n-            let ret_param_ty = fcx.infcx().resolve_type_vars_if_possible(ret_param_ty);\n-            debug!(\"ret_param_ty {}\", ret_param_ty.repr(tcx));\n+    debug!(\"found object type {}\", kind);\n \n-            let fn_sig = ty::FnSig {\n-                inputs: input_tys,\n-                output: ty::FnConverging(ret_param_ty),\n-                variadic: false\n-            };\n-            debug!(\"fn_sig {}\", fn_sig.repr(tcx));\n+    let arg_param_ty = *trait_ref.substs.types.get(subst::TypeSpace, 0);\n+    let arg_param_ty = fcx.infcx().resolve_type_vars_if_possible(arg_param_ty);\n+    debug!(\"arg_param_ty {}\", arg_param_ty.repr(tcx));\n \n-            return Some((fn_sig, kind));\n-        }\n-    }\n+    let input_tys = match arg_param_ty.sty {\n+        ty::ty_tup(ref tys) => { (*tys).clone() }\n+        _ => { return None; }\n+    };\n+    debug!(\"input_tys {}\", input_tys.repr(tcx));\n \n-    None\n+    let ret_param_ty = *trait_ref.substs.types.get(subst::TypeSpace, 1);\n+    let ret_param_ty = fcx.infcx().resolve_type_vars_if_possible(ret_param_ty);\n+    debug!(\"ret_param_ty {}\", ret_param_ty.repr(tcx));\n+\n+    let fn_sig = ty::FnSig {\n+        inputs: input_tys,\n+        output: ty::FnConverging(ret_param_ty),\n+        variadic: false\n+    };\n+    debug!(\"fn_sig {}\", fn_sig.repr(tcx));\n+\n+    return Some((fn_sig, kind));\n }\n \n fn deduce_unboxed_closure_expectations_from_obligations<'a,'tcx>("}, {"sha": "77460bb6b269a39167aeb9dbdc37724c0697c6f2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8453a781a1895ba4533a8c8f3240a0eba6936/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8453a781a1895ba4533a8c8f3240a0eba6936/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9cc8453a781a1895ba4533a8c8f3240a0eba6936", "patch": "@@ -5159,6 +5159,8 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             }\n \n             ast::ParenthesizedParameters(ref data) => {\n+                span_err!(fcx.tcx().sess, span, E0173,\n+                          \"parenthesized parameters may only be used with a trait\");\n                 push_explicit_parenthesized_parameters_from_segment_to_substs(\n                     fcx, space, span, type_defs, data, substs);\n             }"}, {"sha": "2ee4957ec0fa08af83575114ea47b49cdf96af63", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8453a781a1895ba4533a8c8f3240a0eba6936/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8453a781a1895ba4533a8c8f3240a0eba6936/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9cc8453a781a1895ba4533a8c8f3240a0eba6936", "patch": "@@ -374,19 +374,6 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n         }\n         visit::walk_fn(self, fn_kind, fn_decl, block, span);\n     }\n-\n-    fn visit_path_parameters(&mut self, path_span: Span, parameters: &'v ast::PathParameters) {\n-        match *parameters {\n-            ast::ParenthesizedParameters(..) => {\n-                self.gate_feature(\"unboxed_closures\",\n-                                  path_span,\n-                                  \"parenthetical parameter notation is subject to change\");\n-            }\n-            ast::AngleBracketedParameters(..) => { }\n-        }\n-\n-        visit::walk_path_parameters(self, path_span, parameters)\n-    }\n }\n \n pub fn check_crate(span_handler: &SpanHandler, krate: &ast::Crate) -> (Features, Vec<Span>) {"}]}