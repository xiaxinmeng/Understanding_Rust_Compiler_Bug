{"sha": "84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZTkzOTc5ZTFiN2ZkN2Y3ODZhOGY5MmNhNWJkZDkyZjJiZTI1ZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-16T23:41:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-16T23:41:43Z"}, "message": "Auto merge of #84074 - notriddle:rustdoc-macro-visibility, r=jyn514\n\nrustdoc: clean up and test macro visibility print\n\nThis fixes the overly-complex invariant mentioned in <https://github.com/rust-lang/rust/pull/83237#issuecomment-815346570>, where the macro source can't have any links in it only because the cache hasn't been populated yet.", "tree": {"sha": "c3de2a820a1d572cbb2635e66f43f171a343cce5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3de2a820a1d572cbb2635e66f43f171a343cce5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7", "html_url": "https://github.com/rust-lang/rust/commit/84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0c818c5e0fa37251d9fda2f656bf1041a2e1e1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c818c5e0fa37251d9fda2f656bf1041a2e1e1d", "html_url": "https://github.com/rust-lang/rust/commit/b0c818c5e0fa37251d9fda2f656bf1041a2e1e1d"}, {"sha": "2dfd0bfe1087fef83f26b52b32c8b54fb621b6b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dfd0bfe1087fef83f26b52b32c8b54fb621b6b9", "html_url": "https://github.com/rust-lang/rust/commit/2dfd0bfe1087fef83f26b52b32c8b54fb621b6b9"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "7d33cf210139c9567c9e88a9d6ff41db6b373562", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7", "patch": "@@ -2287,14 +2287,14 @@ impl Clean<Item> for (&hir::MacroDef<'_>, Option<Symbol>) {\n             if matchers.len() <= 1 {\n                 format!(\n                     \"{}macro {}{} {{\\n    ...\\n}}\",\n-                    vis.print_with_space(cx.tcx, def_id, &cx.cache),\n+                    vis.to_src_with_space(cx.tcx, def_id),\n                     name,\n                     matchers.iter().map(|span| span.to_src(cx)).collect::<String>(),\n                 )\n             } else {\n                 format!(\n                     \"{}macro {} {{\\n{}}}\",\n-                    vis.print_with_space(cx.tcx, def_id, &cx.cache),\n+                    vis.to_src_with_space(cx.tcx, def_id),\n                     name,\n                     matchers\n                         .iter()"}, {"sha": "41f531e77e5b5fc745db9e7a9afa38d2e161f62c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7", "patch": "@@ -1186,8 +1186,6 @@ impl clean::Visibility {\n         item_did: DefId,\n         cache: &'a Cache,\n     ) -> impl fmt::Display + 'a + Captures<'tcx> {\n-        use rustc_span::symbol::kw;\n-\n         let to_print = match self {\n             clean::Public => \"pub \".to_owned(),\n             clean::Inherited => String::new(),\n@@ -1212,18 +1210,11 @@ impl clean::Visibility {\n                 } else {\n                     let path = tcx.def_path(vis_did);\n                     debug!(\"path={:?}\", path);\n-                    let first_name =\n-                        path.data[0].data.get_opt_name().expect(\"modules are always named\");\n                     // modified from `resolved_path()` to work with `DefPathData`\n                     let last_name = path.data.last().unwrap().data.get_opt_name().unwrap();\n                     let anchor = anchor(vis_did, &last_name.as_str(), cache).to_string();\n \n-                    let mut s = \"pub(\".to_owned();\n-                    if path.data.len() != 1\n-                        || (first_name != kw::SelfLower && first_name != kw::Super)\n-                    {\n-                        s.push_str(\"in \");\n-                    }\n+                    let mut s = \"pub(in \".to_owned();\n                     for seg in &path.data[..path.data.len() - 1] {\n                         s.push_str(&format!(\"{}::\", seg.data.get_opt_name().unwrap()));\n                     }\n@@ -1234,6 +1225,43 @@ impl clean::Visibility {\n         };\n         display_fn(move |f| f.write_str(&to_print))\n     }\n+\n+    /// This function is the same as print_with_space, except that it renders no links.\n+    /// It's used for macros' rendered source view, which is syntax highlighted and cannot have\n+    /// any HTML in it.\n+    crate fn to_src_with_space<'a, 'tcx: 'a>(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        item_did: DefId,\n+    ) -> impl fmt::Display + 'a + Captures<'tcx> {\n+        let to_print = match self {\n+            clean::Public => \"pub \".to_owned(),\n+            clean::Inherited => String::new(),\n+            clean::Visibility::Restricted(vis_did) => {\n+                // FIXME(camelid): This may not work correctly if `item_did` is a module.\n+                //                 However, rustdoc currently never displays a module's\n+                //                 visibility, so it shouldn't matter.\n+                let parent_module = find_nearest_parent_module(tcx, item_did);\n+\n+                if vis_did.index == CRATE_DEF_INDEX {\n+                    \"pub(crate) \".to_owned()\n+                } else if parent_module == Some(vis_did) {\n+                    // `pub(in foo)` where `foo` is the parent module\n+                    // is the same as no visibility modifier\n+                    String::new()\n+                } else if parent_module\n+                    .map(|parent| find_nearest_parent_module(tcx, parent))\n+                    .flatten()\n+                    == Some(vis_did)\n+                {\n+                    \"pub(super) \".to_owned()\n+                } else {\n+                    format!(\"pub(in {}) \", tcx.def_path_str(vis_did))\n+                }\n+            }\n+        };\n+        display_fn(move |f| f.write_str(&to_print))\n+    }\n }\n \n crate trait PrintWithSpace {"}, {"sha": "ede3f455a2044c4e1d27f671f87d32497708c43c", "filename": "src/test/rustdoc/decl_macro.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdecl_macro.rs?ref=84e93979e1b7fd7f786a8f92ca5bdd92f2be25e7", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: --document-private-items\n+\n #![feature(decl_macro)]\n \n // @has decl_macro/macro.my_macro.html //pre 'pub macro my_macro() {'\n@@ -37,3 +39,18 @@ pub macro my_macro_multi {\n pub macro by_example_single {\n     ($foo:expr) => {}\n }\n+\n+mod a {\n+    mod b {\n+        // @has decl_macro/a/b/macro.by_example_vis.html //pre 'pub(super) macro by_example_vis($foo:expr) {'\n+        pub(in super) macro by_example_vis {\n+            ($foo:expr) => {}\n+        }\n+        mod c {\n+            // @has decl_macro/a/b/c/macro.by_example_vis_named.html //pre 'pub(in a) macro by_example_vis_named($foo:expr) {'\n+            pub(in a) macro by_example_vis_named {\n+                ($foo:expr) => {}\n+            }\n+        }\n+    }\n+}"}]}