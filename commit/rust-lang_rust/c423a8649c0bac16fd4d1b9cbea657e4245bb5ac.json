{"sha": "c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MjNhODY0OWMwYmFjMTZmZDRkMWI5Y2JlYTY1N2U0MjQ1YmI1YWM=", "commit": {"author": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-02-14T22:56:23Z"}, "committer": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-02-14T22:56:23Z"}, "message": "Change const eval to return `ConstValue`, instead of `Const` as the type inside it shouldn't be used.", "tree": {"sha": "0955bf073db63900684d694eea8a6939c92d1b53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0955bf073db63900684d694eea8a6939c92d1b53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "html_url": "https://github.com/rust-lang/rust/commit/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e168dcd254d0a6a0cbaad5f2c054ce5116a07119", "url": "https://api.github.com/repos/rust-lang/rust/commits/e168dcd254d0a6a0cbaad5f2c054ce5116a07119", "html_url": "https://github.com/rust-lang/rust/commit/e168dcd254d0a6a0cbaad5f2c054ce5116a07119"}], "stats": {"total": 225, "additions": 145, "deletions": 80}, "files": [{"sha": "a23ff6bd66d4b8bef638e664a5da9d731a89d780", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -2,6 +2,7 @@ use super::{CheckInAllocMsg, Pointer, RawConst, ScalarMaybeUndef};\n \n use crate::hir::map::definitions::DefPathData;\n use crate::mir;\n+use crate::mir::interpret::ConstValue;\n use crate::ty::layout::{Align, LayoutError, Size};\n use crate::ty::query::TyCtxtAt;\n use crate::ty::{self, layout, Ty};\n@@ -40,7 +41,7 @@ CloneTypeFoldableImpls! {\n }\n \n pub type ConstEvalRawResult<'tcx> = Result<RawConst<'tcx>, ErrorHandled>;\n-pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ErrorHandled>;\n+pub type ConstEvalResult<'tcx> = Result<ConstValue<'tcx>, ErrorHandled>;\n \n #[derive(Debug)]\n pub struct ConstEvalErr<'tcx> {"}, {"sha": "538d955762ec376ca4f0c82a0ce0427095e34063", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -7,7 +7,7 @@ use std::fmt;\n \n use crate::ty::{\n     layout::{HasDataLayout, Size},\n-    Ty,\n+    ParamEnv, Ty, TyCtxt,\n };\n \n use super::{sign_extend, truncate, AllocId, Allocation, InterpResult, Pointer, PointerArithmetic};\n@@ -66,6 +66,32 @@ impl<'tcx> ConstValue<'tcx> {\n             ConstValue::Scalar(val) => Some(val),\n         }\n     }\n+\n+    pub fn try_to_bits(&self, size: Size) -> Option<u128> {\n+        self.try_to_scalar()?.to_bits(size).ok()\n+    }\n+\n+    pub fn try_to_bits_for_ty(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ParamEnv<'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> Option<u128> {\n+        let size = tcx.layout_of(param_env.with_reveal_all().and(ty)).ok()?.size;\n+        self.try_to_bits(size)\n+    }\n+\n+    pub fn from_bool(b: bool) -> Self {\n+        ConstValue::Scalar(Scalar::from_bool(b))\n+    }\n+\n+    pub fn from_u64(i: u64) -> Self {\n+        ConstValue::Scalar(Scalar::from_u64(i))\n+    }\n+\n+    pub fn from_machine_usize(cx: &impl HasDataLayout, i: u64) -> Self {\n+        ConstValue::Scalar(Scalar::from_machine_usize(cx, i))\n+    }\n }\n \n /// A `Scalar` represents an immediate, primitive value existing outside of a\n@@ -287,6 +313,11 @@ impl<'tcx, Tag> Scalar<Tag> {\n         Scalar::Raw { data: i as u128, size: 8 }\n     }\n \n+    #[inline]\n+    pub fn from_machine_usize(cx: &impl HasDataLayout, i: u64) -> Self {\n+        Self::from_uint(i, cx.data_layout().pointer_size)\n+    }\n+\n     #[inline]\n     pub fn try_from_int(i: impl Into<i128>, size: Size) -> Option<Self> {\n         let i = i.into();"}, {"sha": "605baae6c24fa7df1faa681ef69b8712e733fafc", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -2380,10 +2380,10 @@ impl<'tcx> AdtDef {\n         let repr_type = self.repr.discr_type();\n         match tcx.const_eval_poly(expr_did) {\n             Ok(val) => {\n-                // FIXME: Find the right type and use it instead of `val.ty` here\n-                if let Some(b) = val.try_eval_bits(tcx, param_env, val.ty) {\n+                let ty = repr_type.to_ty(tcx);\n+                if let Some(b) = val.try_to_bits_for_ty(tcx, param_env, ty) {\n                     trace!(\"discriminants: {} ({:?})\", b, repr_type);\n-                    Some(Discr { val: b, ty: val.ty })\n+                    Some(Discr { val: b, ty })\n                 } else {\n                     info!(\"invalid enum discriminant: {:#?}\", val);\n                     crate::mir::interpret::struct_error("}, {"sha": "57b55c0f897b233c34dcea8c90d30abd03af773c", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -2471,7 +2471,9 @@ impl<'tcx> Const<'tcx> {\n \n             // try to resolve e.g. associated constants to their definition on an impl, and then\n             // evaluate the const.\n-            tcx.const_eval_resolve(param_env, did, substs, promoted, None).ok()\n+            tcx.const_eval_resolve(param_env, did, substs, promoted, None)\n+                .ok()\n+                .map(|val| tcx.mk_const(Const { val: ConstKind::Value(val), ty: self.ty }))\n         };\n \n         match self.val {"}, {"sha": "09a84aff16811a80f14db9fd288fcbdfadee73ac", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -78,11 +78,9 @@ pub fn codegen_static_initializer(\n     cx: &CodegenCx<'ll, 'tcx>,\n     def_id: DefId,\n ) -> Result<(&'ll Value, &'tcx Allocation), ErrorHandled> {\n-    let static_ = cx.tcx.const_eval_poly(def_id)?;\n-\n-    let alloc = match static_.val {\n-        ty::ConstKind::Value(ConstValue::ByRef { alloc, offset }) if offset.bytes() == 0 => alloc,\n-        _ => bug!(\"static const eval returned {:#?}\", static_),\n+    let alloc = match cx.tcx.const_eval_poly(def_id)? {\n+        ConstValue::ByRef { alloc, offset } if offset.bytes() == 0 => alloc,\n+        val => bug!(\"static const eval returned {:#?}\", val),\n     };\n     Ok((const_alloc_to_llvm(cx, alloc), alloc))\n }"}, {"sha": "341a4a77c3c0a343129296885afda4c828db8eb3", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -193,7 +193,8 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                     .tcx\n                     .const_eval_instance(ty::ParamEnv::reveal_all(), instance, None)\n                     .unwrap();\n-                OperandRef::from_const(self, ty_name).immediate_or_packed_pair(self)\n+                let const_ = ty::Const { val: ty::ConstKind::Value(ty_name), ty: ret_ty };\n+                OperandRef::from_const(self, &const_).immediate_or_packed_pair(self)\n             }\n             \"init\" => {\n                 let ty = substs.type_at(0);"}, {"sha": "d7e87419c171413f8ef2e90a382731fca3b4baa8", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -30,7 +30,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n             _ => {\n                 let val = self.eval_mir_constant(constant)?;\n-                Ok(OperandRef::from_const(bx, val))\n+                Ok(OperandRef::from_const(bx, &val))\n             }\n         }\n     }\n@@ -45,6 +45,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 self.cx\n                     .tcx()\n                     .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, promoted, None)\n+                    .map(|val| {\n+                        self.cx.tcx().mk_const(ty::Const {\n+                            val: ty::ConstKind::Value(val),\n+                            ty: constant.literal.ty,\n+                        })\n+                    })\n                     .map_err(|err| {\n                         if promoted.is_none() {\n                             self.cx"}, {"sha": "7745606b84173c8c3dba5509391c3a0ca6fb01e8", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n \n     pub fn from_const<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n         bx: &mut Bx,\n-        val: &'tcx ty::Const<'tcx>,\n+        val: &ty::Const<'tcx>,\n     ) -> Self {\n         let layout = bx.layout_of(val.ty);\n "}, {"sha": "5e6db565a7d0497c2f045ea604762d516232e7c5", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -40,7 +40,8 @@ pub(crate) fn const_field<'tcx>(\n     let field = ecx.operand_field(down, field.index() as u64).unwrap();\n     // and finally move back to the const world, always normalizing because\n     // this is not called for statics.\n-    op_to_const(&ecx, field)\n+    let val = op_to_const(&ecx, field);\n+    tcx.mk_const(ty::Const { val: ty::ConstKind::Value(val), ty: op.layout.ty })\n }\n \n pub(crate) fn const_caller_location<'tcx>(\n@@ -84,7 +85,8 @@ pub(crate) fn destructure_const<'tcx>(\n     let down = ecx.operand_downcast(op, variant).unwrap();\n     let fields_iter = (0..field_count).map(|i| {\n         let field_op = ecx.operand_field(down, i).unwrap();\n-        op_to_const(&ecx, field_op)\n+        let val = op_to_const(&ecx, field_op);\n+        tcx.mk_const(ty::Const { val: ty::ConstKind::Value(val), ty: field_op.layout.ty })\n     });\n     let fields = tcx.arena.alloc_from_iter(fields_iter);\n "}, {"sha": "6ac828521f326768d7cf33a9f11d4fc0463d8169", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -97,7 +97,7 @@ pub(super) fn mk_eval_cx<'mir, 'tcx>(\n pub(super) fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, 'tcx>,\n     op: OpTy<'tcx>,\n-) -> &'tcx ty::Const<'tcx> {\n+) -> ConstValue<'tcx> {\n     // We do not have value optimizations for everything.\n     // Only scalars and slices, since they are very common.\n     // Note that further down we turn scalars of undefined bits back to `ByRef`. These can result\n@@ -144,7 +144,7 @@ pub(super) fn op_to_const<'tcx>(\n             ConstValue::Scalar(Scalar::zst())\n         }\n     };\n-    let val = match immediate {\n+    match immediate {\n         Ok(mplace) => to_const_value(mplace),\n         // see comment on `let try_as_immediate` above\n         Err(ImmTy { imm: Immediate::Scalar(x), .. }) => match x {\n@@ -166,8 +166,7 @@ pub(super) fn op_to_const<'tcx>(\n             let len: usize = len.try_into().unwrap();\n             ConstValue::Slice { data, start, end: start + len }\n         }\n-    };\n-    ecx.tcx.mk_const(ty::Const { val: ty::ConstKind::Value(val), ty: op.layout.ty })\n+    }\n }\n \n fn validate_and_turn_into_const<'tcx>(\n@@ -195,13 +194,10 @@ fn validate_and_turn_into_const<'tcx>(\n         // whether they become immediates.\n         if is_static || cid.promoted.is_some() {\n             let ptr = mplace.ptr.assert_ptr();\n-            Ok(tcx.mk_const(ty::Const {\n-                val: ty::ConstKind::Value(ConstValue::ByRef {\n-                    alloc: ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id),\n-                    offset: ptr.offset,\n-                }),\n-                ty: mplace.layout.ty,\n-            }))\n+            Ok(ConstValue::ByRef {\n+                alloc: ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id),\n+                offset: ptr.offset,\n+            })\n         } else {\n             Ok(op_to_const(&ecx, mplace.into()))\n         }"}, {"sha": "fc4ba4d6cd9783c432f486e5ce015aefe7b17a31", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -756,6 +756,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub(super) fn const_eval(\n         &self,\n         gid: GlobalId<'tcx>,\n+        ty: Ty<'tcx>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         // For statics we pick `ParamEnv::reveal_all`, because statics don't have generics\n         // and thus don't care about the parameter environment. While we could just use\n@@ -777,7 +778,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // recursion deeper than one level, because the `tcx.const_eval` above is guaranteed to not\n         // return `ConstValue::Unevaluated`, which is the only way that `eval_const_to_op` will call\n         // `ecx.const_eval`.\n-        self.eval_const_to_op(val, None)\n+        let const_ = ty::Const { val: ty::ConstKind::Value(val), ty };\n+        self.eval_const_to_op(&const_, None)\n     }\n \n     pub fn const_eval_raw("}, {"sha": "1b1481580a90fe27fd6e033c049d0d0a5cb50856", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -48,22 +48,15 @@ crate fn eval_nullary_intrinsic<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     def_id: DefId,\n     substs: SubstsRef<'tcx>,\n-) -> InterpResult<'tcx, &'tcx ty::Const<'tcx>> {\n+) -> InterpResult<'tcx, ConstValue<'tcx>> {\n     let tp_ty = substs.type_at(0);\n     let name = tcx.item_name(def_id);\n     Ok(match name {\n         sym::type_name => {\n             let alloc = type_name::alloc_type_name(tcx, tp_ty);\n-            tcx.mk_const(ty::Const {\n-                val: ty::ConstKind::Value(ConstValue::Slice {\n-                    data: alloc,\n-                    start: 0,\n-                    end: alloc.len(),\n-                }),\n-                ty: tcx.mk_static_str(),\n-            })\n+            ConstValue::Slice { data: alloc, start: 0, end: alloc.len() }\n         }\n-        sym::needs_drop => ty::Const::from_bool(tcx, tp_ty.needs_drop(tcx, param_env)),\n+        sym::needs_drop => ConstValue::from_bool(tp_ty.needs_drop(tcx, param_env)),\n         sym::size_of | sym::min_align_of | sym::pref_align_of => {\n             let layout = tcx.layout_of(param_env.and(tp_ty)).map_err(|e| err_inval!(Layout(e)))?;\n             let n = match name {\n@@ -72,11 +65,9 @@ crate fn eval_nullary_intrinsic<'tcx>(\n                 sym::size_of => layout.size.bytes(),\n                 _ => bug!(),\n             };\n-            ty::Const::from_usize(tcx, n)\n-        }\n-        sym::type_id => {\n-            ty::Const::from_bits(tcx, tcx.type_id_hash(tp_ty).into(), param_env.and(tcx.types.u64))\n+            ConstValue::from_machine_usize(&tcx, n)\n         }\n+        sym::type_id => ConstValue::from_u64(tcx.type_id_hash(tp_ty).into()),\n         other => bug!(\"`{}` is not a zero arg intrinsic\", other),\n     })\n }\n@@ -119,7 +110,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | sym::type_id\n             | sym::type_name => {\n                 let gid = GlobalId { instance, promoted: None };\n-                let val = self.const_eval(gid)?;\n+                let ty = instance.ty_env(*self.tcx, self.param_env);\n+                let val = self.const_eval(gid, ty)?;\n                 self.copy_op(val, dest)?;\n             }\n "}, {"sha": "14b8a341e26a0e82841c9961be2e74b0050edf23", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -518,7 +518,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// \"universe\" (param_env).\n     crate fn eval_const_to_op(\n         &self,\n-        val: &'tcx ty::Const<'tcx>,\n+        val: &ty::Const<'tcx>,\n         layout: Option<TyLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         let tag_scalar = |scalar| match scalar {\n@@ -536,7 +536,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // potentially requiring the current static to be evaluated again. This is not a\n                 // problem here, because we are building an operand which means an actual read is\n                 // happening.\n-                return Ok(OpTy::from(self.const_eval(GlobalId { instance, promoted })?));\n+                return Ok(self.const_eval(GlobalId { instance, promoted }, val.ty)?);\n             }\n             ty::ConstKind::Infer(..)\n             | ty::ConstKind::Bound(..)"}, {"sha": "0fa7d6a9b72236080cb97e2a952865e1ee246d60", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -357,7 +357,7 @@ fn collect_items_rec<'tcx>(\n             recursion_depth_reset = None;\n \n             if let Ok(val) = tcx.const_eval_poly(def_id) {\n-                collect_const(tcx, val, InternalSubsts::empty(), &mut neighbors);\n+                collect_const_value(tcx, val, &mut neighbors);\n             }\n         }\n         MonoItem::Fn(instance) => {\n@@ -971,7 +971,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n                 let def_id = self.tcx.hir().local_def_id(item.hir_id);\n \n                 if let Ok(val) = self.tcx.const_eval_poly(def_id) {\n-                    collect_const(self.tcx, val, InternalSubsts::empty(), &mut self.output);\n+                    collect_const_value(self.tcx, val, &mut self.output);\n                 }\n             }\n             hir::ItemKind::Fn(..) => {\n@@ -1185,18 +1185,10 @@ fn collect_const<'tcx>(\n         tcx.subst_and_normalize_erasing_regions(param_substs, param_env, &constant);\n \n     match substituted_constant.val {\n-        ty::ConstKind::Value(ConstValue::Scalar(Scalar::Ptr(ptr))) => {\n-            collect_miri(tcx, ptr.alloc_id, output)\n-        }\n-        ty::ConstKind::Value(ConstValue::Slice { data: alloc, start: _, end: _ })\n-        | ty::ConstKind::Value(ConstValue::ByRef { alloc, .. }) => {\n-            for &((), id) in alloc.relocations().values() {\n-                collect_miri(tcx, id, output);\n-            }\n-        }\n+        ty::ConstKind::Value(val) => collect_const_value(tcx, val, output),\n         ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n             match tcx.const_eval_resolve(param_env, def_id, substs, promoted, None) {\n-                Ok(val) => collect_const(tcx, val, param_substs, output),\n+                Ok(val) => collect_const_value(tcx, val, output),\n                 Err(ErrorHandled::Reported) => {}\n                 Err(ErrorHandled::TooGeneric) => {\n                     span_bug!(tcx.def_span(def_id), \"collection encountered polymorphic constant\",)\n@@ -1206,3 +1198,19 @@ fn collect_const<'tcx>(\n         _ => {}\n     }\n }\n+\n+fn collect_const_value<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    value: ConstValue<'tcx>,\n+    output: &mut Vec<MonoItem<'tcx>>,\n+) {\n+    match value {\n+        ConstValue::Scalar(Scalar::Ptr(ptr)) => collect_miri(tcx, ptr.alloc_id, output),\n+        ConstValue::Slice { data: alloc, start: _, end: _ } | ConstValue::ByRef { alloc, .. } => {\n+            for &((), id) in alloc.relocations().values() {\n+                collect_miri(tcx, id, output);\n+            }\n+        }\n+        _ => {}\n+    }\n+}"}, {"sha": "74006c883716c7bbc446c2419142f6d422b62508", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -418,7 +418,17 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                 None,\n                 Some(span),\n             ) {\n-                Ok(cv) => cv.eval_usize(cx.tcx, ty::ParamEnv::reveal_all()),\n+                Ok(cv) => {\n+                    if let Some(count) = cv.try_to_bits_for_ty(\n+                        cx.tcx,\n+                        ty::ParamEnv::reveal_all(),\n+                        cx.tcx.types.usize,\n+                    ) {\n+                        count as u64\n+                    } else {\n+                        bug!(\"repeat count constant value can't be converted to usize\");\n+                    }\n+                }\n                 Err(ErrorHandled::Reported) => 0,\n                 Err(ErrorHandled::TooGeneric) => {\n                     let span = cx.tcx.def_span(def_id);"}, {"sha": "f403b1432c4290d8342eca8ce38a156bb97651a2", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -769,7 +769,12 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                     Some(span),\n                 ) {\n                     Ok(value) => {\n-                        let pattern = self.const_to_pat(value, id, span);\n+                        let const_ = self.tcx.mk_const(ty::Const {\n+                            val: ty::ConstKind::Value(value),\n+                            ty: self.tables.node_type(id),\n+                        });\n+\n+                        let pattern = self.const_to_pat(&const_, id, span);\n                         if !is_associated_const {\n                             return pattern;\n                         }\n@@ -789,7 +794,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                                         user_ty_span: span,\n                                     },\n                                 }),\n-                                ty: value.ty,\n+                                ty: const_.ty,\n                             }\n                         } else {\n                             pattern"}, {"sha": "dc9d5003a414bb233d8ad94638d6d32e6b8ce669", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -25,7 +25,7 @@ use rustc::ty;\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::Ty;\n use rustc::ty::TypeFoldable;\n-use rustc::ty::{AdtKind, Visibility};\n+use rustc::ty::{AdtKind, ConstKind, Visibility};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n@@ -1011,7 +1011,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let count = if self.const_param_def_id(count).is_some() {\n             Ok(self.to_const(count, tcx.type_of(count_def_id)))\n         } else {\n-            tcx.const_eval_poly(count_def_id)\n+            tcx.const_eval_poly(count_def_id).map(|val| {\n+                tcx.mk_const(ty::Const {\n+                    val: ConstKind::Value(val),\n+                    ty: tcx.type_of(count_def_id),\n+                })\n+            })\n         };\n \n         let uty = match expected {"}, {"sha": "7862154a0be6f62e94f009e0a5d765716d1d9839", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -1832,18 +1832,17 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n     // `#[link_section]` may contain arbitrary, or even undefined bytes, but it is\n     // the consumer's responsibility to ensure all bytes that have been read\n     // have defined values.\n-    if let Ok(static_) = tcx.const_eval_poly(id) {\n-        let alloc = if let ty::ConstKind::Value(ConstValue::ByRef { alloc, .. }) = static_.val {\n-            alloc\n-        } else {\n-            bug!(\"Matching on non-ByRef static\")\n-        };\n-        if alloc.relocations().len() != 0 {\n-            let msg = \"statics with a custom `#[link_section]` must be a \\\n+    match tcx.const_eval_poly(id) {\n+        Ok(ConstValue::ByRef { alloc, .. }) => {\n+            if alloc.relocations().len() != 0 {\n+                let msg = \"statics with a custom `#[link_section]` must be a \\\n                        simple list of bytes on the wasm target with no \\\n                        extra levels of indirection such as references\";\n-            tcx.sess.span_err(span, msg);\n+                tcx.sess.span_err(span, msg);\n+            }\n         }\n+        Ok(_) => bug!(\"Matching on non-ByRef static\"),\n+        Err(_) => {}\n     }\n }\n "}, {"sha": "79019d0b950396d6e560fc1b5322b8788193c587", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -1332,7 +1332,11 @@ impl Clean<Type> for hir::Ty<'_> {\n             TyKind::Array(ref ty, ref length) => {\n                 let def_id = cx.tcx.hir().local_def_id(length.hir_id);\n                 let length = match cx.tcx.const_eval_poly(def_id) {\n-                    Ok(length) => print_const(cx, length),\n+                    Ok(length) => {\n+                        let const_ =\n+                            ty::Const { val: ty::ConstKind::Value(length), ty: cx.tcx.types.usize };\n+                        print_const(cx, &const_)\n+                    }\n                     Err(_) => cx\n                         .sess()\n                         .source_map()"}, {"sha": "f8c657477f70c46c421a237da92249dad03acc01", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "patch": "@@ -487,15 +487,18 @@ pub fn print_const(cx: &DocContext<'_>, n: &ty::Const<'_>) -> String {\n }\n \n pub fn print_evaluated_const(cx: &DocContext<'_>, def_id: DefId) -> Option<String> {\n-    let value =\n-        cx.tcx.const_eval_poly(def_id).ok().and_then(|value| match (value.val, &value.ty.kind) {\n-            (_, ty::Ref(..)) => None,\n-            (ty::ConstKind::Value(ConstValue::Scalar(_)), ty::Adt(_, _)) => None,\n-            (ty::ConstKind::Value(ConstValue::Scalar(_)), _) => {\n-                Some(print_const_with_custom_print_scalar(cx, value))\n+    let value = cx.tcx.const_eval_poly(def_id).ok().and_then(|val| {\n+        let ty = cx.tcx.type_of(def_id);\n+        match (val, &ty.kind) {\n+            (_, &ty::Ref(..)) => None,\n+            (ConstValue::Scalar(_), &ty::Adt(_, _)) => None,\n+            (ConstValue::Scalar(_), _) => {\n+                let const_ = ty::Const { val: ty::ConstKind::Value(val), ty };\n+                Some(print_const_with_custom_print_scalar(cx, &const_))\n             }\n             _ => None,\n-        });\n+        }\n+    });\n \n     value\n }\n@@ -510,7 +513,7 @@ fn format_integer_with_underscore_sep(num: &str) -> String {\n         .collect()\n }\n \n-fn print_const_with_custom_print_scalar(cx: &DocContext<'_>, ct: &'tcx ty::Const<'tcx>) -> String {\n+fn print_const_with_custom_print_scalar(cx: &DocContext<'_>, ct: &ty::Const<'tcx>) -> String {\n     // Use a slightly different format for integer types which always shows the actual value.\n     // For all other types, fallback to the original `pretty_print_const`.\n     match (ct.val, &ct.ty.kind) {"}]}