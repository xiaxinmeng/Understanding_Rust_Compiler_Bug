{"sha": "64afc6b51779c32b3d68a45b956b76b8899a135e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YWZjNmI1MTc3OWMzMmIzZDY4YTQ1Yjk1NmI3NmI4ODk5YTEzNWU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-07T17:25:55Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-21T09:12:17Z"}, "message": "Differentiate between closure and function bodies", "tree": {"sha": "0c3b4e0344fe80d3c455a7e50f940cb3b720b538", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c3b4e0344fe80d3c455a7e50f940cb3b720b538"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64afc6b51779c32b3d68a45b956b76b8899a135e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64afc6b51779c32b3d68a45b956b76b8899a135e", "html_url": "https://github.com/rust-lang/rust/commit/64afc6b51779c32b3d68a45b956b76b8899a135e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64afc6b51779c32b3d68a45b956b76b8899a135e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5f5a2715ed8685bc19fd589a23c7c658c2fe6bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f5a2715ed8685bc19fd589a23c7c658c2fe6bd", "html_url": "https://github.com/rust-lang/rust/commit/b5f5a2715ed8685bc19fd589a23c7c658c2fe6bd"}], "stats": {"total": 55, "additions": 38, "deletions": 17}, "files": [{"sha": "c3e4f0c05014c745155902958dee598b16e17df6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=64afc6b51779c32b3d68a45b956b76b8899a135e", "patch": "@@ -455,11 +455,20 @@ impl<'hir> Map<'hir> {\n             Node::AnonConst(_) => {\n                 BodyOwnerKind::Const\n             }\n+            Node::Variant(&Spanned { node: VariantKind { data: VariantData::Tuple(..), .. }, .. }) |\n+            Node::StructCtor(..) |\n+            Node::Item(&Item { node: ItemKind::Fn(..), .. }) |\n+            Node::TraitItem(&TraitItem { node: TraitItemKind::Method(..), .. }) |\n+            Node::ImplItem(&ImplItem { node: ImplItemKind::Method(..), .. }) => {\n+                BodyOwnerKind::Fn\n+            }\n             Node::Item(&Item { node: ItemKind::Static(_, m, _), .. }) => {\n                 BodyOwnerKind::Static(m)\n             }\n-            // Default to function if it's not a constant or static.\n-            _ => BodyOwnerKind::Fn\n+            Node::Expr(&Expr { node: ExprKind::Closure(..), .. }) => {\n+                BodyOwnerKind::Closure\n+            }\n+            node => bug!(\"{:#?} is not a body node\", node),\n         }\n     }\n "}, {"sha": "b58b1d359f98bb915d23ef466a591b91d4ddf54e", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=64afc6b51779c32b3d68a45b956b76b8899a135e", "patch": "@@ -1270,13 +1270,25 @@ pub enum BodyOwnerKind {\n     /// Functions and methods.\n     Fn,\n \n+    /// Closures\n+    Closure,\n+\n     /// Constants and associated constants.\n     Const,\n \n     /// Initializer of a `static` item.\n     Static(Mutability),\n }\n \n+impl BodyOwnerKind {\n+    pub fn is_fn_or_closure(self) -> bool {\n+        match self {\n+            BodyOwnerKind::Fn | BodyOwnerKind::Closure => true,\n+            BodyOwnerKind::Const | BodyOwnerKind::Static(_) => false,\n+        }\n+    }\n+}\n+\n /// A constant (expression) that's not an item or associated item,\n /// but needs its own `DefId` for type-checking, const-eval, etc.\n /// These are usually found nested inside types (e.g., array lengths)"}, {"sha": "31f91a1bae57fa16982e955a5bea1f0dcd1aa12b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=64afc6b51779c32b3d68a45b956b76b8899a135e", "patch": "@@ -1268,8 +1268,8 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n \n         // The body of the every fn is a root scope.\n         self.cx.parent = self.cx.var_parent;\n-        if let hir::BodyOwnerKind::Fn = self.tcx.hir().body_owner_kind(owner_id) {\n-            self.visit_expr(&body.value);\n+        if self.tcx.hir().body_owner_kind(owner_id).is_fn_or_closure() {\n+            self.visit_expr(&body.value)\n         } else {\n             // Only functions have an outer terminating (drop) scope, while\n             // temporaries in constant initializers may be 'static, but only"}, {"sha": "9d49814c35a348056eee8f1e0aedc6bccc8ff688", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=64afc6b51779c32b3d68a45b956b76b8899a135e", "patch": "@@ -163,10 +163,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n     ));\n \n-    let locals_are_invalidated_at_exit = match tcx.hir().body_owner_kind(id) {\n-            hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => false,\n-            hir::BodyOwnerKind::Fn => true,\n-    };\n+    let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();\n     let borrow_set = Rc::new(BorrowSet::build(\n             tcx, mir, locals_are_invalidated_at_exit, &mdpe.move_data));\n "}, {"sha": "0a214e60bdd78a8f8d6641266c26acc688936c24", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=64afc6b51779c32b3d68a45b956b76b8899a135e", "patch": "@@ -476,6 +476,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n \n         match tcx.hir().body_owner_kind(self.mir_node_id) {\n+            BodyOwnerKind::Closure |\n             BodyOwnerKind::Fn => {\n                 let defining_ty = if self.mir_def_id == closure_base_def_id {\n                     tcx.type_of(closure_base_def_id)"}, {"sha": "420ae113ad33026036c151c99fec21524a9fd6ed", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=64afc6b51779c32b3d68a45b956b76b8899a135e", "patch": "@@ -75,7 +75,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n         let cx = Cx::new(&infcx, id);\n         let mut mir = if cx.tables().tainted_by_errors {\n             build::construct_error(cx, body_id)\n-        } else if let hir::BodyOwnerKind::Fn = cx.body_owner_kind {\n+        } else if cx.body_owner_kind.is_fn_or_closure() {\n             // fetch the fully liberated fn signature (that is, all bound\n             // types/lifetimes replaced)\n             let fn_hir_id = tcx.hir().node_to_hir_id(id);"}, {"sha": "78abba5f885b2e94882cd8f3f2785d0a7781e445", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=64afc6b51779c32b3d68a45b956b76b8899a135e", "patch": "@@ -613,6 +613,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             hir::BodyOwnerKind::Static(_) =>\n                 // No need to free storage in this context.\n                 None,\n+            hir::BodyOwnerKind::Closure |\n             hir::BodyOwnerKind::Fn =>\n                 Some(self.topmost_scope()),\n         }"}, {"sha": "f514cac6326be317b2a2de11cede84ea73091003", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=64afc6b51779c32b3d68a45b956b76b8899a135e", "patch": "@@ -61,6 +61,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         let constness = match body_owner_kind {\n             hir::BodyOwnerKind::Const |\n             hir::BodyOwnerKind::Static(_) => hir::Constness::Const,\n+            hir::BodyOwnerKind::Closure |\n             hir::BodyOwnerKind::Fn => hir::Constness::NotConst,\n         };\n "}, {"sha": "9f0907adc989279935bf6278746b1e31ae9d49f3", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=64afc6b51779c32b3d68a45b956b76b8899a135e", "patch": "@@ -1,6 +1,5 @@\n //! Inlining pass for MIR functions\n \n-use rustc::hir;\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def_id::DefId;\n \n@@ -74,15 +73,12 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         // Only do inlining into fn bodies.\n         let id = self.tcx.hir().as_local_node_id(self.source.def_id).unwrap();\n-        let body_owner_kind = self.tcx.hir().body_owner_kind(id);\n-\n-        if let (hir::BodyOwnerKind::Fn, None) = (body_owner_kind, self.source.promoted) {\n-\n+        if self.tcx.hir().body_owner_kind(id).is_fn_or_closure() && self.source.promoted.is_none() {\n             for (bb, bb_data) in caller_mir.basic_blocks().iter_enumerated() {\n                 if let Some(callsite) = self.get_valid_function_call(bb,\n-                                                                     bb_data,\n-                                                                     caller_mir,\n-                                                                     param_env) {\n+                                                                    bb_data,\n+                                                                    caller_mir,\n+                                                                    param_env) {\n                     callsites.push_back(callsite);\n                 }\n             }"}, {"sha": "2d941902debc33807793869efe09bd660ab862ec", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=64afc6b51779c32b3d68a45b956b76b8899a135e", "patch": "@@ -1152,6 +1152,7 @@ impl MirPass for QualifyAndPromoteConstants {\n         let id = tcx.hir().as_local_node_id(def_id).unwrap();\n         let mut const_promoted_temps = None;\n         let mode = match tcx.hir().body_owner_kind(id) {\n+            hir::BodyOwnerKind::Closure => Mode::Fn,\n             hir::BodyOwnerKind::Fn => {\n                 if tcx.is_const_fn(def_id) {\n                     Mode::ConstFn"}, {"sha": "f4685e0ddc909dc5434f955b48aff2fb877792d1", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=64afc6b51779c32b3d68a45b956b76b8899a135e", "patch": "@@ -573,6 +573,7 @@ fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut dyn Write) -> i\n     let body_owner_kind = tcx.hir().body_owner_kind(id);\n     match (body_owner_kind, src.promoted) {\n         (_, Some(i)) => write!(w, \"{:?} in\", i)?,\n+        (hir::BodyOwnerKind::Closure, _) |\n         (hir::BodyOwnerKind::Fn, _) => write!(w, \"fn\")?,\n         (hir::BodyOwnerKind::Const, _) => write!(w, \"const\")?,\n         (hir::BodyOwnerKind::Static(hir::MutImmutable), _) => write!(w, \"static\")?,\n@@ -585,6 +586,7 @@ fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut dyn Write) -> i\n     })?;\n \n     match (body_owner_kind, src.promoted) {\n+        (hir::BodyOwnerKind::Closure, None) |\n         (hir::BodyOwnerKind::Fn, None) => {\n             write!(w, \"(\")?;\n "}, {"sha": "c11b1af97766d80d651c8b50cbb0fa67eab8c662", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64afc6b51779c32b3d68a45b956b76b8899a135e/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=64afc6b51779c32b3d68a45b956b76b8899a135e", "patch": "@@ -191,6 +191,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         self.in_static = false;\n \n         match self.tcx.hir().body_owner_kind(item_id) {\n+            hir::BodyOwnerKind::Closure |\n             hir::BodyOwnerKind::Fn => self.in_fn = true,\n             hir::BodyOwnerKind::Static(_) => self.in_static = true,\n             _ => {}"}]}