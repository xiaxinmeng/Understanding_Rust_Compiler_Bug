{"sha": "68b4a43e23d9c7e847e71cdbfa9d915df4997e38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YjRhNDNlMjNkOWM3ZTg0N2U3MWNkYmZhOWQ5MTVkZjQ5OTdlMzg=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-23T15:58:56Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-23T16:02:03Z"}, "message": "Remove stderr limit", "tree": {"sha": "c93465ee312061058ba32f08f505edc647044fe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c93465ee312061058ba32f08f505edc647044fe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68b4a43e23d9c7e847e71cdbfa9d915df4997e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68b4a43e23d9c7e847e71cdbfa9d915df4997e38", "html_url": "https://github.com/rust-lang/rust/commit/68b4a43e23d9c7e847e71cdbfa9d915df4997e38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68b4a43e23d9c7e847e71cdbfa9d915df4997e38/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22606e7358845eb8ddbc37243e89914c03084afb", "url": "https://api.github.com/repos/rust-lang/rust/commits/22606e7358845eb8ddbc37243e89914c03084afb", "html_url": "https://github.com/rust-lang/rust/commit/22606e7358845eb8ddbc37243e89914c03084afb"}], "stats": {"total": 64, "additions": 1, "deletions": 63}, "files": [{"sha": "9a5416153abdb62856d4ad34305f806294aa43f9", "filename": ".github/workflows/clippy_dev.yml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68b4a43e23d9c7e847e71cdbfa9d915df4997e38/.github%2Fworkflows%2Fclippy_dev.yml", "raw_url": "https://github.com/rust-lang/rust/raw/68b4a43e23d9c7e847e71cdbfa9d915df4997e38/.github%2Fworkflows%2Fclippy_dev.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_dev.yml?ref=68b4a43e23d9c7e847e71cdbfa9d915df4997e38", "patch": "@@ -42,9 +42,6 @@ jobs:\n       run: cargo build --features deny-warnings\n       working-directory: clippy_dev\n \n-    - name: Test limit_stderr_length\n-      run: cargo dev limit_stderr_length\n-\n     - name: Test update_lints\n       run: cargo dev update_lints --check\n "}, {"sha": "e05db7af58677cd0f30c84fabf39fd7c40780df0", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b4a43e23d9c7e847e71cdbfa9d915df4997e38/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b4a43e23d9c7e847e71cdbfa9d915df4997e38/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=68b4a43e23d9c7e847e71cdbfa9d915df4997e38", "patch": "@@ -17,7 +17,6 @@ pub mod fmt;\n pub mod new_lint;\n pub mod serve;\n pub mod setup;\n-pub mod stderr_length_check;\n pub mod update_lints;\n \n static DEC_CLIPPY_LINT_RE: SyncLazy<Regex> = SyncLazy::new(|| {"}, {"sha": "8fdeba9842af3e6f80070aa055e2a28dd70ff000", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68b4a43e23d9c7e847e71cdbfa9d915df4997e38/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b4a43e23d9c7e847e71cdbfa9d915df4997e38/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=68b4a43e23d9c7e847e71cdbfa9d915df4997e38", "patch": "@@ -3,7 +3,7 @@\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n use clap::{App, AppSettings, Arg, ArgMatches, SubCommand};\n-use clippy_dev::{bless, fmt, new_lint, serve, setup, stderr_length_check, update_lints};\n+use clippy_dev::{bless, fmt, new_lint, serve, setup, update_lints};\n fn main() {\n     let matches = get_clap_config();\n \n@@ -33,9 +33,6 @@ fn main() {\n                 Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n             }\n         },\n-        (\"limit_stderr_length\", _) => {\n-            stderr_length_check::check();\n-        },\n         (\"setup\", Some(sub_command)) => match sub_command.subcommand() {\n             (\"intellij\", Some(matches)) => setup::intellij::setup_rustc_src(\n                 matches\n@@ -152,10 +149,6 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         .takes_value(true),\n                 ),\n         )\n-        .subcommand(\n-            SubCommand::with_name(\"limit_stderr_length\")\n-                .about(\"Ensures that stderr files do not grow longer than a certain amount of lines.\"),\n-        )\n         .subcommand(\n             SubCommand::with_name(\"setup\")\n                 .about(\"Support for setting up your personal development environment\")"}, {"sha": "e02b6f7da5f7b66e7653403d2f823984eb000ce4", "filename": "clippy_dev/src/stderr_length_check.rs", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/22606e7358845eb8ddbc37243e89914c03084afb/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22606e7358845eb8ddbc37243e89914c03084afb/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fstderr_length_check.rs?ref=22606e7358845eb8ddbc37243e89914c03084afb", "patch": "@@ -1,51 +0,0 @@\n-use crate::clippy_project_root;\n-use std::ffi::OsStr;\n-use std::fs;\n-use std::path::{Path, PathBuf};\n-use walkdir::WalkDir;\n-\n-// The maximum length allowed for stderr files.\n-//\n-// We limit this because small files are easier to deal with than bigger files.\n-const LENGTH_LIMIT: usize = 200;\n-\n-pub fn check() {\n-    let exceeding_files: Vec<_> = exceeding_stderr_files();\n-\n-    if !exceeding_files.is_empty() {\n-        eprintln!(\"Error: stderr files exceeding limit of {} lines:\", LENGTH_LIMIT);\n-        for (path, count) in exceeding_files {\n-            println!(\"{}: {}\", path.display(), count);\n-        }\n-        std::process::exit(1);\n-    }\n-}\n-\n-fn exceeding_stderr_files() -> Vec<(PathBuf, usize)> {\n-    // We use `WalkDir` instead of `fs::read_dir` here in order to recurse into subdirectories.\n-    WalkDir::new(clippy_project_root().join(\"tests/ui\"))\n-        .into_iter()\n-        .filter_map(Result::ok)\n-        .filter(|f| !f.file_type().is_dir())\n-        .filter_map(|e| {\n-            let p = e.into_path();\n-            let count = count_linenumbers(&p);\n-            if p.extension() == Some(OsStr::new(\"stderr\")) && count > LENGTH_LIMIT {\n-                Some((p, count))\n-            } else {\n-                None\n-            }\n-        })\n-        .collect()\n-}\n-\n-#[must_use]\n-fn count_linenumbers(filepath: &Path) -> usize {\n-    match fs::read(filepath) {\n-        Ok(content) => bytecount::count(&content, b'\\n'),\n-        Err(e) => {\n-            eprintln!(\"Failed to read file: {}\", e);\n-            0\n-        },\n-    }\n-}"}]}