{"sha": "008e21d6f6f472140e60d2a8fe142c43ac2a72d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwOGUyMWQ2ZjZmNDcyMTQwZTYwZDJhOGZlMTQyYzQzYWMyYTcyZDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-30T14:10:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-30T14:10:31Z"}, "message": "Rollup merge of #60400 - JohnTitor:simplify-feature, r=matthewjasper\n\nRemove functions to simplify handling of feature(bind_by_move_pattern_guards)\n\nFixes #59192\n\nr? @matthewjasper", "tree": {"sha": "7d8a810d5350e21d00a8c09e997f191e4dbb66fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d8a810d5350e21d00a8c09e997f191e4dbb66fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/008e21d6f6f472140e60d2a8fe142c43ac2a72d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcyFdXCRBK7hj4Ov3rIwAAdHIIAJJWu7kd1ReI5wxH5q8oe1cj\nHZmE2JSLAKmvBxgyutXefPeZUwFAuMbgYh0gW2ntKfR8QwPn2LbIE4cyRqfzJC8+\nzIFFMP46olkEU3rw2MuxsexqInBg0VgVsHHZkZu715tQLU73ePwyMXy5GMLviD9y\nHai+T9gzC9f5QbFcPsxlOXTarXbtE8lyFhqc/PuM4CB9wDq7+4cBGhLANmAICsGe\n7HdA/jE6sCQw82U7VzP3wrGKt1B/cH1+sZzqxZTW4/YW/SoZ5kVK9eJf66A7PGdO\nUa7w4tbNYye+xopclOK4jkPW1PVGpqe7aDEEiKwjG4KBJR2AHf89BayTUFUVrTA=\n=1cNA\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d8a810d5350e21d00a8c09e997f191e4dbb66fe\nparent e11ba74d99f48b9c156b720efee7322a69e1a455\nparent 4945594c2456136ef15098379979caaf75d8e9fb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556633431 +0200\ncommitter GitHub <noreply@github.com> 1556633431 +0200\n\nRollup merge of #60400 - JohnTitor:simplify-feature, r=matthewjasper\n\nRemove functions to simplify handling of feature(bind_by_move_pattern_guards)\n\nFixes #59192\n\nr? @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/008e21d6f6f472140e60d2a8fe142c43ac2a72d1", "html_url": "https://github.com/rust-lang/rust/commit/008e21d6f6f472140e60d2a8fe142c43ac2a72d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/008e21d6f6f472140e60d2a8fe142c43ac2a72d1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e11ba74d99f48b9c156b720efee7322a69e1a455", "url": "https://api.github.com/repos/rust-lang/rust/commits/e11ba74d99f48b9c156b720efee7322a69e1a455", "html_url": "https://github.com/rust-lang/rust/commit/e11ba74d99f48b9c156b720efee7322a69e1a455"}, {"sha": "4945594c2456136ef15098379979caaf75d8e9fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4945594c2456136ef15098379979caaf75d8e9fb", "html_url": "https://github.com/rust-lang/rust/commit/4945594c2456136ef15098379979caaf75d8e9fb"}], "stats": {"total": 24, "additions": 2, "deletions": 22}, "files": [{"sha": "ba2fc05584ae644dffafe261a7c0ff6dbd5a8c50", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/008e21d6f6f472140e60d2a8fe142c43ac2a72d1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/008e21d6f6f472140e60d2a8fe142c43ac2a72d1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=008e21d6f6f472140e60d2a8fe142c43ac2a72d1", "patch": "@@ -1486,26 +1486,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.queries.on_disk_cache.serialize(self.global_tcx(), encoder)\n     }\n \n-    /// This checks whether one is allowed to have pattern bindings\n-    /// that bind-by-move on a match arm that has a guard, e.g.:\n-    ///\n-    /// ```rust\n-    /// match foo { A(inner) if { /* something */ } => ..., ... }\n-    /// ```\n-    ///\n-    /// It is separate from check_for_mutation_in_guard_via_ast_walk,\n-    /// because that method has a narrower effect that can be toggled\n-    /// off via a separate `-Z` flag, at least for the short term.\n-    pub fn allow_bind_by_move_patterns_with_guards(self) -> bool {\n-        self.features().bind_by_move_pattern_guards\n-    }\n-\n-    /// If true, we should use a naive AST walk to determine if match\n-    /// guard could perform bad mutations (or mutable-borrows).\n-    pub fn check_for_mutation_in_guard_via_ast_walk(self) -> bool {\n-        !self.allow_bind_by_move_patterns_with_guards()\n-    }\n-\n     /// If true, we should use the AST-based borrowck (we may *also* use\n     /// the MIR-based borrowck).\n     pub fn use_ast_borrowck(self) -> bool {"}, {"sha": "d6a6b111f49a013cd8e52bddfa511bf55e287f8d", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/008e21d6f6f472140e60d2a8fe142c43ac2a72d1/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/008e21d6f6f472140e60d2a8fe142c43ac2a72d1/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=008e21d6f6f472140e60d2a8fe142c43ac2a72d1", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             // Second, if there is a guard on each arm, make sure it isn't\n             // assigning or borrowing anything mutably.\n             if let Some(ref guard) = arm.guard {\n-                if self.tcx.check_for_mutation_in_guard_via_ast_walk() {\n+                if !self.tcx.features().bind_by_move_pattern_guards {\n                     check_for_mutation_in_guard(self, &guard);\n                 }\n             }\n@@ -562,7 +562,7 @@ fn check_legality_of_move_bindings(\n                              \"cannot bind by-move with sub-bindings\")\n                 .span_label(p.span, \"binds an already bound by-move value by moving it\")\n                 .emit();\n-        } else if has_guard && !cx.tcx.allow_bind_by_move_patterns_with_guards() {\n+        } else if has_guard && !cx.tcx.features().bind_by_move_pattern_guards {\n             let mut err = struct_span_err!(cx.tcx.sess, p.span, E0008,\n                                            \"cannot bind by-move into a pattern guard\");\n             err.span_label(p.span, \"moves value into pattern guard\");"}]}