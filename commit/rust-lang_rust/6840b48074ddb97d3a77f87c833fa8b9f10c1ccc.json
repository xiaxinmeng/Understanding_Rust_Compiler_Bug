{"sha": "6840b48074ddb97d3a77f87c833fa8b9f10c1ccc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NDBiNDgwNzRkZGI5N2QzYTc3Zjg3YzgzM2ZhOGI5ZjEwYzFjY2M=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-28T20:13:00Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-07T04:41:58Z"}, "message": "trans_cast_to_int is hard to explain; make it trans_get_discr instead.", "tree": {"sha": "18ba2fdfcc2bbcc4faa929c5fbfa2958bc5f27da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18ba2fdfcc2bbcc4faa929c5fbfa2958bc5f27da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6840b48074ddb97d3a77f87c833fa8b9f10c1ccc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6840b48074ddb97d3a77f87c833fa8b9f10c1ccc", "html_url": "https://github.com/rust-lang/rust/commit/6840b48074ddb97d3a77f87c833fa8b9f10c1ccc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6840b48074ddb97d3a77f87c833fa8b9f10c1ccc/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dca7be1dfac6193832575495e3f6483634189f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dca7be1dfac6193832575495e3f6483634189f1", "html_url": "https://github.com/rust-lang/rust/commit/8dca7be1dfac6193832575495e3f6483634189f1"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "98f152904704df16199190c45173a4e54b6d79b6", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6840b48074ddb97d3a77f87c833fa8b9f10c1ccc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6840b48074ddb97d3a77f87c833fa8b9f10c1ccc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=6840b48074ddb97d3a77f87c833fa8b9f10c1ccc", "patch": "@@ -231,39 +231,36 @@ fn generic_fields_of(cx: @CrateContext, r: &Repr, sizing: bool)\n }\n \n /**\n- * Obtain as much of a \"discriminant\" as this representation has.\n+ * Obtain a representation of the discriminant sufficient to translate\n+ * destructuring; this may or may not involve the actual discriminant.\n+ *\n  * This should ideally be less tightly tied to `_match`.\n  */\n pub fn trans_switch(bcx: block, r: &Repr, scrutinee: ValueRef)\n     -> (_match::branch_kind, Option<ValueRef>) {\n     match *r {\n         CEnum(*) | General(*) => {\n-            (_match::switch, Some(trans_cast_to_int(bcx, r, scrutinee)))\n+            (_match::switch, Some(trans_get_discr(bcx, r, scrutinee)))\n         }\n         Unit(*) | Univariant(*) => {\n             (_match::single, None)\n         }\n     }\n }\n \n-/**\n- * If the representation is potentially of a C-like enum, implement\n- * coercion to numeric types.\n- */\n-pub fn trans_cast_to_int(bcx: block, r: &Repr, scrutinee: ValueRef)\n+/// Obtain the actual discriminant of a value.\n+pub fn trans_get_discr(bcx: block, r: &Repr, scrutinee: ValueRef)\n     -> ValueRef {\n     match *r {\n         Unit(the_disc) => C_int(bcx.ccx(), the_disc),\n         CEnum(min, max) => load_discr(bcx, scrutinee, min, max),\n-        Univariant(*) => bcx.ccx().sess.bug(~\"type has no explicit \\\n-                                              discriminant\"),\n-        // Note: this case is used internally by trans_switch,\n-        // even though it shouldn't be reached by an external caller.\n+        Univariant(*) => C_int(bcx.ccx(), 0),\n         General(ref cases) => load_discr(bcx, scrutinee, 0,\n                                          (cases.len() - 1) as int)\n     }\n }\n \n+/// Helper for cases where the discriminant is simply loaded.\n fn load_discr(bcx: block, scrutinee: ValueRef, min: int, max: int)\n     -> ValueRef {\n     let ptr = GEPi(bcx, scrutinee, [0, 0]);\n@@ -285,6 +282,7 @@ fn load_discr(bcx: block, scrutinee: ValueRef, min: int, max: int)\n /**\n  * Yield information about how to dispatch a case of the\n  * discriminant-like value returned by `trans_switch`.\n+ *\n  * This should ideally be less tightly tied to `_match`.\n  */\n pub fn trans_case(bcx: block, r: &Repr, discr: int) -> _match::opt_result {"}, {"sha": "edda2f6c2c15c81cf3584f4ec5e9ca03e20cb65a", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6840b48074ddb97d3a77f87c833fa8b9f10c1ccc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6840b48074ddb97d3a77f87c833fa8b9f10c1ccc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=6840b48074ddb97d3a77f87c833fa8b9f10c1ccc", "patch": "@@ -1645,7 +1645,7 @@ fn trans_imm_cast(bcx: block, expr: @ast::expr,\n             (cast_enum, cast_float) => {\n                 let bcx = bcx;\n                 let repr = adt::represent_type(ccx, t_in);\n-                let lldiscrim_a = adt::trans_cast_to_int(bcx, repr, llexpr);\n+                let lldiscrim_a = adt::trans_get_discr(bcx, repr, llexpr);\n                 match k_out {\n                     cast_integral => int_cast(bcx, ll_t_out,\n                                               val_ty(lldiscrim_a),"}]}