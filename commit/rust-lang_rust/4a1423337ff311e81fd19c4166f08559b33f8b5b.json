{"sha": "4a1423337ff311e81fd19c4166f08559b33f8b5b", "node_id": "C_kwDOAAsO6NoAKDRhMTQyMzMzN2ZmMzExZTgxZmQxOWM0MTY2ZjA4NTU5YjMzZjhiNWI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-06T18:22:12Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-06T18:24:24Z"}, "message": "fix: Attempt to resolve paths in const arguments heuristically\n\nWhile we don't support const args in type inference yet, we can at least\nmake use of the fallback path resolution to resolve paths in const args\nin the IDE layer to enable some features for them.", "tree": {"sha": "e66bfd3602f4741f8f1876f961da97ba069b0d18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e66bfd3602f4741f8f1876f961da97ba069b0d18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a1423337ff311e81fd19c4166f08559b33f8b5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1423337ff311e81fd19c4166f08559b33f8b5b", "html_url": "https://github.com/rust-lang/rust/commit/4a1423337ff311e81fd19c4166f08559b33f8b5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a1423337ff311e81fd19c4166f08559b33f8b5b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7959c248761081fc9d38c84d0d8b0ad60d20771d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7959c248761081fc9d38c84d0d8b0ad60d20771d", "html_url": "https://github.com/rust-lang/rust/commit/7959c248761081fc9d38c84d0d8b0ad60d20771d"}], "stats": {"total": 92, "additions": 51, "deletions": 41}, "files": [{"sha": "c9eb134e943085c647a377d7c24644f9bba1f21d", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 46, "deletions": 38, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/4a1423337ff311e81fd19c4166f08559b33f8b5b/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1423337ff311e81fd19c4166f08559b33f8b5b/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=4a1423337ff311e81fd19c4166f08559b33f8b5b", "patch": "@@ -299,45 +299,53 @@ impl SourceAnalyzer {\n         let parent = || parent.clone();\n \n         let mut prefer_value_ns = false;\n-        if let Some(path_expr) = parent().and_then(ast::PathExpr::cast) {\n-            let expr_id = self.expr_id(db, &path_expr.into())?;\n-            let infer = self.infer.as_ref()?;\n-            if let Some(assoc) = infer.assoc_resolutions_for_expr(expr_id) {\n-                return Some(PathResolution::Def(AssocItem::from(assoc).into()));\n-            }\n-            if let Some(VariantId::EnumVariantId(variant)) =\n-                infer.variant_resolution_for_expr(expr_id)\n-            {\n-                return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n-            }\n-            prefer_value_ns = true;\n-        } else if let Some(path_pat) = parent().and_then(ast::PathPat::cast) {\n-            let pat_id = self.pat_id(&path_pat.into())?;\n-            if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_pat(pat_id) {\n-                return Some(PathResolution::Def(AssocItem::from(assoc).into()));\n-            }\n-            if let Some(VariantId::EnumVariantId(variant)) =\n-                self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n-            {\n-                return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n-            }\n-        } else if let Some(rec_lit) = parent().and_then(ast::RecordExpr::cast) {\n-            let expr_id = self.expr_id(db, &rec_lit.into())?;\n-            if let Some(VariantId::EnumVariantId(variant)) =\n-                self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n-            {\n-                return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n-            }\n-        }\n-\n-        let record_pat = parent().and_then(ast::RecordPat::cast).map(ast::Pat::from);\n-        let tuple_struct_pat = || parent().and_then(ast::TupleStructPat::cast).map(ast::Pat::from);\n-        if let Some(pat) = record_pat.or_else(tuple_struct_pat) {\n-            let pat_id = self.pat_id(&pat)?;\n-            let variant_res_for_pat = self.infer.as_ref()?.variant_resolution_for_pat(pat_id);\n-            if let Some(VariantId::EnumVariantId(variant)) = variant_res_for_pat {\n-                return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n+        let resolved = (|| {\n+            if let Some(path_expr) = parent().and_then(ast::PathExpr::cast) {\n+                let expr_id = self.expr_id(db, &path_expr.into())?;\n+                let infer = self.infer.as_ref()?;\n+                if let Some(assoc) = infer.assoc_resolutions_for_expr(expr_id) {\n+                    return Some(PathResolution::Def(AssocItem::from(assoc).into()));\n+                }\n+                if let Some(VariantId::EnumVariantId(variant)) =\n+                    infer.variant_resolution_for_expr(expr_id)\n+                {\n+                    return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n+                }\n+                prefer_value_ns = true;\n+            } else if let Some(path_pat) = parent().and_then(ast::PathPat::cast) {\n+                let pat_id = self.pat_id(&path_pat.into())?;\n+                if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_pat(pat_id) {\n+                    return Some(PathResolution::Def(AssocItem::from(assoc).into()));\n+                }\n+                if let Some(VariantId::EnumVariantId(variant)) =\n+                    self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n+                {\n+                    return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n+                }\n+            } else if let Some(rec_lit) = parent().and_then(ast::RecordExpr::cast) {\n+                let expr_id = self.expr_id(db, &rec_lit.into())?;\n+                if let Some(VariantId::EnumVariantId(variant)) =\n+                    self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n+                {\n+                    return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n+                }\n+            } else {\n+                let record_pat = parent().and_then(ast::RecordPat::cast).map(ast::Pat::from);\n+                let tuple_struct_pat =\n+                    || parent().and_then(ast::TupleStructPat::cast).map(ast::Pat::from);\n+                if let Some(pat) = record_pat.or_else(tuple_struct_pat) {\n+                    let pat_id = self.pat_id(&pat)?;\n+                    let variant_res_for_pat =\n+                        self.infer.as_ref()?.variant_resolution_for_pat(pat_id);\n+                    if let Some(VariantId::EnumVariantId(variant)) = variant_res_for_pat {\n+                        return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n+                    }\n+                }\n             }\n+            None\n+        })();\n+        if let resolved @ Some(_) = resolved {\n+            return resolved;\n         }\n \n         // This must be a normal source file rather than macro file."}, {"sha": "d6c5feefa32af2f8398d9b83826544329855f509", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a1423337ff311e81fd19c4166f08559b33f8b5b/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1423337ff311e81fd19c4166f08559b33f8b5b/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=4a1423337ff311e81fd19c4166f08559b33f8b5b", "patch": "@@ -295,13 +295,13 @@ impl<'a> Ctx<'a> {\n                         let mut pat = param.pat();\n                         // FIXME: This really shouldn't be here, in fact FunctionData/ItemTree's function shouldn't know about\n                         // pattern names at all\n-                        let name = loop {\n+                        let name = 'name: loop {\n                             match pat {\n                                 Some(ast::Pat::RefPat(ref_pat)) => pat = ref_pat.pat(),\n                                 Some(ast::Pat::IdentPat(ident)) => {\n-                                    break ident.name().map(|it| it.as_name())\n+                                    break 'name ident.name().map(|it| it.as_name())\n                                 }\n-                                _ => break None,\n+                                _ => break 'name None,\n                             }\n                         };\n                         self.data().params.alloc(Param::Normal(name, ty))"}, {"sha": "7bb7ddd2804aff2ab2e1d9a644e185b78fcc3fd0", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_general.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a1423337ff311e81fd19c4166f08559b33f8b5b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "raw_url": "https://github.com/rust-lang/rust/raw/4a1423337ff311e81fd19c4166f08559b33f8b5b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html?ref=4a1423337ff311e81fd19c4166f08559b33f8b5b", "patch": "@@ -118,6 +118,7 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">const_param</span><span class=\"angle\">&lt;</span><span class=\"keyword\">const</span> <span class=\"const_param declaration\">FOO</span><span class=\"colon\">:</span> <span class=\"builtin_type\">usize</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">usize</span> <span class=\"brace\">{</span>\n+    <span class=\"function\">const_param</span><span class=\"operator\">::</span><span class=\"angle\">&lt;</span><span class=\"brace\">{</span> <span class=\"const_param\">FOO</span> <span class=\"brace\">}</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"const_param\">FOO</span>\n <span class=\"brace\">}</span>\n "}, {"sha": "e436a0574b5744517b6754418573f7702f4f8545", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a1423337ff311e81fd19c4166f08559b33f8b5b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1423337ff311e81fd19c4166f08559b33f8b5b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=4a1423337ff311e81fd19c4166f08559b33f8b5b", "patch": "@@ -172,6 +172,7 @@ fn never() -> ! {\n }\n \n fn const_param<const FOO: usize>() -> usize {\n+    const_param::<{ FOO }>();\n     FOO\n }\n "}]}