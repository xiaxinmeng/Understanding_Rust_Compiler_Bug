{"sha": "b5ceda86aa4a374810a214cfd5366c24f6048342", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1Y2VkYTg2YWE0YTM3NDgxMGEyMTRjZmQ1MzY2YzI0ZjYwNDgzNDI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-04T09:07:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-04T09:07:17Z"}, "message": "Rollup merge of #49540 - bjorn3:fix_miri_discriminant, r=oli-obk\n\nFix miri Discriminant() for non-ADT\n\nFixes #49327", "tree": {"sha": "f918074b61c7e67ef061cba93b5373f3012e7dea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f918074b61c7e67ef061cba93b5373f3012e7dea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ceda86aa4a374810a214cfd5366c24f6048342", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaxJXFCRBK7hj4Ov3rIwAAdHIIABsAkG1+9ezxUAPadlHXA3k7\nAas6xputpt3cqCm45nizNtKagwkmO6gP/rhehQH3G19EtzwfT0KFHowokb6NZ0ts\nzws1exGbnCB5QVTOV9xVn8dZT1Nrxr7NIula5Zk0Ynd2OWBDlfui60xXtikPk7cq\ndb/mkzR9YYdXzKUnlmdV5nbkXw+9LG3NQgN9TaV3DEK5P2iFZcmC0okqJpFP94b7\nLAVNHlMAavSbNHdoADT1mqs4CAg6BND/uqrweut/ifYsGYAe4d8hBXziyrb/jin+\n3Al9PtwpjQOgs3aoDqI3mVu8/FO3tUglogvLdIw9xEu1IIeC7IP6K4kp3mNBARI=\n=ptgn\n-----END PGP SIGNATURE-----\n", "payload": "tree f918074b61c7e67ef061cba93b5373f3012e7dea\nparent 6c8b8091fc73f5cec88d838d32fa165f54ac4ead\nparent 7a28ffce90271b82f89fd6a3fa110b5c25795ce2\nauthor kennytm <kennytm@gmail.com> 1522832837 +0200\ncommitter GitHub <noreply@github.com> 1522832837 +0200\n\nRollup merge of #49540 - bjorn3:fix_miri_discriminant, r=oli-obk\n\nFix miri Discriminant() for non-ADT\n\nFixes #49327\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ceda86aa4a374810a214cfd5366c24f6048342", "html_url": "https://github.com/rust-lang/rust/commit/b5ceda86aa4a374810a214cfd5366c24f6048342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ceda86aa4a374810a214cfd5366c24f6048342/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c8b8091fc73f5cec88d838d32fa165f54ac4ead", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8b8091fc73f5cec88d838d32fa165f54ac4ead", "html_url": "https://github.com/rust-lang/rust/commit/6c8b8091fc73f5cec88d838d32fa165f54ac4ead"}, {"sha": "7a28ffce90271b82f89fd6a3fa110b5c25795ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a28ffce90271b82f89fd6a3fa110b5c25795ce2", "html_url": "https://github.com/rust-lang/rust/commit/7a28ffce90271b82f89fd6a3fa110b5c25795ce2"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "cf3241fe9be662d6938e7d551020cbee98db5a4d", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b5ceda86aa4a374810a214cfd5366c24f6048342/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ceda86aa4a374810a214cfd5366c24f6048342/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b5ceda86aa4a374810a214cfd5366c24f6048342", "patch": "@@ -743,20 +743,29 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n             Discriminant(ref place) => {\n                 let ty = self.place_ty(place);\n+                let layout = self.layout_of(ty)?;\n                 let place = self.eval_place(place)?;\n                 let discr_val = self.read_discriminant_value(place, ty)?;\n-                if let ty::TyAdt(adt_def, _) = ty.sty {\n-                    trace!(\"Read discriminant {}, valid discriminants {:?}\", discr_val, adt_def.discriminants(*self.tcx).collect::<Vec<_>>());\n-                    if adt_def.discriminants(*self.tcx).all(|v| {\n-                        discr_val != v.val\n-                    })\n-                    {\n-                        return err!(InvalidDiscriminant);\n+                match layout.variants {\n+                    layout::Variants::Single { index } => {\n+                        assert_eq!(discr_val, index as u128);\n+                    }\n+                    layout::Variants::Tagged { .. } |\n+                    layout::Variants::NicheFilling { .. } => {\n+                        if let ty::TyAdt(adt_def, _) = ty.sty {\n+                            trace!(\"Read discriminant {}, valid discriminants {:?}\", discr_val, adt_def.discriminants(*self.tcx).collect::<Vec<_>>());\n+                            if adt_def.discriminants(*self.tcx).all(|v| {\n+                                discr_val != v.val\n+                            })\n+                            {\n+                                return err!(InvalidDiscriminant);\n+                            }\n+                        } else {\n+                            bug!(\"rustc only generates Rvalue::Discriminant for enums\");\n+                        }\n                     }\n-                    self.write_primval(dest, PrimVal::Bytes(discr_val), dest_ty)?;\n-                } else {\n-                    bug!(\"rustc only generates Rvalue::Discriminant for enums\");\n                 }\n+                self.write_primval(dest, PrimVal::Bytes(discr_val), dest_ty)?;\n             }\n         }\n "}]}