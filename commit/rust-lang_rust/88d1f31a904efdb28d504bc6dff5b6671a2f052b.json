{"sha": "88d1f31a904efdb28d504bc6dff5b6671a2f052b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZDFmMzFhOTA0ZWZkYjI4ZDUwNGJjNmRmZjViNjY3MWEyZjA1MmI=", "commit": {"author": {"name": "Andreas Jonson", "email": "andjo403@users.noreply.github.com", "date": "2020-11-16T21:47:35Z"}, "committer": {"name": "Andreas Jonson", "email": "andjo403@users.noreply.github.com", "date": "2020-11-16T21:47:35Z"}, "message": "mark raw_vec::ptr with inline", "tree": {"sha": "19d4074b52bbb882449e2aebc0e455728005f2fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d4074b52bbb882449e2aebc0e455728005f2fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88d1f31a904efdb28d504bc6dff5b6671a2f052b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88d1f31a904efdb28d504bc6dff5b6671a2f052b", "html_url": "https://github.com/rust-lang/rust/commit/88d1f31a904efdb28d504bc6dff5b6671a2f052b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88d1f31a904efdb28d504bc6dff5b6671a2f052b/comments", "author": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fab31e5ddf5f2613bf57a0a7286dc6f5887e1cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fab31e5ddf5f2613bf57a0a7286dc6f5887e1cb", "html_url": "https://github.com/rust-lang/rust/commit/5fab31e5ddf5f2613bf57a0a7286dc6f5887e1cb"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "f911658cea63ecc73bd11b6f15724f5bdd1ccfce", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88d1f31a904efdb28d504bc6dff5b6671a2f052b/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1f31a904efdb28d504bc6dff5b6671a2f052b/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=88d1f31a904efdb28d504bc6dff5b6671a2f052b", "patch": "@@ -220,6 +220,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     /// Gets a raw pointer to the start of the allocation. Note that this is\n     /// `Unique::dangling()` if `capacity == 0` or `T` is zero-sized. In the former case, you must\n     /// be careful.\n+    #[inline]\n     pub fn ptr(&self) -> *mut T {\n         self.ptr.as_ptr()\n     }"}]}