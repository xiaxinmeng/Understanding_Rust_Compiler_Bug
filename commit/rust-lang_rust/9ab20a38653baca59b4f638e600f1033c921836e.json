{"sha": "9ab20a38653baca59b4f638e600f1033c921836e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYjIwYTM4NjUzYmFjYTU5YjRmNjM4ZTYwMGYxMDMzYzkyMTgzNmU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-09-01T00:24:26Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-09-01T00:24:26Z"}, "message": "rustdoc: collect rendering warnings and print them in one place", "tree": {"sha": "eb7948b3e2e4057ddf203ae38a49abd36120a0a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb7948b3e2e4057ddf203ae38a49abd36120a0a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ab20a38653baca59b4f638e600f1033c921836e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab20a38653baca59b4f638e600f1033c921836e", "html_url": "https://github.com/rust-lang/rust/commit/9ab20a38653baca59b4f638e600f1033c921836e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ab20a38653baca59b4f638e600f1033c921836e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f50a9dee10b8b0374ae4031fb988b6f0c8c874", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f50a9dee10b8b0374ae4031fb988b6f0c8c874", "html_url": "https://github.com/rust-lang/rust/commit/a5f50a9dee10b8b0374ae4031fb988b6f0c8c874"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "d86f6a4875db7d5642380eeab300b77748ba5a6d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9ab20a38653baca59b4f638e600f1033c921836e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab20a38653baca59b4f638e600f1033c921836e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9ab20a38653baca59b4f638e600f1033c921836e", "patch": "@@ -124,6 +124,9 @@ pub struct SharedContext {\n     /// The given user css file which allow to customize the generated\n     /// documentation theme.\n     pub css_file_extension: Option<PathBuf>,\n+    /// Warnings for the user if rendering would differ using different markdown\n+    /// parsers.\n+    pub markdown_warnings: RefCell<Vec<(String, Vec<String>)>>,\n }\n \n /// Indicates where an external crate can be found.\n@@ -457,6 +460,7 @@ pub fn run(mut krate: clean::Crate,\n             krate: krate.name.clone(),\n         },\n         css_file_extension: css_file_extension.clone(),\n+        markdown_warnings: RefCell::new(vec![]),\n     };\n \n     // If user passed in `--playground-url` arg, we fill in crate name here\n@@ -579,8 +583,19 @@ pub fn run(mut krate: clean::Crate,\n \n     write_shared(&cx, &krate, &*cache, index)?;\n \n+    let scx = cx.shared.clone();\n+\n     // And finally render the whole crate's documentation\n-    cx.krate(krate)\n+    let result = cx.krate(krate);\n+\n+    let markdown_warnings = scx.markdown_warnings.borrow();\n+    for &(ref text, ref diffs) in &*markdown_warnings {\n+        println!(\"Differences spotted in {:?}:\\n{}\",\n+             text,\n+             diffs.join(\"\\n\"));\n+    }\n+\n+    result\n }\n \n /// Build the search index from the collected metadata\n@@ -1641,12 +1656,18 @@ fn plain_summary_line(s: Option<&str>) -> String {\n fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Result {\n     document_stability(w, cx, item)?;\n     let prefix = render_assoc_const_value(item);\n-    document_full(w, item, cx.render_type, &prefix)?;\n+    document_full(w, item, cx, &prefix)?;\n     Ok(())\n }\n \n-fn render_markdown(w: &mut fmt::Formatter, md_text: &str, render_type: RenderType,\n-                 prefix: &str) -> fmt::Result {\n+/// Render md_text as markdown. Warns the user if there are difference in\n+/// rendering between Pulldown and Hoedown.\n+fn render_markdown(w: &mut fmt::Formatter,\n+                   md_text: &str,\n+                   render_type: RenderType,\n+                   prefix: &str,\n+                   scx: &SharedContext)\n+                   -> fmt::Result {\n     let hoedown_output = format!(\"{}\", Markdown(md_text, RenderType::Hoedown));\n     // We only emit warnings if the user has opted-in to Pulldown rendering.\n     let output = if render_type == RenderType::Pulldown {\n@@ -1665,10 +1686,7 @@ fn render_markdown(w: &mut fmt::Formatter, md_text: &str, render_type: RenderTyp\n             .collect::<Vec<String>>();\n \n         if !differences.is_empty() {\n-            // Emit warnings if there are differences.\n-            println!(\"Differences spotted in {:?}:\\n{}\",\n-                     md_text,\n-                     differences.join(\"\\n\"));\n+            scx.markdown_warnings.borrow_mut().push((md_text.to_owned(), differences));\n         }\n \n         pulldown_output\n@@ -1680,15 +1698,15 @@ fn render_markdown(w: &mut fmt::Formatter, md_text: &str, render_type: RenderTyp\n }\n \n fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLink,\n-                  render_type: RenderType, prefix: &str) -> fmt::Result {\n+                  cx: &Context, prefix: &str) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n         let markdown = if s.contains('\\n') {\n             format!(\"{} [Read more]({})\",\n                     &plain_summary_line(Some(s)), naive_assoc_href(item, link))\n         } else {\n             format!(\"{}\", &plain_summary_line(Some(s)))\n         };\n-        render_markdown(w, &markdown, render_type, prefix)?;\n+        render_markdown(w, &markdown, cx.render_type, prefix, &cx.shared)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -1710,9 +1728,9 @@ fn render_assoc_const_value(item: &clean::Item) -> String {\n }\n \n fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n-                 render_type: RenderType, prefix: &str) -> fmt::Result {\n+                 cx: &Context, prefix: &str) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n-        render_markdown(w, s, render_type, prefix)?;\n+        render_markdown(w, s, cx.render_type, prefix, &cx.shared)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -3111,20 +3129,20 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                         // because impls can't have a stability.\n                         document_stability(w, cx, it)?;\n                         if item.doc_value().is_some() {\n-                            document_full(w, item, cx.render_type, &prefix)?;\n+                            document_full(w, item, cx, &prefix)?;\n                         } else {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n-                            document_short(w, it, link, cx.render_type, &prefix)?;\n+                            document_short(w, it, link, cx, &prefix)?;\n                         }\n                     }\n                 } else {\n                     document_stability(w, cx, item)?;\n-                    document_full(w, item, cx.render_type, &prefix)?;\n+                    document_full(w, item, cx, &prefix)?;\n                 }\n             } else {\n                 document_stability(w, cx, item)?;\n-                document_short(w, item, link, cx.render_type, &prefix)?;\n+                document_short(w, item, link, cx, &prefix)?;\n             }\n         }\n         Ok(())"}]}