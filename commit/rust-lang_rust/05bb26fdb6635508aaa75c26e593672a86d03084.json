{"sha": "05bb26fdb6635508aaa75c26e593672a86d03084", "node_id": "C_kwDOAAsO6NoAKDA1YmIyNmZkYjY2MzU1MDhhYWE3NWMyNmU1OTM2NzJhODZkMDMwODQ", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-01-28T14:49:15Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-23T14:25:56Z"}, "message": "Add tests", "tree": {"sha": "f4246b6fc8c3e8989e57f31c3e1cbfc8f11ea7fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4246b6fc8c3e8989e57f31c3e1cbfc8f11ea7fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05bb26fdb6635508aaa75c26e593672a86d03084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05bb26fdb6635508aaa75c26e593672a86d03084", "html_url": "https://github.com/rust-lang/rust/commit/05bb26fdb6635508aaa75c26e593672a86d03084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05bb26fdb6635508aaa75c26e593672a86d03084/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08cb87843010ef1dcee0e8bc91c3d95eed70c1eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/08cb87843010ef1dcee0e8bc91c3d95eed70c1eb", "html_url": "https://github.com/rust-lang/rust/commit/08cb87843010ef1dcee0e8bc91c3d95eed70c1eb"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "7b38c15afc20b238a4566626b71dbb2232f4af4d", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05bb26fdb6635508aaa75c26e593672a86d03084/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05bb26fdb6635508aaa75c26e593672a86d03084/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs?ref=05bb26fdb6635508aaa75c26e593672a86d03084", "patch": "@@ -0,0 +1,14 @@\n+#![feature(const_trait_impl)]\n+\n+trait Foo {\n+    fn a(&self);\n+}\n+trait Bar: ~const Foo {}\n+\n+const fn foo<T: Bar>(x: &T) {\n+    x.a();\n+    //~^ ERROR the trait bound\n+    //~| ERROR cannot call\n+}\n+\n+fn main() {}"}, {"sha": "1766cdbee8af2b11d217576dff986e85bc76be5a", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/05bb26fdb6635508aaa75c26e593672a86d03084/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05bb26fdb6635508aaa75c26e593672a86d03084/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.stderr?ref=05bb26fdb6635508aaa75c26e593672a86d03084", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n+  --> $DIR/super-traits-fail-2.rs:9:7\n+   |\n+LL |     x.a();\n+   |       ^^^ the trait `~const Foo` is not implemented for `T`\n+   |\n+note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/super-traits-fail-2.rs:9:7\n+   |\n+LL |     x.a();\n+   |       ^^^\n+\n+error[E0015]: cannot call non-const fn `<T as Foo>::a` in constant functions\n+  --> $DIR/super-traits-fail-2.rs:9:7\n+   |\n+LL |     x.a();\n+   |       ^^^\n+   |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "af465cad3d2400c7dfc59f72e5bfac59f45fcb07", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05bb26fdb6635508aaa75c26e593672a86d03084/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05bb26fdb6635508aaa75c26e593672a86d03084/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.rs?ref=05bb26fdb6635508aaa75c26e593672a86d03084", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_trait_impl)]\n+\n+trait Foo {\n+    fn a(&self);\n+}\n+trait Bar: ~const Foo {}\n+\n+struct S;\n+impl Foo for S {\n+    fn a(&self) {}\n+}\n+\n+impl const Bar for S {}\n+//~^ ERROR the trait bound\n+\n+fn main() {}"}, {"sha": "9e8b8f8c6ba1f7fce18d85fb0eace9c747141b92", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/05bb26fdb6635508aaa75c26e593672a86d03084/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05bb26fdb6635508aaa75c26e593672a86d03084/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr?ref=05bb26fdb6635508aaa75c26e593672a86d03084", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: the trait bound `S: ~const Foo` is not satisfied\n+  --> $DIR/super-traits-fail.rs:13:12\n+   |\n+LL | impl const Bar for S {}\n+   |            ^^^ the trait `~const Foo` is not implemented for `S`\n+   |\n+note: the trait `Foo` is implemented for `S`, but that implementation is not `const`\n+  --> $DIR/super-traits-fail.rs:13:12\n+   |\n+LL | impl const Bar for S {}\n+   |            ^^^\n+note: required by a bound in `Bar`\n+  --> $DIR/super-traits-fail.rs:6:12\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |            ^^^^^^^^^^ required by this bound in `Bar`\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | impl const Bar for S where S: ~const Foo {}\n+   |                      +++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "aded4ca9a998cbe0b4c749e1f2d3e9afa5b6bdca", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05bb26fdb6635508aaa75c26e593672a86d03084/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05bb26fdb6635508aaa75c26e593672a86d03084/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits.rs?ref=05bb26fdb6635508aaa75c26e593672a86d03084", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+#![feature(const_trait_impl)]\n+\n+trait Foo {\n+    fn a(&self);\n+}\n+trait Bar: ~const Foo {}\n+\n+struct S;\n+impl const Foo for S {\n+    fn a(&self) {}\n+}\n+\n+impl const Bar for S {}\n+\n+const fn foo<T: ~const Bar>(t: &T) {\n+    t.a();\n+}\n+\n+const _: () = foo(&S);\n+\n+fn main() {}"}]}