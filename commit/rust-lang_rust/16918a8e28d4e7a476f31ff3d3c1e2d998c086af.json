{"sha": "16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2OTE4YThlMjhkNGU3YTQ3NmYzMWZmM2QzYzFlMmQ5OThjMDg2YWY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-18T22:08:45Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:07Z"}, "message": "Rename some things in `syntax_pos/hygiene`\n\nMore consistent with other naming:\nExpnFormat -> ExpnKind\nExpnKind::name -> ExpnKind::descr\nDesugaringKind::name -> DesugaringKind::descr\n\nShorter, no tautology:\nCompilerDesugaring -> Desugaring\nCompilerDesugaringKind -> DesugaringKind", "tree": {"sha": "dfb8cbb1c6f60085551a0dd32c57fda7b56c8396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfb8cbb1c6f60085551a0dd32c57fda7b56c8396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "html_url": "https://github.com/rust-lang/rust/commit/16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec376c783e3a64445c4b55fb5980ae922319a916", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec376c783e3a64445c4b55fb5980ae922319a916", "html_url": "https://github.com/rust-lang/rust/commit/ec376c783e3a64445c4b55fb5980ae922319a916"}], "stats": {"total": 221, "additions": 111, "deletions": 110}, "files": [{"sha": "549c34d961aa4799924fc256fd1944d0a434d1d1", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -62,8 +62,7 @@ use syntax::ast::*;\n use syntax::errors;\n use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::print::pprust;\n-use syntax::source_map::{self, respan, ExpnInfo, CompilerDesugaringKind, Spanned};\n-use syntax::source_map::CompilerDesugaringKind::CondTemporary;\n+use syntax::source_map::{respan, ExpnInfo, ExpnKind, DesugaringKind, Spanned};\n use syntax::std_inject;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::tokenstream::{TokenStream, TokenTree};\n@@ -872,15 +871,15 @@ impl<'a> LoweringContext<'a> {\n     /// allowed inside this span.\n     fn mark_span_with_reason(\n         &self,\n-        reason: CompilerDesugaringKind,\n+        reason: DesugaringKind,\n         span: Span,\n         allow_internal_unstable: Option<Lrc<[Symbol]>>,\n     ) -> Span {\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(ExpnInfo {\n             def_site: Some(span),\n             allow_internal_unstable,\n-            ..ExpnInfo::default(source_map::CompilerDesugaring(reason), span, self.sess.edition())\n+            ..ExpnInfo::default(ExpnKind::Desugaring(reason), span, self.sess.edition())\n         });\n         span.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n     }\n@@ -1188,7 +1187,7 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         let unstable_span = self.mark_span_with_reason(\n-            CompilerDesugaringKind::Async,\n+            DesugaringKind::Async,\n             span,\n             self.allow_gen_future.clone(),\n         );\n@@ -1733,7 +1732,7 @@ impl<'a> LoweringContext<'a> {\n         // Not tracking it makes lints in rustc and clippy very fragile, as\n         // frequently opened issues show.\n         let exist_ty_span = self.mark_span_with_reason(\n-            CompilerDesugaringKind::ExistentialType,\n+            DesugaringKind::ExistentialType,\n             span,\n             None,\n         );\n@@ -2603,7 +2602,7 @@ impl<'a> LoweringContext<'a> {\n         let span = output.span();\n \n         let exist_ty_span = self.mark_span_with_reason(\n-            CompilerDesugaringKind::Async,\n+            DesugaringKind::Async,\n             span,\n             None,\n         );\n@@ -3275,7 +3274,7 @@ impl<'a> LoweringContext<'a> {\n                 };\n \n                 let desugared_span =\n-                    this.mark_span_with_reason(CompilerDesugaringKind::Async, span, None);\n+                    this.mark_span_with_reason(DesugaringKind::Async, span, None);\n \n                 // Construct an argument representing `__argN: <ty>` to replace the argument of the\n                 // async function.\n@@ -4410,7 +4409,9 @@ impl<'a> LoweringContext<'a> {\n                     _ => {\n                         // Lower condition:\n                         let cond = self.lower_expr(cond);\n-                        let span_block = self.mark_span_with_reason(CondTemporary, cond.span, None);\n+                        let span_block = self.mark_span_with_reason(\n+                            DesugaringKind::CondTemporary, cond.span, None\n+                        );\n                         // Wrap in a construct equivalent to `{ let _t = $cond; _t }`\n                         // to preserve drop semantics since `if cond { ... }` does not\n                         // let temporaries live outside of `cond`.\n@@ -4469,7 +4470,9 @@ impl<'a> LoweringContext<'a> {\n \n                         // Lower condition:\n                         let cond = this.with_loop_condition_scope(|this| this.lower_expr(cond));\n-                        let span_block = this.mark_span_with_reason(CondTemporary, cond.span, None);\n+                        let span_block = this.mark_span_with_reason(\n+                            DesugaringKind::CondTemporary, cond.span, None\n+                        );\n                         // Wrap in a construct equivalent to `{ let _t = $cond; _t }`\n                         // to preserve drop semantics since `while cond { ... }` does not\n                         // let temporaries live outside of `cond`.\n@@ -4508,7 +4511,7 @@ impl<'a> LoweringContext<'a> {\n             ExprKind::TryBlock(ref body) => {\n                 self.with_catch_scope(body.id, |this| {\n                     let unstable_span = this.mark_span_with_reason(\n-                        CompilerDesugaringKind::TryBlock,\n+                        DesugaringKind::TryBlock,\n                         body.span,\n                         this.allow_try_trait.clone(),\n                     );\n@@ -4836,7 +4839,7 @@ impl<'a> LoweringContext<'a> {\n                 let mut head = self.lower_expr(head);\n                 let head_sp = head.span;\n                 let desugared_span = self.mark_span_with_reason(\n-                    CompilerDesugaringKind::ForLoop,\n+                    DesugaringKind::ForLoop,\n                     head_sp,\n                     None,\n                 );\n@@ -4990,13 +4993,13 @@ impl<'a> LoweringContext<'a> {\n                 // }\n \n                 let unstable_span = self.mark_span_with_reason(\n-                    CompilerDesugaringKind::QuestionMark,\n+                    DesugaringKind::QuestionMark,\n                     e.span,\n                     self.allow_try_trait.clone(),\n                 );\n                 let try_span = self.sess.source_map().end_point(e.span);\n                 let try_span = self.mark_span_with_reason(\n-                    CompilerDesugaringKind::QuestionMark,\n+                    DesugaringKind::QuestionMark,\n                     try_span,\n                     self.allow_try_trait.clone(),\n                 );\n@@ -5811,12 +5814,12 @@ impl<'a> LoweringContext<'a> {\n             }\n         }\n         let span = self.mark_span_with_reason(\n-            CompilerDesugaringKind::Await,\n+            DesugaringKind::Await,\n             await_span,\n             None,\n         );\n         let gen_future_span = self.mark_span_with_reason(\n-            CompilerDesugaringKind::Await,\n+            DesugaringKind::Await,\n             await_span,\n             self.allow_gen_future.clone(),\n         );"}, {"sha": "f679a65c642f9e7ce85989a2c61b4f56bf54589f", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -398,7 +398,7 @@ impl_stable_hash_for!(enum ::syntax_pos::hygiene::Transparency {\n \n impl_stable_hash_for!(struct ::syntax_pos::hygiene::ExpnInfo {\n     call_site,\n-    format,\n+    kind,\n     def_site,\n     default_transparency,\n     allow_internal_unstable,\n@@ -407,13 +407,13 @@ impl_stable_hash_for!(struct ::syntax_pos::hygiene::ExpnInfo {\n     edition\n });\n \n-impl_stable_hash_for!(enum ::syntax_pos::hygiene::ExpnFormat {\n+impl_stable_hash_for!(enum ::syntax_pos::hygiene::ExpnKind {\n     MacroAttribute(sym),\n     MacroBang(sym),\n-    CompilerDesugaring(kind)\n+    Desugaring(kind)\n });\n \n-impl_stable_hash_for!(enum ::syntax_pos::hygiene::CompilerDesugaringKind {\n+impl_stable_hash_for!(enum ::syntax_pos::hygiene::DesugaringKind {\n     CondTemporary,\n     Async,\n     Await,"}, {"sha": "770d5155777bb5045050aac6142740839c46a482", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -5,7 +5,7 @@ use crate::infer::InferCtxt;\n use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::ty::{self, Ty, Infer, TyVar};\n use crate::ty::print::Print;\n-use syntax::source_map::CompilerDesugaringKind;\n+use syntax::source_map::DesugaringKind;\n use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n \n@@ -194,12 +194,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             ));\n         } else if let Some(pattern) = local_visitor.found_local_pattern {\n             if let Some(simple_ident) = pattern.simple_ident() {\n-                match pattern.span.compiler_desugaring_kind() {\n+                match pattern.span.desugaring_kind() {\n                     None => labels.push((\n                         pattern.span,\n                         format!(\"consider giving `{}` {}\", simple_ident, suffix),\n                     )),\n-                    Some(CompilerDesugaringKind::ForLoop) => labels.push((\n+                    Some(DesugaringKind::ForLoop) => labels.push((\n                         pattern.span,\n                         \"the element type for this iterator is not specified\".to_owned(),\n                     )),"}, {"sha": "0b514f5927d30ad9980ad0f7e3a4e9d1a21a79fc", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -247,10 +247,10 @@ impl EarlyLintPass for LintPassImpl {\n }\n \n fn is_lint_pass_expansion(expn_info: &ExpnInfo) -> bool {\n-    if expn_info.format.name() == sym::impl_lint_pass {\n+    if expn_info.kind.descr() == sym::impl_lint_pass {\n         true\n     } else if let Some(info) = expn_info.call_site.ctxt().outer_expn_info() {\n-        info.format.name() == sym::declare_lint_pass\n+        info.kind.descr() == sym::declare_lint_pass\n     } else {\n         false\n     }"}, {"sha": "2bf4f1d3cfbba5a39d0398cf181f8af6b728838d", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -35,7 +35,7 @@ use crate::util::nodemap::NodeMap;\n use errors::{DiagnosticBuilder, DiagnosticId};\n use std::{hash, ptr};\n use syntax::ast;\n-use syntax::source_map::{MultiSpan, ExpnFormat, CompilerDesugaringKind};\n+use syntax::source_map::{MultiSpan, ExpnKind, DesugaringKind};\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n use syntax::edition::Edition;\n use syntax::symbol::{Symbol, sym};\n@@ -883,11 +883,11 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n         None => return false,\n     };\n \n-    match info.format {\n-        ExpnFormat::MacroAttribute(..) => true, // definitely a plugin\n-        ExpnFormat::CompilerDesugaring(CompilerDesugaringKind::ForLoop) => false,\n-        ExpnFormat::CompilerDesugaring(_) => true, // well, it's \"external\"\n-        ExpnFormat::MacroBang(..) => {\n+    match info.kind {\n+        ExpnKind::MacroAttribute(..) => true, // definitely a plugin\n+        ExpnKind::Desugaring(DesugaringKind::ForLoop) => false,\n+        ExpnKind::Desugaring(_) => true, // well, it's \"external\"\n+        ExpnKind::MacroBang(..) => {\n             let def_site = match info.def_site {\n                 Some(span) => span,\n                 // no span for the def_site means it's an external macro\n@@ -911,8 +911,8 @@ pub fn in_derive_expansion(span: Span) -> bool {\n         None => return false,\n     };\n \n-    match info.format {\n-        ExpnFormat::MacroAttribute(symbol) => symbol.as_str().starts_with(\"derive(\"),\n+    match info.kind {\n+        ExpnKind::MacroAttribute(symbol) => symbol.as_str().starts_with(\"derive(\"),\n         _ => false,\n     }\n }"}, {"sha": "ff868bf2a2ad2437fbef13967c35822f76e12fe3", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -928,7 +928,7 @@ impl<'tcx> LocalDecl<'tcx> {\n     /// `__next` from a `for` loop.\n     #[inline]\n     pub fn from_compiler_desugaring(&self) -> bool {\n-        self.source_info.span.compiler_desugaring_kind().is_some()\n+        self.source_info.span.desugaring_kind().is_some()\n     }\n \n     /// Creates a new `LocalDecl` for a temporary."}, {"sha": "fb7ed1474450287d5f5c7266da17cc1971607d48", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -36,7 +36,7 @@ use errors::{Applicability, DiagnosticBuilder};\n use std::fmt;\n use syntax::ast;\n use syntax::symbol::sym;\n-use syntax_pos::{DUMMY_SP, Span, ExpnInfo, ExpnFormat};\n+use syntax_pos::{DUMMY_SP, Span, ExpnInfo, ExpnKind};\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn report_fulfillment_errors(&self,\n@@ -62,7 +62,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // if one is the result of a desugaring and the other is not.\n             let mut span = error.obligation.cause.span;\n             if let Some(ExpnInfo {\n-                format: ExpnFormat::CompilerDesugaring(_),\n+                kind: ExpnKind::Desugaring(_),\n                 def_site: Some(def_span),\n                 ..\n             }) = span.ctxt().outer_expn_info() {\n@@ -373,9 +373,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             flags.push((sym::parent_trait, Some(t)));\n         }\n \n-        if let Some(k) = obligation.cause.span.compiler_desugaring_kind() {\n+        if let Some(k) = obligation.cause.span.desugaring_kind() {\n             flags.push((sym::from_desugaring, None));\n-            flags.push((sym::from_desugaring, Some(k.name().to_string())));\n+            flags.push((sym::from_desugaring, Some(k.descr().to_string())));\n         }\n         let generics = self.tcx.generics_of(def_id);\n         let self_ty = trait_ref.self_ty();"}, {"sha": "18bbb2571288dddf6122fa86583f3b2ad7b373c8", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -8,7 +8,7 @@ use syntax::{\n     },\n     attr,\n     source_map::{\n-        respan, ExpnInfo, MacroAttribute,\n+        respan, ExpnInfo, ExpnKind,\n     },\n     ext::{\n         base::{ExtCtxt, Resolver},\n@@ -87,7 +87,8 @@ impl MutVisitor for ExpandAllocatorDirectives<'_> {\n         // Create a fresh Mark for the new macro expansion we are about to do\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(ExpnInfo::with_unstable(\n-            MacroAttribute(sym::global_allocator), item.span, self.sess.edition, &[sym::rustc_attrs]\n+            ExpnKind::MacroAttribute(sym::global_allocator), item.span, self.sess.edition,\n+            &[sym::rustc_attrs],\n         ));\n \n         // Tie the span to the macro expansion info we just created"}, {"sha": "9a581cb03ecd030aa330f9445f3656a4b6efaa54", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -33,7 +33,7 @@ use std::cell::{Cell, RefCell};\n use std::fmt;\n use std::rc::Rc;\n use std::hash::{Hash, Hasher};\n-use syntax::source_map::CompilerDesugaringKind;\n+use syntax::source_map::DesugaringKind;\n use syntax_pos::{MultiSpan, Span};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use log::debug;\n@@ -734,8 +734,8 @@ impl BorrowckCtxt<'_, 'tcx> {\n                 },\n                 moved_lp.ty));\n         }\n-        if let (Some(CompilerDesugaringKind::ForLoop), Ok(snippet)) = (\n-            move_span.compiler_desugaring_kind(),\n+        if let (Some(DesugaringKind::ForLoop), Ok(snippet)) = (\n+            move_span.desugaring_kind(),\n             self.tcx.sess.source_map().span_to_snippet(move_span),\n          ) {\n             if !snippet.starts_with(\"&\") {"}, {"sha": "7b5fce4abbc4bf6a7d77f29763682dd018e062aa", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n-use syntax::source_map::CompilerDesugaringKind;\n+use syntax::source_map::DesugaringKind;\n \n use super::nll::explain_borrow::BorrowExplanation;\n use super::nll::region_infer::{RegionName, RegionNameSource};\n@@ -174,7 +174,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         format!(\"variable moved due to use{}\", move_spans.describe()),\n                     );\n                 }\n-                if Some(CompilerDesugaringKind::ForLoop) == move_span.compiler_desugaring_kind() {\n+                if Some(DesugaringKind::ForLoop) == move_span.desugaring_kind() {\n                     if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n                         err.span_suggestion(\n                             move_span,"}, {"sha": "31a9766af303adc840e7d3a6c01f533339865448", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -335,7 +335,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n             }\n \n             let span = local_decl.source_info.span;\n-            if span.compiler_desugaring_kind().is_some() {\n+            if span.desugaring_kind().is_some() {\n                 // If the `mut` arises as part of a desugaring, we should ignore it.\n                 continue;\n             }"}, {"sha": "fab2537f9d8f181bbdf4bfdecff7a63a7c8c07ed", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -37,7 +37,6 @@ use syntax::parse::lexer::comments::strip_doc_comment_decoration;\n use syntax::print::pprust;\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{arg_to_string, ty_to_string};\n-use syntax::source_map::MacroAttribute;\n use syntax_pos::*;\n \n use json_dumper::JsonDumper;\n@@ -845,7 +844,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         let callee_span = callee.def_site?;\n \n         // Ignore attribute macros, their spans are usually mangled\n-        if let MacroAttribute(_) = callee.format {\n+        if let ExpnKind::MacroAttribute(_) = callee.kind {\n             return None;\n         }\n \n@@ -870,7 +869,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         let callee_span = self.span_from_span(callee_span);\n         Some(MacroRef {\n             span: callsite_span,\n-            qualname: callee.format.name().to_string(), // FIXME: generate the real qualname\n+            qualname: callee.kind.descr().to_string(), // FIXME: generate the real qualname\n             callee_span,\n         })\n     }"}, {"sha": "de42a6a35c89a343d012f41e26fdacfbc9f29fca", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -15,7 +15,7 @@ use syntax::ast;\n use syntax::source_map::Spanned;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::Span;\n-use syntax_pos::hygiene::CompilerDesugaringKind;\n+use syntax_pos::hygiene::DesugaringKind;\n \n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::cmp;\n@@ -184,7 +184,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // In the case of `if`- and `while`-expressions we've already checked\n                             // that `scrutinee: bool`. We know that the pattern is `true`,\n                             // so an error here would be a duplicate and from the wrong POV.\n-                            s.is_compiler_desugaring(CompilerDesugaringKind::CondTemporary)\n+                            s.is_desugaring(DesugaringKind::CondTemporary)\n                         })\n                         .is_some());\n                 }"}, {"sha": "d32ee67f7458811a4f724651e5b7a16c1f1905b0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -119,7 +119,7 @@ use rustc::ty::subst::{UnpackedKind, Subst, InternalSubsts, SubstsRef, UserSelfT\n use rustc::ty::util::{Representability, IntTypeExt, Discr};\n use rustc::ty::layout::VariantIdx;\n use syntax_pos::{self, BytePos, Span, MultiSpan};\n-use syntax_pos::hygiene::CompilerDesugaringKind;\n+use syntax_pos::hygiene::DesugaringKind;\n use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n@@ -2165,7 +2165,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // If span arose from a desugaring of `if` or `while`, then it is the condition itself,\n             // which diverges, that we are about to lint on. This gives suboptimal diagnostics.\n             // Instead, stop here so that the `if`- or `while`-expression's block is linted instead.\n-            !span.is_compiler_desugaring(CompilerDesugaringKind::CondTemporary) {\n+            !span.is_desugaring(DesugaringKind::CondTemporary) {\n             self.diverges.set(Diverges::WarnedAlways);\n \n             debug!(\"warn_if_unreachable: id={:?} span={:?} kind={}\", id, span, kind);"}, {"sha": "0c986574cece4c7721df544d4cdf814f503d9c7c", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -15,7 +15,7 @@ use crate::tokenstream::{self, TokenStream};\n use errors::{DiagnosticBuilder, DiagnosticId};\n use smallvec::{smallvec, SmallVec};\n use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n-use syntax_pos::hygiene::{ExpnInfo, ExpnFormat};\n+use syntax_pos::hygiene::{ExpnInfo, ExpnKind};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n@@ -642,18 +642,18 @@ impl SyntaxExtension {\n         }\n     }\n \n-    fn expn_format(&self, symbol: Symbol) -> ExpnFormat {\n+    fn expn_kind(&self, descr: Symbol) -> ExpnKind {\n         match self.kind {\n             SyntaxExtensionKind::Bang(..) |\n-            SyntaxExtensionKind::LegacyBang(..) => ExpnFormat::MacroBang(symbol),\n-            _ => ExpnFormat::MacroAttribute(symbol),\n+            SyntaxExtensionKind::LegacyBang(..) => ExpnKind::MacroBang(descr),\n+            _ => ExpnKind::MacroAttribute(descr),\n         }\n     }\n \n-    pub fn expn_info(&self, call_site: Span, format: &str) -> ExpnInfo {\n+    pub fn expn_info(&self, call_site: Span, descr: &str) -> ExpnInfo {\n         ExpnInfo {\n             call_site,\n-            format: self.expn_format(Symbol::intern(format)),\n+            kind: self.expn_kind(Symbol::intern(descr)),\n             def_site: Some(self.span),\n             default_transparency: self.default_transparency,\n             allow_internal_unstable: self.allow_internal_unstable.clone(),\n@@ -780,7 +780,7 @@ impl<'a> ExtCtxt<'a> {\n         let mut last_macro = None;\n         loop {\n             if ctxt.outer_expn_info().map_or(None, |info| {\n-                if info.format.name() == sym::include {\n+                if info.kind.descr() == sym::include {\n                     // Stop going up the backtrace once include! is encountered\n                     return None;\n                 }"}, {"sha": "24050be792b9447bf03c2058c5011b0a4b99e122", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -1,6 +1,6 @@\n use crate::attr::HasAttrs;\n use crate::ast;\n-use crate::source_map::{ExpnInfo, ExpnFormat};\n+use crate::source_map::{ExpnInfo, ExpnKind};\n use crate::ext::base::ExtCtxt;\n use crate::ext::build::AstBuilder;\n use crate::parse::parser::PathStyle;\n@@ -57,7 +57,7 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt<'_>, span: Span, traits: &[ast::P\n     pretty_name.push(')');\n \n     cx.current_expansion.mark.set_expn_info(ExpnInfo::with_unstable(\n-        ExpnFormat::MacroAttribute(Symbol::intern(&pretty_name)), span, cx.parse_sess.edition,\n+        ExpnKind::MacroAttribute(Symbol::intern(&pretty_name)), span, cx.parse_sess.edition,\n         &[sym::rustc_attrs, sym::structural_match],\n     ));\n "}, {"sha": "879069c1418e47e5465597f86963f90c632208a9", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -506,7 +506,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             let suggested_limit = self.cx.ecfg.recursion_limit * 2;\n             let mut err = self.cx.struct_span_err(info.call_site,\n                 &format!(\"recursion limit reached while expanding the macro `{}`\",\n-                         info.format.name()));\n+                         info.kind.descr()));\n             err.help(&format!(\n                 \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n                 suggested_limit));"}, {"sha": "bbf62ef1e2361d3cbb79857832e7971291186c71", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -7,10 +7,8 @@\n //! within the SourceMap, which upon request can be converted to line and column\n //! information, source code snippets, etc.\n \n-\n pub use syntax_pos::*;\n-pub use syntax_pos::hygiene::{ExpnFormat, ExpnInfo};\n-pub use ExpnFormat::*;\n+pub use syntax_pos::hygiene::{ExpnKind, ExpnInfo};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;"}, {"sha": "7ee073117e96f318655bfaf3fa590a93362d30c7", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -3,7 +3,7 @@ use crate::attr;\n use crate::edition::Edition;\n use crate::ext::hygiene::{Mark, SyntaxContext};\n use crate::symbol::{Ident, Symbol, kw, sym};\n-use crate::source_map::{ExpnInfo, MacroAttribute, dummy_spanned, respan};\n+use crate::source_map::{ExpnInfo, ExpnKind, dummy_spanned, respan};\n use crate::ptr::P;\n use crate::tokenstream::TokenStream;\n \n@@ -17,7 +17,7 @@ use syntax_pos::{DUMMY_SP, Span};\n fn ignored_span(sp: Span, edition: Edition) -> Span {\n     let mark = Mark::fresh(Mark::root());\n     mark.set_expn_info(ExpnInfo::with_unstable(\n-        MacroAttribute(Symbol::intern(\"std_inject\")), sp, edition, &[sym::prelude_import]\n+        ExpnKind::MacroAttribute(Symbol::intern(\"std_inject\")), sp, edition, &[sym::prelude_import]\n     ));\n     sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n }"}, {"sha": "35a1a552a13fbf0db23eacae1a588c81b2b46498", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -15,7 +15,7 @@ use smallvec::{smallvec, SmallVec};\n use syntax_pos::{DUMMY_SP, NO_EXPANSION, Span, SourceFile, BytePos};\n \n use crate::attr::{self, HasAttrs};\n-use crate::source_map::{self, SourceMap, ExpnInfo, MacroAttribute, dummy_spanned, respan};\n+use crate::source_map::{self, SourceMap, ExpnInfo, ExpnKind, dummy_spanned, respan};\n use crate::config;\n use crate::entry::{self, EntryPointType};\n use crate::ext::base::{ExtCtxt, Resolver};\n@@ -280,7 +280,7 @@ fn generate_test_harness(sess: &ParseSess,\n     };\n \n     mark.set_expn_info(ExpnInfo::with_unstable(\n-        MacroAttribute(sym::test_case), DUMMY_SP, sess.edition,\n+        ExpnKind::MacroAttribute(sym::test_case), DUMMY_SP, sess.edition,\n         &[sym::main, sym::test, sym::rustc_attrs],\n     ));\n "}, {"sha": "dee8f4b3eb532b473c480b717fb3ae497567631e", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -4,7 +4,7 @@ use crate::deriving;\n \n use syntax::ast::{self, Ident};\n use syntax::attr;\n-use syntax::source_map::{ExpnInfo, MacroAttribute, respan};\n+use syntax::source_map::{ExpnInfo, ExpnKind, respan};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;\n@@ -348,7 +348,7 @@ fn mk_decls(\n ) -> P<ast::Item> {\n     let mark = Mark::fresh(Mark::root());\n     mark.set_expn_info(ExpnInfo::with_unstable(\n-        MacroAttribute(sym::proc_macro), DUMMY_SP, cx.parse_sess.edition,\n+        ExpnKind::MacroAttribute(sym::proc_macro), DUMMY_SP, cx.parse_sess.edition,\n         &[sym::rustc_attrs, Symbol::intern(\"proc_macro_internals\")],\n     ));\n     let span = DUMMY_SP.apply_mark(mark);"}, {"sha": "7f4f1fd7e019665d1498d7da9027c23c61fab6e3", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -9,7 +9,7 @@ use syntax::ast;\n use syntax::print::pprust;\n use syntax::symbol::{Symbol, sym};\n use syntax_pos::Span;\n-use syntax::source_map::{ExpnInfo, MacroAttribute};\n+use syntax::source_map::{ExpnInfo, ExpnKind};\n use std::iter;\n \n pub fn expand_test(\n@@ -63,7 +63,7 @@ pub fn expand_test_or_bench(\n     let (sp, attr_sp) = {\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(ExpnInfo::with_unstable(\n-            MacroAttribute(sym::test), attr_sp, cx.parse_sess.edition,\n+            ExpnKind::MacroAttribute(sym::test), attr_sp, cx.parse_sess.edition,\n             &[sym::rustc_attrs, sym::test],\n         ));\n         (item.span.with_ctxt(SyntaxContext::empty().apply_mark(mark)),"}, {"sha": "5f88e2e098a23c05132b866cd09b3b648ebafcd1", "filename": "src/libsyntax_ext/test_case.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax_ext%2Ftest_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax_ext%2Ftest_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_case.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -16,7 +16,7 @@ use syntax::ast;\n use syntax::source_map::respan;\n use syntax::symbol::sym;\n use syntax_pos::Span;\n-use syntax::source_map::{ExpnInfo, MacroAttribute};\n+use syntax::source_map::{ExpnInfo, ExpnKind};\n \n pub fn expand(\n     ecx: &mut ExtCtxt<'_>,\n@@ -29,7 +29,7 @@ pub fn expand(\n     let sp = {\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(ExpnInfo::with_unstable(\n-            MacroAttribute(sym::test_case), attr_sp, ecx.parse_sess.edition,\n+            ExpnKind::MacroAttribute(sym::test_case), attr_sp, ecx.parse_sess.edition,\n             &[sym::test, sym::rustc_attrs],\n         ));\n         attr_sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))"}, {"sha": "f36a4d5816e5b92fb7faa4b73774f250cd8c2f91", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -162,7 +162,7 @@ impl Mark {\n         HygieneData::with(|data| {\n             if data.default_transparency(self) == Transparency::Opaque {\n                 if let Some(expn_info) = &data.marks[self.0 as usize].expn_info {\n-                    if let ExpnFormat::MacroAttribute(name) = expn_info.format {\n+                    if let ExpnKind::MacroAttribute(name) = expn_info.kind {\n                         if name.as_str().starts_with(\"derive(\") {\n                             return true;\n                         }\n@@ -654,7 +654,7 @@ pub struct ExpnInfo {\n     /// pointing to the `foo!` invocation.\n     pub call_site: Span,\n     /// The format with which the macro was invoked.\n-    pub format: ExpnFormat,\n+    pub kind: ExpnKind,\n \n     // --- The part specific to the macro/desugaring definition.\n     // --- FIXME: Share it between expansions with the same definition.\n@@ -681,10 +681,10 @@ pub struct ExpnInfo {\n \n impl ExpnInfo {\n     /// Constructs an expansion info with default properties.\n-    pub fn default(format: ExpnFormat, call_site: Span, edition: Edition) -> ExpnInfo {\n+    pub fn default(kind: ExpnKind, call_site: Span, edition: Edition) -> ExpnInfo {\n         ExpnInfo {\n             call_site,\n-            format,\n+            kind,\n             def_site: None,\n             default_transparency: Transparency::SemiTransparent,\n             allow_internal_unstable: None,\n@@ -694,31 +694,31 @@ impl ExpnInfo {\n         }\n     }\n \n-    pub fn with_unstable(format: ExpnFormat, call_site: Span, edition: Edition,\n+    pub fn with_unstable(kind: ExpnKind, call_site: Span, edition: Edition,\n                          allow_internal_unstable: &[Symbol]) -> ExpnInfo {\n         ExpnInfo {\n             allow_internal_unstable: Some(allow_internal_unstable.into()),\n-            ..ExpnInfo::default(format, call_site, edition)\n+            ..ExpnInfo::default(kind, call_site, edition)\n         }\n     }\n }\n \n /// The source of expansion.\n #[derive(Clone, Hash, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n-pub enum ExpnFormat {\n+pub enum ExpnKind {\n     /// e.g., #[derive(...)] <item>\n     MacroAttribute(Symbol),\n     /// e.g., `format!()`\n     MacroBang(Symbol),\n     /// Desugaring done by the compiler during HIR lowering.\n-    CompilerDesugaring(CompilerDesugaringKind)\n+    Desugaring(DesugaringKind)\n }\n \n-impl ExpnFormat {\n-    pub fn name(&self) -> Symbol {\n+impl ExpnKind {\n+    pub fn descr(&self) -> Symbol {\n         match *self {\n-            ExpnFormat::MacroBang(name) | ExpnFormat::MacroAttribute(name) => name,\n-            ExpnFormat::CompilerDesugaring(kind) => kind.name(),\n+            ExpnKind::MacroBang(name) | ExpnKind::MacroAttribute(name) => name,\n+            ExpnKind::Desugaring(kind) => kind.descr(),\n         }\n     }\n }\n@@ -753,7 +753,7 @@ impl MacroKind {\n \n /// The kind of compiler desugaring.\n #[derive(Clone, Copy, Hash, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n-pub enum CompilerDesugaringKind {\n+pub enum DesugaringKind {\n     /// We desugar `if c { i } else { e }` to `match $ExprKind::Use(c) { true => i, _ => e }`.\n     /// However, we do not want to blame `c` for unreachability but rather say that `i`\n     /// is unreachable. This desugaring kind allows us to avoid blaming `c`.\n@@ -770,16 +770,16 @@ pub enum CompilerDesugaringKind {\n     ForLoop,\n }\n \n-impl CompilerDesugaringKind {\n-    pub fn name(self) -> Symbol {\n+impl DesugaringKind {\n+    pub fn descr(self) -> Symbol {\n         Symbol::intern(match self {\n-            CompilerDesugaringKind::CondTemporary => \"if and while condition\",\n-            CompilerDesugaringKind::Async => \"async\",\n-            CompilerDesugaringKind::Await => \"await\",\n-            CompilerDesugaringKind::QuestionMark => \"?\",\n-            CompilerDesugaringKind::TryBlock => \"try block\",\n-            CompilerDesugaringKind::ExistentialType => \"existential type\",\n-            CompilerDesugaringKind::ForLoop => \"for loop\",\n+            DesugaringKind::CondTemporary => \"if and while condition\",\n+            DesugaringKind::Async => \"async\",\n+            DesugaringKind::Await => \"await\",\n+            DesugaringKind::QuestionMark => \"?\",\n+            DesugaringKind::TryBlock => \"try block\",\n+            DesugaringKind::ExistentialType => \"existential type\",\n+            DesugaringKind::ForLoop => \"for loop\",\n         })\n     }\n }"}, {"sha": "d4c1958f7e265098f19ffe30849b75a2ffd2753d", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16918a8e28d4e7a476f31ff3d3c1e2d998c086af/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=16918a8e28d4e7a476f31ff3d3c1e2d998c086af", "patch": "@@ -27,7 +27,7 @@ extern crate serialize as rustc_serialize; // used by deriving\n pub mod edition;\n use edition::Edition;\n pub mod hygiene;\n-pub use hygiene::{Mark, SyntaxContext, ExpnInfo, ExpnFormat, CompilerDesugaringKind};\n+pub use hygiene::{Mark, SyntaxContext, ExpnInfo, ExpnKind, DesugaringKind};\n \n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n@@ -403,10 +403,10 @@ impl Span {\n     }\n \n     /// Checks if this span arises from a compiler desugaring of kind `kind`.\n-    pub fn is_compiler_desugaring(&self, kind: CompilerDesugaringKind) -> bool {\n+    pub fn is_desugaring(&self, kind: DesugaringKind) -> bool {\n         match self.ctxt().outer_expn_info() {\n-            Some(info) => match info.format {\n-                ExpnFormat::CompilerDesugaring(k) => k == kind,\n+            Some(info) => match info.kind {\n+                ExpnKind::Desugaring(k) => k == kind,\n                 _ => false,\n             },\n             None => false,\n@@ -415,10 +415,10 @@ impl Span {\n \n     /// Returns the compiler desugaring that created this span, or `None`\n     /// if this span is not from a desugaring.\n-    pub fn compiler_desugaring_kind(&self) -> Option<CompilerDesugaringKind> {\n+    pub fn desugaring_kind(&self) -> Option<DesugaringKind> {\n         match self.ctxt().outer_expn_info() {\n-            Some(info) => match info.format {\n-                ExpnFormat::CompilerDesugaring(k) => Some(k),\n+            Some(info) => match info.kind {\n+                ExpnKind::Desugaring(k) => Some(k),\n                 _ => None\n             },\n             None => None\n@@ -441,14 +441,14 @@ impl Span {\n         while let Some(info) = self.ctxt().outer_expn_info() {\n             // Don't print recursive invocations.\n             if !info.call_site.source_equal(&prev_span) {\n-                let (pre, post) = match info.format {\n-                    ExpnFormat::MacroAttribute(..) => (\"#[\", \"]\"),\n-                    ExpnFormat::MacroBang(..) => (\"\", \"!\"),\n-                    ExpnFormat::CompilerDesugaring(..) => (\"desugaring of `\", \"`\"),\n+                let (pre, post) = match info.kind {\n+                    ExpnKind::MacroAttribute(..) => (\"#[\", \"]\"),\n+                    ExpnKind::MacroBang(..) => (\"\", \"!\"),\n+                    ExpnKind::Desugaring(..) => (\"desugaring of `\", \"`\"),\n                 };\n                 result.push(MacroBacktrace {\n                     call_site: info.call_site,\n-                    macro_decl_name: format!(\"{}{}{}\", pre, info.format.name(), post),\n+                    macro_decl_name: format!(\"{}{}{}\", pre, info.kind.descr(), post),\n                     def_site_span: info.def_site,\n                 });\n             }"}]}