{"sha": "a40e390860987a23f9b899abc5947f1525d3709c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MGUzOTA4NjA5ODdhMjNmOWI4OTlhYmM1OTQ3ZjE1MjVkMzcwOWM=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2019-08-11T14:00:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-25T09:55:56Z"}, "message": "Check type rather than just name in ok-wrapping diagnostic. Add test for handling generic functions (which currently fails)", "tree": {"sha": "39aa52a99ce47d439ab92d0519681d4524240820", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39aa52a99ce47d439ab92d0519681d4524240820"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a40e390860987a23f9b899abc5947f1525d3709c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a40e390860987a23f9b899abc5947f1525d3709c", "html_url": "https://github.com/rust-lang/rust/commit/a40e390860987a23f9b899abc5947f1525d3709c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a40e390860987a23f9b899abc5947f1525d3709c/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62c2002e2b21b3a74a4e2205ccc40fa93f722b34", "url": "https://api.github.com/repos/rust-lang/rust/commits/62c2002e2b21b3a74a4e2205ccc40fa93f722b34", "html_url": "https://github.com/rust-lang/rust/commit/62c2002e2b21b3a74a4e2205ccc40fa93f722b34"}], "stats": {"total": 85, "additions": 77, "deletions": 8}, "files": [{"sha": "339a7b848620418860cbfc01dd58519ceb508113", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a40e390860987a23f9b899abc5947f1525d3709c/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40e390860987a23f9b899abc5947f1525d3709c/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=a40e390860987a23f9b899abc5947f1525d3709c", "patch": "@@ -6,10 +6,13 @@ use ra_syntax::ast::{AstNode, RecordLit};\n use super::{Expr, ExprId, RecordLitField};\n use crate::{\n     adt::AdtDef,\n+    code_model::Enum,\n     diagnostics::{DiagnosticSink, MissingFields, MissingOkInTailExpr},\n     expr::AstPtr,\n+    name,\n+    path::{PathKind, PathSegment},\n     ty::{InferenceResult, Ty, TypeCtor},\n-    Function, HasSource, HirDatabase, Name, Path,\n+    Function, HasSource, HirDatabase, ModuleDef, Name, Path, PerNs, Resolution\n };\n use ra_syntax::ast;\n \n@@ -106,18 +109,45 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             Some(m) => m,\n             None => return,\n         };\n-        let ret = match &mismatch.expected {\n-            Ty::Apply(t) => t,\n-            _ => return,\n+\n+        let std_result_path = Path {\n+            kind: PathKind::Abs,\n+            segments: vec![\n+                PathSegment { name: name::STD, args_and_bindings: None },\n+                PathSegment { name: name::RESULT_MOD, args_and_bindings: None },\n+                PathSegment { name: name::RESULT_TYPE, args_and_bindings: None },\n+            ]\n         };\n-        let ret_enum = match ret.ctor {\n-            TypeCtor::Adt(AdtDef::Enum(e)) => e,\n+\n+        let resolver = self.func.resolver(db);\n+        let std_result_enum = match resolver.resolve_path_segments(db, &std_result_path).into_fully_resolved() {\n+            PerNs { types: Some(Resolution::Def(ModuleDef::Enum(e))), .. } => e,\n             _ => return,\n         };\n-        let enum_name = ret_enum.name(db);\n-        if enum_name.is_none() || enum_name.unwrap().to_string() != \"Result\" {\n+\n+        let std_result_type = std_result_enum.ty(db);\n+\n+        fn enum_from_type(ty: &Ty) -> Option<Enum> {\n+            match ty {\n+                Ty::Apply(t) => {\n+                    match t.ctor {\n+                        TypeCtor::Adt(AdtDef::Enum(e)) => Some(e),\n+                        _ => None,\n+                    }\n+                }\n+                _ => None\n+            }\n+        }\n+\n+        if enum_from_type(&mismatch.expected) != enum_from_type(&std_result_type) {\n             return;\n         }\n+\n+        let ret = match &mismatch.expected {\n+            Ty::Apply(t) => t,\n+            _ => return,\n+        };\n+\n         let params = &ret.parameters;\n         if params.len() == 2 && &params[0] == &mismatch.actual {\n             let source_map = self.func.body_source_map(db);"}, {"sha": "9c4822d917f44690d560b77cbecb0f673e5f01ce", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a40e390860987a23f9b899abc5947f1525d3709c/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40e390860987a23f9b899abc5947f1525d3709c/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=a40e390860987a23f9b899abc5947f1525d3709c", "patch": "@@ -120,6 +120,8 @@ pub(crate) const TRY: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"Try\")\n pub(crate) const OK: Name = Name::new(SmolStr::new_inline_from_ascii(2, b\"Ok\"));\n pub(crate) const FUTURE_MOD: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"future\"));\n pub(crate) const FUTURE_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Future\"));\n+pub(crate) const RESULT_MOD: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"result\"));\n+pub(crate) const RESULT_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Result\"));\n pub(crate) const OUTPUT: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Output\"));\n \n fn resolve_name(text: &SmolStr) -> SmolStr {"}, {"sha": "57454719c2e79942c62d81f33f42c6e4a1fedbaa", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a40e390860987a23f9b899abc5947f1525d3709c/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40e390860987a23f9b899abc5947f1525d3709c/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=a40e390860987a23f9b899abc5947f1525d3709c", "patch": "@@ -281,6 +281,43 @@ fn div(x: i32, y: i32) -> Result<i32, String> {\n         check_apply_diagnostic_fix_for_target_file(\"/main.rs\", before, after);\n     }\n \n+    #[test]\n+    fn test_wrap_return_type_handles_generic_functions() {\n+        let before = r#\"\n+            //- /main.rs\n+            use std::{default::Default, result::Result::{self, Ok, Err}};\n+\n+            fn div<T: Default, i32>(x: i32) -> Result<T, i32> {\n+                if x == 0 {\n+                    return Err(7);\n+                }\n+                T::default()\n+            }\n+\n+            //- /std/lib.rs\n+            pub mod result {\n+                pub enum Result<T, E> { Ok(T), Err(E) }\n+            }\n+            pub mod default {\n+                pub trait Default {\n+                    fn default() -> Self;\n+                }\n+            }\n+        \"#;\n+// The formatting here is a bit odd due to how the parse_fixture function works in test_utils -\n+// it strips empty lines and leading whitespace. The important part of this test is that the final\n+// `x / y` expr is now wrapped in `Ok(..)`\n+        let after = r#\"use std::{default::Default, result::Result::{self, Ok, Err}};\n+fn div<T: Default>(x: i32) -> Result<T, i32> {\n+    if x == 0 {\n+        return Err(7);\n+    }\n+    Ok(T::default())\n+}\n+\"#;\n+        check_apply_diagnostic_fix_for_target_file(\"/main.rs\", before, after);\n+    }\n+\n     #[test]\n     fn test_wrap_return_type_handles_type_aliases() {\n         let before = r#\""}]}