{"sha": "3970748f59376381f360e42d8f703b2f0f7bbde7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NzA3NDhmNTkzNzYzODFmMzYwZTQyZDhmNzAzYjJmMGY3YmJkZTc=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-19T19:41:18Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-19T21:06:36Z"}, "message": "Remove overflow indentation", "tree": {"sha": "a51a0e3ff073ea8da0ef5550f1bfe5f3535dec98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a51a0e3ff073ea8da0ef5550f1bfe5f3535dec98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3970748f59376381f360e42d8f703b2f0f7bbde7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3970748f59376381f360e42d8f703b2f0f7bbde7", "html_url": "https://github.com/rust-lang/rust/commit/3970748f59376381f360e42d8f703b2f0f7bbde7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3970748f59376381f360e42d8f703b2f0f7bbde7/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af", "html_url": "https://github.com/rust-lang/rust/commit/cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af"}], "stats": {"total": 56, "additions": 22, "deletions": 34}, "files": [{"sha": "e0910ba093e048aca4908fbf0693ca25315c5c1c", "filename": "src/comment.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3970748f59376381f360e42d8f703b2f0f7bbde7/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3970748f59376381f360e42d8f703b2f0f7bbde7/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=3970748f59376381f360e42d8f703b2f0f7bbde7", "patch": "@@ -291,21 +291,25 @@ impl<T> Iterator for CharClasses<T> where T: Iterator, T::Item: RichChar {\n                     '\\n' => CharClassesStatus::Normal,\n                     _ => CharClassesStatus::LineComment,\n                 };\n+                // let code_char_kind = match chr {\n+                //     '\\n' => CodeCharKind::Normal,\n+                //     _ => CodeCharKind::Comment,\n+                // };\n                 return Some((CodeCharKind::Comment, item));\n             }\n         };\n         Some((CodeCharKind::Normal, item))\n     }\n }\n \n-struct CommentCodeSlices<'a> {\n+pub struct CommentCodeSlices<'a> {\n     slice: &'a str,\n     last_slice_type: CodeCharKind,\n     last_slice_end: usize,\n }\n \n impl<'a> CommentCodeSlices<'a> {\n-    fn new(slice: &'a str) -> CommentCodeSlices<'a> {\n+    pub fn new(slice: &'a str) -> CommentCodeSlices<'a> {\n         CommentCodeSlices {\n             slice: slice,\n             last_slice_type: CodeCharKind::Comment,\n@@ -315,7 +319,7 @@ impl<'a> CommentCodeSlices<'a> {\n }\n \n impl<'a> Iterator for CommentCodeSlices<'a> {\n-    type Item = (CodeCharKind, &'a str);\n+    type Item = (CodeCharKind, usize, &'a str);\n \n     fn next(&mut self) -> Option<Self::Item> {\n         if self.last_slice_end == self.slice.len() {\n@@ -341,11 +345,13 @@ impl<'a> Iterator for CommentCodeSlices<'a> {\n             // This was the last subslice.\n             self.last_slice_end = self.slice.len();\n \n-            Some((kind, &self.slice[sub_slice_end..]))\n+            Some((kind, sub_slice_end, &self.slice[sub_slice_end..]))\n         } else {\n-            let res = &self.slice[self.last_slice_end..sub_slice_end];\n+            let res = (kind,\n+                       self.last_slice_end,\n+                       &self.slice[self.last_slice_end..sub_slice_end]);\n             self.last_slice_end = sub_slice_end;\n-            Some((kind, res))\n+            Some(res)\n         }\n     }\n }\n@@ -362,9 +368,10 @@ mod test {\n \n         let mut iter = CommentCodeSlices::new(input);\n \n-        assert_eq!((CodeCharKind::Normal, \"code(); \"), iter.next().unwrap());\n-        assert_eq!((CodeCharKind::Comment, \"/* test */\"), iter.next().unwrap());\n-        assert_eq!((CodeCharKind::Normal, \" 1 + 1\"), iter.next().unwrap());\n+        assert_eq!((CodeCharKind::Normal, 0, \"code(); \"), iter.next().unwrap());\n+        assert_eq!((CodeCharKind::Comment, 8, \"/* test */\"),\n+                   iter.next().unwrap());\n+        assert_eq!((CodeCharKind::Normal, 18, \" 1 + 1\"), iter.next().unwrap());\n         assert_eq!(None, iter.next());\n     }\n "}, {"sha": "8592ad47b9e7dbe2b908fed09cd4188169b2b2b9", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3970748f59376381f360e42d8f703b2f0f7bbde7/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3970748f59376381f360e42d8f703b2f0f7bbde7/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=3970748f59376381f360e42d8f703b2f0f7bbde7", "patch": "@@ -423,7 +423,7 @@ impl Rewrite for ast::Block {\n         }\n \n         let mut visitor = FmtVisitor::from_codemap(context.codemap, context.config);\n-        visitor.block_indent = context.block_indent + context.overflow_indent;\n+        visitor.block_indent = context.block_indent;\n \n         let prefix = match self.rules {\n             ast::BlockCheckMode::UnsafeBlock(..) => {\n@@ -751,7 +751,7 @@ fn rewrite_match(context: &RewriteContext,\n     let mut result = format!(\"match {} {{\", cond_str);\n \n     let nested_context = context.nested_context();\n-    let arm_indent = nested_context.block_indent + context.overflow_indent;\n+    let arm_indent = nested_context.block_indent;\n     let arm_indent_str = arm_indent.to_string(context.config);\n \n     let open_brace_pos = span_after(mk_sp(cond.span.hi, arm_start_pos(&arms[0])),\n@@ -795,7 +795,7 @@ fn rewrite_match(context: &RewriteContext,\n                                                      &arm_indent_str));\n     result.push_str(&comment);\n     result.push('\\n');\n-    result.push_str(&(context.block_indent + context.overflow_indent).to_string(context.config));\n+    result.push_str(&context.block_indent.to_string(context.config));\n     result.push('}');\n     Some(result)\n }\n@@ -1537,9 +1537,8 @@ pub fn rewrite_assign_rhs<S: Into<String>>(context: &RewriteContext,\n             // FIXME: we probably should related max_width to width instead of config.max_width\n             // where is the 1 coming from anyway?\n             let max_width = try_opt!(context.config.max_width.checked_sub(new_offset.width() + 1));\n-            let rhs_indent = Indent::new(context.config.tab_spaces, 0);\n-            let overflow_context = context.overflow_context(rhs_indent);\n-            let rhs = ex.rewrite(&overflow_context, max_width, new_offset);\n+            let inner_context = context.nested_context();\n+            let rhs = ex.rewrite(&inner_context, max_width, new_offset);\n \n             result.push_str(&&try_opt!(rhs));\n         }"}, {"sha": "53819bfdd8fb73da3dbc0846460d67e7fd0e896b", "filename": "src/missed_spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3970748f59376381f360e42d8f703b2f0f7bbde7/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3970748f59376381f360e42d8f703b2f0f7bbde7/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=3970748f59376381f360e42d8f703b2f0f7bbde7", "patch": "@@ -11,7 +11,7 @@\n use visitor::FmtVisitor;\n \n use syntax::codemap::{self, BytePos, Span};\n-use comment::{CharClasses, CodeCharKind};\n+use comment::{CodeCharKind, CommentCodeSlices, rewrite_comment};\n \n impl<'a> FmtVisitor<'a> {\n     // TODO these format_missing methods are ugly. Refactor and add unit tests"}, {"sha": "cf8be8004e1bc636138de3f4a9f789e16cdb96a6", "filename": "src/rewrite.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3970748f59376381f360e42d8f703b2f0f7bbde7/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3970748f59376381f360e42d8f703b2f0f7bbde7/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=3970748f59376381f360e42d8f703b2f0f7bbde7", "patch": "@@ -29,14 +29,8 @@ pub trait Rewrite {\n pub struct RewriteContext<'a> {\n     pub codemap: &'a CodeMap,\n     pub config: &'a Config,\n-\n     // Indentation due to nesting of blocks.\n     pub block_indent: Indent,\n-    // *Extra* indentation due to overflowing to the next line, e.g.,\n-    // let foo =\n-    //     bar();\n-    // The extra 4 spaces when formatting `bar()` is overflow_indent.\n-    pub overflow_indent: Indent,\n }\n \n impl<'a> RewriteContext<'a> {\n@@ -45,16 +39,6 @@ impl<'a> RewriteContext<'a> {\n             codemap: self.codemap,\n             config: self.config,\n             block_indent: self.block_indent.block_indent(self.config),\n-            overflow_indent: self.overflow_indent,\n-        }\n-    }\n-\n-    pub fn overflow_context(&self, overflow: Indent) -> RewriteContext<'a> {\n-        RewriteContext {\n-            codemap: self.codemap,\n-            config: self.config,\n-            block_indent: self.block_indent,\n-            overflow_indent: overflow,\n         }\n     }\n "}, {"sha": "17f197ec8806f98701ace6ee8a303a28058e8042", "filename": "src/visitor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3970748f59376381f360e42d8f703b2f0f7bbde7/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3970748f59376381f360e42d8f703b2f0f7bbde7/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=3970748f59376381f360e42d8f703b2f0f7bbde7", "patch": "@@ -387,7 +387,6 @@ impl<'a> FmtVisitor<'a> {\n             codemap: self.codemap,\n             config: self.config,\n             block_indent: self.block_indent,\n-            overflow_indent: Indent::empty(),\n         };\n         // 1 = \";\"\n         match vp.rewrite(&context, self.config.max_width - offset.width() - 1, offset) {\n@@ -419,7 +418,6 @@ impl<'a> FmtVisitor<'a> {\n             codemap: self.codemap,\n             config: self.config,\n             block_indent: self.block_indent,\n-            overflow_indent: Indent::empty(),\n         }\n     }\n }"}]}