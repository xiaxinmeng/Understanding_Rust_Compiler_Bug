{"sha": "c55f0922aa6df5be8c4ac00757ec691f9fd629d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NWYwOTIyYWE2ZGY1YmU4YzRhYzAwNzU3ZWM2OTFmOWZkNjI5ZDc=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-06-25T13:26:41Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-06-25T13:26:41Z"}, "message": "Add hyperlinks to `std::fs` functions from `std::path`.", "tree": {"sha": "8897f120c54fd1c81bf87319b0dbfcce27603d99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8897f120c54fd1c81bf87319b0dbfcce27603d99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c55f0922aa6df5be8c4ac00757ec691f9fd629d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c55f0922aa6df5be8c4ac00757ec691f9fd629d7", "html_url": "https://github.com/rust-lang/rust/commit/c55f0922aa6df5be8c4ac00757ec691f9fd629d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c55f0922aa6df5be8c4ac00757ec691f9fd629d7/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35004b42bcd932222a4a58bf49d0d094ba397664", "url": "https://api.github.com/repos/rust-lang/rust/commits/35004b42bcd932222a4a58bf49d0d094ba397664", "html_url": "https://github.com/rust-lang/rust/commit/35004b42bcd932222a4a58bf49d0d094ba397664"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "a19d51fac3552130d7752041fc8de04b6e06efcc", "filename": "src/libstd/path.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c55f0922aa6df5be8c4ac00757ec691f9fd629d7/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55f0922aa6df5be8c4ac00757ec691f9fd629d7/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=c55f0922aa6df5be8c4ac00757ec691f9fd629d7", "patch": "@@ -1781,15 +1781,19 @@ impl Path {\n     /// This function will traverse symbolic links to query information about the\n     /// destination file.\n     ///\n-    /// This is an alias to `fs::metadata`.\n+    /// This is an alias to [`fs::metadata`].\n+    ///\n+    /// [`fs::metadata`]: ../fs/fn.metadata.html\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn metadata(&self) -> io::Result<fs::Metadata> {\n         fs::metadata(self)\n     }\n \n     /// Query the metadata about a file without following symlinks.\n     ///\n-    /// This is an alias to `fs::symlink_metadata`.\n+    /// This is an alias to [`fs::symlink_metadata`].\n+    ///\n+    /// [`fs::symlink_metadata`]: ../fs/fn.symlink_metadata.html\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn symlink_metadata(&self) -> io::Result<fs::Metadata> {\n         fs::symlink_metadata(self)\n@@ -1798,15 +1802,19 @@ impl Path {\n     /// Returns the canonical form of the path with all intermediate components\n     /// normalized and symbolic links resolved.\n     ///\n-    /// This is an alias to `fs::canonicalize`.\n+    /// This is an alias to [`fs::canonicalize`].\n+    ///\n+    /// [`fs::canonicalize`]: ../fs/fn.canonicalize.html\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn canonicalize(&self) -> io::Result<PathBuf> {\n         fs::canonicalize(self)\n     }\n \n     /// Reads a symbolic link, returning the file that the link points to.\n     ///\n-    /// This is an alias to `fs::read_link`.\n+    /// This is an alias to [`fs::read_link`].\n+    ///\n+    /// [`fs::read_link`]: ../fs/fn.read_link.html\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn read_link(&self) -> io::Result<PathBuf> {\n         fs::read_link(self)\n@@ -1817,7 +1825,9 @@ impl Path {\n     /// The iterator will yield instances of `io::Result<DirEntry>`. New errors may\n     /// be encountered after an iterator is initially constructed.\n     ///\n-    /// This is an alias to `fs::read_dir`.\n+    /// This is an alias to [`fs::read_dir`].\n+    ///\n+    /// [`fs::read_dir`]: ../fs/fn.read_dir.html\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn read_dir(&self) -> io::Result<fs::ReadDir> {\n         fs::read_dir(self)"}]}