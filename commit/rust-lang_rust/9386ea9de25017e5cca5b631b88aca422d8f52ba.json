{"sha": "9386ea9de25017e5cca5b631b88aca422d8f52ba", "node_id": "C_kwDOAAsO6NoAKDkzODZlYTlkZTI1MDE3ZTVjY2E1YjYzMWI4OGFjYTQyMmQ4ZjUyYmE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-20T18:22:57Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-25T02:50:33Z"}, "message": "Remove LifetimeDefOrigin", "tree": {"sha": "319c0c13ecac4f594cc45201e770e0e071435070", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/319c0c13ecac4f594cc45201e770e0e071435070"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9386ea9de25017e5cca5b631b88aca422d8f52ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9386ea9de25017e5cca5b631b88aca422d8f52ba", "html_url": "https://github.com/rust-lang/rust/commit/9386ea9de25017e5cca5b631b88aca422d8f52ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9386ea9de25017e5cca5b631b88aca422d8f52ba/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb548a918adc8a4cf63320d3f8b9f1d2ff2622ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb548a918adc8a4cf63320d3f8b9f1d2ff2622ea", "html_url": "https://github.com/rust-lang/rust/commit/bb548a918adc8a4cf63320d3f8b9f1d2ff2622ea"}], "stats": {"total": 120, "additions": 41, "deletions": 79}, "files": [{"sha": "135714af2a6c18fa13af2722bf1f45845395980a", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9386ea9de25017e5cca5b631b88aca422d8f52ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9386ea9de25017e5cca5b631b88aca422d8f52ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=9386ea9de25017e5cca5b631b88aca422d8f52ba", "patch": "@@ -125,7 +125,7 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                     // Find the index of the named region that was part of the\n                     // error. We will then search the function parameters for a bound\n                     // region at the right depth with the same index\n-                    (Some(rl::Region::EarlyBound(_, id, _)), ty::BrNamed(def_id, _)) => {\n+                    (Some(rl::Region::EarlyBound(_, id)), ty::BrNamed(def_id, _)) => {\n                         debug!(\"EarlyBound id={:?} def_id={:?}\", id, def_id);\n                         if id == def_id {\n                             self.found_type = Some(arg);\n@@ -137,7 +137,7 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                     // error. We will then search the function parameters for a bound\n                     // region at the right depth with the same index\n                     (\n-                        Some(rl::Region::LateBound(debruijn_index, _, id, _)),\n+                        Some(rl::Region::LateBound(debruijn_index, _, id)),\n                         ty::BrNamed(def_id, _),\n                     ) => {\n                         debug!(\n@@ -155,8 +155,8 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                         Some(\n                             rl::Region::Static\n                             | rl::Region::Free(_, _)\n-                            | rl::Region::EarlyBound(_, _, _)\n-                            | rl::Region::LateBound(_, _, _, _)\n+                            | rl::Region::EarlyBound(_, _)\n+                            | rl::Region::LateBound(_, _, _)\n                             | rl::Region::LateBoundAnon(_, _, _),\n                         )\n                         | None,\n@@ -221,15 +221,15 @@ impl<'tcx> Visitor<'tcx> for TyPathVisitor<'tcx> {\n                 }\n             }\n \n-            (Some(rl::Region::EarlyBound(_, id, _)), ty::BrNamed(def_id, _)) => {\n+            (Some(rl::Region::EarlyBound(_, id)), ty::BrNamed(def_id, _)) => {\n                 debug!(\"EarlyBound id={:?} def_id={:?}\", id, def_id);\n                 if id == def_id {\n                     self.found_it = true;\n                     return; // we can stop visiting now\n                 }\n             }\n \n-            (Some(rl::Region::LateBound(debruijn_index, _, id, _)), ty::BrNamed(def_id, _)) => {\n+            (Some(rl::Region::LateBound(debruijn_index, _, id)), ty::BrNamed(def_id, _)) => {\n                 debug!(\"FindNestedTypeVisitor::visit_ty: LateBound depth = {:?}\", debruijn_index,);\n                 debug!(\"id={:?}\", id);\n                 debug!(\"def_id={:?}\", def_id);\n@@ -242,8 +242,8 @@ impl<'tcx> Visitor<'tcx> for TyPathVisitor<'tcx> {\n             (\n                 Some(\n                     rl::Region::Static\n-                    | rl::Region::EarlyBound(_, _, _)\n-                    | rl::Region::LateBound(_, _, _, _)\n+                    | rl::Region::EarlyBound(_, _)\n+                    | rl::Region::LateBound(_, _, _)\n                     | rl::Region::LateBoundAnon(_, _, _)\n                     | rl::Region::Free(_, _),\n                 )"}, {"sha": "98375cbad9f9b21f33e0d1ccbcb794fe62859533", "filename": "compiler/rustc_middle/src/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9386ea9de25017e5cca5b631b88aca422d8f52ba/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9386ea9de25017e5cca5b631b88aca422d8f52ba/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs?ref=9386ea9de25017e5cca5b631b88aca422d8f52ba", "patch": "@@ -4,44 +4,14 @@ use crate::ty;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::{GenericParam, ItemLocalId};\n-use rustc_hir::{GenericParamKind, LifetimeParamKind};\n+use rustc_hir::ItemLocalId;\n use rustc_macros::HashStable;\n \n-/// The origin of a named lifetime definition.\n-///\n-/// This is used to prevent the usage of in-band lifetimes in `Fn`/`fn` syntax.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, HashStable)]\n-pub enum LifetimeDefOrigin {\n-    // Explicit binders like `fn foo<'a>(x: &'a u8)` or elided like `impl Foo<&u32>`\n-    ExplicitOrElided,\n-    // Some kind of erroneous origin\n-    Error,\n-}\n-\n-impl LifetimeDefOrigin {\n-    pub fn from_param(param: &GenericParam<'_>) -> Self {\n-        match param.kind {\n-            GenericParamKind::Lifetime { kind } => match kind {\n-                LifetimeParamKind::Explicit => LifetimeDefOrigin::ExplicitOrElided,\n-                LifetimeParamKind::Elided => LifetimeDefOrigin::ExplicitOrElided,\n-                LifetimeParamKind::Error => LifetimeDefOrigin::Error,\n-            },\n-            _ => bug!(\"expected a lifetime param\"),\n-        }\n-    }\n-}\n-\n #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, HashStable)]\n pub enum Region {\n     Static,\n-    EarlyBound(/* index */ u32, /* lifetime decl */ DefId, LifetimeDefOrigin),\n-    LateBound(\n-        ty::DebruijnIndex,\n-        /* late-bound index */ u32,\n-        /* lifetime decl */ DefId,\n-        LifetimeDefOrigin,\n-    ),\n+    EarlyBound(/* index */ u32, /* lifetime decl */ DefId),\n+    LateBound(ty::DebruijnIndex, /* late-bound index */ u32, /* lifetime decl */ DefId),\n     LateBoundAnon(ty::DebruijnIndex, /* late-bound index */ u32, /* anon index */ u32),\n     Free(DefId, /* lifetime decl */ DefId),\n }"}, {"sha": "7a7b466d82743ca4e77c9c22a08970aabed4b7ed", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 25, "deletions": 33, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9386ea9de25017e5cca5b631b88aca422d8f52ba/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9386ea9de25017e5cca5b631b88aca422d8f52ba/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=9386ea9de25017e5cca5b631b88aca422d8f52ba", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-filelength\n //! Name resolution for lifetimes.\n //!\n //! Name resolution for lifetimes follows *much* simpler rules than the\n@@ -63,23 +62,18 @@ impl RegionExt for Region {\n         let i = *index;\n         *index += 1;\n         let def_id = hir_map.local_def_id(param.hir_id);\n-        let origin = LifetimeDefOrigin::from_param(param);\n         debug!(\"Region::early: index={} def_id={:?}\", i, def_id);\n-        (param.name.normalize_to_macros_2_0(), Region::EarlyBound(i, def_id.to_def_id(), origin))\n+        (param.name.normalize_to_macros_2_0(), Region::EarlyBound(i, def_id.to_def_id()))\n     }\n \n     fn late(idx: u32, hir_map: Map<'_>, param: &GenericParam<'_>) -> (ParamName, Region) {\n         let depth = ty::INNERMOST;\n         let def_id = hir_map.local_def_id(param.hir_id);\n-        let origin = LifetimeDefOrigin::from_param(param);\n         debug!(\n-            \"Region::late: idx={:?}, param={:?} depth={:?} def_id={:?} origin={:?}\",\n-            idx, param, depth, def_id, origin,\n+            \"Region::late: idx={:?}, param={:?} depth={:?} def_id={:?}\",\n+            idx, param, depth, def_id,\n         );\n-        (\n-            param.name.normalize_to_macros_2_0(),\n-            Region::LateBound(depth, idx, def_id.to_def_id(), origin),\n-        )\n+        (param.name.normalize_to_macros_2_0(), Region::LateBound(depth, idx, def_id.to_def_id()))\n     }\n \n     fn late_anon(named_late_bound_vars: u32, index: &Cell<u32>) -> Region {\n@@ -93,16 +87,16 @@ impl RegionExt for Region {\n         match *self {\n             Region::Static | Region::LateBoundAnon(..) => None,\n \n-            Region::EarlyBound(_, id, _) | Region::LateBound(_, _, id, _) | Region::Free(_, id) => {\n+            Region::EarlyBound(_, id) | Region::LateBound(_, _, id) | Region::Free(_, id) => {\n                 Some(id)\n             }\n         }\n     }\n \n     fn shifted(self, amount: u32) -> Region {\n         match self {\n-            Region::LateBound(debruijn, idx, id, origin) => {\n-                Region::LateBound(debruijn.shifted_in(amount), idx, id, origin)\n+            Region::LateBound(debruijn, idx, id) => {\n+                Region::LateBound(debruijn.shifted_in(amount), idx, id)\n             }\n             Region::LateBoundAnon(debruijn, index, anon_index) => {\n                 Region::LateBoundAnon(debruijn.shifted_in(amount), index, anon_index)\n@@ -113,8 +107,8 @@ impl RegionExt for Region {\n \n     fn shifted_out_to_binder(self, binder: ty::DebruijnIndex) -> Region {\n         match self {\n-            Region::LateBound(debruijn, index, id, origin) => {\n-                Region::LateBound(debruijn.shifted_out_to_binder(binder), index, id, origin)\n+            Region::LateBound(debruijn, index, id) => {\n+                Region::LateBound(debruijn.shifted_out_to_binder(binder), index, id)\n             }\n             Region::LateBoundAnon(debruijn, index, anon_index) => {\n                 Region::LateBoundAnon(debruijn.shifted_out_to_binder(binder), index, anon_index)\n@@ -127,7 +121,7 @@ impl RegionExt for Region {\n     where\n         L: Iterator<Item = &'a hir::Lifetime>,\n     {\n-        if let Region::EarlyBound(index, _, _) = self {\n+        if let Region::EarlyBound(index, _) = self {\n             params.nth(index as usize).and_then(|lifetime| map.defs.get(&lifetime.hir_id).cloned())\n         } else {\n             Some(self)\n@@ -568,7 +562,7 @@ fn sub_items_have_self_param(node: &hir::ItemKind<'_>) -> bool {\n \n fn late_region_as_bound_region<'tcx>(tcx: TyCtxt<'tcx>, region: &Region) -> ty::BoundVariableKind {\n     match region {\n-        Region::LateBound(_, _, def_id, _) => {\n+        Region::LateBound(_, _, def_id) => {\n             let name = tcx.hir().name(tcx.hir().local_def_id_to_hir_id(def_id.expect_local()));\n             ty::BoundVariableKind::Region(ty::BrNamed(*def_id, name))\n         }\n@@ -1010,7 +1004,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     // well-supported at the moment, so this doesn't work.\n                     // In the future, this should be fixed and this error should be removed.\n                     let def = self.map.defs.get(&lifetime.hir_id).cloned();\n-                    let Some(Region::LateBound(_, _, def_id, _)) = def else {\n+                    let Some(Region::LateBound(_, _, def_id)) = def else {\n                         continue\n                     };\n                     let Some(def_id) = def_id.as_local() else {\n@@ -1046,7 +1040,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n                             let (name, reg) = Region::early(self.tcx.hir(), &mut index, &param);\n-                            let Region::EarlyBound(_, def_id, _) = reg else {\n+                            let Region::EarlyBound(_, def_id) = reg else {\n                                 bug!();\n                             };\n                             // We cannot predict what lifetimes are unused in opaque type.\n@@ -1668,7 +1662,7 @@ fn compute_object_lifetime_defaults<'tcx>(\n                     .map(|set| match *set {\n                         Set1::Empty => \"BaseDefault\".into(),\n                         Set1::One(Region::Static) => \"'static\".into(),\n-                        Set1::One(Region::EarlyBound(mut i, _, _)) => generics\n+                        Set1::One(Region::EarlyBound(mut i, _)) => generics\n                             .params\n                             .iter()\n                             .find_map(|param| match param.kind {\n@@ -1749,18 +1743,16 @@ fn object_lifetime_defaults_for_item<'tcx>(\n                             .params\n                             .iter()\n                             .filter_map(|param| match param.kind {\n-                                GenericParamKind::Lifetime { .. } => Some((\n-                                    param.hir_id,\n-                                    hir::LifetimeName::Param(param.name),\n-                                    LifetimeDefOrigin::from_param(param),\n-                                )),\n+                                GenericParamKind::Lifetime { .. } => {\n+                                    Some((param.hir_id, hir::LifetimeName::Param(param.name)))\n+                                }\n                                 _ => None,\n                             })\n                             .enumerate()\n-                            .find(|&(_, (_, lt_name, _))| lt_name == name)\n-                            .map_or(Set1::Many, |(i, (id, _, origin))| {\n+                            .find(|&(_, (_, lt_name))| lt_name == name)\n+                            .map_or(Set1::Many, |(i, (id, _))| {\n                                 let def_id = tcx.hir().local_def_id(id);\n-                                Set1::One(Region::EarlyBound(i as u32, def_id.to_def_id(), origin))\n+                                Set1::One(Region::EarlyBound(i as u32, def_id.to_def_id()))\n                             })\n                     }\n                 }\n@@ -1948,8 +1940,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let def_ids: Vec<_> = defined_by\n             .values()\n             .flat_map(|region| match region {\n-                Region::EarlyBound(_, def_id, _)\n-                | Region::LateBound(_, _, def_id, _)\n+                Region::EarlyBound(_, def_id)\n+                | Region::LateBound(_, _, def_id)\n                 | Region::Free(_, def_id) => Some(*def_id),\n \n                 Region::LateBoundAnon(..) | Region::Static => None,\n@@ -2883,7 +2875,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             fn visit_lifetime(&mut self, lifetime_ref: &hir::Lifetime) {\n                 if let Some(&lifetime) = self.map.defs.get(&lifetime_ref.hir_id) {\n                     match lifetime {\n-                        Region::LateBound(debruijn, _, _, _)\n+                        Region::LateBound(debruijn, _, _)\n                         | Region::LateBoundAnon(debruijn, _, _)\n                             if debruijn < self.outer_index =>\n                         {\n@@ -3289,8 +3281,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             Region::Free(_, def_id)\n-            | Region::LateBound(_, _, def_id, _)\n-            | Region::EarlyBound(_, def_id, _) => {\n+            | Region::LateBound(_, _, def_id)\n+            | Region::EarlyBound(_, def_id) => {\n                 // A lifetime declared by the user.\n                 let track_lifetime_uses = self.track_lifetime_uses();\n                 debug!(?track_lifetime_uses);"}, {"sha": "1ba7534d8699bcad1e80566f34ff0683e4d12444", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9386ea9de25017e5cca5b631b88aca422d8f52ba/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9386ea9de25017e5cca5b631b88aca422d8f52ba/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=9386ea9de25017e5cca5b631b88aca422d8f52ba", "patch": "@@ -205,7 +205,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let r = match tcx.named_region(lifetime.hir_id) {\n             Some(rl::Region::Static) => tcx.lifetimes.re_static,\n \n-            Some(rl::Region::LateBound(debruijn, index, def_id, _)) => {\n+            Some(rl::Region::LateBound(debruijn, index, def_id)) => {\n                 let name = lifetime_name(def_id.expect_local());\n                 let br = ty::BoundRegion {\n                     var: ty::BoundVar::from_u32(index),\n@@ -222,7 +222,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 tcx.mk_region(ty::ReLateBound(debruijn, br))\n             }\n \n-            Some(rl::Region::EarlyBound(index, id, _)) => {\n+            Some(rl::Region::EarlyBound(index, id)) => {\n                 let name = lifetime_name(id.expect_local());\n                 tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion { def_id: id, index, name }))\n             }"}, {"sha": "24e495d499b52472264c4727ac63dc29b1dcaba2", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9386ea9de25017e5cca5b631b88aca422d8f52ba/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9386ea9de25017e5cca5b631b88aca422d8f52ba/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=9386ea9de25017e5cca5b631b88aca422d8f52ba", "patch": "@@ -1375,7 +1375,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             match self.tcx.named_region(lt.hir_id) {\n                 Some(rl::Region::Static | rl::Region::EarlyBound(..)) => {}\n                 Some(\n-                    rl::Region::LateBound(debruijn, _, _, _)\n+                    rl::Region::LateBound(debruijn, _, _)\n                     | rl::Region::LateBoundAnon(debruijn, _, _),\n                 ) if debruijn < self.outer_index => {}\n                 Some("}, {"sha": "e0e641c2f9b5eb96628ad025960f03621fcc884c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9386ea9de25017e5cca5b631b88aca422d8f52ba/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9386ea9de25017e5cca5b631b88aca422d8f52ba/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9386ea9de25017e5cca5b631b88aca422d8f52ba", "patch": "@@ -193,8 +193,8 @@ impl Clean<Lifetime> for hir::Lifetime {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Lifetime {\n         let def = cx.tcx.named_region(self.hir_id);\n         if let Some(\n-            rl::Region::EarlyBound(_, node_id, _)\n-            | rl::Region::LateBound(_, _, node_id, _)\n+            rl::Region::EarlyBound(_, node_id)\n+            | rl::Region::LateBound(_, _, node_id)\n             | rl::Region::Free(_, node_id),\n         ) = def\n         {"}]}