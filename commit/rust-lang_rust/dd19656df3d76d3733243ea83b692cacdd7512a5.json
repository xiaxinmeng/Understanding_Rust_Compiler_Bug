{"sha": "dd19656df3d76d3733243ea83b692cacdd7512a5", "node_id": "C_kwDOAAsO6NoAKGRkMTk2NTZkZjNkNzZkMzczMzI0M2VhODNiNjkyY2FjZGQ3NTEyYTU", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-12-12T14:28:08Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-12-12T14:30:01Z"}, "message": "fold instead of obliterating args", "tree": {"sha": "642f3c9d0a456491bde29b2afb32e0096517f208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/642f3c9d0a456491bde29b2afb32e0096517f208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd19656df3d76d3733243ea83b692cacdd7512a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd19656df3d76d3733243ea83b692cacdd7512a5", "html_url": "https://github.com/rust-lang/rust/commit/dd19656df3d76d3733243ea83b692cacdd7512a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd19656df3d76d3733243ea83b692cacdd7512a5/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37d7de337903a558dbeb1e82c844fe915ab8ff25", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d7de337903a558dbeb1e82c844fe915ab8ff25", "html_url": "https://github.com/rust-lang/rust/commit/37d7de337903a558dbeb1e82c844fe915ab8ff25"}], "stats": {"total": 82, "additions": 67, "deletions": 15}, "files": [{"sha": "996148a709087161775337d9945aa262c7888749", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/dd19656df3d76d3733243ea83b692cacdd7512a5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19656df3d76d3733243ea83b692cacdd7512a5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=dd19656df3d76d3733243ea83b692cacdd7512a5", "patch": "@@ -2014,31 +2014,54 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     substs: SubstsRef<'tcx>,\n ) -> SubstsRef<'tcx> {\n-    tcx.mk_substs(substs.iter().enumerate().map(|(idx, arg)| {\n-        match arg.unpack() {\n-            GenericArgKind::Type(_) if arg.has_non_region_param() || arg.has_non_region_infer() => {\n-                tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n+    struct ReplaceParamAndInferWithPlaceholder<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+        idx: usize,\n+    }\n+\n+    impl<'tcx> TypeFolder<'tcx> for ReplaceParamAndInferWithPlaceholder<'tcx> {\n+        fn tcx(&self) -> TyCtxt<'tcx> {\n+            self.tcx\n+        }\n+\n+        fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+            if let ty::Infer(_) = t.kind() {\n+                self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::ROOT,\n-                    name: ty::BoundVar::from_usize(idx),\n+                    name: ty::BoundVar::from_usize({\n+                        let idx = self.idx;\n+                        self.idx += 1;\n+                        idx\n+                    }),\n                 }))\n-                .into()\n+            } else {\n+                t.super_fold_with(self)\n             }\n-            GenericArgKind::Const(ct) if ct.has_non_region_infer() || ct.has_non_region_param() => {\n-                let ty = ct.ty();\n-                // If the type references param or infer, replace that too...\n+        }\n+\n+        fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+            if let ty::ConstKind::Infer(_) = c.kind() {\n+                let ty = c.ty();\n+                // If the type references param or infer then ICE ICE ICE\n                 if ty.has_non_region_param() || ty.has_non_region_infer() {\n-                    bug!(\"const `{ct}`'s type should not reference params or types\");\n+                    bug!(\"const `{c}`'s type should not reference params or types\");\n                 }\n-                tcx.mk_const(\n+                self.tcx.mk_const(\n                     ty::PlaceholderConst {\n                         universe: ty::UniverseIndex::ROOT,\n-                        name: ty::BoundVar::from_usize(idx),\n+                        name: ty::BoundVar::from_usize({\n+                            let idx = self.idx;\n+                            self.idx += 1;\n+                            idx\n+                        }),\n                     },\n                     ty,\n                 )\n-                .into()\n+            } else {\n+                c.super_fold_with(self)\n             }\n-            _ => arg,\n         }\n-    }))\n+    }\n+\n+    substs.fold_with(&mut ReplaceParamAndInferWithPlaceholder { tcx, idx: 0 })\n }"}, {"sha": "4c85abd5c1ea1b6c6f42c162abc652746922686d", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-105608.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dd19656df3d76d3733243ea83b692cacdd7512a5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19656df3d76d3733243ea83b692cacdd7512a5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.rs?ref=dd19656df3d76d3733243ea83b692cacdd7512a5", "patch": "@@ -0,0 +1,15 @@\n+#![allow(incomplete_features, unstable_features)]\n+#![feature(generic_const_exprs)]\n+\n+struct Combination<const STRATEGIES: usize>;\n+\n+impl<const STRATEGIES: usize> Combination<STRATEGIES> {\n+    fn and<M>(self) -> Combination<{ STRATEGIES + 1 }> {\n+        Combination\n+    }\n+}\n+\n+pub fn main() {\n+    Combination::<0>.and::<_>().and::<_>();\n+    //~^ ERROR: type annotations needed\n+}"}, {"sha": "0be4c43daacf8c89a2981605820396d5fe65caf5", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-105608.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd19656df3d76d3733243ea83b692cacdd7512a5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd19656df3d76d3733243ea83b692cacdd7512a5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.stderr?ref=dd19656df3d76d3733243ea83b692cacdd7512a5", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-105608.rs:13:22\n+   |\n+LL |     Combination::<0>.and::<_>().and::<_>();\n+   |                      ^^^ cannot infer type of the type parameter `M` declared on the associated function `and`\n+   |\n+help: consider specifying the generic argument\n+   |\n+LL |     Combination::<0>.and::<_>().and::<_>();\n+   |                         ~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}