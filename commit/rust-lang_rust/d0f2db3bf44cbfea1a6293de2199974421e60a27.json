{"sha": "d0f2db3bf44cbfea1a6293de2199974421e60a27", "node_id": "C_kwDOAAsO6NoAKGQwZjJkYjNiZjQ0Y2JmZWExYTYyOTNkZTIxOTk5NzQ0MjFlNjBhMjc", "commit": {"author": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-09-15T11:52:44Z"}, "committer": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-09-15T11:52:44Z"}, "message": "fix(generate_method): correct method indentation inside generated impl", "tree": {"sha": "a1f7d9a514d5edb6b325fe2a4a0fd63ca2f82853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1f7d9a514d5edb6b325fe2a4a0fd63ca2f82853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0f2db3bf44cbfea1a6293de2199974421e60a27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f2db3bf44cbfea1a6293de2199974421e60a27", "html_url": "https://github.com/rust-lang/rust/commit/d0f2db3bf44cbfea1a6293de2199974421e60a27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0f2db3bf44cbfea1a6293de2199974421e60a27/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b61be297568015de5d038f31a304c7a69679bc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b61be297568015de5d038f31a304c7a69679bc7", "html_url": "https://github.com/rust-lang/rust/commit/2b61be297568015de5d038f31a304c7a69679bc7"}], "stats": {"total": 85, "additions": 38, "deletions": 47}, "files": [{"sha": "f67cc924409ff4b4521fc70228aa705bd1763ffd", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 38, "deletions": 47, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d0f2db3bf44cbfea1a6293de2199974421e60a27/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f2db3bf44cbfea1a6293de2199974421e60a27/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=d0f2db3bf44cbfea1a6293de2199974421e60a27", "patch": "@@ -174,10 +174,11 @@ fn add_func_to_accumulator(\n     label: String,\n ) -> Option<()> {\n     acc.add(AssistId(\"generate_function\", AssistKind::Generate), label, text_range, |builder| {\n-        let function_template = function_builder.render();\n+        let indent = IndentLevel::from_node(function_builder.target.syntax());\n+        let function_template = function_builder.render(adt_name.is_some());\n         let mut func = function_template.to_string(ctx.config.snippet_cap);\n         if let Some(name) = adt_name {\n-            func = format!(\"\\nimpl {} {{\\n{}\\n}}\", name, func);\n+            func = format!(\"\\n{}impl {} {{\\n{}\\n{}}}\", indent, name, func, indent);\n         }\n         builder.edit_file(file);\n         match ctx.config.snippet_cap {\n@@ -307,7 +308,7 @@ impl FunctionBuilder {\n         })\n     }\n \n-    fn render(self) -> FunctionTemplate {\n+    fn render(self, is_method: bool) -> FunctionTemplate {\n         let placeholder_expr = make::ext::expr_todo();\n         let fn_body = make::block_expr(vec![], Some(placeholder_expr));\n         let visibility = if self.needs_pub { Some(make::visibility_pub_crate()) } else { None };\n@@ -325,8 +326,14 @@ impl FunctionBuilder {\n \n         match self.target {\n             GeneratedFunctionTarget::BehindItem(it) => {\n-                let indent = IndentLevel::from_node(&it);\n-                leading_ws = format!(\"\\n\\n{}\", indent);\n+                let mut indent = IndentLevel::from_node(&it);\n+                if is_method {\n+                    indent = indent + 1;\n+                    leading_ws = format!(\"{}\", indent);\n+                } else {\n+                    leading_ws = format!(\"\\n\\n{}\", indent);\n+                }\n+\n                 fn_def = fn_def.indent(indent);\n                 trailing_ws = String::new();\n             }\n@@ -1470,11 +1477,9 @@ fn foo() {S.bar$0();}\n struct S;\n fn foo() {S.bar();}\n impl S {\n-\n-\n-fn bar(&self) ${0:-> _} {\n-    todo!()\n-}\n+    fn bar(&self) ${0:-> _} {\n+        todo!()\n+    }\n }\n \",\n         )\n@@ -1516,14 +1521,12 @@ fn foo() {s::S.bar$0();}\n             r\"\n mod s {\n     pub struct S;\n-impl S {\n-\n-\n-    pub(crate) fn bar(&self) ${0:-> _} {\n-        todo!()\n+    impl S {\n+        pub(crate) fn bar(&self) ${0:-> _} {\n+            todo!()\n+        }\n     }\n }\n-}\n fn foo() {s::S.bar();}\n \",\n         )\n@@ -1550,11 +1553,9 @@ mod s {\n     }\n }\n impl S {\n-\n-\n-fn bar(&self) ${0:-> _} {\n-    todo!()\n-}\n+    fn bar(&self) ${0:-> _} {\n+        todo!()\n+    }\n }\n \n \",\n@@ -1573,11 +1574,9 @@ fn foo() {$0S.bar();}\n struct S;\n fn foo() {S.bar();}\n impl S {\n-\n-\n-fn bar(&self) ${0:-> _} {\n-    todo!()\n-}\n+    fn bar(&self) ${0:-> _} {\n+        todo!()\n+    }\n }\n \",\n         )\n@@ -1595,11 +1594,9 @@ fn foo() {S::bar$0();}\n struct S;\n fn foo() {S::bar();}\n impl S {\n-\n-\n-fn bar() ${0:-> _} {\n-    todo!()\n-}\n+    fn bar() ${0:-> _} {\n+        todo!()\n+    }\n }\n \",\n         )\n@@ -1641,14 +1638,12 @@ fn foo() {s::S::bar$0();}\n             r\"\n mod s {\n     pub struct S;\n-impl S {\n-\n-\n-    pub(crate) fn bar() ${0:-> _} {\n-        todo!()\n+    impl S {\n+        pub(crate) fn bar() ${0:-> _} {\n+            todo!()\n+        }\n     }\n }\n-}\n fn foo() {s::S::bar();}\n \",\n         )\n@@ -1666,11 +1661,9 @@ fn foo() {$0S::bar();}\n struct S;\n fn foo() {S::bar();}\n impl S {\n-\n-\n-fn bar() ${0:-> _} {\n-    todo!()\n-}\n+    fn bar() ${0:-> _} {\n+        todo!()\n+    }\n }\n \",\n         )\n@@ -1845,11 +1838,9 @@ fn main() {\n     Foo::new();\n }\n impl Foo {\n-\n-\n-fn new() ${0:-> _} {\n-    todo!()\n-}\n+    fn new() ${0:-> _} {\n+        todo!()\n+    }\n }\n \",\n         )"}]}