{"sha": "ae49770918af86a3eac0471461190ce40545ac30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNDk3NzA5MThhZjg2YTNlYWMwNDcxNDYxMTkwY2U0MDU0NWFjMzA=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-27T21:28:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-27T21:28:48Z"}, "message": "Rollup merge of #66774 - GuillaumeGomez:cleanup-err-codes-2, r=Dylan-DPC\n\nClean up error codes\n\nr? @Dylan-DPC", "tree": {"sha": "1cfce8a314e0740cf66dedf8f1a8c36df2c177be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cfce8a314e0740cf66dedf8f1a8c36df2c177be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae49770918af86a3eac0471461190ce40545ac30", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3uqQCRBK7hj4Ov3rIwAAdHIIADGqVCh8PfAc6fs5kN2FL8uf\nOMVO+cqVj2yOriV5Xi+d1eT18rFD+YqDWqepnArJqMLGbuAOU9EVnFw1FZtDYrIV\n5FKTI8cLFCKvr0UdubXK9qcxxjp2KaBNzJTTBJ/GNfji1ERuM3/TOqKpUw15qp5n\nTH0ivzSfPyoaVcaU2PDjnw7oc4pm8d3GEiwknbJ7bkTKlxs0WHcaDrUN6Tt/Dfbg\ntCUAGIdS6hUAh9SRamuWLpijJXvbTZuZrJYsJrC4fmHf0jQQU8imiTcbChOJVRY3\nTCZdW4ZAcbytH94JhtLvOxtOcA3xKz5Rm0ljEekmo+Qx9vvlgFqEE0sgtGuusF8=\n=pbbo\n-----END PGP SIGNATURE-----\n", "payload": "tree 1cfce8a314e0740cf66dedf8f1a8c36df2c177be\nparent 4c51d58de0330fad032dbc3924eb46ca6b4c5131\nparent d05a914b24c7506f4fa3c11af5c26bf809c901b7\nauthor Tyler Mandry <tmandry@gmail.com> 1574890128 -0600\ncommitter GitHub <noreply@github.com> 1574890128 -0600\n\nRollup merge of #66774 - GuillaumeGomez:cleanup-err-codes-2, r=Dylan-DPC\n\nClean up error codes\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae49770918af86a3eac0471461190ce40545ac30", "html_url": "https://github.com/rust-lang/rust/commit/ae49770918af86a3eac0471461190ce40545ac30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae49770918af86a3eac0471461190ce40545ac30/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c51d58de0330fad032dbc3924eb46ca6b4c5131", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c51d58de0330fad032dbc3924eb46ca6b4c5131", "html_url": "https://github.com/rust-lang/rust/commit/4c51d58de0330fad032dbc3924eb46ca6b4c5131"}, {"sha": "d05a914b24c7506f4fa3c11af5c26bf809c901b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d05a914b24c7506f4fa3c11af5c26bf809c901b7", "html_url": "https://github.com/rust-lang/rust/commit/d05a914b24c7506f4fa3c11af5c26bf809c901b7"}], "stats": {"total": 77, "additions": 44, "deletions": 33}, "files": [{"sha": "bc2c03a0220826f81558b003a18cbd71a891f04e", "filename": "src/librustc_error_codes/error_codes/E0071.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae49770918af86a3eac0471461190ce40545ac30/src%2Flibrustc_error_codes%2Ferror_codes%2FE0071.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae49770918af86a3eac0471461190ce40545ac30/src%2Flibrustc_error_codes%2Ferror_codes%2FE0071.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0071.md?ref=ae49770918af86a3eac0471461190ce40545ac30", "patch": "@@ -1,5 +1,5 @@\n-You tried to use structure-literal syntax to create an item that is\n-not a structure or enum variant.\n+A structure-literal syntax was used to create an item that is not a structure\n+or enum variant.\n \n Example of erroneous code:\n \n@@ -9,8 +9,8 @@ let t = U32 { value: 4 }; // error: expected struct, variant or union type,\n                           // found builtin type `u32`\n ```\n \n-To fix this, ensure that the name was correctly spelled, and that\n-the correct form of initializer was used.\n+To fix this, ensure that the name was correctly spelled, and that the correct\n+form of initializer was used.\n \n For example, the code above can be fixed to:\n "}, {"sha": "8f7749abab1e5be25c01e7632f74b2a9a41f4cfe", "filename": "src/librustc_error_codes/error_codes/E0072.md", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ae49770918af86a3eac0471461190ce40545ac30/src%2Flibrustc_error_codes%2Ferror_codes%2FE0072.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae49770918af86a3eac0471461190ce40545ac30/src%2Flibrustc_error_codes%2Ferror_codes%2FE0072.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0072.md?ref=ae49770918af86a3eac0471461190ce40545ac30", "patch": "@@ -1,20 +1,23 @@\n-When defining a recursive struct or enum, any use of the type being defined\n-from inside the definition must occur behind a pointer (like `Box` or `&`).\n-This is because structs and enums must have a well-defined size, and without\n-the pointer, the size of the type would need to be unbounded.\n+A recursive type has infinite size because it doesn't have an indirection.\n \n-Consider the following erroneous definition of a type for a list of bytes:\n+Erroneous code example:\n \n ```compile_fail,E0072\n-// error, invalid recursive struct type\n struct ListNode {\n     head: u8,\n-    tail: Option<ListNode>,\n+    tail: Option<ListNode>, // error: no indirection here so impossible to\n+                            //        compute the type's size\n }\n ```\n \n-This type cannot have a well-defined size, because it needs to be arbitrarily\n-large (since we would be able to nest `ListNode`s to any depth). Specifically,\n+When defining a recursive struct or enum, any use of the type being defined\n+from inside the definition must occur behind a pointer (like `Box`, `&` or\n+`Rc`). This is because structs and enums must have a well-defined size, and\n+without the pointer, the size of the type would need to be unbounded.\n+\n+In the example, the type cannot have a well-defined size, because it needs to be\n+arbitrarily large (since we would be able to nest `ListNode`s to any depth).\n+Specifically,\n \n ```plain\n size of `ListNode` = 1 byte for `head`"}, {"sha": "969c1ee71313e8f7f132d33eab18a3e850e81f76", "filename": "src/librustc_error_codes/error_codes/E0075.md", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ae49770918af86a3eac0471461190ce40545ac30/src%2Flibrustc_error_codes%2Ferror_codes%2FE0075.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae49770918af86a3eac0471461190ce40545ac30/src%2Flibrustc_error_codes%2Ferror_codes%2FE0075.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0075.md?ref=ae49770918af86a3eac0471461190ce40545ac30", "patch": "@@ -1,21 +1,23 @@\n-The `#[simd]` attribute can only be applied to non empty tuple structs, because\n-it doesn't make sense to try to use SIMD operations when there are no values to\n-operate on.\n+A `#[simd]` attribute was applied to an empty tuple struct.\n \n-This will cause an error:\n+Erroneous code example:\n \n ```compile_fail,E0075\n #![feature(repr_simd)]\n \n #[repr(simd)]\n-struct Bad;\n+struct Bad; // error!\n ```\n \n-This will not:\n+The `#[simd]` attribute can only be applied to non empty tuple structs, because\n+it doesn't make sense to try to use SIMD operations when there are no values to\n+operate on.\n+\n+Fixed example:\n \n ```\n #![feature(repr_simd)]\n \n #[repr(simd)]\n-struct Good(u32);\n+struct Good(u32); // ok!\n ```"}, {"sha": "f293a2a5772db90a5c62caac983445ee1750bd78", "filename": "src/librustc_error_codes/error_codes/E0076.md", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ae49770918af86a3eac0471461190ce40545ac30/src%2Flibrustc_error_codes%2Ferror_codes%2FE0076.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae49770918af86a3eac0471461190ce40545ac30/src%2Flibrustc_error_codes%2Ferror_codes%2FE0076.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0076.md?ref=ae49770918af86a3eac0471461190ce40545ac30", "patch": "@@ -1,21 +1,24 @@\n-When using the `#[simd]` attribute to automatically use SIMD operations in tuple\n-struct, the types in the struct must all be of the same type, or the compiler\n-will trigger this error.\n+All types in a tuple struct aren't the same when using the `#[simd]`\n+attribute.\n \n-This will cause an error:\n+Erroneous code example:\n \n ```compile_fail,E0076\n #![feature(repr_simd)]\n \n #[repr(simd)]\n-struct Bad(u16, u32, u32);\n+struct Bad(u16, u32, u32); // error!\n ```\n \n-This will not:\n+When using the `#[simd]` attribute to automatically use SIMD operations in tuple\n+struct, the types in the struct must all be of the same type, or the compiler\n+will trigger this error.\n+\n+Fixed example:\n \n ```\n #![feature(repr_simd)]\n \n #[repr(simd)]\n-struct Good(u32, u32, u32);\n+struct Good(u32, u32, u32); // ok!\n ```"}, {"sha": "b14513c6ccf1fea776b7ce66fbbea2d92d269c8d", "filename": "src/librustc_error_codes/error_codes/E0077.md", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae49770918af86a3eac0471461190ce40545ac30/src%2Flibrustc_error_codes%2Ferror_codes%2FE0077.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae49770918af86a3eac0471461190ce40545ac30/src%2Flibrustc_error_codes%2Ferror_codes%2FE0077.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0077.md?ref=ae49770918af86a3eac0471461190ce40545ac30", "patch": "@@ -1,20 +1,23 @@\n-When using the `#[simd]` attribute on a tuple struct, the elements in the tuple\n-must be machine types so SIMD operations can be applied to them.\n+A tuple struct's element isn't a machine type when using the `#[simd]`\n+attribute.\n \n-This will cause an error:\n+Erroneous code example:\n \n ```compile_fail,E0077\n #![feature(repr_simd)]\n \n #[repr(simd)]\n-struct Bad(String);\n+struct Bad(String); // error!\n ```\n \n-This will not:\n+When using the `#[simd]` attribute on a tuple struct, the elements in the tuple\n+must be machine types so SIMD operations can be applied to them.\n+\n+Fixed example:\n \n ```\n #![feature(repr_simd)]\n \n #[repr(simd)]\n-struct Good(u32, u32, u32);\n+struct Good(u32, u32, u32); // ok!\n ```"}]}