{"sha": "2da9856f171f909dd072bd59d190a036dc13fc38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYTk4NTZmMTcxZjkwOWRkMDcyYmQ1OWQxOTBhMDM2ZGMxM2ZjMzg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-21T19:21:51Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-21T19:21:51Z"}, "message": "Add internal io::Error::new_const tot avoid allocations.", "tree": {"sha": "fbe78816975115e6ef6f37ee30cd3373ff6665de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbe78816975115e6ef6f37ee30cd3373ff6665de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2da9856f171f909dd072bd59d190a036dc13fc38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2da9856f171f909dd072bd59d190a036dc13fc38", "html_url": "https://github.com/rust-lang/rust/commit/2da9856f171f909dd072bd59d190a036dc13fc38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2da9856f171f909dd072bd59d190a036dc13fc38/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f398a49829e837ffc62f2242e549248b7541e430", "url": "https://api.github.com/repos/rust-lang/rust/commits/f398a49829e837ffc62f2242e549248b7541e430", "html_url": "https://github.com/rust-lang/rust/commit/f398a49829e837ffc62f2242e549248b7541e430"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "f4802c32a723f9bf9cdcdb1fd647f70b71a00a1f", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2da9856f171f909dd072bd59d190a036dc13fc38/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da9856f171f909dd072bd59d190a036dc13fc38/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=2da9856f171f909dd072bd59d190a036dc13fc38", "patch": "@@ -69,6 +69,8 @@ impl fmt::Debug for Error {\n enum Repr {\n     Os(i32),\n     Simple(ErrorKind),\n+    // &str is a fat pointer, but &&str is a thin pointer.\n+    SimpleMessage(ErrorKind, &'static &'static str),\n     Custom(Box<Custom>),\n }\n \n@@ -259,6 +261,18 @@ impl Error {\n         Error { repr: Repr::Custom(Box::new(Custom { kind, error })) }\n     }\n \n+    /// Creates a new I/O error from a known kind of error as well as a\n+    /// constant message.\n+    ///\n+    /// This function not allocate.\n+    ///\n+    /// This function should maybe change to\n+    /// `new_const<const MSG: &'static str>(kind: ErrorKind)`\n+    /// in the future, when const generics allows that.\n+    pub(crate) const fn new_const(kind: ErrorKind, message: &'static &'static str) -> Error {\n+        Self { repr: Repr::SimpleMessage(kind, message) }\n+    }\n+\n     /// Returns an error representing the last OS error which occurred.\n     ///\n     /// This function reads the value of `errno` for the target platform (e.g.\n@@ -342,6 +356,7 @@ impl Error {\n             Repr::Os(i) => Some(i),\n             Repr::Custom(..) => None,\n             Repr::Simple(..) => None,\n+            Repr::SimpleMessage(..) => None,\n         }\n     }\n \n@@ -377,6 +392,7 @@ impl Error {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Simple(..) => None,\n+            Repr::SimpleMessage(..) => None,\n             Repr::Custom(ref c) => Some(&*c.error),\n         }\n     }\n@@ -448,6 +464,7 @@ impl Error {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Simple(..) => None,\n+            Repr::SimpleMessage(..) => None,\n             Repr::Custom(ref mut c) => Some(&mut *c.error),\n         }\n     }\n@@ -484,6 +501,7 @@ impl Error {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Simple(..) => None,\n+            Repr::SimpleMessage(..) => None,\n             Repr::Custom(c) => Some(c.error),\n         }\n     }\n@@ -512,6 +530,7 @@ impl Error {\n             Repr::Os(code) => sys::decode_error_kind(code),\n             Repr::Custom(ref c) => c.kind,\n             Repr::Simple(kind) => kind,\n+            Repr::SimpleMessage(kind, _) => kind,\n         }\n     }\n }\n@@ -527,6 +546,9 @@ impl fmt::Debug for Repr {\n                 .finish(),\n             Repr::Custom(ref c) => fmt::Debug::fmt(&c, fmt),\n             Repr::Simple(kind) => fmt.debug_tuple(\"Kind\").field(&kind).finish(),\n+            Repr::SimpleMessage(kind, &message) => {\n+                fmt.debug_struct(\"Error\").field(\"kind\", &kind).field(\"message\", &message).finish()\n+            }\n         }\n     }\n }\n@@ -541,6 +563,7 @@ impl fmt::Display for Error {\n             }\n             Repr::Custom(ref c) => c.error.fmt(fmt),\n             Repr::Simple(kind) => write!(fmt, \"{}\", kind.as_str()),\n+            Repr::SimpleMessage(_, &msg) => msg.fmt(fmt),\n         }\n     }\n }\n@@ -551,6 +574,7 @@ impl error::Error for Error {\n     fn description(&self) -> &str {\n         match self.repr {\n             Repr::Os(..) | Repr::Simple(..) => self.kind().as_str(),\n+            Repr::SimpleMessage(_, &msg) => msg,\n             Repr::Custom(ref c) => c.error.description(),\n         }\n     }\n@@ -560,6 +584,7 @@ impl error::Error for Error {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Simple(..) => None,\n+            Repr::SimpleMessage(..) => None,\n             Repr::Custom(ref c) => c.error.cause(),\n         }\n     }\n@@ -568,6 +593,7 @@ impl error::Error for Error {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Simple(..) => None,\n+            Repr::SimpleMessage(..) => None,\n             Repr::Custom(ref c) => c.error.source(),\n         }\n     }"}]}