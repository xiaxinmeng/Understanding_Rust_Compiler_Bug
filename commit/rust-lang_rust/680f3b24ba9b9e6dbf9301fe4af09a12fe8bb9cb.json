{"sha": "680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MGYzYjI0YmE5YjllNmRiZjkzMDFmZTRhZjA5YTEyZmU4YmI5Y2I=", "commit": {"author": {"name": "Isaac Whitfield", "email": "iw@whitfin.io", "date": "2018-05-12T17:20:53Z"}, "committer": {"name": "Isaac Whitfield", "email": "iw@whitfin.io", "date": "2018-05-18T16:37:29Z"}, "message": "Serialize attributes into the CrateRoot", "tree": {"sha": "105f3c791d2d02b6f73c73438bc11286b9655208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/105f3c791d2d02b6f73c73438bc11286b9655208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "html_url": "https://github.com/rust-lang/rust/commit/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/comments", "author": {"login": "whitfin", "id": 5376378, "node_id": "MDQ6VXNlcjUzNzYzNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5376378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitfin", "html_url": "https://github.com/whitfin", "followers_url": "https://api.github.com/users/whitfin/followers", "following_url": "https://api.github.com/users/whitfin/following{/other_user}", "gists_url": "https://api.github.com/users/whitfin/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitfin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitfin/subscriptions", "organizations_url": "https://api.github.com/users/whitfin/orgs", "repos_url": "https://api.github.com/users/whitfin/repos", "events_url": "https://api.github.com/users/whitfin/events{/privacy}", "received_events_url": "https://api.github.com/users/whitfin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "whitfin", "id": 5376378, "node_id": "MDQ6VXNlcjUzNzYzNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5376378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitfin", "html_url": "https://github.com/whitfin", "followers_url": "https://api.github.com/users/whitfin/followers", "following_url": "https://api.github.com/users/whitfin/following{/other_user}", "gists_url": "https://api.github.com/users/whitfin/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitfin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitfin/subscriptions", "organizations_url": "https://api.github.com/users/whitfin/orgs", "repos_url": "https://api.github.com/users/whitfin/repos", "events_url": "https://api.github.com/users/whitfin/events{/privacy}", "received_events_url": "https://api.github.com/users/whitfin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca60c404b622c4e65db2d0171ef45c42635316bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca60c404b622c4e65db2d0171ef45c42635316bf", "html_url": "https://github.com/rust-lang/rust/commit/ca60c404b622c4e65db2d0171ef45c42635316bf"}], "stats": {"total": 144, "additions": 80, "deletions": 64}, "files": [{"sha": "1549ef5e928c7ef4c581ce77d3890b04d69e2463", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "patch": "@@ -453,16 +453,20 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n         out\n     }\n \n-    fn dep_nodes(&self, labels: &Labels, def_id: DefId) -> Vec<DepNode> {\n-        let mut out = Vec::with_capacity(labels.len());\n+    fn dep_nodes<'l>(\n+        &self,\n+        labels: &'l Labels,\n+        def_id: DefId\n+    ) -> impl Iterator<Item = DepNode> + 'l {\n         let def_path_hash = self.tcx.def_path_hash(def_id);\n-        for label in labels.iter() {\n-            match DepNode::from_label_string(label, def_path_hash) {\n-                Ok(dep_node) => out.push(dep_node),\n-                Err(()) => unreachable!(),\n-            }\n-        }\n-        out\n+        labels\n+            .iter()\n+            .map(move |label| {\n+                match DepNode::from_label_string(label, def_path_hash) {\n+                    Ok(dep_node) => dep_node,\n+                    Err(()) => unreachable!(),\n+                }\n+            })\n     }\n \n     fn dep_node_str(&self, dep_node: &DepNode) -> String {"}, {"sha": "c0ccbd67a31605e395f330b7464e6b651f2d252d", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "patch": "@@ -28,7 +28,6 @@ pub fn copy_cgu_workproducts_to_incr_comp_cache_dir(\n     if sess.opts.incremental.is_none() {\n         return None\n     }\n-    let work_product_id = WorkProductId::from_cgu_name(cgu_name);\n \n     let saved_files: Option<Vec<_>> =\n         files.iter()\n@@ -63,6 +62,7 @@ pub fn copy_cgu_workproducts_to_incr_comp_cache_dir(\n         saved_files,\n     };\n \n+    let work_product_id = WorkProductId::from_cgu_name(cgu_name);\n     Some((work_product_id, work_product))\n }\n "}, {"sha": "5675396f407772c554656b832407202004307c77", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "patch": "@@ -11,7 +11,6 @@\n //! Validates all used crates and extern libraries and loads their metadata\n \n use cstore::{self, CStore, CrateSource, MetadataBlob};\n-use decoder::Metadata;\n use locator::{self, CratePaths};\n use schema::CrateRoot;\n use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n@@ -223,17 +222,6 @@ impl<'a> CrateLoader<'a> {\n             crate_root.def_path_table.decode((&metadata, self.sess))\n         });\n \n-        let crate_entry = crate_root\n-            .index\n-            .lookup(metadata.raw_bytes(), CRATE_DEF_INDEX)\n-            .unwrap()\n-            .decode(&metadata);\n-\n-        let crate_attrs: Vec<ast::Attribute> = crate_entry\n-            .attributes\n-            .decode((&metadata, self.sess))\n-            .collect();\n-\n         let trait_impls = crate_root\n             .impls\n             .decode((&metadata, self.sess))\n@@ -259,14 +247,7 @@ impl<'a> CrateLoader<'a> {\n                 dylib,\n                 rlib,\n                 rmeta,\n-            },\n-            compiler_builtins: attr::contains_name(&crate_attrs, \"compiler_builtins\"),\n-            needs_allocator: attr::contains_name(&crate_attrs, \"needs_allocator\"),\n-            needs_panic_runtime: attr::contains_name(&crate_attrs, \"needs_panic_runtime\"),\n-            no_builtins: attr::contains_name(&crate_attrs, \"no_builtins\"),\n-            panic_runtime: attr::contains_name(&crate_attrs, \"panic_runtime\"),\n-            profiler_runtime: attr::contains_name(&crate_attrs, \"profiler_runtime\"),\n-            sanitizer_runtime: attr::contains_name(&crate_attrs, \"sanitizer_runtime\"),\n+            }\n         };\n \n         let cmeta = Lrc::new(cmeta);\n@@ -661,12 +642,12 @@ impl<'a> CrateLoader<'a> {\n \n         self.cstore.iter_crate_data(|cnum, data| {\n             needs_panic_runtime = needs_panic_runtime ||\n-                                  data.needs_panic_runtime;\n-            if data.panic_runtime {\n+                                  data.needs_panic_runtime();\n+            if data.is_panic_runtime() {\n                 // Inject a dependency from all #![needs_panic_runtime] to this\n                 // #![panic_runtime] crate.\n                 self.inject_dependency_if(cnum, \"a panic runtime\",\n-                                          &|data| data.needs_panic_runtime);\n+                                          &|data| data.needs_panic_runtime());\n                 runtime_found = runtime_found || *data.dep_kind.lock() == DepKind::Explicit;\n             }\n         });\n@@ -703,7 +684,7 @@ impl<'a> CrateLoader<'a> {\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n         // and the panic strategy is indeed what we thought it was.\n-        if !data.panic_runtime {\n+        if !data.is_panic_runtime() {\n             self.sess.err(&format!(\"the crate `{}` is not a panic runtime\",\n                                    name));\n         }\n@@ -715,7 +696,7 @@ impl<'a> CrateLoader<'a> {\n \n         self.sess.injected_panic_runtime.set(Some(cnum));\n         self.inject_dependency_if(cnum, \"a panic runtime\",\n-                                  &|data| data.needs_panic_runtime);\n+                                  &|data| data.needs_panic_runtime());\n     }\n \n     fn inject_sanitizer_runtime(&mut self) {\n@@ -810,7 +791,7 @@ impl<'a> CrateLoader<'a> {\n                                        PathKind::Crate, dep_kind);\n \n                 // Sanity check the loaded crate to ensure it is indeed a sanitizer runtime\n-                if !data.sanitizer_runtime {\n+                if !data.is_sanitizer_runtime() {\n                     self.sess.err(&format!(\"the crate `{}` is not a sanitizer runtime\",\n                                            name));\n                 }\n@@ -833,7 +814,7 @@ impl<'a> CrateLoader<'a> {\n                                    PathKind::Crate, dep_kind);\n \n             // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n-            if !data.profiler_runtime {\n+            if !data.is_profiler_runtime() {\n                 self.sess.err(&format!(\"the crate `profiler_builtins` is not \\\n                                         a profiler runtime\"));\n             }\n@@ -850,7 +831,7 @@ impl<'a> CrateLoader<'a> {\n         let mut needs_allocator = attr::contains_name(&krate.attrs,\n                                                       \"needs_allocator\");\n         self.cstore.iter_crate_data(|_, data| {\n-            needs_allocator = needs_allocator || data.needs_allocator;\n+            needs_allocator = needs_allocator || data.needs_allocator();\n         });\n         if !needs_allocator {\n             self.sess.injected_allocator.set(None);"}, {"sha": "c267ce9ed215a12be5635d0159a3317844c37514", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "patch": "@@ -85,15 +85,6 @@ pub struct CrateMetadata {\n     pub source: CrateSource,\n \n     pub proc_macros: Option<Vec<(ast::Name, Lrc<SyntaxExtension>)>>,\n-\n-    // Booleans derived from attributes\n-    pub compiler_builtins: bool,\n-    pub needs_allocator: bool,\n-    pub needs_panic_runtime: bool,\n-    pub no_builtins: bool,\n-    pub panic_runtime: bool,\n-    pub profiler_runtime: bool,\n-    pub sanitizer_runtime: bool,\n }\n \n pub struct CStore {\n@@ -199,6 +190,10 @@ impl CrateMetadata {\n         self.root.disambiguator\n     }\n \n+    pub fn needs_allocator(&self) -> bool {\n+        self.root.needs_allocator\n+    }\n+\n     pub fn has_global_allocator(&self) -> bool {\n         self.root.has_global_allocator\n     }\n@@ -207,6 +202,30 @@ impl CrateMetadata {\n         self.root.has_default_lib_allocator\n     }\n \n+    pub fn is_panic_runtime(&self) -> bool {\n+        self.root.panic_runtime\n+    }\n+\n+    pub fn needs_panic_runtime(&self) -> bool {\n+        self.root.needs_panic_runtime\n+    }\n+\n+    pub fn is_compiler_builtins(&self) -> bool {\n+        self.root.compiler_builtins\n+    }\n+\n+    pub fn is_sanitizer_runtime(&self) -> bool {\n+        self.root.sanitizer_runtime\n+    }\n+\n+    pub fn is_profiler_runtime(&self) -> bool {\n+        self.root.profiler_runtime\n+    }\n+\n+    pub fn is_no_builtins(&self) -> bool {\n+        self.root.no_builtins\n+    }\n+\n     pub fn panic_strategy(&self) -> PanicStrategy {\n         self.root.panic_strategy\n     }"}, {"sha": "6bb6b1a1747d5ccf69af661a4831ab58daf101db", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "patch": "@@ -170,17 +170,17 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n \n     dylib_dependency_formats => { Lrc::new(cdata.get_dylib_dependency_formats()) }\n-    is_panic_runtime => { cdata.panic_runtime }\n-    is_compiler_builtins => { cdata.compiler_builtins }\n+    is_panic_runtime => { cdata.is_panic_runtime() }\n+    is_compiler_builtins => { cdata.is_compiler_builtins() }\n     has_global_allocator => { cdata.has_global_allocator() }\n-    is_sanitizer_runtime => { cdata.sanitizer_runtime }\n-    is_profiler_runtime => { cdata.profiler_runtime }\n+    is_sanitizer_runtime => { cdata.is_sanitizer_runtime() }\n+    is_profiler_runtime => { cdata.is_profiler_runtime() }\n     panic_strategy => { cdata.panic_strategy() }\n     extern_crate => {\n         let r = Lrc::new(*cdata.extern_crate.lock());\n         r\n     }\n-    is_no_builtins => { cdata.no_builtins }\n+    is_no_builtins => { cdata.is_no_builtins() }\n     impl_defaultness => { cdata.get_impl_defaultness(def_id.index) }\n     reachable_non_generics => {\n         let reachable_non_generics = tcx"}, {"sha": "8af4649ed5f40e625a2c41428c1e1f389fd00990", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "patch": "@@ -557,12 +557,14 @@ impl<'a, 'tcx> CrateMetadata {\n                        -> &'tcx ty::AdtDef {\n         let item = self.entry(item_id);\n         let did = self.local_def_id(item_id);\n-        let kind = match item.kind {\n-            EntryKind::Enum(_) => ty::AdtKind::Enum,\n-            EntryKind::Struct(_, _) => ty::AdtKind::Struct,\n-            EntryKind::Union(_, _) => ty::AdtKind::Union,\n+\n+        let (kind, repr) = match item.kind {\n+            EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),\n+            EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),\n+            EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),\n             _ => bug!(\"get_adt_def called on a non-ADT {:?}\", did),\n         };\n+\n         let variants = if let ty::AdtKind::Enum = kind {\n             item.children\n                 .decode(self)\n@@ -573,12 +575,6 @@ impl<'a, 'tcx> CrateMetadata {\n         } else {\n             vec![self.get_variant(&item, item_id)]\n         };\n-        let (kind, repr) = match item.kind {\n-            EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),\n-            EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),\n-            EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),\n-            _ => bug!(\"get_adt_def called on a non-ADT {:?}\", did),\n-        };\n \n         tcx.alloc_adt_def(did, kind, variants, repr)\n     }"}, {"sha": "a08b6cdfc1d0618e2f598377ef278875adf7432a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "patch": "@@ -483,10 +483,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let index = items.write_index(&mut self.opaque.cursor);\n         let index_bytes = self.position() - i;\n \n+        let attrs = tcx.hir.krate_attrs();\n         let link_meta = self.link_meta;\n         let is_proc_macro = tcx.sess.crate_types.borrow().contains(&CrateTypeProcMacro);\n-        let has_default_lib_allocator =\n-            attr::contains_name(tcx.hir.krate_attrs(), \"default_lib_allocator\");\n+        let has_default_lib_allocator = attr::contains_name(&attrs, \"default_lib_allocator\");\n         let has_global_allocator = *tcx.sess.has_global_allocator.get();\n \n         let root = self.lazy(&CrateRoot {\n@@ -510,6 +510,14 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 None\n             },\n \n+            compiler_builtins: attr::contains_name(&attrs, \"compiler_builtins\"),\n+            needs_allocator: attr::contains_name(&attrs, \"needs_allocator\"),\n+            needs_panic_runtime: attr::contains_name(&attrs, \"needs_panic_runtime\"),\n+            no_builtins: attr::contains_name(&attrs, \"no_builtins\"),\n+            panic_runtime: attr::contains_name(&attrs, \"panic_runtime\"),\n+            profiler_runtime: attr::contains_name(&attrs, \"profiler_runtime\"),\n+            sanitizer_runtime: attr::contains_name(&attrs, \"sanitizer_runtime\"),\n+\n             crate_deps,\n             dylib_dependency_formats,\n             lang_items,"}, {"sha": "2e89ea6d2c1213bc7899cd49300738b6c4246245", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "patch": "@@ -210,6 +210,14 @@ pub struct CrateRoot {\n     pub interpret_alloc_index: LazySeq<u32>,\n \n     pub index: LazySeq<index::Index>,\n+\n+    pub compiler_builtins: bool,\n+    pub needs_allocator: bool,\n+    pub needs_panic_runtime: bool,\n+    pub no_builtins: bool,\n+    pub panic_runtime: bool,\n+    pub profiler_runtime: bool,\n+    pub sanitizer_runtime: bool,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}]}