{"sha": "0fee731a9555beb903f45b531f4f0702a88e1b44", "node_id": "C_kwDOAAsO6NoAKDBmZWU3MzFhOTU1NWJlYjkwM2Y0NWI1MzFmNGYwNzAyYTg4ZTFiNDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-31T05:57:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-31T05:57:58Z"}, "message": "Rollup merge of #101025 - semarie:openbsd-archs, r=petrochenkov\n\nAdd tier-3 support for powerpc64 and riscv64 openbsd\n\n# powerpc64\n- MCP for [powerpc64-unknown-openbsd tier-3 support](https://github.com/rust-lang/compiler-team/issues/551)\n- only need to add spec definition in rustc_target\n\n# riscv64\n- MCP for [riscv64-unknown-openbsd tier-3 support](https://github.com/rust-lang/compiler-team/issues/552)\n- add spec definition in rustc_target\n- follow freebsd about avoiding linking with `libatomic`", "tree": {"sha": "522bff8bafa4d1b3c46f4496f769db2eeabf1b25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/522bff8bafa4d1b3c46f4496f769db2eeabf1b25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fee731a9555beb903f45b531f4f0702a88e1b44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDvhmCRBK7hj4Ov3rIwAA3ZIIAAdC4PaSaRxOeTzIQhHQN287\nqQmI4Et2Zkx5UogpDJJSqKaiOxHnB7xjjfg7bPIWXnmjHnz/r3USJTlcMoOnm58k\nyyosmdDK6Ky8BFZP4q2koR3Cdax+8uiZxdi9uJlJJY/IERWH1mSd2XSXPJ1jqjvh\n0bCt+9C37j4GxFaZVcoSeftz3i617gGjdXr8n3B4zsI5Ecg36jixm7yw/IMBbKCq\n8njEvtsKgO2IYArhr+AOkbOg7SwzJrhzawoYQrlx5YQRq0vlaPPVMWQruaZ3efT8\ndjGj3RVvW7RA4mo2EuzRGeYYQU7sSUUxwWooxFYfLIJibAiMp4+4uXjupBktpq0=\n=RrXf\n-----END PGP SIGNATURE-----\n", "payload": "tree 522bff8bafa4d1b3c46f4496f769db2eeabf1b25\nparent 1484742f4ab19cbca9de4156bf42a67d08a3c58f\nparent 1de5b226782361d9ea1929fd619f4fc2aaab1094\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661925478 +0200\ncommitter GitHub <noreply@github.com> 1661925478 +0200\n\nRollup merge of #101025 - semarie:openbsd-archs, r=petrochenkov\n\nAdd tier-3 support for powerpc64 and riscv64 openbsd\n\n# powerpc64\n- MCP for [powerpc64-unknown-openbsd tier-3 support](https://github.com/rust-lang/compiler-team/issues/551)\n- only need to add spec definition in rustc_target\n\n# riscv64\n- MCP for [riscv64-unknown-openbsd tier-3 support](https://github.com/rust-lang/compiler-team/issues/552)\n- add spec definition in rustc_target\n- follow freebsd about avoiding linking with `libatomic`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fee731a9555beb903f45b531f4f0702a88e1b44", "html_url": "https://github.com/rust-lang/rust/commit/0fee731a9555beb903f45b531f4f0702a88e1b44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fee731a9555beb903f45b531f4f0702a88e1b44/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1484742f4ab19cbca9de4156bf42a67d08a3c58f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1484742f4ab19cbca9de4156bf42a67d08a3c58f", "html_url": "https://github.com/rust-lang/rust/commit/1484742f4ab19cbca9de4156bf42a67d08a3c58f"}, {"sha": "1de5b226782361d9ea1929fd619f4fc2aaab1094", "url": "https://api.github.com/repos/rust-lang/rust/commits/1de5b226782361d9ea1929fd619f4fc2aaab1094", "html_url": "https://github.com/rust-lang/rust/commit/1de5b226782361d9ea1929fd619f4fc2aaab1094"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "28e092c1eb72c1c9205068aa388bc5d912dc0a8c", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fee731a9555beb903f45b531f4f0702a88e1b44/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fee731a9555beb903f45b531f4f0702a88e1b44/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=0fee731a9555beb903f45b531f4f0702a88e1b44", "patch": "@@ -342,10 +342,10 @@ fn main() {\n     };\n \n     // RISC-V GCC erroneously requires libatomic for sub-word\n-    // atomic operations. FreeBSD uses Clang as its system\n+    // atomic operations. Some BSD uses Clang as its system\n     // compiler and provides no libatomic in its base system so\n     // does not want this.\n-    if !target.contains(\"freebsd\") && target.starts_with(\"riscv\") {\n+    if target.starts_with(\"riscv\") && !target.contains(\"freebsd\") && !target.contains(\"openbsd\") {\n         println!(\"cargo:rustc-link-lib=atomic\");\n     }\n "}, {"sha": "aa73625ff810cc6a100823be9817de4cf2cc826e", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fee731a9555beb903f45b531f4f0702a88e1b44/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fee731a9555beb903f45b531f4f0702a88e1b44/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=0fee731a9555beb903f45b531f4f0702a88e1b44", "patch": "@@ -944,9 +944,11 @@ supported_targets! {\n \n     (\"aarch64-unknown-openbsd\", aarch64_unknown_openbsd),\n     (\"i686-unknown-openbsd\", i686_unknown_openbsd),\n+    (\"powerpc-unknown-openbsd\", powerpc_unknown_openbsd),\n+    (\"powerpc64-unknown-openbsd\", powerpc64_unknown_openbsd),\n+    (\"riscv64gc-unknown-openbsd\", riscv64gc_unknown_openbsd),\n     (\"sparc64-unknown-openbsd\", sparc64_unknown_openbsd),\n     (\"x86_64-unknown-openbsd\", x86_64_unknown_openbsd),\n-    (\"powerpc-unknown-openbsd\", powerpc_unknown_openbsd),\n \n     (\"aarch64-unknown-netbsd\", aarch64_unknown_netbsd),\n     (\"armv6-unknown-netbsd-eabihf\", armv6_unknown_netbsd_eabihf),"}, {"sha": "9cb3a67dc58b3d8b0ef3f1b1a04c4862d3c80cbe", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_openbsd.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0fee731a9555beb903f45b531f4f0702a88e1b44/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fee731a9555beb903f45b531f4f0702a88e1b44/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_openbsd.rs?ref=0fee731a9555beb903f45b531f4f0702a88e1b44", "patch": "@@ -0,0 +1,17 @@\n+use crate::abi::Endian;\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let mut base = super::openbsd_base::opts();\n+    base.cpu = \"ppc64\".into();\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n+    base.max_atomic_width = Some(64);\n+\n+    Target {\n+        llvm_target: \"powerpc64-unknown-openbsd\".into(),\n+        pointer_width: 64,\n+        data_layout: \"E-m:e-i64:64-n32:64\".into(),\n+        arch: \"powerpc64\".into(),\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".into(), ..base },\n+    }\n+}"}, {"sha": "cd10f3afaac06362542da6b58d332f1ee2b929bf", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_openbsd.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0fee731a9555beb903f45b531f4f0702a88e1b44/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fee731a9555beb903f45b531f4f0702a88e1b44/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_openbsd.rs?ref=0fee731a9555beb903f45b531f4f0702a88e1b44", "patch": "@@ -0,0 +1,18 @@\n+use crate::spec::{CodeModel, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"riscv64-unknown-openbsd\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        arch: \"riscv64\".into(),\n+        options: TargetOptions {\n+            code_model: Some(CodeModel::Medium),\n+            cpu: \"generic-rv64\".into(),\n+            features: \"+m,+a,+f,+d,+c\".into(),\n+            llvm_abiname: \"lp64d\".into(),\n+            max_atomic_width: Some(64),\n+            ..super::openbsd_base::opts()\n+        },\n+    }\n+}"}, {"sha": "e1cc8d671d7fe892a0048627a1b3ba2e3bbad846", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fee731a9555beb903f45b531f4f0702a88e1b44/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fee731a9555beb903f45b531f4f0702a88e1b44/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=0fee731a9555beb903f45b531f4f0702a88e1b44", "patch": "@@ -432,12 +432,13 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n \n-        if target.starts_with(\"riscv\") && !target.contains(\"freebsd\") {\n+        if target.starts_with(\"riscv\") && !target.contains(\"freebsd\") && !target.contains(\"openbsd\")\n+        {\n             // RISC-V GCC erroneously requires linking against\n             // `libatomic` when using 1-byte and 2-byte C++\n             // atomics but the LLVM build system check cannot\n             // detect this. Therefore it is set manually here.\n-            // FreeBSD uses Clang as its system compiler and\n+            // Some BSD uses Clang as its system compiler and\n             // provides no libatomic in its base system so does\n             // not want this.\n             ldflags.exe.push(\" -latomic\");"}, {"sha": "742fbe11d9c6fbab4ae13be216ad7a35e65643c8", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fee731a9555beb903f45b531f4f0702a88e1b44/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/0fee731a9555beb903f45b531f4f0702a88e1b44/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=0fee731a9555beb903f45b531f4f0702a88e1b44", "patch": "@@ -277,13 +277,15 @@ target | std | host | notes\n `powerpc64-unknown-linux-musl` | ? |  |\n `powerpc64-wrs-vxworks` | ? |  |\n `powerpc64le-unknown-linux-musl` | ? |  |\n+[`powerpc64-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | OpenBSD/powerpc64\n `riscv32gc-unknown-linux-gnu` |   |   | RISC-V Linux (kernel 5.4, glibc 2.33)\n `riscv32gc-unknown-linux-musl` |   |   | RISC-V Linux (kernel 5.4, musl + RISCV32 support patches)\n `riscv32im-unknown-none-elf` | * |  | Bare RISC-V (RV32IM ISA)\n [`riscv32imac-unknown-xous-elf`](platform-support/riscv32imac-unknown-xous-elf.md) | ? |  | RISC-V Xous (RV32IMAC ISA)\n `riscv32imc-esp-espidf` | \u2713 |  | RISC-V ESP-IDF\n `riscv64gc-unknown-freebsd` |   |   | RISC-V FreeBSD\n `riscv64gc-unknown-linux-musl` |   |   | RISC-V Linux (kernel 4.20, musl 1.2.0)\n+[`riscv64gc-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | OpenBSD/riscv64\n `s390x-unknown-linux-musl` |  |  | S390x Linux (kernel 3.2, MUSL)\n `sparc-unknown-linux-gnu` | \u2713 |  | 32-bit SPARC Linux\n `sparc64-unknown-netbsd` | \u2713 | \u2713 | NetBSD/sparc64"}, {"sha": "4ce80157dbf9c04762024da82394fda3814532ad", "filename": "src/doc/rustc/src/platform-support/openbsd.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fee731a9555beb903f45b531f4f0702a88e1b44/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fopenbsd.md", "raw_url": "https://github.com/rust-lang/rust/raw/0fee731a9555beb903f45b531f4f0702a88e1b44/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fopenbsd.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fopenbsd.md?ref=0fee731a9555beb903f45b531f4f0702a88e1b44", "patch": "@@ -12,6 +12,8 @@ The target names follow this format: `$ARCH-unknown-openbsd`, where `$ARCH` spec\n |--------------------------------|-------------|------------------|\n | `aarch64-unknown-openbsd`      | libc++      | [64-bit ARM systems](https://www.openbsd.org/arm64.html)  |\n | `i686-unknown-openbsd`         | libc++      | [Standard PC and clones based on the Intel i386 architecture and compatible processors](https://www.openbsd.org/i386.html) |\n+| `powerpc64-unknown-openbsd`    | libc++      | [IBM POWER-based PowerNV systems](https://www.openbsd.org/powerpc64.html) |\n+| `riscv64gc-unknown-openbsd`    | libc++      | [64-bit RISC-V systems](https://www.openbsd.org/riscv64.html) |\n | `sparc64-unknown-openbsd`      | estdc++     | [Sun UltraSPARC and Fujitsu SPARC64 systems](https://www.openbsd.org/sparc64.html) |\n | `x86_64-unknown-openbsd`       | libc++      | [AMD64-based systems](https://www.openbsd.org/amd64.html) |\n "}]}