{"sha": "e7be544b7c309d96c6755189151739c9984dde3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YmU1NDRiN2MzMDlkOTZjNjc1NTE4OTE1MTczOWM5OTg0ZGRlM2M=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-02T12:34:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-02T12:34:59Z"}, "message": "Merge #9756\n\n9756: internal: `resolve_doc_path` is able to resolve to macros r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "767409aa9ab989af3cee73e9839045eda691a02c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/767409aa9ab989af3cee73e9839045eda691a02c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7be544b7c309d96c6755189151739c9984dde3c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhB+ZzCRBK7hj4Ov3rIwAA4usIAJoum2tu5aQSC9ODoH7fS/lp\nsHBnZSrt7zo59UHx+dpoOjot+Rk3NE8PVVgYwWUxTwQhS26qTMg2TFqNW7Lz/1lL\nuoO6/jn7OyNgNqTVsKrCg2rAzhH/iU65qjIZ8ysX+6x9UfDZv3JYp0J7R1isQjzF\nwe1nzQTuBDDja5QL/PbRTzvCrgVCKoj7S4mUc6ja5eHRsXdBR36LLYYWS8FgMBM6\nv30CQcwa6+zLG9ZMnbet0u36oYwCrPyt+RAqWbW2toi+9OMa3EQLVxwd54TGNxIk\nBDJRqG61V6VNYcOcYwcG1cfqttuXM/bjota8Cx2PJiSysgcKIlxOBeeSgCu7Gpg=\n=BIp4\n-----END PGP SIGNATURE-----\n", "payload": "tree 767409aa9ab989af3cee73e9839045eda691a02c\nparent df0936b4af7bd573dc8906b6dbdbf80ff40b75f3\nparent 62ab73767f62481e2bdc13800c7ca3040a6536b5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1627907699 +0000\ncommitter GitHub <noreply@github.com> 1627907699 +0000\n\nMerge #9756\n\n9756: internal: `resolve_doc_path` is able to resolve to macros r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7be544b7c309d96c6755189151739c9984dde3c", "html_url": "https://github.com/rust-lang/rust/commit/e7be544b7c309d96c6755189151739c9984dde3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7be544b7c309d96c6755189151739c9984dde3c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df0936b4af7bd573dc8906b6dbdbf80ff40b75f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/df0936b4af7bd573dc8906b6dbdbf80ff40b75f3", "html_url": "https://github.com/rust-lang/rust/commit/df0936b4af7bd573dc8906b6dbdbf80ff40b75f3"}, {"sha": "62ab73767f62481e2bdc13800c7ca3040a6536b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/62ab73767f62481e2bdc13800c7ca3040a6536b5", "html_url": "https://github.com/rust-lang/rust/commit/62ab73767f62481e2bdc13800c7ca3040a6536b5"}], "stats": {"total": 196, "additions": 121, "deletions": 75}, "files": [{"sha": "c7a8463a3c4d2a490b46d62cb2a029504514bbc8", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e7be544b7c309d96c6755189151739c9984dde3c/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7be544b7c309d96c6755189151739c9984dde3c/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=e7be544b7c309d96c6755189151739c9984dde3c", "patch": "@@ -1,12 +1,15 @@\n //! Attributes & documentation for hir types.\n+\n+use either::Either;\n use hir_def::{\n     attr::{AttrsWithOwner, Documentation},\n+    item_scope::ItemInNs,\n     path::ModPath,\n     per_ns::PerNs,\n     resolver::HasResolver,\n     AttrDefId, GenericParamId, ModuleDefId,\n };\n-use hir_expand::hygiene::Hygiene;\n+use hir_expand::{hygiene::Hygiene, MacroDefId};\n use hir_ty::db::HirDatabase;\n use syntax::ast;\n \n@@ -23,7 +26,7 @@ pub trait HasAttrs {\n         db: &dyn HirDatabase,\n         link: &str,\n         ns: Option<Namespace>,\n-    ) -> Option<ModuleDef>;\n+    ) -> Option<Either<ModuleDef, MacroDef>>;\n }\n \n #[derive(PartialEq, Eq, Hash, Copy, Clone, Debug)]\n@@ -44,9 +47,9 @@ macro_rules! impl_has_attrs {\n                 let def = AttrDefId::$def_id(self.into());\n                 db.attrs(def).docs()\n             }\n-            fn resolve_doc_path(self, db: &dyn HirDatabase, link: &str, ns: Option<Namespace>) -> Option<ModuleDef> {\n+            fn resolve_doc_path(self, db: &dyn HirDatabase, link: &str, ns: Option<Namespace>) -> Option<Either<ModuleDef, MacroDef>> {\n                 let def = AttrDefId::$def_id(self.into());\n-                resolve_doc_path(db, def, link, ns).map(ModuleDef::from)\n+                resolve_doc_path(db, def, link, ns).map(|it| it.map_left(ModuleDef::from).map_right(MacroDef::from))\n             }\n         }\n     )*};\n@@ -76,7 +79,7 @@ macro_rules! impl_has_attrs_enum {\n             fn docs(self, db: &dyn HirDatabase) -> Option<Documentation> {\n                 $enum::$variant(self).docs(db)\n             }\n-            fn resolve_doc_path(self, db: &dyn HirDatabase, link: &str, ns: Option<Namespace>) -> Option<ModuleDef> {\n+            fn resolve_doc_path(self, db: &dyn HirDatabase, link: &str, ns: Option<Namespace>) -> Option<Either<ModuleDef, MacroDef>> {\n                 $enum::$variant(self).resolve_doc_path(db, link, ns)\n             }\n         }\n@@ -108,7 +111,7 @@ impl HasAttrs for AssocItem {\n         db: &dyn HirDatabase,\n         link: &str,\n         ns: Option<Namespace>,\n-    ) -> Option<ModuleDef> {\n+    ) -> Option<Either<ModuleDef, MacroDef>> {\n         match self {\n             AssocItem::Function(it) => it.resolve_doc_path(db, link, ns),\n             AssocItem::Const(it) => it.resolve_doc_path(db, link, ns),\n@@ -122,7 +125,7 @@ fn resolve_doc_path(\n     def: AttrDefId,\n     link: &str,\n     ns: Option<Namespace>,\n-) -> Option<ModuleDefId> {\n+) -> Option<Either<ModuleDefId, MacroDefId>> {\n     let resolver = match def {\n         AttrDefId::ModuleId(it) => it.resolver(db.upcast()),\n         AttrDefId::FieldId(it) => it.parent.resolver(db.upcast()),\n@@ -140,6 +143,7 @@ fn resolve_doc_path(\n             GenericParamId::ConstParamId(it) => it.parent,\n         }\n         .resolver(db.upcast()),\n+        // FIXME\n         AttrDefId::MacroDefId(_) => return None,\n     };\n     let path = ast::Path::parse(link).ok()?;\n@@ -151,9 +155,13 @@ fn resolve_doc_path(\n         resolved\n     };\n     match ns {\n-        Some(Namespace::Types) => resolved.take_types(),\n-        Some(Namespace::Values) => resolved.take_values(),\n-        Some(Namespace::Macros) => None,\n-        None => resolved.iter_items().find_map(|it| it.as_module_def_id()),\n+        Some(Namespace::Types) => resolved.take_types().map(Either::Left),\n+        Some(Namespace::Values) => resolved.take_values().map(Either::Left),\n+        Some(Namespace::Macros) => resolved.take_macros().map(Either::Right),\n+        None => resolved.iter_items().next().map(|it| match it {\n+            ItemInNs::Types(it) => Either::Left(it),\n+            ItemInNs::Values(it) => Either::Left(it),\n+            ItemInNs::Macros(it) => Either::Right(it),\n+        }),\n     }\n }"}, {"sha": "82c53201408607c4b319257536a96676ccaa168a", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7be544b7c309d96c6755189151739c9984dde3c/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7be544b7c309d96c6755189151739c9984dde3c/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=e7be544b7c309d96c6755189151739c9984dde3c", "patch": "@@ -75,6 +75,15 @@ pub(crate) trait TryToNav {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget>;\n }\n \n+impl<T: TryToNav, U: TryToNav> TryToNav for Either<T, U> {\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n+        match self {\n+            Either::Left(it) => it.try_to_nav(db),\n+            Either::Right(it) => it.try_to_nav(db),\n+        }\n+    }\n+}\n+\n impl NavigationTarget {\n     pub fn focus_or_full_range(&self) -> TextRange {\n         self.focus_range.unwrap_or(self.full_range)"}, {"sha": "36c13fe54ec40fdb5610219fcad90685fdebc0c1", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 73, "deletions": 50, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/e7be544b7c309d96c6755189151739c9984dde3c/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7be544b7c309d96c6755189151739c9984dde3c/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=e7be544b7c309d96c6755189151739c9984dde3c", "patch": "@@ -4,13 +4,15 @@ mod intra_doc_links;\n \n use std::convert::{TryFrom, TryInto};\n \n+use either::Either;\n use pulldown_cmark::{BrokenLink, CowStr, Event, InlineStr, LinkType, Options, Parser, Tag};\n use pulldown_cmark_to_cmark::{cmark_with_options, Options as CmarkOptions};\n use stdx::format_to;\n use url::Url;\n \n use hir::{\n-    db::HirDatabase, Adt, AsAssocItem, AssocItem, AssocItemContainer, Crate, HasAttrs, ModuleDef,\n+    db::HirDatabase, Adt, AsAssocItem, AssocItem, AssocItemContainer, Crate, HasAttrs, MacroDef,\n+    ModuleDef,\n };\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n@@ -47,7 +49,7 @@ pub(crate) fn rewrite_links(db: &RootDatabase, markdown: &str, definition: Defin\n                 return rewritten;\n             }\n             if let Definition::ModuleDef(def) = definition {\n-                if let Some(target) = rewrite_url_link(db, def, target) {\n+                if let Some(target) = rewrite_url_link(db, Either::Left(def), target) {\n                     return (target, title.to_string());\n                 }\n             }\n@@ -169,7 +171,7 @@ pub(crate) fn resolve_doc_path_for_def(\n     def: Definition,\n     link: &str,\n     ns: Option<hir::Namespace>,\n-) -> Option<hir::ModuleDef> {\n+) -> Option<Either<ModuleDef, MacroDef>> {\n     match def {\n         Definition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(it) => it.resolve_doc_path(db, link, ns),\n@@ -243,9 +245,9 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n                     AssocItemContainer::Impl(i) => i.self_ty(db).as_adt()?.into(),\n                 };\n                 let frag = get_assoc_item_fragment(db, assoc_item)?;\n-                (def, Some(frag))\n+                (Either::Left(def), Some(frag))\n             } else {\n-                (def, None)\n+                (Either::Left(def), None)\n             }\n         }\n         Definition::Field(field) => {\n@@ -254,10 +256,9 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n                 hir::VariantDef::Union(it) => it.into(),\n                 hir::VariantDef::Variant(it) => it.into(),\n             };\n-            (def, Some(format!(\"structfield.{}\", field.name(db))))\n+            (Either::Left(def), Some(format!(\"structfield.{}\", field.name(db))))\n         }\n-        // FIXME macros\n-        Definition::Macro(_) => return None,\n+        Definition::Macro(makro) => (Either::Right(makro), None),\n         // FIXME impls\n         Definition::SelfType(_) => return None,\n         Definition::Local(_) | Definition::GenericParam(_) | Definition::Label(_) => return None,\n@@ -270,7 +271,7 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n         url = url.join(&path).ok()?;\n     }\n \n-    url = url.join(&get_symbol_filename(db, &target)?).ok()?;\n+    url = url.join(&get_symbol_filename(db, target)?).ok()?;\n     url.set_fragment(frag.as_deref());\n \n     Some(url.into())\n@@ -292,24 +293,29 @@ fn rewrite_intra_doc_link(\n         url = url.join(&path).ok()?;\n     }\n \n-    let (resolved, frag) = if let Some(assoc_item) = resolved.as_assoc_item(db) {\n-        let resolved = match assoc_item.container(db) {\n-            AssocItemContainer::Trait(t) => t.into(),\n-            AssocItemContainer::Impl(i) => i.self_ty(db).as_adt()?.into(),\n+    let (resolved, frag) =\n+        if let Some(assoc_item) = resolved.left().and_then(|it| it.as_assoc_item(db)) {\n+            let resolved = match assoc_item.container(db) {\n+                AssocItemContainer::Trait(t) => t.into(),\n+                AssocItemContainer::Impl(i) => i.self_ty(db).as_adt()?.into(),\n+            };\n+            let frag = get_assoc_item_fragment(db, assoc_item)?;\n+            (Either::Left(resolved), Some(frag))\n+        } else {\n+            (resolved, None)\n         };\n-        let frag = get_assoc_item_fragment(db, assoc_item)?;\n-        (resolved, Some(frag))\n-    } else {\n-        (resolved, None)\n-    };\n-    url = url.join(&get_symbol_filename(db, &resolved)?).ok()?;\n+    url = url.join(&get_symbol_filename(db, resolved)?).ok()?;\n     url.set_fragment(frag.as_deref());\n \n     Some((url.into(), strip_prefixes_suffixes(title).to_string()))\n }\n \n /// Try to resolve path to local documentation via path-based links (i.e. `../gateway/struct.Shard.html`).\n-fn rewrite_url_link(db: &RootDatabase, def: ModuleDef, target: &str) -> Option<String> {\n+fn rewrite_url_link(\n+    db: &RootDatabase,\n+    def: Either<ModuleDef, MacroDef>,\n+    target: &str,\n+) -> Option<String> {\n     if !(target.contains('#') || target.contains(\".html\")) {\n         return None;\n     }\n@@ -321,25 +327,35 @@ fn rewrite_url_link(db: &RootDatabase, def: ModuleDef, target: &str) -> Option<S\n         url = url.join(&path).ok()?;\n     }\n \n-    url = url.join(&get_symbol_filename(db, &def)?).ok()?;\n+    url = url.join(&get_symbol_filename(db, def)?).ok()?;\n     url.join(target).ok().map(Into::into)\n }\n \n-fn crate_of_def(db: &RootDatabase, def: ModuleDef) -> Option<Crate> {\n+fn crate_of_def(db: &RootDatabase, def: Either<ModuleDef, MacroDef>) -> Option<Crate> {\n     let krate = match def {\n         // Definition::module gives back the parent module, we don't want that as it fails for root modules\n-        ModuleDef::Module(module) => module.krate(),\n-        _ => def.module(db)?.krate(),\n+        Either::Left(ModuleDef::Module(module)) => module.krate(),\n+        Either::Left(def) => def.module(db)?.krate(),\n+        Either::Right(def) => def.module(db)?.krate(),\n     };\n     Some(krate)\n }\n \n-fn mod_path_of_def(db: &RootDatabase, def: ModuleDef) -> Option<String> {\n-    def.canonical_module_path(db).map(|it| {\n-        let mut path = String::new();\n-        it.flat_map(|it| it.name(db)).for_each(|name| format_to!(path, \"{}/\", name));\n-        path\n-    })\n+fn mod_path_of_def(db: &RootDatabase, def: Either<ModuleDef, MacroDef>) -> Option<String> {\n+    match def {\n+        Either::Left(def) => def.canonical_module_path(db).map(|it| {\n+            let mut path = String::new();\n+            it.flat_map(|it| it.name(db)).for_each(|name| format_to!(path, \"{}/\", name));\n+            path\n+        }),\n+        Either::Right(def) => {\n+            def.module(db).map(|it| it.path_to_root(db).into_iter().rev()).map(|it| {\n+                let mut path = String::new();\n+                it.flat_map(|it| it.name(db)).for_each(|name| format_to!(path, \"{}/\", name));\n+                path\n+            })\n+        }\n+    }\n }\n \n /// Rewrites a markdown document, applying 'callback' to each link.\n@@ -405,27 +421,34 @@ fn get_doc_base_url(db: &RootDatabase, krate: &Crate) -> Option<Url> {\n /// https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next\n ///                                    ^^^^^^^^^^^^^^^^^^^\n /// ```\n-fn get_symbol_filename(db: &dyn HirDatabase, definition: &ModuleDef) -> Option<String> {\n-    Some(match definition {\n-        ModuleDef::Adt(adt) => match adt {\n-            Adt::Struct(s) => format!(\"struct.{}.html\", s.name(db)),\n-            Adt::Enum(e) => format!(\"enum.{}.html\", e.name(db)),\n-            Adt::Union(u) => format!(\"union.{}.html\", u.name(db)),\n-        },\n-        ModuleDef::Module(m) => match m.name(db) {\n-            Some(name) => format!(\"{}/index.html\", name),\n-            None => String::from(\"index.html\"),\n+fn get_symbol_filename(\n+    db: &dyn HirDatabase,\n+    definition: Either<ModuleDef, MacroDef>,\n+) -> Option<String> {\n+    let res = match definition {\n+        Either::Left(definition) => match definition {\n+            ModuleDef::Adt(adt) => match adt {\n+                Adt::Struct(s) => format!(\"struct.{}.html\", s.name(db)),\n+                Adt::Enum(e) => format!(\"enum.{}.html\", e.name(db)),\n+                Adt::Union(u) => format!(\"union.{}.html\", u.name(db)),\n+            },\n+            ModuleDef::Module(m) => match m.name(db) {\n+                Some(name) => format!(\"{}/index.html\", name),\n+                None => String::from(\"index.html\"),\n+            },\n+            ModuleDef::Trait(t) => format!(\"trait.{}.html\", t.name(db)),\n+            ModuleDef::TypeAlias(t) => format!(\"type.{}.html\", t.name(db)),\n+            ModuleDef::BuiltinType(t) => format!(\"primitive.{}.html\", t.name()),\n+            ModuleDef::Function(f) => format!(\"fn.{}.html\", f.name(db)),\n+            ModuleDef::Variant(ev) => {\n+                format!(\"enum.{}.html#variant.{}\", ev.parent_enum(db).name(db), ev.name(db))\n+            }\n+            ModuleDef::Const(c) => format!(\"const.{}.html\", c.name(db)?),\n+            ModuleDef::Static(s) => format!(\"static.{}.html\", s.name(db)?),\n         },\n-        ModuleDef::Trait(t) => format!(\"trait.{}.html\", t.name(db)),\n-        ModuleDef::TypeAlias(t) => format!(\"type.{}.html\", t.name(db)),\n-        ModuleDef::BuiltinType(t) => format!(\"primitive.{}.html\", t.name()),\n-        ModuleDef::Function(f) => format!(\"fn.{}.html\", f.name(db)),\n-        ModuleDef::Variant(ev) => {\n-            format!(\"enum.{}.html#variant.{}\", ev.parent_enum(db).name(db), ev.name(db))\n-        }\n-        ModuleDef::Const(c) => format!(\"const.{}.html\", c.name(db)?),\n-        ModuleDef::Static(s) => format!(\"static.{}.html\", s.name(db)?),\n-    })\n+        Either::Right(mac) => format!(\"macro.{}.html\", mac.name(db)?),\n+    };\n+    Some(res)\n }\n \n /// Get the fragment required to link to a specific field, method, associated type, or associated constant."}, {"sha": "35ba266f5672cc67b75b17e3107774c656ffc2ad", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7be544b7c309d96c6755189151739c9984dde3c/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7be544b7c309d96c6755189151739c9984dde3c/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=e7be544b7c309d96c6755189151739c9984dde3c", "patch": "@@ -150,7 +150,10 @@ pub(crate) fn hover(\n                             (file_id == position.file_id.into() && mapped_range.contains(position.offset)).then(||(mapped_range, link, ns))\n                         })?;\n                     range = Some(idl_range);\n-                    resolve_doc_path_for_def(db, def, &link, ns).map(Definition::ModuleDef)\n+                    Some(match resolve_doc_path_for_def(db,def, &link,ns)? {\n+                        Either::Left(it) => Definition::ModuleDef(it),\n+                        Either::Right(it) => Definition::Macro(it),\n+                    })\n                 } else if let Some(attr) = token.ancestors().find_map(ast::Attr::cast) {\n                     if let res@Some(_) = try_hover_for_lint(&attr, &token) {\n                         return res;"}, {"sha": "7553852659bc4b870239d800e9952fee87fadf76", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e7be544b7c309d96c6755189151739c9984dde3c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7be544b7c309d96c6755189151739c9984dde3c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=e7be544b7c309d96c6755189151739c9984dde3c", "patch": "@@ -238,19 +238,22 @@ fn find_doc_string_in_attr(attr: &hir::Attr, it: &ast::Attr) -> Option<ast::Stri\n     }\n }\n \n-fn module_def_to_hl_tag(def: hir::ModuleDef) -> HlTag {\n+fn module_def_to_hl_tag(def: Either<hir::ModuleDef, hir::MacroDef>) -> HlTag {\n     let symbol = match def {\n-        hir::ModuleDef::Module(_) => SymbolKind::Module,\n-        hir::ModuleDef::Function(_) => SymbolKind::Function,\n-        hir::ModuleDef::Adt(hir::Adt::Struct(_)) => SymbolKind::Struct,\n-        hir::ModuleDef::Adt(hir::Adt::Enum(_)) => SymbolKind::Enum,\n-        hir::ModuleDef::Adt(hir::Adt::Union(_)) => SymbolKind::Union,\n-        hir::ModuleDef::Variant(_) => SymbolKind::Variant,\n-        hir::ModuleDef::Const(_) => SymbolKind::Const,\n-        hir::ModuleDef::Static(_) => SymbolKind::Static,\n-        hir::ModuleDef::Trait(_) => SymbolKind::Trait,\n-        hir::ModuleDef::TypeAlias(_) => SymbolKind::TypeAlias,\n-        hir::ModuleDef::BuiltinType(_) => return HlTag::BuiltinType,\n+        Either::Left(def) => match def {\n+            hir::ModuleDef::Module(_) => SymbolKind::Module,\n+            hir::ModuleDef::Function(_) => SymbolKind::Function,\n+            hir::ModuleDef::Adt(hir::Adt::Struct(_)) => SymbolKind::Struct,\n+            hir::ModuleDef::Adt(hir::Adt::Enum(_)) => SymbolKind::Enum,\n+            hir::ModuleDef::Adt(hir::Adt::Union(_)) => SymbolKind::Union,\n+            hir::ModuleDef::Variant(_) => SymbolKind::Variant,\n+            hir::ModuleDef::Const(_) => SymbolKind::Const,\n+            hir::ModuleDef::Static(_) => SymbolKind::Static,\n+            hir::ModuleDef::Trait(_) => SymbolKind::Trait,\n+            hir::ModuleDef::TypeAlias(_) => SymbolKind::TypeAlias,\n+            hir::ModuleDef::BuiltinType(_) => return HlTag::BuiltinType,\n+        },\n+        Either::Right(_) => SymbolKind::Macro,\n     };\n     HlTag::Symbol(symbol)\n }"}, {"sha": "7f3362f2d589011c64050d6f8932cfcbf2cafec2", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7be544b7c309d96c6755189151739c9984dde3c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/e7be544b7c309d96c6755189151739c9984dde3c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=e7be544b7c309d96c6755189151739c9984dde3c", "patch": "@@ -114,7 +114,7 @@\n \n <span class=\"comment documentation\">/// </span><span class=\"struct documentation injected intra_doc_link\">[`Foo`](Foo)</span><span class=\"comment documentation\"> is a struct</span>\n <span class=\"comment documentation\">/// This function is &gt; </span><span class=\"function documentation injected intra_doc_link\">[`all_the_links`](all_the_links)</span><span class=\"comment documentation\"> &lt;</span>\n-<span class=\"comment documentation\">/// [`noop`](noop) is a macro below</span>\n+<span class=\"comment documentation\">/// </span><span class=\"macro documentation injected intra_doc_link\">[`noop`](noop)</span><span class=\"comment documentation\"> is a macro below</span>\n <span class=\"comment documentation\">/// </span><span class=\"struct documentation injected intra_doc_link\">[`Item`]</span><span class=\"comment documentation\"> is a struct in the module </span><span class=\"module documentation injected intra_doc_link\">[`module`]</span>\n <span class=\"comment documentation\">///</span>\n <span class=\"comment documentation\">/// [`Item`]: module::Item</span>"}]}