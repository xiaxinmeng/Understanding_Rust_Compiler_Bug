{"sha": "e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMDlhYTM2MTNmODliZDBhNDQwYTlhOTQ3YzQwNWRjZmNjMGRjMjg=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-04-24T16:53:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-24T16:53:09Z"}, "message": "Rollup merge of #83519 - oli-obk:assign_shrink_your_normal_code, r=pnkfelix\n\nImplement a lint that highlights all moves larger than a configured limit\n\nTracking issue: #83518\n[MCP 420](https://github.com/rust-lang/compiler-team/issues/420) still ~blazing~ in progress\n\nr? ```@pnkfelix```\n\nThe main open issue I see with this minimal impl of the feature is that the lint is immediately \"stable\" (so it can be named on stable), even if it is never executed on stable. I don't think we have the concept of unstable lint names or hiding lint names without an active feature gate, so that would be a bigger change.", "tree": {"sha": "a4237478e457db439be3266731b627530b55a51e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4237478e457db439be3266731b627530b55a51e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghEz1CRBK7hj4Ov3rIwAA5EoIAE6YhT7L7Iz0Sz6IxZEsDiNC\nK073XREHbxJtU1Dnjh+iWsTH9mdPT791lexCwvOpELfzHB+3ulgUIozja6ywmc3R\n51KQ6w3KCZG4ZvHeORq6bHLHXlgagatfe3KCnK66vZbRlTonO809xIaTkvu38Tt/\no4a7euZAPMula9UOQl1IV8OtHuyDlVf+sSql6jLNYWMuatTbFw1FcZa4ufWBZowV\nhj+bA4kKJTea4wqq4p6ufVlyQwAKShaA1PAzsm9kHHqR6xaSZrI9iHQ7t/dNiEYl\n1kDAnbx7rzDl2HZ510GJyn+Nh13tBQ93yYgUA4B37rh44u0fqTQ00s/5c4kT5lA=\n=XUYP\n-----END PGP SIGNATURE-----\n", "payload": "tree a4237478e457db439be3266731b627530b55a51e\nparent e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4\nparent 85b1c67910dbeede8aabb16bc0c1c09a2fefe8ab\nauthor Yuki Okushi <jtitor@2k36.org> 1619283189 +0900\ncommitter GitHub <noreply@github.com> 1619283189 +0900\n\nRollup merge of #83519 - oli-obk:assign_shrink_your_normal_code, r=pnkfelix\n\nImplement a lint that highlights all moves larger than a configured limit\n\nTracking issue: #83518\n[MCP 420](https://github.com/rust-lang/compiler-team/issues/420) still ~blazing~ in progress\n\nr? ```@pnkfelix```\n\nThe main open issue I see with this minimal impl of the feature is that the lint is immediately \"stable\" (so it can be named on stable), even if it is never executed on stable. I don't think we have the concept of unstable lint names or hiding lint names without an active feature gate, so that would be a bigger change.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "html_url": "https://github.com/rust-lang/rust/commit/e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "html_url": "https://github.com/rust-lang/rust/commit/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4"}, {"sha": "85b1c67910dbeede8aabb16bc0c1c09a2fefe8ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/85b1c67910dbeede8aabb16bc0c1c09a2fefe8ab", "html_url": "https://github.com/rust-lang/rust/commit/85b1c67910dbeede8aabb16bc0c1c09a2fefe8ab"}], "stats": {"total": 239, "additions": 218, "deletions": 21}, "files": [{"sha": "eb143e5bac22de4b87e646bdf7d574d902a42d04", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "patch": "@@ -633,6 +633,9 @@ declare_features! (\n     /// Allows associated types in inherent impls.\n     (active, inherent_associated_types, \"1.52.0\", Some(8995), None),\n \n+    // Allows setting the threshold for the `large_assignments` lint.\n+    (active, large_assignments, \"1.52.0\", Some(83518), None),\n+\n     /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n "}, {"sha": "8dfc4572a848c3de56f53529bab16a75795448c1", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "patch": "@@ -241,6 +241,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         const_eval_limit, CrateLevel, template!(NameValueStr: \"N\"), const_eval_limit,\n         experimental!(const_eval_limit)\n     ),\n+    gated!(\n+        move_size_limit, CrateLevel, template!(NameValueStr: \"N\"), large_assignments,\n+        experimental!(move_size_limit)\n+    ),\n \n     // Entry point:\n     ungated!(main, Normal, template!(Word)),"}, {"sha": "04e45e2351b56e416268a89e57a91936726d06a2", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "patch": "@@ -2877,6 +2877,39 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `large_assignments` lint detects when objects of large\n+    /// types are being moved around.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (can crash on some platforms)\n+    /// let x = [0; 50000];\n+    /// let y = x;\n+    /// ```\n+    ///\n+    /// produces:\n+    ///\n+    /// ```text\n+    /// warning: moving a large value\n+    ///   --> $DIR/move-large.rs:1:3\n+    ///   let y = x;\n+    ///           - Copied large value here\n+    /// ```\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// When using a large type in a plain assignment or in a function\n+    /// argument, idiomatic code can be inefficient.\n+    /// Ideally appropriate optimizations would resolve this, but such\n+    /// optimizations are only done in a best-effort manner.\n+    /// This lint will trigger on all sites of large moves and thus allow the\n+    /// user to resolve them in code.\n+    pub LARGE_ASSIGNMENTS,\n+    Warn,\n+    \"detects large moves or copies\",\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -2962,6 +2995,7 @@ declare_lint_pass! {\n         LEGACY_DERIVE_HELPERS,\n         PROC_MACRO_BACK_COMPAT,\n         OR_PATTERNS_BACK_COMPAT,\n+        LARGE_ASSIGNMENTS,\n     ]\n }\n "}, {"sha": "601198fd0de0443090df30821db510102dee1d82", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "patch": "@@ -1,4 +1,8 @@\n-//! Registering limits, recursion_limit, type_length_limit and const_eval_limit\n+//! Registering limits:\n+//! * recursion_limit,\n+//! * move_size_limit,\n+//! * type_length_limit, and\n+//! * const_eval_limit\n //!\n //! There are various parts of the compiler that must impose arbitrary limits\n //! on how deeply they recurse to prevent stack overflow. Users can override\n@@ -8,21 +12,22 @@\n use crate::bug;\n use rustc_ast as ast;\n use rustc_data_structures::sync::OnceCell;\n-use rustc_session::{Limit, Session};\n+use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n \n use std::num::IntErrorKind;\n \n pub fn update_limits(sess: &Session, krate: &ast::Crate) {\n     update_limit(sess, krate, &sess.recursion_limit, sym::recursion_limit, 128);\n+    update_limit(sess, krate, &sess.move_size_limit, sym::move_size_limit, 0);\n     update_limit(sess, krate, &sess.type_length_limit, sym::type_length_limit, 1048576);\n     update_limit(sess, krate, &sess.const_eval_limit, sym::const_eval_limit, 1_000_000);\n }\n \n fn update_limit(\n     sess: &Session,\n     krate: &ast::Crate,\n-    limit: &OnceCell<Limit>,\n+    limit: &OnceCell<impl From<usize> + std::fmt::Debug>,\n     name: Symbol,\n     default: usize,\n ) {\n@@ -34,7 +39,7 @@ fn update_limit(\n         if let Some(s) = attr.value_str() {\n             match s.as_str().parse() {\n                 Ok(n) => {\n-                    limit.set(Limit::new(n)).unwrap();\n+                    limit.set(From::from(n)).unwrap();\n                     return;\n                 }\n                 Err(e) => {\n@@ -63,5 +68,5 @@ fn update_limit(\n             }\n         }\n     }\n-    limit.set(Limit::new(default)).unwrap();\n+    limit.set(From::from(default)).unwrap();\n }"}, {"sha": "e22c0b40d5a53067abb7c1c81ffc7791921e7cb0", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "patch": "@@ -12,10 +12,10 @@ use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, Region, ScalarInt, UserTypeAnnotationIndex};\n-use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, GeneratorKind};\n+use rustc_hir::{self as hir, HirId};\n use rustc_target::abi::{Size, VariantIdx};\n \n use polonius_engine::Atom;\n@@ -1948,6 +1948,29 @@ rustc_index::newtype_index! {\n     }\n }\n \n+impl SourceScope {\n+    /// Finds the original HirId this MIR item came from.\n+    /// This is necessary after MIR optimizations, as otherwise we get a HirId\n+    /// from the function that was inlined instead of the function call site.\n+    pub fn lint_root(\n+        self,\n+        source_scopes: &IndexVec<SourceScope, SourceScopeData<'tcx>>,\n+    ) -> Option<HirId> {\n+        let mut data = &source_scopes[self];\n+        // FIXME(oli-obk): we should be able to just walk the `inlined_parent_scope`, but it\n+        // does not work as I thought it would. Needs more investigation and documentation.\n+        while data.inlined.is_some() {\n+            trace!(?data);\n+            data = &source_scopes[data.parent_scope.unwrap()];\n+        }\n+        trace!(?data);\n+        match &data.local_data {\n+            ClearCrossCrate::Set(data) => Some(data.lint_root),\n+            ClearCrossCrate::Clear => None,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n pub struct SourceScopeData<'tcx> {\n     pub span: Span,"}, {"sha": "e621bc9167d801dc3c4f2587e0ac714e8684a741", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "patch": "@@ -198,7 +198,9 @@ use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n use rustc_session::config::EntryFnType;\n+use rustc_session::lint::builtin::LARGE_ASSIGNMENTS;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n+use rustc_target::abi::Size;\n use smallvec::SmallVec;\n use std::iter;\n use std::ops::Range;\n@@ -753,6 +755,46 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         self.super_terminator(terminator, location);\n     }\n \n+    fn visit_operand(&mut self, operand: &mir::Operand<'tcx>, location: Location) {\n+        self.super_operand(operand, location);\n+        let limit = self.tcx.sess.move_size_limit();\n+        if limit == 0 {\n+            return;\n+        }\n+        let limit = Size::from_bytes(limit);\n+        let ty = operand.ty(self.body, self.tcx);\n+        let ty = self.monomorphize(ty);\n+        let layout = self.tcx.layout_of(ty::ParamEnv::reveal_all().and(ty));\n+        if let Ok(layout) = layout {\n+            if layout.size > limit {\n+                debug!(?layout);\n+                let source_info = self.body.source_info(location);\n+                debug!(?source_info);\n+                let lint_root = source_info.scope.lint_root(&self.body.source_scopes);\n+                debug!(?lint_root);\n+                let lint_root = match lint_root {\n+                    Some(lint_root) => lint_root,\n+                    // This happens when the issue is in a function from a foreign crate that\n+                    // we monomorphized in the current crate. We can't get a `HirId` for things\n+                    // in other crates.\n+                    // FIXME: Find out where to report the lint on. Maybe simply crate-level lint root\n+                    // but correct span? This would make the lint at least accept crate-level lint attributes.\n+                    None => return,\n+                };\n+                self.tcx.struct_span_lint_hir(\n+                    LARGE_ASSIGNMENTS,\n+                    lint_root,\n+                    source_info.span,\n+                    |lint| {\n+                        let mut err = lint.build(&format!(\"moving {} bytes\", layout.size.bytes()));\n+                        err.span_label(source_info.span, \"value moved from here\");\n+                        err.emit()\n+                    },\n+                );\n+            }\n+        }\n+    }\n+\n     fn visit_local(\n         &mut self,\n         _place_local: &Local,"}, {"sha": "5968bbbfca7f3d01046f3fff0edc514f226ec5e8", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "patch": "@@ -13,9 +13,9 @@ use rustc_middle::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n use rustc_middle::mir::{\n-    AssertKind, BasicBlock, BinOp, Body, ClearCrossCrate, Constant, ConstantKind, Local, LocalDecl,\n-    LocalKind, Location, Operand, Place, Rvalue, SourceInfo, SourceScope, SourceScopeData,\n-    Statement, StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n+    AssertKind, BasicBlock, BinOp, Body, Constant, ConstantKind, Local, LocalDecl, LocalKind,\n+    Location, Operand, Place, Rvalue, SourceInfo, SourceScope, SourceScopeData, Statement,\n+    StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n };\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutError, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n@@ -440,18 +440,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn lint_root(&self, source_info: SourceInfo) -> Option<HirId> {\n-        let mut data = &self.source_scopes[source_info.scope];\n-        // FIXME(oli-obk): we should be able to just walk the `inlined_parent_scope`, but it\n-        // does not work as I thought it would. Needs more investigation and documentation.\n-        while data.inlined.is_some() {\n-            trace!(?data);\n-            data = &self.source_scopes[data.parent_scope.unwrap()];\n-        }\n-        trace!(?data);\n-        match &data.local_data {\n-            ClearCrossCrate::Set(data) => Some(data.lint_root),\n-            ClearCrossCrate::Clear => None,\n-        }\n+        source_info.scope.lint_root(&self.source_scopes)\n     }\n \n     fn use_ecx<F, T>(&mut self, f: F) -> Option<T>"}, {"sha": "7bff634fb2dd09baef261966758669e942e8fec9", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "patch": "@@ -83,6 +83,12 @@ impl Limit {\n     }\n }\n \n+impl From<usize> for Limit {\n+    fn from(value: usize) -> Self {\n+        Self::new(value)\n+    }\n+}\n+\n impl fmt::Display for Limit {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.0)\n@@ -143,6 +149,10 @@ pub struct Session {\n     /// operations such as auto-dereference and monomorphization.\n     pub recursion_limit: OnceCell<Limit>,\n \n+    /// The size at which the `large_assignments` lint starts\n+    /// being emitted.\n+    pub move_size_limit: OnceCell<usize>,\n+\n     /// The maximum length of types during monomorphization.\n     pub type_length_limit: OnceCell<Limit>,\n \n@@ -352,6 +362,11 @@ impl Session {\n         self.recursion_limit.get().copied().unwrap()\n     }\n \n+    #[inline]\n+    pub fn move_size_limit(&self) -> usize {\n+        self.move_size_limit.get().copied().unwrap()\n+    }\n+\n     #[inline]\n     pub fn type_length_limit(&self) -> Limit {\n         self.type_length_limit.get().copied().unwrap()\n@@ -1414,6 +1429,7 @@ pub fn build_session(\n         features: OnceCell::new(),\n         lint_store: OnceCell::new(),\n         recursion_limit: OnceCell::new(),\n+        move_size_limit: OnceCell::new(),\n         type_length_limit: OnceCell::new(),\n         const_eval_limit: OnceCell::new(),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),"}, {"sha": "4a1af4a294565ced659ff6ad30e239b06e5a7b0a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "patch": "@@ -669,6 +669,7 @@ symbols! {\n         label_break_value,\n         lang,\n         lang_items,\n+        large_assignments,\n         lateout,\n         lazy_normalization_consts,\n         le,\n@@ -749,6 +750,7 @@ symbols! {\n         more_struct_aliases,\n         movbe_target_feature,\n         move_ref_pattern,\n+        move_size_limit,\n         mul,\n         mul_assign,\n         mul_with_overflow,"}, {"sha": "4fac046beef62367aa124ef2d81bc9ace2b1f569", "filename": "src/test/ui/async-await/large_moves.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.rs?ref=e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "patch": "@@ -0,0 +1,24 @@\n+#![deny(large_assignments)]\n+#![feature(large_assignments)]\n+#![move_size_limit = \"1000\"]\n+// build-fail\n+// only-x86_64\n+\n+// edition:2018\n+\n+fn main() {\n+    let x = async { //~ ERROR large_assignments\n+        let y = [0; 9999];\n+        dbg!(y);\n+        thing(&y).await;\n+        dbg!(y);\n+    };\n+    let z = (x, 42); //~ ERROR large_assignments\n+    //~^ ERROR large_assignments\n+    let a = z.0; //~ ERROR large_assignments\n+    let b = z.1;\n+}\n+\n+async fn thing(y: &[u8]) {\n+    dbg!(y);\n+}"}, {"sha": "8c47ec0ed9d38d6f5b2f53469272db70c850bc6d", "filename": "src/test/ui/async-await/large_moves.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.stderr?ref=e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "patch": "@@ -0,0 +1,38 @@\n+error: moving 10024 bytes\n+  --> $DIR/large_moves.rs:10:13\n+   |\n+LL |       let x = async {\n+   |  _____________^\n+LL | |         let y = [0; 9999];\n+LL | |         dbg!(y);\n+LL | |         thing(&y).await;\n+LL | |         dbg!(y);\n+LL | |     };\n+   | |_____^ value moved from here\n+   |\n+note: the lint level is defined here\n+  --> $DIR/large_moves.rs:1:9\n+   |\n+LL | #![deny(large_assignments)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: moving 10024 bytes\n+  --> $DIR/large_moves.rs:16:14\n+   |\n+LL |     let z = (x, 42);\n+   |              ^ value moved from here\n+\n+error: moving 10024 bytes\n+  --> $DIR/large_moves.rs:16:13\n+   |\n+LL |     let z = (x, 42);\n+   |             ^^^^^^^ value moved from here\n+\n+error: moving 10024 bytes\n+  --> $DIR/large_moves.rs:18:13\n+   |\n+LL |     let a = z.0;\n+   |             ^^^ value moved from here\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "7e9e574bfa08f43dbbf7fa0f9d961d64a33fc78c", "filename": "src/test/ui/feature-gates/feature-gate-large-assignments.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-large-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-large-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-large-assignments.rs?ref=e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "patch": "@@ -0,0 +1,5 @@\n+// check that `move_size_limit is feature-gated\n+\n+#![move_size_limit = \"42\"] //~ ERROR the `#[move_size_limit]` attribute is an experimental feature\n+\n+fn main() {}"}, {"sha": "8ddc3043e966c5dc1bd78cee272be5cb49d9357e", "filename": "src/test/ui/feature-gates/feature-gate-large-assignments.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-large-assignments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e109aa3613f89bd0a440a9a947c405dcfcc0dc28/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-large-assignments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-large-assignments.stderr?ref=e109aa3613f89bd0a440a9a947c405dcfcc0dc28", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[move_size_limit]` attribute is an experimental feature\n+  --> $DIR/feature-gate-large-assignments.rs:3:1\n+   |\n+LL | #![move_size_limit = \"42\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #83518 <https://github.com/rust-lang/rust/issues/83518> for more information\n+   = help: add `#![feature(large_assignments)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}