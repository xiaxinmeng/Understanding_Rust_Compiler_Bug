{"sha": "40f012a0eef718fab561ceb654c0fb81fd637c3e", "node_id": "C_kwDOAAsO6NoAKDQwZjAxMmEwZWVmNzE4ZmFiNTYxY2ViNjU0YzBmYjgxZmQ2MzdjM2U", "commit": {"author": {"name": "Matthew J Perez", "email": "matt@mperez.io", "date": "2023-02-15T20:36:20Z"}, "committer": {"name": "Matthew J Perez", "email": "matt@mperez.io", "date": "2023-02-19T14:15:56Z"}, "message": "Improve building compiler artifacts output", "tree": {"sha": "c9da3790d50b1edf723610b3cb5c597ff2ea2236", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9da3790d50b1edf723610b3cb5c597ff2ea2236"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40f012a0eef718fab561ceb654c0fb81fd637c3e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+M9PxY7e8G5vTnf2GoVaS9hvtTsFAmPyLx8ACgkQGoVaS9hv\ntTvNFhAAu+Yuk7Msq8kDIvousC0feZizfv4i8+Q3ls+Jwe1SRJc76c26KCK4ml1a\n8hXy3DfXsZcCGphrOehG0dpW7kC2G67sNgQAvi9qEYhqO3Cohyyg/tN1vvv5RIJ3\nNVeDNZXXmLboxGQC6va/euwt0GweJFWf5ow6jRUbH0zBclDLaJLzKHBCl41tn6ki\n7cmctRq/o0H6KwHLa/CfLcjQScENDgfzN8yNhI55k07c1ZFe6212a1jxbAINQsJI\nIKUwwYoNBBtNsPd6LXtj6F6kY07RERbf1dlefBC3KNRAg9Mnwj0OiDPaz6a5Hlnz\n04NdX/dwZN2A4r9teprMjzn7Un8s2o9F/cm8BBCfB3HGVTgn4GNLyhndg2ePjB+O\nii69O1xX65D6VEXd+AjsSMzVfr/sBd+BCEfQNv6ltlZ40pl3cDh/DRy4nQlDe62x\nfchnS9IwvIv+wBVbSdXEJtvoiS1IKEbetm/s7mm3CaiW5LNqqgiu+yShPQD9InAK\nqjL4l39+ABhDwcZoYFLm0Xerc/hXU/JXZc7Qfr3bA9BJHRpUuwI7DO3OUAEWxj7b\nPwKMUjEgHVU6tIfMhWtg74IWULRzk5I2nZpnyoSVHs15c4XALS8YopNQva/nRQjb\nK+ggKW5Ssb4JthEIK7JyEMLfhXyPKZSNGR8eU3PoOSP5/ezWDz0=\n=z2dY\n-----END PGP SIGNATURE-----", "payload": "tree c9da3790d50b1edf723610b3cb5c597ff2ea2236\nparent eebdfb55fce148676c24555505aebf648123b2de\nauthor Matthew J Perez <matt@mperez.io> 1676493380 -0500\ncommitter Matthew J Perez <matt@mperez.io> 1676816156 -0500\n\nImprove building compiler artifacts output\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40f012a0eef718fab561ceb654c0fb81fd637c3e", "html_url": "https://github.com/rust-lang/rust/commit/40f012a0eef718fab561ceb654c0fb81fd637c3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40f012a0eef718fab561ceb654c0fb81fd637c3e/comments", "author": {"login": "mattjperez", "id": 41358385, "node_id": "MDQ6VXNlcjQxMzU4Mzg1", "avatar_url": "https://avatars.githubusercontent.com/u/41358385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjperez", "html_url": "https://github.com/mattjperez", "followers_url": "https://api.github.com/users/mattjperez/followers", "following_url": "https://api.github.com/users/mattjperez/following{/other_user}", "gists_url": "https://api.github.com/users/mattjperez/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjperez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjperez/subscriptions", "organizations_url": "https://api.github.com/users/mattjperez/orgs", "repos_url": "https://api.github.com/users/mattjperez/repos", "events_url": "https://api.github.com/users/mattjperez/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjperez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattjperez", "id": 41358385, "node_id": "MDQ6VXNlcjQxMzU4Mzg1", "avatar_url": "https://avatars.githubusercontent.com/u/41358385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjperez", "html_url": "https://github.com/mattjperez", "followers_url": "https://api.github.com/users/mattjperez/followers", "following_url": "https://api.github.com/users/mattjperez/following{/other_user}", "gists_url": "https://api.github.com/users/mattjperez/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjperez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjperez/subscriptions", "organizations_url": "https://api.github.com/users/mattjperez/orgs", "repos_url": "https://api.github.com/users/mattjperez/repos", "events_url": "https://api.github.com/users/mattjperez/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjperez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eebdfb55fce148676c24555505aebf648123b2de", "url": "https://api.github.com/repos/rust-lang/rust/commits/eebdfb55fce148676c24555505aebf648123b2de", "html_url": "https://github.com/rust-lang/rust/commit/eebdfb55fce148676c24555505aebf648123b2de"}], "stats": {"total": 171, "additions": 132, "deletions": 39}, "files": [{"sha": "f0fcdf0d5a0cd7a59deffae657c8d286025810cd", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 78, "deletions": 33, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/40f012a0eef718fab561ceb654c0fb81fd637c3e/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f012a0eef718fab561ceb654c0fb81fd637c3e/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=40f012a0eef718fab561ceb654c0fb81fd637c3e", "patch": "@@ -111,10 +111,18 @@ impl Step for Std {\n         let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n         if compiler_to_use != compiler {\n             builder.ensure(Std::new(compiler_to_use, target));\n-            builder.info(&format!(\n-                \"Uplifting stage1 library ({} -> {})\",\n-                compiler_to_use.host, target\n-            ));\n+            let msg = if compiler_to_use.host == target {\n+                format!(\n+                    \"Uplifting library (stage{} -> stage{})\",\n+                    compiler_to_use.stage, compiler.stage\n+                )\n+            } else {\n+                format!(\n+                    \"Uplifting library (stage{}:{} -> stage{}:{})\",\n+                    compiler_to_use.stage, compiler_to_use.host, compiler.stage, target\n+                )\n+            };\n+            builder.info(&msg);\n \n             // Even if we're not building std this stage, the new sysroot must\n             // still contain the third party objects needed by various targets.\n@@ -134,13 +142,23 @@ impl Step for Std {\n             cargo.arg(\"-p\").arg(krate);\n         }\n \n-        builder.info(&format!(\n-            \"Building{} stage{} library artifacts ({} -> {})\",\n-            crate_description(&self.crates),\n-            compiler.stage,\n-            &compiler.host,\n-            target,\n-        ));\n+        let msg = if compiler.host == target {\n+            format!(\n+                \"Building{} stage{} library artifacts ({}) \",\n+                crate_description(&self.crates),\n+                compiler.stage,\n+                compiler.host\n+            )\n+        } else {\n+            format!(\n+                \"Building{} stage{} library artifacts ({} -> {})\",\n+                crate_description(&self.crates),\n+                compiler.stage,\n+                compiler.host,\n+                target,\n+            )\n+        };\n+        builder.info(&msg);\n         run_cargo(\n             builder,\n             cargo,\n@@ -438,10 +456,6 @@ impl Step for StdLink {\n         let compiler = self.compiler;\n         let target_compiler = self.target_compiler;\n         let target = self.target;\n-        builder.info(&format!(\n-            \"Copying stage{} library from stage{} ({} -> {} / {})\",\n-            target_compiler.stage, compiler.stage, &compiler.host, target_compiler.host, target\n-        ));\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n         let hostdir = builder.sysroot_libdir(target_compiler, compiler.host);\n         add_to_sysroot(builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n@@ -715,8 +729,22 @@ impl Step for Rustc {\n         let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n         if compiler_to_use != compiler {\n             builder.ensure(Rustc::new(compiler_to_use, target));\n-            builder\n-                .info(&format!(\"Uplifting stage1 rustc ({} -> {})\", builder.config.build, target));\n+            let msg = if compiler_to_use.host == target {\n+                format!(\n+                    \"Uplifting rustc (stage{} -> stage{})\",\n+                    compiler_to_use.stage,\n+                    compiler.stage + 1\n+                )\n+            } else {\n+                format!(\n+                    \"Uplifting rustc (stage{}:{} -> stage{}:{})\",\n+                    compiler_to_use.stage,\n+                    compiler_to_use.host,\n+                    compiler.stage + 1,\n+                    target\n+                )\n+            };\n+            builder.info(&msg);\n             builder.ensure(RustcLink::from_rustc(self, compiler_to_use));\n             return;\n         }\n@@ -810,13 +838,24 @@ impl Step for Rustc {\n             cargo.arg(\"-p\").arg(krate);\n         }\n \n-        builder.info(&format!(\n-            \"Building{} stage{} compiler artifacts ({} -> {})\",\n-            crate_description(&self.crates),\n-            compiler.stage,\n-            &compiler.host,\n-            target,\n-        ));\n+        let msg = if compiler.host == target {\n+            format!(\n+                \"Building{} compiler artifacts (stage{} -> stage{})\",\n+                crate_description(&self.crates),\n+                compiler.stage,\n+                compiler.stage + 1\n+            )\n+        } else {\n+            format!(\n+                \"Building{} compiler artifacts (stage{}:{} -> stage{}:{})\",\n+                crate_description(&self.crates),\n+                compiler.stage,\n+                compiler.host,\n+                compiler.stage + 1,\n+                target,\n+            )\n+        };\n+        builder.info(&msg);\n         run_cargo(\n             builder,\n             cargo,\n@@ -1000,10 +1039,6 @@ impl Step for RustcLink {\n         let compiler = self.compiler;\n         let target_compiler = self.target_compiler;\n         let target = self.target;\n-        builder.info(&format!(\n-            \"Copying stage{} rustc from stage{} ({} -> {} / {})\",\n-            target_compiler.stage, compiler.stage, &compiler.host, target_compiler.host, target\n-        ));\n         add_to_sysroot(\n             builder,\n             &builder.sysroot_libdir(target_compiler, target),\n@@ -1077,10 +1112,15 @@ impl Step for CodegenBackend {\n \n         let tmp_stamp = out_dir.join(\".tmp.stamp\");\n \n-        builder.info(&format!(\n-            \"Building stage{} codegen backend {} ({} -> {})\",\n-            compiler.stage, backend, &compiler.host, target\n-        ));\n+        let msg = if compiler.host == target {\n+            format!(\"Building stage{} codegen backend {}\", compiler.stage, backend)\n+        } else {\n+            format!(\n+                \"Building stage{} codegen backend {} ({} -> {})\",\n+                compiler.stage, backend, compiler.host, target\n+            )\n+        };\n+        builder.info(&msg);\n         let files = run_cargo(builder, cargo, vec![], &tmp_stamp, vec![], false, false);\n         if builder.config.dry_run() {\n             return;\n@@ -1386,7 +1426,12 @@ impl Step for Assemble {\n \n         let stage = target_compiler.stage;\n         let host = target_compiler.host;\n-        builder.info(&format!(\"Assembling stage{} compiler ({})\", stage, host));\n+        let msg = if build_compiler.host == host {\n+            format!(\"Assembling stage{} compiler\", stage)\n+        } else {\n+            format!(\"Assembling stage{} compiler ({})\", stage, host)\n+        };\n+        builder.info(&msg);\n \n         // Link in all dylibs to the libdir\n         let stamp = librustc_stamp(builder, build_compiler, target_compiler.host);"}, {"sha": "d30532ef3c658756ad5f83cfc3040d008b112ea8", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/40f012a0eef718fab561ceb654c0fb81fd637c3e/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f012a0eef718fab561ceb654c0fb81fd637c3e/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=40f012a0eef718fab561ceb654c0fb81fd637c3e", "patch": "@@ -33,6 +33,44 @@ struct ToolBuild {\n     allow_features: &'static str,\n }\n \n+fn tooling_output(\n+    mode: Mode,\n+    tool: &str,\n+    build_stage: u32,\n+    host: &TargetSelection,\n+    target: &TargetSelection,\n+) -> String {\n+    match mode {\n+        // depends on compiler stage, different to host compiler\n+        Mode::ToolRustc => {\n+            if host == target {\n+                format!(\"Building tool {} (stage{} -> stage{})\", tool, build_stage, build_stage + 1)\n+            } else {\n+                format!(\n+                    \"Building tool {} (stage{}:{} -> stage{}:{})\",\n+                    tool,\n+                    build_stage,\n+                    host,\n+                    build_stage + 1,\n+                    target\n+                )\n+            }\n+        }\n+        // doesn't depend on compiler, same as host compiler\n+        Mode::ToolStd => {\n+            if host == target {\n+                format!(\"Building tool {} (stage{})\", tool, build_stage)\n+            } else {\n+                format!(\n+                    \"Building tool {} (stage{}:{} -> stage{}:{})\",\n+                    tool, build_stage, host, build_stage, target\n+                )\n+            }\n+        }\n+        _ => format!(\"Building tool {} (stage{})\", tool, build_stage),\n+    }\n+}\n+\n impl Step for ToolBuild {\n     type Output = Option<PathBuf>;\n \n@@ -74,8 +112,14 @@ impl Step for ToolBuild {\n         if !self.allow_features.is_empty() {\n             cargo.allow_features(self.allow_features);\n         }\n-\n-        builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n+        let msg = tooling_output(\n+            self.mode,\n+            self.tool,\n+            self.compiler.stage,\n+            &self.compiler.host,\n+            &self.target,\n+        );\n+        builder.info(&msg);\n         let mut duplicates = Vec::new();\n         let is_expected = compile::stream_cargo(builder, cargo, vec![], &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n@@ -562,10 +606,14 @@ impl Step for Rustdoc {\n             features.as_slice(),\n         );\n \n-        builder.info(&format!(\n-            \"Building rustdoc for stage{} ({})\",\n-            target_compiler.stage, target_compiler.host\n-        ));\n+        let msg = tooling_output(\n+            Mode::ToolRustc,\n+            \"rustdoc\",\n+            build_compiler.stage,\n+            &self.compiler.host,\n+            &target,\n+        );\n+        builder.info(&msg);\n         builder.run(&mut cargo.into());\n \n         // Cargo adds a number of paths to the dylib search path on windows, which results in"}]}