{"sha": "290117f7d99157e928c82d0e84effb0e9fdc409d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MDExN2Y3ZDk5MTU3ZTkyOGM4MmQwZTg0ZWZmYjBlOWZkYzQwOWQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-04T11:01:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-04T11:01:06Z"}, "message": "Rollup merge of #82564 - WaffleLapkin:revert_spare_mut, r=RalfJung\n\nRevert `Vec::spare_capacity_mut` impl to prevent pointers invalidation\n\nThe implementation was changed in #79015.\n\nLater it was [pointed out](https://github.com/rust-lang/rust/issues/81944#issuecomment-782849785) that the implementation invalidates pointers to the buffer (initialized elements) by creating a unique reference to the buffer. This PR reverts the implementation.\n\nr? ```@RalfJung```", "tree": {"sha": "0ab49014485cb2a1511b42ac12d0671abd942318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ab49014485cb2a1511b42ac12d0671abd942318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/290117f7d99157e928c82d0e84effb0e9fdc409d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgQL3yCRBK7hj4Ov3rIwAAdHIIAHcVKyQ25PTvMGddp73PLDDv\nJKFGUczuouGVT/W8rmgYzCxUWKYuFy0+WA3cuEG61rpN1eNyDTzxHOkmhR59niR4\nlUvCx8rIUVyFG3SkG/g27SJvd8wb0aDMGqoPSLNzDuauBBTDQpuzmukOejOYgwH7\nC5x84PZczy8AMuit5IvmXdjFTze5I4iPt/iPEVTfzmbpW5a4XUnZB9UMOS7MZAko\nzDi22rCbXXx/+EMm2IRjf32OOTiczAtBE6kTeu82PgsyyppazpfemPQ0wyeYZYzJ\nxLVyISEEIBNgKe5zGURC6lFCLyAJQ09w2vX3NM+Ypk0TTeYvjCn2eXE/4uHpZaI=\n=s42O\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ab49014485cb2a1511b42ac12d0671abd942318\nparent 569f0330d8e88aca3fabdfcb9b2dded9177002ce\nparent 950f12119ef724156a9a4e17e1b375eb28c6af11\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1614855666 +0900\ncommitter GitHub <noreply@github.com> 1614855666 +0900\n\nRollup merge of #82564 - WaffleLapkin:revert_spare_mut, r=RalfJung\n\nRevert `Vec::spare_capacity_mut` impl to prevent pointers invalidation\n\nThe implementation was changed in #79015.\n\nLater it was [pointed out](https://github.com/rust-lang/rust/issues/81944#issuecomment-782849785) that the implementation invalidates pointers to the buffer (initialized elements) by creating a unique reference to the buffer. This PR reverts the implementation.\n\nr? ```@RalfJung```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/290117f7d99157e928c82d0e84effb0e9fdc409d", "html_url": "https://github.com/rust-lang/rust/commit/290117f7d99157e928c82d0e84effb0e9fdc409d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/290117f7d99157e928c82d0e84effb0e9fdc409d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "569f0330d8e88aca3fabdfcb9b2dded9177002ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/569f0330d8e88aca3fabdfcb9b2dded9177002ce", "html_url": "https://github.com/rust-lang/rust/commit/569f0330d8e88aca3fabdfcb9b2dded9177002ce"}, {"sha": "950f12119ef724156a9a4e17e1b375eb28c6af11", "url": "https://api.github.com/repos/rust-lang/rust/commits/950f12119ef724156a9a4e17e1b375eb28c6af11", "html_url": "https://github.com/rust-lang/rust/commit/950f12119ef724156a9a4e17e1b375eb28c6af11"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "0028e290fac4edb40b9118977710e48903146555", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/290117f7d99157e928c82d0e84effb0e9fdc409d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290117f7d99157e928c82d0e84effb0e9fdc409d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=290117f7d99157e928c82d0e84effb0e9fdc409d", "patch": "@@ -1877,7 +1877,15 @@ impl<T, A: Allocator> Vec<T, A> {\n     #[unstable(feature = \"vec_spare_capacity\", issue = \"75017\")]\n     #[inline]\n     pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {\n-        self.split_at_spare_mut().1\n+        // Note:\n+        // This method is not implemented in terms of `split_at_spare_mut`,\n+        // to prevent invalidation of pointers to the buffer.\n+        unsafe {\n+            slice::from_raw_parts_mut(\n+                self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,\n+                self.buf.capacity() - self.len,\n+            )\n+        }\n     }\n \n     /// Returns vector content as a slice of `T`, along with the remaining spare\n@@ -1934,20 +1942,16 @@ impl<T, A: Allocator> Vec<T, A> {\n     #[unstable(feature = \"vec_split_at_spare\", issue = \"81944\")]\n     #[inline]\n     pub fn split_at_spare_mut(&mut self) -> (&mut [T], &mut [MaybeUninit<T>]) {\n-        let ptr = self.as_mut_ptr();\n-\n-        // SAFETY:\n-        // - `ptr` is guaranteed to be in bounds for `capacity` elements\n-        // - `len` is guaranteed to less or equal to `capacity`\n-        // - `MaybeUninit<T>` has the same layout as `T`\n-        let spare_ptr = unsafe { ptr.cast::<MaybeUninit<T>>().add(self.len) };\n+        let Range { start: ptr, end: spare_ptr } = self.as_mut_ptr_range();\n+        let spare_ptr = spare_ptr.cast::<MaybeUninit<T>>();\n+        let spare_len = self.buf.capacity() - self.len;\n \n         // SAFETY:\n         // - `ptr` is guaranteed to be valid for `len` elements\n-        // - `spare_ptr` is offseted from `ptr` by `len`, so it doesn't overlap `initialized` slice\n+        // - `spare_ptr` is pointing one element past the buffer, so it doesn't overlap with `initialized`\n         unsafe {\n             let initialized = slice::from_raw_parts_mut(ptr, self.len);\n-            let spare = slice::from_raw_parts_mut(spare_ptr, self.buf.capacity() - self.len);\n+            let spare = slice::from_raw_parts_mut(spare_ptr, spare_len);\n \n             (initialized, spare)\n         }"}, {"sha": "799499b9b771fba38da8e046fe65625b566dc0d6", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290117f7d99157e928c82d0e84effb0e9fdc409d/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290117f7d99157e928c82d0e84effb0e9fdc409d/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=290117f7d99157e928c82d0e84effb0e9fdc409d", "patch": "@@ -20,6 +20,7 @@\n #![feature(vecdeque_binary_search)]\n #![feature(slice_group_by)]\n #![feature(vec_extend_from_within)]\n+#![feature(vec_spare_capacity)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "fab450285854d4a721fa44dc71f5437aaf202fa1", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/290117f7d99157e928c82d0e84effb0e9fdc409d/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290117f7d99157e928c82d0e84effb0e9fdc409d/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=290117f7d99157e928c82d0e84effb0e9fdc409d", "patch": "@@ -1691,6 +1691,10 @@ fn test_stable_pointers() {\n     next_then_drop(v.splice(5..6, vec![1; 10].into_iter().filter(|_| true))); // lower bound not exact\n     assert_eq!(*v0, 13);\n \n+    // spare_capacity_mut\n+    v.spare_capacity_mut();\n+    assert_eq!(*v0, 13);\n+\n     // Smoke test that would fire even outside Miri if an actual relocation happened.\n     *v0 -= 13;\n     assert_eq!(v[0], 0);"}]}