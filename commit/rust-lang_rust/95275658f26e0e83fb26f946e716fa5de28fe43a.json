{"sha": "95275658f26e0e83fb26f946e716fa5de28fe43a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1Mjc1NjU4ZjI2ZTBlODNmYjI2Zjk0NmU3MTZmYTVkZTI4ZmU0M2E=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2019-06-27T23:11:46Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2019-06-28T20:24:58Z"}, "message": "Add Vec::leak", "tree": {"sha": "6d652f364bf90fb8a4be363fc34f14468f44228e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d652f364bf90fb8a4be363fc34f14468f44228e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95275658f26e0e83fb26f946e716fa5de28fe43a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95275658f26e0e83fb26f946e716fa5de28fe43a", "html_url": "https://github.com/rust-lang/rust/commit/95275658f26e0e83fb26f946e716fa5de28fe43a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95275658f26e0e83fb26f946e716fa5de28fe43a/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ebd67e4ee394cad9441a801f2022724ae7e07db", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebd67e4ee394cad9441a801f2022724ae7e07db", "html_url": "https://github.com/rust-lang/rust/commit/8ebd67e4ee394cad9441a801f2022724ae7e07db"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "c0544d7469ca76e0f572275e4e6a8e6cb99bbd71", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/95275658f26e0e83fb26f946e716fa5de28fe43a/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95275658f26e0e83fb26f946e716fa5de28fe43a/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=95275658f26e0e83fb26f946e716fa5de28fe43a", "patch": "@@ -1367,6 +1367,40 @@ impl<T> Vec<T> {\n             self.truncate(new_len);\n         }\n     }\n+\n+    /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,\n+    /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime\n+    /// `'a`. If the type has only static references, or none at all, then this\n+    /// may be chosen to be `'static`.\n+    ///\n+    /// This function is similar to the `leak` function on `Box`.\n+    ///\n+    /// This function is mainly useful for data that lives for the remainder of\n+    /// the program's life. Dropping the returned reference will cause a memory\n+    /// leak.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Simple usage:\n+    ///\n+    /// ```\n+    /// #![feature(vec_leak)]\n+    ///\n+    /// fn main() {\n+    ///     let x = vec![1, 2, 3];\n+    ///     let static_ref: &'static mut [usize] = Vec::leak(x);\n+    ///     static_ref[0] += 1;\n+    ///     assert_eq!(static_ref, &[2, 2, 3]);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"vec_leak\", issue = \"62195\")]\n+    #[inline]\n+    pub fn leak<'a>(vec: Vec<T>) -> &'a mut [T]\n+    where\n+        T: 'a // Technically not needed, but kept to be explicit.\n+    {\n+        Box::leak(vec.into_boxed_slice())\n+    }\n }\n \n impl<T: Clone> Vec<T> {"}]}