{"sha": "91aa99607f1076c8f76614ed6f15b1645e87e5a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYWE5OTYwN2YxMDc2YzhmNzY2MTRlZDZmMTViMTY0NWU4N2U1YTg=", "commit": {"author": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2017-08-07T11:22:48Z"}, "committer": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2017-08-14T13:07:21Z"}, "message": "Do not store `ty`", "tree": {"sha": "33a9892336584416005ebcedfa0c9c005ee38a51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33a9892336584416005ebcedfa0c9c005ee38a51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91aa99607f1076c8f76614ed6f15b1645e87e5a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91aa99607f1076c8f76614ed6f15b1645e87e5a8", "html_url": "https://github.com/rust-lang/rust/commit/91aa99607f1076c8f76614ed6f15b1645e87e5a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91aa99607f1076c8f76614ed6f15b1645e87e5a8/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91e99a321569defb72cde69f2b2854b1e166219c", "url": "https://api.github.com/repos/rust-lang/rust/commits/91e99a321569defb72cde69f2b2854b1e166219c", "html_url": "https://github.com/rust-lang/rust/commit/91e99a321569defb72cde69f2b2854b1e166219c"}], "stats": {"total": 44, "additions": 16, "deletions": 28}, "files": [{"sha": "d1938197e652965dbf338ac1c233141f36c9e909", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91aa99607f1076c8f76614ed6f15b1645e87e5a8/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91aa99607f1076c8f76614ed6f15b1645e87e5a8/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=91aa99607f1076c8f76614ed6f15b1645e87e5a8", "patch": "@@ -301,7 +301,7 @@ pub enum Vtable<'tcx, N> {\n     VtableObject(VtableObjectData<'tcx, N>),\n \n     /// Successful resolution for a builtin trait.\n-    VtableBuiltin(VtableBuiltinData<'tcx, N>),\n+    VtableBuiltin(VtableBuiltinData<N>),\n \n     /// Vtable automatically generated for a closure. The def ID is the ID\n     /// of the closure expression. This is a `VtableImpl` in spirit, but the\n@@ -345,9 +345,7 @@ pub struct VtableDefaultImplData<N> {\n }\n \n #[derive(Clone)]\n-pub struct VtableBuiltinData<'tcx, N> {\n-    /// `ty` can be used for generating shim for builtin implementations like `Clone::clone`.\n-    pub ty: ty::Ty<'tcx>,\n+pub struct VtableBuiltinData<N> {\n     pub nested: Vec<N>\n }\n \n@@ -771,7 +769,6 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             }),\n             VtableParam(n) => VtableParam(n.into_iter().map(f).collect()),\n             VtableBuiltin(i) => VtableBuiltin(VtableBuiltinData {\n-                ty: i.ty,\n                 nested: i.nested.into_iter().map(f).collect(),\n             }),\n             VtableObject(o) => VtableObject(VtableObjectData {"}, {"sha": "46bdb1344b2fe3fe920192e135b40e49370ec27d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91aa99607f1076c8f76614ed6f15b1645e87e5a8/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91aa99607f1076c8f76614ed6f15b1645e87e5a8/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=91aa99607f1076c8f76614ed6f15b1645e87e5a8", "patch": "@@ -2265,7 +2265,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     fn confirm_builtin_candidate(&mut self,\n                                  obligation: &TraitObligation<'tcx>,\n                                  has_nested: bool)\n-                                 -> VtableBuiltinData<'tcx, PredicateObligation<'tcx>>\n+                                 -> VtableBuiltinData<PredicateObligation<'tcx>>\n     {\n         debug!(\"confirm_builtin_candidate({:?}, {:?})\",\n                obligation, has_nested);\n@@ -2303,8 +2303,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         debug!(\"confirm_builtin_candidate: obligations={:?}\",\n                obligations);\n \n-        let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());\n-        VtableBuiltinData { ty: self_ty, nested: obligations }\n+        VtableBuiltinData { nested: obligations }\n     }\n \n     /// This handles the case where a `impl Foo for ..` impl is being used.\n@@ -2611,7 +2610,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n     fn confirm_builtin_unsize_candidate(&mut self,\n                                         obligation: &TraitObligation<'tcx>,)\n-        -> Result<VtableBuiltinData<'tcx, PredicateObligation<'tcx>>, SelectionError<'tcx>>\n+        -> Result<VtableBuiltinData<PredicateObligation<'tcx>>, SelectionError<'tcx>>\n     {\n         let tcx = self.tcx();\n \n@@ -2814,7 +2813,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             _ => bug!()\n         };\n \n-        Ok(VtableBuiltinData { ty: source, nested: nested })\n+        Ok(VtableBuiltinData { nested: nested })\n     }\n \n     ///////////////////////////////////////////////////////////////////////////"}, {"sha": "003508fbbca12f9e533f2d61b31ae0df00a1b17c", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91aa99607f1076c8f76614ed6f15b1645e87e5a8/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91aa99607f1076c8f76614ed6f15b1645e87e5a8/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=91aa99607f1076c8f76614ed6f15b1645e87e5a8", "patch": "@@ -86,9 +86,9 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableClosureData<'tcx, N> {\n     }\n }\n \n-impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableBuiltinData<'tcx, N> {\n+impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableBuiltinData<N> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"VtableBuiltin(ty={:?}, nested={:?})\", self.ty, self.nested)\n+        write!(f, \"VtableBuiltin(nested={:?})\", self.nested)\n     }\n }\n \n@@ -300,14 +300,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n                 })\n             }\n             traits::VtableParam(n) => Some(traits::VtableParam(n)),\n-            traits::VtableBuiltin(traits::VtableBuiltinData { ty, nested }) => {\n-                tcx.lift(&ty).map(|ty| {\n-                    traits::VtableBuiltin(traits::VtableBuiltinData {\n-                        ty,\n-                        nested,\n-                    })\n-                })\n-            }\n+            traits::VtableBuiltin(n) => Some(traits::VtableBuiltin(n)),\n             traits::VtableObject(traits::VtableObjectData {\n                 upcast_trait_ref,\n                 vtable_base,\n@@ -385,10 +378,9 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableDefaultIm\n     }\n }\n \n-impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableBuiltinData<'tcx, N> {\n+impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableBuiltinData<N> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         traits::VtableBuiltinData {\n-            ty: self.ty.fold_with(folder),\n             nested: self.nested.fold_with(folder),\n         }\n     }"}, {"sha": "040d96b0dcc7c994c5b4d07e5485995d82c24b2e", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91aa99607f1076c8f76614ed6f15b1645e87e5a8/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91aa99607f1076c8f76614ed6f15b1645e87e5a8/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=91aa99607f1076c8f76614ed6f15b1645e87e5a8", "patch": "@@ -275,7 +275,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n /// Build a `Clone::clone` shim for `recvr_ty`. Here, `def_id` is `Clone::clone`.\n fn build_clone_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n                               def_id: DefId,\n-                              recvr_ty: ty::Ty<'tcx>)\n+                              rcvr_ty: ty::Ty<'tcx>)\n                               -> Mir<'tcx>\n {\n     let sig = tcx.fn_sig(def_id);\n@@ -348,7 +348,7 @@ fn build_clone_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n         loc\n     };\n \n-    match recvr_ty.sty {\n+    match rcvr_ty.sty {\n         ty::TyArray(ty, len) => {\n             let mut returns = Vec::new();\n             for i in 0..len {\n@@ -374,7 +374,7 @@ fn build_clone_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n                     Lvalue::Local(RETURN_POINTER),\n                     Rvalue::Aggregate(\n                         box AggregateKind::Array(ty),\n-                        returns.into_iter().map(|loc| Operand::Consume(loc)).collect()\n+                        returns.into_iter().map(Operand::Consume).collect()\n                     )\n                 )\n             };\n@@ -396,7 +396,7 @@ fn build_clone_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n                     Lvalue::Local(RETURN_POINTER),\n                     Rvalue::Aggregate(\n                         box AggregateKind::Tuple,\n-                        returns.into_iter().map(|loc| Operand::Consume(loc)).collect()\n+                        returns.into_iter().map(Operand::Consume).collect()\n                     )\n                 )\n             };"}, {"sha": "401ee8cfaa8c917341e540c233d25073398e55d3", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91aa99607f1076c8f76614ed6f15b1645e87e5a8/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91aa99607f1076c8f76614ed6f15b1645e87e5a8/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=91aa99607f1076c8f76614ed6f15b1645e87e5a8", "patch": "@@ -143,9 +143,9 @@ fn resolve_associated_item<'a, 'tcx>(\n                 substs: rcvr_substs\n             }\n         }\n-        traits::VtableBuiltin(ref data) => {\n+        traits::VtableBuiltin(..) => {\n             Instance {\n-                def: ty::InstanceDef::BuiltinShim(def_id, data.ty),\n+                def: ty::InstanceDef::BuiltinShim(def_id, trait_ref.self_ty()),\n                 substs: rcvr_substs\n             }\n         }"}]}