{"sha": "8c8fa79312e4c357bd234df5112ceba75ef0dd34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOGZhNzkzMTJlNGMzNTdiZDIzNGRmNTExMmNlYmE3NWVmMGRkMzQ=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-20T01:21:41Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-26T19:30:14Z"}, "message": "Add block and closure protos and parse/pp block and lambda exprs.", "tree": {"sha": "a00eb23a7824bc61d060ef0be96c9bf46fae5ef7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a00eb23a7824bc61d060ef0be96c9bf46fae5ef7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c8fa79312e4c357bd234df5112ceba75ef0dd34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8fa79312e4c357bd234df5112ceba75ef0dd34", "html_url": "https://github.com/rust-lang/rust/commit/8c8fa79312e4c357bd234df5112ceba75ef0dd34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c8fa79312e4c357bd234df5112ceba75ef0dd34/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaab0db4ea44594505a5c22c056b9c3fb1cdd17c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaab0db4ea44594505a5c22c056b9c3fb1cdd17c", "html_url": "https://github.com/rust-lang/rust/commit/eaab0db4ea44594505a5c22c056b9c3fb1cdd17c"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "ca12c151f6ca9b57bbd23c743bf912fdefb19ade", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c8fa79312e4c357bd234df5112ceba75ef0dd34/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8fa79312e4c357bd234df5112ceba75ef0dd34/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=8c8fa79312e4c357bd234df5112ceba75ef0dd34", "patch": "@@ -166,7 +166,7 @@ tag layer { layer_value; layer_state; layer_gc; }\n \n tag _auth { auth_unsafe; }\n \n-tag proto { proto_iter; proto_fn; }\n+tag proto { proto_iter; proto_fn; proto_block; proto_closure; }\n \n tag binop {\n     add;"}, {"sha": "50fe1ff35af182ce628791866aa2e43bd07a2ca9", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8c8fa79312e4c357bd234df5112ceba75ef0dd34/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8fa79312e4c357bd234df5112ceba75ef0dd34/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=8c8fa79312e4c357bd234df5112ceba75ef0dd34", "patch": "@@ -171,6 +171,8 @@ fn bad_expr_word_table() -> hashmap[str, ()] {\n     words.insert(\"gc\", ());\n     words.insert(\"native\", ());\n     words.insert(\"fn\", ());\n+    words.insert(\"block\", ());\n+    words.insert(\"lambda\", ());\n     words.insert(\"pred\", ());\n     words.insert(\"iter\", ());\n     words.insert(\"block\", ());\n@@ -300,6 +302,8 @@ fn parse_proto(&parser p) -> ast::proto {\n         ret ast::proto_iter;\n     } else if (eat_word(p, \"fn\")) {\n         ret ast::proto_fn;\n+    } else if (eat_word(p, \"block\")) {\n+        ret ast::proto_block;\n     } else if (eat_word(p, \"pred\")) {\n         ret ast::proto_fn;\n     } else { unexpected(p, p.peek()); }\n@@ -582,6 +586,10 @@ fn parse_ty(&parser p) -> @ast::ty {\n         auto flo = p.get_last_lo_pos();\n         t = parse_ty_fn(ast::proto_fn, p, flo);\n         alt (t) { case (ast::ty_fn(_, _, ?out, _, _)) { hi = out.span.hi; } }\n+    } else if (eat_word(p, \"block\")) {\n+        auto flo = p.get_last_lo_pos();\n+        t = parse_ty_fn(ast::proto_block, p, flo);\n+        alt (t) { case (ast::ty_fn(_, _, ?out, _, _)) { hi = out.span.hi; } }\n     } else if (eat_word(p, \"iter\")) {\n         auto flo = p.get_last_lo_pos();\n         t = parse_ty_fn(ast::proto_iter, p, flo);\n@@ -830,7 +838,11 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n     } else if (eat_word(p, \"spawn\")) {\n         ret parse_spawn_expr(p);\n     } else if (eat_word(p, \"fn\")) {\n-        ret parse_fn_expr(p);\n+        ret parse_fn_expr(p, ast::proto_fn);\n+    } else if (eat_word(p, \"block\")) {\n+        ret parse_fn_expr(p, ast::proto_block);\n+    } else if (eat_word(p, \"lambda\")) {\n+        ret parse_fn_expr(p, ast::proto_closure);\n     } else if (p.peek() == token::LBRACKET) {\n         p.bump();\n         auto mut = parse_mutability(p);\n@@ -1320,11 +1332,11 @@ fn parse_if_expr(&parser p) -> @ast::expr {\n     }\n }\n \n-fn parse_fn_expr(&parser p) -> @ast::expr {\n+fn parse_fn_expr(&parser p, ast::proto proto) -> @ast::expr {\n     auto lo = p.get_last_lo_pos();\n     auto decl = parse_fn_decl(p, ast::impure_fn);\n     auto body = parse_block(p);\n-    auto _fn = rec(decl=decl, proto=ast::proto_fn, body=body);\n+    auto _fn = rec(decl=decl, proto=proto, body=body);\n     ret mk_expr(p, lo, body.span.hi, ast::expr_fn(_fn));\n }\n \n@@ -1687,7 +1699,7 @@ fn parse_source_stmt(&parser p) -> @ast::stmt {\n             }\n             case (fn_no_item) { // parse_item will have already skipped \"fn\"\n \n-                auto e = parse_fn_expr(p);\n+                auto e = parse_fn_expr(p, ast::proto_fn);\n                 e = parse_dot_or_call_expr_with(p, e);\n                 ret @spanned(lo, e.span.hi, ast::stmt_expr(e, p.get_id()));\n             }"}, {"sha": "e6fff61118aeb07fc5dbd511afee58eadc596ade", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c8fa79312e4c357bd234df5112ceba75ef0dd34/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8fa79312e4c357bd234df5112ceba75ef0dd34/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=8c8fa79312e4c357bd234df5112ceba75ef0dd34", "patch": "@@ -1551,6 +1551,8 @@ fn proto_to_str(&ast::proto p) -> str {\n     ret alt (p) {\n         ast::proto_fn { \"fn\" }\n         ast::proto_iter { \"iter\" }\n+        ast::proto_block { \"block\" }\n+        ast::proto_closure { \"lambda\" }\n     };\n }\n "}]}