{"sha": "378c4ab9ab1f75c4375425077c46cceb556fbc86", "node_id": "C_kwDOAAsO6NoAKDM3OGM0YWI5YWIxZjc1YzQzNzU0MjUwNzdjNDZjY2ViNTU2ZmJjODY", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2023-02-19T04:03:56Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2023-02-19T04:11:10Z"}, "message": "Make public API, docs algorithm-agnostic", "tree": {"sha": "c14cb1d7324a505cd16acc2874f5a8ee0b222996", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c14cb1d7324a505cd16acc2874f5a8ee0b222996"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/378c4ab9ab1f75c4375425077c46cceb556fbc86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE/zgjfWsP96DbtCNLbi5VxfmrskcFAmPxoV4ACgkQbi5Vxfmr\nskfOng//Qdu7RKozH8648Wl7y2B9tTh6AnHLnBLcELdGfh4cUN57vuSlRTr3kDP+\n3q+UAS6fYGKYTc6I6l9GRHG3haOfjKo5Nw01erJwJ8wSA+B6nNlwIkF03+1Onvro\ni0Nz1BRsOvlKjhPAI/fJkXpqV8eP7g9tBRl4S4XCgeTKCbRbvB2R3jcDUW+2wYWO\nwFtnwa04uEGpHshS0HWMl5Igj8TTfyC23gANElsckiVHDgGahY+FdyufRWDikU1t\nW+LJ9GxmCwRYB5iATiXG2tlvzLexJwRuEljSUIUzXbWDOdHH+92xjFsIudTczp1Z\nq9Dcz6eJEbzMP1Jxz3TIaj4qlNKzxkNQaR8CyxaABSYkkKmXyEF3M1ukZ7wHew3x\n62wjkxILoM/VE+x5FmdX4drdHSdltJLslk36tpREMgvZl2FcUcAx03PsJvZLCIa3\nLNFf8OSIIXKO8oy9RKW/rA6NnsuU2t1NH78NcciBn8dIC+Qtd6yo8Zd6KZGheU/e\n8dcaIb73w58pY1yvGRBC16HGID/nwzK9ffR6ySdm1FYqeMHrEbWw8EiT5SJNY9uf\n+sYN0rlrMeR5qZgMtq0BVbtD61IK2ZML7hEHT+8pKt16FjrHSljcUUJBQBr41j5d\nHT6PMCtY4yCt3x/qv6He88MgDxddln8Xy703t2NjeCQSu0+sMQE=\n=JKNq\n-----END PGP SIGNATURE-----", "payload": "tree c14cb1d7324a505cd16acc2874f5a8ee0b222996\nparent c2f2a3cff2392b8c9898cdfff347770d8e8c05b2\nauthor Jacob Pratt <jacob@jhpratt.dev> 1676779436 +0000\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1676779870 +0000\n\nMake public API, docs algorithm-agnostic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/378c4ab9ab1f75c4375425077c46cceb556fbc86", "html_url": "https://github.com/rust-lang/rust/commit/378c4ab9ab1f75c4375425077c46cceb556fbc86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/378c4ab9ab1f75c4375425077c46cceb556fbc86/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2f2a3cff2392b8c9898cdfff347770d8e8c05b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f2a3cff2392b8c9898cdfff347770d8e8c05b2", "html_url": "https://github.com/rust-lang/rust/commit/c2f2a3cff2392b8c9898cdfff347770d8e8c05b2"}], "stats": {"total": 154, "additions": 81, "deletions": 73}, "files": [{"sha": "4a0e005b8b90220c1befaeda82a973fa76218d06", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::PredicateOrigin;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ty::{DefIdTree, ResolverAstLowering, TyCtxt};\n-use rustc_span::lev_distance::find_best_match_for_name;\n+use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, Symbol};"}, {"sha": "006d37cc57c6daef6fc371c015e7e0db1cfbefd9", "filename": "compiler/rustc_hir_analysis/src/astconv/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -6,7 +6,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n use rustc_session::parse::feature_err;\n-use rustc_span::lev_distance::find_best_match_for_name;\n+use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, Symbol, DUMMY_SP};\n "}, {"sha": "44e6797f3f472ab07afa8c7d61480c3030d176c0", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -34,8 +34,8 @@ use rustc_middle::ty::DynKind;\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, Const, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeVisitable};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n+use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::edition::Edition;\n-use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{sym, Span, DUMMY_SP};\n use rustc_target::spec::abi;"}, {"sha": "08cbfffdd171b581cf21cf47d75b9ea598c7f647", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -45,8 +45,8 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, Ty, TypeVisitable};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_session::parse::feature_err;\n+use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::hygiene::DesugaringKind;\n-use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_target::spec::abi::Abi::RustIntrinsic;"}, {"sha": "edeb2a847f9684aae3cb9b950ac11e3bbe462f2e", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -25,8 +25,8 @@ use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use rustc_session::lint;\n use rustc_span::def_id::DefId;\n use rustc_span::def_id::LocalDefId;\n-use rustc_span::lev_distance::{\n-    find_best_match_for_name_with_substrings, lev_distance_with_substrings,\n+use rustc_span::edit_distance::{\n+    edit_distance_with_substrings, find_best_match_for_name_with_substrings,\n };\n use rustc_span::symbol::sym;\n use rustc_span::{symbol::Ident, Span, Symbol, DUMMY_SP};\n@@ -70,7 +70,7 @@ struct ProbeContext<'a, 'tcx> {\n     impl_dups: FxHashSet<DefId>,\n \n     /// When probing for names, include names that are close to the\n-    /// requested name (by Levenshtein distance)\n+    /// requested name (by edit distance)\n     allow_similar_names: bool,\n \n     /// Some(candidate) if there is a private candidate\n@@ -1794,7 +1794,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n     /// Similarly to `probe_for_return_type`, this method attempts to find the best matching\n     /// candidate method where the method name may have been misspelled. Similarly to other\n-    /// Levenshtein based suggestions, we provide at most one such suggestion.\n+    /// edit distance based suggestions, we provide at most one such suggestion.\n     fn probe_for_similar_candidate(&mut self) -> Result<Option<ty::AssocItem>, MethodError<'tcx>> {\n         debug!(\"probing for method names similar to {:?}\", self.method_name);\n \n@@ -2052,8 +2052,11 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         if self.matches_by_doc_alias(x.def_id) {\n                             return true;\n                         }\n-                        match lev_distance_with_substrings(name.as_str(), x.name.as_str(), max_dist)\n-                        {\n+                        match edit_distance_with_substrings(\n+                            name.as_str(),\n+                            x.name.as_str(),\n+                            max_dist,\n+                        ) {\n                             Some(d) => d > 0,\n                             None => false,\n                         }"}, {"sha": "4f3dbe03c052aac1c9c961441e1ec81c61e2d344", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -31,7 +31,7 @@ use rustc_middle::ty::{self, DefIdTree, GenericArgKind, Ty, TyCtxt, TypeVisitabl\n use rustc_middle::ty::{IsSuggestable, ToPolyTraitRef};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Symbol;\n-use rustc_span::{lev_distance, source_map, ExpnKind, FileName, MacroKind, Span};\n+use rustc_span::{edit_distance, source_map, ExpnKind, FileName, MacroKind, Span};\n use rustc_trait_selection::traits::error_reporting::on_unimplemented::OnUnimplementedNote;\n use rustc_trait_selection::traits::error_reporting::on_unimplemented::TypeErrCtxtExt as _;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n@@ -1014,7 +1014,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // that had unsatisfied trait bounds\n         if unsatisfied_predicates.is_empty() && rcvr_ty.is_enum() {\n             let adt_def = rcvr_ty.ty_adt_def().expect(\"enum is not an ADT\");\n-            if let Some(suggestion) = lev_distance::find_best_match_for_name(\n+            if let Some(suggestion) = edit_distance::find_best_match_for_name(\n                 &adt_def.variants().iter().map(|s| s.name).collect::<Vec<_>>(),\n                 item_name.name,\n                 None,"}, {"sha": "ab6e76ef8aa35932c416a2f82820ab1c244953f5", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -14,8 +14,8 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_middle::middle::stability::EvalResult;\n use rustc_middle::ty::{self, Adt, BindingMode, Ty, TypeVisitable};\n use rustc_session::lint::builtin::NON_EXHAUSTIVE_OMITTED_PATTERNS;\n+use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::hygiene::DesugaringKind;\n-use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{BytePos, DUMMY_SP};"}, {"sha": "475d3601b52ab65263b5fc92e767c71ac7d40049", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -14,8 +14,8 @@ use rustc_session::filesearch::sysroot_candidates;\n use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::CrateConfig;\n use rustc_session::{early_error, filesearch, output, Session};\n+use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::edition::Edition;\n-use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::FileLoader;\n use rustc_span::symbol::{sym, Symbol};\n use session::CompilerIO;"}, {"sha": "aace4974cc935cad3de3cb4957f8a0a6cdcde790", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -39,7 +39,7 @@ use rustc_middle::ty::{self, print::Printer, subst::GenericArg, RegisteredTools,\n use rustc_session::lint::{BuiltinLintDiagnostics, LintExpectationId};\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n-use rustc_span::lev_distance::find_best_match_for_name;\n+use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{BytePos, Span};\n use rustc_target::abi;"}, {"sha": "3e3399d05c9e0310d2ded2166738a251e2034382", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -19,8 +19,8 @@ use rustc_errors::{\n     struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic, PResult,\n     StashKey,\n };\n+use rustc_span::edit_distance::edit_distance;\n use rustc_span::edition::Edition;\n-use rustc_span::lev_distance::lev_distance;\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n@@ -459,7 +459,8 @@ impl<'a> Parser<'a> {\n                 // Maybe the user misspelled `macro_rules` (issue #91227)\n                 if self.token.is_ident()\n                     && path.segments.len() == 1\n-                    && lev_distance(\"macro_rules\", &path.segments[0].ident.to_string(), 3).is_some()\n+                    && edit_distance(\"macro_rules\", &path.segments[0].ident.to_string(), 3)\n+                        .is_some()\n                 {\n                     err.span_suggestion(\n                         path.span,"}, {"sha": "cd26dbd61901d7819686426200e3b594504696f4", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -21,9 +21,9 @@ use rustc_session::lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE;\n use rustc_session::lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::Session;\n+use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Span, SyntaxContext};"}, {"sha": "48188b4ba355ec1ea52566e5e0c45274fc5fb071", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -21,8 +21,8 @@ use rustc_middle::span_bug;\n use rustc_middle::ty;\n use rustc_session::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::hygiene::LocalExpnId;\n-use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::Span;\n "}, {"sha": "174a543fe466df57a2371c6be199dac97d999784", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -25,9 +25,9 @@ use rustc_middle::ty::DefIdTree;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n+use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Span};\n \n@@ -542,7 +542,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n             }\n         }\n \n-        // Try Levenshtein algorithm.\n+        // Try finding a suitable replacement.\n         let typo_sugg =\n             self.lookup_typo_candidate(path, source.namespace(), is_expected).to_opt_suggestion();\n         if path.len() == 1 && self.self_type_is_available() {\n@@ -770,7 +770,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 _ => {}\n             }\n \n-            // If the trait has a single item (which wasn't matched by Levenshtein), suggest it\n+            // If the trait has a single item (which wasn't matched by the algorithm), suggest it\n             let suggestion = self.get_single_associated_item(&path, &source, is_expected);\n             if !self.r.add_typo_suggestion(err, suggestion, ident_span) {\n                 fallback = !self.let_binding_suggestion(err, ident_span);"}, {"sha": "89f0386e3e97fe934abdfb4d73ee8a0f1b3b34e5", "filename": "compiler/rustc_span/src/edit_distance.rs", "status": "renamed", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_span%2Fsrc%2Fedit_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_span%2Fsrc%2Fedit_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedit_distance.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -1,22 +1,26 @@\n-//! Damerau-Levenshtein distances.\n+//! Edit distances.\n //!\n-//! The [Damerau-Levenshtein distance] is a metric for measuring the difference between two strings.\n-//! This implementation is a restricted version of the algorithm, as it does not permit modifying\n-//! characters that have already been transposed.\n+//! The [edit distance] is a metric for measuring the difference between two strings.\n //!\n-//! [Damerau-Levenshtein distance]: https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\n+//! [edit distance]: https://en.wikipedia.org/wiki/Edit_distance\n+\n+// The current implementation is the restricted Damerau-Levenshtein algorithm. It is restricted\n+// because it does not permit modifying characters that have already been transposed. The specific\n+// algorithm should not matter to the caller of the methods, which is why it is not noted in the\n+// documentation.\n \n use crate::symbol::Symbol;\n use std::{cmp, mem};\n \n #[cfg(test)]\n mod tests;\n \n-/// Finds the restricted Damerau-Levenshtein distance between two strings. Characters that have\n-/// already been transposed may not be modified.\n+/// Finds the [edit distance] between two strings.\n+///\n+/// Returns `None` if the distance exceeds the limit.\n ///\n-/// Returns None if the distance exceeds the limit.\n-pub fn lev_distance(a: &str, b: &str, limit: usize) -> Option<usize> {\n+/// [edit distance]: https://en.wikipedia.org/wiki/Edit_distance\n+pub fn edit_distance(a: &str, b: &str, limit: usize) -> Option<usize> {\n     let mut a = &a.chars().collect::<Vec<_>>()[..];\n     let mut b = &b.chars().collect::<Vec<_>>()[..];\n \n@@ -95,29 +99,29 @@ pub fn lev_distance(a: &str, b: &str, limit: usize) -> Option<usize> {\n }\n \n /// Provides a word similarity score between two words that accounts for substrings being more\n-/// meaningful than a typical Levenshtein distance. The lower the score, the closer the match.\n-/// 0 is an identical match.\n+/// meaningful than a typical edit distance. The lower the score, the closer the match. 0 is an\n+/// identical match.\n ///\n-/// Uses the Levenshtein distance between the two strings and removes the cost of the length\n-/// difference. If this is 0 then it is either a substring match or a full word match, in the\n-/// substring match case we detect this and return `1`. To prevent finding meaningless substrings,\n-/// eg. \"in\" in \"shrink\", we only perform this subtraction of length difference if one of the words\n-/// is not greater than twice the length of the other. For cases where the words are close in size\n-/// but not an exact substring then the cost of the length difference is discounted by half.\n+/// Uses the edit distance between the two strings and removes the cost of the length difference.\n+/// If this is 0 then it is either a substring match or a full word match, in the substring match\n+/// case we detect this and return `1`. To prevent finding meaningless substrings, eg. \"in\" in\n+/// \"shrink\", we only perform this subtraction of length difference if one of the words is not\n+/// greater than twice the length of the other. For cases where the words are close in size but not\n+/// an exact substring then the cost of the length difference is discounted by half.\n ///\n /// Returns `None` if the distance exceeds the limit.\n-pub fn lev_distance_with_substrings(a: &str, b: &str, limit: usize) -> Option<usize> {\n+pub fn edit_distance_with_substrings(a: &str, b: &str, limit: usize) -> Option<usize> {\n     let n = a.chars().count();\n     let m = b.chars().count();\n \n     // Check one isn't less than half the length of the other. If this is true then there is a\n     // big difference in length.\n     let big_len_diff = (n * 2) < m || (m * 2) < n;\n     let len_diff = if n < m { m - n } else { n - m };\n-    let lev = lev_distance(a, b, limit + len_diff)?;\n+    let distance = edit_distance(a, b, limit + len_diff)?;\n \n     // This is the crux, subtracting length difference means exact substring matches will now be 0\n-    let score = lev - len_diff;\n+    let score = distance - len_diff;\n \n     // If the score is 0 but the words have different lengths then it's a substring match not a full\n     // word match\n@@ -136,12 +140,12 @@ pub fn lev_distance_with_substrings(a: &str, b: &str, limit: usize) -> Option<us\n \n /// Finds the best match for given word in the given iterator where substrings are meaningful.\n ///\n-/// A version of [`find_best_match_for_name`] that uses [`lev_distance_with_substrings`] as the score\n-/// for word similarity. This takes an optional distance limit which defaults to one-third of the\n-/// given word.\n+/// A version of [`find_best_match_for_name`] that uses [`edit_distance_with_substrings`] as the\n+/// score for word similarity. This takes an optional distance limit which defaults to one-third of\n+/// the given word.\n ///\n-/// Besides the modified Levenshtein, we use case insensitive comparison to improve accuracy\n-/// on an edge case with a lower(upper)case letters mismatch.\n+/// We use case insensitive comparison to improve accuracy on an edge case with a lower(upper)case\n+/// letters mismatch.\n pub fn find_best_match_for_name_with_substrings(\n     candidates: &[Symbol],\n     lookup: Symbol,\n@@ -156,8 +160,8 @@ pub fn find_best_match_for_name_with_substrings(\n /// an optional limit for the maximum allowable edit distance, which defaults\n /// to one-third of the given word.\n ///\n-/// Besides Levenshtein, we use case insensitive comparison to improve accuracy\n-/// on an edge case with a lower(upper)case letters mismatch.\n+/// We use case insensitive comparison to improve accuracy on an edge case with a lower(upper)case\n+/// letters mismatch.\n pub fn find_best_match_for_name(\n     candidates: &[Symbol],\n     lookup: Symbol,\n@@ -178,7 +182,7 @@ fn find_best_match_for_name_impl(\n \n     // Priority of matches:\n     // 1. Exact case insensitive match\n-    // 2. Levenshtein distance match\n+    // 2. Edit distance match\n     // 3. Sorted word match\n     if let Some(c) = candidates.iter().find(|c| c.as_str().to_uppercase() == lookup_uppercase) {\n         return Some(*c);\n@@ -188,9 +192,9 @@ fn find_best_match_for_name_impl(\n     let mut best = None;\n     for c in candidates {\n         match if use_substring_score {\n-            lev_distance_with_substrings(lookup, c.as_str(), dist)\n+            edit_distance_with_substrings(lookup, c.as_str(), dist)\n         } else {\n-            lev_distance(lookup, c.as_str(), dist)\n+            edit_distance(lookup, c.as_str(), dist)\n         } {\n             Some(0) => return Some(*c),\n             Some(d) => {", "previous_filename": "compiler/rustc_span/src/lev_distance.rs"}, {"sha": "4b2373eb926901ed4ede3600151a0f20eae649ab", "filename": "compiler/rustc_span/src/edit_distance/tests.rs", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_span%2Fsrc%2Fedit_distance%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_span%2Fsrc%2Fedit_distance%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedit_distance%2Ftests.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -1,40 +1,40 @@\n use super::*;\n \n #[test]\n-fn test_lev_distance() {\n+fn test_edit_distance() {\n     // Test bytelength agnosticity\n     for c in (0..char::MAX as u32).filter_map(char::from_u32).map(|i| i.to_string()) {\n-        assert_eq!(lev_distance(&c[..], &c[..], usize::MAX), Some(0));\n+        assert_eq!(edit_distance(&c[..], &c[..], usize::MAX), Some(0));\n     }\n \n     let a = \"\\nM\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\\n\\nLittle l\u00e4mb\\n\";\n     let b = \"\\nMary h\u00e4d \u00e4 little l\u00e4mb\\n\\nLittle l\u00e4mb\\n\";\n     let c = \"Mary h\u00e4d \u00e4 little l\u00e4mb\\n\\nLittle l\u00e4mb\\n\";\n-    assert_eq!(lev_distance(a, b, usize::MAX), Some(1));\n-    assert_eq!(lev_distance(b, a, usize::MAX), Some(1));\n-    assert_eq!(lev_distance(a, c, usize::MAX), Some(2));\n-    assert_eq!(lev_distance(c, a, usize::MAX), Some(2));\n-    assert_eq!(lev_distance(b, c, usize::MAX), Some(1));\n-    assert_eq!(lev_distance(c, b, usize::MAX), Some(1));\n+    assert_eq!(edit_distance(a, b, usize::MAX), Some(1));\n+    assert_eq!(edit_distance(b, a, usize::MAX), Some(1));\n+    assert_eq!(edit_distance(a, c, usize::MAX), Some(2));\n+    assert_eq!(edit_distance(c, a, usize::MAX), Some(2));\n+    assert_eq!(edit_distance(b, c, usize::MAX), Some(1));\n+    assert_eq!(edit_distance(c, b, usize::MAX), Some(1));\n }\n \n #[test]\n-fn test_lev_distance_limit() {\n-    assert_eq!(lev_distance(\"abc\", \"abcd\", 1), Some(1));\n-    assert_eq!(lev_distance(\"abc\", \"abcd\", 0), None);\n-    assert_eq!(lev_distance(\"abc\", \"xyz\", 3), Some(3));\n-    assert_eq!(lev_distance(\"abc\", \"xyz\", 2), None);\n+fn test_edit_distance_limit() {\n+    assert_eq!(edit_distance(\"abc\", \"abcd\", 1), Some(1));\n+    assert_eq!(edit_distance(\"abc\", \"abcd\", 0), None);\n+    assert_eq!(edit_distance(\"abc\", \"xyz\", 3), Some(3));\n+    assert_eq!(edit_distance(\"abc\", \"xyz\", 2), None);\n }\n \n #[test]\n fn test_method_name_similarity_score() {\n-    assert_eq!(lev_distance_with_substrings(\"empty\", \"is_empty\", 1), Some(1));\n-    assert_eq!(lev_distance_with_substrings(\"shrunk\", \"rchunks\", 2), None);\n-    assert_eq!(lev_distance_with_substrings(\"abc\", \"abcd\", 1), Some(1));\n-    assert_eq!(lev_distance_with_substrings(\"a\", \"abcd\", 1), None);\n-    assert_eq!(lev_distance_with_substrings(\"edf\", \"eq\", 1), None);\n-    assert_eq!(lev_distance_with_substrings(\"abc\", \"xyz\", 3), Some(3));\n-    assert_eq!(lev_distance_with_substrings(\"abcdef\", \"abcdef\", 2), Some(0));\n+    assert_eq!(edit_distance_with_substrings(\"empty\", \"is_empty\", 1), Some(1));\n+    assert_eq!(edit_distance_with_substrings(\"shrunk\", \"rchunks\", 2), None);\n+    assert_eq!(edit_distance_with_substrings(\"abc\", \"abcd\", 1), Some(1));\n+    assert_eq!(edit_distance_with_substrings(\"a\", \"abcd\", 1), None);\n+    assert_eq!(edit_distance_with_substrings(\"edf\", \"eq\", 1), None);\n+    assert_eq!(edit_distance_with_substrings(\"abc\", \"xyz\", 3), Some(3));\n+    assert_eq!(edit_distance_with_substrings(\"abcdef\", \"abcdef\", 2), Some(0));\n }\n \n #[test]", "previous_filename": "compiler/rustc_span/src/lev_distance/tests.rs"}, {"sha": "e112100aa5fcdb05fcb8e48f7a0c8a17c3f08ef2", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378c4ab9ab1f75c4375425077c46cceb556fbc86/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=378c4ab9ab1f75c4375425077c46cceb556fbc86", "patch": "@@ -47,7 +47,7 @@ pub use hygiene::{ExpnData, ExpnHash, ExpnId, LocalExpnId, SyntaxContext};\n use rustc_data_structures::stable_hasher::HashingControls;\n pub mod def_id;\n use def_id::{CrateNum, DefId, DefPathHash, LocalDefId, LOCAL_CRATE};\n-pub mod lev_distance;\n+pub mod edit_distance;\n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n "}]}