{"sha": "82b2d8e41893629ff65505fc0d4767f1db73b180", "node_id": "C_kwDOAAsO6NoAKDgyYjJkOGU0MTg5MzYyOWZmNjU1MDVmYzBkNDc2N2YxZGI3M2IxODA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-01T14:54:37Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-01T19:00:32Z"}, "message": "Introduce Dirs type to avoid hard coding src and dest locations", "tree": {"sha": "6a347c68c350f250cf036dcc550e34507e905c5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a347c68c350f250cf036dcc550e34507e905c5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82b2d8e41893629ff65505fc0d4767f1db73b180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82b2d8e41893629ff65505fc0d4767f1db73b180", "html_url": "https://github.com/rust-lang/rust/commit/82b2d8e41893629ff65505fc0d4767f1db73b180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82b2d8e41893629ff65505fc0d4767f1db73b180/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4529979330038c6accce45533f34aae681a6017c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4529979330038c6accce45533f34aae681a6017c", "html_url": "https://github.com/rust-lang/rust/commit/4529979330038c6accce45533f34aae681a6017c"}], "stats": {"total": 365, "additions": 207, "deletions": 158}, "files": [{"sha": "a081fdaa1c7e6475a727f764c033f07090b2b87e", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=82b2d8e41893629ff65505fc0d4767f1db73b180", "patch": "@@ -2,6 +2,7 @@ use std::path::Path;\n \n use super::build_sysroot;\n use super::config;\n+use super::path::Dirs;\n use super::prepare::GitRepo;\n use super::utils::{spawn_and_wait, CargoProject, Compiler};\n use super::SysrootKind;\n@@ -14,6 +15,7 @@ static ABI_CAFE: CargoProject = CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"\n pub(crate) fn run(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n+    dirs: &Dirs,\n     cg_clif_dylib: &Path,\n     host_triple: &str,\n     target_triple: &str,\n@@ -29,19 +31,26 @@ pub(crate) fn run(\n     }\n \n     eprintln!(\"Building sysroot for abi-cafe\");\n-    build_sysroot::build_sysroot(channel, sysroot_kind, cg_clif_dylib, host_triple, target_triple);\n+    build_sysroot::build_sysroot(\n+        dirs,\n+        channel,\n+        sysroot_kind,\n+        cg_clif_dylib,\n+        host_triple,\n+        target_triple,\n+    );\n \n     eprintln!(\"Running abi-cafe\");\n \n     let pairs = [\"rustc_calls_cgclif\", \"cgclif_calls_rustc\", \"cgclif_calls_cc\", \"cc_calls_cgclif\"];\n \n-    let mut cmd = ABI_CAFE.run(&Compiler::host());\n+    let mut cmd = ABI_CAFE.run(&Compiler::host(), dirs);\n     cmd.arg(\"--\");\n     cmd.arg(\"--pairs\");\n     cmd.args(pairs);\n     cmd.arg(\"--add-rustc-codegen-backend\");\n     cmd.arg(format!(\"cgclif:{}\", cg_clif_dylib.display()));\n-    cmd.current_dir(ABI_CAFE.source_dir());\n+    cmd.current_dir(ABI_CAFE.source_dir(dirs));\n \n     spawn_and_wait(cmd);\n }"}, {"sha": "fde8ef424ccc5441e0198ef7b33b23c39dbe37bc", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=82b2d8e41893629ff65505fc0d4767f1db73b180", "patch": "@@ -1,18 +1,19 @@\n use std::env;\n use std::path::PathBuf;\n \n-use super::path::RelPath;\n+use super::path::{Dirs, RelPath};\n use super::rustc_info::get_file_name;\n use super::utils::{is_ci, CargoProject, Compiler};\n \n static CG_CLIF: CargoProject = CargoProject::new(&RelPath::SOURCE, \"cg_clif\");\n \n pub(crate) fn build_backend(\n+    dirs: &Dirs,\n     channel: &str,\n     host_triple: &str,\n     use_unstable_features: bool,\n ) -> PathBuf {\n-    let mut cmd = CG_CLIF.build(&Compiler::host());\n+    let mut cmd = CG_CLIF.build(&Compiler::host(), dirs);\n \n     cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"true\"); // Force incr comp even in release mode\n \n@@ -44,7 +45,7 @@ pub(crate) fn build_backend(\n     super::utils::spawn_and_wait(cmd);\n \n     CG_CLIF\n-        .target_dir()\n+        .target_dir(dirs)\n         .join(host_triple)\n         .join(channel)\n         .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"))"}, {"sha": "35c972e6b383a806def6302496998d0c19161609", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=82b2d8e41893629ff65505fc0d4767f1db73b180", "patch": "@@ -2,7 +2,7 @@ use std::fs;\n use std::path::Path;\n use std::process::{self, Command};\n \n-use super::path::RelPath;\n+use super::path::{Dirs, RelPath};\n use super::rustc_info::{get_file_name, get_rustc_version, get_wrapper_file_name};\n use super::utils::{spawn_and_wait, try_hard_link, CargoProject, Compiler};\n use super::SysrootKind;\n@@ -13,6 +13,7 @@ static LIB_DIR: RelPath = RelPath::DIST.join(\"lib\");\n static RUSTLIB_DIR: RelPath = LIB_DIR.join(\"rustlib\");\n \n pub(crate) fn build_sysroot(\n+    dirs: &Dirs,\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib_src: &Path,\n@@ -21,9 +22,9 @@ pub(crate) fn build_sysroot(\n ) {\n     eprintln!(\"[BUILD] sysroot {:?}\", sysroot_kind);\n \n-    DIST_DIR.ensure_fresh();\n-    BIN_DIR.ensure_exists();\n-    LIB_DIR.ensure_exists();\n+    DIST_DIR.ensure_fresh(dirs);\n+    BIN_DIR.ensure_exists(dirs);\n+    LIB_DIR.ensure_exists(dirs);\n \n     // Copy the backend\n     let cg_clif_dylib_path = if cfg!(windows) {\n@@ -33,7 +34,7 @@ pub(crate) fn build_sysroot(\n     } else {\n         LIB_DIR\n     }\n-    .to_path()\n+    .to_path(dirs)\n     .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"));\n     try_hard_link(cg_clif_dylib_src, &cg_clif_dylib_path);\n \n@@ -43,17 +44,17 @@ pub(crate) fn build_sysroot(\n \n         let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n         build_cargo_wrapper_cmd\n-            .arg(RelPath::SCRIPTS.to_path().join(&format!(\"{wrapper}.rs\")))\n+            .arg(RelPath::SCRIPTS.to_path(dirs).join(&format!(\"{wrapper}.rs\")))\n             .arg(\"-o\")\n-            .arg(DIST_DIR.to_path().join(wrapper_name))\n+            .arg(DIST_DIR.to_path(dirs).join(wrapper_name))\n             .arg(\"-g\");\n         spawn_and_wait(build_cargo_wrapper_cmd);\n     }\n \n     let default_sysroot = super::rustc_info::get_default_sysroot();\n \n-    let host_rustlib_lib = RUSTLIB_DIR.to_path().join(host_triple).join(\"lib\");\n-    let target_rustlib_lib = RUSTLIB_DIR.to_path().join(target_triple).join(\"lib\");\n+    let host_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(host_triple).join(\"lib\");\n+    let target_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(target_triple).join(\"lib\");\n     fs::create_dir_all(&host_rustlib_lib).unwrap();\n     fs::create_dir_all(&target_rustlib_lib).unwrap();\n \n@@ -114,7 +115,7 @@ pub(crate) fn build_sysroot(\n             }\n         }\n         SysrootKind::Clif => {\n-            build_clif_sysroot_for_triple(channel, host_triple, &cg_clif_dylib_path, None);\n+            build_clif_sysroot_for_triple(dirs, channel, host_triple, &cg_clif_dylib_path, None);\n \n             if host_triple != target_triple {\n                 // When cross-compiling it is often necessary to manually pick the right linker\n@@ -123,7 +124,13 @@ pub(crate) fn build_sysroot(\n                 } else {\n                     None\n                 };\n-                build_clif_sysroot_for_triple(channel, target_triple, &cg_clif_dylib_path, linker);\n+                build_clif_sysroot_for_triple(\n+                    dirs,\n+                    channel,\n+                    target_triple,\n+                    &cg_clif_dylib_path,\n+                    linker,\n+                );\n             }\n \n             // Copy std for the host to the lib dir. This is necessary for the jit mode to find\n@@ -132,7 +139,7 @@ pub(crate) fn build_sysroot(\n                 let file = file.unwrap().path();\n                 let filename = file.file_name().unwrap().to_str().unwrap();\n                 if filename.contains(\"std-\") && !filename.contains(\".rlib\") {\n-                    try_hard_link(&file, LIB_DIR.to_path().join(file.file_name().unwrap()));\n+                    try_hard_link(&file, LIB_DIR.to_path(dirs).join(file.file_name().unwrap()));\n                 }\n             }\n         }\n@@ -145,12 +152,13 @@ pub(crate) static SYSROOT_SRC: RelPath = RelPath::BUILD_SYSROOT.join(\"sysroot_sr\n static STANDARD_LIBRARY: CargoProject = CargoProject::new(&RelPath::BUILD_SYSROOT, \"build_sysroot\");\n \n fn build_clif_sysroot_for_triple(\n+    dirs: &Dirs,\n     channel: &str,\n     triple: &str,\n     cg_clif_dylib_path: &Path,\n     linker: Option<&str>,\n ) {\n-    match fs::read_to_string(SYSROOT_RUSTC_VERSION.to_path()) {\n+    match fs::read_to_string(SYSROOT_RUSTC_VERSION.to_path(dirs)) {\n         Err(e) => {\n             eprintln!(\"Failed to get rustc version for patched sysroot source: {}\", e);\n             eprintln!(\"Hint: Try `./y.rs prepare` to patch the sysroot source\");\n@@ -168,7 +176,7 @@ fn build_clif_sysroot_for_triple(\n         }\n     }\n \n-    let build_dir = STANDARD_LIBRARY.target_dir().join(triple).join(channel);\n+    let build_dir = STANDARD_LIBRARY.target_dir(dirs).join(triple).join(channel);\n \n     if !super::config::get_bool(\"keep_sysroot\") {\n         // Cleanup the deps dir, but keep build scripts and the incremental cache for faster\n@@ -181,7 +189,7 @@ fn build_clif_sysroot_for_triple(\n     // Build sysroot\n     let mut rustflags = \"-Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n     rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n-    rustflags.push_str(&format!(\" --sysroot={}\", DIST_DIR.to_path().to_str().unwrap()));\n+    rustflags.push_str(&format!(\" --sysroot={}\", DIST_DIR.to_path(dirs).to_str().unwrap()));\n     if channel == \"release\" {\n         rustflags.push_str(\" -Zmir-opt-level=3\");\n     }\n@@ -191,7 +199,7 @@ fn build_clif_sysroot_for_triple(\n     }\n     let mut compiler = Compiler::with_triple(triple.to_owned());\n     compiler.rustflags = rustflags;\n-    let mut build_cmd = STANDARD_LIBRARY.build(&compiler);\n+    let mut build_cmd = STANDARD_LIBRARY.build(&compiler, dirs);\n     if channel == \"release\" {\n         build_cmd.arg(\"--release\");\n     }\n@@ -210,7 +218,7 @@ fn build_clif_sysroot_for_triple(\n         };\n         try_hard_link(\n             entry.path(),\n-            RUSTLIB_DIR.to_path().join(triple).join(\"lib\").join(entry.file_name()),\n+            RUSTLIB_DIR.to_path(dirs).join(triple).join(\"lib\").join(entry.file_name()),\n         );\n     }\n }"}, {"sha": "b36df96c0b24a8a2485c3063b65ba24b6cb6dc17", "filename": "build_system/mod.rs", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=82b2d8e41893629ff65505fc0d4767f1db73b180", "patch": "@@ -1,5 +1,4 @@\n use std::env;\n-use std::path::PathBuf;\n use std::process;\n \n use self::utils::is_ci;\n@@ -17,12 +16,8 @@ mod utils;\n fn usage() {\n     eprintln!(\"Usage:\");\n     eprintln!(\"  ./y.rs prepare\");\n-    eprintln!(\n-        \"  ./y.rs build [--debug] [--sysroot none|clif|llvm] [--dist-dir DIR] [--no-unstable-features]\"\n-    );\n-    eprintln!(\n-        \"  ./y.rs test [--debug] [--sysroot none|clif|llvm] [--dist-dir DIR] [--no-unstable-features]\"\n-    );\n+    eprintln!(\"  ./y.rs build [--debug] [--sysroot none|clif|llvm] [--no-unstable-features]\");\n+    eprintln!(\"  ./y.rs test [--debug] [--sysroot none|clif|llvm] [--no-unstable-features]\");\n }\n \n macro_rules! arg_error {\n@@ -50,13 +45,22 @@ pub fn main() {\n     env::set_var(\"CG_CLIF_DISPLAY_CG_TIME\", \"1\");\n     env::set_var(\"CG_CLIF_DISABLE_INCR_CACHE\", \"1\");\n \n-    std::fs::create_dir_all(\"build\").unwrap();\n+    let current_dir = std::env::current_dir().unwrap();\n+    let dirs = path::Dirs {\n+        source_dir: current_dir.clone(),\n+        download_dir: current_dir.join(\"download\"),\n+        build_dir: current_dir.join(\"build\"),\n+        dist_dir: current_dir.join(\"dist\"),\n+    };\n+\n+    path::RelPath::BUILD.ensure_exists(&dirs);\n \n     {\n         // Make sure we always explicitly specify the target dir\n-        let target = \"build/target_dir_should_be_set_explicitly\";\n-        env::set_var(\"CARGO_TARGET_DIR\", target);\n-        let _ = std::fs::remove_file(target);\n+        let target =\n+            path::RelPath::BUILD.join(\"target_dir_should_be_set_explicitly\").to_path(&dirs);\n+        env::set_var(\"CARGO_TARGET_DIR\", &target);\n+        let _ = std::fs::remove_file(&target);\n         std::fs::File::create(target).unwrap();\n     }\n \n@@ -71,7 +75,7 @@ pub fn main() {\n             if args.next().is_some() {\n                 arg_error!(\"./y.rs prepare doesn't expect arguments\");\n             }\n-            prepare::prepare();\n+            prepare::prepare(&dirs);\n             process::exit(0);\n         }\n         Some(\"build\") => Command::Build,\n@@ -84,17 +88,11 @@ pub fn main() {\n         }\n     };\n \n-    let mut dist_dir = PathBuf::from(\"dist\");\n     let mut channel = \"release\";\n     let mut sysroot_kind = SysrootKind::Clif;\n     let mut use_unstable_features = true;\n     while let Some(arg) = args.next().as_deref() {\n         match arg {\n-            \"--dist-dir\" => {\n-                dist_dir = PathBuf::from(args.next().unwrap_or_else(|| {\n-                    arg_error!(\"--dist-dir requires argument\");\n-                }))\n-            }\n             \"--debug\" => channel = \"debug\",\n             \"--sysroot\" => {\n                 sysroot_kind = match args.next().as_deref() {\n@@ -110,7 +108,6 @@ pub fn main() {\n             arg => arg_error!(\"Unexpected argument {}\", arg),\n         }\n     }\n-    dist_dir = std::env::current_dir().unwrap().join(dist_dir);\n \n     let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n         host_triple\n@@ -131,15 +128,31 @@ pub fn main() {\n         host_triple.clone()\n     };\n \n-    let cg_clif_dylib = build_backend::build_backend(channel, &host_triple, use_unstable_features);\n+    let cg_clif_dylib =\n+        build_backend::build_backend(&dirs, channel, &host_triple, use_unstable_features);\n     match command {\n         Command::Test => {\n-            tests::run_tests(channel, sysroot_kind, &cg_clif_dylib, &host_triple, &target_triple);\n+            tests::run_tests(\n+                &dirs,\n+                channel,\n+                sysroot_kind,\n+                &cg_clif_dylib,\n+                &host_triple,\n+                &target_triple,\n+            );\n \n-            abi_cafe::run(channel, sysroot_kind, &cg_clif_dylib, &host_triple, &target_triple);\n+            abi_cafe::run(\n+                channel,\n+                sysroot_kind,\n+                &dirs,\n+                &cg_clif_dylib,\n+                &host_triple,\n+                &target_triple,\n+            );\n         }\n         Command::Build => {\n             build_sysroot::build_sysroot(\n+                &dirs,\n                 channel,\n                 sysroot_kind,\n                 &cg_clif_dylib,"}, {"sha": "e93981f1d64d369b28672c0e61ff5a533c271a23", "filename": "build_system/path.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fpath.rs?ref=82b2d8e41893629ff65505fc0d4767f1db73b180", "patch": "@@ -1,12 +1,13 @@\n use std::fs;\n use std::path::PathBuf;\n \n-/*pub(crate) struct Paths {\n-    source_dir: PathBuf,\n-    download_dir: PathBuf,\n-    build_dir: PathBuf,\n-    dist_dir: PathBuf,\n-}*/\n+#[derive(Debug, Clone)]\n+pub(crate) struct Dirs {\n+    pub(crate) source_dir: PathBuf,\n+    pub(crate) download_dir: PathBuf,\n+    pub(crate) build_dir: PathBuf,\n+    pub(crate) dist_dir: PathBuf,\n+}\n \n #[doc(hidden)]\n #[derive(Debug, Copy, Clone)]\n@@ -18,14 +19,12 @@ pub(crate) enum PathBase {\n }\n \n impl PathBase {\n-    fn to_path(self) -> PathBuf {\n-        // FIXME pass in all paths instead\n-        let current_dir = std::env::current_dir().unwrap();\n+    fn to_path(self, dirs: &Dirs) -> PathBuf {\n         match self {\n-            PathBase::Source => current_dir,\n-            PathBase::Download => current_dir.join(\"download\"),\n-            PathBase::Build => current_dir.join(\"build\"),\n-            PathBase::Dist => current_dir.join(\"dist\"),\n+            PathBase::Source => dirs.source_dir.clone(),\n+            PathBase::Download => dirs.download_dir.clone(),\n+            PathBase::Build => dirs.build_dir.clone(),\n+            PathBase::Dist => dirs.dist_dir.clone(),\n         }\n     }\n }\n@@ -50,19 +49,19 @@ impl RelPath {\n         RelPath::Join(self, suffix)\n     }\n \n-    pub(crate) fn to_path(&self) -> PathBuf {\n+    pub(crate) fn to_path(&self, dirs: &Dirs) -> PathBuf {\n         match self {\n-            RelPath::Base(base) => base.to_path(),\n-            RelPath::Join(base, suffix) => base.to_path().join(suffix),\n+            RelPath::Base(base) => base.to_path(dirs),\n+            RelPath::Join(base, suffix) => base.to_path(dirs).join(suffix),\n         }\n     }\n \n-    pub(crate) fn ensure_exists(&self) {\n-        fs::create_dir_all(self.to_path()).unwrap();\n+    pub(crate) fn ensure_exists(&self, dirs: &Dirs) {\n+        fs::create_dir_all(self.to_path(dirs)).unwrap();\n     }\n \n-    pub(crate) fn ensure_fresh(&self) {\n-        let path = self.to_path();\n+    pub(crate) fn ensure_fresh(&self, dirs: &Dirs) {\n+        let path = self.to_path(dirs);\n         if path.exists() {\n             fs::remove_dir_all(&path).unwrap();\n         }"}, {"sha": "0eaa8e820baea45819921f806af89d8523b2e916", "filename": "build_system/prepare.rs", "status": "modified", "additions": 42, "deletions": 33, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=82b2d8e41893629ff65505fc0d4767f1db73b180", "patch": "@@ -4,66 +4,69 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n \n use super::build_sysroot::{SYSROOT_RUSTC_VERSION, SYSROOT_SRC};\n-use super::path::RelPath;\n+use super::path::{Dirs, RelPath};\n use super::rustc_info::{get_file_name, get_rustc_path, get_rustc_version};\n use super::utils::{copy_dir_recursively, spawn_and_wait, Compiler};\n \n-pub(crate) fn prepare() {\n-    if RelPath::DOWNLOAD.to_path().exists() {\n-        std::fs::remove_dir_all(RelPath::DOWNLOAD.to_path()).unwrap();\n+pub(crate) fn prepare(dirs: &Dirs) {\n+    if RelPath::DOWNLOAD.to_path(dirs).exists() {\n+        std::fs::remove_dir_all(RelPath::DOWNLOAD.to_path(dirs)).unwrap();\n     }\n-    std::fs::create_dir_all(RelPath::DOWNLOAD.to_path()).unwrap();\n+    std::fs::create_dir_all(RelPath::DOWNLOAD.to_path(dirs)).unwrap();\n \n-    prepare_sysroot();\n+    prepare_sysroot(dirs);\n \n     // FIXME maybe install this only locally?\n     eprintln!(\"[INSTALL] hyperfine\");\n     Command::new(\"cargo\").arg(\"install\").arg(\"hyperfine\").spawn().unwrap().wait().unwrap();\n \n-    super::abi_cafe::ABI_CAFE_REPO.fetch();\n-    super::tests::RAND_REPO.fetch();\n-    super::tests::REGEX_REPO.fetch();\n-    super::tests::PORTABLE_SIMD_REPO.fetch();\n-    super::tests::SIMPLE_RAYTRACER_REPO.fetch();\n+    super::abi_cafe::ABI_CAFE_REPO.fetch(dirs);\n+    super::tests::RAND_REPO.fetch(dirs);\n+    super::tests::REGEX_REPO.fetch(dirs);\n+    super::tests::PORTABLE_SIMD_REPO.fetch(dirs);\n+    super::tests::SIMPLE_RAYTRACER_REPO.fetch(dirs);\n \n     eprintln!(\"[LLVM BUILD] simple-raytracer\");\n     let host_compiler = Compiler::host();\n-    let build_cmd = super::tests::SIMPLE_RAYTRACER.build(&host_compiler);\n+    let build_cmd = super::tests::SIMPLE_RAYTRACER.build(&host_compiler, dirs);\n     spawn_and_wait(build_cmd);\n     fs::copy(\n         super::tests::SIMPLE_RAYTRACER\n-            .target_dir()\n+            .target_dir(dirs)\n             .join(&host_compiler.triple)\n             .join(\"debug\")\n             .join(get_file_name(\"main\", \"bin\")),\n-        RelPath::BUILD.to_path().join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n+        RelPath::BUILD.to_path(dirs).join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n     )\n     .unwrap();\n }\n \n-fn prepare_sysroot() {\n+fn prepare_sysroot(dirs: &Dirs) {\n     let rustc_path = get_rustc_path();\n     let sysroot_src_orig = rustc_path.parent().unwrap().join(\"../lib/rustlib/src/rust\");\n     let sysroot_src = SYSROOT_SRC;\n \n     assert!(sysroot_src_orig.exists());\n \n-    sysroot_src.ensure_fresh();\n-    fs::create_dir_all(sysroot_src.to_path().join(\"library\")).unwrap();\n+    sysroot_src.ensure_fresh(dirs);\n+    fs::create_dir_all(sysroot_src.to_path(dirs).join(\"library\")).unwrap();\n     eprintln!(\"[COPY] sysroot src\");\n-    copy_dir_recursively(&sysroot_src_orig.join(\"library\"), &sysroot_src.to_path().join(\"library\"));\n+    copy_dir_recursively(\n+        &sysroot_src_orig.join(\"library\"),\n+        &sysroot_src.to_path(dirs).join(\"library\"),\n+    );\n \n     let rustc_version = get_rustc_version();\n-    fs::write(SYSROOT_RUSTC_VERSION.to_path(), &rustc_version).unwrap();\n+    fs::write(SYSROOT_RUSTC_VERSION.to_path(dirs), &rustc_version).unwrap();\n \n     eprintln!(\"[GIT] init\");\n     let mut git_init_cmd = Command::new(\"git\");\n-    git_init_cmd.arg(\"init\").arg(\"-q\").current_dir(sysroot_src.to_path());\n+    git_init_cmd.arg(\"init\").arg(\"-q\").current_dir(sysroot_src.to_path(dirs));\n     spawn_and_wait(git_init_cmd);\n \n-    init_git_repo(&sysroot_src.to_path());\n+    init_git_repo(&sysroot_src.to_path(dirs));\n \n-    apply_patches(\"sysroot\", &sysroot_src.to_path());\n+    apply_patches(dirs, \"sysroot\", &sysroot_src.to_path(dirs));\n }\n \n pub(crate) struct GitRepo {\n@@ -92,13 +95,19 @@ impl GitRepo {\n         }\n     }\n \n-    fn fetch(&self) {\n+    fn fetch(&self, dirs: &Dirs) {\n         match self.url {\n             GitRepoUrl::Github { user, repo } => {\n-                clone_repo_shallow_github(&self.source_dir().to_path(), user, repo, self.rev);\n+                clone_repo_shallow_github(\n+                    dirs,\n+                    &self.source_dir().to_path(dirs),\n+                    user,\n+                    repo,\n+                    self.rev,\n+                );\n             }\n         }\n-        apply_patches(self.patch_name, &self.source_dir().to_path());\n+        apply_patches(dirs, self.patch_name, &self.source_dir().to_path(dirs));\n     }\n }\n \n@@ -117,16 +126,16 @@ fn clone_repo(download_dir: &Path, repo: &str, rev: &str) {\n     spawn_and_wait(checkout_cmd);\n }\n \n-fn clone_repo_shallow_github(download_dir: &Path, user: &str, repo: &str, rev: &str) {\n+fn clone_repo_shallow_github(dirs: &Dirs, download_dir: &Path, user: &str, repo: &str, rev: &str) {\n     if cfg!(windows) {\n         // Older windows doesn't have tar or curl by default. Fall back to using git.\n         clone_repo(download_dir, &format!(\"https://github.com/{}/{}.git\", user, repo), rev);\n         return;\n     }\n \n     let archive_url = format!(\"https://github.com/{}/{}/archive/{}.tar.gz\", user, repo, rev);\n-    let archive_file = RelPath::DOWNLOAD.to_path().join(format!(\"{}.tar.gz\", rev));\n-    let archive_dir = RelPath::DOWNLOAD.to_path().join(format!(\"{}-{}\", repo, rev));\n+    let archive_file = RelPath::DOWNLOAD.to_path(dirs).join(format!(\"{}.tar.gz\", rev));\n+    let archive_dir = RelPath::DOWNLOAD.to_path(dirs).join(format!(\"{}-{}\", repo, rev));\n \n     eprintln!(\"[DOWNLOAD] {}/{} from {}\", user, repo, archive_url);\n \n@@ -142,7 +151,7 @@ fn clone_repo_shallow_github(download_dir: &Path, user: &str, repo: &str, rev: &\n \n     // Unpack tar archive\n     let mut unpack_cmd = Command::new(\"tar\");\n-    unpack_cmd.arg(\"xf\").arg(&archive_file).current_dir(RelPath::DOWNLOAD.to_path());\n+    unpack_cmd.arg(\"xf\").arg(&archive_file).current_dir(RelPath::DOWNLOAD.to_path(dirs));\n     spawn_and_wait(unpack_cmd);\n \n     // Rename unpacked dir to the expected name\n@@ -168,8 +177,8 @@ fn init_git_repo(repo_dir: &Path) {\n     spawn_and_wait(git_commit_cmd);\n }\n \n-fn get_patches(crate_name: &str) -> Vec<PathBuf> {\n-    let mut patches: Vec<_> = fs::read_dir(RelPath::PATCHES.to_path())\n+fn get_patches(dirs: &Dirs, crate_name: &str) -> Vec<PathBuf> {\n+    let mut patches: Vec<_> = fs::read_dir(RelPath::PATCHES.to_path(dirs))\n         .unwrap()\n         .map(|entry| entry.unwrap().path())\n         .filter(|path| path.extension() == Some(OsStr::new(\"patch\")))\n@@ -188,12 +197,12 @@ fn get_patches(crate_name: &str) -> Vec<PathBuf> {\n     patches\n }\n \n-fn apply_patches(crate_name: &str, target_dir: &Path) {\n+fn apply_patches(dirs: &Dirs, crate_name: &str, target_dir: &Path) {\n     if crate_name == \"<none>\" {\n         return;\n     }\n \n-    for patch in get_patches(crate_name) {\n+    for patch in get_patches(dirs, crate_name) {\n         eprintln!(\n             \"[PATCH] {:?} <- {:?}\",\n             target_dir.file_name().unwrap(),"}, {"sha": "bd31d5e6bbf28c7ed6a62d08fe7c384235156c73", "filename": "build_system/tests.rs", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=82b2d8e41893629ff65505fc0d4767f1db73b180", "patch": "@@ -1,6 +1,6 @@\n use super::build_sysroot;\n use super::config;\n-use super::path::RelPath;\n+use super::path::{Dirs, RelPath};\n use super::prepare::GitRepo;\n use super::rustc_info::{get_cargo_path, get_wrapper_file_name};\n use super::utils::{\n@@ -256,16 +256,16 @@ static LIBCORE_TESTS: CargoProject =\n \n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::new(\"test.rust-random/rand\", &|runner| {\n-        spawn_and_wait(RAND.clean(&runner.target_compiler.cargo));\n+        spawn_and_wait(RAND.clean(&runner.target_compiler.cargo, &runner.dirs));\n \n         if runner.is_native {\n             eprintln!(\"[TEST] rust-random/rand\");\n-            let mut test_cmd = RAND.test(&runner.target_compiler);\n+            let mut test_cmd = RAND.test(&runner.target_compiler, &runner.dirs);\n             test_cmd.arg(\"--workspace\");\n             spawn_and_wait(test_cmd);\n         } else {\n             eprintln!(\"[AOT] rust-random/rand\");\n-            let mut build_cmd = RAND.build(&runner.target_compiler);\n+            let mut build_cmd = RAND.build(&runner.target_compiler, &runner.dirs);\n             build_cmd.arg(\"--workspace\").arg(\"--tests\");\n             spawn_and_wait(build_cmd);\n         }\n@@ -275,10 +275,11 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n \n         if runner.is_native {\n             eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n-            let cargo_clif =\n-                RelPath::DIST.to_path().join(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n-            let manifest_path = SIMPLE_RAYTRACER.manifest_path();\n-            let target_dir = SIMPLE_RAYTRACER.target_dir();\n+            let cargo_clif = RelPath::DIST\n+                .to_path(&runner.dirs)\n+                .join(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n+            let manifest_path = SIMPLE_RAYTRACER.manifest_path(&runner.dirs);\n+            let target_dir = SIMPLE_RAYTRACER.target_dir(&runner.dirs);\n \n             let clean_cmd = format!(\n                 \"cargo clean --manifest-path {manifest_path} --target-dir {target_dir}\",\n@@ -305,54 +306,56 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             eprintln!(\"[BENCH RUN] ebobby/simple-raytracer\");\n             fs::copy(\n                 target_dir.join(\"debug\").join(\"main\"),\n-                RelPath::BUILD.to_path().join(\"raytracer_cg_clif\"),\n+                RelPath::BUILD.to_path(&runner.dirs).join(\"raytracer_cg_clif\"),\n             )\n             .unwrap();\n \n             let mut bench_run =\n                 hyperfine_command(0, run_runs, None, \"./raytracer_cg_llvm\", \"./raytracer_cg_clif\");\n-            bench_run.current_dir(RelPath::BUILD.to_path());\n+            bench_run.current_dir(RelPath::BUILD.to_path(&runner.dirs));\n             spawn_and_wait(bench_run);\n         } else {\n-            spawn_and_wait(SIMPLE_RAYTRACER.clean(&runner.target_compiler.cargo));\n+            spawn_and_wait(SIMPLE_RAYTRACER.clean(&runner.target_compiler.cargo, &runner.dirs));\n             eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\");\n             eprintln!(\"[COMPILE] ebobby/simple-raytracer\");\n-            spawn_and_wait(SIMPLE_RAYTRACER.build(&runner.target_compiler));\n+            spawn_and_wait(SIMPLE_RAYTRACER.build(&runner.target_compiler, &runner.dirs));\n             eprintln!(\"[BENCH RUN] ebobby/simple-raytracer (skipped)\");\n         }\n     }),\n     TestCase::new(\"test.libcore\", &|runner| {\n-        spawn_and_wait(LIBCORE_TESTS.clean(&runner.host_compiler.cargo));\n+        spawn_and_wait(LIBCORE_TESTS.clean(&runner.host_compiler.cargo, &runner.dirs));\n \n         if runner.is_native {\n-            spawn_and_wait(LIBCORE_TESTS.test(&runner.target_compiler));\n+            spawn_and_wait(LIBCORE_TESTS.test(&runner.target_compiler, &runner.dirs));\n         } else {\n             eprintln!(\"Cross-Compiling: Not running tests\");\n-            let mut build_cmd = LIBCORE_TESTS.build(&runner.target_compiler);\n+            let mut build_cmd = LIBCORE_TESTS.build(&runner.target_compiler, &runner.dirs);\n             build_cmd.arg(\"--tests\");\n             spawn_and_wait(build_cmd);\n         }\n     }),\n     TestCase::new(\"test.regex-shootout-regex-dna\", &|runner| {\n-        spawn_and_wait(REGEX.clean(&runner.target_compiler.cargo));\n+        spawn_and_wait(REGEX.clean(&runner.target_compiler.cargo, &runner.dirs));\n \n         // newer aho_corasick versions throw a deprecation warning\n         let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.target_compiler.rustflags);\n \n-        let mut build_cmd = REGEX.build(&runner.target_compiler);\n+        let mut build_cmd = REGEX.build(&runner.target_compiler, &runner.dirs);\n         build_cmd.arg(\"--example\").arg(\"shootout-regex-dna\");\n         build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.clone());\n         spawn_and_wait(build_cmd);\n \n         if runner.is_native {\n-            let mut run_cmd = REGEX.run(&runner.target_compiler);\n+            let mut run_cmd = REGEX.run(&runner.target_compiler, &runner.dirs);\n             run_cmd.arg(\"--example\").arg(\"shootout-regex-dna\");\n             run_cmd.env(\"RUSTFLAGS\", lint_rust_flags);\n \n-            let input =\n-                fs::read_to_string(REGEX.source_dir().join(\"examples\").join(\"regexdna-input.txt\"))\n-                    .unwrap();\n-            let expected_path = REGEX.source_dir().join(\"examples\").join(\"regexdna-output.txt\");\n+            let input = fs::read_to_string(\n+                REGEX.source_dir(&runner.dirs).join(\"examples\").join(\"regexdna-input.txt\"),\n+            )\n+            .unwrap();\n+            let expected_path =\n+                REGEX.source_dir(&runner.dirs).join(\"examples\").join(\"regexdna-output.txt\");\n             let expected = fs::read_to_string(&expected_path).unwrap();\n \n             let output = spawn_and_wait_with_input(run_cmd, input);\n@@ -366,7 +369,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n \n             let output_matches = expected.lines().eq(output.lines());\n             if !output_matches {\n-                let res_path = REGEX.source_dir().join(\"res.txt\");\n+                let res_path = REGEX.source_dir(&runner.dirs).join(\"res.txt\");\n                 fs::write(&res_path, &output).unwrap();\n \n                 if cfg!(windows) {\n@@ -386,13 +389,13 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::new(\"test.regex\", &|runner| {\n-        spawn_and_wait(REGEX.clean(&runner.host_compiler.cargo));\n+        spawn_and_wait(REGEX.clean(&runner.host_compiler.cargo, &runner.dirs));\n \n         // newer aho_corasick versions throw a deprecation warning\n         let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.target_compiler.rustflags);\n \n         if runner.is_native {\n-            let mut run_cmd = REGEX.test(&runner.target_compiler);\n+            let mut run_cmd = REGEX.test(&runner.target_compiler, &runner.dirs);\n             run_cmd.args([\n                 \"--tests\",\n                 \"--\",\n@@ -406,46 +409,48 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             spawn_and_wait(run_cmd);\n         } else {\n             eprintln!(\"Cross-Compiling: Not running tests\");\n-            let mut build_cmd = REGEX.build(&runner.target_compiler);\n+            let mut build_cmd = REGEX.build(&runner.target_compiler, &runner.dirs);\n             build_cmd.arg(\"--tests\");\n             build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.clone());\n             spawn_and_wait(build_cmd);\n         }\n     }),\n     TestCase::new(\"test.portable-simd\", &|runner| {\n-        spawn_and_wait(PORTABLE_SIMD.clean(&runner.host_compiler.cargo));\n+        spawn_and_wait(PORTABLE_SIMD.clean(&runner.host_compiler.cargo, &runner.dirs));\n \n-        let mut build_cmd = PORTABLE_SIMD.build(&runner.target_compiler);\n+        let mut build_cmd = PORTABLE_SIMD.build(&runner.target_compiler, &runner.dirs);\n         build_cmd.arg(\"--all-targets\");\n         spawn_and_wait(build_cmd);\n \n         if runner.is_native {\n-            let mut test_cmd = PORTABLE_SIMD.test(&runner.target_compiler);\n+            let mut test_cmd = PORTABLE_SIMD.test(&runner.target_compiler, &runner.dirs);\n             test_cmd.arg(\"-q\");\n             spawn_and_wait(test_cmd);\n         }\n     }),\n ];\n \n pub(crate) fn run_tests(\n+    dirs: &Dirs,\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib: &Path,\n     host_triple: &str,\n     target_triple: &str,\n ) {\n-    let runner = TestRunner::new(host_triple.to_string(), target_triple.to_string());\n+    let runner = TestRunner::new(dirs.clone(), host_triple.to_string(), target_triple.to_string());\n \n     if config::get_bool(\"testsuite.no_sysroot\") {\n         build_sysroot::build_sysroot(\n+            dirs,\n             channel,\n             SysrootKind::None,\n             cg_clif_dylib,\n             &host_triple,\n             &target_triple,\n         );\n \n-        BUILD_EXAMPLE_OUT_DIR.ensure_fresh();\n+        BUILD_EXAMPLE_OUT_DIR.ensure_fresh(dirs);\n         runner.run_testsuite(NO_SYSROOT_SUITE);\n     } else {\n         eprintln!(\"[SKIP] no_sysroot tests\");\n@@ -456,6 +461,7 @@ pub(crate) fn run_tests(\n \n     if run_base_sysroot || run_extended_sysroot {\n         build_sysroot::build_sysroot(\n+            dirs,\n             channel,\n             sysroot_kind,\n             cg_clif_dylib,\n@@ -480,19 +486,21 @@ pub(crate) fn run_tests(\n struct TestRunner {\n     is_native: bool,\n     jit_supported: bool,\n+    dirs: Dirs,\n     host_compiler: Compiler,\n     target_compiler: Compiler,\n }\n \n impl TestRunner {\n-    pub fn new(host_triple: String, target_triple: String) -> Self {\n+    pub fn new(dirs: Dirs, host_triple: String, target_triple: String) -> Self {\n         let is_native = host_triple == target_triple;\n         let jit_supported =\n             target_triple.contains(\"x86_64\") && is_native && !host_triple.contains(\"windows\");\n \n-        let rustc_clif = RelPath::DIST.to_path().join(get_wrapper_file_name(\"rustc-clif\", \"bin\"));\n+        let rustc_clif =\n+            RelPath::DIST.to_path(&dirs).join(get_wrapper_file_name(\"rustc-clif\", \"bin\"));\n         let rustdoc_clif =\n-            RelPath::DIST.to_path().join(get_wrapper_file_name(\"rustdoc-clif\", \"bin\"));\n+            RelPath::DIST.to_path(&dirs).join(get_wrapper_file_name(\"rustdoc-clif\", \"bin\"));\n \n         let mut rustflags = env::var(\"RUSTFLAGS\").ok().unwrap_or(\"\".to_string());\n         let mut runner = vec![];\n@@ -543,7 +551,7 @@ impl TestRunner {\n             runner,\n         };\n \n-        Self { is_native, jit_supported, host_compiler, target_compiler }\n+        Self { is_native, jit_supported, dirs, host_compiler, target_compiler }\n     }\n \n     pub fn run_testsuite(&self, tests: &[TestCase]) {\n@@ -572,9 +580,9 @@ impl TestRunner {\n         let mut cmd = Command::new(&self.target_compiler.rustc);\n         cmd.args(self.target_compiler.rustflags.split_whitespace());\n         cmd.arg(\"-L\");\n-        cmd.arg(format!(\"crate={}\", BUILD_EXAMPLE_OUT_DIR.to_path().display()));\n+        cmd.arg(format!(\"crate={}\", BUILD_EXAMPLE_OUT_DIR.to_path(&self.dirs).display()));\n         cmd.arg(\"--out-dir\");\n-        cmd.arg(format!(\"{}\", BUILD_EXAMPLE_OUT_DIR.to_path().display()));\n+        cmd.arg(format!(\"{}\", BUILD_EXAMPLE_OUT_DIR.to_path(&self.dirs).display()));\n         cmd.arg(\"-Cdebuginfo=2\");\n         cmd.args(args);\n         cmd\n@@ -599,7 +607,9 @@ impl TestRunner {\n             full_cmd.extend(self.target_compiler.runner.iter().cloned());\n         }\n \n-        full_cmd.push(BUILD_EXAMPLE_OUT_DIR.to_path().join(name).to_str().unwrap().to_string());\n+        full_cmd.push(\n+            BUILD_EXAMPLE_OUT_DIR.to_path(&self.dirs).join(name).to_str().unwrap().to_string(),\n+        );\n \n         for arg in args.into_iter() {\n             full_cmd.push(arg.to_string());"}, {"sha": "dab6308bc1d547135868ba28652525884a006c0e", "filename": "build_system/utils.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b2d8e41893629ff65505fc0d4767f1db73b180/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=82b2d8e41893629ff65505fc0d4767f1db73b180", "patch": "@@ -4,7 +4,7 @@ use std::io::Write;\n use std::path::{Path, PathBuf};\n use std::process::{self, Command, Stdio};\n \n-use super::path::RelPath;\n+use super::path::{Dirs, RelPath};\n use super::rustc_info::{get_cargo_path, get_host_triple, get_rustc_path, get_rustdoc_path};\n \n pub(crate) struct Compiler {\n@@ -53,32 +53,32 @@ impl CargoProject {\n         CargoProject { source: path, target }\n     }\n \n-    pub(crate) fn source_dir(&self) -> PathBuf {\n-        self.source.to_path()\n+    pub(crate) fn source_dir(&self, dirs: &Dirs) -> PathBuf {\n+        self.source.to_path(dirs)\n     }\n \n-    pub(crate) fn manifest_path(&self) -> PathBuf {\n-        self.source_dir().join(\"Cargo.toml\")\n+    pub(crate) fn manifest_path(&self, dirs: &Dirs) -> PathBuf {\n+        self.source_dir(dirs).join(\"Cargo.toml\")\n     }\n \n-    pub(crate) fn target_dir(&self) -> PathBuf {\n-        RelPath::BUILD.join(self.target).to_path()\n+    pub(crate) fn target_dir(&self, dirs: &Dirs) -> PathBuf {\n+        RelPath::BUILD.join(self.target).to_path(dirs)\n     }\n \n-    fn base_cmd(&self, command: &str, cargo: &Path) -> Command {\n+    fn base_cmd(&self, command: &str, cargo: &Path, dirs: &Dirs) -> Command {\n         let mut cmd = Command::new(cargo);\n \n         cmd.arg(command)\n             .arg(\"--manifest-path\")\n-            .arg(self.manifest_path())\n+            .arg(self.manifest_path(dirs))\n             .arg(\"--target-dir\")\n-            .arg(self.target_dir());\n+            .arg(self.target_dir(dirs));\n \n         cmd\n     }\n \n-    fn build_cmd(&self, command: &str, compiler: &Compiler) -> Command {\n-        let mut cmd = self.base_cmd(command, &compiler.cargo);\n+    fn build_cmd(&self, command: &str, compiler: &Compiler, dirs: &Dirs) -> Command {\n+        let mut cmd = self.base_cmd(command, &compiler.cargo, dirs);\n \n         cmd.arg(\"--target\").arg(&compiler.triple);\n \n@@ -97,32 +97,32 @@ impl CargoProject {\n     }\n \n     #[must_use]\n-    pub(crate) fn fetch(&self, cargo: impl AsRef<Path>) -> Command {\n+    pub(crate) fn fetch(&self, cargo: impl AsRef<Path>, dirs: &Dirs) -> Command {\n         let mut cmd = Command::new(cargo.as_ref());\n \n-        cmd.arg(\"fetch\").arg(\"--manifest-path\").arg(self.manifest_path());\n+        cmd.arg(\"fetch\").arg(\"--manifest-path\").arg(self.manifest_path(dirs));\n \n         cmd\n     }\n \n     #[must_use]\n-    pub(crate) fn clean(&self, cargo: &Path) -> Command {\n-        self.base_cmd(\"clean\", cargo)\n+    pub(crate) fn clean(&self, cargo: &Path, dirs: &Dirs) -> Command {\n+        self.base_cmd(\"clean\", cargo, dirs)\n     }\n \n     #[must_use]\n-    pub(crate) fn build(&self, compiler: &Compiler) -> Command {\n-        self.build_cmd(\"build\", compiler)\n+    pub(crate) fn build(&self, compiler: &Compiler, dirs: &Dirs) -> Command {\n+        self.build_cmd(\"build\", compiler, dirs)\n     }\n \n     #[must_use]\n-    pub(crate) fn test(&self, compiler: &Compiler) -> Command {\n-        self.build_cmd(\"test\", compiler)\n+    pub(crate) fn test(&self, compiler: &Compiler, dirs: &Dirs) -> Command {\n+        self.build_cmd(\"test\", compiler, dirs)\n     }\n \n     #[must_use]\n-    pub(crate) fn run(&self, compiler: &Compiler) -> Command {\n-        self.build_cmd(\"run\", compiler)\n+    pub(crate) fn run(&self, compiler: &Compiler, dirs: &Dirs) -> Command {\n+        self.build_cmd(\"run\", compiler, dirs)\n     }\n }\n "}]}