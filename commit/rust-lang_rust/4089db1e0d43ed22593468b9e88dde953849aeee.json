{"sha": "4089db1e0d43ed22593468b9e88dde953849aeee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwODlkYjFlMGQ0M2VkMjI1OTM0NjhiOWU4OGRkZTk1Mzg0OWFlZWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T13:58:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T14:08:49Z"}, "message": "prioritize event handing over indexing\n\nIf we index gazillion libraries simultaneously, we fill the threadpool\nand so the main loop fails to turn, although there isn't really any\nsignificant blocking inside the loop itself.", "tree": {"sha": "51dc4dde829fa997035cf068b668f3378c8f9f6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51dc4dde829fa997035cf068b668f3378c8f9f6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4089db1e0d43ed22593468b9e88dde953849aeee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4089db1e0d43ed22593468b9e88dde953849aeee", "html_url": "https://github.com/rust-lang/rust/commit/4089db1e0d43ed22593468b9e88dde953849aeee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4089db1e0d43ed22593468b9e88dde953849aeee/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4bc7589c40732fb78cb59525a6b4dcfb515567", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4bc7589c40732fb78cb59525a6b4dcfb515567", "html_url": "https://github.com/rust-lang/rust/commit/0f4bc7589c40732fb78cb59525a6b4dcfb515567"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "c436373516ef44bb7f489f03100bda9f3e7a111f", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4089db1e0d43ed22593468b9e88dde953849aeee/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4089db1e0d43ed22593468b9e88dde953849aeee/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=4089db1e0d43ed22593468b9e88dde953849aeee", "patch": "@@ -47,14 +47,16 @@ enum Task {\n     Notify(RawNotification),\n }\n \n+const THREADPOOL_SIZE: usize = 8;\n+\n pub fn main_loop(\n     internal_mode: bool,\n     ws_root: PathBuf,\n     supports_decorations: bool,\n     msg_receiver: &Receiver<RawMessage>,\n     msg_sender: &Sender<RawMessage>,\n ) -> Result<()> {\n-    let pool = ThreadPool::new(8);\n+    let pool = ThreadPool::new(THREADPOOL_SIZE);\n     let (task_sender, task_receiver) = unbounded::<Task>();\n     let (ws_worker, ws_watcher) = workspace_loader();\n \n@@ -164,6 +166,11 @@ fn main_loop_inner(\n     pending_requests: &mut FxHashSet<u64>,\n     subs: &mut Subscriptions,\n ) -> Result<()> {\n+    // We try not to index more than THREADPOOL_SIZE - 3 libraries at the same\n+    // time to always have a thread ready to react to input.\n+    let mut in_flight_libraries = 0;\n+    let mut pending_libraries = Vec::new();\n+\n     let (libdata_sender, libdata_receiver) = unbounded();\n     loop {\n         log::trace!(\"selecting\");\n@@ -191,6 +198,7 @@ fn main_loop_inner(\n             Event::Lib(lib) => {\n                 feedback(internal_mode, \"library loaded\", msg_sender);\n                 state.add_lib(lib);\n+                in_flight_libraries -= 1;\n             }\n             Event::Msg(msg) => match msg {\n                 RawMessage::Request(req) => {\n@@ -219,8 +227,10 @@ fn main_loop_inner(\n             },\n         };\n \n-        for lib in state.process_changes() {\n-            let (root, files) = lib;\n+        pending_libraries.extend(state.process_changes());\n+        while in_flight_libraries < THREADPOOL_SIZE - 3 && !pending_libraries.is_empty() {\n+            let (root, files) = pending_libraries.pop().unwrap();\n+            in_flight_libraries += 1;\n             let sender = libdata_sender.clone();\n             pool.execute(move || {\n                 let start = ::std::time::Instant::now();\n@@ -230,7 +240,8 @@ fn main_loop_inner(\n                 sender.send(data).unwrap();\n             });\n         }\n-        if state.roots_to_scan == 0 {\n+\n+        if state.roots_to_scan == 0 && pending_libraries.is_empty() && in_flight_libraries == 0 {\n             feedback(internal_mode, \"workspace loaded\", msg_sender);\n         }\n "}]}