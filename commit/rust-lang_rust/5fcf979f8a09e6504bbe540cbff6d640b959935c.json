{"sha": "5fcf979f8a09e6504bbe540cbff6d640b959935c", "node_id": "C_kwDOAAsO6NoAKDVmY2Y5NzlmOGEwOWU2NTA0YmJlNTQwY2JmZjZkNjQwYjk1OTkzNWM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-12T15:53:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-12T15:53:05Z"}, "message": "Merge #11692\n\n11692: round of clippy fixes. r=Veykril a=matthiaskrgr\n\nSplit these up into smaller chunks so I can easily revert parts of it if needed.\n\nCo-authored-by: Matthias Kr\u00fcger <matthias.krueger@famsik.de>", "tree": {"sha": "d11d792bd84a9ffbac577f28bc16860880331a5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d11d792bd84a9ffbac577f28bc16860880331a5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fcf979f8a09e6504bbe540cbff6d640b959935c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiLMHhCRBK7hj4Ov3rIwAAEDkIAJqu0ZOWuf9/Pv0Y2nPp6dxu\nXTCxBO67y7454q6NeOXBDiB2D907xWCUZ4g/bRH1HuAgFDPC1EHP8g8QwEDU2tZ8\nXCIWI1nL73LlC6zTmXAtgmzA4vi66PL3d51uxbygxU98ni3qXczRapKS8qkETyhq\nyB93mOERapVqf8XyG27KIPxAjSuC+S5X0FoRv0UjGiJKtkjE5xOGjEPheGRqBlXL\nXkCEemyy5l8By6Lb5PSpUdbkmQ7pV3Ickj+Cunrvp/AXM0Dlz30a8uFXH5CRuHad\nrnNMGmBy3yahQZ4hfURrfy0FLnZFnKwSh7aFrCY51kaV/leFcSJwcJm/Nz25VZY=\n=z1tT\n-----END PGP SIGNATURE-----\n", "payload": "tree d11d792bd84a9ffbac577f28bc16860880331a5c\nparent ff7e057dca58865a670581ab5dcaa006ed17696c\nparent f39cac17ce2d27a40601af539d970b937f9ce4b9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647100385 +0000\ncommitter GitHub <noreply@github.com> 1647100385 +0000\n\nMerge #11692\n\n11692: round of clippy fixes. r=Veykril a=matthiaskrgr\n\nSplit these up into smaller chunks so I can easily revert parts of it if needed.\n\nCo-authored-by: Matthias Kr\u00fcger <matthias.krueger@famsik.de>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fcf979f8a09e6504bbe540cbff6d640b959935c", "html_url": "https://github.com/rust-lang/rust/commit/5fcf979f8a09e6504bbe540cbff6d640b959935c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fcf979f8a09e6504bbe540cbff6d640b959935c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff7e057dca58865a670581ab5dcaa006ed17696c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff7e057dca58865a670581ab5dcaa006ed17696c", "html_url": "https://github.com/rust-lang/rust/commit/ff7e057dca58865a670581ab5dcaa006ed17696c"}, {"sha": "f39cac17ce2d27a40601af539d970b937f9ce4b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f39cac17ce2d27a40601af539d970b937f9ce4b9", "html_url": "https://github.com/rust-lang/rust/commit/f39cac17ce2d27a40601af539d970b937f9ce4b9"}], "stats": {"total": 486, "additions": 215, "deletions": 271}, "files": [{"sha": "d1e2d74a987a44a159adc9440d92518993fd4445", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -394,9 +394,9 @@ struct FileMeta {\n }\n \n fn parse_crate(crate_str: String) -> (String, CrateOrigin, Option<String>) {\n-    if let Some((a, b)) = crate_str.split_once(\"@\") {\n-        let (version, origin) = match b.split_once(\":\") {\n-            Some((\"CratesIo\", data)) => match data.split_once(\",\") {\n+    if let Some((a, b)) = crate_str.split_once('@') {\n+        let (version, origin) = match b.split_once(':') {\n+            Some((\"CratesIo\", data)) => match data.split_once(',') {\n                 Some((version, url)) => {\n                     (version, CrateOrigin::CratesIo { repo: Some(url.to_owned()) })\n                 }"}, {"sha": "9c7558d1918778a7f85d641459702f0d01ee786d", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -82,8 +82,8 @@ impl From<GenericParam> for GenericParamId {\n     fn from(id: GenericParam) -> Self {\n         match id {\n             GenericParam::LifetimeParam(it) => GenericParamId::LifetimeParamId(it.id),\n-            GenericParam::ConstParam(it) => GenericParamId::ConstParamId(it.id.into()),\n-            GenericParam::TypeParam(it) => GenericParamId::TypeParamId(it.id.into()),\n+            GenericParam::ConstParam(it) => GenericParamId::ConstParamId(it.id),\n+            GenericParam::TypeParam(it) => GenericParamId::TypeParamId(it.id),\n         }\n     }\n }"}, {"sha": "b45689ec377678146bd09f1bd8861af52aec2084", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -231,7 +231,7 @@ impl Crate {\n             return None;\n         }\n \n-        let doc_url = doc_attr_q.tt_values().map(|tt| {\n+        let doc_url = doc_attr_q.tt_values().filter_map(|tt| {\n             let name = tt.token_trees.iter()\n                 .skip_while(|tt| !matches!(tt, TokenTree::Leaf(Leaf::Ident(Ident { text, ..} )) if text == \"html_root_url\"))\n                 .nth(2);\n@@ -240,7 +240,7 @@ impl Crate {\n                 Some(TokenTree::Leaf(Leaf::Literal(Literal{ref text, ..}))) => Some(text),\n                 _ => None\n             }\n-        }).flatten().next();\n+        }).next();\n \n         doc_url.map(|s| s.trim_matches('\"').trim_end_matches('/').to_owned() + \"/\")\n     }\n@@ -1530,11 +1530,7 @@ impl SelfParam {\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n         let environment = db.trait_environment(self.func.into());\n \n-        Type {\n-            krate,\n-            env: environment.clone(),\n-            ty: ctx.lower_ty(&db.function_data(self.func).params[0].1),\n-        }\n+        Type { krate, env: environment, ty: ctx.lower_ty(&db.function_data(self.func).params[0].1) }\n     }\n }\n \n@@ -1816,14 +1812,12 @@ impl Macro {\n \n     pub fn is_builtin_derive(&self, db: &dyn HirDatabase) -> bool {\n         match self.id {\n-            MacroId::Macro2Id(it) => match it.lookup(db.upcast()).expander {\n-                MacroExpander::BuiltInDerive(_) => true,\n-                _ => false,\n-            },\n-            MacroId::MacroRulesId(it) => match it.lookup(db.upcast()).expander {\n-                MacroExpander::BuiltInDerive(_) => true,\n-                _ => false,\n-            },\n+            MacroId::Macro2Id(it) => {\n+                matches!(it.lookup(db.upcast()).expander, MacroExpander::BuiltInDerive(_))\n+            }\n+            MacroId::MacroRulesId(it) => {\n+                matches!(it.lookup(db.upcast()).expander, MacroExpander::BuiltInDerive(_))\n+            }\n             MacroId::ProcMacroId(_) => false,\n         }\n     }"}, {"sha": "236487d8e52eb66ff5a90c8a803789b4c5f3c3f2", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -398,7 +398,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     }\n \n     pub fn scope_at_offset(&self, node: &SyntaxNode, offset: TextSize) -> SemanticsScope<'db> {\n-        self.imp.scope_at_offset(&node, offset)\n+        self.imp.scope_at_offset(node, offset)\n     }\n \n     pub fn scope_for_def(&self, def: Trait) -> SemanticsScope<'db> {"}, {"sha": "499817b6b8a31e5ce8867588b5ee63910be1d1a2", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -603,7 +603,7 @@ fn resolve_hir_path_(\n         // within the trait's associated types.\n         if let (Some(unresolved), &TypeNs::TraitId(trait_id)) = (&unresolved, &ty) {\n             if let Some(type_alias_id) =\n-                db.trait_data(trait_id).associated_type_by_name(&unresolved.name)\n+                db.trait_data(trait_id).associated_type_by_name(unresolved.name)\n             {\n                 return Some(PathResolution::Def(ModuleDefId::from(type_alias_id).into()));\n             }"}, {"sha": "81054f83b0edb0005c58a4d2b93be535e25cdf40", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -667,7 +667,7 @@ impl DocsRangeMap {\n         let InFile { file_id, value: source } = self.source_map.source_of_id(idx);\n         match source {\n             Either::Left(attr) => {\n-                let string = get_doc_string_in_attr(&attr)?;\n+                let string = get_doc_string_in_attr(attr)?;\n                 let text_range = string.open_quote_text_range()?;\n                 let range = TextRange::at(\n                     text_range.end() + original_line_src_range.start() + relative_range.start(),"}, {"sha": "ebb15e20cbafc3e0a70d04304e54d1281b82e80d", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -421,12 +421,12 @@ impl BodySourceMap {\n     }\n \n     pub fn node_expr(&self, node: InFile<&ast::Expr>) -> Option<ExprId> {\n-        let src = node.map(|it| AstPtr::new(it));\n+        let src = node.map(AstPtr::new);\n         self.expr_map.get(&src).cloned()\n     }\n \n     pub fn node_macro_file(&self, node: InFile<&ast::MacroCall>) -> Option<HirFileId> {\n-        let src = node.map(|it| AstPtr::new(it));\n+        let src = node.map(AstPtr::new);\n         self.expansions.get(&src).cloned()\n     }\n \n@@ -449,15 +449,15 @@ impl BodySourceMap {\n     }\n \n     pub fn node_label(&self, node: InFile<&ast::Label>) -> Option<LabelId> {\n-        let src = node.map(|it| AstPtr::new(it));\n+        let src = node.map(AstPtr::new);\n         self.label_map.get(&src).cloned()\n     }\n \n     pub fn field_syntax(&self, expr: ExprId) -> InFile<AstPtr<ast::RecordExprField>> {\n         self.field_map_back[&expr].clone()\n     }\n     pub fn node_field(&self, node: InFile<&ast::RecordExprField>) -> Option<ExprId> {\n-        let src = node.map(|it| AstPtr::new(it));\n+        let src = node.map(AstPtr::new);\n         self.field_map.get(&src).cloned()\n     }\n "}, {"sha": "512a9312a771a239b3d7a322cefc96d33508bdc7", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -941,17 +941,15 @@ impl From<ast::LiteralKind> for Literal {\n             LiteralKind::IntNumber(lit) => {\n                 if let builtin @ Some(_) = lit.suffix().and_then(BuiltinFloat::from_suffix) {\n                     Literal::Float(Default::default(), builtin)\n-                } else if let builtin @ Some(_) =\n-                    lit.suffix().and_then(|it| BuiltinInt::from_suffix(it))\n-                {\n+                } else if let builtin @ Some(_) = lit.suffix().and_then(BuiltinInt::from_suffix) {\n                     Literal::Int(lit.value().unwrap_or(0) as i128, builtin)\n                 } else {\n-                    let builtin = lit.suffix().and_then(|it| BuiltinUint::from_suffix(it));\n+                    let builtin = lit.suffix().and_then(BuiltinUint::from_suffix);\n                     Literal::Uint(lit.value().unwrap_or(0), builtin)\n                 }\n             }\n             LiteralKind::FloatNumber(lit) => {\n-                let ty = lit.suffix().and_then(|it| BuiltinFloat::from_suffix(it));\n+                let ty = lit.suffix().and_then(BuiltinFloat::from_suffix);\n                 Literal::Float(Default::default(), ty)\n             }\n             LiteralKind::ByteString(bs) => {"}, {"sha": "456ed9e610382e16f4c3076ca2fd33875d1cf6e6", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -66,7 +66,7 @@ impl FunctionData {\n             .by_key(\"rustc_legacy_const_generics\")\n             .tt_values()\n             .next()\n-            .map(|arg| parse_rustc_legacy_const_generics(arg))\n+            .map(parse_rustc_legacy_const_generics)\n             .unwrap_or_default();\n \n         Arc::new(FunctionData {"}, {"sha": "6d7b98f3b166ff4a49d4976f749994702f66f6f2", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -72,7 +72,7 @@ impl TypeOrConstParamData {\n \n     pub fn type_param(&self) -> Option<&TypeParamData> {\n         match self {\n-            TypeOrConstParamData::TypeParamData(x) => Some(&x),\n+            TypeOrConstParamData::TypeParamData(x) => Some(x),\n             TypeOrConstParamData::ConstParamData(_) => None,\n         }\n     }"}, {"sha": "34bea5bd4595ff25395369e38cdbacd79e3cfa23", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -500,7 +500,7 @@ impl<'a> Printer<'a> {\n                     if i != 0 {\n                         w!(self, \", \");\n                     }\n-                    self.print_type_ref(&typeref);\n+                    self.print_type_ref(typeref);\n                 }\n                 if *varargs {\n                     if !args.is_empty() {\n@@ -509,7 +509,7 @@ impl<'a> Printer<'a> {\n                     w!(self, \"...\");\n                 }\n                 w!(self, \") -> \");\n-                self.print_type_ref(&return_type);\n+                self.print_type_ref(return_type);\n             }\n             TypeRef::Macro(_ast_id) => {\n                 w!(self, \"<macro>\");"}, {"sha": "9d9b925bd2dcd84aa608a51fe52b7e4aa57acea9", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -178,7 +178,7 @@ pub fn identity_when_valid(_attr: TokenStream, item: TokenStream) -> TokenStream\n \n             if tree {\n                 let tree = format!(\"{:#?}\", parse.syntax_node())\n-                    .split_inclusive(\"\\n\")\n+                    .split_inclusive('\\n')\n                     .map(|line| format!(\"// {}\", line))\n                     .collect::<String>();\n                 format_to!(expn_text, \"\\n{}\", tree)\n@@ -191,7 +191,7 @@ pub fn identity_when_valid(_attr: TokenStream, item: TokenStream) -> TokenStream\n             if let Some((tree, map, _)) = arg.as_deref() {\n                 let tt_range = call.token_tree().unwrap().syntax().text_range();\n                 let mut ranges = Vec::new();\n-                extract_id_ranges(&mut ranges, &map, &tree);\n+                extract_id_ranges(&mut ranges, map, tree);\n                 for (range, id) in ranges {\n                     let idx = (tt_range.start() + range.end()).into();\n                     text_edits.push((idx..idx, format!(\"#{}\", id.0)));\n@@ -269,7 +269,7 @@ fn reindent(indent: IndentLevel, pp: String) -> String {\n     let mut res = lines.next().unwrap().to_string();\n     for line in lines {\n         if line.trim().is_empty() {\n-            res.push_str(&line)\n+            res.push_str(line)\n         } else {\n             format_to!(res, \"{}{}\", indent, line)\n         }"}, {"sha": "3650204ee9d7327f7c0d051e00b61b61b9f33532", "filename": "crates/hir_def/src/nameres/attr_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fnameres%2Fattr_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fnameres%2Fattr_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fattr_resolution.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -52,7 +52,7 @@ impl DefMap {\n                     return Ok(ResolvedAttr::Other);\n                 }\n             }\n-            None => return Err(UnresolvedMacro { path: ast_id.path.clone() }),\n+            None => return Err(UnresolvedMacro { path: ast_id.path }),\n         };\n \n         Ok(ResolvedAttr::Macro(attr_macro_as_call_id("}, {"sha": "8e6b5283f19b571ca604b5e7acd55124d1d07753", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -504,10 +504,8 @@ impl DefCollector<'_> {\n         } else {\n             PathKind::Abs\n         };\n-        let path = ModPath::from_segments(\n-            path_kind.clone(),\n-            [krate.clone(), name![prelude], edition].into_iter(),\n-        );\n+        let path =\n+            ModPath::from_segments(path_kind, [krate.clone(), name![prelude], edition].into_iter());\n         // Fall back to the older `std::prelude::v1` for compatibility with Rust <1.52.0\n         // FIXME remove this fallback\n         let fallback_path =\n@@ -570,7 +568,7 @@ impl DefCollector<'_> {\n \n         let proc_macro_id =\n             ProcMacroLoc { container: module_id, id, expander, kind }.intern(self.db);\n-        self.define_proc_macro(def.name.clone(), proc_macro_id.into());\n+        self.define_proc_macro(def.name.clone(), proc_macro_id);\n         if let ProcMacroKind::CustomDerive { helpers } = def.kind {\n             self.def_map\n                 .exported_derives"}, {"sha": "aea1e3ec34ba2361cd413566692396e8e3d3b4ed", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -120,7 +120,7 @@ impl Path {\n         let res = Path {\n             type_anchor: self.type_anchor.clone(),\n             mod_path: Interned::new(ModPath::from_segments(\n-                self.mod_path.kind.clone(),\n+                self.mod_path.kind,\n                 self.mod_path.segments()[..self.mod_path.segments().len() - 1].iter().cloned(),\n             )),\n             generic_args: self.generic_args[..self.generic_args.len() - 1].to_vec().into(),"}, {"sha": "027c410cdf5275a65beb87c405fa2c3b98079430", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -245,7 +245,7 @@ impl TypeRef {\n             f(type_ref);\n             match type_ref {\n                 TypeRef::Fn(params, _) => {\n-                    params.iter().for_each(|(_, param_type)| go(&param_type, f))\n+                    params.iter().for_each(|(_, param_type)| go(param_type, f))\n                 }\n                 TypeRef::Tuple(types) => types.iter().for_each(|t| go(t, f)),\n                 TypeRef::RawPtr(type_ref, _)"}, {"sha": "f7d5532df5e3e3004148ae9162e42b093594d37b", "filename": "crates/hir_expand/src/builtin_derive_macro.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -88,9 +88,8 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, ExpandError> {\n         debug!(\"parsed item has no name\");\n         ExpandError::Other(\"missing name\".into())\n     })?;\n-    let name_token_id = token_map\n-        .token_by_range(name.syntax().text_range())\n-        .unwrap_or_else(|| TokenId::unspecified());\n+    let name_token_id =\n+        token_map.token_by_range(name.syntax().text_range()).unwrap_or_else(TokenId::unspecified);\n     let name_token = tt::Ident { id: name_token_id, text: name.text().into() };\n     let type_or_const_params =\n         params.map_or(0, |type_param_list| type_param_list.type_or_const_params().count());"}, {"sha": "bad5f9aa2434bb34124f2a126d2ebc6d0913733f", "filename": "crates/hir_expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -446,7 +446,7 @@ fn concat_bytes_expand(\n                 match token.kind() {\n                     syntax::SyntaxKind::BYTE => bytes.push(token.text().to_string()),\n                     syntax::SyntaxKind::BYTE_STRING => {\n-                        let components = unquote_byte_string(lit).unwrap_or_else(|| Vec::new());\n+                        let components = unquote_byte_string(lit).unwrap_or_else(Vec::new);\n                         components.into_iter().for_each(|x| bytes.push(x.to_string()));\n                     }\n                     _ => {"}, {"sha": "ac07daa0ab33cedf5fe5719c751cc0428a7c006a", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -149,11 +149,11 @@ pub fn expand_speculative(\n     let token_range = token_to_map.text_range();\n \n     // Build the subtree and token mapping for the speculative args\n-    let censor = censor_for_macro_input(&loc, &speculative_args);\n-    let mut fixups = fixup::fixup_syntax(&speculative_args);\n+    let censor = censor_for_macro_input(&loc, speculative_args);\n+    let mut fixups = fixup::fixup_syntax(speculative_args);\n     fixups.replace.extend(censor.into_iter().map(|node| (node, Vec::new())));\n     let (mut tt, spec_args_tmap, _) = mbe::syntax_node_to_token_tree_with_modifications(\n-        &speculative_args,\n+        speculative_args,\n         fixups.token_map,\n         fixups.next_id,\n         fixups.replace,"}, {"sha": "5fd099aea7d64a0b612f2ef98d6e247fbe315514", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -146,7 +146,7 @@ pub fn expand_eager_macro(\n     if let MacroDefKind::BuiltInEager(eager, _) = def.kind {\n         let res = eager.expand(db, arg_id, &subtree);\n         if let Some(err) = res.err {\n-            diagnostic_sink(err.into());\n+            diagnostic_sink(err);\n         }\n \n         let loc = MacroCallLoc {\n@@ -207,7 +207,7 @@ fn eager_macro_recur(\n \n     // Collect replacement\n     for child in children {\n-        let def = match child.path().and_then(|path| ModPath::from_src(db, path, &hygiene)) {\n+        let def = match child.path().and_then(|path| ModPath::from_src(db, path, hygiene)) {\n             Some(path) => macro_resolver(path.clone()).ok_or_else(|| UnresolvedMacro { path })?,\n             None => {\n                 diagnostic_sink(ExpandError::Other(\"malformed macro invocation\".into()));"}, {"sha": "c924478cecbc2b2786e272dbc1a15e6dcbc2ff40", "filename": "crates/hir_expand/src/fixup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Ffixup.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -176,7 +176,7 @@ mod tests {\n         );\n \n         let mut actual = tt.to_string();\n-        actual.push_str(\"\\n\");\n+        actual.push('\\n');\n \n         expect.indent(false);\n         expect.assert_eq(&actual);"}, {"sha": "82f410ecda91d9d0c704dce00ed8efc4f99689d8", "filename": "crates/hir_expand/src/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fquote.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -261,7 +261,7 @@ mod tests {\n         // }\n         let struct_name = mk_ident(\"Foo\");\n         let fields = [mk_ident(\"name\"), mk_ident(\"id\")];\n-        let fields = fields.iter().map(|it| quote!(#it: self.#it.clone(), ).token_trees).flatten();\n+        let fields = fields.iter().flat_map(|it| quote!(#it: self.#it.clone(), ).token_trees);\n \n         let list = tt::Subtree {\n             delimiter: Some(tt::Delimiter {"}, {"sha": "5cc474aca67810f41663343610136c0201c26527", "filename": "crates/hir_ty/src/consteval.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -235,14 +235,14 @@ pub fn eval_const(expr: &Expr, ctx: &mut ConstEvalCtx<'_>) -> Result<ComputedExp\n                     Ok(ComputedExpr::Literal(Literal::Int(r, None)))\n                 }\n                 BinaryOp::LogicOp(_) => Err(ConstEvalError::TypeError),\n-                _ => return Err(ConstEvalError::NotSupported(\"bin op on this operators\")),\n+                _ => Err(ConstEvalError::NotSupported(\"bin op on this operators\")),\n             }\n         }\n         Expr::Block { statements, tail, .. } => {\n             let mut prev_values = HashMap::<Name, Option<ComputedExpr>>::default();\n             for statement in &**statements {\n-                match statement {\n-                    &hir_def::expr::Statement::Let { pat, initializer, .. } => {\n+                match *statement {\n+                    hir_def::expr::Statement::Let { pat, initializer, .. } => {\n                         let pat = &ctx.pats[pat];\n                         let name = match pat {\n                             Pat::Bind { name, subpat, .. } if subpat.is_none() => name.clone(),\n@@ -261,7 +261,7 @@ pub fn eval_const(expr: &Expr, ctx: &mut ConstEvalCtx<'_>) -> Result<ComputedExp\n                             ctx.local_data.insert(name, value);\n                         }\n                     }\n-                    &hir_def::expr::Statement::Expr { .. } => {\n+                    hir_def::expr::Statement::Expr { .. } => {\n                         return Err(ConstEvalError::NotSupported(\"this kind of statement\"))\n                     }\n                 }\n@@ -293,7 +293,7 @@ pub fn eval_const(expr: &Expr, ctx: &mut ConstEvalCtx<'_>) -> Result<ComputedExp\n \n pub fn eval_usize(expr: Idx<Expr>, mut ctx: ConstEvalCtx<'_>) -> Option<u64> {\n     let expr = &ctx.exprs[expr];\n-    if let Ok(ce) = eval_const(&expr, &mut ctx) {\n+    if let Ok(ce) = eval_const(expr, &mut ctx) {\n         match ce {\n             ComputedExpr::Literal(Literal::Int(x, _)) => return x.try_into().ok(),\n             ComputedExpr::Literal(Literal::Uint(x, _)) => return x.try_into().ok(),"}, {"sha": "0c62f58940df85133b77e4171634b32b73d281d4", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -82,7 +82,7 @@ pub(crate) fn normalize(db: &dyn HirDatabase, owner: DefWithBodyId, ty: Ty) -> T\n     let trait_env = owner\n         .as_generic_def_id()\n         .map_or_else(|| Arc::new(TraitEnvironment::empty(krate)), |d| db.trait_environment(d));\n-    let mut table = unify::InferenceTable::new(db, trait_env.clone());\n+    let mut table = unify::InferenceTable::new(db, trait_env);\n \n     let ty_with_vars = table.normalize_associated_types_in(ty);\n     table.resolve_obligations_as_possible();"}, {"sha": "1d6affe9c70f8bf1aa418fe536adcc2a5630fdb6", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -1059,7 +1059,7 @@ pub(crate) fn generic_predicates_for_param_query(\n             | WherePredicate::TypeBound { target, bound, .. } => {\n                 match target {\n                     WherePredicateTypeTarget::TypeRef(type_ref) => {\n-                        if ctx.lower_ty_only_param(type_ref) != Some(param_id.into()) {\n+                        if ctx.lower_ty_only_param(type_ref) != Some(param_id) {\n                             return false;\n                         }\n                     }"}, {"sha": "6564a3f4c76c24707ad7da2c719cb5449399a1b4", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -278,7 +278,7 @@ impl InherentImpls {\n         impls.collect_def_map(db, &crate_def_map);\n         impls.shrink_to_fit();\n \n-        return Arc::new(impls);\n+        Arc::new(impls)\n     }\n \n     pub(crate) fn inherent_impls_in_block_query(\n@@ -291,7 +291,7 @@ impl InherentImpls {\n             impls.shrink_to_fit();\n             return Some(Arc::new(impls));\n         }\n-        return None;\n+        None\n     }\n \n     fn shrink_to_fit(&mut self) {\n@@ -663,7 +663,7 @@ pub fn iterate_method_candidates_dyn(\n             iterate_method_candidates_for_self_ty(\n                 ty,\n                 db,\n-                env.clone(),\n+                env,\n                 traits_in_scope,\n                 visible_from_module,\n                 name,\n@@ -693,7 +693,7 @@ fn iterate_method_candidates_with_autoref(\n     iterate_method_candidates_by_receiver(\n         receiver_ty,\n         first_adjustment.clone(),\n-        &rest,\n+        rest,\n         db,\n         env.clone(),\n         traits_in_scope,\n@@ -731,7 +731,7 @@ fn iterate_method_candidates_with_autoref(\n         first_adjustment.with_autoref(Mutability::Mut),\n         deref_chain,\n         db,\n-        env.clone(),\n+        env,\n         traits_in_scope,\n         visible_from_module,\n         name,\n@@ -973,7 +973,7 @@ fn iterate_inherent_methods(\n                 // already happens in `is_valid_candidate` above; if not, we\n                 // check it here\n                 if receiver_ty.is_none()\n-                    && inherent_impl_substs(db, env.clone(), impl_def, &self_ty).is_none()\n+                    && inherent_impl_substs(db, env.clone(), impl_def, self_ty).is_none()\n                 {\n                     cov_mark::hit!(impl_self_type_match_without_receiver);\n                     continue;\n@@ -1105,7 +1105,7 @@ pub(crate) fn inherent_impl_substs(\n     // Unknown, and in that case we want the result to contain Unknown in those\n     // places again.\n     let suffix =\n-        Substitution::from_iter(Interner, substs.iter(Interner).cloned().skip(self_ty_vars));\n+        Substitution::from_iter(Interner, substs.iter(Interner).skip(self_ty_vars).cloned());\n     Some(fallback_bound_vars(suffix, self_ty_vars))\n }\n \n@@ -1152,7 +1152,7 @@ pub fn implements_trait(\n     env: Arc<TraitEnvironment>,\n     trait_: TraitId,\n ) -> bool {\n-    let goal = generic_implements_goal(db, env.clone(), trait_, &ty);\n+    let goal = generic_implements_goal(db, env.clone(), trait_, ty);\n     let solution = db.trait_solve(env.krate, goal.cast(Interner));\n \n     solution.is_some()\n@@ -1164,7 +1164,7 @@ pub fn implements_trait_unique(\n     env: Arc<TraitEnvironment>,\n     trait_: TraitId,\n ) -> bool {\n-    let goal = generic_implements_goal(db, env.clone(), trait_, &ty);\n+    let goal = generic_implements_goal(db, env.clone(), trait_, ty);\n     let solution = db.trait_solve(env.krate, goal.cast(Interner));\n \n     matches!(solution, Some(crate::Solution::Unique(_)))"}, {"sha": "18523d2db599d01e065bbc52b63ca343bdf19e9f", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -337,7 +337,7 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n             let (range, text) = if let Some(self_param) = ast::SelfParam::cast(node.value.clone()) {\n                 (self_param.name().unwrap().syntax().text_range(), \"self\".to_string())\n             } else {\n-                (node.value.text_range(), node.value.text().to_string().replace(\"\\n\", \" \"))\n+                (node.value.text_range(), node.value.text().to_string().replace('\\n', \" \"))\n             };\n             let macro_prefix = if node.file_id != file_id.into() { \"!\" } else { \"\" };\n             format_to!("}, {"sha": "ad6cd36ca60d1e8eea8d316ad4997e19edcb0a48", "filename": "crates/hir_ty/src/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftls.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -128,6 +128,6 @@ mod unsafe_tls {\n         // type.\n         let static_p: &DebugContext<'static> =\n             unsafe { std::mem::transmute::<&DebugContext, &DebugContext<'static>>(&ctx) };\n-        PROGRAM.set(static_p, || op())\n+        PROGRAM.set(static_p, op)\n     }\n }"}, {"sha": "676d4d51df9f9adffc52a28b8ef13fcd344e0cf5", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -79,7 +79,7 @@ pub(crate) fn annotations(\n                             .map(|variant| {\n                                 variant.source(db).and_then(|node| name_range(db, node, file_id))\n                             })\n-                            .filter_map(std::convert::identity)\n+                            .flatten()\n                             .for_each(|range| {\n                                 annotations.push(Annotation {\n                                     range,\n@@ -170,10 +170,9 @@ pub(crate) fn resolve_annotation(db: &RootDatabase, mut annotation: Annotation)\n                 result\n                     .into_iter()\n                     .flat_map(|res| res.references)\n-                    .map(|(file_id, access)| {\n+                    .flat_map(|(file_id, access)| {\n                         access.into_iter().map(move |(range, _)| FileRange { file_id, range })\n                     })\n-                    .flatten()\n                     .collect()\n             });\n         }"}, {"sha": "6111bdb94aaaf006bb1e4778f2cee5529a471b52", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -283,7 +283,7 @@ fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n         let final_node = delimiter_node\n             .next_sibling_or_token()\n             .and_then(|it| it.into_token())\n-            .filter(|node| is_single_line_ws(node))\n+            .filter(is_single_line_ws)\n             .unwrap_or(delimiter_node);\n \n         return Some(TextRange::new(node.text_range().start(), final_node.text_range().end()));"}, {"sha": "68fd0952b48814a47f3d9223bdd1c6500f8c1bff", "filename": "crates/ide/src/file_structure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -138,7 +138,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                     collapse_ws(param_list.syntax(), &mut detail);\n                 }\n                 if let Some(ret_type) = it.ret_type() {\n-                    detail.push_str(\" \");\n+                    detail.push(' ');\n                     collapse_ws(ret_type.syntax(), &mut detail);\n                 }\n "}, {"sha": "ec0435aad06a313940ae38247f7ec193a65c8481", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -145,7 +145,7 @@ pub(crate) fn hover(\n     if result.is_none() {\n         // fallbacks, show keywords or types\n \n-        let res = descended.iter().find_map(|token| render::keyword(sema, config, &token));\n+        let res = descended.iter().find_map(|token| render::keyword(sema, config, token));\n         if let Some(res) = res {\n             return Some(RangeInfo::new(original_token.text_range(), res));\n         }"}, {"sha": "b2b74ccce325c11f4b38cf917a2be5bc90f9f629", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -103,7 +103,7 @@ pub(super) fn try_expr(\n \n     let adts = inner_ty.as_adt().zip(body_ty.as_adt());\n     if let Some((hir::Adt::Enum(inner), hir::Adt::Enum(body))) = adts {\n-        let famous_defs = FamousDefs(sema, sema.scope(&try_expr.syntax()).krate());\n+        let famous_defs = FamousDefs(sema, sema.scope(try_expr.syntax()).krate());\n         // special case for two options, there is no value in showing them\n         if let Some(option_enum) = famous_defs.core_option_Option() {\n             if inner == option_enum && body == option_enum {"}, {"sha": "0491ce3635063c474abcf1e0c519071ae18f9427", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n \n //FIXME: like, real html escaping\n fn html_escape(text: &str) -> String {\n-    text.replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")\n+    text.replace('<', \"&lt;\").replace('>', \"&gt;\")\n }\n \n const STYLE: &str = \""}, {"sha": "8af0d8007d3c05b1c18f60b354213229dbcd4e5a", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -78,7 +78,7 @@ pub(super) fn ra_fixture(\n     Some(())\n }\n \n-const RUSTDOC_FENCE: &'static str = \"```\";\n+const RUSTDOC_FENCE: &str = \"```\";\n \n /// Injection of syntax highlighting of doctests.\n pub(super) fn doc_comment("}, {"sha": "2070cca142e5bd8e225b31b9f66fb0d9c8d18ceb", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n     let match_arm_list = match_expr.match_arm_list()?;\n     let target_range = ctx.sema.original_range(match_expr.syntax()).range;\n \n-    if let None = cursor_at_trivial_match_arm_list(&ctx, &match_expr, &match_arm_list) {\n+    if let None = cursor_at_trivial_match_arm_list(ctx, &match_expr, &match_arm_list) {\n         let arm_list_range = ctx.sema.original_range(match_arm_list.syntax()).range;\n         let cursor_in_range = arm_list_range.contains_range(ctx.selection_trimmed());\n         if cursor_in_range {"}, {"sha": "e48a1cd9ef254baa5bd4da46a9b3f56641897946", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -1448,7 +1448,7 @@ fn make_body(\n                 .filter(|it| text_range.contains_range(it.text_range()))\n                 .map(|it| match &it {\n                     syntax::NodeOrToken::Node(n) => syntax::NodeOrToken::Node(\n-                        rewrite_body_segment(ctx, &fun.params, &handler, &n),\n+                        rewrite_body_segment(ctx, &fun.params, &handler, n),\n                     ),\n                     _ => it,\n                 })\n@@ -1518,7 +1518,7 @@ fn make_body(\n                 make::expr_path(make::path_from_text(\"ControlFlow::Continue\")),\n                 make::arg_list(iter::once(make::expr_unit())),\n             );\n-            with_tail_expr(block, controlflow_continue.into())\n+            with_tail_expr(block, controlflow_continue)\n         }\n         FlowHandler::IfOption { .. } => {\n             let none = make::expr_path(make::ext::ident_path(\"None\"));"}, {"sha": "57ce34ceebf6fe8e57411ab58e54cb43f4dbbbb7", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 56, "deletions": 81, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -103,7 +103,7 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     //for change_visibility and usages for first point mentioned above in the process\n     let (usages_to_be_processed, record_fields) = module.get_usages_and_record_fields(ctx);\n \n-    let import_paths_to_be_removed = module.resolve_imports(curr_parent_module, &ctx);\n+    let import_paths_to_be_removed = module.resolve_imports(curr_parent_module, ctx);\n     module.body_items = module.change_visibility(record_fields)?;\n     if module.body_items.len() == 0 {\n         return None;\n@@ -190,20 +190,18 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n             }\n \n             if let Some(impl_) = impl_parent {\n-                let node_to_be_removed;\n-\n                 // Remove complete impl block if it has only one child (as such it will be empty\n                 // after deleting that child)\n-                if impl_child_count == 1 {\n-                    node_to_be_removed = impl_.syntax()\n+                let node_to_be_removed = if impl_child_count == 1 {\n+                    impl_.syntax()\n                 } else {\n                     //Remove selected node\n-                    node_to_be_removed = &node;\n-                }\n+                    &node\n+                };\n \n                 builder.delete(node_to_be_removed.text_range());\n                 // Remove preceding indentation from node\n-                if let Some(range) = indent_range_before_given_node(&node_to_be_removed) {\n+                if let Some(range) = indent_range_before_given_node(node_to_be_removed) {\n                     builder.delete(range);\n                 }\n \n@@ -267,7 +265,7 @@ impl Module {\n                 match (item.syntax()) {\n                     ast::Adt(it) => {\n                         if let Some( nod ) = ctx.sema.to_def(&it) {\n-                            let node_def = Definition::Adt(nod.into());\n+                            let node_def = Definition::Adt(nod);\n                             self.expand_and_group_usages_file_wise(ctx, node_def, &mut refs);\n \n                             //Enum Fields are not allowed to explicitly specify pub, it is implied\n@@ -301,25 +299,25 @@ impl Module {\n                     },\n                     ast::TypeAlias(it) => {\n                         if let Some( nod ) = ctx.sema.to_def(&it) {\n-                            let node_def = Definition::TypeAlias(nod.into());\n+                            let node_def = Definition::TypeAlias(nod);\n                             self.expand_and_group_usages_file_wise(ctx, node_def, &mut refs);\n                         }\n                     },\n                     ast::Const(it) => {\n                         if let Some( nod ) = ctx.sema.to_def(&it) {\n-                            let node_def = Definition::Const(nod.into());\n+                            let node_def = Definition::Const(nod);\n                             self.expand_and_group_usages_file_wise(ctx, node_def, &mut refs);\n                         }\n                     },\n                     ast::Static(it) => {\n                         if let Some( nod ) = ctx.sema.to_def(&it) {\n-                            let node_def = Definition::Static(nod.into());\n+                            let node_def = Definition::Static(nod);\n                             self.expand_and_group_usages_file_wise(ctx, node_def, &mut refs);\n                         }\n                     },\n                     ast::Fn(it) => {\n                         if let Some( nod ) = ctx.sema.to_def(&it) {\n-                            let node_def = Definition::Function(nod.into());\n+                            let node_def = Definition::Function(nod);\n                             self.expand_and_group_usages_file_wise(ctx, node_def, &mut refs);\n                         }\n                     },\n@@ -333,7 +331,7 @@ impl Module {\n             }\n         });\n \n-        return (refs, adt_fields);\n+        (refs, adt_fields)\n     }\n \n     fn expand_and_group_usages_file_wise(\n@@ -417,12 +415,9 @@ impl Module {\n         replacements.append(&mut impl_item_replacements);\n \n         record_field_parents.into_iter().for_each(|x| {\n-            x.1.descendants().filter_map(|x| ast::RecordField::cast(x)).for_each(|desc| {\n-                let is_record_field_present = record_fields\n-                    .clone()\n-                    .into_iter()\n-                    .find(|x| x.to_string() == desc.to_string())\n-                    .is_some();\n+            x.1.descendants().filter_map(ast::RecordField::cast).for_each(|desc| {\n+                let is_record_field_present =\n+                    record_fields.clone().into_iter().any(|x| x.to_string() == desc.to_string());\n                 if is_record_field_present {\n                     replacements.push((desc.visibility(), desc.syntax().clone()));\n                 }\n@@ -520,7 +515,7 @@ impl Module {\n         let mut exists_inside_sel = false;\n         let mut exists_outside_sel = false;\n         usage_res.clone().into_iter().for_each(|x| {\n-            let mut non_use_nodes_itr = (&x.1).into_iter().filter_map(|x| {\n+            let mut non_use_nodes_itr = (&x.1).iter().filter_map(|x| {\n                 if find_node_at_range::<ast::Use>(file.syntax(), x.range).is_none() {\n                     let path_opt = find_node_at_range::<ast::Path>(file.syntax(), x.range);\n                     return path_opt;\n@@ -531,15 +526,11 @@ impl Module {\n \n             if non_use_nodes_itr\n                 .clone()\n-                .find(|x| !selection_range.contains_range(x.syntax().text_range()))\n-                .is_some()\n+                .any(|x| !selection_range.contains_range(x.syntax().text_range()))\n             {\n                 exists_outside_sel = true;\n             }\n-            if non_use_nodes_itr\n-                .find(|x| selection_range.contains_range(x.syntax().text_range()))\n-                .is_some()\n-            {\n+            if non_use_nodes_itr.any(|x| selection_range.contains_range(x.syntax().text_range())) {\n                 exists_inside_sel = true;\n             }\n         });\n@@ -556,14 +547,14 @@ impl Module {\n             let file_id = x.0;\n             let mut use_opt: Option<ast::Use> = None;\n             if file_id == curr_file_id {\n-                (&x.1).into_iter().for_each(|x| {\n+                (&x.1).iter().for_each(|x| {\n                     let node_opt: Option<ast::Use> = find_node_at_range(file.syntax(), x.range);\n                     if let Some(node) = node_opt {\n                         use_opt = Some(node);\n                     }\n                 });\n             }\n-            return use_opt;\n+            use_opt\n         });\n \n         let mut use_tree_str_opt: Option<Vec<ast::Path>> = None;\n@@ -646,7 +637,7 @@ impl Module {\n             return Some(item);\n         }\n \n-        return None;\n+        None\n     }\n \n     fn process_use_stmt_for_import_resolve(\n@@ -700,7 +691,7 @@ fn does_source_exists_outside_sel_in_same_mod(\n             if let Some(ast_module) = &curr_parent_module {\n                 if let Some(hir_module) = x.parent(ctx.db()) {\n                     have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, hir_module, ctx).is_some();\n+                        compare_hir_and_ast_module(ast_module, hir_module, ctx).is_some();\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n                     have_same_parent = source_file_id == curr_file_id;\n@@ -722,14 +713,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::Function(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod =\n@@ -739,14 +728,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::Adt(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod =\n@@ -756,14 +743,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::Variant(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod =\n@@ -773,14 +758,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::Const(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod =\n@@ -790,14 +773,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::Static(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod =\n@@ -807,14 +788,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::Trait(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod =\n@@ -824,14 +803,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::TypeAlias(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod =\n@@ -842,7 +819,7 @@ fn does_source_exists_outside_sel_in_same_mod(\n         _ => {}\n     }\n \n-    return source_exists_outside_sel_in_same_mod;\n+    source_exists_outside_sel_in_same_mod\n }\n \n fn get_replacements_for_visibilty_change(\n@@ -890,7 +867,7 @@ fn get_replacements_for_visibilty_change(\n         }\n     });\n \n-    return (body_items, replacements, record_field_parents, impls);\n+    (body_items, replacements, record_field_parents, impls)\n }\n \n fn get_use_tree_paths_from_path(\n@@ -943,15 +920,13 @@ fn compare_hir_and_ast_module(\n         return None;\n     }\n \n-    return Some(());\n+    Some(())\n }\n \n fn indent_range_before_given_node(node: &SyntaxNode) -> Option<TextRange> {\n-    let x = node.siblings_with_tokens(syntax::Direction::Prev).find(|x| {\n-        return x.kind() == WHITESPACE;\n-    })?;\n-\n-    return Some(x.text_range());\n+    node.siblings_with_tokens(syntax::Direction::Prev)\n+        .find(|x| x.kind() == WHITESPACE)\n+        .map(|x| x.text_range())\n }\n \n #[cfg(test)]"}, {"sha": "ecf9feb0e5519358f6454ea537c7e9b8de32e691", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         }\n     }\n \n-    let reference_modifier = match get_receiver_type(&ctx, &to_extract) {\n+    let reference_modifier = match get_receiver_type(ctx, &to_extract) {\n         Some(receiver_type) if receiver_type.is_mutable_reference() => \"&mut \",\n         Some(receiver_type) if receiver_type.is_reference() => \"&\",\n         _ => \"\","}, {"sha": "f6e0d619de8e88a450480bbf47b0e05591abb3ec", "filename": "crates/ide_assists/src/handlers/generate_delegate_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -156,7 +156,7 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext)\n                             }\n                             None => {\n                                 let offset = strukt.syntax().text_range().end();\n-                                let snippet = format!(\"\\n\\n{}\", impl_def.syntax().to_string());\n+                                let snippet = format!(\"\\n\\n{}\", impl_def.syntax());\n                                 builder.insert(offset, snippet);\n                             }\n                         }"}, {"sha": "15a07492ec039745f86494d92d1c699ae9a2abb9", "filename": "crates/ide_assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn generate_documentation_template(\n \n     let parent_syntax = ast_func.syntax();\n     let text_range = parent_syntax.text_range();\n-    let indent_level = IndentLevel::from_node(&parent_syntax);\n+    let indent_level = IndentLevel::from_node(parent_syntax);\n \n     acc.add(\n         AssistId(\"generate_documentation_template\", AssistKind::Generate),\n@@ -202,7 +202,7 @@ fn all_parent_mods_public(hir_func: &hir::Function, ctx: &AssistContext) -> bool\n \n /// Returns the name of the current crate\n fn crate_name(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<String> {\n-    let krate = ctx.sema.scope(&ast_func.syntax()).module()?.krate();\n+    let krate = ctx.sema.scope(ast_func.syntax()).module()?.krate();\n     Some(krate.display_name(ctx.db())?.to_string())\n }\n \n@@ -338,7 +338,7 @@ fn function_call(\n     is_unsafe: bool,\n ) -> Option<String> {\n     let name = ast_func.name()?;\n-    let arguments = arguments_from_params(&param_list);\n+    let arguments = arguments_from_params(param_list);\n     let function_call = if param_list.self_param().is_some() {\n         format!(\"{}.{}({})\", self_name?, name, arguments)\n     } else if let Some(implementation) = self_partial_type(ast_func) {"}, {"sha": "994d78303f2e8f97ffc85e7b20fbf84796e2973b", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -305,7 +305,7 @@ fn inline(\n     let body = fn_body.clone_for_update();\n     let usages_for_locals = |local| {\n         Definition::Local(local)\n-            .usages(&sema)\n+            .usages(sema)\n             .all()\n             .references\n             .remove(&function_def_file_id)\n@@ -369,12 +369,12 @@ fn inline(\n             // inline single use literals\n             [usage] if matches!(expr, ast::Expr::Literal(_)) => {\n                 cov_mark::hit!(inline_call_inline_literal);\n-                inline_direct(usage, &expr);\n+                inline_direct(usage, expr);\n             }\n             // inline direct local arguments\n-            [_, ..] if expr_as_name_ref(&expr).is_some() => {\n+            [_, ..] if expr_as_name_ref(expr).is_some() => {\n                 cov_mark::hit!(inline_call_inline_locals);\n-                usages.into_iter().for_each(|usage| inline_direct(usage, &expr));\n+                usages.iter().for_each(|usage| inline_direct(usage, expr));\n             }\n             // can't inline, emit a let statement\n             _ => {"}, {"sha": "c87bd7f1527e8a4f3a5c98f0799c7a7f88585040", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n     }\n     let current_expr = current_arm.expr()?;\n     let current_text_range = current_arm.syntax().text_range();\n-    let current_arm_types = get_arm_types(&ctx, &current_arm);\n+    let current_arm_types = get_arm_types(ctx, &current_arm);\n \n     // We check if the following match arms match this one. We could, but don't,\n     // compare to the previous match arm as well.\n@@ -99,14 +99,11 @@ fn are_same_types(\n     arm: &ast::MatchArm,\n     ctx: &AssistContext,\n ) -> bool {\n-    let arm_types = get_arm_types(&ctx, &arm);\n+    let arm_types = get_arm_types(ctx, arm);\n     for (other_arm_type_name, other_arm_type) in arm_types {\n         match (current_arm_types.get(&other_arm_type_name), other_arm_type) {\n             (Some(Some(current_arm_type)), Some(other_arm_type))\n-                if other_arm_type.original == current_arm_type.original =>\n-            {\n-                ()\n-            }\n+                if other_arm_type.original == current_arm_type.original => {}\n             _ => return false,\n         }\n     }\n@@ -163,7 +160,7 @@ fn get_arm_types(\n         }\n     }\n \n-    recurse(&mut mapping, &context, &arm.pat());\n+    recurse(&mut mapping, context, &arm.pat());\n     mapping\n }\n "}, {"sha": "f77471d80cba9fc15572dba8fd1550c57d49ec09", "filename": "crates/ide_assists/src/handlers/number_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -57,7 +57,7 @@ fn remove_separators(acc: &mut Assists, literal: ast::IntNumber) -> Option<()> {\n         AssistId(\"reformat_number_literal\", AssistKind::RefactorInline),\n         \"Remove digit separators\",\n         range,\n-        |builder| builder.replace(range, literal.text().replace(\"_\", \"\")),\n+        |builder| builder.replace(range, literal.text().replace('_', \"\")),\n     )\n }\n "}, {"sha": "0f232caab631f68701668427c7d27465db51ed96", "filename": "crates/ide_assists/src/handlers/qualify_method_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn qualify_method_call(acc: &mut Assists, ctx: &AssistContext) -> Opt\n     let range = call.syntax().text_range();\n     let resolved_call = ctx.sema.resolve_method_call(&call)?;\n \n-    let current_module = ctx.sema.scope(&call.syntax()).module()?;\n+    let current_module = ctx.sema.scope(call.syntax()).module()?;\n     let target_module_def = ModuleDef::from(resolved_call);\n     let item_in_ns = ItemInNs::from(target_module_def);\n     let receiver_path = current_module"}, {"sha": "30b994806ba3a5fe50d130b6ac7c2ec598b920ed", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -86,7 +86,7 @@ fn gen_clone_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                     None => {\n                         let pattern = make::path_pat(variant_name.clone());\n                         let variant_expr = make::expr_path(variant_name);\n-                        arms.push(make::match_arm(Some(pattern.into()), None, variant_expr));\n+                        arms.push(make::match_arm(Some(pattern), None, variant_expr));\n                     }\n                 }\n             }\n@@ -117,7 +117,7 @@ fn gen_clone_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                     let mut fields = vec![];\n                     for (i, _) in field_list.fields().enumerate() {\n                         let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n-                        let target = make::expr_field(f_path, &format!(\"{}\", i)).into();\n+                        let target = make::expr_field(f_path, &format!(\"{}\", i));\n                         fields.push(gen_clone_call(target));\n                     }\n                     let struct_name = make::expr_path(make::ext::ident_path(\"Self\"));\n@@ -151,7 +151,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n             for variant in list.variants() {\n                 let name = variant.name()?;\n                 let variant_name = make::ext::path_from_idents([\"Self\", &format!(\"{}\", name)])?;\n-                let target = make::expr_path(make::ext::ident_path(\"f\").into());\n+                let target = make::expr_path(make::ext::ident_path(\"f\"));\n \n                 match variant.field_list() {\n                     Some(ast::FieldList::RecordFieldList(list)) => {\n@@ -206,7 +206,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n                             // => <expr>.field(field)\n                             let method_name = make::name_ref(\"field\");\n-                            let field_path = &format!(\"{}\", name);\n+                            let field_path = &name.to_string();\n                             let field_path = make::expr_path(make::ext::ident_path(field_path));\n                             let args = make::arg_list(vec![field_path]);\n                             expr = make::expr_method_call(expr, method_name, args);\n@@ -227,11 +227,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                         let macro_call = make::expr_macro_call(macro_name, args);\n \n                         let variant_name = make::path_pat(variant_name);\n-                        arms.push(make::match_arm(\n-                            Some(variant_name.into()),\n-                            None,\n-                            macro_call.into(),\n-                        ));\n+                        arms.push(make::match_arm(Some(variant_name), None, macro_call));\n                     }\n                 }\n             }\n@@ -264,7 +260,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                         let f_name = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n                         let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n                         let f_path = make::expr_ref(f_path, false);\n-                        let f_path = make::expr_field(f_path, &format!(\"{}\", name)).into();\n+                        let f_path = make::expr_field(f_path, &format!(\"{}\", name));\n                         let args = make::arg_list([f_name, f_path]);\n                         expr = make::expr_method_call(expr, make::name_ref(\"field\"), args);\n                     }\n@@ -278,7 +274,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                     for (i, _) in field_list.fields().enumerate() {\n                         let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n                         let f_path = make::expr_ref(f_path, false);\n-                        let f_path = make::expr_field(f_path, &format!(\"{}\", i)).into();\n+                        let f_path = make::expr_field(f_path, &format!(\"{}\", i));\n                         let method = make::name_ref(\"field\");\n                         expr = make::expr_method_call(expr, method, make::arg_list(Some(f_path)));\n                     }\n@@ -406,7 +402,7 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n     }\n \n     fn gen_record_pat_field(field_name: &str, pat_name: &str) -> ast::RecordPatField {\n-        let pat = make::ext::simple_ident_pat(make::name(&pat_name));\n+        let pat = make::ext::simple_ident_pat(make::name(pat_name));\n         let name_ref = make::name_ref(field_name);\n         make::record_pat_field(name_ref, pat.into())\n     }\n@@ -455,10 +451,10 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                             let field_name = field.name()?.to_string();\n \n                             let l_name = &format!(\"l_{}\", field_name);\n-                            l_fields.push(gen_record_pat_field(&field_name, &l_name));\n+                            l_fields.push(gen_record_pat_field(&field_name, l_name));\n \n                             let r_name = &format!(\"r_{}\", field_name);\n-                            r_fields.push(gen_record_pat_field(&field_name, &r_name));\n+                            r_fields.push(gen_record_pat_field(&field_name, r_name));\n \n                             let lhs = make::expr_path(make::ext::ident_path(l_name));\n                             let rhs = make::expr_path(make::ext::ident_path(r_name));"}, {"sha": "58d0a39949603f62eb075a3bb67a0acd27c8f1aa", "filename": "crates/ide_completion/src/completions/attribute/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n         Some(\"target_endian\") => [\"little\", \"big\"].into_iter().for_each(add_completion),\n         Some(name) => {\n             if let Some(krate) = ctx.krate {\n-                krate.potential_cfg(ctx.db).get_cfg_values(&name).cloned().for_each(|s| {\n+                krate.potential_cfg(ctx.db).get_cfg_values(name).cloned().for_each(|s| {\n                     let insert_text = format!(r#\"\"{}\"\"#, s);\n                     let mut item =\n                         CompletionItem::new(SymbolKind::BuiltinAttr, ctx.source_range(), s);"}, {"sha": "3c0e43ceacdca1282c530cf846e3249f085a555c", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -46,7 +46,6 @@ pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n                     acc.add_resolution(ctx, name, def);\n                 }\n             }\n-            return;\n         }\n         None if is_absolute_path => acc.add_crate_roots(ctx),\n         // only show modules in a fresh UseTree"}, {"sha": "1dcec5f4939287bd91813229c341a2c7ca2d3f1d", "filename": "crates/ide_completion/src/completions/attribute/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -14,7 +14,7 @@ pub(super) fn complete_repr(acc: &mut Completions, ctx: &CompletionContext, inpu\n                     ast::Expr::PathExpr(path) => path.path()?.as_single_name_ref(),\n                     ast::Expr::CallExpr(call) => match call.expr()? {\n                         ast::Expr::PathExpr(path) => path.path()?.as_single_name_ref(),\n-                        _ => return None,\n+                        _ => None,\n                     },\n                     _ => None,\n                 })"}, {"sha": "c5bc91d73d0dbf322052dcef349e8a07501e2b0b", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -31,7 +31,7 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n             CompletionItem::new(CompletionItemKind::Binding, ctx.source_range(), label)\n         };\n         let mut item = match &comma_wrapper {\n-            Some(fmt) => mk_item(&fmt(&label)),\n+            Some(fmt) => mk_item(&fmt(label)),\n             None => mk_item(label),\n         };\n         item.lookup_by(lookup);\n@@ -40,7 +40,7 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n \n     match param_kind {\n         ParamKind::Function(function) => {\n-            fill_fn_params(ctx, function, &param_list, add_new_item_to_acc);\n+            fill_fn_params(ctx, function, param_list, add_new_item_to_acc);\n         }\n         ParamKind::Closure(closure) => {\n             let stmt_list = closure.syntax().ancestors().find_map(ast::StmtList::cast)?;"}, {"sha": "ead957a3f1a76362b253dfecd394e8aa7ec14a9c", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -51,7 +51,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         None => return,\n     };\n \n-    let postfix_snippet = match build_postfix_snippet_builder(ctx, cap, &dot_receiver) {\n+    let postfix_snippet = match build_postfix_snippet_builder(ctx, cap, dot_receiver) {\n         Some(it) => it,\n         None => return,\n     };\n@@ -265,7 +265,7 @@ fn add_custom_postfix_completions(\n                 Some(imports) => imports,\n                 None => return,\n             };\n-            let body = snippet.postfix_snippet(&receiver_text);\n+            let body = snippet.postfix_snippet(receiver_text);\n             let mut builder =\n                 postfix_snippet(trigger, snippet.description.as_deref().unwrap_or_default(), &body);\n             builder.documentation(Documentation::new(format!(\"```rust\\n{}\\n```\", body)));"}, {"sha": "ad93be4210a79ec2d1f3ae58fa40319a8f4a52fd", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -74,7 +74,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         }\n         _ => {\n             // Add associated types on type parameters and `Self`.\n-            ctx.scope.assoc_type_shorthand_candidates(&resolution, |_, alias| {\n+            ctx.scope.assoc_type_shorthand_candidates(resolution, |_, alias| {\n                 acc.add_type_alias(ctx, alias);\n                 None::<()>\n             });"}, {"sha": "673ee51f78fa60a0463d7213c7fa96d6d78d2bda", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -112,7 +112,7 @@ fn add_custom_completions(\n                 None => return,\n             };\n             let body = snip.snippet();\n-            let mut builder = snippet(ctx, cap, &trigger, &body);\n+            let mut builder = snippet(ctx, cap, trigger, &body);\n             builder.documentation(Documentation::new(format!(\"```rust\\n{}\\n```\", body)));\n             for import in imports.into_iter() {\n                 builder.add_import(import);"}, {"sha": "e60c3b04e85721c7bd6c10a6cd024fc1160f9580", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -150,9 +150,9 @@ impl IdentClass {\n         sema: &Semantics<RootDatabase>,\n         lifetime: &ast::Lifetime,\n     ) -> Option<IdentClass> {\n-        NameRefClass::classify_lifetime(sema, &lifetime)\n+        NameRefClass::classify_lifetime(sema, lifetime)\n             .map(IdentClass::NameRefClass)\n-            .or_else(|| NameClass::classify_lifetime(sema, &lifetime).map(IdentClass::NameClass))\n+            .or_else(|| NameClass::classify_lifetime(sema, lifetime).map(IdentClass::NameClass))\n     }\n \n     pub fn definitions(self) -> ArrayVec<Definition, 2> {\n@@ -306,7 +306,7 @@ impl NameClass {\n \n         if let Some(it) = ast::LifetimeParam::cast(parent.clone()) {\n             sema.to_def(&it).map(Into::into).map(Definition::GenericParam)\n-        } else if let Some(it) = ast::Label::cast(parent.clone()) {\n+        } else if let Some(it) = ast::Label::cast(parent) {\n             sema.to_def(&it).map(Definition::Label)\n         } else {\n             None"}, {"sha": "cc9f2f9151d06b4f357bd2366dc493bcdc15819e", "filename": "crates/ide_db/src/famous_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -108,7 +108,7 @@ impl FamousDefs<'_, '_> {\n             self.test(),\n             self.proc_macro(),\n         ])\n-        .filter_map(|it| it)\n+        .flatten()\n     }\n \n     fn find_trait(&self, path: &str) -> Option<Trait> {"}, {"sha": "4046c2febb6b18f503ea16310e7e47b29f326fa6", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -3,7 +3,7 @@\n use std::collections::VecDeque;\n \n use base_db::FileId;\n-use hir::{ItemInNs, Macro, ModuleDef, Name, Semantics};\n+use hir::{ItemInNs, ModuleDef, Name, Semantics};\n use syntax::{\n     ast::{self, make},\n     AstToken, SyntaxKind, SyntaxToken, TokenAtOffset,\n@@ -13,9 +13,9 @@ use crate::{defs::Definition, generated, RootDatabase};\n \n pub fn item_name(db: &RootDatabase, item: ItemInNs) -> Option<Name> {\n     match item {\n-        ItemInNs::Types(module_def_id) => ModuleDef::from(module_def_id).name(db),\n-        ItemInNs::Values(module_def_id) => ModuleDef::from(module_def_id).name(db),\n-        ItemInNs::Macros(macro_def_id) => Some(Macro::from(macro_def_id).name(db)),\n+        ItemInNs::Types(module_def_id) => module_def_id.name(db),\n+        ItemInNs::Values(module_def_id) => module_def_id.name(db),\n+        ItemInNs::Macros(macro_def_id) => Some(macro_def_id.name(db)),\n     }\n }\n "}, {"sha": "9a09c40ee64dcf8799bbcc8a9500d17c32804002", "filename": "crates/ide_db/src/imports/import_assets.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fimports%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fimports%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports%2Fimport_assets.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -430,8 +430,8 @@ fn module_with_segment_name(\n     candidate: ItemInNs,\n ) -> Option<Module> {\n     let mut current_module = match candidate {\n-        ItemInNs::Types(module_def_id) => ModuleDef::from(module_def_id).module(db),\n-        ItemInNs::Values(module_def_id) => ModuleDef::from(module_def_id).module(db),\n+        ItemInNs::Types(module_def_id) => module_def_id.module(db),\n+        ItemInNs::Values(module_def_id) => module_def_id.module(db),\n         ItemInNs::Macros(macro_def_id) => ModuleDef::from(macro_def_id).module(db),\n     };\n     while let Some(module) = current_module {"}, {"sha": "9a9097ba5e25ecdf9092eb14b27ad9199fcebfbe", "filename": "crates/ide_db/src/imports/merge_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fimports%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fimports%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports%2Fmerge_imports.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -75,7 +75,7 @@ fn try_merge_trees_mut(lhs: &ast::UseTree, rhs: &ast::UseTree, merge: MergeBehav\n         lhs.split_prefix(&lhs_prefix);\n         rhs.split_prefix(&rhs_prefix);\n     }\n-    recursive_merge(&lhs, &rhs, merge)\n+    recursive_merge(lhs, rhs, merge)\n }\n \n /// Recursively merges rhs to lhs\n@@ -157,7 +157,7 @@ fn recursive_merge(lhs: &ast::UseTree, rhs: &ast::UseTree, merge: MergeBehavior)\n                 }\n                 lhs_t.split_prefix(&lhs_prefix);\n                 rhs_t.split_prefix(&rhs_prefix);\n-                recursive_merge(&lhs_t, &rhs_t, merge)?;\n+                recursive_merge(lhs_t, &rhs_t, merge)?;\n             }\n             Err(_)\n                 if merge == MergeBehavior::Module"}, {"sha": "07a57c883b2d93ee3e0e8b9a3e07852a07244b6d", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -115,7 +115,7 @@ fn find_items<'a>(\n         });\n \n     // Query the local crate using the symbol index.\n-    let local_results = symbol_index::crate_symbols(db, krate.into(), local_query)\n+    let local_results = symbol_index::crate_symbols(db, krate, local_query)\n         .into_iter()\n         .filter_map(move |local_candidate| get_name_definition(sema, &local_candidate))\n         .filter_map(|name_definition_to_import| match name_definition_to_import {"}, {"sha": "a812c838acc38a955ae37c9c11f5c9ce8b9564cf", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -120,8 +120,7 @@ fn library_symbols(db: &dyn SymbolsDatabase, source_root_id: SourceRootId) -> Ar\n         // we specifically avoid calling SymbolsDatabase::module_symbols here, even they do the same thing,\n         // as the index for a library is not going to really ever change, and we do not want to store each\n         // module's index in salsa.\n-        .map(|module| SymbolCollector::collect(db.upcast(), module))\n-        .flatten()\n+        .flat_map(|module| SymbolCollector::collect(db.upcast(), module))\n         .collect();\n \n     Arc::new(SymbolIndex::new(symbols))"}, {"sha": "7f5563d9d09305e04d4f6cafe8811e2af9336a4e", "filename": "crates/ide_db/src/syntax_helpers/insert_whitespace_into_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -69,7 +69,7 @@ pub fn insert_ws_into(syn: SyntaxNode) -> SyntaxNode {\n                 if indent > 0 {\n                     mods.push(do_indent(after, tok, indent));\n                 }\n-                mods.push(do_nl(after, &tok));\n+                mods.push(do_nl(after, tok));\n             }\n             R_CURLY if is_last(|it| it != L_CURLY, true) => {\n                 indent = indent.saturating_sub(1);\n@@ -85,7 +85,7 @@ pub fn insert_ws_into(syn: SyntaxNode) -> SyntaxNode {\n                 }\n                 mods.push(do_nl(after, tok));\n             }\n-            LIFETIME_IDENT if is_next(|it| is_text(it), true) => {\n+            LIFETIME_IDENT if is_next(is_text, true) => {\n                 mods.push(do_ws(after, tok));\n             }\n             AS_KW | DYN_KW | IMPL_KW => {"}, {"sha": "61c05c7ffd19c276484672885d6d660d7f1037ad", "filename": "crates/ide_db/src/tests/sourcegen_lints.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -75,7 +75,7 @@ fn generate_lint_descriptor(buf: &mut String) {\n                 format!(\"lint group for: {}\", lints.trim()).into(),\n                 lints\n                     .split_ascii_whitespace()\n-                    .map(|s| s.trim().trim_matches(',').replace(\"-\", \"_\"))\n+                    .map(|s| s.trim().trim_matches(',').replace('-', \"_\"))\n                     .collect(),\n             )\n         });\n@@ -85,18 +85,18 @@ fn generate_lint_descriptor(buf: &mut String) {\n         .sorted_by(|(ident, ..), (ident2, ..)| ident.cmp(ident2))\n         .collect::<Vec<_>>();\n     for (name, description, ..) in &lints {\n-        push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description);\n+        push_lint_completion(buf, &name.replace('-', \"_\"), description);\n     }\n     buf.push_str(\"];\\n\");\n     buf.push_str(r#\"pub const DEFAULT_LINT_GROUPS: &[LintGroup] = &[\"#);\n     for (name, description, children) in &lints {\n         if !children.is_empty() {\n             // HACK: warnings is emitted with a general description, not with its members\n             if name == &\"warnings\" {\n-                push_lint_group(buf, &name, &description, &Vec::new());\n+                push_lint_group(buf, name, description, &Vec::new());\n                 continue;\n             }\n-            push_lint_group(buf, &name.replace(\"-\", \"_\"), &description, children);\n+            push_lint_group(buf, &name.replace('-', \"_\"), description, children);\n         }\n     }\n     buf.push('\\n');\n@@ -124,7 +124,7 @@ fn generate_lint_descriptor(buf: &mut String) {\n                     format!(\"lint group for: {}\", lints.trim()).into(),\n                     lints\n                         .split_ascii_whitespace()\n-                        .map(|s| s.trim().trim_matches(',').replace(\"-\", \"_\"))\n+                        .map(|s| s.trim().trim_matches(',').replace('-', \"_\"))\n                         .collect(),\n                 )\n             },\n@@ -136,14 +136,14 @@ fn generate_lint_descriptor(buf: &mut String) {\n         .collect::<Vec<_>>();\n \n     for (name, description, ..) in &lints_rustdoc {\n-        push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description)\n+        push_lint_completion(buf, &name.replace('-', \"_\"), description)\n     }\n     buf.push_str(\"];\\n\");\n \n     buf.push_str(r#\"pub const RUSTDOC_LINT_GROUPS: &[LintGroup] = &[\"#);\n     for (name, description, children) in &lints_rustdoc {\n         if !children.is_empty() {\n-            push_lint_group(buf, &name.replace(\"-\", \"_\"), &description, children);\n+            push_lint_group(buf, &name.replace('-', \"_\"), description, children);\n         }\n     }\n     buf.push('\\n');\n@@ -159,7 +159,7 @@ fn generate_feature_descriptor(buf: &mut String, src_dir: &Path) {\n             path.extension().unwrap_or_default().to_str().unwrap_or_default() == \"md\"\n         })\n         .map(|path| {\n-            let feature_ident = path.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\");\n+            let feature_ident = path.file_stem().unwrap().to_str().unwrap().replace('-', \"_\");\n             let doc = fs::read_to_string(path).unwrap();\n             (feature_ident, doc)\n         })"}, {"sha": "9d46e2b0785d1e8d5ce0dfd88e8f6a12fd822cd0", "filename": "crates/ide_diagnostics/src/handlers/unlinked_file.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -117,12 +117,7 @@ fn make_fixes(\n     }\n \n     // If there are existing `mod m;` items, append after them (after the first group of them, rather).\n-    match ast\n-        .items()\n-        .skip_while(|item| !is_outline_mod(item))\n-        .take_while(|item| is_outline_mod(item))\n-        .last()\n-    {\n+    match ast.items().skip_while(|item| !is_outline_mod(item)).take_while(is_outline_mod).last() {\n         Some(last) => {\n             cov_mark::hit!(unlinked_file_append_to_existing_mods);\n             let offset = last.syntax().text_range().end();"}, {"sha": "21a0aa4284a57df6964b27743819127aa62de79e", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -170,9 +170,9 @@ fn convert_tokens<C: TokenConvertor>(conv: &mut C) -> tt::Subtree {\n             Some(it) => it,\n             None => break,\n         };\n-        let synth_id = token.synthetic_id(&conv);\n+        let synth_id = token.synthetic_id(conv);\n \n-        let kind = token.kind(&conv);\n+        let kind = token.kind(conv);\n         if kind == COMMENT {\n             if let Some(tokens) = conv.convert_doc_comment(&token) {\n                 // FIXME: There has to be a better way to do this\n@@ -227,7 +227,7 @@ fn convert_tokens<C: TokenConvertor>(conv: &mut C) -> tt::Subtree {\n                 continue;\n             }\n \n-            let spacing = match conv.peek().map(|next| next.kind(&conv)) {\n+            let spacing = match conv.peek().map(|next| next.kind(conv)) {\n                 Some(kind)\n                     if !kind.is_trivia()\n                         && kind.is_punct()\n@@ -240,7 +240,7 @@ fn convert_tokens<C: TokenConvertor>(conv: &mut C) -> tt::Subtree {\n                 }\n                 _ => tt::Spacing::Alone,\n             };\n-            let char = match token.to_char(&conv) {\n+            let char = match token.to_char(conv) {\n                 Some(c) => c,\n                 None => {\n                     panic!(\"Token from lexer must be single char: token = {:#?}\", token);"}, {"sha": "f9c2b9fda3aeed294fbb9d8a281bd3b75ae085d1", "filename": "crates/proc_macro_api/src/msg.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -74,14 +74,11 @@ pub trait Message: Serialize + DeserializeOwned {\n impl Message for Request {}\n impl Message for Response {}\n \n-fn read_json<'a>(\n-    inp: &mut impl BufRead,\n-    mut buf: &'a mut String,\n-) -> io::Result<Option<&'a String>> {\n+fn read_json<'a>(inp: &mut impl BufRead, buf: &'a mut String) -> io::Result<Option<&'a String>> {\n     loop {\n         buf.clear();\n \n-        inp.read_line(&mut buf)?;\n+        inp.read_line(buf)?;\n         buf.pop(); // Remove trailing '\\n'\n \n         if buf.is_empty() {"}, {"sha": "2b6c070fece3f746c0ca48e6c2940e8c801d5ea1", "filename": "crates/proc_macro_srv/src/dylib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -121,7 +121,7 @@ impl ProcMacroLibraryLibloading {\n         let abs_file: &AbsPath = file.try_into().map_err(|_| {\n             invalid_data_err(format!(\"expected an absolute path, got {}\", file.display()))\n         })?;\n-        let version_info = read_dylib_info(&abs_file)?;\n+        let version_info = read_dylib_info(abs_file)?;\n \n         let lib = load_library(file).map_err(invalid_data_err)?;\n         let abi = Abi::from_lib(&lib, symbol_name, version_info)?;"}, {"sha": "a93e18a9b09dd383e4ac22d114522810ec5068f3", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -1238,7 +1238,7 @@ fn schema(fields: &[(&'static str, &'static str, &[&str], &str)]) -> serde_json:\n     let map = fields\n         .iter()\n         .map(|(field, ty, doc, default)| {\n-            let name = field.replace(\"_\", \".\");\n+            let name = field.replace('_', \".\");\n             let name = format!(\"rust-analyzer.{}\", name);\n             let props = field_props(field, ty, doc, default);\n             (name, props)\n@@ -1385,7 +1385,7 @@ fn manual(fields: &[(&'static str, &'static str, &[&str], &str)]) -> String {\n     fields\n         .iter()\n         .map(|(field, _ty, doc, default)| {\n-            let name = format!(\"rust-analyzer.{}\", field.replace(\"_\", \".\"));\n+            let name = format!(\"rust-analyzer.{}\", field.replace('_', \".\"));\n             let doc = doc_comment_to_string(*doc);\n             if default.contains('\\n') {\n                 format!(\n@@ -1428,7 +1428,7 @@ mod tests {\n             .trim_start_matches('{')\n             .trim_end_matches('}')\n             .replace(\"  \", \"    \")\n-            .replace(\"\\n\", \"\\n            \")\n+            .replace('\\n', \"\\n            \")\n             .trim_start_matches('\\n')\n             .trim_end()\n             .to_string();"}, {"sha": "dd59923cb34f147d754f8dffca1600abe0d98cb3", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -24,15 +24,15 @@ fn diagnostic_severity(\n             // HACK: special case for `warnings` rustc lint.\n             Some(code)\n                 if config.warnings_as_hint.iter().any(|lint| {\n-                    lint == \"warnings\" || ide_db::helpers::lint_eq_or_in_group(&code.code, &lint)\n+                    lint == \"warnings\" || ide_db::helpers::lint_eq_or_in_group(&code.code, lint)\n                 }) =>\n             {\n                 lsp_types::DiagnosticSeverity::HINT\n             }\n             // HACK: special case for `warnings` rustc lint.\n             Some(code)\n                 if config.warnings_as_info.iter().any(|lint| {\n-                    lint == \"warnings\" || ide_db::helpers::lint_eq_or_in_group(&code.code, &lint)\n+                    lint == \"warnings\" || ide_db::helpers::lint_eq_or_in_group(&code.code, lint)\n                 }) =>\n             {\n                 lsp_types::DiagnosticSeverity::INFORMATION"}, {"sha": "8a7ee7e9c237b92e2aa9771522526398b1ef574b", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -48,7 +48,7 @@ impl<'a> RequestDispatcher<'a> {\n         };\n         let _pctx = stdx::panic_context::enter(panic_context);\n \n-        let result = f(&mut self.global_state, params);\n+        let result = f(self.global_state, params);\n         let response = result_to_response::<R>(id, result);\n \n         self.global_state.respond(response);"}, {"sha": "e63b6f490ba729045e24799ae575b49aa4888e8f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -532,7 +532,7 @@ pub(crate) fn handle_will_rename_files(\n     let mut source_change = source_changes.next().unwrap_or_default();\n     source_change.file_system_edits.clear();\n     // no collect here because we want to merge text edits on same file ids\n-    source_change.extend(source_changes.map(|it| it.source_file_edits).flatten());\n+    source_change.extend(source_changes.flat_map(|it| it.source_file_edits));\n     if source_change.source_file_edits.is_empty() {\n         Ok(None)\n     } else {"}, {"sha": "b62a830803b5487f30f8a0f69a134ae15e13a631", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -167,7 +167,7 @@ impl GlobalState {\n             self.handle_event(event)?\n         }\n \n-        return Err(\"client exited without proper shutdown sequence\".into());\n+        Err(\"client exited without proper shutdown sequence\".into())\n     }\n \n     fn next_event(&self, inbox: &Receiver<lsp_server::Message>) -> Option<Event> {"}, {"sha": "eb7e73236ab452827c6f24c8beb575a0e8cd41eb", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -533,7 +533,7 @@ mod bar;\n \n fn main() {{}}\n \"#,\n-        PROJECT = project.to_string(),\n+        PROJECT = project,\n     );\n \n     let server =\n@@ -972,7 +972,7 @@ fn main() {}\n           \"documentChanges\": [\n             {\n               \"textDocument\": {\n-                \"uri\": format!(\"file://{}\", tmp_dir_path.join(\"src\").join(\"lib.rs\").to_str().unwrap().to_string().replace(\"C:\\\\\", \"/c:/\").replace(\"\\\\\", \"/\")),\n+                \"uri\": format!(\"file://{}\", tmp_dir_path.join(\"src\").join(\"lib.rs\").to_str().unwrap().to_string().replace(\"C:\\\\\", \"/c:/\").replace('\\\\', \"/\")),\n                 \"version\": null\n               },\n               \"edits\": [\n@@ -1029,7 +1029,7 @@ fn main() {}\n           \"documentChanges\": [\n             {\n               \"textDocument\": {\n-                \"uri\": format!(\"file://{}\", tmp_dir_path.join(\"src\").join(\"lib.rs\").to_str().unwrap().to_string().replace(\"C:\\\\\", \"/c:/\").replace(\"\\\\\", \"/\")),\n+                \"uri\": format!(\"file://{}\", tmp_dir_path.join(\"src\").join(\"lib.rs\").to_str().unwrap().to_string().replace(\"C:\\\\\", \"/c:/\").replace('\\\\', \"/\")),\n                 \"version\": null\n               },\n               \"edits\": ["}, {"sha": "515cdfdc7c6a62d13b43658b890a33d0a6062509", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -374,8 +374,8 @@ fn lines_match(expected: &str, actual: &str) -> bool {\n     // Let's not deal with / vs \\ (windows...)\n     // First replace backslash-escaped backslashes with forward slashes\n     // which can occur in, for example, JSON output\n-    let expected = expected.replace(r\"\\\\\", \"/\").replace(r\"\\\", \"/\");\n-    let mut actual: &str = &actual.replace(r\"\\\\\", \"/\").replace(r\"\\\", \"/\");\n+    let expected = expected.replace(r\"\\\\\", \"/\").replace('\\\\', \"/\");\n+    let mut actual: &str = &actual.replace(r\"\\\\\", \"/\").replace('\\\\', \"/\");\n     for (i, part) in expected.split(\"[..]\").enumerate() {\n         match actual.find(part) {\n             Some(j) => {"}, {"sha": "1d0f393ec17e82a229ebb533ce1d20f3e04355a5", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -392,10 +392,8 @@ impl AstNode for CallableExpr {\n     {\n         if let Some(it) = ast::CallExpr::cast(syntax.clone()) {\n             Some(Self::Call(it))\n-        } else if let Some(it) = ast::MethodCallExpr::cast(syntax) {\n-            Some(Self::MethodCall(it))\n         } else {\n-            None\n+            ast::MethodCallExpr::cast(syntax).map(Self::MethodCall)\n         }\n     }\n "}, {"sha": "a69a77c7ee219d6ee9909877cc2adc68e82b0bda", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -49,7 +49,7 @@ pub mod ext {\n     ) -> Option<ast::Expr> {\n         let mut iter = parts.into_iter();\n         let base = expr_path(ext::ident_path(iter.next()?));\n-        let expr = iter.fold(base, |base, s| expr_field(base, s));\n+        let expr = iter.fold(base, expr_field);\n         Some(expr)\n     }\n "}, {"sha": "f1e5c2136f3cea94256ed5f85953b33aff62d3fa", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -307,7 +307,7 @@ impl ast::IntNumber {\n \n     pub fn value(&self) -> Option<u128> {\n         let (_, text, _) = self.split_into_parts();\n-        let value = u128::from_str_radix(&text.replace(\"_\", \"\"), self.radix() as u32).ok()?;\n+        let value = u128::from_str_radix(&text.replace('_', \"\"), self.radix() as u32).ok()?;\n         Some(value)\n     }\n "}, {"sha": "922d24bc75499184aadde0fc1dba647816ecaf14", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcf979f8a09e6504bbe540cbff6d640b959935c/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=5fcf979f8a09e6504bbe540cbff6d640b959935c", "patch": "@@ -94,14 +94,14 @@ impl TextEdit {\n \n         let text_size = TextSize::of(&*text);\n         let mut total_len = text_size;\n-        let mut max_total_len = text_size.clone();\n+        let mut max_total_len = text_size;\n         for indel in &self.indels {\n             total_len += TextSize::of(&indel.insert);\n             total_len -= indel.delete.len();\n             max_total_len = max(max_total_len, total_len);\n         }\n \n-        if let Some(additional) = max_total_len.checked_sub(text_size.into()) {\n+        if let Some(additional) = max_total_len.checked_sub(text_size) {\n             text.reserve(additional.into());\n         }\n "}]}