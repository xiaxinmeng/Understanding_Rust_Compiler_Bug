{"sha": "3e9ea5da6345d3f5fe88cbaaaa16637a8c59ec49", "node_id": "C_kwDOAAsO6NoAKDNlOWVhNWRhNjM0NWQzZjVmZTg4Y2JhYWFhMTY2MzdhOGM1OWVjNDk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-24T18:53:36Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-24T18:53:36Z"}, "message": "Adjust documentation.", "tree": {"sha": "69622308ab56aea314f65a254fe5a35fd6c31878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69622308ab56aea314f65a254fe5a35fd6c31878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e9ea5da6345d3f5fe88cbaaaa16637a8c59ec49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9ea5da6345d3f5fe88cbaaaa16637a8c59ec49", "html_url": "https://github.com/rust-lang/rust/commit/3e9ea5da6345d3f5fe88cbaaaa16637a8c59ec49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e9ea5da6345d3f5fe88cbaaaa16637a8c59ec49/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f9c004d355ecff847743de3c6a16e8f3c17ef71", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9c004d355ecff847743de3c6a16e8f3c17ef71", "html_url": "https://github.com/rust-lang/rust/commit/5f9c004d355ecff847743de3c6a16e8f3c17ef71"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "a29e389953eb35aaa470ff87e4d35c87a81e3193", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3e9ea5da6345d3f5fe88cbaaaa16637a8c59ec49/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9ea5da6345d3f5fe88cbaaaa16637a8c59ec49/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=3e9ea5da6345d3f5fe88cbaaaa16637a8c59ec49", "patch": "@@ -226,8 +226,8 @@ impl UnstableReason {\n     }\n }\n \n-/// Collects stability info from all stability attributes in `attrs`.\n-/// Returns `None` if no stability attributes are found.\n+/// Collects stability info from `stable`/`unstable`/`rustc_allowed_through_unstable_modules`\n+/// attributes in `attrs`.  Returns `None` if no stability attributes are found.\n pub fn find_stability(\n     sess: &Session,\n     attrs: &[Attribute],\n@@ -280,8 +280,8 @@ pub fn find_stability(\n     stab\n }\n \n-/// Collects stability info from all stability attributes in `attrs`.\n-/// Returns `None` if no stability attributes are found.\n+/// Collects stability info from `rustc_const_stable`/`rustc_const_unstable`/`rustc_promotable`\n+/// attributes in `attrs`.  Returns `None` if no stability attributes are found.\n pub fn find_const_stability(\n     sess: &Session,\n     attrs: &[Attribute],\n@@ -329,7 +329,7 @@ pub fn find_const_stability(\n     const_stab\n }\n \n-/// Collects stability info from all stability attributes in `attrs`.\n+/// Collects stability info from `rustc_default_body_unstable` attributes in `attrs`.\n /// Returns `None` if no stability attributes are found.\n pub fn find_body_stability(\n     sess: &Session,\n@@ -353,10 +353,12 @@ pub fn find_body_stability(\n     body_stab\n }\n \n+/// Read the content of a `stable`/`rustc_const_stable` attribute, and return the feature name and\n+/// its stability information.\n fn parse_stability(sess: &Session, attr: &Attribute) -> Option<(Symbol, StabilityLevel)> {\n     let meta = attr.meta()?;\n     let MetaItem { kind: MetaItemKind::List(ref metas), .. } = meta else { return None };\n-    let insert = |meta: &MetaItem, item: &mut Option<Symbol>| {\n+    let insert_or_error = |meta: &MetaItem, item: &mut Option<Symbol>| {\n         if item.is_some() {\n             handle_errors(\n                 &sess.parse_sess,\n@@ -388,12 +390,12 @@ fn parse_stability(sess: &Session, attr: &Attribute) -> Option<(Symbol, Stabilit\n \n         match mi.name_or_empty() {\n             sym::feature => {\n-                if !insert(mi, &mut feature) {\n+                if !insert_or_error(mi, &mut feature) {\n                     return None;\n                 }\n             }\n             sym::since => {\n-                if !insert(mi, &mut since) {\n+                if !insert_or_error(mi, &mut since) {\n                     return None;\n                 }\n             }\n@@ -431,10 +433,12 @@ fn parse_stability(sess: &Session, attr: &Attribute) -> Option<(Symbol, Stabilit\n     }\n }\n \n+/// Read the content of a `unstable`/`rustc_const_unstable`/`rustc_default_body_unstable`\n+/// attribute, and return the feature name and its stability information.\n fn parse_unstability(sess: &Session, attr: &Attribute) -> Option<(Symbol, StabilityLevel)> {\n     let meta = attr.meta()?;\n     let MetaItem { kind: MetaItemKind::List(ref metas), .. } = meta else { return None };\n-    let insert = |meta: &MetaItem, item: &mut Option<Symbol>| {\n+    let insert_or_error = |meta: &MetaItem, item: &mut Option<Symbol>| {\n         if item.is_some() {\n             handle_errors(\n                 &sess.parse_sess,\n@@ -470,21 +474,21 @@ fn parse_unstability(sess: &Session, attr: &Attribute) -> Option<(Symbol, Stabil\n \n         match mi.name_or_empty() {\n             sym::feature => {\n-                if !insert(mi, &mut feature) {\n+                if !insert_or_error(mi, &mut feature) {\n                     return None;\n                 }\n             }\n             sym::reason => {\n-                if !insert(mi, &mut reason) {\n+                if !insert_or_error(mi, &mut reason) {\n                     return None;\n                 }\n             }\n             sym::issue => {\n-                if !insert(mi, &mut issue) {\n+                if !insert_or_error(mi, &mut issue) {\n                     return None;\n                 }\n \n-                // These unwraps are safe because `insert` ensures the meta item\n+                // These unwraps are safe because `insert_or_error` ensures the meta item\n                 // is a name/value pair string literal.\n                 issue_num = match issue.unwrap().as_str() {\n                     \"none\" => None,\n@@ -512,7 +516,7 @@ fn parse_unstability(sess: &Session, attr: &Attribute) -> Option<(Symbol, Stabil\n                 is_soft = true;\n             }\n             sym::implied_by => {\n-                if !insert(mi, &mut implied_by) {\n+                if !insert_or_error(mi, &mut implied_by) {\n                     return None;\n                 }\n             }"}]}