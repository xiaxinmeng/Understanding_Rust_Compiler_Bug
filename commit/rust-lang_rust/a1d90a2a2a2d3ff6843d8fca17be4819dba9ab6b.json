{"sha": "a1d90a2a2a2d3ff6843d8fca17be4819dba9ab6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZDkwYTJhMmEyZDNmZjY4NDNkOGZjYTE3YmU0ODE5ZGJhOWFiNmI=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-04-03T02:34:52Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-04-09T15:53:30Z"}, "message": "in which the non-shorthand patterns lint keeps its own counsel in macros\n\nIn issue #49588, Michael Lamparski pointed out a scenario in which the\nnon-shorthand-field-patterns lint could be triggered by a macro-expanded\npattern, in a way which was direly unwieldy for the macro author to guard\nagainst and unreasonable to expect the macro user to take into account. We can\navoid this by not linting patterns that come from macro-expansions. Although\nthis entails accepting \"false negatives\" where the lint could genuinely improve\nmacro-templated code, avoiding the reported \"true-but-super-annoying positive\"\nmay be worth the trade? (Some precedent for these relative priorities exists as\nno. 47775 (5985b0b0).)\n\nResolves #49588.", "tree": {"sha": "8a1fcba08ab73212011884d72dc1d156ef548772", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a1fcba08ab73212011884d72dc1d156ef548772"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1d90a2a2a2d3ff6843d8fca17be4819dba9ab6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d90a2a2a2d3ff6843d8fca17be4819dba9ab6b", "html_url": "https://github.com/rust-lang/rust/commit/a1d90a2a2a2d3ff6843d8fca17be4819dba9ab6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1d90a2a2a2d3ff6843d8fca17be4819dba9ab6b/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9b70c394e7f341b4016fce4cbf763d404b26f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9b70c394e7f341b4016fce4cbf763d404b26f9", "html_url": "https://github.com/rust-lang/rust/commit/4b9b70c394e7f341b4016fce4cbf763d404b26f9"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "48e9cc498dceb8b44ceba28e9abaf0202e8b3bd8", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1d90a2a2a2d3ff6843d8fca17be4819dba9ab6b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d90a2a2a2d3ff6843d8fca17be4819dba9ab6b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=a1d90a2a2a2d3ff6843d8fca17be4819dba9ab6b", "patch": "@@ -173,6 +173,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                 }\n                 if let PatKind::Binding(_, _, name, None) = fieldpat.node.pat.node {\n                     if name.node == fieldpat.node.name {\n+                        if let Some(_) = fieldpat.span.ctxt().outer().expn_info() {\n+                            // Don't lint if this is a macro expansion: macro authors\n+                            // shouldn't have to worry about this kind of style issue\n+                            // (Issue #49588)\n+                            return;\n+                        }\n                         let mut err = cx.struct_span_lint(NON_SHORTHAND_FIELD_PATTERNS,\n                                      fieldpat.span,\n                                      &format!(\"the `{}:` in this pattern is redundant\","}, {"sha": "51b2b5a4f7c0f00e6e4f035e62d6c6baadf00010", "filename": "src/test/run-pass/issue-49588-non-shorthand-field-patterns-in-pattern-macro.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a1d90a2a2a2d3ff6843d8fca17be4819dba9ab6b/src%2Ftest%2Frun-pass%2Fissue-49588-non-shorthand-field-patterns-in-pattern-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d90a2a2a2d3ff6843d8fca17be4819dba9ab6b/src%2Ftest%2Frun-pass%2Fissue-49588-non-shorthand-field-patterns-in-pattern-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-49588-non-shorthand-field-patterns-in-pattern-macro.rs?ref=a1d90a2a2a2d3ff6843d8fca17be4819dba9ab6b", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(non_shorthand_field_patterns)]\n+\n+pub struct Value<A> { pub value: A }\n+\n+#[macro_export]\n+macro_rules! pat {\n+    ($a:pat) => {\n+        Value { value: $a }\n+    };\n+}\n+\n+fn main() {\n+    let pat!(value) = Value { value: () };\n+}"}]}