{"sha": "bd6187060608f149c16c43b8b5aeb9a52924a2c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNjE4NzA2MDYwOGYxNDljMTZjNDNiOGI1YWViOWE1MjkyNGEyYzM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-04-03T07:49:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-04-28T09:38:32Z"}, "message": "Fix incremental compilation.", "tree": {"sha": "f94145c0d1fefae7f8643f1f38f1d5cf56a85ae2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94145c0d1fefae7f8643f1f38f1d5cf56a85ae2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd6187060608f149c16c43b8b5aeb9a52924a2c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6187060608f149c16c43b8b5aeb9a52924a2c3", "html_url": "https://github.com/rust-lang/rust/commit/bd6187060608f149c16c43b8b5aeb9a52924a2c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd6187060608f149c16c43b8b5aeb9a52924a2c3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a010b33ffc078db27100d008105cc151e3f3989", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a010b33ffc078db27100d008105cc151e3f3989", "html_url": "https://github.com/rust-lang/rust/commit/0a010b33ffc078db27100d008105cc151e3f3989"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "6a4b35ed3d7facd69f6cc74f62cc50b4be211d52", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd6187060608f149c16c43b8b5aeb9a52924a2c3/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6187060608f149c16c43b8b5aeb9a52924a2c3/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=bd6187060608f149c16c43b8b5aeb9a52924a2c3", "patch": "@@ -798,7 +798,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         )\n     }\n \n-    fn get_adt_def(&self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::AdtDef {\n+    fn get_adt_def(&self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {\n         let kind = self.kind(item_id);\n         let did = self.local_def_id(item_id);\n "}, {"sha": "bbeacbfc5382e6005fbf3bf74b8a24782cf885b8", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd6187060608f149c16c43b8b5aeb9a52924a2c3/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6187060608f149c16c43b8b5aeb9a52924a2c3/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=bd6187060608f149c16c43b8b5aeb9a52924a2c3", "patch": "@@ -12,8 +12,11 @@ macro_rules! arena_types {\n     ($macro:path, $args:tt, $tcx:lifetime) => (\n         $macro!($args, [\n             [] layouts: rustc_target::abi::Layout,\n+            // AdtDef are interned and compared by address\n+            [] adt_def: rustc_middle::ty::AdtDef,\n             [decode] tables: rustc_middle::ty::TypeckTables<$tcx>,\n             [] const_allocs: rustc_middle::mir::interpret::Allocation,\n+            // Required for the incremental on-disk cache\n             [few, decode] mir_keys: rustc_hir::def_id::DefIdSet,\n             [] region_scope_tree: rustc_middle::middle::region::ScopeTree,\n             [] dropck_outlives:"}, {"sha": "62a759f29bc9ebe9eaec9249823ca2e5fec946c0", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd6187060608f149c16c43b8b5aeb9a52924a2c3/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6187060608f149c16c43b8b5aeb9a52924a2c3/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=bd6187060608f149c16c43b8b5aeb9a52924a2c3", "patch": "@@ -282,8 +282,7 @@ rustc_queries! {\n         query trait_def(_: DefId) -> ty::TraitDef {\n             storage(ArenaCacheSelector<'tcx>)\n         }\n-        query adt_def(_: DefId) -> ty::AdtDef {\n-            storage(ArenaCacheSelector<'tcx>)\n+        query adt_def(_: DefId) -> &'tcx ty::AdtDef {\n         }\n         query adt_destructor(_: DefId) -> Option<ty::Destructor> {}\n "}, {"sha": "ae06008d0f9f694c132f7bb3fa89b33dae060749", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd6187060608f149c16c43b8b5aeb9a52924a2c3/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6187060608f149c16c43b8b5aeb9a52924a2c3/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=bd6187060608f149c16c43b8b5aeb9a52924a2c3", "patch": "@@ -1008,8 +1008,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         kind: AdtKind,\n         variants: IndexVec<VariantIdx, ty::VariantDef>,\n         repr: ReprOptions,\n-    ) -> ty::AdtDef {\n-        ty::AdtDef::new(self, did, kind, variants, repr)\n+    ) -> &'tcx ty::AdtDef {\n+        self.arena.alloc(ty::AdtDef::new(self, did, kind, variants, repr))\n     }\n \n     pub fn intern_const_alloc(self, alloc: Allocation) -> &'tcx Allocation {"}, {"sha": "e6aa53dd4f3b7695396b5caee31e4464f8e0dcef", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd6187060608f149c16c43b8b5aeb9a52924a2c3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6187060608f149c16c43b8b5aeb9a52924a2c3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=bd6187060608f149c16c43b8b5aeb9a52924a2c3", "patch": "@@ -861,7 +861,7 @@ fn convert_variant(\n     )\n }\n \n-fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AdtDef {\n+fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AdtDef {\n     use rustc_hir::*;\n \n     let def_id = def_id.expect_local();"}]}