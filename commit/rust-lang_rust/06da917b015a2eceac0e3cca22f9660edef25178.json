{"sha": "06da917b015a2eceac0e3cca22f9660edef25178", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZGE5MTdiMDE1YTJlY2VhYzBlM2NjYTIyZjk2NjBlZGVmMjUxNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-08T04:14:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-08T04:14:54Z"}, "message": "Auto merge of #51885 - GuillaumeGomez:trait-impl-show-docs, r=Mark-Simulacrum,QuietMisdreavus\n\nTrait impl show docs\n\nFixes #51834.\n\n<img width=\"1440\" alt=\"screen shot 2018-06-29 at 00 14 33\" src=\"https://user-images.githubusercontent.com/3050060/42063323-6e6e8cc8-7b31-11e8-88ef-4dd2229df76c.png\">\n\n(You can see both commit changes in the screenshot \ud83d\ude04)\n\nr? @QuietMisdreavus", "tree": {"sha": "8eef3df0e3912cabd16ee31bb6987ccb1db078b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eef3df0e3912cabd16ee31bb6987ccb1db078b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06da917b015a2eceac0e3cca22f9660edef25178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06da917b015a2eceac0e3cca22f9660edef25178", "html_url": "https://github.com/rust-lang/rust/commit/06da917b015a2eceac0e3cca22f9660edef25178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06da917b015a2eceac0e3cca22f9660edef25178/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "295ad30ef452de5331edb5e0ee6f666f632758c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/295ad30ef452de5331edb5e0ee6f666f632758c4", "html_url": "https://github.com/rust-lang/rust/commit/295ad30ef452de5331edb5e0ee6f666f632758c4"}, {"sha": "d5409141d62287b4597a7c05735406a2305fd134", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5409141d62287b4597a7c05735406a2305fd134", "html_url": "https://github.com/rust-lang/rust/commit/d5409141d62287b4597a7c05735406a2305fd134"}], "stats": {"total": 174, "additions": 77, "deletions": 97}, "files": [{"sha": "fcd683e5e87f85e5f47024509a513a15720eb88b", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -806,9 +806,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {\n     ///\n     /// This will decrement the strong reference count. If the strong reference\n     /// count reaches zero then the only other references (if any) are\n-    /// [`Weak`][weak], so we `drop` the inner value.\n-    ///\n-    /// [weak]: struct.Weak.html\n+    /// [`Weak`], so we `drop` the inner value.\n     ///\n     /// # Examples\n     ///\n@@ -1173,9 +1171,8 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n \n impl<T> Weak<T> {\n     /// Constructs a new `Weak<T>`, without allocating any memory.\n-    /// Calling [`upgrade`] on the return value always gives [`None`].\n+    /// Calling [`upgrade`][Weak::upgrade] on the return value always gives [`None`].\n     ///\n-    /// [`upgrade`]: struct.Weak.html#method.upgrade\n     /// [`None`]: ../../std/option/enum.Option.html\n     ///\n     /// # Examples\n@@ -1321,9 +1318,8 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> {\n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n     /// Constructs a new `Weak<T>`, allocating memory for `T` without initializing\n-    /// it. Calling [`upgrade`] on the return value always gives [`None`].\n+    /// it. Calling [`upgrade`][Weak::upgrade] on the return value always gives [`None`].\n     ///\n-    /// [`upgrade`]: struct.Weak.html#method.upgrade\n     /// [`None`]: ../../std/option/enum.Option.html\n     ///\n     /// # Examples"}, {"sha": "837e17cf640173b127fce5cd2758c1ad361e9aa7", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -1927,9 +1927,7 @@ impl<'a> Add<&'a str> for String {\n \n /// Implements the `+=` operator for appending to a `String`.\n ///\n-/// This has the same behavior as the [`push_str`] method.\n-///\n-/// [`push_str`]: struct.String.html#method.push_str\n+/// This has the same behavior as the [`push_str`][String::push_str] method.\n #[stable(feature = \"stringaddassign\", since = \"1.12.0\")]\n impl<'a> AddAssign<&'a str> for String {\n     #[inline]"}, {"sha": "8b4231dbdf6f3202563d7874d73faec4a5d8d460", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -916,9 +916,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n     ///\n     /// This will decrement the strong reference count. If the strong reference\n     /// count reaches zero then the only other references (if any) are\n-    /// [`Weak`][weak], so we `drop` the inner value.\n-    ///\n-    /// [weak]: struct.Weak.html\n+    /// [`Weak`], so we `drop` the inner value.\n     ///\n     /// # Examples\n     ///\n@@ -1159,9 +1157,9 @@ impl<T: ?Sized> Clone for Weak<T> {\n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n     /// Constructs a new `Weak<T>`, without allocating memory.\n-    /// Calling [`upgrade`] on the return value always gives [`None`].\n+    /// Calling [`upgrade`][Weak::upgrade] on the return value always\n+    /// gives [`None`].\n     ///\n-    /// [`upgrade`]: struct.Weak.html#method.upgrade\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples"}, {"sha": "53cf626bb1ca02b93ef084b003de7c7138f538ba", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -1006,9 +1006,7 @@ fn expect_failed(msg: &str) -> ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Option<T> {\n-    /// Returns [`None`].\n-    ///\n-    /// [`None`]: #variant.None\n+    /// Returns [`None`][Option::None].\n     #[inline]\n     fn default() -> Option<T> { None }\n }\n@@ -1228,9 +1226,10 @@ unsafe impl<A> TrustedLen for IntoIter<A> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n-    /// Takes each element in the [`Iterator`]: if it is [`None`], no further\n-    /// elements are taken, and the [`None`] is returned. Should no [`None`] occur, a\n-    /// container with the values of each `Option` is returned.\n+    /// Takes each element in the [`Iterator`]: if it is [`None`][Option::None],\n+    /// no further elements are taken, and the [`None`][Option::None] is\n+    /// returned. Should no [`None`][Option::None] occur, a container with the\n+    /// values of each [`Option`] is returned.\n     ///\n     /// Here is an example which increments every integer in a vector,\n     /// checking for overflow:\n@@ -1247,7 +1246,6 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// ```\n     ///\n     /// [`Iterator`]: ../iter/trait.Iterator.html\n-    /// [`None`]: enum.Option.html#variant.None\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=Option<A>>>(iter: I) -> Option<V> {\n         // FIXME(#11084): This could be replaced with Iterator::scan when this"}, {"sha": "c4b4a0fd72a680e012619260d706d131c2a2f1b6", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -507,7 +507,7 @@ impl<T, E> Result<T, E> {\n \n     /// Returns an iterator over the possibly contained value.\n     ///\n-    /// The iterator yields one value if the result is [`Ok`], otherwise none.\n+    /// The iterator yields one value if the result is [`Result::Ok`], otherwise none.\n     ///\n     /// # Examples\n     ///\n@@ -520,8 +520,6 @@ impl<T, E> Result<T, E> {\n     /// let x: Result<u32, &str> = Err(\"nothing!\");\n     /// assert_eq!(x.iter().next(), None);\n     /// ```\n-    ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<T> {\n@@ -530,7 +528,7 @@ impl<T, E> Result<T, E> {\n \n     /// Returns a mutable iterator over the possibly contained value.\n     ///\n-    /// The iterator yields one value if the result is [`Ok`], otherwise none.\n+    /// The iterator yields one value if the result is [`Result::Ok`], otherwise none.\n     ///\n     /// # Examples\n     ///\n@@ -547,8 +545,6 @@ impl<T, E> Result<T, E> {\n     /// let mut x: Result<u32, &str> = Err(\"nothing!\");\n     /// assert_eq!(x.iter_mut().next(), None);\n     /// ```\n-    ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<T> {\n@@ -994,7 +990,7 @@ impl<T, E> IntoIterator for Result<T, E> {\n \n     /// Returns a consuming iterator over the possibly contained value.\n     ///\n-    /// The iterator yields one value if the result is [`Ok`], otherwise none.\n+    /// The iterator yields one value if the result is [`Result::Ok`], otherwise none.\n     ///\n     /// # Examples\n     ///\n@@ -1009,8 +1005,6 @@ impl<T, E> IntoIterator for Result<T, E> {\n     /// let v: Vec<u32> = x.into_iter().collect();\n     /// assert_eq!(v, []);\n     /// ```\n-    ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n     #[inline]\n     fn into_iter(self) -> IntoIter<T> {\n         IntoIter { inner: self.ok() }"}, {"sha": "972c2f0e15c5eb33ad63776bf453cb35e1b0536f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 33, "deletions": 38, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -2678,7 +2678,6 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n                       implementor_dups: &FxHashMap<&str, (DefId, bool)>) -> fmt::Result {\n-    write!(w, \"<li><table class='table-display'><tbody><tr><td><code>\")?;\n     // If there's already another implementor that has the same abbridged name, use the\n     // full path, for example in `std::iter::ExactSizeIterator`\n     let use_absolute = match implementor.inner_impl().for_ {\n@@ -2689,22 +2688,8 @@ fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n         } => implementor_dups[path.last_name()].1,\n         _ => false,\n     };\n-    fmt_impl_for_trait_page(&implementor.inner_impl(), w, use_absolute)?;\n-    for it in &implementor.inner_impl().items {\n-        if let clean::TypedefItem(ref tydef, _) = it.inner {\n-            write!(w, \"<span class=\\\"where fmt-newline\\\">  \")?;\n-            assoc_type(w, it, &[], Some(&tydef.type_), AssocItemLink::Anchor(None))?;\n-            write!(w, \";</span>\")?;\n-        }\n-    }\n-    write!(w, \"</code><td>\")?;\n-    if let Some(l) = (Item { cx, item: &implementor.impl_item }).src_href() {\n-        write!(w, \"<div class='out-of-band'>\")?;\n-        write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n-                    l, \"goto source code\")?;\n-        write!(w, \"</div>\")?;\n-    }\n-    writeln!(w, \"</td></tr></tbody></table></li>\")?;\n+    render_impl(w, cx, implementor, AssocItemLink::Anchor(None), RenderMode::Normal,\n+                implementor.impl_item.stable_since(), false, Some(use_absolute))?;\n     Ok(())\n }\n \n@@ -2715,7 +2700,7 @@ fn render_impls(cx: &Context, w: &mut fmt::Formatter,\n         let did = i.trait_did().unwrap();\n         let assoc_link = AssocItemLink::GotoSource(did, &i.inner_impl().provided_trait_methods);\n         render_impl(w, cx, i, assoc_link,\n-                    RenderMode::Normal, containing_item.stable_since(), true)?;\n+                    RenderMode::Normal, containing_item.stable_since(), true, None)?;\n     }\n     Ok(())\n }\n@@ -2907,14 +2892,14 @@ fn item_trait(\n         <h2 id='implementors' class='small-section-header'>\\\n           Implementors<a href='#implementors' class='anchor'></a>\\\n         </h2>\\\n-        <ul class='item-list' id='implementors-list'>\\\n+        <div class='item-list' id='implementors-list'>\\\n     \";\n \n     let synthetic_impl_header = \"\\\n         <h2 id='synthetic-implementors' class='small-section-header'>\\\n           Auto implementors<a href='#synthetic-implementors' class='anchor'></a>\\\n         </h2>\\\n-        <ul class='item-list' id='synthetic-implementors-list'>\\\n+        <div class='item-list' id='synthetic-implementors-list'>\\\n     \";\n \n     let mut synthetic_types = Vec::new();\n@@ -2964,7 +2949,8 @@ fn item_trait(\n                         &implementor.inner_impl().provided_trait_methods\n                     );\n                     render_impl(w, cx, &implementor, assoc_link,\n-                                RenderMode::Normal, implementor.impl_item.stable_since(), false)?;\n+                                RenderMode::Normal, implementor.impl_item.stable_since(), false,\n+                                None)?;\n                 }\n             }\n         }\n@@ -2973,7 +2959,7 @@ fn item_trait(\n         for implementor in concrete {\n             render_implementor(cx, implementor, w, &implementor_dups)?;\n         }\n-        write!(w, \"</ul>\")?;\n+        write!(w, \"</div>\")?;\n \n         if t.auto {\n             write!(w, \"{}\", synthetic_impl_header)?;\n@@ -2983,17 +2969,17 @@ fn item_trait(\n                 );\n                 render_implementor(cx, implementor, w, &implementor_dups)?;\n             }\n-            write!(w, \"</ul>\")?;\n+            write!(w, \"</div>\")?;\n         }\n     } else {\n         // even without any implementations to write in, we still want the heading and list, so the\n         // implementors javascript file pulled in below has somewhere to write the impls into\n         write!(w, \"{}\", impl_header)?;\n-        write!(w, \"</ul>\")?;\n+        write!(w, \"</div>\")?;\n \n         if t.auto {\n             write!(w, \"{}\", synthetic_impl_header)?;\n-            write!(w, \"</ul>\")?;\n+            write!(w, \"</div>\")?;\n         }\n     }\n     write!(w, r#\"<script type=\"text/javascript\">window.inlined_types=new Set({});</script>\"#,\n@@ -3616,7 +3602,7 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n         };\n         for i in &non_trait {\n             render_impl(w, cx, i, AssocItemLink::Anchor(None), render_mode,\n-                        containing_item.stable_since(), true)?;\n+                        containing_item.stable_since(), true, None)?;\n         }\n     }\n     if let AssocItemRender::DerefFor { .. } = what {\n@@ -3797,15 +3783,32 @@ fn spotlight_decl(decl: &clean::FnDecl) -> Result<String, fmt::Error> {\n \n fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLink,\n                render_mode: RenderMode, outer_version: Option<&str>,\n-               show_def_docs: bool) -> fmt::Result {\n+               show_def_docs: bool, use_absolute: Option<bool>) -> fmt::Result {\n     if render_mode == RenderMode::Normal {\n         let id = cx.derive_id(match i.inner_impl().trait_ {\n             Some(ref t) => format!(\"impl-{}\", small_url_encode(&format!(\"{:#}\", t))),\n             None => \"impl\".to_string(),\n         });\n-        write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><table class='table-display'>\\\n-                   <tbody><tr><td><code>{}</code>\",\n-               id, i.inner_impl())?;\n+        if let Some(use_absolute) = use_absolute {\n+            write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><table class='table-display'>\\\n+                       <tbody><tr><td><code>\", id)?;\n+            fmt_impl_for_trait_page(&i.inner_impl(), w, use_absolute)?;\n+            if show_def_docs {\n+                for it in &i.inner_impl().items {\n+                    if let clean::TypedefItem(ref tydef, _) = it.inner {\n+                        write!(w, \"<span class=\\\"where fmt-newline\\\">  \")?;\n+                        assoc_type(w, it, &vec![], Some(&tydef.type_),\n+                                   AssocItemLink::Anchor(None))?;\n+                        write!(w, \";</span>\")?;\n+                    }\n+                }\n+            }\n+            write!(w, \"</code>\")?;\n+        } else {\n+            write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><table class='table-display'>\\\n+                       <tbody><tr><td><code>{}</code>\",\n+                   id, i.inner_impl())?;\n+        }\n         write!(w, \"<a href='#{}' class='anchor'></a>\", id)?;\n         write!(w, \"</span></td><td><span class='out-of-band'>\")?;\n         let since = i.impl_item.stability.as_ref().map(|s| &s.since[..]);\n@@ -3929,10 +3932,6 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n     let traits = &cache().traits;\n     let trait_ = i.trait_did().map(|did| &traits[&did]);\n \n-    if !show_def_docs {\n-        write!(w, \"<span class='docblock autohide'>\")?;\n-    }\n-\n     write!(w, \"<div class='impl-items'>\")?;\n     for trait_item in &i.inner_impl().items {\n         doc_impl_item(w, cx, trait_item, link, render_mode,\n@@ -3968,10 +3967,6 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n     }\n     write!(w, \"</div>\")?;\n \n-    if !show_def_docs {\n-        write!(w, \"</span>\")?;\n-    }\n-\n     Ok(())\n }\n "}, {"sha": "a3af621a8a4163dbfdfbe7f9b8183e6e504b7a1c", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -1791,9 +1791,12 @@\n                         x[k].setAttribute('href', rootPath + href);\n                     }\n                 }\n-                var li = document.createElement('li');\n-                li.appendChild(code);\n-                list.appendChild(li);\n+                var display = document.createElement('h3');\n+                addClass(display, \"impl\");\n+                display.innerHTML = '<span class=\"in-band\"><table class=\"table-display\"><tbody>\\\n+                    <tr><td><code>' + code.outerHTML + '</code></td><td></td></tr></tbody></table>\\\n+                    </span>';\n+                list.appendChild(display);\n             }\n         }\n     };"}, {"sha": "3a54cb6389b5b2abec17f8a6b2b86622a587ef3f", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -114,7 +114,7 @@ h3.impl, h3.method, h3.type {\n \n h1, h2, h3, h4,\n .sidebar, a.source, .search-input, .content table :not(code)>a,\n-.collapse-toggle, ul.item-list > li > .out-of-band {\n+.collapse-toggle, div.item-list .out-of-band {\n \tfont-family: \"Fira Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n }\n \n@@ -367,10 +367,6 @@ h4.method > .out-of-band {\n \tfont-size: 19px;\n }\n \n-ul.item-list > li > .out-of-band {\n-\tfont-size: 19px;\n-}\n-\n h4 > code, h3 > code, .invisible > code {\n \tmax-width: calc(100% - 41px);\n \tdisplay: block;\n@@ -436,10 +432,6 @@ h4 > code, h3 > code, .invisible > code {\n \tpadding: 0;\n }\n \n-.content .item-list li {\n-\tmargin-bottom: 1em;\n-}\n-\n .content .multi-column {\n \t-moz-column-count: 5;\n \t-moz-column-gap: 2.5em;\n@@ -473,6 +465,11 @@ h4 > code, h3 > code, .invisible > code {\n .content .impl-items .docblock, .content .impl-items .stability {\n \tmargin-bottom: .6em;\n }\n+\n+.content .impl-items > .stability {\n+\tmargin-left: 40px;\n+}\n+\n .content .docblock > .impl-items {\n \tmargin-left: 20px;\n \tmargin-top: -34px;\n@@ -1363,6 +1360,15 @@ kbd {\n \tfont-size: 19px;\n \tdisplay: block;\n }\n+#implementors-list > .impl-items .table-display .out-of-band {\n+\tfont-size: 17px;\n+}\n+\n+.table-display td:hover .anchor {\n+\tdisplay: block;\n+\ttop: 2px;\n+\tleft: -5px;\n+}\n \n #main > ul {\n \tpadding-left: 10px;"}, {"sha": "3e54b502234ff6da129f34b56576f96d172f8161", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -2655,9 +2655,8 @@ impl DefaultHasher {\n \n #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n impl Default for DefaultHasher {\n-    /// Creates a new `DefaultHasher` using [`new`]. See its documentation for more.\n-    ///\n-    /// [`new`]: #method.new\n+    /// Creates a new `DefaultHasher` using [`new`][DefaultHasher::new].\n+    /// See its documentation for more.\n     fn default() -> DefaultHasher {\n         DefaultHasher::new()\n     }"}, {"sha": "8ae5e20dac5aa669f37649c43e3490b723cc5cb7", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -351,9 +351,6 @@ impl From<String> for OsString {\n     /// Converts a [`String`] into a [`OsString`].\n     ///\n     /// The conversion copies the data, and includes an allocation on the heap.\n-    ///\n-    /// [`String`]: ../string/struct.String.html\n-    /// [`OsString`]: struct.OsString.html\n     fn from(s: String) -> OsString {\n         OsString { inner: Buf::from_string(s) }\n     }"}, {"sha": "e26e6d391f84d3f12bee12a774746e5506811d09", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -294,17 +294,15 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// `.into_inner()` immediately after a seek yields the underlying reader\n     /// at the same position.\n     ///\n-    /// To seek without discarding the internal buffer, use [`seek_relative`].\n+    /// To seek without discarding the internal buffer, use [`Seek::seek_relative`].\n     ///\n-    /// See `std::io::Seek` for more details.\n+    /// See [`std::io::Seek`] for more details.\n     ///\n     /// Note: In the edge case where you're seeking with `SeekFrom::Current(n)`\n     /// where `n` minus the internal buffer length overflows an `i64`, two\n     /// seeks will be performed instead of one. If the second seek returns\n     /// `Err`, the underlying reader will be left at the same position it would\n     /// have if you called `seek` with `SeekFrom::Current(0)`.\n-    ///\n-    /// [`seek_relative`]: #method.seek_relative\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n         let result: u64;\n         if let SeekFrom::Current(n) = pos {"}, {"sha": "54bfd8122b4ed4a764e1b3b0ea92ca190298f865", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -386,8 +386,6 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Mutex<T> {\n impl<T> From<T> for Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n     /// This is equivalent to [`Mutex::new`].\n-    ///\n-    /// [`Mutex::new`]: #method.new\n     fn from(t: T) -> Self {\n         Mutex::new(t)\n     }"}, {"sha": "c0c706590db945a7eb03574db26e7ad6d062a04f", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -461,8 +461,6 @@ impl<T: Default> Default for RwLock<T> {\n impl<T> From<T> for RwLock<T> {\n     /// Creates a new instance of an `RwLock<T>` which is unlocked.\n     /// This is equivalent to [`RwLock::new`].\n-    ///\n-    /// [`RwLock::new`]: #method.new\n     fn from(t: T) -> Self {\n         RwLock::new(t)\n     }"}, {"sha": "27077ed4f1ac12671d4a096e71c5a6ea3bdf1046", "filename": "src/test/rustdoc/doc-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -36,7 +36,7 @@ pub mod unix_only {\n     // @has doc_cfg/unix_only/trait.ArmOnly.html \\\n     //  '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\\n     //  'This is supported on Unix and ARM only.'\n-    // @count - '//*[@class=\"stab portability\"]' 2\n+    // @count - '//*[@class=\"stab portability\"]' 3\n     #[doc(cfg(target_arch = \"arm\"))]\n     pub trait ArmOnly {\n         fn unix_and_arm_only_function();"}, {"sha": "104e8d62f19f22afc6b68ea3aa173d06fe738743", "filename": "src/test/rustdoc/issue-29503.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06da917b015a2eceac0e3cca22f9660edef25178/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06da917b015a2eceac0e3cca22f9660edef25178/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29503.rs?ref=06da917b015a2eceac0e3cca22f9660edef25178", "patch": "@@ -8,14 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n use std::fmt;\n \n // @has issue_29503/trait.MyTrait.html\n pub trait MyTrait {\n     fn my_string(&self) -> String;\n }\n \n-// @has - \"//ul[@id='implementors-list']/li\" \"impl<T> MyTrait for T where T: Debug\"\n+// @has - \"//div[@id='implementors-list']/h3[@id='impl-MyTrait']//code\" \"impl<T> MyTrait for T where T: Debug\"\n impl<T> MyTrait for T where T: fmt::Debug {\n     fn my_string(&self) -> String {\n         format!(\"{:?}\", self)"}]}