{"sha": "083ef4545807e8e940ff1378416f2b3cf8019f94", "node_id": "C_kwDOAAsO6NoAKDA4M2VmNDU0NTgwN2U4ZTk0MGZmMTM3ODQxNmYyYjNjZjgwMTlmOTQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-29T11:01:46Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-01T17:34:45Z"}, "message": "`rustc_data_structures` deref in a more humane way", "tree": {"sha": "e4fc85d9f399cdc224944e4cbd22dca5ed3c5265", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4fc85d9f399cdc224944e4cbd22dca5ed3c5265"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/083ef4545807e8e940ff1378416f2b3cf8019f94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/083ef4545807e8e940ff1378416f2b3cf8019f94", "html_url": "https://github.com/rust-lang/rust/commit/083ef4545807e8e940ff1378416f2b3cf8019f94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/083ef4545807e8e940ff1378416f2b3cf8019f94/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2b97a8bfe23cdda293908e3c3e01f2613787168", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b97a8bfe23cdda293908e3c3e01f2613787168", "html_url": "https://github.com/rust-lang/rust/commit/f2b97a8bfe23cdda293908e3c3e01f2613787168"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "980a540ccba7a5c0758f954cabd9cc5b8fc4a05a", "filename": "compiler/rustc_data_structures/src/owning_ref/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/083ef4545807e8e940ff1378416f2b3cf8019f94/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083ef4545807e8e940ff1378416f2b3cf8019f94/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs?ref=083ef4545807e8e940ff1378416f2b3cf8019f94", "patch": "@@ -899,25 +899,25 @@ unsafe impl<O, T: ?Sized> StableAddress for OwningRef<O, T> {}\n \n impl<O, T: ?Sized> AsRef<T> for OwningRef<O, T> {\n     fn as_ref(&self) -> &T {\n-        &*self\n+        self\n     }\n }\n \n impl<O, T: ?Sized> AsRef<T> for OwningRefMut<O, T> {\n     fn as_ref(&self) -> &T {\n-        &*self\n+        self\n     }\n }\n \n impl<O, T: ?Sized> AsMut<T> for OwningRefMut<O, T> {\n     fn as_mut(&mut self) -> &mut T {\n-        &mut *self\n+        self\n     }\n }\n \n impl<O, T: ?Sized> Borrow<T> for OwningRef<O, T> {\n     fn borrow(&self) -> &T {\n-        &*self\n+        self\n     }\n }\n \n@@ -1021,7 +1021,7 @@ where\n     T: PartialEq,\n {\n     fn eq(&self, other: &Self) -> bool {\n-        (&*self as &T).eq(&*other as &T)\n+        self.deref().eq(other.deref())\n     }\n }\n \n@@ -1032,7 +1032,7 @@ where\n     T: PartialOrd,\n {\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-        (&*self as &T).partial_cmp(&*other as &T)\n+        self.deref().partial_cmp(other.deref())\n     }\n }\n \n@@ -1041,7 +1041,7 @@ where\n     T: Ord,\n {\n     fn cmp(&self, other: &Self) -> Ordering {\n-        (&*self as &T).cmp(&*other as &T)\n+        self.deref().cmp(other.deref())\n     }\n }\n \n@@ -1050,7 +1050,7 @@ where\n     T: Hash,\n {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n-        (&*self as &T).hash(state);\n+        self.deref().hash(state);\n     }\n }\n \n@@ -1059,7 +1059,7 @@ where\n     T: PartialEq,\n {\n     fn eq(&self, other: &Self) -> bool {\n-        (&*self as &T).eq(&*other as &T)\n+        self.deref().eq(other.deref())\n     }\n }\n \n@@ -1070,7 +1070,7 @@ where\n     T: PartialOrd,\n {\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-        (&*self as &T).partial_cmp(&*other as &T)\n+        self.deref().partial_cmp(other.deref())\n     }\n }\n \n@@ -1079,7 +1079,7 @@ where\n     T: Ord,\n {\n     fn cmp(&self, other: &Self) -> Ordering {\n-        (&*self as &T).cmp(&*other as &T)\n+        self.deref().cmp(other.deref())\n     }\n }\n \n@@ -1088,7 +1088,7 @@ where\n     T: Hash,\n {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n-        (&*self as &T).hash(state);\n+        self.deref().hash(state);\n     }\n }\n "}]}