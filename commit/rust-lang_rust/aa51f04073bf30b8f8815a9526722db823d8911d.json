{"sha": "aa51f04073bf30b8f8815a9526722db823d8911d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNTFmMDQwNzNiZjMwYjhmODgxNWE5NTI2NzIyZGI4MjNkODkxMWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-03T08:01:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-03T08:01:29Z"}, "message": "Auto merge of #65779 - kevgrasso:E0308highlight, r=estebank\n\nHighlight only relevant parts of type path in type errors\n\nResolves #57413.\n\nUnfortunately the current Rust UI testing setup can't test that the correct colors are being used in a given output, so here's a screenshot of a small test program I wrote:\n![image](https://user-images.githubusercontent.com/480789/67530063-f272af00-f68b-11e9-9f96-a211fc7666d4.png)", "tree": {"sha": "ae17fae77e7770f76b908ace8c440e62b9473de3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae17fae77e7770f76b908ace8c440e62b9473de3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa51f04073bf30b8f8815a9526722db823d8911d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa51f04073bf30b8f8815a9526722db823d8911d", "html_url": "https://github.com/rust-lang/rust/commit/aa51f04073bf30b8f8815a9526722db823d8911d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa51f04073bf30b8f8815a9526722db823d8911d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c1b220fd747bf244f04b380e4d4ae005068f706", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c1b220fd747bf244f04b380e4d4ae005068f706", "html_url": "https://github.com/rust-lang/rust/commit/6c1b220fd747bf244f04b380e4d4ae005068f706"}, {"sha": "2337bbb8a4131645e4a98ad81524703d76196f82", "url": "https://api.github.com/repos/rust-lang/rust/commits/2337bbb8a4131645e4a98ad81524703d76196f82", "html_url": "https://github.com/rust-lang/rust/commit/2337bbb8a4131645e4a98ad81524703d76196f82"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "498600f1e901d44f88369f08aa39fee089c9c754", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/aa51f04073bf30b8f8815a9526722db823d8911d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa51f04073bf30b8f8815a9526722db823d8911d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=aa51f04073bf30b8f8815a9526722db823d8911d", "patch": "@@ -867,6 +867,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// Compares two given types, eliding parts that are the same between them and highlighting\n     /// relevant differences, and return two representation of those types for highlighted printing.\n     fn cmp(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) -> (DiagnosticStyledString, DiagnosticStyledString) {\n+        debug!(\"cmp(t1={}, t1.kind={:?}, t2={}, t2.kind={:?})\", t1, t1.kind, t2, t2.kind);\n+\n+        // helper functions\n         fn equals<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n             match (&a.kind, &b.kind) {\n                 (a, b) if *a == *b => true,\n@@ -902,6 +905,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             s.push_normal(ty.to_string());\n         }\n \n+        // process starts here\n         match (&t1.kind, &t2.kind) {\n             (&ty::Adt(def1, sub1), &ty::Adt(def2, sub2)) => {\n                 let sub_no_defaults_1 = self.strip_generic_default_params(def1.did, sub1);\n@@ -1052,12 +1056,47 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         return values;\n                     }\n \n-                    // We couldn't find anything in common, highlight everything.\n-                    //     let x: Bar<Qux> = y::<Foo<Zar>>();\n-                    (\n-                        DiagnosticStyledString::highlighted(t1.to_string()),\n-                        DiagnosticStyledString::highlighted(t2.to_string()),\n-                    )\n+                    // We can't find anything in common, highlight relevant part of type path.\n+                    //     let x: foo::bar::Baz<Qux> = y:<foo::bar::Bar<Zar>>();\n+                    //     foo::bar::Baz<Qux>\n+                    //     foo::bar::Bar<Zar>\n+                    //               -------- this part of the path is different\n+\n+                    let t1_str = t1.to_string();\n+                    let t2_str = t2.to_string();\n+                    let min_len = t1_str.len().min(t2_str.len());\n+\n+                    const SEPARATOR: &str = \"::\";\n+                    let separator_len = SEPARATOR.len();\n+                    let split_idx: usize =\n+                        t1_str.split(SEPARATOR)\n+                            .zip(t2_str.split(SEPARATOR))\n+                            .take_while(|(mod1_str, mod2_str)| mod1_str == mod2_str)\n+                            .map(|(mod_str, _)| mod_str.len() + separator_len)\n+                            .sum();\n+\n+                    debug!(\"cmp: separator_len={}, split_idx={}, min_len={}\",\n+                        separator_len, split_idx, min_len\n+                    );\n+\n+                    if split_idx >= min_len {\n+                        // paths are identical, highlight everything\n+                        (\n+                            DiagnosticStyledString::highlighted(t1_str),\n+                            DiagnosticStyledString::highlighted(t2_str)\n+                        )\n+                    } else {\n+                        let (common, uniq1) = t1_str.split_at(split_idx);\n+                        let (_, uniq2) = t2_str.split_at(split_idx);\n+                        debug!(\"cmp: common={}, uniq1={}, uniq2={}\", common, uniq1, uniq2);\n+\n+                        values.0.push_normal(common);\n+                        values.0.push_highlighted(uniq1);\n+                        values.1.push_normal(common);\n+                        values.1.push_highlighted(uniq2);\n+\n+                        values\n+                    }\n                 }\n             }\n \n@@ -1120,6 +1159,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             _ => {}\n         }\n \n+        debug!(\"note_type_err(diag={:?})\", diag);\n         let (expected_found, exp_found, is_simple_error) = match values {\n             None => (None, None, false),\n             Some(values) => {\n@@ -1180,6 +1220,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     diag.note_unsuccessfull_coercion(found, expected);\n                 }\n                 (_, false, _) => {\n+                    debug!(\n+                        \"note_type_err: exp_found={:?}, expected={:?} found={:?}\",\n+                        exp_found, expected, found\n+                    );\n                     if let Some(exp_found) = exp_found {\n                         self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n                     }"}, {"sha": "5a09898f18fbdcb5b26e796c13fb1a535ff8b4ad", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa51f04073bf30b8f8815a9526722db823d8911d/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa51f04073bf30b8f8815a9526722db823d8911d/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=aa51f04073bf30b8f8815a9526722db823d8911d", "patch": "@@ -34,7 +34,7 @@ pub struct SubDiagnostic {\n     pub render_span: Option<MultiSpan>,\n }\n \n-#[derive(PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq)]\n pub struct DiagnosticStyledString(pub Vec<StringPart>);\n \n impl DiagnosticStyledString {\n@@ -60,7 +60,7 @@ impl DiagnosticStyledString {\n     }\n }\n \n-#[derive(PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq)]\n pub enum StringPart {\n     Normal(String),\n     Highlighted(String),"}]}