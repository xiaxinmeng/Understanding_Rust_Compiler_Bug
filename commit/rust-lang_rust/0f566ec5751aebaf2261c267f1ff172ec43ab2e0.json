{"sha": "0f566ec5751aebaf2261c267f1ff172ec43ab2e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNTY2ZWM1NzUxYWViYWYyMjYxYzI2N2YxZmYxNzJlYzQzYWIyZTA=", "commit": {"author": {"name": "Alex Berghage", "email": "bearcage@ludumipsum.com", "date": "2019-01-21T01:05:09Z"}, "committer": {"name": "Alex Berghage", "email": "aberghage@gmail.com", "date": "2019-01-23T02:18:28Z"}, "message": "Move Instant backing type to Duration\n\nPer review comments, this commit switches out the backing\ntype for Instant on windows to a Duration. Tests all pass,\nand the code's a lot simpler (plus it should be portable now,\nwith the exception of the QueryPerformanceWhatever functions).", "tree": {"sha": "75d31bf11ed7cac1c9515cee4c2cdfb609819c34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75d31bf11ed7cac1c9515cee4c2cdfb609819c34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f566ec5751aebaf2261c267f1ff172ec43ab2e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTEqfFNo72x7Sc9B6SUXKIByY+2+AUCXEfO9AAKCRCUXKIByY+2\n+GFpAQDunqP7+Zb6PpwAx6vFVBSiquw9HPNq7eieVJ8epig0yQD/Ty0ih8rp3OO5\n3O8Ytp6+QJKEjfuHDdDZcyU5zLMN/Qc=\n=Uxou\n-----END PGP SIGNATURE-----", "payload": "tree 75d31bf11ed7cac1c9515cee4c2cdfb609819c34\nparent 55dea0edecc71a88ca11adb0629c0434e5d0f14b\nauthor Alex Berghage <bearcage@ludumipsum.com> 1548032709 -0700\ncommitter Alex Berghage <aberghage@gmail.com> 1548209908 -0700\n\nMove Instant backing type to Duration\n\nPer review comments, this commit switches out the backing\ntype for Instant on windows to a Duration. Tests all pass,\nand the code's a lot simpler (plus it should be portable now,\nwith the exception of the QueryPerformanceWhatever functions).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f566ec5751aebaf2261c267f1ff172ec43ab2e0", "html_url": "https://github.com/rust-lang/rust/commit/0f566ec5751aebaf2261c267f1ff172ec43ab2e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f566ec5751aebaf2261c267f1ff172ec43ab2e0/comments", "author": {"login": "bearcage", "id": 596042, "node_id": "MDQ6VXNlcjU5NjA0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/596042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bearcage", "html_url": "https://github.com/bearcage", "followers_url": "https://api.github.com/users/bearcage/followers", "following_url": "https://api.github.com/users/bearcage/following{/other_user}", "gists_url": "https://api.github.com/users/bearcage/gists{/gist_id}", "starred_url": "https://api.github.com/users/bearcage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bearcage/subscriptions", "organizations_url": "https://api.github.com/users/bearcage/orgs", "repos_url": "https://api.github.com/users/bearcage/repos", "events_url": "https://api.github.com/users/bearcage/events{/privacy}", "received_events_url": "https://api.github.com/users/bearcage/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bearcage", "id": 596042, "node_id": "MDQ6VXNlcjU5NjA0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/596042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bearcage", "html_url": "https://github.com/bearcage", "followers_url": "https://api.github.com/users/bearcage/followers", "following_url": "https://api.github.com/users/bearcage/following{/other_user}", "gists_url": "https://api.github.com/users/bearcage/gists{/gist_id}", "starred_url": "https://api.github.com/users/bearcage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bearcage/subscriptions", "organizations_url": "https://api.github.com/users/bearcage/orgs", "repos_url": "https://api.github.com/users/bearcage/repos", "events_url": "https://api.github.com/users/bearcage/events{/privacy}", "received_events_url": "https://api.github.com/users/bearcage/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55dea0edecc71a88ca11adb0629c0434e5d0f14b", "url": "https://api.github.com/repos/rust-lang/rust/commits/55dea0edecc71a88ca11adb0629c0434e5d0f14b", "html_url": "https://github.com/rust-lang/rust/commit/55dea0edecc71a88ca11adb0629c0434e5d0f14b"}], "stats": {"total": 36, "additions": 14, "deletions": 22}, "files": [{"sha": "113affb737edd7cd50dbcb71881838c767dfb499", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0f566ec5751aebaf2261c267f1ff172ec43ab2e0/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f566ec5751aebaf2261c267f1ff172ec43ab2e0/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=0f566ec5751aebaf2261c267f1ff172ec43ab2e0", "patch": "@@ -11,7 +11,7 @@ const INTERVALS_PER_SEC: u64 = NANOS_PER_SEC / 100;\n \n #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Debug, Hash)]\n pub struct Instant {\n-    t: u64,\n+    t: Duration,\n }\n \n #[derive(Copy, Clone)]\n@@ -49,34 +49,25 @@ impl Instant {\n     pub fn sub_instant(&self, other: &Instant) -> Duration {\n         // On windows there's a threshold below which we consider two timestamps\n         // equivalent due to measurement error. For more details + doc link,\n-        // check the docs on epsilon_nanos.\n-        let epsilon_ns =\n-            perf_counter::PerformanceCounterInstant::epsilon_nanos() as u64;\n-        if other.t > self.t && other.t - self.t <= epsilon_ns {\n+        // check the docs on epsilon.\n+        let epsilon =\n+            perf_counter::PerformanceCounterInstant::epsilon();\n+        if other.t > self.t && other.t - self.t <= epsilon {\n             return Duration::new(0, 0)\n         }\n-        let diff = (self.t).checked_sub(other.t)\n-                           .expect(\"specified instant was later than self\");\n-        Duration::new(diff / NANOS_PER_SEC, (diff % NANOS_PER_SEC) as u32)\n+        self.t.checked_sub(other.t)\n+              .expect(\"specified instant was later than self\")\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n-        let sum = other.as_secs()\n-            .checked_mul(NANOS_PER_SEC)?\n-            .checked_add(other.subsec_nanos() as u64)?\n-            .checked_add(self.t as u64)?;\n         Some(Instant {\n-            t: sum,\n+            t: self.t.checked_add(*other)?\n         })\n     }\n \n     pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n-        let other_ns = other.as_secs()\n-            .checked_mul(NANOS_PER_SEC)?\n-            .checked_add(other.subsec_nanos() as u64)?;\n-        let difference = self.t.checked_sub(other_ns)?;\n         Some(Instant {\n-            t: difference,\n+            t: self.t.checked_sub(*other)?\n         })\n     }\n }\n@@ -183,6 +174,7 @@ mod perf_counter {\n     use sys_common::mul_div_u64;\n     use sys::c;\n     use sys::cvt;\n+    use time::Duration;\n \n     pub struct PerformanceCounterInstant {\n         ts: c::LARGE_INTEGER\n@@ -198,17 +190,17 @@ mod perf_counter {\n         // using QueryPerformanceCounter is 1 \"tick\" -- defined as 1/frequency().\n         // Reference: https://docs.microsoft.com/en-us/windows/desktop/SysInfo\n         //                   /acquiring-high-resolution-time-stamps\n-        pub fn epsilon_nanos() -> u32 {\n+        pub fn epsilon() -> Duration {\n             let epsilon = NANOS_PER_SEC / (frequency() as u64);\n-            // As noted elsewhere, subsecond nanos always fit in a u32\n-            epsilon as u32\n+            Duration::from_nanos(epsilon)\n         }\n     }\n     impl From<PerformanceCounterInstant> for super::Instant {\n         fn from(other: PerformanceCounterInstant) -> Self {\n             let freq = frequency() as u64;\n+            let instant_nsec = mul_div_u64(other.ts as u64, NANOS_PER_SEC, freq);\n             Self {\n-                t: mul_div_u64(other.ts as u64, NANOS_PER_SEC, freq)\n+                t: Duration::from_nanos(instant_nsec)\n             }\n         }\n     }"}]}