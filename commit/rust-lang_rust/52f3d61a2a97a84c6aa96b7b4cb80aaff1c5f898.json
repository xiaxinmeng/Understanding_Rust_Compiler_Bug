{"sha": "52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898", "node_id": "C_kwDOAAsO6NoAKDUyZjNkNjFhMmE5N2E4NGM2YWE5NmI3YjRjYjgwYWFmZjFjNWY4OTg", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-02-17T15:33:07Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-02-25T21:10:06Z"}, "message": "Add `print_in_format_impl` lint", "tree": {"sha": "66a70aa78cd70a1ab634d6731fa21c466f52352b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66a70aa78cd70a1ab634d6731fa21c466f52352b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898", "html_url": "https://github.com/rust-lang/rust/commit/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcbb07f4dc3c147b9f4259df7f8c6a8b2bf91729", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcbb07f4dc3c147b9f4259df7f8c6a8b2bf91729", "html_url": "https://github.com/rust-lang/rust/commit/bcbb07f4dc3c147b9f4259df7f8c6a8b2bf91729"}], "stats": {"total": 268, "additions": 220, "deletions": 48}, "files": [{"sha": "35983b7fb506f7799cd2f6e6549061bf5b64e868", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898", "patch": "@@ -3370,6 +3370,7 @@ Released 2018-09-13\n [`pattern_type_mismatch`]: https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch\n [`possible_missing_comma`]: https://rust-lang.github.io/rust-clippy/master/index.html#possible_missing_comma\n [`precedence`]: https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n+[`print_in_format_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_in_format_impl\n [`print_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_literal\n [`print_stderr`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_stderr\n [`print_stdout`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_stdout"}, {"sha": "ef8be9e878f6cb6f60a9342455e6d00b904987ad", "filename": "clippy_lints/src/format_impl.rs", "status": "modified", "additions": 112, "deletions": 48, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/clippy_lints%2Fsrc%2Fformat_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/clippy_lints%2Fsrc%2Fformat_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_impl.rs?ref=52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898", "patch": "@@ -1,26 +1,13 @@\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n use clippy_utils::macros::{is_format_macro, root_macro_call_first_node, FormatArgsArg, FormatArgsExpn};\n-use clippy_utils::{is_diag_trait_item, path_to_local, peel_ref_operators};\n+use clippy_utils::{get_parent_as_impl, is_diag_trait_item, path_to_local, peel_ref_operators};\n use if_chain::if_chain;\n-use rustc_hir::{Expr, ExprKind, Impl, Item, ItemKind, QPath};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, Impl, ImplItem, ImplItemKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, symbol::kw, Symbol};\n \n-#[derive(Clone, Copy)]\n-enum FormatTrait {\n-    Debug,\n-    Display,\n-}\n-\n-impl FormatTrait {\n-    fn name(self) -> Symbol {\n-        match self {\n-            FormatTrait::Debug => sym::Debug,\n-            FormatTrait::Display => sym::Display,\n-        }\n-    }\n-}\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for format trait implementations (e.g. `Display`) with a recursive call to itself\n@@ -60,6 +47,55 @@ declare_clippy_lint! {\n     \"Format trait method called while implementing the same Format trait\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for use of `println`, `print`, `eprintln` or `eprint` in an\n+    /// implementation of a formatting trait.\n+    ///\n+    /// ### Why is this bad?\n+    /// Using a print macro is likely unintentional since formatting traits\n+    /// should write to the `Formatter`, not stdout/stderr.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::fmt::{Display, Error, Formatter};\n+    ///\n+    /// struct S;\n+    /// impl Display for S {\n+    ///     fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\n+    ///         println!(\"S\");\n+    ///\n+    ///         Ok(())\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::fmt::{Display, Error, Formatter};\n+    ///\n+    /// struct S;\n+    /// impl Display for S {\n+    ///     fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\n+    ///         writeln!(f, \"S\");\n+    ///\n+    ///         Ok(())\n+    ///     }\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub PRINT_IN_FORMAT_IMPL,\n+    suspicious,\n+    \"use of a print macro in a formatting trait impl\"\n+}\n+\n+#[derive(Clone, Copy)]\n+struct FormatTrait {\n+    /// e.g. `sym::Display`\n+    name: Symbol,\n+    /// `f` in `fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {}`\n+    formatter_name: Option<Symbol>,\n+}\n+\n #[derive(Default)]\n pub struct FormatImpl {\n     // Whether we are inside Display or Debug trait impl - None for neither\n@@ -74,33 +110,29 @@ impl FormatImpl {\n     }\n }\n \n-impl_lint_pass!(FormatImpl => [RECURSIVE_FORMAT_IMPL]);\n+impl_lint_pass!(FormatImpl => [RECURSIVE_FORMAT_IMPL, PRINT_IN_FORMAT_IMPL]);\n \n impl<'tcx> LateLintPass<'tcx> for FormatImpl {\n-    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n-        if let Some(format_trait_impl) = is_format_trait_impl(cx, item) {\n-            self.format_trait_impl = Some(format_trait_impl);\n-        }\n+    fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &ImplItem<'_>) {\n+        self.format_trait_impl = is_format_trait_impl(cx, impl_item);\n     }\n \n-    fn check_item_post(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+    fn check_impl_item_post(&mut self, cx: &LateContext<'_>, impl_item: &ImplItem<'_>) {\n         // Assume no nested Impl of Debug and Display within eachother\n-        if is_format_trait_impl(cx, item).is_some() {\n+        if is_format_trait_impl(cx, impl_item).is_some() {\n             self.format_trait_impl = None;\n         }\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        match self.format_trait_impl {\n-            Some(FormatTrait::Display) => {\n-                check_to_string_in_display(cx, expr);\n-                check_self_in_format_args(cx, expr, FormatTrait::Display);\n-            },\n-            Some(FormatTrait::Debug) => {\n-                check_self_in_format_args(cx, expr, FormatTrait::Debug);\n-            },\n-            None => {},\n+        let Some(format_trait_impl) = self.format_trait_impl else { return };\n+\n+        if format_trait_impl.name == sym::Display {\n+            check_to_string_in_display(cx, expr);\n         }\n+\n+        check_self_in_format_args(cx, expr, format_trait_impl);\n+        check_print_in_format_impl(cx, expr, format_trait_impl);\n     }\n }\n \n@@ -139,7 +171,7 @@ fn check_self_in_format_args<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>,\n         if let Some(args) = format_args.args();\n         then {\n             for arg in args {\n-                if arg.format_trait != impl_trait.name() {\n+                if arg.format_trait != impl_trait.name {\n                     continue;\n                 }\n                 check_format_arg_self(cx, expr, &arg, impl_trait);\n@@ -155,33 +187,65 @@ fn check_format_arg_self(cx: &LateContext<'_>, expr: &Expr<'_>, arg: &FormatArgs\n     let reference = peel_ref_operators(cx, arg.value);\n     let map = cx.tcx.hir();\n     // Is the reference self?\n-    let symbol_ident = impl_trait.name().to_ident_string();\n     if path_to_local(reference).map(|x| map.name(x)) == Some(kw::SelfLower) {\n+        let FormatTrait { name, .. } = impl_trait;\n         span_lint(\n             cx,\n             RECURSIVE_FORMAT_IMPL,\n             expr.span,\n-            &format!(\n-                \"using `self` as `{}` in `impl {}` will cause infinite recursion\",\n-                &symbol_ident, &symbol_ident\n-            ),\n+            &format!(\"using `self` as `{name}` in `impl {name}` will cause infinite recursion\"),\n         );\n     }\n }\n \n-fn is_format_trait_impl(cx: &LateContext<'_>, item: &Item<'_>) -> Option<FormatTrait> {\n+fn check_print_in_format_impl(cx: &LateContext<'_>, expr: &Expr<'_>, impl_trait: FormatTrait) {\n+    if_chain! {\n+        if let Some(macro_call) = root_macro_call_first_node(cx, expr);\n+        if let Some(name) = cx.tcx.get_diagnostic_name(macro_call.def_id);\n+        then {\n+            let replacement = match name {\n+                sym::print_macro | sym::eprint_macro => \"write\",\n+                sym::println_macro | sym::eprintln_macro => \"writeln\",\n+                _ => return,\n+            };\n+\n+            let name = name.as_str().strip_suffix(\"_macro\").unwrap();\n+\n+            span_lint_and_sugg(\n+                cx,\n+                PRINT_IN_FORMAT_IMPL,\n+                macro_call.span,\n+                &format!(\"use of `{}!` in `{}` impl\", name, impl_trait.name),\n+                \"replace with\",\n+                if let Some(formatter_name) = impl_trait.formatter_name {\n+                    format!(\"{}!({}, ..)\", replacement, formatter_name)\n+                } else {\n+                    format!(\"{}!(..)\", replacement)\n+                },\n+                Applicability::HasPlaceholders,\n+            );\n+        }\n+    }\n+}\n+\n+fn is_format_trait_impl(cx: &LateContext<'_>, impl_item: &ImplItem<'_>) -> Option<FormatTrait> {\n     if_chain! {\n-        // Are we at an Impl?\n-        if let ItemKind::Impl(Impl { of_trait: Some(trait_ref), .. }) = &item.kind;\n+        if impl_item.ident.name == sym::fmt;\n+        if let ImplItemKind::Fn(_, body_id) = impl_item.kind;\n+        if let Some(Impl { of_trait: Some(trait_ref),..}) = get_parent_as_impl(cx.tcx, impl_item.hir_id());\n         if let Some(did) = trait_ref.trait_def_id();\n         if let Some(name) = cx.tcx.get_diagnostic_name(did);\n+        if matches!(name, sym::Debug | sym::Display);\n         then {\n-            // Is Impl for Debug or Display?\n-            match name {\n-                sym::Debug => Some(FormatTrait::Debug),\n-                sym::Display => Some(FormatTrait::Display),\n-                _ => None,\n-            }\n+            let body = cx.tcx.hir().body(body_id);\n+            let formatter_name = body.params.get(1)\n+                .and_then(|param| param.pat.simple_ident())\n+                .map(|ident| ident.name);\n+\n+            Some(FormatTrait {\n+                name,\n+                formatter_name,\n+            })\n         } else {\n             None\n         }"}, {"sha": "f6d467941e3ef80dd629caba969e28cfdf208b16", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898", "patch": "@@ -68,6 +68,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(format::USELESS_FORMAT),\n     LintId::of(format_args::FORMAT_IN_FORMAT_ARGS),\n     LintId::of(format_args::TO_STRING_IN_FORMAT_ARGS),\n+    LintId::of(format_impl::PRINT_IN_FORMAT_IMPL),\n     LintId::of(format_impl::RECURSIVE_FORMAT_IMPL),\n     LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n     LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),"}, {"sha": "686482671b482ae698579d25f42f7edb9893731a", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898", "patch": "@@ -152,6 +152,7 @@ store.register_lints(&[\n     format::USELESS_FORMAT,\n     format_args::FORMAT_IN_FORMAT_ARGS,\n     format_args::TO_STRING_IN_FORMAT_ARGS,\n+    format_impl::PRINT_IN_FORMAT_IMPL,\n     format_impl::RECURSIVE_FORMAT_IMPL,\n     formatting::POSSIBLE_MISSING_COMMA,\n     formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,"}, {"sha": "465baa8258174e59f14d91b941dbe4bae33d3936", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898", "patch": "@@ -10,6 +10,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n     LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n     LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n+    LintId::of(format_impl::PRINT_IN_FORMAT_IMPL),\n     LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n     LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n     LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),"}, {"sha": "64e8868660980fb1c62a20456e7f438d2d9e6225", "filename": "tests/ui/print_in_format_impl.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/tests%2Fui%2Fprint_in_format_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/tests%2Fui%2Fprint_in_format_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_in_format_impl.rs?ref=52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898", "patch": "@@ -0,0 +1,58 @@\n+#![allow(unused, clippy::print_literal, clippy::write_literal)]\n+#![warn(clippy::print_in_format_impl)]\n+use std::fmt::{Debug, Display, Error, Formatter};\n+\n+macro_rules! indirect {\n+    () => {{ println!() }};\n+}\n+\n+macro_rules! nested {\n+    ($($tt:tt)*) => {\n+        $($tt)*\n+    };\n+}\n+\n+struct Foo;\n+impl Debug for Foo {\n+    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\n+        static WORKS_WITH_NESTED_ITEMS: bool = true;\n+\n+        print!(\"{}\", 1);\n+        println!(\"{}\", 2);\n+        eprint!(\"{}\", 3);\n+        eprintln!(\"{}\", 4);\n+        nested! {\n+            println!(\"nested\");\n+        };\n+\n+        write!(f, \"{}\", 5);\n+        writeln!(f, \"{}\", 6);\n+        indirect!();\n+\n+        Ok(())\n+    }\n+}\n+\n+impl Display for Foo {\n+    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\n+        print!(\"Display\");\n+        write!(f, \"Display\");\n+\n+        Ok(())\n+    }\n+}\n+\n+struct UnnamedFormatter;\n+impl Debug for UnnamedFormatter {\n+    fn fmt(&self, _: &mut Formatter) -> Result<(), Error> {\n+        println!(\"UnnamedFormatter\");\n+        Ok(())\n+    }\n+}\n+\n+fn main() {\n+    print!(\"outside fmt\");\n+    println!(\"outside fmt\");\n+    eprint!(\"outside fmt\");\n+    eprintln!(\"outside fmt\");\n+}"}, {"sha": "63b7179bca7dcf715783ca67a8a1d7fb85d0cab0", "filename": "tests/ui/print_in_format_impl.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/tests%2Fui%2Fprint_in_format_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898/tests%2Fui%2Fprint_in_format_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_in_format_impl.stderr?ref=52f3d61a2a97a84c6aa96b7b4cb80aaff1c5f898", "patch": "@@ -0,0 +1,46 @@\n+error: use of `print!` in `Debug` impl\n+  --> $DIR/print_in_format_impl.rs:20:9\n+   |\n+LL |         print!(\"{}\", 1);\n+   |         ^^^^^^^^^^^^^^^ help: replace with: `write!(f, ..)`\n+   |\n+   = note: `-D clippy::print-in-format-impl` implied by `-D warnings`\n+\n+error: use of `println!` in `Debug` impl\n+  --> $DIR/print_in_format_impl.rs:21:9\n+   |\n+LL |         println!(\"{}\", 2);\n+   |         ^^^^^^^^^^^^^^^^^ help: replace with: `writeln!(f, ..)`\n+\n+error: use of `eprint!` in `Debug` impl\n+  --> $DIR/print_in_format_impl.rs:22:9\n+   |\n+LL |         eprint!(\"{}\", 3);\n+   |         ^^^^^^^^^^^^^^^^ help: replace with: `write!(f, ..)`\n+\n+error: use of `eprintln!` in `Debug` impl\n+  --> $DIR/print_in_format_impl.rs:23:9\n+   |\n+LL |         eprintln!(\"{}\", 4);\n+   |         ^^^^^^^^^^^^^^^^^^ help: replace with: `writeln!(f, ..)`\n+\n+error: use of `println!` in `Debug` impl\n+  --> $DIR/print_in_format_impl.rs:25:13\n+   |\n+LL |             println!(\"nested\");\n+   |             ^^^^^^^^^^^^^^^^^^ help: replace with: `writeln!(f, ..)`\n+\n+error: use of `print!` in `Display` impl\n+  --> $DIR/print_in_format_impl.rs:38:9\n+   |\n+LL |         print!(\"Display\");\n+   |         ^^^^^^^^^^^^^^^^^ help: replace with: `write!(f, ..)`\n+\n+error: use of `println!` in `Debug` impl\n+  --> $DIR/print_in_format_impl.rs:48:9\n+   |\n+LL |         println!(\"UnnamedFormatter\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `writeln!(..)`\n+\n+error: aborting due to 7 previous errors\n+"}]}