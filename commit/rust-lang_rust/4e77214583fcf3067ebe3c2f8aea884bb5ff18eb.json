{"sha": "4e77214583fcf3067ebe3c2f8aea884bb5ff18eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNzcyMTQ1ODNmY2YzMDY3ZWJlM2MyZjhhZWE4ODRiYjVmZjE4ZWI=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-06-18T02:09:53Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-06-18T02:09:53Z"}, "message": "Improve document for `Result::as_deref(_mut)`", "tree": {"sha": "6fd6ef60922aa0d4cf849c1f6492e651ac926e7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fd6ef60922aa0d4cf849c1f6492e651ac926e7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e77214583fcf3067ebe3c2f8aea884bb5ff18eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e77214583fcf3067ebe3c2f8aea884bb5ff18eb", "html_url": "https://github.com/rust-lang/rust/commit/4e77214583fcf3067ebe3c2f8aea884bb5ff18eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e77214583fcf3067ebe3c2f8aea884bb5ff18eb/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8ff4bcbd02475cf487cd101bf32954dc63366d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ff4bcbd02475cf487cd101bf32954dc63366d4", "html_url": "https://github.com/rust-lang/rust/commit/e8ff4bcbd02475cf487cd101bf32954dc63366d4"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "2080ae193667e8c6945161df6102dd049c64bab5", "filename": "src/libcore/result.rs", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4e77214583fcf3067ebe3c2f8aea884bb5ff18eb/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e77214583fcf3067ebe3c2f8aea884bb5ff18eb/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=4e77214583fcf3067ebe3c2f8aea884bb5ff18eb", "patch": "@@ -1145,45 +1145,69 @@ impl<T, E: Into<!>> Result<T, E> {\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+#[unstable(feature = \"inner_deref\", issue = \"50264\")]\n impl<T: Deref, E> Result<T, E> {\n-    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T::Target, &E>`.\n+    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&<T as Deref>::Target, &E>`.\n     ///\n-    /// Leaves the original `Result` in-place, creating a new one containing a reference to the\n-    /// `Ok` type's `Deref::Target` type.\n+    /// Coerces the [`Ok`] variant of the original [`Result`] via [`Deref`](crate::ops::Deref)\n+    /// and returns the new [`Result`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x: Result<String, u32> = Ok(\"hello\".to_string());\n+    /// let y: Result<&str, &u32> = Ok(\"hello\");\n+    /// assert_eq!(x.as_deref(), y);\n+    ///\n+    /// let x: Result<String, u32> = Err(42);\n+    /// let y: Result<&str, &u32> = Err(&42);\n+    /// assert_eq!(x.as_deref(), y);\n+    /// ```\n     pub fn as_deref(&self) -> Result<&T::Target, &E> {\n         self.as_ref().map(|t| t.deref())\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+#[unstable(feature = \"inner_deref\", issue = \"50264\")]\n impl<T, E: Deref> Result<T, E> {\n-    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T, &E::Target>`.\n+    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T, &<E as Deref>::Target>`.\n     ///\n-    /// Leaves the original `Result` in-place, creating a new one containing a reference to the\n-    /// `Err` type's `Deref::Target` type.\n+    /// Coerces the [`Err`] variant of the original [`Result`] via [`Deref`](crate::ops::Deref)\n+    /// and returns the new [`Result`].\n     pub fn as_deref_err(&self) -> Result<&T, &E::Target> {\n         self.as_ref().map_err(|e| e.deref())\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+#[unstable(feature = \"inner_deref\", issue = \"50264\")]\n impl<T: DerefMut, E> Result<T, E> {\n-    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut T::Target, &mut E>`.\n+    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut <T as DerefMut>::Target, &mut E>`.\n     ///\n-    /// Leaves the original `Result` in-place, creating a new one containing a mutable reference to\n-    /// the `Ok` type's `Deref::Target` type.\n+    /// Coerces the [`Ok`] variant of the original [`Result`] via [`DerefMut`](crate::ops::DerefMut)\n+    /// and returns the new [`Result`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut x: Result<String, u32> = Ok(\"hello\".to_string());\n+    /// let y: Result<&mut str, &mut u32> = Ok(\"HELLO\");\n+    /// assert_eq!(x.as_deref_mut().map(|x| { x.make_ascii_uppercase(); x }), y);\n+    ///\n+    /// let mut x: Result<String, u32> = Err(42);\n+    /// let y: Result<&mut str, &mut u32> = Err(&42);\n+    /// assert_eq!(x.as_deref_mut().map(|x| { x.make_ascii_uppercase(); x }), y);\n+    /// ```\n     pub fn as_deref_mut(&mut self) -> Result<&mut T::Target, &mut E> {\n         self.as_mut().map(|t| t.deref_mut())\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+#[unstable(feature = \"inner_deref\", issue = \"50264\")]\n impl<T, E: DerefMut> Result<T, E> {\n-    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut T, &mut E::Target>`.\n+    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut T, &mut <E as DerefMut>::Target>`.\n     ///\n-    /// Leaves the original `Result` in-place, creating a new one containing a mutable reference to\n-    /// the `Err` type's `Deref::Target` type.\n+    /// Coerces the [`Err`] variant of the original [`Result`] via [`DerefMut`](crate::ops::DerefMut)\n+    /// and returns the new [`Result`].\n     pub fn as_deref_mut_err(&mut self) -> Result<&mut T, &mut E::Target> {\n         self.as_mut().map_err(|e| e.deref_mut())\n     }"}]}