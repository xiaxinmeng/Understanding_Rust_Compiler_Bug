{"sha": "78262e700dc6a7b57e376742f344e80115d2d3f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MjYyZTcwMGRjNmE3YjU3ZTM3Njc0MmYzNDRlODAxMTVkMmQzZjI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-05-09T02:21:48Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-05-09T10:36:17Z"}, "message": "Use SmallVec for DepNodeIndex within dep_graph.\n\nThis avoids a decent number of allocations, enough to speed up\nincremental runs of many rustc-benchmarks, the best by 2%.", "tree": {"sha": "bd1ace31c83496233b0b24a956ae3fd34d1c2197", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd1ace31c83496233b0b24a956ae3fd34d1c2197"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78262e700dc6a7b57e376742f344e80115d2d3f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78262e700dc6a7b57e376742f344e80115d2d3f2", "html_url": "https://github.com/rust-lang/rust/commit/78262e700dc6a7b57e376742f344e80115d2d3f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78262e700dc6a7b57e376742f344e80115d2d3f2/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9bfe840f41d00e9712f13fbc635ec3fbe95e8c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9bfe840f41d00e9712f13fbc635ec3fbe95e8c4", "html_url": "https://github.com/rust-lang/rust/commit/f9bfe840f41d00e9712f13fbc635ec3fbe95e8c4"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "e9400e17b86c046c62dbb84f8eafd0feea65cb09", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/78262e700dc6a7b57e376742f344e80115d2d3f2/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78262e700dc6a7b57e376742f344e80115d2d3f2/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=78262e700dc6a7b57e376742f344e80115d2d3f2", "patch": "@@ -12,6 +12,7 @@ use errors::DiagnosticBuilder;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n+use rustc_data_structures::small_vec::SmallVec;\n use rustc_data_structures::sync::{Lrc, RwLock, ReadGuard, Lock};\n use std::env;\n use std::hash::Hash;\n@@ -131,7 +132,7 @@ impl DepGraph {\n         let mut edges = Vec::new();\n         for (index, edge_targets) in current_dep_graph.edges.iter_enumerated() {\n             let from = current_dep_graph.nodes[index];\n-            for &edge_target in edge_targets {\n+            for &edge_target in edge_targets.iter() {\n                 let to = current_dep_graph.nodes[edge_target];\n                 edges.push((from, to));\n             }\n@@ -209,7 +210,7 @@ impl DepGraph {\n         self.with_task_impl(key, cx, arg, false, task,\n             |key| OpenTask::Regular(Lock::new(RegularOpenTask {\n                 node: key,\n-                reads: Vec::new(),\n+                reads: SmallVec::new(),\n                 read_set: FxHashSet(),\n             })),\n             |data, key, task| data.borrow_mut().complete_task(key, task))\n@@ -230,7 +231,7 @@ impl DepGraph {\n \n         self.with_task_impl(key, cx, input, true, identity_fn,\n             |_| OpenTask::Ignore,\n-            |data, key, _| data.borrow_mut().alloc_node(key, Vec::new()))\n+            |data, key, _| data.borrow_mut().alloc_node(key, SmallVec::new()))\n     }\n \n     fn with_task_impl<'gcx, C, A, R>(\n@@ -353,7 +354,7 @@ impl DepGraph {\n         if let Some(ref data) = self.data {\n             let (result, open_task) = ty::tls::with_context(|icx| {\n                 let task = OpenTask::Anon(Lock::new(AnonOpenTask {\n-                    reads: Vec::new(),\n+                    reads: SmallVec::new(),\n                     read_set: FxHashSet(),\n                 }));\n \n@@ -626,7 +627,7 @@ impl DepGraph {\n \n         debug_assert!(data.colors.borrow().get(prev_dep_node_index).is_none());\n \n-        let mut current_deps = Vec::new();\n+        let mut current_deps = SmallVec::new();\n \n         for &dep_dep_node_index in prev_deps {\n             let dep_dep_node_color = data.colors.borrow().get(dep_dep_node_index);\n@@ -923,7 +924,7 @@ pub enum WorkProductFileKind {\n \n pub(super) struct CurrentDepGraph {\n     nodes: IndexVec<DepNodeIndex, DepNode>,\n-    edges: IndexVec<DepNodeIndex, Vec<DepNodeIndex>>,\n+    edges: IndexVec<DepNodeIndex, SmallVec<[DepNodeIndex; 8]>>,\n     node_to_node_index: FxHashMap<DepNode, DepNodeIndex>,\n     forbidden_edge: Option<EdgeFilter>,\n \n@@ -1061,7 +1062,7 @@ impl CurrentDepGraph {\n         } = task {\n             debug_assert_eq!(node, key);\n             let krate_idx = self.node_to_node_index[&DepNode::new_no_params(DepKind::Krate)];\n-            self.alloc_node(node, vec![krate_idx])\n+            self.alloc_node(node, SmallVec::one(krate_idx))\n         } else {\n             bug!(\"complete_eval_always_task() - Expected eval always task to be popped\");\n         }\n@@ -1107,7 +1108,7 @@ impl CurrentDepGraph {\n \n     fn alloc_node(&mut self,\n                   dep_node: DepNode,\n-                  edges: Vec<DepNodeIndex>)\n+                  edges: SmallVec<[DepNodeIndex; 8]>)\n                   -> DepNodeIndex {\n         debug_assert_eq!(self.edges.len(), self.nodes.len());\n         debug_assert_eq!(self.node_to_node_index.len(), self.nodes.len());\n@@ -1122,12 +1123,12 @@ impl CurrentDepGraph {\n \n pub struct RegularOpenTask {\n     node: DepNode,\n-    reads: Vec<DepNodeIndex>,\n+    reads: SmallVec<[DepNodeIndex; 8]>,\n     read_set: FxHashSet<DepNodeIndex>,\n }\n \n pub struct AnonOpenTask {\n-    reads: Vec<DepNodeIndex>,\n+    reads: SmallVec<[DepNodeIndex; 8]>,\n     read_set: FxHashSet<DepNodeIndex>,\n }\n "}]}