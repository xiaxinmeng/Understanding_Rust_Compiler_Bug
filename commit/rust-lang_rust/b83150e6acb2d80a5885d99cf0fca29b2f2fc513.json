{"sha": "b83150e6acb2d80a5885d99cf0fca29b2f2fc513", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MzE1MGU2YWNiMmQ4MGE1ODg1ZDk5Y2YwZmNhMjliMmYyZmM1MTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-22T11:41:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-22T14:38:40Z"}, "message": "only reset non-restricted visibilities", "tree": {"sha": "ab3a78afbadfacde964b05f95c25d22a67ca8e0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab3a78afbadfacde964b05f95c25d22a67ca8e0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b83150e6acb2d80a5885d99cf0fca29b2f2fc513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b83150e6acb2d80a5885d99cf0fca29b2f2fc513", "html_url": "https://github.com/rust-lang/rust/commit/b83150e6acb2d80a5885d99cf0fca29b2f2fc513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b83150e6acb2d80a5885d99cf0fca29b2f2fc513/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebf3c8d8e993ea0ef94c9ff9bf33436c6a526e19", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf3c8d8e993ea0ef94c9ff9bf33436c6a526e19", "html_url": "https://github.com/rust-lang/rust/commit/ebf3c8d8e993ea0ef94c9ff9bf33436c6a526e19"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "e53deaf87881cdd3ecf14ea9df6f58db97c01df3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b83150e6acb2d80a5885d99cf0fca29b2f2fc513/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83150e6acb2d80a5885d99cf0fca29b2f2fc513/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b83150e6acb2d80a5885d99cf0fca29b2f2fc513", "patch": "@@ -2752,7 +2752,7 @@ impl<'a> LoweringContext<'a> {\n         id: NodeId,\n         name: &mut Name,\n         attrs: &hir::HirVec<Attribute>,\n-        vis: &hir::Visibility,\n+        vis: &mut hir::Visibility,\n         i: &ItemKind,\n     ) -> hir::ItemKind {\n         match *i {\n@@ -2955,7 +2955,7 @@ impl<'a> LoweringContext<'a> {\n         tree: &UseTree,\n         prefix: &Path,\n         id: NodeId,\n-        vis: &hir::Visibility,\n+        vis: &mut hir::Visibility,\n         name: &mut Name,\n         attrs: &hir::HirVec<Attribute>,\n     ) -> hir::ItemKind {\n@@ -3086,7 +3086,7 @@ impl<'a> LoweringContext<'a> {\n                         hir_id: new_hir_id,\n                     } = self.lower_node_id(id);\n \n-                    let vis = vis.clone();\n+                    let mut vis = vis.clone();\n                     let mut name = name.clone();\n                     let mut prefix = prefix.clone();\n \n@@ -3104,7 +3104,7 @@ impl<'a> LoweringContext<'a> {\n                         let item = this.lower_use_tree(use_tree,\n                                                        &prefix,\n                                                        new_id,\n-                                                       &vis,\n+                                                       &mut vis,\n                                                        &mut name,\n                                                        attrs);\n \n@@ -3139,6 +3139,27 @@ impl<'a> LoweringContext<'a> {\n                     });\n                 }\n \n+                // Subtle and a bit hacky: we lower the privacy level\n+                // of the list stem to \"private\" most of the time, but\n+                // not for \"restricted\" paths. The key thing is that\n+                // we don't want it to stay as `pub` (with no caveats)\n+                // because that affects rustdoc and also the lints\n+                // about `pub` items. But we can't *always* make it\n+                // private -- particularly not for restricted paths --\n+                // because it contains node-ids that would then be\n+                // unused, failing the check that HirIds are \"densely\n+                // assigned\".\n+                match vis.node {\n+                    hir::VisibilityKind::Public |\n+                    hir::VisibilityKind::Crate(_) |\n+                    hir::VisibilityKind::Inherited => {\n+                        *vis = respan(prefix.span.shrink_to_lo(), hir::VisibilityKind::Inherited);\n+                    }\n+                    hir::VisibilityKind::Restricted { .. } => {\n+                        // do nothing here, as described in the comment on the match\n+                    }\n+                }\n+\n                 let def = self.expect_full_def_from_use(id).next().unwrap_or(Def::Err);\n                 let path = P(self.lower_path_extra(def, &prefix, ParamMode::Explicit, None));\n                 hir::ItemKind::Use(path, hir::UseKind::ListStem)\n@@ -3384,7 +3405,7 @@ impl<'a> LoweringContext<'a> {\n \n     pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item> {\n         let mut name = i.ident.name;\n-        let vis = self.lower_visibility(&i.vis, None);\n+        let mut vis = self.lower_visibility(&i.vis, None);\n         let attrs = self.lower_attrs(&i.attrs);\n         if let ItemKind::MacroDef(ref def) = i.node {\n             if !def.legacy || attr::contains_name(&i.attrs, \"macro_export\") ||\n@@ -3403,7 +3424,7 @@ impl<'a> LoweringContext<'a> {\n             return None;\n         }\n \n-        let node = self.lower_item_kind(i.id, &mut name, &attrs, &vis, &i.node);\n+        let node = self.lower_item_kind(i.id, &mut name, &attrs, &mut vis, &i.node);\n \n         let LoweredNodeId { node_id, hir_id } = self.lower_node_id(i.id);\n "}, {"sha": "7dd1ca3493e9d12b9a656376b050c7c6e6861b97", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b83150e6acb2d80a5885d99cf0fca29b2f2fc513/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83150e6acb2d80a5885d99cf0fca29b2f2fc513/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=b83150e6acb2d80a5885d99cf0fca29b2f2fc513", "patch": "@@ -1136,15 +1136,7 @@ impl UnreachablePub {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n     fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n-        match item.node {\n-            hir::ItemKind::Use(_, hir::UseKind::ListStem) => {\n-                // Hack: ignore these `use foo::{}` remnants which are just a figment\n-                // our IR.\n-            }\n-            _ => {\n-                self.perform_lint(cx, \"item\", item.id, &item.vis, item.span, true);\n-            }\n-        }\n+        self.perform_lint(cx, \"item\", item.id, &item.vis, item.span, true);\n     }\n \n     fn check_foreign_item(&mut self, cx: &LateContext, foreign_item: &hir::ForeignItem) {"}]}