{"sha": "5a60f0a86f2065742a1a70cd38fdc63fc1b95c61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNjBmMGE4NmYyMDY1NzQyYTFhNzBjZDM4ZmRjNjNmYzFiOTVjNjE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-27T22:46:41Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-24T11:45:26Z"}, "message": "Sort mir_keys to ensure consistent diagnostic order.", "tree": {"sha": "37f64848f09abac0442d1b4653d650e46e1a7383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37f64848f09abac0442d1b4653d650e46e1a7383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a60f0a86f2065742a1a70cd38fdc63fc1b95c61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a60f0a86f2065742a1a70cd38fdc63fc1b95c61", "html_url": "https://github.com/rust-lang/rust/commit/5a60f0a86f2065742a1a70cd38fdc63fc1b95c61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a60f0a86f2065742a1a70cd38fdc63fc1b95c61/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d88420a52a9d1860b47245fdda374162d1c0972c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d88420a52a9d1860b47245fdda374162d1c0972c", "html_url": "https://github.com/rust-lang/rust/commit/d88420a52a9d1860b47245fdda374162d1c0972c"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "8b9f10bf2846a4bdc17d33c2a84f89fd09dd80ca", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5a60f0a86f2065742a1a70cd38fdc63fc1b95c61/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a60f0a86f2065742a1a70cd38fdc63fc1b95c61/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=5a60f0a86f2065742a1a70cd38fdc63fc1b95c61", "patch": "@@ -1185,11 +1185,24 @@ impl EncodeContext<'a, 'tcx> {\n         if self.is_proc_macro {\n             return;\n         }\n-        for &def_id in self.tcx.mir_keys(LOCAL_CRATE).iter() {\n-            let (encode_const, encode_opt) = should_encode_mir(self.tcx, def_id);\n-            if !encode_const && !encode_opt {\n-                continue;\n-            }\n+\n+        let mut keys_and_jobs = self\n+            .tcx\n+            .mir_keys(LOCAL_CRATE)\n+            .iter()\n+            .filter_map(|&def_id| {\n+                let (encode_const, encode_opt) = should_encode_mir(self.tcx, def_id);\n+                if encode_const || encode_opt {\n+                    Some((def_id, encode_const, encode_opt))\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect::<Vec<_>>();\n+        // Sort everything to ensure a stable order for diagnotics.\n+        keys_and_jobs.sort_by_key(|&(def_id, _, _)| def_id);\n+        for (def_id, encode_const, encode_opt) in keys_and_jobs.into_iter() {\n+            debug_assert!(encode_const || encode_opt);\n \n             debug!(\"EntryBuilder::encode_mir({:?})\", def_id);\n             if encode_opt {"}]}