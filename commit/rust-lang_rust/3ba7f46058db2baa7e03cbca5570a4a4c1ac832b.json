{"sha": "3ba7f46058db2baa7e03cbca5570a4a4c1ac832b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYTdmNDYwNThkYjJiYWE3ZTAzY2JjYTU1NzBhNGE0YzFhYzgzMmI=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-08-30T02:38:37Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-08-30T02:38:37Z"}, "message": "Move panic payload state from Machine to Thread", "tree": {"sha": "8072dcf3b96f9600723eabd6d9317b03e38a9149", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8072dcf3b96f9600723eabd6d9317b03e38a9149"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b", "html_url": "https://github.com/rust-lang/rust/commit/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9123f0e01ec32103a35ab9d51122ceee5ce7bcfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9123f0e01ec32103a35ab9d51122ceee5ce7bcfb", "html_url": "https://github.com/rust-lang/rust/commit/9123f0e01ec32103a35ab9d51122ceee5ce7bcfb"}], "stats": {"total": 137, "additions": 124, "deletions": 13}, "files": [{"sha": "ebe3c509ad874371afe96af4712ab594dd5fef93", "filename": "src/machine.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=3ba7f46058db2baa7e03cbca5570a4a4c1ac832b", "patch": "@@ -252,11 +252,6 @@ pub struct Evaluator<'mir, 'tcx> {\n     pub(crate) file_handler: shims::posix::FileHandler,\n     pub(crate) dir_handler: shims::posix::DirHandler,\n \n-    /// The temporary used for storing the argument of\n-    /// the call to `miri_start_panic` (the panic payload) when unwinding.\n-    /// This is pointer-sized, and matches the `Payload` type in `src/libpanic_unwind/miri.rs`.\n-    pub(crate) panic_payload: Option<Scalar<Tag>>,\n-\n     /// The \"time anchor\" for this machine's monotone clock (for `Instant` simulation).\n     pub(crate) time_anchor: Instant,\n \n@@ -291,7 +286,6 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             validate,\n             file_handler: Default::default(),\n             dir_handler: Default::default(),\n-            panic_payload: None,\n             time_anchor: Instant::now(),\n             layouts,\n             threads: ThreadManager::default(),"}, {"sha": "b9d8ceb1dfb58f94d91867cba32c444435f798aa", "filename": "src/shims/panic.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=3ba7f46058db2baa7e03cbca5570a4a4c1ac832b", "patch": "@@ -48,11 +48,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Get the raw pointer stored in arg[0] (the panic payload).\n         let &[payload] = check_arg_count(args)?;\n         let payload = this.read_scalar(payload)?.check_init()?;\n-        assert!(\n-            this.machine.panic_payload.is_none(),\n-            \"the panic runtime should avoid double-panics\"\n-        );\n-        this.machine.panic_payload = Some(payload);\n+        this.set_panic_payload(payload);\n \n         // Jump to the unwind block to begin unwinding.\n         this.unwind_to_block(unwind);\n@@ -132,9 +128,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // We set the return value of `try` to 1, since there was a panic.\n             this.write_scalar(Scalar::from_i32(1), catch_unwind.dest)?;\n \n-            // `panic_payload` holds what was passed to `miri_start_panic`.\n+            // The Thread's `panic_payload` holds what was passed to `miri_start_panic`.\n             // This is exactly the second argument we need to pass to `catch_fn`.\n-            let payload = this.machine.panic_payload.take().unwrap();\n+            let payload = this.take_panic_payload();\n \n             // Push the `catch_fn` stackframe.\n             let f_instance = this.memory.get_fn(catch_unwind.catch_fn)?.as_instance()?;"}, {"sha": "dd5358bfb5e065e725d46e29ef17635d1e4f208c", "filename": "src/thread.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=3ba7f46058db2baa7e03cbca5570a4a4c1ac832b", "patch": "@@ -106,12 +106,21 @@ enum ThreadJoinStatus {\n /// A thread.\n pub struct Thread<'mir, 'tcx> {\n     state: ThreadState,\n+\n     /// Name of the thread.\n     thread_name: Option<Vec<u8>>,\n+\n     /// The virtual call stack.\n     stack: Vec<Frame<'mir, 'tcx, Tag, FrameData<'tcx>>>,\n+\n     /// The join status.\n     join_status: ThreadJoinStatus,\n+\n+    /// The temporary used for storing the argument of\n+    /// the call to `miri_start_panic` (the panic payload) when unwinding.\n+    /// This is pointer-sized, and matches the `Payload` type in `src/libpanic_unwind/miri.rs`.\n+    panic_payload: Option<Scalar<Tag>>,\n+\n }\n \n impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n@@ -150,6 +159,7 @@ impl<'mir, 'tcx> Default for Thread<'mir, 'tcx> {\n             thread_name: None,\n             stack: Vec::new(),\n             join_status: ThreadJoinStatus::Joinable,\n+            panic_payload: None,\n         }\n     }\n }\n@@ -509,6 +519,21 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n             throw_machine_stop!(TerminationInfo::Deadlock);\n         }\n     }\n+\n+    /// Store the panic payload when beginning unwinding.\n+    fn set_panic_payload(&mut self, payload: Scalar<Tag>) {\n+        let thread = self.active_thread_mut();\n+        assert!(\n+            thread.panic_payload.is_none(),\n+            \"the panic runtime should avoid double-panics\"\n+        );\n+        thread.panic_payload = Some(payload);\n+    }\n+\n+    /// Retrieve the panic payload, for use in `catch_unwind`.\n+    fn take_panic_payload(&mut self) -> Scalar<Tag> {\n+        self.active_thread_mut().panic_payload.take().unwrap()\n+    }\n }\n \n // Public interface to thread management.\n@@ -686,4 +711,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         Ok(())\n     }\n+\n+    /// Store the panic payload when beginning unwinding.\n+    fn set_panic_payload(&mut self, payload: Scalar<Tag>) {\n+        let this = self.eval_context_mut();\n+        this.machine.threads.set_panic_payload(payload);\n+    }\n+\n+    /// Retrieve the panic payload, for use in `catch_unwind`.\n+    fn take_panic_payload(&mut self) -> Scalar<Tag> {\n+        let this = self.eval_context_mut();\n+        this.machine.threads.take_panic_payload()\n+    }\n }"}, {"sha": "e798f514711f8b918a8c808be6865866fd98076d", "filename": "tests/run-pass/panic/concurrent-panic.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.rs?ref=3ba7f46058db2baa7e03cbca5570a4a4c1ac832b", "patch": "@@ -0,0 +1,80 @@\n+// ignore-windows: Concurrency on Windows is not supported yet.\n+use std::sync::{Arc, Condvar, Mutex};\n+use std::thread::{spawn, JoinHandle};\n+\n+struct BlockOnDrop(Option<JoinHandle<()>>);\n+\n+impl BlockOnDrop {\n+    fn new(handle: JoinHandle<()>) -> BlockOnDrop {\n+        BlockOnDrop(Some(handle))\n+    }\n+}\n+\n+impl Drop for BlockOnDrop {\n+    fn drop(&mut self) {\n+        let _ = self.0.take().unwrap().join();\n+    }\n+}\n+\n+/// Cause a panic in one thread while another thread is unwinding.\n+fn main() {\n+    let t1_started_pair = Arc::new((Mutex::new(false), Condvar::new()));\n+    let t2_started_pair = Arc::new((Mutex::new(false), Condvar::new()));\n+\n+    let t1_continue_mutex = Arc::new(Mutex::new(()));\n+    let t1_continue_guard = t1_continue_mutex.lock();\n+\n+    let t1 = {\n+        let t1_started_pair = t1_started_pair.clone();\n+        let t1_continue_mutex = t1_continue_mutex.clone();\n+        spawn(move || {\n+            let (mutex, condvar) = &*t1_started_pair;\n+            *mutex.lock().unwrap() = true;\n+            condvar.notify_one();\n+\n+            drop(t1_continue_mutex.lock());\n+            panic!(\"panic in thread 1\");\n+        })\n+    };\n+    let t2 = {\n+        let t2_started_pair = t2_started_pair.clone();\n+        let block_on_drop = BlockOnDrop::new(t1);\n+        spawn(move || {\n+            let _ = block_on_drop;\n+\n+            let (mutex, condvar) = &*t2_started_pair;\n+            *mutex.lock().unwrap() = true;\n+            condvar.notify_one();\n+\n+            panic!(\"panic in thread 2\");\n+        })\n+    };\n+\n+    // Wait for thread 1 to signal it has started.\n+    let (t1_started_mutex, t1_started_condvar) = &*t1_started_pair;\n+    let mut t1_started_guard = t1_started_mutex.lock().unwrap();\n+    while !*t1_started_guard {\n+        t1_started_guard = t1_started_condvar.wait(t1_started_guard).unwrap();\n+    }\n+    // Thread 1 should now be blocked waiting on t1_continue_mutex.\n+\n+    // Wait for thread 2 to signal it has started.\n+    let (t2_started_mutex, t2_started_condvar) = &*t2_started_pair;\n+    let mut t2_started_guard = t2_started_mutex.lock().unwrap();\n+    while !*t2_started_guard {\n+        t2_started_guard = t2_started_condvar.wait(t2_started_guard).unwrap();\n+    }\n+    // Thread 2 should now have already panicked and be in the middle of\n+    // unwinding. It should now be blocked on joining thread 1.\n+\n+    // Unlock t1_continue_mutex, and allow thread 1 to proceed.\n+    drop(t1_continue_guard);\n+    // Thread 1 will panic the next time it is scheduled. This will test the\n+    // behavior of interest to this test, whether Miri properly handles\n+    // concurrent panics in two different threads.\n+\n+    // Block the main thread on waiting to join thread 2. Thread 2 should\n+    // already be blocked on joining thread 1, so thread 1 will be scheduled\n+    // to run next, as it is the only ready thread.\n+    assert!(t2.join().is_err());\n+}"}, {"sha": "6652137c9659e6a664a7fd2acde24eb27e10135a", "filename": "tests/run-pass/panic/concurrent-panic.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.stderr?ref=3ba7f46058db2baa7e03cbca5570a4a4c1ac832b", "patch": "@@ -0,0 +1,4 @@\n+warning: thread support is experimental. For example, Miri does not detect data races yet.\n+\n+thread '<unnamed>' panicked at 'panic in thread 2', $DIR/concurrent-panic.rs:49:13\n+thread '<unnamed>' panicked at 'panic in thread 1', $DIR/concurrent-panic.rs:36:13"}]}