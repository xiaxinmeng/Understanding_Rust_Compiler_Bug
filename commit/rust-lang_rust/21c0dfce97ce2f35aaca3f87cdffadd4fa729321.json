{"sha": "21c0dfce97ce2f35aaca3f87cdffadd4fa729321", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYzBkZmNlOTdjZTJmMzVhYWNhM2Y4N2NkZmZhZGQ0ZmE3MjkzMjE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-09-23T04:29:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-23T04:29:20Z"}, "message": "Rollup merge of #44770 - dtolnay:borrowed, r=sfackler\n\nLess confusing placeholder when RefCell is exclusively borrowed\n\nBased on ExpHP's comment in [*RefCell.borrow_mut get strange result*](https://users.rust-lang.org/t/refcell-borrow-mut-get-strange-result/12994):\n\n> it would perhaps be nicer if it didn't put something that could be misinterpreted as a valid string value\n\nThe previous Debug implementation would show:\n\n    RefCell { value: \"<borrowed>\" }\n\nThe new one is:\n\n    RefCell { value: <borrowed> }", "tree": {"sha": "3a00b45e584ff919dad72974b23c06a0e3988f7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a00b45e584ff919dad72974b23c06a0e3988f7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21c0dfce97ce2f35aaca3f87cdffadd4fa729321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21c0dfce97ce2f35aaca3f87cdffadd4fa729321", "html_url": "https://github.com/rust-lang/rust/commit/21c0dfce97ce2f35aaca3f87cdffadd4fa729321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21c0dfce97ce2f35aaca3f87cdffadd4fa729321/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8915683c540a65ffd8384e3f830e7509c7337749", "url": "https://api.github.com/repos/rust-lang/rust/commits/8915683c540a65ffd8384e3f830e7509c7337749", "html_url": "https://github.com/rust-lang/rust/commit/8915683c540a65ffd8384e3f830e7509c7337749"}, {"sha": "f9d92d219d266c3161367cc694743e9c0e6d55c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d92d219d266c3161367cc694743e9c0e6d55c7", "html_url": "https://github.com/rust-lang/rust/commit/f9d92d219d266c3161367cc694743e9c0e6d55c7"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "b84a1deb61144adc062dd605e77962192532a2eb", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21c0dfce97ce2f35aaca3f87cdffadd4fa729321/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c0dfce97ce2f35aaca3f87cdffadd4fa729321/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=21c0dfce97ce2f35aaca3f87cdffadd4fa729321", "patch": "@@ -1700,8 +1700,18 @@ impl<T: ?Sized + Debug> Debug for RefCell<T> {\n                     .finish()\n             }\n             Err(_) => {\n+                // The RefCell is mutably borrowed so we can't look at its value\n+                // here. Show a placeholder instead.\n+                struct BorrowedPlaceholder;\n+\n+                impl Debug for BorrowedPlaceholder {\n+                    fn fmt(&self, f: &mut Formatter) -> Result {\n+                        f.write_str(\"<borrowed>\")\n+                    }\n+                }\n+\n                 f.debug_struct(\"RefCell\")\n-                    .field(\"value\", &\"<borrowed>\")\n+                    .field(\"value\", &BorrowedPlaceholder)\n                     .finish()\n             }\n         }"}, {"sha": "08e9990511fbbe90f49e568e6d6e79526dbb68a5", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21c0dfce97ce2f35aaca3f87cdffadd4fa729321/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c0dfce97ce2f35aaca3f87cdffadd4fa729321/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=21c0dfce97ce2f35aaca3f87cdffadd4fa729321", "patch": "@@ -13,6 +13,7 @@\n #![allow(unused_features)]\n #![feature(box_syntax)]\n \n+use std::cell::RefCell;\n use std::fmt::{self, Write};\n use std::usize;\n \n@@ -240,6 +241,8 @@ pub fn main() {\n     // test that trailing commas are acceptable\n     format!(\"{}\", \"test\",);\n     format!(\"{foo}\", foo=\"test\",);\n+\n+    test_refcell();\n }\n \n // Basic test to make sure that we can invoke the `write!` macro with an\n@@ -319,3 +322,12 @@ fn test_once() {\n     assert_eq!(format!(\"{0} {0} {0} {a} {a} {a}\", foo(), a=foo()),\n                \"1 1 1 2 2 2\".to_string());\n }\n+\n+fn test_refcell() {\n+    let refcell = RefCell::new(5);\n+    assert_eq!(format!(\"{:?}\", refcell), \"RefCell { value: 5 }\");\n+    let borrow = refcell.borrow_mut();\n+    assert_eq!(format!(\"{:?}\", refcell), \"RefCell { value: <borrowed> }\");\n+    drop(borrow);\n+    assert_eq!(format!(\"{:?}\", refcell), \"RefCell { value: 5 }\");\n+}"}]}