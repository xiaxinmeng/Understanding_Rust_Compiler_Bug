{"sha": "48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YzZmMDU2NjJiMGJmNThjY2UwZTg2N2U2MGMyZDg2YjVlNmZjZmI=", "commit": {"author": {"name": "Joseph Ryan", "email": "josephryan3.14@gmail.com", "date": "2020-07-30T18:54:26Z"}, "committer": {"name": "Joseph Ryan", "email": "josephryan3.14@gmail.com", "date": "2020-07-30T19:13:51Z"}, "message": "Update driver to add json backend", "tree": {"sha": "94dd747265b7da21a76e4c9cc45399171347042d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94dd747265b7da21a76e4c9cc45399171347042d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEtei29J14PIgXYsIlGom1QEO7zL0FAl8jG/UACgkQGom1QEO7\nzL2ixAf/VYzs/V7ObkhPWur/gk3xS3KhIcjT+Dk475CnCCNpoul+5dEaL5tV4OQn\n0omO1h7Ielk468s+KXA/NgFx5lhjHR5a6NFM79QaCtgVxciae79ZDhlUgPVe8huq\ns6UKY/F80c2oZmuOEF4k4bwmCXInXF4IHhD30Dw8q+TzejcwVoET58e3tYswrpxN\nW9HSvjMv3x8dFAO7JYP0CQ5gAckePgj+HhW76YAGWjP/ihugpXFX4QSkmdzZVZ6a\nA25YEj4myyhGAX6VglF8LqiygJz0AzpobJyX0mZA+a8+W7bfkiPcdYia3FP1ifT2\nH/aItJT0FVlOeSjeAdnjecgElPh3eA==\n=+GK4\n-----END PGP SIGNATURE-----", "payload": "tree 94dd747265b7da21a76e4c9cc45399171347042d\nparent 6b09c37ddc240e25748e53d7a8f81f252def6dee\nauthor Joseph Ryan <josephryan3.14@gmail.com> 1596135266 -0500\ncommitter Joseph Ryan <josephryan3.14@gmail.com> 1596136431 -0500\n\nUpdate driver to add json backend\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb", "html_url": "https://github.com/rust-lang/rust/commit/48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb/comments", "author": {"login": "P1n3appl3", "id": 9326885, "node_id": "MDQ6VXNlcjkzMjY4ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/9326885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P1n3appl3", "html_url": "https://github.com/P1n3appl3", "followers_url": "https://api.github.com/users/P1n3appl3/followers", "following_url": "https://api.github.com/users/P1n3appl3/following{/other_user}", "gists_url": "https://api.github.com/users/P1n3appl3/gists{/gist_id}", "starred_url": "https://api.github.com/users/P1n3appl3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P1n3appl3/subscriptions", "organizations_url": "https://api.github.com/users/P1n3appl3/orgs", "repos_url": "https://api.github.com/users/P1n3appl3/repos", "events_url": "https://api.github.com/users/P1n3appl3/events{/privacy}", "received_events_url": "https://api.github.com/users/P1n3appl3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P1n3appl3", "id": 9326885, "node_id": "MDQ6VXNlcjkzMjY4ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/9326885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P1n3appl3", "html_url": "https://github.com/P1n3appl3", "followers_url": "https://api.github.com/users/P1n3appl3/followers", "following_url": "https://api.github.com/users/P1n3appl3/following{/other_user}", "gists_url": "https://api.github.com/users/P1n3appl3/gists{/gist_id}", "starred_url": "https://api.github.com/users/P1n3appl3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P1n3appl3/subscriptions", "organizations_url": "https://api.github.com/users/P1n3appl3/orgs", "repos_url": "https://api.github.com/users/P1n3appl3/repos", "events_url": "https://api.github.com/users/P1n3appl3/events{/privacy}", "received_events_url": "https://api.github.com/users/P1n3appl3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b09c37ddc240e25748e53d7a8f81f252def6dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b09c37ddc240e25748e53d7a8f81f252def6dee", "html_url": "https://github.com/rust-lang/rust/commit/6b09c37ddc240e25748e53d7a8f81f252def6dee"}], "stats": {"total": 97, "additions": 81, "deletions": 16}, "files": [{"sha": "4f751decc8090a2bbeb16ca3f05a67b6112871dc", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb", "patch": "@@ -508,7 +508,7 @@ impl Options {\n         let output_format = match matches.opt_str(\"output-format\") {\n             Some(s) => match OutputFormat::try_from(s.as_str()) {\n                 Ok(o) => {\n-                    if o.is_json() && !show_coverage {\n+                    if o.is_json() && !(show_coverage || nightly_options::is_nightly_build()) {\n                         diag.struct_err(\"json output format isn't supported for doc generation\")\n                             .emit();\n                         return Err(1);\n@@ -626,7 +626,9 @@ fn check_deprecated_options(matches: &getopts::Matches, diag: &rustc_errors::Han\n \n     for flag in deprecated_flags.iter() {\n         if matches.opt_present(flag) {\n-            if *flag == \"output-format\" && matches.opt_present(\"show-coverage\") {\n+            if *flag == \"output-format\"\n+                && (matches.opt_present(\"show-coverage\") || nightly_options::is_nightly_build())\n+            {\n                 continue;\n             }\n             let mut err ="}, {"sha": "14f87ec2aa9bb7d5909939500d0470b8ebbdb75e", "filename": "src/librustdoc/json/mod.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb", "patch": "@@ -0,0 +1,47 @@\n+use crate::clean;\n+use crate::config::{RenderInfo, RenderOptions};\n+use crate::error::Error;\n+use crate::formats::cache::Cache;\n+use crate::formats::FormatRenderer;\n+\n+use rustc_span::edition::Edition;\n+\n+#[derive(Clone)]\n+pub struct JsonRenderer {}\n+\n+impl FormatRenderer for JsonRenderer {\n+    fn init(\n+        _krate: clean::Crate,\n+        _options: RenderOptions,\n+        _render_info: RenderInfo,\n+        _edition: Edition,\n+        _cache: &mut Cache,\n+    ) -> Result<(Self, clean::Crate), Error> {\n+        unimplemented!()\n+    }\n+\n+    fn item(&mut self, _item: clean::Item, _cache: &Cache) -> Result<(), Error> {\n+        unimplemented!()\n+    }\n+\n+    fn mod_item_in(\n+        &mut self,\n+        _item: &clean::Item,\n+        _item_name: &str,\n+        _cache: &Cache,\n+    ) -> Result<(), Error> {\n+        unimplemented!()\n+    }\n+\n+    fn mod_item_out(&mut self, _item_name: &str) -> Result<(), Error> {\n+        unimplemented!()\n+    }\n+\n+    fn after_krate(&mut self, _krate: &clean::Crate, _cache: &Cache) -> Result<(), Error> {\n+        unimplemented!()\n+    }\n+\n+    fn after_run(&mut self, _diag: &rustc_errors::Handler) -> Result<(), Error> {\n+        unimplemented!()\n+    }\n+}"}, {"sha": "62780878fd5af5626923e67a18fc6ead10795199", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=48c6f05662b0bf58cce0e867e60c2d86b5e6fcfb", "patch": "@@ -68,6 +68,7 @@ mod error;\n mod fold;\n crate mod formats;\n pub mod html;\n+mod json;\n mod markdown;\n mod passes;\n mod test;\n@@ -450,6 +451,28 @@ fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> i32 {\n     }\n }\n \n+fn run_renderer<T: formats::FormatRenderer>(\n+    krate: clean::Crate,\n+    renderopts: config::RenderOptions,\n+    render_info: config::RenderInfo,\n+    diag: &rustc_errors::Handler,\n+    edition: rustc_span::edition::Edition,\n+) -> i32 {\n+    match formats::run_format::<T>(krate, renderopts, render_info, &diag, edition) {\n+        Ok(_) => rustc_driver::EXIT_SUCCESS,\n+        Err(e) => {\n+            let mut msg = diag.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n+            let file = e.file.display().to_string();\n+            if file.is_empty() {\n+                msg.emit()\n+            } else {\n+                msg.note(&format!(\"failed to create or modify \\\"{}\\\"\", file)).emit()\n+            }\n+            rustc_driver::EXIT_FAILURE\n+        }\n+    }\n+}\n+\n fn main_options(options: config::Options) -> i32 {\n     let diag = core::new_handler(options.error_format, None, &options.debugging_options);\n \n@@ -480,6 +503,7 @@ fn main_options(options: config::Options) -> i32 {\n     let result = rustc_driver::catch_fatal_errors(move || {\n         let crate_name = options.crate_name.clone();\n         let crate_version = options.crate_version.clone();\n+        let output_format = options.output_format;\n         let (mut krate, renderinfo, renderopts) = core::run_core(options);\n \n         info!(\"finished with rustc\");\n@@ -502,20 +526,12 @@ fn main_options(options: config::Options) -> i32 {\n         info!(\"going to format\");\n         let (error_format, edition, debugging_options) = diag_opts;\n         let diag = core::new_handler(error_format, None, &debugging_options);\n-        match formats::run_format::<html::render::Context>(\n-            krate, renderopts, renderinfo, &diag, edition,\n-        ) {\n-            Ok(_) => rustc_driver::EXIT_SUCCESS,\n-            Err(e) => {\n-                let mut msg =\n-                    diag.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n-                let file = e.file.display().to_string();\n-                if file.is_empty() {\n-                    msg.emit()\n-                } else {\n-                    msg.note(&format!(\"failed to create or modify \\\"{}\\\"\", file)).emit()\n-                }\n-                rustc_driver::EXIT_FAILURE\n+        match output_format {\n+            None | Some(config::OutputFormat::Html) => {\n+                run_renderer::<html::render::Context>(krate, renderopts, renderinfo, &diag, edition)\n+            }\n+            Some(config::OutputFormat::Json) => {\n+                run_renderer::<json::JsonRenderer>(krate, renderopts, renderinfo, &diag, edition)\n             }\n         }\n     });"}]}