{"sha": "833dc7e6826483b19c819fc19727efe4e8ddbf12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzM2RjN2U2ODI2NDgzYjE5YzgxOWZjMTk3MjdlZmU0ZThkZGJmMTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-10T11:40:34Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-11T09:25:51Z"}, "message": "Address attribute naming and use `Bound` enum", "tree": {"sha": "e3129c36ae23408fcdb7a5db0edf2c6d7d07136d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3129c36ae23408fcdb7a5db0edf2c6d7d07136d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/833dc7e6826483b19c819fc19727efe4e8ddbf12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/833dc7e6826483b19c819fc19727efe4e8ddbf12", "html_url": "https://github.com/rust-lang/rust/commit/833dc7e6826483b19c819fc19727efe4e8ddbf12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/833dc7e6826483b19c819fc19727efe4e8ddbf12/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2c924b5ae21b67be77aa7e944ae9d9f883a0bde", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2c924b5ae21b67be77aa7e944ae9d9f883a0bde", "html_url": "https://github.com/rust-lang/rust/commit/a2c924b5ae21b67be77aa7e944ae9d9f883a0bde"}], "stats": {"total": 83, "additions": 44, "deletions": 39}, "files": [{"sha": "30067d7e163d21bf43e1f9ab466109c48a553efb", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/833dc7e6826483b19c819fc19727efe4e8ddbf12/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833dc7e6826483b19c819fc19727efe4e8ddbf12/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=833dc7e6826483b19c819fc19727efe4e8ddbf12", "patch": "@@ -15,7 +15,7 @@ use ops::CoerceUnsized;\n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n #[cfg_attr(stage0, lang = \"non_zero\")]\n-#[cfg_attr(not(stage0), rustc_layout_scalar_range_start(1))]\n+#[cfg_attr(not(stage0), rustc_layout_scalar_valid_range_start(1))]\n #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n #[repr(transparent)]\n pub(crate) struct NonZero<T>(pub(crate) T);"}, {"sha": "9c759b38d38a500f35abd58a6d9e310e316a71c0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/833dc7e6826483b19c819fc19727efe4e8ddbf12/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833dc7e6826483b19c819fc19727efe4e8ddbf12/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=833dc7e6826483b19c819fc19727efe4e8ddbf12", "patch": "@@ -66,7 +66,7 @@ use std::collections::hash_map::{self, Entry};\n use std::hash::{Hash, Hasher};\n use std::fmt;\n use std::mem;\n-use std::ops::Deref;\n+use std::ops::{Deref, Bound};\n use std::iter;\n use std::sync::mpsc;\n use std::sync::Arc;\n@@ -1083,27 +1083,24 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         interned\n     }\n \n-    /// Returns a range of the start/end indices specified with the `rustc_layout_scalar_range`\n-    /// attribute. Missing range ends may be denoted by `None` and will just use the max/min of\n-    /// the type.\n-    pub fn layout_scalar_range(self, def_id: DefId) -> Option<(Option<u128>, Option<u128>)> {\n+    /// Returns a range of the start/end indices specified with the\n+    /// `rustc_layout_scalar_valid_range` attribute.\n+    pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {\n         let attrs = self.get_attrs(def_id);\n-        let get = |name| -> Option<u128> {\n-            let attr = attrs.iter().find(|a| a.check_name(name))?;\n-            for meta in attr.meta_item_list().expect(\"rustc_layout_scalar_range takes args\") {\n-                match meta.literal().expect(\"rustc_layout_scalar_range attribute takes lit\").node {\n-                    ast::LitKind::Int(a, _) => return Some(a),\n-                    _ => span_bug!(attr.span, \"rustc_layout_scalar_range expects integer arg\"),\n+        let get = |name| {\n+            let attr = match attrs.iter().find(|a| a.check_name(name)) {\n+                Some(attr) => attr,\n+                None => return Bound::Unbounded,\n+            };\n+            for meta in attr.meta_item_list().expect(\"rustc_layout_scalar_valid_range takes args\") {\n+                match meta.literal().expect(\"attribute takes lit\").node {\n+                    ast::LitKind::Int(a, _) => return Bound::Included(a),\n+                    _ => span_bug!(attr.span, \"rustc_layout_scalar_valid_range expects int arg\"),\n                 }\n             }\n-            bug!(\"no arguments to `rustc_layout_scalar_range` attribute\");\n+            span_bug!(attr.span, \"no arguments to `rustc_layout_scalar_valid_range` attribute\");\n         };\n-        let start = get(\"rustc_layout_scalar_range_start\");\n-        let end = get(\"rustc_layout_scalar_range_end\");\n-        if start.is_none() && end.is_none() {\n-            return None;\n-        }\n-        Some((start, end))\n+        (get(\"rustc_layout_scalar_valid_range_start\"), get(\"rustc_layout_scalar_valid_range_end\"))\n     }\n \n     pub fn lift<T: ?Sized + Lift<'tcx>>(self, value: &T) -> Option<T::Lifted> {"}, {"sha": "71cdec0f83eca09dda8abaedb8d2400f2f1b7fe7", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/833dc7e6826483b19c819fc19727efe4e8ddbf12/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833dc7e6826483b19c819fc19727efe4e8ddbf12/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=833dc7e6826483b19c819fc19727efe4e8ddbf12", "patch": "@@ -20,6 +20,7 @@ use std::fmt;\n use std::i128;\n use std::iter;\n use std::mem;\n+use std::ops::Bound;\n \n use ich::StableHashingContext;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n@@ -761,20 +762,28 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n                     let mut st = univariant_uninterned(&variants[v], &def.repr, kind)?;\n                     st.variants = Variants::Single { index: v };\n-                    if let Some((start, end)) = self.tcx.layout_scalar_range(def.did) {\n-                        match st.abi {\n-                            Abi::Scalar(ref mut scalar) |\n-                            Abi::ScalarPair(ref mut scalar, _) => {\n-                                let start = start.unwrap_or(*scalar.valid_range.start());\n-                                let end = end.unwrap_or(*scalar.valid_range.end());\n-                                scalar.valid_range = start..=end;\n+                    let (start, end) = self.tcx.layout_scalar_valid_range(def.did);\n+                    match st.abi {\n+                        Abi::Scalar(ref mut scalar) |\n+                        Abi::ScalarPair(ref mut scalar, _) => {\n+                            // the asserts ensure that we are not using the\n+                            // `#[rustc_layout_scalar_valid_range(n)]`\n+                            // attribute to widen the range of anything as that would probably\n+                            // result in UB somewhere\n+                            if let Bound::Included(start) = start {\n+                                assert!(*scalar.valid_range.start() <= start);\n+                                scalar.valid_range = start..=*scalar.valid_range.end();\n+                            }\n+                            if let Bound::Included(end) = end {\n+                                assert!(*scalar.valid_range.end() >= end);\n+                                scalar.valid_range = *scalar.valid_range.start()..=end;\n                             }\n-                            _ => bug!(\n-                                \"nonscalar layout for rustc_layout_scalar_range type {:?}: {:#?}\",\n-                                def,\n-                                st,\n-                            ),\n                         }\n+                        _ => bug!(\n+                            \"nonscalar layout for layout_scalar_valid_range type {:?}: {:#?}\",\n+                            def,\n+                            st,\n+                        ),\n                     }\n                     return Ok(tcx.intern_layout(st));\n                 }\n@@ -1353,13 +1362,12 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n                 if def.variants.len() == 1 {\n                     if let Some(SizeSkeleton::Pointer { non_zero, tail }) = v0 {\n                         return Ok(SizeSkeleton::Pointer {\n-                            non_zero: non_zero ||\n-                                tcx.layout_scalar_range(def.did).map_or(false, |(start, end)| {\n-                                    // `n..` for `n > 0` or `n..m` for `n > 0 && m > n`\n-                                    start.map_or(true, |start| start > 0 && end.map_or(true, |end| {\n-                                        end > start\n-                                    }))\n-                                }),\n+                            non_zero: non_zero || match tcx.layout_scalar_valid_range(def.did) {\n+                                (Bound::Included(start), Bound::Unbounded) => start > 0,\n+                                (Bound::Included(start), Bound::Included(end)) =>\n+                                    0 < start && start < end,\n+                                _ => false,\n+                            },\n                             tail,\n                         });\n                     } else {"}, {"sha": "0b5fb97f0e1fc7a2d6fa7532f7613124318b99b8", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/833dc7e6826483b19c819fc19727efe4e8ddbf12/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833dc7e6826483b19c819fc19727efe4e8ddbf12/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=833dc7e6826483b19c819fc19727efe4e8ddbf12", "patch": "@@ -97,7 +97,7 @@ macro_rules! newtype_index {\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n-        #[rustc_layout_scalar_range_end($max)]\n+        #[rustc_layout_scalar_valid_range_end($max)]\n         $v struct $type {\n             private: u32\n         }"}]}