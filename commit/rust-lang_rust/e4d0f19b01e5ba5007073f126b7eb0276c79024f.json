{"sha": "e4d0f19b01e5ba5007073f126b7eb0276c79024f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZDBmMTliMDFlNWJhNTAwNzA3M2YxMjZiN2ViMDI3NmM3OTAyNGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-01T16:47:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-01T16:47:51Z"}, "message": "Merge #5638\n\n5638: Simplify argument parsing r=matklad a=lnicola\n\nand use `Display` when printing errors.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "21be486aaf2aa28843ea1adc705507d7bdc41b00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21be486aaf2aa28843ea1adc705507d7bdc41b00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4d0f19b01e5ba5007073f126b7eb0276c79024f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJZy3CRBK7hj4Ov3rIwAAdHIIAJKeY4r6qr8viWtjoSj9GnuW\n9UpqG6FDon4jcY/dLF8Vx3iRranFy3APpZ7iK10c+nWwm+Q3wUhFBD0KI3WC7Z1W\nOEXL4Cs3Rzeq+6gdm3NoliCp5hK/FxVAM4i6awjGD6C/ILQSZEVWiSr3RjsuD5Vv\nqeFca9leoKbpR+S+Ym7Ieh+PvcroFUjFsZmcGKJplnTPsG6RjPOcWVAIJs4WsD63\niThqW4HhzsmIS+aEVDU+D0BmH13/DVUxBxVabSjQu6AzdVCys/PcysnlawZuAlP1\nJVCshMh6Vrrfji3QVQoShTPTaHAxg6nMwCO+CHdqPnoRGeHdbtYzmWgYFIsELDk=\n=/IQC\n-----END PGP SIGNATURE-----\n", "payload": "tree 21be486aaf2aa28843ea1adc705507d7bdc41b00\nparent cf17366df97d460f246f69d06fbfb129074d1a5c\nparent 562491b16bcf54a4cde4a61e4fd078af1532cccc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596300471 +0000\ncommitter GitHub <noreply@github.com> 1596300471 +0000\n\nMerge #5638\n\n5638: Simplify argument parsing r=matklad a=lnicola\n\nand use `Display` when printing errors.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d0f19b01e5ba5007073f126b7eb0276c79024f", "html_url": "https://github.com/rust-lang/rust/commit/e4d0f19b01e5ba5007073f126b7eb0276c79024f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4d0f19b01e5ba5007073f126b7eb0276c79024f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf17366df97d460f246f69d06fbfb129074d1a5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf17366df97d460f246f69d06fbfb129074d1a5c", "html_url": "https://github.com/rust-lang/rust/commit/cf17366df97d460f246f69d06fbfb129074d1a5c"}, {"sha": "562491b16bcf54a4cde4a61e4fd078af1532cccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/562491b16bcf54a4cde4a61e4fd078af1532cccc", "html_url": "https://github.com/rust-lang/rust/commit/562491b16bcf54a4cde4a61e4fd078af1532cccc"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "d3081e88bd94176e4ad71d454b64b5f77c9f1514", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e4d0f19b01e5ba5007073f126b7eb0276c79024f/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d0f19b01e5ba5007073f126b7eb0276c79024f/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=e4d0f19b01e5ba5007073f126b7eb0276c79024f", "patch": "@@ -44,15 +44,16 @@ pub(crate) enum Command {\n     ProcMacro,\n     RunServer,\n     Version,\n+    Help,\n }\n \n impl Args {\n-    pub(crate) fn parse() -> Result<Result<Args, HelpPrinted>> {\n+    pub(crate) fn parse() -> Result<Args> {\n         let mut matches = Arguments::from_env();\n \n         if matches.contains(\"--version\") {\n             matches.finish().or_else(handle_extra_flags)?;\n-            return Ok(Ok(Args { verbosity: Verbosity::Normal, command: Command::Version }));\n+            return Ok(Args { verbosity: Verbosity::Normal, command: Command::Version });\n         }\n \n         let verbosity = match (\n@@ -68,15 +69,16 @@ impl Args {\n             (false, true, true) => bail!(\"Invalid flags: -q conflicts with -v\"),\n         };\n \n+        let help = Ok(Args { verbosity, command: Command::Help });\n         let subcommand = match matches.subcommand()? {\n             Some(it) => it,\n             None => {\n                 if matches.contains([\"-h\", \"--help\"]) {\n                     print_subcommands();\n-                    return Ok(Err(HelpPrinted));\n+                    return help;\n                 }\n                 matches.finish().or_else(handle_extra_flags)?;\n-                return Ok(Ok(Args { verbosity, command: Command::RunServer }));\n+                return Ok(Args { verbosity, command: Command::RunServer });\n             }\n         };\n         let command = match subcommand.as_str() {\n@@ -93,7 +95,7 @@ FLAGS:\n     -h, --help       Prints help information\n         --no-dump\"\n                     );\n-                    return Ok(Err(HelpPrinted));\n+                    return help;\n                 }\n \n                 let no_dump = matches.contains(\"--no-dump\");\n@@ -112,7 +114,7 @@ USAGE:\n FLAGS:\n     -h, --help    Prints help inforamtion\"\n                     );\n-                    return Ok(Err(HelpPrinted));\n+                    return help;\n                 }\n \n                 matches.finish().or_else(handle_extra_flags)?;\n@@ -132,7 +134,7 @@ FLAGS:\n     -h, --help       Prints help information\n     -r, --rainbow\"\n                     );\n-                    return Ok(Err(HelpPrinted));\n+                    return help;\n                 }\n \n                 let rainbow = matches.contains([\"-r\", \"--rainbow\"]);\n@@ -166,7 +168,7 @@ OPTIONS:\n ARGS:\n     <PATH>\"\n                     );\n-                    return Ok(Err(HelpPrinted));\n+                    return help;\n                 }\n \n                 let randomize = matches.contains(\"--randomize\");\n@@ -220,7 +222,7 @@ OPTIONS:\n ARGS:\n     <PATH>    Project to analyse\"\n                     );\n-                    return Ok(Err(HelpPrinted));\n+                    return help;\n                 }\n \n                 let path: PathBuf = matches.opt_value_from_str(\"--project\")?.unwrap_or_default();\n@@ -266,7 +268,7 @@ FLAGS:\n ARGS:\n     <PATH>\"\n                     );\n-                    return Ok(Err(HelpPrinted));\n+                    return help;\n                 }\n \n                 let load_output_dirs = matches.contains(\"--load-output-dirs\");\n@@ -302,7 +304,7 @@ FLAGS:\n ARGS:\n     <RULE>              A structured search replace rule\"\n                     );\n-                    return Ok(Err(HelpPrinted));\n+                    return help;\n                 }\n                 let mut rules = Vec::new();\n                 while let Some(rule) = matches.free_from_str()? {\n@@ -329,7 +331,7 @@ FLAGS:\n ARGS:\n     <PATTERN>           A structured search pattern\"\n                     );\n-                    return Ok(Err(HelpPrinted));\n+                    return help;\n                 }\n                 let debug_snippet = matches.opt_value_from_str(\"--debug\")?;\n                 let mut patterns = Vec::new();\n@@ -340,10 +342,10 @@ ARGS:\n             }\n             _ => {\n                 print_subcommands();\n-                return Ok(Err(HelpPrinted));\n+                return help;\n             }\n         };\n-        Ok(Ok(Args { verbosity, command }))\n+        Ok(Args { verbosity, command })\n     }\n }\n \n@@ -371,8 +373,6 @@ SUBCOMMANDS:\n     )\n }\n \n-pub(crate) struct HelpPrinted;\n-\n fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n     if let pico_args::Error::UnusedArgsLeft(flags) = e {\n         let mut invalid_flags = String::new();"}, {"sha": "fc7f8b01d23c77e8691c33c36832b5b5c0aa1729", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4d0f19b01e5ba5007073f126b7eb0276c79024f/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d0f19b01e5ba5007073f126b7eb0276c79024f/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=e4d0f19b01e5ba5007073f126b7eb0276c79024f", "patch": "@@ -3,7 +3,7 @@\n //! Based on cli flags, either spawns an LSP server, or runs a batch analysis\n mod args;\n \n-use std::convert::TryFrom;\n+use std::{convert::TryFrom, process};\n \n use lsp_server::Connection;\n use ra_project_model::ProjectManifest;\n@@ -14,18 +14,20 @@ use rust_analyzer::{\n };\n use vfs::AbsPathBuf;\n \n-use crate::args::HelpPrinted;\n-\n #[cfg(all(feature = \"mimalloc\"))]\n #[global_allocator]\n static ALLOC: mimalloc::MiMalloc = mimalloc::MiMalloc;\n \n-fn main() -> Result<()> {\n+fn main() {\n+    if let Err(err) = try_main() {\n+        eprintln!(\"{}\", err);\n+        process::exit(101);\n+    }\n+}\n+\n+fn try_main() -> Result<()> {\n     setup_logging()?;\n-    let args = match args::Args::parse()? {\n-        Ok(it) => it,\n-        Err(HelpPrinted) => return Ok(()),\n-    };\n+    let args = args::Args::parse()?;\n     match args.command {\n         args::Command::RunServer => run_server()?,\n         args::Command::ProcMacro => ra_proc_macro_srv::cli::run()?,\n@@ -45,6 +47,7 @@ fn main() -> Result<()> {\n             cli::search_for_patterns(patterns, debug_snippet)?;\n         }\n         args::Command::Version => println!(\"rust-analyzer {}\", env!(\"REV\")),\n+        args::Command::Help => {}\n     }\n     Ok(())\n }"}]}