{"sha": "beb2f5b8ff89f3e973e085ce338a59e5203fecb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYjJmNWI4ZmY4OWYzZTk3M2UwODVjZTMzOGE1OWU1MjAzZmVjYjA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-25T20:31:42Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-09-05T14:07:16Z"}, "message": "Remove `Ident::{gensym, is_gensymed}`\n\n`gensym_if_underscore` still exists. The symbol interner can still\ncreate arbitray gensyms, this is just not exposed publicly.", "tree": {"sha": "eba84abe06d8203c7c4e6ae924b6958d9a200fa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eba84abe06d8203c7c4e6ae924b6958d9a200fa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beb2f5b8ff89f3e973e085ce338a59e5203fecb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beb2f5b8ff89f3e973e085ce338a59e5203fecb0", "html_url": "https://github.com/rust-lang/rust/commit/beb2f5b8ff89f3e973e085ce338a59e5203fecb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beb2f5b8ff89f3e973e085ce338a59e5203fecb0/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a82aec36ae86a1913473cb7e830a77b481641ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a82aec36ae86a1913473cb7e830a77b481641ea", "html_url": "https://github.com/rust-lang/rust/commit/2a82aec36ae86a1913473cb7e830a77b481641ea"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "4e33ea018a074cb9de263a7a007fa4909bc66c4c", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/beb2f5b8ff89f3e973e085ce338a59e5203fecb0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2f5b8ff89f3e973e085ce338a59e5203fecb0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=beb2f5b8ff89f3e973e085ce338a59e5203fecb0", "patch": "@@ -1307,12 +1307,8 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 None => continue,\n             };\n \n-            // Filter away ambiguous and gensymed imports. Gensymed imports\n-            // (e.g. implicitly injected `std`) cannot be properly encoded in metadata,\n-            // so they can cause name conflict errors downstream.\n-            let is_good_import = binding.is_import() && !binding.is_ambiguity() &&\n-                                 // Note that as_str() de-gensyms the Symbol\n-                                 !(ident.is_gensymed() && ident.name.as_str() != \"_\");\n+            // Filter away ambiguous imports.\n+            let is_good_import = binding.is_import() && !binding.is_ambiguity();\n             if is_good_import || binding.is_macro_def() {\n                 let res = binding.res();\n                 if res != Res::Err {"}, {"sha": "ce20e4407fe8812e722cf014162238c1b10564d9", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/beb2f5b8ff89f3e973e085ce338a59e5203fecb0/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2f5b8ff89f3e973e085ce338a59e5203fecb0/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=beb2f5b8ff89f3e973e085ce338a59e5203fecb0", "patch": "@@ -798,21 +798,15 @@ impl Ident {\n         Ident::new(self.name, self.span.modern_and_legacy())\n     }\n \n-    /// Transforms an identifier into one with the same name, but gensymed.\n-    pub fn gensym(self) -> Ident {\n-        let name = with_interner(|interner| interner.gensymed(self.name));\n-        Ident::new(name, self.span)\n-    }\n-\n     /// Transforms an underscore identifier into one with the same name, but\n     /// gensymed. Leaves non-underscore identifiers unchanged.\n     pub fn gensym_if_underscore(self) -> Ident {\n-        if self.name == kw::Underscore { self.gensym() } else { self }\n-    }\n-\n-    // WARNING: this function is deprecated and will be removed in the future.\n-    pub fn is_gensymed(self) -> bool {\n-        with_interner(|interner| interner.is_gensymed(self.name))\n+        if self.name == kw::Underscore {\n+            let name = with_interner(|interner| interner.gensymed(self.name));\n+            Ident::new(name, self.span)\n+        } else {\n+            self\n+        }\n     }\n \n     pub fn as_str(self) -> LocalInternedString {\n@@ -865,9 +859,12 @@ impl UseSpecializedDecodable for Ident {}\n ///\n /// Examples:\n /// ```\n-/// assert_eq!(Ident::from_str(\"x\"), Ident::from_str(\"x\"))\n-/// assert_ne!(Ident::from_str(\"x\").gensym(), Ident::from_str(\"x\"))\n-/// assert_ne!(Ident::from_str(\"x\").gensym(), Ident::from_str(\"x\").gensym())\n+/// assert_eq!(Ident::from_str(\"_\"), Ident::from_str(\"_\"))\n+/// assert_ne!(Ident::from_str(\"_\").gensym_if_underscore(), Ident::from_str(\"_\"))\n+/// assert_ne!(\n+///     Ident::from_str(\"_\").gensym_if_underscore(),\n+///     Ident::from_str(\"_\").gensym_if_underscore(),\n+/// )\n /// ```\n /// Internally, a symbol is implemented as an index, and all operations\n /// (including hashing, equality, and ordering) operate on that index. The use"}]}