{"sha": "0ddae5ec7dc2c1a4237bb091e52fff5940f18b48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZGFlNWVjN2RjMmMxYTQyMzdiYjA5MWU1MmZmZjU5NDBmMThiNDg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-05T23:39:06Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-05T23:53:55Z"}, "message": "Add str::trim{_,_left_,_right_}chars.", "tree": {"sha": "1d3299d3013cec7a7b0a62e682bd333a7cb438e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d3299d3013cec7a7b0a62e682bd333a7cb438e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ddae5ec7dc2c1a4237bb091e52fff5940f18b48", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ddae5ec7dc2c1a4237bb091e52fff5940f18b48", "html_url": "https://github.com/rust-lang/rust/commit/0ddae5ec7dc2c1a4237bb091e52fff5940f18b48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ddae5ec7dc2c1a4237bb091e52fff5940f18b48/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15b4734d0c1b6e8689d6715ef8b808f5ce6f546c", "url": "https://api.github.com/repos/rust-lang/rust/commits/15b4734d0c1b6e8689d6715ef8b808f5ce6f546c", "html_url": "https://github.com/rust-lang/rust/commit/15b4734d0c1b6e8689d6715ef8b808f5ce6f546c"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "1d77347b03e65d18b26dc69a662919dd6ba92c65", "filename": "AUTHORS.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ddae5ec7dc2c1a4237bb091e52fff5940f18b48/AUTHORS.txt", "raw_url": "https://github.com/rust-lang/rust/raw/0ddae5ec7dc2c1a4237bb091e52fff5940f18b48/AUTHORS.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/AUTHORS.txt?ref=0ddae5ec7dc2c1a4237bb091e52fff5940f18b48", "patch": "@@ -21,6 +21,7 @@ Brendan Eich <brendan@mozilla.org>\n Brian Anderson <banderson@mozilla.com>\n Chris Double <chris.double@double.co.nz>\n Chris Peterson <cpeterson@mozilla.com>\n+Coppola Ivano <rgbfirefox@gmail.com>\n Damian Gryski <damian@gryski.com>\n Damien Grassart <damien@grassart.com>\n Daniel Brooks <db48x@db48x.net>"}, {"sha": "6a30a431b830be338e5c352c3addc90cdfb34228", "filename": "src/libcore/str.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/0ddae5ec7dc2c1a4237bb091e52fff5940f18b48/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ddae5ec7dc2c1a4237bb091e52fff5940f18b48/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=0ddae5ec7dc2c1a4237bb091e52fff5940f18b48", "patch": "@@ -39,6 +39,9 @@ export\n    trim_left,\n    trim_right,\n    trim,\n+   trim_left_chars,\n+   trim_right_chars,\n+   trim_chars,\n \n    // Transforming strings\n    to_bytes,\n@@ -350,6 +353,58 @@ fn view_shift_char(s: &a/str) -> (char, &a/str) {\n /// Prepend a char to a string\n fn unshift_char(&s: ~str, ch: char) { s = from_char(ch) + s; }\n \n+/**\n+ * Returns a string with leading `chars_to_trim` removed.\n+ *\n+ * # Arguments\n+ *\n+ * * s - A string\n+ * * chars_to_trim - A vector of chars\n+ *\n+ */\n+pure fn trim_left_chars(s: &str, chars_to_trim: &[char]) -> ~str {\n+    if chars_to_trim.is_empty() { return from_slice(s); }\n+\n+    match find(s, |c| !chars_to_trim.contains(c)) {\n+      None => ~\"\",\n+      Some(first) => unsafe { unsafe::slice_bytes(s, first, s.len()) }\n+    }\n+}\n+\n+/**\n+ * Returns a string with trailing `chars_to_trim` removed.\n+ *\n+ * # Arguments\n+ *\n+ * * s - A string\n+ * * chars_to_trim - A vector of chars\n+ *\n+ */\n+pure fn trim_right_chars(s: &str, chars_to_trim: &[char]) -> ~str {\n+    if chars_to_trim.is_empty() { return str::from_slice(s); }\n+\n+    match rfind(s, |c| !chars_to_trim.contains(c)) {\n+      None => ~\"\",\n+      Some(last) => {\n+        let {next, _} = char_range_at(s, last);\n+        unsafe { unsafe::slice_bytes(s, 0u, next) }\n+      }\n+    }\n+}\n+\n+/**\n+ * Returns a string with leading and trailing `chars_to_trim` removed.\n+ *\n+ * # Arguments\n+ *\n+ * * s - A string\n+ * * chars_to_trim - A vector of chars\n+ *\n+ */\n+pure fn trim_chars(s: &str, chars_to_trim: &[char]) -> ~str {\n+    trim_left_chars(trim_right_chars(s, chars_to_trim), chars_to_trim)\n+}\n+\n /// Returns a string with leading whitespace removed\n pure fn trim_left(s: &str) -> ~str {\n     match find(s, |c| !char::is_whitespace(c)) {\n@@ -2731,6 +2786,30 @@ mod tests {\n         slice(~\"\u4e2d\u534eVi\u1ec7t Nam\", 0u, 2u);\n     }\n \n+    #[test]\n+    fn test_trim_left_chars() {\n+        assert trim_left_chars(~\" *** foo *** \", ~[]) == ~\" *** foo *** \";\n+        assert trim_left_chars(~\" *** foo *** \", ~['*', ' ']) == ~\"foo *** \";\n+        assert trim_left_chars(~\" ***  *** \", ~['*', ' ']) == ~\"\";\n+        assert trim_left_chars(~\"foo *** \", ~['*', ' ']) == ~\"foo *** \";\n+    }\n+\n+    #[test]\n+    fn test_trim_right_chars() {\n+        assert trim_right_chars(~\" *** foo *** \", ~[]) == ~\" *** foo *** \";\n+        assert trim_right_chars(~\" *** foo *** \", ~['*', ' ']) == ~\" *** foo\";\n+        assert trim_right_chars(~\" ***  *** \", ~['*', ' ']) == ~\"\";\n+        assert trim_right_chars(~\" *** foo\", ~['*', ' ']) == ~\" *** foo\";\n+    }\n+\n+    #[test]\n+    fn test_trim_chars() {\n+        assert trim_chars(~\" *** foo *** \", ~[]) == ~\" *** foo *** \";\n+        assert trim_chars(~\" *** foo *** \", ~['*', ' ']) == ~\"foo\";\n+        assert trim_chars(~\" ***  *** \", ~['*', ' ']) == ~\"\";\n+        assert trim_chars(~\"foo\", ~['*', ' ']) == ~\"foo\";\n+    }\n+\n     #[test]\n     fn test_trim_left() {\n         assert (trim_left(~\"\") == ~\"\");"}]}