{"sha": "9a7913786c2e1923e30faf7c6eb680546259653c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNzkxMzc4NmMyZTE5MjNlMzBmYWY3YzZlYjY4MDU0NjI1OTY1M2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-15T11:07:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-15T11:07:02Z"}, "message": "Auto merge of #31653 - tomaka:emscripten-abi, r=eddyb\n\nNeeds a correct review because I'm not too confident with how this works.\nAll tests related to the C ABI are now passing.\n\nReferences:\n- https://github.com/kripken/emscripten-fastcomp-clang/blob/dbe68fecd03d6f646bd075963c3cc0e7130e5767/lib/CodeGen/TargetInfo.cpp#L479-L489\n- https://github.com/kripken/emscripten-fastcomp-clang/blob/dbe68fecd03d6f646bd075963c3cc0e7130e5767/lib/CodeGen/TargetInfo.cpp#L466-L477\n\nThe `classifyArgumentType` function has two different paths depending on `RAA == CGCXXABI::RAA_DirectInMemory`, but I don't really know what's the corresponding option in Rust.\n\ncc @brson @eddyb", "tree": {"sha": "9030e2a35272724ca7e842ab24bd7b4f4a0bb596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9030e2a35272724ca7e842ab24bd7b4f4a0bb596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a7913786c2e1923e30faf7c6eb680546259653c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7913786c2e1923e30faf7c6eb680546259653c", "html_url": "https://github.com/rust-lang/rust/commit/9a7913786c2e1923e30faf7c6eb680546259653c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a7913786c2e1923e30faf7c6eb680546259653c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ba94028ac1f459fc5a600f6b2b59a4079288e17", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba94028ac1f459fc5a600f6b2b59a4079288e17", "html_url": "https://github.com/rust-lang/rust/commit/5ba94028ac1f459fc5a600f6b2b59a4079288e17"}, {"sha": "5b224ec94da5cef4562ed834a5f0a5a4b7655da3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b224ec94da5cef4562ed834a5f0a5a4b7655da3", "html_url": "https://github.com/rust-lang/rust/commit/5b224ec94da5cef4562ed834a5f0a5a4b7655da3"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "3a4a6b9960e9cea6bd62cb3260b08423def164b6", "filename": "src/librustc_trans/trans/cabi_asmjs.rs", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9a7913786c2e1923e30faf7c6eb680546259653c/src%2Flibrustc_trans%2Ftrans%2Fcabi_asmjs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7913786c2e1923e30faf7c6eb680546259653c/src%2Flibrustc_trans%2Ftrans%2Fcabi_asmjs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_asmjs.rs?ref=9a7913786c2e1923e30faf7c6eb680546259653c", "patch": "@@ -8,15 +8,65 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use trans::cabi::FnType;\n-use trans::cabi_arm;\n+#![allow(non_upper_case_globals)]\n+\n+use llvm::{Struct, Array, Attribute};\n+use trans::cabi::{FnType, ArgType};\n use trans::context::CrateContext;\n use trans::type_::Type;\n \n+// Data layout: e-p:32:32-i64:64-v128:32:128-n32-S128\n+\n+// See the https://github.com/kripken/emscripten-fastcomp-clang repository.\n+// The class `EmscriptenABIInfo` in `/lib/CodeGen/TargetInfo.cpp` contains the ABI definitions.\n+\n+fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n+    match ty.kind() {\n+        Struct => {\n+            let field_types = ty.field_types();\n+            if field_types.len() == 1 {\n+                ArgType::direct(ty, Some(field_types[0]), None, None)\n+            } else {\n+                ArgType::indirect(ty, Some(Attribute::StructRet))\n+            }\n+        },\n+        Array => {\n+            ArgType::indirect(ty, Some(Attribute::StructRet))\n+        },\n+        _ => {\n+            let attr = if ty == Type::i1(ccx) { Some(Attribute::ZExt) } else { None };\n+            ArgType::direct(ty, None, None, attr)\n+        }\n+    }\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n+    if ty.is_aggregate() {\n+        ArgType::indirect(ty, Some(Attribute::ByVal))\n+    } else {\n+        let attr = if ty == Type::i1(ccx) { Some(Attribute::ZExt) } else { None };\n+        ArgType::direct(ty, None, None, attr)\n+    }\n+}\n+\n pub fn compute_abi_info(ccx: &CrateContext,\n                         atys: &[Type],\n                         rty: Type,\n                         ret_def: bool) -> FnType {\n-    cabi_arm::compute_abi_info(ccx, atys, rty, ret_def,\n-                               cabi_arm::Flavor::General)\n+    let mut arg_tys = Vec::new();\n+    for &aty in atys {\n+        let ty = classify_arg_ty(ccx, aty);\n+        arg_tys.push(ty);\n+    }\n+\n+    let ret_ty = if ret_def {\n+        classify_ret_ty(ccx, rty)\n+    } else {\n+        ArgType::direct(Type::void(ccx), None, None, None)\n+    };\n+\n+    return FnType {\n+        arg_tys: arg_tys,\n+        ret_ty: ret_ty,\n+    };\n }"}]}