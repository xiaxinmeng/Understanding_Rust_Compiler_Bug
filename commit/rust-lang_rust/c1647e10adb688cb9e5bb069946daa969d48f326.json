{"sha": "c1647e10adb688cb9e5bb069946daa969d48f326", "node_id": "C_kwDOAAsO6NoAKGMxNjQ3ZTEwYWRiNjg4Y2I5ZTViYjA2OTk0NmRhYTk2OWQ0OGYzMjY", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-25T22:14:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-25T22:14:43Z"}, "message": "Rollup merge of #92390 - fee1-dead-contrib:const_cmp, r=oli-obk\n\nConstify a few `(Partial)Ord` impls\n\nOnly a few `impl`s are constified for now, as #92257 has not landed in the bootstrap compiler yet and quite a few impls would need that fix.\n\nThis unblocks #92228, which unblocks marking iterator methods as `default_method_body_is_const`.", "tree": {"sha": "0524f7e510803349834fde89be3dd61817dd01ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0524f7e510803349834fde89be3dd61817dd01ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1647e10adb688cb9e5bb069946daa969d48f326", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi3xXTCRBK7hj4Ov3rIwAAD9cIADtHW7V/X7Q4QSsypLGr76op\nzOIWQXIEKW9N2p7qzah4NmU+GYxMfqL4MOMavvDe1ITy/7KzA4ZPZsDdvMxaK1Ke\nQeJepXyJ7H9z4FJ6JtXImE3WejbPPfKrEAoXiDny1oQuwaEMRPCPymIpKdboW3qa\nkMEszcAaatYo96xBTIk5MsWmYlLUEt8h4aVAQhFhymw+XzSznFet7JGcoXt5ZUkY\nEduSp6DRsc/wYpIGLQNnMziV+i4YKLEGTh5z4BM5PEus2hUIoYYrDS9la+YmKxeg\nFxrWf+I5nxe/JjhR96XCX3BS97B6MYH+ji+maVigdcO6Q6DYIpTbZShaKjB/gqQ=\n=/ikp\n-----END PGP SIGNATURE-----\n", "payload": "tree 0524f7e510803349834fde89be3dd61817dd01ab\nparent bdf520fd419cd4dea184332f57206f1cf5ca3e8f\nparent 65fca6db1949b2aa30a93b382b899a60bfddb132\nauthor Yuki Okushi <jtitor@2k36.org> 1658787283 +0900\ncommitter GitHub <noreply@github.com> 1658787283 +0900\n\nRollup merge of #92390 - fee1-dead-contrib:const_cmp, r=oli-obk\n\nConstify a few `(Partial)Ord` impls\n\nOnly a few `impl`s are constified for now, as #92257 has not landed in the bootstrap compiler yet and quite a few impls would need that fix.\n\nThis unblocks #92228, which unblocks marking iterator methods as `default_method_body_is_const`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1647e10adb688cb9e5bb069946daa969d48f326", "html_url": "https://github.com/rust-lang/rust/commit/c1647e10adb688cb9e5bb069946daa969d48f326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1647e10adb688cb9e5bb069946daa969d48f326/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdf520fd419cd4dea184332f57206f1cf5ca3e8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf520fd419cd4dea184332f57206f1cf5ca3e8f", "html_url": "https://github.com/rust-lang/rust/commit/bdf520fd419cd4dea184332f57206f1cf5ca3e8f"}, {"sha": "65fca6db1949b2aa30a93b382b899a60bfddb132", "url": "https://api.github.com/repos/rust-lang/rust/commits/65fca6db1949b2aa30a93b382b899a60bfddb132", "html_url": "https://github.com/rust-lang/rust/commit/65fca6db1949b2aa30a93b382b899a60bfddb132"}], "stats": {"total": 75, "additions": 56, "deletions": 19}, "files": [{"sha": "ac286c171f0809078c48df25f184a3506575fc0f", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c1647e10adb688cb9e5bb069946daa969d48f326/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1647e10adb688cb9e5bb069946daa969d48f326/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=c1647e10adb688cb9e5bb069946daa969d48f326", "patch": "@@ -22,6 +22,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use crate::marker::Destruct;\n+\n use self::Ordering::*;\n \n /// Trait for equality comparisons which are [partial equivalence\n@@ -603,7 +605,8 @@ impl Ordering {\n pub struct Reverse<T>(#[stable(feature = \"reverse_cmp_key\", since = \"1.19.0\")] pub T);\n \n #[stable(feature = \"reverse_cmp_key\", since = \"1.19.0\")]\n-impl<T: PartialOrd> PartialOrd for Reverse<T> {\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+impl<T: ~const PartialOrd> const PartialOrd for Reverse<T> {\n     #[inline]\n     fn partial_cmp(&self, other: &Reverse<T>) -> Option<Ordering> {\n         other.0.partial_cmp(&self.0)\n@@ -761,6 +764,7 @@ impl<T: Clone> Clone for Reverse<T> {\n #[doc(alias = \">=\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"Ord\"]\n+#[const_trait]\n pub trait Ord: Eq + PartialOrd<Self> {\n     /// This method returns an [`Ordering`] between `self` and `other`.\n     ///\n@@ -796,8 +800,15 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     fn max(self, other: Self) -> Self\n     where\n         Self: Sized,\n+        Self: ~const Destruct,\n     {\n-        max_by(self, other, Ord::cmp)\n+        // HACK(fee1-dead): go back to using `self.max_by(other, Ord::cmp)`\n+        // when trait methods are allowed to be used when a const closure is\n+        // expected.\n+        match self.cmp(&other) {\n+            Ordering::Less | Ordering::Equal => other,\n+            Ordering::Greater => self,\n+        }\n     }\n \n     /// Compares and returns the minimum of two values.\n@@ -816,8 +827,15 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     fn min(self, other: Self) -> Self\n     where\n         Self: Sized,\n+        Self: ~const Destruct,\n     {\n-        min_by(self, other, Ord::cmp)\n+        // HACK(fee1-dead): go back to using `self.min_by(other, Ord::cmp)`\n+        // when trait methods are allowed to be used when a const closure is\n+        // expected.\n+        match self.cmp(&other) {\n+            Ordering::Less | Ordering::Equal => self,\n+            Ordering::Greater => other,\n+        }\n     }\n \n     /// Restrict a value to a certain interval.\n@@ -841,6 +859,8 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     fn clamp(self, min: Self, max: Self) -> Self\n     where\n         Self: Sized,\n+        Self: ~const Destruct,\n+        Self: ~const PartialOrd,\n     {\n         assert!(min <= max);\n         if self < min {\n@@ -862,15 +882,17 @@ pub macro Ord($item:item) {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Ord for Ordering {\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+impl const Ord for Ordering {\n     #[inline]\n     fn cmp(&self, other: &Ordering) -> Ordering {\n         (*self as i32).cmp(&(*other as i32))\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl PartialOrd for Ordering {\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+impl const PartialOrd for Ordering {\n     #[inline]\n     fn partial_cmp(&self, other: &Ordering) -> Option<Ordering> {\n         (*self as i32).partial_cmp(&(*other as i32))\n@@ -1187,8 +1209,9 @@ pub macro PartialOrd($item:item) {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"cmp_min\")]\n-pub fn min<T: Ord>(v1: T, v2: T) -> T {\n+pub const fn min<T: ~const Ord + ~const Destruct>(v1: T, v2: T) -> T {\n     v1.min(v2)\n }\n \n@@ -1250,8 +1273,9 @@ pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"cmp_max\")]\n-pub fn max<T: Ord>(v1: T, v2: T) -> T {\n+pub const fn max<T: ~const Ord + ~const Destruct>(v1: T, v2: T) -> T {\n     v1.max(v2)\n }\n \n@@ -1304,7 +1328,8 @@ mod impls {\n     macro_rules! partial_eq_impl {\n         ($($t:ty)*) => ($(\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl PartialEq for $t {\n+            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+            impl const PartialEq for $t {\n                 #[inline]\n                 fn eq(&self, other: &$t) -> bool { (*self) == (*other) }\n                 #[inline]\n@@ -1314,7 +1339,8 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl PartialEq for () {\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+    impl const PartialEq for () {\n         #[inline]\n         fn eq(&self, _other: &()) -> bool {\n             true\n@@ -1341,7 +1367,8 @@ mod impls {\n     macro_rules! partial_ord_impl {\n         ($($t:ty)*) => ($(\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl PartialOrd for $t {\n+            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+            impl const PartialOrd for $t {\n                 #[inline]\n                 fn partial_cmp(&self, other: &$t) -> Option<Ordering> {\n                     match (*self <= *other, *self >= *other) {\n@@ -1364,15 +1391,17 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl PartialOrd for () {\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+    impl const PartialOrd for () {\n         #[inline]\n         fn partial_cmp(&self, _: &()) -> Option<Ordering> {\n             Some(Equal)\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl PartialOrd for bool {\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+    impl const PartialOrd for bool {\n         #[inline]\n         fn partial_cmp(&self, other: &bool) -> Option<Ordering> {\n             Some(self.cmp(other))\n@@ -1384,7 +1413,8 @@ mod impls {\n     macro_rules! ord_impl {\n         ($($t:ty)*) => ($(\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl PartialOrd for $t {\n+            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+            impl const PartialOrd for $t {\n                 #[inline]\n                 fn partial_cmp(&self, other: &$t) -> Option<Ordering> {\n                     Some(self.cmp(other))\n@@ -1400,7 +1430,8 @@ mod impls {\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl Ord for $t {\n+            #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+            impl const Ord for $t {\n                 #[inline]\n                 fn cmp(&self, other: &$t) -> Ordering {\n                     // The order here is important to generate more optimal assembly.\n@@ -1414,15 +1445,17 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl Ord for () {\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+    impl const Ord for () {\n         #[inline]\n         fn cmp(&self, _other: &()) -> Ordering {\n             Equal\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl Ord for bool {\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+    impl const Ord for bool {\n         #[inline]\n         fn cmp(&self, other: &bool) -> Ordering {\n             // Casting to i8's and converting the difference to an Ordering generates\n@@ -1441,7 +1474,8 @@ mod impls {\n     ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n     #[unstable(feature = \"never_type\", issue = \"35121\")]\n-    impl PartialEq for ! {\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+    impl const PartialEq for ! {\n         fn eq(&self, _: &!) -> bool {\n             *self\n         }\n@@ -1451,14 +1485,16 @@ mod impls {\n     impl Eq for ! {}\n \n     #[unstable(feature = \"never_type\", issue = \"35121\")]\n-    impl PartialOrd for ! {\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+    impl const PartialOrd for ! {\n         fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n             *self\n         }\n     }\n \n     #[unstable(feature = \"never_type\", issue = \"35121\")]\n-    impl Ord for ! {\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+    impl const Ord for ! {\n         fn cmp(&self, _: &!) -> Ordering {\n             *self\n         }"}, {"sha": "30f2f0ee05c259db5508884732d1e14653f95990", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1647e10adb688cb9e5bb069946daa969d48f326/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1647e10adb688cb9e5bb069946daa969d48f326/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=c1647e10adb688cb9e5bb069946daa969d48f326", "patch": "@@ -105,6 +105,7 @@\n #![feature(const_cell_into_inner)]\n #![feature(const_char_convert)]\n #![feature(const_clone)]\n+#![feature(const_cmp)]\n #![feature(const_discriminant)]\n #![feature(const_eval_select)]\n #![feature(const_float_bits_conv)]"}]}