{"sha": "173a7dbace4f3d9921dd1c66830c847aff9ba23b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3M2E3ZGJhY2U0ZjNkOTkyMWRkMWM2NjgzMGM4NDdhZmY5YmEyM2I=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-24T01:38:20Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-24T01:39:18Z"}, "message": "Use `early_error`", "tree": {"sha": "9a56057ef6343cf581407bf14258f9c62c528333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a56057ef6343cf581407bf14258f9c62c528333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/173a7dbace4f3d9921dd1c66830c847aff9ba23b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/173a7dbace4f3d9921dd1c66830c847aff9ba23b", "html_url": "https://github.com/rust-lang/rust/commit/173a7dbace4f3d9921dd1c66830c847aff9ba23b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/173a7dbace4f3d9921dd1c66830c847aff9ba23b/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad1a1cf398622e6e179726aeadaf19cca7677d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad1a1cf398622e6e179726aeadaf19cca7677d9", "html_url": "https://github.com/rust-lang/rust/commit/8ad1a1cf398622e6e179726aeadaf19cca7677d9"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "40a32cf32f2860f73d6884b60f2578d7e13ef2f0", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/173a7dbace4f3d9921dd1c66830c847aff9ba23b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173a7dbace4f3d9921dd1c66830c847aff9ba23b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=173a7dbace4f3d9921dd1c66830c847aff9ba23b", "patch": "@@ -1288,12 +1288,19 @@ pub fn init_env_logger(env: &str) {\n             \"always\" => true,\n             \"never\" => false,\n             \"auto\" => stdout_isatty(),\n-            _ => panic!(\"invalid log color value '{}': expected one of always, never, or auto\", value),\n+            _ => early_error(\n+                ErrorOutputType::default(),\n+                &format!(\n+                    \"invalid log color value '{}': expected one of always, never, or auto\",\n+                    value\n+                ),\n+            ),\n         },\n         Err(std::env::VarError::NotPresent) => stdout_isatty(),\n-        Err(std::env::VarError::NotUnicode(_value)) => {\n-            panic!(\"non-unicode log color value: expected one of always, never, or auto\")\n-        }\n+        Err(std::env::VarError::NotUnicode(_value)) => early_error(\n+            ErrorOutputType::default(),\n+            \"non-Unicode log color value: expected one of always, never, or auto\",\n+        ),\n     };\n     let filter = tracing_subscriber::EnvFilter::from_env(env);\n     let layer = tracing_tree::HierarchicalLayer::default()\n@@ -1324,7 +1331,7 @@ pub fn main() -> ! {\n                 arg.into_string().unwrap_or_else(|arg| {\n                     early_error(\n                         ErrorOutputType::default(),\n-                        &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg),\n+                        &format!(\"argument {} is not valid Unicode: {:?}\", i, arg),\n                     )\n                 })\n             })"}]}