{"sha": "694a511df5e7473a696b50d30c3428bd0d54f140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NGE1MTFkZjVlNzQ3M2E2OTZiNTBkMzBjMzQyOGJkMGQ1NGYxNDA=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T17:00:38Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T17:00:38Z"}, "message": "Apply suggestions from code review", "tree": {"sha": "6d6cc8ef8db7682c18093e0e33f1464cd558fce4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d6cc8ef8db7682c18093e0e33f1464cd558fce4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/694a511df5e7473a696b50d30c3428bd0d54f140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/694a511df5e7473a696b50d30c3428bd0d54f140", "html_url": "https://github.com/rust-lang/rust/commit/694a511df5e7473a696b50d30c3428bd0d54f140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/694a511df5e7473a696b50d30c3428bd0d54f140/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cde9808eaa07f2cd16b0c8fb0a1ab59bc62d3c6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cde9808eaa07f2cd16b0c8fb0a1ab59bc62d3c6e", "html_url": "https://github.com/rust-lang/rust/commit/cde9808eaa07f2cd16b0c8fb0a1ab59bc62d3c6e"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "e30d6819d04f1bfa7442b03ef0fbfe3f5f6a9a6e", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/694a511df5e7473a696b50d30c3428bd0d54f140/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/694a511df5e7473a696b50d30c3428bd0d54f140/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=694a511df5e7473a696b50d30c3428bd0d54f140", "patch": "@@ -593,8 +593,8 @@ enum Constructor<'tcx> {\n     ConstantValue(&'tcx ty::Const<'tcx>),\n     /// Ranges of integer literal values (`2`, `2..=5` or `2..5`).\n     IntRange(IntRange<'tcx>),\n-    /// Ranges of non-integer literal values (`2.0..=5.2`).\n-    ConstantRange(&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>, RangeEnd),\n+    /// Ranges of floating-point literal values (`2.0..=5.2`).\n+    FloatRange(&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>, RangeEnd),\n     /// Array patterns of length `n`.\n     FixedLenSlice(u64),\n     /// Slice patterns. Captures any array constructor of `length >= i + j`.\n@@ -632,7 +632,7 @@ impl<'tcx> Constructor<'tcx> {\n     fn subtract_ctors(&self, other_ctors: &Vec<Constructor<'tcx>>) -> Vec<Constructor<'tcx>> {\n         match self {\n             // Those constructors can only match themselves.\n-            Single | Variant(_) | ConstantValue(..) | ConstantRange(..) => {\n+            Single | Variant(_) | ConstantValue(..) | FloatRange(..) => {\n                 if other_ctors.iter().any(|c| c == self) { vec![] } else { vec![self.clone()] }\n             }\n             &FixedLenSlice(self_len) => {\n@@ -727,7 +727,7 @@ impl<'tcx> Constructor<'tcx> {\n                     }\n                 }\n \n-                // Convert the ranges back into constructors\n+                // Convert the ranges back into constructors.\n                 remaining_ranges.into_iter().map(IntRange).collect()\n             }\n             // This constructor is never covered by anything else\n@@ -805,7 +805,7 @@ impl<'tcx> Constructor<'tcx> {\n                 }\n                 _ => bug!(\"bad slice pattern {:?} {:?}\", self, ty),\n             },\n-            ConstantValue(..) | ConstantRange(..) | IntRange(..) | NonExhaustive => vec![],\n+            ConstantValue(..) | FloatRange(..) | IntRange(..) | NonExhaustive => vec![],\n         }\n     }\n \n@@ -830,7 +830,7 @@ impl<'tcx> Constructor<'tcx> {\n             },\n             FixedLenSlice(length) => *length,\n             VarLenSlice(prefix, suffix) => prefix + suffix,\n-            ConstantValue(..) | ConstantRange(..) | IntRange(..) | NonExhaustive => 0,\n+            ConstantValue(..) | FloatRange(..) | IntRange(..) | NonExhaustive => 0,\n         }\n     }\n \n@@ -894,10 +894,8 @@ impl<'tcx> Constructor<'tcx> {\n                 PatKind::Slice { prefix, slice: Some(wild), suffix }\n             }\n             &ConstantValue(value) => PatKind::Constant { value },\n-            &ConstantRange(lo, hi, end) => PatKind::Range(PatRange { lo, hi, end }),\n-            IntRange(range) => {\n-                return range.to_pat(cx.tcx);\n-            }\n+            &FloatRange(lo, hi, end) => PatKind::Range(PatRange { lo, hi, end }),\n+            IntRange(range) => return range.to_pat(cx.tcx),\n             NonExhaustive => PatKind::Wild,\n         };\n \n@@ -1297,7 +1295,7 @@ impl<'tcx> IntRange<'tcx> {\n             let (lo, hi) = (lo ^ bias, hi ^ bias);\n             let offset = (*end == RangeEnd::Excluded) as u128;\n             if lo > hi || (lo == hi && *end == RangeEnd::Excluded) {\n-                // This hould have been caught earlier by E0030\n+                // This should have been caught earlier by E0030.\n                 bug!(\"malformed range pattern: {}..={}\", lo, (hi - offset));\n             }\n             Some(IntRange { range: lo..=(hi - offset), ty, span })\n@@ -1692,7 +1690,7 @@ fn pat_constructor<'tcx>(\n             ) {\n                 Some(IntRange(int_range))\n             } else {\n-                Some(ConstantRange(lo, hi, end))\n+                Some(FloatRange(lo, hi, end))\n             }\n         }\n         PatKind::Array { .. } => match pat.ty.kind {\n@@ -2091,7 +2089,7 @@ fn constructor_covered_by_range<'tcx>(\n     };\n     let (ctor_from, ctor_to, ctor_end) = match *ctor {\n         ConstantValue(value) => (value, value, RangeEnd::Included),\n-        ConstantRange(from, to, ctor_end) => (from, to, ctor_end),\n+        FloatRange(from, to, ctor_end) => (from, to, ctor_end),\n         _ => bug!(\"`constructor_covered_by_range` called with {:?}\", ctor),\n     };\n     trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, pat_from, pat_to, ty);"}]}