{"sha": "88217618ecf430c3588536a4af2e3dd0b790e49c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MjE3NjE4ZWNmNDMwYzM1ODg1MzZhNGFmMmUzZGQwYjc5MGU0OWM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-08-15T15:35:31Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-11T05:41:15Z"}, "message": "rustc: remove obsolete const_val::ErrKind::{Negate,Not}On.", "tree": {"sha": "2a3206dd581a1a9231644ba4856674b4dd891cf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a3206dd581a1a9231644ba4856674b4dd891cf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88217618ecf430c3588536a4af2e3dd0b790e49c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88217618ecf430c3588536a4af2e3dd0b790e49c", "html_url": "https://github.com/rust-lang/rust/commit/88217618ecf430c3588536a4af2e3dd0b790e49c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88217618ecf430c3588536a4af2e3dd0b790e49c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a9b78f5cca1a0585e52a19d79ea9503f5534345", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9b78f5cca1a0585e52a19d79ea9503f5534345", "html_url": "https://github.com/rust-lang/rust/commit/8a9b78f5cca1a0585e52a19d79ea9503f5534345"}], "stats": {"total": 36, "additions": 5, "deletions": 31}, "files": [{"sha": "469aed7e8ce68c13a9f294ad4f99e34fe87707fc", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/88217618ecf430c3588536a4af2e3dd0b790e49c/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88217618ecf430c3588536a4af2e3dd0b790e49c/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=88217618ecf430c3588536a4af2e3dd0b790e49c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use self::ConstVal::*;\n-use self::ConstAggregate::*;\n pub use rustc_const_math::ConstInt;\n \n use hir;\n@@ -73,23 +71,6 @@ impl<'tcx> Decodable for ConstAggregate<'tcx> {\n }\n \n impl<'tcx> ConstVal<'tcx> {\n-    pub fn description(&self) -> &'static str {\n-        match *self {\n-            Float(f) => f.description(),\n-            Integral(i) => i.description(),\n-            Str(_) => \"string literal\",\n-            ByteStr(_) => \"byte string literal\",\n-            Bool(_) => \"boolean\",\n-            Char(..) => \"char\",\n-            Variant(_) => \"enum variant\",\n-            Aggregate(Struct(_)) => \"struct\",\n-            Aggregate(Tuple(_)) => \"tuple\",\n-            Function(..) => \"function definition\",\n-            Aggregate(Array(..)) => \"array\",\n-            Aggregate(Repeat(..)) => \"repeat\",\n-        }\n-    }\n-\n     pub fn to_const_int(&self) -> Option<ConstInt> {\n         match *self {\n             ConstVal::Integral(i) => Some(i),\n@@ -110,8 +91,6 @@ pub struct ConstEvalErr<'tcx> {\n pub enum ErrKind<'tcx> {\n     CannotCast,\n     MissingStructField,\n-    NegateOn(ConstVal<'tcx>),\n-    NotOn(ConstVal<'tcx>),\n \n     NonConstPath,\n     UnimplementedConstVal(&'static str),\n@@ -170,9 +149,6 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n \n         match self.kind {\n             CannotCast => simple!(\"can't cast this type\"),\n-            NegateOn(ref const_val) => simple!(\"negate on {}\", const_val.description()),\n-            NotOn(ref const_val) => simple!(\"not on {}\", const_val.description()),\n-\n             MissingStructField  => simple!(\"nonexistent struct field\"),\n             NonConstPath        => simple!(\"non-constant path in constant expression\"),\n             UnimplementedConstVal(what) =>"}, {"sha": "d01b3c45f7fd1642603e3402008addf6085d6c5f", "filename": "src/librustc_const_eval/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88217618ecf430c3588536a4af2e3dd0b790e49c/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88217618ecf430c3588536a4af2e3dd0b790e49c/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fdiagnostics.rs?ref=88217618ecf430c3588536a4af2e3dd0b790e49c", "patch": "@@ -565,7 +565,7 @@ See also https://github.com/rust-lang/rust/issues/14587\n \n \n register_diagnostics! {\n-    E0298, // cannot compare constants\n+//  E0298, // cannot compare constants\n //  E0299, // mismatched types between arms\n //  E0471, // constant evaluation error (in pattern)\n }"}, {"sha": "1ad00a9e7b34ea3e77aa7792b3f208c0469789e3", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88217618ecf430c3588536a4af2e3dd0b790e49c/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88217618ecf430c3588536a4af2e3dd0b790e49c/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=88217618ecf430c3588536a4af2e3dd0b790e49c", "patch": "@@ -186,14 +186,14 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n         mk_const(match cx.eval(inner)?.val {\n           Float(f) => Float(-f),\n           Integral(i) => Integral(math!(e, -i)),\n-          const_val => signal!(e, NegateOn(const_val)),\n+          _ => signal!(e, TypeckError)\n         })\n       }\n       hir::ExprUnary(hir::UnNot, ref inner) => {\n         mk_const(match cx.eval(inner)?.val {\n           Integral(i) => Integral(math!(e, !i)),\n           Bool(b) => Bool(!b),\n-          const_val => signal!(e, NotOn(const_val)),\n+          _ => signal!(e, TypeckError)\n         })\n       }\n       hir::ExprUnary(hir::UnDeref, _) => signal!(e, UnimplementedConstVal(\"deref operation\")),\n@@ -734,10 +734,8 @@ pub fn compare_const_vals(tcx: TyCtxt, span: Span, a: &ConstVal, b: &ConstVal)\n         Some(result) => Ok(result),\n         None => {\n             // FIXME: can this ever be reached?\n-            span_err!(tcx.sess, span, E0298,\n-                      \"type mismatch comparing {} and {}\",\n-                      a.description(),\n-                      b.description());\n+            tcx.sess.delay_span_bug(span,\n+                &format!(\"type mismatch comparing {:?} and {:?}\", a, b));\n             Err(ErrorReported)\n         }\n     }"}]}