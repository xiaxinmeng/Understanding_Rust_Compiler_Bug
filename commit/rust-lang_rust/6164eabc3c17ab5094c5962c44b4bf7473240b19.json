{"sha": "6164eabc3c17ab5094c5962c44b4bf7473240b19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNjRlYWJjM2MxN2FiNTA5NGM1OTYyYzQ0YjRiZjc0NzMyNDBiMTk=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-03-20T20:24:18Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-03-20T20:24:18Z"}, "message": "fixed the build", "tree": {"sha": "7ef24bd7606f9d4a17acc4409265fb86e905b38e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ef24bd7606f9d4a17acc4409265fb86e905b38e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6164eabc3c17ab5094c5962c44b4bf7473240b19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6164eabc3c17ab5094c5962c44b4bf7473240b19", "html_url": "https://github.com/rust-lang/rust/commit/6164eabc3c17ab5094c5962c44b4bf7473240b19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6164eabc3c17ab5094c5962c44b4bf7473240b19/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a39ae26234c307192147f1fc92c2797dd1d5267", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a39ae26234c307192147f1fc92c2797dd1d5267", "html_url": "https://github.com/rust-lang/rust/commit/6a39ae26234c307192147f1fc92c2797dd1d5267"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "f96927f154845635d644c27610445a99128137c2", "filename": "src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6164eabc3c17ab5094c5962c44b4bf7473240b19/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6164eabc3c17ab5094c5962c44b4bf7473240b19/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=6164eabc3c17ab5094c5962c44b4bf7473240b19", "patch": "@@ -270,7 +270,7 @@ fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u64> {\n                     _ => None,\n                 }\n             }\n-            .and_then(|def_id| lookup_const_by_id(cx.tcx, def_id, None, None))\n+            .and_then(|def_id| lookup_const_by_id(cx.tcx, def_id, None))\n             .and_then(|(l, _ty)| fetch_int_literal(cx, l))\n         }\n         _ => None,"}, {"sha": "e6bda7df8de9295175a3bd7dcf894cad39cf2353", "filename": "src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6164eabc3c17ab5094c5962c44b4bf7473240b19/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6164eabc3c17ab5094c5962c44b4bf7473240b19/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=6164eabc3c17ab5094c5962c44b4bf7473240b19", "patch": "@@ -290,7 +290,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             }\n             // separate if lets to avoid double borrowing the def_map\n             if let Some(id) = maybe_id {\n-                if let Some((const_expr, _ty)) = lookup_const_by_id(lcx.tcx, id, None, None) {\n+                if let Some((const_expr, _ty)) = lookup_const_by_id(lcx.tcx, id, None) {\n                     let ret = self.expr(const_expr);\n                     if ret.is_some() {\n                         self.needed_resolution = true;"}, {"sha": "fd8dc046eb52b2f7ed3d73a5de4202b1b824e041", "filename": "src/utils/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6164eabc3c17ab5094c5962c44b4bf7473240b19/src%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6164eabc3c17ab5094c5962c44b4bf7473240b19/src%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fhir.rs?ref=6164eabc3c17ab5094c5962c44b4bf7473240b19", "patch": "@@ -332,8 +332,8 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(a);\n                 self.hash_expr(i);\n             }\n-            ExprInlineAsm(_) => {\n-                let c: fn(_) -> _ = ExprInlineAsm;\n+            ExprInlineAsm(..) => {\n+                let c: fn(_, _, _) -> _ = ExprInlineAsm;\n                 c.hash(&mut self.s);\n             }\n             ExprIf(ref cond, ref t, ref e) => {"}]}