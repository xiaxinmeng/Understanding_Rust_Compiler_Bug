{"sha": "fbd2cd09e6fd044cad02af97e581853f1875ab2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZDJjZDA5ZTZmZDA0NGNhZDAyYWY5N2U1ODE4NTNmMTg3NWFiMmE=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-11T18:17:58Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-11T18:17:58Z"}, "message": "Revert a diagnostic change in the case of integer ranges", "tree": {"sha": "2ae4891ae1756d141058f17f1a8387b92941d045", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ae4891ae1756d141058f17f1a8387b92941d045"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbd2cd09e6fd044cad02af97e581853f1875ab2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd2cd09e6fd044cad02af97e581853f1875ab2a", "html_url": "https://github.com/rust-lang/rust/commit/fbd2cd09e6fd044cad02af97e581853f1875ab2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbd2cd09e6fd044cad02af97e581853f1875ab2a/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d44774d72cdaf41946cb63ae03f75143fa25e181", "url": "https://api.github.com/repos/rust-lang/rust/commits/d44774d72cdaf41946cb63ae03f75143fa25e181", "html_url": "https://github.com/rust-lang/rust/commit/d44774d72cdaf41946cb63ae03f75143fa25e181"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "c37203285069573e24cb8819f01613d2d31a2872", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fbd2cd09e6fd044cad02af97e581853f1875ab2a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd2cd09e6fd044cad02af97e581853f1875ab2a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=fbd2cd09e6fd044cad02af97e581853f1875ab2a", "patch": "@@ -1778,8 +1778,9 @@ pub fn is_useful<'p, 'tcx>(\n             // satisfied with `(_, _, true)`. In this case,\n             // `used_ctors` is empty.\n             // The exception is: if we are at the top-level, for example in an empty match, we\n-            // prefer reporting the list of constructors instead of just `_`.\n-            if missing_ctors.all_ctors_are_missing() && !is_top_level {\n+            // sometimes prefer reporting the list of constructors instead of just `_`.\n+            let report_ctors_rather_than_wildcard = is_top_level && !IntRange::is_integral(pcx.ty);\n+            if missing_ctors.all_ctors_are_missing() && !report_ctors_rather_than_wildcard {\n                 // All constructors are unused. Add a wild pattern\n                 // rather than each individual constructor.\n                 usefulness.apply_wildcard(pcx.ty)"}, {"sha": "57b6b910ca1dad857637b5bfafeb26e4608ea7c4", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbd2cd09e6fd044cad02af97e581853f1875ab2a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd2cd09e6fd044cad02af97e581853f1875ab2a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs?ref=fbd2cd09e6fd044cad02af97e581853f1875ab2a", "patch": "@@ -77,7 +77,7 @@ fn main() {\n     //~^ ERROR `V1`, `V2`, `V3` and 2 more not covered\n \n     match_false!(0u8);\n-    //~^ ERROR `0u8..=std::u8::MAX` not covered\n+    //~^ ERROR `_` not covered\n     match_false!(NonEmptyStruct(true));\n     //~^ ERROR `NonEmptyStruct(_)` not covered\n     match_false!((NonEmptyUnion1 { foo: () }));"}, {"sha": "f242ecf2dae4eb37b4ca9c224e1497f09de7658c", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbd2cd09e6fd044cad02af97e581853f1875ab2a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbd2cd09e6fd044cad02af97e581853f1875ab2a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr?ref=fbd2cd09e6fd044cad02af97e581853f1875ab2a", "patch": "@@ -123,11 +123,11 @@ LL |       match_empty!(NonEmptyEnum5::V1);\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `0u8..=std::u8::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:79:18\n    |\n LL |     match_false!(0u8);\n-   |                  ^^^ pattern `0u8..=std::u8::MAX` not covered\n+   |                  ^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "f7577125d8a3f9739220351bf7ae218a80e58ec8", "filename": "src/test/ui/pattern/usefulness/match-empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbd2cd09e6fd044cad02af97e581853f1875ab2a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd2cd09e6fd044cad02af97e581853f1875ab2a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs?ref=fbd2cd09e6fd044cad02af97e581853f1875ab2a", "patch": "@@ -76,7 +76,7 @@ fn main() {\n     //~^ ERROR `V1`, `V2`, `V3` and 2 more not covered\n \n     match_false!(0u8);\n-    //~^ ERROR `0u8..=std::u8::MAX` not covered\n+    //~^ ERROR `_` not covered\n     match_false!(NonEmptyStruct(true));\n     //~^ ERROR `NonEmptyStruct(_)` not covered\n     match_false!((NonEmptyUnion1 { foo: () }));"}, {"sha": "72e3fc0a16744986317d1307f3fbf01d21d2b089", "filename": "src/test/ui/pattern/usefulness/match-empty.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbd2cd09e6fd044cad02af97e581853f1875ab2a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbd2cd09e6fd044cad02af97e581853f1875ab2a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr?ref=fbd2cd09e6fd044cad02af97e581853f1875ab2a", "patch": "@@ -104,11 +104,11 @@ LL |       match_empty!(NonEmptyEnum5::V1);\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `0u8..=std::u8::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/match-empty.rs:78:18\n    |\n LL |     match_false!(0u8);\n-   |                  ^^^ pattern `0u8..=std::u8::MAX` not covered\n+   |                  ^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "211f333882b10cba929556cca0ee81b909aaf9fa", "filename": "src/test/ui/pattern/usefulness/match-non-exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbd2cd09e6fd044cad02af97e581853f1875ab2a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbd2cd09e6fd044cad02af97e581853f1875ab2a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr?ref=fbd2cd09e6fd044cad02af97e581853f1875ab2a", "patch": "@@ -6,11 +6,11 @@ LL |     match 0 { 1 => () }\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `std::i32::MIN..=std::i32::MAX` not covered\n+error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/match-non-exhaustive.rs:3:11\n    |\n LL |     match 0 { 0 if false => () }\n-   |           ^ pattern `std::i32::MIN..=std::i32::MAX` not covered\n+   |           ^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}]}