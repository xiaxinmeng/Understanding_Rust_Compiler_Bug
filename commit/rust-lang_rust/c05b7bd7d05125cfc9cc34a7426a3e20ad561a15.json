{"sha": "c05b7bd7d05125cfc9cc34a7426a3e20ad561a15", "node_id": "C_kwDOAAsO6NoAKGMwNWI3YmQ3ZDA1MTI1Y2ZjOWNjMzRhNzQyNmEzZTIwYWQ1NjFhMTU", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-21T22:03:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-13T13:31:54Z"}, "message": "resolve: Remove `struct_field_visibilities_untracked`", "tree": {"sha": "f3a40450c0ea5b494456c4f264aca839b1d48691", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3a40450c0ea5b494456c4f264aca839b1d48691"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15", "html_url": "https://github.com/rust-lang/rust/commit/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "901f1c9c6265168b910b4c5eac4f71ca61621134", "url": "https://api.github.com/repos/rust-lang/rust/commits/901f1c9c6265168b910b4c5eac4f71ca61621134", "html_url": "https://github.com/rust-lang/rust/commit/901f1c9c6265168b910b4c5eac4f71ca61621134"}], "stats": {"total": 87, "additions": 37, "deletions": 50}, "files": [{"sha": "f642902320d23713e7f418fd0b832b2229e50e26", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=c05b7bd7d05125cfc9cc34a7426a3e20ad561a15", "patch": "@@ -930,7 +930,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.tables.generics_of.get(self, item_id).unwrap().decode((self, sess))\n     }\n \n-    fn get_visibility(self, id: DefIndex) -> ty::Visibility<DefId> {\n+    fn get_visibility(self, id: DefIndex) -> Visibility<DefId> {\n         self.root\n             .tables\n             .visibility\n@@ -1148,19 +1148,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .map(move |index| respan(self.get_span(index, sess), self.item_name(index)))\n     }\n \n-    fn get_struct_field_visibilities(\n-        self,\n-        id: DefIndex,\n-    ) -> impl Iterator<Item = Visibility<DefId>> + 'a {\n-        self.root\n-            .tables\n-            .children\n-            .get(self, id)\n-            .expect(\"fields not encoded for a struct\")\n-            .decode(self)\n-            .map(move |field_index| self.get_visibility(field_index))\n-    }\n-\n     fn get_inherent_implementations_for_type(\n         self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "f6cc596d442cc8aa88f2991eaebe45f4c9640501", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=c05b7bd7d05125cfc9cc34a7426a3e20ad561a15", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n-use rustc_middle::ty::{self, TyCtxt, Visibility};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::cstore::{CrateSource, CrateStore};\n use rustc_session::{Session, StableCrateId};\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n@@ -515,13 +515,6 @@ impl CStore {\n         self.get_crate_data(def.krate).get_struct_field_names(def.index, sess)\n     }\n \n-    pub fn struct_field_visibilities_untracked(\n-        &self,\n-        def: DefId,\n-    ) -> impl Iterator<Item = Visibility<DefId>> + '_ {\n-        self.get_crate_data(def.krate).get_struct_field_visibilities(def.index)\n-    }\n-\n     pub fn ctor_untracked(&self, def: DefId) -> Option<(CtorKind, DefId)> {\n         self.get_crate_data(def.krate).get_ctor(def.index)\n     }"}, {"sha": "b5a3130919b91b46311f843dba1de685e905858e", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=c05b7bd7d05125cfc9cc34a7426a3e20ad561a15", "patch": "@@ -789,7 +789,7 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n \n                     self.r\n                         .struct_constructors\n-                        .insert(def_id, (ctor_res, ctor_vis.to_def_id(), ret_fields));\n+                        .insert(local_def_id, (ctor_res, ctor_vis.to_def_id(), ret_fields));\n                 }\n             }\n \n@@ -1006,19 +1006,7 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n         }\n         // Record some extra data for better diagnostics.\n         match res {\n-            Res::Def(DefKind::Struct, def_id) => {\n-                let ctor = self.r.cstore().ctor_untracked(def_id);\n-                if let Some((ctor_kind, ctor_def_id)) = ctor {\n-                    let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n-                    let ctor_vis = self.r.tcx.visibility(ctor_def_id);\n-                    let field_visibilities =\n-                        self.r.cstore().struct_field_visibilities_untracked(def_id).collect();\n-                    self.r\n-                        .struct_constructors\n-                        .insert(def_id, (ctor_res, ctor_vis, field_visibilities));\n-                }\n-                self.insert_field_names_extern(def_id)\n-            }\n+            Res::Def(DefKind::Struct, def_id) => self.insert_field_names_extern(def_id),\n             Res::Def(DefKind::Union, def_id) => self.insert_field_names_extern(def_id),\n             Res::Def(DefKind::AssocFn, def_id) => {\n                 if self.r.cstore().fn_has_self_parameter_untracked(def_id, self.r.tcx.sess) {"}, {"sha": "67cd66e359bcf0a326c48bbf5382e1b6d0566ccb", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=c05b7bd7d05125cfc9cc34a7426a3e20ad561a15", "patch": "@@ -1408,19 +1408,38 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 self.suggest_using_enum_variant(err, source, def_id, span);\n             }\n             (Res::Def(DefKind::Struct, def_id), source) if ns == ValueNS => {\n-                let (ctor_def, ctor_vis, fields) =\n-                    if let Some(struct_ctor) = self.r.struct_constructors.get(&def_id).cloned() {\n-                        if let PathSource::Expr(Some(parent)) = source {\n-                            if let ExprKind::Field(..) | ExprKind::MethodCall(..) = parent.kind {\n-                                bad_struct_syntax_suggestion(def_id);\n-                                return true;\n-                            }\n+                let struct_ctor = match def_id.as_local() {\n+                    Some(def_id) => self.r.struct_constructors.get(&def_id).cloned(),\n+                    None => {\n+                        let ctor = self.r.cstore().ctor_untracked(def_id);\n+                        ctor.map(|(ctor_kind, ctor_def_id)| {\n+                            let ctor_res =\n+                                Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n+                            let ctor_vis = self.r.tcx.visibility(ctor_def_id);\n+                            let field_visibilities = self\n+                                .r\n+                                .tcx\n+                                .associated_item_def_ids(def_id)\n+                                .iter()\n+                                .map(|field_id| self.r.tcx.visibility(field_id))\n+                                .collect();\n+                            (ctor_res, ctor_vis, field_visibilities)\n+                        })\n+                    }\n+                };\n+\n+                let (ctor_def, ctor_vis, fields) = if let Some(struct_ctor) = struct_ctor {\n+                    if let PathSource::Expr(Some(parent)) = source {\n+                        if let ExprKind::Field(..) | ExprKind::MethodCall(..) = parent.kind {\n+                            bad_struct_syntax_suggestion(def_id);\n+                            return true;\n                         }\n-                        struct_ctor\n-                    } else {\n-                        bad_struct_syntax_suggestion(def_id);\n-                        return true;\n-                    };\n+                    }\n+                    struct_ctor\n+                } else {\n+                    bad_struct_syntax_suggestion(def_id);\n+                    return true;\n+                };\n \n                 let is_accessible = self.r.is_accessible_from(ctor_vis, self.parent_scope.module);\n                 if !is_expected(ctor_def) || is_accessible {"}, {"sha": "a53de2be6c635de067a992f66e7e6db8caec1b94", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=c05b7bd7d05125cfc9cc34a7426a3e20ad561a15", "patch": "@@ -35,7 +35,7 @@ use rustc_errors::{\n use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorOf, DefKind, DocLinkResMap, LifetimeRes, PartialRes, PerNS};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap};\n use rustc_hir::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::TraitCandidate;\n@@ -1009,7 +1009,7 @@ pub struct Resolver<'a, 'tcx> {\n     /// Table for mapping struct IDs into struct constructor IDs,\n     /// it's not used during normal resolution, only for better error reporting.\n     /// Also includes of list of each fields visibility\n-    struct_constructors: DefIdMap<(Res, ty::Visibility<DefId>, Vec<ty::Visibility<DefId>>)>,\n+    struct_constructors: LocalDefIdMap<(Res, ty::Visibility<DefId>, Vec<ty::Visibility<DefId>>)>,\n \n     /// Features enabled for this crate.\n     active_features: FxHashSet<Symbol>,"}]}