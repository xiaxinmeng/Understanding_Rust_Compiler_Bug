{"sha": "91738d804a3b7be1caae1a9b8378c25d30152bcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNzM4ZDgwNGEzYjdiZTFjYWFlMWE5YjgzNzhjMjVkMzAxNTJiY2M=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-13T15:50:30Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-17T13:00:50Z"}, "message": "Use intra-doc link on Iterator page", "tree": {"sha": "ac273251e1b625e52936c7c79dc38d545e397df2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac273251e1b625e52936c7c79dc38d545e397df2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91738d804a3b7be1caae1a9b8378c25d30152bcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91738d804a3b7be1caae1a9b8378c25d30152bcc", "html_url": "https://github.com/rust-lang/rust/commit/91738d804a3b7be1caae1a9b8378c25d30152bcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91738d804a3b7be1caae1a9b8378c25d30152bcc/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50", "html_url": "https://github.com/rust-lang/rust/commit/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50"}], "stats": {"total": 77, "additions": 21, "deletions": 56}, "files": [{"sha": "daf56a0d126a4a24224fbff7c9973b4119370dc5", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 21, "deletions": 56, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/91738d804a3b7be1caae1a9b8378c25d30152bcc/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91738d804a3b7be1caae1a9b8378c25d30152bcc/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=91738d804a3b7be1caae1a9b8378c25d30152bcc", "patch": "@@ -106,8 +106,7 @@ pub trait Iterator {\n     /// again may or may not eventually start returning [`Some(Item)`] again at some\n     /// point.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`Some(Item)`]: ../../std/option/enum.Option.html#variant.Some\n+    /// [`Some(Item)`]: Some\n     ///\n     /// # Examples\n     ///\n@@ -160,9 +159,7 @@ pub trait Iterator {\n     /// The default implementation returns `(0, `[`None`]`)` which is correct for any\n     /// iterator.\n     ///\n-    /// [`usize`]: ../../std/primitive.usize.html\n-    /// [`Option`]: ../../std/option/enum.Option.html\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`usize`]: type@usize\n     ///\n     /// # Examples\n     ///\n@@ -214,8 +211,6 @@ pub trait Iterator {\n     /// called at least once even if the iterator does not have any elements.\n     ///\n     /// [`next`]: #tymethod.next\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n     ///\n     /// # Overflow Behavior\n     ///\n@@ -229,7 +224,7 @@ pub trait Iterator {\n     /// This function might panic if the iterator has more than [`usize::MAX`]\n     /// elements.\n     ///\n-    /// [`usize::MAX`]: ../../std/usize/constant.MAX.html\n+    /// [`usize::MAX`]: crate::usize::MAX\n     ///\n     /// # Examples\n     ///\n@@ -263,8 +258,6 @@ pub trait Iterator {\n     /// doing so, it keeps track of the current element. After [`None`] is\n     /// returned, `last()` will then return the last element it saw.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -303,8 +296,6 @@ pub trait Iterator {\n     /// `nth()` will return [`None`] if `n` is greater than or equal to the length of the\n     /// iterator.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -537,9 +528,8 @@ pub trait Iterator {\n     /// assert_eq!((2, 'o'), zipper[2]);\n     /// ```\n     ///\n-    /// [`enumerate`]: trait.Iterator.html#method.enumerate\n-    /// [`next`]: ../../std/iter/trait.Iterator.html#tymethod.next\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`enumerate`]: #method.enumerate\n+    /// [`next`]: #tymethod.next\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>\n@@ -568,7 +558,7 @@ pub trait Iterator {\n     /// more idiomatic to use [`for`] than `map()`.\n     ///\n     /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n-    /// [`FnMut`]: ../../std/ops/trait.FnMut.html\n+    /// [`FnMut`]: crate::ops::FnMut\n     ///\n     /// # Examples\n     ///\n@@ -777,9 +767,7 @@ pub trait Iterator {\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     ///\n-    /// [`Option<T>`]: ../../std/option/enum.Option.html\n-    /// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`Option<T>`]: Option\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>\n@@ -812,8 +800,8 @@ pub trait Iterator {\n     /// The returned iterator might panic if the to-be-returned index would\n     /// overflow a [`usize`].\n     ///\n-    /// [`usize::MAX`]: ../../std/usize/constant.MAX.html\n-    /// [`usize`]: ../../std/primitive.usize.html\n+    /// [`usize`]: type@usize\n+    /// [`usize::MAX`]: crate::usize::MAX\n     /// [`zip`]: #method.zip\n     ///\n     /// # Examples\n@@ -849,8 +837,8 @@ pub trait Iterator {\n     /// anything other than fetching the next value) of the [`next`] method\n     /// will occur.\n     ///\n-    /// [`peek`]: struct.Peekable.html#method.peek\n-    /// [`next`]: ../../std/iter/trait.Iterator.html#tymethod.next\n+    /// [`peek`]: crate::iter::Peekable::peek\n+    /// [`next`]: #tymethod.next\n     ///\n     /// # Examples\n     ///\n@@ -1116,8 +1104,6 @@ pub trait Iterator {\n     /// It is also not specified what this iterator returns after the first` None` is returned.\n     /// If you need fused iterator, use [`fuse`].\n     ///\n-    /// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     /// [`fuse`]: #method.fuse\n     #[inline]\n     #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n@@ -1216,8 +1202,6 @@ pub trait Iterator {\n     /// iterator and the return value from the closure, an [`Option`], is\n     /// yielded by the iterator.\n     ///\n-    /// [`Option`]: ../../std/option/enum.Option.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1366,8 +1350,7 @@ pub trait Iterator {\n     /// [`Some(T)`] again. `fuse()` adapts an iterator, ensuring that after a\n     /// [`None`] is given, it will always return [`None`] forever.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`Some(T)`]: ../../std/option/enum.Option.html#variant.Some\n+    /// [`Some(T)`]: Some\n     ///\n     /// # Examples\n     ///\n@@ -1658,10 +1641,9 @@ pub trait Iterator {\n     /// assert_eq!(Ok(vec![1, 3]), result);\n     /// ```\n     ///\n-    /// [`iter`]: ../../std/iter/trait.Iterator.html#tymethod.next\n+    /// [`iter`]: #tymethod.next\n     /// [`String`]: ../../std/string/struct.String.html\n-    /// [`char`]: ../../std/primitive.char.html\n-    /// [`Result`]: ../../std/result/enum.Result.html\n+    /// [`char`]: type@char\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"]\n@@ -2184,8 +2166,7 @@ pub trait Iterator {\n     /// argument is a double reference. You can see this effect in the\n     /// examples below, with `&&x`.\n     ///\n-    /// [`Some(element)`]: ../../std/option/enum.Option.html#variant.Some\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`Some(element)`]: Some\n     ///\n     /// # Examples\n     ///\n@@ -2331,9 +2312,8 @@ pub trait Iterator {\n     /// This function might panic if the iterator has more than `usize::MAX`\n     /// non-matching elements.\n     ///\n-    /// [`Some(index)`]: ../../std/option/enum.Option.html#variant.Some\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`usize::MAX`]: ../../std/usize/constant.MAX.html\n+    /// [`Some(index)`]: Some\n+    /// [`usize::MAX`]: crate::usize::MAX\n     ///\n     /// # Examples\n     ///\n@@ -2394,8 +2374,7 @@ pub trait Iterator {\n     /// `rposition()` is short-circuiting; in other words, it will stop\n     /// processing as soon as it finds a `true`.\n     ///\n-    /// [`Some(index)`]: ../../std/option/enum.Option.html#variant.Some\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`Some(index)`]: Some\n     ///\n     /// # Examples\n     ///\n@@ -2449,8 +2428,6 @@ pub trait Iterator {\n     /// If several elements are equally maximum, the last element is\n     /// returned. If the iterator is empty, [`None`] is returned.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2477,8 +2454,6 @@ pub trait Iterator {\n     /// If several elements are equally minimum, the first element is\n     /// returned. If the iterator is empty, [`None`] is returned.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2506,8 +2481,6 @@ pub trait Iterator {\n     /// If several elements are equally maximum, the last element is\n     /// returned. If the iterator is empty, [`None`] is returned.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2541,8 +2514,6 @@ pub trait Iterator {\n     /// If several elements are equally maximum, the last element is\n     /// returned. If the iterator is empty, [`None`] is returned.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2570,8 +2541,6 @@ pub trait Iterator {\n     /// If several elements are equally minimum, the first element is\n     /// returned. If the iterator is empty, [`None`] is returned.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2605,8 +2574,6 @@ pub trait Iterator {\n     /// If several elements are equally minimum, the first element is\n     /// returned. If the iterator is empty, [`None`] is returned.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2747,7 +2714,7 @@ pub trait Iterator {\n     /// This is useful when you have an iterator over `&T`, but you need an\n     /// iterator over `T`.\n     ///\n-    /// [`clone`]: ../../std/clone/trait.Clone.html#tymethod.clone\n+    /// [`clone`]: crate::clone::Clone::clone\n     ///\n     /// # Examples\n     ///\n@@ -2779,8 +2746,6 @@ pub trait Iterator {\n     /// from the beginning. After iterating again, it will start at the\n     /// beginning again. And again. And again. Forever.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -3233,7 +3198,7 @@ pub trait Iterator {\n     /// assert!(![0.0, 1.0, f32::NAN].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n     /// ```\n     ///\n-    /// [`is_sorted`]: trait.Iterator.html#method.is_sorted\n+    /// [`is_sorted`]: #method.is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n     fn is_sorted_by<F>(mut self, mut compare: F) -> bool\n     where\n@@ -3262,7 +3227,7 @@ pub trait Iterator {\n     /// the elements, as determined by `f`. Apart from that, it's equivalent to [`is_sorted`]; see\n     /// its documentation for more information.\n     ///\n-    /// [`is_sorted`]: trait.Iterator.html#method.is_sorted\n+    /// [`is_sorted`]: #method.is_sorted\n     ///\n     /// # Examples\n     ///"}]}