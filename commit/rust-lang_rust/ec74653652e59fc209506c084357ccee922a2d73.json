{"sha": "ec74653652e59fc209506c084357ccee922a2d73", "node_id": "C_kwDOAAsO6NoAKGVjNzQ2NTM2NTJlNTlmYzIwOTUwNmMwODQzNTdjY2VlOTIyYTJkNzM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-29T09:20:45Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-04T09:44:50Z"}, "message": "Split out ast::ItemKind::Const into its own struct", "tree": {"sha": "aa3b502664d0028db8443f96466d856942bc853a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa3b502664d0028db8443f96466d856942bc853a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec74653652e59fc209506c084357ccee922a2d73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec74653652e59fc209506c084357ccee922a2d73", "html_url": "https://github.com/rust-lang/rust/commit/ec74653652e59fc209506c084357ccee922a2d73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec74653652e59fc209506c084357ccee922a2d73/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3828777a6b669c33fc59f2bddde44e888d304af", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3828777a6b669c33fc59f2bddde44e888d304af", "html_url": "https://github.com/rust-lang/rust/commit/e3828777a6b669c33fc59f2bddde44e888d304af"}], "stats": {"total": 150, "additions": 89, "deletions": 61}, "files": [{"sha": "985b66e6bea6b8ee527da80186991382fbd027b5", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -2897,6 +2897,13 @@ pub struct Static {\n     pub expr: Option<P<Expr>>,\n }\n \n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct ConstItem {\n+    pub defaultness: Defaultness,\n+    pub ty: P<Ty>,\n+    pub expr: Option<P<Expr>>,\n+}\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum ItemKind {\n     /// An `extern crate` item, with the optional *original* crate name if the crate was renamed.\n@@ -2914,7 +2921,7 @@ pub enum ItemKind {\n     /// A constant item (`const`).\n     ///\n     /// E.g., `const FOO: i32 = 42;`.\n-    Const(Defaultness, P<Ty>, Option<P<Expr>>),\n+    Const(ConstItem),\n     /// A function declaration (`fn`).\n     ///\n     /// E.g., `fn foo(bar: usize) -> usize { .. }`.\n@@ -3030,7 +3037,7 @@ pub type AssocItem = Item<AssocItemKind>;\n pub enum AssocItemKind {\n     /// An associated constant, `const $ident: $ty $def?;` where `def ::= \"=\" $expr? ;`.\n     /// If `def` is parsed, then the constant is provided, and otherwise required.\n-    Const(Defaultness, P<Ty>, Option<P<Expr>>),\n+    Const(ConstItem),\n     /// An associated function.\n     Fn(Box<Fn>),\n     /// An associated type.\n@@ -3042,7 +3049,7 @@ pub enum AssocItemKind {\n impl AssocItemKind {\n     pub fn defaultness(&self) -> Defaultness {\n         match *self {\n-            Self::Const(defaultness, ..)\n+            Self::Const(ConstItem { defaultness, .. })\n             | Self::Fn(box Fn { defaultness, .. })\n             | Self::Type(box TyAlias { defaultness, .. }) => defaultness,\n             Self::MacCall(..) => Defaultness::Final,\n@@ -3053,7 +3060,7 @@ impl AssocItemKind {\n impl From<AssocItemKind> for ItemKind {\n     fn from(assoc_item_kind: AssocItemKind) -> ItemKind {\n         match assoc_item_kind {\n-            AssocItemKind::Const(a, b, c) => ItemKind::Const(a, b, c),\n+            AssocItemKind::Const(item) => ItemKind::Const(item),\n             AssocItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),\n             AssocItemKind::Type(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n             AssocItemKind::MacCall(a) => ItemKind::MacCall(a),\n@@ -3066,7 +3073,7 @@ impl TryFrom<ItemKind> for AssocItemKind {\n \n     fn try_from(item_kind: ItemKind) -> Result<AssocItemKind, ItemKind> {\n         Ok(match item_kind {\n-            ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),\n+            ItemKind::Const(item) => AssocItemKind::Const(item),\n             ItemKind::Fn(fn_kind) => AssocItemKind::Fn(fn_kind),\n             ItemKind::TyAlias(ty_kind) => AssocItemKind::Type(ty_kind),\n             ItemKind::MacCall(a) => AssocItemKind::MacCall(a),"}, {"sha": "e99a2fee67c88610509c3e6c39a6509ad355e972", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -1034,10 +1034,8 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             vis.visit_ty(ty);\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }\n-        ItemKind::Const(defaultness, ty, expr) => {\n-            visit_defaultness(defaultness, vis);\n-            vis.visit_ty(ty);\n-            visit_opt(expr, |expr| vis.visit_expr(expr));\n+        ItemKind::Const(item) => {\n+            visit_const_item(item, vis);\n         }\n         ItemKind::Fn(box Fn { defaultness, generics, sig, body }) => {\n             visit_defaultness(defaultness, vis);\n@@ -1120,10 +1118,8 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n     visitor.visit_vis(vis);\n     visit_attrs(attrs, visitor);\n     match kind {\n-        AssocItemKind::Const(defaultness, ty, expr) => {\n-            visit_defaultness(defaultness, visitor);\n-            visitor.visit_ty(ty);\n-            visit_opt(expr, |expr| visitor.visit_expr(expr));\n+        AssocItemKind::Const(item) => {\n+            visit_const_item(item, visitor);\n         }\n         AssocItemKind::Fn(box Fn { defaultness, generics, sig, body }) => {\n             visit_defaultness(defaultness, visitor);\n@@ -1153,6 +1149,15 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n     smallvec![item]\n }\n \n+fn visit_const_item<T: MutVisitor>(\n+    ConstItem { defaultness, ty, expr }: &mut ConstItem,\n+    visitor: &mut T,\n+) {\n+    visit_defaultness(defaultness, visitor);\n+    visitor.visit_ty(ty);\n+    visit_opt(expr, |expr| visitor.visit_expr(expr));\n+}\n+\n pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n     let FnHeader { unsafety, asyncness, constness, ext: _ } = header;\n     visit_constness(constness, vis);"}, {"sha": "55a17efe41602de69362ca67af7dc3cf17d1c546", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -305,9 +305,9 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n     match &item.kind {\n         ItemKind::ExternCrate(_) => {}\n         ItemKind::Use(use_tree) => visitor.visit_use_tree(use_tree, item.id, false),\n-        ItemKind::Static(Static { ty: typ, mutability: _, expr })\n-        | ItemKind::Const(_, typ, expr) => {\n-            visitor.visit_ty(typ);\n+        ItemKind::Static(Static { ty, mutability: _, expr })\n+        | ItemKind::Const(ConstItem { ty, expr, .. }) => {\n+            visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n         ItemKind::Fn(box Fn { defaultness: _, generics, sig, body }) => {\n@@ -675,7 +675,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n     visitor.visit_ident(ident);\n     walk_list!(visitor, visit_attribute, attrs);\n     match kind {\n-        AssocItemKind::Const(_, ty, expr) => {\n+        AssocItemKind::Const(ConstItem { ty, expr, .. }) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }"}, {"sha": "b41bb5017e51d4ed5b0d45d78c1ce5700b09622a", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -233,8 +233,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n                 hir::ItemKind::Static(ty, *m, body_id)\n             }\n-            ItemKind::Const(_, t, e) => {\n-                let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n+            ItemKind::Const(ast::ConstItem { ty, expr, .. }) => {\n+                let (ty, body_id) = self.lower_const_item(ty, span, expr.as_deref());\n                 hir::ItemKind::Const(ty, body_id)\n             }\n             ItemKind::Fn(box Fn {\n@@ -708,10 +708,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let trait_item_def_id = hir_id.expect_owner();\n \n         let (generics, kind, has_default) = match &i.kind {\n-            AssocItemKind::Const(_, ty, default) => {\n+            AssocItemKind::Const(ConstItem { ty, expr, .. }) => {\n                 let ty =\n                     self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::ConstTy));\n-                let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n+                let body = expr.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body), body.is_some())\n             }\n             AssocItemKind::Fn(box Fn { sig, generics, body: None, .. }) => {\n@@ -809,7 +809,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         self.lower_attrs(hir_id, &i.attrs);\n \n         let (generics, kind) = match &i.kind {\n-            AssocItemKind::Const(_, ty, expr) => {\n+            AssocItemKind::Const(ConstItem { ty, expr, .. }) => {\n                 let ty =\n                     self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::ConstTy));\n                 ("}, {"sha": "43d086ec52d854461d04028fa7c47e02226b658c", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -983,8 +983,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.err_handler().emit_err(errors::FieldlessUnion { span: item.span });\n                 }\n             }\n-            ItemKind::Const(def, .., None) => {\n-                self.check_defaultness(item.span, *def);\n+            ItemKind::Const(ConstItem { defaultness, expr: None, .. }) => {\n+                self.check_defaultness(item.span, *defaultness);\n                 self.session.emit_err(errors::ConstWithoutBody {\n                     span: item.span,\n                     replace_span: self.ending_semi_or_hi(item.span),\n@@ -1259,13 +1259,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         if ctxt == AssocCtxt::Impl {\n             match &item.kind {\n-                AssocItemKind::Const(_, _, body) => {\n-                    if body.is_none() {\n-                        self.session.emit_err(errors::AssocConstWithoutBody {\n-                            span: item.span,\n-                            replace_span: self.ending_semi_or_hi(item.span),\n-                        });\n-                    }\n+                AssocItemKind::Const(ConstItem { expr: None, .. }) => {\n+                    self.session.emit_err(errors::AssocConstWithoutBody {\n+                        span: item.span,\n+                        replace_span: self.ending_semi_or_hi(item.span),\n+                    });\n                 }\n                 AssocItemKind::Fn(box Fn { body, .. }) => {\n                     if body.is_none() {"}, {"sha": "92b9c8fd766ab434a0b5e4fe1fa94fafd7fe27e2", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -168,8 +168,15 @@ impl<'a> State<'a> {\n                     def,\n                 );\n             }\n-            ast::ItemKind::Const(def, ty, body) => {\n-                self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis, *def);\n+            ast::ItemKind::Const(ast::ConstItem { defaultness, ty, expr }) => {\n+                self.print_item_const(\n+                    item.ident,\n+                    None,\n+                    ty,\n+                    expr.as_deref(),\n+                    &item.vis,\n+                    *defaultness,\n+                );\n             }\n             ast::ItemKind::Fn(box ast::Fn { defaultness, sig, generics, body }) => {\n                 self.print_fn_full(\n@@ -508,8 +515,8 @@ impl<'a> State<'a> {\n             ast::AssocItemKind::Fn(box ast::Fn { defaultness, sig, generics, body }) => {\n                 self.print_fn_full(sig, ident, generics, vis, *defaultness, body.as_deref(), attrs);\n             }\n-            ast::AssocItemKind::Const(def, ty, body) => {\n-                self.print_item_const(ident, None, ty, body.as_deref(), vis, *def);\n+            ast::AssocItemKind::Const(ast::ConstItem { defaultness, ty, expr }) => {\n+                self.print_item_const(ident, None, ty, expr.as_deref(), vis, *defaultness);\n             }\n             ast::AssocItemKind::Type(box ast::TyAlias {\n                 defaultness,"}, {"sha": "ced341e54130e24d2dda71e40680dfa1eceb0aef", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -264,11 +264,11 @@ pub fn expand_test_or_bench(\n             cx.attr_name_value_str(sym::rustc_test_marker, test_path_symbol, attr_sp),\n         ],\n         // const $ident: test::TestDescAndFn =\n-        ast::ItemKind::Const(\n-            ast::Defaultness::Final,\n-            cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),\n+        ast::ItemKind::Const(ast::ConstItem {\n+            defaultness: ast::Defaultness::Final,\n+            ty: cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),\n             // test::TestDescAndFn {\n-            Some(\n+            expr: Some(\n                 cx.expr_struct(\n                     sp,\n                     test_path(\"TestDescAndFn\"),\n@@ -361,7 +361,7 @@ pub fn expand_test_or_bench(\n                     ],\n                 ), // }\n             ),\n-        ),\n+        }),\n     );\n     test_const = test_const.map(|mut tc| {\n         tc.vis.kind = ast::VisibilityKind::Public;"}, {"sha": "39fed9fdd0d403dce0d20472ef96b5e7550ba822", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -638,8 +638,13 @@ impl<'a> ExtCtxt<'a> {\n         ty: P<ast::Ty>,\n         expr: P<ast::Expr>,\n     ) -> P<ast::Item> {\n-        let def = ast::Defaultness::Final;\n-        self.item(span, name, AttrVec::new(), ast::ItemKind::Const(def, ty, Some(expr)))\n+        let defaultness = ast::Defaultness::Final;\n+        self.item(\n+            span,\n+            name,\n+            AttrVec::new(),\n+            ast::ItemKind::Const(ast::ConstItem { defaultness, ty, expr: Some(expr) }),\n+        )\n     }\n \n     // Builds `#[name]`."}, {"sha": "d920e237508c7dcb245a97b776f5af4c994cc4c6", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -805,7 +805,9 @@ trait UnusedDelimLint {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n         use ast::ItemKind::*;\n \n-        if let Const(.., Some(expr)) | Static(ast::Static { expr: Some(expr), .. }) = &item.kind {\n+        if let Const(ast::ConstItem { expr: Some(expr), .. })\n+        | Static(ast::Static { expr: Some(expr), .. }) = &item.kind\n+        {\n             self.check_unused_delims_expr(\n                 cx,\n                 expr,"}, {"sha": "f6422d30ba5066c1cb719a10c99bcb4f204b48d7", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -237,7 +237,7 @@ impl<'a> Parser<'a> {\n             } else {\n                 self.recover_const_mut(const_span);\n                 let (ident, ty, expr) = self.parse_item_global(None)?;\n-                (ident, ItemKind::Const(def_(), ty, expr))\n+                (ident, ItemKind::Const(ConstItem { defaultness: def_(), ty, expr }))\n             }\n         } else if self.check_keyword(kw::Trait) || self.check_auto_or_unsafe_trait_item() {\n             // TRAIT ITEM\n@@ -863,9 +863,13 @@ impl<'a> Parser<'a> {\n                 let kind = match AssocItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n                     Err(kind) => match kind {\n-                        ItemKind::Static(Static { ty: a, mutability: _, expr: b }) => {\n+                        ItemKind::Static(Static { ty, mutability: _, expr }) => {\n                             self.sess.emit_err(errors::AssociatedStaticItemNotAllowed { span });\n-                            AssocItemKind::Const(Defaultness::Final, a, b)\n+                            AssocItemKind::Const(ConstItem {\n+                                defaultness: Defaultness::Final,\n+                                ty,\n+                                expr,\n+                            })\n                         }\n                         _ => return self.error_bad_item_kind(span, &kind, \"`trait`s or `impl`s\"),\n                     },\n@@ -1115,12 +1119,12 @@ impl<'a> Parser<'a> {\n                 let kind = match ForeignItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n                     Err(kind) => match kind {\n-                        ItemKind::Const(_, a, b) => {\n+                        ItemKind::Const(ConstItem { ty, expr, .. }) => {\n                             self.sess.emit_err(errors::ExternItemCannotBeConst {\n                                 ident_span: ident.span,\n                                 const_span: span.with_hi(ident.span.lo()),\n                             });\n-                            ForeignItemKind::Static(a, Mutability::Not, b)\n+                            ForeignItemKind::Static(ty, Mutability::Not, expr)\n                         }\n                         _ => return self.error_bad_item_kind(span, &kind, \"`extern` blocks\"),\n                     },"}, {"sha": "735644ec8d51c9c57829189e6ad8de4176553d99", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -2347,7 +2347,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             }\n \n             ItemKind::Static(ast::Static { ref ty, ref expr, .. })\n-            | ItemKind::Const(_, ref ty, ref expr) => {\n+            | ItemKind::Const(ast::ConstItem { ref ty, ref expr, .. }) => {\n                 self.with_static_rib(|this| {\n                     this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Static), |this| {\n                         this.visit_ty(ty);\n@@ -2625,11 +2625,11 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         for item in trait_items {\n             self.resolve_doc_links(&item.attrs, MaybeExported::Ok(item.id));\n             match &item.kind {\n-                AssocItemKind::Const(_, ty, default) => {\n+                AssocItemKind::Const(ast::ConstItem { ty, expr, .. }) => {\n                     self.visit_ty(ty);\n                     // Only impose the restrictions of `ConstRibKind` for an\n                     // actual constant expression in a provided default.\n-                    if let Some(expr) = default {\n+                    if let Some(expr) = expr {\n                         // We allow arbitrary const expressions inside of associated consts,\n                         // even if they are potentially not const evaluatable.\n                         //\n@@ -2800,7 +2800,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         use crate::ResolutionError::*;\n         self.resolve_doc_links(&item.attrs, MaybeExported::ImplItem(trait_id.ok_or(&item.vis)));\n         match &item.kind {\n-            AssocItemKind::Const(_, ty, default) => {\n+            AssocItemKind::Const(ast::ConstItem { ty, expr, .. }) => {\n                 debug!(\"resolve_implementation AssocItemKind::Const\");\n                 // If this is a trait impl, ensure the const\n                 // exists in trait\n@@ -2815,7 +2815,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 );\n \n                 self.visit_ty(ty);\n-                if let Some(expr) = default {\n+                if let Some(expr) = expr {\n                     // We allow arbitrary const expressions inside of associated consts,\n                     // even if they are potentially not const evaluatable.\n                     //"}, {"sha": "d41f79f81315e450ae26b73144f9ebdfba0b30b2", "filename": "src/tools/clippy/clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n-use rustc_ast::ast::{Item, ItemKind, Ty, TyKind, Static};\n+use rustc_ast::ast::{Item, ItemKind, Ty, TyKind, Static, ConstItem};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -100,7 +100,7 @@ impl EarlyLintPass for RedundantStaticLifetimes {\n         }\n \n         if !item.span.from_expansion() {\n-            if let ItemKind::Const(_, ref var_type, _) = item.kind {\n+            if let ItemKind::Const(ConstItem { ty: ref var_type, .. }) = item.kind {\n                 Self::visit_type(var_type, cx, \"constants have by default a `'static` lifetime\");\n                 // Don't check associated consts because `'static` cannot be elided on those (issue\n                 // #2438)"}, {"sha": "be841098dba30ceff7d35173378d1c9402f1980f", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -287,7 +287,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         (ExternCrate(l), ExternCrate(r)) => l == r,\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n         (Static(ast::Static{ ty: lt, mutability: lm, expr: le}), Static(ast::Static { ty: rt, mutability: rm, expr: re})) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Const(ast::ConstItem { defaultness: ld, ty: lt, expr: le}), Const(ast::ConstItem { defaultness: rd, ty: rt, expr: re} )) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {\n                 defaultness: ld,\n@@ -451,7 +451,7 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n     use AssocItemKind::*;\n     match (l, r) {\n-        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Const(ast::ConstItem { defaultness: ld, ty: lt, expr: le}), Const(ast::ConstItem { defaultness: rd, ty: rt, expr: re})) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {\n                 defaultness: ld,"}, {"sha": "0dc8a4e937f2aed968830b631d1bdf72539e3dad", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec74653652e59fc209506c084357ccee922a2d73/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74653652e59fc209506c084357ccee922a2d73/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=ec74653652e59fc209506c084357ccee922a2d73", "patch": "@@ -1808,7 +1808,7 @@ impl<'a> StaticParts<'a> {\n             ast::ItemKind::Static(ast::Static { ref ty, mutability, ref expr}) => {\n                 (None, \"static\", ty, mutability, expr)\n             }\n-            ast::ItemKind::Const(defaultness, ref ty, ref expr) => {\n+            ast::ItemKind::Const(ast::ConstItem { defaultness, ref ty, ref expr}) => {\n                 (Some(defaultness), \"const\", ty, ast::Mutability::Not, expr)\n             }\n             _ => unreachable!(),\n@@ -1827,8 +1827,8 @@ impl<'a> StaticParts<'a> {\n \n     pub(crate) fn from_trait_item(ti: &'a ast::AssocItem) -> Self {\n         let (defaultness, ty, expr_opt) = match ti.kind {\n-            ast::AssocItemKind::Const(defaultness, ref ty, ref expr_opt) => {\n-                (defaultness, ty, expr_opt)\n+            ast::AssocItemKind::Const(ast::ConstItem {defaultness, ref ty, ref expr}) => {\n+                (defaultness, ty, expr)\n             }\n             _ => unreachable!(),\n         };\n@@ -1846,7 +1846,7 @@ impl<'a> StaticParts<'a> {\n \n     pub(crate) fn from_impl_item(ii: &'a ast::AssocItem) -> Self {\n         let (defaultness, ty, expr) = match ii.kind {\n-            ast::AssocItemKind::Const(defaultness, ref ty, ref expr) => (defaultness, ty, expr),\n+            ast::AssocItemKind::Const(ast::ConstItem { defaultness, ref ty, ref expr}) => (defaultness, ty, expr),\n             _ => unreachable!(),\n         };\n         StaticParts {"}]}