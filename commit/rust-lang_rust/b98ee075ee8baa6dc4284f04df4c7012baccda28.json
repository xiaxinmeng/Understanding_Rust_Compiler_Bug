{"sha": "b98ee075ee8baa6dc4284f04df4c7012baccda28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5OGVlMDc1ZWU4YmFhNmRjNDI4NGYwNGRmNGM3MDEyYmFjY2RhMjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-22T10:04:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-22T10:04:24Z"}, "message": "Merge #6746\n\n6746: Feature/add assist extract module to file r=matklad a=sasurau4\n\nFix #6522 \r\n\r\n## Screenshot\r\n\r\n<img src=\"https://user-images.githubusercontent.com/13580199/102748269-33a44300-43a5-11eb-9e37-f5fcb8e62f73.gif\" width=600 />\r\n\r\n\r\n## TODO\r\n\r\n- [x] Remove all TODO comment\r\n- [x] Pass the doc test\r\n\r\n\n\nCo-authored-by: Daiki Ihara <sasurau4@gmail.com>", "tree": {"sha": "66904d52167d8bdb45f598499538a17ef1f906e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66904d52167d8bdb45f598499538a17ef1f906e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b98ee075ee8baa6dc4284f04df4c7012baccda28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf4cSoCRBK7hj4Ov3rIwAAdHIIAK2cBElbN4IxvVUyPH13ePeD\ndliLPUBeojdXU2BzhVAxsC1Yi8aTl8rZxAL5sxVGoVoDHm8pt+Q63lsCbWWlg1t+\n/P990nlnDicJzSAZ35TUleTupW6XMGxvL+HfxnYsXfLny+yivzisejI+T/K0QGL8\nIoNZS7JGZRBvQTF9LdUV/3A43I9Ni138HLzd8Eys7G+kGq07ypMKY4zH5S7gylRk\nLYA2NISccVCSANyM1dfWwsQEaOGNRR1iNWUMx2ScTFxyeqIFo8Tkrh7vjrpnBky/\nXoKHGNsDkAdIiffrrP+kHsBlzJPz7MWsM4dC26ByYO10Z0PzLutkVtzOthnkhqg=\n=q0vb\n-----END PGP SIGNATURE-----\n", "payload": "tree 66904d52167d8bdb45f598499538a17ef1f906e4\nparent 61711d975777b176ca2a93ec1ceb2bed661fc6d7\nparent 23ed33a3a6b92064ae711bac305ac163f1fda4f5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608631464 +0000\ncommitter GitHub <noreply@github.com> 1608631464 +0000\n\nMerge #6746\n\n6746: Feature/add assist extract module to file r=matklad a=sasurau4\n\nFix #6522 \r\n\r\n## Screenshot\r\n\r\n<img src=\"https://user-images.githubusercontent.com/13580199/102748269-33a44300-43a5-11eb-9e37-f5fcb8e62f73.gif\" width=600 />\r\n\r\n\r\n## TODO\r\n\r\n- [x] Remove all TODO comment\r\n- [x] Pass the doc test\r\n\r\n\n\nCo-authored-by: Daiki Ihara <sasurau4@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b98ee075ee8baa6dc4284f04df4c7012baccda28", "html_url": "https://github.com/rust-lang/rust/commit/b98ee075ee8baa6dc4284f04df4c7012baccda28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b98ee075ee8baa6dc4284f04df4c7012baccda28/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61711d975777b176ca2a93ec1ceb2bed661fc6d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/61711d975777b176ca2a93ec1ceb2bed661fc6d7", "html_url": "https://github.com/rust-lang/rust/commit/61711d975777b176ca2a93ec1ceb2bed661fc6d7"}, {"sha": "23ed33a3a6b92064ae711bac305ac163f1fda4f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/23ed33a3a6b92064ae711bac305ac163f1fda4f5", "html_url": "https://github.com/rust-lang/rust/commit/23ed33a3a6b92064ae711bac305ac163f1fda4f5"}], "stats": {"total": 271, "additions": 252, "deletions": 19}, "files": [{"sha": "80cf9aba11f7ba31c668817702b8200c06833d6d", "filename": "crates/assists/src/assist_context.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fassists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fassists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_context.rs?ref=b98ee075ee8baa6dc4284f04df4c7012baccda28", "patch": "@@ -4,10 +4,10 @@ use std::mem;\n \n use algo::find_covering_element;\n use hir::Semantics;\n-use ide_db::base_db::{FileId, FileRange};\n+use ide_db::base_db::{AnchoredPathBuf, FileId, FileRange};\n use ide_db::{\n     label::Label,\n-    source_change::{SourceChange, SourceFileEdit},\n+    source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     RootDatabase,\n };\n use syntax::{\n@@ -209,6 +209,7 @@ pub(crate) struct AssistBuilder {\n     file_id: FileId,\n     is_snippet: bool,\n     source_file_edits: Vec<SourceFileEdit>,\n+    file_system_edits: Vec<FileSystemEdit>,\n }\n \n impl AssistBuilder {\n@@ -218,6 +219,7 @@ impl AssistBuilder {\n             file_id,\n             is_snippet: false,\n             source_file_edits: Vec::default(),\n+            file_system_edits: Vec::default(),\n         }\n     }\n \n@@ -282,12 +284,17 @@ impl AssistBuilder {\n             algo::diff(&node, &new).into_text_edit(&mut self.edit);\n         }\n     }\n+    pub(crate) fn create_file(&mut self, dst: AnchoredPathBuf, content: impl Into<String>) {\n+        let file_system_edit =\n+            FileSystemEdit::CreateFile { dst: dst.clone(), initial_contents: content.into() };\n+        self.file_system_edits.push(file_system_edit);\n+    }\n \n     fn finish(mut self) -> SourceChange {\n         self.commit();\n         SourceChange {\n             source_file_edits: mem::take(&mut self.source_file_edits),\n-            file_system_edits: Default::default(),\n+            file_system_edits: mem::take(&mut self.file_system_edits),\n             is_snippet: self.is_snippet,\n         }\n     }"}, {"sha": "5fc190fa67d6f12cd28a348e81b97c45651d7f75", "filename": "crates/assists/src/handlers/extract_module_to_file.rs", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_module_to_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_module_to_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_module_to_file.rs?ref=b98ee075ee8baa6dc4284f04df4c7012baccda28", "patch": "@@ -0,0 +1,170 @@\n+use ast::edit::IndentLevel;\n+use ide_db::base_db::{AnchoredPathBuf, SourceDatabaseExt};\n+use syntax::{\n+    ast::{self, edit::AstNodeEdit, NameOwner},\n+    AstNode,\n+};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: extract_module_to_file\n+//\n+// This assist extract module to file.\n+//\n+// ```\n+// mod foo {<|>\n+//     fn t() {}\n+// }\n+// ```\n+// ->\n+// ```\n+// mod foo;\n+// ```\n+pub(crate) fn extract_module_to_file(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let assist_id = AssistId(\"extract_module_to_file\", AssistKind::RefactorExtract);\n+    let assist_label = \"Extract module to file\";\n+    let db = ctx.db();\n+    let module_ast = ctx.find_node_at_offset::<ast::Module>()?;\n+    let module_items = module_ast.item_list()?;\n+    let dedent_module_items_text = module_items.dedent(IndentLevel(1)).to_string();\n+    let module_name = module_ast.name()?;\n+    let target = module_ast.syntax().text_range();\n+    let anchor_file_id = ctx.frange.file_id;\n+    let sr = db.file_source_root(anchor_file_id);\n+    let sr = db.source_root(sr);\n+    let file_path = sr.path_for_file(&anchor_file_id)?;\n+    let (file_name, file_ext) = file_path.name_and_extension()?;\n+    acc.add(assist_id, assist_label, target, |builder| {\n+        builder.replace(target, format!(\"mod {};\", module_name));\n+        let path = if is_main_or_lib(file_name) {\n+            format!(\"./{}.{}\", module_name, file_ext.unwrap())\n+        } else {\n+            format!(\"./{}/{}.{}\", file_name, module_name, file_ext.unwrap())\n+        };\n+        let dst = AnchoredPathBuf { anchor: anchor_file_id, path };\n+        let contents = update_module_items_string(dedent_module_items_text);\n+        builder.create_file(dst, contents);\n+    })\n+}\n+fn is_main_or_lib(file_name: &str) -> bool {\n+    file_name == \"main\".to_string() || file_name == \"lib\".to_string()\n+}\n+fn update_module_items_string(items_str: String) -> String {\n+    let mut items_string_lines: Vec<&str> = items_str.lines().collect();\n+    items_string_lines.pop(); // Delete last line\n+    items_string_lines.reverse();\n+    items_string_lines.pop(); // Delete first line\n+    items_string_lines.reverse();\n+\n+    let string = items_string_lines.join(\"\\n\");\n+    format!(\"{}\", string)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn extract_module_to_file_with_basic_module() {\n+        check_assist(\n+            extract_module_to_file,\n+            r#\"\n+//- /foo.rs crate:foo\n+mod tests {<|>\n+    #[test] fn t() {}\n+}\n+\"#,\n+            r#\"\n+//- /foo.rs\n+mod tests;\n+//- /foo/tests.rs\n+#[test] fn t() {}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn extract_module_to_file_with_file_path() {\n+        check_assist(\n+            extract_module_to_file,\n+            r#\"\n+//- /src/foo.rs crate:foo\n+mod bar {<|>\n+    fn f() {\n+\n+    }\n+}\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+\"#,\n+            r#\"\n+//- /src/foo.rs\n+mod bar;\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+//- /src/foo/bar.rs\n+fn f() {\n+\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn extract_module_to_file_with_main_filw() {\n+        check_assist(\n+            extract_module_to_file,\n+            r#\"\n+//- /main.rs\n+mod foo {<|>\n+    fn f() {\n+\n+    }\n+}\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+\"#,\n+            r#\"\n+//- /main.rs\n+mod foo;\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+//- /foo.rs\n+fn f() {\n+\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn extract_module_to_file_with_lib_file() {\n+        check_assist(\n+            extract_module_to_file,\n+            r#\"\n+//- /lib.rs\n+mod foo {<|>\n+    fn f() {\n+\n+    }\n+}\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+\"#,\n+            r#\"\n+//- /lib.rs\n+mod foo;\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+//- /foo.rs\n+fn f() {\n+\n+}\"#,\n+        )\n+    }\n+}"}, {"sha": "6b89b2d044397385732fa959f415666919253907", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=b98ee075ee8baa6dc4284f04df4c7012baccda28", "patch": "@@ -129,6 +129,7 @@ mod handlers {\n     mod convert_integer_literal;\n     mod early_return;\n     mod expand_glob_import;\n+    mod extract_module_to_file;\n     mod extract_struct_from_enum_variant;\n     mod extract_variable;\n     mod fill_match_arms;\n@@ -179,6 +180,7 @@ mod handlers {\n             convert_integer_literal::convert_integer_literal,\n             early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,\n+            extract_module_to_file::extract_module_to_file,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n             extract_variable::extract_variable,\n             fill_match_arms::fill_match_arms,"}, {"sha": "b41f4874a5d4107f3597b423d7b114587f5dfc6b", "filename": "crates/assists/src/tests.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fassists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fassists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests.rs?ref=b98ee075ee8baa6dc4284f04df4c7012baccda28", "patch": "@@ -2,6 +2,7 @@ mod generated;\n \n use hir::Semantics;\n use ide_db::base_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n+use ide_db::source_change::FileSystemEdit;\n use ide_db::RootDatabase;\n use syntax::TextRange;\n use test_utils::{assert_eq_text, extract_offset, extract_range};\n@@ -47,7 +48,7 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let before = db.file_text(file_id).to_string();\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let mut assist = Assist::resolved(&db, &AssistConfig::default(), frange)\n+    let assist = Assist::resolved(&db, &AssistConfig::default(), frange)\n         .into_iter()\n         .find(|assist| assist.assist.id.0 == assist_id)\n         .unwrap_or_else(|| {\n@@ -63,9 +64,12 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n         });\n \n     let actual = {\n-        let change = assist.source_change.source_file_edits.pop().unwrap();\n         let mut actual = before;\n-        change.edit.apply(&mut actual);\n+        for source_file_edit in assist.source_change.source_file_edits {\n+            if source_file_edit.file_id == file_id {\n+                source_file_edit.edit.apply(&mut actual)\n+            }\n+        }\n         actual\n     };\n     assert_eq_text!(&after, &actual);\n@@ -99,7 +103,8 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n         (Some(assist), ExpectedResult::After(after)) => {\n             let mut source_change = assist.source_change;\n             assert!(!source_change.source_file_edits.is_empty());\n-            let skip_header = source_change.source_file_edits.len() == 1;\n+            let skip_header = source_change.source_file_edits.len() == 1\n+                && source_change.file_system_edits.len() == 0;\n             source_change.source_file_edits.sort_by_key(|it| it.file_id);\n \n             let mut buf = String::new();\n@@ -115,6 +120,21 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n                 buf.push_str(&text);\n             }\n \n+            for file_system_edit in source_change.file_system_edits.clone() {\n+                match file_system_edit {\n+                    FileSystemEdit::CreateFile { dst, initial_contents } => {\n+                        let sr = db.file_source_root(dst.anchor);\n+                        let sr = db.source_root(sr);\n+                        let mut base = sr.path_for_file(&dst.anchor).unwrap().clone();\n+                        base.pop();\n+                        let created_file_path = format!(\"{}{}\", base.to_string(), &dst.path[1..]);\n+                        format_to!(buf, \"//- {}\\n\", created_file_path);\n+                        buf.push_str(&initial_contents);\n+                    }\n+                    _ => (),\n+                }\n+            }\n+\n             assert_eq_text!(after, &buf);\n         }\n         (Some(assist), ExpectedResult::Target(target)) => {"}, {"sha": "e9093ec536122f034189dbc1c7faadbdc3686317", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=b98ee075ee8baa6dc4284f04df4c7012baccda28", "patch": "@@ -235,6 +235,21 @@ fn qux(bar: Bar, baz: Baz) {}\n     )\n }\n \n+#[test]\n+fn doctest_extract_module_to_file() {\n+    check_doc_test(\n+        \"extract_module_to_file\",\n+        r#####\"\n+mod foo {<|>\n+    fn t() {}\n+}\n+\"#####,\n+        r#####\"\n+mod foo;\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_extract_struct_from_enum_variant() {\n     check_doc_test("}, {"sha": "3ad30f0c9e22c627d8cd231f3bfec87fbb021a01", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=b98ee075ee8baa6dc4284f04df4c7012baccda28", "patch": "@@ -619,6 +619,7 @@ fn test_fn() {\n                                                 ),\n                                                 path: \"foo.rs\",\n                                             },\n+                                            initial_contents: \"\",\n                                         },\n                                     ],\n                                     is_snippet: false,"}, {"sha": "d79f5c17006494dc187628cd31ddf229cb80b12c", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=b98ee075ee8baa6dc4284f04df4c7012baccda28", "patch": "@@ -40,6 +40,7 @@ impl DiagnosticWithFix for UnresolvedModule {\n                     anchor: self.file.original_file(sema.db),\n                     path: self.candidate.clone(),\n                 },\n+                initial_contents: \"\".to_string(),\n             }\n             .into(),\n             unresolved_module.syntax().text_range(),"}, {"sha": "10c0abdacae55c58f30ec6b329af494633b10288", "filename": "crates/ide_db/src/source_change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsource_change.rs?ref=b98ee075ee8baa6dc4284f04df4c7012baccda28", "patch": "@@ -44,7 +44,7 @@ impl From<Vec<SourceFileEdit>> for SourceChange {\n \n #[derive(Debug, Clone)]\n pub enum FileSystemEdit {\n-    CreateFile { dst: AnchoredPathBuf },\n+    CreateFile { dst: AnchoredPathBuf, initial_contents: String },\n     MoveFile { src: FileId, dst: AnchoredPathBuf },\n }\n "}, {"sha": "5a1ae96aa0951c97c2bf417ea8be944eb48b5623", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98ee075ee8baa6dc4284f04df4c7012baccda28/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=b98ee075ee8baa6dc4284f04df4c7012baccda28", "patch": "@@ -634,30 +634,47 @@ pub(crate) fn snippet_text_document_edit(\n     Ok(lsp_ext::SnippetTextDocumentEdit { text_document, edits })\n }\n \n-pub(crate) fn resource_op(\n+pub(crate) fn snippet_text_document_ops(\n     snap: &GlobalStateSnapshot,\n     file_system_edit: FileSystemEdit,\n-) -> lsp_types::ResourceOp {\n+) -> Vec<lsp_ext::SnippetDocumentChangeOperation> {\n+    let mut ops = Vec::new();\n     match file_system_edit {\n-        FileSystemEdit::CreateFile { dst } => {\n+        FileSystemEdit::CreateFile { dst, initial_contents } => {\n             let uri = snap.anchored_path(&dst);\n-            lsp_types::ResourceOp::Create(lsp_types::CreateFile {\n-                uri,\n+            let create_file = lsp_types::ResourceOp::Create(lsp_types::CreateFile {\n+                uri: uri.clone(),\n                 options: None,\n                 annotation_id: None,\n-            })\n+            });\n+            ops.push(lsp_ext::SnippetDocumentChangeOperation::Op(create_file));\n+            if !initial_contents.is_empty() {\n+                let text_document =\n+                    lsp_types::OptionalVersionedTextDocumentIdentifier { uri, version: None };\n+                let range = range(&LineIndex::new(\"\"), TextRange::empty(TextSize::from(0)));\n+                let text_edit = lsp_ext::SnippetTextEdit {\n+                    range,\n+                    new_text: initial_contents,\n+                    insert_text_format: Some(lsp_types::InsertTextFormat::PlainText),\n+                };\n+                let edit_file =\n+                    lsp_ext::SnippetTextDocumentEdit { text_document, edits: vec![text_edit] };\n+                ops.push(lsp_ext::SnippetDocumentChangeOperation::Edit(edit_file));\n+            }\n         }\n         FileSystemEdit::MoveFile { src, dst } => {\n             let old_uri = snap.file_id_to_url(src);\n             let new_uri = snap.anchored_path(&dst);\n-            lsp_types::ResourceOp::Rename(lsp_types::RenameFile {\n+            let rename_file = lsp_types::ResourceOp::Rename(lsp_types::RenameFile {\n                 old_uri,\n                 new_uri,\n                 options: None,\n                 annotation_id: None,\n-            })\n+            });\n+            ops.push(lsp_ext::SnippetDocumentChangeOperation::Op(rename_file))\n         }\n     }\n+    ops\n }\n \n pub(crate) fn snippet_workspace_edit(\n@@ -666,8 +683,8 @@ pub(crate) fn snippet_workspace_edit(\n ) -> Result<lsp_ext::SnippetWorkspaceEdit> {\n     let mut document_changes: Vec<lsp_ext::SnippetDocumentChangeOperation> = Vec::new();\n     for op in source_change.file_system_edits {\n-        let op = resource_op(&snap, op);\n-        document_changes.push(lsp_ext::SnippetDocumentChangeOperation::Op(op));\n+        let ops = snippet_text_document_ops(snap, op);\n+        document_changes.extend_from_slice(&ops);\n     }\n     for edit in source_change.source_file_edits {\n         let edit = snippet_text_document_edit(&snap, source_change.is_snippet, edit)?;"}, {"sha": "9d4823a34de642e38bf755c05144b26c7196b1e7", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b98ee075ee8baa6dc4284f04df4c7012baccda28/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b98ee075ee8baa6dc4284f04df4c7012baccda28/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=b98ee075ee8baa6dc4284f04df4c7012baccda28", "patch": "@@ -470,7 +470,7 @@ export function resolveCodeAction(ctx: Ctx): Cmd {\n             return;\n         }\n         const edit = client.protocol2CodeConverter.asWorkspaceEdit(item.edit);\n-        await applySnippetWorkspaceEdit(edit);\n+        await vscode.workspace.applyEdit(edit);\n     };\n }\n "}]}