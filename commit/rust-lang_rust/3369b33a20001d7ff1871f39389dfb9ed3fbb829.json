{"sha": "3369b33a20001d7ff1871f39389dfb9ed3fbb829", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNjliMzNhMjAwMDFkN2ZmMTg3MWYzOTM4OWRmYjllZDNmYmI4Mjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T16:35:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T19:50:29Z"}, "message": "rollup merge of #19902: alexcrichton/second-pass-mem\n\nThis commit stabilizes the `mem` and `default` modules of std.", "tree": {"sha": "1b5f283b3d16f4c296669e8d73b9b1a2198554a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b5f283b3d16f4c296669e8d73b9b1a2198554a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3369b33a20001d7ff1871f39389dfb9ed3fbb829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3369b33a20001d7ff1871f39389dfb9ed3fbb829", "html_url": "https://github.com/rust-lang/rust/commit/3369b33a20001d7ff1871f39389dfb9ed3fbb829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3369b33a20001d7ff1871f39389dfb9ed3fbb829/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cada943f145cf85d2b01b9046dde8ff599670b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/cada943f145cf85d2b01b9046dde8ff599670b80", "html_url": "https://github.com/rust-lang/rust/commit/cada943f145cf85d2b01b9046dde8ff599670b80"}, {"sha": "9021f61ef7979cb146c5786e1c54c6d928cc0483", "url": "https://api.github.com/repos/rust-lang/rust/commits/9021f61ef7979cb146c5786e1c54c6d928cc0483", "html_url": "https://github.com/rust-lang/rust/commit/9021f61ef7979cb146c5786e1c54c6d928cc0483"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "876f335406fa224daea2f1e8341d3176f9bb8c5c", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -316,7 +316,9 @@ impl<T: fmt::Show> fmt::Show for Arc<T> {\n     }\n }\n \n+#[stable]\n impl<T: Default + Sync + Send> Default for Arc<T> {\n+    #[stable]\n     fn default() -> Arc<T> { Arc::new(Default::default()) }\n }\n "}, {"sha": "879a8cc6951a133063fcb91afe0ae22526144fc7", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -45,11 +45,15 @@ pub static HEAP: () = ();\n #[unstable = \"custom allocators will add an additional type parameter (with default)\"]\n pub struct Box<T>(*mut T);\n \n+#[stable]\n impl<T: Default> Default for Box<T> {\n+    #[stable]\n     fn default() -> Box<T> { box Default::default() }\n }\n \n+#[stable]\n impl<T> Default for Box<[T]> {\n+    #[stable]\n     fn default() -> Box<[T]> { box [] }\n }\n "}, {"sha": "0257c640d3ccd58599927f2336a925c4cd815dab", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -448,6 +448,7 @@ impl<T: Default> Default for Rc<T> {\n     /// let x: Rc<int> = Default::default();\n     /// ```\n     #[inline]\n+    #[stable]\n     fn default() -> Rc<T> {\n         Rc::new(Default::default())\n     }"}, {"sha": "9421159269896200fe4c706fa08618c3cd1ddf5d", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -172,8 +172,10 @@ pub struct BinaryHeap<T> {\n     data: Vec<T>,\n }\n \n+#[stable]\n impl<T: Ord> Default for BinaryHeap<T> {\n     #[inline]\n+    #[stable]\n     fn default() -> BinaryHeap<T> { BinaryHeap::new() }\n }\n "}, {"sha": "df860d6000eb7134087e1fb66d1467cc44bc1e61", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -824,8 +824,10 @@ pub fn from_fn<F>(len: uint, mut f: F) -> Bitv where F: FnMut(uint) -> bool {\n     bitv\n }\n \n+#[stable]\n impl Default for Bitv {\n     #[inline]\n+    #[stable]\n     fn default() -> Bitv { Bitv::new() }\n }\n "}, {"sha": "c7cbb5a1c299e25b59c485b08b3cbebf6e3d80f9", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -832,7 +832,9 @@ impl<S: Writer, K: Hash<S>, V: Hash<S>> Hash<S> for BTreeMap<K, V> {\n     }\n }\n \n+#[stable]\n impl<K: Ord, V> Default for BTreeMap<K, V> {\n+    #[stable]\n     fn default() -> BTreeMap<K, V> {\n         BTreeMap::new()\n     }"}, {"sha": "8f75113c01dbf018ccb07bbb977217703be3838a", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -439,7 +439,9 @@ impl<T: Ord> Extend<T> for BTreeSet<T> {\n     }\n }\n \n+#[stable]\n impl<T: Ord> Default for BTreeSet<T> {\n+    #[stable]\n     fn default() -> BTreeSet<T> {\n         BTreeSet::new()\n     }"}, {"sha": "e7454aef51e8e9aac9d7f00478d40b0a26769040", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -192,8 +192,10 @@ impl<T> DList<T> {\n     }\n }\n \n+#[stable]\n impl<T> Default for DList<T> {\n     #[inline]\n+    #[stable]\n     fn default() -> DList<T> { DList::new() }\n }\n "}, {"sha": "cdb92d302e9d31ed880c3a21cee4fae0090baa9a", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -68,7 +68,9 @@ impl<T> Drop for RingBuf<T> {\n     }\n }\n \n+#[stable]\n impl<T> Default for RingBuf<T> {\n+    #[stable]\n     #[inline]\n     fn default() -> RingBuf<T> { RingBuf::new() }\n }"}, {"sha": "ba89fc133c4f65087b855638c567a7086c1316dd", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -826,6 +826,7 @@ impl StrAllocating for String {\n \n #[stable]\n impl Default for String {\n+    #[stable]\n     fn default() -> String {\n         String::new()\n     }"}, {"sha": "2b14f9569b0cf216eb9b05487b19d5f7d6c48fc4", "filename": "src/libcollections/tree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Ftree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Ftree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fmap.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -185,8 +185,10 @@ impl<K: Ord + Show, V: Show> Show for TreeMap<K, V> {\n     }\n }\n \n+#[stable]\n impl<K: Ord, V> Default for TreeMap<K,V> {\n     #[inline]\n+    #[stable]\n     fn default() -> TreeMap<K, V> { TreeMap::new() }\n }\n "}, {"sha": "c3aebc2736c960d44eb3c96e1f529f11052ce7f3", "filename": "src/libcollections/tree/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Ftree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Ftree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fset.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -134,8 +134,10 @@ impl<T: Ord + Show> Show for TreeSet<T> {\n     }\n }\n \n+#[stable]\n impl<T: Ord> Default for TreeSet<T> {\n     #[inline]\n+    #[stable]\n     fn default() -> TreeSet<T> { TreeSet::new() }\n }\n "}, {"sha": "67c5407eb6e5b871d01d34832f20a0342619c123", "filename": "src/libcollections/trie/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Ftrie%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Ftrie%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fmap.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -150,8 +150,10 @@ impl<T: Show> Show for TrieMap<T> {\n     }\n }\n \n+#[stable]\n impl<T> Default for TrieMap<T> {\n     #[inline]\n+    #[stable]\n     fn default() -> TrieMap<T> { TrieMap::new() }\n }\n "}, {"sha": "5d24673ae751c4a0eac10b2e9a63748e476d7e01", "filename": "src/libcollections/trie/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Ftrie%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Ftrie%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fset.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -69,8 +69,10 @@ impl Show for TrieSet {\n     }\n }\n \n+#[stable]\n impl Default for TrieSet {\n     #[inline]\n+    #[stable]\n     fn default() -> TrieSet { TrieSet::new() }\n }\n "}, {"sha": "1d2c935c90b819c742c69de5095267a9404c5aa0", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -1330,6 +1330,7 @@ impl<T> Drop for Vec<T> {\n \n #[stable]\n impl<T> Default for Vec<T> {\n+    #[stable]\n     fn default() -> Vec<T> {\n         Vec::new()\n     }"}, {"sha": "9f1a0075352b10f094fd66c9b3ba6e8a19473fee", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -66,7 +66,9 @@ pub struct VecMap<V> {\n     v: Vec<Option<V>>,\n }\n \n+#[stable]\n impl<V> Default for VecMap<V> {\n+    #[stable]\n     #[inline]\n     fn default() -> VecMap<V> { VecMap::new() }\n }"}, {"sha": "01979e975774c4b491b708b1d8017f843aabc4d4", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -215,8 +215,9 @@ impl<T:Copy> Clone for Cell<T> {\n     }\n }\n \n-#[unstable]\n+#[stable]\n impl<T:Default + Copy> Default for Cell<T> {\n+    #[stable]\n     fn default() -> Cell<T> {\n         Cell::new(Default::default())\n     }\n@@ -347,8 +348,9 @@ impl<T: Clone> Clone for RefCell<T> {\n     }\n }\n \n-#[unstable]\n+#[stable]\n impl<T:Default> Default for RefCell<T> {\n+    #[stable]\n     fn default() -> RefCell<T> {\n         RefCell::new(Default::default())\n     }"}, {"sha": "10facfe4750f9922175c50cb7c9d78915b97dc5a", "filename": "src/libcore/default.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -97,6 +97,7 @@\n ///     bar: f32,\n /// }\n /// ```\n+#[stable]\n pub trait Default {\n     /// Returns the \"default value\" for a type.\n     ///\n@@ -130,13 +131,16 @@ pub trait Default {\n     ///     fn default() -> Kind { Kind::A }\n     /// }\n     /// ```\n+    #[stable]\n     fn default() -> Self;\n }\n \n macro_rules! default_impl(\n     ($t:ty, $v:expr) => {\n+        #[stable]\n         impl Default for $t {\n             #[inline]\n+            #[stable]\n             fn default() -> $t { $v }\n         }\n     }"}, {"sha": "1f511ed759ed8608580333d7613212d66a83ad87", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -203,8 +203,10 @@ impl Clone for SipState {\n     }\n }\n \n+#[stable]\n impl Default for SipState {\n     #[inline]\n+    #[stable]\n     fn default() -> SipState {\n         SipState::new()\n     }"}, {"sha": "e2afee9905d7f9d8f8dfcd0399694dff10bfd029", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -217,6 +217,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// `forget` is unsafe because the caller is responsible for\n     /// ensuring the argument is deallocated already.\n+    #[stable]\n     pub fn forget<T>(_: T) -> ();\n \n     /// Unsafely transforms a value of one type into a value of another type.\n@@ -232,6 +233,7 @@ extern \"rust-intrinsic\" {\n     /// let v: &[u8] = unsafe { mem::transmute(\"L\") };\n     /// assert!(v == [76u8]);\n     /// ```\n+    #[stable]\n     pub fn transmute<T,U>(e: T) -> U;\n \n     /// Gives the address for the return value of the enclosing function."}, {"sha": "6747d12e0284ae34d31f905369a88454ba32cdda", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -13,9 +13,13 @@\n //! This module contains functions for querying the size and alignment of\n //! types, initializing and manipulating memory.\n \n+#![stable]\n+\n+use kinds::Sized;\n use intrinsics;\n use ptr;\n \n+#[stable]\n pub use intrinsics::transmute;\n \n /// Moves a thing into the void.\n@@ -223,15 +227,17 @@ pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n #[inline]\n #[unstable = \"this function may be removed in the future due to its \\\n               questionable utility\"]\n-pub unsafe fn copy_lifetime<'a, S, T:'a>(_ptr: &'a S, ptr: &T) -> &'a T {\n+pub unsafe fn copy_lifetime<'a, Sized? S, Sized? T: 'a>(_ptr: &'a S,\n+                                                        ptr: &T) -> &'a T {\n     transmute(ptr)\n }\n \n /// Transforms lifetime of the second mutable pointer to match the first.\n #[inline]\n #[unstable = \"this function may be removed in the future due to its \\\n               questionable utility\"]\n-pub unsafe fn copy_mut_lifetime<'a, S, T:'a>(_ptr: &'a mut S,\n-                                          ptr: &mut T) -> &'a mut T {\n+pub unsafe fn copy_mut_lifetime<'a, Sized? S, Sized? T: 'a>(_ptr: &'a mut S,\n+                                                            ptr: &mut T)\n+                                                            -> &'a mut T {\n     transmute(ptr)\n }"}, {"sha": "deb1cea1c0ec33e61d00f996fea7337815d05cf7", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -763,6 +763,7 @@ impl<T> AsSlice<T> for Option<T> {\n \n #[stable]\n impl<T> Default for Option<T> {\n+    #[stable]\n     #[inline]\n     #[stable]\n     fn default() -> Option<T> { None }"}, {"sha": "411a46ee1bd5893b41245b18cbf44abfc04c638c", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -645,8 +645,9 @@ impl<'a, T, Sized? U: AsSlice<T>> AsSlice<T> for &'a mut U {\n     fn as_slice(&self) -> &[T] { AsSlice::as_slice(*self) }\n }\n \n-#[unstable = \"waiting for DST\"]\n+#[stable]\n impl<'a, T> Default for &'a [T] {\n+    #[stable]\n     fn default() -> &'a [T] { &[] }\n }\n "}, {"sha": "1a7467555a5a3705165faa9abef7292b9866da00", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -2349,7 +2349,9 @@ impl StrPrelude for str {\n     fn len(&self) -> uint { self.repr().len }\n }\n \n+#[stable]\n impl<'a> Default for &'a str {\n+    #[stable]\n     fn default() -> &'a str { \"\" }\n }\n "}, {"sha": "5ea84f7db9179bb440bc88dbcdf7bb60ad282f63", "filename": "src/libcore/tuple/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Ftuple%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibcore%2Ftuple%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple%2Fmod.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -182,6 +182,7 @@ macro_rules! tuple_impls {\n \n             #[stable]\n             impl<$($T:Default),+> Default for ($($T,)+) {\n+                #[stable]\n                 #[inline]\n                 fn default() -> ($($T,)+) {\n                     ($({ let x: $T = Default::default(); x},)+)"}, {"sha": "46ee67940f26997ed832cdb298bb24ce561de223", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -142,7 +142,9 @@ impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {\n         *rng = Default::default();\n     }\n }\n+#[stable]\n impl Default for ReseedWithDefault {\n+    #[stable]\n     fn default() -> ReseedWithDefault { ReseedWithDefault }\n }\n "}, {"sha": "08f5544effb4a4f42f6a1a75c61ff6bf45fe1ed1", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -1288,7 +1288,9 @@ impl<K: Eq + Hash<S> + Show, V: Show, S, H: Hasher<S>> Show for HashMap<K, V, H>\n     }\n }\n \n+#[stable]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> Default for HashMap<K, V, H> {\n+    #[stable]\n     fn default() -> HashMap<K, V, H> {\n         HashMap::with_hasher(Default::default())\n     }"}, {"sha": "e00c62cbe2d94becb22ba327f2fef4b2ef54e5f1", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -608,7 +608,9 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Extend<T> for HashSet<T, H> {\n     }\n }\n \n+#[stable]\n impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n+    #[stable]\n     fn default() -> HashSet<T, H> {\n         HashSet::with_hasher(Default::default())\n     }"}, {"sha": "52e3c718b2d56d4222d21db92714161fbb71a597", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -95,7 +95,9 @@ impl Hasher<sip::SipState> for RandomSipHasher {\n     }\n }\n \n+#[stable]\n impl Default for RandomSipHasher {\n+    #[stable]\n     #[inline]\n     fn default() -> RandomSipHasher {\n         RandomSipHasher::new()"}, {"sha": "6a6d467e86c048afb4c05659a6db89ac20027ab4", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3369b33a20001d7ff1871f39389dfb9ed3fbb829/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=3369b33a20001d7ff1871f39389dfb9ed3fbb829", "patch": "@@ -1911,7 +1911,9 @@ bitflags! {\n }\n \n \n+#[stable]\n impl Default for FilePermission {\n+    #[stable]\n     #[inline]\n     fn default() -> FilePermission { FilePermission::empty() }\n }"}]}