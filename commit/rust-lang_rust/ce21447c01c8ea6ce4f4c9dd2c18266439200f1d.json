{"sha": "ce21447c01c8ea6ce4f4c9dd2c18266439200f1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMjE0NDdjMDFjOGVhNmNlNGY0YzlkZDJjMTgyNjY0MzkyMDBmMWQ=", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-03-24T15:52:47Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-03-24T16:54:12Z"}, "message": "Better errors in jsondocck", "tree": {"sha": "3a834b4b113324dba1d90a69a22e81872e574766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a834b4b113324dba1d90a69a22e81872e574766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d", "html_url": "https://github.com/rust-lang/rust/commit/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e012ce681b4d116c2ce2d285d09e03a794482cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e012ce681b4d116c2ce2d285d09e03a794482cb", "html_url": "https://github.com/rust-lang/rust/commit/2e012ce681b4d116c2ce2d285d09e03a794482cb"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "9b0f310e3ae44fe03949bc0c1b4ca81b51e25ec4", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ce21447c01c8ea6ce4f4c9dd2c18266439200f1d", "patch": "@@ -1219,6 +1219,12 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n+[[package]]\n+name = \"fs-err\"\n+version = \"2.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bcd1163ae48bda72a20ae26d66a04d3094135cadab911cff418ae5e33f253431\"\n+\n [[package]]\n name = \"fs_extra\"\n version = \"1.1.0\"\n@@ -1748,6 +1754,7 @@ checksum = \"92c245af8786f6ac35f95ca14feca9119e71339aaab41e878e7cdd655c97e9e5\"\n name = \"jsondocck\"\n version = \"0.1.0\"\n dependencies = [\n+ \"fs-err\",\n  \"getopts\",\n  \"jsonpath_lib\",\n  \"lazy_static\","}, {"sha": "a6efc4c9a6b5bbd8d28755076a3f05fbc095d29f", "filename": "src/tools/jsondocck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d/src%2Ftools%2Fjsondocck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d/src%2Ftools%2Fjsondocck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2FCargo.toml?ref=ce21447c01c8ea6ce4f4c9dd2c18266439200f1d", "patch": "@@ -12,3 +12,4 @@ lazy_static = \"1.4\"\n shlex = \"0.1\"\n serde = \"1.0\"\n serde_json = \"1.0\"\n+fs-err = \"2.5.0\""}, {"sha": "a188750c56ae307df54b08a0fe143d9a3bc74b1a", "filename": "src/tools/jsondocck/src/cache.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs?ref=ce21447c01c8ea6ce4f4c9dd2c18266439200f1d", "patch": "@@ -1,8 +1,10 @@\n use crate::error::CkError;\n use serde_json::Value;\n use std::collections::HashMap;\n+use std::io;\n use std::path::{Path, PathBuf};\n-use std::{fs, io};\n+\n+use fs_err as fs;\n \n #[derive(Debug)]\n pub struct Cache {\n@@ -31,7 +33,11 @@ impl Cache {\n             self.last_path = Some(resolve.clone());\n             resolve\n         } else {\n-            self.last_path.as_ref().unwrap().clone()\n+            self.last_path\n+                .as_ref()\n+                // FIXME: Point to a line number\n+                .expect(\"No last path set. Make sure to specify a full path before using `-`\")\n+                .clone()\n         }\n     }\n "}, {"sha": "216890d59ad6c53ceddf76629618caa33fd7e541", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=ce21447c01c8ea6ce4f4c9dd2c18266439200f1d", "patch": "@@ -239,7 +239,20 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n             let val = cache.get_value(&command.args[0])?;\n             let results = select(&val, &command.args[1]).unwrap();\n             let pat = string_to_value(&command.args[2], cache);\n-            results.len() == 1 && results[0] == pat.as_ref()\n+            let is = results.len() == 1 && results[0] == pat.as_ref();\n+            if !command.negated && !is {\n+                return Err(CkError::FailedCheck(\n+                    format!(\n+                        \"{} matched to {:?}, but expected {:?}\",\n+                        &command.args[1],\n+                        results,\n+                        pat.as_ref()\n+                    ),\n+                    command,\n+                ));\n+            } else {\n+                is\n+            }\n         }\n         CommandKind::Set => {\n             // @set <name> = <path> <jsonpath>\n@@ -299,7 +312,10 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n \n fn string_to_value<'a>(s: &str, cache: &'a Cache) -> Cow<'a, Value> {\n     if s.starts_with(\"$\") {\n-        Cow::Borrowed(&cache.variables[&s[1..]])\n+        Cow::Borrowed(&cache.variables.get(&s[1..]).unwrap_or_else(|| {\n+            // FIXME(adotinthevoid): Show line number\n+            panic!(\"No variable: `{}`. Current state: `{:?}`\", &s[1..], cache.variables)\n+        }))\n     } else {\n         Cow::Owned(serde_json::from_str(s).unwrap())\n     }"}]}