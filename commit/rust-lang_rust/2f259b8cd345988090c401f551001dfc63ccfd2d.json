{"sha": "2f259b8cd345988090c401f551001dfc63ccfd2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMjU5YjhjZDM0NTk4ODA5MGM0MDFmNTUxMDAxZGZjNjNjY2ZkMmQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-03T17:24:44Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-03T21:27:44Z"}, "message": "Use `span_suggestion` in entry lints", "tree": {"sha": "437155bba8349e103de7d55fd6290dba950728c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/437155bba8349e103de7d55fd6290dba950728c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f259b8cd345988090c401f551001dfc63ccfd2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXeYNQAAoJEF5CfHlMukXoCnAQAMFdm/Eq5brsUau5rgVS8i9/\nNv/0azWZi+pw5oOvxQuPr3VbYMyXLz9t6aNIJDguZ4qY2rhXWwVj95jyqOK7jEf0\nadGTQbqVfzWgqDvPRiDtJil9TRKfHn4lszT5kx//BweZcFvJ0pqIVy+yyCf49y7Y\nyBrDw+ezUY0phOlmMSea6yIKDw2rREoeXObj+VrWAuA5SZvOWDHjKaTbSkAerjr1\nkC3uk/YN9erWbq6Lv2iVpBkfnb5Vx1oX6cjdAsfoxy9UjJExkRBybTuiPYbdM26P\nUKKSSKwBdeml/MA4/ZI44/akxWXOdaXSqCkZ+RdCbPKM1T7yFPJu0yt/oGrJOfi9\nPBWB8bOEqhhAEgxM9EGQ72/LzxDSaWQSfeEzCiBNoBS/he0WTvOb8lmj1c94T0p8\nNb++dlG8wZ1ihnGItn68GbX5nOFl/dPovVGKr7v58B0pFH85/vctnDhXwty/LKde\nq0TaaXuKI03QlyhiaoHsJmdiClNHUw1xYSQ6b4MhhZrtnvnNjrGxaHxWVJagJvyw\nNXynvNpx7AE5t0StMsoW1PMziGAriFcarNQCs4Ao98pUap63uTiEGTA82NYbpGHW\ns1aoGPQFKDooz9OWMbEdODb/HtnhZELpcAo6INp+8M37cbCUC49RjtidXdp7Jfbv\nv+7NheaV+2cbVvCL6cD0\n=lXKN\n-----END PGP SIGNATURE-----", "payload": "tree 437155bba8349e103de7d55fd6290dba950728c4\nparent ffa840d4f2bbe31721b40d56093259c4a5c0b50b\nauthor mcarton <cartonmartin+git@gmail.com> 1467566684 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467581264 +0200\n\nUse `span_suggestion` in entry lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f259b8cd345988090c401f551001dfc63ccfd2d", "html_url": "https://github.com/rust-lang/rust/commit/2f259b8cd345988090c401f551001dfc63ccfd2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f259b8cd345988090c401f551001dfc63ccfd2d/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffa840d4f2bbe31721b40d56093259c4a5c0b50b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa840d4f2bbe31721b40d56093259c4a5c0b50b", "html_url": "https://github.com/rust-lang/rust/commit/ffa840d4f2bbe31721b40d56093259c4a5c0b50b"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "c7afc2d5cd9eff6afbdc9b8ced8c6f5ebbc1b24c", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f259b8cd345988090c401f551001dfc63ccfd2d/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f259b8cd345988090c401f551001dfc63ccfd2d/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=2f259b8cd345988090c401f551001dfc63ccfd2d", "patch": "@@ -121,21 +121,21 @@ impl<'a, 'tcx, 'v, 'b> Visitor<'v> for InsertVisitor<'a, 'tcx, 'b> {\n             SpanlessEq::new(self.cx).eq_expr(self.key, &params[1])\n         ], {\n             span_lint_and_then(self.cx, MAP_ENTRY, self.span,\n-                               &format!(\"usage of `contains_key` followed by `insert` on `{}`\", self.ty), |db| {\n+                               &format!(\"usage of `contains_key` followed by `insert` on a `{}`\", self.ty), |db| {\n                 if self.sole_expr {\n                     let help = format!(\"{}.entry({}).or_insert({})\",\n                                        snippet(self.cx, self.map.span, \"map\"),\n                                        snippet(self.cx, params[1].span, \"..\"),\n                                        snippet(self.cx, params[2].span, \"..\"));\n \n-                    db.span_suggestion(self.span, \"Consider using\", help);\n+                    db.span_suggestion(self.span, \"consider using\", help);\n                 }\n                 else {\n-                    let help = format!(\"Consider using `{}.entry({})`\",\n+                    let help = format!(\"{}.entry({})\",\n                                        snippet(self.cx, self.map.span, \"map\"),\n                                        snippet(self.cx, params[1].span, \"..\"));\n \n-                    db.span_note(self.span, &help);\n+                    db.span_suggestion(self.span, \"consider using\", help);\n                 }\n             });\n         }}"}, {"sha": "ec3b75abb371c3a7db3605ffe2dc0f624337b25e", "filename": "tests/compile-fail/entry.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2f259b8cd345988090c401f551001dfc63ccfd2d/tests%2Fcompile-fail%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f259b8cd345988090c401f551001dfc63ccfd2d/tests%2Fcompile-fail%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fentry.rs?ref=2f259b8cd345988090c401f551001dfc63ccfd2d", "patch": "@@ -11,45 +11,51 @@ fn foo() {}\n \n fn insert_if_absent0<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { m.insert(k, v); }\n-    //~^ ERROR usage of `contains_key` followed by `insert` on `HashMap`\n-    //~| HELP Consider\n+    //~^ ERROR usage of `contains_key` followed by `insert` on a `HashMap`\n+    //~| HELP consider\n     //~| SUGGESTION m.entry(k).or_insert(v)\n }\n \n fn insert_if_absent1<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { foo(); m.insert(k, v); }\n-    //~^ ERROR usage of `contains_key` followed by `insert` on `HashMap`\n-    //~| NOTE Consider using `m.entry(k)`\n+    //~^ ERROR usage of `contains_key` followed by `insert` on a `HashMap`\n+    //~| HELP consider\n+    //~| SUGGESTION m.entry(k)\n }\n \n fn insert_if_absent2<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { m.insert(k, v) } else { None };\n-    //~^ ERROR usage of `contains_key` followed by `insert` on `HashMap`\n-    //~| NOTE Consider using `m.entry(k)`\n+    //~^ ERROR usage of `contains_key` followed by `insert` on a `HashMap`\n+    //~| HELP consider\n+    //~| SUGGESTION m.entry(k)\n }\n \n fn insert_if_present2<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if m.contains_key(&k) { None } else { m.insert(k, v) };\n-    //~^ ERROR usage of `contains_key` followed by `insert` on `HashMap`\n-    //~| NOTE Consider using `m.entry(k)`\n+    //~^ ERROR usage of `contains_key` followed by `insert` on a `HashMap`\n+    //~| HELP consider\n+    //~| SUGGESTION m.entry(k)\n }\n \n fn insert_if_absent3<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n-    //~^ ERROR usage of `contains_key` followed by `insert` on `HashMap`\n-    //~| NOTE Consider using `m.entry(k)`\n+    //~^ ERROR usage of `contains_key` followed by `insert` on a `HashMap`\n+    //~| HELP consider\n+    //~| SUGGESTION m.entry(k)\n }\n \n fn insert_if_present3<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if m.contains_key(&k) { None } else { foo(); m.insert(k, v) };\n-    //~^ ERROR usage of `contains_key` followed by `insert` on `HashMap`\n-    //~| NOTE Consider using `m.entry(k)`\n+    //~^ ERROR usage of `contains_key` followed by `insert` on a `HashMap`\n+    //~| HELP consider\n+    //~| SUGGESTION m.entry(k)\n }\n \n fn insert_in_btreemap<K: Ord, V>(m: &mut BTreeMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n-    //~^ ERROR usage of `contains_key` followed by `insert` on `BTreeMap`\n-    //~| NOTE Consider using `m.entry(k)`\n+    //~^ ERROR usage of `contains_key` followed by `insert` on a `BTreeMap`\n+    //~| HELP consider\n+    //~| SUGGESTION m.entry(k)\n }\n \n fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v: V) {"}]}