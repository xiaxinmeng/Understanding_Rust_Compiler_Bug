{"sha": "091ef95f8eaec353b8dc7934e8b43a0b5133e3c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MWVmOTVmOGVhZWMzNTNiOGRjNzkzNGU4YjQzYTBiNTEzM2UzYzc=", "commit": {"author": {"name": "Skgland", "email": "bb-github@t-online.de", "date": "2021-01-26T14:06:01Z"}, "committer": {"name": "Skgland", "email": "bb-github@t-online.de", "date": "2021-02-09T12:42:36Z"}, "message": "use ufcs in derive(RustDecodable)", "tree": {"sha": "b24f3d4e0a9fcdf519a4d6560bd3fbd0ba01f672", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b24f3d4e0a9fcdf519a4d6560bd3fbd0ba01f672"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/091ef95f8eaec353b8dc7934e8b43a0b5133e3c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEExK/X7hjj1qyNARZpO+Gho8vDz5kFAmAigzwACgkQO+Gho8vD\nz5lSfAgAxoMovDdDUF/DBUxp5ZaKiS6j3lldYLGD4o8qgEf5ZbB8fL8EBnCpEzxA\nBBfJwC46mRaTygCnqGAV6WJ3ZpN0zlNboeszJdozygCF+fZi4518RUVACNG7tT0b\nY8XJwOjQVz85P5sY0BZsiCtTyNXTOsrnh/9DxLGrPFUjZ3CeWS0v8qLNW7PbFzZk\nQj9FkfCHupoLftg/P/D3Wn64FmHJERtQrZRXFA9YYX/PgBUpfK5PTKSe7bKHY92U\nDkqQYWdknTuhgzC3RnP9WbDUY25SV1wSWex0lnv3SKHtMYFwyumJqjxNzTUO1hDu\nVOze4MVqrgxhBBtAyw4Bt1gRyJJa6A==\n=q1LC\n-----END PGP SIGNATURE-----", "payload": "tree b24f3d4e0a9fcdf519a4d6560bd3fbd0ba01f672\nparent 525fc4b8e4e8033421805d869f2980ff39830641\nauthor Skgland <bb-github@t-online.de> 1611669961 +0100\ncommitter Skgland <bb-github@t-online.de> 1612874556 +0100\n\nuse ufcs in derive(RustDecodable)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/091ef95f8eaec353b8dc7934e8b43a0b5133e3c7", "html_url": "https://github.com/rust-lang/rust/commit/091ef95f8eaec353b8dc7934e8b43a0b5133e3c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/091ef95f8eaec353b8dc7934e8b43a0b5133e3c7/comments", "author": {"login": "Skgland", "id": 3877590, "node_id": "MDQ6VXNlcjM4Nzc1OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3877590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Skgland", "html_url": "https://github.com/Skgland", "followers_url": "https://api.github.com/users/Skgland/followers", "following_url": "https://api.github.com/users/Skgland/following{/other_user}", "gists_url": "https://api.github.com/users/Skgland/gists{/gist_id}", "starred_url": "https://api.github.com/users/Skgland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Skgland/subscriptions", "organizations_url": "https://api.github.com/users/Skgland/orgs", "repos_url": "https://api.github.com/users/Skgland/repos", "events_url": "https://api.github.com/users/Skgland/events{/privacy}", "received_events_url": "https://api.github.com/users/Skgland/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Skgland", "id": 3877590, "node_id": "MDQ6VXNlcjM4Nzc1OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3877590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Skgland", "html_url": "https://github.com/Skgland", "followers_url": "https://api.github.com/users/Skgland/followers", "following_url": "https://api.github.com/users/Skgland/following{/other_user}", "gists_url": "https://api.github.com/users/Skgland/gists{/gist_id}", "starred_url": "https://api.github.com/users/Skgland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Skgland/subscriptions", "organizations_url": "https://api.github.com/users/Skgland/orgs", "repos_url": "https://api.github.com/users/Skgland/repos", "events_url": "https://api.github.com/users/Skgland/events{/privacy}", "received_events_url": "https://api.github.com/users/Skgland/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "525fc4b8e4e8033421805d869f2980ff39830641", "url": "https://api.github.com/repos/rust-lang/rust/commits/525fc4b8e4e8033421805d869f2980ff39830641", "html_url": "https://github.com/rust-lang/rust/commit/525fc4b8e4e8033421805d869f2980ff39830641"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "470d98c117ebe21f378575efa9c23cb6eaf0bb1d", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/091ef95f8eaec353b8dc7934e8b43a0b5133e3c7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091ef95f8eaec353b8dc7934e8b43a0b5133e3c7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=091ef95f8eaec353b8dc7934e8b43a0b5133e3c7", "patch": "@@ -91,18 +91,19 @@ fn decodable_substructure(\n                 Unnamed(ref fields, _) => fields.len(),\n                 Named(ref fields) => fields.len(),\n             };\n-            let read_struct_field = Ident::new(sym::read_struct_field, trait_span);\n+            let fn_read_struct_field_path: Vec<_> =\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Decodable, sym::read_struct_field]);\n \n             let path = cx.path_ident(trait_span, substr.type_ident);\n             let result =\n                 decode_static_fields(cx, trait_span, path, summary, |cx, span, name, field| {\n                     cx.expr_try(\n                         span,\n-                        cx.expr_method_call(\n+                        cx.expr_call_global(\n                             span,\n-                            blkdecoder.clone(),\n-                            read_struct_field,\n+                            fn_read_struct_field_path.clone(),\n                             vec![\n+                                blkdecoder.clone(),\n                                 cx.expr_str(span, name),\n                                 cx.expr_usize(span, field),\n                                 exprdecode.clone(),\n@@ -111,11 +112,14 @@ fn decodable_substructure(\n                     )\n                 });\n             let result = cx.expr_ok(trait_span, result);\n-            cx.expr_method_call(\n+            let fn_read_struct_path: Vec<_> =\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Decodable, sym::read_struct]);\n+\n+            cx.expr_call_global(\n                 trait_span,\n-                decoder,\n-                Ident::new(sym::read_struct, trait_span),\n+                fn_read_struct_path,\n                 vec![\n+                    decoder,\n                     cx.expr_str(trait_span, substr.type_ident.name),\n                     cx.expr_usize(trait_span, nfields),\n                     cx.lambda1(trait_span, result, blkarg),\n@@ -127,7 +131,12 @@ fn decodable_substructure(\n \n             let mut arms = Vec::with_capacity(fields.len() + 1);\n             let mut variants = Vec::with_capacity(fields.len());\n-            let rvariant_arg = Ident::new(sym::read_enum_variant_arg, trait_span);\n+\n+            let fn_read_enum_variant_arg_path: Vec<_> = cx.def_site_path(&[\n+                sym::rustc_serialize,\n+                sym::Decodable,\n+                sym::read_enum_variant_arg,\n+            ]);\n \n             for (i, &(ident, v_span, ref parts)) in fields.iter().enumerate() {\n                 variants.push(cx.expr_str(v_span, ident.name));\n@@ -138,11 +147,10 @@ fn decodable_substructure(\n                         let idx = cx.expr_usize(span, field);\n                         cx.expr_try(\n                             span,\n-                            cx.expr_method_call(\n+                            cx.expr_call_global(\n                                 span,\n-                                blkdecoder.clone(),\n-                                rvariant_arg,\n-                                vec![idx, exprdecode.clone()],\n+                                fn_read_enum_variant_arg_path.clone(),\n+                                vec![blkdecoder.clone(), idx, exprdecode.clone()],\n                             ),\n                         )\n                     });\n@@ -159,17 +167,21 @@ fn decodable_substructure(\n             let lambda = cx.lambda(trait_span, vec![blkarg, variant], result);\n             let variant_vec = cx.expr_vec(trait_span, variants);\n             let variant_vec = cx.expr_addr_of(trait_span, variant_vec);\n-            let result = cx.expr_method_call(\n+            let fn_read_enum_variant_path: Vec<_> =\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Decodable, sym::read_enum_variant]);\n+            let result = cx.expr_call_global(\n                 trait_span,\n-                blkdecoder,\n-                Ident::new(sym::read_enum_variant, trait_span),\n-                vec![variant_vec, lambda],\n+                fn_read_enum_variant_path,\n+                vec![blkdecoder, variant_vec, lambda],\n             );\n-            cx.expr_method_call(\n+            let fn_read_enum_path: Vec<_> =\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Decodable, sym::read_enum]);\n+\n+            cx.expr_call_global(\n                 trait_span,\n-                decoder,\n-                Ident::new(sym::read_enum, trait_span),\n+                fn_read_enum_path,\n                 vec![\n+                    decoder,\n                     cx.expr_str(trait_span, substr.type_ident.name),\n                     cx.lambda1(trait_span, result, blkarg),\n                 ],"}]}