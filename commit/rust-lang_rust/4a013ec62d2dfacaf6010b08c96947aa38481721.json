{"sha": "4a013ec62d2dfacaf6010b08c96947aa38481721", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMDEzZWM2MmQyZGZhY2FmNjAxMGIwOGM5Njk0N2FhMzg0ODE3MjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-25T08:59:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-25T08:59:54Z"}, "message": "Remove dead code", "tree": {"sha": "e4fe67c781801e5e75c1cece914b315bed546b4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4fe67c781801e5e75c1cece914b315bed546b4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a013ec62d2dfacaf6010b08c96947aa38481721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a013ec62d2dfacaf6010b08c96947aa38481721", "html_url": "https://github.com/rust-lang/rust/commit/4a013ec62d2dfacaf6010b08c96947aa38481721", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a013ec62d2dfacaf6010b08c96947aa38481721/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1527feb744c7911b6ca482554f0399d3ef0ebfdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1527feb744c7911b6ca482554f0399d3ef0ebfdc", "html_url": "https://github.com/rust-lang/rust/commit/1527feb744c7911b6ca482554f0399d3ef0ebfdc"}], "stats": {"total": 160, "additions": 54, "deletions": 106}, "files": [{"sha": "1ed8258d867e2d504a7d0814ccd4d2d3798e82ae", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=4a013ec62d2dfacaf6010b08c96947aa38481721", "patch": "@@ -3,8 +3,7 @@ import * as lc from 'vscode-languageclient';\n import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n-import * as sourceChange from '../source_change';\n-import { assert } from '../util';\n+import { applySnippetWorkspaceEdit } from '../snippets';\n \n export * from './analyzer_status';\n export * from './matching_brace';\n@@ -55,52 +54,3 @@ export function applySnippetWorkspaceEditCommand(_ctx: Ctx): Cmd {\n         await applySnippetWorkspaceEdit(edit);\n     };\n }\n-\n-export async function applySnippetWorkspaceEdit(edit: vscode.WorkspaceEdit) {\n-    assert(edit.entries().length === 1, `bad ws edit: ${JSON.stringify(edit)}`);\n-    const [uri, edits] = edit.entries()[0];\n-\n-    const editor = vscode.window.visibleTextEditors.find((it) => it.document.uri.toString() === uri.toString());\n-    if (!editor) return;\n-\n-    let selection: vscode.Selection | undefined = undefined;\n-    let lineDelta = 0;\n-    await editor.edit((builder) => {\n-        for (const indel of edits) {\n-            const parsed = parseSnippet(indel.newText);\n-            if (parsed) {\n-                const [newText, [placeholderStart, placeholderLength]] = parsed;\n-                const prefix = newText.substr(0, placeholderStart);\n-                const lastNewline = prefix.lastIndexOf('\\n');\n-\n-                const startLine = indel.range.start.line + lineDelta + countLines(prefix);\n-                const startColumn = lastNewline === -1 ?\n-                    indel.range.start.character + placeholderStart\n-                    : prefix.length - lastNewline - 1;\n-                const endColumn = startColumn + placeholderLength;\n-                selection = new vscode.Selection(\n-                    new vscode.Position(startLine, startColumn),\n-                    new vscode.Position(startLine, endColumn),\n-                );\n-                builder.replace(indel.range, newText);\n-            } else {\n-                lineDelta = countLines(indel.newText) - (indel.range.end.line - indel.range.start.line);\n-                builder.replace(indel.range, indel.newText);\n-            }\n-        }\n-    });\n-    if (selection) editor.selection = selection;\n-}\n-\n-function parseSnippet(snip: string): [string, [number, number]] | undefined {\n-    const m = snip.match(/\\$(0|\\{0:([^}]*)\\})/);\n-    if (!m) return undefined;\n-    const placeholder = m[2] ?? \"\";\n-    const range: [number, number] = [m.index!!, placeholder.length];\n-    const insert = snip.replace(m[0], placeholder);\n-    return [insert, range];\n-}\n-\n-function countLines(text: string): number {\n-    return (text.match(/\\n/g) || []).length;\n-}"}, {"sha": "0e4769633b770645a20acbcbe87ec5c0b70fcb0a", "filename": "editors/code/src/commands/on_enter.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=4a013ec62d2dfacaf6010b08c96947aa38481721", "patch": "@@ -2,7 +2,7 @@ import * as vscode from 'vscode';\n import * as ra from '../rust-analyzer-api';\n \n import { Cmd, Ctx } from '../ctx';\n-import { applySnippetWorkspaceEdit } from '.';\n+import { applySnippetWorkspaceEdit } from '../snippets';\n \n async function handleKeypress(ctx: Ctx) {\n     const editor = ctx.activeRustEditor;"}, {"sha": "794530162dc095fd81e2d3b3200b49f651e8435b", "filename": "editors/code/src/snippets.ts", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fsnippets.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fsnippets.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsnippets.ts?ref=4a013ec62d2dfacaf6010b08c96947aa38481721", "patch": "@@ -0,0 +1,52 @@\n+import * as vscode from 'vscode';\n+\n+import { assert } from './util';\n+\n+export async function applySnippetWorkspaceEdit(edit: vscode.WorkspaceEdit) {\n+    assert(edit.entries().length === 1, `bad ws edit: ${JSON.stringify(edit)}`);\n+    const [uri, edits] = edit.entries()[0];\n+\n+    const editor = vscode.window.visibleTextEditors.find((it) => it.document.uri.toString() === uri.toString());\n+    if (!editor) return;\n+\n+    let selection: vscode.Selection | undefined = undefined;\n+    let lineDelta = 0;\n+    await editor.edit((builder) => {\n+        for (const indel of edits) {\n+            const parsed = parseSnippet(indel.newText);\n+            if (parsed) {\n+                const [newText, [placeholderStart, placeholderLength]] = parsed;\n+                const prefix = newText.substr(0, placeholderStart);\n+                const lastNewline = prefix.lastIndexOf('\\n');\n+\n+                const startLine = indel.range.start.line + lineDelta + countLines(prefix);\n+                const startColumn = lastNewline === -1 ?\n+                    indel.range.start.character + placeholderStart\n+                    : prefix.length - lastNewline - 1;\n+                const endColumn = startColumn + placeholderLength;\n+                selection = new vscode.Selection(\n+                    new vscode.Position(startLine, startColumn),\n+                    new vscode.Position(startLine, endColumn),\n+                );\n+                builder.replace(indel.range, newText);\n+            } else {\n+                lineDelta = countLines(indel.newText) - (indel.range.end.line - indel.range.start.line);\n+                builder.replace(indel.range, indel.newText);\n+            }\n+        }\n+    });\n+    if (selection) editor.selection = selection;\n+}\n+\n+function parseSnippet(snip: string): [string, [number, number]] | undefined {\n+    const m = snip.match(/\\$(0|\\{0:([^}]*)\\})/);\n+    if (!m) return undefined;\n+    const placeholder = m[2] ?? \"\";\n+    const range: [number, number] = [m.index!!, placeholder.length];\n+    const insert = snip.replace(m[0], placeholder);\n+    return [insert, range];\n+}\n+\n+function countLines(text: string): number {\n+    return (text.match(/\\n/g) || []).length;\n+}"}, {"sha": "af8f1df51126aac4d2cdb7971af470174aab3b56", "filename": "editors/code/src/source_change.ts", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fsource_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1527feb744c7911b6ca482554f0399d3ef0ebfdc/editors%2Fcode%2Fsrc%2Fsource_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsource_change.ts?ref=1527feb744c7911b6ca482554f0399d3ef0ebfdc", "patch": "@@ -1,54 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n-import * as ra from './rust-analyzer-api';\n-\n-import { Ctx } from './ctx';\n-\n-export async function applySourceChange(ctx: Ctx, change: ra.SourceChange) {\n-    const client = ctx.client;\n-    if (!client) return;\n-\n-    const wsEdit = client.protocol2CodeConverter.asWorkspaceEdit(\n-        change.workspaceEdit,\n-    );\n-    let created;\n-    let moved;\n-    if (change.workspaceEdit.documentChanges) {\n-        for (const docChange of change.workspaceEdit.documentChanges) {\n-            if (lc.CreateFile.is(docChange)) {\n-                created = docChange.uri;\n-            } else if (lc.RenameFile.is(docChange)) {\n-                moved = docChange.newUri;\n-            }\n-        }\n-    }\n-    const toOpen = created || moved;\n-    const toReveal = change.cursorPosition;\n-    await vscode.workspace.applyEdit(wsEdit);\n-    if (toOpen) {\n-        const toOpenUri = vscode.Uri.parse(toOpen);\n-        const doc = await vscode.workspace.openTextDocument(toOpenUri);\n-        await vscode.window.showTextDocument(doc);\n-    } else if (toReveal) {\n-        const uri = client.protocol2CodeConverter.asUri(\n-            toReveal.textDocument.uri,\n-        );\n-        const position = client.protocol2CodeConverter.asPosition(\n-            toReveal.position,\n-        );\n-        const editor = vscode.window.activeTextEditor;\n-        if (!editor || !editor.selection.isEmpty) {\n-            return;\n-        }\n-\n-        if (editor.document.uri !== uri) {\n-            const doc = await vscode.workspace.openTextDocument(uri);\n-            await vscode.window.showTextDocument(doc);\n-        }\n-        editor.selection = new vscode.Selection(position, position);\n-        editor.revealRange(\n-            new vscode.Range(position, position),\n-            vscode.TextEditorRevealType.Default,\n-        );\n-    }\n-}"}]}