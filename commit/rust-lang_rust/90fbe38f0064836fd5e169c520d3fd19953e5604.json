{"sha": "90fbe38f0064836fd5e169c520d3fd19953e5604", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZmJlMzhmMDA2NDgzNmZkNWUxNjljNTIwZDNmZDE5OTUzZTU2MDQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-14T06:16:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-14T06:18:49Z"}, "message": "std::rt: Tasks must have an unwinder. Simpler", "tree": {"sha": "0cdd63d8cc5b708ed039fce7f54df4f087549909", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cdd63d8cc5b708ed039fce7f54df4f087549909"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90fbe38f0064836fd5e169c520d3fd19953e5604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90fbe38f0064836fd5e169c520d3fd19953e5604", "html_url": "https://github.com/rust-lang/rust/commit/90fbe38f0064836fd5e169c520d3fd19953e5604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90fbe38f0064836fd5e169c520d3fd19953e5604/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd148cd3e2d08ce15272f0690f6e41d2e85ee721", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd148cd3e2d08ce15272f0690f6e41d2e85ee721", "html_url": "https://github.com/rust-lang/rust/commit/fd148cd3e2d08ce15272f0690f6e41d2e85ee721"}], "stats": {"total": 70, "additions": 13, "deletions": 57}, "files": [{"sha": "7c08dabf0bd89b409cb4556f277a746655aa1460", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/90fbe38f0064836fd5e169c520d3fd19953e5604/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fbe38f0064836fd5e169c520d3fd19953e5604/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=90fbe38f0064836fd5e169c520d3fd19953e5604", "patch": "@@ -25,7 +25,7 @@ pub struct Task {\n     gc: GarbageCollector,\n     storage: LocalStorage,\n     logger: StdErrLogger,\n-    unwinder: Option<Unwinder>,\n+    unwinder: Unwinder,\n     destroyed: bool\n }\n \n@@ -43,18 +43,7 @@ impl Task {\n             gc: GarbageCollector,\n             storage: LocalStorage(ptr::null(), None),\n             logger: StdErrLogger,\n-            unwinder: Some(Unwinder { unwinding: false }),\n-            destroyed: false\n-        }\n-    }\n-\n-    pub fn new_root_without_unwinding() -> Task {\n-        Task {\n-            heap: LocalHeap::new(),\n-            gc: GarbageCollector,\n-            storage: LocalStorage(ptr::null(), None),\n-            logger: StdErrLogger,\n-            unwinder: None,\n+            unwinder: Unwinder { unwinding: false },\n             destroyed: false\n         }\n     }\n@@ -65,18 +54,7 @@ impl Task {\n             gc: GarbageCollector,\n             storage: LocalStorage(ptr::null(), None),\n             logger: StdErrLogger,\n-            unwinder: Some(Unwinder { unwinding: false }),\n-            destroyed: false\n-        }\n-    }\n-\n-    pub fn new_child_without_unwinding(&mut self) -> Task {\n-        Task {\n-            heap: LocalHeap::new(),\n-            gc: GarbageCollector,\n-            storage: LocalStorage(ptr::null(), None),\n-            logger: StdErrLogger,\n-            unwinder: None,\n+            unwinder: Unwinder { unwinding: false },\n             destroyed: false\n         }\n     }\n@@ -88,16 +66,7 @@ impl Task {\n             assert!(ptr::ref_eq(task, self));\n         }\n \n-        match self.unwinder {\n-            Some(ref mut unwinder) => {\n-                // If there's an unwinder then set up the catch block\n-                unwinder.try(f);\n-            }\n-            None => {\n-                // Otherwise, just run the body\n-                f()\n-            }\n-        }\n+        self.unwinder.try(f);\n         self.destroy();\n     }\n "}, {"sha": "ecfe93560b4b9e8fbba003e4b8724b94b3f1332e", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90fbe38f0064836fd5e169c520d3fd19953e5604/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fbe38f0064836fd5e169c520d3fd19953e5604/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=90fbe38f0064836fd5e169c520d3fd19953e5604", "patch": "@@ -48,7 +48,7 @@ pub fn run_in_newsched_task(f: ~fn()) {\n     do run_in_bare_thread {\n         let mut sched = ~new_test_uv_sched();\n         let task = ~Coroutine::with_task(&mut sched.stack_pool,\n-                                         ~Task::new_root_without_unwinding(),\n+                                         ~Task::new_root(),\n                                          f.take());\n         sched.enqueue_task(task);\n         sched.run();\n@@ -134,7 +134,7 @@ pub fn spawntask(f: ~fn()) {\n \n     let mut task = None;\n     do Local::borrow::<Task>() |running_task| {\n-        task = Some(~running_task.new_child_without_unwinding());\n+        task = Some(~running_task.new_child());\n     }\n \n     let mut sched = Local::take::<Scheduler>();\n@@ -150,7 +150,7 @@ pub fn spawntask_immediately(f: ~fn()) {\n \n     let mut task = None;\n     do Local::borrow::<Task>() |running_task| {\n-        task = Some(~running_task.new_child_without_unwinding());\n+        task = Some(~running_task.new_child());\n     }\n \n     let mut sched = Local::take::<Scheduler>();\n@@ -168,7 +168,7 @@ pub fn spawntask_later(f: ~fn()) {\n \n     let mut task = None;\n     do Local::borrow::<Task>() |running_task| {\n-        task = Some(~running_task.new_child_without_unwinding());\n+        task = Some(~running_task.new_child());\n     }\n \n     let mut sched = Local::take::<Scheduler>();\n@@ -187,7 +187,7 @@ pub fn spawntask_random(f: ~fn()) {\n \n     let mut task = None;\n     do Local::borrow::<Task>() |running_task| {\n-        task = Some(~running_task.new_child_without_unwinding());\n+        task = Some(~running_task.new_child());\n     }\n \n     let mut sched = Local::take::<Scheduler>();\n@@ -251,7 +251,7 @@ pub fn spawntask_thread(f: ~fn()) -> Thread {\n \n     let mut task = None;\n     do Local::borrow::<Task>() |running_task| {\n-        task = Some(~running_task.new_child_without_unwinding());\n+        task = Some(~running_task.new_child());\n     }\n \n     let task = Cell(task.swap_unwrap());"}, {"sha": "77085d195678d11d238a2a7343333581a7ec5bc4", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90fbe38f0064836fd5e169c520d3fd19953e5604/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fbe38f0064836fd5e169c520d3fd19953e5604/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=90fbe38f0064836fd5e169c520d3fd19953e5604", "patch": "@@ -226,11 +226,7 @@ pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n                 gc::cleanup_stack_for_failure();\n \n                 let task = Local::unsafe_borrow::<Task>();\n-                let unwinder: &mut Option<Unwinder> = &mut (*task).unwinder;\n-                match *unwinder {\n-                    Some(ref mut unwinder) => unwinder.begin_unwind(),\n-                    None => abort!(\"failure without unwinder. aborting process\")\n-                }\n+                (*task).unwinder.begin_unwind();\n             }\n         }\n     }"}, {"sha": "faa505c199513a5305c80e496b109d792c469965", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/90fbe38f0064836fd5e169c520d3fd19953e5604/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fbe38f0064836fd5e169c520d3fd19953e5604/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=90fbe38f0064836fd5e169c520d3fd19953e5604", "patch": "@@ -515,16 +515,7 @@ pub fn failing() -> bool {\n         _ => {\n             let mut unwinding = false;\n             do Local::borrow::<Task> |local| {\n-                unwinding = match local.unwinder {\n-                    Some(unwinder) => {\n-                        unwinder.unwinding\n-                    }\n-                    None => {\n-                        // Because there is no unwinder we can't be unwinding.\n-                        // (The process will abort on failure)\n-                        false\n-                    }\n-                }\n+                unwinding = local.unwinder.unwinding\n             }\n             return unwinding;\n         }"}, {"sha": "a17a6777a98fb486cbf25dbbf1d0529f1e8b6408", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fbe38f0064836fd5e169c520d3fd19953e5604/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fbe38f0064836fd5e169c520d3fd19953e5604/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=90fbe38f0064836fd5e169c520d3fd19953e5604", "patch": "@@ -579,7 +579,7 @@ fn spawn_raw_newsched(_opts: TaskOpts, f: ~fn()) {\n \n     let mut task = None;\n     do Local::borrow::<Task>() |running_task| {\n-        task = Some(~running_task.new_child_without_unwinding());\n+        task = Some(~running_task.new_child());\n     }\n \n     let mut sched = Local::take::<Scheduler>();"}]}