{"sha": "8f024479d4e702647e7a772e06f77391abcfa571", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMDI0NDc5ZDRlNzAyNjQ3ZTdhNzcyZTA2Zjc3MzkxYWJjZmE1NzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-22T17:51:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-22T17:51:02Z"}, "message": "Auto merge of #51670 - estebank:issue-51634, r=oli-obk\n\nDon't suggest incorrect syntax\n\nFix #51634.", "tree": {"sha": "a1a59791cfa56f9a12223883c8c3d10eab1371b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1a59791cfa56f9a12223883c8c3d10eab1371b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f024479d4e702647e7a772e06f77391abcfa571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f024479d4e702647e7a772e06f77391abcfa571", "html_url": "https://github.com/rust-lang/rust/commit/8f024479d4e702647e7a772e06f77391abcfa571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f024479d4e702647e7a772e06f77391abcfa571/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dc2d745b9103dc4493b49277337ef4580425d7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc2d745b9103dc4493b49277337ef4580425d7c", "html_url": "https://github.com/rust-lang/rust/commit/4dc2d745b9103dc4493b49277337ef4580425d7c"}, {"sha": "cc0ab820912f24770f13985a6bc6474e547acf6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc0ab820912f24770f13985a6bc6474e547acf6e", "html_url": "https://github.com/rust-lang/rust/commit/cc0ab820912f24770f13985a6bc6474e547acf6e"}], "stats": {"total": 112, "additions": 100, "deletions": 12}, "files": [{"sha": "546ce34fe12ae864a7e8300565513e796ab8f323", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8f024479d4e702647e7a772e06f77391abcfa571/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f024479d4e702647e7a772e06f77391abcfa571/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=8f024479d4e702647e7a772e06f77391abcfa571", "patch": "@@ -25,7 +25,8 @@ use util::nodemap::FxHashSet;\n use syntax::ast;\n use syntax::util::lev_distance::find_best_match_for_name;\n use errors::DiagnosticBuilder;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, FileName};\n+\n \n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir;\n@@ -187,7 +188,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 out_of_scope_traits,\n                 lev_candidate,\n                 mode,\n-                ..\n             }) => {\n                 let tcx = self.tcx;\n \n@@ -264,13 +264,35 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                         let span = tcx.hir.span(node_id);\n                                         let snippet = tcx.sess.codemap().span_to_snippet(span)\n                                             .unwrap();\n-                                        err.span_suggestion(span,\n-                                                            &format!(\"you must specify a type for \\\n-                                                                      this binding, like `{}`\",\n-                                                                     concrete_type),\n-                                                            format!(\"{}: {}\",\n-                                                                    snippet,\n-                                                                    concrete_type));\n+                                        let filename = tcx.sess.codemap().span_to_filename(span);\n+\n+                                        let parent_node = self.tcx.hir.get(\n+                                            self.tcx.hir.get_parent_node(node_id),\n+                                        );\n+                                        let msg = format!(\n+                                            \"you must specify a type for this binding, like `{}`\",\n+                                            concrete_type,\n+                                        );\n+\n+                                        match (filename, parent_node) {\n+                                            (FileName::Real(_), hir_map::NodeLocal(hir::Local {\n+                                                source: hir::LocalSource::Normal,\n+                                                ty,\n+                                                ..\n+                                            })) => {\n+                                                err.span_suggestion(\n+                                                    // account for `let x: _ = 42;`\n+                                                    //                  ^^^^\n+                                                    span.to(ty.as_ref().map(|ty| ty.span)\n+                                                        .unwrap_or(span)),\n+                                                    &msg,\n+                                                    format!(\"{}: {}\", snippet, concrete_type),\n+                                                );\n+                                            }\n+                                            _ => {\n+                                                err.span_label(span, msg);\n+                                            }\n+                                        }\n                                     }\n                                 }\n                             }"}, {"sha": "01282f2ad24b2daf57af8ae346e724947a3e9a4b", "filename": "src/test/ui/suggestions/auxiliary/macro-in-other-crate.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f024479d4e702647e7a772e06f77391abcfa571/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmacro-in-other-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f024479d4e702647e7a772e06f77391abcfa571/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmacro-in-other-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmacro-in-other-crate.rs?ref=8f024479d4e702647e7a772e06f77391abcfa571", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! mac {\n+    ($ident:ident) => { let $ident = 42; }\n+}"}, {"sha": "2b6e830ec59622f871a177d317dea34d461aa2e9", "filename": "src/test/ui/suggestions/method-on-ambiguous-numeric-type.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8f024479d4e702647e7a772e06f77391abcfa571/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f024479d4e702647e7a772e06f77391abcfa571/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs?ref=8f024479d4e702647e7a772e06f77391abcfa571", "patch": "@@ -8,11 +8,35 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// aux-build:macro-in-other-crate.rs\n+\n+#[macro_use] extern crate macro_in_other_crate;\n+\n+macro_rules! local_mac {\n+    ($ident:ident) => { let $ident = 42; }\n+}\n+\n fn main() {\n     let x = 2.0.neg();\n     //~^ ERROR can't call method `neg` on ambiguous numeric type `{float}`\n+\n     let y = 2.0;\n     let x = y.neg();\n     //~^ ERROR can't call method `neg` on ambiguous numeric type `{float}`\n     println!(\"{:?}\", x);\n+\n+    for i in 0..100 {\n+        println!(\"{}\", i.pow(2));\n+        //~^ ERROR can't call method `pow` on ambiguous numeric type `{integer}`\n+    }\n+\n+    local_mac!(local_bar);\n+    local_bar.pow(2);\n+    //~^ ERROR can't call method `pow` on ambiguous numeric type `{integer}`\n+}\n+\n+fn qux() {\n+    mac!(bar);\n+    bar.pow(2);\n+    //~^ ERROR can't call method `pow` on ambiguous numeric type `{integer}`\n }"}, {"sha": "796520e0ec71ba3849cb37fba9c756d9ff5d9c29", "filename": "src/test/ui/suggestions/method-on-ambiguous-numeric-type.stderr", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8f024479d4e702647e7a772e06f77391abcfa571/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f024479d4e702647e7a772e06f77391abcfa571/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr?ref=8f024479d4e702647e7a772e06f77391abcfa571", "patch": "@@ -1,5 +1,5 @@\n error[E0689]: can't call method `neg` on ambiguous numeric type `{float}`\n-  --> $DIR/method-on-ambiguous-numeric-type.rs:12:17\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:20:17\n    |\n LL |     let x = 2.0.neg();\n    |                 ^^^\n@@ -9,7 +9,7 @@ LL |     let x = 2.0_f32.neg();\n    |             ^^^^^^^\n \n error[E0689]: can't call method `neg` on ambiguous numeric type `{float}`\n-  --> $DIR/method-on-ambiguous-numeric-type.rs:15:15\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:24:15\n    |\n LL |     let x = y.neg();\n    |               ^^^\n@@ -18,6 +18,34 @@ help: you must specify a type for this binding, like `f32`\n LL |     let y: f32 = 2.0;\n    |         ^^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:29:26\n+   |\n+LL |     for i in 0..100 {\n+   |         - you must specify a type for this binding, like `i32`\n+LL |         println!(\"{}\", i.pow(2));\n+   |                          ^^^\n+\n+error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:34:15\n+   |\n+LL |     local_bar.pow(2);\n+   |               ^^^\n+help: you must specify a type for this binding, like `i32`\n+   |\n+LL |     ($ident:ident) => { let $ident: i32 = 42; }\n+   |                             ^^^^^^^^^^^\n+\n+error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:40:9\n+   |\n+LL |     mac!(bar);\n+   |     ---------- you must specify a type for this binding, like `i32`\n+LL |     bar.pow(2);\n+   |         ^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0689`."}]}