{"sha": "1347d04bb086f6d76dd7287762d34ef4c57dbc00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNDdkMDRiYjA4NmY2ZDc2ZGQ3Mjg3NzYyZDM0ZWY0YzU3ZGJjMDA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-05T00:52:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T03:39:56Z"}, "message": "rt: Properly block tasks while waiting for port detach", "tree": {"sha": "098bfb52a7ed70f543b27d5fe2d72ea89c96b083", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/098bfb52a7ed70f543b27d5fe2d72ea89c96b083"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1347d04bb086f6d76dd7287762d34ef4c57dbc00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1347d04bb086f6d76dd7287762d34ef4c57dbc00", "html_url": "https://github.com/rust-lang/rust/commit/1347d04bb086f6d76dd7287762d34ef4c57dbc00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1347d04bb086f6d76dd7287762d34ef4c57dbc00/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c4a2320eb9620dbc68a264ce64ee1f233dd977d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4a2320eb9620dbc68a264ce64ee1f233dd977d", "html_url": "https://github.com/rust-lang/rust/commit/4c4a2320eb9620dbc68a264ce64ee1f233dd977d"}], "stats": {"total": 79, "additions": 67, "deletions": 12}, "files": [{"sha": "eeed0497c5ebf78acce5a667db041b505779340e", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1347d04bb086f6d76dd7287762d34ef4c57dbc00/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1347d04bb086f6d76dd7287762d34ef4c57dbc00/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=1347d04bb086f6d76dd7287762d34ef4c57dbc00", "patch": "@@ -42,7 +42,9 @@ native mod rustrt {\n \n     fn new_port(unit_sz: ctypes::size_t) -> *rust_port;\n     fn del_port(po: *rust_port);\n-    fn rust_port_detach(po: *rust_port);\n+    fn rust_port_begin_detach(po: *rust_port,\n+                              yield: *ctypes::uintptr_t);\n+    fn rust_port_end_detach(po: *rust_port);\n     fn get_port_id(po: *rust_port) -> port_id;\n     fn rust_port_size(po: *rust_port) -> ctypes::size_t;\n     fn port_recv(dptr: *uint, po: *rust_port,\n@@ -82,7 +84,17 @@ enum chan<T: send> {\n resource port_ptr<T: send>(po: *rust_port) {\n     // Once the port is detached it's guaranteed not to receive further\n     // messages\n-    rustrt::rust_port_detach(po);\n+    let yield = 0u;\n+    let yieldp = ptr::addr_of(yield);\n+    rustrt::rust_port_begin_detach(po, yieldp);\n+    if yield != 0u {\n+        // Need to wait for the port to be detached\n+        // FIXME: If this fails then we're going to leave our port\n+        // in a bogus state.\n+        task::yield();\n+    }\n+    rustrt::rust_port_end_detach(po);\n+\n     // Drain the port so that all the still-enqueued items get dropped\n     while rustrt::rust_port_size(po) > 0u {\n         // FIXME: For some reason if we don't assign to something here"}, {"sha": "14b18a9925208bcafe05da397226132798847242", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1347d04bb086f6d76dd7287762d34ef4c57dbc00/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1347d04bb086f6d76dd7287762d34ef4c57dbc00/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=1347d04bb086f6d76dd7287762d34ef4c57dbc00", "patch": "@@ -482,18 +482,23 @@ new_port(size_t unit_sz) {\n }\n \n extern \"C\" CDECL void\n-rust_port_detach(rust_port *port) {\n+rust_port_begin_detach(rust_port *port, uintptr_t *yield) {\n     rust_task *task = rust_task_thread::get_task();\n     LOG(task, comm, \"rust_port_detach(0x%\" PRIxPTR \")\", (uintptr_t) port);\n-    port->detach();\n+    port->begin_detach(yield);\n+}\n+\n+extern \"C\" CDECL void\n+rust_port_end_detach(rust_port *port) {\n+    port->end_detach();\n }\n \n extern \"C\" CDECL void\n del_port(rust_port *port) {\n     rust_task *task = rust_task_thread::get_task();\n     LOG(task, comm, \"del_port(0x%\" PRIxPTR \")\", (uintptr_t) port);\n-    A(task->thread, port->get_ref_count() == 1, \"Expected port ref_count == 1\");\n-    port->deref();\n+    A(task->thread, port->get_ref_count() == 0, \"Expected port ref_count == 0\");\n+    delete port;\n }\n \n extern \"C\" CDECL size_t"}, {"sha": "3aaa107916d3addd7481ef6ec1e6c4aff0975cc4", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1347d04bb086f6d76dd7287762d34ef4c57dbc00/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1347d04bb086f6d76dd7287762d34ef4c57dbc00/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=1347d04bb086f6d76dd7287762d34ef4c57dbc00", "patch": "@@ -20,13 +20,40 @@ rust_port::~rust_port() {\n     task->deref();\n }\n \n-void rust_port::detach() {\n+void rust_port::delete_this() {\n+    scoped_lock with(detach_lock);\n+\n+    if (task->blocked_on(&detach_cond)) {\n+        // The port owner is waiting for the port to be detached\n+        task->wakeup(&detach_cond);\n+    }\n+}\n+\n+void rust_port::begin_detach(uintptr_t *yield) {\n+    *yield = false;\n+\n     task->release_port(id);\n-    // FIXME: Busy waiting until we're the only ref\n+\n+    deref();\n+\n+    scoped_lock with(detach_lock);\n+    if (get_ref_count() != 0) {\n+        task->block(&detach_cond, \"waiting for port detach\");\n+        *yield = true;\n+    }\n+}\n+\n+void rust_port::end_detach() {\n+    // FIXME: For some reason, on rare occasion we can get here without\n+    // actually having the ref count go to 0. Possibly related to #1923\n     bool done = false;\n     while (!done) {\n-        done = get_ref_count() == 1;\n+        done = get_ref_count() == 0;\n     }\n+\n+    // Just take the lock to make sure that the thread that signaled\n+    // the detach_cond isn't still holding it\n+    scoped_lock with(detach_lock);\n }\n \n void rust_port::send(void *sptr) {"}, {"sha": "38e8f2400234baf72affc9264b167e8150f08a16", "filename": "src/rt/rust_port.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1347d04bb086f6d76dd7287762d34ef4c57dbc00/src%2Frt%2Frust_port.h", "raw_url": "https://github.com/rust-lang/rust/raw/1347d04bb086f6d76dd7287762d34ef4c57dbc00/src%2Frt%2Frust_port.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.h?ref=1347d04bb086f6d76dd7287762d34ef4c57dbc00", "patch": "@@ -3,6 +3,8 @@\n \n #include \"rust_internal.h\"\n \n+class port_detach_cond : public rust_cond { };\n+\n class rust_port : public kernel_owned<rust_port>, public rust_cond {\n public:\n     RUST_ATOMIC_REFCOUNT();\n@@ -16,15 +18,23 @@ class rust_port : public kernel_owned<rust_port>, public rust_cond {\n \n     lock_and_signal lock;\n \n+private:\n+    // Protects blocking and signaling on detach_cond\n+    lock_and_signal detach_lock;\n+    port_detach_cond detach_cond;\n+\n+public:\n     rust_port(rust_task *task, size_t unit_sz);\n     ~rust_port();\n-    void delete_this() { delete this; }\n+    void delete_this();\n \n     void log_state();\n     void send(void *sptr);\n     void receive(void *dptr, uintptr_t *yield);\n     size_t size();\n-    void detach();\n+\n+    void begin_detach(uintptr_t *yield);\n+    void end_detach();\n };\n \n //"}, {"sha": "8a170ede2339f83eb738670b200ae9f8f90c2cc3", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1347d04bb086f6d76dd7287762d34ef4c57dbc00/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/1347d04bb086f6d76dd7287762d34ef4c57dbc00/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=1347d04bb086f6d76dd7287762d34ef4c57dbc00", "patch": "@@ -34,7 +34,8 @@ rust_str_push\n rust_list_files\n rust_log_console_on\n rust_log_console_off\n-rust_port_detach\n+rust_port_begin_detach\n+rust_port_end_detach\n rust_port_size\n rust_process_wait\n rust_ptr_eq"}]}