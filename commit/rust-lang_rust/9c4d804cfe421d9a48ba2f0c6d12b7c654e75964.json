{"sha": "9c4d804cfe421d9a48ba2f0c6d12b7c654e75964", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNGQ4MDRjZmU0MjFkOWE0OGJhMmYwYzZkMTJiN2M2NTRlNzU5NjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-20T20:24:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-20T20:54:25Z"}, "message": "libsyntax: Never use `::<>` in the type grammar", "tree": {"sha": "f8450f0cf9fe18b082df59105e5b25c2724410c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8450f0cf9fe18b082df59105e5b25c2724410c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964", "html_url": "https://github.com/rust-lang/rust/commit/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0847d52a8677a39525b7cf7a09571851b6deb8b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0847d52a8677a39525b7cf7a09571851b6deb8b9", "html_url": "https://github.com/rust-lang/rust/commit/0847d52a8677a39525b7cf7a09571851b6deb8b9"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "b0e8a47605beb7c55f4269bc188acbb889e3bc05", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=9c4d804cfe421d9a48ba2f0c6d12b7c654e75964", "patch": "@@ -986,7 +986,7 @@ pub trait WriterUtil {\n \n impl<T:Writer> WriterUtil for T {\n     fn write_char(&self, ch: char) {\n-        if ch as uint < 128u {\n+        if (ch as uint) < 128u {\n             self.write(&[ch as u8]);\n         } else {\n             self.write_str(str::from_char(ch));"}, {"sha": "d471eda74c66b88ac2735deb64a08ea0e66a35b3", "filename": "src/libcore/num/strconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibcore%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibcore%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fstrconv.rs?ref=9c4d804cfe421d9a48ba2f0c6d12b7c654e75964", "patch": "@@ -165,7 +165,7 @@ pub pure fn to_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+NumStrConv+Copy+\n                                   Div<T,T>+Neg<T>+Modulo<T,T>+Mul<T,T>>(\n         num: &T, radix: uint, negative_zero: bool,\n         sign: SignFormat, digits: SignificantDigits) -> (~[u8], bool) {\n-    if radix as int <  2 {\n+    if (radix as int) < 2 {\n         fail!(fmt!(\"to_str_bytes_common: radix %? to low, \\\n                    must lie in the range [2, 36]\", radix));\n     } else if radix as int > 36 {\n@@ -455,10 +455,10 @@ pub pure fn from_str_bytes_common<T:NumCast+Zero+One+Ord+Copy+Div<T,T>+\n         _ if special && radix >= DIGIT_I_RADIX // first digit of 'inf'\n           => fail!(fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n                         special values 'inf' and 'NaN'\", radix)),\n-        _ if radix as int < 2\n+        _ if (radix as int) < 2\n           => fail!(fmt!(\"from_str_bytes_common: radix %? to low, \\\n                         must lie in the range [2, 36]\", radix)),\n-        _ if radix as int > 36\n+        _ if (radix as int) > 36\n           => fail!(fmt!(\"from_str_bytes_common: radix %? to high, \\\n                         must lie in the range [2, 36]\", radix)),\n         _ => ()"}, {"sha": "73c3ea91604b6bec1daa8e579ea380e41b971abf", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=9c4d804cfe421d9a48ba2f0c6d12b7c654e75964", "patch": "@@ -242,7 +242,7 @@ pub impl ReprVisitor {\n         let (sz, al) = unsafe { ((*inner).size, (*inner).align) };\n         self.writer.write_char('[');\n         let mut first = true;\n-        while p as uint < end as uint {\n+        while (p as uint) < (end as uint) {\n             if first {\n                 first = false;\n             } else {"}, {"sha": "45766e97260b379e029c29ddde55fcc79b30d809", "filename": "src/libcore/unstable/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibcore%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibcore%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fextfmt.rs?ref=9c4d804cfe421d9a48ba2f0c6d12b7c654e75964", "patch": "@@ -536,7 +536,7 @@ pub mod rt {\n         // displayed\n         let mut unpadded = match cv.precision {\n           CountImplied => s.to_owned(),\n-          CountIs(max) => if max as uint < str::char_len(s) {\n+          CountIs(max) => if (max as uint) < str::char_len(s) {\n             str::substr(s, 0, max as uint)\n           } else {\n             s.to_owned()"}, {"sha": "c72b3675c4cb50160fde61278b9cb98b4225e576", "filename": "src/libstd/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=9c4d804cfe421d9a48ba2f0c6d12b7c654e75964", "patch": "@@ -819,8 +819,8 @@ priv fn do_strftime(format: &str, tm: &Tm) -> ~str {\n           'M' => fmt!(\"%02d\", tm.tm_min as int),\n           'm' => fmt!(\"%02d\", tm.tm_mon as int + 1),\n           'n' => ~\"\\n\",\n-          'P' => if tm.tm_hour as int < 12 { ~\"am\" } else { ~\"pm\" },\n-          'p' => if tm.tm_hour as int < 12 { ~\"AM\" } else { ~\"PM\" },\n+          'P' => if (tm.tm_hour as int) < 12 { ~\"am\" } else { ~\"pm\" },\n+          'p' => if (tm.tm_hour as int) < 12 { ~\"AM\" } else { ~\"PM\" },\n           'R' => {\n             fmt!(\"%s:%s\",\n                 parse_type('H', tm),"}, {"sha": "de861075a5b8045de20f6245f43bc9f673698c6a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9c4d804cfe421d9a48ba2f0c6d12b7c654e75964", "patch": "@@ -581,7 +581,9 @@ pub impl Parser {\n         }\n     }\n \n-    fn parse_ty(&self, colons_before_params: bool) -> @Ty {\n+    // Useless second parameter for compatibility with quasiquote macros.\n+    // Bleh!\n+    fn parse_ty(&self, _: bool) -> @Ty {\n         maybe_whole!(self, nt_ty);\n \n         let lo = self.span.lo;\n@@ -661,7 +663,7 @@ pub impl Parser {\n             result\n         } else if *self.token == token::MOD_SEP\n             || is_ident_or_path(&*self.token) {\n-            let path = self.parse_path_with_tps(colons_before_params);\n+            let path = self.parse_path_with_tps(false);\n             ty_path(path, self.get_id())\n         } else {\n             self.fatal(~\"expected type\");"}, {"sha": "72b734ed73dbb2db99734170bd92bd6cc69039a6", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4d804cfe421d9a48ba2f0c6d12b7c654e75964/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9c4d804cfe421d9a48ba2f0c6d12b7c654e75964", "patch": "@@ -370,10 +370,6 @@ pub fn print_opt_lifetime(s: @ps, lifetime: Option<@ast::Lifetime>) {\n }\n \n pub fn print_type(s: @ps, &&ty: @ast::Ty) {\n-    print_type_ex(s, ty, false);\n-}\n-\n-pub fn print_type_ex(s: @ps, &&ty: @ast::Ty, print_colons: bool) {\n     maybe_print_comment(s, ty.span.lo);\n     ibox(s, 0u);\n     match ty.node {\n@@ -415,7 +411,7 @@ pub fn print_type_ex(s: @ps, &&ty: @ast::Ty, print_colons: bool) {\n                       f.purity, f.onceness, &f.decl, None,\n                       None, None);\n       }\n-      ast::ty_path(path, _) => print_path(s, path, print_colons),\n+      ast::ty_path(path, _) => print_path(s, path, false),\n       ast::ty_fixed_length_vec(ref mt, v) => {\n         word(s.s, ~\"[\");\n         match mt.mutbl {\n@@ -1211,7 +1207,7 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n         print_expr(s, expr);\n         space(s.s);\n         word_space(s, ~\"as\");\n-        print_type_ex(s, ty, true);\n+        print_type(s, ty);\n       }\n       ast::expr_if(test, ref blk, elseopt) => {\n         print_if(s, test, blk, elseopt, false);"}]}