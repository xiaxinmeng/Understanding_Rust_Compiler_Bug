{"sha": "ca554efaf78962f9dc9599663b29626269c69c8c", "node_id": "C_kwDOAAsO6NoAKGNhNTU0ZWZhZjc4OTYyZjlkYzk1OTk2NjNiMjk2MjYyNjljNjljOGM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-08T02:40:59Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-08T18:50:08Z"}, "message": "Improve spans of non-WF implied bound types", "tree": {"sha": "3958b41c6b13ed4740a484744b29b24a9b05d358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3958b41c6b13ed4740a484744b29b24a9b05d358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca554efaf78962f9dc9599663b29626269c69c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca554efaf78962f9dc9599663b29626269c69c8c", "html_url": "https://github.com/rust-lang/rust/commit/ca554efaf78962f9dc9599663b29626269c69c8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca554efaf78962f9dc9599663b29626269c69c8c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa51fc01ca3d654d08d627b1d1482d1b77e5ed8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa51fc01ca3d654d08d627b1d1482d1b77e5ed8b", "html_url": "https://github.com/rust-lang/rust/commit/fa51fc01ca3d654d08d627b1d1482d1b77e5ed8b"}], "stats": {"total": 287, "additions": 134, "deletions": 153}, "files": [{"sha": "b663f90cab71247a23bd67d5aba4f857dd09d478", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 21, "deletions": 37, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1489,54 +1489,38 @@ fn check_fn_or_method<'tcx>(\n     def_id: LocalDefId,\n ) {\n     let tcx = wfcx.tcx();\n-    let sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), sig);\n+    let mut sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), sig);\n \n     // Normalize the input and output types one at a time, using a different\n     // `WellFormedLoc` for each. We cannot call `normalize_associated_types`\n     // on the entire `FnSig`, since this would use the same `WellFormedLoc`\n     // for each type, preventing the HIR wf check from generating\n     // a nice error message.\n-    let ty::FnSig { mut inputs_and_output, c_variadic, unsafety, abi } = sig;\n-    inputs_and_output = tcx.mk_type_list(inputs_and_output.iter().enumerate().map(|(i, ty)| {\n-        wfcx.normalize(\n-            span,\n-            Some(WellFormedLoc::Param {\n-                function: def_id,\n-                // Note that the `param_idx` of the output type is\n-                // one greater than the index of the last input type.\n-                param_idx: i.try_into().unwrap(),\n-            }),\n-            ty,\n-        )\n-    }));\n-    // Manually call `normalize_associated_types_in` on the other types\n-    // in `FnSig`. This ensures that if the types of these fields\n-    // ever change to include projections, we will start normalizing\n-    // them automatically.\n-    let sig = ty::FnSig {\n-        inputs_and_output,\n-        c_variadic: wfcx.normalize(span, None, c_variadic),\n-        unsafety: wfcx.normalize(span, None, unsafety),\n-        abi: wfcx.normalize(span, None, abi),\n-    };\n+    let arg_span =\n+        |idx| hir_decl.inputs.get(idx).map_or(hir_decl.output.span(), |arg: &hir::Ty<'_>| arg.span);\n+\n+    sig.inputs_and_output =\n+        tcx.mk_type_list(sig.inputs_and_output.iter().enumerate().map(|(idx, ty)| {\n+            wfcx.normalize(\n+                arg_span(idx),\n+                Some(WellFormedLoc::Param {\n+                    function: def_id,\n+                    // Note that the `param_idx` of the output type is\n+                    // one greater than the index of the last input type.\n+                    param_idx: idx.try_into().unwrap(),\n+                }),\n+                ty,\n+            )\n+        }));\n \n-    for (i, (&input_ty, ty)) in iter::zip(sig.inputs(), hir_decl.inputs).enumerate() {\n+    for (idx, ty) in sig.inputs_and_output.iter().enumerate() {\n         wfcx.register_wf_obligation(\n-            ty.span,\n-            Some(WellFormedLoc::Param { function: def_id, param_idx: i.try_into().unwrap() }),\n-            input_ty.into(),\n+            arg_span(idx),\n+            Some(WellFormedLoc::Param { function: def_id, param_idx: idx.try_into().unwrap() }),\n+            ty.into(),\n         );\n     }\n \n-    wfcx.register_wf_obligation(\n-        hir_decl.output.span(),\n-        Some(WellFormedLoc::Param {\n-            function: def_id,\n-            param_idx: sig.inputs().len().try_into().unwrap(),\n-        }),\n-        sig.output().into(),\n-    );\n-\n     check_where_clauses(wfcx, span, def_id);\n \n     check_return_position_impl_trait_in_trait_bounds("}, {"sha": "7f794a926c060635d099557eda8c02667e639173", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -803,7 +803,7 @@ rustc_queries! {\n     ///\n     /// Note that we've liberated the late bound regions of function signatures, so\n     /// this can not be used to check whether these types are well formed.\n-    query assumed_wf_types(key: DefId) -> &'tcx ty::List<Ty<'tcx>> {\n+    query assumed_wf_types(key: DefId) -> &'tcx [(Ty<'tcx>, Span)] {\n         desc { |tcx| \"computing the implied bounds of `{}`\", tcx.def_path_str(key) }\n     }\n "}, {"sha": "72ed3aa499daf51ef124377ceea3c9af19bbb082", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -191,8 +191,8 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         let assumed_wf_types = tcx.assumed_wf_types(def_id);\n         let mut implied_bounds = FxIndexSet::default();\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        let cause = ObligationCause::misc(span, hir_id);\n-        for ty in assumed_wf_types {\n+        for &(ty, ty_span) in assumed_wf_types {\n+            let span = if ty_span.is_dummy() { span } else { ty_span };\n             // FIXME(@lcnr): rustc currently does not check wf for types\n             // pre-normalization, meaning that implied bounds are sometimes\n             // incorrect. See #100910 for more details.\n@@ -205,7 +205,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n             // sound and then uncomment this line again.\n \n             // implied_bounds.insert(ty);\n-            let normalized = self.normalize(&cause, param_env, ty);\n+            let normalized = self.normalize(&ObligationCause::misc(span, hir_id), param_env, ty);\n             implied_bounds.insert(normalized);\n         }\n         implied_bounds"}, {"sha": "e3f34373ccc9469c1ed3300bf1093ab714dab870", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 57, "deletions": 10, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,33 +1,80 @@\n use crate::rustc_middle::ty::DefIdTree;\n-use rustc_hir::{def::DefKind, def_id::DefId};\n+use rustc_hir::{self as hir, def::DefKind, def_id::DefId};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_span::{Span, DUMMY_SP};\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { assumed_wf_types, ..*providers };\n }\n \n-fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {\n+fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &[(Ty<'_>, Span)] {\n     match tcx.def_kind(def_id) {\n         DefKind::Fn => {\n             let sig = tcx.fn_sig(def_id);\n             let liberated_sig = tcx.liberate_late_bound_regions(def_id, sig);\n-            liberated_sig.inputs_and_output\n+            if let Some(node) = tcx.hir().get_if_local(def_id)\n+                && let Some(decl) = node.fn_decl()\n+            {\n+                assert_eq!(decl.inputs.len(), liberated_sig.inputs().len());\n+                tcx.arena.alloc_from_iter(std::iter::zip(\n+                    liberated_sig.inputs_and_output,\n+                    decl.inputs.iter().map(|ty| ty.span).chain([decl.output.span()]),\n+                ))\n+            } else {\n+                tcx.arena.alloc_from_iter(\n+                    liberated_sig.inputs_and_output.iter().map(|ty| (ty, DUMMY_SP)),\n+                )\n+            }\n         }\n         DefKind::AssocFn => {\n             let sig = tcx.fn_sig(def_id);\n             let liberated_sig = tcx.liberate_late_bound_regions(def_id, sig);\n-            let mut assumed_wf_types: Vec<_> =\n-                tcx.assumed_wf_types(tcx.parent(def_id)).as_slice().into();\n-            assumed_wf_types.extend(liberated_sig.inputs_and_output);\n-            tcx.intern_type_list(&assumed_wf_types)\n+            let assumed_wf_types = tcx.assumed_wf_types(tcx.parent(def_id));\n+            if let Some(node) = tcx.hir().get_if_local(def_id)\n+                && let Some(decl) = node.fn_decl()\n+            {\n+                assert_eq!(decl.inputs.len(), liberated_sig.inputs().len());\n+                tcx.arena.alloc_from_iter(assumed_wf_types.iter().copied().chain(std::iter::zip(\n+                    liberated_sig.inputs_and_output,\n+                    decl.inputs.iter().map(|ty| ty.span).chain([decl.output.span()]),\n+                )))\n+            } else {\n+                tcx.arena.alloc_from_iter(assumed_wf_types.iter().copied().chain(\n+                    liberated_sig.inputs_and_output.iter().map(|ty| (ty, DUMMY_SP)),\n+                ))\n+            }\n         }\n         DefKind::Impl => match tcx.impl_trait_ref(def_id) {\n             Some(trait_ref) => {\n                 let types: Vec<_> = trait_ref.substs.types().collect();\n-                tcx.intern_type_list(&types)\n+                let self_span = if let Some(hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Impl(impl_),\n+                    ..\n+                })) = tcx.hir().get_if_local(def_id)\n+                {\n+                    impl_.self_ty.span\n+                } else {\n+                    DUMMY_SP\n+                };\n+                tcx.arena.alloc_from_iter(std::iter::zip(\n+                    types,\n+                    // FIXME: reliable way of getting trait ref substs...\n+                    [self_span].into_iter().chain(std::iter::repeat(DUMMY_SP)),\n+                ))\n             }\n             // Only the impl self type\n-            None => tcx.intern_type_list(&[tcx.type_of(def_id)]),\n+            None => {\n+                let span = if let Some(hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Impl(impl_),\n+                    ..\n+                })) = tcx.hir().get_if_local(def_id)\n+                {\n+                    impl_.self_ty.span\n+                } else {\n+                    DUMMY_SP\n+                };\n+                tcx.arena.alloc_from_iter([(tcx.type_of(def_id), span)])\n+            }\n         },\n         DefKind::AssocConst | DefKind::AssocTy => tcx.assumed_wf_types(tcx.parent(def_id)),\n         DefKind::Mod\n@@ -56,6 +103,6 @@ fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {\n         | DefKind::LifetimeParam\n         | DefKind::GlobalAsm\n         | DefKind::Closure\n-        | DefKind::Generator => ty::List::empty(),\n+        | DefKind::Generator => &[],\n     }\n }"}, {"sha": "6552c8be7808926e1b4acb7cd25536ed2c708795", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n-  --> $DIR/associated-types-for-unimpl-trait.rs:10:5\n+  --> $DIR/associated-types-for-unimpl-trait.rs:10:40\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |"}, {"sha": "b2ee1b5e6d04527fb56eb6eddb0b65ce4e8d8381", "filename": "src/test/ui/associated-types/associated-types-no-suitable-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Get` is not satisfied\n-  --> $DIR/associated-types-no-suitable-bound.rs:11:5\n+  --> $DIR/associated-types-no-suitable-bound.rs:11:21\n    |\n LL |     fn uhoh<T>(foo: <T as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `T`\n+   |                     ^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "2e40dbd065d3ef5579d5495b95590646d5e086a0", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n-  --> $DIR/associated-types-no-suitable-supertrait-2.rs:17:5\n+  --> $DIR/associated-types-no-suitable-supertrait-2.rs:17:40\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |"}, {"sha": "bd3ee2abd2c7604da8473500748cdb10eea74504", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,14 +1,14 @@\n error[E0277]: the trait bound `(T, U): Get` is not satisfied\n-  --> $DIR/associated-types-no-suitable-supertrait.rs:22:5\n+  --> $DIR/associated-types-no-suitable-supertrait.rs:22:40\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `(T, U)`\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `(T, U)`\n \n error[E0277]: the trait bound `Self: Get` is not satisfied\n-  --> $DIR/associated-types-no-suitable-supertrait.rs:17:5\n+  --> $DIR/associated-types-no-suitable-supertrait.rs:17:40\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |"}, {"sha": "2e67c21940fc712c05aebfd3170128e287c54434", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n-  --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:10:5\n+  --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:10:40\n    |\n LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n help: consider further restricting `Self`\n    |"}, {"sha": "551f13ee178da679e098d86985dfc43ed7f28534", "filename": "src/test/ui/associated-types/issue-59324.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -15,9 +15,9 @@ pub trait ThriftService<Bug: NotFoo>:\n {\n     fn get_service(\n     //~^ ERROR the trait bound `Bug: Foo` is not satisfied\n-    //~| ERROR the trait bound `Bug: Foo` is not satisfied\n         &self,\n     ) -> Self::AssocType;\n+    //~^ ERROR the trait bound `Bug: Foo` is not satisfied\n }\n \n fn with_factory<H>(factory: dyn ThriftService<()>) {}"}, {"sha": "a84b599b52b68d2c28913dfdb70c5d08f8714bf6", "filename": "src/test/ui/associated-types/issue-59324.stderr", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -20,7 +20,7 @@ LL | |\n LL | |\n LL | |     Service<AssocType = <Bug as Foo>::OnlyFoo>\n ...  |\n-LL | |     ) -> Self::AssocType;\n+LL | |\n LL | | }\n    | |_^ the trait `Foo` is not implemented for `Bug`\n    |\n@@ -34,7 +34,6 @@ error[E0277]: the trait bound `Bug: Foo` is not satisfied\n    |\n LL | /     fn get_service(\n LL | |\n-LL | |\n LL | |         &self,\n LL | |     ) -> Self::AssocType;\n    | |_________________________^ the trait `Foo` is not implemented for `Bug`\n@@ -45,20 +44,16 @@ LL | pub trait ThriftService<Bug: NotFoo + Foo>:\n    |                                     +++++\n \n error[E0277]: the trait bound `(): Foo` is not satisfied\n-  --> $DIR/issue-59324.rs:23:1\n+  --> $DIR/issue-59324.rs:23:29\n    |\n LL | fn with_factory<H>(factory: dyn ThriftService<()>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n+   |                             ^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n \n error[E0277]: the trait bound `Bug: Foo` is not satisfied\n-  --> $DIR/issue-59324.rs:16:5\n+  --> $DIR/issue-59324.rs:19:10\n    |\n-LL | /     fn get_service(\n-LL | |\n-LL | |\n-LL | |         &self,\n-LL | |     ) -> Self::AssocType;\n-   | |_________________________^ the trait `Foo` is not implemented for `Bug`\n+LL |     ) -> Self::AssocType;\n+   |          ^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `Bug`\n    |\n help: consider further restricting this bound\n    |"}, {"sha": "bd18d46223e69162ae8cdd869df402f0d84b35d7", "filename": "src/test/ui/issues/issue-18611.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `isize: HasState` is not satisfied\n-  --> $DIR/issue-18611.rs:1:1\n+  --> $DIR/issue-18611.rs:1:18\n    |\n-LL | / fn add_state(op: <isize as HasState>::State) {\n-LL | |\n-LL | | }\n-   | |_^ the trait `HasState` is not implemented for `isize`\n+LL | fn add_state(op: <isize as HasState>::State) {\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasState` is not implemented for `isize`\n \n error: aborting due to previous error\n "}, {"sha": "c3af1f6786b34a01a1b003b1fd8609cd33af3385", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,14 +1,8 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+  --> $DIR/issue-20831-debruijn.rs:28:33\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |         //\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n   --> $DIR/issue-20831-debruijn.rs:28:58\n@@ -21,16 +15,10 @@ note: ...but the lifetime must also be valid for the lifetime `'a` as defined he\n LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n    |      ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+  --> $DIR/issue-20831-debruijn.rs:28:33\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |         //\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `<MyStruct<'a> as Publisher<'_>>`\n               found `<MyStruct<'_> as Publisher<'_>>`\n "}, {"sha": "42bdb423f8f5c17796b1418adc8ce1013e554840", "filename": "src/test/ui/issues/issue-35570.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -7,7 +7,6 @@ trait Trait2<'a> {\n \n fn _ice(param: Box<dyn for <'a> Trait1<<() as Trait2<'a>>::Ty>>) {\n     //~^ ERROR the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n-    //~| ERROR the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n     let _e: (usize, usize) = unsafe{mem::transmute(param)};\n }\n "}, {"sha": "b6c244241edd9dc6b4810fe64464fa28b049c846", "filename": "src/test/ui/issues/issue-35570.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,19 +1,9 @@\n error[E0277]: the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n-  --> $DIR/issue-35570.rs:8:1\n-   |\n-LL | / fn _ice(param: Box<dyn for <'a> Trait1<<() as Trait2<'a>>::Ty>>) {\n-LL | |\n-LL | |\n-LL | |     let _e: (usize, usize) = unsafe{mem::transmute(param)};\n-LL | | }\n-   | |_^ the trait `for<'a> Trait2<'a>` is not implemented for `()`\n-\n-error[E0277]: the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n-  --> $DIR/issue-35570.rs:8:40\n+  --> $DIR/issue-35570.rs:8:16\n    |\n LL | fn _ice(param: Box<dyn for <'a> Trait1<<() as Trait2<'a>>::Ty>>) {\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Trait2<'a>` is not implemented for `()`\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Trait2<'a>` is not implemented for `()`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "0fc3670d6c52343f4fee8e87e57d6e6fb46b622a", "filename": "src/test/ui/nll/normalization-bounds-error.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,8 +1,8 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'d` due to conflicting requirements\n-  --> $DIR/normalization-bounds-error.rs:12:1\n+  --> $DIR/normalization-bounds-error.rs:12:31\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'d` as defined here...\n   --> $DIR/normalization-bounds-error.rs:12:14\n@@ -15,10 +15,10 @@ note: ...but the lifetime must also be valid for the lifetime `'a` as defined he\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    |                  ^^\n note: ...so that the types are compatible\n-  --> $DIR/normalization-bounds-error.rs:12:1\n+  --> $DIR/normalization-bounds-error.rs:12:31\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `Visitor<'d>`\n               found `Visitor<'_>`\n "}, {"sha": "429548f119b14d91400ce67e7c596422123f7f59", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-hr-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.rs?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -20,7 +20,6 @@ trait Trait2<'a, 'b> {\n // do not infer that.\n fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n     //~^ ERROR the trait bound `for<'z> T: Trait2<'y, 'z>` is not satisfied\n-    //~| ERROR the trait bound `for<'z> T: Trait2<'y, 'z>` is not satisfied\n {\n }\n "}, {"sha": "43b7b9c16b1cb96f62ce44fe6524db2b2645da1d", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-hr-1.stderr", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,29 +1,14 @@\n error[E0277]: the trait bound `for<'z> T: Trait2<'y, 'z>` is not satisfied\n-  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:1\n-   |\n-LL | / fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n-LL | |\n-LL | |\n-LL | | {\n-LL | | }\n-   | |_^ the trait `for<'z> Trait2<'y, 'z>` is not implemented for `T`\n-   |\n-help: consider restricting type parameter `T`\n-   |\n-LL | fn callee<'x, 'y, T: for<'z> Trait2<'y, 'z>>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n-   |                    ++++++++++++++++++++++++\n-\n-error[E0277]: the trait bound `for<'z> T: Trait2<'y, 'z>` is not satisfied\n-  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:49\n+  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:25\n    |\n LL | fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n-   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'z> Trait2<'y, 'z>` is not implemented for `T`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'z> Trait2<'y, 'z>` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |\n LL | fn callee<'x, 'y, T: for<'z> Trait2<'y, 'z>>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n    |                    ++++++++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d02c108ae6bc24824c8a42b56a6018daf6aaf9e4", "filename": "src/test/ui/specialization/min_specialization/issue-79224.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.rs?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -15,8 +15,10 @@ impl ToString for Cow<'_, str> {\n     }\n }\n \n-impl<B: ?Sized> Display for Cow<'_, B> { //~ ERROR: the trait bound `B: Clone` is not satisfied [E0277]\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result { //~ ERROR: the trait bound `B: Clone` is not satisfied [E0277]\n+impl<B: ?Sized> Display for Cow<'_, B> {\n+    //~^ ERROR: the trait bound `B: Clone` is not satisfied [E0277]\n+    //~| ERROR: the trait bound `B: Clone` is not satisfied [E0277]\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"foo\")\n     }\n }"}, {"sha": "d4d7daf41117bca433897a8ceabee77064b7edd0", "filename": "src/test/ui/specialization/min_specialization/issue-79224.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,12 +1,8 @@\n error[E0277]: the trait bound `B: Clone` is not satisfied\n-  --> $DIR/issue-79224.rs:18:1\n+  --> $DIR/issue-79224.rs:18:29\n    |\n-LL | / impl<B: ?Sized> Display for Cow<'_, B> {\n-LL | |     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-LL | |         write!(f, \"foo\")\n-LL | |     }\n-LL | | }\n-   | |_^ the trait `Clone` is not implemented for `B`\n+LL | impl<B: ?Sized> Display for Cow<'_, B> {\n+   |                             ^^^^^^^^^^ the trait `Clone` is not implemented for `B`\n    |\n    = note: required for `B` to implement `ToOwned`\n help: consider further restricting this bound\n@@ -15,12 +11,10 @@ LL | impl<B: ?Sized + std::clone::Clone> Display for Cow<'_, B> {\n    |                +++++++++++++++++++\n \n error[E0277]: the trait bound `B: Clone` is not satisfied\n-  --> $DIR/issue-79224.rs:19:5\n+  --> $DIR/issue-79224.rs:18:29\n    |\n-LL | /     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-LL | |         write!(f, \"foo\")\n-LL | |     }\n-   | |_____^ the trait `Clone` is not implemented for `B`\n+LL | impl<B: ?Sized> Display for Cow<'_, B> {\n+   |                             ^^^^^^^^^^ the trait `Clone` is not implemented for `B`\n    |\n    = note: required for `B` to implement `ToOwned`\n help: consider further restricting this bound"}, {"sha": "3b6ab3326121a6e83d78f5ffcd633ec51f3c6052", "filename": "src/test/ui/wf/issue-103573.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fwf%2Fissue-103573.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fwf%2Fissue-103573.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fissue-103573.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `<<Self as TraitC<E>>::TypeC<'a> as TraitB>::TypeB: TraitA` is not satisfied\n-  --> $DIR/issue-103573.rs:18:5\n+  --> $DIR/issue-103573.rs:18:17\n    |\n LL |     fn g<'a>(_: &<<Self::TypeC<'a> as TraitB>::TypeB as TraitA>::TypeA);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `TraitA` is not implemented for `<<Self as TraitC<E>>::TypeC<'a> as TraitB>::TypeB`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `TraitA` is not implemented for `<<Self as TraitC<E>>::TypeC<'a> as TraitB>::TypeB`\n    |\n help: consider further restricting the associated type\n    |"}, {"sha": "b03023b5fd14f707d69bdeb7c927305ae6a36cac", "filename": "src/test/ui/wf/wf-foreign-fn-decl-ret.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca554efaf78962f9dc9599663b29626269c69c8c/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr?ref=ca554efaf78962f9dc9599663b29626269c69c8c", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `(): Foo` is not satisfied\n-  --> $DIR/wf-foreign-fn-decl-ret.rs:11:5\n+  --> $DIR/wf-foreign-fn-decl-ret.rs:11:25\n    |\n LL |     pub fn lint_me() -> <() as Foo>::Assoc;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n+   |                         ^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n \n error[E0277]: the trait bound `u32: Unsatisfied` is not satisfied\n   --> $DIR/wf-foreign-fn-decl-ret.rs:14:32"}]}