{"sha": "dcf3571c513a29a60a5061ce84c3c618cf5e4cd5", "node_id": "C_kwDOAAsO6NoAKGRjZjM1NzFjNTEzYTI5YTYwYTUwNjFjZTg0YzNjNjE4Y2Y1ZTRjZDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-04T22:21:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-04T22:21:42Z"}, "message": "Auto merge of #112266 - Swatinem:fix-async-block-inference, r=compiler-errors\n\nFix type-inference regression in #112225\n\nThe type inference of argument-position closures and async blocks regressed in 1.70 as the evaluation order of async blocks changed, as they are not implicitly wrapped in an identity-function anymore.\n\nFixes #112225 by making sure the evaluation order stays the same as it used to.\n\nr? `@compiler-errors`\n\nAs this was a stable-to-stable regression, it might be worth to consider backporting. Although the workaround for this is trivial as well: Just wrap the async block in another block.", "tree": {"sha": "8f45620db083015fead8c7cea779fb31b17a942e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f45620db083015fead8c7cea779fb31b17a942e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5", "html_url": "https://github.com/rust-lang/rust/commit/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "101fa903bb9209d270086da279247625a2869211", "url": "https://api.github.com/repos/rust-lang/rust/commits/101fa903bb9209d270086da279247625a2869211", "html_url": "https://github.com/rust-lang/rust/commit/101fa903bb9209d270086da279247625a2869211"}, {"sha": "75b557a2c416f997385a886b39e7ef7625073f5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b557a2c416f997385a886b39e7ef7625073f5a", "html_url": "https://github.com/rust-lang/rust/commit/75b557a2c416f997385a886b39e7ef7625073f5a"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "eba5c829e396d31f31e90751b739779a6694acd2", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=dcf3571c513a29a60a5061ce84c3c618cf5e4cd5", "patch": "@@ -362,7 +362,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     continue;\n                 }\n \n-                let is_closure = matches!(arg.kind, ExprKind::Closure { .. });\n+                // For this check, we do *not* want to treat async generator closures (async blocks)\n+                // as proper closures. Doing so would regress type inference when feeding\n+                // the return value of an argument-position async block to an argument-position\n+                // closure wrapped in a block.\n+                // See <https://github.com/rust-lang/rust/issues/112225>.\n+                let is_closure = if let ExprKind::Closure(closure) = arg.kind {\n+                    !tcx.generator_is_async(closure.def_id.to_def_id())\n+                } else {\n+                    false\n+                };\n                 if is_closure != check_closures {\n                     continue;\n                 }"}, {"sha": "e28cbee214e1a3d4f78e82f24957ef0733474c45", "filename": "tests/ui/async-await/issues/issue-112225-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-112225-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-112225-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-112225-1.rs?ref=dcf3571c513a29a60a5061ce84c3c618cf5e4cd5", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+// edition:2021\n+\n+use core::future::Future;\n+\n+fn main() {\n+    do_async(async { (0,) }, {\n+        // closure must be inside block\n+        |info| println!(\"{:?}\", info.0)\n+    });\n+}\n+\n+fn do_async<R, Fut, F>(_tokio_fut: Fut, _glib_closure: F)\n+where\n+    Fut: Future<Output = R>,\n+    F: FnOnce(R),\n+{\n+}"}, {"sha": "50fa1a79b6beb5575751c054db95da9985fd70cc", "filename": "tests/ui/async-await/issues/issue-112225-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-112225-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-112225-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-112225-2.rs?ref=dcf3571c513a29a60a5061ce84c3c618cf5e4cd5", "patch": "@@ -0,0 +1,20 @@\n+// edition:2021\n+\n+// With the current compiler logic, we cannot have both the `112225-1` case,\n+// and this `112225-2` case working, as the type inference depends on the evaluation\n+// order, and there is some explicit ordering going on.\n+// See the `check_closures` part in `FnCtxt::check_argument_types`.\n+// The `112225-1` case was a regression in real world code, whereas the `112225-2`\n+// case never used to work prior to 1.70.\n+\n+use core::future::Future;\n+\n+fn main() {\n+    let x = Default::default();\n+    //~^ ERROR: type annotations needed\n+    do_async(\n+        async { x.0; },\n+        { || { let _: &(i32,) = &x; } },\n+    );\n+}\n+fn do_async<Fut, T>(_fut: Fut, _val: T, ) {}"}, {"sha": "5926a4f3995ad203b30ab5e58fc9db019933cd8e", "filename": "tests/ui/async-await/issues/issue-112225-2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-112225-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5/tests%2Fui%2Fasync-await%2Fissues%2Fissue-112225-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-112225-2.stderr?ref=dcf3571c513a29a60a5061ce84c3c618cf5e4cd5", "patch": "@@ -0,0 +1,17 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-112225-2.rs:13:9\n+   |\n+LL |     let x = Default::default();\n+   |         ^\n+...\n+LL |         async { x.0; },\n+   |                 - type must be known at this point\n+   |\n+help: consider giving `x` an explicit type\n+   |\n+LL |     let x: /* Type */ = Default::default();\n+   |          ++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}