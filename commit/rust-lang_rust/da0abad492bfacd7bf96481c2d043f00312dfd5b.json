{"sha": "da0abad492bfacd7bf96481c2d043f00312dfd5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMGFiYWQ0OTJiZmFjZDdiZjk2NDgxYzJkMDQzZjAwMzEyZGZkNWI=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-05-21T19:53:00Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-05-22T20:24:42Z"}, "message": "Move the callee \"can unwind\" check to the right place", "tree": {"sha": "70b3d00025511a7eeecdd3233cd6b228941e32ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70b3d00025511a7eeecdd3233cd6b228941e32ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da0abad492bfacd7bf96481c2d043f00312dfd5b", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYKlojxUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLikyQEAkFaHcycjpYukwA7x6JEiV7cHe0Mh\nWBnUUdLHxr/dZNIA/jnb1qffBqfKff3f9H0FwJeURhLhyMgSDnHuezyvsnoL\n=Zatj\n-----END PGP SIGNATURE-----", "payload": "tree 70b3d00025511a7eeecdd3233cd6b228941e32ef\nparent 7b3e10c751ba79344591763bc205986b425dc445\nauthor hyd-dev <yd-huang@outlook.com> 1621626780 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1621715082 +0800\n\nMove the callee \"can unwind\" check to the right place\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da0abad492bfacd7bf96481c2d043f00312dfd5b", "html_url": "https://github.com/rust-lang/rust/commit/da0abad492bfacd7bf96481c2d043f00312dfd5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da0abad492bfacd7bf96481c2d043f00312dfd5b/comments", "author": null, "committer": null, "parents": [{"sha": "7b3e10c751ba79344591763bc205986b425dc445", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3e10c751ba79344591763bc205986b425dc445", "html_url": "https://github.com/rust-lang/rust/commit/7b3e10c751ba79344591763bc205986b425dc445"}], "stats": {"total": 75, "additions": 37, "deletions": 38}, "files": [{"sha": "0c7e3780646bce578c6d56ace6557a796ac4ff70", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/da0abad492bfacd7bf96481c2d043f00312dfd5b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0abad492bfacd7bf96481c2d043f00312dfd5b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=da0abad492bfacd7bf96481c2d043f00312dfd5b", "patch": "@@ -819,19 +819,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             StackPopCleanup::Goto { ret, unwind } => (\n                 true,\n                 Some(if unwinding {\n-                    let def_id = frame.body.source.def_id();\n                     match unwind {\n-                        StackPopUnwind::Cleanup(unwind)\n-                            // `fn_sig()` can't be used on closures, but closures always have\n-                            // \"rust-call\" ABI, which always allows unwinding anyway.\n-                            if self.tcx.is_closure(def_id) || self.fn_can_unwind(\n-                                self.tcx.codegen_fn_attrs(def_id).flags,\n-                                self.tcx.fn_sig(def_id).abi(),\n-                            ) =>\n-                        {\n-                            unwind\n-                        }\n-                        _ => {\n+                        StackPopUnwind::Cleanup(unwind) => unwind,\n+                        StackPopUnwind::NotAllowed => {\n                             throw_ub_format!(\"unwind past a frame that does not allow unwinding\")\n                         }\n                     }"}, {"sha": "af5da625cd819c37f1764499a0a35b20d065db2e", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 35, "deletions": 26, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/da0abad492bfacd7bf96481c2d043f00312dfd5b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0abad492bfacd7bf96481c2d043f00312dfd5b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=da0abad492bfacd7bf96481c2d043f00312dfd5b", "patch": "@@ -17,7 +17,7 @@ use super::{\n };\n \n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n-    pub(super) fn fn_can_unwind(&self, attrs: CodegenFnAttrFlags, abi: Abi) -> bool {\n+    fn fn_can_unwind(&self, attrs: CodegenFnAttrFlags, abi: Abi) -> bool {\n         layout::fn_can_unwind(\n             self.tcx.sess.panic_strategy(),\n             attrs,\n@@ -247,37 +247,38 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         };\n \n+        let get_abi = |this: &Self, instance_ty: Ty<'tcx>| match instance_ty.kind() {\n+            ty::FnDef(..) => instance_ty.fn_sig(*this.tcx).abi(),\n+            ty::Closure(..) => Abi::RustCall,\n+            ty::Generator(..) => Abi::Rust,\n+            _ => span_bug!(this.cur_span(), \"unexpected callee ty: {:?}\", instance_ty),\n+        };\n+\n         // ABI check\n-        let check_abi = |this: &Self, instance_ty: Ty<'tcx>| -> InterpResult<'tcx> {\n-            if M::enforce_abi(this) {\n-                let callee_abi = match instance_ty.kind() {\n-                    ty::FnDef(..) => instance_ty.fn_sig(*this.tcx).abi(),\n-                    ty::Closure(..) => Abi::RustCall,\n-                    ty::Generator(..) => Abi::Rust,\n-                    _ => span_bug!(this.cur_span(), \"unexpected callee ty: {:?}\", instance_ty),\n-                };\n-                let normalize_abi = |abi| match abi {\n-                    Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic =>\n-                    // These are all the same ABI, really.\n-                    {\n-                        Abi::Rust\n-                    }\n-                    abi => abi,\n-                };\n-                if normalize_abi(caller_abi) != normalize_abi(callee_abi) {\n-                    throw_ub_format!(\n-                        \"calling a function with ABI {} using caller ABI {}\",\n-                        callee_abi.name(),\n-                        caller_abi.name()\n-                    )\n+        let check_abi = |callee_abi: Abi| -> InterpResult<'tcx> {\n+            let normalize_abi = |abi| match abi {\n+                Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic =>\n+                // These are all the same ABI, really.\n+                {\n+                    Abi::Rust\n                 }\n+                abi => abi,\n+            };\n+            if normalize_abi(caller_abi) != normalize_abi(callee_abi) {\n+                throw_ub_format!(\n+                    \"calling a function with ABI {} using caller ABI {}\",\n+                    callee_abi.name(),\n+                    caller_abi.name()\n+                )\n             }\n             Ok(())\n         };\n \n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n-                check_abi(self, instance.ty(*self.tcx, self.param_env))?;\n+                if M::enforce_abi(self) {\n+                    check_abi(get_abi(self, instance.ty(*self.tcx, self.param_env)))?;\n+                }\n                 assert!(caller_abi == Abi::RustIntrinsic || caller_abi == Abi::PlatformIntrinsic);\n                 M::call_intrinsic(self, instance, args, ret, unwind)\n             }\n@@ -298,15 +299,23 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // Check against the ABI of the MIR body we are calling (not the ABI of `instance`;\n                 // these can differ when `find_mir_or_eval_fn` does something clever like resolve\n                 // exported symbol names).\n-                check_abi(self, self.tcx.type_of(body.source.def_id()))?;\n+                let callee_def_id = body.source.def_id();\n+                let callee_abi = get_abi(self, self.tcx.type_of(callee_def_id));\n+\n+                if M::enforce_abi(self) {\n+                    check_abi(callee_abi)?;\n+                }\n+\n+                let callee_can_unwind =\n+                    self.fn_can_unwind(self.tcx.codegen_fn_attrs(callee_def_id).flags, callee_abi);\n \n                 self.push_stack_frame(\n                     instance,\n                     body,\n                     ret.map(|p| p.0),\n                     StackPopCleanup::Goto {\n                         ret: ret.map(|p| p.1),\n-                        unwind: if can_unwind {\n+                        unwind: if can_unwind && callee_can_unwind {\n                             StackPopUnwind::Cleanup(unwind)\n                         } else {\n                             StackPopUnwind::NotAllowed"}]}