{"sha": "c08a4d1f10473bfbdddf3d2eefc40e1194a633a7", "node_id": "C_kwDOAAsO6NoAKGMwOGE0ZDFmMTA0NzNiZmJkZGRmM2QyZWVmYzQwZTExOTRhNjMzYTc", "commit": {"author": {"name": "Miguel Raz Guzm\u00e1n Macedo", "email": "miguelraz@gmail.com", "date": "2022-03-26T20:04:37Z"}, "committer": {"name": "The Atelier", "email": "workingjubilee@gmail.com", "date": "2022-12-04T00:12:00Z"}, "message": "add more basic dot products and comments, README", "tree": {"sha": "79c815aa14cfb5cd6ad290b5ca963c1f13fc2d73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79c815aa14cfb5cd6ad290b5ca963c1f13fc2d73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08a4d1f10473bfbdddf3d2eefc40e1194a633a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08a4d1f10473bfbdddf3d2eefc40e1194a633a7", "html_url": "https://github.com/rust-lang/rust/commit/c08a4d1f10473bfbdddf3d2eefc40e1194a633a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08a4d1f10473bfbdddf3d2eefc40e1194a633a7/comments", "author": {"login": "miguelraz", "id": 13056181, "node_id": "MDQ6VXNlcjEzMDU2MTgx", "avatar_url": "https://avatars.githubusercontent.com/u/13056181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miguelraz", "html_url": "https://github.com/miguelraz", "followers_url": "https://api.github.com/users/miguelraz/followers", "following_url": "https://api.github.com/users/miguelraz/following{/other_user}", "gists_url": "https://api.github.com/users/miguelraz/gists{/gist_id}", "starred_url": "https://api.github.com/users/miguelraz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miguelraz/subscriptions", "organizations_url": "https://api.github.com/users/miguelraz/orgs", "repos_url": "https://api.github.com/users/miguelraz/repos", "events_url": "https://api.github.com/users/miguelraz/events{/privacy}", "received_events_url": "https://api.github.com/users/miguelraz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df3a63906c44b23de7065d60c20bf99e2571ccc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/df3a63906c44b23de7065d60c20bf99e2571ccc8", "html_url": "https://github.com/rust-lang/rust/commit/df3a63906c44b23de7065d60c20bf99e2571ccc8"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "b37dffa8eaab3e15d4bec2b8ef79a6db7f94789d", "filename": "crates/core_simd/examples/README.md", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c08a4d1f10473bfbdddf3d2eefc40e1194a633a7/crates%2Fcore_simd%2Fexamples%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/c08a4d1f10473bfbdddf3d2eefc40e1194a633a7/crates%2Fcore_simd%2Fexamples%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2FREADME.md?ref=c08a4d1f10473bfbdddf3d2eefc40e1194a633a7", "patch": "@@ -0,0 +1,19 @@\n+### `stdsimd` examples\n+\n+This crate is a port of example uses of `stdsimd`, mostly taken from the `packed_simd` crate.\n+\n+The examples contain, as in the case of `dot_product.rs`, multiple ways of solving the problem, in order to show idiomatic uses of SIMD and iteration of performance designs.\n+\n+Run the tests with the command \n+\n+```\n+cargo run --example dot_product\n+```\n+\n+and the benchmarks via the command\n+\n+```\n+cargo run --example --benchmark ???\n+```\n+\n+and measure the timings on your local system."}, {"sha": "3e415fc4471dc104050dc98dc2bf1e0c6830fe68", "filename": "crates/core_simd/examples/dot_product.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c08a4d1f10473bfbdddf3d2eefc40e1194a633a7/crates%2Fcore_simd%2Fexamples%2Fdot_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08a4d1f10473bfbdddf3d2eefc40e1194a633a7/crates%2Fcore_simd%2Fexamples%2Fdot_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2Fdot_product.rs?ref=c08a4d1f10473bfbdddf3d2eefc40e1194a633a7", "patch": "@@ -3,7 +3,27 @@\n #![feature(array_chunks)]\n use core_simd::*;\n \n-pub fn dot_prod(a: &[f32], b: &[f32]) -> f32 {\n+/// This is your barebones dot product implementation: \n+/// Take 2 vectors, multiply them element wise and *then*\n+/// add up the result. In the next example we will see if there\n+///  is any difference to adding as we go along multiplying.\n+pub fn dot_prod_0(a: &[f32], b: &[f32]) -> f32 {\n+    assert_eq!(a.len(), b.len());\n+\n+    a.iter()\n+    .zip(b.iter())\n+    .map(|a, b| a * b)\n+    .sum()\n+}\n+\n+pub fn dot_prod_1(a: &[f32], b: &[f32]) -> f32 {\n+    assert_eq!(a.len(), b.len());\n+    a.iter()\n+    .zip(b.iter())\n+    .fold(0.0, |a, b| a * b)\n+}\n+\n+pub fn dot_prod_simd_0(a: &[f32], b: &[f32]) -> f32 {\n     assert_eq!(a.len(), b.len());\n \n     // TODO handle remainder when a.len() % 4 != 0\n@@ -21,11 +41,14 @@ fn main() {\n #[cfg(test)]\n mod tests {\n     #[test]\n-    fn test() {\n+    fn smoke_test() {\n         use super::*;\n         let a: Vec<f32> = vec![1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0];\n         let b: Vec<f32> = vec![-8.0, -7.0, -6.0, -5.0, 4.0, 3.0, 2.0, 1.0];\n \n-        assert_eq!(0.0, dot_prod(&a, &b));\n+        assert_eq!(0.0, dot_prod_0(&a, &b));\n+        assert_eq!(0.0, dot_prod_1(&a, &b));\n+        assert_eq!(0.0, dot_prod_simd_0(&a, &b));\n+        assert_eq!(0.0, dot_prod_simd_1(&a, &b));\n     }\n }"}]}