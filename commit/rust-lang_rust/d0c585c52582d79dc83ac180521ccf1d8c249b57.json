{"sha": "d0c585c52582d79dc83ac180521ccf1d8c249b57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYzU4NWM1MjU4MmQ3OWRjODNhYzE4MDUyMWNjZjFkOGMyNDliNTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-09T20:44:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-13T07:09:03Z"}, "message": "seems like for generators we cannot access the freevars", "tree": {"sha": "92ba2ffca0c1db2b83a00d633cf3aea37734bfbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ba2ffca0c1db2b83a00d633cf3aea37734bfbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0c585c52582d79dc83ac180521ccf1d8c249b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c585c52582d79dc83ac180521ccf1d8c249b57", "html_url": "https://github.com/rust-lang/rust/commit/d0c585c52582d79dc83ac180521ccf1d8c249b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0c585c52582d79dc83ac180521ccf1d8c249b57/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93f53e51135e37f7e8328d31d72b6233049539e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/93f53e51135e37f7e8328d31d72b6233049539e3", "html_url": "https://github.com/rust-lang/rust/commit/93f53e51135e37f7e8328d31d72b6233049539e3"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "e2fa4b15f819d556f6853dd0eb7299cc1df72a30", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0c585c52582d79dc83ac180521ccf1d8c249b57/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c585c52582d79dc83ac180521ccf1d8c249b57/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=d0c585c52582d79dc83ac180521ccf1d8c249b57", "patch": "@@ -559,12 +559,16 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             // generators and closures.\n             ty::Closure(def_id, _) | ty::Generator(def_id, _, _) => {\n                 if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n-                    let freevar = self.tcx.with_freevars(node_id, |fv| fv[field]);\n-                    PathElem::ClosureVar(self.tcx.hir.name(freevar.var_id()))\n-                } else {\n-                    // The closure is not local, so we cannot get the name\n-                    PathElem::ClosureVar(Symbol::intern(&field.to_string()))\n+                    if let Some(freevar) = self.tcx.with_freevars(\n+                        node_id,\n+                        |fv| fv.get(field).map(|field| *field))\n+                    {\n+                        return PathElem::ClosureVar(self.tcx.hir.name(freevar.var_id()));\n+                    }\n                 }\n+                // The closure is not local, or the freevars don't match up (seen for a generator!),\n+                // so we cannot get the name.\n+                PathElem::ClosureVar(Symbol::intern(&field.to_string()))\n             }\n \n             // tuples"}]}