{"sha": "97078d43b20abc7510fde2e400500fed4c8b1eb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDc4ZDQzYjIwYWJjNzUxMGZkZTJlNDAwNTAwZmVkNGM4YjFlYjM=", "commit": {"author": {"name": "Derek Guenther", "email": "dguenther9@gmail.com", "date": "2014-01-31T01:05:04Z"}, "committer": {"name": "Derek Guenther", "email": "dguenther9@gmail.com", "date": "2014-02-09T05:40:17Z"}, "message": "Converted fourcc! to loadable syntax extension", "tree": {"sha": "c3d0cc9c6a3e88e92154e36f8e0adc3337e34dd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3d0cc9c6a3e88e92154e36f8e0adc3337e34dd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97078d43b20abc7510fde2e400500fed4c8b1eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97078d43b20abc7510fde2e400500fed4c8b1eb3", "html_url": "https://github.com/rust-lang/rust/commit/97078d43b20abc7510fde2e400500fed4c8b1eb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97078d43b20abc7510fde2e400500fed4c8b1eb3/comments", "author": {"login": "dguenther", "id": 767083, "node_id": "MDQ6VXNlcjc2NzA4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/767083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dguenther", "html_url": "https://github.com/dguenther", "followers_url": "https://api.github.com/users/dguenther/followers", "following_url": "https://api.github.com/users/dguenther/following{/other_user}", "gists_url": "https://api.github.com/users/dguenther/gists{/gist_id}", "starred_url": "https://api.github.com/users/dguenther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dguenther/subscriptions", "organizations_url": "https://api.github.com/users/dguenther/orgs", "repos_url": "https://api.github.com/users/dguenther/repos", "events_url": "https://api.github.com/users/dguenther/events{/privacy}", "received_events_url": "https://api.github.com/users/dguenther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dguenther", "id": 767083, "node_id": "MDQ6VXNlcjc2NzA4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/767083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dguenther", "html_url": "https://github.com/dguenther", "followers_url": "https://api.github.com/users/dguenther/followers", "following_url": "https://api.github.com/users/dguenther/following{/other_user}", "gists_url": "https://api.github.com/users/dguenther/gists{/gist_id}", "starred_url": "https://api.github.com/users/dguenther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dguenther/subscriptions", "organizations_url": "https://api.github.com/users/dguenther/orgs", "repos_url": "https://api.github.com/users/dguenther/repos", "events_url": "https://api.github.com/users/dguenther/events{/privacy}", "received_events_url": "https://api.github.com/users/dguenther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "html_url": "https://github.com/rust-lang/rust/commit/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55"}], "stats": {"total": 343, "additions": 225, "deletions": 118}, "files": [{"sha": "81b2b390fa42587fee2c16600f410ad8fb28d2a9", "filename": "mk/crates.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97078d43b20abc7510fde2e400500fed4c8b1eb3/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/97078d43b20abc7510fde2e400500fed4c8b1eb3/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=97078d43b20abc7510fde2e400500fed4c8b1eb3", "patch": "@@ -50,7 +50,7 @@\n ################################################################################\n \n TARGET_CRATES := std extra green rustuv native flate arena glob term semver \\\n-                 uuid serialize sync getopts collections\n+                 uuid serialize sync getopts collections fourcc\n HOST_CRATES := syntax rustc rustdoc\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n@@ -74,6 +74,7 @@ DEPS_uuid := std serialize\n DEPS_sync := std\n DEPS_getopts := std\n DEPS_collections := std serialize\n+DEPS_fourcc := syntax std\n \n TOOL_DEPS_compiletest := extra green rustuv getopts\n TOOL_DEPS_rustdoc := rustdoc green rustuv"}, {"sha": "aae47b87f071a245b09a753f1b2275da0689e036", "filename": "src/libfourcc/lib.rs", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Flibfourcc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Flibfourcc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfourcc%2Flib.rs?ref=97078d43b20abc7510fde2e400500fed4c8b1eb3", "patch": "@@ -0,0 +1,158 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+Syntax extension to generate FourCCs.\n+\n+Once loaded, fourcc!() is called with a single 4-character string,\n+and an optional ident that is either `big`, `little`, or `target`.\n+The ident represents endianness, and specifies in which direction\n+the characters should be read. If the ident is omitted, it is assumed\n+to be `big`, i.e. left-to-right order. It returns a u32.\n+\n+# Examples\n+\n+To load the extension and use it:\n+\n+```rust,ignore\n+#[phase(syntax)]\n+extern mod fourcc;\n+\n+fn main() {\n+    let val = fourcc!(\"\\xC0\\xFF\\xEE!\")\n+    // val is 0xC0FFEE21\n+    let big_val = fourcc!(\"foo \", big);\n+    // big_val is 0x21EEFFC0\n+}\n+ ```\n+\n+# References\n+\n+* [Wikipedia: FourCC](http://en.wikipedia.org/wiki/FourCC)\n+\n+*/\n+\n+#[crate_id = \"fourcc#0.10-pre\"];\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n+#[license = \"MIT/ASL2\"];\n+\n+#[feature(macro_registrar, managed_boxes)];\n+\n+extern mod syntax;\n+\n+use syntax::ast;\n+use syntax::ast::Name;\n+use syntax::attr::contains;\n+use syntax::codemap::{Span, mk_sp};\n+use syntax::ext::base;\n+use syntax::ext::base::{SyntaxExtension, BasicMacroExpander, NormalTT, ExtCtxt, MRExpr};\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse;\n+use syntax::parse::token;\n+use syntax::parse::token::InternedString;\n+\n+#[macro_registrar]\n+#[cfg(not(test))]\n+pub fn macro_registrar(register: |Name, SyntaxExtension|) {\n+    register(token::intern(\"fourcc\"),\n+        NormalTT(~BasicMacroExpander {\n+            expander: expand_syntax_ext,\n+            span: None,\n+        },\n+        None));\n+}\n+\n+use std::ascii::AsciiCast;\n+\n+pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]) -> base::MacResult {\n+    let (expr, endian) = parse_tts(cx, tts);\n+\n+    let little = match endian {\n+        None => target_endian_little(cx, sp),\n+        Some(Ident{ident, span}) => match token::get_ident(ident.name).get() {\n+            \"little\" => true,\n+            \"big\" => false,\n+            _ => {\n+                cx.span_err(span, \"invalid endian directive in fourcc!\");\n+                target_endian_little(cx, sp)\n+            }\n+        }\n+    };\n+\n+    let s = match expr.node {\n+        // expression is a literal\n+        ast::ExprLit(lit) => match lit.node {\n+            // string literal\n+            ast::LitStr(ref s, _) => {\n+                if !s.get().is_ascii() {\n+                    cx.span_err(expr.span, \"non-ascii string literal in fourcc!\");\n+                } else if s.get().len() != 4 {\n+                    cx.span_err(expr.span, \"string literal with len != 4 in fourcc!\");\n+                }\n+                s\n+            }\n+            _ => {\n+                cx.span_err(expr.span, \"unsupported literal in fourcc!\");\n+                return MRExpr(cx.expr_lit(sp, ast::LitUint(0u64, ast::TyU32)));\n+            }\n+        },\n+        _ => {\n+            cx.span_err(expr.span, \"non-literal in fourcc!\");\n+            return MRExpr(cx.expr_lit(sp, ast::LitUint(0u64, ast::TyU32)));\n+        }\n+    };\n+\n+    let mut val = 0u32;\n+    if little {\n+        for byte in s.get().bytes_rev().take(4) {\n+            val = (val << 8) | (byte as u32);\n+        }\n+    } else {\n+        for byte in s.get().bytes().take(4) {\n+            val = (val << 8) | (byte as u32);\n+        }\n+    }\n+    let e = cx.expr_lit(sp, ast::LitUint(val as u64, ast::TyU32));\n+    MRExpr(e)\n+}\n+\n+struct Ident {\n+    ident: ast::Ident,\n+    span: Span\n+}\n+\n+fn parse_tts(cx: &ExtCtxt, tts: &[ast::TokenTree]) -> (@ast::Expr, Option<Ident>) {\n+    let p = &mut parse::new_parser_from_tts(cx.parse_sess(), cx.cfg(), tts.to_owned());\n+    let ex = p.parse_expr();\n+    let id = if p.token == token::EOF {\n+        None\n+    } else {\n+        p.expect(&token::COMMA);\n+        let lo = p.span.lo;\n+        let ident = p.parse_ident();\n+        let hi = p.last_span.hi;\n+        Some(Ident{ident: ident, span: mk_sp(lo, hi)})\n+    };\n+    if p.token != token::EOF {\n+        p.unexpected();\n+    }\n+    (ex, id)\n+}\n+\n+fn target_endian_little(cx: &ExtCtxt, sp: Span) -> bool {\n+    let meta = cx.meta_name_value(sp, InternedString::new(\"target_endian\"),\n+        ast::LitStr(InternedString::new(\"little\"), ast::CookedStr));\n+    contains(cx.cfg(), meta)\n+}\n+\n+// Fixes LLVM assert on Windows\n+#[test]\n+fn dummy_test() { }"}, {"sha": "f2e525932ad8b0c747299584decd72900537a174", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=97078d43b20abc7510fde2e400500fed4c8b1eb3", "patch": "@@ -210,10 +210,13 @@ impl Visitor<()> for Context {\n             self.gate_feature(\"log_syntax\", path.span, \"`log_syntax!` is not \\\n                 stable enough for use and is subject to change\");\n         }\n+\n         else if id == self.sess.ident_of(\"trace_macros\") {\n             self.gate_feature(\"trace_macros\", path.span, \"`trace_macros` is not \\\n                 stable enough for use and is subject to change\");\n-        } else {\n+        }\n+\n+        else {\n             for &quote in quotes.iter() {\n                 if id == self.sess.ident_of(quote) {\n                   self.gate_feature(\"quote\", path.span, quote + msg);"}, {"sha": "d22a1d697fcb4569f7b755b897803b9de6bb5ff3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=97078d43b20abc7510fde2e400500fed4c8b1eb3", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -194,9 +194,6 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"bytes\"),\n                             builtin_normal_expander(\n                                     ext::bytes::expand_syntax_ext));\n-    syntax_expanders.insert(intern(\"fourcc\"),\n-                            builtin_normal_tt_no_ctxt(\n-                                    ext::fourcc::expand_syntax_ext));\n     syntax_expanders.insert(intern(\"concat_idents\"),\n                             builtin_normal_expander(\n                                     ext::concat_idents::expand_syntax_ext));"}, {"sha": "dd5452535a28a8432fc35c099caaaa1c23175c90", "filename": "src/libsyntax/ext/fourcc.rs", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Flibsyntax%2Fext%2Ffourcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Flibsyntax%2Fext%2Ffourcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffourcc.rs?ref=c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "patch": "@@ -1,106 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/* The compiler code necessary to support the fourcc! extension. */\n-\n-// fourcc!() is called with a single 4-character string, and an optional ident\n-// that is either `big` or `little`. If the ident is omitted it is assumed to\n-// be the platform-native value. It returns a u32.\n-\n-use ast;\n-use attr::contains;\n-use codemap::{Span, mk_sp};\n-use ext::base::*;\n-use ext::base;\n-use ext::build::AstBuilder;\n-use parse;\n-use parse::token;\n-\n-use std::ascii::AsciiCast;\n-\n-pub fn expand_syntax_ext(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree]) -> base::MacResult {\n-    let (expr, endian) = parse_tts(cx, tts);\n-\n-    let little = match endian {\n-        None => target_endian_little(cx, sp),\n-        Some(Ident{ident, span}) => match cx.str_of(ident).as_slice() {\n-            \"little\" => true,\n-            \"big\" => false,\n-            _ => {\n-                cx.span_err(span, \"invalid endian directive in fourcc!\");\n-                target_endian_little(cx, sp)\n-            }\n-        }\n-    };\n-\n-    let s = match expr.node {\n-        // expression is a literal\n-        ast::ExprLit(lit) => match lit.node {\n-            // string literal\n-            ast::lit_str(s) => {\n-                if !s.is_ascii() {\n-                    cx.span_err(expr.span, \"non-ascii string literal in fourcc!\");\n-                } else if s.len() != 4 {\n-                    cx.span_err(expr.span, \"string literal with len != 4 in fourcc!\");\n-                }\n-                s\n-            }\n-            _ => {\n-                cx.span_err(expr.span, \"unsupported literal in fourcc!\");\n-                return MRExpr(cx.expr_lit(sp, ast::lit_uint(0u64, ast::ty_u32)));\n-            }\n-        },\n-        _ => {\n-            cx.span_err(expr.span, \"non-literal in fourcc!\");\n-            return MRExpr(cx.expr_lit(sp, ast::lit_uint(0u64, ast::ty_u32)));\n-        }\n-    };\n-\n-    let mut val = 0u32;\n-    if little {\n-        for byte in s.byte_rev_iter().take(4) {\n-            val = (val << 8) | (byte as u32);\n-        }\n-    } else {\n-        for byte in s.byte_iter().take(4) {\n-            val = (val << 8) | (byte as u32);\n-        }\n-    }\n-    let e = cx.expr_lit(sp, ast::lit_uint(val as u64, ast::ty_u32));\n-    MRExpr(e)\n-}\n-\n-struct Ident {\n-    ident: ast::Ident,\n-    span: Span\n-}\n-\n-fn parse_tts(cx: @ExtCtxt, tts: &[ast::token_tree]) -> (@ast::Expr, Option<Ident>) {\n-    let p = parse::new_parser_from_tts(cx.parse_sess(), cx.cfg(), tts.to_owned());\n-    let ex = p.parse_expr();\n-    let id = if *p.token == token::EOF {\n-        None\n-    } else {\n-        p.expect(&token::COMMA);\n-        let lo = p.span.lo;\n-        let ident = p.parse_ident();\n-        let hi = p.last_span.hi;\n-        Some(Ident{ident: ident, span: mk_sp(lo, hi)})\n-    };\n-    if *p.token != token::EOF {\n-        p.unexpected();\n-    }\n-    (ex, id)\n-}\n-\n-fn target_endian_little(cx: @ExtCtxt, sp: Span) -> bool {\n-    let meta = cx.meta_name_value(sp, @\"target_endian\", ast::lit_str(@\"little\"));\n-    contains(cx.cfg(), meta)\n-}"}, {"sha": "613416bed1c1404473d8723223e74e9b4246b37f", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=97078d43b20abc7510fde2e400500fed4c8b1eb3", "patch": "@@ -95,7 +95,6 @@ pub mod ext {\n     pub mod bytes;\n     pub mod concat;\n     pub mod concat_idents;\n-    pub mod fourcc;\n     pub mod log_syntax;\n     pub mod source_util;\n "}, {"sha": "1fa198bb7064568cc087a39b1de1086b476c7bb1", "filename": "src/test/compile-fail/syntax-extension-fourcc-bad-len.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-bad-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-bad-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-bad-len.rs?ref=97078d43b20abc7510fde2e400500fed4c8b1eb3", "patch": "@@ -8,6 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-stage1\n+// xfail-pretty\n+// xfail-android\n+\n+#[feature(phase)];\n+\n+#[phase(syntax)]\n+extern mod fourcc;\n+\n fn main() {\n     let val = fourcc!(\"foo\"); //~ ERROR string literal with len != 4 in fourcc!\n     let val2 = fourcc!(\"fooba\"); //~ ERROR string literal with len != 4 in fourcc!"}, {"sha": "75a5483c6d73c48fbd966d5cfe26acc10eeb5c71", "filename": "src/test/compile-fail/syntax-extension-fourcc-invalid-endian.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-invalid-endian.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-invalid-endian.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-invalid-endian.rs?ref=97078d43b20abc7510fde2e400500fed4c8b1eb3", "patch": "@@ -8,6 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-stage1\n+// xfail-pretty\n+// xfail-android\n+\n+#[feature(phase)];\n+\n+#[phase(syntax)]\n+extern mod fourcc;\n+\n fn main() {\n     let val = fourcc!(\"foo \", bork); //~ ERROR invalid endian directive in fourcc!\n }"}, {"sha": "18ec4547ddfbcdba74e079e6a1e38ab4df4e5c65", "filename": "src/test/compile-fail/syntax-extension-fourcc-non-ascii-str.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-ascii-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-ascii-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-ascii-str.rs?ref=97078d43b20abc7510fde2e400500fed4c8b1eb3", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-stage1\n+// xfail-pretty\n+// xfail-android\n+\n+#[feature(phase)];\n+\n+#[phase(syntax)]\n+extern mod fourcc;\n+\n fn main() {\n     let v = fourcc!(\"foo\u03bb\"); //~ ERROR non-ascii string literal in fourcc!\n }"}, {"sha": "8e9dba302769923183d1d89d2aef0294641ecc5f", "filename": "src/test/compile-fail/syntax-extension-fourcc-non-literal.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-literal.rs?ref=97078d43b20abc7510fde2e400500fed4c8b1eb3", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-stage1\n+// xfail-pretty\n+// xfail-android\n+\n+#[feature(phase)];\n+\n+#[phase(syntax)]\n+extern mod fourcc;\n+\n fn main() {\n     let val = fourcc!(foo); //~ ERROR non-literal in fourcc!\n }"}, {"sha": "65cc048bfb749c700b3eeeb89516ba0849b2b426", "filename": "src/test/compile-fail/syntax-extension-fourcc-unsupported-literal.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-unsupported-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-unsupported-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-unsupported-literal.rs?ref=97078d43b20abc7510fde2e400500fed4c8b1eb3", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-stage1\n+// xfail-pretty\n+// xfail-android\n+\n+#[feature(phase)];\n+\n+#[phase(syntax)]\n+extern mod fourcc;\n+\n fn main() {\n-    let val = fourcc!(45f); //~ ERROR unsupported literal in fourcc!\n+    let val = fourcc!(45f32); //~ ERROR unsupported literal in fourcc!\n }"}, {"sha": "0d46c28431da3e7650e160caaa5693a04caaf789", "filename": "src/test/run-pass-fulldeps/syntax-extension-fourcc.rs", "status": "renamed", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-fourcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97078d43b20abc7510fde2e400500fed4c8b1eb3/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-fourcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-fourcc.rs?ref=97078d43b20abc7510fde2e400500fed4c8b1eb3", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-fast Feature gating doesn't work\n+// xfail-stage1\n+// xfail-pretty\n+// xfail-android\n+\n+#[feature(phase)];\n+\n+#[phase(syntax)]\n+extern mod fourcc;\n+\n static static_val: u32 = fourcc!(\"foo \");\n static static_val_le: u32 = fourcc!(\"foo \", little);\n static static_val_be: u32 = fourcc!(\"foo \", big);", "previous_filename": "src/test/run-pass/syntax-extension-fourcc.rs"}]}