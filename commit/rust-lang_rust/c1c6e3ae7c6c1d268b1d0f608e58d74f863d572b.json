{"sha": "c1c6e3ae7c6c1d268b1d0f608e58d74f863d572b", "node_id": "C_kwDOAAsO6NoAKGMxYzZlM2FlN2M2YzFkMjY4YjFkMGY2MDhlNThkNzRmODYzZDU3MmI", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-08-30T15:26:50Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-09-27T11:31:51Z"}, "message": "Add clarifying comments.", "tree": {"sha": "abcd8a44681edb1748908289979fb5ce5c94eaf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abcd8a44681edb1748908289979fb5ce5c94eaf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1c6e3ae7c6c1d268b1d0f608e58d74f863d572b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c6e3ae7c6c1d268b1d0f608e58d74f863d572b", "html_url": "https://github.com/rust-lang/rust/commit/c1c6e3ae7c6c1d268b1d0f608e58d74f863d572b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1c6e3ae7c6c1d268b1d0f608e58d74f863d572b/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d9a5881ea18568f014ea09ec9d2f1d0cdacff1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9a5881ea18568f014ea09ec9d2f1d0cdacff1b", "html_url": "https://github.com/rust-lang/rust/commit/8d9a5881ea18568f014ea09ec9d2f1d0cdacff1b"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "26a9169a30b13b9b45cc3bb9141be3dfdd17a2bd", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1c6e3ae7c6c1d268b1d0f608e58d74f863d572b/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c6e3ae7c6c1d268b1d0f608e58d74f863d572b/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=c1c6e3ae7c6c1d268b1d0f608e58d74f863d572b", "patch": "@@ -308,12 +308,15 @@ pub fn make_format_args(\n                     .iter()\n                     .position(|arg| arg.1.ident().is_some_and(|id| id.name == name))\n                 {\n+                    // Name found in `args`, so we resolve it to its index in that Vec.\n                     let index = start_of_named_args + i;\n                     if !matches!(args[index].1, FormatArgKind::Captured(_)) {\n+                        // Mark it as used, if it was an explicit argument.\n                         used[index] = true;\n                     }\n                     Ok(index)\n                 } else {\n+                    // Name not found in `args`, so we add it as an implicitly captured argument.\n                     let span = span.unwrap_or(fmt_span);\n                     let ident = Ident::new(name, span);\n                     let arg = if is_literal {"}]}