{"sha": "441313fc0ca635be18d1175e7dc265ab9ffa9d7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MTMxM2ZjMGNhNjM1YmUxOGQxMTc1ZTdkYzI2NWFiOWZmYTlkN2Q=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-24T07:59:44Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-24T07:59:44Z"}, "message": "librustc: emit loop for expr_repeat instead of 2n instructions in [x, ..n]", "tree": {"sha": "b6762f9880d0bb7b9c4adbef955de8915224bf56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6762f9880d0bb7b9c4adbef955de8915224bf56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/441313fc0ca635be18d1175e7dc265ab9ffa9d7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/441313fc0ca635be18d1175e7dc265ab9ffa9d7d", "html_url": "https://github.com/rust-lang/rust/commit/441313fc0ca635be18d1175e7dc265ab9ffa9d7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/441313fc0ca635be18d1175e7dc265ab9ffa9d7d/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a56ec8c1342453a88be79e192a11501844375d40", "url": "https://api.github.com/repos/rust-lang/rust/commits/a56ec8c1342453a88be79e192a11501844375d40", "html_url": "https://github.com/rust-lang/rust/commit/a56ec8c1342453a88be79e192a11501844375d40"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "9910a62f1e0e727806cfa08f29c21c75ec1a0243", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 41, "deletions": 16, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/441313fc0ca635be18d1175e7dc265ab9ffa9d7d/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441313fc0ca635be18d1175e7dc265ab9ffa9d7d/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=441313fc0ca635be18d1175e7dc265ab9ffa9d7d", "patch": "@@ -27,6 +27,7 @@ use middle::ty;\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n+use core::option::None;\n use core::uint;\n use core::vec;\n use syntax::ast;\n@@ -413,30 +414,54 @@ pub fn write_content(bcx: block,\n                         return bcx;\n                     }\n \n-                    let tmpdatum = unpack_datum!(bcx, {\n+                    let elem = unpack_datum!(bcx, {\n                         expr::trans_to_datum(bcx, element)\n                     });\n \n-                    let mut temp_cleanups = ~[];\n+                    let next_bcx = sub_block(bcx, ~\"expr_repeat: while next\");\n+                    let loop_bcx = loop_scope_block(bcx, next_bcx, None, ~\"expr_repeat\", None);\n+                    let cond_bcx = scope_block(loop_bcx, None, ~\"expr_repeat: loop cond\");\n+                    let set_bcx = scope_block(loop_bcx, None, ~\"expr_repeat: body: set\");\n+                    let inc_bcx = scope_block(loop_bcx, None, ~\"expr_repeat: body: inc\");\n+                    Br(bcx, loop_bcx.llbb);\n \n-                    for uint::range(0, count) |i| {\n-                        let lleltptr = GEPi(bcx, lldest, [i]);\n-                        if i < count - 1 {\n-                            // Copy all but the last one in.\n-                            bcx = tmpdatum.copy_to(bcx, INIT, lleltptr);\n-                        } else {\n-                            // Move the last one in.\n-                            bcx = tmpdatum.move_to(bcx, INIT, lleltptr);\n-                        }\n-                        add_clean_temp_mem(bcx, lleltptr, vt.unit_ty);\n-                        temp_cleanups.push(lleltptr);\n+                    let loop_counter = {\n+                        // i = 0\n+                        let i = alloca(loop_bcx, T_i64());\n+                        Store(loop_bcx, C_i64(0), i);\n+\n+                        Br(loop_bcx, cond_bcx.llbb);\n+                        i\n+                    };\n+\n+                    { // i < count\n+                        let lhs = Load(cond_bcx, loop_counter);\n+                        let rhs = C_integral(T_i64(), count as u64, lib::llvm::False);\n+                        let cmp_lr = ICmp(cond_bcx, lib::llvm::IntULT, lhs, rhs);\n+                        let zext = ZExt(cond_bcx, cmp_lr, T_i8());\n+                        let cond_val = ICmp(cond_bcx, lib::llvm::IntNE, zext, C_u8(0));\n+\n+                        CondBr(cond_bcx, cond_val, set_bcx.llbb, next_bcx.llbb);\n                     }\n \n-                    for vec::each(temp_cleanups) |cleanup| {\n-                        revoke_clean(bcx, *cleanup);\n+                    { // v[i] = elem\n+                        let i = Load(set_bcx, loop_counter);\n+                        let lleltptr = InBoundsGEP(set_bcx, lldest, [i]);\n+                        let set_bcx = elem.copy_to(set_bcx, INIT, lleltptr);\n+\n+                        Br(set_bcx, inc_bcx.llbb);\n                     }\n \n-                    return bcx;\n+                    { // i += 1\n+                        let i = Load(inc_bcx, loop_counter);\n+                        let plusone = Add(inc_bcx, i, C_i64(1));\n+                        Store(inc_bcx, plusone, loop_counter);\n+\n+                        Br(inc_bcx, cond_bcx.llbb);\n+                    }\n+\n+                    return next_bcx;\n+\n                 }\n             }\n         }"}]}