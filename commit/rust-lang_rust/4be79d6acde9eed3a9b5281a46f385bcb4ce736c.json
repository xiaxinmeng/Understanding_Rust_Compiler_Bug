{"sha": "4be79d6acde9eed3a9b5281a46f385bcb4ce736c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZTc5ZDZhY2RlOWVlZDNhOWI1MjgxYTQ2ZjM4NWJjYjRjZTczNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-23T16:08:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-23T16:08:14Z"}, "message": "Auto merge of #21503 - ahmedcharles:remove-test-features, r=alexcrichton\n\nI think this is all of the remaining code to be removed. Let me know if I've missed anything.\r\n\r\nCloses #19145", "tree": {"sha": "5f168f093823321fc9cf62837f36fc2fa8425052", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f168f093823321fc9cf62837f36fc2fa8425052"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4be79d6acde9eed3a9b5281a46f385bcb4ce736c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4be79d6acde9eed3a9b5281a46f385bcb4ce736c", "html_url": "https://github.com/rust-lang/rust/commit/4be79d6acde9eed3a9b5281a46f385bcb4ce736c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4be79d6acde9eed3a9b5281a46f385bcb4ce736c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174", "url": "https://api.github.com/repos/rust-lang/rust/commits/86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174", "html_url": "https://github.com/rust-lang/rust/commit/86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174"}, {"sha": "cb020db55a009a65599f31da6a0316c0aaae19a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb020db55a009a65599f31da6a0316c0aaae19a2", "html_url": "https://github.com/rust-lang/rust/commit/cb020db55a009a65599f31da6a0316c0aaae19a2"}], "stats": {"total": 240, "additions": 18, "deletions": 222}, "files": [{"sha": "7226c6423b82c0949c6614ee0c57b043150cbd3c", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 18, "deletions": 92, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/4be79d6acde9eed3a9b5281a46f385bcb4ce736c/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be79d6acde9eed3a9b5281a46f385bcb4ce736c/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=4be79d6acde9eed3a9b5281a46f385bcb4ce736c", "patch": "@@ -54,15 +54,14 @@ use self::OutputLocation::*;\n use stats::Stats;\n use getopts::{OptGroup, optflag, optopt};\n use regex::Regex;\n-use serialize::{json, Decodable, Encodable};\n+use serialize::Encodable;\n use term::Terminal;\n use term::color::{Color, RED, YELLOW, GREEN, CYAN};\n \n use std::any::Any;\n use std::cmp;\n use std::collections::BTreeMap;\n use std::fmt;\n-use std::io::fs::PathExtensions;\n use std::io::stdio::StdWriter;\n use std::io::{File, ChanReader, ChanWriter};\n use std::io;\n@@ -438,9 +437,6 @@ struct ConsoleTestState<T> {\n     log_out: Option<File>,\n     out: OutputLocation<T>,\n     use_color: bool,\n-    show_boxplot: bool,\n-    boxplot_width: uint,\n-    show_all_stats: bool,\n     total: uint,\n     passed: uint,\n     failed: uint,\n@@ -467,9 +463,6 @@ impl<T: Writer> ConsoleTestState<T> {\n             out: out,\n             log_out: log_out,\n             use_color: use_color(opts),\n-            show_boxplot: false,\n-            boxplot_width: 50,\n-            show_all_stats: false,\n             total: 0u,\n             passed: 0u,\n             failed: 0u,\n@@ -545,33 +538,13 @@ impl<T: Writer> ConsoleTestState<T> {\n             TrIgnored => self.write_ignored(),\n             TrMetrics(ref mm) => {\n                 try!(self.write_metric());\n-                self.write_plain(format!(\": {}\", fmt_metrics(mm)).as_slice())\n+                self.write_plain(format!(\": {}\", mm.fmt_metrics()).as_slice())\n             }\n             TrBench(ref bs) => {\n                 try!(self.write_bench());\n \n-                if self.show_boxplot {\n-                    let mut wr = Vec::new();\n-\n-                    try!(stats::write_boxplot(&mut wr, &bs.ns_iter_summ, self.boxplot_width));\n-\n-                    let s = String::from_utf8(wr).unwrap();\n-\n-                    try!(self.write_plain(format!(\": {}\", s).as_slice()));\n-                }\n-\n-                if self.show_all_stats {\n-                    let mut wr = Vec::new();\n-\n-                    try!(stats::write_5_number_summary(&mut wr, &bs.ns_iter_summ));\n-\n-                    let s = String::from_utf8(wr).unwrap();\n-\n-                    try!(self.write_plain(format!(\": {}\", s).as_slice()));\n-                } else {\n-                    try!(self.write_plain(format!(\": {}\",\n-                                                  fmt_bench_samples(bs)).as_slice()));\n-                }\n+                try!(self.write_plain(format!(\": {}\",\n+                                              fmt_bench_samples(bs)).as_slice()));\n \n                 Ok(())\n             }\n@@ -588,7 +561,7 @@ impl<T: Writer> ConsoleTestState<T> {\n                         TrOk => \"ok\".to_string(),\n                         TrFailed => \"failed\".to_string(),\n                         TrIgnored => \"ignored\".to_string(),\n-                        TrMetrics(ref mm) => fmt_metrics(mm),\n+                        TrMetrics(ref mm) => mm.fmt_metrics(),\n                         TrBench(ref bs) => fmt_bench_samples(bs)\n                     }, test.name.as_slice());\n                 o.write(s.as_bytes())\n@@ -624,34 +597,14 @@ impl<T: Writer> ConsoleTestState<T> {\n         Ok(())\n     }\n \n-    pub fn write_run_finish(&mut self,\n-                            ratchet_metrics: &Option<Path>,\n-                            ratchet_pct: Option<f64>) -> io::IoResult<bool> {\n+    pub fn write_run_finish(&mut self) -> io::IoResult<bool> {\n         assert!(self.passed + self.failed + self.ignored + self.measured == self.total);\n \n-        let ratchet_success = match *ratchet_metrics {\n-            None => true,\n-            Some(ref pth) => {\n-                try!(self.write_plain(format!(\"\\nusing metrics ratchet: {:?}\\n\",\n-                                              pth.display()).as_slice()));\n-                match ratchet_pct {\n-                    None => (),\n-                    Some(pct) =>\n-                        try!(self.write_plain(format!(\"with noise-tolerance \\\n-                                                         forced to: {}%\\n\",\n-                                                        pct).as_slice()))\n-                }\n-                true\n-            }\n-        };\n-\n-        let test_success = self.failed == 0u;\n-        if !test_success {\n+        let success = self.failed == 0u;\n+        if !success {\n             try!(self.write_failures());\n         }\n \n-        let success = ratchet_success && test_success;\n-\n         try!(self.write_plain(\"\\ntest result: \"));\n         if success {\n             // There's no parallelism at this point so it's safe to use color\n@@ -666,15 +619,6 @@ impl<T: Writer> ConsoleTestState<T> {\n     }\n }\n \n-pub fn fmt_metrics(mm: &MetricMap) -> String {\n-    let MetricMap(ref mm) = *mm;\n-    let v : Vec<String> = mm.iter()\n-        .map(|(k,v)| format!(\"{}: {} (+/- {})\", *k,\n-                             v.value as f64, v.noise as f64))\n-        .collect();\n-    v.connect(\", \")\n-}\n-\n pub fn fmt_bench_samples(bs: &BenchSamples) -> String {\n     if bs.mb_s != 0 {\n         format!(\"{:>9} ns/iter (+/- {}) = {} MB/s\",\n@@ -745,7 +689,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn> ) -> io::IoR\n         None => {}\n     }\n     try!(run_tests(opts, tests, |x| callback(&x, &mut st)));\n-    return st.write_run_finish(&None, None);\n+    return st.write_run_finish();\n }\n \n #[test]\n@@ -766,9 +710,6 @@ fn should_sort_failures_before_printing_them() {\n         log_out: None,\n         out: Raw(Vec::new()),\n         use_color: false,\n-        show_boxplot: false,\n-        boxplot_width: 0,\n-        show_all_stats: false,\n         total: 0u,\n         passed: 0u,\n         failed: 0u,\n@@ -1010,30 +951,6 @@ impl MetricMap {\n         MetricMap(BTreeMap::new())\n     }\n \n-    /// Load MetricDiff from a file.\n-    ///\n-    /// # Panics\n-    ///\n-    /// This function will panic if the path does not exist or the path does not\n-    /// contain a valid metric map.\n-    pub fn load(p: &Path) -> MetricMap {\n-        assert!(p.exists());\n-        let mut f = File::open(p).unwrap();\n-        let value = json::from_reader(&mut f as &mut io::Reader).unwrap();\n-        let mut decoder = json::Decoder::new(value);\n-        MetricMap(match Decodable::decode(&mut decoder) {\n-            Ok(t) => t,\n-            Err(e) => panic!(\"failure decoding JSON: {:?}\", e)\n-        })\n-    }\n-\n-    /// Write MetricDiff to a file.\n-    pub fn save(&self, p: &Path) -> io::IoResult<()> {\n-        let mut file = try!(File::create(p));\n-        let MetricMap(ref map) = *self;\n-        write!(&mut file, \"{}\", json::as_json(map))\n-    }\n-\n     /// Insert a named `value` (+/- `noise`) metric into the map. The value\n     /// must be non-negative. The `noise` indicates the uncertainty of the\n     /// metric, which doubles as the \"noise range\" of acceptable\n@@ -1055,6 +972,15 @@ impl MetricMap {\n         let MetricMap(ref mut map) = *self;\n         map.insert(name.to_string(), m);\n     }\n+\n+    pub fn fmt_metrics(&self) -> String {\n+        let MetricMap(ref mm) = *self;\n+        let v : Vec<String> = mm.iter()\n+            .map(|(k,v)| format!(\"{}: {} (+/- {})\", *k,\n+                                 v.value as f64, v.noise as f64))\n+            .collect();\n+        v.connect(\", \")\n+    }\n }\n \n "}, {"sha": "76b85cc10cd8931e82a2ee8e7f207120b1d35f14", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/4be79d6acde9eed3a9b5281a46f385bcb4ce736c/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be79d6acde9eed3a9b5281a46f385bcb4ce736c/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=4be79d6acde9eed3a9b5281a46f385bcb4ce736c", "patch": "@@ -13,9 +13,7 @@\n use std::cmp::Ordering::{self, Less, Greater, Equal};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::collections::hash_map::{self, Hasher};\n-use std::fmt;\n use std::hash::Hash;\n-use std::io;\n use std::mem;\n use std::num::{Float, FromPrimitive};\n \n@@ -332,111 +330,6 @@ pub fn winsorize<T: Float + FromPrimitive>(samples: &mut [T], pct: T) {\n     }\n }\n \n-/// Render writes the min, max and quartiles of the provided `Summary` to the provided `Writer`.\n-pub fn write_5_number_summary<W: Writer, T: Float + fmt::Display + fmt::Debug>(w: &mut W,\n-                                                          s: &Summary<T>) -> io::IoResult<()> {\n-    let (q1,q2,q3) = s.quartiles;\n-    write!(w, \"(min={}, q1={}, med={}, q3={}, max={})\",\n-                     s.min,\n-                     q1,\n-                     q2,\n-                     q3,\n-                     s.max)\n-}\n-\n-/// Render a boxplot to the provided writer. The boxplot shows the min, max and quartiles of the\n-/// provided `Summary` (thus includes the mean) and is scaled to display within the range of the\n-/// nearest multiple-of-a-power-of-ten above and below the min and max of possible values, and\n-/// target `width_hint` characters of display (though it will be wider if necessary).\n-///\n-/// As an example, the summary with 5-number-summary `(min=15, q1=17, med=20, q3=24, max=31)` might\n-/// display as:\n-///\n-/// ```{.ignore}\n-///   10 |        [--****#******----------]          | 40\n-/// ```\n-pub fn write_boxplot<W: Writer, T: Float + fmt::Display + fmt::Debug + FromPrimitive>(\n-                     w: &mut W,\n-                     s: &Summary<T>,\n-                     width_hint: uint)\n-                      -> io::IoResult<()> {\n-\n-    let (q1,q2,q3) = s.quartiles;\n-\n-    // the .abs() handles the case where numbers are negative\n-    let ten: T = FromPrimitive::from_uint(10).unwrap();\n-    let lomag = ten.powf(s.min.abs().log10().floor());\n-    let himag = ten.powf(s.max.abs().log10().floor());\n-\n-    // need to consider when the limit is zero\n-    let zero: T = Float::zero();\n-    let lo = if lomag == Float::zero() {\n-        zero\n-    } else {\n-        (s.min / lomag).floor() * lomag\n-    };\n-\n-    let hi = if himag == Float::zero() {\n-        zero\n-    } else {\n-        (s.max / himag).ceil() * himag\n-    };\n-\n-    let range = hi - lo;\n-\n-    let lostr = lo.to_string();\n-    let histr = hi.to_string();\n-\n-    let overhead_width = lostr.len() + histr.len() + 4;\n-    let range_width = width_hint - overhead_width;\n-    let range_float = FromPrimitive::from_uint(range_width).unwrap();\n-    let char_step = range / range_float;\n-\n-    try!(write!(w, \"{} |\", lostr));\n-\n-    let mut c = 0;\n-    let mut v = lo;\n-\n-    while c < range_width && v < s.min {\n-        try!(write!(w, \" \"));\n-        v = v + char_step;\n-        c += 1;\n-    }\n-    try!(write!(w, \"[\"));\n-    c += 1;\n-    while c < range_width && v < q1 {\n-        try!(write!(w, \"-\"));\n-        v = v + char_step;\n-        c += 1;\n-    }\n-    while c < range_width && v < q2 {\n-        try!(write!(w, \"*\"));\n-        v = v + char_step;\n-        c += 1;\n-    }\n-    try!(write!(w, \"#\"));\n-    c += 1;\n-    while c < range_width && v < q3 {\n-        try!(write!(w, \"*\"));\n-        v = v + char_step;\n-        c += 1;\n-    }\n-    while c < range_width && v < s.max {\n-        try!(write!(w, \"-\"));\n-        v = v + char_step;\n-        c += 1;\n-    }\n-    try!(write!(w, \"]\"));\n-    while c < range_width {\n-        try!(write!(w, \" \"));\n-        v = v + char_step;\n-        c += 1;\n-    }\n-\n-    try!(write!(w, \"| {}\", histr));\n-    Ok(())\n-}\n-\n /// Returns a HashMap with the number of occurrences of every element in the\n /// sequence that the iterator exposes.\n pub fn freq_count<T, U>(mut iter: T) -> hash_map::HashMap<U, uint>\n@@ -458,8 +351,6 @@ pub fn freq_count<T, U>(mut iter: T) -> hash_map::HashMap<U, uint>\n mod tests {\n     use stats::Stats;\n     use stats::Summary;\n-    use stats::write_5_number_summary;\n-    use stats::write_boxplot;\n     use std::io;\n     use std::f64;\n \n@@ -479,10 +370,6 @@ mod tests {\n         let mut w = io::stdout();\n         let w = &mut w;\n         (write!(w, \"\\n\")).unwrap();\n-        write_5_number_summary(w, &summ2).unwrap();\n-        (write!(w, \"\\n\")).unwrap();\n-        write_boxplot(w, &summ2, 50).unwrap();\n-        (write!(w, \"\\n\")).unwrap();\n \n         assert_eq!(summ.sum, summ2.sum);\n         assert_eq!(summ.min, summ2.min);\n@@ -1028,23 +915,6 @@ mod tests {\n         check(val, summ);\n     }\n \n-    #[test]\n-    fn test_boxplot_nonpositive() {\n-        fn t(s: &Summary<f64>, expected: String) {\n-            let mut m = Vec::new();\n-            write_boxplot(&mut m, s, 30).unwrap();\n-            let out = String::from_utf8(m).unwrap();\n-            assert_eq!(out, expected);\n-        }\n-\n-        t(&Summary::new(&[-2.0f64, -1.0f64]),\n-                        \"-2 |[------******#*****---]| -1\".to_string());\n-        t(&Summary::new(&[0.0f64, 2.0f64]),\n-                        \"0 |[-------*****#*******---]| 2\".to_string());\n-        t(&Summary::new(&[-2.0f64, 0.0f64]),\n-                        \"-2 |[------******#******---]| 0\".to_string());\n-\n-    }\n     #[test]\n     fn test_sum_f64s() {\n         assert_eq!([0.5f64, 3.2321f64, 1.5678f64].sum(), 5.2999);"}]}