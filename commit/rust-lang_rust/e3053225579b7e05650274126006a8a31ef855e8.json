{"sha": "e3053225579b7e05650274126006a8a31ef855e8", "node_id": "C_kwDOAAsO6NoAKGUzMDUzMjI1NTc5YjdlMDU2NTAyNzQxMjYwMDZhOGEzMWVmODU1ZTg", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-12-03T03:02:14Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-12-03T03:02:14Z"}, "message": "Merge remote-tracking branch 'upstream/master' into subtree-sync-2021-12-02", "tree": {"sha": "32704f39ca53be4c5cb1602b20478fb3d28ee1a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32704f39ca53be4c5cb1602b20478fb3d28ee1a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3053225579b7e05650274126006a8a31ef855e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3053225579b7e05650274126006a8a31ef855e8", "html_url": "https://github.com/rust-lang/rust/commit/e3053225579b7e05650274126006a8a31ef855e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3053225579b7e05650274126006a8a31ef855e8/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99469d7c446e95da1e41ecb224abf6721e2f599", "url": "https://api.github.com/repos/rust-lang/rust/commits/f99469d7c446e95da1e41ecb224abf6721e2f599", "html_url": "https://github.com/rust-lang/rust/commit/f99469d7c446e95da1e41ecb224abf6721e2f599"}, {"sha": "ec46ffd981d3d50572f1ad3f6033a7c33d27033f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec46ffd981d3d50572f1ad3f6033a7c33d27033f", "html_url": "https://github.com/rust-lang/rust/commit/ec46ffd981d3d50572f1ad3f6033a7c33d27033f"}], "stats": {"total": 2165, "additions": 1730, "deletions": 435}, "files": [{"sha": "db497941642122c107bb3335a7520bcd1761647d", "filename": ".github/workflows/linux.yml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/.github%2Fworkflows%2Flinux.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/.github%2Fworkflows%2Flinux.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Flinux.yml?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -8,7 +8,9 @@ on:\n jobs:\n   test:\n     runs-on: ubuntu-latest\n-    name: (${{ matrix.target }}, nightly)\n+    name: (${{ matrix.target }}, ${{ matrix.cfg_release_channel }})\n+    env:\n+      CFG_RELEASE_CHANNEL: ${{ matrix.cfg_release_channel }}\n     strategy:\n       # https://help.github.com/en/actions/getting-started-with-github-actions/about-github-actions#usage-limits\n       # There's a limit of 60 concurrent jobs across all repos in the rust-lang organization.\n@@ -20,6 +22,7 @@ jobs:\n         target: [\n           x86_64-unknown-linux-gnu,\n         ]\n+        cfg_release_channel: [nightly, stable]\n \n     steps:\n     - name: checkout"}, {"sha": "55e1cc9539b8508db5234f9fde51191b40644c43", "filename": ".github/workflows/mac.yml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/.github%2Fworkflows%2Fmac.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/.github%2Fworkflows%2Fmac.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmac.yml?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -10,13 +10,16 @@ jobs:\n     # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/virtual-environments-for-github-hosted-runners#supported-runners-and-hardware-resources\n     # macOS Catalina 10.15\n     runs-on: macos-latest\n-    name: (${{ matrix.target }}, nightly)\n+    name: (${{ matrix.target }}, ${{ matrix.cfg_release_channel }})\n+    env:\n+      CFG_RELEASE_CHANNEL: ${{ matrix.cfg_release_channel }}\n     strategy:\n       fail-fast: false\n       matrix:\n         target: [\n           x86_64-apple-darwin,\n         ]\n+        cfg_release_channel: [nightly, stable]\n \n     steps:\n     - name: checkout"}, {"sha": "dcb08b5412ea6c421c6ac3bf1971f4eb3d291f77", "filename": ".github/workflows/windows.yml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/.github%2Fworkflows%2Fwindows.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/.github%2Fworkflows%2Fwindows.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fwindows.yml?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -8,7 +8,9 @@ on:\n jobs:\n   test:\n     runs-on: windows-latest\n-    name: (${{ matrix.target }}, nightly)\n+    name: (${{ matrix.target }}, ${{ matrix.cfg_release_channel }})\n+    env:\n+      CFG_RELEASE_CHANNEL: ${{ matrix.cfg_release_channel }}\n     strategy:\n       # https://help.github.com/en/actions/getting-started-with-github-actions/about-github-actions#usage-limits\n       # There's a limit of 60 concurrent jobs across all repos in the rust-lang organization.\n@@ -23,6 +25,7 @@ jobs:\n           x86_64-pc-windows-gnu,\n           x86_64-pc-windows-msvc,\n         ]\n+        cfg_release_channel: [nightly, stable]\n \n     steps:\n     # The Windows runners have autocrlf enabled by default"}, {"sha": "a89fbe863e65283ce47ca0e36f87a0267058eb52", "filename": "Configurations.md", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -47,7 +47,7 @@ Where to put a binary operator when a binary expression goes multiline.\n \n - **Default value**: `\"Front\"`\n - **Possible values**: `\"Front\"`, `\"Back\"`\n-- **Stable**: No (tracking issue: #3368)\n+- **Stable**: No (tracking issue: [#3368](https://github.com/rust-lang/rustfmt/issues/3368))\n \n #### `\"Front\"` (default):\n \n@@ -88,7 +88,7 @@ them, additional blank lines are inserted.\n \n - **Default value**: `0`\n - **Possible values**: *unsigned integer*\n-- **Stable**: No (tracking issue: #3382)\n+- **Stable**: No (tracking issue: [#3382](https://github.com/rust-lang/rustfmt/issues/3382))\n \n ### Example\n Original Code (rustfmt will not change it with the default value of `0`):\n@@ -128,7 +128,7 @@ lines are found, they are trimmed down to match this integer.\n \n - **Default value**: `1`\n - **Possible values**: any non-negative integer\n-- **Stable**: No (tracking issue: #3381)\n+- **Stable**: No (tracking issue: [#3381](https://github.com/rust-lang/rustfmt/issues/3381))\n \n ### Example\n Original Code:\n@@ -186,7 +186,7 @@ Brace style for items\n \n - **Default value**: `\"SameLineWhere\"`\n - **Possible values**: `\"AlwaysNextLine\"`, `\"PreferSameLine\"`, `\"SameLineWhere\"`\n-- **Stable**: No (tracking issue: #3376)\n+- **Stable**: No (tracking issue: [#3376](https://github.com/rust-lang/rustfmt/issues/3376))\n \n ### Functions\n \n@@ -313,15 +313,15 @@ Whether to use colored output or not.\n \n - **Default value**: `\"Auto\"`\n - **Possible values**: \"Auto\", \"Always\", \"Never\"\n-- **Stable**: No (tracking issue: #3385)\n+- **Stable**: No (tracking issue: [#3385](https://github.com/rust-lang/rustfmt/issues/3385))\n \n ## `combine_control_expr`\n \n Combine control expressions with function calls.\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3369)\n+- **Stable**: No (tracking issue: [#3369](https://github.com/rust-lang/rustfmt/issues/3369))\n \n #### `true` (default):\n \n@@ -429,7 +429,7 @@ Maximum length of comments. No effect unless`wrap_comments = true`.\n \n - **Default value**: `80`\n - **Possible values**: any positive integer\n-- **Stable**: No (tracking issue: #3349)\n+- **Stable**: No (tracking issue: [#3349](https://github.com/rust-lang/rustfmt/issues/3349))\n \n **Note:** A value of `0` results in [`wrap_comments`](#wrap_comments) being applied regardless of a line's width.\n \n@@ -452,7 +452,7 @@ Replace strings of _ wildcards by a single .. in tuple patterns\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3384)\n+- **Stable**: No (tracking issue: [#3384](https://github.com/rust-lang/rustfmt/issues/3384))\n \n #### `false` (default):\n \n@@ -477,7 +477,7 @@ Brace style for control flow constructs\n \n - **Default value**: `\"AlwaysSameLine\"`\n - **Possible values**: `\"AlwaysNextLine\"`, `\"AlwaysSameLine\"`, `\"ClosingNextLine\"`\n-- **Stable**: No (tracking issue: #3377)\n+- **Stable**: No (tracking issue: [#3377](https://github.com/rust-lang/rustfmt/issues/3377))\n \n #### `\"AlwaysSameLine\"` (default):\n \n@@ -551,7 +551,7 @@ Put empty-body functions and impls on a single line\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3356)\n+- **Stable**: No (tracking issue: [#3356](https://github.com/rust-lang/rustfmt/issues/3356))\n \n #### `true` (default):\n \n@@ -584,7 +584,7 @@ doesn't get ignored when aligning.\n \n - **Default value** : 0\n - **Possible values**: any positive integer\n-- **Stable**: No (tracking issue: #3372)\n+- **Stable**: No (tracking issue: [#3372](https://github.com/rust-lang/rustfmt/issues/3372))\n \n #### `0` (default):\n \n@@ -630,7 +630,7 @@ using a shorter name.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3391)\n+- **Stable**: No (tracking issue: [#3391](https://github.com/rust-lang/rustfmt/issues/3391))\n \n See also [`max_width`](#max_width).\n \n@@ -641,7 +641,7 @@ trailing whitespaces.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3392)\n+- **Stable**: No (tracking issue: [#3392](https://github.com/rust-lang/rustfmt/issues/3392))\n \n ## `fn_args_layout`\n \n@@ -771,7 +771,7 @@ Put single-expression functions on a single line\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3358)\n+- **Stable**: No (tracking issue: [#3358](https://github.com/rust-lang/rustfmt/issues/3358))\n \n #### `false` (default):\n \n@@ -832,7 +832,7 @@ Force multiline closure and match arm bodies to be wrapped in a block\n \n - **Default value**: `false`\n - **Possible values**: `false`, `true`\n-- **Stable**: No (tracking issue: #3374)\n+- **Stable**: No (tracking issue: [#3374](https://github.com/rust-lang/rustfmt/issues/3374))\n \n #### `false` (default):\n \n@@ -881,7 +881,7 @@ Format code snippet included in doc comments.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3348)\n+- **Stable**: No (tracking issue: [#3348](https://github.com/rust-lang/rustfmt/issues/3348))\n \n #### `false` (default):\n \n@@ -933,15 +933,15 @@ if any of the first five lines contains `@generated` marker.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: [#5080](https://github.com/rust-lang/rustfmt/issues/5080))\n \n ## `format_macro_matchers`\n \n Format the metavariable matching patterns in macros.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3354)\n+- **Stable**: No (tracking issue: [#3354](https://github.com/rust-lang/rustfmt/issues/3354))\n \n #### `false` (default):\n \n@@ -978,7 +978,7 @@ Format the bodies of macros.\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3355)\n+- **Stable**: No (tracking issue: [#3355](https://github.com/rust-lang/rustfmt/issues/3355))\n \n #### `true` (default):\n \n@@ -1011,7 +1011,7 @@ Format string literals where necessary\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3353)\n+- **Stable**: No (tracking issue: [#3353](https://github.com/rust-lang/rustfmt/issues/3353))\n \n #### `false` (default):\n \n@@ -1064,15 +1064,15 @@ Control the case of the letters in hexadecimal literal values\n \n - **Default value**: `Preserve`\n - **Possible values**: `Upper`, `Lower`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: [#5081](https://github.com/rust-lang/rustfmt/issues/5081))\n \n ## `hide_parse_errors`\n \n Do not show parse errors if the parser failed to parse files.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3390)\n+- **Stable**: No (tracking issue: [#3390](https://github.com/rust-lang/rustfmt/issues/3390))\n \n ## `ignore`\n \n@@ -1081,7 +1081,7 @@ The pattern format is the same as [.gitignore](https://git-scm.com/docs/gitignor\n \n - **Default value**: format every file\n - **Possible values**: See an example below\n-- **Stable**: No (tracking issue: #3395)\n+- **Stable**: No (tracking issue: [#3395](https://github.com/rust-lang/rustfmt/issues/3395))\n \n ### Example\n \n@@ -1114,7 +1114,7 @@ Indent style of imports\n \n - **Default Value**: `\"Block\"`\n - **Possible values**: `\"Block\"`, `\"Visual\"`\n-- **Stable**: No (tracking issue: #3360)\n+- **Stable**: No (tracking issue: [#3360](https://github.com/rust-lang/rustfmt/issues/3360))\n \n #### `\"Block\"` (default):\n \n@@ -1140,7 +1140,7 @@ Item layout inside a imports block\n \n - **Default value**: \"Mixed\"\n - **Possible values**: \"Horizontal\", \"HorizontalVertical\", \"Mixed\", \"Vertical\"\n-- **Stable**: No (tracking issue: #3361)\n+- **Stable**: No (tracking issue: [#3361](https://github.com/rust-lang/rustfmt/issues/3361))\n \n #### `\"Mixed\"` (default):\n \n@@ -1203,7 +1203,7 @@ Indent on expressions or items.\n \n - **Default value**: `\"Block\"`\n - **Possible values**: `\"Block\"`, `\"Visual\"`\n-- **Stable**: No (tracking issue: #3346)\n+- **Stable**: No (tracking issue: [#3346](https://github.com/rust-lang/rustfmt/issues/3346))\n \n ### Array\n \n@@ -1456,7 +1456,7 @@ Write an item and its attribute on the same line if their combined width is belo\n \n - **Default value**: 0\n - **Possible values**: any positive integer\n-- **Stable**: No (tracking issue: #3343)\n+- **Stable**: No (tracking issue: [#3343](https://github.com/rust-lang/rustfmt/issues/3343))\n \n ### Example\n \n@@ -1477,7 +1477,7 @@ Check whether beginnings of files match a license template.\n \n - **Default value**: `\"\"`\n - **Possible values**: path to a license template file\n-- **Stable**: No (tracking issue: #3352)\n+- **Stable**: No (tracking issue: [#3352](https://github.com/rust-lang/rustfmt/issues/3352))\n \n A license template is a plain text file which is matched literally against the\n beginning of each source file, except for `{}`-delimited blocks, which are\n@@ -1499,7 +1499,7 @@ The Style Guide requires that bodies are block wrapped by default if a line brea\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3373)\n+- **Stable**: No (tracking issue: [#3373](https://github.com/rust-lang/rustfmt/issues/3373))\n \n #### `true` (default):\n \n@@ -1701,7 +1701,7 @@ How imports should be grouped into `use` statements. Imports will be merged or s\n \n - **Default value**: `Preserve`\n - **Possible values**: `Preserve`, `Crate`, `Module`, `Item`, `One`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: [#4991](https://github.com/rust-lang/rustfmt/issues/4991))\n \n #### `Preserve` (default):\n \n@@ -1826,7 +1826,7 @@ Convert /* */ comments to // comments where possible\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3350)\n+- **Stable**: No (tracking issue: [#3350](https://github.com/rust-lang/rustfmt/issues/3350))\n \n #### `false` (default):\n \n@@ -1854,7 +1854,7 @@ Convert `#![doc]` and `#[doc]` attributes to `//!` and `///` doc comments.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3351)\n+- **Stable**: No (tracking issue: [#3351](https://github.com/rust-lang/rustfmt/issues/3351))\n \n #### `false` (default):\n \n@@ -1885,7 +1885,7 @@ instead of being indented on a new line.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3370)\n+- **Stable**: No (tracking issue: [#3370](https://github.com/rust-lang/rustfmt/issues/3370))\n \n #### `false` (default):\n \n@@ -1992,7 +1992,7 @@ Reorder impl items. `type` and `const` are put first, then macros and methods.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3363)\n+- **Stable**: No (tracking issue: [#3363](https://github.com/rust-lang/rustfmt/issues/3363))\n \n #### `false` (default)\n \n@@ -2063,7 +2063,7 @@ Controls the strategy for how imports are grouped together.\n \n - **Default value**: `Preserve`\n - **Possible values**: `Preserve`, `StdExternalCrate`, `One`\n-- **Stable**: No\n+- **Stable**: No (tracking issue: [#5083](https://github.com/rust-lang/rustfmt/issues/5083))\n \n #### `Preserve` (default):\n \n@@ -2166,7 +2166,7 @@ Report `FIXME` items in comments.\n \n - **Default value**: `\"Never\"`\n - **Possible values**: `\"Always\"`, `\"Unnumbered\"`, `\"Never\"`\n-- **Stable**: No (tracking issue: #3394)\n+- **Stable**: No (tracking issue: [#3394](https://github.com/rust-lang/rustfmt/issues/3394))\n \n Warns about any comments containing `FIXME` in them when set to `\"Always\"`. If\n it contains a `#X` (with `X` being a number) in parentheses following the\n@@ -2181,7 +2181,7 @@ Report `TODO` items in comments.\n \n - **Default value**: `\"Never\"`\n - **Possible values**: `\"Always\"`, `\"Unnumbered\"`, `\"Never\"`\n-- **Stable**: No (tracking issue: #3393)\n+- **Stable**: No (tracking issue: [#3393](https://github.com/rust-lang/rustfmt/issues/3393))\n \n Warns about any comments containing `TODO` in them when set to `\"Always\"`. If\n it contains a `#X` (with `X` being a number) in parentheses following the\n@@ -2196,15 +2196,15 @@ specific version of rustfmt is used in your CI, use this option.\n \n - **Default value**: `CARGO_PKG_VERSION`\n - **Possible values**: any published version (e.g. `\"0.3.8\"`)\n-- **Stable**: No (tracking issue: #3386)\n+- **Stable**: No (tracking issue: [#3386](https://github.com/rust-lang/rustfmt/issues/3386))\n \n ## `skip_children`\n \n Don't reformat out of line modules\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3389)\n+- **Stable**: No (tracking issue: [#3389](https://github.com/rust-lang/rustfmt/issues/3386))\n \n ## `single_line_if_else_max_width`\n \n@@ -2224,7 +2224,7 @@ Leave a space after the colon.\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3366)\n+- **Stable**: No (tracking issue: [#3366](https://github.com/rust-lang/rustfmt/issues/3366))\n \n #### `true` (default):\n \n@@ -2256,7 +2256,7 @@ Leave a space before the colon.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3365)\n+- **Stable**: No (tracking issue: [#3365](https://github.com/rust-lang/rustfmt/issues/3365))\n \n #### `false` (default):\n \n@@ -2288,7 +2288,7 @@ Put spaces around the .., ..=, and ... range operators\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3367)\n+- **Stable**: No (tracking issue: [#3367](https://github.com/rust-lang/rustfmt/issues/3367))\n \n #### `false` (default):\n \n@@ -2344,7 +2344,7 @@ The maximum diff of width between struct fields to be aligned with each other.\n \n - **Default value** : 0\n - **Possible values**: any non-negative integer\n-- **Stable**: No (tracking issue: #3371)\n+- **Stable**: No (tracking issue: [#3371](https://github.com/rust-lang/rustfmt/issues/3371))\n \n #### `0` (default):\n \n@@ -2372,7 +2372,7 @@ Put small struct literals on a single line\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3357)\n+- **Stable**: No (tracking issue: [#3357](https://github.com/rust-lang/rustfmt/issues/3357))\n \n #### `true` (default):\n \n@@ -2460,7 +2460,7 @@ How to handle trailing commas for lists\n \n - **Default value**: `\"Vertical\"`\n - **Possible values**: `\"Always\"`, `\"Never\"`, `\"Vertical\"`\n-- **Stable**: No (tracking issue: #3379)\n+- **Stable**: No (tracking issue: [#3379](https://github.com/rust-lang/rustfmt/issues/3379))\n \n #### `\"Vertical\"` (default):\n \n@@ -2518,7 +2518,7 @@ Add trailing semicolon after break, continue and return\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3378)\n+- **Stable**: No (tracking issue: [#3378](https://github.com/rust-lang/rustfmt/issues/3378))\n \n #### `true` (default):\n ```rust\n@@ -2540,7 +2540,7 @@ Determines if `+` or `=` are wrapped in spaces in the punctuation of types\n \n - **Default value**: `\"Wide\"`\n - **Possible values**: `\"Compressed\"`, `\"Wide\"`\n-- **Stable**: No (tracking issue: #3364)\n+- **Stable**: No (tracking issue: [#3364](https://github.com/rust-lang/rustfmt/issues/3364))\n \n #### `\"Wide\"` (default):\n \n@@ -2564,7 +2564,7 @@ Enable unstable features on the unstable channel.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3387)\n+- **Stable**: No (tracking issue: [#3387](https://github.com/rust-lang/rustfmt/issues/3387))\n \n ## `use_field_init_shorthand`\n \n@@ -2779,7 +2779,7 @@ version number.\n \n - **Default value**: `One`\n - **Possible values**: `One`, `Two`\n-- **Stable**: No (tracking issue: #3383)\n+- **Stable**: No (tracking issue: [#3383](https://github.com/rust-lang/rustfmt/issues/3383))\n \n ### Example\n \n@@ -2793,7 +2793,7 @@ Forces the `where` clause to be laid out on a single line.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3359)\n+- **Stable**: No (tracking issue: [#3359](https://github.com/rust-lang/rustfmt/issues/3359))\n \n #### `false` (default):\n \n@@ -2825,7 +2825,7 @@ Break comments to fit on the line\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3347)\n+- **Stable**: No (tracking issue: [#3347](https://github.com/rust-lang/rustfmt/issues/3347))\n \n #### `false` (default):\n "}, {"sha": "b3a968f0c043e30f10badc3853a3b5652e082eee", "filename": "README.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -48,12 +48,11 @@ cargo +nightly fmt\n ## Limitations\n \n Rustfmt tries to work on as much Rust code as possible. Sometimes, the code\n-doesn't even need to compile! As we approach a 1.0 release we are also looking\n-to limit areas of instability; in particular, post-1.0, the formatting of most\n-code should not change as Rustfmt improves. However, there are some things that\n-Rustfmt can't do or can't do well (and thus where formatting might change\n-significantly, even post-1.0). We would like to reduce the list of limitations\n-over time.\n+doesn't even need to compile! In general, we are looking to limit areas of\n+instability; in particular, post-1.0, the formatting of most code should not\n+change as Rustfmt improves. However, there are some things that Rustfmt can't\n+do or can't do well (and thus where formatting might change significantly,\n+even post-1.0). We would like to reduce the list of limitations over time.\n \n The following list enumerates areas where Rustfmt does not work or where the\n stability guarantees do not apply (we don't make a distinction between the two"}, {"sha": "513018213192df3625b11f5b87fc88673c00e5cf", "filename": "config_proc_macro/src/lib.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/config_proc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/config_proc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Flib.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -8,6 +8,8 @@ mod item_enum;\n mod item_struct;\n mod utils;\n \n+use std::str::FromStr;\n+\n use proc_macro::TokenStream;\n use syn::parse_macro_input;\n \n@@ -23,3 +25,43 @@ pub fn config_type(_args: TokenStream, input: TokenStream) -> TokenStream {\n \n     TokenStream::from(output)\n }\n+\n+/// Used to conditionally output the TokenStream for tests that need to be run on nightly only.\n+///\n+/// ```rust\n+/// #[nightly_only_test]\n+/// #[test]\n+/// fn test_needs_nightly_rustfmt() {\n+///   assert!(true);\n+/// }\n+/// ```\n+#[proc_macro_attribute]\n+pub fn nightly_only_test(_args: TokenStream, input: TokenStream) -> TokenStream {\n+    // if CFG_RELEASE_CHANNEL is not set we default to nightly, hence why the default is true\n+    if option_env!(\"CFG_RELEASE_CHANNEL\").map_or(true, |c| c == \"nightly\" || c == \"dev\") {\n+        input\n+    } else {\n+        // output an empty token stream if CFG_RELEASE_CHANNEL is not set to \"nightly\" or \"dev\"\n+        TokenStream::from_str(\"\").unwrap()\n+    }\n+}\n+\n+/// Used to conditionally output the TokenStream for tests that need to be run on stable only.\n+///\n+/// ```rust\n+/// #[stable_only_test]\n+/// #[test]\n+/// fn test_needs_stable_rustfmt() {\n+///   assert!(true);\n+/// }\n+/// ```\n+#[proc_macro_attribute]\n+pub fn stable_only_test(_args: TokenStream, input: TokenStream) -> TokenStream {\n+    // if CFG_RELEASE_CHANNEL is not set we default to nightly, hence why the default is false\n+    if option_env!(\"CFG_RELEASE_CHANNEL\").map_or(false, |c| c == \"stable\") {\n+        input\n+    } else {\n+        // output an empty token stream if CFG_RELEASE_CHANNEL is not set or is not 'stable'\n+        TokenStream::from_str(\"\").unwrap()\n+    }\n+}"}, {"sha": "0f850b9b2f2fba2b84be6e51101161fbf5773a2e", "filename": "src/comment.rs", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -3,6 +3,8 @@\n use std::{self, borrow::Cow, iter};\n \n use itertools::{multipeek, MultiPeek};\n+use lazy_static::lazy_static;\n+use regex::Regex;\n use rustc_span::Span;\n \n use crate::config::Config;\n@@ -15,6 +17,17 @@ use crate::utils::{\n };\n use crate::{ErrorKind, FormattingError};\n \n+lazy_static! {\n+    /// A regex matching reference doc links.\n+    ///\n+    /// ```markdown\n+    /// /// An [example].\n+    /// ///\n+    /// /// [example]: this::is::a::link\n+    /// ```\n+    static ref REFERENCE_LINK_URL: Regex = Regex::new(r\"^\\[.+\\]\\s?:\").unwrap();\n+}\n+\n fn is_custom_comment(comment: &str) -> bool {\n     if !comment.starts_with(\"//\") {\n         false\n@@ -506,6 +519,7 @@ struct CommentRewrite<'a> {\n     opener: String,\n     closer: String,\n     line_start: String,\n+    style: CommentStyle<'a>,\n }\n \n impl<'a> CommentRewrite<'a> {\n@@ -515,10 +529,14 @@ impl<'a> CommentRewrite<'a> {\n         shape: Shape,\n         config: &'a Config,\n     ) -> CommentRewrite<'a> {\n-        let (opener, closer, line_start) = if block_style {\n-            CommentStyle::SingleBullet.to_str_tuplet()\n+        let ((opener, closer, line_start), style) = if block_style {\n+            (\n+                CommentStyle::SingleBullet.to_str_tuplet(),\n+                CommentStyle::SingleBullet,\n+            )\n         } else {\n-            comment_style(orig, config.normalize_comments()).to_str_tuplet()\n+            let style = comment_style(orig, config.normalize_comments());\n+            (style.to_str_tuplet(), style)\n         };\n \n         let max_width = shape\n@@ -551,6 +569,7 @@ impl<'a> CommentRewrite<'a> {\n             opener: opener.to_owned(),\n             closer: closer.to_owned(),\n             line_start: line_start.to_owned(),\n+            style,\n         };\n         cr.result.push_str(opener);\n         cr\n@@ -570,6 +589,15 @@ impl<'a> CommentRewrite<'a> {\n         result\n     }\n \n+    /// Check if any characters were written to the result buffer after the start of the comment.\n+    /// when calling [`CommentRewrite::new()`] the result buffer is initiazlied with the opening\n+    /// characters for the comment.\n+    fn buffer_contains_comment(&self) -> bool {\n+        // if self.result.len() < self.opener.len() then an empty comment is in the buffer\n+        // if self.result.len() > self.opener.len() then a non empty comment is in the buffer\n+        self.result.len() != self.opener.len()\n+    }\n+\n     fn finish(mut self) -> String {\n         if !self.code_block_buffer.is_empty() {\n             // There is a code block that is not properly enclosed by backticks.\n@@ -585,7 +613,12 @@ impl<'a> CommentRewrite<'a> {\n             // the last few lines are part of an itemized block\n             self.fmt.shape = Shape::legacy(self.max_width, self.fmt_indent);\n             let item_fmt = ib.create_string_format(&self.fmt);\n-            self.result.push_str(&self.comment_line_separator);\n+\n+            // only push a comment_line_separator for ItemizedBlocks if the comment is not empty\n+            if self.buffer_contains_comment() {\n+                self.result.push_str(&self.comment_line_separator);\n+            }\n+\n             self.result.push_str(&ib.opener);\n             match rewrite_string(\n                 &ib.trimmed_block_as_string(),\n@@ -619,7 +652,13 @@ impl<'a> CommentRewrite<'a> {\n         line: &'a str,\n         has_leading_whitespace: bool,\n     ) -> bool {\n-        let is_last = i == count_newlines(orig);\n+        let num_newlines = count_newlines(orig);\n+        let is_last = i == num_newlines;\n+        let needs_new_comment_line = if self.style.is_block_comment() {\n+            num_newlines > 0 || self.buffer_contains_comment()\n+        } else {\n+            self.buffer_contains_comment()\n+        };\n \n         if let Some(ref mut ib) = self.item_block {\n             if ib.add_line(line) {\n@@ -628,7 +667,12 @@ impl<'a> CommentRewrite<'a> {\n             self.is_prev_line_multi_line = false;\n             self.fmt.shape = Shape::legacy(self.max_width, self.fmt_indent);\n             let item_fmt = ib.create_string_format(&self.fmt);\n-            self.result.push_str(&self.comment_line_separator);\n+\n+            // only push a comment_line_separator if we need to start a new comment line\n+            if needs_new_comment_line {\n+                self.result.push_str(&self.comment_line_separator);\n+            }\n+\n             self.result.push_str(&ib.opener);\n             match rewrite_string(\n                 &ib.trimmed_block_as_string(),\n@@ -842,7 +886,11 @@ fn trim_custom_comment_prefix(s: &str) -> String {\n /// Returns `true` if the given string MAY include URLs or alike.\n fn has_url(s: &str) -> bool {\n     // This function may return false positive, but should get its job done in most cases.\n-    s.contains(\"https://\") || s.contains(\"http://\") || s.contains(\"ftp://\") || s.contains(\"file://\")\n+    s.contains(\"https://\")\n+        || s.contains(\"http://\")\n+        || s.contains(\"ftp://\")\n+        || s.contains(\"file://\")\n+        || REFERENCE_LINK_URL.is_match(s)\n }\n \n /// Given the span, rewrite the missing comment inside it if available."}, {"sha": "5dbe532ac388fee287d48ee200e7d2bed65e8206", "filename": "src/config/mod.rs", "status": "modified", "additions": 36, "deletions": 50, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -405,6 +405,8 @@ mod test {\n     use super::*;\n     use std::str;\n \n+    use rustfmt_config_proc_macro::{nightly_only_test, stable_only_test};\n+\n     #[allow(dead_code)]\n     mod mock {\n         use super::super::*;\n@@ -525,21 +527,17 @@ mod test {\n         assert!(config.license_template.is_none());\n     }\n \n+    #[nightly_only_test]\n     #[test]\n     fn test_valid_license_template_path() {\n-        if !crate::is_nightly_channel!() {\n-            return;\n-        }\n         let toml = r#\"license_template_path = \"tests/license-template/lt.txt\"\"#;\n         let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n         assert!(config.license_template.is_some());\n     }\n \n+    #[nightly_only_test]\n     #[test]\n     fn test_override_existing_license_with_no_license() {\n-        if !crate::is_nightly_channel!() {\n-            return;\n-        }\n         let toml = r#\"license_template_path = \"tests/license-template/lt.txt\"\"#;\n         let mut config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n         assert!(config.license_template.is_some());\n@@ -634,48 +632,42 @@ make_backup = false\n         assert_eq!(&toml, &default_config);\n     }\n \n-    // FIXME(#2183): these tests cannot be run in parallel because they use env vars.\n-    // #[test]\n-    // fn test_as_not_nightly_channel() {\n-    //     let mut config = Config::default();\n-    //     assert_eq!(config.was_set().unstable_features(), false);\n-    //     config.set().unstable_features(true);\n-    //     assert_eq!(config.was_set().unstable_features(), false);\n-    // }\n-\n-    // #[test]\n-    // fn test_as_nightly_channel() {\n-    //     let v = ::std::env::var(\"CFG_RELEASE_CHANNEL\").unwrap_or(String::from(\"\"));\n-    //     ::std::env::set_var(\"CFG_RELEASE_CHANNEL\", \"nightly\");\n-    //     let mut config = Config::default();\n-    //     config.set().unstable_features(true);\n-    //     assert_eq!(config.was_set().unstable_features(), false);\n-    //     config.set().unstable_features(true);\n-    //     assert_eq!(config.unstable_features(), true);\n-    //     ::std::env::set_var(\"CFG_RELEASE_CHANNEL\", v);\n-    // }\n-\n-    // #[test]\n-    // fn test_unstable_from_toml() {\n-    //     let mut config = Config::from_toml(\"unstable_features = true\").unwrap();\n-    //     assert_eq!(config.was_set().unstable_features(), false);\n-    //     let v = ::std::env::var(\"CFG_RELEASE_CHANNEL\").unwrap_or(String::from(\"\"));\n-    //     ::std::env::set_var(\"CFG_RELEASE_CHANNEL\", \"nightly\");\n-    //     config = Config::from_toml(\"unstable_features = true\").unwrap();\n-    //     assert_eq!(config.was_set().unstable_features(), true);\n-    //     assert_eq!(config.unstable_features(), true);\n-    //     ::std::env::set_var(\"CFG_RELEASE_CHANNEL\", v);\n-    // }\n+    #[stable_only_test]\n+    #[test]\n+    fn test_as_not_nightly_channel() {\n+        let mut config = Config::default();\n+        assert_eq!(config.was_set().unstable_features(), false);\n+        config.set().unstable_features(true);\n+        assert_eq!(config.was_set().unstable_features(), false);\n+    }\n+\n+    #[nightly_only_test]\n+    #[test]\n+    fn test_as_nightly_channel() {\n+        let mut config = Config::default();\n+        config.set().unstable_features(true);\n+        // When we don't set the config from toml or command line options it\n+        // doesn't get marked as set by the user.\n+        assert_eq!(config.was_set().unstable_features(), false);\n+        config.set().unstable_features(true);\n+        assert_eq!(config.unstable_features(), true);\n+    }\n+\n+    #[nightly_only_test]\n+    #[test]\n+    fn test_unstable_from_toml() {\n+        let config = Config::from_toml(\"unstable_features = true\", Path::new(\"\")).unwrap();\n+        assert_eq!(config.was_set().unstable_features(), true);\n+        assert_eq!(config.unstable_features(), true);\n+    }\n \n     #[cfg(test)]\n     mod deprecated_option_merge_imports {\n         use super::*;\n \n+        #[nightly_only_test]\n         #[test]\n         fn test_old_option_set() {\n-            if !crate::is_nightly_channel!() {\n-                return;\n-            }\n             let toml = r#\"\n                 unstable_features = true\n                 merge_imports = true\n@@ -684,11 +676,9 @@ make_backup = false\n             assert_eq!(config.imports_granularity(), ImportGranularity::Crate);\n         }\n \n+        #[nightly_only_test]\n         #[test]\n         fn test_both_set() {\n-            if !crate::is_nightly_channel!() {\n-                return;\n-            }\n             let toml = r#\"\n                 unstable_features = true\n                 merge_imports = true\n@@ -698,11 +688,9 @@ make_backup = false\n             assert_eq!(config.imports_granularity(), ImportGranularity::Preserve);\n         }\n \n+        #[nightly_only_test]\n         #[test]\n         fn test_new_overridden() {\n-            if !crate::is_nightly_channel!() {\n-                return;\n-            }\n             let toml = r#\"\n                 unstable_features = true\n                 merge_imports = true\n@@ -712,11 +700,9 @@ make_backup = false\n             assert_eq!(config.imports_granularity(), ImportGranularity::Preserve);\n         }\n \n+        #[nightly_only_test]\n         #[test]\n         fn test_old_overridden() {\n-            if !crate::is_nightly_channel!() {\n-                return;\n-            }\n             let toml = r#\"\n                 unstable_features = true\n                 imports_granularity = \"Module\""}, {"sha": "5fd86c1a4eadd2172394a0d871da875ff71c8e34", "filename": "src/expr.rs", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -196,9 +196,10 @@ pub(crate) fn format_expr(\n                 capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n             )\n         }\n-        ast::ExprKind::Try(..) | ast::ExprKind::Field(..) | ast::ExprKind::MethodCall(..) => {\n-            rewrite_chain(expr, context, shape)\n-        }\n+        ast::ExprKind::Try(..)\n+        | ast::ExprKind::Field(..)\n+        | ast::ExprKind::MethodCall(..)\n+        | ast::ExprKind::Await(_) => rewrite_chain(expr, context, shape),\n         ast::ExprKind::MacCall(ref mac) => {\n             rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n                 wrap_str(\n@@ -377,7 +378,6 @@ pub(crate) fn format_expr(\n                 ))\n             }\n         }\n-        ast::ExprKind::Await(_) => rewrite_chain(expr, context, shape),\n         ast::ExprKind::Underscore => Some(\"_\".to_owned()),\n         ast::ExprKind::Err => None,\n     };\n@@ -829,6 +829,7 @@ impl<'a> ControlFlow<'a> {\n                 &format!(\"{}{}{}\", matcher, pat_string, self.connector),\n                 expr,\n                 cond_shape,\n+                &RhsAssignKind::Expr(&expr.kind, expr.span),\n                 RhsTactics::Default,\n                 comments_span,\n                 true,\n@@ -1839,6 +1840,34 @@ fn rewrite_unary_op(\n     rewrite_unary_prefix(context, ast::UnOp::to_string(op), expr, shape)\n }\n \n+pub(crate) enum RhsAssignKind<'ast> {\n+    Expr(&'ast ast::ExprKind, Span),\n+    Bounds,\n+    Ty,\n+}\n+\n+impl<'ast> RhsAssignKind<'ast> {\n+    // TODO(calebcartwright)\n+    // Preemptive addition for handling RHS with chains, not yet utilized.\n+    // It may make more sense to construct the chain first and then check\n+    // whether there are actually chain elements.\n+    #[allow(dead_code)]\n+    fn is_chain(&self) -> bool {\n+        match self {\n+            RhsAssignKind::Expr(kind, _) => {\n+                matches!(\n+                    kind,\n+                    ast::ExprKind::Try(..)\n+                        | ast::ExprKind::Field(..)\n+                        | ast::ExprKind::MethodCall(..)\n+                        | ast::ExprKind::Await(_)\n+                )\n+            }\n+            _ => false,\n+        }\n+    }\n+}\n+\n fn rewrite_assignment(\n     context: &RewriteContext<'_>,\n     lhs: &ast::Expr,\n@@ -1855,7 +1884,13 @@ fn rewrite_assignment(\n     let lhs_shape = shape.sub_width(operator_str.len() + 1)?;\n     let lhs_str = format!(\"{} {}\", lhs.rewrite(context, lhs_shape)?, operator_str);\n \n-    rewrite_assign_rhs(context, lhs_str, rhs, shape)\n+    rewrite_assign_rhs(\n+        context,\n+        lhs_str,\n+        rhs,\n+        &RhsAssignKind::Expr(&rhs.kind, rhs.span),\n+        shape,\n+    )\n }\n \n /// Controls where to put the rhs.\n@@ -1876,16 +1911,18 @@ pub(crate) fn rewrite_assign_rhs<S: Into<String>, R: Rewrite>(\n     context: &RewriteContext<'_>,\n     lhs: S,\n     ex: &R,\n+    rhs_kind: &RhsAssignKind<'_>,\n     shape: Shape,\n ) -> Option<String> {\n-    rewrite_assign_rhs_with(context, lhs, ex, shape, RhsTactics::Default)\n+    rewrite_assign_rhs_with(context, lhs, ex, shape, rhs_kind, RhsTactics::Default)\n }\n \n pub(crate) fn rewrite_assign_rhs_expr<R: Rewrite>(\n     context: &RewriteContext<'_>,\n     lhs: &str,\n     ex: &R,\n     shape: Shape,\n+    rhs_kind: &RhsAssignKind<'_>,\n     rhs_tactics: RhsTactics,\n ) -> Option<String> {\n     let last_line_width = last_line_width(lhs).saturating_sub(if lhs.contains('\\n') {\n@@ -1910,6 +1947,7 @@ pub(crate) fn rewrite_assign_rhs_expr<R: Rewrite>(\n         ex,\n         orig_shape,\n         ex.rewrite(context, orig_shape),\n+        rhs_kind,\n         rhs_tactics,\n         has_rhs_comment,\n     )\n@@ -1920,10 +1958,11 @@ pub(crate) fn rewrite_assign_rhs_with<S: Into<String>, R: Rewrite>(\n     lhs: S,\n     ex: &R,\n     shape: Shape,\n+    rhs_kind: &RhsAssignKind<'_>,\n     rhs_tactics: RhsTactics,\n ) -> Option<String> {\n     let lhs = lhs.into();\n-    let rhs = rewrite_assign_rhs_expr(context, &lhs, ex, shape, rhs_tactics)?;\n+    let rhs = rewrite_assign_rhs_expr(context, &lhs, ex, shape, rhs_kind, rhs_tactics)?;\n     Some(lhs + &rhs)\n }\n \n@@ -1932,6 +1971,7 @@ pub(crate) fn rewrite_assign_rhs_with_comments<S: Into<String>, R: Rewrite>(\n     lhs: S,\n     ex: &R,\n     shape: Shape,\n+    rhs_kind: &RhsAssignKind<'_>,\n     rhs_tactics: RhsTactics,\n     between_span: Span,\n     allow_extend: bool,\n@@ -1943,7 +1983,7 @@ pub(crate) fn rewrite_assign_rhs_with_comments<S: Into<String>, R: Rewrite>(\n     } else {\n         shape\n     };\n-    let rhs = rewrite_assign_rhs_expr(context, &lhs, ex, shape, rhs_tactics)?;\n+    let rhs = rewrite_assign_rhs_expr(context, &lhs, ex, shape, rhs_kind, rhs_tactics)?;\n \n     if contains_comment {\n         let rhs = rhs.trim_start();\n@@ -1958,6 +1998,7 @@ fn choose_rhs<R: Rewrite>(\n     expr: &R,\n     shape: Shape,\n     orig_rhs: Option<String>,\n+    _rhs_kind: &RhsAssignKind<'_>,\n     rhs_tactics: RhsTactics,\n     has_rhs_comment: bool,\n ) -> Option<String> {"}, {"sha": "7738eee0a76049b769a2aa547ccdc908483c16fd", "filename": "src/ignore_path.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/src%2Fignore_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/src%2Fignore_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fignore_path.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -37,21 +37,17 @@ mod test {\n     use crate::config::{Config, FileName};\n     use crate::ignore_path::IgnorePathSet;\n \n+    use rustfmt_config_proc_macro::nightly_only_test;\n+\n+    #[nightly_only_test]\n     #[test]\n     fn test_ignore_path_set() {\n-        match option_env!(\"CFG_RELEASE_CHANNEL\") {\n-            // this test requires nightly\n-            None | Some(\"nightly\") => {\n-                let config =\n-                    Config::from_toml(r#\"ignore = [\"foo.rs\", \"bar_dir/*\"]\"#, Path::new(\"\"))\n-                        .unwrap();\n-                let ignore_path_set = IgnorePathSet::from_ignore_list(&config.ignore()).unwrap();\n-\n-                assert!(ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"src/foo.rs\"))));\n-                assert!(ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"bar_dir/baz.rs\"))));\n-                assert!(!ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"src/bar.rs\"))));\n-            }\n-            _ => (),\n-        };\n+        let config =\n+            Config::from_toml(r#\"ignore = [\"foo.rs\", \"bar_dir/*\"]\"#, Path::new(\"\")).unwrap();\n+        let ignore_path_set = IgnorePathSet::from_ignore_list(&config.ignore()).unwrap();\n+\n+        assert!(ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"src/foo.rs\"))));\n+        assert!(ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"bar_dir/baz.rs\"))));\n+        assert!(!ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"src/bar.rs\"))));\n     }\n }"}, {"sha": "f36bdba26e98e91b8aecad2a4e4d433e7651596d", "filename": "src/items.rs", "status": "modified", "additions": 258, "deletions": 268, "changes": 526, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -18,7 +18,7 @@ use crate::config::lists::*;\n use crate::config::{BraceStyle, Config, IndentStyle, Version};\n use crate::expr::{\n     is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, rewrite_assign_rhs_with,\n-    rewrite_assign_rhs_with_comments, RhsTactics,\n+    rewrite_assign_rhs_with_comments, RhsAssignKind, RhsTactics,\n };\n use crate::lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n use crate::macros::{rewrite_macro, MacroPosition};\n@@ -28,6 +28,7 @@ use crate::shape::{Indent, Shape};\n use crate::source_map::{LineRangeUtils, SpanUtils};\n use crate::spanned::Spanned;\n use crate::stmt::Stmt;\n+use crate::types::opaque_ty;\n use crate::utils::*;\n use crate::vertical::rewrite_with_alignment;\n use crate::visitor::FmtVisitor;\n@@ -115,7 +116,13 @@ impl Rewrite for ast::Local {\n             // 1 = trailing semicolon;\n             let nested_shape = shape.sub_width(1)?;\n \n-            result = rewrite_assign_rhs(context, result, init, nested_shape)?;\n+            result = rewrite_assign_rhs(\n+                context,\n+                result,\n+                init,\n+                &RhsAssignKind::Expr(&init.kind, init.span),\n+                nested_shape,\n+            )?;\n             // todo else\n         }\n \n@@ -563,11 +570,13 @@ impl<'a> FmtVisitor<'a> {\n \n         let variant_body = if let Some(ref expr) = field.disr_expr {\n             let lhs = format!(\"{:1$} =\", variant_body, pad_discrim_ident_to);\n+            let ex = &*expr.value;\n             rewrite_assign_rhs_with(\n                 &context,\n                 lhs,\n-                &*expr.value,\n+                ex,\n                 shape,\n+                &RhsAssignKind::Expr(&ex.kind, ex.span),\n                 RhsTactics::AllowOverflow,\n             )?\n         } else {\n@@ -579,6 +588,22 @@ impl<'a> FmtVisitor<'a> {\n \n     fn visit_impl_items(&mut self, items: &[ptr::P<ast::AssocItem>]) {\n         if self.get_context().config.reorder_impl_items() {\n+            type TyOpt = Option<ptr::P<ast::Ty>>;\n+            use crate::ast::AssocItemKind::*;\n+            let is_type = |ty: &TyOpt| opaque_ty(ty).is_none();\n+            let is_opaque = |ty: &TyOpt| opaque_ty(ty).is_some();\n+            let both_type = |l: &TyOpt, r: &TyOpt| is_type(l) && is_type(r);\n+            let both_opaque = |l: &TyOpt, r: &TyOpt| is_opaque(l) && is_opaque(r);\n+            let need_empty_line = |a: &ast::AssocItemKind, b: &ast::AssocItemKind| match (a, b) {\n+                (TyAlias(lty), TyAlias(rty))\n+                    if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n+                {\n+                    false\n+                }\n+                (Const(..), Const(..)) => false,\n+                _ => true,\n+            };\n+\n             // Create visitor for each items, then reorder them.\n             let mut buffer = vec![];\n             for item in items {\n@@ -587,50 +612,6 @@ impl<'a> FmtVisitor<'a> {\n                 self.buffer.clear();\n             }\n \n-            fn is_type(ty: &Option<rustc_ast::ptr::P<ast::Ty>>) -> bool {\n-                if let Some(lty) = ty {\n-                    if let ast::TyKind::ImplTrait(..) = lty.kind {\n-                        return false;\n-                    }\n-                }\n-                true\n-            }\n-\n-            fn is_opaque(ty: &Option<rustc_ast::ptr::P<ast::Ty>>) -> bool {\n-                !is_type(ty)\n-            }\n-\n-            fn both_type(\n-                a: &Option<rustc_ast::ptr::P<ast::Ty>>,\n-                b: &Option<rustc_ast::ptr::P<ast::Ty>>,\n-            ) -> bool {\n-                is_type(a) && is_type(b)\n-            }\n-\n-            fn both_opaque(\n-                a: &Option<rustc_ast::ptr::P<ast::Ty>>,\n-                b: &Option<rustc_ast::ptr::P<ast::Ty>>,\n-            ) -> bool {\n-                is_opaque(a) && is_opaque(b)\n-            }\n-\n-            // In rustc-ap-v638 the `OpaqueTy` AssocItemKind variant was removed but\n-            // we still need to differentiate to maintain sorting order.\n-\n-            // type -> opaque -> const -> macro -> method\n-            use crate::ast::AssocItemKind::*;\n-            fn need_empty_line(a: &ast::AssocItemKind, b: &ast::AssocItemKind) -> bool {\n-                match (a, b) {\n-                    (TyAlias(lty), TyAlias(rty))\n-                        if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n-                    {\n-                        false\n-                    }\n-                    (Const(..), Const(..)) => false,\n-                    _ => true,\n-                }\n-            }\n-\n             buffer.sort_by(|(_, a), (_, b)| match (&a.kind, &b.kind) {\n                 (TyAlias(lty), TyAlias(rty))\n                     if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n@@ -676,136 +657,133 @@ impl<'a> FmtVisitor<'a> {\n pub(crate) fn format_impl(\n     context: &RewriteContext<'_>,\n     item: &ast::Item,\n+    iimpl: &ast::Impl,\n     offset: Indent,\n ) -> Option<String> {\n-    if let ast::ItemKind::Impl(impl_kind) = &item.kind {\n-        let ast::Impl {\n-            ref generics,\n-            ref self_ty,\n-            ref items,\n-            ..\n-        } = **impl_kind;\n-        let mut result = String::with_capacity(128);\n-        let ref_and_type = format_impl_ref_and_type(context, item, offset)?;\n-        let sep = offset.to_string_with_newline(context.config);\n-        result.push_str(&ref_and_type);\n+    let ast::Impl {\n+        generics,\n+        self_ty,\n+        items,\n+        ..\n+    } = iimpl;\n+    let mut result = String::with_capacity(128);\n+    let ref_and_type = format_impl_ref_and_type(context, item, iimpl, offset)?;\n+    let sep = offset.to_string_with_newline(context.config);\n+    result.push_str(&ref_and_type);\n \n-        let where_budget = if result.contains('\\n') {\n-            context.config.max_width()\n-        } else {\n-            context.budget(last_line_width(&result))\n-        };\n+    let where_budget = if result.contains('\\n') {\n+        context.config.max_width()\n+    } else {\n+        context.budget(last_line_width(&result))\n+    };\n \n-        let mut option = WhereClauseOption::snuggled(&ref_and_type);\n-        let snippet = context.snippet(item.span);\n-        let open_pos = snippet.find_uncommented(\"{\")? + 1;\n-        if !contains_comment(&snippet[open_pos..])\n-            && items.is_empty()\n-            && generics.where_clause.predicates.len() == 1\n-            && !result.contains('\\n')\n-        {\n-            option.suppress_comma();\n-            option.snuggle();\n-            option.allow_single_line();\n-        }\n+    let mut option = WhereClauseOption::snuggled(&ref_and_type);\n+    let snippet = context.snippet(item.span);\n+    let open_pos = snippet.find_uncommented(\"{\")? + 1;\n+    if !contains_comment(&snippet[open_pos..])\n+        && items.is_empty()\n+        && generics.where_clause.predicates.len() == 1\n+        && !result.contains('\\n')\n+    {\n+        option.suppress_comma();\n+        option.snuggle();\n+        option.allow_single_line();\n+    }\n \n-        let missing_span = mk_sp(self_ty.span.hi(), item.span.hi());\n-        let where_span_end = context.snippet_provider.opt_span_before(missing_span, \"{\");\n-        let where_clause_str = rewrite_where_clause(\n-            context,\n-            &generics.where_clause,\n-            context.config.brace_style(),\n-            Shape::legacy(where_budget, offset.block_only()),\n-            false,\n-            \"{\",\n-            where_span_end,\n-            self_ty.span.hi(),\n-            option,\n-        )?;\n+    let missing_span = mk_sp(self_ty.span.hi(), item.span.hi());\n+    let where_span_end = context.snippet_provider.opt_span_before(missing_span, \"{\");\n+    let where_clause_str = rewrite_where_clause(\n+        context,\n+        &generics.where_clause,\n+        context.config.brace_style(),\n+        Shape::legacy(where_budget, offset.block_only()),\n+        false,\n+        \"{\",\n+        where_span_end,\n+        self_ty.span.hi(),\n+        option,\n+    )?;\n \n-        // If there is no where-clause, we may have missing comments between the trait name and\n-        // the opening brace.\n-        if generics.where_clause.predicates.is_empty() {\n-            if let Some(hi) = where_span_end {\n-                match recover_missing_comment_in_span(\n-                    mk_sp(self_ty.span.hi(), hi),\n-                    Shape::indented(offset, context.config),\n-                    context,\n-                    last_line_width(&result),\n-                ) {\n-                    Some(ref missing_comment) if !missing_comment.is_empty() => {\n-                        result.push_str(missing_comment);\n-                    }\n-                    _ => (),\n+    // If there is no where-clause, we may have missing comments between the trait name and\n+    // the opening brace.\n+    if generics.where_clause.predicates.is_empty() {\n+        if let Some(hi) = where_span_end {\n+            match recover_missing_comment_in_span(\n+                mk_sp(self_ty.span.hi(), hi),\n+                Shape::indented(offset, context.config),\n+                context,\n+                last_line_width(&result),\n+            ) {\n+                Some(ref missing_comment) if !missing_comment.is_empty() => {\n+                    result.push_str(missing_comment);\n                 }\n+                _ => (),\n             }\n         }\n+    }\n \n-        if is_impl_single_line(context, items.as_slice(), &result, &where_clause_str, item)? {\n-            result.push_str(&where_clause_str);\n-            if where_clause_str.contains('\\n') || last_line_contains_single_line_comment(&result) {\n-                // if the where_clause contains extra comments AND\n-                // there is only one where-clause predicate\n-                // recover the suppressed comma in single line where_clause formatting\n-                if generics.where_clause.predicates.len() == 1 {\n-                    result.push(',');\n-                }\n-                result.push_str(&format!(\"{}{{{}}}\", sep, sep));\n-            } else {\n-                result.push_str(\" {}\");\n+    if is_impl_single_line(context, items.as_slice(), &result, &where_clause_str, item)? {\n+        result.push_str(&where_clause_str);\n+        if where_clause_str.contains('\\n') || last_line_contains_single_line_comment(&result) {\n+            // if the where_clause contains extra comments AND\n+            // there is only one where-clause predicate\n+            // recover the suppressed comma in single line where_clause formatting\n+            if generics.where_clause.predicates.len() == 1 {\n+                result.push(',');\n             }\n-            return Some(result);\n+            result.push_str(&format!(\"{}{{{}}}\", sep, sep));\n+        } else {\n+            result.push_str(\" {}\");\n         }\n+        return Some(result);\n+    }\n \n-        result.push_str(&where_clause_str);\n+    result.push_str(&where_clause_str);\n \n-        let need_newline = last_line_contains_single_line_comment(&result) || result.contains('\\n');\n-        match context.config.brace_style() {\n-            _ if need_newline => result.push_str(&sep),\n-            BraceStyle::AlwaysNextLine => result.push_str(&sep),\n-            BraceStyle::PreferSameLine => result.push(' '),\n-            BraceStyle::SameLineWhere => {\n-                if !where_clause_str.is_empty() {\n-                    result.push_str(&sep);\n-                } else {\n-                    result.push(' ');\n-                }\n+    let need_newline = last_line_contains_single_line_comment(&result) || result.contains('\\n');\n+    match context.config.brace_style() {\n+        _ if need_newline => result.push_str(&sep),\n+        BraceStyle::AlwaysNextLine => result.push_str(&sep),\n+        BraceStyle::PreferSameLine => result.push(' '),\n+        BraceStyle::SameLineWhere => {\n+            if !where_clause_str.is_empty() {\n+                result.push_str(&sep);\n+            } else {\n+                result.push(' ');\n             }\n         }\n+    }\n \n-        result.push('{');\n-        // this is an impl body snippet(impl SampleImpl { /* here */ })\n-        let lo = max(self_ty.span.hi(), generics.where_clause.span.hi());\n-        let snippet = context.snippet(mk_sp(lo, item.span.hi()));\n-        let open_pos = snippet.find_uncommented(\"{\")? + 1;\n+    result.push('{');\n+    // this is an impl body snippet(impl SampleImpl { /* here */ })\n+    let lo = max(self_ty.span.hi(), generics.where_clause.span.hi());\n+    let snippet = context.snippet(mk_sp(lo, item.span.hi()));\n+    let open_pos = snippet.find_uncommented(\"{\")? + 1;\n \n-        if !items.is_empty() || contains_comment(&snippet[open_pos..]) {\n-            let mut visitor = FmtVisitor::from_context(context);\n-            let item_indent = offset.block_only().block_indent(context.config);\n-            visitor.block_indent = item_indent;\n-            visitor.last_pos = lo + BytePos(open_pos as u32);\n+    if !items.is_empty() || contains_comment(&snippet[open_pos..]) {\n+        let mut visitor = FmtVisitor::from_context(context);\n+        let item_indent = offset.block_only().block_indent(context.config);\n+        visitor.block_indent = item_indent;\n+        visitor.last_pos = lo + BytePos(open_pos as u32);\n \n-            visitor.visit_attrs(&item.attrs, ast::AttrStyle::Inner);\n-            visitor.visit_impl_items(items);\n+        visitor.visit_attrs(&item.attrs, ast::AttrStyle::Inner);\n+        visitor.visit_impl_items(items);\n \n-            visitor.format_missing(item.span.hi() - BytePos(1));\n+        visitor.format_missing(item.span.hi() - BytePos(1));\n \n-            let inner_indent_str = visitor.block_indent.to_string_with_newline(context.config);\n-            let outer_indent_str = offset.block_only().to_string_with_newline(context.config);\n+        let inner_indent_str = visitor.block_indent.to_string_with_newline(context.config);\n+        let outer_indent_str = offset.block_only().to_string_with_newline(context.config);\n \n-            result.push_str(&inner_indent_str);\n-            result.push_str(visitor.buffer.trim());\n-            result.push_str(&outer_indent_str);\n-        } else if need_newline || !context.config.empty_item_single_line() {\n-            result.push_str(&sep);\n-        }\n+        result.push_str(&inner_indent_str);\n+        result.push_str(visitor.buffer.trim());\n+        result.push_str(&outer_indent_str);\n+    } else if need_newline || !context.config.empty_item_single_line() {\n+        result.push_str(&sep);\n+    }\n \n-        result.push('}');\n+    result.push('}');\n \n-        Some(result)\n-    } else {\n-        unreachable!();\n-    }\n+    Some(result)\n }\n \n fn is_impl_single_line(\n@@ -830,111 +808,106 @@ fn is_impl_single_line(\n fn format_impl_ref_and_type(\n     context: &RewriteContext<'_>,\n     item: &ast::Item,\n+    iimpl: &ast::Impl,\n     offset: Indent,\n ) -> Option<String> {\n-    if let ast::ItemKind::Impl(impl_kind) = &item.kind {\n-        let ast::Impl {\n-            unsafety,\n-            polarity,\n-            defaultness,\n-            constness,\n-            ref generics,\n-            of_trait: ref trait_ref,\n-            ref self_ty,\n-            ..\n-        } = **impl_kind;\n-        let mut result = String::with_capacity(128);\n+    let ast::Impl {\n+        unsafety,\n+        polarity,\n+        defaultness,\n+        constness,\n+        ref generics,\n+        of_trait: ref trait_ref,\n+        ref self_ty,\n+        ..\n+    } = *iimpl;\n+    let mut result = String::with_capacity(128);\n \n-        result.push_str(&format_visibility(context, &item.vis));\n-        result.push_str(format_defaultness(defaultness));\n-        result.push_str(format_unsafety(unsafety));\n+    result.push_str(&format_visibility(context, &item.vis));\n+    result.push_str(format_defaultness(defaultness));\n+    result.push_str(format_unsafety(unsafety));\n \n-        let shape = if context.config.version() == Version::Two {\n-            Shape::indented(offset + last_line_width(&result), context.config)\n-        } else {\n-            generics_shape_from_config(\n-                context.config,\n-                Shape::indented(offset + last_line_width(&result), context.config),\n-                0,\n-            )?\n-        };\n-        let generics_str = rewrite_generics(context, \"impl\", generics, shape)?;\n-        result.push_str(&generics_str);\n-        result.push_str(format_constness_right(constness));\n+    let shape = if context.config.version() == Version::Two {\n+        Shape::indented(offset + last_line_width(&result), context.config)\n+    } else {\n+        generics_shape_from_config(\n+            context.config,\n+            Shape::indented(offset + last_line_width(&result), context.config),\n+            0,\n+        )?\n+    };\n+    let generics_str = rewrite_generics(context, \"impl\", generics, shape)?;\n+    result.push_str(&generics_str);\n+    result.push_str(format_constness_right(constness));\n \n-        let polarity_str = match polarity {\n-            ast::ImplPolarity::Negative(_) => \"!\",\n-            ast::ImplPolarity::Positive => \"\",\n-        };\n+    let polarity_str = match polarity {\n+        ast::ImplPolarity::Negative(_) => \"!\",\n+        ast::ImplPolarity::Positive => \"\",\n+    };\n \n-        let polarity_overhead;\n-        let trait_ref_overhead;\n-        if let Some(ref trait_ref) = *trait_ref {\n-            let result_len = last_line_width(&result);\n-            result.push_str(&rewrite_trait_ref(\n-                context,\n-                trait_ref,\n-                offset,\n-                polarity_str,\n-                result_len,\n-            )?);\n-            polarity_overhead = 0; // already written\n-            trait_ref_overhead = \" for\".len();\n-        } else {\n-            polarity_overhead = polarity_str.len();\n-            trait_ref_overhead = 0;\n-        }\n+    let polarity_overhead;\n+    let trait_ref_overhead;\n+    if let Some(ref trait_ref) = *trait_ref {\n+        let result_len = last_line_width(&result);\n+        result.push_str(&rewrite_trait_ref(\n+            context,\n+            trait_ref,\n+            offset,\n+            polarity_str,\n+            result_len,\n+        )?);\n+        polarity_overhead = 0; // already written\n+        trait_ref_overhead = \" for\".len();\n+    } else {\n+        polarity_overhead = polarity_str.len();\n+        trait_ref_overhead = 0;\n+    }\n \n-        // Try to put the self type in a single line.\n-        let curly_brace_overhead = if generics.where_clause.predicates.is_empty() {\n-            // If there is no where-clause adapt budget for type formatting to take space and curly\n-            // brace into account.\n-            match context.config.brace_style() {\n-                BraceStyle::AlwaysNextLine => 0,\n-                _ => 2,\n-            }\n-        } else {\n-            0\n-        };\n-        let used_space = last_line_width(&result)\n-            + polarity_overhead\n-            + trait_ref_overhead\n-            + curly_brace_overhead;\n-        // 1 = space before the type.\n-        let budget = context.budget(used_space + 1);\n-        if let Some(self_ty_str) = self_ty.rewrite(context, Shape::legacy(budget, offset)) {\n-            if !self_ty_str.contains('\\n') {\n-                if trait_ref.is_some() {\n-                    result.push_str(\" for \");\n-                } else {\n-                    result.push(' ');\n-                    result.push_str(polarity_str);\n-                }\n-                result.push_str(&self_ty_str);\n-                return Some(result);\n+    // Try to put the self type in a single line.\n+    let curly_brace_overhead = if generics.where_clause.predicates.is_empty() {\n+        // If there is no where-clause adapt budget for type formatting to take space and curly\n+        // brace into account.\n+        match context.config.brace_style() {\n+            BraceStyle::AlwaysNextLine => 0,\n+            _ => 2,\n+        }\n+    } else {\n+        0\n+    };\n+    let used_space =\n+        last_line_width(&result) + polarity_overhead + trait_ref_overhead + curly_brace_overhead;\n+    // 1 = space before the type.\n+    let budget = context.budget(used_space + 1);\n+    if let Some(self_ty_str) = self_ty.rewrite(context, Shape::legacy(budget, offset)) {\n+        if !self_ty_str.contains('\\n') {\n+            if trait_ref.is_some() {\n+                result.push_str(\" for \");\n+            } else {\n+                result.push(' ');\n+                result.push_str(polarity_str);\n             }\n+            result.push_str(&self_ty_str);\n+            return Some(result);\n         }\n+    }\n \n-        // Couldn't fit the self type on a single line, put it on a new line.\n-        result.push('\\n');\n-        // Add indentation of one additional tab.\n-        let new_line_offset = offset.block_indent(context.config);\n-        result.push_str(&new_line_offset.to_string(context.config));\n-        if trait_ref.is_some() {\n-            result.push_str(\"for \");\n-        } else {\n-            result.push_str(polarity_str);\n-        }\n-        let budget = context.budget(last_line_width(&result) + polarity_overhead);\n-        let type_offset = match context.config.indent_style() {\n-            IndentStyle::Visual => new_line_offset + trait_ref_overhead,\n-            IndentStyle::Block => new_line_offset,\n-        };\n-        result.push_str(&*self_ty.rewrite(context, Shape::legacy(budget, type_offset))?);\n-        Some(result)\n+    // Couldn't fit the self type on a single line, put it on a new line.\n+    result.push('\\n');\n+    // Add indentation of one additional tab.\n+    let new_line_offset = offset.block_indent(context.config);\n+    result.push_str(&new_line_offset.to_string(context.config));\n+    if trait_ref.is_some() {\n+        result.push_str(\"for \");\n     } else {\n-        unreachable!();\n+        result.push_str(polarity_str);\n     }\n+    let budget = context.budget(last_line_width(&result) + polarity_overhead);\n+    let type_offset = match context.config.indent_style() {\n+        IndentStyle::Visual => new_line_offset + trait_ref_overhead,\n+        IndentStyle::Block => new_line_offset,\n+    };\n+    result.push_str(&*self_ty.rewrite(context, Shape::legacy(budget, type_offset))?);\n+    Some(result)\n }\n \n fn rewrite_trait_ref(\n@@ -1068,6 +1041,7 @@ pub(crate) fn format_trait(\n                 result + \":\",\n                 bounds,\n                 shape,\n+                &RhsAssignKind::Bounds,\n                 RhsTactics::ForceNextLineWithoutIndent,\n             )?;\n         }\n@@ -1248,7 +1222,14 @@ pub(crate) fn format_trait_alias(\n         generic_bounds,\n         generics,\n     };\n-    rewrite_assign_rhs(context, lhs, &trait_alias_bounds, shape.sub_width(1)?).map(|s| s + \";\")\n+    rewrite_assign_rhs(\n+        context,\n+        lhs,\n+        &trait_alias_bounds,\n+        &RhsAssignKind::Bounds,\n+        shape.sub_width(1)?,\n+    )\n+    .map(|s| s + \";\")\n }\n \n fn format_unit_struct(\n@@ -1541,43 +1522,38 @@ pub(crate) fn rewrite_type_alias<'a, 'b>(\n         ref bounds,\n         ref ty,\n     } = *ty_alias_kind;\n-    let ty_opt = ty.as_ref().map(|t| &**t);\n+    let ty_opt = ty.as_ref();\n     let (ident, vis) = match visitor_kind {\n         Item(i) => (i.ident, &i.vis),\n         AssocTraitItem(i) | AssocImplItem(i) => (i.ident, &i.vis),\n         ForeignItem(i) => (i.ident, &i.vis),\n     };\n     let rw_info = &TyAliasRewriteInfo(context, indent, generics, ident, span);\n-\n+    let op_ty = opaque_ty(ty);\n     // Type Aliases are formatted slightly differently depending on the context\n     // in which they appear, whether they are opaque, and whether they are associated.\n     // https://rustc-dev-guide.rust-lang.org/opaque-types-type-alias-impl-trait.html\n     // https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/items.md#type-aliases\n-    match (visitor_kind, ty_opt) {\n-        (Item(_), None) => {\n-            let op_ty = OpaqueType { bounds };\n-            rewrite_ty(rw_info, Some(bounds), Some(&op_ty), vis)\n+    match (visitor_kind, &op_ty) {\n+        (Item(_) | AssocTraitItem(_) | ForeignItem(_), Some(ref op_bounds)) => {\n+            let op = OpaqueType { bounds: op_bounds };\n+            rewrite_ty(rw_info, Some(bounds), Some(&op), vis)\n+        }\n+        (Item(_) | AssocTraitItem(_) | ForeignItem(_), None) => {\n+            rewrite_ty(rw_info, Some(bounds), ty_opt, vis)\n         }\n-        (Item(_), Some(ty)) => rewrite_ty(rw_info, Some(bounds), Some(&*ty), vis),\n         (AssocImplItem(_), _) => {\n-            let result = if let Some(ast::Ty {\n-                kind: ast::TyKind::ImplTrait(_, ref bounds),\n-                ..\n-            }) = ty_opt\n-            {\n-                let op_ty = OpaqueType { bounds };\n-                rewrite_ty(rw_info, None, Some(&op_ty), &DEFAULT_VISIBILITY)\n+            let result = if let Some(ref op_bounds) = op_ty {\n+                let op = OpaqueType { bounds: op_bounds };\n+                rewrite_ty(rw_info, Some(bounds), Some(&op), &DEFAULT_VISIBILITY)\n             } else {\n-                rewrite_ty(rw_info, None, ty.as_ref(), vis)\n+                rewrite_ty(rw_info, Some(bounds), ty_opt, vis)\n             }?;\n             match defaultness {\n                 ast::Defaultness::Default(..) => Some(format!(\"default {}\", result)),\n                 _ => Some(result),\n             }\n         }\n-        (AssocTraitItem(_), _) | (ForeignItem(_), _) => {\n-            rewrite_ty(rw_info, Some(bounds), ty.as_ref(), vis)\n-        }\n     }\n }\n \n@@ -1670,7 +1646,7 @@ fn rewrite_ty<R: Rewrite>(\n \n         // 1 = `;`\n         let shape = Shape::indented(indent, context.config).sub_width(1)?;\n-        rewrite_assign_rhs(context, lhs, &*ty, shape).map(|s| s + \";\")\n+        rewrite_assign_rhs(context, lhs, &*ty, &RhsAssignKind::Ty, shape).map(|s| s + \";\")\n     } else {\n         Some(format!(\"{};\", result))\n     }\n@@ -1760,7 +1736,7 @@ pub(crate) fn rewrite_struct_field(\n \n     let is_prefix_empty = prefix.is_empty();\n     // We must use multiline. We are going to put attributes and a field on different lines.\n-    let field_str = rewrite_assign_rhs(context, prefix, &*field.ty, shape)?;\n+    let field_str = rewrite_assign_rhs(context, prefix, &*field.ty, &RhsAssignKind::Ty, shape)?;\n     // Remove a leading white-space from `rewrite_assign_rhs()` when rewriting a tuple struct.\n     let field_str = if is_prefix_empty {\n         field_str.trim_start()\n@@ -1890,6 +1866,7 @@ fn rewrite_static(\n             &lhs,\n             &**expr,\n             Shape::legacy(remaining_width, offset.block_only()),\n+            &RhsAssignKind::Expr(&expr.kind, expr.span),\n             RhsTactics::Default,\n             comments_span,\n             true,\n@@ -1900,6 +1877,12 @@ fn rewrite_static(\n         Some(format!(\"{}{};\", prefix, ty_str))\n     }\n }\n+\n+// FIXME(calebcartwright) - This is a hack around a bug in the handling of TyKind::ImplTrait.\n+// This should be removed once that bug is resolved, with the type alias formatting using the\n+// defined Ty for the RHS directly.\n+// https://github.com/rust-lang/rustfmt/issues/4373\n+// https://github.com/rust-lang/rustfmt/issues/5027\n struct OpaqueType<'a> {\n     bounds: &'a ast::GenericBounds,\n }\n@@ -3173,7 +3156,14 @@ impl Rewrite for ast::ForeignItem {\n                     rewrite_ident(context, self.ident)\n                 );\n                 // 1 = ;\n-                rewrite_assign_rhs(context, prefix, &**ty, shape.sub_width(1)?).map(|s| s + \";\")\n+                rewrite_assign_rhs(\n+                    context,\n+                    prefix,\n+                    &**ty,\n+                    &RhsAssignKind::Ty,\n+                    shape.sub_width(1)?,\n+                )\n+                .map(|s| s + \";\")\n             }\n             ast::ForeignItemKind::TyAlias(ref ty_alias) => {\n                 let (kind, span) = (&ItemVisitorKind::ForeignItem(&self), self.span);"}, {"sha": "3515dd172510c91e6bc109c7378ab8cccd82f0b2", "filename": "src/lists.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -444,10 +444,15 @@ where\n                 let offset = formatting.shape.indent + overhead;\n                 let comment_shape = Shape::legacy(width, offset);\n \n-                // Use block-style only for the last item or multiline comments.\n-                let block_style = !formatting.ends_with_newline && last\n-                    || comment.trim().contains('\\n')\n-                    || comment.trim().len() > width;\n+                let block_style = if !formatting.ends_with_newline && last {\n+                    true\n+                } else if starts_with_newline(comment) {\n+                    false\n+                } else if comment.trim().contains('\\n') || comment.trim().len() > width {\n+                    true\n+                } else {\n+                    false\n+                };\n \n                 rewrite_comment(\n                     comment.trim_start(),"}, {"sha": "a52568be9eac44298a0f3cf40a1ef8b7e576081e", "filename": "src/macros.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -27,7 +27,7 @@ use crate::comment::{\n     contains_comment, CharClasses, FindUncommented, FullCodeCharKind, LineClasses,\n };\n use crate::config::lists::*;\n-use crate::expr::rewrite_array;\n+use crate::expr::{rewrite_array, rewrite_assign_rhs, RhsAssignKind};\n use crate::lists::{itemize_list, write_list, ListFormatting};\n use crate::overflow;\n use crate::rewrite::{Rewrite, RewriteContext};\n@@ -1468,10 +1468,11 @@ fn format_lazy_static(\n             id,\n             ty.rewrite(context, nested_shape)?\n         ));\n-        result.push_str(&crate::expr::rewrite_assign_rhs(\n+        result.push_str(&rewrite_assign_rhs(\n             context,\n             stmt,\n             &*expr,\n+            &RhsAssignKind::Expr(&expr.kind, expr.span),\n             nested_shape.sub_width(1)?,\n         )?);\n         result.push(';');"}, {"sha": "dd7c7352686e620eda97ad4411bc43da48aeac84", "filename": "src/syntux/session.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/src%2Fsyntux%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/src%2Fsyntux%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fsession.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -286,10 +286,11 @@ impl LineRangeUtils for ParseSess {\n mod tests {\n     use super::*;\n \n+    use rustfmt_config_proc_macro::nightly_only_test;\n+\n     mod emitter {\n         use super::*;\n         use crate::config::IgnoreList;\n-        use crate::is_nightly_channel;\n         use crate::utils::mk_sp;\n         use rustc_span::{FileName as SourceMapFileName, MultiSpan, RealFileName, DUMMY_SP};\n         use std::path::PathBuf;\n@@ -371,11 +372,9 @@ mod tests {\n             assert_eq!(can_reset_errors.load(Ordering::Acquire), false);\n         }\n \n+        #[nightly_only_test]\n         #[test]\n         fn handles_recoverable_parse_error_in_ignored_file() {\n-            if !is_nightly_channel!() {\n-                return;\n-            }\n             let num_emitted_errors = Lrc::new(AtomicU32::new(0));\n             let can_reset_errors = Lrc::new(AtomicBool::new(false));\n             let ignore_list = get_ignore_list(r#\"ignore = [\"foo.rs\"]\"#);\n@@ -398,11 +397,9 @@ mod tests {\n             assert_eq!(can_reset_errors.load(Ordering::Acquire), true);\n         }\n \n+        #[nightly_only_test]\n         #[test]\n         fn handles_recoverable_parse_error_in_non_ignored_file() {\n-            if !is_nightly_channel!() {\n-                return;\n-            }\n             let num_emitted_errors = Lrc::new(AtomicU32::new(0));\n             let can_reset_errors = Lrc::new(AtomicBool::new(false));\n             let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n@@ -424,11 +421,9 @@ mod tests {\n             assert_eq!(can_reset_errors.load(Ordering::Acquire), false);\n         }\n \n+        #[nightly_only_test]\n         #[test]\n         fn handles_mix_of_recoverable_parse_error() {\n-            if !is_nightly_channel!() {\n-                return;\n-            }\n             let num_emitted_errors = Lrc::new(AtomicU32::new(0));\n             let can_reset_errors = Lrc::new(AtomicBool::new(false));\n             let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));"}, {"sha": "cceb28dfea6d7e82e06d3051983cc0a377fca9a2", "filename": "src/test/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -15,6 +15,8 @@ use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, ModifiedChu\n use crate::source_file;\n use crate::{is_nightly_channel, FormatReport, FormatReportFormatterBuilder, Input, Session};\n \n+use rustfmt_config_proc_macro::nightly_only_test;\n+\n mod configuration_snippet;\n mod mod_resolver;\n mod parser;\n@@ -307,14 +309,11 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n \n // Idempotence tests. Files in tests/target are checked to be unaltered by\n // rustfmt.\n+#[nightly_only_test]\n #[test]\n fn idempotence_tests() {\n     init_log();\n     run_test_with(&TestSetting::default(), || {\n-        // these tests require nightly\n-        if !is_nightly_channel!() {\n-            return;\n-        }\n         // Get all files in the tests/target directory.\n         let files = get_test_files(Path::new(\"tests/target\"), true);\n         let (_reports, count, fails) = check_files(files, &None);\n@@ -332,13 +331,11 @@ fn idempotence_tests() {\n \n // Run rustfmt on itself. This operation must be idempotent. We also check that\n // no warnings are emitted.\n+// Issue-3443: these tests require nightly\n+#[nightly_only_test]\n #[test]\n fn self_tests() {\n     init_log();\n-    // Issue-3443: these tests require nightly\n-    if !is_nightly_channel!() {\n-        return;\n-    }\n     let mut files = get_test_files(Path::new(\"tests\"), false);\n     let bin_directories = vec![\"cargo-fmt\", \"git-rustfmt\", \"bin\", \"format-diff\"];\n     for dir in bin_directories {"}, {"sha": "88f5dc432451010436694b49a355e68fb9f27b98", "filename": "src/types.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -2,13 +2,15 @@ use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n use rustc_ast::ast::{self, FnRetTy, Mutability};\n+use rustc_ast::ptr;\n use rustc_span::{symbol::kw, BytePos, Pos, Span};\n \n use crate::comment::{combine_strs_with_missing_comments, contains_comment};\n use crate::config::lists::*;\n use crate::config::{IndentStyle, TypeDensity, Version};\n use crate::expr::{\n     format_expr, rewrite_assign_rhs, rewrite_call, rewrite_tuple, rewrite_unary_prefix, ExprType,\n+    RhsAssignKind,\n };\n use crate::lists::{\n     definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n@@ -429,7 +431,7 @@ impl Rewrite for ast::WherePredicate {\n                     format!(\"{}{}\", type_str, colon)\n                 };\n \n-                rewrite_assign_rhs(context, lhs, bounds, shape)?\n+                rewrite_assign_rhs(context, lhs, bounds, &RhsAssignKind::Bounds, shape)?\n             }\n             ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n                 ref lifetime,\n@@ -442,7 +444,7 @@ impl Rewrite for ast::WherePredicate {\n                 ..\n             }) => {\n                 let lhs_ty_str = lhs_ty.rewrite(context, shape).map(|lhs| lhs + \" =\")?;\n-                rewrite_assign_rhs(context, lhs_ty_str, &**rhs_ty, shape)?\n+                rewrite_assign_rhs(context, lhs_ty_str, &**rhs_ty, &RhsAssignKind::Ty, shape)?\n             }\n         };\n \n@@ -1031,6 +1033,13 @@ fn join_bounds_inner(\n     }\n }\n \n+pub(crate) fn opaque_ty(ty: &Option<ptr::P<ast::Ty>>) -> Option<&ast::GenericBounds> {\n+    ty.as_ref().and_then(|t| match &t.kind {\n+        ast::TyKind::ImplTrait(_, bounds) => Some(bounds),\n+        _ => None,\n+    })\n+}\n+\n pub(crate) fn can_be_overflowed_type(\n     context: &RewriteContext<'_>,\n     ty: &ast::Ty,"}, {"sha": "e4a7be742abcbace1602fad9b5b45593b2dd71ad", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -485,9 +485,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         if should_visit_node_again {\n             match item.kind {\n                 ast::ItemKind::Use(ref tree) => self.format_import(item, tree),\n-                ast::ItemKind::Impl { .. } => {\n+                ast::ItemKind::Impl(ref iimpl) => {\n                     let block_indent = self.block_indent;\n-                    let rw = self.with_context(|ctx| format_impl(ctx, item, block_indent));\n+                    let rw = self.with_context(|ctx| format_impl(ctx, item, iimpl, block_indent));\n                     self.push_rewrite(item.span, rw);\n                 }\n                 ast::ItemKind::Trait(..) => {"}, {"sha": "b96c02802d69c23ee699fbc58c1fcc9ba8151b0a", "filename": "tests/source/comments-in-lists/wrap-comments-not-normalized.rs", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fcomments-in-lists%2Fwrap-comments-not-normalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fcomments-in-lists%2Fwrap-comments-not-normalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcomments-in-lists%2Fwrap-comments-not-normalized.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,129 @@\n+// rustfmt-wrap_comments: true\n+\n+// https://github.com/rust-lang/rustfmt/issues/4909\n+pub enum E {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+\n+}\n+\n+pub struct S {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+}\n+\n+fn foo(\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo2(// Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo3(\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+\n+) -> usize {\n+    5\n+}\n+\n+fn main() {\n+    let v = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v2: Vec<i32> = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v3 = vec![\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    // https://github.com/rust-lang/rustfmt/issues/4430\n+    match a {\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        b => c,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        d => e,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    }\n+\n+    match a {\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+        b => c,\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+        d => e,\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    }\n+}"}, {"sha": "360b838520eda3030167d60618818505c5f25dc9", "filename": "tests/source/comments-in-lists/wrap-comments-true.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fcomments-in-lists%2Fwrap-comments-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fcomments-in-lists%2Fwrap-comments-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcomments-in-lists%2Fwrap-comments-true.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,130 @@\n+// rustfmt-normalize_comments: true\n+// rustfmt-wrap_comments: true\n+\n+// https://github.com/rust-lang/rustfmt/issues/4909\n+pub enum E {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+\n+}\n+\n+pub struct S {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+}\n+\n+fn foo(\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo2(// Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo3(\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+\n+) -> usize {\n+    5\n+}\n+\n+fn main() {\n+    let v = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v2: Vec<i32> = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v3 = vec![\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    // https://github.com/rust-lang/rustfmt/issues/4430\n+    match a {\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        b => c,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        d => e,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    }\n+\n+    match a {\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+        b => c,\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+        d => e,\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    }\n+}"}, {"sha": "09f68cae424063e9523d8b66e8c07e0c110b5ac0", "filename": "tests/source/issue-5088/deeply_nested_long_comment_wrap_comments_true.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fissue-5088%2Fdeeply_nested_long_comment_wrap_comments_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fissue-5088%2Fdeeply_nested_long_comment_wrap_comments_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-5088%2Fdeeply_nested_long_comment_wrap_comments_true.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,33 @@\n+// rustfmt-wrap_comments: true\n+\n+fn main() {\n+    {\n+        {\n+            {\n+                {\n+                    {\n+                        {\n+                            {\n+                                {\n+                                    {\n+                                        {\n+                                            {\n+                                                // - aaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa bbbbbbbbbb bbbbbbbbb bbbbbbbbb ccc cccccccccc ccccccc cccccccc\n+\n+                                                // * aaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa bbbbbbbbbb bbbbbbbbb bbbbbbbbb ccc cccccccccc ccccccc cccccccc\n+\n+                                                /* - aaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa bbbbbbbbbb bbbbbbbbb bbbbbbbbb ccc cccccccccc ccccccc cccccccc */\n+\n+                                                /* * aaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa bbbbbbbbbb bbbbbbbbb bbbbbbbbb ccc cccccccccc ccccccc cccccccc */\n+                                            };\n+                                        };\n+                                    };\n+                                };\n+                            };\n+                        };\n+                    };\n+                };\n+            };\n+        };\n+    };\n+}"}, {"sha": "75f748000f9ba3ef60b320775ed63b9aed7d5054", "filename": "tests/source/issue-5088/start_with_empty_comment_very_long_itemized_block_wrap_comments_true.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fissue-5088%2Fstart_with_empty_comment_very_long_itemized_block_wrap_comments_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fissue-5088%2Fstart_with_empty_comment_very_long_itemized_block_wrap_comments_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-5088%2Fstart_with_empty_comment_very_long_itemized_block_wrap_comments_true.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,19 @@\n+// rustfmt-wrap_comments: true\n+\n+//\n+// - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+// - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+\n+//\n+// * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+// * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+\n+/*\n+ * - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/\n+/*\n+ * - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/\n+\n+/*\n+ * * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/\n+/*\n+ * * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/"}, {"sha": "00437f00216babc50ec4a9fb5e07270f51f5460a", "filename": "tests/source/issue-5088/very_long_comment_wrap_comments_true.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fissue-5088%2Fvery_long_comment_wrap_comments_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fissue-5088%2Fvery_long_comment_wrap_comments_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-5088%2Fvery_long_comment_wrap_comments_true.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,13 @@\n+// rustfmt-wrap_comments: true\n+\n+// - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+// - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+\n+// * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+// * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+\n+/* - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/\n+/* - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/\n+\n+/* * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/\n+/* * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/"}, {"sha": "a008dd3d83817cd4ca944381901d33da193d62e9", "filename": "tests/source/issue_4823.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fissue_4823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fissue_4823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_4823.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,5 @@\n+macro_rules! m {\n+() => {\n+type Type;\n+};\n+}"}, {"sha": "67beeb23b7114de8d0a9497be139824eacfa8cf9", "filename": "tests/source/issue_5027.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fissue_5027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fissue_5027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_5027.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-version: Two\n+\n+pub type Iter<'a, D> =                 impl       DoubleEndedIterator<Item = (SomethingSomethingSomethingLongType<D>)>+ ExactSizeIterator+ 'a;\n+\n+trait FOo {pub type Iter<'a, D> = impl        DoubleEndedIterator<Item = (SomethingSomethingSomethingLongType<D>)>+ ExactSizeIterator+ 'a;}\n+\n+impl Bar {pub type Iter<'a, D> = impl             DoubleEndedIterator<Item = (SomethingSomethingSomethingLongType<D>)>+ ExactSizeIterator+ 'a;}\n\\ No newline at end of file"}, {"sha": "1644c9d2ccbbb5bfff3e0002f8da7c823cc5a5c0", "filename": "tests/source/issue_5086.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fissue_5086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Fsource%2Fissue_5086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_5086.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,2 @@\n+#[cfg(any())]\n+    type   Type :   Bound ;\n\\ No newline at end of file"}, {"sha": "be31bf0a33198511f63e93dae7bec3cc09bd0fa1", "filename": "tests/target/comments-in-lists/format-doc-comments.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fcomments-in-lists%2Fformat-doc-comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fcomments-in-lists%2Fformat-doc-comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomments-in-lists%2Fformat-doc-comments.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,96 @@\n+// rustfmt-format_code_in_doc_comments: true\n+\n+// https://github.com/rust-lang/rustfmt/issues/4420\n+enum Minimal {\n+    Example,\n+    //[thisisremoved thatsleft\n+    // canbeanything\n+}\n+\n+struct Minimal2 {\n+    Example: usize,\n+    //[thisisremoved thatsleft\n+    // canbeanything\n+}\n+\n+pub enum E {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+fn foo(\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo2(// Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn main() {\n+    let v = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v2: Vec<i32> = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    match a {\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        b => c,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        d => e,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    }\n+}"}, {"sha": "80aea59d1b520982bdec702488733c7dceb9aa1f", "filename": "tests/target/comments-in-lists/wrap-comments-false.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-false.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,85 @@\n+// rustfmt-normalize_comments: true\n+\n+// https://github.com/rust-lang/rustfmt/issues/4909\n+pub enum E {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+fn foo(\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo2(// Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn main() {\n+    let v = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v2: Vec<i32> = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    // https://github.com/rust-lang/rustfmt/issues/4430\n+    match a {\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        b => c,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        d => e,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    }\n+}"}, {"sha": "52315f470e4b9d01a53ba86f767aecbf7270290a", "filename": "tests/target/comments-in-lists/wrap-comments-not-normalized.rs", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-not-normalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-not-normalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-not-normalized.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,142 @@\n+// rustfmt-wrap_comments: true\n+\n+// https://github.com/rust-lang/rustfmt/issues/4909\n+pub enum E {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+}\n+\n+pub struct S {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+}\n+\n+fn foo(\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo2(// Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo3(\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn main() {\n+    let v = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v2: Vec<i32> = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v3 = vec![\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    // https://github.com/rust-lang/rustfmt/issues/4430\n+    match a {\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        b => c,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        d => e,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    }\n+\n+    match a {\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+        b => c,\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+        d => e,\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+    }\n+}"}, {"sha": "e0bfcf0b5007da31ba944a6cf5ddc517e65a1aad", "filename": "tests/target/comments-in-lists/wrap-comments-true.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-true.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,143 @@\n+// rustfmt-normalize_comments: true\n+// rustfmt-wrap_comments: true\n+\n+// https://github.com/rust-lang/rustfmt/issues/4909\n+pub enum E {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+}\n+\n+pub struct S {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+}\n+\n+fn foo(\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo2(// Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo3(\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn main() {\n+    let v = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v2: Vec<i32> = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v3 = vec![\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    // https://github.com/rust-lang/rustfmt/issues/4430\n+    match a {\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        b => c,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        d => e,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    }\n+\n+    match a {\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+        b => c,\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+        d => e,\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+    }\n+}"}, {"sha": "f4801de0184813300efdc48d6d338acb4d36c6a1", "filename": "tests/target/issue-5088/deeply_nested_long_comment_wrap_comments_false.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fdeeply_nested_long_comment_wrap_comments_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fdeeply_nested_long_comment_wrap_comments_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fdeeply_nested_long_comment_wrap_comments_false.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,33 @@\n+// rustfmt-wrap_comments: false\n+\n+fn main() {\n+    {\n+        {\n+            {\n+                {\n+                    {\n+                        {\n+                            {\n+                                {\n+                                    {\n+                                        {\n+                                            {\n+                                                // - aaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa bbbbbbbbbb bbbbbbbbb bbbbbbbbb ccc cccccccccc ccccccc cccccccc\n+\n+                                                // * aaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa bbbbbbbbbb bbbbbbbbb bbbbbbbbb ccc cccccccccc ccccccc cccccccc\n+\n+                                                /* - aaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa bbbbbbbbbb bbbbbbbbb bbbbbbbbb ccc cccccccccc ccccccc cccccccc */\n+\n+                                                /* * aaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa bbbbbbbbbb bbbbbbbbb bbbbbbbbb ccc cccccccccc ccccccc cccccccc */\n+                                            };\n+                                        };\n+                                    };\n+                                };\n+                            };\n+                        };\n+                    };\n+                };\n+            };\n+        };\n+    };\n+}"}, {"sha": "b289c9f859e0e2f93f32e35d33922e21abadc5eb", "filename": "tests/target/issue-5088/deeply_nested_long_comment_wrap_comments_true.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fdeeply_nested_long_comment_wrap_comments_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fdeeply_nested_long_comment_wrap_comments_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fdeeply_nested_long_comment_wrap_comments_true.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,49 @@\n+// rustfmt-wrap_comments: true\n+\n+fn main() {\n+    {\n+        {\n+            {\n+                {\n+                    {\n+                        {\n+                            {\n+                                {\n+                                    {\n+                                        {\n+                                            {\n+                                                // - aaaa aaaaaaaaa aaaaaaaaa\n+                                                //   aaaaaaaaa aaaaaaaaa\n+                                                //   bbbbbbbbbb bbbbbbbbb\n+                                                //   bbbbbbbbb ccc cccccccccc\n+                                                //   ccccccc cccccccc\n+\n+                                                // * aaaa aaaaaaaaa aaaaaaaaa\n+                                                //   aaaaaaaaa aaaaaaaaa\n+                                                //   bbbbbbbbbb bbbbbbbbb\n+                                                //   bbbbbbbbb ccc cccccccccc\n+                                                //   ccccccc cccccccc\n+\n+                                                /* - aaaa aaaaaaaaa aaaaaaaaa\n+                                                 *   aaaaaaaaa aaaaaaaaa\n+                                                 *   bbbbbbbbbb bbbbbbbbb\n+                                                 *   bbbbbbbbb ccc cccccccccc\n+                                                 *   ccccccc cccccccc */\n+\n+                                                /* * aaaa aaaaaaaaa aaaaaaaaa\n+                                                 *   aaaaaaaaa aaaaaaaaa\n+                                                 *   bbbbbbbbbb bbbbbbbbb\n+                                                 *   bbbbbbbbb ccc cccccccccc\n+                                                 *   ccccccc cccccccc */\n+                                            };\n+                                        };\n+                                    };\n+                                };\n+                            };\n+                        };\n+                    };\n+                };\n+            };\n+        };\n+    };\n+}"}, {"sha": "60beed1b04828b730ea5da76a06818810ec512d6", "filename": "tests/target/issue-5088/multi_line_itemized_block_wrap_comments_false.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fmulti_line_itemized_block_wrap_comments_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fmulti_line_itemized_block_wrap_comments_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fmulti_line_itemized_block_wrap_comments_false.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-wrap_comments: false\n+\n+// - some itemized block 1\n+// - some itemized block 2\n+\n+// * some itemized block 3\n+// * some itemized block 4\n+\n+/*\n+ * - some itemized block 5\n+ * - some itemized block 6\n+ */\n+\n+/*\n+ * * some itemized block 7\n+ * * some itemized block 8\n+ */"}, {"sha": "84fba4b7c198629c56741ecb62055ff6e42ed3cf", "filename": "tests/target/issue-5088/multi_line_itemized_block_wrap_comments_true.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fmulti_line_itemized_block_wrap_comments_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fmulti_line_itemized_block_wrap_comments_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fmulti_line_itemized_block_wrap_comments_true.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-wrap_comments: true\n+\n+// - some itemized block 1\n+// - some itemized block 2\n+\n+// * some itemized block 3\n+// * some itemized block 4\n+\n+/*\n+ * - some itemized block 5\n+ * - some itemized block 6\n+ */\n+\n+/*\n+ * * some itemized block 7\n+ * * some itemized block 8\n+ */"}, {"sha": "d1bf44f6c7413aaf31620513da469b146430dbd4", "filename": "tests/target/issue-5088/multi_line_text_with_itemized_block_wrap_comments_false.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fmulti_line_text_with_itemized_block_wrap_comments_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fmulti_line_text_with_itemized_block_wrap_comments_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fmulti_line_text_with_itemized_block_wrap_comments_false.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,37 @@\n+// rustfmt-wrap_comments: false\n+\n+// Some text\n+// - some itemized block 1\n+// - some itemized block 2\n+// Some more text\n+// - some itemized block 3\n+// - some itemized block 4\n+// Even more text\n+\n+// Some text\n+// * some itemized block 5\n+// * some itemized block 6\n+// Some more text\n+// * some itemized block 7\n+// * some itemized block 8\n+// Even more text\n+\n+/*\n+ * Some text\n+ * - some itemized block 9\n+ * - some itemized block 10\n+ * Some more text\n+ * - some itemized block 11\n+ * - some itemized block 12\n+ * Even more text\n+ */\n+\n+/*\n+ * Some text\n+ * * some itemized block 13\n+ * * some itemized block 14\n+ * Some more text\n+ * * some itemized block 15\n+ * * some itemized block 16\n+ * Even more text\n+ */"}, {"sha": "f767491f902d41d2db619690c1f5dfd3296d6427", "filename": "tests/target/issue-5088/multi_line_text_with_itemized_block_wrap_comments_true.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fmulti_line_text_with_itemized_block_wrap_comments_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fmulti_line_text_with_itemized_block_wrap_comments_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fmulti_line_text_with_itemized_block_wrap_comments_true.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,37 @@\n+// rustfmt-wrap_comments: true\n+\n+// Some text\n+// - some itemized block 1\n+// - some itemized block 2\n+// Some more text\n+// - some itemized block 3\n+// - some itemized block 4\n+// Even more text\n+\n+// Some text\n+// * some itemized block 5\n+// * some itemized block 6\n+// Some more text\n+// * some itemized block 7\n+// * some itemized block 8\n+// Even more text\n+\n+/*\n+ * Some text\n+ * - some itemized block 9\n+ * - some itemized block 10\n+ * Some more text\n+ * - some itemized block 11\n+ * - some itemized block 12\n+ * Even more text\n+ */\n+\n+/*\n+ * Some text\n+ * * some itemized block 13\n+ * * some itemized block 14\n+ * Some more text\n+ * * some itemized block 15\n+ * * some itemized block 16\n+ * Even more text\n+ */"}, {"sha": "2cd85c787f974d34f1c2cfae8f673d348e5f6258", "filename": "tests/target/issue-5088/single_line_itemized_block_wrap_comments_false.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fsingle_line_itemized_block_wrap_comments_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fsingle_line_itemized_block_wrap_comments_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fsingle_line_itemized_block_wrap_comments_false.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-wrap_comments: false\n+\n+// - some itemized block 1\n+\n+// * some itemized block 2\n+\n+/* - some itemized block 3 */\n+\n+/* * some itemized block 4 */"}, {"sha": "e9f343d75d5ebec61c7c39cb8a6152f187e1be3c", "filename": "tests/target/issue-5088/single_line_itemized_block_wrap_comments_true.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fsingle_line_itemized_block_wrap_comments_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fsingle_line_itemized_block_wrap_comments_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fsingle_line_itemized_block_wrap_comments_true.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-wrap_comments: true\n+\n+// - some itemized block 1\n+\n+// * some itemized block 2\n+\n+/* - some itemized block 3 */\n+\n+/* * some itemized block 4 */"}, {"sha": "97bb7733d189f1674954fb8019551d728f8fb1f8", "filename": "tests/target/issue-5088/start_with_empty_comment_very_long_itemized_block_wrap_comments_false.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fstart_with_empty_comment_very_long_itemized_block_wrap_comments_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fstart_with_empty_comment_very_long_itemized_block_wrap_comments_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fstart_with_empty_comment_very_long_itemized_block_wrap_comments_false.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,19 @@\n+// rustfmt-wrap_comments: false\n+\n+//\n+// - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+// - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+\n+//\n+// * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+// * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+\n+/*\n+ * - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/\n+/*\n+ * - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/\n+\n+/*\n+ * * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/\n+/*\n+ * * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/"}, {"sha": "c8af8383e058a117b7000a20b40bbaef2c1db746", "filename": "tests/target/issue-5088/start_with_empty_comment_very_long_itemized_block_wrap_comments_true.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fstart_with_empty_comment_very_long_itemized_block_wrap_comments_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fstart_with_empty_comment_very_long_itemized_block_wrap_comments_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fstart_with_empty_comment_very_long_itemized_block_wrap_comments_true.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,27 @@\n+// rustfmt-wrap_comments: true\n+\n+//\n+// - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+//   tempor incididunt ut labore et dolore magna aliqua.\n+// - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+//   tempor incididunt ut labore et dolore magna aliqua.\n+\n+//\n+// * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+//   tempor incididunt ut labore et dolore magna aliqua.\n+// * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+//   tempor incididunt ut labore et dolore magna aliqua.\n+\n+/*\n+ * - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+ *   tempor incididunt ut labore et dolore magna aliqua. */\n+/*\n+ * - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+ *   tempor incididunt ut labore et dolore magna aliqua. */\n+\n+/*\n+ * * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+ *   tempor incididunt ut labore et dolore magna aliqua. */\n+/*\n+ * * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+ *   tempor incididunt ut labore et dolore magna aliqua. */"}, {"sha": "75cc42c0e66bb119dd1a248aa25efec85126560c", "filename": "tests/target/issue-5088/start_with_empty_comment_wrap_comments_false.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fstart_with_empty_comment_wrap_comments_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fstart_with_empty_comment_wrap_comments_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fstart_with_empty_comment_wrap_comments_false.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-wrap_comments: false\n+\n+//\n+// - some itemized block 1\n+// - some itemized block 2\n+\n+//\n+// * some itemized block 3\n+// * some itemized block 4\n+\n+/*\n+ * - some itemized block 5\n+ * - some itemized block 6 */\n+\n+/*\n+ * * some itemized block 7\n+ * * some itemized block 8 */"}, {"sha": "ef2c8f90cd309743d4d9b680c9781f60f426c3da", "filename": "tests/target/issue-5088/start_with_empty_comment_wrap_comments_true.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fstart_with_empty_comment_wrap_comments_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fstart_with_empty_comment_wrap_comments_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fstart_with_empty_comment_wrap_comments_true.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-wrap_comments: true\n+\n+//\n+// - some itemized block 1\n+// - some itemized block 2\n+\n+//\n+// * some itemized block 3\n+// * some itemized block 4\n+\n+/*\n+ * - some itemized block 5\n+ * - some itemized block 6 */\n+\n+/*\n+ * * some itemized block 7\n+ * * some itemized block 8 */"}, {"sha": "c826cc5d4da6e4f58575ec1ea89b9330d65de9c3", "filename": "tests/target/issue-5088/very_long_comment_wrap_comments_false.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fvery_long_comment_wrap_comments_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fvery_long_comment_wrap_comments_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fvery_long_comment_wrap_comments_false.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,13 @@\n+// rustfmt-wrap_comments: false\n+\n+// - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+// - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+\n+// * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+// * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+\n+/* - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/\n+/* - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/\n+\n+/* * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/\n+/* * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.*/"}, {"sha": "7f764dbd8a22b6665cdf1bb46bc1ac67d0f70847", "filename": "tests/target/issue-5088/very_long_comment_wrap_comments_true.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fvery_long_comment_wrap_comments_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5088%2Fvery_long_comment_wrap_comments_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5088%2Fvery_long_comment_wrap_comments_true.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,21 @@\n+// rustfmt-wrap_comments: true\n+\n+// - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+//   tempor incididunt ut labore et dolore magna aliqua.\n+// - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+//   tempor incididunt ut labore et dolore magna aliqua.\n+\n+// * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+//   tempor incididunt ut labore et dolore magna aliqua.\n+// * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+//   tempor incididunt ut labore et dolore magna aliqua.\n+\n+/* - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+ *   tempor incididunt ut labore et dolore magna aliqua. */\n+/* - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+ *   tempor incididunt ut labore et dolore magna aliqua. */\n+\n+/* * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+ *   tempor incididunt ut labore et dolore magna aliqua. */\n+/* * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n+ *   tempor incididunt ut labore et dolore magna aliqua. */"}, {"sha": "6981a65808c900ab1ca33ba66c518cf6047f09f2", "filename": "tests/target/issue-5095.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5095.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue-5095.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5095.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,27 @@\n+// rustfmt-wrap_comments: true\n+\n+pub mod a_long_name {\n+    pub mod b_long_name {\n+        pub mod c_long_name {\n+            pub mod d_long_name {\n+                pub mod e_long_name {\n+                    pub struct Bananas;\n+                    impl Bananas {\n+                        pub fn fantastic() {}\n+                    }\n+\n+                    pub mod f_long_name {\n+                        pub struct Apples;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+/// Check out [my other struct] ([`Bananas`]) and [the method it has].\n+///\n+/// [my other struct]: a_long_name::b_long_name::c_long_name::d_long_name::e_long_name::f_long_name::Apples\n+/// [`Bananas`]: a_long_name::b_long_name::c_long_name::d_long_name::e_long_name::Bananas::fantastic()\n+/// [the method it has]: a_long_name::b_long_name::c_long_name::d_long_name::e_long_name::Bananas::fantastic()\n+pub struct A;"}, {"sha": "de17467c0efad51e613126a491a110b92da35537", "filename": "tests/target/issue_4823.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue_4823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue_4823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4823.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,5 @@\n+macro_rules! m {\n+    () => {\n+        type Type;\n+    };\n+}"}, {"sha": "26d771720b6c52963262acaee3343cb15db04109", "filename": "tests/target/issue_5027.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue_5027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue_5027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_5027.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-version: Two\n+\n+pub type Iter<'a, D> = impl DoubleEndedIterator<Item = (SomethingSomethingSomethingLongType<D>)>\n+    + ExactSizeIterator\n+    + 'a;\n+\n+trait FOo {\n+    pub type Iter<'a, D> = impl DoubleEndedIterator<Item = (SomethingSomethingSomethingLongType<D>)>\n+        + ExactSizeIterator\n+        + 'a;\n+}\n+\n+impl Bar {\n+    type Iter<'a, D> = impl DoubleEndedIterator<Item = (SomethingSomethingSomethingLongType<D>)>\n+        + ExactSizeIterator\n+        + 'a;\n+}"}, {"sha": "7a0be06f7917a6c7d8ca93ff41ad071266b194f7", "filename": "tests/target/issue_5086.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue_5086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3053225579b7e05650274126006a8a31ef855e8/tests%2Ftarget%2Fissue_5086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_5086.rs?ref=e3053225579b7e05650274126006a8a31ef855e8", "patch": "@@ -0,0 +1,2 @@\n+#[cfg(any())]\n+type Type: Bound;"}]}