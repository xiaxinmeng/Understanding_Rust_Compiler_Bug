{"sha": "573a8d8d30723592030c4eb22ebea637a58ac411", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3M2E4ZDhkMzA3MjM1OTIwMzBjNGViMjJlYmVhNjM3YTU4YWM0MTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T04:47:35Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T04:47:35Z"}, "message": "syntax: extract `error_on_invalid_abi`.", "tree": {"sha": "e7ac22e44bde855e04965672427c487352885df4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7ac22e44bde855e04965672427c487352885df4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/573a8d8d30723592030c4eb22ebea637a58ac411", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/573a8d8d30723592030c4eb22ebea637a58ac411", "html_url": "https://github.com/rust-lang/rust/commit/573a8d8d30723592030c4eb22ebea637a58ac411", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/573a8d8d30723592030c4eb22ebea637a58ac411/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66bf323a3bb8aaa6162cf02ce9e3db2aa44f4779", "url": "https://api.github.com/repos/rust-lang/rust/commits/66bf323a3bb8aaa6162cf02ce9e3db2aa44f4779", "html_url": "https://github.com/rust-lang/rust/commit/66bf323a3bb8aaa6162cf02ce9e3db2aa44f4779"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "722f8969fb09e9e27474f6c610f0a869ca7d7532", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/573a8d8d30723592030c4eb22ebea637a58ac411/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573a8d8d30723592030c4eb22ebea637a58ac411/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=573a8d8d30723592030c4eb22ebea637a58ac411", "patch": "@@ -1501,32 +1501,35 @@ impl<'a> Parser<'a> {\n         match self.token.kind {\n             token::Literal(token::Lit { kind: token::Str, symbol, suffix }) |\n             token::Literal(token::Lit { kind: token::StrRaw(..), symbol, suffix }) => {\n-                let sp = self.token.span;\n-                self.expect_no_suffix(sp, \"an ABI spec\", suffix);\n+                self.expect_no_suffix(self.token.span, \"an ABI spec\", suffix);\n                 self.bump();\n                 match abi::lookup(&symbol.as_str()) {\n                     Some(abi) => Ok(Some(abi)),\n                     None => {\n-                        let prev_span = self.prev_span;\n-                        struct_span_err!(\n-                            self.sess.span_diagnostic,\n-                            prev_span,\n-                            E0703,\n-                            \"invalid ABI: found `{}`\",\n-                            symbol\n-                        )\n-                        .span_label(prev_span, \"invalid ABI\")\n-                        .help(&format!(\"valid ABIs: {}\", abi::all_names().join(\", \")))\n-                        .emit();\n+                        self.error_on_invalid_abi(symbol);\n                         Ok(None)\n                     }\n                 }\n             }\n-\n             _ => Ok(None),\n         }\n     }\n \n+    /// Emit an error where `symbol` is an invalid ABI.\n+    fn error_on_invalid_abi(&self, symbol: Symbol) {\n+        let prev_span = self.prev_span;\n+        struct_span_err!(\n+            self.sess.span_diagnostic,\n+            prev_span,\n+            E0703,\n+            \"invalid ABI: found `{}`\",\n+            symbol\n+        )\n+        .span_label(prev_span, \"invalid ABI\")\n+        .help(&format!(\"valid ABIs: {}\", abi::all_names().join(\", \")))\n+        .emit();\n+    }\n+\n     /// We are parsing `async fn`. If we are on Rust 2015, emit an error.\n     fn ban_async_in_2015(&self, async_span: Span) {\n         if async_span.rust_2015() {"}]}