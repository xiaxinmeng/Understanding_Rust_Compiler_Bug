{"sha": "01d784131f0a11d19d0ab5398b00ca6bbfd283b1", "node_id": "C_kwDOAAsO6NoAKDAxZDc4NDEzMWYwYTExZDE5ZDBhYjUzOThiMDBjYTZiYmZkMjgzYjE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-28T06:35:34Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-28T18:09:27Z"}, "message": "Make trait/impl where clause mismatch on region error a bit more actionable", "tree": {"sha": "6ad2a50282b179732cce8eaf4505b426cabe38c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad2a50282b179732cce8eaf4505b426cabe38c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01d784131f0a11d19d0ab5398b00ca6bbfd283b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01d784131f0a11d19d0ab5398b00ca6bbfd283b1", "html_url": "https://github.com/rust-lang/rust/commit/01d784131f0a11d19d0ab5398b00ca6bbfd283b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83a28ef095ba4179a63196f16eadd97f110d6cb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/83a28ef095ba4179a63196f16eadd97f110d6cb3", "html_url": "https://github.com/rust-lang/rust/commit/83a28ef095ba4179a63196f16eadd97f110d6cb3"}], "stats": {"total": 169, "additions": 127, "deletions": 42}, "files": [{"sha": "891c77d18109c7da02e9a52c2fdc795d3bef577a", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 90, "deletions": 39, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=01d784131f0a11d19d0ab5398b00ca6bbfd283b1", "patch": "@@ -2,11 +2,14 @@ use crate::errors::RegionOriginNote;\n use crate::infer::error_reporting::{note_and_explain_region, TypeErrCtxt};\n use crate::infer::{self, SubregionOrigin};\n use rustc_errors::{\n-    fluent, struct_span_err, AddToDiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    fluent, struct_span_err, AddToDiagnostic, Applicability, Diagnostic, DiagnosticBuilder,\n+    ErrorGuaranteed,\n };\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::TypeError;\n-use rustc_middle::ty::{self, Region};\n+use rustc_middle::ty::{self, IsSuggestable, Region};\n+use rustc_span::symbol::kw;\n \n use super::ObligationCauseAsDiagArg;\n \n@@ -313,55 +316,43 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 );\n                 err\n             }\n-            infer::CompareImplItemObligation { span, impl_item_def_id, trait_item_def_id } => self\n-                .report_extra_impl_obligation(\n+            infer::CompareImplItemObligation { span, impl_item_def_id, trait_item_def_id } => {\n+                let mut err = self.report_extra_impl_obligation(\n                     span,\n                     impl_item_def_id,\n                     trait_item_def_id,\n                     &format!(\"`{}: {}`\", sup, sub),\n-                ),\n+                );\n+                // We should only suggest rewriting the `where` clause if the predicate is within that `where` clause\n+                if self\n+                    .tcx\n+                    .hir()\n+                    .get_generics(impl_item_def_id)\n+                    .unwrap()\n+                    .where_clause_span\n+                    .contains(span)\n+                {\n+                    self.suggest_copy_trait_method_bounds(\n+                        trait_item_def_id,\n+                        impl_item_def_id,\n+                        &mut err,\n+                    );\n+                }\n+                err\n+            }\n             infer::CheckAssociatedTypeBounds { impl_item_def_id, trait_item_def_id, parent } => {\n                 let mut err = self.report_concrete_failure(*parent, sub, sup);\n-\n                 let trait_item_span = self.tcx.def_span(trait_item_def_id);\n                 let item_name = self.tcx.item_name(impl_item_def_id.to_def_id());\n                 err.span_label(\n                     trait_item_span,\n                     format!(\"definition of `{}` from trait\", item_name),\n                 );\n-\n-                let trait_predicates = self.tcx.explicit_predicates_of(trait_item_def_id);\n-                let impl_predicates = self.tcx.explicit_predicates_of(impl_item_def_id);\n-\n-                let impl_predicates: rustc_data_structures::fx::FxHashSet<_> =\n-                    impl_predicates.predicates.into_iter().map(|(pred, _)| pred).collect();\n-                let clauses: Vec<_> = trait_predicates\n-                    .predicates\n-                    .into_iter()\n-                    .filter(|&(pred, _)| !impl_predicates.contains(pred))\n-                    .map(|(pred, _)| format!(\"{}\", pred))\n-                    .collect();\n-\n-                if !clauses.is_empty() {\n-                    let generics = self.tcx.hir().get_generics(impl_item_def_id).unwrap();\n-                    let where_clause_span = generics.tail_span_for_predicate_suggestion();\n-\n-                    let suggestion = format!(\n-                        \"{} {}\",\n-                        generics.add_where_or_trailing_comma(),\n-                        clauses.join(\", \"),\n-                    );\n-                    err.span_suggestion(\n-                        where_clause_span,\n-                        &format!(\n-                            \"try copying {} from the trait\",\n-                            if clauses.len() > 1 { \"these clauses\" } else { \"this clause\" }\n-                        ),\n-                        suggestion,\n-                        rustc_errors::Applicability::MaybeIncorrect,\n-                    );\n-                }\n-\n+                self.suggest_copy_trait_method_bounds(\n+                    trait_item_def_id,\n+                    impl_item_def_id,\n+                    &mut err,\n+                );\n                 err\n             }\n             infer::AscribeUserTypeProvePredicate(span) => {\n@@ -388,6 +379,66 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n     }\n \n+    pub fn suggest_copy_trait_method_bounds(\n+        &self,\n+        trait_item_def_id: DefId,\n+        impl_item_def_id: LocalDefId,\n+        err: &mut Diagnostic,\n+    ) {\n+        // FIXME(compiler-errors): Right now this is only being used for region\n+        // predicate mismatches. Ideally, we'd use it for *all* predicate mismatches,\n+        // but right now it's not really very smart when it comes to implicit `Sized`\n+        // predicates and bounds on the trait itself.\n+\n+        let impl_def_id =\n+            self.tcx.associated_item(impl_item_def_id).impl_container(self.tcx).unwrap();\n+        let trait_substs = self\n+            .tcx\n+            .impl_trait_ref(impl_def_id)\n+            .unwrap()\n+            // Replace the explicit self type with `Self` for better suggestion rendering\n+            .with_self_ty(self.tcx, self.tcx.mk_ty_param(0, kw::SelfUpper))\n+            .substs;\n+        let trait_item_substs =\n+            ty::InternalSubsts::identity_for_item(self.tcx, impl_item_def_id.to_def_id())\n+                .rebase_onto(self.tcx, impl_def_id, trait_substs);\n+\n+        let mut is_suggestable = true;\n+        let trait_predicates = self\n+            .tcx\n+            .bound_explicit_predicates_of(trait_item_def_id)\n+            .map_bound(|p| p.predicates)\n+            .subst_iter_copied(self.tcx, trait_item_substs)\n+            .map(|(pred, _)| {\n+                if !pred.is_suggestable(self.tcx, false) {\n+                    is_suggestable = false;\n+                }\n+                pred.to_string()\n+            })\n+            .collect::<Vec<_>>();\n+\n+        let generics = self.tcx.hir().get_generics(impl_item_def_id).unwrap();\n+\n+        if is_suggestable {\n+            if trait_predicates.is_empty() {\n+                err.span_suggestion_verbose(\n+                    generics.where_clause_span,\n+                    \"remove the `where` clause\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n+            } else {\n+                let space = if generics.where_clause_span.is_empty() { \" \" } else { \"\" };\n+                err.span_suggestion_verbose(\n+                    generics.where_clause_span,\n+                    \"copy the `where` clause predicates from the trait\",\n+                    format!(\"{space}where {}\", trait_predicates.join(\", \")),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+\n     pub(super) fn report_placeholder_failure(\n         &self,\n         placeholder_origin: SubregionOrigin<'tcx>,"}, {"sha": "eb19d57ab05acfaa65ccec8d8ea43299482a388a", "filename": "src/test/ui/compare-method/region-extra-2.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr?ref=01d784131f0a11d19d0ab5398b00ca6bbfd283b1", "patch": "@@ -6,6 +6,11 @@ LL |     fn renew<'b: 'a>(self) -> &'b mut [T];\n ...\n LL |     fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b {\n    |                                                     ^^ impl has extra requirement `'a: 'b`\n+   |\n+help: copy the `where` clause predicates from the trait\n+   |\n+LL |     fn renew<'b: 'a>(self) -> &'b mut [T] where 'b: 'a {\n+   |                                           ~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "1a471e18d9dc1f5291f11f7eddc5cf659728d6a2", "filename": "src/test/ui/compare-method/region-extra.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr?ref=01d784131f0a11d19d0ab5398b00ca6bbfd283b1", "patch": "@@ -6,6 +6,12 @@ LL |     fn foo();\n ...\n LL |     fn foo() where 'a: 'b { }\n    |                        ^^ impl has extra requirement `'a: 'b`\n+   |\n+help: remove the `where` clause\n+   |\n+LL -     fn foo() where 'a: 'b { }\n+LL +     fn foo()  { }\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "3456b345cc28c04c329be128cc5b6d40c6d5a5b4", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=01d784131f0a11d19d0ab5398b00ca6bbfd283b1", "patch": "@@ -15,6 +15,11 @@ LL |     type B<'a, 'b> where 'a: 'b;\n ...\n LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |                                                ^^ impl has extra requirement `'b: 'a`\n+   |\n+help: copy the `where` clause predicates from the trait\n+   |\n+LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'a: 'b;\n+   |                                      ~~~~~~~~~~~~\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/impl_bounds.rs:18:33"}, {"sha": "b4b1bc7da7f455056c3809bb260ef41bb2e0e8f1", "filename": "src/test/ui/generic-associated-types/issue-90014.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr?ref=01d784131f0a11d19d0ab5398b00ca6bbfd283b1", "patch": "@@ -5,13 +5,17 @@ LL |     type Fut<'a> where Self: 'a;\n    |     ------------ definition of `Fut` from trait\n ...\n LL |     type Fut<'a> = impl Future<Output = ()>;\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^- help: try copying this clause from the trait: `where Self: 'a`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must outlive the lifetime `'a` as defined here\n   --> $DIR/issue-90014.rs:13:14\n    |\n LL |     type Fut<'a> = impl Future<Output = ()>;\n    |              ^^\n+help: copy the `where` clause predicates from the trait\n+   |\n+LL |     type Fut<'a> = impl Future<Output = ()> where Self: 'a;\n+   |                                             ++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "d5db962094ce99f67ef6b80fa97d1e373f701c7c", "filename": "src/test/ui/generic-associated-types/issue-91883.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr?ref=01d784131f0a11d19d0ab5398b00ca6bbfd283b1", "patch": "@@ -5,7 +5,7 @@ LL |     type Cursor<'tx>: Cursor<'tx>\n    |     ----------------------------- definition of `Cursor` from trait\n ...\n LL |     type Cursor<'tx> = CursorImpl<'tx>;\n-   |                        ^^^^^^^^^^^^^^^- help: try copying these clauses from the trait: `where 'db: 'tx, Self: 'tx`\n+   |                        ^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'db` as defined here\n   --> $DIR/issue-91883.rs:29:6\n@@ -17,6 +17,10 @@ note: but lifetime parameter must outlive the lifetime `'tx` as defined here\n    |\n LL |     type Cursor<'tx> = CursorImpl<'tx>;\n    |                 ^^^\n+help: copy the `where` clause predicates from the trait\n+   |\n+LL |     type Cursor<'tx> = CursorImpl<'tx> where 'db: 'tx, Self: 'tx;\n+   |                                        +++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "ddc420a7b4e610eed042330682d4c2f6117e1bc0", "filename": "src/test/ui/generic-associated-types/issue-92033.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr?ref=01d784131f0a11d19d0ab5398b00ca6bbfd283b1", "patch": "@@ -5,13 +5,17 @@ LL |     type TextureIter<'a>: Iterator<Item = &'a Texture>\n    |     -------------------------------------------------- definition of `TextureIter` from trait\n ...\n LL |     type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try copying this clause from the trait: `where Self: 'a`\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must outlive the lifetime `'a` as defined here\n   --> $DIR/issue-92033.rs:20:22\n    |\n LL |     type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n    |                      ^^\n+help: copy the `where` clause predicates from the trait\n+   |\n+LL |     type TextureIter<'a> = std::option::IntoIter<&'a Texture> where Self: 'a;\n+   |                                                               ++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "8a71fc73a9d2d3fa82d6a68ad206d2e3d06c6f3b", "filename": "src/test/ui/generic-associated-types/missing-where-clause-on-trait.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01d784131f0a11d19d0ab5398b00ca6bbfd283b1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr?ref=01d784131f0a11d19d0ab5398b00ca6bbfd283b1", "patch": "@@ -6,6 +6,12 @@ LL |     type Assoc<'a, 'b>;\n ...\n LL |     type Assoc<'a, 'b> = () where 'a: 'b;\n    |                                       ^^ impl has extra requirement `'a: 'b`\n+   |\n+help: remove the `where` clause\n+   |\n+LL -     type Assoc<'a, 'b> = () where 'a: 'b;\n+LL +     type Assoc<'a, 'b> = () ;\n+   |\n \n error: aborting due to previous error\n "}]}