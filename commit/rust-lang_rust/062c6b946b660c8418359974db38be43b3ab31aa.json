{"sha": "062c6b946b660c8418359974db38be43b3ab31aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MmM2Yjk0NmI2NjBjODQxODM1OTk3NGRiMzhiZTQzYjNhYjMxYWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-20T23:52:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-21T15:10:14Z"}, "message": "rustc: Implement \"for\" over interior vectors", "tree": {"sha": "763bc92a2f0ebbca38c257397a0aaca5486c7e6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/763bc92a2f0ebbca38c257397a0aaca5486c7e6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/062c6b946b660c8418359974db38be43b3ab31aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/062c6b946b660c8418359974db38be43b3ab31aa", "html_url": "https://github.com/rust-lang/rust/commit/062c6b946b660c8418359974db38be43b3ab31aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/062c6b946b660c8418359974db38be43b3ab31aa/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23d6a6bde127e31444b69d228ebd1e547095150d", "url": "https://api.github.com/repos/rust-lang/rust/commits/23d6a6bde127e31444b69d228ebd1e547095150d", "html_url": "https://github.com/rust-lang/rust/commit/23d6a6bde127e31444b69d228ebd1e547095150d"}], "stats": {"total": 56, "additions": 41, "deletions": 15}, "files": [{"sha": "208624270ff5a5e5902fa7a27c559d9ea923d697", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/062c6b946b660c8418359974db38be43b3ab31aa/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062c6b946b660c8418359974db38be43b3ab31aa/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=062c6b946b660c8418359974db38be43b3ab31aa", "patch": "@@ -335,7 +335,11 @@ fn check_for(&ctx cx, &@ast::local local, &@ast::expr seq, &ast::block block,\n         case (ty::ty_vec(?mt)) {\n             if (mt.mut != ast::imm) { unsafe = [seq_t]; }\n         }\n-        case (ty::ty_str) { }\n+        case (ty::ty_str) { /* no-op */ }\n+        case (ty::ty_ivec(?mt)) {\n+            if (mt.mut != ast::imm) { unsafe = [seq_t]; }\n+        }\n+        case (ty::ty_istr) { /* no-op */ }\n     }\n     auto new_sc =\n         @rec(root_vars=root_def,"}, {"sha": "dbaf89e623feb0bd98a0a17b61bb02de29a3daf3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/062c6b946b660c8418359974db38be43b3ab31aa/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062c6b946b660c8418359974db38be43b3ab31aa/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=062c6b946b660c8418359974db38be43b3ab31aa", "patch": "@@ -2691,15 +2691,24 @@ fn iter_sequence_inner(&@block_ctxt cx, ValueRef src,\n fn iter_sequence(@block_ctxt cx, ValueRef v, &ty::t t, &val_and_ty_fn f) ->\n    result {\n     fn iter_sequence_body(@block_ctxt cx, ValueRef v, &ty::t elt_ty,\n-                          &val_and_ty_fn f, bool trailing_null) -> result {\n-        auto p0 = cx.build.GEP(v, [C_int(0), C_int(abi::vec_elt_data)]);\n-        auto lenptr = cx.build.GEP(v, [C_int(0), C_int(abi::vec_elt_fill)]);\n-        auto llunit_ty;\n-        if (ty::type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, elt_ty)) {\n-            llunit_ty = T_i8();\n-        } else { llunit_ty = type_of(cx.fcx.lcx.ccx, cx.sp, elt_ty); }\n-        auto bcx = cx;\n-        auto len = bcx.build.Load(lenptr);\n+                          &val_and_ty_fn f, bool trailing_null, bool interior)\n+            -> result {\n+        auto p0;\n+        auto len;\n+        auto bcx;\n+        if (!interior) {\n+            p0 = cx.build.GEP(v, [C_int(0), C_int(abi::vec_elt_data)]);\n+            auto lp = cx.build.GEP(v, [C_int(0), C_int(abi::vec_elt_fill)]);\n+            len = cx.build.Load(lp);\n+            bcx = cx;\n+        } else {\n+            auto len_and_data_rslt = ivec::get_len_and_data(cx, v, elt_ty);\n+            len = len_and_data_rslt._0;\n+            p0 = len_and_data_rslt._1;\n+            bcx = len_and_data_rslt._2;\n+        }\n+\n+        auto llunit_ty = type_of_or_i8(cx, elt_ty);\n         if (trailing_null) {\n             auto unit_sz = size_of(bcx, elt_ty);\n             bcx = unit_sz.bcx;\n@@ -2709,13 +2718,21 @@ fn iter_sequence(@block_ctxt cx, ValueRef v, &ty::t t, &val_and_ty_fn f) ->\n             vi2p(bcx, bcx.build.Add(vp2i(bcx, p0), len), T_ptr(llunit_ty));\n         ret iter_sequence_inner(bcx, p0, p1, elt_ty, f);\n     }\n+\n     alt (ty::struct(cx.fcx.lcx.ccx.tcx, t)) {\n         case (ty::ty_vec(?elt)) {\n-            ret iter_sequence_body(cx, v, elt.ty, f, false);\n+            ret iter_sequence_body(cx, v, elt.ty, f, false, false);\n         }\n         case (ty::ty_str) {\n             auto et = ty::mk_mach(cx.fcx.lcx.ccx.tcx, common::ty_u8);\n-            ret iter_sequence_body(cx, v, et, f, true);\n+            ret iter_sequence_body(cx, v, et, f, true, false);\n+        }\n+        case (ty::ty_ivec(?elt)) {\n+            ret iter_sequence_body(cx, v, elt.ty, f, false, true);\n+        }\n+        case (ty::ty_istr) {\n+            auto et = ty::mk_mach(cx.fcx.lcx.ccx.tcx, common::ty_u8);\n+            ret iter_sequence_body(cx, v, et, f, true, true);\n         }\n         case (_) {\n             cx.fcx.lcx.ccx.sess.bug(\"unexpected type in \" +"}, {"sha": "4541ec377534c8cb1e62dede3b49c0ab5de98d58", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/062c6b946b660c8418359974db38be43b3ab31aa/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062c6b946b660c8418359974db38be43b3ab31aa/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=062c6b946b660c8418359974db38be43b3ab31aa", "patch": "@@ -1683,15 +1683,20 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n         case (ast::expr_for(?decl, ?seq, ?body, ?id)) {\n             check_expr(fcx, seq);\n             auto elt_ty;\n-            alt (structure_of(fcx, expr.span, expr_ty(fcx.ccx.tcx, seq))) {\n+            auto ety = expr_ty(fcx.ccx.tcx, seq);\n+            alt (structure_of(fcx, expr.span, ety)) {\n                 case (ty::ty_vec(?vec_elt_ty)) { elt_ty = vec_elt_ty.ty; }\n                 case (ty::ty_str) {\n                     elt_ty = ty::mk_mach(fcx.ccx.tcx, util::common::ty_u8);\n                 }\n+                case (ty::ty_ivec(?vec_elt_ty)) { elt_ty = vec_elt_ty.ty; }\n+                case (ty::ty_istr) {\n+                    elt_ty = ty::mk_mach(fcx.ccx.tcx, util::common::ty_u8);\n+                }\n                 case (_) {\n                     fcx.ccx.tcx.sess.span_fatal(expr.span,\n-                                              \"type of for loop iterator \\\n-                                               is not a vector or string\");\n+                        \"mismatched types: expected vector or string but \" +\n+                        \"found \" + ty_to_str(fcx.ccx.tcx, ety));\n                 }\n             }\n             check_for_or_for_each(fcx, decl, elt_ty, body, id);"}]}