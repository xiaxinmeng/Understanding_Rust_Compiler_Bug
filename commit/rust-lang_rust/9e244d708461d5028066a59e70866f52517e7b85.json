{"sha": "9e244d708461d5028066a59e70866f52517e7b85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMjQ0ZDcwODQ2MWQ1MDI4MDY2YTU5ZTcwODY2ZjUyNTE3ZTdiODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-23T09:06:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-23T09:06:25Z"}, "message": "auto merge of #14372 : neeee/rust/intrinsic-docs, r=brson", "tree": {"sha": "7878ef8287a3977c8c720a121f7b8ebc1504c998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7878ef8287a3977c8c720a121f7b8ebc1504c998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e244d708461d5028066a59e70866f52517e7b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e244d708461d5028066a59e70866f52517e7b85", "html_url": "https://github.com/rust-lang/rust/commit/9e244d708461d5028066a59e70866f52517e7b85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e244d708461d5028066a59e70866f52517e7b85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33c3eddd111bd708940f2e2fd84180cfae80e856", "url": "https://api.github.com/repos/rust-lang/rust/commits/33c3eddd111bd708940f2e2fd84180cfae80e856", "html_url": "https://github.com/rust-lang/rust/commit/33c3eddd111bd708940f2e2fd84180cfae80e856"}, {"sha": "3d6337079fcd9299a1a9966d1ef51bd66bcaa814", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6337079fcd9299a1a9966d1ef51bd66bcaa814", "html_url": "https://github.com/rust-lang/rust/commit/3d6337079fcd9299a1a9966d1ef51bd66bcaa814"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "095c48c818bf6004a10f94ff0c712b0c09bb795b", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/9e244d708461d5028066a59e70866f52517e7b85/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e244d708461d5028066a59e70866f52517e7b85/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=9e244d708461d5028066a59e70866f52517e7b85", "patch": "@@ -360,110 +360,189 @@ extern \"rust-intrinsic\" {\n     /// Perform a volatile store to the `dst` pointer.\n     pub fn volatile_store<T>(dst: *mut T, val: T);\n \n+    /// Returns the square root of an `f32`\n     pub fn sqrtf32(x: f32) -> f32;\n+    /// Returns the square root of an `f64`\n     pub fn sqrtf64(x: f64) -> f64;\n \n+    /// Raises an `f32` to an integer power.\n     pub fn powif32(a: f32, x: i32) -> f32;\n+    /// Raises an `f64` to an integer power.\n     pub fn powif64(a: f64, x: i32) -> f64;\n \n+    /// Returns the sine of an `f32`.\n     pub fn sinf32(x: f32) -> f32;\n+    /// Returns the sine of an `f64`.\n     pub fn sinf64(x: f64) -> f64;\n \n+    /// Returns the cosine of an `f32`.\n     pub fn cosf32(x: f32) -> f32;\n+    /// Returns the cosine of an `f64`.\n     pub fn cosf64(x: f64) -> f64;\n \n+    /// Raises an `f32` to an `f32` power.\n     pub fn powf32(a: f32, x: f32) -> f32;\n+    /// Raises an `f64` to an `f64` power.\n     pub fn powf64(a: f64, x: f64) -> f64;\n \n+    /// Returns the exponential of an `f32`.\n     pub fn expf32(x: f32) -> f32;\n+    /// Returns the exponential of an `f64`.\n     pub fn expf64(x: f64) -> f64;\n \n+    /// Returns 2 raised to the power of an `f32`.\n     pub fn exp2f32(x: f32) -> f32;\n+    /// Returns 2 raised to the power of an `f64`.\n     pub fn exp2f64(x: f64) -> f64;\n \n+    /// Returns the natural logarithm of an `f32`.\n     pub fn logf32(x: f32) -> f32;\n+    /// Returns the natural logarithm of an `f64`.\n     pub fn logf64(x: f64) -> f64;\n \n+    /// Returns the base 10 logarithm of an `f32`.\n     pub fn log10f32(x: f32) -> f32;\n+    /// Returns the base 10 logarithm of an `f64`.\n     pub fn log10f64(x: f64) -> f64;\n \n+    /// Returns the base 2 logarithm of an `f32`.\n     pub fn log2f32(x: f32) -> f32;\n+    /// Returns the base 2 logarithm of an `f64`.\n     pub fn log2f64(x: f64) -> f64;\n \n+    /// Returns `a * b + c` for `f32` values.\n     pub fn fmaf32(a: f32, b: f32, c: f32) -> f32;\n+    /// Returns `a * b + c` for `f64` values.\n     pub fn fmaf64(a: f64, b: f64, c: f64) -> f64;\n \n+    /// Returns the absolute value of an `f32`.\n     pub fn fabsf32(x: f32) -> f32;\n+    /// Returns the absolute value of an `f64`.\n     pub fn fabsf64(x: f64) -> f64;\n \n+    /// Copies the sign from `y` to `x` for `f32` values.\n     pub fn copysignf32(x: f32, y: f32) -> f32;\n+    /// Copies the sign from `y` to `x` for `f64` values.\n     pub fn copysignf64(x: f64, y: f64) -> f64;\n \n+    /// Returns the largest integer less than or equal to an `f32`.\n     pub fn floorf32(x: f32) -> f32;\n+    /// Returns the largest integer less than or equal to an `f64`.\n     pub fn floorf64(x: f64) -> f64;\n \n+    /// Returns the smallest integer greater than or equal to an `f32`.\n     pub fn ceilf32(x: f32) -> f32;\n+    /// Returns the smallest integer greater than or equal to an `f64`.\n     pub fn ceilf64(x: f64) -> f64;\n \n+    /// Returns the integer part of an `f32`.\n     pub fn truncf32(x: f32) -> f32;\n+    /// Returns the integer part of an `f64`.\n     pub fn truncf64(x: f64) -> f64;\n \n+    /// Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\n+    /// if the argument is not an integer.\n     pub fn rintf32(x: f32) -> f32;\n+    /// Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\n+    /// if the argument is not an integer.\n     pub fn rintf64(x: f64) -> f64;\n \n+    /// Returns the nearest integer to an `f32`.\n     pub fn nearbyintf32(x: f32) -> f32;\n+    /// Returns the nearest integer to an `f64`.\n     pub fn nearbyintf64(x: f64) -> f64;\n \n+    /// Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.\n     pub fn roundf32(x: f32) -> f32;\n+    /// Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.\n     pub fn roundf64(x: f64) -> f64;\n \n+    /// Returns the number of bits set in a `u8`.\n     pub fn ctpop8(x: u8) -> u8;\n+    /// Returns the number of bits set in a `u16`.\n     pub fn ctpop16(x: u16) -> u16;\n+    /// Returns the number of bits set in a `u32`.\n     pub fn ctpop32(x: u32) -> u32;\n+    /// Returns the number of bits set in a `u64`.\n     pub fn ctpop64(x: u64) -> u64;\n \n+    /// Returns the number of leading bits unset in a `u8`.\n     pub fn ctlz8(x: u8) -> u8;\n+    /// Returns the number of leading bits unset in a `u16`.\n     pub fn ctlz16(x: u16) -> u16;\n+    /// Returns the number of leading bits unset in a `u32`.\n     pub fn ctlz32(x: u32) -> u32;\n+    /// Returns the number of leading bits unset in a `u64`.\n     pub fn ctlz64(x: u64) -> u64;\n \n+    /// Returns the number of trailing bits unset in a `u8`.\n     pub fn cttz8(x: u8) -> u8;\n+    /// Returns the number of trailing bits unset in a `u16`.\n     pub fn cttz16(x: u16) -> u16;\n+    /// Returns the number of trailing bits unset in a `u32`.\n     pub fn cttz32(x: u32) -> u32;\n+    /// Returns the number of trailing bits unset in a `u64`.\n     pub fn cttz64(x: u64) -> u64;\n \n+    /// Reverses the bytes in a `u16`.\n     pub fn bswap16(x: u16) -> u16;\n+    /// Reverses the bytes in a `u32`.\n     pub fn bswap32(x: u32) -> u32;\n+    /// Reverses the bytes in a `u64`.\n     pub fn bswap64(x: u64) -> u64;\n \n+    /// Performs checked `i8` addition.\n     pub fn i8_add_with_overflow(x: i8, y: i8) -> (i8, bool);\n+    /// Performs checked `i16` addition.\n     pub fn i16_add_with_overflow(x: i16, y: i16) -> (i16, bool);\n+    /// Performs checked `i32` addition.\n     pub fn i32_add_with_overflow(x: i32, y: i32) -> (i32, bool);\n+    /// Performs checked `i64` addition.\n     pub fn i64_add_with_overflow(x: i64, y: i64) -> (i64, bool);\n \n+    /// Performs checked `u8` addition.\n     pub fn u8_add_with_overflow(x: u8, y: u8) -> (u8, bool);\n+    /// Performs checked `u16` addition.\n     pub fn u16_add_with_overflow(x: u16, y: u16) -> (u16, bool);\n+    /// Performs checked `u32` addition.\n     pub fn u32_add_with_overflow(x: u32, y: u32) -> (u32, bool);\n+    /// Performs checked `u64` addition.\n     pub fn u64_add_with_overflow(x: u64, y: u64) -> (u64, bool);\n \n+    /// Performs checked `i8` subtraction.\n     pub fn i8_sub_with_overflow(x: i8, y: i8) -> (i8, bool);\n+    /// Performs checked `i16` subtraction.\n     pub fn i16_sub_with_overflow(x: i16, y: i16) -> (i16, bool);\n+    /// Performs checked `i32` subtraction.\n     pub fn i32_sub_with_overflow(x: i32, y: i32) -> (i32, bool);\n+    /// Performs checked `i64` subtraction.\n     pub fn i64_sub_with_overflow(x: i64, y: i64) -> (i64, bool);\n \n+    /// Performs checked `u8` subtraction.\n     pub fn u8_sub_with_overflow(x: u8, y: u8) -> (u8, bool);\n+    /// Performs checked `u16` subtraction.\n     pub fn u16_sub_with_overflow(x: u16, y: u16) -> (u16, bool);\n+    /// Performs checked `u32` subtraction.\n     pub fn u32_sub_with_overflow(x: u32, y: u32) -> (u32, bool);\n+    /// Performs checked `u64` subtraction.\n     pub fn u64_sub_with_overflow(x: u64, y: u64) -> (u64, bool);\n \n+    /// Performs checked `i8` multiplication.\n     pub fn i8_mul_with_overflow(x: i8, y: i8) -> (i8, bool);\n+    /// Performs checked `i16` multiplication.\n     pub fn i16_mul_with_overflow(x: i16, y: i16) -> (i16, bool);\n+    /// Performs checked `i32` multiplication.\n     pub fn i32_mul_with_overflow(x: i32, y: i32) -> (i32, bool);\n+    /// Performs checked `i64` multiplication.\n     pub fn i64_mul_with_overflow(x: i64, y: i64) -> (i64, bool);\n \n+    /// Performs checked `u8` multiplication.\n     pub fn u8_mul_with_overflow(x: u8, y: u8) -> (u8, bool);\n+    /// Performs checked `u16` multiplication.\n     pub fn u16_mul_with_overflow(x: u16, y: u16) -> (u16, bool);\n+    /// Performs checked `u32` multiplication.\n     pub fn u32_mul_with_overflow(x: u32, y: u32) -> (u32, bool);\n+    /// Performs checked `u64` multiplication.\n     pub fn u64_mul_with_overflow(x: u64, y: u64) -> (u64, bool);\n }\n "}]}