{"sha": "9dbbfb8341488b2fa1d9193de52d055fc842dc06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYmJmYjgzNDE0ODhiMmZhMWQ5MTkzZGU1MmQwNTVmYzg0MmRjMDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-14T16:41:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-14T16:41:38Z"}, "message": "auto merge of #11438 : b1nd/rust/rust-doc, r=alexcrichton\n\ncc @cmr\r\n\r\nTemporary change to issue #10535. Requires significant re-factoring to search completely based on the index paths. For example searching for \"File::\" in this fix will return no results. Still need to search completely based on path (rather than name's + types) to completely fix. Will continue to work this", "tree": {"sha": "d85cd1dfe163032e3b7c58081ff8d35afcd9c4fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d85cd1dfe163032e3b7c58081ff8d35afcd9c4fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dbbfb8341488b2fa1d9193de52d055fc842dc06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dbbfb8341488b2fa1d9193de52d055fc842dc06", "html_url": "https://github.com/rust-lang/rust/commit/9dbbfb8341488b2fa1d9193de52d055fc842dc06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dbbfb8341488b2fa1d9193de52d055fc842dc06/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77eeddaa481fa083dfa857e5d7dd7f5ab784a9f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/77eeddaa481fa083dfa857e5d7dd7f5ab784a9f1", "html_url": "https://github.com/rust-lang/rust/commit/77eeddaa481fa083dfa857e5d7dd7f5ab784a9f1"}, {"sha": "9a45c9d7c6928743f9e7a7161bf564a65bfc0577", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a45c9d7c6928743f9e7a7161bf564a65bfc0577", "html_url": "https://github.com/rust-lang/rust/commit/9a45c9d7c6928743f9e7a7161bf564a65bfc0577"}], "stats": {"total": 174, "additions": 125, "deletions": 49}, "files": [{"sha": "05fb8aa30cea2904680e4af6536a6d6533fc2994", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 125, "deletions": 49, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/9dbbfb8341488b2fa1d9193de52d055fc842dc06/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/9dbbfb8341488b2fa1d9193de52d055fc842dc06/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=9dbbfb8341488b2fa1d9193de52d055fc842dc06", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,7 +11,7 @@\n /*jslint browser: true, es5: true */\n /*globals $: true, searchIndex: true, rootPath: true, allPaths: true */\n \n-(function () {\n+(function() {\n     \"use strict\";\n     var resizeTimeout, interval;\n \n@@ -21,9 +21,9 @@\n         if (resizeTimeout) {\n             clearTimeout(resizeTimeout);\n         }\n-        resizeTimeout = setTimeout(function () {\n+        resizeTimeout = setTimeout(function() {\n             var contentWidth = $('.content').width();\n-            $('.docblock.short').width(function () {\n+            $('.docblock.short').width(function() {\n                 return contentWidth - 40 - $(this).prev().width();\n             }).addClass('nowrap');\n         }, 150);\n@@ -50,7 +50,7 @@\n     highlightSourceLines();\n     $(window).on('hashchange', highlightSourceLines);\n \n-    $(document).on('keyup', function (e) {\n+    $(document).on('keyup', function(e) {\n         if (document.activeElement.tagName === 'INPUT') {\n             return;\n         }\n@@ -71,13 +71,13 @@\n             e.preventDefault();\n             $('.search-input').focus();\n         }\n-    }).on('click', function (e) {\n+    }).on('click', function(e) {\n         if (!$(e.target).closest('#help').length) {\n             $('#help').addClass('hidden');\n         }\n     });\n \n-    $('.version-selector').on('change', function () {\n+    $('.version-selector').on('change', function() {\n         var i, match,\n             url = document.location.href,\n             stripped = '',\n@@ -102,13 +102,29 @@\n         // clear cached values from the search bar\n         $(\".search-input\")[0].value = '';\n \n+        /**\n+         * Executes the query and builds an index of results\n+         * @param  {[Object]} query     [The user query]\n+         * @param  {[type]} max         [The maximum results returned]\n+         * @param  {[type]} searchWords [The list of search words to query against]\n+         * @return {[type]}             [A search index of results]\n+         */\n         function execQuery(query, max, searchWords) {\n             var valLower = query.query.toLowerCase(),\n                 val = valLower,\n                 typeFilter = query.type,\n                 results = [],\n                 aa = 0,\n-                bb = 0;\n+                bb = 0,\n+                split = valLower.split(\"::\");\n+\n+            //remove empty keywords\n+            for (var j = 0; j < split.length; j++) {\n+                split[j].toLowerCase();\n+                if (split[j] === \"\") {\n+                    split.splice(j, 1);\n+                }\n+            }\n \n             // quoted values mean literal search\n             bb = searchWords.length;\n@@ -128,31 +144,41 @@\n             } else {\n                 // gather matching search results up to a certain maximum\n                 val = val.replace(/\\_/g, \"\");\n-                for (aa = 0; aa < bb; aa += 1) {\n-                    if (searchWords[aa].indexOf(val) > -1 || searchWords[aa].replace(/_/g, \"\").indexOf(val) > -1) {\n-                        // filter type: ... queries\n-                        if (!typeFilter || typeFilter === searchIndex[aa].ty) {\n-                            results.push([aa, searchWords[aa].replace(/_/g, \"\").indexOf(val)]);\n+                for (var i = 0; i < split.length; i++) {\n+                    for (aa = 0; aa < bb; aa += 1) {\n+                        if (searchWords[aa].indexOf(split[i]) > -1 || searchWords[aa].indexOf(val) > -1 || searchWords[aa].replace(/_/g, \"\").indexOf(val) > -1) {\n+                            // filter type: ... queries\n+                            if (!typeFilter || typeFilter === searchIndex[aa].ty) {\n+                                results.push([aa, searchWords[aa].replace(/_/g, \"\").indexOf(val)]);\n+                            }\n+                        }\n+                        if (results.length === max) {\n+                            break;\n                         }\n-                    }\n-                    if (results.length === max) {\n-                        break;\n                     }\n                 }\n             }\n+\n             bb = results.length;\n             for (aa = 0; aa < bb; aa += 1) {\n                 results[aa].push(searchIndex[results[aa][0]].ty);\n-            }\n-            for (aa = 0; aa < bb; aa += 1) {\n                 results[aa].push(searchIndex[results[aa][0]].path);\n+                results[aa].push(searchIndex[results[aa][0]].name);\n+                results[aa].push(searchIndex[results[aa][0]].parent);\n             }\n-\n             // if there are no results then return to default and fail\n             if (results.length === 0) {\n                 return [];\n             }\n \n+            results.forEach(function(item) {\n+                for (var i = 0; i < split.length; i++) {\n+                    if (item[3].indexOf(split[i]) === -1) {\n+                        item = null;\n+                        break;\n+                    }\n+                }\n+            });\n             // sort by exact match\n             results.sort(function search_complete_sort0(aaa, bbb) {\n                 if (searchWords[aaa[0]] === valLower && searchWords[bbb[0]] !== valLower) {\n@@ -203,10 +229,58 @@\n                     results[aa][0] = -1;\n                 }\n             }\n-\n+            for (var i = 0; i < results.length; i++) {\n+                var result = results[i],\n+                    name = result[4].toLowerCase(),\n+                    path = result[3].toLowerCase(),\n+                    parent = allPaths[result[5]];\n+\n+                var valid = validateResult(name, path, split, parent);\n+                if (!valid) {\n+                    result[0] = -1;\n+                }\n+            }\n             return results;\n         }\n \n+        /**\n+         * Validate performs the following boolean logic. For example: \"File::open\" will give\n+         * IF A PARENT EXISTS => (\"file\" && \"open\") exists in (name || path || parent)\n+         * OR => (\"file\" && \"open\") exists in (name || path )\n+         *\n+         * This could be written functionally, but I wanted to minimise functions on stack.\n+         * @param  {[string]} name   [The name of the result]\n+         * @param  {[string]} path   [The path of the result]\n+         * @param  {[string]} keys   [The keys to be used ([\"file\", \"open\"])]\n+         * @param  {[object]} parent [The parent of the result]\n+         * @return {[boolean]}       [Whether the result is valid or not]\n+         */\n+        function validateResult(name, path, keys, parent) {\n+            //initially valid\n+            var validate = true;\n+            //if there is a parent, then validate against parent\n+            if (parent !== undefined) {\n+                for (var i = 0; i < keys.length; i++) {\n+                    // if previous keys are valid and current key is in the path, name or parent\n+                    if ((validate) && (name.toLowerCase().indexOf(keys[i]) > -1 || path.toLowerCase().indexOf(keys[i]) > -1 || parent.name.toLowerCase().indexOf(keys[i]) > -1)) {\n+                        validate = true;\n+                    } else {\n+                        validate = false;\n+                    }\n+                }\n+            } else {\n+                for (var i = 0; i < keys.length; i++) {\n+                    // if previous keys are valid and current key is in the path, name\n+                    if ((validate) && (name.toLowerCase().indexOf(keys[i]) > -1 || path.toLowerCase().indexOf(keys[i]) > -1)) {\n+                        validate = true;\n+                    } else {\n+                        validate = false;\n+                    }\n+                }\n+            }\n+            return validate;\n+        }\n+\n         function getQuery() {\n             var matches, type, query = $('.search-input').val();\n \n@@ -226,25 +300,25 @@\n         function initSearchNav() {\n             var hoverTimeout, $results = $('.search-results .result');\n \n-            $results.on('click', function () {\n+            $results.on('click', function() {\n                 var dst = $(this).find('a')[0];\n                 console.log(window.location.pathname, dst.pathname);\n                 if (window.location.pathname == dst.pathname) {\n                     $('#search').addClass('hidden');\n                     $('#main').removeClass('hidden');\n                 }\n                 document.location.href = dst.href;\n-            }).on('mouseover', function () {\n+            }).on('mouseover', function() {\n                 var $el = $(this);\n                 clearTimeout(hoverTimeout);\n-                hoverTimeout = setTimeout(function () {\n+                hoverTimeout = setTimeout(function() {\n                     $results.removeClass('highlighted');\n                     $el.addClass('highlighted');\n                 }, 20);\n             });\n \n             $(document).off('keypress.searchnav');\n-            $(document).on('keypress.searchnav', function (e) {\n+            $(document).on('keypress.searchnav', function(e) {\n                 var $active = $results.filter('.highlighted');\n \n                 if (e.keyCode === 38) { // up\n@@ -282,7 +356,7 @@\n             if (results.length > 0) {\n                 shown = [];\n \n-                results.forEach(function (item) {\n+                results.forEach(function(item) {\n                     var name, type;\n \n                     if (shown.indexOf(item) !== -1) {\n@@ -298,55 +372,57 @@\n                     if (type === 'mod') {\n                         output += item.path +\n                             '::<a href=\"' + rootPath +\n-                                            item.path.replace(/::/g, '/') + '/' +\n-                                            name + '/index.html\" class=\"' +\n-                                            type + '\">' + name + '</a>';\n+                            item.path.replace(/::/g, '/') + '/' +\n+                            name + '/index.html\" class=\"' +\n+                            type + '\">' + name + '</a>';\n                     } else if (type === 'static' || type === 'reexport') {\n                         output += item.path +\n                             '::<a href=\"' + rootPath +\n-                                            item.path.replace(/::/g, '/') +\n-                                            '/index.html\" class=\"' + type +\n-                                            '\">' + name + '</a>';\n+                            item.path.replace(/::/g, '/') +\n+                            '/index.html\" class=\"' + type +\n+                            '\">' + name + '</a>';\n                     } else if (item.parent !== undefined) {\n                         var myparent = allPaths[item.parent];\n                         var anchor = '#' + type + '.' + name;\n                         output += item.path + '::' + myparent.name +\n                             '::<a href=\"' + rootPath +\n-                                            item.path.replace(/::/g, '/') +\n-                                            '/' + myparent.type +\n-                                            '.' + myparent.name +\n-                                            '.html' + anchor +\n-                                            '\" class=\"' + type +\n-                                            '\">' + name + '</a>';\n+                            item.path.replace(/::/g, '/') +\n+                            '/' + myparent.type +\n+                            '.' + myparent.name +\n+                            '.html' + anchor +\n+                            '\" class=\"' + type +\n+                            '\">' + name + '</a>';\n                     } else {\n                         output += item.path +\n                             '::<a href=\"' + rootPath +\n-                                            item.path.replace(/::/g, '/') +\n-                                            '/' + type +\n-                                            '.' + name +\n-                                            '.html\" class=\"' + type +\n-                                            '\">' + name + '</a>';\n+                            item.path.replace(/::/g, '/') +\n+                            '/' + type +\n+                            '.' + name +\n+                            '.html\" class=\"' + type +\n+                            '\">' + name + '</a>';\n                     }\n \n                     output += '</td><td><span class=\"desc\">' + item.desc +\n-                                    '</span></td></tr>';\n+                        '</span></td></tr>';\n                 });\n             } else {\n                 output += 'No results :( <a href=\"https://duckduckgo.com/?q=' +\n-                            encodeURIComponent('rust ' + query.query) +\n-                            '\">Try on DuckDuckGo?</a>';\n+                    encodeURIComponent('rust ' + query.query) +\n+                    '\">Try on DuckDuckGo?</a>';\n             }\n \n             output += \"</p>\";\n             $('#main.content').addClass('hidden');\n             $('#search.content').removeClass('hidden').html(output);\n             $('#search .desc').width($('#search').width() - 40 -\n-                    $('#search td:first-child').first().width());\n+                $('#search td:first-child').first().width());\n             initSearchNav();\n         }\n \n         function search(e) {\n-            var query, filterdata = [], obj, i, len,\n+            var query,\n+                filterdata = [],\n+                obj, i, len,\n                 results = [],\n                 maxResults = 200,\n                 resultIndex;\n@@ -464,7 +540,7 @@\n         function startSearch() {\n             var keyUpTimeout;\n             $('.do-search').on('click', search);\n-            $('.search-input').on('keyup', function () {\n+            $('.search-input').on('keyup', function() {\n                 clearTimeout(keyUpTimeout);\n                 keyUpTimeout = setTimeout(search, 100);\n             });\n@@ -475,4 +551,4 @@\n     }\n \n     initSearch(searchIndex);\n-}());\n+}());\n\\ No newline at end of file"}]}