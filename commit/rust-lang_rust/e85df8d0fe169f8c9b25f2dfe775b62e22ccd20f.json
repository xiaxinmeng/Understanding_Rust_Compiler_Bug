{"sha": "e85df8d0fe169f8c9b25f2dfe775b62e22ccd20f", "node_id": "C_kwDOAAsO6NoAKGU4NWRmOGQwZmUxNjlmOGM5YjI1ZjJkZmU3NzViNjJlMjJjY2QyMGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-02T22:05:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-02T22:05:31Z"}, "message": "Rollup merge of #108672 - spastorino:new-rpitit-impl-side, r=compiler-errors\n\nFeed queries on impl side for RPITITs when using lower_impl_trait_in_trait_to_assoc_ty\n\nI've added a test for traits that were already working and what I think is probably the last bit of infrastructure work needed.\nIn following PRs I'm going to start adding things TDD style, tests and code that make it work.\n\nr? `@compiler-errors`", "tree": {"sha": "5510959c6bc814d01b5f71f70a733a3f48351a8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5510959c6bc814d01b5f71f70a733a3f48351a8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e85df8d0fe169f8c9b25f2dfe775b62e22ccd20f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkAR2rCRBK7hj4Ov3rIwAAz/QIADtc/5tRqrhHp2YH5+l3tlcd\nZPgrCx6/Vv2aNXTLfUDy25ktI6nQWVvTJV+iXwXiUd0aNqN1spe+vvHzPdKqPNxj\n1Yqxcu/ufhU0YfVMANTQfJ75SrAjgAdXPv/u4/BUKHnepRlutzllKVTBFc/b9obQ\ncB1r25owWh4U9OhhfHndA+1V2+7TSmI6AzwOs3U6MU57VL6mxZN6WFRdT2UyuC5L\ng1sAZXMh6lie/q3Z8dsacOni1L62PzRe+K/CpTb/mHswmO2qqnfaMOYCNty1+Wu8\nZPsS2lPa723KNT6GGyW+3BrwzQWtMQ0Pgw+PTh68rFKCLyVKaG4JOm3g9eLCOKM=\n=8ItZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 5510959c6bc814d01b5f71f70a733a3f48351a8d\nparent 8a21bcee254c9175345266dad9c1ac00399d73f9\nparent fa6bf2afdb68e498a970662b43028ea567c5ab02\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677794731 +0100\ncommitter GitHub <noreply@github.com> 1677794731 +0100\n\nRollup merge of #108672 - spastorino:new-rpitit-impl-side, r=compiler-errors\n\nFeed queries on impl side for RPITITs when using lower_impl_trait_in_trait_to_assoc_ty\n\nI've added a test for traits that were already working and what I think is probably the last bit of infrastructure work needed.\nIn following PRs I'm going to start adding things TDD style, tests and code that make it work.\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e85df8d0fe169f8c9b25f2dfe775b62e22ccd20f", "html_url": "https://github.com/rust-lang/rust/commit/e85df8d0fe169f8c9b25f2dfe775b62e22ccd20f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e85df8d0fe169f8c9b25f2dfe775b62e22ccd20f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a21bcee254c9175345266dad9c1ac00399d73f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a21bcee254c9175345266dad9c1ac00399d73f9", "html_url": "https://github.com/rust-lang/rust/commit/8a21bcee254c9175345266dad9c1ac00399d73f9"}, {"sha": "fa6bf2afdb68e498a970662b43028ea567c5ab02", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6bf2afdb68e498a970662b43028ea567c5ab02", "html_url": "https://github.com/rust-lang/rust/commit/fa6bf2afdb68e498a970662b43028ea567c5ab02"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "0648784b265709d4eb8cd41b5102c7e0da6c44ce", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 65, "deletions": 5, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e85df8d0fe169f8c9b25f2dfe775b62e22ccd20f/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85df8d0fe169f8c9b25f2dfe775b62e22ccd20f/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=e85df8d0fe169f8c9b25f2dfe775b62e22ccd20f", "patch": "@@ -53,9 +53,37 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n                 )\n             }\n         }\n-        hir::ItemKind::Impl(ref impl_) => tcx.arena.alloc_from_iter(\n-            impl_.items.iter().map(|impl_item_ref| impl_item_ref.id.owner_id.to_def_id()),\n-        ),\n+        hir::ItemKind::Impl(ref impl_) => {\n+            if tcx.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty {\n+                // We collect RPITITs for each trait method's return type, on the impl side too and\n+                // create a corresponding associated item using\n+                // associated_items_for_impl_trait_in_trait query.\n+                tcx.arena.alloc_from_iter(\n+                    impl_\n+                        .items\n+                        .iter()\n+                        .map(|impl_item_ref| impl_item_ref.id.owner_id.to_def_id())\n+                        .chain(impl_.of_trait.iter().flat_map(|_| {\n+                            impl_\n+                                .items\n+                                .iter()\n+                                .filter(|impl_item_ref| {\n+                                    matches!(impl_item_ref.kind, hir::AssocItemKind::Fn { .. })\n+                                })\n+                                .flat_map(|impl_item_ref| {\n+                                    let impl_fn_def_id =\n+                                        impl_item_ref.id.owner_id.def_id.to_def_id();\n+                                    tcx.associated_items_for_impl_trait_in_trait(impl_fn_def_id)\n+                                })\n+                                .map(|def_id| *def_id)\n+                        })),\n+                )\n+            } else {\n+                tcx.arena.alloc_from_iter(\n+                    impl_.items.iter().map(|impl_item_ref| impl_item_ref.id.owner_id.to_def_id()),\n+                )\n+            }\n+        }\n         _ => span_bug!(item.span, \"associated_item_def_ids: not impl or trait\"),\n     }\n }\n@@ -290,8 +318,40 @@ fn impl_associated_item_for_impl_trait_in_trait(\n ) -> LocalDefId {\n     let impl_def_id = tcx.local_parent(impl_fn_def_id);\n \n-    let span = tcx.def_span(trait_assoc_def_id);\n+    // FIXME fix the span, we probably want the def_id of the return type of the function\n+    let span = tcx.def_span(impl_fn_def_id);\n     let impl_assoc_ty = tcx.at(span).create_def(impl_def_id, DefPathData::ImplTraitAssocTy);\n \n-    impl_assoc_ty.def_id()\n+    let local_def_id = impl_assoc_ty.def_id();\n+    let def_id = local_def_id.to_def_id();\n+\n+    impl_assoc_ty.opt_def_kind(Some(DefKind::AssocTy));\n+\n+    // There's no HIR associated with this new synthesized `def_id`, so feed\n+    // `opt_local_def_id_to_hir_id` with `None`.\n+    impl_assoc_ty.opt_local_def_id_to_hir_id(None);\n+\n+    // Add the def_id of the function that generated this synthesized associated type.\n+    impl_assoc_ty.opt_rpitit_info(Some(ImplTraitInTraitData::Impl {\n+        fn_def_id: impl_fn_def_id.to_def_id(),\n+    }));\n+\n+    impl_assoc_ty.associated_item(ty::AssocItem {\n+        name: kw::Empty,\n+        kind: ty::AssocKind::Type,\n+        def_id,\n+        trait_item_def_id: Some(trait_assoc_def_id.to_def_id()),\n+        container: ty::ImplContainer,\n+        fn_has_self_parameter: false,\n+    });\n+\n+    // Copy impl_defaultness of the containing function.\n+    impl_assoc_ty.impl_defaultness(tcx.impl_defaultness(impl_fn_def_id));\n+\n+    // Copy generics_of the trait's associated item.\n+    // FIXME: This is not correct, in particular the parent is going to be wrong. So we would need\n+    // to copy from trait_assoc_def_id and adjust things.\n+    impl_assoc_ty.generics_of(tcx.generics_of(trait_assoc_def_id).clone());\n+\n+    local_def_id\n }"}, {"sha": "dfce973d770b906b4449ca539625ba9699b9a10d", "filename": "tests/ui/impl-trait/in-trait/new-lowering-strategy/simple-trait.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e85df8d0fe169f8c9b25f2dfe775b62e22ccd20f/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85df8d0fe169f8c9b25f2dfe775b62e22ccd20f/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-trait.rs?ref=e85df8d0fe169f8c9b25f2dfe775b62e22ccd20f", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+// compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn foo() -> impl Sized;\n+}\n+\n+fn main() {}"}]}