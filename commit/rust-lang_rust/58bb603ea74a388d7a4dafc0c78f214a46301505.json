{"sha": "58bb603ea74a388d7a4dafc0c78f214a46301505", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YmI2MDNlYTc0YTM4OGQ3YTRkYWZjMGM3OGYyMTRhNDYzMDE1MDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-22T17:05:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-22T17:05:48Z"}, "message": "auto merge of #16651 : vks/rust/fix-bitv-bench, r=alexcrichton\n\nFixes #12118.\r\n\r\n(I sneaked in an unrelated one-character whitespace fix I spotted while reviewing some benchmarks, if that is not okay, I can create a separate pull request for that.)", "tree": {"sha": "c3e4b7dc5b339da839f3bd8fe36e75f7782319a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3e4b7dc5b339da839f3bd8fe36e75f7782319a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58bb603ea74a388d7a4dafc0c78f214a46301505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58bb603ea74a388d7a4dafc0c78f214a46301505", "html_url": "https://github.com/rust-lang/rust/commit/58bb603ea74a388d7a4dafc0c78f214a46301505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58bb603ea74a388d7a4dafc0c78f214a46301505/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36789fbbc5568b71c1eee85bcc20ffbdcf79f7a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/36789fbbc5568b71c1eee85bcc20ffbdcf79f7a4", "html_url": "https://github.com/rust-lang/rust/commit/36789fbbc5568b71c1eee85bcc20ffbdcf79f7a4"}, {"sha": "da5e8cef598cf47461cfe1bfe918ff7fbc0d92c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/da5e8cef598cf47461cfe1bfe918ff7fbc0d92c4", "html_url": "https://github.com/rust-lang/rust/commit/da5e8cef598cf47461cfe1bfe918ff7fbc0d92c4"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "f212cdd46380767e4ab6dafa396ed0840b739320", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bb603ea74a388d7a4dafc0c78f214a46301505/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bb603ea74a388d7a4dafc0c78f214a46301505/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=58bb603ea74a388d7a4dafc0c78f214a46301505", "patch": "@@ -563,7 +563,7 @@ mod tests {\n \n     struct Noncopy {\n         string: String,\n-        array: Vec<int> ,\n+        array: Vec<int>,\n     }\n \n     #[test]"}, {"sha": "10ebcbcab36b8bdbec23dc6bb7a33708eb366bfe", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/58bb603ea74a388d7a4dafc0c78f214a46301505/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bb603ea74a388d7a4dafc0c78f214a46301505/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=58bb603ea74a388d7a4dafc0c78f214a46301505", "patch": "@@ -2566,7 +2566,9 @@ mod tests {\n         let mut r = rng();\n         let mut bitv = 0 as uint;\n         b.iter(|| {\n-            bitv |= 1 << ((r.next_u32() as uint) % uint::BITS);\n+            for _ in range(0u, 100) {\n+                bitv |= 1 << ((r.next_u32() as uint) % uint::BITS);\n+            }\n             &bitv\n         })\n     }\n@@ -2576,7 +2578,9 @@ mod tests {\n         let mut r = rng();\n         let mut bitv = Bitv::with_capacity(BENCH_BITS, false);\n         b.iter(|| {\n-            bitv.set((r.next_u32() as uint) % BENCH_BITS, true);\n+            for _ in range(0u, 100) {\n+                bitv.set((r.next_u32() as uint) % BENCH_BITS, true);\n+            }\n             &bitv\n         })\n     }\n@@ -2586,7 +2590,9 @@ mod tests {\n         let mut r = rng();\n         let mut bitv = Bitv::with_capacity(uint::BITS, false);\n         b.iter(|| {\n-            bitv.set((r.next_u32() as uint) % uint::BITS, true);\n+            for _ in range(0u, 100) {\n+                bitv.set((r.next_u32() as uint) % uint::BITS, true);\n+            }\n             &bitv\n         })\n     }\n@@ -2596,7 +2602,9 @@ mod tests {\n         let mut r = rng();\n         let mut bitv = BitvSet::new();\n         b.iter(|| {\n-            bitv.insert((r.next_u32() as uint) % uint::BITS);\n+            for _ in range(0u, 100) {\n+                bitv.insert((r.next_u32() as uint) % uint::BITS);\n+            }\n             &bitv\n         })\n     }\n@@ -2606,7 +2614,9 @@ mod tests {\n         let mut r = rng();\n         let mut bitv = BitvSet::new();\n         b.iter(|| {\n-            bitv.insert((r.next_u32() as uint) % BENCH_BITS);\n+            for _ in range(0u, 100) {\n+                bitv.insert((r.next_u32() as uint) % BENCH_BITS);\n+            }\n             &bitv\n         })\n     }\n@@ -2616,29 +2626,33 @@ mod tests {\n         let mut b1 = Bitv::with_capacity(BENCH_BITS, false);\n         let b2 = Bitv::with_capacity(BENCH_BITS, false);\n         b.iter(|| {\n-            b1.union(&b2);\n+            b1.union(&b2)\n         })\n     }\n \n     #[bench]\n-    fn bench_btv_small_iter(b: &mut Bencher) {\n+    fn bench_bitv_small_iter(b: &mut Bencher) {\n         let bitv = Bitv::with_capacity(uint::BITS, false);\n         b.iter(|| {\n-            let mut _sum = 0;\n-            for pres in bitv.iter() {\n-                _sum += pres as uint;\n+            let mut sum = 0;\n+            for _ in range(0u, 10) {\n+                for pres in bitv.iter() {\n+                    sum += pres as uint;\n+                }\n             }\n+            sum\n         })\n     }\n \n     #[bench]\n     fn bench_bitv_big_iter(b: &mut Bencher) {\n         let bitv = Bitv::with_capacity(BENCH_BITS, false);\n         b.iter(|| {\n-            let mut _sum = 0;\n+            let mut sum = 0;\n             for pres in bitv.iter() {\n-                _sum += pres as uint;\n+                sum += pres as uint;\n             }\n+            sum\n         })\n     }\n \n@@ -2647,10 +2661,11 @@ mod tests {\n         let bitv = BitvSet::from_bitv(from_fn(BENCH_BITS,\n                                               |idx| {idx % 3 == 0}));\n         b.iter(|| {\n-            let mut _sum = 0;\n+            let mut sum = 0;\n             for idx in bitv.iter() {\n-                _sum += idx;\n+                sum += idx;\n             }\n+            sum\n         })\n     }\n }"}]}