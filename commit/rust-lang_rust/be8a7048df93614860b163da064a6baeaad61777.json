{"sha": "be8a7048df93614860b163da064a6baeaad61777", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOGE3MDQ4ZGY5MzYxNDg2MGIxNjNkYTA2NGE2YmFlYWFkNjE3Nzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-21T16:10:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-21T16:10:03Z"}, "message": "Cleanup extact variable", "tree": {"sha": "a9b65aa46de7bf4f84dad9a4d0bff41087e025a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9b65aa46de7bf4f84dad9a4d0bff41087e025a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be8a7048df93614860b163da064a6baeaad61777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be8a7048df93614860b163da064a6baeaad61777", "html_url": "https://github.com/rust-lang/rust/commit/be8a7048df93614860b163da064a6baeaad61777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be8a7048df93614860b163da064a6baeaad61777/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bb1b3070a51d5bd0ddffff85069260d3f83207d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bb1b3070a51d5bd0ddffff85069260d3f83207d", "html_url": "https://github.com/rust-lang/rust/commit/3bb1b3070a51d5bd0ddffff85069260d3f83207d"}], "stats": {"total": 103, "additions": 55, "deletions": 48}, "files": [{"sha": "098adf0786f98f35fcbd4fe3164aec9a4cc84a41", "filename": "crates/ra_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 55, "deletions": 48, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/be8a7048df93614860b163da064a6baeaad61777/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8a7048df93614860b163da064a6baeaad61777/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=be8a7048df93614860b163da064a6baeaad61777", "patch": "@@ -2,7 +2,6 @@ use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxKind::{\n         BLOCK_EXPR, BREAK_EXPR, COMMENT, LAMBDA_EXPR, LOOP_EXPR, MATCH_ARM, PATH_EXPR, RETURN_EXPR,\n-        WHITESPACE,\n     },\n     SyntaxNode,\n };\n@@ -36,22 +35,20 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         mark::hit!(extract_var_in_comment_is_not_applicable);\n         return None;\n     }\n-    let expr = node.ancestors().find_map(valid_target_expr)?;\n-    let (anchor_stmt, wrap_in_block) = anchor_stmt(&expr)?;\n-    let indent = anchor_stmt.prev_sibling_or_token()?.as_token()?.clone();\n-    if indent.kind() != WHITESPACE {\n-        return None;\n-    }\n-    let target = expr.syntax().text_range();\n+    let to_extract = node.ancestors().find_map(valid_target_expr)?;\n+    let anchor = Anchor::from(&to_extract)?;\n+    let indent = anchor.syntax().prev_sibling_or_token()?.as_token()?.clone();\n+    let target = to_extract.syntax().text_range();\n     acc.add(\n         AssistId(\"extract_variable\", AssistKind::RefactorExtract),\n         \"Extract into variable\",\n         target,\n         move |edit| {\n-            let field_shorthand = match expr.syntax().parent().and_then(ast::RecordField::cast) {\n-                Some(field) => field.name_ref(),\n-                None => None,\n-            };\n+            let field_shorthand =\n+                match to_extract.syntax().parent().and_then(ast::RecordField::cast) {\n+                    Some(field) => field.name_ref(),\n+                    None => None,\n+                };\n \n             let mut buf = String::new();\n \n@@ -60,26 +57,20 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n                 None => \"var_name\".to_string(),\n             };\n             let expr_range = match &field_shorthand {\n-                Some(it) => it.syntax().text_range().cover(expr.syntax().text_range()),\n-                None => expr.syntax().text_range(),\n+                Some(it) => it.syntax().text_range().cover(to_extract.syntax().text_range()),\n+                None => to_extract.syntax().text_range(),\n             };\n \n-            if wrap_in_block {\n+            if let Anchor::WrapInBlock(_) = anchor {\n                 format_to!(buf, \"{{ let {} = \", var_name);\n             } else {\n                 format_to!(buf, \"let {} = \", var_name);\n             };\n-            format_to!(buf, \"{}\", expr.syntax());\n+            format_to!(buf, \"{}\", to_extract.syntax());\n \n-            let full_stmt = ast::ExprStmt::cast(anchor_stmt.clone());\n-            let is_full_stmt = if let Some(expr_stmt) = &full_stmt {\n-                Some(expr.syntax().clone()) == expr_stmt.expr().map(|e| e.syntax().clone())\n-            } else {\n-                false\n-            };\n-            if is_full_stmt {\n+            if let Anchor::Replace(stmt) = anchor {\n                 mark::hit!(test_extract_var_expr_stmt);\n-                if full_stmt.unwrap().semicolon_token().is_none() {\n+                if stmt.semicolon_token().is_none() {\n                     buf.push_str(\";\");\n                 }\n                 match ctx.config.snippet_cap {\n@@ -107,7 +98,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n             }\n \n             edit.replace(expr_range, var_name.clone());\n-            let offset = anchor_stmt.text_range().start();\n+            let offset = anchor.syntax().text_range().start();\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n                     let snip =\n@@ -117,8 +108,8 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n                 None => edit.insert(offset, buf),\n             }\n \n-            if wrap_in_block {\n-                edit.insert(anchor_stmt.text_range().end(), \" }\");\n+            if let Anchor::WrapInBlock(_) = anchor {\n+                edit.insert(anchor.syntax().text_range().end(), \" }\");\n             }\n         },\n     )\n@@ -138,32 +129,48 @@ fn valid_target_expr(node: SyntaxNode) -> Option<ast::Expr> {\n     }\n }\n \n-/// Returns the syntax node which will follow the freshly extractd var\n-/// and a boolean indicating whether we have to wrap it within a { } block\n-/// to produce correct code.\n-/// It can be a statement, the last in a block expression or a wanna be block\n-/// expression like a lambda or match arm.\n-fn anchor_stmt(expr: &ast::Expr) -> Option<(SyntaxNode, bool)> {\n-    expr.syntax().ancestors().find_map(|node| {\n-        if let Some(expr) = node.parent().and_then(ast::BlockExpr::cast).and_then(|it| it.expr()) {\n-            if expr.syntax() == &node {\n-                mark::hit!(test_extract_var_last_expr);\n-                return Some((node, false));\n+enum Anchor {\n+    Before(SyntaxNode),\n+    Replace(ast::ExprStmt),\n+    WrapInBlock(SyntaxNode),\n+}\n+\n+impl Anchor {\n+    fn from(to_extract: &ast::Expr) -> Option<Anchor> {\n+        to_extract.syntax().ancestors().find_map(|node| {\n+            if let Some(expr) =\n+                node.parent().and_then(ast::BlockExpr::cast).and_then(|it| it.expr())\n+            {\n+                if expr.syntax() == &node {\n+                    mark::hit!(test_extract_var_last_expr);\n+                    return Some(Anchor::Before(node));\n+                }\n             }\n-        }\n \n-        if let Some(parent) = node.parent() {\n-            if parent.kind() == MATCH_ARM || parent.kind() == LAMBDA_EXPR {\n-                return Some((node, true));\n+            if let Some(parent) = node.parent() {\n+                if parent.kind() == MATCH_ARM || parent.kind() == LAMBDA_EXPR {\n+                    return Some(Anchor::WrapInBlock(node));\n+                }\n             }\n-        }\n \n-        if ast::Stmt::cast(node.clone()).is_some() {\n-            return Some((node, false));\n-        }\n+            if let Some(stmt) = ast::Stmt::cast(node.clone()) {\n+                if let ast::Stmt::ExprStmt(stmt) = stmt {\n+                    if stmt.expr().as_ref() == Some(to_extract) {\n+                        return Some(Anchor::Replace(stmt));\n+                    }\n+                }\n+                return Some(Anchor::Before(node));\n+            }\n+            None\n+        })\n+    }\n \n-        None\n-    })\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            Anchor::Before(it) | Anchor::WrapInBlock(it) => it,\n+            Anchor::Replace(stmt) => stmt.syntax(),\n+        }\n+    }\n }\n \n #[cfg(test)]"}]}