{"sha": "0153e64d975ec175f893ad528311ef7c441a1561", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNTNlNjRkOTc1ZWMxNzVmODkzYWQ1MjgzMTFlZjdjNDQxYTE1NjE=", "commit": {"author": {"name": "Dave Huseby", "email": "dhuseby@mozilla.com", "date": "2016-01-27T01:37:18Z"}, "committer": {"name": "Dave Huseby", "email": "dhuseby@mozilla.com", "date": "2016-02-03T05:42:11Z"}, "message": "Fixes #31229", "tree": {"sha": "077f0a232b2b2476c5373c8f9b009d6d431e8a10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/077f0a232b2b2476c5373c8f9b009d6d431e8a10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0153e64d975ec175f893ad528311ef7c441a1561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0153e64d975ec175f893ad528311ef7c441a1561", "html_url": "https://github.com/rust-lang/rust/commit/0153e64d975ec175f893ad528311ef7c441a1561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0153e64d975ec175f893ad528311ef7c441a1561/comments", "author": null, "committer": null, "parents": [{"sha": "50df6b9dc5144df09ef6b8519afd3657abdab03f", "url": "https://api.github.com/repos/rust-lang/rust/commits/50df6b9dc5144df09ef6b8519afd3657abdab03f", "html_url": "https://github.com/rust-lang/rust/commit/50df6b9dc5144df09ef6b8519afd3657abdab03f"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "9da986d7fbfd5855734c57cf909719c303302380", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0153e64d975ec175f893ad528311ef7c441a1561/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0153e64d975ec175f893ad528311ef7c441a1561/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=0153e64d975ec175f893ad528311ef7c441a1561", "patch": "@@ -224,7 +224,7 @@ impl DirEntry {\n     fn name_bytes(&self) -> &[u8] {\n         unsafe {\n             ::slice::from_raw_parts(self.entry.d_name.as_ptr() as *const u8,\n-                                    self.entry.d_namelen as usize)\n+                                    self.entry.d_namlen as usize)\n         }\n     }\n     #[cfg(any(target_os = \"android\","}, {"sha": "88ac73de2fb7bcf677c33c6885dffe63d1eb76d4", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0153e64d975ec175f893ad528311ef7c441a1561/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0153e64d975ec175f893ad528311ef7c441a1561/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=0153e64d975ec175f893ad528311ef7c441a1561", "patch": "@@ -135,17 +135,42 @@ mod imp {\n         Handler { _data: MAIN_ALTSTACK };\n     }\n \n-    pub unsafe fn make_handler() -> Handler {\n-        let alt_stack = mmap(ptr::null_mut(),\n-                             SIGSTKSZ,\n-                             PROT_READ | PROT_WRITE,\n-                             MAP_PRIVATE | MAP_ANON,\n-                             -1,\n-                             0);\n-        if alt_stack == MAP_FAILED {\n+    #[cfg(any(target_os = \"linux\",\n+              target_os = \"macos\",\n+              target_os = \"bitrig\",\n+              target_os = \"netbsd\",\n+              target_os = \"openbsd\"))]\n+    unsafe fn get_stack() -> *mut libc::c_void {\n+        let stack = mmap(ptr::null_mut(),\n+                         SIGSTKSZ,\n+                         PROT_READ | PROT_WRITE,\n+                         MAP_PRIVATE | MAP_ANON,\n+                         -1,\n+                         0);\n+        if stack == MAP_FAILED {\n+            panic!(\"failed to allocate an alternative stack\");\n+        }\n+        stack\n+    }\n+\n+    #[cfg(any(target_os = \"dragonfly\",\n+              target_os = \"freebsd\"))]\n+    unsafe fn get_stack() -> *mut i8 {\n+        let stack = mmap(ptr::null_mut(),\n+                         SIGSTKSZ,\n+                         PROT_READ | PROT_WRITE,\n+                         MAP_PRIVATE | MAP_ANON,\n+                         -1,\n+                         0);\n+        if stack == MAP_FAILED {\n             panic!(\"failed to allocate an alternative stack\");\n         }\n+        stack as *mut i8\n+    }\n \n+\n+    pub unsafe fn make_handler() -> Handler {\n+        let alt_stack = get_stack();\n         let mut stack: libc::stack_t = mem::zeroed();\n \n         stack.ss_sp = alt_stack;\n@@ -154,7 +179,7 @@ mod imp {\n \n         sigaltstack(&stack, ptr::null_mut());\n \n-        Handler { _data: alt_stack }\n+        Handler { _data: alt_stack as *mut libc::c_void }\n     }\n \n     pub unsafe fn drop_handler(handler: &mut Handler) {"}, {"sha": "443356fbe7cd54a83b408d6087482ce6a4a1b14b", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0153e64d975ec175f893ad528311ef7c441a1561/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0153e64d975ec175f893ad528311ef7c441a1561/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=0153e64d975ec175f893ad528311ef7c441a1561", "patch": "@@ -939,18 +939,12 @@ fn get_concurrency() -> usize {\n     fn num_cpus() -> usize {\n         let mut cpus: libc::c_uint = 0;\n         let mut cpus_size = std::mem::size_of_val(&cpus);\n-        let mut mib = [libc::CTL_HW, libc::HW_AVAILCPU, 0, 0];\n \n         unsafe {\n-            libc::sysctl(mib.as_mut_ptr(),\n-                         2,\n-                         &mut cpus as *mut _ as *mut _,\n-                         &mut cpus_size as *mut _ as *mut _,\n-                         0 as *mut _,\n-                         0);\n+            cpus = libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as libc::c_uint;\n         }\n         if cpus < 1 {\n-            mib[1] = libc::HW_NCPU;\n+            let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n             unsafe {\n                 libc::sysctl(mib.as_mut_ptr(),\n                              2,"}]}