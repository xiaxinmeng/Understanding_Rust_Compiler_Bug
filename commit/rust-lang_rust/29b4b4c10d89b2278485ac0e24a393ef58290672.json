{"sha": "29b4b4c10d89b2278485ac0e24a393ef58290672", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YjRiNGMxMGQ4OWIyMjc4NDg1YWMwZTI0YTM5M2VmNTgyOTA2NzI=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-27T21:25:37Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-28T01:18:07Z"}, "message": "Do not lint use_self on type parameters", "tree": {"sha": "b571815a161a1ae76f9b775fddfceca9acd215e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b571815a161a1ae76f9b775fddfceca9acd215e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29b4b4c10d89b2278485ac0e24a393ef58290672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29b4b4c10d89b2278485ac0e24a393ef58290672", "html_url": "https://github.com/rust-lang/rust/commit/29b4b4c10d89b2278485ac0e24a393ef58290672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29b4b4c10d89b2278485ac0e24a393ef58290672/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c20c835f63f1953c3940d9b1f9ce8a943a0bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c20c835f63f1953c3940d9b1f9ce8a943a0bc8", "html_url": "https://github.com/rust-lang/rust/commit/d3c20c835f63f1953c3940d9b1f9ce8a943a0bc8"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "f71dfd024999d832d17d5f33882e8a3bee68a48b", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29b4b4c10d89b2278485ac0e24a393ef58290672/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b4b4c10d89b2278485ac0e24a393ef58290672/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=29b4b4c10d89b2278485ac0e24a393ef58290672", "patch": "@@ -386,7 +386,7 @@ fn should_lint_ty(hir_ty: &hir::Ty<'_>, ty: Ty<'_>, self_ty: Ty<'_>) -> bool {\n         if same_type_and_consts(ty, self_ty);\n         if let TyKind::Path(QPath::Resolved(_, path)) = hir_ty.kind;\n         then {\n-            !matches!(path.res, def::Res::SelfTy(..))\n+            !matches!(path.res, Res::SelfTy(..) | Res::Def(DefKind::TyParam, _))\n         } else {\n             false\n         }"}, {"sha": "e2c28542efc76e38c89aec06fc9bf7d670800dd6", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/29b4b4c10d89b2278485ac0e24a393ef58290672/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/29b4b4c10d89b2278485ac0e24a393ef58290672/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=29b4b4c10d89b2278485ac0e24a393ef58290672", "patch": "@@ -492,3 +492,26 @@ mod issue7206 {\n         }\n     }\n }\n+\n+mod self_is_ty_param {\n+    trait Trait {\n+        type Type;\n+        type Hi;\n+\n+        fn test();\n+    }\n+\n+    impl<I> Trait for I\n+    where\n+        I: Iterator,\n+        I::Item: Trait, // changing this to Self would require <Self as Iterator>\n+    {\n+        type Type = I;\n+        type Hi = I::Item;\n+\n+        fn test() {\n+            let _: I::Item;\n+            let _: I; // this could lint, but is questionable\n+        }\n+    }\n+}"}, {"sha": "3cd99b9f5cd88775aaa07a061c5c8092fd852b96", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/29b4b4c10d89b2278485ac0e24a393ef58290672/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b4b4c10d89b2278485ac0e24a393ef58290672/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=29b4b4c10d89b2278485ac0e24a393ef58290672", "patch": "@@ -279,7 +279,7 @@ mod generics {\n     impl<T> Foo<T> {\n         // `Self` is applicable here\n         fn foo(value: T) -> Foo<T> {\n-            Foo { value }\n+            Foo::<T> { value }\n         }\n \n         // `Cannot` use `Self` as a return type as the generic types are different\n@@ -492,3 +492,26 @@ mod issue7206 {\n         }\n     }\n }\n+\n+mod self_is_ty_param {\n+    trait Trait {\n+        type Type;\n+        type Hi;\n+\n+        fn test();\n+    }\n+\n+    impl<I> Trait for I\n+    where\n+        I: Iterator,\n+        I::Item: Trait, // changing this to Self would require <Self as Iterator>\n+    {\n+        type Type = I;\n+        type Hi = I::Item;\n+\n+        fn test() {\n+            let _: I::Item;\n+            let _: I; // this could lint, but is questionable\n+        }\n+    }\n+}"}, {"sha": "6ac26c9e5a9cece3a876924c17595799c6efca9d", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29b4b4c10d89b2278485ac0e24a393ef58290672/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29b4b4c10d89b2278485ac0e24a393ef58290672/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=29b4b4c10d89b2278485ac0e24a393ef58290672", "patch": "@@ -153,8 +153,8 @@ LL |         fn foo(value: T) -> Foo<T> {\n error: unnecessary structure name repetition\n   --> $DIR/use_self.rs:282:13\n    |\n-LL |             Foo { value }\n-   |             ^^^ help: use the applicable keyword: `Self`\n+LL |             Foo::<T> { value }\n+   |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n   --> $DIR/use_self.rs:454:13"}]}