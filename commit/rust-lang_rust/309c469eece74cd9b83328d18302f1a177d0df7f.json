{"sha": "309c469eece74cd9b83328d18302f1a177d0df7f", "node_id": "C_kwDOAAsO6NoAKDMwOWM0NjllZWNlNzRjZDliODMzMjhkMTgzMDJmMWExNzdkMGRmN2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-14T04:00:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-14T04:00:05Z"}, "message": "Auto merge of #104875 - chenyukang:yukang/fix-104867-inc, r=estebank\n\nProperly handle postfix inc/dec in standalone and subexpr scenarios\n\nFixes #104867\nr? `@estebank`", "tree": {"sha": "41237410c23162187258a755970f79bfdce983ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41237410c23162187258a755970f79bfdce983ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/309c469eece74cd9b83328d18302f1a177d0df7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/309c469eece74cd9b83328d18302f1a177d0df7f", "html_url": "https://github.com/rust-lang/rust/commit/309c469eece74cd9b83328d18302f1a177d0df7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/309c469eece74cd9b83328d18302f1a177d0df7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "918d0ac38e8c3bcf4fb5ee2241fb14979c73c312", "url": "https://api.github.com/repos/rust-lang/rust/commits/918d0ac38e8c3bcf4fb5ee2241fb14979c73c312", "html_url": "https://github.com/rust-lang/rust/commit/918d0ac38e8c3bcf4fb5ee2241fb14979c73c312"}, {"sha": "ded10a13d2a0ccb4475cb7a330179a1f39e2b4ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/ded10a13d2a0ccb4475cb7a330179a1f39e2b4ff", "html_url": "https://github.com/rust-lang/rust/commit/ded10a13d2a0ccb4475cb7a330179a1f39e2b4ff"}], "stats": {"total": 451, "additions": 386, "deletions": 65}, "files": [{"sha": "0191ab730c812e89e55099c5896dc4be68284e38", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 35, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/309c469eece74cd9b83328d18302f1a177d0df7f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309c469eece74cd9b83328d18302f1a177d0df7f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=309c469eece74cd9b83328d18302f1a177d0df7f", "patch": "@@ -159,8 +159,6 @@ enum IsStandalone {\n     Standalone,\n     /// It's a subexpression, i.e., *not* standalone.\n     Subexpr,\n-    /// It's maybe standalone; we're not sure.\n-    Maybe,\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n@@ -213,14 +211,8 @@ impl MultiSugg {\n         err.multipart_suggestion(&self.msg, self.patches, self.applicability);\n     }\n \n-    /// Overrides individual messages and applicabilities.\n-    fn emit_many(\n-        err: &mut Diagnostic,\n-        msg: &str,\n-        applicability: Applicability,\n-        suggestions: impl Iterator<Item = Self>,\n-    ) {\n-        err.multipart_suggestions(msg, suggestions.map(|s| s.patches), applicability);\n+    fn emit_verbose(self, err: &mut Diagnostic) {\n+        err.multipart_suggestion_verbose(&self.msg, self.patches, self.applicability);\n     }\n }\n \n@@ -1267,26 +1259,24 @@ impl<'a> Parser<'a> {\n         &mut self,\n         operand_expr: P<Expr>,\n         op_span: Span,\n-        prev_is_semi: bool,\n+        start_stmt: bool,\n     ) -> PResult<'a, P<Expr>> {\n-        let standalone =\n-            if prev_is_semi { IsStandalone::Standalone } else { IsStandalone::Subexpr };\n+        let standalone = if start_stmt { IsStandalone::Standalone } else { IsStandalone::Subexpr };\n         let kind = IncDecRecovery { standalone, op: IncOrDec::Inc, fixity: UnaryFixity::Pre };\n-\n         self.recover_from_inc_dec(operand_expr, kind, op_span)\n     }\n \n     pub(super) fn recover_from_postfix_increment(\n         &mut self,\n         operand_expr: P<Expr>,\n         op_span: Span,\n+        start_stmt: bool,\n     ) -> PResult<'a, P<Expr>> {\n         let kind = IncDecRecovery {\n-            standalone: IsStandalone::Maybe,\n+            standalone: if start_stmt { IsStandalone::Standalone } else { IsStandalone::Subexpr },\n             op: IncOrDec::Inc,\n             fixity: UnaryFixity::Post,\n         };\n-\n         self.recover_from_inc_dec(operand_expr, kind, op_span)\n     }\n \n@@ -1315,34 +1305,25 @@ impl<'a> Parser<'a> {\n         };\n \n         match kind.standalone {\n-            IsStandalone::Standalone => self.inc_dec_standalone_suggest(kind, spans).emit(&mut err),\n+            IsStandalone::Standalone => {\n+                self.inc_dec_standalone_suggest(kind, spans).emit_verbose(&mut err)\n+            }\n             IsStandalone::Subexpr => {\n                 let Ok(base_src) = self.span_to_snippet(base.span)\n-                    else { return help_base_case(err, base) };\n+                else { return help_base_case(err, base) };\n                 match kind.fixity {\n                     UnaryFixity::Pre => {\n                         self.prefix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n                     }\n                     UnaryFixity::Post => {\n-                        self.postfix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n+                        // won't suggest since we can not handle the precedences\n+                        // for example: `a + b++` has been parsed (a + b)++ and we can not suggest here\n+                        if !matches!(base.kind, ExprKind::Binary(_, _, _)) {\n+                            self.postfix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n+                        }\n                     }\n                 }\n             }\n-            IsStandalone::Maybe => {\n-                let Ok(base_src) = self.span_to_snippet(base.span)\n-                    else { return help_base_case(err, base) };\n-                let sugg1 = match kind.fixity {\n-                    UnaryFixity::Pre => self.prefix_inc_dec_suggest(base_src, kind, spans),\n-                    UnaryFixity::Post => self.postfix_inc_dec_suggest(base_src, kind, spans),\n-                };\n-                let sugg2 = self.inc_dec_standalone_suggest(kind, spans);\n-                MultiSugg::emit_many(\n-                    &mut err,\n-                    \"use `+= 1` instead\",\n-                    Applicability::Unspecified,\n-                    [sugg1, sugg2].into_iter(),\n-                )\n-            }\n         }\n         Err(err)\n     }\n@@ -1392,7 +1373,6 @@ impl<'a> Parser<'a> {\n         }\n \n         patches.push((post_span, format!(\" {}= 1\", kind.op.chr())));\n-\n         MultiSugg {\n             msg: format!(\"use `{}= 1` instead\", kind.op.chr()),\n             patches,"}, {"sha": "c0ed450b98508e07beed81f05c23030695d232c5", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/309c469eece74cd9b83328d18302f1a177d0df7f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309c469eece74cd9b83328d18302f1a177d0df7f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=309c469eece74cd9b83328d18302f1a177d0df7f", "patch": "@@ -83,7 +83,7 @@ macro_rules! maybe_whole_expr {\n pub(super) enum LhsExpr {\n     NotYetParsed,\n     AttributesParsed(AttrWrapper),\n-    AlreadyParsed(P<Expr>),\n+    AlreadyParsed(P<Expr>, bool), // (expr, starts_statement)\n }\n \n impl From<Option<AttrWrapper>> for LhsExpr {\n@@ -101,7 +101,7 @@ impl From<P<Expr>> for LhsExpr {\n     ///\n     /// This conversion does not allocate.\n     fn from(expr: P<Expr>) -> Self {\n-        LhsExpr::AlreadyParsed(expr)\n+        LhsExpr::AlreadyParsed(expr, false)\n     }\n }\n \n@@ -173,7 +173,9 @@ impl<'a> Parser<'a> {\n         min_prec: usize,\n         lhs: LhsExpr,\n     ) -> PResult<'a, P<Expr>> {\n-        let mut lhs = if let LhsExpr::AlreadyParsed(expr) = lhs {\n+        let mut starts_stmt = false;\n+        let mut lhs = if let LhsExpr::AlreadyParsed(expr, starts_statement) = lhs {\n+            starts_stmt = starts_statement;\n             expr\n         } else {\n             let attrs = match lhs {\n@@ -292,7 +294,7 @@ impl<'a> Parser<'a> {\n                 let op_span = self.prev_token.span.to(self.token.span);\n                 // Eat the second `+`\n                 self.bump();\n-                lhs = self.recover_from_postfix_increment(lhs, op_span)?;\n+                lhs = self.recover_from_postfix_increment(lhs, op_span, starts_stmt)?;\n                 continue;\n             }\n \n@@ -590,14 +592,15 @@ impl<'a> Parser<'a> {\n             token::BinOp(token::Plus)\n                 if this.look_ahead(1, |t| *t == token::BinOp(token::Plus)) =>\n             {\n-                let prev_is_semi = this.prev_token == token::Semi;\n+                let starts_stmt = this.prev_token == token::Semi\n+                    || this.prev_token == token::CloseDelim(Delimiter::Brace);\n                 let pre_span = this.token.span.to(this.look_ahead(1, |t| t.span));\n                 // Eat both `+`s.\n                 this.bump();\n                 this.bump();\n \n                 let operand_expr = this.parse_dot_or_call_expr(Default::default())?;\n-                this.recover_from_prefix_increment(operand_expr, pre_span, prev_is_semi)\n+                this.recover_from_prefix_increment(operand_expr, pre_span, starts_stmt)\n             }\n             token::Ident(..) if this.token.is_keyword(kw::Box) => {\n                 make_it!(this, attrs, |this, _| this.parse_box_expr(lo))"}, {"sha": "bae7f2670cb11689866e837b411160d0cebe7552", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/309c469eece74cd9b83328d18302f1a177d0df7f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309c469eece74cd9b83328d18302f1a177d0df7f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=309c469eece74cd9b83328d18302f1a177d0df7f", "patch": "@@ -164,7 +164,7 @@ impl<'a> Parser<'a> {\n             // Perform this outside of the `collect_tokens_trailing_token` closure,\n             // since our outer attributes do not apply to this part of the expression\n             let expr = self.with_res(Restrictions::STMT_EXPR, |this| {\n-                this.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(expr))\n+                this.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(expr, true))\n             })?;\n             Ok(self.mk_stmt(lo.to(self.prev_token.span), StmtKind::Expr(expr)))\n         } else {\n@@ -198,7 +198,7 @@ impl<'a> Parser<'a> {\n             let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac));\n             let e = self.maybe_recover_from_bad_qpath(e)?;\n             let e = self.parse_dot_or_call_expr_with(e, lo, attrs)?;\n-            let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n+            let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e, false))?;\n             StmtKind::Expr(e)\n         };\n         Ok(self.mk_stmt(lo.to(hi), kind))"}, {"sha": "580ebaf5dbb13d1d87a19fdba2169490bf7a0ac7", "filename": "src/test/ui/parser/increment-autofix-2.fixed", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.fixed?ref=309c469eece74cd9b83328d18302f1a177d0df7f", "patch": "@@ -0,0 +1,63 @@\n+// run-rustfix\n+\n+struct Foo {\n+    bar: Bar,\n+}\n+\n+struct Bar {\n+    qux: i32,\n+}\n+\n+pub fn post_regular() {\n+    let mut i = 0;\n+    i += 1; //~ ERROR Rust has no postfix increment operator\n+    println!(\"{}\", i);\n+}\n+\n+pub fn post_while() {\n+    let mut i = 0;\n+    while { let tmp = i; i += 1; tmp } < 5 {\n+        //~^ ERROR Rust has no postfix increment operator\n+        println!(\"{}\", i);\n+    }\n+}\n+\n+pub fn post_regular_tmp() {\n+    let mut tmp = 0;\n+    tmp += 1; //~ ERROR Rust has no postfix increment operator\n+    println!(\"{}\", tmp);\n+}\n+\n+pub fn post_while_tmp() {\n+    let mut tmp = 0;\n+    while { let tmp_ = tmp; tmp += 1; tmp_ } < 5 {\n+        //~^ ERROR Rust has no postfix increment operator\n+        println!(\"{}\", tmp);\n+    }\n+}\n+\n+pub fn post_field() {\n+    let mut foo = Foo { bar: Bar { qux: 0 } };\n+    foo.bar.qux += 1;\n+    //~^ ERROR Rust has no postfix increment operator\n+    println!(\"{}\", foo.bar.qux);\n+}\n+\n+pub fn post_field_tmp() {\n+    struct S {\n+        tmp: i32\n+    }\n+    let mut s = S { tmp: 0 };\n+    s.tmp += 1;\n+    //~^ ERROR Rust has no postfix increment operator\n+    println!(\"{}\", s.tmp);\n+}\n+\n+pub fn pre_field() {\n+    let mut foo = Foo { bar: Bar { qux: 0 } };\n+    foo.bar.qux += 1;\n+    //~^ ERROR Rust has no prefix increment operator\n+    println!(\"{}\", foo.bar.qux);\n+}\n+\n+fn main() {}"}, {"sha": "ebe5fa6ca1e768cbc316e73d7e12511d1a1aab43", "filename": "src/test/ui/parser/increment-autofix-2.rs", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.rs?ref=309c469eece74cd9b83328d18302f1a177d0df7f", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n struct Foo {\n     bar: Bar,\n }\n@@ -35,7 +37,7 @@ pub fn post_while_tmp() {\n }\n \n pub fn post_field() {\n-    let foo = Foo { bar: Bar { qux: 0 } };\n+    let mut foo = Foo { bar: Bar { qux: 0 } };\n     foo.bar.qux++;\n     //~^ ERROR Rust has no postfix increment operator\n     println!(\"{}\", foo.bar.qux);\n@@ -45,14 +47,14 @@ pub fn post_field_tmp() {\n     struct S {\n         tmp: i32\n     }\n-    let s = S { tmp: 0 };\n+    let mut s = S { tmp: 0 };\n     s.tmp++;\n     //~^ ERROR Rust has no postfix increment operator\n     println!(\"{}\", s.tmp);\n }\n \n pub fn pre_field() {\n-    let foo = Foo { bar: Bar { qux: 0 } };\n+    let mut foo = Foo { bar: Bar { qux: 0 } };\n     ++foo.bar.qux;\n     //~^ ERROR Rust has no prefix increment operator\n     println!(\"{}\", foo.bar.qux);", "previous_filename": "src/test/ui/parser/increment-notfixed.rs"}, {"sha": "11e985480d69743f0e7e382decc0cd743d922da3", "filename": "src/test/ui/parser/increment-autofix-2.stderr", "status": "renamed", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.stderr?ref=309c469eece74cd9b83328d18302f1a177d0df7f", "patch": "@@ -1,18 +1,16 @@\n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:11:6\n+  --> $DIR/increment-autofix-2.rs:13:6\n    |\n LL |     i++;\n    |      ^^ not a valid postfix operator\n    |\n help: use `+= 1` instead\n    |\n-LL |     { let tmp = i; i += 1; tmp };\n-   |     +++++++++++  ~~~~~~~~~~~~~~~\n LL |     i += 1;\n    |       ~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:17:12\n+  --> $DIR/increment-autofix-2.rs:19:12\n    |\n LL |     while i++ < 5 {\n    |     -----  ^^ not a valid postfix operator\n@@ -23,24 +21,20 @@ help: use `+= 1` instead\n    |\n LL |     while { let tmp = i; i += 1; tmp } < 5 {\n    |           +++++++++++  ~~~~~~~~~~~~~~~\n-LL |     while i += 1 < 5 {\n-   |             ~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:25:8\n+  --> $DIR/increment-autofix-2.rs:27:8\n    |\n LL |     tmp++;\n    |        ^^ not a valid postfix operator\n    |\n help: use `+= 1` instead\n    |\n-LL |     { let tmp_ = tmp; tmp += 1; tmp_ };\n-   |     ++++++++++++    ~~~~~~~~~~~~~~~~~~\n LL |     tmp += 1;\n    |         ~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:31:14\n+  --> $DIR/increment-autofix-2.rs:33:14\n    |\n LL |     while tmp++ < 5 {\n    |     -----    ^^ not a valid postfix operator\n@@ -51,37 +45,31 @@ help: use `+= 1` instead\n    |\n LL |     while { let tmp_ = tmp; tmp += 1; tmp_ } < 5 {\n    |           ++++++++++++    ~~~~~~~~~~~~~~~~~~\n-LL |     while tmp += 1 < 5 {\n-   |               ~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:39:16\n+  --> $DIR/increment-autofix-2.rs:41:16\n    |\n LL |     foo.bar.qux++;\n    |                ^^ not a valid postfix operator\n    |\n help: use `+= 1` instead\n    |\n-LL |     { let tmp = foo.bar.qux; foo.bar.qux += 1; tmp };\n-   |     +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     foo.bar.qux += 1;\n    |                 ~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:49:10\n+  --> $DIR/increment-autofix-2.rs:51:10\n    |\n LL |     s.tmp++;\n    |          ^^ not a valid postfix operator\n    |\n help: use `+= 1` instead\n    |\n-LL |     { let tmp = s.tmp; s.tmp += 1; tmp };\n-   |     +++++++++++      ~~~~~~~~~~~~~~~~~~~\n LL |     s.tmp += 1;\n    |           ~~~~\n \n error: Rust has no prefix increment operator\n-  --> $DIR/increment-notfixed.rs:56:5\n+  --> $DIR/increment-autofix-2.rs:58:5\n    |\n LL |     ++foo.bar.qux;\n    |     ^^ not a valid prefix operator", "previous_filename": "src/test/ui/parser/increment-notfixed.stderr"}, {"sha": "a006421a975d992391fca0fdeca82abaa6f359ae", "filename": "src/test/ui/parser/issue-104867-inc-dec-2.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec-2.rs?ref=309c469eece74cd9b83328d18302f1a177d0df7f", "patch": "@@ -0,0 +1,52 @@\n+fn test1() {\n+    let mut i = 0;\n+    let _ = i + ++i; //~ ERROR Rust has no prefix increment operator\n+}\n+\n+fn test2() {\n+    let mut i = 0;\n+    let _ = ++i + i; //~ ERROR Rust has no prefix increment operator\n+}\n+\n+fn test3() {\n+    let mut i = 0;\n+    let _ = ++i + ++i; //~ ERROR Rust has no prefix increment operator\n+}\n+\n+fn test4() {\n+    let mut i = 0;\n+    let _ = i + i++; //~ ERROR Rust has no postfix increment operator\n+    // won't suggest since we can not handle the precedences\n+}\n+\n+fn test5() {\n+    let mut i = 0;\n+    let _ = i++ + i; //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn test6() {\n+    let mut i = 0;\n+    let _ = i++ + i++; //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn test7() {\n+    let mut i = 0;\n+    let _ = ++i + i++; //~ ERROR Rust has no prefix increment operator\n+}\n+\n+fn test8() {\n+    let mut i = 0;\n+    let _ = i++ + ++i; //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn test9() {\n+    let mut i = 0;\n+    let _ = (1 + 2 + i)++; //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn test10() {\n+    let mut i = 0;\n+    let _ = (i++ + 1) + 2; //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn main() { }"}, {"sha": "4e2d0546851e3a62e3ab62ea6dec029f798403e9", "filename": "src/test/ui/parser/issue-104867-inc-dec-2.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec-2.stderr?ref=309c469eece74cd9b83328d18302f1a177d0df7f", "patch": "@@ -0,0 +1,107 @@\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:3:17\n+   |\n+LL |     let _ = i + ++i;\n+   |                 ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = i + { i += 1; i };\n+   |                 ~   +++++++++\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:8:13\n+   |\n+LL |     let _ = ++i + i;\n+   |             ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { i += 1; i } + i;\n+   |             ~   +++++++++\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:13:13\n+   |\n+LL |     let _ = ++i + ++i;\n+   |             ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { i += 1; i } + ++i;\n+   |             ~   +++++++++\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:18:18\n+   |\n+LL |     let _ = i + i++;\n+   |                  ^^ not a valid postfix operator\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:24:14\n+   |\n+LL |     let _ = i++ + i;\n+   |              ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { let tmp = i; i += 1; tmp } + i;\n+   |             +++++++++++  ~~~~~~~~~~~~~~~\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:29:14\n+   |\n+LL |     let _ = i++ + i++;\n+   |              ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { let tmp = i; i += 1; tmp } + i++;\n+   |             +++++++++++  ~~~~~~~~~~~~~~~\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:34:13\n+   |\n+LL |     let _ = ++i + i++;\n+   |             ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { i += 1; i } + i++;\n+   |             ~   +++++++++\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:39:14\n+   |\n+LL |     let _ = i++ + ++i;\n+   |              ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { let tmp = i; i += 1; tmp } + ++i;\n+   |             +++++++++++  ~~~~~~~~~~~~~~~\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:44:24\n+   |\n+LL |     let _ = (1 + 2 + i)++;\n+   |                        ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { let tmp = (1 + 2 + i); (1 + 2 + i) += 1; tmp };\n+   |             +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:49:15\n+   |\n+LL |     let _ = (i++ + 1) + 2;\n+   |               ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = ({ let tmp = i; i += 1; tmp } + 1) + 2;\n+   |              +++++++++++  ~~~~~~~~~~~~~~~\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "760c67b4bed70ca39a22ccb2778125610f187142", "filename": "src/test/ui/parser/issue-104867-inc-dec.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.rs?ref=309c469eece74cd9b83328d18302f1a177d0df7f", "patch": "@@ -0,0 +1,45 @@\n+struct S {\n+    x: i32,\n+}\n+\n+fn test1() {\n+    let mut i = 0;\n+    i++; //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn test2() {\n+    let s = S { x: 0 };\n+    s.x++; //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn test3() {\n+    let mut i = 0;\n+    if i++ == 1 {} //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn test4() {\n+    let mut i = 0;\n+    ++i; //~ ERROR Rust has no prefix increment operator\n+}\n+\n+fn test5() {\n+    let mut i = 0;\n+    if ++i == 1 { } //~ ERROR Rust has no prefix increment operator\n+}\n+\n+fn test6() {\n+    let mut i = 0;\n+    loop { break; }\n+    i++; //~ ERROR Rust has no postfix increment operator\n+    loop { break; }\n+    ++i;\n+}\n+\n+fn test7() {\n+    let mut i = 0;\n+    loop { break; }\n+    ++i; //~ ERROR Rust has no prefix increment operator\n+}\n+\n+\n+fn main() {}"}, {"sha": "78bfd3e82f0deb6d96e01fc9c081fc635a98bb40", "filename": "src/test/ui/parser/issue-104867-inc-dec.stderr", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/309c469eece74cd9b83328d18302f1a177d0df7f/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.stderr?ref=309c469eece74cd9b83328d18302f1a177d0df7f", "patch": "@@ -0,0 +1,81 @@\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:7:6\n+   |\n+LL |     i++;\n+   |      ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     i += 1;\n+   |       ~~~~\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:12:8\n+   |\n+LL |     s.x++;\n+   |        ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     s.x += 1;\n+   |         ~~~~\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:17:9\n+   |\n+LL |     if i++ == 1 {}\n+   |         ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     if { let tmp = i; i += 1; tmp } == 1 {}\n+   |        +++++++++++  ~~~~~~~~~~~~~~~\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:22:5\n+   |\n+LL |     ++i;\n+   |     ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL -     ++i;\n+LL +     i += 1;\n+   |\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:27:8\n+   |\n+LL |     if ++i == 1 { }\n+   |        ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     if { i += 1; i } == 1 { }\n+   |        ~   +++++++++\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:33:6\n+   |\n+LL |     i++;\n+   |      ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     i += 1;\n+   |       ~~~~\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:41:5\n+   |\n+LL |     ++i;\n+   |     ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL -     ++i;\n+LL +     i += 1;\n+   |\n+\n+error: aborting due to 7 previous errors\n+"}]}