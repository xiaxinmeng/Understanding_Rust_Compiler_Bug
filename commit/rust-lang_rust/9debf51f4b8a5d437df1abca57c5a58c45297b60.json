{"sha": "9debf51f4b8a5d437df1abca57c5a58c45297b60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkZWJmNTFmNGI4YTVkNDM3ZGYxYWJjYTU3YzVhNThjNDUyOTdiNjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-15T19:41:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-15T19:41:25Z"}, "message": "Auto merge of #32338 - lukaspustina:doc-std-process, r=alexcrichton\n\nExtends rustdoc on how to caputure output\n\n- The documentation is quite about how to caputure a process' output when using\n  ` std::process::Child::wait_with_output()`.\n- This PR adds an example for this particular use case.", "tree": {"sha": "31309ff93bea6162d2dc4e4aa2f3be8748b93b88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31309ff93bea6162d2dc4e4aa2f3be8748b93b88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9debf51f4b8a5d437df1abca57c5a58c45297b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9debf51f4b8a5d437df1abca57c5a58c45297b60", "html_url": "https://github.com/rust-lang/rust/commit/9debf51f4b8a5d437df1abca57c5a58c45297b60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9debf51f4b8a5d437df1abca57c5a58c45297b60/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccc7e95a964ece830caf66ad537e89ae6fb397a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc7e95a964ece830caf66ad537e89ae6fb397a6", "html_url": "https://github.com/rust-lang/rust/commit/ccc7e95a964ece830caf66ad537e89ae6fb397a6"}, {"sha": "561337223fc5aa6d97457bdd133f7404b6ae562a", "url": "https://api.github.com/repos/rust-lang/rust/commits/561337223fc5aa6d97457bdd133f7404b6ae562a", "html_url": "https://github.com/rust-lang/rust/commit/561337223fc5aa6d97457bdd133f7404b6ae562a"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "1d2516a4c4099b6fc7ce78410db6de0ea64239ed", "filename": "src/libstd/process.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9debf51f4b8a5d437df1abca57c5a58c45297b60/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9debf51f4b8a5d437df1abca57c5a58c45297b60/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=9debf51f4b8a5d437df1abca57c5a58c45297b60", "patch": "@@ -38,10 +38,10 @@ use sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n /// let mut child = Command::new(\"/bin/cat\")\n ///                         .arg(\"file.txt\")\n ///                         .spawn()\n-///                         .unwrap_or_else(|e| { panic!(\"failed to execute child: {}\", e) });\n+///                         .expect(\"failed to execute child\");\n ///\n /// let ecode = child.wait()\n-///                  .unwrap_or_else(|e| { panic!(\"failed to wait on child: {}\", e) });\n+///                  .expect(\"failed to wait on child\");\n ///\n /// assert!(ecode.success());\n /// ```\n@@ -195,7 +195,8 @@ impl FromInner<AnonPipe> for ChildStderr {\n ///                      .arg(\"-c\")\n ///                      .arg(\"echo hello\")\n ///                      .output()\n-///                      .unwrap_or_else(|e| { panic!(\"failed to execute process: {}\", e) });\n+///                      .expect(\"failed to execute proces\");\n+///\n /// let hello = output.stdout;\n /// ```\n #[stable(feature = \"process\", since = \"1.0.0\")]\n@@ -305,15 +306,16 @@ impl Command {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```should_panic\n     /// use std::process::Command;\n-    /// let output = Command::new(\"cat\").arg(\"foo.txt\").output().unwrap_or_else(|e| {\n-    ///     panic!(\"failed to execute process: {}\", e)\n-    /// });\n+    /// let output = Command::new(\"/bin/cat\").arg(\"file.txt\").output()\n+    ///     .expect(\"failed to execute process\");\n     ///\n     /// println!(\"status: {}\", output.status);\n     /// println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n     /// println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+    ///\n+    /// assert!(output.status.success());\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn output(&mut self) -> io::Result<Output> {\n@@ -328,14 +330,15 @@ impl Command {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```should_panic\n     /// use std::process::Command;\n     ///\n-    /// let status = Command::new(\"ls\").status().unwrap_or_else(|e| {\n-    ///     panic!(\"failed to execute process: {}\", e)\n-    /// });\n+    /// let status = Command::new(\"/bin/cat\").arg(\"file.txt\").status()\n+    ///     .expect(\"failed to execute process\");\n     ///\n     /// println!(\"process exited with: {}\", status);\n+    ///\n+    /// assert!(status.success());\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn status(&mut self) -> io::Result<ExitStatus> {\n@@ -499,6 +502,29 @@ impl Child {\n     /// before waiting. This helps avoid deadlock: it ensures that the\n     /// child does not block waiting for input from the parent, while\n     /// the parent waits for the child to exit.\n+    ///\n+    /// By default, stdin, stdout and stderr are inherited from the parent.\n+    /// In order to capture the output into this `Result<Output>` it is\n+    /// necessary to create new pipes between parent and child. Use\n+    /// `stdout(Stdio::piped())` or `stderr(Stdio::piped())`, respectively.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let mut child = Command::new(\"/bin/cat\")\n+    ///                         .arg(\"file.txt\")\n+    ///                         .stdout(Stdio::piped())\n+    ///                         .spawn()\n+    ///                         .expect(\"failed to execute child\");\n+    ///\n+    /// let ecode = child.wait_with_output()\n+    ///                  .expect(\"failed to wait on child\");\n+    ///\n+    /// assert!(ecode.status.success());\n+    /// ```\n+    ///\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn wait_with_output(mut self) -> io::Result<Output> {\n         drop(self.stdin.take());"}]}