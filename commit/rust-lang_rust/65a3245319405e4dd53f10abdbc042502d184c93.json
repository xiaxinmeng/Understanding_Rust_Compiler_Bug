{"sha": "65a3245319405e4dd53f10abdbc042502d184c93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YTMyNDUzMTk0MDVlNGRkNTNmMTBhYmRiYzA0MjUwMmQxODRjOTM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-05-26T17:01:20Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-05-26T17:01:20Z"}, "message": "Add tests for fixed issues\n\nFixes #23037.\nFixes #25339.", "tree": {"sha": "0107808be27c76191cb79ed488807e3ea40b9c90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0107808be27c76191cb79ed488807e3ea40b9c90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65a3245319405e4dd53f10abdbc042502d184c93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65a3245319405e4dd53f10abdbc042502d184c93", "html_url": "https://github.com/rust-lang/rust/commit/65a3245319405e4dd53f10abdbc042502d184c93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65a3245319405e4dd53f10abdbc042502d184c93/comments", "author": null, "committer": null, "parents": [{"sha": "ae10e478eb61e75ebf3a7bf672b34b582555fd8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae10e478eb61e75ebf3a7bf672b34b582555fd8e", "html_url": "https://github.com/rust-lang/rust/commit/ae10e478eb61e75ebf3a7bf672b34b582555fd8e"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "1286ba873be5ae79e57433e1f06a2a0cff086f72", "filename": "src/test/compile-fail/issue-23073.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/65a3245319405e4dd53f10abdbc042502d184c93/src%2Ftest%2Fcompile-fail%2Fissue-23073.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a3245319405e4dd53f10abdbc042502d184c93/src%2Ftest%2Fcompile-fail%2Fissue-23073.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23073.rs?ref=65a3245319405e4dd53f10abdbc042502d184c93", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo { type T; }\n+trait Bar {\n+    type Foo: Foo;\n+    type FooT = <<Self as Bar>::Foo>::T; //~ ERROR ambiguous associated type\n+}\n+\n+fn main() {}"}, {"sha": "af172000fdb1a6336e28849dc3c44ac043e1bab7", "filename": "src/test/run-pass/issue-25339.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/65a3245319405e4dd53f10abdbc042502d184c93/src%2Ftest%2Frun-pass%2Fissue-25339.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a3245319405e4dd53f10abdbc042502d184c93/src%2Ftest%2Frun-pass%2Fissue-25339.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-25339.rs?ref=65a3245319405e4dd53f10abdbc042502d184c93", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::marker::PhantomData;\n+\n+pub trait Routing<I> {\n+    type Output;\n+    fn resolve(&self, input: I);\n+}\n+\n+pub trait ToRouting {\n+    type Input;\n+    type Routing : ?Sized = Routing<Self::Input, Output=()>;\n+    fn to_routing(self) -> Self::Routing;\n+}\n+\n+pub struct Mount<I, R: Routing<I>> {\n+    action: R,\n+    _marker: PhantomData<I>\n+}\n+\n+impl<I, R: Routing<I>> Mount<I, R> {\n+    pub fn create<T: ToRouting<Routing=R>>(mount: &str, input: T) {\n+        input.to_routing();\n+    }\n+}\n+\n+fn main() {\n+}"}]}