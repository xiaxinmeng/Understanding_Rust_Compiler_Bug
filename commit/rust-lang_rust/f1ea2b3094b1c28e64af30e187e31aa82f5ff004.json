{"sha": "f1ea2b3094b1c28e64af30e187e31aa82f5ff004", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZWEyYjMwOTRiMWMyOGU2NGFmMzBlMTg3ZTMxYWE4MmY1ZmYwMDQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-20T23:35:20Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-03T11:10:57Z"}, "message": "Catch arith-overflow explicitly during `rustc::middle::const_eval`.\n\nThis only replaces the conditional arith-overflow asserts with\nunconditional errors from the guts of const-eval; it does *not*\nattempt to sanely handle such errors e.g. with a nice error message\nfrom `rustc`.  So the same test that led me to add this commit are\nstill failing, and must be addressed.", "tree": {"sha": "ab2481f9e050a090081e1f608e0b9f408dc7fc73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab2481f9e050a090081e1f608e0b9f408dc7fc73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ea2b3094b1c28e64af30e187e31aa82f5ff004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ea2b3094b1c28e64af30e187e31aa82f5ff004", "html_url": "https://github.com/rust-lang/rust/commit/f1ea2b3094b1c28e64af30e187e31aa82f5ff004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ea2b3094b1c28e64af30e187e31aa82f5ff004/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faf3bcd72c85774805ae0e84d0458aa3e67b20e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/faf3bcd72c85774805ae0e84d0458aa3e67b20e4", "html_url": "https://github.com/rust-lang/rust/commit/faf3bcd72c85774805ae0e84d0458aa3e67b20e4"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "23844739a6beb8526f45cb8436677d038ce542b8", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f1ea2b3094b1c28e64af30e187e31aa82f5ff004/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ea2b3094b1c28e64af30e187e31aa82f5ff004/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=f1ea2b3094b1c28e64af30e187e31aa82f5ff004", "patch": "@@ -25,6 +25,7 @@ use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n use syntax::{ast_map, ast_util, codemap};\n \n+use std::num::wrapping::OverflowingOps;\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry::Vacant;\n use std::{i8, i16, i32, i64};\n@@ -206,6 +207,33 @@ pub fn eval_const_expr(tcx: &ty::ctxt, e: &Expr) -> const_val {\n     }\n }\n \n+fn checked_add_int(a: i64, b: i64) -> Result<const_val, String> {\n+    let (ret, oflo) = a.overflowing_add(b);\n+    if !oflo { Ok(const_int(ret)) } else { Err(format!(\"constant arithmetic overflow\")) }\n+}\n+fn checked_sub_int(a: i64, b: i64) -> Result<const_val, String> {\n+    let (ret, oflo) = a.overflowing_sub(b);\n+    if !oflo { Ok(const_int(ret)) } else { Err(format!(\"constant arithmetic overflow\")) }\n+}\n+fn checked_mul_int(a: i64, b: i64) -> Result<const_val, String> {\n+    let (ret, oflo) = a.overflowing_mul(b);\n+    if !oflo { Ok(const_int(ret)) } else { Err(format!(\"constant arithmetic overflow\")) }\n+}\n+\n+fn checked_add_uint(a: u64, b: u64) -> Result<const_val, String> {\n+    let (ret, oflo) = a.overflowing_add(b);\n+    if !oflo { Ok(const_uint(ret)) } else { Err(format!(\"constant arithmetic overflow\")) }\n+}\n+fn checked_sub_uint(a: u64, b: u64) -> Result<const_val, String> {\n+    let (ret, oflo) = a.overflowing_sub(b);\n+    if !oflo { Ok(const_uint(ret)) } else { Err(format!(\"constant arithmetic overflow\")) }\n+}\n+fn checked_mul_uint(a: u64, b: u64) -> Result<const_val, String> {\n+    let (ret, oflo) = a.overflowing_mul(b);\n+    if !oflo { Ok(const_uint(ret)) } else { Err(format!(\"constant arithmetic overflow\")) }\n+}\n+\n+\n pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                      e: &Expr,\n                                      ty_hint: Option<Ty<'tcx>>)\n@@ -276,9 +304,9 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n                 }\n             };\n             match op.node {\n-              ast::BiAdd => Ok(const_int(a + b)),\n-              ast::BiSub => Ok(const_int(a - b)),\n-              ast::BiMul => Ok(const_int(a * b)),\n+              ast::BiAdd => checked_add_int(a, b),\n+              ast::BiSub => checked_sub_int(a, b),\n+              ast::BiMul => checked_mul_int(a, b),\n               ast::BiDiv => {\n                   if b == 0 {\n                       Err(\"attempted to divide by zero\".to_string())\n@@ -312,9 +340,9 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n           }\n           (Ok(const_uint(a)), Ok(const_uint(b))) => {\n             match op.node {\n-              ast::BiAdd => Ok(const_uint(a + b)),\n-              ast::BiSub => Ok(const_uint(a - b)),\n-              ast::BiMul => Ok(const_uint(a * b)),\n+              ast::BiAdd => checked_add_uint(a, b),\n+              ast::BiSub => checked_sub_uint(a, b),\n+              ast::BiMul => checked_mul_uint(a, b),\n               ast::BiDiv if b == 0 => {\n                   Err(\"attempted to divide by zero\".to_string())\n               }"}]}