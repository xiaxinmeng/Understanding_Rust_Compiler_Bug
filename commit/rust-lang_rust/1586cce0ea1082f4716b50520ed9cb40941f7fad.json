{"sha": "1586cce0ea1082f4716b50520ed9cb40941f7fad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ODZjY2UwZWExMDgyZjQ3MTZiNTA1MjBlZDljYjQwOTQxZjdmYWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T00:56:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T00:56:28Z"}, "message": "rustdoc: Add enum folding", "tree": {"sha": "3c962d4112f058f24cb0e796d7bcaefac5475884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c962d4112f058f24cb0e796d7bcaefac5475884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1586cce0ea1082f4716b50520ed9cb40941f7fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1586cce0ea1082f4716b50520ed9cb40941f7fad", "html_url": "https://github.com/rust-lang/rust/commit/1586cce0ea1082f4716b50520ed9cb40941f7fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1586cce0ea1082f4716b50520ed9cb40941f7fad/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e946792a78590df3972fc4a9827d5e94d333d055", "url": "https://api.github.com/repos/rust-lang/rust/commits/e946792a78590df3972fc4a9827d5e94d333d055", "html_url": "https://github.com/rust-lang/rust/commit/e946792a78590df3972fc4a9827d5e94d333d055"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "943a317721a516d6c867d630664ae7382fb16403", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1586cce0ea1082f4716b50520ed9cb40941f7fad/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1586cce0ea1082f4716b50520ed9cb40941f7fad/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=1586cce0ea1082f4716b50520ed9cb40941f7fad", "patch": "@@ -16,22 +16,25 @@ type fold_crate<T> = fn~(fold: fold<T>, doc: doc::cratedoc) -> doc::cratedoc;\n type fold_mod<T> = fn~(fold: fold<T>, doc: doc::moddoc) -> doc::moddoc;\n type fold_fn<T> = fn~(fold: fold<T>, doc: doc::fndoc) -> doc::fndoc;\n type fold_const<T> = fn~(fold: fold<T>, doc: doc::constdoc) -> doc::constdoc;\n+type fold_enum<T> = fn~(fold: fold<T>, doc: doc::enumdoc) -> doc::enumdoc;\n type fold_modlist<T> = fn~(fold: fold<T>, list: doc::modlist) -> doc::modlist;\n type fold_fnlist<T> = fn~(fold: fold<T>, list: doc::fnlist) -> doc::fnlist;\n type fold_constlist<T> = fn~(\n-    fold: fold<T>,\n-    list: doc::constlist\n-) -> doc::constlist;\n+    fold: fold<T>, list: doc::constlist) -> doc::constlist;\n+type fold_enumlist<T> = fn~(\n+    fold: fold<T>, list: doc::enumlist) -> doc::enumlist;\n \n type t<T> = {\n     ctxt: T,\n     fold_crate: fold_crate<T>,\n     fold_mod: fold_mod<T>,\n     fold_fn: fold_fn<T>,\n     fold_const: fold_const<T>,\n+    fold_enum: fold_enum<T>,\n     fold_modlist: fold_modlist<T>,\n     fold_fnlist: fold_fnlist<T>,\n-    fold_constlist: fold_constlist<T>\n+    fold_constlist: fold_constlist<T>,\n+    fold_enumlist: fold_enumlist<T>\n };\n \n \n@@ -43,19 +46,23 @@ fn mk_fold<T:copy>(\n     fold_mod: fold_mod<T>,\n     fold_fn: fold_fn<T>,\n     fold_const: fold_const<T>,\n+    fold_enum: fold_enum<T>,\n     fold_modlist: fold_modlist<T>,\n     fold_fnlist: fold_fnlist<T>,\n-    fold_constlist: fold_constlist<T>\n+    fold_constlist: fold_constlist<T>,\n+    fold_enumlist: fold_enumlist<T>\n ) -> fold<T> {\n     fold({\n         ctxt: ctxt,\n         fold_crate: fold_crate,\n         fold_mod: fold_mod,\n         fold_fn: fold_fn,\n         fold_const: fold_const,\n+        fold_enum: fold_enum,\n         fold_modlist: fold_modlist,\n         fold_fnlist: fold_fnlist,\n-        fold_constlist: fold_constlist\n+        fold_constlist: fold_constlist,\n+        fold_enumlist: fold_enumlist\n     })\n }\n \n@@ -66,9 +73,11 @@ fn default_seq_fold<T:copy>(ctxt: T) -> fold<T> {\n         {|f, d| default_seq_fold_mod(f, d)},\n         {|f, d| default_seq_fold_fn(f, d)},\n         {|f, d| default_seq_fold_const(f, d)},\n+        {|f, d| default_seq_fold_enum(f, d)},\n         {|f, d| default_seq_fold_modlist(f, d)},\n         {|f, d| default_seq_fold_fnlist(f, d)},\n-        {|f, d| default_seq_fold_constlist(f, d)}\n+        {|f, d| default_seq_fold_constlist(f, d)},\n+        {|f, d| default_seq_fold_enumlist(f, d)}\n     )\n }\n \n@@ -107,6 +116,13 @@ fn default_seq_fold_const<T>(\n     doc\n }\n \n+fn default_seq_fold_enum<T>(\n+    _fold: fold<T>,\n+    doc: doc::enumdoc\n+) -> doc::enumdoc {\n+    doc\n+}\n+\n fn default_seq_fold_modlist<T>(\n     fold: fold<T>,\n     list: doc::modlist\n@@ -134,6 +150,15 @@ fn default_seq_fold_constlist<T>(\n     })\n }\n \n+fn default_seq_fold_enumlist<T>(\n+    fold: fold<T>,\n+    list: doc::enumlist\n+) -> doc::enumlist {\n+    doc::enumlist(vec::map(*list) {|doc|\n+        fold.fold_enum(fold, doc)\n+    })\n+}\n+\n #[test]\n fn default_fold_should_produce_same_doc() {\n     let source = \"mod a { fn b() { } mod c { fn d() { } } }\";\n@@ -152,4 +177,14 @@ fn default_fold_should_produce_same_consts() {\n     let fld = default_seq_fold(());\n     let folded = fld.fold_crate(fld, doc);\n     assert doc == folded;\n+}\n+\n+#[test]\n+fn default_fold_should_produce_same_enums() {\n+    let source = \"enum a { b }\";\n+    let ast = parse::from_str(source);\n+    let doc = extract::extract(ast, \"\");\n+    let fld = default_seq_fold(());\n+    let folded = fld.fold_crate(fld, doc);\n+    assert doc == folded;\n }\n\\ No newline at end of file"}]}