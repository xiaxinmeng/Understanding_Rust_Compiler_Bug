{"sha": "7a26aeca77bcf334747eddb630e3b9475149b7f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMjZhZWNhNzdiY2YzMzQ3NDdlZGRiNjMwZTNiOTQ3NTE0OWI3ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-03T18:00:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-03T18:00:03Z"}, "message": "Auto merge of #36815 - alexcrichton:stabilize-1.13, r=aturon\n\nstd: Stabilize and deprecate APIs for 1.13\n\nThis commit is intended to be backported to the 1.13 branch, and works with the\nfollowing APIs:\n\nStabilized\n\n* `i32::checked_abs`\n* `i32::wrapping_abs`\n* `i32::overflowing_abs`\n* `RefCell::try_borrow`\n* `RefCell::try_borrow_mut`\n\nDeprecated\n\n* `BinaryHeap::push_pop`\n* `BinaryHeap::replace`\n* `SipHash13`\n* `SipHash24`\n* `SipHasher` - use `DefaultHasher` instead in the `std::collections::hash_map`\n  module\n\nCloses #28147\nCloses #34767\nCloses #35057\nCloses #35070", "tree": {"sha": "1c3b1e3e30d338f9ecdc2d8b9badf13d1ab4cb84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c3b1e3e30d338f9ecdc2d8b9badf13d1ab4cb84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a26aeca77bcf334747eddb630e3b9475149b7f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a26aeca77bcf334747eddb630e3b9475149b7f5", "html_url": "https://github.com/rust-lang/rust/commit/7a26aeca77bcf334747eddb630e3b9475149b7f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a26aeca77bcf334747eddb630e3b9475149b7f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff713464e6530fab2e13d0965929d8189c59ae56", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff713464e6530fab2e13d0965929d8189c59ae56", "html_url": "https://github.com/rust-lang/rust/commit/ff713464e6530fab2e13d0965929d8189c59ae56"}, {"sha": "10c3134da025f3d63700abf52769c0f106637a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/10c3134da025f3d63700abf52769c0f106637a14", "html_url": "https://github.com/rust-lang/rust/commit/10c3134da025f3d63700abf52769c0f106637a14"}], "stats": {"total": 209, "additions": 129, "deletions": 80}, "files": [{"sha": "5f2401b2369e8eb153589f7ca7b6dbcfe65fbeb6", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -535,6 +535,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// ```\n     /// #![feature(binary_heap_extras)]\n+    /// #![allow(deprecated)]\n     ///\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n@@ -549,6 +550,7 @@ impl<T: Ord> BinaryHeap<T> {\n     #[unstable(feature = \"binary_heap_extras\",\n                reason = \"needs to be audited\",\n                issue = \"28147\")]\n+    #[rustc_deprecated(since = \"1.13.0\", reason = \"use `peek_mut` instead\")]\n     pub fn push_pop(&mut self, mut item: T) -> T {\n         match self.data.get_mut(0) {\n             None => return item,\n@@ -575,6 +577,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// ```\n     /// #![feature(binary_heap_extras)]\n+    /// #![allow(deprecated)]\n     ///\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n@@ -587,6 +590,7 @@ impl<T: Ord> BinaryHeap<T> {\n     #[unstable(feature = \"binary_heap_extras\",\n                reason = \"needs to be audited\",\n                issue = \"28147\")]\n+    #[rustc_deprecated(since = \"1.13.0\", reason = \"use `peek_mut` instead\")]\n     pub fn replace(&mut self, mut item: T) -> Option<T> {\n         if !self.is_empty() {\n             swap(&mut item, &mut self.data[0]);"}, {"sha": "faabcf4c372b60f83ad57bca599176632c757967", "filename": "src/libcollectionstest/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcollectionstest%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcollectionstest%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbinary_heap.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -139,6 +139,7 @@ fn test_push_unique() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_push_pop() {\n     let mut heap = BinaryHeap::from(vec![5, 5, 2, 1, 3]);\n     assert_eq!(heap.len(), 5);\n@@ -153,6 +154,7 @@ fn test_push_pop() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_replace() {\n     let mut heap = BinaryHeap::from(vec![5, 5, 2, 1, 3]);\n     assert_eq!(heap.len(), 5);\n@@ -212,6 +214,7 @@ fn test_empty_peek_mut() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_empty_replace() {\n     let mut heap = BinaryHeap::new();\n     assert!(heap.replace(5).is_none());"}, {"sha": "950e6ee2e9ef00a5a6c3a4466c37addf2f6a4d27", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -31,7 +31,8 @@ extern crate collections;\n extern crate test;\n extern crate rustc_unicode;\n \n-use std::hash::{Hash, Hasher, SipHasher};\n+use std::hash::{Hash, Hasher};\n+use std::collections::hash_map::DefaultHasher;\n \n #[cfg(test)] #[macro_use] mod bench;\n \n@@ -47,7 +48,7 @@ mod vec_deque;\n mod vec;\n \n fn hash<T: Hash>(t: &T) -> u64 {\n-    let mut s = SipHasher::new();\n+    let mut s = DefaultHasher::new();\n     t.hash(&mut s);\n     s.finish()\n }"}, {"sha": "64a7a8c5ef785f1ed6f82e31ef2a6101c26a0b00", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -175,7 +175,7 @@\n \n use cmp::Ordering;\n use fmt::{self, Debug, Display};\n-use marker::{PhantomData, Unsize};\n+use marker::Unsize;\n use ops::{Deref, DerefMut, CoerceUnsized};\n \n /// A mutable memory location that admits only `Copy` data.\n@@ -403,40 +403,40 @@ pub enum BorrowState {\n }\n \n /// An error returned by [`RefCell::try_borrow`](struct.RefCell.html#method.try_borrow).\n-#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n-pub struct BorrowError<'a, T: 'a + ?Sized> {\n-    marker: PhantomData<&'a RefCell<T>>,\n+#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+pub struct BorrowError {\n+    _private: (),\n }\n \n-#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n-impl<'a, T: ?Sized> Debug for BorrowError<'a, T> {\n+#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+impl Debug for BorrowError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"BorrowError\").finish()\n     }\n }\n \n-#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n-impl<'a, T: ?Sized> Display for BorrowError<'a, T> {\n+#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+impl Display for BorrowError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         Display::fmt(\"already mutably borrowed\", f)\n     }\n }\n \n /// An error returned by [`RefCell::try_borrow_mut`](struct.RefCell.html#method.try_borrow_mut).\n-#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n-pub struct BorrowMutError<'a, T: 'a + ?Sized> {\n-    marker: PhantomData<&'a RefCell<T>>,\n+#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+pub struct BorrowMutError {\n+    _private: (),\n }\n \n-#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n-impl<'a, T: ?Sized> Debug for BorrowMutError<'a, T> {\n+#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+impl Debug for BorrowMutError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"BorrowMutError\").finish()\n     }\n }\n \n-#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n-impl<'a, T: ?Sized> Display for BorrowMutError<'a, T> {\n+#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+impl Display for BorrowMutError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         Display::fmt(\"already borrowed\", f)\n     }\n@@ -573,8 +573,6 @@ impl<T: ?Sized> RefCell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_borrow)]\n-    ///\n     /// use std::cell::RefCell;\n     ///\n     /// let c = RefCell::new(5);\n@@ -589,15 +587,15 @@ impl<T: ?Sized> RefCell<T> {\n     ///     assert!(c.try_borrow().is_ok());\n     /// }\n     /// ```\n-    #[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+    #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n     #[inline]\n-    pub fn try_borrow(&self) -> Result<Ref<T>, BorrowError<T>> {\n+    pub fn try_borrow(&self) -> Result<Ref<T>, BorrowError> {\n         match BorrowRef::new(&self.borrow) {\n             Some(b) => Ok(Ref {\n                 value: unsafe { &*self.value.get() },\n                 borrow: b,\n             }),\n-            None => Err(BorrowError { marker: PhantomData }),\n+            None => Err(BorrowError { _private: () }),\n         }\n     }\n \n@@ -654,8 +652,6 @@ impl<T: ?Sized> RefCell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_borrow)]\n-    ///\n     /// use std::cell::RefCell;\n     ///\n     /// let c = RefCell::new(5);\n@@ -667,15 +663,15 @@ impl<T: ?Sized> RefCell<T> {\n     ///\n     /// assert!(c.try_borrow_mut().is_ok());\n     /// ```\n-    #[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+    #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n     #[inline]\n-    pub fn try_borrow_mut(&self) -> Result<RefMut<T>, BorrowMutError<T>> {\n+    pub fn try_borrow_mut(&self) -> Result<RefMut<T>, BorrowMutError> {\n         match BorrowRefMut::new(&self.borrow) {\n             Some(b) => Ok(RefMut {\n                 value: unsafe { &mut *self.value.get() },\n                 borrow: b,\n             }),\n-            None => Err(BorrowMutError { marker: PhantomData }),\n+            None => Err(BorrowMutError { _private: () }),\n         }\n     }\n "}, {"sha": "6a60cfcc120840de075596f6224a64ba75e45db0", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -76,9 +76,11 @@ use marker;\n use mem;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n pub use self::sip::SipHasher;\n \n #[unstable(feature = \"sip_hash_13\", issue = \"29754\")]\n+#[allow(deprecated)]\n pub use self::sip::{SipHasher13, SipHasher24};\n \n mod sip;"}, {"sha": "bf138a45de8660d8b5c4a828889686848ba3867f", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -10,13 +10,16 @@\n \n //! An implementation of SipHash.\n \n+#![allow(deprecated)]\n+\n use marker::PhantomData;\n use ptr;\n \n /// An implementation of SipHash 1-3.\n ///\n /// See: https://131002.net/siphash/\n #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n+#[rustc_deprecated(since = \"1.13.0\", reason = \"use `DefaultHasher` instead\")]\n #[derive(Debug, Clone, Default)]\n pub struct SipHasher13 {\n     hasher: Hasher<Sip13Rounds>,\n@@ -26,6 +29,7 @@ pub struct SipHasher13 {\n ///\n /// See: https://131002.net/siphash/\n #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n+#[rustc_deprecated(since = \"1.13.0\", reason = \"use `DefaultHasher` instead\")]\n #[derive(Debug, Clone, Default)]\n pub struct SipHasher24 {\n     hasher: Hasher<Sip24Rounds>,\n@@ -47,6 +51,7 @@ pub struct SipHasher24 {\n /// it is not intended for cryptographic purposes. As such, all\n /// cryptographic uses of this implementation are _strongly discouraged_.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"1.13.0\", reason = \"use `DefaultHasher` instead\")]\n #[derive(Debug, Clone, Default)]\n pub struct SipHasher(SipHasher24);\n \n@@ -136,30 +141,33 @@ impl SipHasher {\n     /// Creates a new `SipHasher` with the two initial keys set to 0.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_deprecated(since = \"1.13.0\", reason = \"use `DefaultHasher` instead\")]\n     pub fn new() -> SipHasher {\n         SipHasher::new_with_keys(0, 0)\n     }\n \n     /// Creates a `SipHasher` that is keyed off the provided keys.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_deprecated(since = \"1.13.0\", reason = \"use `DefaultHasher` instead\")]\n     pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher {\n         SipHasher(SipHasher24::new_with_keys(key0, key1))\n     }\n }\n \n-\n impl SipHasher13 {\n     /// Creates a new `SipHasher13` with the two initial keys set to 0.\n     #[inline]\n     #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n+    #[rustc_deprecated(since = \"1.13.0\", reason = \"use `DefaultHasher` instead\")]\n     pub fn new() -> SipHasher13 {\n         SipHasher13::new_with_keys(0, 0)\n     }\n \n     /// Creates a `SipHasher13` that is keyed off the provided keys.\n     #[inline]\n     #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n+    #[rustc_deprecated(since = \"1.13.0\", reason = \"use `DefaultHasher` instead\")]\n     pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {\n         SipHasher13 {\n             hasher: Hasher::new_with_keys(key0, key1)\n@@ -171,13 +179,15 @@ impl SipHasher24 {\n     /// Creates a new `SipHasher24` with the two initial keys set to 0.\n     #[inline]\n     #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n+    #[rustc_deprecated(since = \"1.13.0\", reason = \"use `DefaultHasher` instead\")]\n     pub fn new() -> SipHasher24 {\n         SipHasher24::new_with_keys(0, 0)\n     }\n \n     /// Creates a `SipHasher24` that is keyed off the provided keys.\n     #[inline]\n     #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n+    #[rustc_deprecated(since = \"1.13.0\", reason = \"use `DefaultHasher` instead\")]\n     pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher24 {\n         SipHasher24 {\n             hasher: Hasher::new_with_keys(key0, key1)"}, {"sha": "386daa08468c7f850e30b2627ad1ed66f619297b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -613,14 +613,12 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// # #![feature(no_panic_abs)]\n-        ///\n         /// use std::i32;\n         ///\n         /// assert_eq!((-5i32).checked_abs(), Some(5));\n         /// assert_eq!(i32::MIN.checked_abs(), None);\n         /// ```\n-        #[unstable(feature = \"no_panic_abs\", issue = \"35057\")]\n+        #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n         #[inline]\n         pub fn checked_abs(self) -> Option<Self> {\n             if self.is_negative() {\n@@ -895,14 +893,12 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// # #![feature(no_panic_abs)]\n-        ///\n         /// assert_eq!(100i8.wrapping_abs(), 100);\n         /// assert_eq!((-100i8).wrapping_abs(), 100);\n         /// assert_eq!((-128i8).wrapping_abs(), -128);\n         /// assert_eq!((-128i8).wrapping_abs() as u8, 128);\n         /// ```\n-        #[unstable(feature = \"no_panic_abs\", issue = \"35057\")]\n+        #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n         #[inline(always)]\n         pub fn wrapping_abs(self) -> Self {\n             if self.is_negative() {\n@@ -1133,13 +1129,11 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// # #![feature(no_panic_abs)]\n-        ///\n         /// assert_eq!(10i8.overflowing_abs(), (10,false));\n         /// assert_eq!((-10i8).overflowing_abs(), (10,false));\n         /// assert_eq!((-128i8).overflowing_abs(), (-128,true));\n         /// ```\n-        #[unstable(feature = \"no_panic_abs\", issue = \"35057\")]\n+        #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n         #[inline]\n         pub fn overflowing_abs(self) -> (Self, bool) {\n             if self.is_negative() {"}, {"sha": "b465d7de180affba31bbfc39b9996f30d46e28a9", "filename": "src/libcoretest/hash/sip.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcoretest%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibcoretest%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fsip.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -7,6 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+#![allow(deprecated)]\n+\n use test::{Bencher, black_box};\n \n use core::hash::{Hash, Hasher};"}, {"sha": "e8b3714bbe3b885bbaa57035bd4a9ed344f8d30d", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -11,7 +11,8 @@\n use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use rustc_data_structures::fnv::FnvHashMap;\n use std::fmt::Write;\n-use std::hash::{Hash, Hasher, SipHasher};\n+use std::hash::{Hash, Hasher};\n+use std::collections::hash_map::DefaultHasher;\n use syntax::ast;\n use syntax::parse::token::{self, InternedString};\n use ty::TyCtxt;\n@@ -130,7 +131,7 @@ impl DefPath {\n     }\n \n     pub fn deterministic_hash(&self, tcx: TyCtxt) -> u64 {\n-        let mut state = SipHasher::new();\n+        let mut state = DefaultHasher::new();\n         self.deterministic_hash_to(tcx, &mut state);\n         state.finish()\n     }"}, {"sha": "3372f221729431cdff5e37de096290538184e709", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -39,7 +39,8 @@ use std::collections::btree_map::Keys as BTreeMapKeysIter;\n use std::collections::btree_map::Values as BTreeMapValuesIter;\n \n use std::fmt;\n-use std::hash::{Hasher, SipHasher};\n+use std::hash::Hasher;\n+use std::collections::hash_map::DefaultHasher;\n use std::iter::FromIterator;\n use std::path::PathBuf;\n \n@@ -212,7 +213,7 @@ macro_rules! top_level_options {\n                                                          $warn_text,\n                                                          self.error_format)*]);\n                 })*\n-                let mut hasher =  SipHasher::new();\n+                let mut hasher = DefaultHasher::new();\n                 dep_tracking::stable_hash(sub_hashes,\n                                           &mut hasher,\n                                           self.error_format);\n@@ -572,7 +573,7 @@ macro_rules! options {\n \n     impl<'a> dep_tracking::DepTrackingHash for $struct_name {\n \n-        fn hash(&self, hasher: &mut SipHasher, error_format: ErrorOutputType) {\n+        fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n             let mut sub_hashes = BTreeMap::new();\n             $({\n                 hash_option!($opt,\n@@ -1657,21 +1658,22 @@ mod dep_tracking {\n     use middle::cstore;\n     use session::search_paths::{PathKind, SearchPaths};\n     use std::collections::BTreeMap;\n-    use std::hash::{Hash, SipHasher};\n+    use std::hash::Hash;\n     use std::path::PathBuf;\n+    use std::collections::hash_map::DefaultHasher;\n     use super::{Passes, CrateType, OptLevel, DebugInfoLevel,\n                 OutputTypes, Externs, ErrorOutputType};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_back::PanicStrategy;\n \n     pub trait DepTrackingHash {\n-        fn hash(&self, &mut SipHasher, ErrorOutputType);\n+        fn hash(&self, &mut DefaultHasher, ErrorOutputType);\n     }\n \n     macro_rules! impl_dep_tracking_hash_via_hash {\n         ($t:ty) => (\n             impl DepTrackingHash for $t {\n-                fn hash(&self, hasher: &mut SipHasher, _: ErrorOutputType) {\n+                fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType) {\n                     Hash::hash(self, hasher);\n                 }\n             }\n@@ -1681,7 +1683,7 @@ mod dep_tracking {\n     macro_rules! impl_dep_tracking_hash_for_sortable_vec_of {\n         ($t:ty) => (\n             impl DepTrackingHash for Vec<$t> {\n-                fn hash(&self, hasher: &mut SipHasher, error_format: ErrorOutputType) {\n+                fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n                     let mut elems: Vec<&$t> = self.iter().collect();\n                     elems.sort();\n                     Hash::hash(&elems.len(), hasher);\n@@ -1720,7 +1722,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, cstore::NativeLibraryKind));\n \n     impl DepTrackingHash for SearchPaths {\n-        fn hash(&self, hasher: &mut SipHasher, _: ErrorOutputType) {\n+        fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType) {\n             let mut elems: Vec<_> = self\n                 .iter(PathKind::All)\n                 .collect();\n@@ -1733,7 +1735,7 @@ mod dep_tracking {\n         where T1: DepTrackingHash,\n               T2: DepTrackingHash\n     {\n-        fn hash(&self, hasher: &mut SipHasher, error_format: ErrorOutputType) {\n+        fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n             Hash::hash(&0, hasher);\n             DepTrackingHash::hash(&self.0, hasher, error_format);\n             Hash::hash(&1, hasher);\n@@ -1743,7 +1745,7 @@ mod dep_tracking {\n \n     // This is a stable hash because BTreeMap is a sorted container\n     pub fn stable_hash(sub_hashes: BTreeMap<&'static str, &DepTrackingHash>,\n-                       hasher: &mut SipHasher,\n+                       hasher: &mut DefaultHasher,\n                        error_format: ErrorOutputType) {\n         for (key, sub_hash) in sub_hashes {\n             // Using Hash::hash() instead of DepTrackingHash::hash() is fine for"}, {"sha": "c9ab577a9921d1beb738fc7cbf20274fa760cde4", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -24,7 +24,8 @@ use ty::TypeVariants::*;\n use rustc_const_math::{ConstInt, ConstIsize, ConstUsize};\n \n use std::cmp;\n-use std::hash::{Hash, SipHasher, Hasher};\n+use std::hash::{Hash, Hasher};\n+use std::collections::hash_map::DefaultHasher;\n use std::intrinsics;\n use syntax::ast::{self, Name};\n use syntax::attr::{self, SignedInt, UnsignedInt};\n@@ -353,7 +354,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Creates a hash of the type `Ty` which will be the same no matter what crate\n     /// context it's calculated within. This is used by the `type_id` intrinsic.\n     pub fn type_id_hash(self, ty: Ty<'tcx>) -> u64 {\n-        let mut hasher = TypeIdHasher::new(self, SipHasher::new());\n+        let mut hasher = TypeIdHasher::new(self, DefaultHasher::default());\n         hasher.visit_ty(ty);\n         hasher.finish()\n     }"}, {"sha": "e65d112430a164bef3dcb2433f10e5aed5c9f6c9", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -291,7 +291,8 @@ macro_rules! bitflags {\n #[cfg(test)]\n #[allow(non_upper_case_globals)]\n mod tests {\n-    use std::hash::{Hash, Hasher, SipHasher};\n+    use std::hash::{Hash, Hasher};\n+    use std::collections::hash_map::DefaultHasher;\n     use std::option::Option::{None, Some};\n \n     bitflags! {\n@@ -492,7 +493,7 @@ mod tests {\n     }\n \n     fn hash<T: Hash>(t: &T) -> u64 {\n-        let mut s = SipHasher::new();\n+        let mut s = DefaultHasher::new();\n         t.hash(&mut s);\n         s.finish()\n     }"}, {"sha": "a22b51ac0446167b980a832a429073e2b877ac06", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -29,7 +29,8 @@\n \n use syntax::ast;\n use std::cell::RefCell;\n-use std::hash::{Hash, SipHasher, Hasher};\n+use std::hash::{Hash, Hasher};\n+use std::collections::hash_map::DefaultHasher;\n use rustc::dep_graph::DepNode;\n use rustc::hir;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n@@ -126,9 +127,9 @@ impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n     {\n         assert!(def_id.is_local());\n         debug!(\"HashItemsVisitor::calculate(def_id={:?})\", def_id);\n-        // FIXME: this should use SHA1, not SipHash. SipHash is not\n+        // FIXME: this should use SHA1, not DefaultHasher. DefaultHasher is not\n         // built to avoid collisions.\n-        let mut state = SipHasher::new();\n+        let mut state = DefaultHasher::new();\n         walk_op(&mut StrictVersionHashVisitor::new(&mut state,\n                                                    self.tcx,\n                                                    &mut self.def_path_hashes,\n@@ -142,7 +143,7 @@ impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n     fn compute_crate_hash(&mut self) {\n         let krate = self.tcx.map.krate();\n \n-        let mut crate_state = SipHasher::new();\n+        let mut crate_state = DefaultHasher::new();\n \n         let crate_disambiguator = self.tcx.sess.local_crate_disambiguator();\n         \"crate_disambiguator\".hash(&mut crate_state);"}, {"sha": "4d1744fa70fcef10c4355d4413626bbfc219fbc9", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -25,7 +25,8 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit as visit;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fnv;\n-use std::hash::{Hash, SipHasher};\n+use std::hash::Hash;\n+use std::collections::hash_map::DefaultHasher;\n \n use super::def_path_hash::DefPathHashes;\n use super::caching_codemap_view::CachingCodemapView;\n@@ -42,15 +43,15 @@ const IGNORED_ATTRIBUTES: &'static [&'static str] = &[\n \n pub struct StrictVersionHashVisitor<'a, 'hash: 'a, 'tcx: 'hash> {\n     pub tcx: TyCtxt<'hash, 'tcx, 'tcx>,\n-    pub st: &'a mut SipHasher,\n+    pub st: &'a mut DefaultHasher,\n     // collect a deterministic hash of def-ids that we have seen\n     def_path_hashes: &'a mut DefPathHashes<'hash, 'tcx>,\n     hash_spans: bool,\n     codemap: &'a mut CachingCodemapView<'tcx>,\n }\n \n impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n-    pub fn new(st: &'a mut SipHasher,\n+    pub fn new(st: &'a mut DefaultHasher,\n                tcx: TyCtxt<'hash, 'tcx, 'tcx>,\n                def_path_hashes: &'a mut DefPathHashes<'hash, 'tcx>,\n                codemap: &'a mut CachingCodemapView<'tcx>,"}, {"sha": "428283309b0013adbafefa7d83d0809f2d459040", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -656,13 +656,14 @@ fn crate_path(sess: &Session,\n               crate_name: &str,\n               crate_disambiguator: &str)\n               -> PathBuf {\n-    use std::hash::{SipHasher, Hasher, Hash};\n+    use std::hash::{Hasher, Hash};\n+    use std::collections::hash_map::DefaultHasher;\n \n     let incr_dir = sess.opts.incremental.as_ref().unwrap().clone();\n \n     // The full crate disambiguator is really long. A hash of it should be\n     // sufficient.\n-    let mut hasher = SipHasher::new();\n+    let mut hasher = DefaultHasher::new();\n     crate_disambiguator.hash(&mut hasher);\n \n     let crate_name = format!(\"{}-{}\", crate_name, encode_base_36(hasher.finish()));"}, {"sha": "bc542b71ac670c76d49d16ee85d5587b4c788f15", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -16,10 +16,11 @@ use rustc::ty::TyCtxt;\n use rustc_data_structures::fnv::FnvHashMap;\n use rustc_serialize::Encodable as RustcEncodable;\n use rustc_serialize::opaque::Encoder;\n-use std::hash::{Hash, Hasher, SipHasher};\n+use std::hash::{Hash, Hasher};\n use std::io::{self, Cursor, Write};\n use std::fs::{self, File};\n use std::path::PathBuf;\n+use std::collections::hash_map::DefaultHasher;\n \n use IncrementalHashesMap;\n use super::data::*;\n@@ -241,7 +242,7 @@ pub fn encode_metadata_hashes(tcx: TyCtxt,\n             .collect();\n \n         hashes.sort();\n-        let mut state = SipHasher::new();\n+        let mut state = DefaultHasher::new();\n         hashes.hash(&mut state);\n         let hash = state.finish();\n "}, {"sha": "0869ad168bced3b61021a14bd700c38025077974", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -35,6 +35,7 @@ use rustc::session::Session;\n use rustc::ty::{self, TyCtxt, ImplOrTraitItem, ImplOrTraitItemContainer};\n \n use std::collections::HashSet;\n+use std::collections::hash_map::DefaultHasher;\n use std::hash::*;\n \n use syntax::ast::{self, NodeId, PatKind, Attribute, CRATE_NODE_ID};\n@@ -1064,7 +1065,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             None => return,\n             Some(data) => data,\n         };\n-        let mut hasher = SipHasher::new();\n+        let mut hasher = DefaultHasher::new();\n         data.callee_span.hash(&mut hasher);\n         let hash = hasher.finish();\n         let qualname = format!(\"{}::{}\", data.name, hash);"}, {"sha": "180ab5528030f4ac9d762d108fcb9911712e2bdc", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -127,8 +127,9 @@ use rustc::session::config::NUMBERED_CODEGEN_UNIT_MARKER;\n use rustc::ty::TyCtxt;\n use rustc::ty::item_path::characteristic_def_id_of_type;\n use std::cmp::Ordering;\n-use std::hash::{Hash, Hasher, SipHasher};\n+use std::hash::{Hash, Hasher};\n use std::sync::Arc;\n+use std::collections::hash_map::DefaultHasher;\n use symbol_map::SymbolMap;\n use syntax::ast::NodeId;\n use syntax::parse::token::{self, InternedString};\n@@ -188,7 +189,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n     }\n \n     pub fn compute_symbol_name_hash(&self, tcx: TyCtxt, symbol_map: &SymbolMap) -> u64 {\n-        let mut state = SipHasher::new();\n+        let mut state = DefaultHasher::new();\n         let all_items = self.items_in_deterministic_order(tcx, symbol_map);\n         for (item, _) in all_items {\n             let symbol_name = symbol_map.get(item).unwrap();"}, {"sha": "5708c65cdb7ad73f585716b6b9d2ba2da4e5d90a", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -14,6 +14,7 @@ use self::VacantEntryState::*;\n use borrow::Borrow;\n use cmp::max;\n use fmt::{self, Debug};\n+#[allow(deprecated)]\n use hash::{Hash, Hasher, BuildHasher, SipHasher13};\n use iter::{FromIterator, FusedIterator};\n use mem::{self, replace};\n@@ -2018,6 +2019,7 @@ impl RandomState {\n impl BuildHasher for RandomState {\n     type Hasher = DefaultHasher;\n     #[inline]\n+    #[allow(deprecated)]\n     fn build_hasher(&self) -> DefaultHasher {\n         DefaultHasher(SipHasher13::new_with_keys(self.k0, self.k1))\n     }\n@@ -2030,10 +2032,32 @@ impl BuildHasher for RandomState {\n ///\n /// [`RandomState`]: struct.RandomState.html\n /// [`Hasher`]: ../../hash/trait.Hasher.html\n-#[unstable(feature = \"hashmap_default_hasher\", issue = \"0\")]\n+#[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n+#[allow(deprecated)]\n+#[derive(Debug)]\n pub struct DefaultHasher(SipHasher13);\n \n-#[unstable(feature = \"hashmap_default_hasher\", issue = \"0\")]\n+impl DefaultHasher {\n+    /// Creates a new `DefaultHasher`.\n+    ///\n+    /// This hasher is not guaranteed to be the same as all other\n+    /// `DefaultHasher` instances, but is the same as all other `DefaultHasher`\n+    /// instances created through `new` or `default`.\n+    #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n+    #[allow(deprecated)]\n+    pub fn new() -> DefaultHasher {\n+        DefaultHasher(SipHasher13::new_with_keys(0, 0))\n+    }\n+}\n+\n+#[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n+impl Default for DefaultHasher {\n+    fn default() -> DefaultHasher {\n+        DefaultHasher::new()\n+    }\n+}\n+\n+#[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n impl Hasher for DefaultHasher {\n     #[inline]\n     fn write(&mut self, msg: &[u8]) {"}, {"sha": "87092b1abc92a90536adba3977dc58772b2ceb4d", "filename": "src/libstd/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -288,15 +288,15 @@ impl Error for fmt::Error {\n     }\n }\n \n-#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n-impl<'a, T: ?Sized + Reflect> Error for cell::BorrowError<'a, T> {\n+#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+impl Error for cell::BorrowError {\n     fn description(&self) -> &str {\n         \"already mutably borrowed\"\n     }\n }\n \n-#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n-impl<'a, T: ?Sized + Reflect> Error for cell::BorrowMutError<'a, T> {\n+#[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+impl Error for cell::BorrowMutError {\n     fn description(&self) -> &str {\n         \"already borrowed\"\n     }"}, {"sha": "3ad5b5627d319700f26ee91251b25bd4a280e7f9", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -726,7 +726,8 @@ mod tests {\n     use super::*;\n     use os::raw::c_char;\n     use borrow::Cow::{Borrowed, Owned};\n-    use hash::{SipHasher, Hash, Hasher};\n+    use hash::{Hash, Hasher};\n+    use collections::hash_map::DefaultHasher;\n \n     #[test]\n     fn c_to_rust() {\n@@ -808,10 +809,10 @@ mod tests {\n         let ptr = data.as_ptr() as *const c_char;\n         let cstr: &'static CStr = unsafe { CStr::from_ptr(ptr) };\n \n-        let mut s = SipHasher::new_with_keys(0, 0);\n+        let mut s = DefaultHasher::new();\n         cstr.hash(&mut s);\n         let cstr_hash = s.finish();\n-        let mut s = SipHasher::new_with_keys(0, 0);\n+        let mut s = DefaultHasher::new();\n         CString::new(&data[..data.len() - 1]).unwrap().hash(&mut s);\n         let cstring_hash = s.finish();\n "}, {"sha": "eee85798841254c06ea1d415528ff2b66b76f512", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -273,7 +273,6 @@\n #![feature(str_utf16)]\n #![feature(test, rustc_private)]\n #![feature(thread_local)]\n-#![feature(try_borrow)]\n #![feature(try_from)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]"}, {"sha": "d6a5dfe5518003bf14630d28cbbf08a7cc21a2b6", "filename": "src/libstd/path.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -3387,10 +3387,11 @@ mod tests {\n \n     #[test]\n     pub fn test_compare() {\n-        use hash::{Hash, Hasher, SipHasher};\n+        use hash::{Hash, Hasher};\n+        use collections::hash_map::DefaultHasher;\n \n         fn hash<T: Hash>(t: T) -> u64 {\n-            let mut s = SipHasher::new_with_keys(0, 0);\n+            let mut s = DefaultHasher::new();\n             t.hash(&mut s);\n             s.finish()\n         }"}, {"sha": "354cce691270a0751067903df053591b031c0437", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26aeca77bcf334747eddb630e3b9475149b7f5/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=7a26aeca77bcf334747eddb630e3b9475149b7f5", "patch": "@@ -24,7 +24,7 @@ struct Test {\n const TEST_REPOS: &'static [Test] = &[Test {\n                                           name: \"cargo\",\n                                           repo: \"https://github.com/rust-lang/cargo\",\n-                                          sha: \"2d85908217f99a30aa5f68e05a8980704bb71fad\",\n+                                          sha: \"d8936af1390ab0844e5e68b459214f2529c9f647\",\n                                           lock: None,\n                                       },\n                                       Test {"}]}