{"sha": "7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMDg2NzhiNzQwZDc3OWQ5ZjBlMWU2ZDE1ZDdjZjZhZDRlMWI1N2E=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-22T12:38:48Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-22T15:49:31Z"}, "message": "Implement pattern guards\n\nThe syntax is\n\n    alt x {\n        mypat where mycond { ... }\n    }\n\nThe condition may refer to any of the variables bound by the pattern.\nWhen a guard fails, pattern-matching continues with the next pattern.\n\nCloses #857", "tree": {"sha": "71a73aa6e74449cab2048957f79a5ca05138e22b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71a73aa6e74449cab2048957f79a5ca05138e22b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a", "html_url": "https://github.com/rust-lang/rust/commit/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2466233b4217cc8da4d2ebcd5f7c0b11db5b861", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2466233b4217cc8da4d2ebcd5f7c0b11db5b861", "html_url": "https://github.com/rust-lang/rust/commit/a2466233b4217cc8da4d2ebcd5f7c0b11db5b861"}], "stats": {"total": 125, "additions": 96, "deletions": 29}, "files": [{"sha": "9d99464c2b9099b90ab71ad1319c26bbf4adc4ff", "filename": "src/comp/middle/check_alt.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs?ref=7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a", "patch": "@@ -22,9 +22,11 @@ fn check_arms(tcx: &ty::ctxt, arms: &[arm]) {\n             let reachable = true;\n             let j = 0;\n             while j < i {\n-                for prev_pat: @pat in arms[j].pats {\n-                    if pattern_supersedes(tcx, prev_pat, arm_pat) {\n-                        reachable = false;\n+                if std::option::is_none(arms[j].guard) {\n+                    for prev_pat: @pat in arms[j].pats {\n+                        if pattern_supersedes(tcx, prev_pat, arm_pat) {\n+                            reachable = false;\n+                        }\n                     }\n                 }\n                 j += 1;"}, {"sha": "5d4cc64c079888dc66d4c0d161722cd2183c0f68", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 51, "deletions": 23, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a", "patch": "@@ -55,8 +55,19 @@ fn variant_opt(ccx: &@crate_ctxt, pat_id: ast::node_id) -> opt {\n }\n \n type bind_map = [{ident: ast::ident, val: ValueRef}];\n+fn assoc(key: str, list: &bind_map) -> option::t<ValueRef> {\n+    for elt: {ident: ast::ident, val: ValueRef} in list {\n+        if str::eq(elt.ident, key) { ret some(elt.val); }\n+    }\n+    ret none;\n+}\n+\n type match_branch =\n-    @{pats: [@ast::pat], body: BasicBlockRef, mutable bound: bind_map};\n+    @{pats: [@ast::pat],\n+      bound: bind_map,\n+      data: @{body: BasicBlockRef,\n+              guard: option::t<@ast::expr>,\n+              id_map: ast::pat_id_map}};\n type match = [match_branch];\n \n fn matches_always(p: &@ast::pat) -> bool {\n@@ -69,27 +80,24 @@ fn matches_always(p: &@ast::pat) -> bool {\n         };\n }\n \n-\n-fn bind_for_pat(p: &@ast::pat, br: &match_branch, val: ValueRef) {\n-    alt p.node {\n-      ast::pat_bind(name) { br.bound += [{ident: name, val: val}]; }\n-      _ { }\n-    }\n-}\n-\n type enter_pat = fn(&@ast::pat) -> option::t<[@ast::pat]>;\n \n fn enter_match(m: &match, col: uint, val: ValueRef, e: &enter_pat) -> match {\n     let result = [];\n     for br: match_branch in m {\n         alt e(br.pats[col]) {\n           some(sub) {\n-            let pats =\n-                vec::slice(br.pats, 0u, col) + sub +\n+            let pats = vec::slice(br.pats, 0u, col) + sub +\n                     vec::slice(br.pats, col + 1u, vec::len(br.pats));\n-            let new_br = @{pats: pats with *br};\n+            let new_br = @{pats: pats,\n+                           bound: alt br.pats[col].node {\n+                             ast::pat_bind(name) {\n+                               br.bound + [{ident: name, val: val}]\n+                             }\n+                             _ { br.bound }\n+                           }\n+                           with *br};\n             result += [new_br];\n-            bind_for_pat(br.pats[col], new_br, val);\n           }\n           none. { }\n         }\n@@ -282,8 +290,30 @@ fn compile_submatch(bcx: @block_ctxt, m: &match, vals: [ValueRef],\n                     f: &mk_fail, exits: &mutable [exit_node]) {\n     if vec::len(m) == 0u { bcx.build.Br(f()); ret; }\n     if vec::len(m[0].pats) == 0u {\n-        exits += [{bound: m[0].bound, from: bcx.llbb, to: m[0].body}];\n-        bcx.build.Br(m[0].body);\n+        let data = m[0].data;\n+        alt data.guard {\n+          some(e) {\n+            let guard_cx = new_scope_block_ctxt(bcx, \"guard\");\n+            let next_cx = new_sub_block_ctxt(bcx, \"next\");\n+            let else_cx = new_sub_block_ctxt(bcx, \"else\");\n+            bcx.build.Br(guard_cx.llbb);\n+            // Temporarily set bindings. They'll be rewritten to PHI nodes for\n+            // the actual arm block.\n+            for each @{key, val} in data.id_map.items() {\n+                bcx.fcx.lllocals.insert\n+                    (val, option::get(assoc(key, m[0].bound)));\n+            }\n+            let {bcx: guard_cx, val: guard_val} =\n+                trans::trans_expr(guard_cx, e);\n+            guard_cx.build.CondBr(guard_val, next_cx.llbb, else_cx.llbb);\n+            compile_submatch(else_cx, vec::slice(m, 1u, vec::len(m)),\n+                             vals, f, exits);\n+            bcx = next_cx;\n+          }\n+          _ {}\n+        }\n+        exits += [{bound: m[0].bound, from: bcx.llbb, to: data.body}];\n+        bcx.build.Br(data.body);\n         ret;\n     }\n \n@@ -433,13 +463,6 @@ fn compile_submatch(bcx: @block_ctxt, m: &match, vals: [ValueRef],\n // Returns false for unreachable blocks\n fn make_phi_bindings(bcx: &@block_ctxt, map: &[exit_node],\n                      ids: &ast::pat_id_map) -> bool {\n-    fn assoc(key: str, list: &bind_map) -> option::t<ValueRef> {\n-        for elt: {ident: ast::ident, val: ValueRef} in list {\n-            if str::eq(elt.ident, key) { ret some(elt.val); }\n-        }\n-        ret none;\n-    }\n-\n     let our_block = bcx.llbb as uint;\n     let success = true;\n     for each item: @{key: ast::ident, val: ast::node_id} in ids.items() {\n@@ -477,9 +500,14 @@ fn trans_alt(cx: &@block_ctxt, expr: &@ast::expr, arms: &[ast::arm],\n \n     for a: ast::arm in arms {\n         let body = new_scope_block_ctxt(cx, \"case_body\");\n+        let id_map = ast::pat_id_map(a.pats[0]);\n         bodies += [body];\n         for p: @ast::pat in a.pats {\n-            match += [@{pats: [p], body: body.llbb, mutable bound: []}];\n+            match += [@{pats: [p],\n+                        bound: [],\n+                        data: @{body: body.llbb,\n+                                guard: a.guard,\n+                                id_map: id_map}}];\n         }\n     }\n "}, {"sha": "9f03a31fbb88bf6c17dd9034bf783f80a6e79c35", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a", "patch": "@@ -2038,6 +2038,12 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr, unify: &unifier,\n         let result_ty = next_ty_var(fcx);\n         let arm_non_bot = false;\n         for arm: ast::arm in arms {\n+            alt arm.guard {\n+              some(e) {\n+                check_expr_with(fcx, e, ty::mk_bool(tcx));\n+              }\n+              none. {}\n+            }\n             if !check_block(fcx, arm.body) { arm_non_bot = true; }\n             let bty = block_ty(tcx, arm.body);\n             result_ty = demand::simple(fcx, arm.body.span, result_ty, bty);"}, {"sha": "2537aa95f3684da89b03954088428eb333573195", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a", "patch": "@@ -267,7 +267,7 @@ type decl = spanned<decl_>;\n \n tag decl_ { decl_local([@local]); decl_item(@item); }\n \n-type arm = {pats: [@pat], body: blk};\n+type arm = {pats: [@pat], guard: option::t<@expr>, body: blk};\n \n type field_ = {mut: mutability, ident: ident, expr: @expr};\n "}, {"sha": "a91b2f31814bef59823aa3e114654df20894af2f", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a", "patch": "@@ -269,7 +269,9 @@ fn noop_fold_stmt(s: &stmt_, fld: ast_fold) -> stmt_ {\n }\n \n fn noop_fold_arm(a: &arm, fld: ast_fold) -> arm {\n-    ret {pats: vec::map(fld.fold_pat, a.pats), body: fld.fold_block(a.body)};\n+    ret {pats: vec::map(fld.fold_pat, a.pats),\n+         guard: option::map(fld.fold_expr, a.guard),\n+         body: fld.fold_block(a.body)};\n }\n \n fn noop_fold_pat(p: &pat_, fld: ast_fold) -> pat_ {"}, {"sha": "b20c790501314392c9a561949dd65dc4691776db", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a", "patch": "@@ -1360,8 +1360,12 @@ fn parse_alt_expr(p: &parser) -> @ast::expr {\n     let arms: [ast::arm] = [];\n     while p.peek() != token::RBRACE {\n         let pats = parse_pats(p);\n+        let guard = none;\n+        if eat_word(p, \"when\") {\n+            guard = some(parse_expr(p));\n+        }\n         let blk = parse_block(p);\n-        arms += [{pats: pats, body: blk}];\n+        arms += [{pats: pats, guard: guard, body: blk}];\n     }\n     let hi = p.get_hi_pos();\n     p.bump();"}, {"sha": "8ecbfd58405cfb9625d88dc99cc8458abe0cecf5", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a", "patch": "@@ -905,6 +905,14 @@ fn print_expr(s: &ps, expr: &@ast::expr) {\n                 print_pat(s, p);\n             }\n             space(s.s);\n+            alt arm.guard {\n+              some(e) {\n+                word_space(s, \"when\");\n+                print_expr(s, e);\n+                space(s.s);\n+              }\n+              none. {}\n+            }\n             print_possibly_embedded_block(s, arm.body, block_normal,\n                                           alt_indent_unit);\n         }"}, {"sha": "d69104a7010797d2a8cf41cf54f7078fddf3b495", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a", "patch": "@@ -332,6 +332,7 @@ fn visit_expr<E>(ex: &@expr, e: &E, v: &vt<E>) {\n \n fn visit_arm<E>(a: &arm, e: &E, v: &vt<E>) {\n     for p: @pat in a.pats { v.visit_pat(p, e, v); }\n+    visit_expr_opt(a.guard, e, v);\n     v.visit_block(a.body, e, v);\n }\n "}, {"sha": "49e7fd3b7fedb09e2712a886ac5ed6b2648c8613", "filename": "src/test/run-pass/guards.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Ftest%2Frun-pass%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a/src%2Ftest%2Frun-pass%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards.rs?ref=7d08678b740d779d9f0e1e6d15d7cf6ad4e1b57a", "patch": "@@ -0,0 +1,16 @@\n+fn main() {\n+    let a = alt 10 {\n+      x when x < 7 { 1 }\n+      x when x < 11 { 2 }\n+      10 { 3 }\n+      _ { 4 }\n+    };\n+    assert a == 2;\n+\n+    let b = alt {x: 10, y: 20} {\n+        x when x.x < 5 && x.y < 5 { 1 }\n+        {x, y} when x == 10 && y == 20 { 2 }\n+        {x, y} { 3 }\n+    };\n+    assert b == 2;\n+}"}]}