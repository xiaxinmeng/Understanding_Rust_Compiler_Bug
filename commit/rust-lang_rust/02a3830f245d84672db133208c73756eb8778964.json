{"sha": "02a3830f245d84672db133208c73756eb8778964", "node_id": "C_kwDOAAsO6NoAKDAyYTM4MzBmMjQ1ZDg0NjcyZGIxMzMyMDhjNzM3NTZlYjg3Nzg5NjQ", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-16T02:05:58Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-08T00:18:23Z"}, "message": "When encountering a match expr with no arms, suggest it\n\nGiven\n\n```rust\nmatch Some(42) {}\n```\n\nsuggest\n\n```rust\nmatch Some(42) { None | Some(_) => todo!(), }\n```", "tree": {"sha": "4032149875f227dc8d895d575edd51ded7b79be4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4032149875f227dc8d895d575edd51ded7b79be4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02a3830f245d84672db133208c73756eb8778964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02a3830f245d84672db133208c73756eb8778964", "html_url": "https://github.com/rust-lang/rust/commit/02a3830f245d84672db133208c73756eb8778964", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02a3830f245d84672db133208c73756eb8778964/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03918badd33d255de806b4a9a8aa75b031ed0738", "url": "https://api.github.com/repos/rust-lang/rust/commits/03918badd33d255de806b4a9a8aa75b031ed0738", "html_url": "https://github.com/rust-lang/rust/commit/03918badd33d255de806b4a9a8aa75b031ed0738"}], "stats": {"total": 803, "additions": 525, "deletions": 278}, "files": [{"sha": "cb057e428c4c15bf39bb413269bea37a165bc9f2", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -64,7 +64,9 @@ impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, '_, 'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {\n         intravisit::walk_expr(self, ex);\n         match &ex.kind {\n-            hir::ExprKind::Match(scrut, arms, source) => self.check_match(scrut, arms, *source),\n+            hir::ExprKind::Match(scrut, arms, source) => {\n+                self.check_match(scrut, arms, *source, ex.span)\n+            }\n             hir::ExprKind::Let(hir::Let { pat, init, span, .. }) => {\n                 self.check_let(pat, init, *span)\n             }\n@@ -163,6 +165,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n         scrut: &hir::Expr<'_>,\n         hir_arms: &'tcx [hir::Arm<'tcx>],\n         source: hir::MatchSource,\n+        expr_span: Span,\n     ) {\n         let mut cx = self.new_cx(scrut.hir_id);\n \n@@ -208,15 +211,14 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n         }\n \n         // Check if the match is exhaustive.\n-        let is_empty_match = arms.is_empty();\n         let witnesses = report.non_exhaustiveness_witnesses;\n         if !witnesses.is_empty() {\n             if source == hir::MatchSource::ForLoopDesugar && hir_arms.len() == 2 {\n                 // the for loop pattern is not irrefutable\n                 let pat = hir_arms[1].pat.for_loop_some().unwrap();\n                 self.check_irrefutable(pat, \"`for` loop binding\", None);\n             } else {\n-                non_exhaustive_match(&cx, scrut_ty, scrut.span, witnesses, is_empty_match);\n+                non_exhaustive_match(&cx, scrut_ty, scrut.span, witnesses, hir_arms, expr_span);\n             }\n         }\n     }\n@@ -494,21 +496,25 @@ fn non_exhaustive_match<'p, 'tcx>(\n     scrut_ty: Ty<'tcx>,\n     sp: Span,\n     witnesses: Vec<DeconstructedPat<'p, 'tcx>>,\n-    is_empty_match: bool,\n+    arms: &[hir::Arm<'tcx>],\n+    expr_span: Span,\n ) {\n+    let is_empty_match = arms.is_empty();\n     let non_empty_enum = match scrut_ty.kind() {\n         ty::Adt(def, _) => def.is_enum() && !def.variants.is_empty(),\n         _ => false,\n     };\n     // In the case of an empty match, replace the '`_` not covered' diagnostic with something more\n     // informative.\n     let mut err;\n+    let pattern;\n     if is_empty_match && !non_empty_enum {\n         err = create_e0004(\n             cx.tcx.sess,\n             sp,\n             format!(\"non-exhaustive patterns: type `{}` is non-empty\", scrut_ty),\n         );\n+        pattern = \"_\".to_string();\n     } else {\n         let joined_patterns = joined_uncovered_patterns(cx, &witnesses);\n         err = create_e0004(\n@@ -517,6 +523,15 @@ fn non_exhaustive_match<'p, 'tcx>(\n             format!(\"non-exhaustive patterns: {} not covered\", joined_patterns),\n         );\n         err.span_label(sp, pattern_not_covered_label(&witnesses, &joined_patterns));\n+        pattern = if witnesses.len() < 4 {\n+            witnesses\n+                .iter()\n+                .map(|witness| witness.to_pat(cx).to_string())\n+                .collect::<Vec<String>>()\n+                .join(\" | \")\n+        } else {\n+            \"_\".to_string()\n+        };\n     };\n \n     let is_variant_list_non_exhaustive = match scrut_ty.kind() {\n@@ -525,10 +540,6 @@ fn non_exhaustive_match<'p, 'tcx>(\n     };\n \n     adt_defined_here(cx, &mut err, scrut_ty, &witnesses);\n-    err.help(\n-        \"ensure that all possible cases are being handled, \\\n-              possibly by adding wildcards or more match arms\",\n-    );\n     err.note(&format!(\n         \"the matched value is of type `{}`{}\",\n         scrut_ty,\n@@ -540,14 +551,14 @@ fn non_exhaustive_match<'p, 'tcx>(\n         && matches!(witnesses[0].ctor(), Constructor::NonExhaustive)\n     {\n         err.note(&format!(\n-            \"`{}` does not have a fixed maximum value, \\\n-                so a wildcard `_` is necessary to match exhaustively\",\n+            \"`{}` does not have a fixed maximum value, so a wildcard `_` is necessary to match \\\n+             exhaustively\",\n             scrut_ty,\n         ));\n         if cx.tcx.sess.is_nightly_build() {\n             err.help(&format!(\n-                \"add `#![feature(precise_pointer_size_matching)]` \\\n-                    to the crate attributes to enable precise `{}` matching\",\n+                \"add `#![feature(precise_pointer_size_matching)]` to the crate attributes to \\\n+                 enable precise `{}` matching\",\n                 scrut_ty,\n             ));\n         }\n@@ -557,6 +568,37 @@ fn non_exhaustive_match<'p, 'tcx>(\n             err.note(\"references are always considered inhabited\");\n         }\n     }\n+\n+    let mut suggestion = None;\n+    let sm = cx.tcx.sess.source_map();\n+    match arms {\n+        [] if sp.ctxt() == expr_span.ctxt() => {\n+            // Get the span for the empty match body `{}`.\n+            let (indentation, more) = if let Some(snippet) = sm.indentation_before(sp) {\n+                (format!(\"\\n{}\", snippet), \"    \")\n+            } else {\n+                (\" \".to_string(), \"\")\n+            };\n+            suggestion = Some((\n+                sp.shrink_to_hi().with_hi(expr_span.hi()),\n+                format!(\n+                    \" {{{indentation}{more}{pattern} => todo!(),{indentation}}}\",\n+                    indentation = indentation,\n+                    more = more,\n+                    pattern = pattern,\n+                ),\n+            ));\n+        }\n+        _ => {}\n+    }\n+\n+    let msg = \"ensure that all possible cases are being handled, possibly by adding wildcards \\\n+        or more match arms\";\n+    if let Some((span, sugg)) = suggestion {\n+        err.span_suggestion_verbose(span, msg, sugg, Applicability::HasPlaceholders);\n+    } else {\n+        err.help(msg);\n+    }\n     err.emit();\n }\n "}, {"sha": "feb371d4ed692fb6bb1613396dba0230de88f5c2", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-88331.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -7,8 +7,8 @@ LL | pub struct Opcode(pub u8);\n LL |     move |i| match msg_type {\n    |                    ^^^^^^^^ patterns `Opcode(0_u8)` and `Opcode(2_u8..=u8::MAX)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Opcode`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Opcode2(Opcode(0_u8))` and `Opcode2(Opcode(2_u8..=u8::MAX))` not covered\n   --> $DIR/issue-88331.rs:27:20\n@@ -19,8 +19,8 @@ LL | pub struct Opcode2(Opcode);\n LL |     move |i| match msg_type {\n    |                    ^^^^^^^^ patterns `Opcode2(Opcode(0_u8))` and `Opcode2(Opcode(2_u8..=u8::MAX))` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Opcode2`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7d21dfe1aad64df1c379040cfa5415769655888d", "filename": "src/test/ui/closures/2229_closure_analysis/match/non-exhaustive-match.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -10,26 +10,31 @@ LL | enum L1 { A, B }\n LL |     let _b = || { match l1 { L1::A => () } };\n    |                         ^^ pattern `B` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `L1`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `E1` is non-empty\n   --> $DIR/non-exhaustive-match.rs:37:25\n    |\n LL |     let _d = || { match e1 {} };\n    |                         ^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `E1`, which is marked as non-exhaustive\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     let _d = || { match e1 {\n+LL +         _ => todo!(),\n+LL ~     } };\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/non-exhaustive-match.rs:39:25\n    |\n LL |     let _e = || { match e2 { E2::A => (), E2::B => () } };\n    |                         ^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `E2`, which is marked as non-exhaustive\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0505]: cannot move out of `e3` because it is borrowed\n   --> $DIR/non-exhaustive-match.rs:46:22"}, {"sha": "44b3c559e5e5d230a6009b6096b4d5b360a1681d", "filename": "src/test/ui/closures/2229_closure_analysis/match/pattern-matching-should-fail.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,13 @@ error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n LL |     let c1 = || match x { };\n    |                       ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     let c1 = || match x {\n+LL +         _ => todo!(),\n+LL ~     };\n+   |\n \n error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/pattern-matching-should-fail.rs:8:23"}, {"sha": "755f4d96e99cd86db3e7139d144cb785f874d016", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -12,8 +12,13 @@ LL |     None,\n LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     ---- not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Option<i32>`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         None | Some(_) => todo!(),\n+LL ~     }\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "96f80aeb40c1582a0386e3c2d516d779531ae577", "filename": "src/test/ui/error-codes/E0004.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -11,8 +11,8 @@ LL | | }\n LL |       match x {\n    |             ^ pattern `HastaLaVistaBaby` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Terminator`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "560e8f3460b88f07412964a5fe8323d13b8ecdb2", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,21 +4,21 @@ error[E0004]: non-exhaustive patterns: `_` not covered\n LL |     match 0usize {\n    |           ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/feature-gate-precise_pointer_size_matching.rs:10:11\n    |\n LL |     match 0isize {\n    |           ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1edd63c116fca2e531ebe4af8deaca0c607497ed", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.stderr", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,611 +4,611 @@ error[E0004]: non-exhaustive patterns: `_` not covered\n LL |     m!(0f32, f32::NEG_INFINITY..);\n    |        ^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `f32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:17:8\n    |\n LL |     m!(0f32, ..f32::INFINITY);\n    |        ^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `f32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `'\\u{10ffff}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:26:8\n    |\n LL |     m!('a', ..core::char::MAX);\n    |        ^^^ pattern `'\\u{10ffff}'` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `char`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `'\\u{10fffe}'..='\\u{10ffff}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:27:8\n    |\n LL |     m!('a', ..ALMOST_MAX);\n    |        ^^^ pattern `'\\u{10fffe}'..='\\u{10ffff}'` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `char`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `'\\u{0}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:28:8\n    |\n LL |     m!('a', ALMOST_MIN..);\n    |        ^^^ pattern `'\\u{0}'` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `char`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `'\\u{10ffff}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:29:8\n    |\n LL |     m!('a', ..=ALMOST_MAX);\n    |        ^^^ pattern `'\\u{10ffff}'` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `char`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `'b'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:30:8\n    |\n LL |     m!('a', ..=VAL | VAL_2..);\n    |        ^^^ pattern `'b'` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `char`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `'b'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:31:8\n    |\n LL |     m!('a', ..VAL_1 | VAL_2..);\n    |        ^^^ pattern `'b'` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `char`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:41:12\n    |\n LL |         m!(0, ..u8::MAX);\n    |            ^ pattern `u8::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `254_u8..=u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:42:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `254_u8..=u8::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0_u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:43:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u8` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:44:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u8::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:45:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u8` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:46:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u8` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:54:12\n    |\n LL |         m!(0, ..u16::MAX);\n    |            ^ pattern `u16::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u16`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `65534_u16..=u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:55:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `65534_u16..=u16::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u16`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0_u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:56:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u16` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u16`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:57:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u16::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u16`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:58:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u16` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u16`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:59:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u16` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u16`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:67:12\n    |\n LL |         m!(0, ..u32::MAX);\n    |            ^ pattern `u32::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `4294967294_u32..=u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:68:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `4294967294_u32..=u32::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0_u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:69:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u32` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:70:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u32::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:71:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u32` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:72:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u32` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:80:12\n    |\n LL |         m!(0, ..u64::MAX);\n    |            ^ pattern `u64::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u64`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `18446744073709551614_u64..=u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:81:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `18446744073709551614_u64..=u64::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u64`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0_u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:82:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u64` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u64`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:83:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u64::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u64`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:84:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u64` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u64`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:85:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u64` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u64`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:93:12\n    |\n LL |         m!(0, ..u128::MAX);\n    |            ^ pattern `u128::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211454_u128..=u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:94:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `340282366920938463463374607431768211454_u128..=u128::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0_u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:95:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u128` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:96:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u128::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:97:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u128` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:98:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u128` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:109:12\n    |\n LL |         m!(0, ..i8::MAX);\n    |            ^ pattern `i8::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `126_i8..=i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:110:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `126_i8..=i8::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i8::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:111:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i8::MIN` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:112:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i8::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_i8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:113:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i8` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_i8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:114:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i8` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:122:12\n    |\n LL |         m!(0, ..i16::MAX);\n    |            ^ pattern `i16::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i16`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `32766_i16..=i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:123:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `32766_i16..=i16::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i16`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i16::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:124:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i16::MIN` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i16`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:125:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i16::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i16`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_i16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:126:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i16` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i16`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_i16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:127:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i16` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i16`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:135:12\n    |\n LL |         m!(0, ..i32::MAX);\n    |            ^ pattern `i32::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `2147483646_i32..=i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:136:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `2147483646_i32..=i32::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i32::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:137:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i32::MIN` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:138:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i32::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_i32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:139:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i32` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_i32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:140:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i32` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:148:12\n    |\n LL |         m!(0, ..i64::MAX);\n    |            ^ pattern `i64::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i64`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `9223372036854775806_i64..=i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:149:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `9223372036854775806_i64..=i64::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i64`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i64::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:150:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i64::MIN` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i64`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:151:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i64::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i64`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_i64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:152:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i64` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i64`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_i64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:153:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i64` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i64`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:161:12\n    |\n LL |         m!(0, ..i128::MAX);\n    |            ^ pattern `i128::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `170141183460469231731687303715884105726_i128..=i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:162:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `170141183460469231731687303715884105726_i128..=i128::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i128::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:163:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i128::MIN` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:164:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i128::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_i128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:165:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i128` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `43_i128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:166:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i128` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 68 previous errors\n "}, {"sha": "3ae922fb9da25b713422aa0221c3b0f8078a5c49", "filename": "src/test/ui/match/match_non_exhaustive.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -10,26 +10,31 @@ LL | enum L { A, B }\n LL |     match l { L::A => () };\n    |           ^ pattern `B` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `L`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `E1` is non-empty\n   --> $DIR/match_non_exhaustive.rs:28:11\n    |\n LL |     match e1 {};\n    |           ^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `E1`, which is marked as non-exhaustive\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match e1 {\n+LL +         _ => todo!(),\n+LL ~     };\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/match_non_exhaustive.rs:30:11\n    |\n LL |     match e2 { E2::A => (), E2::B => () };\n    |           ^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `E2`, which is marked as non-exhaustive\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3e9180b0e6e3a447def3bcb6bda7ad0fbdea3cf6", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,26 +4,26 @@ error[E0004]: non-exhaustive patterns: `(2_u8..=u8::MAX, _)` not covered\n LL |     match (0u8, 0u8) {\n    |           ^^^^^^^^^^ pattern `(2_u8..=u8::MAX, _)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(u8, u8)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((4_u8..=u8::MAX))` not covered\n   --> $DIR/exhaustiveness-non-exhaustive.rs:9:11\n    |\n LL |     match ((0u8,),) {\n    |           ^^^^^^^^^ pattern `((4_u8..=u8::MAX))` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `((u8,),)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(Some(2_u8..=u8::MAX))` not covered\n   --> $DIR/exhaustiveness-non-exhaustive.rs:13:11\n    |\n LL |     match (Some(0u8),) {\n    |           ^^^^^^^^^^^^ pattern `(Some(2_u8..=u8::MAX))` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(Option<u8>,)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0d03b0e8277b0574ae8d3b646fe97c99a776e583", "filename": "src/test/ui/or-patterns/issue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -18,8 +18,8 @@ error[E0004]: non-exhaustive patterns: `i32::MIN..=-1_i32` and `3_i32..=i32::MAX\n LL |     match 0 {\n    |           ^ patterns `i32::MIN..=-1_i32` and `3_i32..=i32::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c7d018f9d3bd66d9d506d62daba070bef24cc26c", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,9 +4,14 @@ error[E0004]: non-exhaustive patterns: type `&!` is non-empty\n LL |     match uninhab_ref() {\n    |           ^^^^^^^^^^^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&!`\n    = note: references are always considered inhabited\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match uninhab_ref() {\n+LL +         _ => todo!(),\n+LL +     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `Foo` is non-empty\n   --> $DIR/always-inhabited-union-ref.rs:27:11\n@@ -19,8 +24,13 @@ LL | | }\n LL |       match uninhab_union() {\n    |             ^^^^^^^^^^^^^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match uninhab_union() {\n+LL +         _ => todo!(),\n+LL +     }\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2acaf3401b6ad8eb21ae2cb3c2355c1dda060358", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,8 @@ error[E0004]: non-exhaustive patterns: `_` not covered\n LL |     match Foo::A {\n    |           ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `B` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:14:11\n@@ -18,8 +18,8 @@ LL |     match Foo::A {\n LL |     B,\n    |     - not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `B` and `_` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:20:11\n@@ -32,8 +32,8 @@ LL |     match Foo::A {\n LL |     B,\n    |     - not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Some(B)` and `Some(_)` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:25:11\n@@ -46,8 +46,8 @@ LL |     match None {\n LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     ---- not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Option<Foo>`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 4 previous errors\n "}, {"sha": "59e126d89374017b2ecab7b42ecc3cfcc3c855bc", "filename": "src/test/ui/pattern/usefulness/empty-match.exhaustive_patterns.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -46,8 +46,8 @@ error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n LL |     match_no_arms!(0u8);\n    |                    ^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct1` is non-empty\n   --> $DIR/empty-match.rs:79:20\n@@ -58,8 +58,8 @@ LL | struct NonEmptyStruct1;\n LL |     match_no_arms!(NonEmptyStruct1);\n    |                    ^^^^^^^^^^^^^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyStruct1`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct2` is non-empty\n   --> $DIR/empty-match.rs:80:20\n@@ -70,8 +70,8 @@ LL | struct NonEmptyStruct2(bool);\n LL |     match_no_arms!(NonEmptyStruct2(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyStruct2`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n   --> $DIR/empty-match.rs:81:20\n@@ -84,8 +84,8 @@ LL | | }\n LL |       match_no_arms!((NonEmptyUnion1 { foo: () }));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyUnion1`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n   --> $DIR/empty-match.rs:82:20\n@@ -99,8 +99,8 @@ LL | | }\n LL |       match_no_arms!((NonEmptyUnion2 { foo: () }));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyUnion2`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/empty-match.rs:83:20\n@@ -114,8 +114,8 @@ LL | | }\n LL |       match_no_arms!(NonEmptyEnum1::Foo(true));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum1`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/empty-match.rs:84:20\n@@ -131,8 +131,8 @@ LL | | }\n LL |       match_no_arms!(NonEmptyEnum2::Foo(true));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum2`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/empty-match.rs:85:20\n@@ -145,17 +145,17 @@ LL | | }\n LL |       match_no_arms!(NonEmptyEnum5::V1);\n    |                      ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum5`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/empty-match.rs:87:24\n    |\n LL |     match_guarded_arm!(0u8);\n    |                        ^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct1` not covered\n   --> $DIR/empty-match.rs:88:24\n@@ -166,8 +166,8 @@ LL | struct NonEmptyStruct1;\n LL |     match_guarded_arm!(NonEmptyStruct1);\n    |                        ^^^^^^^^^^^^^^^ pattern `NonEmptyStruct1` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyStruct1`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct2(_)` not covered\n   --> $DIR/empty-match.rs:89:24\n@@ -178,8 +178,8 @@ LL | struct NonEmptyStruct2(bool);\n LL |     match_guarded_arm!(NonEmptyStruct2(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct2(_)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyStruct2`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n   --> $DIR/empty-match.rs:90:24\n@@ -192,8 +192,8 @@ LL | | }\n LL |       match_guarded_arm!((NonEmptyUnion1 { foo: () }));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyUnion1`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n   --> $DIR/empty-match.rs:91:24\n@@ -207,8 +207,8 @@ LL | | }\n LL |       match_guarded_arm!((NonEmptyUnion2 { foo: () }));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyUnion2`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/empty-match.rs:92:24\n@@ -222,8 +222,8 @@ LL | | }\n LL |       match_guarded_arm!(NonEmptyEnum1::Foo(true));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum1`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/empty-match.rs:93:24\n@@ -239,8 +239,8 @@ LL | | }\n LL |       match_guarded_arm!(NonEmptyEnum2::Foo(true));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum2`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/empty-match.rs:94:24\n@@ -253,8 +253,8 @@ LL | | }\n LL |       match_guarded_arm!(NonEmptyEnum5::V1);\n    |                          ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum5`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 22 previous errors\n "}, {"sha": "59e126d89374017b2ecab7b42ecc3cfcc3c855bc", "filename": "src/test/ui/pattern/usefulness/empty-match.normal.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -46,8 +46,8 @@ error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n LL |     match_no_arms!(0u8);\n    |                    ^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct1` is non-empty\n   --> $DIR/empty-match.rs:79:20\n@@ -58,8 +58,8 @@ LL | struct NonEmptyStruct1;\n LL |     match_no_arms!(NonEmptyStruct1);\n    |                    ^^^^^^^^^^^^^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyStruct1`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct2` is non-empty\n   --> $DIR/empty-match.rs:80:20\n@@ -70,8 +70,8 @@ LL | struct NonEmptyStruct2(bool);\n LL |     match_no_arms!(NonEmptyStruct2(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyStruct2`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n   --> $DIR/empty-match.rs:81:20\n@@ -84,8 +84,8 @@ LL | | }\n LL |       match_no_arms!((NonEmptyUnion1 { foo: () }));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyUnion1`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n   --> $DIR/empty-match.rs:82:20\n@@ -99,8 +99,8 @@ LL | | }\n LL |       match_no_arms!((NonEmptyUnion2 { foo: () }));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyUnion2`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/empty-match.rs:83:20\n@@ -114,8 +114,8 @@ LL | | }\n LL |       match_no_arms!(NonEmptyEnum1::Foo(true));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum1`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/empty-match.rs:84:20\n@@ -131,8 +131,8 @@ LL | | }\n LL |       match_no_arms!(NonEmptyEnum2::Foo(true));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum2`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/empty-match.rs:85:20\n@@ -145,17 +145,17 @@ LL | | }\n LL |       match_no_arms!(NonEmptyEnum5::V1);\n    |                      ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum5`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/empty-match.rs:87:24\n    |\n LL |     match_guarded_arm!(0u8);\n    |                        ^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct1` not covered\n   --> $DIR/empty-match.rs:88:24\n@@ -166,8 +166,8 @@ LL | struct NonEmptyStruct1;\n LL |     match_guarded_arm!(NonEmptyStruct1);\n    |                        ^^^^^^^^^^^^^^^ pattern `NonEmptyStruct1` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyStruct1`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct2(_)` not covered\n   --> $DIR/empty-match.rs:89:24\n@@ -178,8 +178,8 @@ LL | struct NonEmptyStruct2(bool);\n LL |     match_guarded_arm!(NonEmptyStruct2(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct2(_)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyStruct2`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n   --> $DIR/empty-match.rs:90:24\n@@ -192,8 +192,8 @@ LL | | }\n LL |       match_guarded_arm!((NonEmptyUnion1 { foo: () }));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyUnion1`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n   --> $DIR/empty-match.rs:91:24\n@@ -207,8 +207,8 @@ LL | | }\n LL |       match_guarded_arm!((NonEmptyUnion2 { foo: () }));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyUnion2`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/empty-match.rs:92:24\n@@ -222,8 +222,8 @@ LL | | }\n LL |       match_guarded_arm!(NonEmptyEnum1::Foo(true));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum1`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/empty-match.rs:93:24\n@@ -239,8 +239,8 @@ LL | | }\n LL |       match_guarded_arm!(NonEmptyEnum2::Foo(true));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum2`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/empty-match.rs:94:24\n@@ -253,8 +253,8 @@ LL | | }\n LL |       match_guarded_arm!(NonEmptyEnum5::V1);\n    |                          ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum5`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 22 previous errors\n "}, {"sha": "a2ffdf8220503c16250e9efa464aa02cbb35a986", "filename": "src/test/ui/pattern/usefulness/floats.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,8 @@ error[E0004]: non-exhaustive patterns: `_` not covered\n LL |     match 0.0 {\n    |           ^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `f64`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: unreachable pattern\n   --> $DIR/floats.rs:16:7"}, {"sha": "56707aad148e2a6f8bafaefa2838a9ef605e78e3", "filename": "src/test/ui/pattern/usefulness/guards.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,8 @@ error[E0004]: non-exhaustive patterns: `128_u8..=u8::MAX` not covered\n LL |     match 0u8 {\n    |           ^^^ pattern `128_u8..=u8::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "e1506c96f3ddee8d16e174726b45f51597dc24df", "filename": "src/test/ui/pattern/usefulness/integer-ranges/exhaustiveness.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,107 +4,107 @@ error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n LL |     m!(0u8, 0..255);\n    |        ^^^ pattern `u8::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n   --> $DIR/exhaustiveness.rs:48:8\n    |\n LL |     m!(0u8, 0..=254);\n    |        ^^^ pattern `u8::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0_u8` not covered\n   --> $DIR/exhaustiveness.rs:49:8\n    |\n LL |     m!(0u8, 1..=255);\n    |        ^^^ pattern `0_u8` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `42_u8` not covered\n   --> $DIR/exhaustiveness.rs:50:8\n    |\n LL |     m!(0u8, 0..42 | 43..=255);\n    |        ^^^ pattern `42_u8` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n   --> $DIR/exhaustiveness.rs:51:8\n    |\n LL |     m!(0i8, -128..127);\n    |        ^^^ pattern `i8::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n   --> $DIR/exhaustiveness.rs:52:8\n    |\n LL |     m!(0i8, -128..=126);\n    |        ^^^ pattern `i8::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `i8::MIN` not covered\n   --> $DIR/exhaustiveness.rs:53:8\n    |\n LL |     m!(0i8, -127..=127);\n    |        ^^^ pattern `i8::MIN` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0_i8` not covered\n   --> $DIR/exhaustiveness.rs:54:11\n    |\n LL |     match 0i8 {\n    |           ^^^ pattern `0_i8` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i8`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n   --> $DIR/exhaustiveness.rs:59:8\n    |\n LL |     m!(0u128, 0..=ALMOST_MAX);\n    |        ^^^^^ pattern `u128::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `5_u128..=u128::MAX` not covered\n   --> $DIR/exhaustiveness.rs:60:8\n    |\n LL |     m!(0u128, 0..=4);\n    |        ^^^^^ pattern `5_u128..=u128::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0_u128` not covered\n   --> $DIR/exhaustiveness.rs:61:8\n    |\n LL |     m!(0u128, 1..=u128::MAX);\n    |        ^^^^^ pattern `0_u128` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `u128`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(126_u8..=127_u8, false)` not covered\n   --> $DIR/exhaustiveness.rs:69:11\n    |\n LL |     match (0u8, true) {\n    |           ^^^^^^^^^^^ pattern `(126_u8..=127_u8, false)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(u8, bool)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 12 previous errors\n "}, {"sha": "23aed9d1cd66f38512eb1ccfd9b24f48b7ebc742", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int.allow.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.allow.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,13 @@ error[E0004]: non-exhaustive patterns: type `usize` is non-empty\n LL |     match 7usize {}\n    |           ^^^^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `usize`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match 7usize {\n+LL +         _ => todo!(),\n+LL +     }\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "0eac0d2a1b448230b51037e4706a9ab6eecef7c4", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,125 +4,130 @@ error[E0004]: non-exhaustive patterns: `_` not covered\n LL |     match 0usize {\n    |           ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:17:11\n    |\n LL |     match 0isize {\n    |           ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:22:8\n    |\n LL |     m!(0usize, 0..=usize::MAX);\n    |        ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:24:8\n    |\n LL |     m!(0usize, 0..5 | 5..=usize::MAX);\n    |        ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:26:8\n    |\n LL |     m!(0usize, 0..usize::MAX | usize::MAX);\n    |        ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(_, _)` not covered\n   --> $DIR/pointer-sized-int.rs:28:8\n    |\n LL |     m!((0usize, true), (0..5, true) | (5..=usize::MAX, true) | (0..=usize::MAX, false));\n    |        ^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(usize, bool)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:31:8\n    |\n LL |     m!(0isize, isize::MIN..=isize::MAX);\n    |        ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:33:8\n    |\n LL |     m!(0isize, isize::MIN..5 | 5..=isize::MAX);\n    |        ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:35:8\n    |\n LL |     m!(0isize, isize::MIN..isize::MAX | isize::MAX);\n    |        ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(_, _)` not covered\n   --> $DIR/pointer-sized-int.rs:37:8\n    |\n LL |     m!((0isize, true), (isize::MIN..5, true)\n    |        ^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(isize, bool)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:41:11\n    |\n LL |     match 0isize {\n    |           ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `usize` is non-empty\n   --> $DIR/pointer-sized-int.rs:48:11\n    |\n LL |     match 7usize {}\n    |           ^^^^^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `usize`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match 7usize {\n+LL +         _ => todo!(),\n+LL +     }\n+   |\n \n error: aborting due to 12 previous errors\n "}, {"sha": "21fc7cd29b158602aed09e986d05d14ecf70ce38", "filename": "src/test/ui/pattern/usefulness/integer-ranges/precise_pointer_matching-message.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,21 +4,21 @@ error[E0004]: non-exhaustive patterns: `_` not covered\n LL |     match 0usize {\n    |           ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/precise_pointer_matching-message.rs:11:11\n    |\n LL |     match 0isize {\n    |           ^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "94ef44f57a96cc0bdb0754074ecc074c6e712cf8", "filename": "src/test/ui/pattern/usefulness/issue-15129.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,8 @@ error[E0004]: non-exhaustive patterns: `(T1(()), V2(_))` and `(T2(()), V1(_))` n\n LL |     match (T::T1(()), V::V2(true)) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `(T1(()), V2(_))` and `(T2(()), V1(_))` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(T, V)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "44a0aee02f2f5bae4171eacfe95f2674a9d6a286", "filename": "src/test/ui/pattern/usefulness/issue-2111.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,8 @@ error[E0004]: non-exhaustive patterns: `(None, None)` and `(Some(_), Some(_))` n\n LL |     match (a, b) {\n    |           ^^^^^^ patterns `(None, None)` and `(Some(_), Some(_))` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(Option<usize>, Option<usize>)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "c289b68b4c3a4ac1ae4ac534af0f495b68463a3e", "filename": "src/test/ui/pattern/usefulness/issue-30240.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,17 +4,17 @@ error[E0004]: non-exhaustive patterns: `&_` not covered\n LL |     match \"world\" {\n    |           ^^^^^^^ pattern `&_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&str`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&_` not covered\n   --> $DIR/issue-30240.rs:6:11\n    |\n LL |     match \"world\" {\n    |           ^^^^^^^ pattern `&_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&str`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0d59b8db46715fd6ebddfb331f1d93078fea069f", "filename": "src/test/ui/pattern/usefulness/issue-3096-1.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-1.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,13 @@ error[E0004]: non-exhaustive patterns: type `()` is non-empty\n LL |     match () { }\n    |           ^^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `()`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match () {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e0a769bc027f4766d7d80a8f12225918bb2c5049", "filename": "src/test/ui/pattern/usefulness/issue-3096-2.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-2.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,13 @@ error[E0004]: non-exhaustive patterns: type `*const Bottom` is non-empty\n LL |     match x { }\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `*const Bottom`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "bea11157c632b5bd440aa097394b56577955cb95", "filename": "src/test/ui/pattern/usefulness/issue-35609.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,44 +4,44 @@ error[E0004]: non-exhaustive patterns: `(B, _)`, `(C, _)`, `(D, _)` and 2 more n\n LL |     match (A, ()) {\n    |           ^^^^^^^ patterns `(B, _)`, `(C, _)`, `(D, _)` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(Enum, ())`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:14:11\n    |\n LL |     match (A, A) {\n    |           ^^^^^^ patterns `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(Enum, Enum)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:18:11\n    |\n LL |     match ((A, ()), ()) {\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `((Enum, ()), ())`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:22:11\n    |\n LL |     match ((A, ()), A) {\n    |           ^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `((Enum, ()), Enum)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:26:11\n    |\n LL |     match ((A, ()), ()) {\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `((Enum, ()), ())`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:31:11\n@@ -52,8 +52,8 @@ LL | struct S(Enum, ());\n LL |     match S(A, ()) {\n    |           ^^^^^^^^ patterns `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `S`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n   --> $DIR/issue-35609.rs:35:11\n@@ -64,17 +64,17 @@ LL | struct Sd { x: Enum, y: () }\n LL |     match (Sd { x: A, y: () }) {\n    |           ^^^^^^^^^^^^^^^^^^^^ patterns `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Sd`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:39:11\n    |\n LL |     match Some(A) {\n    |           ^^^^^^^ patterns `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Option<Enum>`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 8 previous errors\n "}, {"sha": "7224270b613b2891077d0da0621d4bb70c9d1580", "filename": "src/test/ui/pattern/usefulness/issue-3601.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,8 @@ error[E0004]: non-exhaustive patterns: `box _` not covered\n LL |         box NodeKind::Element(ed) => match ed.kind {\n    |                                            ^^^^^^^ pattern `box _` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Box<ElementKind>`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "760760eb5d1de21fba0a24274a85d702a8e2f746", "filename": "src/test/ui/pattern/usefulness/issue-39362.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -9,8 +9,8 @@ LL | | }\n LL |       match f {\n    |             ^ patterns `Bar { bar: C, .. }`, `Bar { bar: D, .. }`, `Bar { bar: E, .. }` and 1 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "03d507b5af7c8da431caa6f0f9657f7fffa440e8", "filename": "src/test/ui/pattern/usefulness/issue-40221.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -10,8 +10,8 @@ LL | | }\n LL |       match proto {\n    |             ^^^^^ pattern `C(QA)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `P`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "b1e81f7ffd773cd2e2822b1f812b7ed8ecc0f36a", "filename": "src/test/ui/pattern/usefulness/issue-4321.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,8 @@ error[E0004]: non-exhaustive patterns: `(true, false)` not covered\n LL |     println!(\"foo {:}\", match tup {\n    |                               ^^^ pattern `(true, false)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(bool, bool)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "885e31df1e53038d327efac8666ddda99af6d8e4", "filename": "src/test/ui/pattern/usefulness/issue-50900.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -7,8 +7,8 @@ LL | pub struct Tag(pub Context, pub u16);\n LL |     match Tag::ExifIFDPointer {\n    |           ^^^^^^^^^^^^^^^^^^^ pattern `Tag(Exif, _)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Tag`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "e8c15035517d20855ee2f062675a5612edfda390", "filename": "src/test/ui/pattern/usefulness/issue-56379.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -14,8 +14,8 @@ LL | | }\n LL |       match Foo::A(true) {\n    |             ^^^^^^^^^^^^ patterns `A(false)`, `B(false)` and `C(false)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "fa996da1e6052d9d5959fe1985fe4a25b44529b4", "filename": "src/test/ui/pattern/usefulness/issue-72377.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,8 @@ error[E0004]: non-exhaustive patterns: `(A, Some(A))`, `(A, Some(B))`, `(B, Some\n LL |     match (x, y) {\n    |           ^^^^^^ patterns `(A, Some(A))`, `(A, Some(B))`, `(B, Some(B))` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(X, Option<X>)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "01e3d4df3317efb6f307f3cc2f4208a7a3466709", "filename": "src/test/ui/pattern/usefulness/issue-78123-non-exhaustive-reference.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-78123-non-exhaustive-reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-78123-non-exhaustive-reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-78123-non-exhaustive-reference.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -7,9 +7,14 @@ LL | enum A {}\n LL |     match a {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&A`\n    = note: references are always considered inhabited\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match a {\n+LL +         _ => todo!(),\n+LL +     }\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "d1bfdfab9d8f700d9fef9911c04527562bb2a48c", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,8 @@ error[E0004]: non-exhaustive patterns: `(true, false)` not covered\n LL |     match (true, false) {\n    |           ^^^^^^^^^^^^^ pattern `(true, false)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(bool, bool)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Some(Some(West))` not covered\n   --> $DIR/match-arm-statics-2.rs:29:11\n@@ -21,8 +21,8 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     not covered\n    |     not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Option<Option<Direction>>`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n   --> $DIR/match-arm-statics-2.rs:48:11\n@@ -36,8 +36,8 @@ LL | | }\n LL |       match (Foo { bar: Some(North), baz: NewBool(true) }) {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f89b41bb6d8b795e1b200a515d782f64f0d6f49d", "filename": "src/test/ui/pattern/usefulness/match-byte-array-patterns-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,17 +4,17 @@ error[E0004]: non-exhaustive patterns: `&[0_u8..=64_u8, _, _, _]` and `&[66_u8..\n LL |     match buf {\n    |           ^^^ patterns `&[0_u8..=64_u8, _, _, _]` and `&[66_u8..=u8::MAX, _, _, _]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[u8; 4]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[]`, `&[_]`, `&[_, _]` and 2 more not covered\n   --> $DIR/match-byte-array-patterns-2.rs:10:11\n    |\n LL |     match buf {\n    |           ^^^ patterns `&[]`, `&[_]`, `&[_, _]` and 2 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[u8]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8d693f9cfcc49cfadad544f3ed1c86224d50c623", "filename": "src/test/ui/pattern/usefulness/match-non-exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,17 +4,17 @@ error[E0004]: non-exhaustive patterns: `i32::MIN..=0_i32` and `2_i32..=i32::MAX`\n LL |     match 0 { 1 => () }\n    |           ^ patterns `i32::MIN..=0_i32` and `2_i32..=i32::MAX` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/match-non-exhaustive.rs:3:11\n    |\n LL |     match 0 { 0 if false => () }\n    |           ^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `i32`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8f32f73db0c9074083ca7c967840033f11455d86", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -9,8 +9,8 @@ LL |     match private::DATA {\n LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     ---- not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Option<Private>`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "7f48c5f99bdbf6e79a34907ed263931fe5763dad", "filename": "src/test/ui/pattern/usefulness/match-slice-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,8 @@ error[E0004]: non-exhaustive patterns: `&[_, Some(_), .., None, _]` not covered\n LL |     match list {\n    |           ^^^^ pattern `&[_, Some(_), .., None, _]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[Option<()>]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "8f71184223ca2b025d7c5cf8f96b7d4106f4d753", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-defined-here.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -19,8 +19,8 @@ LL | | }\n LL |       match e1 {\n    |             ^^ patterns `B` and `C` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `E`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0005]: refutable pattern in local binding: `B` and `C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:36:9\n@@ -72,8 +72,8 @@ LL | | }\n LL |       match e {\n    |             ^ patterns `&B` and `&C` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&E`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0005]: refutable pattern in local binding: `&B` and `&C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:44:9\n@@ -125,8 +125,8 @@ LL | | }\n LL |       match e {\n    |             ^ patterns `&&mut &B` and `&&mut &C` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&&mut &E`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0005]: refutable pattern in local binding: `&&mut &B` and `&&mut &C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:52:9\n@@ -173,8 +173,8 @@ LL | | }\n LL |       match e {\n    |             ^ pattern `None` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Opt`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0005]: refutable pattern in local binding: `None` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:69:9"}, {"sha": "518018e1630344afdfaa7c23380c0dc27c90a2b6", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,8 @@ error[E0004]: non-exhaustive patterns: `(Some(&[]), Err(_))` not covered\n LL |     match (l1, l2) {\n    |           ^^^^^^^^ pattern `(Some(&[]), Err(_))` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(Option<&[T]>, Result<&[T], ()>)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `A(C)` not covered\n   --> $DIR/non-exhaustive-match-nested.rs:15:11\n@@ -19,8 +19,8 @@ LL | enum T { A(U), B }\n LL |     match x {\n    |           ^ pattern `A(C)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `T`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1728c5f1321588861d3a91f97d7f3eea04e04d28", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -10,17 +10,17 @@ LL | enum T { A, B }\n LL |     match x { T::B => { } }\n    |           ^ pattern `A` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `T`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `false` not covered\n   --> $DIR/non-exhaustive-match.rs:8:11\n    |\n LL |     match true {\n    |           ^^^^ pattern `false` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `bool`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Some(_)` not covered\n   --> $DIR/non-exhaustive-match.rs:11:11\n@@ -33,26 +33,26 @@ LL |     match Some(10) {\n LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     ---- not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Option<i32>`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(_, _, i32::MIN..=3_i32)` and `(_, _, 5_i32..=i32::MAX)` not covered\n   --> $DIR/non-exhaustive-match.rs:14:11\n    |\n LL |     match (2, 3, 4) {\n    |           ^^^^^^^^^ patterns `(_, _, i32::MIN..=3_i32)` and `(_, _, 5_i32..=i32::MAX)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(i32, i32, i32)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(A, A)` and `(B, B)` not covered\n   --> $DIR/non-exhaustive-match.rs:18:11\n    |\n LL |     match (T::A, T::A) {\n    |           ^^^^^^^^^^^^ patterns `(A, A)` and `(B, B)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(T, T)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `B` not covered\n   --> $DIR/non-exhaustive-match.rs:22:11\n@@ -66,26 +66,26 @@ LL | enum T { A, B }\n LL |     match T::A {\n    |           ^^^^ pattern `B` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `T`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `[]` not covered\n   --> $DIR/non-exhaustive-match.rs:33:11\n    |\n LL |     match *vec {\n    |           ^^^^ pattern `[]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `[Option<isize>]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `[_, _, _, _, ..]` not covered\n   --> $DIR/non-exhaustive-match.rs:46:11\n    |\n LL |     match *vec {\n    |           ^^^^ pattern `[_, _, _, _, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `[f32]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 8 previous errors\n "}, {"sha": "7b4f9336799d2d70473ebb6fe570f4d07f4a4863", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-witness.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -10,8 +10,8 @@ LL | | }\n LL |       match (Foo { first: true, second: None }) {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { first: false, second: Some([_, _, _, _]) }` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Red` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:23:11\n@@ -27,8 +27,8 @@ LL | | }\n LL |       match Color::Red {\n    |             ^^^^^^^^^^ pattern `Red` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Color`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `East`, `South` and `West` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:35:11\n@@ -45,8 +45,8 @@ LL | | }\n LL |       match Direction::North {\n    |             ^^^^^^^^^^^^^^^^ patterns `East`, `South` and `West` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Direction`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Second`, `Third`, `Fourth` and 8 more not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:46:11\n@@ -59,8 +59,8 @@ LL | | }\n LL |       match ExcessiveEnum::First {\n    |             ^^^^^^^^^^^^^^^^^^^^ patterns `Second`, `Third`, `Fourth` and 8 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `ExcessiveEnum`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `CustomRGBA { a: true, .. }` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:54:11\n@@ -76,26 +76,26 @@ LL | | }\n LL |       match Color::Red {\n    |             ^^^^^^^^^^ pattern `CustomRGBA { a: true, .. }` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Color`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `[Second(true), Second(false)]` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:70:11\n    |\n LL |     match *x {\n    |           ^^ pattern `[Second(true), Second(false)]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `[Enum]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((), false)` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:83:11\n    |\n LL |     match ((), false) {\n    |           ^^^^^^^^^^^ pattern `((), false)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `((), bool)`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 7 previous errors\n "}, {"sha": "601e0712ed39123e7f76e1d040d8750da53071d2", "filename": "src/test/ui/pattern/usefulness/slice-patterns-exhaustiveness.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,179 +4,179 @@ error[E0004]: non-exhaustive patterns: `&[false, _]` not covered\n LL |     match s2 {\n    |           ^^ pattern `&[false, _]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool; 2]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:12:11\n    |\n LL |     match s3 {\n    |           ^^ pattern `&[false, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool; 3]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:16:11\n    |\n LL |     match s10 {\n    |           ^^^ pattern `&[false, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool; 10]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, true]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:25:11\n    |\n LL |     match s2 {\n    |           ^^ pattern `&[false, true]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool; 2]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, .., true]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:30:11\n    |\n LL |     match s3 {\n    |           ^^ pattern `&[false, .., true]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool; 3]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, .., true]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:35:11\n    |\n LL |     match s {\n    |           ^ pattern `&[false, .., true]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[_, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:42:11\n    |\n LL |     match s {\n    |           ^ pattern `&[_, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:46:11\n    |\n LL |     match s {\n    |           ^ pattern `&[_, _, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:51:11\n    |\n LL |     match s {\n    |           ^ pattern `&[false, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:56:11\n    |\n LL |     match s {\n    |           ^ pattern `&[false, _, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[_, .., false]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:62:11\n    |\n LL |     match s {\n    |           ^ pattern `&[_, .., false]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[_, _, .., true]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:69:11\n    |\n LL |     match s {\n    |           ^ pattern `&[_, _, .., true]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[true, _, .., _]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:76:11\n    |\n LL |     match s {\n    |           ^ pattern `&[true, _, .., _]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[]` and `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:85:11\n    |\n LL |     match s {\n    |           ^ patterns `&[]` and `&[_, _, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[]` and `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:89:11\n    |\n LL |     match s {\n    |           ^ patterns `&[]` and `&[_, _, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[]` and `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:93:11\n    |\n LL |     match s {\n    |           ^ patterns `&[]` and `&[_, _, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[]` and `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:98:11\n    |\n LL |     match s {\n    |           ^ patterns `&[]` and `&[_, _, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:103:11\n    |\n LL |     match s {\n    |           ^ pattern `&[_, _, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:108:11\n    |\n LL |     match s {\n    |           ^ pattern `&[false]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[false]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:121:11\n    |\n LL |     match s1 {\n    |           ^^ pattern `&[false]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[bool; 1]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 20 previous errors\n "}, {"sha": "994fa6d206ee422679ae8c0bf8d5742cb3403c9a", "filename": "src/test/ui/pattern/usefulness/stable-gated-patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -9,17 +9,17 @@ LL |     match Foo::Stable {\n LL |     Stable2,\n    |     ------- not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/stable-gated-patterns.rs:13:11\n    |\n LL |     match Foo::Stable {\n    |           ^^^^^^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6dc67f95a4662f2f79da47b48fbea1a836749b1a", "filename": "src/test/ui/pattern/usefulness/struct-like-enum-nonexhaustive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -11,8 +11,8 @@ LL | | }\n LL |       match x {\n    |             ^ pattern `B { x: Some(_) }` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `A`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "a5ba50ac0b01d60a87ba17809d7670a4fa346e2b", "filename": "src/test/ui/pattern/usefulness/tuple-struct-nonexhaustive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -7,8 +7,8 @@ LL | struct Foo(isize, isize);\n LL |     match x {\n    |           ^ pattern `Foo(_, _)` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "5b9dc8e7ffcf815266f3a38f2849ffd278768813", "filename": "src/test/ui/pattern/usefulness/type_polymorphic_byte_str_literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,17 +4,17 @@ error[E0004]: non-exhaustive patterns: `&[_, ..]` not covered\n LL |     match data {\n    |           ^^^^ pattern `&[_, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[u8]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[]`, `&[_]`, `&[_, _]` and 1 more not covered\n   --> $DIR/type_polymorphic_byte_str_literals.rs:23:11\n    |\n LL |     match data {\n    |           ^^^^ patterns `&[]`, `&[_]`, `&[_, _]` and 1 more not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[u8]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6f1233b5ee9f6b27e4217ca3e5076dacfeba79b4", "filename": "src/test/ui/pattern/usefulness/unstable-gated-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -9,8 +9,8 @@ LL |     match Foo::Stable {\n LL |     Unstable,\n    |     -------- not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "5e3dfafee196911bbff05a29541f9f0a8fd3a765", "filename": "src/test/ui/rfc-2005-default-binding-mode/slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,8 +4,8 @@ error[E0004]: non-exhaustive patterns: `&[]` not covered\n LL |     match sl {\n    |           ^^ pattern `&[]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[u8]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "8fc0b4feb259e6af8bd9335300df75d45fc97980", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,26 +4,36 @@ error[E0004]: non-exhaustive patterns: type `EmptyNonExhaustiveEnum` is non-empt\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `EmptyNonExhaustiveEnum`, which is marked as non-exhaustive\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/enum.rs:16:11\n    |\n LL |     match enum_unit {\n    |           ^^^^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonExhaustiveEnum`, which is marked as non-exhaustive\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/enum.rs:23:11\n    |\n LL |     match enum_unit {};\n    |           ^^^^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonExhaustiveEnum`, which is marked as non-exhaustive\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match enum_unit {\n+LL +         _ => todo!(),\n+LL ~     };\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8f17e3e3f429c04d2a92fb81aaefc3d4a07b7bd3", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum_same_crate_empty_match.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -29,8 +29,13 @@ LL | | }\n LL |       match NonExhaustiveEnum::Unit {}\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ patterns `Unit`, `Tuple(_)` and `Struct { .. }` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonExhaustiveEnum`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match NonExhaustiveEnum::Unit {\n+LL +         Unit | Tuple(_) | Struct { .. } => todo!(),\n+LL +     }\n+   |\n \n error[E0004]: non-exhaustive patterns: `Unit`, `Tuple(_)` and `Struct { .. }` not covered\n   --> $DIR/enum_same_crate_empty_match.rs:35:11\n@@ -51,8 +56,13 @@ LL | | }\n LL |       match NormalEnum::Unit {}\n    |             ^^^^^^^^^^^^^^^^ patterns `Unit`, `Tuple(_)` and `Struct { .. }` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NormalEnum`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match NormalEnum::Unit {\n+LL +         Unit | Tuple(_) | Struct { .. } => todo!(),\n+LL +     }\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9bd1c487c43a894df721adaf5c94e31454e74988", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match.stderr", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,35 +4,55 @@ error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedEnum` is non-emp\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `IndirectUninhabitedEnum`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedStruct` is non-empty\n   --> $DIR/indirect_match.rs:23:11\n    |\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `IndirectUninhabitedStruct`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedTupleStruct` is non-empty\n   --> $DIR/indirect_match.rs:27:11\n    |\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `IndirectUninhabitedTupleStruct`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedVariants` is non-empty\n   --> $DIR/indirect_match.rs:33:11\n    |\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `IndirectUninhabitedVariants`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "15ed37b22cb1dbd6a16071b255dea36c5db08d5b", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.stderr", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -7,8 +7,13 @@ LL | pub struct IndirectUninhabitedEnum(UninhabitedEnum);\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `IndirectUninhabitedEnum`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedStruct` is non-empty\n   --> $DIR/indirect_match_same_crate.rs:38:11\n@@ -19,8 +24,13 @@ LL | pub struct IndirectUninhabitedStruct(UninhabitedStruct);\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `IndirectUninhabitedStruct`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedTupleStruct` is non-empty\n   --> $DIR/indirect_match_same_crate.rs:42:11\n@@ -31,8 +41,13 @@ LL | pub struct IndirectUninhabitedTupleStruct(UninhabitedTupleStruct);\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `IndirectUninhabitedTupleStruct`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedVariants` is non-empty\n   --> $DIR/indirect_match_same_crate.rs:48:11\n@@ -43,8 +58,13 @@ LL | pub struct IndirectUninhabitedVariants(UninhabitedVariants);\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `IndirectUninhabitedVariants`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c653666e46a158db289c5e00d7300fd98d1104b1", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,35 +4,55 @@ error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedEnum` is non-emp\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `IndirectUninhabitedEnum`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedStruct` is non-empty\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:27:11\n    |\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `IndirectUninhabitedStruct`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedTupleStruct` is non-empty\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:31:11\n    |\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `IndirectUninhabitedTupleStruct`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedVariants` is non-empty\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:37:11\n    |\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `IndirectUninhabitedVariants`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "320e75c5ebbec4cbfd976da46db0d492c1fb54b6", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.stderr", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,26 +4,41 @@ error[E0004]: non-exhaustive patterns: type `UninhabitedEnum` is non-empty\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `UninhabitedEnum`, which is marked as non-exhaustive\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `UninhabitedStruct` is non-empty\n   --> $DIR/match.rs:23:11\n    |\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `UninhabitedStruct`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `UninhabitedTupleStruct` is non-empty\n   --> $DIR/match.rs:27:11\n    |\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `UninhabitedTupleStruct`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covered\n   --> $DIR/match.rs:31:11\n@@ -38,8 +53,13 @@ LL |     #[non_exhaustive] Tuple(!),\n LL |     #[non_exhaustive] Struct { x: ! }\n    |                       ------ not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `UninhabitedVariants`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         Tuple(_) | Struct { .. } => todo!(),\n+LL ~     }\n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a08579cbc3c3413caecdf742b04ebdc071ac32ca", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -9,8 +9,13 @@ LL | | }\n LL |       match x {}\n    |             ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `UninhabitedStruct`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `UninhabitedTupleStruct` is non-empty\n   --> $DIR/match_same_crate.rs:34:11\n@@ -21,8 +26,13 @@ LL | pub struct UninhabitedTupleStruct(!);\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `UninhabitedTupleStruct`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covered\n   --> $DIR/match_same_crate.rs:38:11\n@@ -38,8 +48,13 @@ LL | | }\n LL |       match x {}\n    |             ^ patterns `Tuple(_)` and `Struct { .. }` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `UninhabitedVariants`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         Tuple(_) | Struct { .. } => todo!(),\n+LL ~     }\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "01f7fb9704898e0d7508fde2a62ac2901e220555", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -4,26 +4,41 @@ error[E0004]: non-exhaustive patterns: type `UninhabitedEnum` is non-empty\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `UninhabitedEnum`, which is marked as non-exhaustive\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `UninhabitedStruct` is non-empty\n   --> $DIR/match_with_exhaustive_patterns.rs:26:11\n    |\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `UninhabitedStruct`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: type `UninhabitedTupleStruct` is non-empty\n   --> $DIR/match_with_exhaustive_patterns.rs:30:11\n    |\n LL |     match x {}\n    |           ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `UninhabitedTupleStruct`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n \n error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covered\n   --> $DIR/match_with_exhaustive_patterns.rs:34:11\n@@ -38,8 +53,13 @@ LL |     #[non_exhaustive] Tuple(!),\n LL |     #[non_exhaustive] Struct { x: ! }\n    |                       ------ not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `UninhabitedVariants`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     match x {\n+LL +         Tuple(_) | Struct { .. } => todo!(),\n+LL ~     }\n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6cdc6999a09ff266822ea4342a5dcc826f523abf", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a3830f245d84672db133208c73756eb8778964/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=02a3830f245d84672db133208c73756eb8778964", "patch": "@@ -9,8 +9,8 @@ LL |     let _ = match x {\n LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |     --- not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Result<u32, &Void>`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `&Void` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:15:19\n@@ -21,36 +21,51 @@ LL | enum Void {}\n LL |     let _ = match x {};\n    |                   ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&Void`\n    = note: references are always considered inhabited\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     let _ = match x {\n+LL +         _ => todo!(),\n+LL ~     };\n+   |\n \n error[E0004]: non-exhaustive patterns: type `(Void,)` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:18:19\n    |\n LL |     let _ = match x {};\n    |                   ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(Void,)`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     let _ = match x {\n+LL +         _ => todo!(),\n+LL ~     };\n+   |\n \n error[E0004]: non-exhaustive patterns: type `[Void; 1]` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:21:19\n    |\n LL |     let _ = match x {};\n    |                   ^\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `[Void; 1]`\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~     let _ = match x {\n+LL +         _ => todo!(),\n+LL ~     };\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[_, ..]` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:24:19\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `&[_, ..]` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&[Void]`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:32:19\n@@ -63,8 +78,8 @@ LL |     let _ = match x {\n LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |     --- not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Result<u32, Void>`\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:37:9"}]}