{"sha": "7f1e160e02112d4d23a72e52b2ab23860e6a956f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMWUxNjBlMDIxMTJkNGQyM2E3MmU1MmIyYWIyMzg2MGU2YTk1NmY=", "commit": {"author": {"name": "Christian Poveda", "email": "cpovedar@fnal.gov", "date": "2019-06-28T19:25:33Z"}, "committer": {"name": "Christian Poveda", "email": "cpovedar@fnal.gov", "date": "2019-06-28T19:25:33Z"}, "message": "Reorganize code for readabilty and fixed problem with type sizes", "tree": {"sha": "455a30cd5ccda21f256592367867aa83fb6a1f58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/455a30cd5ccda21f256592367867aa83fb6a1f58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f1e160e02112d4d23a72e52b2ab23860e6a956f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f1e160e02112d4d23a72e52b2ab23860e6a956f", "html_url": "https://github.com/rust-lang/rust/commit/7f1e160e02112d4d23a72e52b2ab23860e6a956f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f1e160e02112d4d23a72e52b2ab23860e6a956f/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1e95a83861271e144f65903c652ab9fa9bd64b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e95a83861271e144f65903c652ab9fa9bd64b8", "html_url": "https://github.com/rust-lang/rust/commit/e1e95a83861271e144f65903c652ab9fa9bd64b8"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "e8bca0c7123995c5fb5e0160c78c335ad71784d3", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7f1e160e02112d4d23a72e52b2ab23860e6a956f/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1e160e02112d4d23a72e52b2ab23860e6a956f/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=7f1e160e02112d4d23a72e52b2ab23860e6a956f", "patch": "@@ -151,7 +151,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n                     \"Unexpected cast from type {:?}\", src_layout.ty\n                 );\n                 match val.to_bits_or_ptr(src_layout.size, self) {\n-                    Err(ptr) => self.cast_from_ptr(ptr, dest_layout.ty),\n+                    Err(ptr) => self.cast_from_ptr(ptr, src_layout, dest_layout),\n                     Ok(data) => self.cast_from_int(data, src_layout, dest_layout),\n                 }\n             }\n@@ -239,34 +239,43 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n     fn cast_from_ptr(\n         &self,\n         ptr: Pointer<M::PointerTag>,\n-        ty: Ty<'tcx>\n+        src_layout: TyLayout<'tcx>,\n+        dest_layout: TyLayout<'tcx>,\n     ) -> InterpResult<'tcx, Scalar<M::PointerTag>> {\n         use rustc::ty::TyKind::*;\n \n-        let size = match ty.sty {\n+        fn int_size<'tcx>(layout: TyLayout<'tcx>) -> Option<usize> {\n+            match layout.ty.sty {\n+                Int(i) => i.bit_width(),\n+                Uint(i) => i.bit_width(),\n+                _ => bug!(\"Not an integer\"),\n+            }\n+        }\n+\n+        match dest_layout.ty.sty {\n             // Casting to a reference or fn pointer is not permitted by rustc,\n             // no need to support it here.\n-            RawPtr(_) => return Ok(ptr.into()),\n+            RawPtr(_) => Ok(ptr.into()),\n             Int(IntTy::Isize) | Uint(UintTy::Usize) => {\n                 let size = self.memory.pointer_size();\n+                \n                 if let Ok(bits) = self.force_bits(Scalar::Ptr(ptr), size) {\n-                    return Ok(Scalar::from_uint(bits, size));\n-                } \n-                return Ok(ptr.into());\n+                    self.cast_from_int(bits, src_layout, dest_layout)\n+                } else {\n+                    Ok(ptr.into())\n+                }\n             }\n-            // If the target type is a sized integer, we need the its size to perform the pointer cast\n-            Int(i) => i.bit_width().unwrap(),\n-            Uint(i) => i.bit_width().unwrap(),\n+            Int(_) | Uint(_) => {\n+                let size = Size::from_bits(int_size(dest_layout).unwrap() as u64);\n+                \n+                if let Ok(bits) = self.force_bits(Scalar::Ptr(ptr), size) {\n+                    self.cast_from_int(bits, src_layout, dest_layout)\n+                } else {\n+                    err!(ReadPointerAsBytes)\n+                }\n+            },\n             // Casting to any other type is not implemented\n-            _ => return err!(Unimplemented(format!(\"ptr to {:?} cast\", ty))),\n-        };\n-\n-        let size = Size::from_bits(size as u64);\n-\n-        if let Ok(bits) = self.force_bits(Scalar::Ptr(ptr), size) {\n-            Ok(Scalar::from_uint(bits, size))\n-        } else {\n-            err!(ReadPointerAsBytes)\n+            _ => return err!(Unimplemented(format!(\"ptr to {:?} cast\", dest_layout.ty))),\n         }\n     }\n "}]}