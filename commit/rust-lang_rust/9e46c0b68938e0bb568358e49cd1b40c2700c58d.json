{"sha": "9e46c0b68938e0bb568358e49cd1b40c2700c58d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNDZjMGI2ODkzOGUwYmI1NjgzNThlNDljZDFiNDBjMjcwMGM1OGQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-31T11:50:14Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-03T08:07:05Z"}, "message": "Only promote calls to `#[rustc_promotable]` const fns", "tree": {"sha": "3429ebcf0db4ef58458e4127a5177ab92b99a6aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3429ebcf0db4ef58458e4127a5177ab92b99a6aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e46c0b68938e0bb568358e49cd1b40c2700c58d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e46c0b68938e0bb568358e49cd1b40c2700c58d", "html_url": "https://github.com/rust-lang/rust/commit/9e46c0b68938e0bb568358e49cd1b40c2700c58d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e46c0b68938e0bb568358e49cd1b40c2700c58d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf11765dc98536c6eedf33f2df7f72f6e161263", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf11765dc98536c6eedf33f2df7f72f6e161263", "html_url": "https://github.com/rust-lang/rust/commit/4cf11765dc98536c6eedf33f2df7f72f6e161263"}], "stats": {"total": 767, "additions": 525, "deletions": 242}, "files": [{"sha": "27ee9556bd0895dbe2ccd6e903812a57d3e721df", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -285,6 +285,7 @@ pub fn forget<T>(t: T) {\n /// [alignment]: ./fn.align_of.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(stage0), rustc_promotable)]\n pub const fn size_of<T>() -> usize {\n     intrinsics::size_of::<T>()\n }\n@@ -376,6 +377,7 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(stage0), rustc_promotable)]\n pub const fn align_of<T>() -> usize {\n     intrinsics::min_align_of::<T>()\n }"}, {"sha": "772502cc800e868c4ca230328d548a0aabb21402", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -216,6 +216,7 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n+            #[cfg_attr(not(stage0), rustc_promotable)]\n             pub const fn min_value() -> Self {\n                 !0 ^ ((!0 as $UnsignedT) >> 1) as Self\n             }\n@@ -234,6 +235,7 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n+            #[cfg_attr(not(stage0), rustc_promotable)]\n             pub const fn max_value() -> Self {\n                 !Self::min_value()\n             }"}, {"sha": "07ba285ea5cb3b8ffc3954178e3621e196dc7009", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -391,6 +391,7 @@ impl<Idx> RangeInclusive<Idx> {\n     /// ```\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n+    #[cfg_attr(not(stage0), rustc_promotable)]\n     pub const fn new(start: Idx, end: Idx) -> Self {\n         Self { start, end, is_empty: None }\n     }"}, {"sha": "bd58dcf4ae055fd9578608f71b87919ccbb8658b", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -209,6 +209,7 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(stage0), rustc_promotable)]\n pub const fn null<T>() -> *const T { 0 as *const T }\n \n /// Creates a null mutable raw pointer.\n@@ -223,6 +224,7 @@ pub const fn null<T>() -> *const T { 0 as *const T }\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(stage0), rustc_promotable)]\n pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n \n /// Swaps the values at two mutable locations of the same type, without"}, {"sha": "81ae8ade12d93146afc32e15859fc96dcded4551", "filename": "src/libcore/time.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -109,6 +109,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n+    #[cfg_attr(not(stage0), rustc_promotable)]\n     pub const fn from_secs(secs: u64) -> Duration {\n         Duration { secs, nanos: 0 }\n     }\n@@ -127,6 +128,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n+    #[cfg_attr(not(stage0), rustc_promotable)]\n     pub const fn from_millis(millis: u64) -> Duration {\n         Duration {\n             secs: millis / MILLIS_PER_SEC,\n@@ -148,6 +150,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_from_micros\", since = \"1.27.0\")]\n     #[inline]\n+    #[cfg_attr(not(stage0), rustc_promotable)]\n     pub const fn from_micros(micros: u64) -> Duration {\n         Duration {\n             secs: micros / MICROS_PER_SEC,\n@@ -169,6 +172,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n     #[inline]\n+    #[cfg_attr(not(stage0), rustc_promotable)]\n     pub const fn from_nanos(nanos: u64) -> Duration {\n         Duration {\n             secs: nanos / (NANOS_PER_SEC as u64),"}, {"sha": "994bbe727fcf845ca7140ee2bcf28156d607c115", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -515,6 +515,7 @@ define_dep_nodes!( <'tcx>\n     [] ItemVarianceConstraints(DefId),\n     [] ItemVariances(DefId),\n     [] IsConstFn(DefId),\n+    [] IsPromotableConstFn(DefId),\n     [] IsForeignItem(DefId),\n     [] TypeParamPredicates { item_id: DefId, param_id: DefId },\n     [] SizedConstraint(DefId),"}, {"sha": "4be467c01aac1c409472d3942ac3dbc8fad39fc1", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -130,6 +130,7 @@ impl_stable_hash_for!(struct ::syntax::attr::Stability {\n     level,\n     feature,\n     rustc_depr,\n+    promotable,\n     const_stability\n });\n "}, {"sha": "b7b149ea02988ba98e90110cdba356d931b978a9", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -441,6 +441,7 @@ impl<'a, 'tcx> Index<'tcx> {\n                     feature: Symbol::intern(\"rustc_private\"),\n                     rustc_depr: None,\n                     const_stability: None,\n+                    promotable: false,\n                 });\n                 annotator.parent_stab = Some(stability);\n             }"}, {"sha": "5b13af40a4b53d10ff9ff9ec9b2e20abf1f847bb", "filename": "src/librustc/ty/constness.rs", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -0,0 +1,111 @@\n+use ty::query::Providers;\n+use hir::def_id::DefId;\n+use hir;\n+use ty::TyCtxt;\n+use syntax_pos::symbol::Symbol;\n+use hir::map::blocks::FnLikeNode;\n+use syntax::attr;\n+use rustc_target::spec::abi;\n+\n+impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n+    /// Whether the `def_id` counts as const fn in your current crate, considering all active\n+    /// feature gates\n+    pub fn is_const_fn(self, def_id: DefId) -> bool {\n+        self.is_const_fn_raw(def_id) && match self.lookup_stability(def_id) {\n+            Some(stab) => match stab.const_stability {\n+                // has a `rustc_const_unstable` attribute, check whether the user enabled the\n+                // corresponding feature gate\n+                Some(feature_name) => self.features()\n+                    .declared_lib_features\n+                    .iter()\n+                    .any(|&(sym, _)| sym == feature_name),\n+                // the function has no stability attribute, it is stable as const fn or the user\n+                // nees to use feature gates to use the function at all\n+                None => true,\n+            },\n+            // functions without stability are either stable user written const fn or the user is\n+            // using feature gates and we thus don't care what they do\n+            None => true,\n+        }\n+    }\n+\n+    /// Whether the `def_id` is an unstable const fn and what feature gate is necessary to enable it\n+    pub fn is_unstable_const_fn(self, def_id: DefId) -> Option<Symbol> {\n+        if self.is_const_fn_raw(def_id) {\n+            self.lookup_stability(def_id)?.const_stability\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Returns true if this function must conform to `min_const_fn`\n+    pub fn is_min_const_fn(self, def_id: DefId) -> bool {\n+        if self.features().staged_api {\n+            // some intrinsics are waved through if called inside the\n+            // standard library. Users never need to call them directly\n+            if let abi::Abi::RustIntrinsic = self.fn_sig(def_id).abi() {\n+                assert!(!self.is_const_fn(def_id));\n+                match &self.item_name(def_id).as_str()[..] {\n+                    | \"size_of\"\n+                    | \"min_align_of\"\n+                    | \"needs_drop\"\n+                    => return true,\n+                    _ => {},\n+                }\n+            }\n+            // in order for a libstd function to be considered min_const_fn\n+            // it needs to be stable and have no `rustc_const_unstable` attribute\n+            match self.lookup_stability(def_id) {\n+                // stable functions with unstable const fn aren't `min_const_fn`\n+                Some(&attr::Stability { const_stability: Some(_), .. }) => false,\n+                // unstable functions don't need to conform\n+                Some(&attr::Stability { ref level, .. }) if level.is_unstable() => false,\n+                // everything else needs to conform, because it would be callable from\n+                // other `min_const_fn` functions\n+                _ => true,\n+            }\n+        } else {\n+            // users enabling the `const_fn` can do what they want\n+            !self.sess.features_untracked().const_fn\n+        }\n+    }\n+}\n+\n+\n+pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n+    /// only checks whether the function has a `const` modifier\n+    fn is_const_fn_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+        let node_id = tcx.hir.as_local_node_id(def_id)\n+                             .expect(\"Non-local call to local provider is_const_fn\");\n+\n+        if let Some(fn_like) = FnLikeNode::from_node(tcx.hir.get(node_id)) {\n+            fn_like.constness() == hir::Constness::Const\n+        } else {\n+            false\n+        }\n+    }\n+\n+    fn is_promotable_const_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+        tcx.is_const_fn(def_id) && match tcx.lookup_stability(def_id) {\n+            Some(stab) => {\n+                if cfg!(debug_assertions) && stab.promotable {\n+                    let sig = tcx.fn_sig(def_id);\n+                    assert_eq!(\n+                        sig.unsafety(),\n+                        hir::Unsafety::Normal,\n+                        \"don't mark const unsafe fns as promotable\",\n+                        // https://github.com/rust-lang/rust/pull/53851#issuecomment-418760682\n+                    );\n+                }\n+                stab.promotable\n+            },\n+            None => false,\n+        }\n+    }\n+\n+    *providers = Providers {\n+        is_const_fn_raw,\n+        is_promotable_const_fn,\n+        ..*providers\n+    };\n+}"}, {"sha": "85559c892c4af67232ec4fc929c21d291ed97b84", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -1134,38 +1134,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         local as usize == global as usize\n     }\n \n-    /// Returns true if this function must conform to `min_const_fn`\n-    pub fn is_min_const_fn(self, def_id: DefId) -> bool {\n-        if self.features().staged_api {\n-            // some intrinsics are waved through if called inside the\n-            // standard library. Users never need to call them directly\n-            if let abi::Abi::RustIntrinsic = self.fn_sig(def_id).abi() {\n-                assert!(!self.is_const_fn(def_id));\n-                match &self.item_name(def_id).as_str()[..] {\n-                    | \"size_of\"\n-                    | \"min_align_of\"\n-                    | \"needs_drop\"\n-                    => return true,\n-                    _ => {},\n-                }\n-            }\n-            // in order for a libstd function to be considered min_const_fn\n-            // it needs to be stable and have no `rustc_const_unstable` attribute\n-            match self.lookup_stability(def_id) {\n-                // stable functions with unstable const fn aren't `min_const_fn`\n-                Some(&attr::Stability { const_stability: Some(_), .. }) => false,\n-                // unstable functions don't need to conform\n-                Some(&attr::Stability { ref level, .. }) if level.is_unstable() => false,\n-                // everything else needs to conform, because it would be callable from\n-                // other `min_const_fn` functions\n-                _ => true,\n-            }\n-        } else {\n-            // users enabling the `const_fn` can do what they want\n-            !self.sess.features_untracked().const_fn\n-        }\n-    }\n-\n     /// Create a type context and call the closure with a `TyCtxt` reference\n     /// to the context. The closure enforces that the type context and any interned\n     /// value (types, substs, etc.) can only be used while `ty::tls` has a valid"}, {"sha": "57afbafc2a5f626ea3885f293db30a59623aef2a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -94,6 +94,7 @@ pub mod binding;\n pub mod cast;\n #[macro_use]\n pub mod codec;\n+mod constness;\n pub mod error;\n mod erase_regions;\n pub mod fast_reject;\n@@ -3056,6 +3057,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     erase_regions::provide(providers);\n     layout::provide(providers);\n     util::provide(providers);\n+    constness::provide(providers);\n     *providers = ty::query::Providers {\n         associated_item,\n         associated_item_def_ids,"}, {"sha": "66d7541633cde29cd2a10af21ae72c0bccc4e129", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -437,7 +437,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::is_object_safe<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::is_const_fn<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_const_fn_raw<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n         format!(\"checking if item is const fn: `{}`\", tcx.item_path_str(def_id))\n     }"}, {"sha": "44c9c55b8a4eb0880c20ad81ed084890798c459a", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -160,8 +160,23 @@ define_queries! { <'tcx>\n             DefId\n         ) -> Result<DtorckConstraint<'tcx>, NoSolution>,\n \n-        /// True if this is a const fn\n-        [] fn is_const_fn: IsConstFn(DefId) -> bool,\n+        /// True if this is a const fn, use the `is_const_fn` to know whether your crate actually\n+        /// sees it as const fn (e.g. the const-fn-ness might be unstable and you might not have\n+        /// the feature gate active)\n+        ///\n+        /// DO NOT CALL MANUALLY, it is only meant to cache the base data for the `is_const_fn`\n+        /// function\n+        [] fn is_const_fn_raw: IsConstFn(DefId) -> bool,\n+\n+\n+        /// Returns true if calls to the function may be promoted\n+        ///\n+        /// This is either because the function is e.g. a tuple-struct or tuple-variant constructor,\n+        /// or because it has the `#[rustc_promotable]` attribute. The attribute should be removed\n+        /// in the future in favour of some form of check which figures out whether the function\n+        /// does not inspect the bits of any of its arguments (so is essentially just a constructor\n+        /// function)\n+        [] fn is_promotable_const_fn: IsPromotableConstFn(DefId) -> bool,\n \n         /// True if this is a foreign item (i.e., linked via `extern { ... }`).\n         [] fn is_foreign_item: IsForeignItem(DefId) -> bool,"}, {"sha": "fbd3a8f69bc45f36b34df95903e19b3723748ae4", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -1136,7 +1136,8 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::FnSignature => { force!(fn_sig, def_id!()); }\n         DepKind::CoerceUnsizedInfo => { force!(coerce_unsized_info, def_id!()); }\n         DepKind::ItemVariances => { force!(variances_of, def_id!()); }\n-        DepKind::IsConstFn => { force!(is_const_fn, def_id!()); }\n+        DepKind::IsConstFn => { force!(is_const_fn_raw, def_id!()); }\n+        DepKind::IsPromotableConstFn => { force!(is_promotable_const_fn, def_id!()); }\n         DepKind::IsForeignItem => { force!(is_foreign_item, def_id!()); }\n         DepKind::SizedConstraint => { force!(adt_sized_constraint, def_id!()); }\n         DepKind::DtorckConstraint => { force!(adt_dtorck_constraint, def_id!()); }"}, {"sha": "7988de28b5d7b3e35b0a084e5e69a05186d8184e", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -26,7 +26,6 @@ use rustc::ty::{self, TyCtxt};\n use rustc::ty::query::Providers;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, CRATE_DEF_INDEX};\n use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n-use rustc::hir::map::blocks::FnLikeNode;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::util::nodemap::DefIdMap;\n use rustc_data_structures::svh::Svh;\n@@ -43,7 +42,6 @@ use syntax::parse::source_file_to_stream;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, NO_EXPANSION, FileName};\n use rustc_data_structures::bit_set::BitSet;\n-use rustc::hir;\n \n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n@@ -145,7 +143,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { Lrc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }\n-    is_const_fn => { cdata.is_const_fn(def_id.index) }\n+    is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     describe_def => { cdata.get_def(def_id.index) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n@@ -264,22 +262,10 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n }\n \n pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n-    fn is_const_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n-        let node_id = tcx.hir.as_local_node_id(def_id)\n-                             .expect(\"Non-local call to local provider is_const_fn\");\n-\n-        if let Some(fn_like) = FnLikeNode::from_node(tcx.hir.get(node_id)) {\n-            fn_like.constness() == hir::Constness::Const\n-        } else {\n-            false\n-        }\n-    }\n-\n     // FIXME(#44234) - almost all of these queries have no sub-queries and\n     // therefore no actual inputs, they're just reading tables calculated in\n     // resolve! Does this work? Unsure! That's what the issue is about\n     *providers = Providers {\n-        is_const_fn,\n         is_dllimport_foreign_item: |tcx, id| {\n             tcx.native_library_kind(id) == Some(NativeLibraryKind::NativeUnknown)\n         },"}, {"sha": "9864c1f3d7c686dca4c69c3b88c2a68be731138f", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -1114,7 +1114,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn is_const_fn(&self, id: DefIndex) -> bool {\n+    crate fn is_const_fn_raw(&self, id: DefIndex) -> bool {\n         let constness = match self.entry(id).kind {\n             EntryKind::Method(data) => data.decode(self).fn_data.constness,\n             EntryKind::Fn(data) => data.decode(self).constness,"}, {"sha": "3b1eba51aaf45fbb34ebd4e67ccf7d223245cc9f", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -213,7 +213,6 @@ impl<'tcx> Into<EvalError<'tcx>> for ConstEvalError {\n #[derive(Clone, Debug)]\n enum ConstEvalError {\n     NeedsRfc(String),\n-    NotConst(String),\n }\n \n impl fmt::Display for ConstEvalError {\n@@ -227,7 +226,6 @@ impl fmt::Display for ConstEvalError {\n                     msg\n                 )\n             }\n-            NotConst(ref msg) => write!(f, \"{}\", msg),\n         }\n     }\n }\n@@ -237,7 +235,6 @@ impl Error for ConstEvalError {\n         use self::ConstEvalError::*;\n         match *self {\n             NeedsRfc(_) => \"this feature needs an rfc before being allowed inside constants\",\n-            NotConst(_) => \"this feature is not compatible with constant evaluation\",\n         }\n     }\n \n@@ -293,9 +290,6 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n                 ecx.goto_block(ret)?; // fully evaluated and done\n                 return Ok(None);\n             }\n-            return Err(\n-                ConstEvalError::NotConst(format!(\"calling non-const fn `{}`\", instance)).into(),\n-            );\n         }\n         // This is a const fn. Call it.\n         Ok(Some(match ecx.load_mir(instance.def) {"}, {"sha": "17fe78d325cf1bc5d529a514250553bcbcf86572", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 91, "deletions": 76, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -29,7 +29,6 @@ use rustc::mir::traversal::ReversePostorder;\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::middle::lang_items;\n use rustc_target::spec::abi::Abi;\n-use syntax::attr;\n use syntax::ast::LitKind;\n use syntax::feature_gate::{UnstableFeatures, feature_err, emit_feature_err, GateIssue};\n use syntax_pos::{Span, DUMMY_SP};\n@@ -813,7 +812,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n             let fn_ty = func.ty(self.mir, self.tcx);\n             let mut callee_def_id = None;\n-            let (mut is_shuffle, mut is_const_fn) = (false, None);\n+            let (mut is_shuffle, mut is_const_fn) = (false, false);\n             if let ty::FnDef(def_id, _) = fn_ty.sty {\n                 callee_def_id = Some(def_id);\n                 match self.tcx.fn_sig(def_id).abi() {\n@@ -839,10 +838,17 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             | \"unchecked_shr\"\n                             | \"add_with_overflow\"\n                             | \"sub_with_overflow\"\n-                            | \"mul_with_overflow\" => is_const_fn = Some(def_id),\n+                            | \"mul_with_overflow\"\n+                            // no need to check feature gates, intrinsics are only callable from the\n+                            // libstd or with forever unstable feature gates\n+                            => is_const_fn = true,\n+                            // special intrinsic that can be called diretly without an intrinsic\n+                            // feature gate needs a language feature gate\n                             \"transmute\" => {\n+                                // never promote transmute calls\n                                 if self.mode != Mode::Fn {\n-                                    is_const_fn = Some(def_id);\n+                                    is_const_fn = true;\n+                                    // const eval transmute calls only with the feature gate\n                                     if !self.tcx.sess.features_untracked().const_transmute {\n                                         emit_feature_err(\n                                             &self.tcx.sess.parse_sess, \"const_transmute\",\n@@ -861,8 +867,81 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         }\n                     }\n                     _ => {\n-                        if self.tcx.is_const_fn(def_id) || self.is_const_panic_fn(def_id) {\n-                            is_const_fn = Some(def_id);\n+                        // in normal functions we only care about promotion\n+                        if self.mode == Mode::Fn {\n+                            // never promote const fn calls of\n+                            // functions without #[rustc_promotable]\n+                            if self.tcx.is_promotable_const_fn(def_id) {\n+                                is_const_fn = true;\n+                            }\n+                        } else {\n+                            // stable const fn or unstable const fns with their feature gate\n+                            // active\n+                            if self.tcx.is_const_fn(def_id) {\n+                                is_const_fn = true;\n+                            } else if self.is_const_panic_fn(def_id) {\n+                                // check the const_panic feature gate\n+                                // FIXME: cannot allow this inside `allow_internal_unstable` because\n+                                // that would make `panic!` insta stable in constants, since the\n+                                // macro is marked with the attr\n+                                if self.tcx.sess.features_untracked().const_panic {\n+                                    is_const_fn = true;\n+                                } else {\n+                                    // don't allow panics in constants without the feature gate\n+                                    emit_feature_err(\n+                                        &self.tcx.sess.parse_sess,\n+                                        \"const_panic\",\n+                                        self.span,\n+                                        GateIssue::Language,\n+                                        &format!(\"panicking in {}s is unstable\", self.mode),\n+                                    );\n+                                }\n+                            } else if let Some(feature) = self.tcx.is_unstable_const_fn(def_id) {\n+                                // check `#[unstable]` const fns or `#[rustc_const_unstable]`\n+                                // functions without the feature gate active in this crate to report\n+                                // a better error message than the one below\n+                                if self.span.allows_unstable() {\n+                                    // `allow_internal_unstable` can make such calls stable\n+                                    is_const_fn = true;\n+                                } else {\n+                                    let mut err = self.tcx.sess.struct_span_err(self.span,\n+                                        &format!(\"`{}` is not yet stable as a const fn\",\n+                                                self.tcx.item_path_str(def_id)));\n+                                    help!(&mut err,\n+                                        \"in Nightly builds, add `#![feature({})]` \\\n+                                        to the crate attributes to enable\",\n+                                        feature);\n+                                    err.emit();\n+                                }\n+                            } else {\n+                                // FIXME(#24111) Remove this check when const fn stabilizes\n+                                let (msg, note) = if let UnstableFeatures::Disallow =\n+                                        self.tcx.sess.opts.unstable_features {\n+                                    (format!(\"calls in {}s are limited to \\\n+                                            tuple structs and tuple variants\",\n+                                            self.mode),\n+                                    Some(\"a limited form of compile-time function \\\n+                                        evaluation is available on a nightly \\\n+                                        compiler via `const fn`\"))\n+                                } else {\n+                                    (format!(\"calls in {}s are limited \\\n+                                            to constant functions, \\\n+                                            tuple structs and tuple variants\",\n+                                            self.mode),\n+                                    None)\n+                                };\n+                                let mut err = struct_span_err!(\n+                                    self.tcx.sess,\n+                                    self.span,\n+                                    E0015,\n+                                    \"{}\",\n+                                    msg,\n+                                );\n+                                if let Some(note) = note {\n+                                    err.span_note(self.span, note);\n+                                }\n+                                err.emit();\n+                            }\n                         }\n                     }\n                 }\n@@ -905,78 +984,14 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 });\n             }\n \n-            // Const fn calls.\n-            if let Some(def_id) = is_const_fn {\n-                // check the const_panic feature gate or\n-                // find corresponding rustc_const_unstable feature\n-                // FIXME: cannot allow this inside `allow_internal_unstable` because that would make\n-                // `panic!` insta stable in constants, since the macro is marked with the attr\n-                if self.is_const_panic_fn(def_id) {\n-                    if self.mode == Mode::Fn {\n-                        // never promote panics\n-                        self.qualif = Qualif::NOT_CONST;\n-                    } else if !self.tcx.sess.features_untracked().const_panic {\n-                        // don't allow panics in constants without the feature gate\n-                        emit_feature_err(\n-                            &self.tcx.sess.parse_sess,\n-                            \"const_panic\",\n-                            self.span,\n-                            GateIssue::Language,\n-                            &format!(\"panicking in {}s is unstable\", self.mode),\n-                        );\n-                    }\n-                } else if let Some(&attr::Stability {\n-                    const_stability: Some(ref feature_name),\n-                .. }) = self.tcx.lookup_stability(def_id) {\n-                    if\n-                        // feature-gate is not enabled,\n-                        !self.tcx.features()\n-                            .declared_lib_features\n-                            .iter()\n-                            .any(|&(ref sym, _)| sym == feature_name) &&\n-\n-                        // this doesn't come from a macro that has #[allow_internal_unstable]\n-                        !self.span.allows_unstable()\n-                    {\n-                        self.qualif = Qualif::NOT_CONST;\n-                        if self.mode != Mode::Fn {\n-                            // inside a constant environment, not having the feature gate is\n-                            // an error\n-                            let mut err = self.tcx.sess.struct_span_err(self.span,\n-                                &format!(\"`{}` is not yet stable as a const fn\",\n-                                        self.tcx.item_path_str(def_id)));\n-                            help!(&mut err,\n-                                \"in Nightly builds, add `#![feature({})]` \\\n-                                to the crate attributes to enable\",\n-                                feature_name);\n-                            err.emit();\n-                        }\n-                    }\n-                }\n-            } else {\n+            // non-const fn calls.\n+            if !is_const_fn {\n                 self.qualif = Qualif::NOT_CONST;\n                 if self.mode != Mode::Fn {\n-                    // FIXME(#24111) Remove this check when const fn stabilizes\n-                    let (msg, note) = if let UnstableFeatures::Disallow =\n-                            self.tcx.sess.opts.unstable_features {\n-                        (format!(\"calls in {}s are limited to \\\n-                                  tuple structs and tuple variants\",\n-                                 self.mode),\n-                         Some(\"a limited form of compile-time function \\\n-                               evaluation is available on a nightly \\\n-                               compiler via `const fn`\"))\n-                    } else {\n-                        (format!(\"calls in {}s are limited \\\n-                                  to constant functions, \\\n-                                  tuple structs and tuple variants\",\n-                                 self.mode),\n-                         None)\n-                    };\n-                    let mut err = struct_span_err!(self.tcx.sess, self.span, E0015, \"{}\", msg);\n-                    if let Some(note) = note {\n-                        err.span_note(self.span, note);\n-                    }\n-                    err.emit();\n+                    self.tcx.sess.delay_span_bug(\n+                        self.span,\n+                        \"should have reported an error about non-const fn calls in constants\",\n+                    )\n                 }\n             }\n "}, {"sha": "5e9169e86a98d7626d2f80889e8b874dd7dd7f9d", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 13, "deletions": 48, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -27,7 +27,6 @@\n use rustc::ty::cast::CastKind;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n-use rustc::hir::map::blocks::FnLikeNode;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n@@ -38,7 +37,6 @@ use rustc::util::nodemap::{ItemLocalSet, NodeSet};\n use rustc::hir;\n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n-use syntax::attr;\n use syntax_pos::{Span, DUMMY_SP};\n use self::Promotability::*;\n use std::ops::{BitAnd, BitAndAssign, BitOr};\n@@ -160,41 +158,15 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n         }\n     }\n \n-    fn handle_const_fn_call(&mut self, def_id: DefId,\n-                            ret_ty: Ty<'gcx>, span: Span) -> Promotability {\n-        if self.type_promotability(ret_ty) == NotPromotable {\n-            return NotPromotable;\n-        }\n-\n-        let node_check = if let Some(fn_id) = self.tcx.hir.as_local_node_id(def_id) {\n-            FnLikeNode::from_node(self.tcx.hir.get(fn_id)).map_or(false, |fn_like| {\n-                fn_like.constness() == hir::Constness::Const\n-            })\n+    fn handle_const_fn_call(\n+        &mut self,\n+        def_id: DefId,\n+    ) -> Promotability {\n+        if self.tcx.is_promotable_const_fn(def_id) {\n+            Promotable\n         } else {\n-            self.tcx.is_const_fn(def_id)\n-        };\n-\n-        if !node_check {\n-            return NotPromotable\n+            NotPromotable\n         }\n-\n-        if let Some(&attr::Stability {\n-            const_stability: Some(ref feature_name),\n-            .. }) = self.tcx.lookup_stability(def_id) {\n-            let stable_check =\n-                // feature-gate is enabled,\n-                self.tcx.features()\n-                    .declared_lib_features\n-                    .iter()\n-                    .any(|&(ref sym, _)| sym == feature_name) ||\n-\n-                    // this comes from a macro that has #[allow_internal_unstable]\n-                    span.allows_unstable();\n-            if !stable_check {\n-                return NotPromotable\n-            }\n-        };\n-        Promotable\n     }\n \n     /// While the `ExprUseVisitor` walks, we will identify which\n@@ -443,14 +415,10 @@ fn check_expr_kind<'a, 'tcx>(\n                 Def::StructCtor(_, CtorKind::Fn) |\n                 Def::VariantCtor(_, CtorKind::Fn) |\n                 Def::SelfCtor(..) => Promotable,\n-                Def::Fn(did) => {\n-                    v.handle_const_fn_call(did, node_ty, e.span)\n-                }\n+                Def::Fn(did) => v.handle_const_fn_call(did),\n                 Def::Method(did) => {\n                     match v.tcx.associated_item(did).container {\n-                        ty::ImplContainer(_) => {\n-                            v.handle_const_fn_call(did, node_ty, e.span)\n-                        }\n+                        ty::ImplContainer(_) => v.handle_const_fn_call(did),\n                         ty::TraitContainer(_) => NotPromotable,\n                     }\n                 }\n@@ -466,16 +434,13 @@ fn check_expr_kind<'a, 'tcx>(\n             if let Some(def) = v.tables.type_dependent_defs().get(e.hir_id) {\n                 let def_id = def.def_id();\n                 match v.tcx.associated_item(def_id).container {\n-                    ty::ImplContainer(_) => {\n-                        method_call_result = method_call_result\n-                            & v.handle_const_fn_call(def_id, node_ty, e.span);\n-                    }\n-                    ty::TraitContainer(_) => return NotPromotable,\n-                };\n+                    ty::ImplContainer(_) => method_call_result & v.handle_const_fn_call(def_id),\n+                    ty::TraitContainer(_) => NotPromotable,\n+                }\n             } else {\n                 v.tcx.sess.delay_span_bug(e.span, \"no type-dependent def for method call\");\n+                NotPromotable\n             }\n-            method_call_result\n         }\n         hir::ExprKind::Struct(ref _qpath, ref hirvec, ref option_expr) => {\n             let mut struct_result = Promotable;"}, {"sha": "c285133f4c052786ba34e64f673bb1925efae486", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -112,6 +112,8 @@ pub struct Stability {\n     /// `Some` contains the feature gate required to be able to use the function\n     /// as const fn\n     pub const_stability: Option<Symbol>,\n+    /// whether the function has a `#[rustc_promotable]` attribute\n+    pub promotable: bool,\n }\n \n /// The available stability levels.\n@@ -176,22 +178,28 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n     let mut stab: Option<Stability> = None;\n     let mut rustc_depr: Option<RustcDeprecation> = None;\n     let mut rustc_const_unstable: Option<Symbol> = None;\n+    let mut promotable = false;\n \n     'outer: for attr in attrs_iter {\n         if ![\n             \"rustc_deprecated\",\n             \"rustc_const_unstable\",\n             \"unstable\",\n             \"stable\",\n+            \"rustc_promotable\",\n         ].iter().any(|&s| attr.path == s) {\n             continue // not a stability level\n         }\n \n         mark_used(attr);\n \n         let meta = attr.meta();\n+\n+        if attr.path == \"rustc_promotable\" {\n+            promotable = true;\n+        }\n         // attributes with data\n-        if let Some(MetaItem { node: MetaItemKind::List(ref metas), .. }) = meta {\n+        else if let Some(MetaItem { node: MetaItemKind::List(ref metas), .. }) = meta {\n             let meta = meta.as_ref().unwrap();\n             let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n                 if item.is_some() {\n@@ -329,6 +337,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                 feature,\n                                 rustc_depr: None,\n                                 const_stability: None,\n+                                promotable: false,\n                             })\n                         }\n                         (None, _, _) => {\n@@ -378,6 +387,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                 feature,\n                                 rustc_depr: None,\n                                 const_stability: None,\n+                                promotable: false,\n                             })\n                         }\n                         (None, _) => {\n@@ -420,6 +430,17 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n         }\n     }\n \n+    // Merge the const-unstable info into the stability info\n+    if promotable {\n+        if let Some(ref mut stab) = stab {\n+            stab.promotable = true;\n+        } else {\n+            span_err!(diagnostic, item_sp, E0713,\n+                      \"rustc_promotable attribute must be paired with \\\n+                       either stable or unstable attribute\");\n+        }\n+    }\n+\n     stab\n }\n "}, {"sha": "b5818036acddea7a62fabd41bc35ec4c31fffdfa", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -413,4 +413,5 @@ register_diagnostics! {\n     E0694, // an unknown tool name found in scoped attributes\n     E0703, // invalid ABI\n     E0704, // incorrect visibility restriction\n+    E0713, // rustc_promotable without stability attribute\n }"}, {"sha": "ed8c4992417afee758adbb250518fd7d3653eb7e", "filename": "src/test/run-pass/invalid_const_promotion.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -14,7 +14,8 @@\n \n // compile-flags: -C debug_assertions=yes\n \n-#![feature(const_fn, libc)]\n+#![stable(feature = \"rustc\", since = \"1.0.0\")]\n+#![feature(const_fn, libc, staged_api, rustc_attrs)]\n #![allow(const_err)]\n \n extern crate libc;\n@@ -23,6 +24,8 @@ use std::env;\n use std::process::{Command, Stdio};\n \n // this will panic in debug mode and overflow in release mode\n+#[stable(feature = \"rustc\", since = \"1.0.0\")]\n+#[rustc_promotable]\n const fn bar() -> usize { 0 - 1 }\n \n fn foo() {"}, {"sha": "88883821073d3b616f8574e32918964a7b445f52", "filename": "src/test/run-pass/issues/issue-49955-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Frun-pass%2Fissues%2Fissue-49955-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Frun-pass%2Fissues%2Fissue-49955-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-49955-2.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -13,13 +13,15 @@\n \n use std::cell::Cell;\n \n+const FIVE: Cell<i32> = Cell::new(5);\n+\n #[inline(never)]\n fn tuple_field() -> &'static u32 {\n     // This test is MIR-borrowck-only because the old borrowck\n     // doesn't agree that borrows of \"frozen\" (i.e. without any\n     // interior mutability) fields of non-frozen temporaries,\n     // should be promoted, while MIR promotion does promote them.\n-    &(Cell::new(5), 42).1\n+    &(FIVE, 42).1\n }\n \n fn main() {"}, {"sha": "18476494300b21febeca61fd40a4b3bf37af454e", "filename": "src/test/ui/consts/const-call.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-call.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -15,5 +15,4 @@ fn f(x: usize) -> usize {\n fn main() {\n     let _ = [0; f(2)];\n     //~^ ERROR calls in constants are limited to constant functions\n-    //~| E0080\n }"}, {"sha": "81be93e916e8bf0c1fbd3a68794f89bd736d4b74", "filename": "src/test/ui/consts/const-call.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-call.stderr?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -4,13 +4,6 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL |     let _ = [0; f(2)];\n    |                 ^^^^\n \n-error[E0080]: could not evaluate repeat length\n-  --> $DIR/const-call.rs:16:17\n-   |\n-LL |     let _ = [0; f(2)];\n-   |                 ^^^^ calling non-const fn `f`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0015, E0080.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "bae8b89f3d0f54f355cec75b0e3bd7db726666d3", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -32,7 +32,7 @@ error[E0716]: temporary value dropped while borrowed\n    |\n LL |     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n-LL |     //~^ does not live long enough\n+LL |     //~^ ERROR does not live long enough\n LL | }\n    | - temporary value is freed at the end of this statement\n    |"}, {"sha": "a371d5485e1467fb82326ae1f22b99e0bdd0e08f", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -31,5 +31,5 @@ fn a() {\n fn main() {\n     let _: &'static u32 = &meh(); //~ ERROR does not live long enough\n     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n-    //~^ does not live long enough\n+    //~^ ERROR does not live long enough\n }"}, {"sha": "b3d7ba3e5c47a73e9ab9e6575f9a517e78fa71b9", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -32,7 +32,7 @@ error[E0597]: borrowed value does not live long enough\n    |\n LL |     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n-LL |     //~^ does not live long enough\n+LL |     //~^ ERROR does not live long enough\n LL | }\n    | - temporary value only lives until here\n    |"}, {"sha": "8c6beda6fb9189ba3eac86c42b654192545530a2", "filename": "src/test/ui/consts/const-eval/issue-52443.stderr", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52443.stderr?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -43,7 +43,28 @@ error[E0080]: could not evaluate repeat length\n LL |     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n    |          ^^^^^^^^^^^--------^^^^^^^\n    |                     |\n-   |                     calling non-const fn `<I as std::iter::IntoIterator><std::ops::RangeFrom<usize>>::into_iter`\n+   |                     inside call to `std::iter::range::<impl std::iter::Iterator for std::ops::RangeFrom<A>><usize>::next`\n+   | \n+  ::: $SRC_DIR/libcore/ptr.rs:LL:COL\n+   |\n+LL |         let z = read(x);\n+   |                 ------- inside call to `std::ptr::read::<usize>`\n+...\n+LL |     let mut tmp: T = mem::uninitialized();\n+   |                      -------------------- inside call to `std::mem::uninitialized::<usize>`\n+   | \n+  ::: $SRC_DIR/libcore/iter/range.rs:LL:COL\n+   |\n+LL |         mem::swap(&mut n, &mut self.start);\n+   |         ---------------------------------- inside call to `std::mem::swap::<usize>`\n+   | \n+  ::: $SRC_DIR/libcore/mem.rs:LL:COL\n+   |\n+LL |     intrinsics::uninit()\n+   |     -------------------- \"calling intrinsic `uninit`\" needs an rfc before being allowed inside constants\n+...\n+LL |         ptr::swap_nonoverlapping_one(x, y);\n+   |         ---------------------------------- inside call to `std::ptr::swap_nonoverlapping_one::<usize>`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b8e2d6a96c509c150d48d6aa7d3b33df0d931aad", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.nll.stderr?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -0,0 +1,14 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_fn_fail.rs:30:27\n+   |\n+LL |     let x: &'static u8 = &(bar() + 1); //~ ERROR does not live long enough\n+   |                           ^^^^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "9b03ddd189168bdc09fbd6899a6e8eeee2acd240", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-pass\n-\n #![feature(const_fn, const_fn_union)]\n \n #![deny(const_err)]\n@@ -29,10 +27,7 @@ const fn bar() -> u8 {\n }\n \n fn main() {\n-    // FIXME(oli-obk): this should panic at runtime\n-    // this will actually compile, but then\n-    // abort at runtime (not panic, hard abort).\n-    let x: &'static u8 = &(bar() + 1);\n+    let x: &'static u8 = &(bar() + 1); //~ ERROR does not live long enough\n     let y = *x;\n     unreachable!();\n }"}, {"sha": "4d80f701bcf04cd5b36e7c69c86273c0b9518096", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promoted_const_fn_fail.rs:30:27\n+   |\n+LL |     let x: &'static u8 = &(bar() + 1); //~ ERROR does not live long enough\n+   |                           ^^^^^^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "439493a1e80588e76bdcf9fe3fba779ab7d41935", "filename": "src/test/ui/consts/const-fn-error.stderr", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -30,12 +30,33 @@ error[E0080]: could not evaluate constant expression\n   --> $DIR/const-fn-error.rs:29:13\n    |\n LL |     for i in 0..x {\n-   |              ---- calling non-const fn `<I as std::iter::IntoIterator><std::ops::Range<usize>>::into_iter`\n+   |              ---- inside call to `std::iter::range::<impl std::iter::Iterator for std::ops::Range<A>><usize>::next`\n ...\n LL |     let a : [i32; f(X)]; //~ ERROR E0080\n    |             ^^^^^^----^\n    |                   |\n    |                   inside call to `f`\n+   | \n+  ::: $SRC_DIR/libcore/ptr.rs:LL:COL\n+   |\n+LL |         let z = read(x);\n+   |                 ------- inside call to `std::ptr::read::<usize>`\n+...\n+LL |     let mut tmp: T = mem::uninitialized();\n+   |                      -------------------- inside call to `std::mem::uninitialized::<usize>`\n+   | \n+  ::: $SRC_DIR/libcore/iter/range.rs:LL:COL\n+   |\n+LL |                 mem::swap(&mut n, &mut self.start);\n+   |                 ---------------------------------- inside call to `std::mem::swap::<usize>`\n+   | \n+  ::: $SRC_DIR/libcore/mem.rs:LL:COL\n+   |\n+LL |     intrinsics::uninit()\n+   |     -------------------- \"calling intrinsic `uninit`\" needs an rfc before being allowed inside constants\n+...\n+LL |         ptr::swap_nonoverlapping_one(x, y);\n+   |         ---------------------------------- inside call to `std::ptr::swap_nonoverlapping_one::<usize>`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "999c26b535e9ca32b2f8ecbd7a3f1007b3c2ee42", "filename": "src/test/ui/consts/min_const_fn/promotion.nll.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.nll.stderr?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -0,0 +1,68 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promotion.rs:13:27\n+   |\n+LL |     let x: &'static () = &foo1(); //~ ERROR does not live long enough\n+   |                           ^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promotion.rs:14:28\n+   |\n+LL |     let y: &'static i32 = &foo2(42); //~ ERROR does not live long enough\n+   |                            ^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promotion.rs:15:28\n+   |\n+LL |     let z: &'static i32 = &foo3(); //~ ERROR does not live long enough\n+   |                            ^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promotion.rs:16:34\n+   |\n+LL |     let a: &'static Cell<i32> = &foo4();  //~ ERROR does not live long enough\n+   |                                  ^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promotion.rs:17:42\n+   |\n+LL |     let a: &'static Option<Cell<i32>> = &foo5(); //~ ERROR does not live long enough\n+   |                                          ^^^^^^ creates a temporary which is freed while still in use\n+LL |     let a: &'static Option<Cell<i32>> = &foo6(); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promotion.rs:18:42\n+   |\n+LL |     let a: &'static Option<Cell<i32>> = &foo6(); //~ ERROR does not live long enough\n+   |                                          ^^^^^^ creates a temporary which is freed while still in use\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "cb3bfd74711cae8f418d7be988752dca25d86044", "filename": "src/test/ui/consts/min_const_fn/promotion.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -0,0 +1,19 @@\n+#![feature(min_const_fn)]\n+\n+use std::cell::Cell;\n+\n+const fn foo1() {}\n+const fn foo2(x: i32) -> i32 { x }\n+const fn foo3() -> i32 { 42 }\n+const fn foo4() -> Cell<i32> { Cell::new(42) }\n+const fn foo5() -> Option<Cell<i32>> { Some(Cell::new(42)) }\n+const fn foo6() -> Option<Cell<i32>> { None }\n+\n+fn main() {\n+    let x: &'static () = &foo1(); //~ ERROR does not live long enough\n+    let y: &'static i32 = &foo2(42); //~ ERROR does not live long enough\n+    let z: &'static i32 = &foo3(); //~ ERROR does not live long enough\n+    let a: &'static Cell<i32> = &foo4();  //~ ERROR does not live long enough\n+    let a: &'static Option<Cell<i32>> = &foo5(); //~ ERROR does not live long enough\n+    let a: &'static Option<Cell<i32>> = &foo6(); //~ ERROR does not live long enough\n+}"}, {"sha": "68d584658223f9d607a1c3325dd2602f26e8373a", "filename": "src/test/ui/consts/min_const_fn/promotion.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.stderr?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -0,0 +1,68 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promotion.rs:13:27\n+   |\n+LL |     let x: &'static () = &foo1(); //~ ERROR does not live long enough\n+   |                           ^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promotion.rs:14:28\n+   |\n+LL |     let y: &'static i32 = &foo2(42); //~ ERROR does not live long enough\n+   |                            ^^^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promotion.rs:15:28\n+   |\n+LL |     let z: &'static i32 = &foo3(); //~ ERROR does not live long enough\n+   |                            ^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promotion.rs:16:34\n+   |\n+LL |     let a: &'static Cell<i32> = &foo4();  //~ ERROR does not live long enough\n+   |                                  ^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promotion.rs:17:42\n+   |\n+LL |     let a: &'static Option<Cell<i32>> = &foo5(); //~ ERROR does not live long enough\n+   |                                          ^^^^^^ temporary value does not live long enough\n+LL |     let a: &'static Option<Cell<i32>> = &foo6(); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promotion.rs:18:42\n+   |\n+LL |     let a: &'static Option<Cell<i32>> = &foo6(); //~ ERROR does not live long enough\n+   |                                          ^^^^^^ temporary value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "2e480a29774ceb8bb100c04219c72c59e0183aae", "filename": "src/test/ui/issues/issue-39559-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -23,8 +23,6 @@ impl Dim for Dim3 {\n fn main() {\n     let array: [usize; Dim3::dim()]\n     //~^ ERROR E0015\n-    //~| ERROR E0080\n         = [0; Dim3::dim()];\n         //~^ ERROR E0015\n-        //~| ERROR E0080\n }"}, {"sha": "ca9da096b6c16e2139ccd353b1fdfd4a3fb777c9", "filename": "src/test/ui/issues/issue-39559-2.stderr", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -5,26 +5,11 @@ LL |     let array: [usize; Dim3::dim()]\n    |                        ^^^^^^^^^^^\n \n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-39559-2.rs:27:15\n+  --> $DIR/issue-39559-2.rs:26:15\n    |\n LL |         = [0; Dim3::dim()];\n    |               ^^^^^^^^^^^\n \n-error[E0080]: could not evaluate repeat length\n-  --> $DIR/issue-39559-2.rs:27:15\n-   |\n-LL |         = [0; Dim3::dim()];\n-   |               ^^^^^^^^^^^ calling non-const fn `<Dim3 as Dim>::dim`\n-\n-error[E0080]: could not evaluate constant expression\n-  --> $DIR/issue-39559-2.rs:24:16\n-   |\n-LL |     let array: [usize; Dim3::dim()]\n-   |                ^^^^^^^^-----------^\n-   |                        |\n-   |                        calling non-const fn `<Dim3 as Dim>::dim`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0015, E0080.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "2bddc443d5baf8a564f20b6a6879b4184879dc18", "filename": "src/test/ui/issues/issue-43105.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -16,7 +16,6 @@ const NUM: u8 = xyz();\n fn main() {\n     match 1 {\n         NUM => unimplemented!(),\n-        //~^ ERROR could not evaluate constant pattern\n         _ => unimplemented!(),\n     }\n }"}, {"sha": "67a6008cd8ebc9dc80e4a7ae4ef8be48914935cf", "filename": "src/test/ui/issues/issue-43105.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -4,16 +4,6 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL | const NUM: u8 = xyz();\n    |                 ^^^^^\n \n-error[E0080]: could not evaluate constant pattern\n-  --> $DIR/issue-43105.rs:18:9\n-   |\n-LL | const NUM: u8 = xyz();\n-   |                 ----- calling non-const fn `xyz`\n-...\n-LL |         NUM => unimplemented!(),\n-   |         ^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0015, E0080.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "15465ac52aa43c35104065f25c5debd8403781a3", "filename": "src/test/ui/rustc-args-required-const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Frustc-args-required-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Frustc-args-required-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-args-required-const.rs?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -27,7 +27,8 @@ const fn baz() -> i32 {\n fn main() {\n     foo(2);\n     foo(2 + 3);\n-    foo(baz());\n+    const BAZ: i32 = baz();\n+    foo(BAZ);\n     let a = 4;\n     foo(A);\n     foo(a); //~ ERROR: argument 1 is required to be a constant"}, {"sha": "efd4c58f152a7b7844c4e2801da3359d09d61d72", "filename": "src/test/ui/rustc-args-required-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Frustc-args-required-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c0b68938e0bb568358e49cd1b40c2700c58d/src%2Ftest%2Fui%2Frustc-args-required-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-args-required-const.stderr?ref=9e46c0b68938e0bb568358e49cd1b40c2700c58d", "patch": "@@ -1,11 +1,11 @@\n error: argument 1 is required to be a constant\n-  --> $DIR/rustc-args-required-const.rs:33:5\n+  --> $DIR/rustc-args-required-const.rs:34:5\n    |\n LL |     foo(a); //~ ERROR: argument 1 is required to be a constant\n    |     ^^^^^^\n \n error: argument 2 is required to be a constant\n-  --> $DIR/rustc-args-required-const.rs:35:5\n+  --> $DIR/rustc-args-required-const.rs:36:5\n    |\n LL |     bar(a, a); //~ ERROR: argument 2 is required to be a constant\n    |     ^^^^^^^^^"}]}