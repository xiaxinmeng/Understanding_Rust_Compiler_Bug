{"sha": "b10b9e25ffcb06077375960f07a0c6443184f07a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMGI5ZTI1ZmZjYjA2MDc3Mzc1OTYwZjA3YTBjNjQ0MzE4NGYwN2E=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2021-01-07T17:41:58Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2021-01-07T17:41:58Z"}, "message": "Remove \"pointer describes\" terminology", "tree": {"sha": "2010400bb1c2c28c33426aa38c7c6386fdd4324b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2010400bb1c2c28c33426aa38c7c6386fdd4324b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b10b9e25ffcb06077375960f07a0c6443184f07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b10b9e25ffcb06077375960f07a0c6443184f07a", "html_url": "https://github.com/rust-lang/rust/commit/b10b9e25ffcb06077375960f07a0c6443184f07a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b10b9e25ffcb06077375960f07a0c6443184f07a/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f00b45890311da955bf2081a0fab2837f3a36a4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f00b45890311da955bf2081a0fab2837f3a36a4d", "html_url": "https://github.com/rust-lang/rust/commit/f00b45890311da955bf2081a0fab2837f3a36a4d"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "7f500af59a8df26eaf8e88f436f54fb1fa4b103f", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b10b9e25ffcb06077375960f07a0c6443184f07a/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b9e25ffcb06077375960f07a0c6443184f07a/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=b10b9e25ffcb06077375960f07a0c6443184f07a", "patch": "@@ -1899,7 +1899,7 @@ impl<T: ?Sized> Weak<T> {\n             // a valid pointer, so that `from_raw` can reverse this transformation.\n             (ptr as *mut T).set_ptr_value(ptr::null_mut())\n         } else {\n-            // SAFETY: If the pointer is not dangling, it describes to a valid allocation.\n+            // SAFETY: If the pointer is not dangling, it references a valid allocation.\n             // The payload may be dropped at this point, and we have to maintain provenance,\n             // so use raw pointer manipulation.\n             unsafe { &raw mut (*ptr).value }\n@@ -1991,8 +1991,8 @@ impl<T: ?Sized> Weak<T> {\n             // SAFETY: this is the same sentinel as used in Weak::new and is_dangling\n             (ptr as *mut RcBox<T>).set_ptr_value(usize::MAX as *mut _)\n         } else {\n-            // Otherwise, this describes a real allocation.\n-            // SAFETY: data_offset is safe to call, as ptr describes a real allocation.\n+            // Otherwise, this references a real allocation.\n+            // SAFETY: data_offset is safe to call, as ptr references a real (potentially dropped) T.\n             let offset = unsafe { data_offset(ptr) };\n             // Thus, we reverse the offset to get the whole RcBox.\n             // SAFETY: the pointer originated from a Weak, so this offset is safe.\n@@ -2320,8 +2320,7 @@ impl<T: ?Sized> AsRef<T> for Rc<T> {\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Rc<T> {}\n \n-/// Get the offset within an `RcBox` for\n-/// a payload of type described by a pointer.\n+/// Get the offset within an `RcBox` for the payload behind a pointer.\n ///\n /// # Safety\n ///"}, {"sha": "e2811a5cd6cee765b58902a0f426e6fcd71d330e", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b10b9e25ffcb06077375960f07a0c6443184f07a/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10b9e25ffcb06077375960f07a0c6443184f07a/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=b10b9e25ffcb06077375960f07a0c6443184f07a", "patch": "@@ -1685,7 +1685,7 @@ impl<T: ?Sized> Weak<T> {\n             // a valid pointer, so that `from_raw` can reverse this transformation.\n             (ptr as *mut T).set_ptr_value(ptr::null_mut())\n         } else {\n-            // SAFETY: If the pointer is not dangling, it describes to a valid allocation.\n+            // SAFETY: If the pointer is not dangling, it references a valid allocation.\n             // The payload may be dropped at this point, and we have to maintain provenance,\n             // so use raw pointer manipulation.\n             unsafe { &raw mut (*ptr).data }\n@@ -1777,8 +1777,8 @@ impl<T: ?Sized> Weak<T> {\n             // SAFETY: this is the same sentinel as used in Weak::new and is_dangling\n             (ptr as *mut ArcInner<T>).set_ptr_value(usize::MAX as *mut _)\n         } else {\n-            // Otherwise, this describes a real allocation.\n-            // SAFETY: data_offset is safe to call, as ptr describes a real allocation.\n+            // Otherwise, this references a real allocation.\n+            // SAFETY: data_offset is safe to call, as ptr references a real (potentially dropped) T.\n             let offset = unsafe { data_offset(ptr) };\n             // Thus, we reverse the offset to get the whole RcBox.\n             // SAFETY: the pointer originated from a Weak, so this offset is safe.\n@@ -2471,8 +2471,7 @@ impl<T: ?Sized> AsRef<T> for Arc<T> {\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Arc<T> {}\n \n-/// Get the offset within an `ArcInner` for\n-/// a payload of type described by a pointer.\n+/// Get the offset within an `ArcInner` for the payload behind a pointer.\n ///\n /// # Safety\n ///"}]}