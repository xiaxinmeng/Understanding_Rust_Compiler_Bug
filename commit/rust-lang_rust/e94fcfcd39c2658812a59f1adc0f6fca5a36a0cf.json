{"sha": "e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NGZjZmNkMzljMjY1ODgxMmE1OWYxYWRjMGY2ZmNhNWEzNmEwY2Y=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-11T14:27:02Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-11T14:27:02Z"}, "message": "Update tests", "tree": {"sha": "59e834b46909e24b623b5070c9c11048e4cdf69b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59e834b46909e24b623b5070c9c11048e4cdf69b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf", "html_url": "https://github.com/rust-lang/rust/commit/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f135641cc873c21ea8768a78534efc9ff3f4bb82", "url": "https://api.github.com/repos/rust-lang/rust/commits/f135641cc873c21ea8768a78534efc9ff3f4bb82", "html_url": "https://github.com/rust-lang/rust/commit/f135641cc873c21ea8768a78534efc9ff3f4bb82"}], "stats": {"total": 245, "additions": 236, "deletions": 9}, "files": [{"sha": "c36b7e6cadb1acc5f3f90e471d12ae4767560c4d", "filename": "tests/source/big-impl.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf/tests%2Fsource%2Fbig-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf/tests%2Fsource%2Fbig-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fbig-impl.rs?ref=e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf", "patch": "@@ -0,0 +1,104 @@\n+// #1357\n+impl<\n+    'a,\n+    Select,\n+    From,\n+    Distinct,\n+    Where,\n+    Order,\n+    Limit,\n+    Offset,\n+    Groupby,\n+    DB,\n+> InternalBoxedDsl<'a, DB>\n+    for SelectStatement<\n+        Select,\n+        From,\n+        Distinct,\n+        Where,\n+        Order,\n+        Limit,\n+        Offset,\n+        GroupBy,\n+    > where\n+        DB: Backend,\n+        Select: QueryFragment<DB> + SelectableExpression<From> + 'a,\n+        Distinct: QueryFragment<DB> + 'a,\n+        Where: Into<Option<Box<QueryFragment<DB> + 'a>>>,\n+        Order: QueryFragment<DB> + 'a,\n+        Limit: QueryFragment<DB> + 'a,\n+        Offset: QueryFragment<DB> + 'a,\n+{\n+    type Output = BoxedSelectStatement<'a, Select::SqlTypeForSelect, From, DB>;\n+\n+    fn internal_into_boxed(self) -> Self::Output {\n+        BoxedSelectStatement::new(\n+            Box::new(self.select),\n+            self.from,\n+            Box::new(self.distinct),\n+            self.where_clause.into(),\n+            Box::new(self.order),\n+            Box::new(self.limit),\n+            Box::new(self.offset),\n+        )\n+    }\n+}\n+\n+// #1369\n+impl<\n+    ExcessivelyLongGenericName,\n+      ExcessivelyLongGenericName,\n+    AnotherExcessivelyLongGenericName,\n+> Foo for Bar {\n+    fn foo() {}\n+}\n+impl Foo<\n+    ExcessivelyLongGenericName,\n+      ExcessivelyLongGenericName,\n+    AnotherExcessivelyLongGenericName,\n+> for Bar {\n+    fn foo() {}\n+}\n+impl<\n+    ExcessivelyLongGenericName,\n+    ExcessivelyLongGenericName,\n+    AnotherExcessivelyLongGenericName,\n+> Foo<\n+    ExcessivelyLongGenericName,\n+      ExcessivelyLongGenericName,\n+    AnotherExcessivelyLongGenericName,\n+> for Bar {\n+    fn foo() {}\n+}\n+impl<\n+    ExcessivelyLongGenericName,\n+      ExcessivelyLongGenericName,\n+    AnotherExcessivelyLongGenericName,\n+> Foo for Bar<\n+    ExcessivelyLongGenericName,\n+    ExcessivelyLongGenericName,\n+    AnotherExcessivelyLongGenericName,\n+> {\n+    fn foo() {}\n+}\n+impl Foo<\n+    ExcessivelyLongGenericName,\n+      ExcessivelyLongGenericName,\n+    AnotherExcessivelyLongGenericName,\n+> for Bar<\n+    ExcessivelyLongGenericName,\n+    ExcessivelyLongGenericName,\n+    AnotherExcessivelyLongGenericName,\n+> {\n+    fn foo() {}\n+}\n+impl<ExcessivelyLongGenericName,\n+     ExcessivelyLongGenericName,\n+     AnotherExcessivelyLongGenericName> Foo<ExcessivelyLongGenericName,\n+                                            ExcessivelyLongGenericName,\n+                                            AnotherExcessivelyLongGenericName>\n+    for Bar<ExcessivelyLongGenericName,\n+            ExcessivelyLongGenericName,\n+            AnotherExcessivelyLongGenericName> {\n+    fn foo() {}\n+}"}, {"sha": "17588fb9d3500c87a2e317880f2cb45369a58024", "filename": "tests/source/impls.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf/tests%2Fsource%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf/tests%2Fsource%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimpls.rs?ref=e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf", "patch": "@@ -122,3 +122,20 @@ impl<ConcreteThreadSafeLayoutNode: ThreadSafeLayoutNodeFoo> Issue1249<ConcreteTh\n impl<#[may_dangle] K, #[may_dangle] V> Drop for RawTable<K, V> {\n     fn drop() {}\n }\n+\n+// #1168\n+pub trait Number: Copy + Eq +      Not<Output = Self> + Shl<u8, Output = Self> +\n+    Shr<u8, Output = Self>       +\n+    BitAnd<Self, Output=Self> +    BitOr<Self, Output=Self>  + BitAndAssign + BitOrAssign\n+\n+\n+\n+{\n+    // test\n+    fn zero() -> Self;\n+}\n+\n+// #1642\n+pub trait SomeTrait : Clone + Eq + PartialEq + Ord + PartialOrd + Default + Hash + Debug + Display + Write + Read + FromStr {\n+    // comment\n+}"}, {"sha": "108968faaed722507c52adb19ba2f1e8ec25ec6d", "filename": "tests/target/big-impl-rfc.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf/tests%2Ftarget%2Fbig-impl-rfc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf/tests%2Ftarget%2Fbig-impl-rfc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fbig-impl-rfc.rs?ref=e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf", "patch": "@@ -5,7 +5,7 @@\n \n // #1357\n impl<'a, Select, From, Distinct, Where, Order, Limit, Offset, Groupby, DB> InternalBoxedDsl<'a, DB>\n-for SelectStatement<Select, From, Distinct, Where, Order, Limit, Offset, GroupBy>\n+    for SelectStatement<Select, From, Distinct, Where, Order, Limit, Offset, GroupBy>\n where\n     DB: Backend,\n     Select: QueryFragment<DB> + SelectableExpression<From> + 'a,\n@@ -32,34 +32,46 @@ where\n \n // #1369\n impl<ExcessivelyLongGenericName, ExcessivelyLongGenericName, AnotherExcessivelyLongGenericName> Foo\n-for Bar {\n+    for Bar {\n     fn foo() {}\n }\n impl Foo<ExcessivelyLongGenericName, ExcessivelyLongGenericName, AnotherExcessivelyLongGenericName>\n-for Bar {\n+    for Bar {\n     fn foo() {}\n }\n impl<\n     ExcessivelyLongGenericName,\n     ExcessivelyLongGenericName,\n     AnotherExcessivelyLongGenericName,\n > Foo<ExcessivelyLongGenericName, ExcessivelyLongGenericName, AnotherExcessivelyLongGenericName>\n-for Bar {\n+    for Bar {\n     fn foo() {}\n }\n impl<ExcessivelyLongGenericName, ExcessivelyLongGenericName, AnotherExcessivelyLongGenericName> Foo\n-for Bar<ExcessivelyLongGenericName, ExcessivelyLongGenericName, AnotherExcessivelyLongGenericName> {\n+    for Bar<\n+        ExcessivelyLongGenericName,\n+        ExcessivelyLongGenericName,\n+        AnotherExcessivelyLongGenericName,\n+    > {\n     fn foo() {}\n }\n impl Foo<ExcessivelyLongGenericName, ExcessivelyLongGenericName, AnotherExcessivelyLongGenericName>\n-for Bar<ExcessivelyLongGenericName, ExcessivelyLongGenericName, AnotherExcessivelyLongGenericName> {\n+    for Bar<\n+        ExcessivelyLongGenericName,\n+        ExcessivelyLongGenericName,\n+        AnotherExcessivelyLongGenericName,\n+    > {\n     fn foo() {}\n }\n impl<\n     ExcessivelyLongGenericName,\n     ExcessivelyLongGenericName,\n     AnotherExcessivelyLongGenericName,\n > Foo<ExcessivelyLongGenericName, ExcessivelyLongGenericName, AnotherExcessivelyLongGenericName>\n-for Bar<ExcessivelyLongGenericName, ExcessivelyLongGenericName, AnotherExcessivelyLongGenericName> {\n+    for Bar<\n+        ExcessivelyLongGenericName,\n+        ExcessivelyLongGenericName,\n+        AnotherExcessivelyLongGenericName,\n+    > {\n     fn foo() {}\n }"}, {"sha": "afe2571ec68608312651c47d3a8f5c1e370b71c5", "filename": "tests/target/big-impl.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf/tests%2Ftarget%2Fbig-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf/tests%2Ftarget%2Fbig-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fbig-impl.rs?ref=e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf", "patch": "@@ -0,0 +1,62 @@\n+// #1357\n+impl<'a, Select, From, Distinct, Where, Order, Limit, Offset, Groupby, DB> InternalBoxedDsl<'a, DB>\n+    for SelectStatement<Select, From, Distinct, Where, Order, Limit, Offset, GroupBy>\n+    where DB: Backend,\n+          Select: QueryFragment<DB> + SelectableExpression<From> + 'a,\n+          Distinct: QueryFragment<DB> + 'a,\n+          Where: Into<Option<Box<QueryFragment<DB> + 'a>>>,\n+          Order: QueryFragment<DB> + 'a,\n+          Limit: QueryFragment<DB> + 'a,\n+          Offset: QueryFragment<DB> + 'a\n+{\n+    type Output = BoxedSelectStatement<'a, Select::SqlTypeForSelect, From, DB>;\n+\n+    fn internal_into_boxed(self) -> Self::Output {\n+        BoxedSelectStatement::new(Box::new(self.select),\n+                                  self.from,\n+                                  Box::new(self.distinct),\n+                                  self.where_clause.into(),\n+                                  Box::new(self.order),\n+                                  Box::new(self.limit),\n+                                  Box::new(self.offset))\n+    }\n+}\n+\n+// #1369\n+impl<ExcessivelyLongGenericName, ExcessivelyLongGenericName, AnotherExcessivelyLongGenericName> Foo\n+    for Bar {\n+    fn foo() {}\n+}\n+impl Foo<ExcessivelyLongGenericName, ExcessivelyLongGenericName, AnotherExcessivelyLongGenericName>\n+    for Bar {\n+    fn foo() {}\n+}\n+impl<ExcessivelyLongGenericName,\n+     ExcessivelyLongGenericName,\n+     AnotherExcessivelyLongGenericName> Foo<ExcessivelyLongGenericName,\n+                                            ExcessivelyLongGenericName,\n+                                            AnotherExcessivelyLongGenericName> for Bar {\n+    fn foo() {}\n+}\n+impl<ExcessivelyLongGenericName, ExcessivelyLongGenericName, AnotherExcessivelyLongGenericName> Foo\n+    for Bar<ExcessivelyLongGenericName,\n+            ExcessivelyLongGenericName,\n+            AnotherExcessivelyLongGenericName> {\n+    fn foo() {}\n+}\n+impl Foo<ExcessivelyLongGenericName, ExcessivelyLongGenericName, AnotherExcessivelyLongGenericName>\n+    for Bar<ExcessivelyLongGenericName,\n+            ExcessivelyLongGenericName,\n+            AnotherExcessivelyLongGenericName> {\n+    fn foo() {}\n+}\n+impl<ExcessivelyLongGenericName,\n+     ExcessivelyLongGenericName,\n+     AnotherExcessivelyLongGenericName> Foo<ExcessivelyLongGenericName,\n+                                            ExcessivelyLongGenericName,\n+                                            AnotherExcessivelyLongGenericName>\n+    for Bar<ExcessivelyLongGenericName,\n+            ExcessivelyLongGenericName,\n+            AnotherExcessivelyLongGenericName> {\n+    fn foo() {}\n+}"}, {"sha": "654d4be8967b6bbbde6f817a04971f3544fc0775", "filename": "tests/target/impls.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf/tests%2Ftarget%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf/tests%2Ftarget%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpls.rs?ref=e94fcfcd39c2658812a59f1adc0f6fca5a36a0cf", "patch": "@@ -126,8 +126,8 @@ mod m {\n     impl<T> PartialEq for S<T> where T: PartialEq {}\n }\n \n-impl<BorrowType, K, V, NodeType, HandleType> Handle<NodeRef<BorrowType, K, V, NodeType>,\n-                                                    HandleType> {\n+impl<BorrowType, K, V, NodeType, HandleType>\n+    Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType> {\n }\n \n impl<BorrowType, K, V, NodeType, HandleType> PartialEq\n@@ -154,3 +154,35 @@ impl<ConcreteThreadSafeLayoutNode: ThreadSafeLayoutNodeFoo>\n impl<#[may_dangle] K, #[may_dangle] V> Drop for RawTable<K, V> {\n     fn drop() {}\n }\n+\n+// #1168\n+pub trait Number\n+    : Copy\n+    + Eq\n+    + Not<Output = Self>\n+    + Shl<u8, Output = Self>\n+    + Shr<u8, Output = Self>\n+    + BitAnd<Self, Output = Self>\n+    + BitOr<Self, Output = Self>\n+    + BitAndAssign\n+    + BitOrAssign {\n+    // test\n+    fn zero() -> Self;\n+}\n+\n+// #1642\n+pub trait SomeTrait\n+    : Clone\n+    + Eq\n+    + PartialEq\n+    + Ord\n+    + PartialOrd\n+    + Default\n+    + Hash\n+    + Debug\n+    + Display\n+    + Write\n+    + Read\n+    + FromStr {\n+    // comment\n+}"}]}