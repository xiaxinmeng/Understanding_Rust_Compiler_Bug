{"sha": "75074e0e528cf8a50310bc0de19f73b60e8c8304", "node_id": "C_kwDOAAsO6NoAKDc1MDc0ZTBlNTI4Y2Y4YTUwMzEwYmMwZGUxOWY3M2I2MGU4YzgzMDQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-11T20:26:12Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-13T23:19:36Z"}, "message": "Delay normalization bugs instead of reporting them", "tree": {"sha": "f35f28794f2cc2d063b6d739b6df58b1dc1fa160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f35f28794f2cc2d063b6d739b6df58b1dc1fa160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75074e0e528cf8a50310bc0de19f73b60e8c8304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75074e0e528cf8a50310bc0de19f73b60e8c8304", "html_url": "https://github.com/rust-lang/rust/commit/75074e0e528cf8a50310bc0de19f73b60e8c8304", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75074e0e528cf8a50310bc0de19f73b60e8c8304/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ec8c13e15824d5b0dbdca5ab404d15af3e68f48", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec8c13e15824d5b0dbdca5ab404d15af3e68f48", "html_url": "https://github.com/rust-lang/rust/commit/6ec8c13e15824d5b0dbdca5ab404d15af3e68f48"}], "stats": {"total": 52, "additions": 19, "deletions": 33}, "files": [{"sha": "a41a601f2db076a700bdb32b787a202268f2a914", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75074e0e528cf8a50310bc0de19f73b60e8c8304/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75074e0e528cf8a50310bc0de19f73b60e8c8304/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=75074e0e528cf8a50310bc0de19f73b60e8c8304", "patch": "@@ -8,8 +8,6 @@ use rustc_infer::infer::{RegionResolutionError, TyCtxtInferExt};\n use rustc_infer::{infer::outlives::env::OutlivesEnvironment, traits::FulfillmentError};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n \n-use crate::traits::error_reporting::TypeErrCtxtExt;\n-\n use super::outlives_bounds::InferCtxtExt;\n \n pub enum CopyImplementationError<'tcx> {\n@@ -60,8 +58,8 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n             let infcx = tcx.infer_ctxt().build();\n             let ocx = traits::ObligationCtxt::new(&infcx);\n \n-            let ty = field.ty(tcx, substs);\n-            if ty.references_error() {\n+            let unnormalized_ty = field.ty(tcx, substs);\n+            if unnormalized_ty.references_error() {\n                 continue;\n             }\n \n@@ -84,12 +82,10 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n             } else {\n                 ObligationCause::dummy_with_span(field_ty_span)\n             };\n-            let ty = ocx.normalize(&normalization_cause, param_env, ty);\n+            let ty = ocx.normalize(&normalization_cause, param_env, unnormalized_ty);\n             let normalization_errors = ocx.select_where_possible();\n             if !normalization_errors.is_empty() {\n-                // Don't report this as a field that doesn't implement Copy,\n-                // but instead just implement this as a field that isn't WF.\n-                infcx.err_ctxt().report_fulfillment_errors(&normalization_errors, None);\n+                tcx.sess.delay_span_bug(field_span, format!(\"couldn't normalize struct field `{unnormalized_ty}` when checking Copy implementation\"));\n                 continue;\n             }\n "}, {"sha": "86c511c0895670325eede43ff595e3db6e964e50", "filename": "tests/ui/traits/copy-impl-cannot-normalize.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75074e0e528cf8a50310bc0de19f73b60e8c8304/tests%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75074e0e528cf8a50310bc0de19f73b60e8c8304/tests%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr?ref=75074e0e528cf8a50310bc0de19f73b60e8c8304", "patch": "@@ -4,6 +4,16 @@ error[E0277]: the trait bound `T: TraitFoo` is not satisfied\n LL | impl<T> Copy for Foo<T> {}\n    |                  ^^^^^^ the trait `TraitFoo` is not implemented for `T`\n    |\n+note: required for `Foo<T>` to implement `Clone`\n+  --> $DIR/copy-impl-cannot-normalize.rs:12:9\n+   |\n+LL | impl<T> Clone for Foo<T>\n+   |         ^^^^^     ^^^^^^\n+LL | where\n+LL |     T: TraitFoo,\n+   |        -------- unsatisfied trait bound introduced here\n+note: required by a bound in `Copy`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: TraitFoo> Copy for Foo<T> {}"}, {"sha": "005939e0c46e4d39093d411cfaa3a832cdaa9545", "filename": "tests/ui/traits/issue-50480.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75074e0e528cf8a50310bc0de19f73b60e8c8304/tests%2Fui%2Ftraits%2Fissue-50480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75074e0e528cf8a50310bc0de19f73b60e8c8304/tests%2Fui%2Ftraits%2Fissue-50480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-50480.rs?ref=75074e0e528cf8a50310bc0de19f73b60e8c8304", "patch": "@@ -5,13 +5,11 @@ struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n //~| ERROR cannot find type `NotDefined` in this scope\n //~| ERROR cannot find type `N` in this scope\n //~| ERROR cannot find type `N` in this scope\n-//~| ERROR `i32` is not an iterator\n \n #[derive(Clone, Copy)]\n //~^ ERROR the trait `Copy` may not be implemented for this type\n struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n //~^ ERROR cannot find type `NotDefined` in this scope\n //~| ERROR cannot find type `N` in this scope\n-//~| ERROR `i32` is not an iterator\n \n fn main() {}"}, {"sha": "5063fdca092731aeb154a9b66a55cff4b94006bb", "filename": "tests/ui/traits/issue-50480.stderr", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/75074e0e528cf8a50310bc0de19f73b60e8c8304/tests%2Fui%2Ftraits%2Fissue-50480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75074e0e528cf8a50310bc0de19f73b60e8c8304/tests%2Fui%2Ftraits%2Fissue-50480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-50480.stderr?ref=75074e0e528cf8a50310bc0de19f73b60e8c8304", "patch": "@@ -38,7 +38,7 @@ LL | struct Foo<NotDefined>(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, St\n    |           ++++++++++++\n \n error[E0412]: cannot find type `N` in this scope\n-  --> $DIR/issue-50480.rs:12:18\n+  --> $DIR/issue-50480.rs:11:18\n    |\n LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |            -     ^\n@@ -55,20 +55,11 @@ LL | struct Bar<T, N>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, Strin\n    |             +++\n \n error[E0412]: cannot find type `NotDefined` in this scope\n-  --> $DIR/issue-50480.rs:12:21\n+  --> $DIR/issue-50480.rs:11:21\n    |\n LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |                     ^^^^^^^^^^ not found in this scope\n \n-error[E0277]: `i32` is not an iterator\n-  --> $DIR/issue-50480.rs:3:27\n-   |\n-LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^ `i32` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `i32`\n-   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-\n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/issue-50480.rs:1:17\n    |\n@@ -82,17 +73,8 @@ LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0277]: `i32` is not an iterator\n-  --> $DIR/issue-50480.rs:12:33\n-   |\n-LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^ `i32` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `i32`\n-   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/issue-50480.rs:10:17\n+  --> $DIR/issue-50480.rs:9:17\n    |\n LL | #[derive(Clone, Copy)]\n    |                 ^^^^\n@@ -104,7 +86,7 @@ LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0204, E0277, E0412.\n+Some errors have detailed explanations: E0204, E0412.\n For more information about an error, try `rustc --explain E0204`."}]}