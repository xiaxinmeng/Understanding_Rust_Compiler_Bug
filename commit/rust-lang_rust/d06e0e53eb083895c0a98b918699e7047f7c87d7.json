{"sha": "d06e0e53eb083895c0a98b918699e7047f7c87d7", "node_id": "C_kwDOAAsO6NoAKGQwNmUwZTUzZWIwODM4OTVjMGE5OGI5MTg2OTllNzA0N2Y3Yzg3ZDc", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-08-15T14:57:46Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-08-27T15:08:52Z"}, "message": "tidy: forbid since values for features that point to the current release or future ones\n\nIt's a common phenomenon that feature stabilizations don't make it into\na particular release, but the version is still inaccurate. Often this\nleads to subsequent changes to adjust/correct the version.\n\nInstead, require people to put a placeholder that gets replaced during\nbeta branching time with the current rust version. That way, there is\nno chance that an error can be introduced.\n\nUsage of the placeholder is required on the nightly channel, and forbidden\non the stable and beta channels.", "tree": {"sha": "d0c51d579c9064dd8d495de0d2a2225ce43bbe0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0c51d579c9064dd8d495de0d2a2225ce43bbe0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d06e0e53eb083895c0a98b918699e7047f7c87d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d06e0e53eb083895c0a98b918699e7047f7c87d7", "html_url": "https://github.com/rust-lang/rust/commit/d06e0e53eb083895c0a98b918699e7047f7c87d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d06e0e53eb083895c0a98b918699e7047f7c87d7/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b3f3b72c5f6ebee82a0530ae40284926bb193b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b3f3b72c5f6ebee82a0530ae40284926bb193b3", "html_url": "https://github.com/rust-lang/rust/commit/3b3f3b72c5f6ebee82a0530ae40284926bb193b3"}], "stats": {"total": 60, "additions": 55, "deletions": 5}, "files": [{"sha": "de292d3305db812cd5113b444dda39b32eff8e55", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d06e0e53eb083895c0a98b918699e7047f7c87d7/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06e0e53eb083895c0a98b918699e7047f7c87d7/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=d06e0e53eb083895c0a98b918699e7047f7c87d7", "patch": "@@ -175,6 +175,36 @@ pub fn check(\n         tidy_error!(bad, \"Found {} features without a gate test.\", gate_untested.len());\n     }\n \n+    let (version, channel) = get_version_and_channel(src_path);\n+\n+    let all_features_iter = features\n+        .iter()\n+        .map(|feat| (feat, \"lang\"))\n+        .chain(lib_features.iter().map(|feat| (feat, \"lib\")));\n+    for ((feature_name, feature), kind) in all_features_iter {\n+        let since = if let Some(since) = feature.since { since } else { continue };\n+        if since > version && since != Version::CurrentPlaceholder {\n+            tidy_error!(\n+                bad,\n+                \"The stabilization version {since} of {kind} feature `{feature_name}` is newer than the current {version}\"\n+            );\n+        }\n+        if channel == \"nightly\" && since == version {\n+            tidy_error!(\n+                bad,\n+                \"The stabilization version {since} of {kind} feature `{feature_name}` is written out but should be {}\",\n+                version::VERSION_PLACEHOLDER\n+            );\n+        }\n+        if channel != \"nightly\" && since == Version::CurrentPlaceholder {\n+            tidy_error!(\n+                bad,\n+                \"The placeholder use of {kind} feature `{feature_name}` is not allowed on the {} channel\",\n+                version::VERSION_PLACEHOLDER\n+            );\n+        }\n+    }\n+\n     if *bad {\n         return CollectedFeatures { lib: lib_features, lang: features };\n     }\n@@ -195,6 +225,14 @@ pub fn check(\n     CollectedFeatures { lib: lib_features, lang: features }\n }\n \n+fn get_version_and_channel(src_path: &Path) -> (Version, String) {\n+    let version_str = t!(std::fs::read_to_string(src_path.join(\"version\")));\n+    let version_str = version_str.trim();\n+    let version = t!(std::str::FromStr::from_str(&version_str).map_err(|e| format!(\"{e:?}\")));\n+    let channel_str = t!(std::fs::read_to_string(src_path.join(\"ci\").join(\"channel\")));\n+    (version, channel_str.trim().to_owned())\n+}\n+\n fn format_features<'a>(\n     features: &'a Features,\n     family: &'a str,"}, {"sha": "0830c226caf41c71708b1e4e3ba23d3c88838778", "filename": "src/tools/tidy/src/features/version.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d06e0e53eb083895c0a98b918699e7047f7c87d7/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06e0e53eb083895c0a98b918699e7047f7c87d7/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Fversion.rs?ref=d06e0e53eb083895c0a98b918699e7047f7c87d7", "patch": "@@ -5,14 +5,22 @@ use std::str::FromStr;\n #[cfg(test)]\n mod tests;\n \n+pub const VERSION_PLACEHOLDER: &str = \"CURRENT_RUSTC_VERSION\";\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n-pub struct Version {\n-    parts: [u32; 3],\n+pub enum Version {\n+    Explicit { parts: [u32; 3] },\n+    CurrentPlaceholder,\n }\n \n impl fmt::Display for Version {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(&format!(\"{}.{}.{}\", self.parts[0], self.parts[1], self.parts[2]))\n+        match self {\n+            Version::Explicit { parts } => {\n+                f.pad(&format!(\"{}.{}.{}\", parts[0], parts[1], parts[2]))\n+            }\n+            Version::CurrentPlaceholder => f.pad(&format!(\"CURRENT\")),\n+        }\n     }\n }\n \n@@ -32,6 +40,9 @@ impl FromStr for Version {\n     type Err = ParseVersionError;\n \n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        if s == VERSION_PLACEHOLDER {\n+            return Ok(Version::CurrentPlaceholder);\n+        }\n         let mut iter = s.split('.').map(|part| Ok(part.parse()?));\n \n         let mut part = || iter.next().unwrap_or(Err(ParseVersionError::WrongNumberOfParts));\n@@ -43,6 +54,6 @@ impl FromStr for Version {\n             return Err(ParseVersionError::WrongNumberOfParts);\n         }\n \n-        Ok(Self { parts })\n+        Ok(Version::Explicit { parts })\n     }\n }"}, {"sha": "e9315df43306ef59f03b611181334717ba601dce", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d06e0e53eb083895c0a98b918699e7047f7c87d7/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06e0e53eb083895c0a98b918699e7047f7c87d7/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=d06e0e53eb083895c0a98b918699e7047f7c87d7", "patch": "@@ -28,7 +28,8 @@ macro_rules! t {\n macro_rules! tidy_error {\n     ($bad:expr, $fmt:expr) => ({\n         *$bad = true;\n-        eprintln!(\"tidy error: {}\", $fmt);\n+        eprint!(\"tidy error: \");\n+        eprintln!($fmt);\n     });\n     ($bad:expr, $fmt:expr, $($arg:tt)*) => ({\n         *$bad = true;"}]}