{"sha": "9e810a277574dc77e8001cc955bfa19d6b574696", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllODEwYTI3NzU3NGRjNzdlODAwMWNjOTU1YmZhMTlkNmI1NzQ2OTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T15:45:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-15T15:45:01Z"}, "message": "Rollup merge of #61805 - davidtwco:ice-const-generic-repeat-expr-count-sequel, r=varkor\n\ntypeck: Fix ICE for blocks in repeat expr count.\n\nFixes #61336 (again). This PR fixes an ICE that occured when a block expression resolving to a const generic was used for the count of an array repeat expression.\n\nr? @varkor", "tree": {"sha": "69cd1fe12ce5935a59c84218502cf00a8f303d55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69cd1fe12ce5935a59c84218502cf00a8f303d55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e810a277574dc77e8001cc955bfa19d6b574696", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdBRJ9CRBK7hj4Ov3rIwAAdHIIABVle98ebv5lsbXnqlEk0RgP\nMpZUoQLgh3wchxr2et7NhIoMqL+fB9F+bwr4CNMIXFkPD0vJr1MoEzZsYN7//Lda\nQO27szmJFIuqhglgO8QCrrnVDOLR2iW2REeuRhFaXQmyaaJWkCR4+eRkYee4rknx\n61vjWp8+nY9O2UPDhOyCuhDfN4gmoIkw0Zn7ldO14JGqPmeeMSI2IPu3MvwuZKHh\nX/tacz7749Wc+rT41ILR+mPiI/K9Z062gU2VxGg75eURzHOQmBlGPvm4KutLAyh9\nP17pG+Qn5RR8LZuitASaoxXJk3c1uXgd6QDKmGGmBvckqjbH0IixoUHqev/dtnU=\n=naoQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 69cd1fe12ce5935a59c84218502cf00a8f303d55\nparent 1b95e029f978e71cf641c57fc9f446357e40e612\nparent bc36aabf5f4080521037d7ebe2be86302b6f7d81\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560613501 +0200\ncommitter GitHub <noreply@github.com> 1560613501 +0200\n\nRollup merge of #61805 - davidtwco:ice-const-generic-repeat-expr-count-sequel, r=varkor\n\ntypeck: Fix ICE for blocks in repeat expr count.\n\nFixes #61336 (again). This PR fixes an ICE that occured when a block expression resolving to a const generic was used for the count of an array repeat expression.\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e810a277574dc77e8001cc955bfa19d6b574696", "html_url": "https://github.com/rust-lang/rust/commit/9e810a277574dc77e8001cc955bfa19d6b574696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e810a277574dc77e8001cc955bfa19d6b574696/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b95e029f978e71cf641c57fc9f446357e40e612", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b95e029f978e71cf641c57fc9f446357e40e612", "html_url": "https://github.com/rust-lang/rust/commit/1b95e029f978e71cf641c57fc9f446357e40e612"}, {"sha": "bc36aabf5f4080521037d7ebe2be86302b6f7d81", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc36aabf5f4080521037d7ebe2be86302b6f7d81", "html_url": "https://github.com/rust-lang/rust/commit/bc36aabf5f4080521037d7ebe2be86302b6f7d81"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "892a7b1f73015e794fb7179cbe9cd1ed69722b39", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e810a277574dc77e8001cc955bfa19d6b574696/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e810a277574dc77e8001cc955bfa19d6b574696/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9e810a277574dc77e8001cc955bfa19d6b574696", "patch": "@@ -2157,6 +2157,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n     /// Returns the `DefId` of the constant parameter that the provided expression is a path to.\n     pub fn const_param_def_id(&self, expr: &hir::Expr) -> Option<DefId> {\n+        // Unwrap a block, so that e.g. `{ P }` is recognised as a parameter. Const arguments\n+        // currently have to be wrapped in curly brackets, so it's necessary to special-case.\n+        let expr = match &expr.node {\n+            ExprKind::Block(block, _) if block.stmts.is_empty() && block.expr.is_some() =>\n+                block.expr.as_ref().unwrap(),\n+            _ => expr,\n+        };\n+\n         match &expr.node {\n             ExprKind::Path(hir::QPath::Resolved(_, path)) => match path.res {\n                 Res::Def(DefKind::ConstParam, did) => Some(did),\n@@ -2184,18 +2192,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             ty,\n         };\n \n-        let mut expr = &tcx.hir().body(ast_const.body).value;\n-\n-        // Unwrap a block, so that e.g. `{ P }` is recognised as a parameter. Const arguments\n-        // currently have to be wrapped in curly brackets, so it's necessary to special-case.\n-        if let ExprKind::Block(block, _) = &expr.node {\n-            if block.stmts.is_empty() {\n-                if let Some(trailing) = &block.expr {\n-                    expr = &trailing;\n-                }\n-            }\n-        }\n-\n+        let expr = &tcx.hir().body(ast_const.body).value;\n         if let Some(def_id) = self.const_param_def_id(expr) {\n             // Find the name and index of the const parameter by indexing the generics of the\n             // parent item and construct a `ParamConst`."}, {"sha": "604c14ee120a8eb7dd008b1a86eed9f7aed81fc7", "filename": "src/test/ui/const-generics/issue-61336-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e810a277574dc77e8001cc955bfa19d6b574696/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e810a277574dc77e8001cc955bfa19d6b574696/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-2.rs?ref=9e810a277574dc77e8001cc955bfa19d6b574696", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n+    [x; {N}]\n+}\n+\n+fn g<T, const N: usize>(x: T) -> [T; N] {\n+    [x; {N}]\n+    //~^ ERROR the trait bound `T: std::marker::Copy` is not satisfied [E0277]\n+}\n+\n+fn main() {\n+    let x: [u32; 5] = f::<u32, 5>(3);\n+    assert_eq!(x, [3u32; 5]);\n+}"}, {"sha": "a7135b62f8cffbdcae4cf1a313c813dddb77676d", "filename": "src/test/ui/const-generics/issue-61336-2.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e810a277574dc77e8001cc955bfa19d6b574696/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e810a277574dc77e8001cc955bfa19d6b574696/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-2.stderr?ref=9e810a277574dc77e8001cc955bfa19d6b574696", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61336-2.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/issue-61336-2.rs:9:5\n+   |\n+LL |     [x; {N}]\n+   |     ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::marker::Copy` bound\n+   = note: the `Copy` trait is required because the repeated element will be copied\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}