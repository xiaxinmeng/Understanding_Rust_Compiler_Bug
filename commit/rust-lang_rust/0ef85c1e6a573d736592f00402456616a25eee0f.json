{"sha": "0ef85c1e6a573d736592f00402456616a25eee0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZjg1YzFlNmE1NzNkNzM2NTkyZjAwNDAyNDU2NjE2YTI1ZWVlMGY=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-04-02T06:17:59Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-04-02T11:47:05Z"}, "message": "Refactor `HiddenStructField` into `StrippedItem`", "tree": {"sha": "4298526c3741e5ffcf8e808b9a435a485bcd64b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4298526c3741e5ffcf8e808b9a435a485bcd64b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ef85c1e6a573d736592f00402456616a25eee0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef85c1e6a573d736592f00402456616a25eee0f", "html_url": "https://github.com/rust-lang/rust/commit/0ef85c1e6a573d736592f00402456616a25eee0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ef85c1e6a573d736592f00402456616a25eee0f/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1543a1aac0c9443e509e00ed6cddcc9b9400ac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1543a1aac0c9443e509e00ed6cddcc9b9400ac3", "html_url": "https://github.com/rust-lang/rust/commit/b1543a1aac0c9443e509e00ed6cddcc9b9400ac3"}], "stats": {"total": 132, "additions": 76, "deletions": 56}, "files": [{"sha": "7437d6087718acbb1bc1b4b0d55faded67f7c441", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0ef85c1e6a573d736592f00402456616a25eee0f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef85c1e6a573d736592f00402456616a25eee0f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0ef85c1e6a573d736592f00402456616a25eee0f", "patch": "@@ -14,7 +14,6 @@\n pub use self::Type::*;\n pub use self::PrimitiveType::*;\n pub use self::TypeKind::*;\n-pub use self::StructField::*;\n pub use self::VariantKind::*;\n pub use self::Mutability::*;\n pub use self::Import::*;\n@@ -309,6 +308,15 @@ impl Item {\n     pub fn is_stripped(&self) -> bool {\n         match self.inner { StrippedItem(..) => true, _ => false }\n     }\n+    pub fn has_stripped_fields(&self) -> Option<bool> {\n+        match self.inner {\n+            StructItem(ref _struct) => Some(_struct.fields_stripped),\n+            VariantItem(Variant { kind: StructVariant(ref vstruct)} ) => {\n+                Some(vstruct.fields_stripped)\n+            },\n+            _ => None,\n+        }\n+    }\n \n     pub fn stability_class(&self) -> String {\n         self.stability.as_ref().map(|ref s| {\n@@ -346,7 +354,7 @@ pub enum ItemEnum {\n     TyMethodItem(TyMethod),\n     /// A method with a body.\n     MethodItem(Method),\n-    StructFieldItem(StructField),\n+    StructFieldItem(Type),\n     VariantItem(Variant),\n     /// `fn`s from an extern block\n     ForeignFunctionItem(Function),\n@@ -1740,12 +1748,6 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub enum StructField {\n-    HiddenStructField, // inserted later by strip passes\n-    TypedStructField(Type),\n-}\n-\n impl Clean<Item> for hir::StructField {\n     fn clean(&self, cx: &DocContext) -> Item {\n         Item {\n@@ -1756,7 +1758,7 @@ impl Clean<Item> for hir::StructField {\n             stability: get_stability(cx, cx.map.local_def_id(self.id)),\n             deprecation: get_deprecation(cx, cx.map.local_def_id(self.id)),\n             def_id: cx.map.local_def_id(self.id),\n-            inner: StructFieldItem(TypedStructField(self.ty.clean(cx))),\n+            inner: StructFieldItem(self.ty.clean(cx)),\n         }\n     }\n }\n@@ -1773,7 +1775,7 @@ impl<'tcx> Clean<Item> for ty::FieldDefData<'tcx, 'static> {\n             stability: get_stability(cx, self.did),\n             deprecation: get_deprecation(cx, self.did),\n             def_id: self.did,\n-            inner: StructFieldItem(TypedStructField(self.unsubst_ty().clean(cx))),\n+            inner: StructFieldItem(self.unsubst_ty().clean(cx)),\n         }\n     }\n }\n@@ -1904,9 +1906,7 @@ impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n                             def_id: field.did,\n                             stability: get_stability(cx, field.did),\n                             deprecation: get_deprecation(cx, field.did),\n-                            inner: StructFieldItem(\n-                                TypedStructField(field.unsubst_ty().clean(cx))\n-                            )\n+                            inner: StructFieldItem(field.unsubst_ty().clean(cx))\n                         }\n                     }).collect()\n                 })"}, {"sha": "678a9d75f96cc9b41415f2bb7b9d09859e3703c0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0ef85c1e6a573d736592f00402456616a25eee0f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef85c1e6a573d736592f00402456616a25eee0f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=0ef85c1e6a573d736592f00402456616a25eee0f", "patch": "@@ -1020,13 +1020,9 @@ impl DocFolder for Cache {\n                 }\n                 _ => ((None, Some(&*self.stack)), false)\n             };\n-            let hidden_field = match item.inner {\n-                clean::StructFieldItem(clean::HiddenStructField) => true,\n-                _ => false\n-            };\n \n             match parent {\n-                (parent, Some(path)) if is_method || (!self.stripped_mod && !hidden_field) => {\n+                (parent, Some(path)) if is_method || (!self.stripped_mod) => {\n                     // Needed to determine `self` type.\n                     let parent_basename = self.parent_stack.first().and_then(|parent| {\n                         match self.paths.get(parent) {\n@@ -1051,7 +1047,7 @@ impl DocFolder for Cache {\n                         });\n                     }\n                 }\n-                (Some(parent), None) if is_method || (!self.stripped_mod && !hidden_field)=> {\n+                (Some(parent), None) if is_method || (!self.stripped_mod)=> {\n                     if parent.is_local() {\n                         // We have a parent, but we don't know where they're\n                         // defined yet. Wait for later to index this item.\n@@ -2165,8 +2161,7 @@ fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     document(w, cx, it)?;\n     let mut fields = s.fields.iter().filter(|f| {\n         match f.inner {\n-            clean::StructFieldItem(clean::HiddenStructField) => false,\n-            clean::StructFieldItem(clean::TypedStructField(..)) => true,\n+            clean::StructFieldItem(..) => true,\n             _ => false,\n         }\n     }).peekable();\n@@ -2256,7 +2251,7 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             if let clean::VariantItem( Variant { kind: StructVariant(ref s) } ) = variant.inner {\n                 let fields = s.fields.iter().filter(|f| {\n                     match f.inner {\n-                        clean::StructFieldItem(clean::TypedStructField(..)) => true,\n+                        clean::StructFieldItem(..) => true,\n                         _ => false,\n                     }\n                 });\n@@ -2315,24 +2310,17 @@ fn render_struct(w: &mut fmt::Formatter, it: &clean::Item,\n     match ty {\n         doctree::Plain => {\n             write!(w, \" {{\\n{}\", tab)?;\n-            let mut fields_stripped = false;\n             for field in fields {\n-                match field.inner {\n-                    clean::StructFieldItem(clean::HiddenStructField) => {\n-                        fields_stripped = true;\n-                    }\n-                    clean::StructFieldItem(clean::TypedStructField(ref ty)) => {\n-                        write!(w, \"    {}{}: {},\\n{}\",\n-                               VisSpace(field.visibility),\n-                               field.name.as_ref().unwrap(),\n-                               *ty,\n-                               tab)?;\n-                    }\n-                    _ => unreachable!(),\n-                };\n+                if let clean::StructFieldItem(ref ty) = field.inner {\n+                    write!(w, \"    {}{}: {},\\n{}\",\n+                           VisSpace(field.visibility),\n+                           field.name.as_ref().unwrap(),\n+                           *ty,\n+                           tab)?;\n+                }\n             }\n \n-            if fields_stripped {\n+            if it.has_stripped_fields().unwrap() {\n                 write!(w, \"    // some fields omitted\\n{}\", tab)?;\n             }\n             write!(w, \"}}\")?;\n@@ -2344,10 +2332,10 @@ fn render_struct(w: &mut fmt::Formatter, it: &clean::Item,\n                     write!(w, \", \")?;\n                 }\n                 match field.inner {\n-                    clean::StructFieldItem(clean::HiddenStructField) => {\n+                    clean::StrippedItem(box clean::StructFieldItem(..)) => {\n                         write!(w, \"_\")?\n                     }\n-                    clean::StructFieldItem(clean::TypedStructField(ref ty)) => {\n+                    clean::StructFieldItem(ref ty) => {\n                         write!(w, \"{}{}\", VisSpace(field.visibility), *ty)?\n                     }\n                     _ => unreachable!()"}, {"sha": "f93ecb46228c2b4baca320809f6378321e0c5a19", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0ef85c1e6a573d736592f00402456616a25eee0f/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef85c1e6a573d736592f00402456616a25eee0f/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=0ef85c1e6a573d736592f00402456616a25eee0f", "patch": "@@ -40,13 +40,9 @@ pub fn strip_hidden(krate: clean::Crate) -> plugins::PluginResult {\n \n                     // use a dedicated hidden item for given item type if any\n                     match i.inner {\n-                        clean::StructFieldItem(..) => {\n-                            return Some(clean::Item {\n-                                inner: clean::StructFieldItem(clean::HiddenStructField),\n-                                ..i\n-                            });\n+                        clean::StructFieldItem(..) | clean::ModuleItem(..) => {\n+                            return Strip(i).fold()\n                         }\n-                        clean::ModuleItem(..) => return Strip(i).fold(),\n                         _ => return None,\n                     }\n                 }\n@@ -130,26 +126,18 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             clean::StructItem(..) | clean::EnumItem(..) |\n             clean::TraitItem(..) | clean::FunctionItem(..) |\n             clean::VariantItem(..) | clean::MethodItem(..) |\n-            clean::ForeignFunctionItem(..) | clean::ForeignStaticItem(..) => {\n+            clean::ForeignFunctionItem(..) | clean::ForeignStaticItem(..) |\n+            clean::ConstantItem(..) => {\n                 if i.def_id.is_local() {\n                     if !self.access_levels.is_exported(i.def_id) {\n                         return None;\n                     }\n                 }\n             }\n \n-            clean::ConstantItem(..) => {\n-                if i.def_id.is_local() && !self.access_levels.is_exported(i.def_id) {\n-                    return None;\n-                }\n-            }\n-\n             clean::StructFieldItem(..) => {\n                 if i.visibility != Some(hir::Public) {\n-                    return Some(clean::Item {\n-                        inner: clean::StructFieldItem(clean::HiddenStructField),\n-                        ..i\n-                    })\n+                    return Strip(i).fold();\n                 }\n             }\n "}, {"sha": "c4327f70728cb138d7d660b7f903c34f272d40e5", "filename": "src/test/rustdoc/structfields.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0ef85c1e6a573d736592f00402456616a25eee0f/src%2Ftest%2Frustdoc%2Fstructfields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef85c1e6a573d736592f00402456616a25eee0f/src%2Ftest%2Frustdoc%2Fstructfields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstructfields.rs?ref=0ef85c1e6a573d736592f00402456616a25eee0f", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @has structfields/struct.Foo.html\n+pub struct Foo {\n+    // @has - //pre \"pub a: ()\"\n+    pub a: (),\n+    // @has - //pre \"// some fields omitted\"\n+    // @!has - //pre \"b: ()\"\n+    b: (),\n+    // @!has - //pre \"c: usize\"\n+    #[doc(hidden)]\n+    c: usize,\n+    // @has - //pre \"pub d: usize\"\n+    pub d: usize,\n+}\n+\n+// @has structfields/struct.Bar.html\n+pub struct Bar {\n+    // @has - //pre \"pub a: ()\"\n+    pub a: (),\n+    // @!has - //pre \"// some fields omitted\"\n+}\n+\n+// @has structfields/enum.Qux.html\n+pub enum Qux {\n+    Quz {\n+        // @has - //pre \"a: ()\"\n+        a: (),\n+        // @!has - //pre \"b: ()\"\n+        #[doc(hidden)]\n+        b: (),\n+        // @has - //pre \"c: usize\"\n+        c: usize,\n+        // @has - //pre \"// some fields omitted\"\n+    },\n+}"}]}