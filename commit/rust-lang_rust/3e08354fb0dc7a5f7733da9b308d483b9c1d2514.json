{"sha": "3e08354fb0dc7a5f7733da9b308d483b9c1d2514", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMDgzNTRmYjBkYzdhNWY3NzMzZGE5YjMwOGQ0ODNiOWMxZDI1MTQ=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-20T12:46:06Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-20T13:48:16Z"}, "message": "Correct file path after some restructures in compiler", "tree": {"sha": "cb3ced0c9e7ee125f709fa9168661523fa978b76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb3ced0c9e7ee125f709fa9168661523fa978b76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e08354fb0dc7a5f7733da9b308d483b9c1d2514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e08354fb0dc7a5f7733da9b308d483b9c1d2514", "html_url": "https://github.com/rust-lang/rust/commit/3e08354fb0dc7a5f7733da9b308d483b9c1d2514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e449b9adff463455743291b0c1f76feec092992", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e449b9adff463455743291b0c1f76feec092992", "html_url": "https://github.com/rust-lang/rust/commit/5e449b9adff463455743291b0c1f76feec092992"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "ccd294d92b2f473f8036f2a0f595ec04c2e400a3", "filename": "compiler/rustc_codegen_ssa/src/traits/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs?ref=3e08354fb0dc7a5f7733da9b308d483b9c1d2514", "patch": "@@ -5,9 +5,9 @@ use rustc_span::Span;\n use rustc_target::abi::call::FnAbi;\n \n pub trait IntrinsicCallMethods<'tcx>: BackendTypes {\n-    /// Remember to add all intrinsics here, in librustc_typeck/check/mod.rs,\n-    /// and in libcore/intrinsics.rs; if you need access to any llvm intrinsics,\n-    /// add them to librustc_codegen_llvm/context.rs\n+    /// Remember to add all intrinsics here, in `compiler/rustc_typeck/src/check/mod.rs`,\n+    /// and in `library/core/src/intrinsics.rs`; if you need access to any LLVM intrinsics,\n+    /// add them to `compiler/rustc_codegen_llvm/src/context.rs`.\n     fn codegen_intrinsic_call(\n         &mut self,\n         instance: ty::Instance<'tcx>,"}, {"sha": "496174b28efac4cd65257d1b09d01fad33a53d50", "filename": "compiler/rustc_error_codes/src/error_codes/E0092.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0092.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0092.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0092.md?ref=3e08354fb0dc7a5f7733da9b308d483b9c1d2514", "patch": "@@ -12,8 +12,8 @@ extern \"rust-intrinsic\" {\n ```\n \n Please check you didn't make a mistake in the function's name. All intrinsic\n-functions are defined in `librustc_codegen_llvm/intrinsic.rs` and in\n-`libcore/intrinsics.rs` in the Rust source code. Example:\n+functions are defined in `compiler/rustc_codegen_llvm/src/intrinsic.rs` and in\n+`library/core/src/intrinsics.rs` in the Rust source code. Example:\n \n ```\n #![feature(intrinsics)]"}, {"sha": "6d58e50ec8813d515f80c6925995c75890e18743", "filename": "compiler/rustc_error_codes/src/error_codes/E0093.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0093.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0093.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0093.md?ref=3e08354fb0dc7a5f7733da9b308d483b9c1d2514", "patch": "@@ -17,8 +17,8 @@ fn main() {\n ```\n \n Please check you didn't make a mistake in the function's name. All intrinsic\n-functions are defined in `librustc_codegen_llvm/intrinsic.rs` and in\n-`libcore/intrinsics.rs` in the Rust source code. Example:\n+functions are defined in `compiler/rustc_codegen_llvm/src/intrinsic.rs` and in\n+`library/core/src/intrinsics.rs` in the Rust source code. Example:\n \n ```\n #![feature(intrinsics)]"}, {"sha": "00271f227d871aa82611d2bb054c99b74ed26d1a", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=3e08354fb0dc7a5f7733da9b308d483b9c1d2514", "patch": "@@ -385,9 +385,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::InstanceDef::Virtual(_, idx) => {\n                 let mut args = args.to_vec();\n                 // We have to implement all \"object safe receivers\".  Currently we\n-                // support built-in pointers (&, &mut, Box) as well as unsized-self.  We do\n+                // support built-in pointers `(&, &mut, Box)` as well as unsized-self.  We do\n                 // not yet support custom self types.\n-                // Also see librustc_codegen_llvm/abi.rs and librustc_codegen_llvm/mir/block.rs.\n+                // Also see `compiler/rustc_codegen_llvm/src/abi.rs` and `compiler/rustc_codegen_ssa/src/mir/block.rs`.\n                 let receiver_place = match args[0].layout.ty.builtin_deref(true) {\n                     Some(_) => {\n                         // Built-in pointer."}, {"sha": "2ee867c2dd648cace4e3dd1015a29ffce6d44fee", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=3e08354fb0dc7a5f7733da9b308d483b9c1d2514", "patch": "@@ -106,8 +106,8 @@ pub fn intrinsic_operation_unsafety(intrinsic: Symbol) -> hir::Unsafety {\n     }\n }\n \n-/// Remember to add all intrinsics here, in librustc_codegen_llvm/intrinsic.rs,\n-/// and in libcore/intrinsics.rs\n+/// Remember to add all intrinsics here, in `compiler/rustc_codegen_llvm/src/intrinsic.rs`,\n+/// and in `library/core/src/intrinsics.rs`.\n pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     let param = |n| tcx.mk_ty_param(n, Symbol::intern(&format!(\"P{}\", n)));\n     let def_id = tcx.hir().local_def_id(it.hir_id).to_def_id();"}, {"sha": "de4d2efe294614cbb895ee1a15877b12f362d674", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=3e08354fb0dc7a5f7733da9b308d483b9c1d2514", "patch": "@@ -1,7 +1,7 @@\n //! Compiler intrinsics.\n //!\n-//! The corresponding definitions are in `librustc_codegen_llvm/intrinsic.rs`.\n-//! The corresponding const implementations are in `librustc_mir/interpret/intrinsics.rs`\n+//! The corresponding definitions are in `compiler/rustc_codegen_llvm/src/intrinsic.rs`.\n+//! The corresponding const implementations are in `compiler/rustc_mir/src/interpret/intrinsics.rs`\n //!\n //! # Const intrinsics\n //!\n@@ -10,7 +10,7 @@\n //!\n //! In order to make an intrinsic usable at compile-time, one needs to copy the implementation\n //! from https://github.com/rust-lang/miri/blob/master/src/shims/intrinsics.rs to\n-//! `librustc_mir/interpret/intrinsics.rs` and add a\n+//! `compiler/rustc_mir/src/interpret/intrinsics.rs` and add a\n //! `#[rustc_const_unstable(feature = \"foo\", issue = \"01234\")]` to the intrinsic.\n //!\n //! If an intrinsic is supposed to be used from a `const fn` with a `rustc_const_stable` attribute,"}, {"sha": "5597bbb93d236fc711c0793e54c051127c191b25", "filename": "library/panic_unwind/src/seh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e08354fb0dc7a5f7733da9b308d483b9c1d2514/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fseh.rs?ref=3e08354fb0dc7a5f7733da9b308d483b9c1d2514", "patch": "@@ -175,7 +175,7 @@ pub struct _TypeDescriptor {\n // to be able to catch Rust panics by simply declaring a `struct rust_panic`.\n //\n // When modifying, make sure that the type name string exactly matches\n-// the one used in src/librustc_codegen_llvm/intrinsic.rs.\n+// the one used in `compiler/rustc_codegen_llvm/src/intrinsic.rs`.\n const TYPE_NAME: [u8; 11] = *b\"rust_panic\\0\";\n \n static mut THROW_INFO: _ThrowInfo = _ThrowInfo {"}]}