{"sha": "7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMDAwN2Q0YWFjYTMwYmFmYTJjZmMwYTQ5MjY4YzdmM2VjODM2Y2I=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-26T16:37:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-26T16:37:53Z"}, "message": "Merge pull request #759 from bjorn3/fix_macho_debuginfo\n\nFix debuginfo for machO", "tree": {"sha": "13666c9e43d955edd28f635bb22db23552cf629f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13666c9e43d955edd28f635bb22db23552cf629f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdtHZhCRBK7hj4Ov3rIwAAdHIIABjF3ZQmfR7mVc7nYIHO1U3V\naTVXJiMuerys6YcceYedbOq3VMe2Jgubu5NiG9dy+ClTuT7I9KXawZQkQ73n9NyS\no2vCl7qX4OffuUPFU4bao9iDzH+80N/8OIoFvVR08PotUrgRiNGuq9zm2xO6Zx/e\nalGrVsYH0fhkQZm2hIku5vS8lcYD6e8S6Nn8fCovUNtfYKFc+glH5X/QAp2DZidn\nmNHI89+TktxtXOC5a3o699zEu2VpZQCb4PjHNnpxHvHuXpvCICbuiJDcvt6v/EX8\nysHT5d9tlQq/oLqwsq9bLqzE0YH58ZmaB69v7vCKZcT0nIx5WT5M8gZbU3YqTFo=\n=/WJ7\n-----END PGP SIGNATURE-----\n", "payload": "tree 13666c9e43d955edd28f635bb22db23552cf629f\nparent 75c24b9c9677600422ec86fa9f4c78fe3678d2ce\nparent 40178f6d3c6d8a5a336b1841a1dc15016eccab05\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1572107873 +0200\ncommitter GitHub <noreply@github.com> 1572107873 +0200\n\nMerge pull request #759 from bjorn3/fix_macho_debuginfo\n\nFix debuginfo for machO"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "html_url": "https://github.com/rust-lang/rust/commit/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "html_url": "https://github.com/rust-lang/rust/commit/75c24b9c9677600422ec86fa9f4c78fe3678d2ce"}, {"sha": "40178f6d3c6d8a5a336b1841a1dc15016eccab05", "url": "https://api.github.com/repos/rust-lang/rust/commits/40178f6d3c6d8a5a336b1841a1dc15016eccab05", "html_url": "https://github.com/rust-lang/rust/commit/40178f6d3c6d8a5a336b1841a1dc15016eccab05"}], "stats": {"total": 97, "additions": 58, "deletions": 39}, "files": [{"sha": "9d40b14f0bf1a6c7650f7d1ec17177223ad8e2d7", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "patch": "@@ -162,7 +162,7 @@ source = \"git+https://github.com/CraneStation/cranelift.git#387593d6c94d291e614c\n dependencies = [\n  \"cranelift-codegen 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-module 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n- \"object 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"object 0.14.0 (git+https://github.com/gimli-rs/object.git)\",\n  \"target-lexicon 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -341,7 +341,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [[package]]\n name = \"object\"\n version = \"0.14.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+source = \"git+https://github.com/gimli-rs/object.git#50391629ce0691dda4fb6ea57cf920cee80130c6\"\n dependencies = [\n  \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -431,7 +431,7 @@ dependencies = [\n  \"indexmap 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.64 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libloading 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"object 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"object 0.14.0 (git+https://github.com/gimli-rs/object.git)\",\n  \"target-lexicon 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -629,7 +629,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum mach 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"86dd2487cdfea56def77b88438a2c915fb45113c5319bfe7e14306ca4cd0b0e1\"\n \"checksum miniz_oxide 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"304f66c19be2afa56530fa7c39796192eef38618da8d19df725ad7c6d6b2aaae\"\n \"checksum nodrop 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72ef4a56884ca558e5ddb05a1d1e7e1bfd9a68d9ed024c21704cc98872dae1bb\"\n-\"checksum object 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"81afbc5773e99efe9533d8a539dfac37e531dcd0f4eeb41584bae03ccf76d4c2\"\n+\"checksum object 0.14.0 (git+https://github.com/gimli-rs/object.git)\" = \"<none>\"\n \"checksum plain 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b4596b6d070b27117e987119b4dac604f3c58cfb0b191112e24771b2faeac1a6\"\n \"checksum proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf3d2011ab5c909338f7887f4fc896d35932e29146c12c8d01da6b22a80ba759\"\n \"checksum proc-macro2 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90cf5f418035b98e655e9cdb225047638296b862b42411c4e45bb88d700f7fc0\""}, {"sha": "3c2c4c8d8ec992fb7503cdb869e69d6b362ad5c8", "filename": "Cargo.toml", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "patch": "@@ -45,14 +45,18 @@ features = [\"compression\", \"read\", \"std\"] # We don't need WASM support\n #[patch.crates-io]\n #gimli = { path = \"../\" }\n \n+[patch.crates-io]\n+# FIXME switch back to crates.io once gimli-rs/object#133 is published\n+object = { git = \"https://github.com/gimli-rs/object.git\" }\n+\n [target.'cfg(not(target_arch = \"wasm32\"))'.dependencies]\n cranelift-simplejit = { git = \"https://github.com/CraneStation/cranelift.git\" }\n \n [profile.dev]\n # By compiling dependencies with optimizations, performing tests gets much faster.\n opt-level = 3\n \n-[profile.dev.overrides.\"rustc_codegen_cranelift\"]\n+[profile.dev.package.rustc_codegen_cranelift]\n # Disabling optimizations for cg_clif itself makes compilation after a change faster.\n opt-level = 0\n \n@@ -62,14 +66,14 @@ opt-level = 0\n opt-level = 0\n debug = false\n \n-[profile.dev.overrides.cranelift-codegen-meta]\n+[profile.dev.package.cranelift-codegen-meta]\n opt-level = 0\n debug = false\n \n-[profile.dev.overrides.syn]\n+[profile.dev.package.syn]\n opt-level = 0\n debug = false\n \n-[profile.dev.overrides.synstructure]\n+[profile.dev.package.synstructure]\n opt-level = 0\n debug = false"}, {"sha": "1d8942c6ab2c9fc3c4e0e22b361dcae8c358a4e0", "filename": "example/mini_core.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "patch": "@@ -1,6 +1,6 @@\n #![feature(\n     no_core, lang_items, intrinsics, unboxed_closures, type_ascription, extern_types,\n-    untagged_unions, decl_macro, rustc_attrs\n+    untagged_unions, decl_macro, rustc_attrs, transparent_unions\n )]\n #![no_core]\n #![allow(dead_code)]\n@@ -448,10 +448,17 @@ pub trait Drop {\n     fn drop(&mut self);\n }\n \n-#[allow(unions_with_drop_fields)]\n+#[lang = \"manually_drop\"]\n+#[repr(transparent)]\n+pub struct ManuallyDrop<T: ?Sized> {\n+    pub value: T,\n+}\n+\n+#[lang = \"maybe_uninit\"]\n+#[repr(transparent)]\n pub union MaybeUninit<T> {\n     pub uninit: (),\n-    pub value: T,\n+    pub value: ManuallyDrop<T>,\n }\n \n pub mod intrinsics {"}, {"sha": "fdc71af443748d792d5b9bd449cfc2e51669f437", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "patch": "@@ -196,7 +196,7 @@ fn main() {\n         }\n \n         unsafe fn uninitialized<T>() -> T {\n-            MaybeUninit { uninit: () }.value\n+            MaybeUninit { uninit: () }.value.value\n         }\n \n         zeroed::<(u8, u8)>();"}, {"sha": "c76e2e2f8b42d64a6a30bb3d70117e79f96ef2fb", "filename": "patches/0017-Fix-libtest-compilation.patch", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/patches%2F0017-Fix-libtest-compilation.patch", "raw_url": "https://github.com/rust-lang/rust/raw/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/patches%2F0017-Fix-libtest-compilation.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0017-Fix-libtest-compilation.patch?ref=7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "patch": "@@ -12,18 +12,18 @@ index 8b76080..9e65de2 100644\n --- a/src/libtest/lib.rs\n +++ b/src/libtest/lib.rs\n @@ -52,7 +52,7 @@ use std::fmt;\n- use std::fs::File;\n- use std::io;\n- use std::io::prelude::*;\n--use std::panic::{self, catch_unwind, AssertUnwindSafe, PanicInfo};\n-+use std::panic::{self, PanicInfo};\n- use std::path::PathBuf;\n- use std::process;\n- use std::process::{ExitStatus, Command, Termination};\n+     env,\n+     io,\n+     io::prelude::Write,\n+-    panic::{self, catch_unwind, AssertUnwindSafe, PanicInfo},\n++    panic::{self, PanicInfo},\n+     process,\n+     process::{Command, Termination},\n+     sync::mpsc::{channel, Sender},\n @@ -1493,7 +1493,7 @@ pub fn run_test(\n      fn run_test_inner(\n          desc: TestDesc,\n-         monitor_ch: Sender<MonitorMsg>,\n+         monitor_ch: Sender<CompletedTest>,\n -        testfn: Box<dyn FnOnce() + Send>,\n +        testfn: Box<impl FnOnce() + Send + 'static>,\n          opts: TestRunOpts,\n@@ -65,8 +65,8 @@ index 8b76080..9e65de2 100644\n      report_time: bool,\n -    testfn: Box<dyn FnOnce() + Send>,\n +    testfn: Box<impl FnOnce() + Send + 'static>,\n-     monitor_ch: Sender<MonitorMsg>,\n-     time_opts: Option<TestTimeOptions>,\n+     monitor_ch: Sender<CompletedTest>,\n+     time_opts: Option<time::TestTimeOptions>,\n  ) {\n      // Buffer for capturing standard I/O\n      let data = Arc::new(Mutex::new(Vec::new()));\n@@ -75,12 +75,12 @@ index 8b76080..9e65de2 100644\n          None\n      };\n -    let result = catch_unwind(AssertUnwindSafe(testfn));\n-+    let result = Ok::<(), Box<dyn Any + Send>>(testfn());\n++    let result = Ok::<(), Box<dyn std::any::Any + Send>>(testfn());\n      let exec_time = start.map(|start| {\n          let duration = start.elapsed();\n          TestExecTime(duration)\n @@ -1688,10 +1676,10 @@ fn spawn_test_subprocess(desc: TestDesc, report_time: bool, monitor_ch: Sender<M\n-     monitor_ch.send((desc.clone(), result, exec_time, test_output)).unwrap();\n+     monitor_ch.send(message).unwrap();\n  }\n  \n  fn run_test_in_spawned_subprocess("}, {"sha": "2d9d1d9f908bda28597d9e81c36f119ba1f6a4ae", "filename": "prepare.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/prepare.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/prepare.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/prepare.sh?ref=7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "patch": "@@ -1,7 +1,7 @@\n #!/bin/bash --verbose\n set -e\n \n-rustup component add rust-src\n+rustup component add rust-src rustc-dev\n ./build_sysroot/prepare_sysroot_src.sh\n cargo install hyperfine || echo \"Skipping hyperfine install\"\n "}, {"sha": "305248182b5c4f8c639016421090a764519cedba", "filename": "src/backend.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "patch": "@@ -1,4 +1,5 @@\n use std::collections::HashMap;\n+use std::convert::TryFrom;\n \n use rustc::session::Session;\n \n@@ -122,8 +123,13 @@ impl WriteDebugInfo for ObjectProduct {\n         id: SectionId,\n         data: Vec<u8>,\n     ) -> (object::write::SectionId, object::write::SymbolId) {\n+        let name = if self.object.format() == target_lexicon::BinaryFormat::Macho {\n+            id.name().replace('.', \"__\") // machO expects __debug_info instead of .debug_info\n+        } else {\n+            id.name().to_string()\n+        }.into_bytes();\n+\n         let segment = self.object.segment_name(StandardSegment::Debug).to_vec();\n-        let name = id.name().as_bytes().to_vec();\n         let section_id = self.object.add_section(segment, name, SectionKind::Debug);\n         self.object.section_mut(section_id).set_data(data, 1);\n         let symbol_id = self.object.section_symbol(section_id);\n@@ -137,10 +143,13 @@ impl WriteDebugInfo for ObjectProduct {\n         from: &Self::SectionId,\n         reloc: &DebugReloc,\n     ) {\n-        let symbol = match reloc.name {\n-            DebugRelocName::Section(id) => section_map.get(&id).unwrap().1,\n+        let (symbol, symbol_offset) = match reloc.name {\n+            DebugRelocName::Section(id) => {\n+                (section_map.get(&id).unwrap().1, 0)\n+            }\n             DebugRelocName::Symbol(id) => {\n-                self.function_symbol(*symbol_map.get_index(id).unwrap().0)\n+                let symbol_id = self.function_symbol(*symbol_map.get_index(id).unwrap().0);\n+                self.object.symbol_section_and_offset(symbol_id).expect(\"Debug reloc for undef sym???\")\n             }\n         };\n         self.object.add_relocation(from.0, Relocation {\n@@ -149,7 +158,7 @@ impl WriteDebugInfo for ObjectProduct {\n             kind: RelocationKind::Absolute,\n             encoding: RelocationEncoding::Generic,\n             size: reloc.size * 8,\n-            addend: reloc.addend,\n+            addend: i64::try_from(symbol_offset).unwrap() + reloc.addend,\n         }).unwrap();\n     }\n }"}, {"sha": "c3563dc0533f9e11deaaf1b8495c70b81cdf403d", "filename": "src/common.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "patch": "@@ -286,7 +286,9 @@ pub struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     pub clif_comments: crate::pretty_clif::CommentWriter,\n     pub constants_cx: &'clif mut crate::constant::ConstantCx,\n     pub caches: &'clif mut Caches<'tcx>,\n-    pub source_info_set: indexmap::IndexSet<SourceInfo>,\n+\n+    // FIXME switch back to `SourceInfo`, once it derives `Eq` and `Hash` again.\n+    pub source_info_set: indexmap::IndexSet<(Span, mir::SourceScope)>,\n }\n \n impl<'tcx, B: Backend> LayoutOf for FunctionCx<'_, 'tcx, B> {\n@@ -365,7 +367,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     }\n \n     pub fn set_debug_loc(&mut self, source_info: mir::SourceInfo) {\n-        let (index, _) = self.source_info_set.insert_full(source_info);\n+        let (index, _) = self.source_info_set.insert_full((source_info.span, source_info.scope));\n         self.bcx.set_srcloc(SourceLoc::new(index as u32));\n     }\n }"}, {"sha": "e6d133c64510cb4bd7245ad3b0fb1953daa01995", "filename": "src/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "patch": "@@ -252,7 +252,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         tcx: TyCtxt,\n         context: &Context,\n         isa: &dyn cranelift::codegen::isa::TargetIsa,\n-        source_info_set: &indexmap::IndexSet<SourceInfo>,\n+        source_info_set: &indexmap::IndexSet<(Span, mir::SourceScope)>,\n     ) {\n         let line_program = &mut self.debug_context.dwarf.unit.line_program;\n \n@@ -292,7 +292,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                 line_program.row().address_offset = offset as u64;\n                 if !srcloc.is_default() {\n                     let source_info = *source_info_set.get_index(srcloc.bits() as usize).unwrap();\n-                    create_row_for_span(line_program, source_info.span);\n+                    create_row_for_span(line_program, source_info.0);\n                 } else {\n                     create_row_for_span(line_program, self.mir_span);\n                 }"}, {"sha": "22271460b02ba030a415f158bb53645d235c1440", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=7d0007d4aaca30bafa2cfc0a49268c7f3ec836cb", "patch": "@@ -184,10 +184,7 @@ fn run_aot(\n \n     let mut module = new_module(\"some_file\".to_string());\n \n-    let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None\n-        // macOS debuginfo doesn't work yet (see #303)\n-        && !tcx.sess.target.target.options.is_like_osx\n-    {\n+    let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None {\n         let debug = DebugContext::new(\n             tcx,\n             module.target_config().pointer_type().bytes() as u8,"}]}