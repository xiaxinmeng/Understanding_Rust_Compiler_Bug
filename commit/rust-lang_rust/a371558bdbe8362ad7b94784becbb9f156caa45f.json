{"sha": "a371558bdbe8362ad7b94784becbb9f156caa45f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNzE1NThiZGJlODM2MmFkN2I5NDc4NGJlY2JiOWYxNTZjYWE0NWY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-07-18T09:53:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-18T09:53:28Z"}, "message": "Merge pull request #1093 from oli-obk/serde_specific_lint\n\nlint on implementing `visit_string` without also implementing `visit_str`", "tree": {"sha": "a35c855fd7ea53ae9677de16caaacaad73df9906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a35c855fd7ea53ae9677de16caaacaad73df9906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a371558bdbe8362ad7b94784becbb9f156caa45f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a371558bdbe8362ad7b94784becbb9f156caa45f", "html_url": "https://github.com/rust-lang/rust/commit/a371558bdbe8362ad7b94784becbb9f156caa45f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a371558bdbe8362ad7b94784becbb9f156caa45f/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94fcdadd85d9e457524110cc5e40ae804e18c099", "url": "https://api.github.com/repos/rust-lang/rust/commits/94fcdadd85d9e457524110cc5e40ae804e18c099", "html_url": "https://github.com/rust-lang/rust/commit/94fcdadd85d9e457524110cc5e40ae804e18c099"}, {"sha": "b4ee9115d8231c4918498e25bcdf1a835df6fe4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ee9115d8231c4918498e25bcdf1a835df6fe4f", "html_url": "https://github.com/rust-lang/rust/commit/b4ee9115d8231c4918498e25bcdf1a835df6fe4f"}], "stats": {"total": 170, "additions": 163, "deletions": 7}, "files": [{"sha": "ea228668ef4f80f180a287dfe2a573d2a9ae09b7", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a371558bdbe8362ad7b94784becbb9f156caa45f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a371558bdbe8362ad7b94784becbb9f156caa45f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a371558bdbe8362ad7b94784becbb9f156caa45f", "patch": "@@ -246,6 +246,7 @@ All notable changes to this project will be documented in this file.\n [`result_unwrap_used`]: https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used\n [`reverse_range_loop`]: https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop\n [`search_is_some`]: https://github.com/Manishearth/rust-clippy/wiki#search_is_some\n+[`serde_api_misuse`]: https://github.com/Manishearth/rust-clippy/wiki#serde_api_misuse\n [`shadow_reuse`]: https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse\n [`shadow_same`]: https://github.com/Manishearth/rust-clippy/wiki#shadow_same\n [`shadow_unrelated`]: https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated"}, {"sha": "9790937a30719af3fc952f8a460b0a89cbc88ed0", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a371558bdbe8362ad7b94784becbb9f156caa45f/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a371558bdbe8362ad7b94784becbb9f156caa45f/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=a371558bdbe8362ad7b94784becbb9f156caa45f", "patch": "@@ -34,6 +34,7 @@ lazy_static = \"0.1.15\"\n regex = \"0.1.71\"\n rustc-serialize = \"0.3\"\n clippy-mini-macro-test = { version = \"0.1\", path = \"mini-macro\" }\n+serde = \"0.7\"\n \n \n [features]"}, {"sha": "121f2c24b4266f94a2468d90a58a78dc85c22fba", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a371558bdbe8362ad7b94784becbb9f156caa45f/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a371558bdbe8362ad7b94784becbb9f156caa45f/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a371558bdbe8362ad7b94784becbb9f156caa45f", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 158 lints included in this crate:\n+There are 159 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -136,6 +136,7 @@ name\n [result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)                             | allow   | using `Result.unwrap()`, which might be better handled\n [reverse_range_loop](https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop)                             | warn    | Iterating over an empty range, such as `10..0` or `5..5`\n [search_is_some](https://github.com/Manishearth/rust-clippy/wiki#search_is_some)                                     | warn    | using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\n+[serde_api_misuse](https://github.com/Manishearth/rust-clippy/wiki#serde_api_misuse)                                 | warn    | Various things that will negatively affect your serde experience\n [shadow_reuse](https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse)                                         | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n [shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                                           | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n [shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                                 | allow   | The name is re-bound without even using the original value"}, {"sha": "53eb07a8d4afc4167483c51d453f2012466e7a75", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a371558bdbe8362ad7b94784becbb9f156caa45f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a371558bdbe8362ad7b94784becbb9f156caa45f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a371558bdbe8362ad7b94784becbb9f156caa45f", "patch": "@@ -114,6 +114,7 @@ pub mod ptr_arg;\n pub mod ranges;\n pub mod regex;\n pub mod returns;\n+pub mod serde;\n pub mod shadow;\n pub mod strings;\n pub mod swap;\n@@ -167,6 +168,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     store.register_removed(\"string_to_string\", \"using `string::to_string` is common even today and specialization will likely happen soon\");\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n+    reg.register_late_lint_pass(box serde::Serde);\n+    reg.register_early_lint_pass(box utils::internal_lints::Clippy);\n     reg.register_late_lint_pass(box types::TypePass);\n     reg.register_late_lint_pass(box booleans::NonminimalBool);\n     reg.register_late_lint_pass(box misc::TopLevelRefPass);\n@@ -399,6 +402,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         regex::TRIVIAL_REGEX,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n+        serde::SERDE_API_MISUSE,\n         strings::STRING_LIT_AS_BYTES,\n         swap::ALMOST_SWAPPED,\n         swap::MANUAL_SWAP,"}, {"sha": "adfe99363d362dcf837ce50e04ac58b512a8e79c", "filename": "clippy_lints/src/serde.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a371558bdbe8362ad7b94784becbb9f156caa45f/clippy_lints%2Fsrc%2Fserde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a371558bdbe8362ad7b94784becbb9f156caa45f/clippy_lints%2Fsrc%2Fserde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde.rs?ref=a371558bdbe8362ad7b94784becbb9f156caa45f", "patch": "@@ -0,0 +1,55 @@\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use utils::{span_lint, get_trait_def_id, paths};\n+\n+/// **What it does:** This lint checks for mis-uses of the serde API\n+///\n+/// **Why is this bad?** Serde is very finnicky about how its API should be used, but the type system can't be used to enforce it (yet)\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** implementing `Visitor::visit_string` but not `Visitor::visit_str`\n+declare_lint! {\n+    pub SERDE_API_MISUSE, Warn,\n+    \"Various things that will negatively affect your serde experience\"\n+}\n+\n+\n+#[derive(Copy, Clone)]\n+pub struct Serde;\n+\n+impl LintPass for Serde {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(SERDE_API_MISUSE)\n+    }\n+}\n+\n+impl LateLintPass for Serde {\n+    fn check_item(&mut self, cx: &LateContext, item: &Item) {\n+        if let ItemImpl(_, _, _, Some(ref trait_ref), _, ref items) = item.node {\n+            let did = cx.tcx.expect_def(trait_ref.ref_id).def_id();\n+            if let Some(visit_did) = get_trait_def_id(cx, &paths::SERDE_DE_VISITOR) {\n+                if did == visit_did {\n+                    let mut seen_str = None;\n+                    let mut seen_string = None;\n+                    for item in items {\n+                        match &*item.name.as_str() {\n+                            \"visit_str\" => seen_str = Some(item.span),\n+                            \"visit_string\" => seen_string = Some(item.span),\n+                            _ => {},\n+                        }\n+                    }\n+                    if let Some(span) = seen_string {\n+                        if seen_str.is_none() {\n+                            span_lint(cx,\n+                                      SERDE_API_MISUSE,\n+                                      span,\n+                                      \"you should not implement `visit_string` without also implementing `visit_str`\",\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "e0d32a60722545ad8ba08692096e047d1b01987b", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a371558bdbe8362ad7b94784becbb9f156caa45f/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a371558bdbe8362ad7b94784becbb9f156caa45f/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=a371558bdbe8362ad7b94784becbb9f156caa45f", "patch": "@@ -0,0 +1,53 @@\n+use rustc::lint::*;\n+use utils::span_lint;\n+use syntax::parse::token::InternedString;\n+use syntax::ast::*;\n+\n+/// **What it does:** This lint checks for various things we like to keep tidy in clippy\n+///\n+/// **Why is this bad?** ???\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** wrong ordering of the util::paths constants\n+declare_lint! {\n+    pub CLIPPY_LINTS_INTERNAL, Allow,\n+    \"Various things that will negatively affect your clippy experience\"\n+}\n+\n+\n+#[derive(Copy, Clone)]\n+pub struct Clippy;\n+\n+impl LintPass for Clippy {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(CLIPPY_LINTS_INTERNAL)\n+    }\n+}\n+\n+impl EarlyLintPass for Clippy {\n+    fn check_crate(&mut self, cx: &EarlyContext, krate: &Crate) {\n+        if let Some(utils) = krate.module.items.iter().find(|item| item.ident.name.as_str() == \"utils\") {\n+            if let ItemKind::Mod(ref utils_mod) = utils.node {\n+                if let Some(paths) = utils_mod.items.iter().find(|item| item.ident.name.as_str() == \"paths\") {\n+                    if let ItemKind::Mod(ref paths_mod) = paths.node {\n+                        let mut last_name: Option<InternedString> = None;\n+                        for item in &paths_mod.items {\n+                            let name = item.ident.name.as_str();\n+                            if let Some(ref last_name) = last_name {\n+                                if **last_name > *name {\n+                                    span_lint(cx,\n+                                              CLIPPY_LINTS_INTERNAL,\n+                                              item.span,\n+                                              \"this constant should be before the previous constant due to lexical ordering\",\n+                                    );\n+                                }\n+                            }\n+                            last_name = Some(name);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "aac7a427218ec17fa1dec2e0b06df5042480643e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a371558bdbe8362ad7b94784becbb9f156caa45f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a371558bdbe8362ad7b94784becbb9f156caa45f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a371558bdbe8362ad7b94784becbb9f156caa45f", "patch": "@@ -25,6 +25,7 @@ pub mod conf;\n mod hir;\n pub mod paths;\n pub mod sugg;\n+pub mod internal_lints;\n pub use self::hir::{SpanlessEq, SpanlessHash};\n \n pub type MethodArgs = HirVec<P<Expr>>;"}, {"sha": "51071aed7a94229cc29fb6e68ba2a40ad0f82db2", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a371558bdbe8362ad7b94784becbb9f156caa45f/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a371558bdbe8362ad7b94784becbb9f156caa45f/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=a371558bdbe8362ad7b94784becbb9f156caa45f", "patch": "@@ -54,6 +54,7 @@ pub const REGEX_BYTES_SET_NEW: [&'static str; 5] = [\"regex\", \"re_set\", \"bytes\",\n pub const REGEX_NEW: [&'static str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n pub const REGEX_SET_NEW: [&'static str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n pub const RESULT: [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n+pub const SERDE_DE_VISITOR: [&'static str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const STRING: [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n pub const TRANSMUTE: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const VEC: [&'static str; 3] = [\"collections\", \"vec\", \"Vec\"];"}, {"sha": "d5099edbc0c8fb58b4c3f63b84e8dc2bcaa6e05b", "filename": "tests/compile-fail/serde.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a371558bdbe8362ad7b94784becbb9f156caa45f/tests%2Fcompile-fail%2Fserde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a371558bdbe8362ad7b94784becbb9f156caa45f/tests%2Fcompile-fail%2Fserde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fserde.rs?ref=a371558bdbe8362ad7b94784becbb9f156caa45f", "patch": "@@ -0,0 +1,39 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(serde_api_misuse)]\n+#![allow(dead_code)]\n+\n+extern crate serde;\n+\n+struct A;\n+\n+impl serde::de::Visitor for A {\n+    type Value = ();\n+    fn visit_str<E>(&mut self, _v: &str) -> Result<Self::Value, E>\n+        where E: serde::Error,\n+    {\n+        unimplemented!()\n+    }\n+\n+    fn visit_string<E>(&mut self, _v: String) -> Result<Self::Value, E>\n+        where E: serde::Error,\n+    {\n+        unimplemented!()\n+    }\n+}\n+\n+struct B;\n+\n+impl serde::de::Visitor for B {\n+    type Value = ();\n+\n+    fn visit_string<E>(&mut self, _v: String) -> Result<Self::Value, E>\n+    //~^ ERROR you should not implement `visit_string` without also implementing `visit_str`\n+        where E: serde::Error,\n+    {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "c97be3f6e6f85618019b150825eb1c2c7483d453", "filename": "tests/dogfood.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a371558bdbe8362ad7b94784becbb9f156caa45f/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a371558bdbe8362ad7b94784becbb9f156caa45f/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=a371558bdbe8362ad7b94784becbb9f156caa45f", "patch": "@@ -17,7 +17,7 @@ fn dogfood() {\n     let mut s = String::new();\n     s.push_str(\" -L target/debug/\");\n     s.push_str(\" -L target/debug/deps\");\n-    s.push_str(\" -Zextra-plugins=clippy -Ltarget_recur/debug -Dclippy_pedantic -Dclippy\");\n+    s.push_str(\" -Zextra-plugins=clippy -Ltarget_recur/debug -Dclippy_pedantic -Dclippy -Dclippy_lints_internal\");\n     config.target_rustcflags = Some(s);\n     if let Ok(name) = var(\"TESTNAME\") {\n         config.filter = Some(name.to_owned())\n@@ -29,6 +29,7 @@ fn dogfood() {\n     }\n \n     config.mode = cfg_mode;\n+    config.verbose = true;\n \n     let files = [\"src/main.rs\", \"src/lib.rs\", \"clippy_lints/src/lib.rs\"];\n "}, {"sha": "e81f71617ffa2b870cd06dbccaeca04fdc3dfc97", "filename": "util/update_lints.py", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a371558bdbe8362ad7b94784becbb9f156caa45f/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/a371558bdbe8362ad7b94784becbb9f156caa45f/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=a371558bdbe8362ad7b94784becbb9f156caa45f", "patch": "@@ -150,11 +150,10 @@ def main(print_only=False, check=False):\n         return\n \n     # collect all lints from source files\n-    for root, _, files in os.walk('clippy_lints/src'):\n-        for fn in files:\n-            if fn.endswith('.rs'):\n-                collect(lints, deprecated_lints, restriction_lints,\n-                        os.path.join(root, fn))\n+    for fn in os.listdir('clippy_lints/src'):\n+        if fn.endswith('.rs'):\n+            collect(lints, deprecated_lints, restriction_lints,\n+                    os.path.join('clippy_lints', 'src', fn))\n \n     # determine version\n     with open('Cargo.toml') as fp:"}]}