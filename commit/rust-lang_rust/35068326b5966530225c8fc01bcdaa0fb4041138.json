{"sha": "35068326b5966530225c8fc01bcdaa0fb4041138", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MDY4MzI2YjU5NjY1MzAyMjVjOGZjMDFiY2RhYTBmYjQwNDExMzg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-02T08:00:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-05T15:24:22Z"}, "message": "document remaining unsafety in maybe_uninit.rs", "tree": {"sha": "4a6a9296adef239d2e56c40359ffeedd8a480588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a6a9296adef239d2e56c40359ffeedd8a480588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35068326b5966530225c8fc01bcdaa0fb4041138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35068326b5966530225c8fc01bcdaa0fb4041138", "html_url": "https://github.com/rust-lang/rust/commit/35068326b5966530225c8fc01bcdaa0fb4041138", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35068326b5966530225c8fc01bcdaa0fb4041138/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cff5f56886b60bab024d51d26866e99a293da56b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cff5f56886b60bab024d51d26866e99a293da56b", "html_url": "https://github.com/rust-lang/rust/commit/cff5f56886b60bab024d51d26866e99a293da56b"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "b64abf68c5e4a6184d0af45d889e7f1cba0891f2", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35068326b5966530225c8fc01bcdaa0fb4041138/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35068326b5966530225c8fc01bcdaa0fb4041138/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=35068326b5966530225c8fc01bcdaa0fb4041138", "patch": "@@ -3,8 +3,6 @@ use crate::fmt;\n use crate::intrinsics;\n use crate::mem::ManuallyDrop;\n \n-// ignore-tidy-undocumented-unsafe\n-\n /// A wrapper type to construct uninitialized instances of `T`.\n ///\n /// # Initialization invariant\n@@ -355,6 +353,7 @@ impl<T> MaybeUninit<T> {\n     #[rustc_diagnostic_item = \"maybe_uninit_zeroed\"]\n     pub fn zeroed() -> MaybeUninit<T> {\n         let mut u = MaybeUninit::<T>::uninit();\n+        // SAFETY: `u.as_mut_ptr()` points to allocated memory.\n         unsafe {\n             u.as_mut_ptr().write_bytes(0u8, 1);\n         }\n@@ -368,10 +367,9 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[inline(always)]\n     pub fn write(&mut self, val: T) -> &mut T {\n-        unsafe {\n-            self.value = ManuallyDrop::new(val);\n-            self.assume_init_mut()\n-        }\n+        *self = MaybeUninit::new(val);\n+        // SAFETY: We just initialized this value.\n+        unsafe { self.assume_init_mut() }\n     }\n \n     /// Gets a pointer to the contained value. Reading from this pointer or turning it"}]}