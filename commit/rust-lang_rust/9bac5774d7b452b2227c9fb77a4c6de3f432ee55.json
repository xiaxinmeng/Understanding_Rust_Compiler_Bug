{"sha": "9bac5774d7b452b2227c9fb77a4c6de3f432ee55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYWM1Nzc0ZDdiNDUyYjIyMjdjOWZiNzdhNGM2ZGUzZjQzMmVlNTU=", "commit": {"author": {"name": "Laurence Tratt", "email": "laurie@tratt.net", "date": "2020-08-17T08:34:15Z"}, "committer": {"name": "Laurence Tratt", "email": "laurie@tratt.net", "date": "2020-08-17T08:34:15Z"}, "message": "Grammar tweak.", "tree": {"sha": "e06fb0ea70c7088ebf5b561a07f58c022497b470", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e06fb0ea70c7088ebf5b561a07f58c022497b470"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bac5774d7b452b2227c9fb77a4c6de3f432ee55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bac5774d7b452b2227c9fb77a4c6de3f432ee55", "html_url": "https://github.com/rust-lang/rust/commit/9bac5774d7b452b2227c9fb77a4c6de3f432ee55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bac5774d7b452b2227c9fb77a4c6de3f432ee55/comments", "author": {"login": "ltratt", "id": 20318, "node_id": "MDQ6VXNlcjIwMzE4", "avatar_url": "https://avatars.githubusercontent.com/u/20318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltratt", "html_url": "https://github.com/ltratt", "followers_url": "https://api.github.com/users/ltratt/followers", "following_url": "https://api.github.com/users/ltratt/following{/other_user}", "gists_url": "https://api.github.com/users/ltratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltratt/subscriptions", "organizations_url": "https://api.github.com/users/ltratt/orgs", "repos_url": "https://api.github.com/users/ltratt/repos", "events_url": "https://api.github.com/users/ltratt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ltratt", "id": 20318, "node_id": "MDQ6VXNlcjIwMzE4", "avatar_url": "https://avatars.githubusercontent.com/u/20318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltratt", "html_url": "https://github.com/ltratt", "followers_url": "https://api.github.com/users/ltratt/followers", "following_url": "https://api.github.com/users/ltratt/following{/other_user}", "gists_url": "https://api.github.com/users/ltratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltratt/subscriptions", "organizations_url": "https://api.github.com/users/ltratt/orgs", "repos_url": "https://api.github.com/users/ltratt/repos", "events_url": "https://api.github.com/users/ltratt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68209c3fe4e0f5c3758f18e98efc175af31c2e51", "url": "https://api.github.com/repos/rust-lang/rust/commits/68209c3fe4e0f5c3758f18e98efc175af31c2e51", "html_url": "https://github.com/rust-lang/rust/commit/68209c3fe4e0f5c3758f18e98efc175af31c2e51"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "2f588e79bda4cc7abd671d8f9fb834da7e95101d", "filename": "library/core/src/option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bac5774d7b452b2227c9fb77a4c6de3f432ee55/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bac5774d7b452b2227c9fb77a4c6de3f432ee55/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=9bac5774d7b452b2227c9fb77a4c6de3f432ee55", "patch": "@@ -83,10 +83,10 @@\n //! * [`ptr::NonNull<U>`]\n //! * `#[repr(transparent)]` struct around one of the types in this list.\n //!\n-//! For the above cases, it is guaranteed that one can [`mem::transmute`]\n-//! from all valid values of `T` to `Option<T>` and from\n-//! `Some::<T>(_)` to `T` (but transmuting `None::<T>` to `T` is undefined\n-//! behaviour).\n+//! It is further guaranteed that, for the cases above, one can\n+//! [`mem::transmute`] from all valid values of `T` to `Option<T>` and\n+//! from `Some::<T>(_)` to `T` (but transmuting `None::<T>` to `T`\n+//! is undefined behaviour).\n //!\n //! # Examples\n //!"}]}