{"sha": "fbf0b84b32aab798258838d5e932dbc56c4a1813", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZjBiODRiMzJhYWI3OTgyNTg4MzhkNWU5MzJkYmM1NmM0YTE4MTM=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-06-02T14:42:33Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-06-02T14:42:33Z"}, "message": "Make use of slice pattern", "tree": {"sha": "a118b0dfdf0d1707d59cffe1080b14dc8bc359b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a118b0dfdf0d1707d59cffe1080b14dc8bc359b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbf0b84b32aab798258838d5e932dbc56c4a1813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbf0b84b32aab798258838d5e932dbc56c4a1813", "html_url": "https://github.com/rust-lang/rust/commit/fbf0b84b32aab798258838d5e932dbc56c4a1813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbf0b84b32aab798258838d5e932dbc56c4a1813/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfafb8e0d61fd55bf72e11babefee76d17006367", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfafb8e0d61fd55bf72e11babefee76d17006367", "html_url": "https://github.com/rust-lang/rust/commit/bfafb8e0d61fd55bf72e11babefee76d17006367"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "7e07e7751e34ace9717fd862da8a6ea79d690105", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fbf0b84b32aab798258838d5e932dbc56c4a1813/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf0b84b32aab798258838d5e932dbc56c4a1813/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=fbf0b84b32aab798258838d5e932dbc56c4a1813", "patch": "@@ -165,8 +165,8 @@ pub fn match_trait_method(cx: &LateContext<'_, '_>, expr: &Expr<'_>, path: &[&st\n /// Checks if an expression references a variable of the given name.\n pub fn match_var(expr: &Expr<'_>, var: Name) -> bool {\n     if let ExprKind::Path(QPath::Resolved(None, ref path)) = expr.kind {\n-        if path.segments.len() == 1 && path.segments[0].ident.name == var {\n-            return true;\n+        if let [p] = path.segments {\n+            return p.ident.name == var;\n         }\n     }\n     false\n@@ -181,8 +181,7 @@ pub fn last_path_segment<'tcx>(path: &QPath<'tcx>) -> &'tcx PathSegment<'tcx> {\n \n pub fn single_segment_path<'tcx>(path: &QPath<'tcx>) -> Option<&'tcx PathSegment<'tcx>> {\n     match *path {\n-        QPath::Resolved(_, ref path) if path.segments.len() == 1 => Some(&path.segments[0]),\n-        QPath::Resolved(..) => None,\n+        QPath::Resolved(_, ref path) => path.segments.get(0),\n         QPath::TypeRelative(_, ref seg) => Some(seg),\n     }\n }\n@@ -201,9 +200,12 @@ pub fn match_qpath(path: &QPath<'_>, segments: &[&str]) -> bool {\n         QPath::Resolved(_, ref path) => match_path(path, segments),\n         QPath::TypeRelative(ref ty, ref segment) => match ty.kind {\n             TyKind::Path(ref inner_path) => {\n-                !segments.is_empty()\n-                    && match_qpath(inner_path, &segments[..(segments.len() - 1)])\n-                    && segment.ident.name.as_str() == segments[segments.len() - 1]\n+                if let [prefix @ .., end] = segments {\n+                    if match_qpath(inner_path, prefix) {\n+                        return segment.ident.name.as_str() == *end;\n+                    }\n+                }\n+                false\n             },\n             _ => false,\n         },"}]}