{"sha": "59e71141029162fe4b4a3ed4cad430dace3fb995", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZTcxMTQxMDI5MTYyZmU0YjRhM2VkNGNhZDQzMGRhY2UzZmI5OTU=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2018-05-16T13:08:39Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2018-05-16T13:08:39Z"}, "message": "Fix `Debug` impl of `Duration` for precisions > 9\n\nPreviously, the code would panic for high precision values. Now it\nhas the same behavior as printing normal floating point values: if\na high precision is specified, '0's are added.", "tree": {"sha": "8e1ca454c3f5672d2208aba8bb5bf3de4e665743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e1ca454c3f5672d2208aba8bb5bf3de4e665743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59e71141029162fe4b4a3ed4cad430dace3fb995", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENwctvZ5TgcKYXim8PLr0FT+BhicFAlr8LaoACgkQPLr0FT+B\nhic4Gg/9HujGeO9PHw8KEPdh/yLGxMmSAOuZsFWg2epC8/v0r74Qc5+8PykzUbe/\nEjpONC09GcG0aSnmcdPPhAswFsDFyWk1gs3PNlAErD5zTiUuaSAqpmnTurZ4SphA\nYhX91PMnHVHl4jOtuI+6SmklBHVEYB5yceU1bOaZ61hDUe8DdBM91op0oo7oVdAM\nDGS8seBo8PX13cpWm/+LsyNQGSOGNo4BwP09RjRRBI/KhJ2pQ1ne/jvsKhDoEF5k\nMDUePQimZwnJcj6TFmfA9uLs9bcQO9P1S6CBJWXBdt4K3i6D9YE8XOwmYA3HzPgf\nobr3YhP4ggqDwQXxYfknHYW0ZhQ0SyjofBU55GU81N5k9lPTO58MVoLJhiHDpBro\ndqMVLGLcnaG12TWfONkdZ4uapphhxqg+LsJfalGdUiqNhcYyt8hIBDuM+0kBhcIW\nLnLHjPLwAnyue5Rw47ZwKJt9Y5tuZ3MDx88Se1c7TZ4dus9+JSM8B0cwJxzBHr/r\naGicaxFRAOHMG/xqLYXsLaSa/aZhOfr92CWlfPATS3FmjqETcEcs2cwGN75KBQKN\nTDhQWbPv4E6qH/2zLFSq3sTJnxWmRmk7mT8vOUyZTwyYLURK4wbQXDcMoJMrSgw1\n19QJdWbUfLz8SCs7U6DYkOwH64pcCT0InUovLmtIYFZ5L5P5xAc=\n=cylB\n-----END PGP SIGNATURE-----", "payload": "tree 8e1ca454c3f5672d2208aba8bb5bf3de4e665743\nparent 2a28ac31e9abe0a01861bfffed85872431cc6b72\nauthor Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1526476119 +0200\ncommitter Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1526476119 +0200\n\nFix `Debug` impl of `Duration` for precisions > 9\n\nPreviously, the code would panic for high precision values. Now it\nhas the same behavior as printing normal floating point values: if\na high precision is specified, '0's are added.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59e71141029162fe4b4a3ed4cad430dace3fb995", "html_url": "https://github.com/rust-lang/rust/commit/59e71141029162fe4b4a3ed4cad430dace3fb995", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59e71141029162fe4b4a3ed4cad430dace3fb995/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a28ac31e9abe0a01861bfffed85872431cc6b72", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a28ac31e9abe0a01861bfffed85872431cc6b72", "html_url": "https://github.com/rust-lang/rust/commit/2a28ac31e9abe0a01861bfffed85872431cc6b72"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "ef3e1acfbf502628b7dc9f078a72c0287f62a048", "filename": "src/libcore/tests/time.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/59e71141029162fe4b4a3ed4cad430dace3fb995/src%2Flibcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e71141029162fe4b4a3ed4cad430dace3fb995/src%2Flibcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftime.rs?ref=59e71141029162fe4b4a3ed4cad430dace3fb995", "patch": "@@ -219,11 +219,8 @@ fn debug_formatting_precision_zero() {\n \n #[test]\n fn debug_formatting_precision_two() {\n-    // This might seem inconsistent with the other units, but printing\n-    // fractional digits for nano seconds would imply more precision than is\n-    // actually stored.\n-    assert_eq!(format!(\"{:.2?}\", Duration::new(0, 0)), \"0ns\");\n-    assert_eq!(format!(\"{:.2?}\", Duration::new(0, 123)), \"123ns\");\n+    assert_eq!(format!(\"{:.2?}\", Duration::new(0, 0)), \"0.00ns\");\n+    assert_eq!(format!(\"{:.2?}\", Duration::new(0, 123)), \"123.00ns\");\n \n     assert_eq!(format!(\"{:.2?}\", Duration::new(0, 1_000)), \"1.00\u00b5s\");\n     assert_eq!(format!(\"{:.2?}\", Duration::new(0, 7_001)), \"7.00\u00b5s\");\n@@ -244,3 +241,12 @@ fn debug_formatting_precision_two() {\n     assert_eq!(format!(\"{:.2?}\", Duration::new(2, 105_000_000)), \"2.11s\");\n     assert_eq!(format!(\"{:.2?}\", Duration::new(8, 999_999_999)), \"9.00s\");\n }\n+\n+#[test]\n+fn debug_formatting_precision_high() {\n+    assert_eq!(format!(\"{:.5?}\",  Duration::new(0, 23_678)), \"23.67800\u00b5s\");\n+\n+    assert_eq!(format!(\"{:.9?}\",  Duration::new(1, 000_000_000)), \"1.000000000s\");\n+    assert_eq!(format!(\"{:.10?}\", Duration::new(4, 001_000_000)), \"4.0010000000s\");\n+    assert_eq!(format!(\"{:.20?}\", Duration::new(4, 001_000_000)), \"4.00100000000000000000s\");\n+}"}, {"sha": "9703c61fe92a1e736d0d67539f6678d43c6a22d6", "filename": "src/libcore/time.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/59e71141029162fe4b4a3ed4cad430dace3fb995/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e71141029162fe4b4a3ed4cad430dace3fb995/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=59e71141029162fe4b4a3ed4cad430dace3fb995", "patch": "@@ -511,9 +511,9 @@ impl fmt::Debug for Duration {\n             // The next digit is written at this position\n             let mut pos = 0;\n \n-            // We can stop when there are no non-zero digits left or (when a\n-            // precision was set and we already emitted that many digits).\n-            while fractional_part > 0 && f.precision().map(|p| p > pos).unwrap_or(true) {\n+            // We keep writing digits into the buffer while there are non-zero\n+            // digits left and we haven't written enough digits yet.\n+            while fractional_part > 0 && pos < f.precision().unwrap_or(9) {\n                 // Write new digit into the buffer\n                 buf[pos] = b'0' + (fractional_part / divisor) as u8;\n \n@@ -556,9 +556,13 @@ impl fmt::Debug for Duration {\n                 }\n             }\n \n+            // Determine the end of the buffer: if precision is set, we just\n+            // use as many digits from the buffer (capped to 9). If it isn't\n+            // set, we only use all digits up to the last non-zero one.\n+            let end = f.precision().map(|p| ::cmp::min(p, 9)).unwrap_or(pos);\n+\n             // If we haven't emitted a single fractional digit and the precision\n             // wasn't set to a non-zero value, we don't print the decimal point.\n-            let end = f.precision().unwrap_or(pos);\n             if end == 0 {\n                 write!(f, \"{}\", integer_part)\n             } else {\n@@ -568,7 +572,9 @@ impl fmt::Debug for Duration {\n                     ::str::from_utf8_unchecked(&buf[..end])\n                 };\n \n-                write!(f, \"{}.{}\", integer_part, s)\n+                // If the user request a precision > 9, we pad '0's at the end.\n+                let w = f.precision().unwrap_or(pos);\n+                write!(f, \"{}.{:0<width$}\", integer_part, s, width = w)\n             }\n         }\n \n@@ -587,7 +593,8 @@ impl fmt::Debug for Duration {\n             fmt_decimal(f, self.nanos as u64 / 1_000, self.nanos % 1_000, 100)?;\n             f.write_str(\"\u00b5s\")\n         } else {\n-            write!(f, \"{}ns\", self.nanos)\n+            fmt_decimal(f, self.nanos as u64, 0, 1)?;\n+            f.write_str(\"ns\")\n         }\n     }\n }"}]}