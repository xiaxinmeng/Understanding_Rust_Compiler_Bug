{"sha": "036b5fec49aa5d5143b83360442400d1e83ccefa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNmI1ZmVjNDlhYTVkNTE0M2I4MzM2MDQ0MjQwMGQxZTgzY2NlZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-18T21:50:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-18T21:50:45Z"}, "message": "Auto merge of #73446 - ecstatic-morse:issue-73431, r=pnkfelix\n\nMake novel structural match violations not a `bug`\n\nFixes (on master) #73431.\n\nIdeally, `CustomEq` would emit a strict subset of the structural match errors that are found by `search_for_structural_match_violation`, since it allows more cases due to value-based reasoning. However, const qualification is more conservative than `search_for_structural_match_violation` around associated constants, since qualification does not try to substitute type parameters.\n\nIn the long term, we should probably make const qualification work for generic associated constants, but I don't like extending its capabilities even further.\n\nr? @pnkfelix", "tree": {"sha": "d1cb64d7c508890c8032bae0536fb59794c8c941", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1cb64d7c508890c8032bae0536fb59794c8c941"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/036b5fec49aa5d5143b83360442400d1e83ccefa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/036b5fec49aa5d5143b83360442400d1e83ccefa", "html_url": "https://github.com/rust-lang/rust/commit/036b5fec49aa5d5143b83360442400d1e83ccefa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/036b5fec49aa5d5143b83360442400d1e83ccefa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e55d3f9c5213fe1a25366450127bdff67ad1eca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e55d3f9c5213fe1a25366450127bdff67ad1eca2", "html_url": "https://github.com/rust-lang/rust/commit/e55d3f9c5213fe1a25366450127bdff67ad1eca2"}, {"sha": "3a1207f6883f799af13027ceb1715ff492382e87", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1207f6883f799af13027ceb1715ff492382e87", "html_url": "https://github.com/rust-lang/rust/commit/3a1207f6883f799af13027ceb1715ff492382e87"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "1aed8e844b60b02f261b2b3e27fddbe7be608ae2", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/036b5fec49aa5d5143b83360442400d1e83ccefa/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036b5fec49aa5d5143b83360442400d1e83ccefa/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=036b5fec49aa5d5143b83360442400d1e83ccefa", "patch": "@@ -107,8 +107,15 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 cv.ty, structural\n             );\n \n+            // This can occur because const qualification treats all associated constants as\n+            // opaque, whereas `search_for_structural_match_violation` tries to monomorphize them\n+            // before it runs.\n+            //\n+            // FIXME(#73448): Find a way to bring const qualification into parity with\n+            // `search_for_structural_match_violation`.\n             if structural.is_none() && mir_structural_match_violation {\n-                bug!(\"MIR const-checker found novel structural match violation\");\n+                warn!(\"MIR const-checker found novel structural match violation. See #73448.\");\n+                return inlined_const_as_pat;\n             }\n \n             if let Some(non_sm_ty) = structural {"}, {"sha": "fa18a3af1b09f2b98fda88fc0ca803df0daffe0a", "filename": "src/test/ui/consts/const_in_pattern/issue-73431.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/036b5fec49aa5d5143b83360442400d1e83ccefa/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-73431.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036b5fec49aa5d5143b83360442400d1e83ccefa/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-73431.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-73431.rs?ref=036b5fec49aa5d5143b83360442400d1e83ccefa", "patch": "@@ -0,0 +1,29 @@\n+// run-pass\n+\n+// Regression test for https://github.com/rust-lang/rust/issues/73431.\n+\n+pub trait Zero {\n+    const ZERO: Self;\n+}\n+\n+impl Zero for usize {\n+    const ZERO: Self = 0;\n+}\n+\n+impl<T: Zero> Zero for Wrapper<T> {\n+    const ZERO: Self = Wrapper(T::ZERO);\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub struct Wrapper<T>(T);\n+\n+fn is_zero(x: Wrapper<usize>) -> bool {\n+    match x {\n+        Zero::ZERO => true,\n+        _ => false,\n+    }\n+}\n+\n+fn main() {\n+    let _ = is_zero(Wrapper(42));\n+}"}]}