{"sha": "759317ca8bf3d2997b5a0973679d9c7bae063e15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1OTMxN2NhOGJmM2QyOTk3YjVhMDk3MzY3OWQ5YzdiYWUwNjNlMTU=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-06-30T01:44:38Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-14T23:45:01Z"}, "message": "Factor out closure construction from trans_for_each.", "tree": {"sha": "d0ce70066269d4c7699784bdac68e9dbe17e72e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ce70066269d4c7699784bdac68e9dbe17e72e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/759317ca8bf3d2997b5a0973679d9c7bae063e15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/759317ca8bf3d2997b5a0973679d9c7bae063e15", "html_url": "https://github.com/rust-lang/rust/commit/759317ca8bf3d2997b5a0973679d9c7bae063e15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/759317ca8bf3d2997b5a0973679d9c7bae063e15/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0957525cc67abd582cecf82486c9955268b3a9ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/0957525cc67abd582cecf82486c9955268b3a9ec", "html_url": "https://github.com/rust-lang/rust/commit/0957525cc67abd582cecf82486c9955268b3a9ec"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "958b9e4cb59499999751c1dddf2de14a3fe5062f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/759317ca8bf3d2997b5a0973679d9c7bae063e15/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759317ca8bf3d2997b5a0973679d9c7bae063e15/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=759317ca8bf3d2997b5a0973679d9c7bae063e15", "patch": "@@ -4768,20 +4768,10 @@ fn trans_for_each(&@block_ctxt cx, &@ast::local local, &@ast::expr seq,\n     // Step 3: Call iter passing [lliterbody, llenv], plus other args.\n     alt (seq.node) {\n         case (ast::expr_call(?f, ?args)) {\n-            auto pair = alloca(cx, T_fn_pair(*lcx.ccx, iter_body_llty));\n-            auto code_cell =\n-                cx.build.GEP(pair, ~[C_int(0), C_int(abi::fn_field_code)]);\n-            cx.build.Store(lliterbody, code_cell);\n-            auto env_cell =\n-                cx.build.GEP(pair, ~[C_int(0), C_int(abi::fn_field_box)]);\n-            auto llenvblobptr =\n-                cx.build.PointerCast(llenvptr,\n-                                     T_opaque_closure_ptr(*lcx.ccx));\n-            cx.build.Store(llenvblobptr, env_cell);\n-            // log \"lliterbody: \" + val_str(lcx.ccx.tn, lliterbody);\n-\n-            r = trans_call(cx, f, some[ValueRef](cx.build.Load(pair)), args,\n-                           seq.id);\n+            auto pair = create_real_fn_pair(cx, iter_body_llty,\n+                                            lliterbody, llenvptr);\n+            r = trans_call(cx, f, some[ValueRef](cx.build.Load(pair)),\n+                           args, seq.id);\n             ret rslt(r.bcx, C_nil());\n         }\n     }\n@@ -8714,6 +8704,26 @@ fn create_fn_pair(&@crate_ctxt cx, str ps, TypeRef llfnty, ValueRef llfn,\n     ret gvar;\n }\n \n+// Create a /real/ closure: this is like create_fn_pair, but creates a\n+// a fn value on the stack with a specified environment (which need not be\n+// on the stack).\n+fn create_real_fn_pair(&@block_ctxt cx, TypeRef llfnty,\n+                       ValueRef llfn, ValueRef llenvptr) -> ValueRef {\n+    auto lcx = cx.fcx.lcx;\n+\n+    auto pair = alloca(cx, T_fn_pair(*lcx.ccx, llfnty));\n+    auto code_cell =\n+        cx.build.GEP(pair, ~[C_int(0), C_int(abi::fn_field_code)]);\n+    cx.build.Store(llfn, code_cell);\n+    auto env_cell =\n+        cx.build.GEP(pair, ~[C_int(0), C_int(abi::fn_field_box)]);\n+    auto llenvblobptr =\n+        cx.build.PointerCast(llenvptr,\n+                             T_opaque_closure_ptr(*lcx.ccx));\n+    cx.build.Store(llenvblobptr, env_cell);\n+    ret pair;\n+}\n+\n fn register_fn_pair(&@crate_ctxt cx, str ps, TypeRef llfnty, ValueRef llfn,\n                     ast::node_id id) {\n     // FIXME: We should also hide the unexported pairs in crates."}]}