{"sha": "fb2129e043e19e71562c780dd3ef2402e378d52c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMjEyOWUwNDNlMTllNzE1NjJjNzgwZGQzZWYyNDAyZTM3OGQ1MmM=", "commit": {"author": {"name": "Jonathan S", "email": "gereeter+code@gmail.com", "date": "2015-11-04T05:12:37Z"}, "committer": {"name": "Jonathan S", "email": "gereeter+code@gmail.com", "date": "2015-11-04T05:45:47Z"}, "message": "Remove the RefCell around freevars and freevars_seen in librustc_resolve", "tree": {"sha": "06c0941e00ea26807f86c91f74991a28571299aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06c0941e00ea26807f86c91f74991a28571299aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb2129e043e19e71562c780dd3ef2402e378d52c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2129e043e19e71562c780dd3ef2402e378d52c", "html_url": "https://github.com/rust-lang/rust/commit/fb2129e043e19e71562c780dd3ef2402e378d52c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb2129e043e19e71562c780dd3ef2402e378d52c/comments", "author": {"login": "gereeter", "id": 2328242, "node_id": "MDQ6VXNlcjIzMjgyNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2328242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gereeter", "html_url": "https://github.com/gereeter", "followers_url": "https://api.github.com/users/gereeter/followers", "following_url": "https://api.github.com/users/gereeter/following{/other_user}", "gists_url": "https://api.github.com/users/gereeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/gereeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gereeter/subscriptions", "organizations_url": "https://api.github.com/users/gereeter/orgs", "repos_url": "https://api.github.com/users/gereeter/repos", "events_url": "https://api.github.com/users/gereeter/events{/privacy}", "received_events_url": "https://api.github.com/users/gereeter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gereeter", "id": 2328242, "node_id": "MDQ6VXNlcjIzMjgyNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2328242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gereeter", "html_url": "https://github.com/gereeter", "followers_url": "https://api.github.com/users/gereeter/followers", "following_url": "https://api.github.com/users/gereeter/following{/other_user}", "gists_url": "https://api.github.com/users/gereeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/gereeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gereeter/subscriptions", "organizations_url": "https://api.github.com/users/gereeter/orgs", "repos_url": "https://api.github.com/users/gereeter/repos", "events_url": "https://api.github.com/users/gereeter/events{/privacy}", "received_events_url": "https://api.github.com/users/gereeter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c340ea1de5dba6d0184103b9d67e290e3ea02981", "url": "https://api.github.com/repos/rust-lang/rust/commits/c340ea1de5dba6d0184103b9d67e290e3ea02981", "html_url": "https://github.com/rust-lang/rust/commit/c340ea1de5dba6d0184103b9d67e290e3ea02981"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "fb0b1c402da8633ed4713a8522229c771b0d191e", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb2129e043e19e71562c780dd3ef2402e378d52c/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2129e043e19e71562c780dd3ef2402e378d52c/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=fb2129e043e19e71562c780dd3ef2402e378d52c", "patch": "@@ -448,7 +448,7 @@ impl<'tcx> ctxt<'tcx> {\n                                  def_map: DefMap,\n                                  named_region_map: resolve_lifetime::NamedRegionMap,\n                                  map: ast_map::Map<'tcx>,\n-                                 freevars: RefCell<FreevarMap>,\n+                                 freevars: FreevarMap,\n                                  region_maps: RegionMaps,\n                                  lang_items: middle::lang_items::LanguageItems,\n                                  stability: stability::Index<'tcx>,\n@@ -481,7 +481,7 @@ impl<'tcx> ctxt<'tcx> {\n             super_predicates: RefCell::new(DefIdMap()),\n             fulfilled_predicates: RefCell::new(traits::FulfilledPredicates::new()),\n             map: map,\n-            freevars: freevars,\n+            freevars: RefCell::new(freevars),\n             tcache: RefCell::new(DefIdMap()),\n             rcache: RefCell::new(FnvHashMap()),\n             tc_cache: RefCell::new(FnvHashMap()),"}, {"sha": "4f602abfbb586a7c19a258e8164ff30a47268914", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fb2129e043e19e71562c780dd3ef2402e378d52c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2129e043e19e71562c780dd3ef2402e378d52c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=fb2129e043e19e71562c780dd3ef2402e378d52c", "patch": "@@ -1151,8 +1151,8 @@ pub struct Resolver<'a, 'tcx:'a> {\n     primitive_type_table: PrimitiveTypeTable,\n \n     def_map: DefMap,\n-    freevars: RefCell<FreevarMap>,\n-    freevars_seen: RefCell<NodeMap<NodeMap<usize>>>,\n+    freevars: FreevarMap,\n+    freevars_seen: NodeMap<NodeMap<usize>>,\n     export_map: ExportMap,\n     trait_map: TraitMap,\n     external_exports: ExternalExports,\n@@ -1227,8 +1227,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             primitive_type_table: PrimitiveTypeTable::new(),\n \n             def_map: RefCell::new(NodeMap()),\n-            freevars: RefCell::new(NodeMap()),\n-            freevars_seen: RefCell::new(NodeMap()),\n+            freevars: NodeMap(),\n+            freevars_seen: NodeMap(),\n             export_map: NodeMap(),\n             trait_map: NodeMap(),\n             used_imports: HashSet::new(),\n@@ -3081,7 +3081,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     }\n \n     // Resolve a local definition, potentially adjusting for closures.\n-    fn adjust_local_def(&self, local_def: LocalDef, span: Span) -> Option<Def> {\n+    fn adjust_local_def(&mut self, local_def: LocalDef, span: Span) -> Option<Def> {\n         let ribs = match local_def.ribs {\n             Some((TypeNS, i)) => &self.type_ribs[i+1..],\n             Some((ValueNS, i)) => &self.value_ribs[i+1..],\n@@ -3103,15 +3103,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             let prev_def = def;\n                             let node_def_id = self.ast_map.local_def_id(node_id);\n \n-                            let mut seen = self.freevars_seen.borrow_mut();\n-                            let seen = seen.entry(function_id).or_insert_with(|| NodeMap());\n+                            let seen = self.freevars_seen.entry(function_id)\n+                                                         .or_insert_with(|| NodeMap());\n                             if let Some(&index) = seen.get(&node_id) {\n                                 def = DefUpvar(node_def_id, node_id, index, function_id);\n                                 continue;\n                             }\n-                            let mut freevars = self.freevars.borrow_mut();\n-                            let vec = freevars.entry(function_id)\n-                                              .or_insert_with(|| vec![]);\n+                            let vec = self.freevars.entry(function_id)\n+                                                   .or_insert_with(|| vec![]);\n                             let depth = vec.len();\n                             vec.push(Freevar { def: prev_def, span: span });\n \n@@ -4028,7 +4027,7 @@ fn module_to_string(module: &Module) -> String {\n \n pub struct CrateMap {\n     pub def_map: DefMap,\n-    pub freevars: RefCell<FreevarMap>,\n+    pub freevars: FreevarMap,\n     pub export_map: ExportMap,\n     pub trait_map: TraitMap,\n     pub external_exports: ExternalExports,"}]}