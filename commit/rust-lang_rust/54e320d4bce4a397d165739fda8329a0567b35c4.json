{"sha": "54e320d4bce4a397d165739fda8329a0567b35c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZTMyMGQ0YmNlNGEzOTdkMTY1NzM5ZmRhODMyOWEwNTY3YjM1YzQ=", "commit": {"author": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-16T10:11:01Z"}, "committer": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-16T10:11:01Z"}, "message": "run rustfmt on various folders", "tree": {"sha": "2bae89e04abbdfc475eaeeaaee4b67d2324cf9f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bae89e04abbdfc475eaeeaaee4b67d2324cf9f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54e320d4bce4a397d165739fda8329a0567b35c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYA1I1AAoJEAkcWPS/w2Vx8UEP/1mb8X/jWo4YJaoa2Osv9bc4\n8/Oms3Y0JSy9Qe9QxsUKC0uiswC+xhmBkd67YFy2Lxl9Q+arYGA9qRE5np7SderZ\nq8oFv4StffIPMCnirL3N9maqx+sQd4vwMOJl4b3YwkoFEiFuF4jjEi2Ssxv7mta3\nUOu1VuC7HHdrKnpaU2rQ1cJRPbnJNha2mlGwaiZa31mHqYTNA0lMhGCaCQg6rQgr\nMlsn0lUIZKBUgDdlDRsr4VytxS5LgrSEl7ybZOAhx6NmmbX/S4DcuyH5dSQCj2mq\nLwtJu8rLVf/CsvuamqHYFj1WUHCOupQyPcxhpR0By/WcF7Yv6YEkbIz2qKkCODi2\nk5XNO8Me6+Wqly61kFi9pWeJKhXRte1rRL0vTFAX28emjZN/jahbOSq5fz49X3Jy\n+QYLrPBhtbyzg+w65EZe9F0vlWwUZBM6E57ncJGv152Fg2rxiwTh2N6sTF48Jgmz\nc8GsgB95eyyUGWjup9JY4+l6EVGVNDnbh5VmuLerTdIUBXJYf2OtAhFlpdapxL3m\nrEzD5njhbb7otwfzjF88dA0BLdxESuy2TsfGeYMjvrp1F4ue1g3CfXh0ur3yP1Pg\nLz/DdLGigJR1NY/I0r/qXNi4xVKhdR1iNiOKinHGdeGaBqeIS5I8vOrtA1C+77fA\nTZ0te3w3kWQpo4ZasIeR\n=mCH+\n-----END PGP SIGNATURE-----", "payload": "tree 2bae89e04abbdfc475eaeeaaee4b67d2324cf9f5\nparent 6dc035ed911672c6a1f7afc9eed15fb08e574e5b\nauthor Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1476612661 +0530\ncommitter Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1476612661 +0530\n\nrun rustfmt on various folders\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54e320d4bce4a397d165739fda8329a0567b35c4", "html_url": "https://github.com/rust-lang/rust/commit/54e320d4bce4a397d165739fda8329a0567b35c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54e320d4bce4a397d165739fda8329a0567b35c4/comments", "author": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc035ed911672c6a1f7afc9eed15fb08e574e5b", "html_url": "https://github.com/rust-lang/rust/commit/6dc035ed911672c6a1f7afc9eed15fb08e574e5b"}], "stats": {"total": 65, "additions": 26, "deletions": 39}, "files": [{"sha": "38844fb6c9ef0748c100a1756e72191b6c42d1e2", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54e320d4bce4a397d165739fda8329a0567b35c4/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e320d4bce4a397d165739fda8329a0567b35c4/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=54e320d4bce4a397d165739fda8329a0567b35c4", "patch": "@@ -25,7 +25,9 @@ pub fn run_silent(cmd: &mut Command) {\n     };\n     if !status.success() {\n         fail(&format!(\"command did not execute successfully: {:?}\\n\\\n-                       expected success, got: {}\", cmd, status));\n+                       expected success, got: {}\",\n+                      cmd,\n+                      status));\n     }\n }\n \n@@ -65,7 +67,9 @@ pub fn output(cmd: &mut Command) -> String {\n     };\n     if !output.status.success() {\n         panic!(\"command did not execute successfully: {:?}\\n\\\n-                expected success, got: {}\", cmd, output.status);\n+                expected success, got: {}\",\n+               cmd,\n+               output.status);\n     }\n     String::from_utf8(output.stdout).unwrap()\n }"}, {"sha": "f23ea0ea8bf710dcf7794e2560ca14e7eb6595f6", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/54e320d4bce4a397d165739fda8329a0567b35c4/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e320d4bce4a397d165739fda8329a0567b35c4/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=54e320d4bce4a397d165739fda8329a0567b35c4", "patch": "@@ -57,11 +57,7 @@ impl<T> RawVec<T> {\n     pub fn new() -> Self {\n         unsafe {\n             // !0 is usize::MAX. This branch should be stripped at compile time.\n-            let cap = if mem::size_of::<T>() == 0 {\n-                !0\n-            } else {\n-                0\n-            };\n+            let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n \n             // heap::EMPTY doubles as \"unallocated\" and \"zero-sized allocation\"\n             RawVec {\n@@ -209,11 +205,7 @@ impl<T> RawVec<T> {\n \n             let (new_cap, ptr) = if self.cap == 0 {\n                 // skip to 4 because tiny Vec's are dumb; but not if that would cause overflow\n-                let new_cap = if elem_size > (!0) / 8 {\n-                    1\n-                } else {\n-                    4\n-                };\n+                let new_cap = if elem_size > (!0) / 8 { 1 } else { 4 };\n                 let ptr = heap::allocate(new_cap * elem_size, align);\n                 (new_cap, ptr)\n             } else {\n@@ -347,7 +339,7 @@ impl<T> RawVec<T> {\n         let elem_size = mem::size_of::<T>();\n         // Nothing we can really do about these checks :(\n         let required_cap = used_cap.checked_add(needed_extra_cap)\n-                                   .expect(\"capacity overflow\");\n+            .expect(\"capacity overflow\");\n         // Cannot overflow, because `cap <= isize::MAX`, and type of `cap` is `usize`.\n         let double_cap = self.cap * 2;\n         // `double_cap` guarantees exponential growth."}, {"sha": "369db8e75a398602215d72935f9dc4db2a6f943f", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/54e320d4bce4a397d165739fda8329a0567b35c4/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e320d4bce4a397d165739fda8329a0567b35c4/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=54e320d4bce4a397d165739fda8329a0567b35c4", "patch": "@@ -35,12 +35,8 @@ fn main() {\n     // that the feature set used by std is the same across all\n     // targets, which means we have to build the alloc_jemalloc crate\n     // for targets like emscripten, even if we don't use it.\n-    if target.contains(\"rumprun\") ||\n-        target.contains(\"bitrig\") ||\n-        target.contains(\"openbsd\") ||\n-        target.contains(\"msvc\") ||\n-        target.contains(\"emscripten\")\n-    {\n+    if target.contains(\"rumprun\") || target.contains(\"bitrig\") || target.contains(\"openbsd\") ||\n+       target.contains(\"msvc\") || target.contains(\"emscripten\") {\n         println!(\"cargo:rustc-cfg=dummy_jemalloc\");\n         return;\n     }\n@@ -64,16 +60,16 @@ fn main() {\n     // only msvc returns None for ar so unwrap is okay\n     let ar = build_helper::cc2ar(compiler.path(), &target).unwrap();\n     let cflags = compiler.args()\n-                         .iter()\n-                         .map(|s| s.to_str().unwrap())\n-                         .collect::<Vec<_>>()\n-                         .join(\" \");\n+        .iter()\n+        .map(|s| s.to_str().unwrap())\n+        .collect::<Vec<_>>()\n+        .join(\" \");\n \n     let mut stack = src_dir.join(\"../jemalloc\")\n-                           .read_dir()\n-                           .unwrap()\n-                           .map(|e| e.unwrap())\n-                           .collect::<Vec<_>>();\n+        .read_dir()\n+        .unwrap()\n+        .map(|e| e.unwrap())\n+        .collect::<Vec<_>>();\n     while let Some(entry) = stack.pop() {\n         let path = entry.path();\n         if entry.file_type().unwrap().is_dir() {\n@@ -155,10 +151,10 @@ fn main() {\n \n     run(&mut cmd);\n     run(Command::new(\"make\")\n-            .current_dir(&build_dir)\n-            .arg(\"build_lib_static\")\n-            .arg(\"-j\")\n-            .arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));\n+        .current_dir(&build_dir)\n+        .arg(\"build_lib_static\")\n+        .arg(\"-j\")\n+        .arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));\n \n     if target.contains(\"windows\") {\n         println!(\"cargo:rustc-link-lib=static=jemalloc\");"}, {"sha": "b380ba180f40ee865939c28cd6c244f2233d4d21", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54e320d4bce4a397d165739fda8329a0567b35c4/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e320d4bce4a397d165739fda8329a0567b35c4/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=54e320d4bce4a397d165739fda8329a0567b35c4", "patch": "@@ -221,11 +221,7 @@ mod imp {\n                                   HEAP_REALLOC_IN_PLACE_ONLY,\n                                   ptr as LPVOID,\n                                   size as SIZE_T) as *mut u8;\n-            if new.is_null() {\n-                old_size\n-            } else {\n-                size\n-            }\n+            if new.is_null() { old_size } else { size }\n         } else {\n             old_size\n         }"}, {"sha": "72785b9cc831e2367d3160615bb68bf4ff3a2e03", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54e320d4bce4a397d165739fda8329a0567b35c4/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54e320d4bce4a397d165739fda8329a0567b35c4/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=54e320d4bce4a397d165739fda8329a0567b35c4", "patch": "@@ -302,9 +302,8 @@ mod tests {\n \n         let arena = Wrap(TypedArena::new());\n \n-        let result = arena.alloc_outer(|| {\n-            Outer { inner: arena.alloc_inner(|| Inner { value: 10 }) }\n-        });\n+        let result =\n+            arena.alloc_outer(|| Outer { inner: arena.alloc_inner(|| Inner { value: 10 }) });\n \n         assert_eq!(result.inner.value, 10);\n     }"}]}