{"sha": "21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZTYzNmYxODgzZmY4ZDdkZDFkM2EwZTJkYjI0MWU2MTlhOGVlNzI=", "commit": {"author": {"name": "Matthew Kraai", "email": "kraai@ftbfs.org", "date": "2019-12-26T13:04:46Z"}, "committer": {"name": "Matthew Kraai", "email": "kraai@ftbfs.org", "date": "2019-12-26T13:04:46Z"}, "message": "Remove redundant link texts", "tree": {"sha": "d1ef573c3180f5f3dba3e9045c32bf04eff3f8c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1ef573c3180f5f3dba3e9045c32bf04eff3f8c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "html_url": "https://github.com/rust-lang/rust/commit/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/comments", "author": {"login": "kraai", "id": 552646, "node_id": "MDQ6VXNlcjU1MjY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/552646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraai", "html_url": "https://github.com/kraai", "followers_url": "https://api.github.com/users/kraai/followers", "following_url": "https://api.github.com/users/kraai/following{/other_user}", "gists_url": "https://api.github.com/users/kraai/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraai/subscriptions", "organizations_url": "https://api.github.com/users/kraai/orgs", "repos_url": "https://api.github.com/users/kraai/repos", "events_url": "https://api.github.com/users/kraai/events{/privacy}", "received_events_url": "https://api.github.com/users/kraai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraai", "id": 552646, "node_id": "MDQ6VXNlcjU1MjY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/552646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraai", "html_url": "https://github.com/kraai", "followers_url": "https://api.github.com/users/kraai/followers", "following_url": "https://api.github.com/users/kraai/following{/other_user}", "gists_url": "https://api.github.com/users/kraai/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraai/subscriptions", "organizations_url": "https://api.github.com/users/kraai/orgs", "repos_url": "https://api.github.com/users/kraai/repos", "events_url": "https://api.github.com/users/kraai/events{/privacy}", "received_events_url": "https://api.github.com/users/kraai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0b16b4e6aa94cd83fd2c029356ba537dc4502c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b16b4e6aa94cd83fd2c029356ba537dc4502c6", "html_url": "https://github.com/rust-lang/rust/commit/c0b16b4e6aa94cd83fd2c029356ba537dc4502c6"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "fc8ca5d07b21280c575477457b8e4e3e953b26b4", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -367,7 +367,7 @@ labels to triage issues:\n   to fix the issue.\n \n * The dark blue **final-comment-period** label marks bugs that are using the\n-  RFC signoff functionality of [rfcbot][rfcbot] and are currently in the final\n+  RFC signoff functionality of [rfcbot] and are currently in the final\n   comment period.\n \n * Red, **I**-prefixed labels indicate the **importance** of the issue. The\n@@ -385,7 +385,7 @@ labels to triage issues:\n   label.\n \n * The gray **proposed-final-comment-period** label marks bugs that are using\n-  the RFC signoff functionality of [rfcbot][rfcbot] and are currently awaiting\n+  the RFC signoff functionality of [rfcbot] and are currently awaiting\n   signoff of all team members in order to enter the final comment period.\n \n * Pink, **regression**-prefixed labels track regressions from stable to the"}, {"sha": "c527b378f7465622033bbdec317876af5dbbbea3", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -1094,7 +1094,7 @@ impl<T> FusedIterator for Iter<'_, T> {}\n \n /// An owning iterator over the elements of a `BinaryHeap`.\n ///\n-/// This `struct` is created by the [`into_iter`] method on [`BinaryHeap`][`BinaryHeap`]\n+/// This `struct` is created by the [`into_iter`] method on [`BinaryHeap`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`into_iter`]: struct.BinaryHeap.html#method.into_iter"}, {"sha": "fa8aae04011ed4a5d0f492ba79e9c5bacdc5de68", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -283,7 +283,7 @@ pub struct IterMut<'a, K: 'a, V: 'a> {\n \n /// An owning iterator over the entries of a `BTreeMap`.\n ///\n-/// This `struct` is created by the [`into_iter`] method on [`BTreeMap`][`BTreeMap`]\n+/// This `struct` is created by the [`into_iter`] method on [`BTreeMap`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`into_iter`]: struct.BTreeMap.html#method.into_iter"}, {"sha": "f5487426814a5d0b12b11ff000f91d072bdd6512", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -83,7 +83,7 @@ impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n \n /// An owning iterator over the items of a `BTreeSet`.\n ///\n-/// This `struct` is created by the [`into_iter`] method on [`BTreeSet`][`BTreeSet`]\n+/// This `struct` is created by the [`into_iter`] method on [`BTreeSet`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html"}, {"sha": "29bf2fdb30cf74d4447f4d09d42dc82d212bb3bc", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -105,7 +105,7 @@ impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n \n /// An owning iterator over the elements of a `LinkedList`.\n ///\n-/// This `struct` is created by the [`into_iter`] method on [`LinkedList`][`LinkedList`]\n+/// This `struct` is created by the [`into_iter`] method on [`LinkedList`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`into_iter`]: struct.LinkedList.html#method.into_iter"}, {"sha": "2cc450bb68a2032c410c0df840b7a4a9aa4405e5", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -2474,7 +2474,7 @@ impl<T> FusedIterator for IterMut<'_, T> {}\n \n /// An owning iterator over the elements of a `VecDeque`.\n ///\n-/// This `struct` is created by the [`into_iter`] method on [`VecDeque`][`VecDeque`]\n+/// This `struct` is created by the [`into_iter`] method on [`VecDeque`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`into_iter`]: struct.VecDeque.html#method.into_iter"}, {"sha": "e6162e0f571e2aaa2fa4cf7f4ec982c6829095d9", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -330,7 +330,7 @@\n //!\n //! Additionally, the return value of this function is [`fmt::Result`] which is a\n //! type alias of [`Result`]`<(), `[`std::fmt::Error`]`>`. Formatting implementations\n-//! should ensure that they propagate errors from the [`Formatter`][`Formatter`] (e.g., when\n+//! should ensure that they propagate errors from the [`Formatter`] (e.g., when\n //! calling [`write!`]). However, they should never return errors spuriously. That\n //! is, a formatting implementation must and may only return an error if the\n //! passed-in [`Formatter`] returns an error. This is because, contrary to what"}, {"sha": "93a51ccb20737e1184cca5e3ce465e77287a836f", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -242,7 +242,7 @@ use crate::raw_vec::RawVec;\n /// ensures no unnecessary allocations or deallocations occur. Emptying a `Vec`\n /// and then filling it back up to the same [`len`] should incur no calls to\n /// the allocator. If you wish to free up unused memory, use\n-/// [`shrink_to_fit`][`shrink_to_fit`].\n+/// [`shrink_to_fit`].\n ///\n /// [`push`] and [`insert`] will never (re)allocate if the reported capacity is\n /// sufficient. [`push`] and [`insert`] *will* (re)allocate if\n@@ -2461,7 +2461,7 @@ where\n \n /// An iterator that moves out of a vector.\n ///\n-/// This `struct` is created by the `into_iter` method on [`Vec`][`Vec`] (provided\n+/// This `struct` is created by the `into_iter` method on [`Vec`] (provided\n /// by the [`IntoIterator`] trait).\n ///\n /// [`Vec`]: struct.Vec.html"}, {"sha": "f1f1bb13f0f24338c9af9bbee3f8e91621306cfb", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -226,7 +226,7 @@ impl f32 {\n     }\n \n     /// Returns `true` if the number is neither zero, infinite,\n-    /// [subnormal][subnormal], or `NaN`.\n+    /// [subnormal], or `NaN`.\n     ///\n     /// ```\n     /// use std::f32;"}, {"sha": "5f9dc541b7d9141b0a8aa1fd42355af74648f70c", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -226,7 +226,7 @@ impl f64 {\n     }\n \n     /// Returns `true` if the number is neither zero, infinite,\n-    /// [subnormal][subnormal], or `NaN`.\n+    /// [subnormal], or `NaN`.\n     ///\n     /// ```\n     /// use std::f64;"}, {"sha": "5628658c5bdf54dda54e6005a2e6092d190eda87", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -1370,7 +1370,7 @@ unsafe impl<A> TrustedLen for IterMut<'_, A> {}\n /// The iterator yields one value if the result is [`Ok`], otherwise none.\n ///\n /// This struct is created by the [`into_iter`] method on\n-/// [`Result`][`Result`] (provided by the [`IntoIterator`] trait).\n+/// [`Result`] (provided by the [`IntoIterator`] trait).\n ///\n /// [`Ok`]: enum.Result.html#variant.Ok\n /// [`Result`]: enum.Result.html"}, {"sha": "fdc587ba5dacf4f9453f9f671cacdd9cddfa8c25", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -1076,7 +1076,7 @@ impl<'a, K, V> IterMut<'a, K, V> {\n \n /// An owning iterator over the entries of a `HashMap`.\n ///\n-/// This `struct` is created by the [`into_iter`] method on [`HashMap`][`HashMap`]\n+/// This `struct` is created by the [`into_iter`] method on [`HashMap`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`into_iter`]: struct.HashMap.html#method.into_iter"}, {"sha": "566e5146cf8576f38874c77bd187e4adcbac35f5", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -1101,7 +1101,7 @@ pub struct Iter<'a, K: 'a> {\n \n /// An owning iterator over the items of a `HashSet`.\n ///\n-/// This `struct` is created by the [`into_iter`] method on [`HashSet`][`HashSet`]\n+/// This `struct` is created by the [`into_iter`] method on [`HashSet`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`HashSet`]: struct.HashSet.html"}, {"sha": "27bbc17998887f9e6750b934d83cec1f680dbca4", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -2,7 +2,7 @@\n \n //! Cross-platform path manipulation.\n //!\n-//! This module provides two types, [`PathBuf`] and [`Path`][`Path`] (akin to [`String`]\n+//! This module provides two types, [`PathBuf`] and [`Path`] (akin to [`String`]\n //! and [`str`]), for working with paths abstractly. These types are thin wrappers\n //! around [`OsString`] and [`OsStr`] respectively, meaning that they work directly\n //! on strings according to the local platform's path syntax."}, {"sha": "444c9779a233ecf75bf33720542207c8ab8aecd8", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e636f1883ff8d7dd1d3a0e2db241e619a8ee72/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=21e636f1883ff8d7dd1d3a0e2db241e619a8ee72", "patch": "@@ -558,7 +558,7 @@ pub struct SendError<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub T);\n /// An error returned from the [`recv`] function on a [`Receiver`].\n ///\n /// The [`recv`] operation can only fail if the sending half of a\n-/// [`channel`][`channel`] (or [`sync_channel`]) is disconnected, implying that no further\n+/// [`channel`] (or [`sync_channel`]) is disconnected, implying that no further\n /// messages will ever be received.\n ///\n /// [`recv`]: struct.Receiver.html#method.recv"}]}