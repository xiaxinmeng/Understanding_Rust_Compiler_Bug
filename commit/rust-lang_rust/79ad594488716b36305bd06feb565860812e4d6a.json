{"sha": "79ad594488716b36305bd06feb565860812e4d6a", "node_id": "C_kwDOAAsO6NoAKDc5YWQ1OTQ0ODg3MTZiMzYzMDViZDA2ZmViNTY1ODYwODEyZTRkNmE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-09-29T14:09:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-09-29T14:09:14Z"}, "message": "more clear function and variable names", "tree": {"sha": "35890222f7a1511950ffcaa54434bee341768d02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35890222f7a1511950ffcaa54434bee341768d02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79ad594488716b36305bd06feb565860812e4d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79ad594488716b36305bd06feb565860812e4d6a", "html_url": "https://github.com/rust-lang/rust/commit/79ad594488716b36305bd06feb565860812e4d6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79ad594488716b36305bd06feb565860812e4d6a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1377bab12e13cdfda89d700641cbf09871245442", "url": "https://api.github.com/repos/rust-lang/rust/commits/1377bab12e13cdfda89d700641cbf09871245442", "html_url": "https://github.com/rust-lang/rust/commit/1377bab12e13cdfda89d700641cbf09871245442"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "d4733107e793dfe318531e64ab00b4110effb9ca", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/79ad594488716b36305bd06feb565860812e4d6a/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ad594488716b36305bd06feb565860812e4d6a/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=79ad594488716b36305bd06feb565860812e4d6a", "patch": "@@ -73,14 +73,11 @@ const EXCEPTIONS_BOOTSTRAP: &[(&str, &str)] = &[\n /// these and all their dependencies *must not* be in the exception list.\n const RUNTIME_CRATES: &[&str] = &[\"std\", \"core\", \"alloc\", \"test\", \"panic_abort\", \"panic_unwind\"];\n \n-/// Crates whose dependencies must be explicitly permitted.\n-const RESTRICTED_DEPENDENCY_CRATES: &[&str] = &[\"rustc_driver\", \"rustc_codegen_llvm\"];\n-\n /// Crates rustc is allowed to depend on. Avoid adding to the list if possible.\n ///\n /// This list is here to provide a speed-bump to adding a new dependency to\n /// rustc. Please check with the compiler team before adding an entry.\n-const PERMITTED_DEPENDENCIES: &[&str] = &[\n+const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"addr2line\",\n     \"adler\",\n     \"ahash\",\n@@ -307,7 +304,7 @@ const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n ];\n \n const FORBIDDEN_TO_HAVE_DUPLICATES: &[&str] = &[\n-    // These two crates take quite a long time to build, so don't allow two versions of them\n+    // This crate takes quite a long time to build, so don't allow two versions of them\n     // to accidentally sneak into our dependency graph, in order to ensure we keep our CI times\n     // under control.\n     \"cargo\",\n@@ -324,12 +321,12 @@ pub fn check(root: &Path, cargo: &Path, bad: &mut bool) {\n         .features(cargo_metadata::CargoOpt::AllFeatures);\n     let metadata = t!(cmd.exec());\n     let runtime_ids = compute_runtime_crates(&metadata);\n-    check_exceptions(&metadata, EXCEPTIONS, runtime_ids, bad);\n-    check_dependencies(\n+    check_license_exceptions(&metadata, EXCEPTIONS, runtime_ids, bad);\n+    check_permitted_dependencies(\n         &metadata,\n         \"rustc\",\n-        PERMITTED_DEPENDENCIES,\n-        RESTRICTED_DEPENDENCY_CRATES,\n+        PERMITTED_RUSTC_DEPENDENCIES,\n+        &[\"rustc_driver\", \"rustc_codegen_llvm\"],\n         bad,\n     );\n     check_crate_duplicate(&metadata, FORBIDDEN_TO_HAVE_DUPLICATES, bad);\n@@ -342,8 +339,8 @@ pub fn check(root: &Path, cargo: &Path, bad: &mut bool) {\n         .features(cargo_metadata::CargoOpt::AllFeatures);\n     let metadata = t!(cmd.exec());\n     let runtime_ids = HashSet::new();\n-    check_exceptions(&metadata, EXCEPTIONS_CRANELIFT, runtime_ids, bad);\n-    check_dependencies(\n+    check_license_exceptions(&metadata, EXCEPTIONS_CRANELIFT, runtime_ids, bad);\n+    check_permitted_dependencies(\n         &metadata,\n         \"cranelift\",\n         PERMITTED_CRANELIFT_DEPENDENCIES,\n@@ -358,13 +355,13 @@ pub fn check(root: &Path, cargo: &Path, bad: &mut bool) {\n         .features(cargo_metadata::CargoOpt::AllFeatures);\n     let metadata = t!(cmd.exec());\n     let runtime_ids = HashSet::new();\n-    check_exceptions(&metadata, EXCEPTIONS_BOOTSTRAP, runtime_ids, bad);\n+    check_license_exceptions(&metadata, EXCEPTIONS_BOOTSTRAP, runtime_ids, bad);\n }\n \n /// Check that all licenses are in the valid list in `LICENSES`.\n ///\n-/// Packages listed in `EXCEPTIONS` are allowed for tools.\n-fn check_exceptions(\n+/// Packages listed in `exceptions` are allowed for tools.\n+fn check_license_exceptions(\n     metadata: &Metadata,\n     exceptions: &[(&str, &str)],\n     runtime_ids: HashSet<&PackageId>,\n@@ -434,11 +431,11 @@ fn check_exceptions(\n     }\n }\n \n-/// Checks the dependency of `RESTRICTED_DEPENDENCY_CRATES` at the given path. Changes `bad` to\n+/// Checks the dependency of `restricted_dependency_crates` at the given path. Changes `bad` to\n /// `true` if a check failed.\n ///\n-/// Specifically, this checks that the dependencies are on the `PERMITTED_DEPENDENCIES`.\n-fn check_dependencies(\n+/// Specifically, this checks that the dependencies are on the `permitted_dependencies`.\n+fn check_permitted_dependencies(\n     metadata: &Metadata,\n     descr: &str,\n     permitted_dependencies: &[&'static str],"}]}