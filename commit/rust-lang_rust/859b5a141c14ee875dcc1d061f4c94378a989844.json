{"sha": "859b5a141c14ee875dcc1d061f4c94378a989844", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1OWI1YTE0MWMxNGVlODc1ZGNjMWQwNjFmNGM5NDM3OGE5ODk4NDQ=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-25T00:14:29Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-31T20:04:23Z"}, "message": "librustc: replace tcx.sess.bug calls with bug!()", "tree": {"sha": "351eabcdfdb0e8c3d58da5aa0babde5a41a1eceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/351eabcdfdb0e8c3d58da5aa0babde5a41a1eceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/859b5a141c14ee875dcc1d061f4c94378a989844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/859b5a141c14ee875dcc1d061f4c94378a989844", "html_url": "https://github.com/rust-lang/rust/commit/859b5a141c14ee875dcc1d061f4c94378a989844", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/859b5a141c14ee875dcc1d061f4c94378a989844/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc7ec6b61438f5a7fef5afd4830f009acd02d8f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc7ec6b61438f5a7fef5afd4830f009acd02d8f2", "html_url": "https://github.com/rust-lang/rust/commit/fc7ec6b61438f5a7fef5afd4830f009acd02d8f2"}], "stats": {"total": 227, "additions": 95, "deletions": 132}, "files": [{"sha": "b0f1e9d890c47d0888b3f47a07871072c34cf1ba", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -140,11 +140,10 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             ty::TyInfer(ty::FreshIntTy(c)) |\n             ty::TyInfer(ty::FreshFloatTy(c)) => {\n                 if c >= self.freshen_count {\n-                    tcx.sess.bug(\n-                        &format!(\"Encountered a freshend type with id {} \\\n-                                  but our counter is only at {}\",\n-                                 c,\n-                                 self.freshen_count));\n+                    bug!(\"Encountered a freshend type with id {} \\\n+                          but our counter is only at {}\",\n+                         c,\n+                         self.freshen_count);\n                 }\n                 t\n             }"}, {"sha": "881ebc9528f4bbf43031df34543b630dfbb870c5", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -471,7 +471,7 @@ pub fn mk_eq_impl_headers<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,\n     match (a.trait_ref, b.trait_ref) {\n         (Some(a_ref), Some(b_ref)) => mk_eq_trait_refs(cx, a_is_expected, origin, a_ref, b_ref),\n         (None, None) => mk_eqty(cx, a_is_expected, origin, a.self_ty, b.self_ty),\n-        _ => cx.tcx.sess.bug(\"mk_eq_impl_headers given mismatched impl kinds\"),\n+        _ => bug!(\"mk_eq_impl_headers given mismatched impl kinds\"),\n     }\n }\n \n@@ -1114,9 +1114,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             None if self.errors_since_creation() =>\n                 self.tcx.types.err,\n             None => {\n-                self.tcx.sess.bug(\n-                    &format!(\"no type for node {}: {} in fcx\",\n-                            id, self.tcx.map.node_to_string(id)));\n+                bug!(\"no type for node {}: {} in fcx\",\n+                     id, self.tcx.map.node_to_string(id));\n             }\n         }\n     }\n@@ -1125,7 +1124,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         match self.tables.borrow().node_types.get(&ex.id) {\n             Some(&t) => t,\n             None => {\n-                self.tcx.sess.bug(\"no type for expr in fcx\");\n+                bug!(\"no type for expr in fcx\");\n             }\n         }\n     }"}, {"sha": "8200e7825a0b954ccba90cb9c6889d431595250d", "filename": "src/librustc/infer/region_inference/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -90,7 +90,7 @@ pub fn maybe_print_constraints_for<'a, 'tcx>(region_vars: &RegionVarBindings<'a,\n         };\n \n         if output_template.is_empty() {\n-            tcx.sess.bug(\"empty string provided as RUST_REGION_GRAPH\");\n+            bug!(\"empty string provided as RUST_REGION_GRAPH\");\n         }\n \n         if output_template.contains('%') {"}, {"sha": "e3300b7c12bf6ce3b6311d551e032462de69ddce", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -413,7 +413,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n         self.bound_count.set(sc + 1);\n \n         if sc >= self.bound_count.get() {\n-            self.tcx.sess.bug(\"rollover in RegionInference new_bound()\");\n+            bug!(\"rollover in RegionInference new_bound()\");\n         }\n \n         ReLateBound(debruijn, BrFresh(sc))\n@@ -733,7 +733,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             (_, ReLateBound(..)) |\n             (ReEarlyBound(..), _) |\n             (_, ReEarlyBound(..)) => {\n-                self.tcx.sess.bug(&format!(\"cannot relate bound region: LUB({:?}, {:?})\", a, b));\n+                bug!(\"cannot relate bound region: LUB({:?}, {:?})\", a, b);\n             }\n \n             (ReStatic, _) | (_, ReStatic) => {"}, {"sha": "8651b52e3fece742c964f4920e7d67912b5d7f8c", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -127,9 +127,7 @@ impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n                     self.tcx().types.err\n                 }\n                 ty::TyInfer(_) => {\n-                    self.infcx.tcx.sess.bug(\n-                        &format!(\"Unexpected type in full type resolver: {:?}\",\n-                                t));\n+                    bug!(\"Unexpected type in full type resolver: {:?}\", t);\n                 }\n                 _ => {\n                     t.super_fold_with(self)"}, {"sha": "0daebc263031d1867075b84fd5ae61d0b647909c", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -183,7 +183,7 @@ impl LintStore {\n                     // We load builtin lints first, so a duplicate is a compiler bug.\n                     // Use early_error when handling -W help with no crate.\n                     (None, _) => early_error(config::ErrorOutputType::default(), &msg[..]),\n-                    (Some(sess), false) => sess.bug(&msg[..]),\n+                    (Some(_), false) => bug!(\"{}\", msg),\n \n                     // A duplicate name from a plugin is a user error.\n                     (Some(sess), true)  => sess.err(&msg[..]),\n@@ -221,7 +221,7 @@ impl LintStore {\n                 // We load builtin lints first, so a duplicate is a compiler bug.\n                 // Use early_error when handling -W help with no crate.\n                 (None, _) => early_error(config::ErrorOutputType::default(), &msg[..]),\n-                (Some(sess), false) => sess.bug(&msg[..]),\n+                (Some(_), false) => bug!(\"{}\", msg),\n \n                 // A duplicate name from a plugin is a user error.\n                 (Some(sess), true)  => sess.err(&msg[..]),\n@@ -447,7 +447,7 @@ pub fn raw_struct_lint<'a>(sess: &'a Session,\n         (Warn, None)     => sess.struct_warn(&msg[..]),\n         (Deny, Some(sp)) => sess.struct_span_err(sp, &msg[..]),\n         (Deny, None)     => sess.struct_err(&msg[..]),\n-        _ => sess.bug(\"impossible level in raw_emit_lint\"),\n+        _ => bug!(\"impossible level in raw_emit_lint\"),\n     };\n \n     // Check for future incompatibility lints and issue a stronger warning."}, {"sha": "82a75464d76fa1561245a4c3c83b41e5b5b3bf82", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -224,7 +224,7 @@ impl OverloadedCallType {\n             }\n         }\n \n-        tcx.sess.bug(\"overloaded call didn't map to known function trait\")\n+        bug!(\"overloaded call didn't map to known function trait\")\n     }\n \n     fn from_method_id(tcx: &TyCtxt, method_id: DefId)"}, {"sha": "ae0540696c5728db21ac8b44fdff74f83e2fe7ea", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -49,7 +49,7 @@ impl FreeRegionMap {\n     }\n \n     pub fn relate_free_regions_from_predicates<'tcx>(&mut self,\n-                                                     tcx: &TyCtxt<'tcx>,\n+                                                     _tcx: &TyCtxt<'tcx>,\n                                                      predicates: &[ty::Predicate<'tcx>]) {\n         debug!(\"relate_free_regions_from_predicates(predicates={:?})\", predicates);\n         for predicate in predicates {\n@@ -72,10 +72,9 @@ impl FreeRegionMap {\n                         }\n                         _ => {\n                             // All named regions are instantiated with free regions.\n-                            tcx.sess.bug(\n-                                &format!(\"record_region_bounds: non free region: {:?} / {:?}\",\n-                                         r_a,\n-                                         r_b));\n+                            bug!(\"record_region_bounds: non free region: {:?} / {:?}\",\n+                                 r_a,\n+                                 r_b);\n                         }\n                     }\n                 }"}, {"sha": "2a541fe85a7855d6aa9dbb2a7b58f56ed7da104a", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -1044,7 +1044,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n                     mutbl:m,\n                     ty: match base_cmt.ty.builtin_deref(false, ty::NoPreference) {\n                         Some(mt) => mt.ty,\n-                        None => self.tcx().sess.bug(\"Found non-derefable type\")\n+                        None => bug!(\"Found non-derefable type\")\n                     },\n                     note: NoteNone\n                 })"}, {"sha": "607a801a45f7aec8ca5720aca387a3cf710666b1", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -312,12 +312,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             ast_map::NodeVariant(_) |\n             ast_map::NodeStructCtor(_) => {}\n             _ => {\n-                self.tcx\n-                    .sess\n-                    .bug(&format!(\"found unexpected thingy in worklist: {}\",\n-                                 self.tcx\n-                                     .map\n-                                     .node_to_string(search_item)))\n+                bug!(\"found unexpected thingy in worklist: {}\",\n+                     self.tcx.map.node_to_string(search_item))\n             }\n         }\n     }"}, {"sha": "ecac5d2f73f6357f00330bf6f23abde6846ceabb", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -70,7 +70,7 @@ impl<'tcx> LvalueTy<'tcx> {\n                                              variant_index: index }\n                     }\n                     _ => {\n-                        tcx.sess.bug(&format!(\"cannot downcast non-enum type: `{:?}`\", self))\n+                        bug!(\"cannot downcast non-enum type: `{:?}`\", self)\n                     }\n                 },\n             ProjectionElem::Field(_, fty) => LvalueTy::Ty { ty: fty }"}, {"sha": "31030ac96a7209087c65b975888ce8725938d7af", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -270,7 +270,7 @@ impl Session {\n \n         match id.checked_add(count) {\n             Some(next) => self.next_node_id.set(next),\n-            None => self.bug(\"Input too large, ran out of node ids!\")\n+            None => bug!(\"Input too large, ran out of node ids!\")\n         }\n \n         id"}, {"sha": "a0ac514852674e86678e103482e4e848362d6400", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -291,9 +291,7 @@ fn ty_is_local_constructor<'tcx>(tcx: &TyCtxt<'tcx>,\n         }\n \n         ty::TyClosure(..) => {\n-            tcx.sess.bug(\n-                &format!(\"ty_is_local invoked on unexpected type: {:?}\",\n-                        ty))\n+            bug!(\"ty_is_local invoked on unexpected type: {:?}\", ty)\n         }\n     }\n }"}, {"sha": "de9e220071cfd6daba1729d167c4cc9ef8daf5f3", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -719,8 +719,8 @@ fn project_type<'cx,'tcx>(\n                     // The essential problem here is that the projection fails,\n                     // leaving two unnormalized types, which appear not to unify\n                     // -- so the overlap check succeeds, when it should fail.\n-                    selcx.tcx().sess.bug(\"Tried to project an inherited associated type during \\\n-                                          coherence checking, which is currently not supported.\");\n+                    bug!(\"Tried to project an inherited associated type during \\\n+                          coherence checking, which is currently not supported.\");\n                 }\n             }\n         }"}, {"sha": "9b03791697f17a77c8c5d69898dc5de96acf25f7", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -1601,7 +1601,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ObjectCandidate |\n             ParamCandidate(_) | ProjectionCandidate => match victim.candidate {\n                 DefaultImplCandidate(..) => {\n-                    self.tcx().sess.bug(\n+                    bug!(\n                         \"default implementations shouldn't be recorded \\\n                          when there are other valid candidates\");\n                 }\n@@ -1703,7 +1703,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ty::BoundSized => ok_if(Vec::new()),\n \n                     ty::BoundSync | ty::BoundSend => {\n-                        self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n+                        bug!(\"Send/Sync shouldn't occur in builtin_bounds()\");\n                     }\n                 }\n             }\n@@ -1713,7 +1713,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ty::BoundCopy | ty::BoundSized => ok_if(Vec::new()),\n \n                     ty::BoundSync | ty::BoundSend => {\n-                        self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n+                        bug!(\"Send/Sync shouldn't occur in builtin_bounds()\");\n                     }\n                 }\n             }\n@@ -1741,7 +1741,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         }\n                     }\n                     ty::BoundSync | ty::BoundSend => {\n-                        self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n+                        bug!(\"Send/Sync shouldn't occur in builtin_bounds()\");\n                     }\n                 }\n             }\n@@ -1762,7 +1762,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ty::BoundSized => ok_if(Vec::new()),\n \n                     ty::BoundSync | ty::BoundSend => {\n-                        self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n+                        bug!(\"Send/Sync shouldn't occur in builtin_bounds()\");\n                     }\n                 }\n             }\n@@ -1773,15 +1773,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ty::BoundCopy => ok_if(vec![element_ty]),\n                     ty::BoundSized => ok_if(Vec::new()),\n                     ty::BoundSync | ty::BoundSend => {\n-                        self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n+                        bug!(\"Send/Sync shouldn't occur in builtin_bounds()\");\n                     }\n                 }\n             }\n \n             ty::TyStr | ty::TySlice(_) => {\n                 match bound {\n                     ty::BoundSync | ty::BoundSend => {\n-                        self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n+                        bug!(\"Send/Sync shouldn't occur in builtin_bounds()\");\n                     }\n \n                     ty::BoundCopy | ty::BoundSized => Err(Unimplemented),\n@@ -1847,10 +1847,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::TyInfer(ty::FreshTy(_))\n             | ty::TyInfer(ty::FreshIntTy(_))\n             | ty::TyInfer(ty::FreshFloatTy(_)) => {\n-                self.tcx().sess.bug(\n-                    &format!(\n-                        \"asked to assemble builtin bounds of unexpected type: {:?}\",\n-                        self_ty));\n+                bug!(\"asked to assemble builtin bounds of unexpected type: {:?}\",\n+                     self_ty);\n             }\n         };\n \n@@ -1911,10 +1909,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::TyInfer(ty::FreshTy(_)) |\n             ty::TyInfer(ty::FreshIntTy(_)) |\n             ty::TyInfer(ty::FreshFloatTy(_)) => {\n-                self.tcx().sess.bug(\n-                    &format!(\n-                        \"asked to assemble constituent types of unexpected type: {:?}\",\n-                        t));\n+                bug!(\"asked to assemble constituent types of unexpected type: {:?}\",\n+                     t);\n             }\n \n             ty::TyBox(referent_ty) => {  // Box<T>\n@@ -2135,10 +2131,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         match self.match_where_clause_trait_ref(obligation, param.clone()) {\n             Ok(obligations) => obligations,\n             Err(()) => {\n-                self.tcx().sess.bug(\n-                    &format!(\"Where clause `{:?}` was applicable to `{:?}` but now is not\",\n-                             param,\n-                             obligation));\n+                bug!(\"Where clause `{:?}` was applicable to `{:?}` but now is not\",\n+                     param,\n+                     obligation);\n             }\n         }\n     }\n@@ -2175,7 +2170,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let trait_def = match self.tcx().lang_items.from_builtin_kind(bound) {\n             Ok(def_id) => def_id,\n             Err(_) => {\n-                self.tcx().sess.bug(\"builtin trait definition not found\");\n+                bug!(\"builtin trait definition not found\");\n             }\n         };\n \n@@ -2238,10 +2233,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 self.vtable_default_impl(obligation, trait_def_id, all_types)\n             }\n             _ => {\n-                self.tcx().sess.bug(\n-                    &format!(\n-                        \"asked to confirm default object implementation for non-object type: {:?}\",\n-                        self_ty));\n+                bug!(\"asked to confirm default object implementation for non-object type: {:?}\",\n+                     self_ty);\n             }\n         }\n     }\n@@ -2692,10 +2685,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         match self.match_impl(impl_def_id, obligation, snapshot) {\n             Ok((substs, skol_map)) => (substs, skol_map),\n             Err(()) => {\n-                self.tcx().sess.bug(\n-                    &format!(\"Impl {:?} was matchable against {:?} but now is not\",\n-                            impl_def_id,\n-                            obligation));\n+                bug!(\"Impl {:?} was matchable against {:?} but now is not\",\n+                     impl_def_id,\n+                     obligation);\n             }\n         }\n     }"}, {"sha": "88f4129d8860caeeea4a3600be4fcc747e599f4c", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -93,10 +93,8 @@ pub fn translate_substs<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n             }\n \n             fulfill_implication(infcx, source_trait_ref, target_impl).unwrap_or_else(|_| {\n-                infcx.tcx\n-                     .sess\n-                     .bug(\"When translating substitutions for specialization, the expected \\\n-                           specializaiton failed to hold\")\n+                bug!(\"When translating substitutions for specialization, the expected \\\n+                      specializaiton failed to hold\")\n             })\n         }\n         specialization_graph::Node::Trait(..) => source_trait_ref.substs.clone(),"}, {"sha": "befca878bc0e435cb290ae3363e3a8b079c5b057", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -481,8 +481,8 @@ pub fn get_vtable_index_of_object_method<'tcx>(tcx: &TyCtxt<'tcx>,\n         }\n     }\n \n-    tcx.sess.bug(&format!(\"get_vtable_index_of_object_method: {:?} was not found\",\n-                          method_def_id));\n+    bug!(\"get_vtable_index_of_object_method: {:?} was not found\",\n+         method_def_id);\n }\n \n pub enum TupleArgumentsFlag { Yes, No }"}, {"sha": "7d011e151ee991a1d103b7a517355f946cf22c50", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -159,9 +159,8 @@ impl<'tcx> ty::TyS<'tcx> {\n                                 cx.mk_ty(ty::TyFnPtr(b))\n                             }\n                             _ => {\n-                                cx.sess.bug(\n-                                    &format!(\"AdjustReifyFnPointer adjustment on non-fn-item: \\\n-                                              {:?}\", self));\n+                                bug!(\"AdjustReifyFnPointer adjustment on non-fn-item: {:?}\",\n+                                     self);\n                             }\n                         }\n                     }\n@@ -170,10 +169,8 @@ impl<'tcx> ty::TyS<'tcx> {\n                         match self.sty {\n                             ty::TyFnPtr(b) => cx.safe_to_unsafe_fn_ty(b),\n                             ref b => {\n-                                cx.sess.bug(\n-                                    &format!(\"AdjustUnsafeFnPointer adjustment on non-fn-ptr: \\\n-                                             {:?}\",\n-                                            b));\n+                                bug!(\"AdjustUnsafeFnPointer adjustment on non-fn-ptr: {:?}\",\n+                                     b);\n                             }\n                         }\n                     }\n@@ -185,10 +182,8 @@ impl<'tcx> ty::TyS<'tcx> {\n                                 mutbl: hir::MutImmutable\n                             }),\n                             ref b => {\n-                                cx.sess.bug(\n-                                    &format!(\"AdjustMutToConstPointer on non-raw-ptr: \\\n-                                             {:?}\",\n-                                            b));\n+                                bug!(\"AdjustMutToConstPointer on non-raw-ptr: {:?}\",\n+                                     b);\n                             }\n                         }\n                     }"}, {"sha": "ba237184a9f1d8c252280526dab77f5362bec19b", "filename": "src/librustc/ty/contents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontents.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -247,7 +247,7 @@ impl<'tcx> ty::TyS<'tcx> {\n \n                 ty::TyInfer(_) |\n                 ty::TyError => {\n-                    cx.sess.bug(\"asked to compute contents of error type\");\n+                    bug!(\"asked to compute contents of error type\");\n                 }\n             };\n "}, {"sha": "842a58571e012da1dc232615de320e6b43207378", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -462,8 +462,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let did = def.trait_ref.def_id;\n         let interned = self.arenas.trait_defs.alloc(def);\n         if let Some(prev) = self.trait_defs.borrow_mut().insert(did, interned) {\n-            self.sess.bug(&format!(\"Tried to overwrite interned TraitDef: {:?}\",\n-                                   prev))\n+            bug!(\"Tried to overwrite interned TraitDef: {:?}\", prev)\n         }\n         interned\n     }\n@@ -482,8 +481,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let interned = self.arenas.adt_defs.alloc(def);\n         // this will need a transmute when reverse-variance is removed\n         if let Some(prev) = self.adt_defs.borrow_mut().insert(did, interned) {\n-            self.sess.bug(&format!(\"Tried to overwrite interned AdtDef: {:?}\",\n-                                   prev))\n+            bug!(\"Tried to overwrite interned AdtDef: {:?}\", prev)\n         }\n         interned\n     }\n@@ -497,16 +495,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(prev) = self.stability_interner\n                                 .borrow_mut()\n                                 .insert(interned, interned) {\n-            self.sess.bug(&format!(\"Tried to overwrite interned Stability: {:?}\",\n-                                   prev))\n+            bug!(\"Tried to overwrite interned Stability: {:?}\", prev)\n         }\n         interned\n     }\n \n     pub fn store_free_region_map(&self, id: NodeId, map: FreeRegionMap) {\n         if self.free_region_maps.borrow_mut().insert(id, map).is_some() {\n-            self.sess.bug(&format!(\"Tried to overwrite interned FreeRegionMap for NodeId {:?}\",\n-                                   id))\n+            bug!(\"Tried to overwrite interned FreeRegionMap for NodeId {:?}\", id)\n         }\n     }\n "}, {"sha": "110e62dfeb53dc5f93f241a7b46230f8f3785f89", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 28, "deletions": 34, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -1241,9 +1241,8 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                                     cx.region_maps.call_site_extent(id, body.id))\n                             }\n                             _ => {\n-                                cx.sess\n-                                  .bug(\"ParameterEnvironment::for_item(): \\\n-                                        got non-method item from impl method?!\")\n+                                bug!(\"ParameterEnvironment::for_item(): \\\n+                                      got non-method item from impl method?!\")\n                             }\n                         }\n                     }\n@@ -1295,10 +1294,9 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                                     extent)\n                             }\n                             _ => {\n-                                cx.sess\n-                                  .bug(\"ParameterEnvironment::for_item(): \\\n-                                        got non-method item from provided \\\n-                                        method?!\")\n+                                bug!(\"ParameterEnvironment::for_item(): \\\n+                                      got non-method item from provided \\\n+                                      method?!\")\n                             }\n                         }\n                     }\n@@ -1353,9 +1351,9 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                 ParameterEnvironment::for_item(cx, cx.map.get_parent(id))\n             }\n             _ => {\n-                cx.sess.bug(&format!(\"ParameterEnvironment::for_item(): \\\n-                                     `{}` is not an item\",\n-                                    cx.map.node_to_string(id)))\n+                bug!(\"ParameterEnvironment::from_item(): \\\n+                      `{}` is not an item\",\n+                     cx.map.node_to_string(id))\n             }\n         }\n     }\n@@ -1902,9 +1900,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn node_id_to_type(&self, id: NodeId) -> Ty<'tcx> {\n         match self.node_id_to_type_opt(id) {\n            Some(ty) => ty,\n-           None => self.sess.bug(\n-               &format!(\"node_id_to_type: no type for node `{}`\",\n-                        self.map.node_to_string(id)))\n+           None => bug!(\"node_id_to_type: no type for node `{}`\",\n+                        self.map.node_to_string(id))\n         }\n     }\n \n@@ -1980,12 +1977,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                 e.span\n             }\n             Some(f) => {\n-                self.sess.bug(&format!(\"Node id {} is not an expr: {:?}\",\n-                                       id, f));\n+                bug!(\"Node id {} is not an expr: {:?}\", id, f);\n             }\n             None => {\n-                self.sess.bug(&format!(\"Node id {} is not present \\\n-                                        in the node map\", id));\n+                bug!(\"Node id {} is not present in the node map\", id);\n             }\n         }\n     }\n@@ -1996,11 +1991,11 @@ impl<'tcx> TyCtxt<'tcx> {\n                 match pat.node {\n                     PatKind::Ident(_, ref path1, _) => path1.node.name.as_str(),\n                     _ => {\n-                        self.sess.bug(&format!(\"Variable id {} maps to {:?}, not local\", id, pat));\n+                        bug!(\"Variable id {} maps to {:?}, not local\", id, pat);\n                     },\n                 }\n             },\n-            r => self.sess.bug(&format!(\"Variable id {} maps to {:?}, not local\", id, r)),\n+            r => bug!(\"Variable id {} maps to {:?}, not local\", id, r),\n         }\n     }\n \n@@ -2085,17 +2080,17 @@ impl<'tcx> TyCtxt<'tcx> {\n                         match self.impl_or_trait_item(self.map.local_def_id(ti.id)) {\n                             MethodTraitItem(m) => Some(m),\n                             _ => {\n-                                self.sess.bug(\"provided_trait_methods(): \\\n-                                               non-method item found from \\\n-                                               looking up provided method?!\")\n+                                bug!(\"provided_trait_methods(): \\\n+                                      non-method item found from \\\n+                                      looking up provided method?!\")\n                             }\n                         }\n                     } else {\n                         None\n                     }\n                 }).collect()\n             } else {\n-                self.sess.bug(&format!(\"provided_trait_methods: `{:?}` is not a trait\", id))\n+                bug!(\"provided_trait_methods: `{:?}` is not a trait\", id)\n             }\n         } else {\n             self.sess.cstore.provided_trait_methods(self, id)\n@@ -2111,9 +2106,9 @@ impl<'tcx> TyCtxt<'tcx> {\n                             match self.impl_or_trait_item(self.map.local_def_id(ti.id)) {\n                                 ConstTraitItem(ac) => Some(ac),\n                                 _ => {\n-                                    self.sess.bug(\"associated_consts(): \\\n-                                                   non-const item found from \\\n-                                                   looking up a constant?!\")\n+                                    bug!(\"associated_consts(): \\\n+                                          non-const item found from \\\n+                                          looking up a constant?!\")\n                                 }\n                             }\n                         } else {\n@@ -2127,9 +2122,9 @@ impl<'tcx> TyCtxt<'tcx> {\n                             match self.impl_or_trait_item(self.map.local_def_id(ii.id)) {\n                                 ConstTraitItem(ac) => Some(ac),\n                                 _ => {\n-                                    self.sess.bug(\"associated_consts(): \\\n-                                                   non-const item found from \\\n-                                                   looking up a constant?!\")\n+                                    bug!(\"associated_consts(): \\\n+                                          non-const item found from \\\n+                                          looking up a constant?!\")\n                                 }\n                             }\n                         } else {\n@@ -2138,8 +2133,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }).collect()\n                 }\n                 _ => {\n-                    self.sess.bug(&format!(\"associated_consts: `{:?}` is not a trait \\\n-                                            or impl\", id))\n+                    bug!(\"associated_consts: `{:?}` is not a trait or impl\", id)\n                 }\n             }\n         } else {\n@@ -2174,9 +2168,9 @@ impl<'tcx> TyCtxt<'tcx> {\n             match kind {\n                 Some(kind) => kind,\n                 None => {\n-                    self.sess.bug(&format!(\"custom_coerce_unsized_kind: \\\n-                                            {} impl `{}` is missing its kind\",\n-                                           src, self.item_path_str(did)));\n+                    bug!(\"custom_coerce_unsized_kind: \\\n+                          {} impl `{}` is missing its kind\",\n+                          src, self.item_path_str(did));\n                 }\n             }\n         })"}, {"sha": "b39cb5ef939e548cd84b23b4382291289fdd7a8f", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -453,7 +453,7 @@ pub fn super_relate_tys<'a,'tcx:'a,R>(relation: &mut R,\n         (_, &ty::TyInfer(_)) =>\n         {\n             // The caller should handle these cases!\n-            tcx.sess.bug(\"var types encountered in super_relate_tys\")\n+            bug!(\"var types encountered in super_relate_tys\")\n         }\n \n         (&ty::TyError, _) | (_, &ty::TyError) =>"}, {"sha": "47d57d14baa8db8718b21d34b49b7b3f2c9e6187", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -978,8 +978,7 @@ impl<'tcx> TyS<'tcx> {\n         match self.sty {\n             TyArray(ty, _) | TySlice(ty) => ty,\n             TyStr => cx.mk_mach_uint(ast::UintTy::U8),\n-            _ => cx.sess.bug(&format!(\"sequence_element_type called on non-sequence value: {}\",\n-                                      self)),\n+            _ => bug!(\"sequence_element_type called on non-sequence value: {}\", self),\n         }\n     }\n "}, {"sha": "dc45795c0c33d9ebf74f3110c82cee5d585473b3", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b5a141c14ee875dcc1d061f4c94378a989844/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=859b5a141c14ee875dcc1d061f4c94378a989844", "patch": "@@ -351,7 +351,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     ty::ReScope(..) |\n                     ty::ReVar(..) |\n                     ty::ReSkolemized(..) => {\n-                        tcx.sess.bug(\"unexpected region found when hashing a type\")\n+                        bug!(\"unexpected region found when hashing a type\")\n                     }\n                 }\n             };\n@@ -632,7 +632,7 @@ impl<'tcx> ty::TyS<'tcx> {\n                 TyClosure(..) => {\n                     // this check is run on type definitions, so we don't expect\n                     // to see closure types\n-                    cx.sess.bug(&format!(\"requires check invoked on inapplicable type: {:?}\", ty))\n+                    bug!(\"requires check invoked on inapplicable type: {:?}\", ty)\n                 }\n                 _ => Representability::Representable,\n             }"}]}