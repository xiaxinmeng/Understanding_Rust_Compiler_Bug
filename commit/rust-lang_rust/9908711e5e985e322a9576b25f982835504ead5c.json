{"sha": "9908711e5e985e322a9576b25f982835504ead5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MDg3MTFlNWU5ODVlMzIyYTk1NzZiMjVmOTgyODM1NTA0ZWFkNWM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-10-27T00:15:13Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-10-27T00:15:13Z"}, "message": "Implement field shorthands in struct literal expressions.", "tree": {"sha": "6b91bc41112bb0bedb7caf05cdb22ca76b155fbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b91bc41112bb0bedb7caf05cdb22ca76b155fbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9908711e5e985e322a9576b25f982835504ead5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9908711e5e985e322a9576b25f982835504ead5c", "html_url": "https://github.com/rust-lang/rust/commit/9908711e5e985e322a9576b25f982835504ead5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9908711e5e985e322a9576b25f982835504ead5c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5b6a9fa8ad2e13adbfcc5f3f624d9252379d745", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b6a9fa8ad2e13adbfcc5f3f624d9252379d745", "html_url": "https://github.com/rust-lang/rust/commit/a5b6a9fa8ad2e13adbfcc5f3f624d9252379d745"}], "stats": {"total": 197, "additions": 179, "deletions": 18}, "files": [{"sha": "11f635847a05335253c4c01b2f2c5ea302ec4817", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -543,6 +543,7 @@ impl<'a> LoweringContext<'a> {\n             name: respan(f.ident.span, f.ident.node.name),\n             expr: self.lower_expr(&f.expr),\n             span: f.span,\n+            is_shorthand: f.is_shorthand,\n         }\n     }\n \n@@ -1682,6 +1683,7 @@ impl<'a> LoweringContext<'a> {\n             },\n             span: span,\n             expr: expr,\n+            is_shorthand: false,\n         }\n     }\n "}, {"sha": "1ac0a48713a2966257f10e90a98be68c4e844edb", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -817,6 +817,7 @@ pub struct Field {\n     pub name: Spanned<Name>,\n     pub expr: P<Expr>,\n     pub span: Span,\n+    pub is_shorthand: bool,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]"}, {"sha": "657c10bab12eb0fbe43c8ed6b3e553053d74a2e4", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -1229,8 +1229,10 @@ impl<'a> State<'a> {\n                            &fields[..],\n                            |s, field| {\n                                s.ibox(indent_unit)?;\n-                               s.print_name(field.name.node)?;\n-                               s.word_space(\":\")?;\n+                               if !field.is_shorthand {\n+                                    s.print_name(field.name.node)?;\n+                                    s.word_space(\":\")?;\n+                               }\n                                s.print_expr(&field.expr)?;\n                                s.end()\n                            },"}, {"sha": "37e306de325bfe582762cd1504432d95b2f76738", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -900,6 +900,7 @@ pub struct Field {\n     pub ident: SpannedIdent,\n     pub expr: P<Expr>,\n     pub span: Span,\n+    pub is_shorthand: bool,\n }\n \n pub type SpannedIdent = Spanned<Ident>;"}, {"sha": "0ef47bd6daaa83ba4056e604d04cd36b437fccc5", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -713,7 +713,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(b.span, ast::ExprKind::Block(b))\n     }\n     fn field_imm(&self, span: Span, name: Ident, e: P<ast::Expr>) -> ast::Field {\n-        ast::Field { ident: respan(span, name), expr: e, span: span }\n+        ast::Field { ident: respan(span, name), expr: e, span: span, is_shorthand: false }\n     }\n     fn expr_struct(&self, span: Span, path: ast::Path, fields: Vec<ast::Field>) -> P<ast::Expr> {\n         self.expr(span, ast::ExprKind::Struct(path, fields, None))"}, {"sha": "02580331a99f9e52ab3a0cbee6d088f1c1cdcf1b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -306,6 +306,9 @@ declare_features! (\n \n     // Allows attributes on lifetime/type formal parameters in generics (RFC 1327)\n     (active, generic_param_attrs, \"1.11.0\", Some(34761)),\n+\n+    // Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n+    (active, field_init_shorthand, \"1.14.0\", Some(37340)),\n );\n \n declare_features! (\n@@ -1087,6 +1090,14 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n             ast::ExprKind::InPlace(..) => {\n                 gate_feature_post!(&self, placement_in_syntax, e.span, EXPLAIN_PLACEMENT_IN);\n             }\n+            ast::ExprKind::Struct(_, ref fields, _) => {\n+                for field in fields {\n+                    if field.is_shorthand {\n+                        gate_feature_post!(&self, field_init_shorthand, field.span,\n+                                           \"struct field shorthands are unstable\");\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n         visit::walk_expr(self, e);"}, {"sha": "16916ddd5d6a087674b21992b560716870163e44", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -823,11 +823,12 @@ pub fn noop_fold_struct_field<T: Folder>(f: StructField, fld: &mut T) -> StructF\n     }\n }\n \n-pub fn noop_fold_field<T: Folder>(Field {ident, expr, span}: Field, folder: &mut T) -> Field {\n+pub fn noop_fold_field<T: Folder>(f: Field, folder: &mut T) -> Field {\n     Field {\n-        ident: respan(ident.span, folder.fold_ident(ident.node)),\n-        expr: folder.fold_expr(expr),\n-        span: folder.new_span(span)\n+        ident: respan(f.ident.span, folder.fold_ident(f.ident.node)),\n+        expr: folder.fold_expr(f.expr),\n+        span: folder.new_span(f.span),\n+        is_shorthand: f.is_shorthand,\n     }\n }\n "}, {"sha": "a5a081e08bee3963fcd28bd3eb35f3b56ccc50d3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -2007,17 +2007,30 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Parse ident COLON expr\n+    /// Parse ident (COLON expr)?\n     pub fn parse_field(&mut self) -> PResult<'a, Field> {\n         let lo = self.span.lo;\n-        let i = self.parse_field_name()?;\n-        let hi = self.prev_span.hi;\n-        self.expect(&token::Colon)?;\n-        let e = self.parse_expr()?;\n+        let hi;\n+\n+        // Check if a colon exists one ahead. This means we're parsing a fieldname.\n+        let (fieldname, expr, is_shorthand) = if self.look_ahead(1, |t| t == &token::Colon) {\n+            let fieldname = self.parse_field_name()?;\n+            self.bump();\n+            hi = self.prev_span.hi;\n+            (fieldname, self.parse_expr()?, false)\n+        } else {\n+            let fieldname = self.parse_ident()?;\n+            hi = self.prev_span.hi;\n+\n+            // Mimic `x: x` for the `x` field shorthand.\n+            let path = ast::Path::from_ident(mk_sp(lo, hi), fieldname);\n+            (fieldname, self.mk_expr(lo, hi, ExprKind::Path(None, path), ThinVec::new()), true)\n+        };\n         Ok(ast::Field {\n-            ident: spanned(lo, hi, i),\n-            span: mk_sp(lo, e.span.hi),\n-            expr: e,\n+            ident: spanned(lo, hi, fieldname),\n+            span: mk_sp(lo, expr.span.hi),\n+            expr: expr,\n+            is_shorthand: is_shorthand,\n         })\n     }\n "}, {"sha": "149112133b234c5b9ef02041af30a3f80b145ecd", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -1893,8 +1893,10 @@ impl<'a> State<'a> {\n             &fields[..],\n             |s, field| {\n                 try!(s.ibox(INDENT_UNIT));\n-                try!(s.print_ident(field.ident.node));\n-                try!(s.word_space(\":\"));\n+                if !field.is_shorthand {\n+                    try!(s.print_ident(field.ident.node));\n+                    try!(s.word_space(\":\"));\n+                }\n                 try!(s.print_expr(&field.expr));\n                 s.end()\n             },"}, {"sha": "cd2dae7f461abe608babd25ee7eb42e4a0cfb712", "filename": "src/test/compile-fail/feature-gate-field-init-shorthand.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Ftest%2Fcompile-fail%2Ffeature-gate-field-init-shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Ftest%2Fcompile-fail%2Ffeature-gate-field-init-shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-field-init-shorthand.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    x: i32,\n+    y: bool,\n+    z: i32\n+}\n+\n+fn main() {\n+    let (x, y, z) = (1, true, 2);\n+    let _ = Foo {\n+        x, //~ ERROR struct field shorthands are unstable\n+        y: y,\n+        z //~ ERROR struct field shorthands are unstable\n+    };\n+}"}, {"sha": "50a43f4a276daa5fe036c2b8f1abac90a81106ba", "filename": "src/test/compile-fail/struct-fields-shorthand-unresolved.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Ftest%2Fcompile-fail%2Fstruct-fields-shorthand-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Ftest%2Fcompile-fail%2Fstruct-fields-shorthand-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-shorthand-unresolved.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(field_init_shorthand)]\n+\n+struct Foo {\n+    x: i32,\n+    y: i32\n+}\n+\n+fn main() {\n+    let x = 0;\n+    let foo = Foo {\n+        x,\n+        y //~ ERROR unresolved name `y`\n+    };\n+}"}, {"sha": "f764322cadbbb380338ff28876007cef0c5e32ed", "filename": "src/test/compile-fail/struct-fields-shorthand.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Ftest%2Fcompile-fail%2Fstruct-fields-shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Ftest%2Fcompile-fail%2Fstruct-fields-shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-shorthand.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(field_init_shorthand)]\n+\n+struct Foo {\n+    x: i32,\n+    y: i32\n+}\n+\n+fn main() {\n+    let (x, y, z) = (0, 1, 2);\n+    let foo = Foo {\n+        x, y, z //~ ERROR struct `Foo` has no field named `z`\n+    };\n+}\n+"}, {"sha": "c4354c0760442b784579a0417b2783837b3b651c", "filename": "src/test/parse-fail/removed-syntax-with-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Ftest%2Fparse-fail%2Fremoved-syntax-with-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Ftest%2Fparse-fail%2Fremoved-syntax-with-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fremoved-syntax-with-2.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -18,5 +18,5 @@ fn removed_with() {\n \n     let a = S { foo: (), bar: () };\n     let b = S { foo: (), with a };\n-    //~^ ERROR expected `:`, found `a`\n+    //~^ ERROR expected one of `,` or `}`, found `a`\n }"}, {"sha": "2a5c25d1868f5309926cf671d6b74c9fd03704c6", "filename": "src/test/parse-fail/struct-field-numeric-shorthand.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Ftest%2Fparse-fail%2Fstruct-field-numeric-shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Ftest%2Fparse-fail%2Fstruct-field-numeric-shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fstruct-field-numeric-shorthand.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+#![feature(field_init_shorthand)]\n+\n+struct Rgb(u8, u8, u8);\n+\n+fn main() {\n+    let _ = Rgb { 0, 1, 2 }; //~ ERROR expected identifier, found `0`\n+}"}, {"sha": "fe91db572d20ea66af8b0a870b47df279b41a8f9", "filename": "src/test/run-pass/struct-field-shorthand.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9908711e5e985e322a9576b25f982835504ead5c/src%2Ftest%2Frun-pass%2Fstruct-field-shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9908711e5e985e322a9576b25f982835504ead5c/src%2Ftest%2Frun-pass%2Fstruct-field-shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-field-shorthand.rs?ref=9908711e5e985e322a9576b25f982835504ead5c", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(field_init_shorthand)]\n+\n+struct Foo {\n+    x: i32,\n+    y: bool,\n+    z: i32\n+}\n+\n+struct Bar {\n+    x: i32\n+}\n+\n+pub fn main() {\n+    let (x, y, z) = (1, true, 2);\n+    let a = Foo { x, y: y, z };\n+    assert_eq!(a.x, x);\n+    assert_eq!(a.y, y);\n+    assert_eq!(a.z, z);\n+\n+    let b = Bar { x, };\n+    assert_eq!(b.x, x);\n+\n+    let c = Foo { z, y, x };\n+    assert_eq!(c.x, x);\n+    assert_eq!(c.y, y);\n+    assert_eq!(c.z, z);\n+}"}]}