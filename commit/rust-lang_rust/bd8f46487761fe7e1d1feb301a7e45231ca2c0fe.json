{"sha": "bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOGY0NjQ4Nzc2MWZlN2UxZDFmZWIzMDFhN2U0NTIzMWNhMmMwZmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-12T09:54:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-12T09:54:56Z"}, "message": "Rollup merge of #57175 - oli-obk:const_let_stabilization, r=nikomatsakis\n\nStabilize `let` bindings and destructuring in constants and const fn\n\nr? @Centril\n\nThis PR stabilizes the following features in constants and `const` functions:\n\n* irrefutable destructuring patterns (e.g. `const fn foo((x, y): (u8, u8)) { ... }`)\n* `let` bindings (e.g. `let x = 1;`)\n* mutable `let` bindings (e.g. `let mut x = 1;`)\n* assignment (e.g. `x = y`) and assignment operator (e.g. `x += y`) expressions, even where the assignment target is a projection (e.g. a struct field or index operation like `x[3] = 42`)\n* expression statements (e.g. `3;`)\n\nThis PR does explicitly *not* stabilize:\n\n* mutable references (i.e. `&mut T`)\n* dereferencing mutable references\n* refutable patterns (e.g. `Some(x)`)\n* operations on `UnsafeCell` types (as that would need raw pointers and mutable references and such, not because it is explicitly forbidden. We can't explicitly forbid it as such values are OK as long as they aren't mutated.)\n* We are not stabilizing `let` bindings in constants that use `&&` and `||` short circuiting operations. These are treated as `&` and `|` inside `const` and `static` items right now. If we stopped treating them as `&` and `|` after stabilizing `let` bindings, we'd break code like `let mut x = false; false && { x = true; false };`. So to use `let` bindings in constants you need to change `&&` and `||` to `&` and `|` respectively.", "tree": {"sha": "cba4990b610d2de89a9e87486110a5b7ab37cf60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba4990b610d2de89a9e87486110a5b7ab37cf60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcOblwCRBK7hj4Ov3rIwAAdHIIABbgi0LakAAneld9epc4RDgJ\na6z26LmPGh53NuoYz2pJAgQpCMLjQaehgBfCFabH9mg6iDwZcEXrcQgQYyn7QShH\nTDz/hCd9GaSe4/+jtAAzSMllJSyQOmOdpHrsduzJvDHJhkhETt4dvBo2fEYzBKRy\nJFfo8Pnq8Cc61APP3ytysleE1XORwtUjvZRnTJw6oMak2sEcKJyAfrxrkTyNFvzT\nIVfY7J4lfMZL9CqIwC2GDhOWTjMwkYkjfiMyDWqoiXJonT7n/viOCuTHtCHhLYVo\nrFs6M7H+Aup1LF8hiPOEkoznmNmDxLsrE6Nxk/CQb4GGDZheiiFyAmG/HRAZ9FQ=\n=Hd2u\n-----END PGP SIGNATURE-----\n", "payload": "tree cba4990b610d2de89a9e87486110a5b7ab37cf60\nparent 017f046c1371758bf4363afd4384bafb583b9710\nparent 6c623224dcf6f7cf06afd46b17ce7f665e6b4fda\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547286896 +0100\ncommitter GitHub <noreply@github.com> 1547286896 +0100\n\nRollup merge of #57175 - oli-obk:const_let_stabilization, r=nikomatsakis\n\nStabilize `let` bindings and destructuring in constants and const fn\n\nr? @Centril\n\nThis PR stabilizes the following features in constants and `const` functions:\n\n* irrefutable destructuring patterns (e.g. `const fn foo((x, y): (u8, u8)) { ... }`)\n* `let` bindings (e.g. `let x = 1;`)\n* mutable `let` bindings (e.g. `let mut x = 1;`)\n* assignment (e.g. `x = y`) and assignment operator (e.g. `x += y`) expressions, even where the assignment target is a projection (e.g. a struct field or index operation like `x[3] = 42`)\n* expression statements (e.g. `3;`)\n\nThis PR does explicitly *not* stabilize:\n\n* mutable references (i.e. `&mut T`)\n* dereferencing mutable references\n* refutable patterns (e.g. `Some(x)`)\n* operations on `UnsafeCell` types (as that would need raw pointers and mutable references and such, not because it is explicitly forbidden. We can't explicitly forbid it as such values are OK as long as they aren't mutated.)\n* We are not stabilizing `let` bindings in constants that use `&&` and `||` short circuiting operations. These are treated as `&` and `|` inside `const` and `static` items right now. If we stopped treating them as `&` and `|` after stabilizing `let` bindings, we'd break code like `let mut x = false; false && { x = true; false };`. So to use `let` bindings in constants you need to change `&&` and `||` to `&` and `|` respectively.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "html_url": "https://github.com/rust-lang/rust/commit/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "017f046c1371758bf4363afd4384bafb583b9710", "url": "https://api.github.com/repos/rust-lang/rust/commits/017f046c1371758bf4363afd4384bafb583b9710", "html_url": "https://github.com/rust-lang/rust/commit/017f046c1371758bf4363afd4384bafb583b9710"}, {"sha": "6c623224dcf6f7cf06afd46b17ce7f665e6b4fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c623224dcf6f7cf06afd46b17ce7f665e6b4fda", "html_url": "https://github.com/rust-lang/rust/commit/6c623224dcf6f7cf06afd46b17ce7f665e6b4fda"}], "stats": {"total": 1377, "additions": 408, "deletions": 969}, "files": [{"sha": "193b0fe05f00210d220da177cdfe7a3252a0d1b8", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 42, "deletions": 182, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -21,7 +21,7 @@ use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext, NonMutatingUs\n use rustc::middle::lang_items;\n use rustc::session::config::nightly_options;\n use syntax::ast::LitKind;\n-use syntax::feature_gate::{UnstableFeatures, feature_err, emit_feature_err, GateIssue};\n+use syntax::feature_gate::{UnstableFeatures, emit_feature_err, GateIssue};\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::fmt;\n@@ -104,7 +104,6 @@ struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     param_env: ty::ParamEnv<'tcx>,\n     local_qualif: IndexVec<Local, Option<Qualif>>,\n     qualif: Qualif,\n-    const_fn_arg_vars: BitSet<Local>,\n     temp_promotion_state: IndexVec<Local, TempState>,\n     promotion_candidates: Vec<Candidate>\n }\n@@ -139,7 +138,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             param_env,\n             local_qualif,\n             qualif: Qualif::empty(),\n-            const_fn_arg_vars: BitSet::new_empty(mir.local_decls.len()),\n             temp_promotion_state: temps,\n             promotion_candidates: vec![]\n         }\n@@ -168,26 +166,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         }\n     }\n \n-    /// Error about extra statements in a constant.\n-    fn statement_like(&mut self) {\n-        self.add(Qualif::NOT_CONST);\n-        if self.mode != Mode::Fn {\n-            let mut err = feature_err(\n-                &self.tcx.sess.parse_sess,\n-                \"const_let\",\n-                self.span,\n-                GateIssue::Language,\n-                &format!(\"statements in {}s are unstable\", self.mode),\n-            );\n-            if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                err.note(\"Blocks in constants may only contain items (such as constant, function \\\n-                          definition, etc...) and a tail expression.\");\n-                err.help(\"To avoid it, you have to replace the non-item object.\");\n-            }\n-            err.emit();\n-        }\n-    }\n-\n     /// Add the given qualification to self.qualif.\n     fn add(&mut self, qualif: Qualif) {\n         self.qualif = self.qualif | qualif;\n@@ -233,80 +211,46 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             return;\n         }\n \n-        if self.tcx.features().const_let {\n-            let mut dest = dest;\n-            let index = loop {\n-                match dest {\n-                    // with `const_let` active, we treat all locals equal\n-                    Place::Local(index) => break *index,\n-                    // projections are transparent for assignments\n-                    // we qualify the entire destination at once, even if just a field would have\n-                    // stricter qualification\n-                    Place::Projection(proj) => {\n-                        // Catch more errors in the destination. `visit_place` also checks various\n-                        // projection rules like union field access and raw pointer deref\n-                        self.visit_place(\n-                            dest,\n-                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                            location\n-                        );\n-                        dest = &proj.base;\n-                    },\n-                    Place::Promoted(..) => bug!(\"promoteds don't exist yet during promotion\"),\n-                    Place::Static(..) => {\n-                        // Catch more errors in the destination. `visit_place` also checks that we\n-                        // do not try to access statics from constants or try to mutate statics\n-                        self.visit_place(\n-                            dest,\n-                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                            location\n-                        );\n-                        return;\n-                    }\n+        let mut dest = dest;\n+        let index = loop {\n+            match dest {\n+                // We treat all locals equal in constants\n+                Place::Local(index) => break *index,\n+                // projections are transparent for assignments\n+                // we qualify the entire destination at once, even if just a field would have\n+                // stricter qualification\n+                Place::Projection(proj) => {\n+                    // Catch more errors in the destination. `visit_place` also checks various\n+                    // projection rules like union field access and raw pointer deref\n+                    self.visit_place(\n+                        dest,\n+                        PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                        location\n+                    );\n+                    dest = &proj.base;\n+                },\n+                Place::Promoted(..) => bug!(\"promoteds don't exist yet during promotion\"),\n+                Place::Static(..) => {\n+                    // Catch more errors in the destination. `visit_place` also checks that we\n+                    // do not try to access statics from constants or try to mutate statics\n+                    self.visit_place(\n+                        dest,\n+                        PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                        location\n+                    );\n+                    return;\n                 }\n-            };\n-            debug!(\"store to var {:?}\", index);\n-            match &mut self.local_qualif[index] {\n-                // this is overly restrictive, because even full assignments do not clear the qualif\n-                // While we could special case full assignments, this would be inconsistent with\n-                // aggregates where we overwrite all fields via assignments, which would not get\n-                // that feature.\n-                Some(ref mut qualif) => *qualif = *qualif | self.qualif,\n-                // insert new qualification\n-                qualif @ None => *qualif = Some(self.qualif),\n-            }\n-            return;\n-        }\n-\n-        match *dest {\n-            Place::Local(index) if self.mir.local_kind(index) == LocalKind::Temp ||\n-                                   self.mir.local_kind(index) == LocalKind::ReturnPointer => {\n-                debug!(\"store to {:?} (temp or return pointer)\", index);\n-                store(&mut self.local_qualif[index])\n-            }\n-\n-            Place::Projection(box Projection {\n-                base: Place::Local(index),\n-                elem: ProjectionElem::Deref\n-            }) if self.mir.local_kind(index) == LocalKind::Temp\n-               && self.mir.local_decls[index].ty.is_box()\n-               && self.local_qualif[index].map_or(false, |qualif| {\n-                    qualif.contains(Qualif::NOT_CONST)\n-               }) => {\n-                // Part of `box expr`, we should've errored\n-                // already for the Box allocation Rvalue.\n-            }\n-\n-            // This must be an explicit assignment.\n-            _ => {\n-                // Catch more errors in the destination.\n-                self.visit_place(\n-                    dest,\n-                    PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                    location\n-                );\n-                self.statement_like();\n             }\n+        };\n+        debug!(\"store to var {:?}\", index);\n+        match &mut self.local_qualif[index] {\n+            // this is overly restrictive, because even full assignments do not clear the qualif\n+            // While we could special case full assignments, this would be inconsistent with\n+            // aggregates where we overwrite all fields via assignments, which would not get\n+            // that feature.\n+            Some(ref mut qualif) => *qualif = *qualif | self.qualif,\n+            // insert new qualification\n+            qualif @ None => *qualif = Some(self.qualif),\n         }\n     }\n \n@@ -347,45 +291,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::FalseUnwind { .. } => None,\n \n                 TerminatorKind::Return => {\n-                    if !self.tcx.features().const_let {\n-                        // Check for unused values. This usually means\n-                        // there are extra statements in the AST.\n-                        for temp in mir.temps_iter() {\n-                            if self.local_qualif[temp].is_none() {\n-                                continue;\n-                            }\n-\n-                            let state = self.temp_promotion_state[temp];\n-                            if let TempState::Defined { location, uses: 0 } = state {\n-                                let data = &mir[location.block];\n-                                let stmt_idx = location.statement_index;\n-\n-                                // Get the span for the initialization.\n-                                let source_info = if stmt_idx < data.statements.len() {\n-                                    data.statements[stmt_idx].source_info\n-                                } else {\n-                                    data.terminator().source_info\n-                                };\n-                                self.span = source_info.span;\n-\n-                                // Treat this as a statement in the AST.\n-                                self.statement_like();\n-                            }\n-                        }\n-\n-                        // Make sure there are no extra unassigned variables.\n-                        self.qualif = Qualif::NOT_CONST;\n-                        for index in mir.vars_iter() {\n-                            if !self.const_fn_arg_vars.contains(index) {\n-                                debug!(\"unassigned variable {:?}\", index);\n-                                self.assign(&Place::Local(index), Location {\n-                                    block: bb,\n-                                    statement_index: usize::MAX,\n-                                });\n-                            }\n-                        }\n-                    }\n-\n                     break;\n                 }\n             };\n@@ -454,12 +359,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             LocalKind::ReturnPointer => {\n                 self.not_const();\n             }\n-            LocalKind::Var if !self.tcx.features().const_let => {\n-                if self.mode != Mode::Fn {\n-                    emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n-                                    self.span, GateIssue::Language,\n-                                    &format!(\"let bindings in {}s are unstable\",self.mode));\n-                }\n+            LocalKind::Var if self.mode == Mode::Fn => {\n                 self.add(Qualif::NOT_CONST);\n             }\n             LocalKind::Var |\n@@ -569,6 +469,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             }\n                         }\n \n+                        ProjectionElem::ConstantIndex {..} |\n+                        ProjectionElem::Subslice {..} |\n                         ProjectionElem::Field(..) |\n                         ProjectionElem::Index(_) => {\n                             let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n@@ -598,8 +500,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             this.qualif.restrict(ty, this.tcx, this.param_env);\n                         }\n \n-                        ProjectionElem::ConstantIndex {..} |\n-                        ProjectionElem::Subslice {..} |\n                         ProjectionElem::Downcast(..) => {\n                             this.not_const()\n                         }\n@@ -1168,46 +1068,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n         debug!(\"visit_assign: dest={:?} rvalue={:?} location={:?}\", dest, rvalue, location);\n         self.visit_rvalue(rvalue, location);\n \n-        // Check the allowed const fn argument forms.\n-        if let (Mode::ConstFn, &Place::Local(index)) = (self.mode, dest) {\n-            if self.mir.local_kind(index) == LocalKind::Var &&\n-               self.const_fn_arg_vars.insert(index) &&\n-               !self.tcx.features().const_let {\n-                // Direct use of an argument is permitted.\n-                match *rvalue {\n-                    Rvalue::Use(Operand::Copy(Place::Local(local))) |\n-                    Rvalue::Use(Operand::Move(Place::Local(local))) => {\n-                        if self.mir.local_kind(local) == LocalKind::Arg {\n-                            return;\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-                // Avoid a generic error for other uses of arguments.\n-                if self.qualif.contains(Qualif::FN_ARGUMENT) {\n-                    let decl = &self.mir.local_decls[index];\n-                    let mut err = feature_err(\n-                        &self.tcx.sess.parse_sess,\n-                        \"const_let\",\n-                        decl.source_info.span,\n-                        GateIssue::Language,\n-                        \"arguments of constant functions can only be immutable by-value bindings\"\n-                    );\n-                    if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                        err.note(\"Constant functions are not allowed to mutate anything. Thus, \\\n-                                  binding to an argument with a mutable pattern is not allowed.\");\n-                        err.note(\"Remove any mutable bindings from the argument list to fix this \\\n-                                  error. In case you need to mutate the argument, try lazily \\\n-                                  initializing a global variable instead of using a const fn, or \\\n-                                  refactoring the code to a functional style to avoid mutation if \\\n-                                  possible.\");\n-                    }\n-                    err.emit();\n-                    return;\n-                }\n-            }\n-        }\n-\n         self.assign(dest, location);\n     }\n "}, {"sha": "41a042ebcb643f5118b475fe6dc79d612364dcb4", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -65,12 +65,6 @@ pub fn is_min_const_fn(\n         }\n     }\n \n-    for local in mir.vars_iter() {\n-        return Err((\n-            mir.local_decls[local].source_info.span,\n-            \"local variables in const fn are unstable\".into(),\n-        ));\n-    }\n     for local in &mir.local_decls {\n         check_ty(tcx, local.ty, local.source_info.span)?;\n     }\n@@ -147,7 +141,7 @@ fn check_rvalue(\n             check_operand(tcx, mir, operand, span)\n         }\n         Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) => {\n-            check_place(tcx, mir, place, span, PlaceMode::Read)\n+            check_place(tcx, mir, place, span)\n         }\n         Rvalue::Cast(CastKind::Misc, operand, cast_ty) => {\n             use rustc::ty::cast::CastTy;\n@@ -213,11 +207,6 @@ fn check_rvalue(\n     }\n }\n \n-enum PlaceMode {\n-    Assign,\n-    Read,\n-}\n-\n fn check_statement(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &'a Mir<'tcx>,\n@@ -226,11 +215,11 @@ fn check_statement(\n     let span = statement.source_info.span;\n     match &statement.kind {\n         StatementKind::Assign(place, rval) => {\n-            check_place(tcx, mir, place, span, PlaceMode::Assign)?;\n+            check_place(tcx, mir, place, span)?;\n             check_rvalue(tcx, mir, rval, span)\n         }\n \n-        StatementKind::FakeRead(_, place) => check_place(tcx, mir, place, span, PlaceMode::Read),\n+        StatementKind::FakeRead(_, place) => check_place(tcx, mir, place, span),\n \n         // just an assignment\n         StatementKind::SetDiscriminant { .. } => Ok(()),\n@@ -256,7 +245,7 @@ fn check_operand(\n ) -> McfResult {\n     match operand {\n         Operand::Move(place) | Operand::Copy(place) => {\n-            check_place(tcx, mir, place, span, PlaceMode::Read)\n+            check_place(tcx, mir, place, span)\n         }\n         Operand::Constant(_) => Ok(()),\n     }\n@@ -267,29 +256,17 @@ fn check_place(\n     mir: &'a Mir<'tcx>,\n     place: &Place<'tcx>,\n     span: Span,\n-    mode: PlaceMode,\n ) -> McfResult {\n     match place {\n-        Place::Local(l) => match mode {\n-            PlaceMode::Assign => match mir.local_kind(*l) {\n-                LocalKind::Temp | LocalKind::ReturnPointer => Ok(()),\n-                LocalKind::Arg | LocalKind::Var => {\n-                    Err((span, \"assignments in const fn are unstable\".into()))\n-                }\n-            },\n-            PlaceMode::Read => Ok(()),\n-        },\n+        Place::Local(_) => Ok(()),\n         // promoteds are always fine, they are essentially constants\n         Place::Promoted(_) => Ok(()),\n         Place::Static(_) => Err((span, \"cannot access `static` items in const fn\".into())),\n         Place::Projection(proj) => {\n             match proj.elem {\n+                | ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. }\n                 | ProjectionElem::Deref | ProjectionElem::Field(..) | ProjectionElem::Index(_) => {\n-                    check_place(tcx, mir, &proj.base, span, mode)\n-                }\n-                // slice patterns are unstable\n-                | ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. } => {\n-                    return Err((span, \"slice patterns in const fn are unstable\".into()))\n+                    check_place(tcx, mir, &proj.base, span)\n                 }\n                 | ProjectionElem::Downcast(..) => {\n                     Err((span, \"`match` or `if let` in `const fn` is unstable\".into()))\n@@ -311,10 +288,10 @@ fn check_terminator(\n         | TerminatorKind::Resume => Ok(()),\n \n         TerminatorKind::Drop { location, .. } => {\n-            check_place(tcx, mir, location, span, PlaceMode::Read)\n+            check_place(tcx, mir, location, span)\n         }\n         TerminatorKind::DropAndReplace { location, value, .. } => {\n-            check_place(tcx, mir, location, span, PlaceMode::Read)?;\n+            check_place(tcx, mir, location, span)?;\n             check_operand(tcx, mir, value, span)\n         },\n "}, {"sha": "6c5c7defd435405bf43e902d037c13f2103d4567", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -193,9 +193,6 @@ declare_features! (\n     // Allows the definition of `const` functions with some advanced features.\n     (active, const_fn, \"1.2.0\", Some(24111), None),\n \n-    // Allows let bindings and destructuring in `const` functions and constants.\n-    (active, const_let, \"1.22.1\", Some(48821), None),\n-\n     // Allows accessing fields of unions inside `const` functions.\n     (active, const_fn_union, \"1.27.0\", Some(51909), None),\n \n@@ -686,6 +683,10 @@ declare_features! (\n     (accepted, repr_packed, \"1.33.0\", Some(33158), None),\n     // Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n     (accepted, min_const_unsafe_fn, \"1.33.0\", Some(55607), None),\n+    // Allows let bindings, assignments and destructuring in `const` functions and constants.\n+    // As long as control flow is not implemented in const eval, `&&` and `||` may not be used\n+    // at the same time as let bindings.\n+    (accepted, const_let, \"1.33.0\", Some(48821), None),\n     // `#[cfg_attr(predicate, multiple, attributes, here)]`\n     (accepted, cfg_attr_multi, \"1.33.0\", Some(54881), None),\n );"}, {"sha": "da6036a04a549e7aa4dbcc1179bd3841a2729283", "filename": "src/test/compile-fail/const-fn-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_fn, const_let)]\n+#![feature(const_fn)]\n \n const X : usize = 2;\n "}, {"sha": "10a4c31f24ed4eb25c6c41d101842463c10185ee", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,8 +1,8 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(const_let)]\n-\n type Array = [u32; {  let x = 2; 5 }];\n \n-pub fn main() {}\n+pub fn main() {\n+    let _: Array = [0; 5];\n+}"}, {"sha": "a1b9b586ad0384e70e2fffc0c66a141c51972dd9", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,10 +1,11 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(const_let)]\n-\n+#[repr(u8)]\n enum Foo {\n     Bar = { let x = 1; 3 }\n }\n \n-pub fn main() {}\n+pub fn main() {\n+    assert_eq!(3, Foo::Bar as u8);\n+}"}, {"sha": "04865830df2ebec06bb9e8550be08dd39c9579e6", "filename": "src/test/run-pass/ctfe/issue-37550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-#![feature(const_fn, const_let)]\n+#![feature(const_fn)]\n \n const fn x() {\n     let t = true;"}, {"sha": "95d50171a847bca7d0db0f0a2705106d669ffc58", "filename": "src/test/run-pass/ctfe/locals-in-const-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -2,8 +2,6 @@\n \n // https://github.com/rust-lang/rust/issues/48821\n \n-#![feature(const_fn, const_let)]\n-\n const fn foo(i: usize) -> usize {\n     let x = i;\n     x"}, {"sha": "f1a2312490813a6672d005a94bafb9298dcda6ed", "filename": "src/test/ui/check-static-values-constraints.nll.stderr", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -13,44 +13,80 @@ error[E0010]: allocations are not allowed in statics\n LL | static STATIC11: Box<MyOwned> = box MyOwned;\n    |                                 ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:79:37\n+   |\n+LL | static STATIC11: Box<MyOwned> = box MyOwned;\n+   |                                     ^^^^^^^\n+\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/check-static-values-constraints.rs:89:32\n+  --> $DIR/check-static-values-constraints.rs:90:32\n    |\n LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n    |                                ^^^^^^^^^^^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:94:5\n+  --> $DIR/check-static-values-constraints.rs:95:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:95:9\n+   |\n+LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |         ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:95:5\n+  --> $DIR/check-static-values-constraints.rs:97:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:97:9\n+   |\n+LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |         ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:99:6\n+  --> $DIR/check-static-values-constraints.rs:102:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:102:10\n+   |\n+LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |          ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:100:6\n+  --> $DIR/check-static-values-constraints.rs:104:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:104:10\n+   |\n+LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |          ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:106:5\n+  --> $DIR/check-static-values-constraints.rs:111:5\n    |\n LL |     box 3;\n    |     ^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:111:9\n+   |\n+LL |     box 3;\n+   |         ^\n+\n error[E0507]: cannot move out of static item\n-  --> $DIR/check-static-values-constraints.rs:110:45\n+  --> $DIR/check-static-values-constraints.rs:116:45\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             ^\n@@ -59,12 +95,18 @@ LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             help: consider borrowing here: `&x`\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:110:38\n+  --> $DIR/check-static-values-constraints.rs:116:38\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                      ^^^^^ allocation not allowed in statics\n \n-error: aborting due to 10 previous errors\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:116:42\n+   |\n+LL |     let y = { static x: Box<isize> = box 3; x };\n+   |                                          ^\n+\n+error: aborting due to 17 previous errors\n \n-Some errors occurred: E0010, E0015, E0493, E0507.\n+Some errors occurred: E0010, E0015, E0019, E0493, E0507.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "acfb3b5e44bab041a8ded3504faab37c026ccb85", "filename": "src/test/ui/check-static-values-constraints.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -78,6 +78,7 @@ struct MyOwned;\n \n static STATIC11: Box<MyOwned> = box MyOwned;\n //~^ ERROR allocations are not allowed in statics\n+//~| ERROR static contains unimplemented expression type\n \n static mut STATIC12: UnsafeStruct = UnsafeStruct;\n \n@@ -92,22 +93,28 @@ static mut STATIC14: SafeStruct = SafeStruct {\n \n static STATIC15: &'static [Box<MyOwned>] = &[\n     box MyOwned, //~ ERROR allocations are not allowed in statics\n+    //~| ERROR contains unimplemented expression\n     box MyOwned, //~ ERROR allocations are not allowed in statics\n+    //~| ERROR contains unimplemented expression\n ];\n \n static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) = (\n     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+    //~| ERROR contains unimplemented expression\n     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+    //~| ERROR contains unimplemented expression\n );\n \n static mut STATIC17: SafeEnum = SafeEnum::Variant1;\n \n static STATIC19: Box<isize> =\n     box 3;\n //~^ ERROR allocations are not allowed in statics\n+    //~| ERROR contains unimplemented expression\n \n pub fn main() {\n     let y = { static x: Box<isize> = box 3; x };\n     //~^ ERROR allocations are not allowed in statics\n-    //~^^ ERROR cannot move out of static item\n+    //~| ERROR cannot move out of static item\n+    //~| ERROR contains unimplemented expression\n }"}, {"sha": "5b1f265c34aef5c94ff8f1d53394555c4db83e44", "filename": "src/test/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -13,55 +13,97 @@ error[E0010]: allocations are not allowed in statics\n LL | static STATIC11: Box<MyOwned> = box MyOwned;\n    |                                 ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:79:37\n+   |\n+LL | static STATIC11: Box<MyOwned> = box MyOwned;\n+   |                                     ^^^^^^^\n+\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/check-static-values-constraints.rs:89:32\n+  --> $DIR/check-static-values-constraints.rs:90:32\n    |\n LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n    |                                ^^^^^^^^^^^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:94:5\n+  --> $DIR/check-static-values-constraints.rs:95:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:95:9\n+   |\n+LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |         ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:95:5\n+  --> $DIR/check-static-values-constraints.rs:97:5\n    |\n LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:97:9\n+   |\n+LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |         ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:99:6\n+  --> $DIR/check-static-values-constraints.rs:102:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:102:10\n+   |\n+LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |          ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:100:6\n+  --> $DIR/check-static-values-constraints.rs:104:6\n    |\n LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:104:10\n+   |\n+LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+   |          ^^^^^^^\n+\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:106:5\n+  --> $DIR/check-static-values-constraints.rs:111:5\n    |\n LL |     box 3;\n    |     ^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:111:9\n+   |\n+LL |     box 3;\n+   |         ^\n+\n error[E0507]: cannot move out of static item\n-  --> $DIR/check-static-values-constraints.rs:110:45\n+  --> $DIR/check-static-values-constraints.rs:116:45\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             ^ cannot move out of static item\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:110:38\n+  --> $DIR/check-static-values-constraints.rs:116:38\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                      ^^^^^ allocation not allowed in statics\n \n-error: aborting due to 10 previous errors\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/check-static-values-constraints.rs:116:42\n+   |\n+LL |     let y = { static x: Box<isize> = box 3; x };\n+   |                                          ^\n+\n+error: aborting due to 17 previous errors\n \n-Some errors occurred: E0010, E0015, E0493, E0507.\n+Some errors occurred: E0010, E0015, E0019, E0493, E0507.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "58a6cf6dcfdebe245e7c0f97cbe402fe6f2e65fe", "filename": "src/test/ui/consts/const-block-non-item-statement-2.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.rs?ref=017f046c1371758bf4363afd4384bafb583b9710", "patch": "@@ -1,18 +0,0 @@\n-const A: usize = { 1; 2 };\n-//~^ ERROR statements in constants are unstable\n-\n-const B: usize = { { } 2 };\n-//~^ ERROR statements in constants are unstable\n-\n-macro_rules! foo {\n-    () => (()) //~ ERROR statements in constants are unstable\n-}\n-const C: usize = { foo!(); 2 };\n-\n-const D: usize = { let x = 4; 2 };\n-//~^ ERROR let bindings in constants are unstable\n-//~| ERROR statements in constants are unstable\n-//~| ERROR let bindings in constants are unstable\n-//~| ERROR statements in constants are unstable\n-\n-pub fn main() {}"}, {"sha": "e0c61a953f50b72c9df5b11f5f28fc1b29b86bd2", "filename": "src/test/ui/consts/const-block-non-item-statement-2.stderr", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-2.stderr?ref=017f046c1371758bf4363afd4384bafb583b9710", "patch": "@@ -1,62 +0,0 @@\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:1:20\n-   |\n-LL | const A: usize = { 1; 2 };\n-   |                    ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:4:20\n-   |\n-LL | const B: usize = { { } 2 };\n-   |                    ^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:8:12\n-   |\n-LL |     () => (()) //~ ERROR statements in constants are unstable\n-   |            ^^\n-LL | }\n-LL | const C: usize = { foo!(); 2 };\n-   |                    ------- in this macro invocation\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:12:28\n-   |\n-LL | const D: usize = { let x = 4; 2 };\n-   |                            ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:12:28\n-   |\n-LL | const D: usize = { let x = 4; 2 };\n-   |                            ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:12:1\n-   |\n-LL | const D: usize = { let x = 4; 2 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-2.rs:12:1\n-   |\n-LL | const D: usize = { let x = 4; 2 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 7 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "867840925b2d59c75b678ca19954142602fbdaaa", "filename": "src/test/ui/consts/const-block-non-item-statement-3.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.rs?ref=017f046c1371758bf4363afd4384bafb583b9710", "patch": "@@ -1,7 +0,0 @@\n-type Array = [u32; {  let x = 2; 5 }];\n-//~^ ERROR let bindings in constants are unstable\n-//~| ERROR statements in constants are unstable\n-//~| ERROR let bindings in constants are unstable\n-//~| ERROR statements in constants are unstable\n-\n-pub fn main() {}"}, {"sha": "0a549bc0c8ded103ca505189c4d498c11939fdbd", "filename": "src/test/ui/consts/const-block-non-item-statement-3.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement-3.stderr?ref=017f046c1371758bf4363afd4384bafb583b9710", "patch": "@@ -1,35 +0,0 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-3.rs:1:31\n-   |\n-LL | type Array = [u32; {  let x = 2; 5 }];\n-   |                               ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-3.rs:1:31\n-   |\n-LL | type Array = [u32; {  let x = 2; 5 }];\n-   |                               ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-3.rs:1:20\n-   |\n-LL | type Array = [u32; {  let x = 2; 5 }];\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement-3.rs:1:20\n-   |\n-LL | type Array = [u32; {  let x = 2; 5 }];\n-   |                    ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "5ecf9a049842d4a1631dff192f522b0b7e60277c", "filename": "src/test/ui/consts/const-block-non-item-statement.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,9 +1,23 @@\n+// compile-pass\n+\n enum Foo {\n     Bar = { let x = 1; 3 }\n-    //~^ ERROR let bindings in constants are unstable\n-    //~| ERROR statements in constants are unstable\n-    //~| ERROR let bindings in constants are unstable\n-    //~| ERROR statements in constants are unstable\n }\n \n+\n+const A: usize = { 1; 2 };\n+\n+const B: usize = { { } 2 };\n+\n+macro_rules! foo {\n+    () => (())\n+}\n+\n+const C: usize = { foo!(); 2 };\n+\n+const D: usize = { let x = 4; 2 };\n+\n+type Array = [u32; {  let x = 2; 5 }];\n+type Array2 = [u32; { let mut x = 2; x = 3; x}];\n+\n pub fn main() {}"}, {"sha": "f0d751e07561c44981315ca99a07625e0dc53613", "filename": "src/test/ui/consts/const-block-non-item-statement.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.stderr?ref=017f046c1371758bf4363afd4384bafb583b9710", "patch": "@@ -1,35 +0,0 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement.rs:2:21\n-   |\n-LL |     Bar = { let x = 1; 3 }\n-   |                     ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement.rs:2:21\n-   |\n-LL |     Bar = { let x = 1; 3 }\n-   |                     ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement.rs:2:11\n-   |\n-LL |     Bar = { let x = 1; 3 }\n-   |           ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/const-block-non-item-statement.rs:2:11\n-   |\n-LL |     Bar = { let x = 1; 3 }\n-   |           ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "4d3c714481a290984b67a31d8d688af363c08d07", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -2,7 +2,6 @@\n // The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n-#![feature(const_let)]\n \n use std::cell::UnsafeCell;\n "}, {"sha": "be1be6c060071cb8b240bbc6ac2fffd3e2a55a37", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,5 @@\n error[E0019]: static contains unimplemented expression type\n-  --> $DIR/assign-to-static-within-other-static-2.rs:17:5\n+  --> $DIR/assign-to-static-within-other-static-2.rs:16:5\n    |\n LL |     *FOO.0.get() = 5; //~ ERROR contains unimplemented expression type\n    |     ^^^^^^^^^^^^^^^^"}, {"sha": "b4c416b1c55f040e3c921e5540e7c6ccf66abd41", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -2,7 +2,6 @@\n // The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n-#![feature(const_let)]\n \n use std::cell::UnsafeCell;\n "}, {"sha": "31e49dc10ca60e845264f5dc23eca45bfd2bbbea", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,5 @@\n error: cannot mutate statics in the initializer of another static\n-  --> $DIR/assign-to-static-within-other-static.rs:11:5\n+  --> $DIR/assign-to-static-within-other-static.rs:10:5\n    |\n LL |     FOO = 5; //~ ERROR cannot mutate statics in the initializer of another static\n    |     ^^^^^^^"}, {"sha": "63321b9120076aedd3ef431a56f31da3135f2027", "filename": "src/test/ui/consts/const-eval/const_let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n fn main() {}\n \n struct FakeNeedsDrop;"}, {"sha": "00de97e6fb3a027a3a119dc0ace1d746171a82d3", "filename": "src/test/ui/consts/const-eval/const_let.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,11 +1,11 @@\n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let.rs:15:55\n+  --> $DIR/const_let.rs:13:55\n    |\n LL | const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n    |                                                       ^\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let.rs:19:35\n+  --> $DIR/const_let.rs:17:35\n    |\n LL | const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n    |                                   ^"}, {"sha": "a2a45af7cb086e1361c92fd1687f2835464e205e", "filename": "src/test/ui/consts/const-eval/infinite_loop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n fn main() {\n     // Tests the Collatz conjecture with an incorrect base case (0 instead of 1).\n     // The value of `n` will loop indefinitely (4 - 2 - 1 - 4)."}, {"sha": "422c2bab6ea906567f4f805199568d45ce28ec9a", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,5 @@\n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/infinite_loop.rs:9:9\n+  --> $DIR/infinite_loop.rs:7:9\n    |\n LL | /         while n != 0 { //~ ERROR constant contains unimplemented expression type\n LL | |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n@@ -8,7 +8,7 @@ LL | |         }\n    | |_________^\n \n warning: Constant evaluating a complex constant, this might take some time\n-  --> $DIR/infinite_loop.rs:6:18\n+  --> $DIR/infinite_loop.rs:4:18\n    |\n LL |       let _ = [(); {\n    |  __________________^\n@@ -21,7 +21,7 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite_loop.rs:10:20\n+  --> $DIR/infinite_loop.rs:8:20\n    |\n LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n    |                    ^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate"}, {"sha": "aafdd5fe61782fe8ed935182d35d72860e222988", "filename": "src/test/ui/consts/const-eval/issue-52475.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n fn main() {\n     let _ = [(); {\n         //~^ WARNING Constant evaluating a complex constant, this might take some time"}, {"sha": "4f1b2ab4c8f4625b3ae3808f2c4d8eec7ed5ba7e", "filename": "src/test/ui/consts/const-eval/issue-52475.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,5 @@\n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/issue-52475.rs:8:9\n+  --> $DIR/issue-52475.rs:6:9\n    |\n LL | /         while n < 5 { //~ ERROR constant contains unimplemented expression type\n LL | |             n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n@@ -8,7 +8,7 @@ LL | |         }\n    | |_________^\n \n warning: Constant evaluating a complex constant, this might take some time\n-  --> $DIR/issue-52475.rs:4:18\n+  --> $DIR/issue-52475.rs:2:18\n    |\n LL |       let _ = [(); {\n    |  __________________^\n@@ -21,7 +21,7 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52475.rs:9:17\n+  --> $DIR/issue-52475.rs:7:17\n    |\n LL |             n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n    |                 ^^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate"}, {"sha": "32f0062168b3d6648a5133e25588b5b8639260f1", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -2,7 +2,6 @@\n // The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n-#![feature(const_let)]\n \n use std::cell::UnsafeCell;\n "}, {"sha": "9fad6868d2038e60cea295c8d52fb5a95df1f0d8", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,11 +1,11 @@\n error[E0019]: static contains unimplemented expression type\n-  --> $DIR/mod-static-with-const-fn.rs:19:5\n+  --> $DIR/mod-static-with-const-fn.rs:18:5\n    |\n LL |     *FOO.0.get() = 5;\n    |     ^^^^^^^^^^^^^^^^\n \n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/mod-static-with-const-fn.rs:22:5\n+  --> $DIR/mod-static-with-const-fn.rs:21:5\n    |\n LL |     foo();\n    |     ^^^^^"}, {"sha": "9b7bca6b72d61eeb6a9273312a649527c0aa3c41", "filename": "src/test/ui/consts/const-eval/ub-upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_transmute,const_let)]\n+#![feature(const_transmute)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "dcf89f90e31da3e70aa1625c6921cc41424b5256", "filename": "src/test/ui/consts/const-fn-destructuring-arg.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,17 +1,7 @@\n-// test that certain things are disallowed in constant functions\n+// compile-pass\n \n-#![feature(const_fn)]\n-\n-// no destructuring\n-const fn i((\n-            a,\n-            //~^ ERROR arguments of constant functions can only be immutable by-value bindings\n-            b\n-            //~^ ERROR arguments of constant functions can only be immutable by-value bindings\n-           ): (u32, u32)) -> u32 {\n+const fn i((a, b): (u32, u32)) -> u32 {\n     a + b\n-    //~^ ERROR let bindings in constant functions are unstable\n-    //~| ERROR let bindings in constant functions are unstable\n }\n \n fn main() {}"}, {"sha": "db63e8308045a11f3c0af8aeb281dd57a3ec375f", "filename": "src/test/ui/consts/const-fn-destructuring-arg.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.stderr?ref=017f046c1371758bf4363afd4384bafb583b9710", "patch": "@@ -1,35 +0,0 @@\n-error[E0658]: arguments of constant functions can only be immutable by-value bindings (see issue #48821)\n-  --> $DIR/const-fn-destructuring-arg.rs:7:13\n-   |\n-LL |             a,\n-   |             ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: arguments of constant functions can only be immutable by-value bindings (see issue #48821)\n-  --> $DIR/const-fn-destructuring-arg.rs:9:13\n-   |\n-LL |             b\n-   |             ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-destructuring-arg.rs:12:5\n-   |\n-LL |     a + b\n-   |     ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-destructuring-arg.rs:12:9\n-   |\n-LL |     a + b\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "085ff5c58e60c6c68f693ad5eec77ce2fdd75fae", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -27,13 +27,9 @@ const fn get_Y_addr() -> &'static u32 {\n }\n \n const fn get() -> u32 {\n-    let x = 22; //~ ERROR let bindings in constant functions are unstable\n-//~^ ERROR statements in constant functions\n-    let y = 44; //~ ERROR let bindings in constant functions are unstable\n-//~^ ERROR statements in constant functions\n+    let x = 22;\n+    let y = 44;\n     x + y\n-//~^ ERROR let bindings in constant functions are unstable\n-//~| ERROR let bindings in constant functions are unstable\n }\n \n fn main() {}"}, {"sha": "2003b137c272b8b0ef3b084ccfc32c625235a731", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.stderr", "status": "modified", "additions": 2, "deletions": 50, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -16,55 +16,7 @@ error[E0013]: constant functions cannot refer to statics, use a constant instead\n LL |     &Y\n    |     ^^\n \n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:30:13\n-   |\n-LL |     let x = 22; //~ ERROR let bindings in constant functions are unstable\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:30:13\n-   |\n-LL |     let x = 22; //~ ERROR let bindings in constant functions are unstable\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:32:13\n-   |\n-LL |     let y = 44; //~ ERROR let bindings in constant functions are unstable\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:32:13\n-   |\n-LL |     let y = 44; //~ ERROR let bindings in constant functions are unstable\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:34:5\n-   |\n-LL |     x + y\n-   |     ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-not-safe-for-const.rs:34:9\n-   |\n-LL |     x + y\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0013, E0015, E0658.\n+Some errors occurred: E0013, E0015.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "0b09b8469fd752f206b6dffa945d78dfffeef1fd", "filename": "src/test/ui/consts/const_let_assign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(const_let)]\n-\n struct S(i32);\n \n const A: () = {"}, {"sha": "1c44237e49b7a2f20c0e3506df439630c4f4fa86", "filename": "src/test/ui/consts/const_let_assign2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,8 +1,5 @@\n // compile-pass\n \n-#![feature(const_let)]\n-#![feature(const_fn)]\n-\n pub struct AA {\n     pub data: [u8; 10],\n }"}, {"sha": "cbe73923e9c424b961abec029bb092733899827f", "filename": "src/test/ui/consts/const_let_assign3.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_let)]\n #![feature(const_fn)]\n \n struct S {\n@@ -18,6 +17,15 @@ const FOO: S = {\n     s\n };\n \n+type Array = [u32; {\n+    let mut x = 2;\n+    let y = &mut x;\n+//~^ ERROR references in constants may only refer to immutable values\n+    *y = 42;\n+//~^ ERROR constant contains unimplemented expression type\n+    *y\n+}];\n+\n fn main() {\n     assert_eq!(FOO.state, 3);\n }"}, {"sha": "6649fb997cce471ef79b22c267ebfd51abba6a90", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,16 +1,28 @@\n error[E0019]: constant function contains unimplemented expression type\n-  --> $DIR/const_let_assign3.rs:10:9\n+  --> $DIR/const_let_assign3.rs:9:9\n    |\n LL |         self.state = x;\n    |         ^^^^^^^^^^^^^^\n \n error[E0017]: references in constants may only refer to immutable values\n-  --> $DIR/const_let_assign3.rs:17:5\n+  --> $DIR/const_let_assign3.rs:16:5\n    |\n LL |     s.foo(3); //~ ERROR references in constants may only refer to immutable values\n    |     ^ constants require immutable values\n \n-error: aborting due to 2 previous errors\n+error[E0017]: references in constants may only refer to immutable values\n+  --> $DIR/const_let_assign3.rs:22:13\n+   |\n+LL |     let y = &mut x;\n+   |             ^^^^^^ constants require immutable values\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const_let_assign3.rs:24:5\n+   |\n+LL |     *y = 42;\n+   |     ^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n Some errors occurred: E0017, E0019.\n For more information about an error, try `rustc --explain E0017`."}, {"sha": "a2364c392f26bd945bf232a315f343d498197bdf", "filename": "src/test/ui/consts/const_let_eq.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let, const_fn)]\n-\n // run-pass\n \n struct Foo<T>(T);"}, {"sha": "c48f54e567b2cb4f651a601f0badcc7776d291c0", "filename": "src/test/ui/consts/const_let_eq_float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,6 +1,6 @@\n // compile-pass\n \n-#![feature(const_let, const_fn)]\n+#![feature(const_fn)]\n \n struct Foo<T>(T);\n struct Bar<T> { x: T }"}, {"sha": "424a16f7ed39b10aa34e222de064709d3e816f22", "filename": "src/test/ui/consts/const_let_irrefutable.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_irrefutable.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -0,0 +1,11 @@\n+// compile-pass\n+\n+fn main() {}\n+\n+const fn tup((a, b): (i32, i32)) -> i32 {\n+    a + b\n+}\n+\n+const fn array([a, b]: [i32; 2]) -> i32 {\n+    a + b\n+}"}, {"sha": "345f682868fbc52f6890a70cd28359f7b63046c6", "filename": "src/test/ui/consts/const_let_refutable.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -0,0 +1,5 @@\n+fn main() {}\n+\n+const fn slice([a, b]: &[i32]) -> i32 { //~ ERROR refutable pattern in function argument\n+    a + b\n+}"}, {"sha": "c5d2ba02a70c613917b178033ba76eab9ad07545", "filename": "src/test/ui/consts/const_let_refutable.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -0,0 +1,9 @@\n+error[E0005]: refutable pattern in function argument: `&[]` not covered\n+  --> $DIR/const_let_refutable.rs:3:16\n+   |\n+LL | const fn slice([a, b]: &[i32]) -> i32 { //~ ERROR refutable pattern in function argument\n+   |                ^^^^^^ pattern `&[]` not covered\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0005`."}, {"sha": "1e7b7ed3193557a52dbacef980517bf52c90e839", "filename": "src/test/ui/consts/const_short_circuit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,4 +1,4 @@\n-#![feature(underscore_const_names, const_let)]\n+#![feature(underscore_const_names)]\n \n const _: bool = false && false;\n const _: bool = true && false;"}, {"sha": "dbc50f1fbd4b4c75efcaf784d0b1165685e9662a", "filename": "src/test/ui/consts/dangling-alloc-id-ice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,7 +1,5 @@\n // https://github.com/rust-lang/rust/issues/55223\n \n-#![feature(const_let)]\n-\n union Foo<'a> {\n     y: &'a (),\n     long_live_the_unit: &'static (),"}, {"sha": "2cd8711f03d3168ed8e696c4c8b40b6a49a1f3d8", "filename": "src/test/ui/consts/dangling-alloc-id-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/dangling-alloc-id-ice.rs:10:1\n+  --> $DIR/dangling-alloc-id-ice.rs:8:1\n    |\n LL | / const FOO: &() = { //~ ERROR any use of this value will cause an error\n LL | |     let y = ();"}, {"sha": "c2d8e6d421a2876346286962f7b620bc946114ed", "filename": "src/test/ui/consts/dangling_raw_ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n const FOO: *const u32 = { //~ ERROR any use of this value will cause an error\n     let x = 42;\n     &x"}, {"sha": "091f1f785cb02a2824d36e8917f4267d000bf360", "filename": "src/test/ui/consts/dangling_raw_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/dangling_raw_ptr.rs:3:1\n+  --> $DIR/dangling_raw_ptr.rs:1:1\n    |\n LL | / const FOO: *const u32 = { //~ ERROR any use of this value will cause an error\n LL | |     let x = 42;"}, {"sha": "91b076097b0183ec730ad482f02e0ab0993e1455", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -112,12 +112,6 @@ error: `if`, `match`, `&&` and `||` are not stable in const fn\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n \n-error: local variables in const fn are unstable\n-  --> $DIR/min_const_fn.rs:99:34\n-   |\n-LL | const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn\n-   |                                  ^\n-\n error: `if`, `match`, `&&` and `||` are not stable in const fn\n   --> $DIR/min_const_fn.rs:100:44\n    |\n@@ -220,7 +214,7 @@ error: function pointers in const fn are unstable\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 34 previous errors\n \n Some errors occurred: E0493, E0515.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "05cf3d5f1f1731aa69eb49a91bc2514d24b9c246", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -96,7 +96,7 @@ const fn foo30_2(x: *mut u32) -> usize { x as usize }\n const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n //~^ ERROR `if`, `match`, `&&` and `||` are not stable in const fn\n const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n-const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn\n+const fn foo30_6() -> bool { let x = true; x }\n const fn foo36(a: bool, b: bool) -> bool { a && b }\n //~^ ERROR `if`, `match`, `&&` and `||` are not stable in const fn\n const fn foo37(a: bool, b: bool) -> bool { a || b }"}, {"sha": "2cae714fbf727cbb25dc889b73bbe208d75a2196", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -112,12 +112,6 @@ error: `if`, `match`, `&&` and `||` are not stable in const fn\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n \n-error: local variables in const fn are unstable\n-  --> $DIR/min_const_fn.rs:99:34\n-   |\n-LL | const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn\n-   |                                  ^\n-\n error: `if`, `match`, `&&` and `||` are not stable in const fn\n   --> $DIR/min_const_fn.rs:100:44\n    |\n@@ -208,6 +202,6 @@ error: function pointers in const fn are unstable\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 34 previous errors\n \n For more information about this error, try `rustc --explain E0493`."}, {"sha": "89acfea6ed8ff8d60ae13bdc63c8602ef235fdf3", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,15 +1,15 @@\n const fn mutable_ref_in_const() -> u8 {\n-    let mut a = 0; //~ ERROR local variables in const fn\n-    let b = &mut a;\n+    let mut a = 0;\n+    let b = &mut a; //~ ERROR mutable references in const fn\n     *b\n }\n \n struct X;\n \n impl X {\n     const fn inherent_mutable_ref_in_const() -> u8 {\n-        let mut a = 0; //~ ERROR local variables in const fn\n-        let b = &mut a;\n+        let mut a = 0;\n+        let b = &mut a; //~ ERROR mutable references in const fn\n         *b\n     }\n }"}, {"sha": "5ce0f30dc6e1f27bfc7e5578a016a80cc8f26343", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,14 +1,14 @@\n-error: local variables in const fn are unstable\n-  --> $DIR/mutable_borrow.rs:2:9\n+error: mutable references in const fn are unstable\n+  --> $DIR/mutable_borrow.rs:3:9\n    |\n-LL |     let mut a = 0; //~ ERROR local variables in const fn\n-   |         ^^^^^\n+LL |     let b = &mut a; //~ ERROR mutable references in const fn\n+   |         ^\n \n-error: local variables in const fn are unstable\n-  --> $DIR/mutable_borrow.rs:11:13\n+error: mutable references in const fn are unstable\n+  --> $DIR/mutable_borrow.rs:12:13\n    |\n-LL |         let mut a = 0; //~ ERROR local variables in const fn\n-   |             ^^^^^\n+LL |         let b = &mut a; //~ ERROR mutable references in const fn\n+   |             ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "32c68e69f4beda7d4d4ba48908ce00ae90aaf899", "filename": "src/test/ui/consts/partial_qualif.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n use std::cell::Cell;\n \n const FOO: &(Cell<usize>, bool) = {"}, {"sha": "967fb83b78b087d64d18cc5770af96a3c0f04de5", "filename": "src/test/ui/consts/partial_qualif.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/partial_qualif.rs:8:5\n+  --> $DIR/partial_qualif.rs:6:5\n    |\n LL |     &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n    |     ^^^^"}, {"sha": "dedb7db5920891315da02e88b4ef7988207dae46", "filename": "src/test/ui/consts/projection_qualif.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n use std::cell::Cell;\n \n const FOO: &u32 = {"}, {"sha": "410c51c4b54e1bb666d4bc7a87a760756fa99e16", "filename": "src/test/ui/consts/projection_qualif.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,17 +1,17 @@\n error[E0017]: references in constants may only refer to immutable values\n-  --> $DIR/projection_qualif.rs:8:27\n+  --> $DIR/projection_qualif.rs:6:27\n    |\n LL |         let b: *mut u32 = &mut a; //~ ERROR may only refer to immutable values\n    |                           ^^^^^^ constants require immutable values\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/projection_qualif.rs:9:18\n+  --> $DIR/projection_qualif.rs:7:18\n    |\n LL |         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n    |                  ^^^^^^\n \n error[E0658]: dereferencing raw pointers in constants is unstable (see issue #51911)\n-  --> $DIR/projection_qualif.rs:9:18\n+  --> $DIR/projection_qualif.rs:7:18\n    |\n LL |         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n    |                  ^^^^^^"}, {"sha": "e6ee1523a3b285e4ecd0bd4805bb6c1570c3bf64", "filename": "src/test/ui/consts/promote_const_let.nll.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/promote_const_let.rs:6:9\n+  --> $DIR/promote_const_let.rs:4:9\n    |\n LL |     let x: &'static u32 = {\n    |            ------------ type annotation requires that `y` is borrowed for `'static`\n@@ -9,6 +9,21 @@ LL |         &y //~ ERROR does not live long enough\n LL |     };\n    |     - `y` dropped here while still borrowed\n \n-error: aborting due to previous error\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote_const_let.rs:6:28\n+   |\n+LL |       let x: &'static u32 = &{ //~ ERROR does not live long enough\n+   |  ____________------------____^\n+   | |            |\n+   | |            type annotation requires that borrow lasts for `'static`\n+LL | |         let y = 42;\n+LL | |         y\n+LL | |     };\n+   | |_____^ creates a temporary which is freed while still in use\n+LL |   }\n+   |   - temporary value is freed at the end of this statement\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+Some errors occurred: E0597, E0716.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "a8a6d4d99c6ffb959c5156f1cb30c418564415af", "filename": "src/test/ui/consts/promote_const_let.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,8 +1,10 @@\n-#![feature(const_let)]\n-\n fn main() {\n     let x: &'static u32 = {\n         let y = 42;\n         &y //~ ERROR does not live long enough\n     };\n+    let x: &'static u32 = &{ //~ ERROR does not live long enough\n+        let y = 42;\n+        y\n+    };\n }"}, {"sha": "d37bd49186032d141e56aee31f8ad56cfa790d91", "filename": "src/test/ui/consts/promote_const_let.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/promote_const_let.rs:6:10\n+  --> $DIR/promote_const_let.rs:4:10\n    |\n LL |         &y //~ ERROR does not live long enough\n    |          ^ borrowed value does not live long enough\n@@ -8,6 +8,20 @@ LL |     };\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to previous error\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promote_const_let.rs:6:28\n+   |\n+LL |       let x: &'static u32 = &{ //~ ERROR does not live long enough\n+   |  ____________________________^\n+LL | |         let y = 42;\n+LL | |         y\n+LL | |     };\n+   | |_____^ temporary value does not live long enough\n+LL |   }\n+   |   - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "430eea37de73c60cb76e51b054d1e346e136393a", "filename": "src/test/ui/consts/qualif_overwrite.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n use std::cell::Cell;\n \n // this is overly conservative. The reset to `None` should clear `a` of all qualifications"}, {"sha": "30479139e314c82c0d51341b79b678dafd8d9960", "filename": "src/test/ui/consts/qualif_overwrite.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/qualif_overwrite.rs:12:5\n+  --> $DIR/qualif_overwrite.rs:10:5\n    |\n LL |     &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n    |     ^^^^"}, {"sha": "fa79b5c14a73629e80853143aaff2217c7f83d2f", "filename": "src/test/ui/consts/qualif_overwrite_2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n use std::cell::Cell;\n \n // const qualification is not smart enough to know about fields and always assumes that there might"}, {"sha": "8276db99a12c0b264b227387cbb90b70b1a3e03a", "filename": "src/test/ui/consts/qualif_overwrite_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/qualif_overwrite_2.rs:10:5\n+  --> $DIR/qualif_overwrite_2.rs:8:5\n    |\n LL |     &{a.0} //~ ERROR cannot borrow a constant which may contain interior mutability\n    |     ^^^^^^"}, {"sha": "ef378fa84518e5cc1e208e87d5e6c192d486042f", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n static mut STDERR_BUFFER_SPACE: u8 = 0;\n \n pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };"}, {"sha": "72186571d697e15f25a57659797eaf712ab7aedf", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,11 +1,11 @@\n error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/static_mut_containing_mut_ref2.rs:5:46\n+  --> $DIR/static_mut_containing_mut_ref2.rs:3:46\n    |\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n \n error[E0019]: static contains unimplemented expression type\n-  --> $DIR/static_mut_containing_mut_ref2.rs:5:45\n+  --> $DIR/static_mut_containing_mut_ref2.rs:3:45\n    |\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c24c7e27920795a6d8fe14c3f67a5c3a4bd40c90", "filename": "src/test/ui/consts/static_mut_containing_mut_ref3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref3.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n static mut FOO: (u8, u8) = (42, 43);\n \n static mut BAR: () = unsafe { FOO.0 = 99; };"}, {"sha": "e88e49b097af26b7d0cbe13936c58de0a7153b5e", "filename": "src/test/ui/consts/static_mut_containing_mut_ref3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref3.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/static_mut_containing_mut_ref3.rs:5:31\n+  --> $DIR/static_mut_containing_mut_ref3.rs:3:31\n    |\n LL | static mut BAR: () = unsafe { FOO.0 = 99; };\n    |                               ^^^^^^^^^^ tried to modify a static's initial value from another static's initializer"}, {"sha": "da51035ab555062b2e03c26a658f14690a0d301c", "filename": "src/test/ui/error-codes/E0010-teach.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -4,5 +4,6 @@\n #![allow(warnings)]\n \n const CON : Box<i32> = box 0; //~ ERROR E0010\n+//~^ ERROR constant contains unimplemented expression type\n \n fn main() {}"}, {"sha": "77e7b5ec0e860cf50e2102db6e5d0b4a30bfee7c", "filename": "src/test/ui/error-codes/E0010-teach.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -6,6 +6,16 @@ LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n    |\n    = note: The value of statics and constants must be known at compile time, and they live for the entire lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and therefore cannot be done at compile time.\n \n-error: aborting due to previous error\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/E0010-teach.rs:6:28\n+   |\n+LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n+   |                            ^\n+   |\n+   = note: A function call isn't allowed in the const's initialization expression because the expression's value must be known at compile-time.\n+   = note: Remember: you can't use a function call inside a const's initialization expression! However, you can use it anywhere else.\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0010`.\n+Some errors occurred: E0010, E0019.\n+For more information about an error, try `rustc --explain E0010`."}, {"sha": "3398e2c28ba6b5cdcf7acb9a81cf5178b78be955", "filename": "src/test/ui/error-codes/E0010.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -2,5 +2,6 @@\n #![allow(warnings)]\n \n const CON : Box<i32> = box 0; //~ ERROR E0010\n+//~^ ERROR constant contains unimplemented expression type\n \n fn main() {}"}, {"sha": "1364693109e086bc64d6ccb8510b2e3d28f67ee5", "filename": "src/test/ui/error-codes/E0010.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -4,6 +4,13 @@ error[E0010]: allocations are not allowed in constants\n LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n    |                        ^^^^^ allocation not allowed in constants\n \n-error: aborting due to previous error\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/E0010.rs:4:28\n+   |\n+LL | const CON : Box<i32> = box 0; //~ ERROR E0010\n+   |                            ^\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0010`.\n+Some errors occurred: E0010, E0019.\n+For more information about an error, try `rustc --explain E0010`."}, {"sha": "74cefd7c0670d531b7d1d2be864438f3eda553d6", "filename": "src/test/ui/feature-gates/feature-gate-const_let.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.rs?ref=017f046c1371758bf4363afd4384bafb583b9710", "patch": "@@ -1,21 +0,0 @@\n-// Test use of const let without feature gate.\n-\n-const FOO: usize = {\n-    //~^ ERROR statements in constants are unstable\n-    //~| ERROR: let bindings in constants are unstable\n-    let x = 42;\n-    //~^ ERROR statements in constants are unstable\n-    //~| ERROR: let bindings in constants are unstable\n-    42\n-};\n-\n-static BAR: usize = {\n-    //~^ ERROR statements in statics are unstable\n-    //~| ERROR: let bindings in statics are unstable\n-    let x = 42;\n-    //~^ ERROR statements in statics are unstable\n-    //~| ERROR: let bindings in statics are unstable\n-    42\n-};\n-\n-fn main() {}"}, {"sha": "56312999a5fd8e5142fb9359758dd5409cb2e761", "filename": "src/test/ui/feature-gates/feature-gate-const_let.stderr", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/017f046c1371758bf4363afd4384bafb583b9710/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_let.stderr?ref=017f046c1371758bf4363afd4384bafb583b9710", "patch": "@@ -1,91 +0,0 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:6:13\n-   |\n-LL |     let x = 42;\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:6:13\n-   |\n-LL |     let x = 42;\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:3:1\n-   |\n-LL | / const FOO: usize = {\n-LL | |     //~^ ERROR statements in constants are unstable\n-LL | |     //~| ERROR: let bindings in constants are unstable\n-LL | |     let x = 42;\n-...  |\n-LL | |     42\n-LL | | };\n-   | |__^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:3:1\n-   |\n-LL | / const FOO: usize = {\n-LL | |     //~^ ERROR statements in constants are unstable\n-LL | |     //~| ERROR: let bindings in constants are unstable\n-LL | |     let x = 42;\n-...  |\n-LL | |     42\n-LL | | };\n-   | |__^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in statics are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:15:13\n-   |\n-LL |     let x = 42;\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:15:13\n-   |\n-LL |     let x = 42;\n-   |             ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in statics are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:12:1\n-   |\n-LL | / static BAR: usize = {\n-LL | |     //~^ ERROR statements in statics are unstable\n-LL | |     //~| ERROR: let bindings in statics are unstable\n-LL | |     let x = 42;\n-...  |\n-LL | |     42\n-LL | | };\n-   | |__^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/feature-gate-const_let.rs:12:1\n-   |\n-LL | / static BAR: usize = {\n-LL | |     //~^ ERROR statements in statics are unstable\n-LL | |     //~| ERROR: let bindings in statics are unstable\n-LL | |     let x = 42;\n-...  |\n-LL | |     42\n-LL | | };\n-   | |__^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 8 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "6b97c24a47ed24ce983d85a6b729a6de1cf5f34f", "filename": "src/test/ui/feature-gates/feature-gate-underscore_const_names.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n trait Trt {}\n struct Str {}\n "}, {"sha": "d608f3d37cf2ae7000118abe596f611aa49e8f45", "filename": "src/test/ui/feature-gates/feature-gate-underscore_const_names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: naming constants with `_` is unstable (see issue #54912)\n-  --> $DIR/feature-gate-underscore_const_names.rs:8:1\n+  --> $DIR/feature-gate-underscore_const_names.rs:6:1\n    |\n LL | / const _ : () = {\n LL | | //~^ ERROR is unstable"}, {"sha": "1920e1637d1494905bf9ebcefa5c8b3a07c2b9b8", "filename": "src/test/ui/issues/issue-18118.nll.stderr", "status": "modified", "additions": 3, "deletions": 57, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,68 +1,14 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:5:17\n-   |\n-LL |         let p = 3;\n-   |                 ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:5:17\n-   |\n-LL |         let p = 3;\n-   |                 ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:8:9\n-   |\n-LL |         &p //~ ERROR `p` does not live long enough\n-   |         ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:2:5\n-   |\n-LL | /     const z: &'static isize = {\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |         //~| ERROR statements in constants are unstable\n-LL | |         let p = 3;\n-...  |\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |     };\n-   | |______^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:2:5\n-   |\n-LL | /     const z: &'static isize = {\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |         //~| ERROR statements in constants are unstable\n-LL | |         let p = 3;\n-...  |\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |     };\n-   | |______^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0597]: `p` does not live long enough\n-  --> $DIR/issue-18118.rs:8:9\n+  --> $DIR/issue-18118.rs:4:9\n    |\n LL |         &p //~ ERROR `p` does not live long enough\n    |         ^^\n    |         |\n    |         borrowed value does not live long enough\n    |         using this value as a constant requires that `p` is borrowed for `'static`\n-LL |         //~^ ERROR let bindings in constants are unstable\n LL |     };\n    |     - `p` dropped here while still borrowed\n \n-error: aborting due to 6 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0597, E0658.\n-For more information about an error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "f58a3de281f1ae1123e7ec98c7057e050f72c947", "filename": "src/test/ui/issues/issue-18118.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-18118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-18118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,11 +1,6 @@\n pub fn main() {\n     const z: &'static isize = {\n-        //~^ ERROR let bindings in constants are unstable\n-        //~| ERROR statements in constants are unstable\n         let p = 3;\n-        //~^ ERROR let bindings in constants are unstable\n-        //~| ERROR statements in constants are unstable\n         &p //~ ERROR `p` does not live long enough\n-        //~^ ERROR let bindings in constants are unstable\n     };\n }"}, {"sha": "9b21ece341a9f2fa87b66cb7b8d39220237591ea", "filename": "src/test/ui/issues/issue-18118.stderr", "status": "modified", "additions": 3, "deletions": 57, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-18118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-18118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,67 +1,13 @@\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:5:17\n-   |\n-LL |         let p = 3;\n-   |                 ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:5:17\n-   |\n-LL |         let p = 3;\n-   |                 ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:8:9\n-   |\n-LL |         &p //~ ERROR `p` does not live long enough\n-   |         ^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: let bindings in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:2:5\n-   |\n-LL | /     const z: &'static isize = {\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |         //~| ERROR statements in constants are unstable\n-LL | |         let p = 3;\n-...  |\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |     };\n-   | |______^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-18118.rs:2:5\n-   |\n-LL | /     const z: &'static isize = {\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |         //~| ERROR statements in constants are unstable\n-LL | |         let p = 3;\n-...  |\n-LL | |         //~^ ERROR let bindings in constants are unstable\n-LL | |     };\n-   | |______^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0597]: `p` does not live long enough\n-  --> $DIR/issue-18118.rs:8:10\n+  --> $DIR/issue-18118.rs:4:10\n    |\n LL |         &p //~ ERROR `p` does not live long enough\n    |          ^ borrowed value does not live long enough\n-LL |         //~^ ERROR let bindings in constants are unstable\n LL |     };\n    |     - borrowed value only lives until here\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to 6 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0597, E0658.\n-For more information about an error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "c93c84b5fb7732d342cb1b68597cdb0091aa845e", "filename": "src/test/ui/issues/issue-32829-2.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,36 +1,30 @@\n // ignore-tidy-linelength\n \n-#![feature(const_fn)]\n-\n const bad : u32 = {\n     {\n         5;\n-        //~^ ERROR statements in constants are unstable\n         0\n     }\n };\n \n const bad_two : u32 = {\n     {\n         invalid();\n-        //~^ ERROR statements in constants are unstable\n-        //~^^ ERROR: calls in constants are limited to constant functions, tuple structs and tuple variants\n+        //~^ ERROR: calls in constants are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n };\n \n const bad_three : u32 = {\n     {\n         valid();\n-        //~^ ERROR statements in constants are unstable\n         0\n     }\n };\n \n static bad_four : u32 = {\n     {\n         5;\n-        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n@@ -39,40 +33,35 @@ static bad_five : u32 = {\n     {\n         invalid();\n         //~^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n-        //~| ERROR statements in statics are unstable\n         0\n     }\n };\n \n static bad_six : u32 = {\n     {\n         valid();\n-        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static mut bad_seven : u32 = {\n     {\n         5;\n-        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static mut bad_eight : u32 = {\n     {\n         invalid();\n-        //~^ ERROR statements in statics are unstable\n-        //~| ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n+        //~^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n };\n \n static mut bad_nine : u32 = {\n     {\n         valid();\n-        //~^ ERROR statements in statics are unstable\n         0\n     }\n };"}, {"sha": "8d7423f29ae97acc537b695bd25c0096994067b6", "filename": "src/test/ui/issues/issue-32829-2.stderr", "status": "modified", "additions": 5, "deletions": 78, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,94 +1,21 @@\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:7:9\n-   |\n-LL |         5;\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-32829-2.rs:15:9\n+  --> $DIR/issue-32829-2.rs:12:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:15:9\n-   |\n-LL |         invalid();\n-   |         ^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:24:9\n-   |\n-LL |         valid();\n-   |         ^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:32:9\n-   |\n-LL |         5;\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-32829-2.rs:40:9\n+  --> $DIR/issue-32829-2.rs:34:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:40:9\n-   |\n-LL |         invalid();\n-   |         ^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:49:9\n-   |\n-LL |         valid();\n-   |         ^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:57:9\n-   |\n-LL |         5;\n-   |         ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-32829-2.rs:65:9\n+  --> $DIR/issue-32829-2.rs:56:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:65:9\n-   |\n-LL |         invalid();\n-   |         ^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue-32829-2.rs:74:9\n-   |\n-LL |         valid();\n-   |         ^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error: aborting due to 12 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0015, E0658.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "505c030b967122758a770ba84f1d7081bc9ee04d", "filename": "src/test/ui/issues/issue-37550.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,6 +1,6 @@\n const fn x() {\n-    let t = true; //~ ERROR local variables in const fn\n-    let x = || t;\n+    let t = true;\n+    let x = || t; //~ ERROR function pointers in const fn are unstable\n }\n \n fn main() {}"}, {"sha": "d2b03416cb73cb923de830cf930bcd8dfd6a2362", "filename": "src/test/ui/issues/issue-37550.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,7 +1,7 @@\n-error: local variables in const fn are unstable\n-  --> $DIR/issue-37550.rs:2:9\n+error: function pointers in const fn are unstable\n+  --> $DIR/issue-37550.rs:3:9\n    |\n-LL |     let t = true; //~ ERROR local variables in const fn\n+LL |     let x = || t; //~ ERROR function pointers in const fn are unstable\n    |         ^\n \n error: aborting due to previous error"}, {"sha": "52ec9e42be78282a46f370d2bc2dca078ab536b0", "filename": "src/test/ui/issues/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -6,5 +6,6 @@ use std::cell::RefCell;\n static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n //~^ ERROR allocations are not allowed in statics\n //~| ERROR `std::cell::RefCell<isize>` cannot be shared between threads safely [E0277]\n+//~| ERROR static contains unimplemented expression type\n \n fn main() { }"}, {"sha": "52a99ce36b8704ced0caa0280cadd1941dafa2df", "filename": "src/test/ui/issues/issue-7364.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -4,6 +4,12 @@ error[E0010]: allocations are not allowed in statics\n LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n    |                                     ^^^^^^^^^^^^^^^^^^^ allocation not allowed in statics\n \n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/issue-7364.rs:6:41\n+   |\n+LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n+   |                                         ^^^^^^^^^^^^^^^\n+\n error[E0277]: `std::cell::RefCell<isize>` cannot be shared between threads safely\n   --> $DIR/issue-7364.rs:6:1\n    |\n@@ -15,7 +21,7 @@ LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n    = note: required because it appears within the type `std::boxed::Box<std::cell::RefCell<isize>>`\n    = note: shared static variables must have a type that implements `Sync`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0010, E0277.\n+Some errors occurred: E0010, E0019, E0277.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "84d401c9fa61df2d7b718119bc3cc11a1af5f2f6", "filename": "src/test/ui/static/static-mut-not-constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -2,5 +2,6 @@\n \n static mut a: Box<isize> = box 3;\n //~^ ERROR allocations are not allowed in statics\n+//~| ERROR static contains unimplemented expression type\n \n fn main() {}"}, {"sha": "d2c6ba6a2f85a70dc95ecfb4bd66b4c0592327c4", "filename": "src/test/ui/static/static-mut-not-constant.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -4,6 +4,13 @@ error[E0010]: allocations are not allowed in statics\n LL | static mut a: Box<isize> = box 3;\n    |                            ^^^^^ allocation not allowed in statics\n \n-error: aborting due to previous error\n+error[E0019]: static contains unimplemented expression type\n+  --> $DIR/static-mut-not-constant.rs:3:32\n+   |\n+LL | static mut a: Box<isize> = box 3;\n+   |                                ^\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0010`.\n+Some errors occurred: E0010, E0019.\n+For more information about an error, try `rustc --explain E0010`."}, {"sha": "1db022e886208f17050815bfd3f2bf65631ad186", "filename": "src/test/ui/underscore_const_names.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Funderscore_const_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Funderscore_const_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore_const_names.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,6 +1,5 @@\n // compile-pass\n \n-#![feature(const_let)]\n #![feature(underscore_const_names)]\n \n trait Trt {}"}, {"sha": "788f49f743cda3a667987939dd2d61be5f5dd9b1", "filename": "src/test/ui/unsafe/ranged_ints2_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, const_let, const_fn)]\n+#![feature(rustc_attrs)]\n \n #[rustc_layout_scalar_valid_range_start(1)]\n #[repr(transparent)]\n@@ -8,13 +8,13 @@ fn main() {\n \n const fn foo() -> NonZero<u32> {\n     let mut x = unsafe { NonZero(1) };\n-    let y = &mut x.0; //~ ERROR references in constant functions may only refer to immutable\n+    let y = &mut x.0; //~ ERROR references in const fn are unstable\n     //~^ ERROR mutation of layout constrained field is unsafe\n     unsafe { NonZero(1) }\n }\n \n const fn bar() -> NonZero<u32> {\n     let mut x = unsafe { NonZero(1) };\n-    let y = unsafe { &mut x.0 }; //~ ERROR references in constant functions may only refer to immut\n+    let y = unsafe { &mut x.0 }; //~ ERROR mutable references in const fn are unstable\n     unsafe { NonZero(1) }\n }"}, {"sha": "39a55190b17deed7328383bfe2bbe25c6a154aa3", "filename": "src/test/ui/unsafe/ranged_ints2_const.stderr", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,24 +1,23 @@\n-error[E0017]: references in constant functions may only refer to immutable values\n-  --> $DIR/ranged_ints2_const.rs:11:13\n+error: mutable references in const fn are unstable\n+  --> $DIR/ranged_ints2_const.rs:11:9\n    |\n-LL |     let y = &mut x.0; //~ ERROR references in constant functions may only refer to immutable\n-   |             ^^^^^^^^ constant functions require immutable values\n+LL |     let y = &mut x.0; //~ ERROR references in const fn are unstable\n+   |         ^\n \n-error[E0017]: references in constant functions may only refer to immutable values\n-  --> $DIR/ranged_ints2_const.rs:18:22\n+error: mutable references in const fn are unstable\n+  --> $DIR/ranged_ints2_const.rs:18:9\n    |\n-LL |     let y = unsafe { &mut x.0 }; //~ ERROR references in constant functions may only refer to immut\n-   |                      ^^^^^^^^ constant functions require immutable values\n+LL |     let y = unsafe { &mut x.0 }; //~ ERROR mutable references in const fn are unstable\n+   |         ^\n \n error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n   --> $DIR/ranged_ints2_const.rs:11:13\n    |\n-LL |     let y = &mut x.0; //~ ERROR references in constant functions may only refer to immutable\n+LL |     let y = &mut x.0; //~ ERROR references in const fn are unstable\n    |             ^^^^^^^^ mutation of layout constrained field\n    |\n    = note: mutating layout constrained fields cannot statically be checked for valid values\n \n error: aborting due to 3 previous errors\n \n-Some errors occurred: E0017, E0133.\n-For more information about an error, try `rustc --explain E0017`.\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "7b03d8eda9380ef1bf3125b7a64ac44ed5ef7035", "filename": "src/test/ui/unsafe/ranged_ints3_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, const_let, const_fn)]\n+#![feature(rustc_attrs)]\n \n use std::cell::Cell;\n "}, {"sha": "f09168c3d3f9ca48a8225cc0b165cb0d62d6fb1a", "filename": "src/test/ui/unsafe/ranged_ints4_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, const_let, const_fn)]\n+#![feature(rustc_attrs)]\n \n #[rustc_layout_scalar_valid_range_start(1)]\n #[repr(transparent)]"}, {"sha": "43c63fed8cef19efd88767d2973a012fe0215107", "filename": "src/test/ui/write-to-static-mut-in-static.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_let)]\n-\n pub static mut A: u32 = 0;\n pub static mut B: () = unsafe { A = 1; };\n //~^ ERROR could not evaluate static initializer"}, {"sha": "eba1c609d2f8355ad3efde3bb3c7f19cf83be76b", "filename": "src/test/ui/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8f46487761fe7e1d1feb301a7e45231ca2c0fe/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr?ref=bd8f46487761fe7e1d1feb301a7e45231ca2c0fe", "patch": "@@ -1,23 +1,23 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/write-to-static-mut-in-static.rs:4:33\n+  --> $DIR/write-to-static-mut-in-static.rs:2:33\n    |\n LL | pub static mut B: () = unsafe { A = 1; };\n    |                                 ^^^^^ tried to modify a static's initial value from another static's initializer\n \n error[E0391]: cycle detected when const-evaluating `C`\n-  --> $DIR/write-to-static-mut-in-static.rs:7:34\n+  --> $DIR/write-to-static-mut-in-static.rs:5:34\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    |                                  ^^^^^\n    |\n note: ...which requires const-evaluating `C`...\n-  --> $DIR/write-to-static-mut-in-static.rs:7:1\n+  --> $DIR/write-to-static-mut-in-static.rs:5:1\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating `C`, completing the cycle\n note: cycle used when const-evaluating + checking `C`\n-  --> $DIR/write-to-static-mut-in-static.rs:7:1\n+  --> $DIR/write-to-static-mut-in-static.rs:5:1\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}