{"sha": "c417c77b681f10cc7585507bd874e9fd2cea63b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MTdjNzdiNjgxZjEwY2M3NTg1NTA3YmQ4NzRlOWZkMmNlYTYzYjg=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-14T06:12:09Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-14T06:12:09Z"}, "message": "Merge #1267\n\n1267: Macro expand to r=edwin0cheng a=matklad\n\ncloses #1264 \r\n\r\nThe core problem this PR is trying to wrangle is that macros can expand to different stuffs, depending on context. \r\n\r\nThat is, `foo!()` on the top-level expands to a list of items, but the same `foo!()` in expression position expands to expression.\r\n\r\nOur current `hir_parse(HirFileId) -> TreeArc<SourceFile>` does not really support this. \r\n\r\nSo, the plan is to change `hir_parse` to untyped inreface (`TreeArc<Syntaxnode>`), and add `expands_to` field to `MacroCallLoc`, such that the *target* of macro expansion is selected by the calling code and is part of macro id. \r\n\r\nThis unfortunately looses some type-safety :( \r\n\r\n\r\nMoreover, this doesn't really fix #1264 by itself, because we die due to some other error inside macro expansion: expander fails to produce a tree with a single root, which trips assert inside rowan.\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d05cf30716a7791cfc0d8fcfe522a7132b5fff06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d05cf30716a7791cfc0d8fcfe522a7132b5fff06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c417c77b681f10cc7585507bd874e9fd2cea63b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c417c77b681f10cc7585507bd874e9fd2cea63b8", "html_url": "https://github.com/rust-lang/rust/commit/c417c77b681f10cc7585507bd874e9fd2cea63b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c417c77b681f10cc7585507bd874e9fd2cea63b8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "ee0ab7c00b4b8c5375c14b44e3d7288ebf0d732d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0ab7c00b4b8c5375c14b44e3d7288ebf0d732d", "html_url": "https://github.com/rust-lang/rust/commit/ee0ab7c00b4b8c5375c14b44e3d7288ebf0d732d"}, {"sha": "caa8663c08e1724af2abcde11fa937937d76aa14", "url": "https://api.github.com/repos/rust-lang/rust/commits/caa8663c08e1724af2abcde11fa937937d76aa14", "html_url": "https://github.com/rust-lang/rust/commit/caa8663c08e1724af2abcde11fa937937d76aa14"}], "stats": {"total": 111, "additions": 68, "deletions": 43}, "files": [{"sha": "8e827d4f508640720e8a0e2038a56311a0b5d437", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=c417c77b681f10cc7585507bd874e9fd2cea63b8", "patch": "@@ -1,6 +1,6 @@\n use std::sync::{Arc, Mutex};\n \n-use ra_syntax::{SyntaxNode, TreeArc, SourceFile, SmolStr, ast};\n+use ra_syntax::{SyntaxNode, TreeArc, SmolStr, ast};\n use ra_db::{SourceDatabase, salsa};\n \n use crate::{\n@@ -54,8 +54,8 @@ pub trait DefDatabase: SourceDatabase {\n     #[salsa::invoke(crate::ids::macro_expand_query)]\n     fn macro_expand(&self, macro_call: ids::MacroCallId) -> Result<Arc<tt::Subtree>, String>;\n \n-    #[salsa::invoke(crate::ids::HirFileId::hir_parse_query)]\n-    fn hir_parse(&self, file_id: HirFileId) -> TreeArc<SourceFile>;\n+    #[salsa::invoke(crate::ids::HirFileId::parse_or_expand_query)]\n+    fn parse_or_expand(&self, file_id: HirFileId) -> Option<TreeArc<SyntaxNode>>;\n \n     #[salsa::invoke(crate::adt::StructData::struct_data_query)]\n     fn struct_data(&self, s: Struct) -> Arc<StructData>;"}, {"sha": "4b7b2dbee7fa2c7b1ce2e108342608d86f8e4e78", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=c417c77b681f10cc7585507bd874e9fd2cea63b8", "patch": "@@ -1,6 +1,6 @@\n use std::{fmt, any::Any};\n \n-use ra_syntax::{SyntaxNodePtr, TreeArc, AstPtr, TextRange, ast, SyntaxNode, AstNode};\n+use ra_syntax::{SyntaxNodePtr, TreeArc, AstPtr, TextRange, ast, SyntaxNode};\n use relative_path::RelativePathBuf;\n \n use crate::{HirFileId, HirDatabase, Name};\n@@ -29,8 +29,8 @@ pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n \n impl dyn Diagnostic {\n     pub fn syntax_node(&self, db: &impl HirDatabase) -> TreeArc<SyntaxNode> {\n-        let source_file = db.hir_parse(self.file());\n-        self.syntax_node_ptr().to_node(source_file.syntax()).to_owned()\n+        let node = db.parse_or_expand(self.file()).unwrap();\n+        self.syntax_node_ptr().to_node(&*node).to_owned()\n     }\n     pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {\n         self.as_any().downcast_ref()"}, {"sha": "9618236e5197a7ce81d79dea3f5c364b4915da8a", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=c417c77b681f10cc7585507bd874e9fd2cea63b8", "patch": "@@ -6,11 +6,11 @@ use rustc_hash::FxHashMap;\n use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use ra_syntax::{\n     SyntaxNodePtr, AstPtr, AstNode,\n-    ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralKind,ArrayExprKind, TypeAscriptionOwner}\n+    ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralKind,ArrayExprKind, TypeAscriptionOwner},\n };\n \n use crate::{\n-    Path, Name, HirDatabase, Resolver,DefWithBody, Either, HirFileId, MacroCallLoc,\n+    Path, Name, HirDatabase, Resolver,DefWithBody, Either, HirFileId, MacroCallLoc, MacroFileKind,\n     name::AsName,\n     type_ref::{Mutability, TypeRef},\n };\n@@ -830,11 +830,11 @@ where\n \n                 if let Some(def) = self.resolver.resolve_macro_call(path) {\n                     let call_id = MacroCallLoc { def, ast_id }.id(self.db);\n-                    if let Some(tt) = self.db.macro_expand(call_id).ok() {\n-                        if let Some(expr) = mbe::token_tree_to_expr(&tt).ok() {\n+                    let file_id = call_id.as_file(MacroFileKind::Expr);\n+                    if let Some(node) = self.db.parse_or_expand(file_id) {\n+                        if let Some(expr) = ast::Expr::cast(&*node) {\n                             log::debug!(\"macro expansion {}\", expr.syntax().debug_dump());\n-                            let old_file_id =\n-                                std::mem::replace(&mut self.current_file_id, call_id.into());\n+                            let old_file_id = std::mem::replace(&mut self.current_file_id, file_id);\n                             let id = self.collect_expr(&expr);\n                             self.current_file_id = old_file_id;\n                             return id;"}, {"sha": "f901a743224b52ba0e56915f7024b4f11e1ebfd9", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 38, "deletions": 21, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=c417c77b681f10cc7585507bd874e9fd2cea63b8", "patch": "@@ -4,7 +4,7 @@ use std::{\n };\n \n use ra_db::{FileId, salsa};\n-use ra_syntax::{TreeArc, SourceFile, AstNode, ast};\n+use ra_syntax::{TreeArc, AstNode, ast, SyntaxNode};\n use mbe::MacroRules;\n \n use crate::{\n@@ -39,8 +39,8 @@ impl HirFileId {\n     pub fn original_file(self, db: &impl DefDatabase) -> FileId {\n         match self.0 {\n             HirFileIdRepr::File(file_id) => file_id,\n-            HirFileIdRepr::Macro(macro_call_id) => {\n-                let loc = macro_call_id.loc(db);\n+            HirFileIdRepr::Macro(macro_file) => {\n+                let loc = macro_file.macro_call_id.loc(db);\n                 loc.ast_id.file_id().original_file(db)\n             }\n         }\n@@ -56,16 +56,17 @@ impl HirFileId {\n         }\n     }\n \n-    pub(crate) fn hir_parse_query(\n+    pub(crate) fn parse_or_expand_query(\n         db: &impl DefDatabase,\n         file_id: HirFileId,\n-    ) -> TreeArc<SourceFile> {\n+    ) -> Option<TreeArc<SyntaxNode>> {\n         match file_id.0 {\n-            HirFileIdRepr::File(file_id) => db.parse(file_id),\n-            HirFileIdRepr::Macro(macro_call_id) => {\n-                match db.macro_expand(macro_call_id) {\n-                    Ok(tt) => mbe::token_tree_to_ast_item_list(&tt),\n-                    Err(err) => {\n+            HirFileIdRepr::File(file_id) => Some(db.parse(file_id).syntax().to_owned()),\n+            HirFileIdRepr::Macro(macro_file) => {\n+                let macro_call_id = macro_file.macro_call_id;\n+                let tt = db\n+                    .macro_expand(macro_call_id)\n+                    .map_err(|err| {\n                         // Note:\n                         // The final goal we would like to make all parse_macro success,\n                         // such that the following log will not call anyway.\n@@ -74,9 +75,14 @@ impl HirFileId {\n                             err,\n                             macro_call_id.debug_dump(db)\n                         );\n-\n-                        // returning an empty string looks fishy...\n-                        SourceFile::parse(\"\")\n+                    })\n+                    .ok()?;\n+                match macro_file.macro_file_kind {\n+                    MacroFileKind::Items => {\n+                        Some(mbe::token_tree_to_ast_item_list(&tt).syntax().to_owned())\n+                    }\n+                    MacroFileKind::Expr => {\n+                        mbe::token_tree_to_expr(&tt).ok().map(|it| it.syntax().to_owned())\n                     }\n                 }\n             }\n@@ -87,7 +93,19 @@ impl HirFileId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n enum HirFileIdRepr {\n     File(FileId),\n-    Macro(MacroCallId),\n+    Macro(MacroFile),\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+struct MacroFile {\n+    macro_call_id: MacroCallId,\n+    macro_file_kind: MacroFileKind,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub(crate) enum MacroFileKind {\n+    Items,\n+    Expr,\n }\n \n impl From<FileId> for HirFileId {\n@@ -96,12 +114,6 @@ impl From<FileId> for HirFileId {\n     }\n }\n \n-impl From<MacroCallId> for HirFileId {\n-    fn from(macro_call_id: MacroCallId) -> HirFileId {\n-        HirFileId(HirFileIdRepr::Macro(macro_call_id))\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroDefId(pub(crate) AstId<ast::MacroCall>);\n \n@@ -173,6 +185,11 @@ impl MacroCallId {\n     pub(crate) fn loc(self, db: &impl DefDatabase) -> MacroCallLoc {\n         db.lookup_intern_macro(self)\n     }\n+\n+    pub(crate) fn as_file(self, kind: MacroFileKind) -> HirFileId {\n+        let macro_file = MacroFile { macro_call_id: self, macro_file_kind: kind };\n+        HirFileId(HirFileIdRepr::Macro(macro_file))\n+    }\n }\n \n impl MacroCallLoc {\n@@ -342,7 +359,7 @@ impl MacroCallId {\n         let syntax_str = node.syntax().text().chunks().collect::<Vec<_>>().join(\" \");\n \n         // dump the file name\n-        let file_id: HirFileId = self.clone().into();\n+        let file_id: HirFileId = self.loc(db).ast_id.file_id();\n         let original = file_id.original_file(db);\n         let macro_rules = db.macro_def(loc.def);\n "}, {"sha": "0c6d7c2b760ddc6d01a0d376bbc28fbc1f9178cd", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=c417c77b681f10cc7585507bd874e9fd2cea63b8", "patch": "@@ -53,6 +53,7 @@ use crate::{\n     name::{AsName, KnownName},\n     source_id::{FileAstId, AstId},\n     resolve::Resolver,\n+    ids::MacroFileKind,\n };\n \n pub use self::{"}, {"sha": "c615d80c3609d5d79a4c10866ce119a40e3eb1f1", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=c417c77b681f10cc7585507bd874e9fd2cea63b8", "patch": "@@ -15,7 +15,7 @@ use crate::{\n         diagnostics::DefDiagnostic,\n         raw,\n     },\n-    ids::{AstItemDef, LocationCtx, MacroCallLoc, MacroCallId, MacroDefId},\n+    ids::{AstItemDef, LocationCtx, MacroCallLoc, MacroCallId, MacroDefId, MacroFileKind},\n     AstId,\n };\n \n@@ -371,7 +371,7 @@ where\n         self.macro_stack_monitor.increase(macro_def_id);\n \n         if !self.macro_stack_monitor.is_poison(macro_def_id) {\n-            let file_id: HirFileId = macro_call_id.into();\n+            let file_id: HirFileId = macro_call_id.as_file(MacroFileKind::Items);\n             let raw_items = self.db.raw_items(file_id);\n             ModCollector { def_collector: &mut *self, file_id, module_id, raw_items: &raw_items }\n                 .collect(raw_items.items());"}, {"sha": "bd32b264be19f40196331ca1e2f5ae6ac0e3299e", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=c417c77b681f10cc7585507bd874e9fd2cea63b8", "patch": "@@ -75,8 +75,11 @@ impl RawItems {\n             source_ast_id_map: db.ast_id_map(file_id.into()),\n             source_map: ImportSourceMap::default(),\n         };\n-        let source_file = db.hir_parse(file_id);\n-        collector.process_module(None, &*source_file);\n+        if let Some(node) = db.parse_or_expand(file_id) {\n+            if let Some(source_file) = ast::SourceFile::cast(&node) {\n+                collector.process_module(None, &*source_file);\n+            }\n+        }\n         (Arc::new(collector.raw_items), Arc::new(collector.source_map))\n     }\n "}, {"sha": "13f548eaf1c2bc0e635345a2db74b588e183a0b1", "filename": "crates/ra_hir/src/source_id.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_id.rs?ref=c417c77b681f10cc7585507bd874e9fd2cea63b8", "patch": "@@ -81,24 +81,28 @@ pub struct ErasedFileAstId(RawId);\n impl_arena_id!(ErasedFileAstId);\n \n /// Maps items' `SyntaxNode`s to `ErasedFileAstId`s and back.\n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq, Default)]\n pub struct AstIdMap {\n     arena: Arena<ErasedFileAstId, SyntaxNodePtr>,\n }\n \n impl AstIdMap {\n     pub(crate) fn ast_id_map_query(db: &impl DefDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n-        let source_file = db.hir_parse(file_id);\n-        Arc::new(AstIdMap::from_source(source_file.syntax()))\n+        let map = if let Some(node) = db.parse_or_expand(file_id) {\n+            AstIdMap::from_source(&*node)\n+        } else {\n+            AstIdMap::default()\n+        };\n+        Arc::new(map)\n     }\n \n     pub(crate) fn file_item_query(\n         db: &impl DefDatabase,\n         file_id: HirFileId,\n         ast_id: ErasedFileAstId,\n     ) -> TreeArc<SyntaxNode> {\n-        let source_file = db.hir_parse(file_id);\n-        db.ast_id_map(file_id).arena[ast_id].to_node(source_file.syntax()).to_owned()\n+        let node = db.parse_or_expand(file_id).unwrap();\n+        db.ast_id_map(file_id).arena[ast_id].to_node(&*node).to_owned()\n     }\n \n     pub(crate) fn ast_id<N: AstNode>(&self, item: &N) -> FileAstId<N> {"}, {"sha": "2434f428f6bed12d98746b770ae4a9732c04906d", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c417c77b681f10cc7585507bd874e9fd2cea63b8/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=c417c77b681f10cc7585507bd874e9fd2cea63b8", "patch": "@@ -222,7 +222,7 @@ impl RootDatabase {\n \n         self.query(ra_db::ParseQuery).sweep(sweep);\n \n-        self.query(hir::db::HirParseQuery).sweep(sweep);\n+        self.query(hir::db::ParseOrExpandQuery).sweep(sweep);\n         self.query(hir::db::AstIdMapQuery).sweep(sweep);\n         self.query(hir::db::AstIdToNodeQuery).sweep(sweep);\n "}]}