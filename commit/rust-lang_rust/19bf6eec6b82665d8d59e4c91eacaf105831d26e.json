{"sha": "19bf6eec6b82665d8d59e4c91eacaf105831d26e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YmY2ZWVjNmI4MjY2NWQ4ZDU5ZTRjOTFlYWNhZjEwNTgzMWQyNmU=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T11:32:00Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T11:32:00Z"}, "message": "Arena allocate and cache type representations.", "tree": {"sha": "b06cc198d2b4e27462a3444365e429aa07b4dfe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b06cc198d2b4e27462a3444365e429aa07b4dfe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19bf6eec6b82665d8d59e4c91eacaf105831d26e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19bf6eec6b82665d8d59e4c91eacaf105831d26e", "html_url": "https://github.com/rust-lang/rust/commit/19bf6eec6b82665d8d59e4c91eacaf105831d26e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19bf6eec6b82665d8d59e4c91eacaf105831d26e/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "432619ea5eda876a510c39699a362f87a42b38b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/432619ea5eda876a510c39699a362f87a42b38b5", "html_url": "https://github.com/rust-lang/rust/commit/432619ea5eda876a510c39699a362f87a42b38b5"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "f9cc4e3aea86deefead963eb4690b5b5d036408a", "filename": "src/interpreter.rs", "status": "modified", "additions": 40, "deletions": 14, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/19bf6eec6b82665d8d59e4c91eacaf105831d26e/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19bf6eec6b82665d8d59e4c91eacaf105831d26e/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=19bf6eec6b82665d8d59e4c91eacaf105831d26e", "patch": "@@ -1,3 +1,4 @@\n+use arena::TypedArena;\n use rustc::middle::const_eval;\n use rustc::middle::def_id::DefId;\n use rustc::middle::subst::{self, Subst, Substs};\n@@ -6,6 +7,7 @@ use rustc::middle::ty::{self, TyCtxt};\n use rustc::mir::mir_map::MirMap;\n use rustc::mir::repr as mir;\n use rustc::util::nodemap::DefIdMap;\n+use rustc_data_structures::fnv::FnvHashMap;\n use std::cell::RefCell;\n use std::iter;\n use std::ops::Deref;\n@@ -18,7 +20,7 @@ use primval;\n \n const TRACE_EXECUTION: bool = true;\n \n-struct Interpreter<'a, 'tcx: 'a> {\n+struct Interpreter<'a, 'tcx: 'a, 'arena> {\n     /// The results of the type checker, from rustc.\n     tcx: &'a TyCtxt<'tcx>,\n \n@@ -28,6 +30,12 @@ struct Interpreter<'a, 'tcx: 'a> {\n     /// A local cache from DefIds to Mir for non-crate-local items.\n     mir_cache: RefCell<DefIdMap<Rc<mir::Mir<'tcx>>>>,\n \n+    /// An arena allocator for type representations.\n+    repr_arena: &'arena TypedArena<Repr>,\n+\n+    /// A cache for in-memory representations of types.\n+    repr_cache: RefCell<FnvHashMap<ty::Ty<'tcx>, &'arena Repr>>,\n+\n     /// The virtual memory system.\n     memory: Memory,\n \n@@ -81,12 +89,16 @@ enum TerminatorTarget {\n     Return,\n }\n \n-impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n-    fn new(tcx: &'a TyCtxt<'tcx>, mir_map: &'a MirMap<'tcx>) -> Self {\n+impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n+    fn new(tcx: &'a TyCtxt<'tcx>, mir_map: &'a MirMap<'tcx>, repr_arena: &'arena TypedArena<Repr>)\n+        -> Self\n+    {\n         Interpreter {\n             tcx: tcx,\n             mir_map: mir_map,\n             mir_cache: RefCell::new(DefIdMap()),\n+            repr_arena: repr_arena,\n+            repr_cache: RefCell::new(FnvHashMap()),\n             memory: Memory::new(),\n             stack: Vec::new(),\n             substs_stack: Vec::new(),\n@@ -211,7 +223,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             Switch { ref discr, ref targets, .. } => {\n                 let adt_ptr = try!(self.eval_lvalue(discr));\n                 let adt_repr = self.lvalue_repr(discr);\n-                let discr_size = match adt_repr {\n+                let discr_size = match *adt_repr {\n                     Repr::Aggregate { discr_size, .. } => discr_size,\n                     _ => panic!(\"attmpted to switch on non-aggregate type\"),\n                 };\n@@ -361,7 +373,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                     Adt(_, variant_idx, _) =>\n                         self.assign_to_aggregate(dest, &dest_repr, variant_idx, operands),\n \n-                    Vec => match dest_repr {\n+                    Vec => match *dest_repr {\n                         Repr::Array { elem_size, length } => {\n                             assert_eq!(length, operands.len());\n                             for (i, operand) in operands.iter().enumerate() {\n@@ -449,7 +461,9 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         self.eval_operand_and_repr(op).map(|(p, _)| p)\n     }\n \n-    fn eval_operand_and_repr(&mut self, op: &mir::Operand<'tcx>) -> EvalResult<(Pointer, Repr)> {\n+    fn eval_operand_and_repr(&mut self, op: &mir::Operand<'tcx>)\n+        -> EvalResult<(Pointer, &'arena Repr)>\n+    {\n         use rustc::mir::repr::Operand::*;\n         match *op {\n             Consume(ref lvalue) => Ok((try!(self.eval_lvalue(lvalue)), self.lvalue_repr(lvalue))),\n@@ -466,14 +480,15 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         }\n     }\n \n-    fn lvalue_repr(&self, lvalue: &mir::Lvalue<'tcx>) -> Repr {\n+    // TODO(tsion): Replace this inefficient hack with a wrapper like LvalueTy (e.g. LvalueRepr).\n+    fn lvalue_repr(&self, lvalue: &mir::Lvalue<'tcx>) -> &'arena Repr {\n         use rustc::mir::tcx::LvalueTy;\n         match self.current_frame().mir.lvalue_ty(self.tcx, lvalue) {\n             LvalueTy::Ty { ty } => self.ty_to_repr(ty),\n             LvalueTy::Downcast { ref adt_def, substs, variant_index } => {\n                 let field_tys = adt_def.variants[variant_index].fields.iter()\n                     .map(|f| f.ty(self.tcx, substs));\n-                self.make_aggregate_repr(iter::once(field_tys))\n+                self.repr_arena.alloc(self.make_aggregate_repr(iter::once(field_tys)))\n             }\n         }\n     }\n@@ -494,15 +509,15 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 let base_repr = self.lvalue_repr(&proj.base);\n                 use rustc::mir::repr::ProjectionElem::*;\n                 match proj.elem {\n-                    Field(field, _) => match base_repr {\n+                    Field(field, _) => match *base_repr {\n                         Repr::Aggregate { discr_size: 0, ref variants, .. } => {\n                             let fields = &variants[0];\n                             base_ptr.offset(fields[field.index()].offset as isize)\n                         }\n                         _ => panic!(\"field access on non-product type: {:?}\", base_repr),\n                     },\n \n-                    Downcast(..) => match base_repr {\n+                    Downcast(..) => match *base_repr {\n                         Repr::Aggregate { discr_size, .. } => base_ptr.offset(discr_size as isize),\n                         _ => panic!(\"variant downcast on non-aggregate type: {:?}\", base_repr),\n                     },\n@@ -583,9 +598,15 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n     }\n \n     // TODO(tsion): Cache these outputs.\n-    fn ty_to_repr(&self, ty: ty::Ty<'tcx>) -> Repr {\n+    fn ty_to_repr(&self, ty: ty::Ty<'tcx>) -> &'arena Repr {\n+        let ty = ty.subst(self.tcx, self.current_substs());\n+\n+        if let Some(repr) =  self.repr_cache.borrow().get(ty) {\n+            return repr;\n+        }\n+\n         use syntax::ast::{IntTy, UintTy};\n-        match ty.subst(self.tcx, self.current_substs()).sty {\n+        let repr = match ty.sty {\n             ty::TyBool => Repr::Primitive { size: 1 },\n             ty::TyInt(IntTy::Is)  => Repr::isize(),\n             ty::TyInt(IntTy::I8)  => Repr::Primitive { size: 1 },\n@@ -625,7 +646,11 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             }\n \n             ref t => panic!(\"can't convert type to repr: {:?}\", t),\n-        }\n+        };\n+\n+        let repr_ref = self.repr_arena.alloc(repr);\n+        self.repr_cache.borrow_mut().insert(ty, repr_ref);\n+        repr_ref\n     }\n \n     fn current_frame(&self) -> &Frame<'a, 'tcx> {\n@@ -777,7 +802,8 @@ pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>)\n \n                 println!(\"Interpreting: {}\", item.name);\n \n-                let mut miri = Interpreter::new(tcx, mir_map);\n+                let repr_arena = TypedArena::new();\n+                let mut miri = Interpreter::new(tcx, mir_map, &repr_arena);\n                 let return_ptr = match mir.return_ty {\n                     ty::FnConverging(ty) => {\n                         let size = miri.ty_to_repr(ty).size();"}, {"sha": "8646db3c222fb0a33506accc00f10705254a707d", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19bf6eec6b82665d8d59e4c91eacaf105831d26e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19bf6eec6b82665d8d59e4c91eacaf105831d26e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=19bf6eec6b82665d8d59e4c91eacaf105831d26e", "patch": "@@ -1,10 +1,15 @@\n #![feature(btree_range, collections_bound, rustc_private)]\n \n-extern crate byteorder;\n+// From rustc.\n+extern crate arena;\n extern crate rustc;\n+extern crate rustc_data_structures;\n extern crate rustc_mir;\n extern crate syntax;\n \n+// From crates.io.\n+extern crate byteorder;\n+\n mod error;\n pub mod interpreter;\n mod memory;"}]}