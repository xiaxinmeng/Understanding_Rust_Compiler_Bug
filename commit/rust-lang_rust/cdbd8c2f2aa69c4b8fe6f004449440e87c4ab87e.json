{"sha": "cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYmQ4YzJmMmFhNjljNGI4ZmU2ZjAwNDQ0OTQ0MGU4N2M0YWI4N2U=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-02-23T00:18:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-02-26T17:24:00Z"}, "message": "Support flag `-Z ui-testing` for tweaking diagnostic output for UI tests", "tree": {"sha": "3cb1d034cf3a10a3ff41ef80013322ee7358dbf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb1d034cf3a10a3ff41ef80013322ee7358dbf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e", "html_url": "https://github.com/rust-lang/rust/commit/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bedbad61195d2eae69b43eca49c6d3e2aee8f208", "url": "https://api.github.com/repos/rust-lang/rust/commits/bedbad61195d2eae69b43eca49c6d3e2aee8f208", "html_url": "https://github.com/rust-lang/rust/commit/bedbad61195d2eae69b43eca49c6d3e2aee8f208"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "919badfa4aa5efbe0bc9f72a9ec38c79f20a42a7", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e", "patch": "@@ -1322,6 +1322,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n          epoch). Crates compiled with different epochs can be linked together.\"),\n     run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n           \"run `dsymutil` and delete intermediate object files\"),\n+    ui_testing: bool = (false, parse_bool, [UNTRACKED],\n+          \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "ed89bf0d806a9c0a582562d4d26b18589bf8ffca", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e", "patch": "@@ -919,11 +919,13 @@ pub fn build_session_with_codemap(sopts: config::Options,\n         }\n         (config::ErrorOutputType::Json(pretty), None) => {\n             Box::new(JsonEmitter::stderr(Some(registry), codemap.clone(),\n-                     pretty, sopts.debugging_opts.approximate_suggestions))\n+                     pretty, sopts.debugging_opts.approximate_suggestions)\n+                     .ui_testing(sopts.debugging_opts.ui_testing))\n         }\n         (config::ErrorOutputType::Json(pretty), Some(dst)) => {\n             Box::new(JsonEmitter::new(dst, Some(registry), codemap.clone(),\n-                     pretty, sopts.debugging_opts.approximate_suggestions))\n+                     pretty, sopts.debugging_opts.approximate_suggestions)\n+                     .ui_testing(sopts.debugging_opts.ui_testing))\n         }\n         (config::ErrorOutputType::Short(color_config), None) => {\n             Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()), true, false))"}, {"sha": "31c1ddca794d1052ada348c406d1b754ebc90cde", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e", "patch": "@@ -25,6 +25,8 @@ use std::collections::{HashMap, HashSet};\n use std::cmp::min;\n use unicode_width;\n \n+const ANONYMIZED_LINE_NUM: &str = \"LL\";\n+\n /// Emitter trait for emitting errors.\n pub trait Emitter {\n     /// Emit a structured diagnostic.\n@@ -108,6 +110,7 @@ pub struct EmitterWriter {\n     short_message: bool,\n     teach: bool,\n     error_codes: HashSet<String>,\n+    ui_testing: bool,\n }\n \n struct FileWithAnnotatedLines {\n@@ -157,6 +160,7 @@ impl EmitterWriter {\n                 short_message,\n                 teach,\n                 error_codes: HashSet::new(),\n+                ui_testing: false,\n             }\n         } else {\n             EmitterWriter {\n@@ -165,6 +169,7 @@ impl EmitterWriter {\n                 short_message,\n                 teach,\n                 error_codes: HashSet::new(),\n+                ui_testing: false,\n             }\n         }\n     }\n@@ -180,9 +185,14 @@ impl EmitterWriter {\n             short_message,\n             teach,\n             error_codes: HashSet::new(),\n+            ui_testing: false,\n         }\n     }\n \n+    pub fn ui_testing(self, ui_testing: bool) -> Self {\n+        Self { ui_testing, ..self }\n+    }\n+\n     fn preprocess_annotations(&mut self, msp: &MultiSpan) -> Vec<FileWithAnnotatedLines> {\n         fn add_annotation_to_file(file_vec: &mut Vec<FileWithAnnotatedLines>,\n                                   file: Rc<FileMap>,\n@@ -334,9 +344,14 @@ impl EmitterWriter {\n \n         // First create the source line we will highlight.\n         buffer.puts(line_offset, code_offset, &source_string, Style::Quotation);\n+        let line_index = if self.ui_testing {\n+            ANONYMIZED_LINE_NUM.to_string()\n+        } else {\n+            line.line_index.to_string()\n+        };\n         buffer.puts(line_offset,\n                     0,\n-                    &(line.line_index.to_string()),\n+                    &line_index,\n                     Style::LineNumber);\n \n         draw_col_separator(buffer, line_offset, width_offset - 2);\n@@ -1288,8 +1303,11 @@ impl EmitterWriter {\n                              span: &MultiSpan,\n                              children: &Vec<SubDiagnostic>,\n                              suggestions: &[CodeSuggestion]) {\n-        let max_line_num = self.get_max_line_num(span, children);\n-        let max_line_num_len = max_line_num.to_string().len();\n+        let max_line_num_len = if self.ui_testing {\n+            ANONYMIZED_LINE_NUM.len()\n+        } else {\n+            self.get_max_line_num(span, children).to_string().len()\n+        };\n \n         match self.emit_message_default(span,\n                                         message,"}, {"sha": "57f07ff33f5ca9d8266c38ff4d992d5a9223d9f4", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e", "patch": "@@ -40,6 +40,7 @@ pub struct JsonEmitter {\n     pretty: bool,\n     /// Whether \"approximate suggestions\" are enabled in the config\n     approximate_suggestions: bool,\n+    ui_testing: bool,\n }\n \n impl JsonEmitter {\n@@ -53,6 +54,7 @@ impl JsonEmitter {\n             cm: code_map,\n             pretty,\n             approximate_suggestions,\n+            ui_testing: false,\n         }\n     }\n \n@@ -73,8 +75,13 @@ impl JsonEmitter {\n             cm: code_map,\n             pretty,\n             approximate_suggestions,\n+            ui_testing: false,\n         }\n     }\n+\n+    pub fn ui_testing(self, ui_testing: bool) -> Self {\n+        Self { ui_testing, ..self }\n+    }\n }\n \n impl Emitter for JsonEmitter {\n@@ -199,7 +206,8 @@ impl Diagnostic {\n         }\n         let buf = BufWriter::default();\n         let output = buf.clone();\n-        EmitterWriter::new(Box::new(buf), Some(je.cm.clone()), false, false).emit(db);\n+        EmitterWriter::new(Box::new(buf), Some(je.cm.clone()), false, false)\n+            .ui_testing(je.ui_testing).emit(db);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n         let output = String::from_utf8(output).unwrap();\n "}, {"sha": "3d751de3dbea3645b22f67d500fd6774c95b2e55", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=cdbd8c2f2aa69c4b8fe6f004449440e87c4ab87e", "patch": "@@ -1627,15 +1627,12 @@ impl<'test> TestCx<'test> {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n                 }\n             }\n-            Ui => if !self.props\n-                .compile_flags\n-                .iter()\n-                .any(|s| s.starts_with(\"--error-format\"))\n-            {\n+            Ui => {\n                 // In case no \"--error-format\" has been given in the test, we'll compile\n                 // a first time to get the compiler's output then compile with\n                 // \"--error-format json\" to check if all expected errors are actually there\n                 // and that no new one appeared.\n+                rustc.arg(\"-Zui-testing\");\n             }\n             MirOpt => {\n                 rustc.args(&["}]}