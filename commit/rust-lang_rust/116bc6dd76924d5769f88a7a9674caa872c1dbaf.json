{"sha": "116bc6dd76924d5769f88a7a9674caa872c1dbaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNmJjNmRkNzY5MjRkNTc2OWY4OGE3YTk2NzRjYWE4NzJjMWRiYWY=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-05-13T14:20:51Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-05-14T13:03:30Z"}, "message": "Check for inline assembly in THIR unsafeck", "tree": {"sha": "84477d03303990ebfd97465064a27ed43431ec62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84477d03303990ebfd97465064a27ed43431ec62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/116bc6dd76924d5769f88a7a9674caa872c1dbaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/116bc6dd76924d5769f88a7a9674caa872c1dbaf", "html_url": "https://github.com/rust-lang/rust/commit/116bc6dd76924d5769f88a7a9674caa872c1dbaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/116bc6dd76924d5769f88a7a9674caa872c1dbaf/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a4d14c7edba21bba14df00b9e6e4a111dfc6f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a4d14c7edba21bba14df00b9e6e4a111dfc6f2", "html_url": "https://github.com/rust-lang/rust/commit/36a4d14c7edba21bba14df00b9e6e4a111dfc6f2"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "83288fa541e44f8777f575355d8a3cf79aec60fb", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/116bc6dd76924d5769f88a7a9674caa872c1dbaf/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116bc6dd76924d5769f88a7a9674caa872c1dbaf/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=116bc6dd76924d5769f88a7a9674caa872c1dbaf", "patch": "@@ -153,6 +153,9 @@ impl<'thir, 'tcx> Visitor<'thir, 'tcx> for UnsafetyVisitor<'tcx> {\n                     self.requires_unsafe(expr.span, CallToUnsafeFunction);\n                 }\n             }\n+            ExprKind::InlineAsm { .. } | ExprKind::LlvmInlineAsm { .. } => {\n+                self.requires_unsafe(expr.span, UseOfInlineAssembly);\n+            }\n             _ => {}\n         }\n \n@@ -194,7 +197,6 @@ impl BodyUnsafety {\n #[derive(Clone, Copy, PartialEq)]\n enum UnsafeOpKind {\n     CallToUnsafeFunction,\n-    #[allow(dead_code)] // FIXME\n     UseOfInlineAssembly,\n     #[allow(dead_code)] // FIXME\n     InitializingTypeWith,"}, {"sha": "daacd234eb487f8a31282bffb987957b2765576f", "filename": "src/test/ui/unsafe/inline_asm.mir.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/116bc6dd76924d5769f88a7a9674caa872c1dbaf/src%2Ftest%2Fui%2Funsafe%2Finline_asm.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/116bc6dd76924d5769f88a7a9674caa872c1dbaf/src%2Ftest%2Fui%2Funsafe%2Finline_asm.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Finline_asm.mir.stderr?ref=116bc6dd76924d5769f88a7a9674caa872c1dbaf", "patch": "@@ -0,0 +1,20 @@\n+error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n+  --> $DIR/inline_asm.rs:8:5\n+   |\n+LL |     asm!(\"nop\");\n+   |     ^^^^^^^^^^^^ use of inline assembly\n+   |\n+   = note: inline assembly is entirely unchecked and can cause undefined behavior\n+\n+error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n+  --> $DIR/inline_asm.rs:9:5\n+   |\n+LL |     llvm_asm!(\"nop\");\n+   |     ^^^^^^^^^^^^^^^^^ use of inline assembly\n+   |\n+   = note: inline assembly is entirely unchecked and can cause undefined behavior\n+   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "d002d0e701a6f1d75b88702458f192dbdb629b14", "filename": "src/test/ui/unsafe/inline_asm.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/116bc6dd76924d5769f88a7a9674caa872c1dbaf/src%2Ftest%2Fui%2Funsafe%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116bc6dd76924d5769f88a7a9674caa872c1dbaf/src%2Ftest%2Fui%2Funsafe%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Finline_asm.rs?ref=116bc6dd76924d5769f88a7a9674caa872c1dbaf", "patch": "@@ -0,0 +1,10 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n+#![feature(llvm_asm)]\n+#![feature(asm)]\n+\n+fn main() {\n+    asm!(\"nop\"); //~ ERROR use of inline assembly is unsafe and requires unsafe function or block\n+    llvm_asm!(\"nop\"); //~ ERROR use of inline assembly is unsafe and requires unsafe function or block\n+}"}, {"sha": "daacd234eb487f8a31282bffb987957b2765576f", "filename": "src/test/ui/unsafe/inline_asm.thir.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/116bc6dd76924d5769f88a7a9674caa872c1dbaf/src%2Ftest%2Fui%2Funsafe%2Finline_asm.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/116bc6dd76924d5769f88a7a9674caa872c1dbaf/src%2Ftest%2Fui%2Funsafe%2Finline_asm.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Finline_asm.thir.stderr?ref=116bc6dd76924d5769f88a7a9674caa872c1dbaf", "patch": "@@ -0,0 +1,20 @@\n+error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n+  --> $DIR/inline_asm.rs:8:5\n+   |\n+LL |     asm!(\"nop\");\n+   |     ^^^^^^^^^^^^ use of inline assembly\n+   |\n+   = note: inline assembly is entirely unchecked and can cause undefined behavior\n+\n+error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n+  --> $DIR/inline_asm.rs:9:5\n+   |\n+LL |     llvm_asm!(\"nop\");\n+   |     ^^^^^^^^^^^^^^^^^ use of inline assembly\n+   |\n+   = note: inline assembly is entirely unchecked and can cause undefined behavior\n+   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}]}