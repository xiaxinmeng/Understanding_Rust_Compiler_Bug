{"sha": "72e7c62ec4ecddadeccb928ac488a8715d80aef7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZTdjNjJlYzRlY2RkYWRlY2NiOTI4YWM0ODhhODcxNWQ4MGFlZjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-17T15:45:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-17T15:45:44Z"}, "message": "auto merge of #9245 : kballard/rust/bytes-span, r=catamorphism\n\nThis constrains the span to the appropriate argument, so you know which\r\none caused the problem. Instead of\r\n\r\n    foo.rs:2:4: 2:21 error: Too large integer literal in bytes!\r\n    foo.rs:2    bytes!(1, 256, 2)\r\n                ^~~~~~~~~~~~~~~~~\r\n\r\nit will say\r\n\r\n    foo.rs:2:14 2:17 error: Too large integer literal in bytes!\r\n    foo.rs:2    bytes!(1, 256, 2)\r\n                          ^~~", "tree": {"sha": "cffb38564b51057038da02fb36aac593de4ea8b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cffb38564b51057038da02fb36aac593de4ea8b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72e7c62ec4ecddadeccb928ac488a8715d80aef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72e7c62ec4ecddadeccb928ac488a8715d80aef7", "html_url": "https://github.com/rust-lang/rust/commit/72e7c62ec4ecddadeccb928ac488a8715d80aef7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72e7c62ec4ecddadeccb928ac488a8715d80aef7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29cdf58861b1054c899c911343ccd8b1af28151a", "url": "https://api.github.com/repos/rust-lang/rust/commits/29cdf58861b1054c899c911343ccd8b1af28151a", "html_url": "https://github.com/rust-lang/rust/commit/29cdf58861b1054c899c911343ccd8b1af28151a"}, {"sha": "b0647feab05057e8c8f232cdeb6fdceb9a62ad6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0647feab05057e8c8f232cdeb6fdceb9a62ad6c", "html_url": "https://github.com/rust-lang/rust/commit/b0647feab05057e8c8f232cdeb6fdceb9a62ad6c"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b27fcb6c9b9f7c641a25aa11203558843b876aa7", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72e7c62ec4ecddadeccb928ac488a8715d80aef7/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e7c62ec4ecddadeccb928ac488a8715d80aef7/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=72e7c62ec4ecddadeccb928ac488a8715d80aef7", "patch": "@@ -30,43 +30,43 @@ pub fn expand_syntax_ext(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree]) -> bas\n                 // string literal, push each byte to vector expression\n                 ast::lit_str(s) => {\n                     for byte in s.byte_iter() {\n-                        bytes.push(cx.expr_u8(sp, byte));\n+                        bytes.push(cx.expr_u8(expr.span, byte));\n                     }\n                 }\n \n                 // u8 literal, push to vector expression\n                 ast::lit_uint(v, ast::ty_u8) => {\n                     if v > 0xFF {\n-                        cx.span_err(sp, \"Too large u8 literal in bytes!\")\n+                        cx.span_err(expr.span, \"Too large u8 literal in bytes!\")\n                     } else {\n-                        bytes.push(cx.expr_u8(sp, v as u8));\n+                        bytes.push(cx.expr_u8(expr.span, v as u8));\n                     }\n                 }\n \n                 // integer literal, push to vector expression\n                 ast::lit_int_unsuffixed(v) => {\n                     if v > 0xFF {\n-                        cx.span_err(sp, \"Too large integer literal in bytes!\")\n+                        cx.span_err(expr.span, \"Too large integer literal in bytes!\")\n                     } else if v < 0 {\n-                        cx.span_err(sp, \"Negative integer literal in bytes!\")\n+                        cx.span_err(expr.span, \"Negative integer literal in bytes!\")\n                     } else {\n-                        bytes.push(cx.expr_u8(sp, v as u8));\n+                        bytes.push(cx.expr_u8(expr.span, v as u8));\n                     }\n                 }\n \n                 // char literal, push to vector expression\n                 ast::lit_char(v) => {\n                     if char::from_u32(v).unwrap().is_ascii() {\n-                        bytes.push(cx.expr_u8(sp, v as u8));\n+                        bytes.push(cx.expr_u8(expr.span, v as u8));\n                     } else {\n-                        cx.span_err(sp, \"Non-ascii char literal in bytes!\")\n+                        cx.span_err(expr.span, \"Non-ascii char literal in bytes!\")\n                     }\n                 }\n \n-                _ => cx.span_err(sp, \"Unsupported literal in bytes!\")\n+                _ => cx.span_err(expr.span, \"Unsupported literal in bytes!\")\n             },\n \n-            _ => cx.span_err(sp, \"Non-literal in bytes!\")\n+            _ => cx.span_err(expr.span, \"Non-literal in bytes!\")\n         }\n     }\n "}]}