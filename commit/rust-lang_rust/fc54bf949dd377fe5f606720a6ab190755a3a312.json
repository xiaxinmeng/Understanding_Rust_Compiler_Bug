{"sha": "fc54bf949dd377fe5f606720a6ab190755a3a312", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNTRiZjk0OWRkMzc3ZmU1ZjYwNjcyMGE2YWIxOTA3NTVhM2EzMTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-03T03:24:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-03T03:24:59Z"}, "message": "Auto merge of #44195 - alexcrichton:remove-used-unsafe, r=nikomatsakis\n\nrustc: Remove the `used_unsafe` field on TyCtxt\n\nNow that lint levels are available for the entire compilation, this can be an\nentirely local lint in `effect.rs`\n\ncc #44137", "tree": {"sha": "9f220d6fc4e1bd828b61be0dbb4faaff5b6ae613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f220d6fc4e1bd828b61be0dbb4faaff5b6ae613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc54bf949dd377fe5f606720a6ab190755a3a312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc54bf949dd377fe5f606720a6ab190755a3a312", "html_url": "https://github.com/rust-lang/rust/commit/fc54bf949dd377fe5f606720a6ab190755a3a312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc54bf949dd377fe5f606720a6ab190755a3a312/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e9431a6f5178d2d5086a89782d450568614da8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9431a6f5178d2d5086a89782d450568614da8d", "html_url": "https://github.com/rust-lang/rust/commit/5e9431a6f5178d2d5086a89782d450568614da8d"}, {"sha": "058202e5235d334f8b3017b057c684b01a6bde27", "url": "https://api.github.com/repos/rust-lang/rust/commits/058202e5235d334f8b3017b057c684b01a6bde27", "html_url": "https://github.com/rust-lang/rust/commit/058202e5235d334f8b3017b057c684b01a6bde27"}], "stats": {"total": 140, "additions": 66, "deletions": 74}, "files": [{"sha": "21852468146f4636135eab2c68d3b9f1bee20069", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc54bf949dd377fe5f606720a6ab190755a3a312/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc54bf949dd377fe5f606720a6ab190755a3a312/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=fc54bf949dd377fe5f606720a6ab190755a3a312", "patch": "@@ -216,6 +216,12 @@ declare_lint! {\n     \"detects use of deprecated items\"\n }\n \n+declare_lint! {\n+    pub UNUSED_UNSAFE,\n+    Warn,\n+    \"unnecessary use of an `unsafe` block\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -256,7 +262,8 @@ impl LintPass for HardwiredLints {\n             MISSING_FRAGMENT_SPECIFIER,\n             PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n             LATE_BOUND_LIFETIME_ARGUMENTS,\n-            DEPRECATED\n+            DEPRECATED,\n+            UNUSED_UNSAFE\n         )\n     }\n }"}, {"sha": "7290353e48b0c379b04756512b6e84bfc80f7e12", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fc54bf949dd377fe5f606720a6ab190755a3a312/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc54bf949dd377fe5f606720a6ab190755a3a312/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=fc54bf949dd377fe5f606720a6ab190755a3a312", "patch": "@@ -14,12 +14,14 @@ use self::RootUnsafeContext::*;\n \n use ty::{self, TyCtxt};\n use lint;\n+use lint::builtin::UNUSED_UNSAFE;\n \n-use syntax::ast;\n-use syntax_pos::Span;\n-use hir::{self, PatKind};\n use hir::def::Def;\n use hir::intravisit::{self, FnKind, Visitor, NestedVisitorMap};\n+use hir::{self, PatKind};\n+use syntax::ast;\n+use syntax_pos::Span;\n+use util::nodemap::FxHashSet;\n \n #[derive(Copy, Clone)]\n struct UnsafeContext {\n@@ -47,6 +49,7 @@ struct EffectCheckVisitor<'a, 'tcx: 'a> {\n \n     /// Whether we're in an unsafe context.\n     unsafe_context: UnsafeContext,\n+    used_unsafe: FxHashSet<ast::NodeId>,\n }\n \n impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n@@ -73,7 +76,7 @@ impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n             UnsafeBlock(block_id) => {\n                 // OK, but record this.\n                 debug!(\"effect: recording unsafe block as used: {}\", block_id);\n-                self.tcx.used_unsafe.borrow_mut().insert(block_id);\n+                self.used_unsafe.insert(block_id);\n             }\n             UnsafeFn => {}\n         }\n@@ -159,7 +162,48 @@ impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n \n         intravisit::walk_block(self, block);\n \n-        self.unsafe_context = old_unsafe_context\n+        self.unsafe_context = old_unsafe_context;\n+\n+        // Don't warn about generated blocks, that'll just pollute the output.\n+        match block.rules {\n+            hir::UnsafeBlock(hir::UserProvided) => {}\n+            _ => return,\n+        }\n+        if self.used_unsafe.contains(&block.id) {\n+            return\n+        }\n+\n+        /// Return the NodeId for an enclosing scope that is also `unsafe`\n+        fn is_enclosed(tcx: TyCtxt,\n+                       used_unsafe: &FxHashSet<ast::NodeId>,\n+                       id: ast::NodeId) -> Option<(String, ast::NodeId)> {\n+            let parent_id = tcx.hir.get_parent_node(id);\n+            if parent_id != id {\n+                if used_unsafe.contains(&parent_id) {\n+                    Some((\"block\".to_string(), parent_id))\n+                } else if let Some(hir::map::NodeItem(&hir::Item {\n+                    node: hir::ItemFn(_, hir::Unsafety::Unsafe, _, _, _, _),\n+                    ..\n+                })) = tcx.hir.find(parent_id) {\n+                    Some((\"fn\".to_string(), parent_id))\n+                } else {\n+                    is_enclosed(tcx, used_unsafe, parent_id)\n+                }\n+            } else {\n+                None\n+            }\n+        }\n+\n+        let mut db = self.tcx.struct_span_lint_node(UNUSED_UNSAFE,\n+                                                    block.id,\n+                                                    block.span,\n+                                                    \"unnecessary `unsafe` block\");\n+        db.span_label(block.span, \"unnecessary `unsafe` block\");\n+        if let Some((kind, id)) = is_enclosed(self.tcx, &self.used_unsafe, block.id) {\n+            db.span_note(self.tcx.hir.span(id),\n+                         &format!(\"because it's nested under this `unsafe` {}\", kind));\n+        }\n+        db.emit();\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n@@ -265,6 +309,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         tables: &ty::TypeckTables::empty(None),\n         body_id: hir::BodyId { node_id: ast::CRATE_NODE_ID },\n         unsafe_context: UnsafeContext::new(SafeContext),\n+        used_unsafe: FxHashSet(),\n     };\n \n     tcx.hir.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());"}, {"sha": "f475baf19949f02896a862de54ae2dc137ba2c19", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc54bf949dd377fe5f606720a6ab190755a3a312/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc54bf949dd377fe5f606720a6ab190755a3a312/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=fc54bf949dd377fe5f606720a6ab190755a3a312", "patch": "@@ -853,10 +853,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub lang_items: middle::lang_items::LanguageItems,\n \n-    /// Set of used unsafe nodes (functions or blocks). Unsafe nodes not\n-    /// present in this set can be warned about.\n-    pub used_unsafe: RefCell<NodeSet>,\n-\n     /// Set of nodes which mark locals as mutable which end up getting used at\n     /// some point. Local variable definitions not in this set can be warned\n     /// about.\n@@ -1092,7 +1088,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             normalized_cache: RefCell::new(FxHashMap()),\n             inhabitedness_cache: RefCell::new(FxHashMap()),\n             lang_items,\n-            used_unsafe: RefCell::new(NodeSet()),\n             used_mut_nodes: RefCell::new(NodeSet()),\n             stability: RefCell::new(stability),\n             selection_cache: traits::SelectionCache::new(),"}, {"sha": "fbf993f45576ceb6f214f719c94dcbff9c281804", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc54bf949dd377fe5f606720a6ab190755a3a312/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc54bf949dd377fe5f606720a6ab190755a3a312/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=fc54bf949dd377fe5f606720a6ab190755a3a312", "patch": "@@ -128,7 +128,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  NonSnakeCase,\n                  NonUpperCaseGlobals,\n                  NonShorthandFieldPatterns,\n-                 UnusedUnsafe,\n                  UnsafeCode,\n                  UnusedMut,\n                  UnusedAllocation,"}, {"sha": "15efc14b061f073443e312cbd76deaa5754ce561", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fc54bf949dd377fe5f606720a6ab190755a3a312/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc54bf949dd377fe5f606720a6ab190755a3a312/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=fc54bf949dd377fe5f606720a6ab190755a3a312", "patch": "@@ -204,60 +204,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n     }\n }\n \n-declare_lint! {\n-    pub UNUSED_UNSAFE,\n-    Warn,\n-    \"unnecessary use of an `unsafe` block\"\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct UnusedUnsafe;\n-\n-impl LintPass for UnusedUnsafe {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNUSED_UNSAFE)\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedUnsafe {\n-    fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n-        /// Return the NodeId for an enclosing scope that is also `unsafe`\n-        fn is_enclosed(cx: &LateContext, id: ast::NodeId) -> Option<(String, ast::NodeId)> {\n-            let parent_id = cx.tcx.hir.get_parent_node(id);\n-            if parent_id != id {\n-                if cx.tcx.used_unsafe.borrow().contains(&parent_id) {\n-                    Some((\"block\".to_string(), parent_id))\n-                } else if let Some(hir::map::NodeItem(&hir::Item {\n-                    node: hir::ItemFn(_, hir::Unsafety::Unsafe, _, _, _, _),\n-                    ..\n-                })) = cx.tcx.hir.find(parent_id) {\n-                    Some((\"fn\".to_string(), parent_id))\n-                } else {\n-                    is_enclosed(cx, parent_id)\n-                }\n-            } else {\n-                None\n-            }\n-        }\n-        if let hir::ExprBlock(ref blk) = e.node {\n-            // Don't warn about generated blocks, that'll just pollute the output.\n-            if blk.rules == hir::UnsafeBlock(hir::UserProvided) &&\n-               !cx.tcx.used_unsafe.borrow().contains(&blk.id) {\n-\n-                let mut db = cx.struct_span_lint(UNUSED_UNSAFE, blk.span,\n-                                                 \"unnecessary `unsafe` block\");\n-\n-                db.span_label(blk.span, \"unnecessary `unsafe` block\");\n-                if let Some((kind, id)) = is_enclosed(cx, blk.id) {\n-                    db.span_note(cx.tcx.hir.span(id),\n-                                 &format!(\"because it's nested under this `unsafe` {}\", kind));\n-                }\n-                db.emit();\n-            }\n-        }\n-    }\n-}\n-\n declare_lint! {\n     pub PATH_STATEMENTS,\n     Warn,"}, {"sha": "1fa5f94aa4ca6e29970c2932c13aa9814a57e299", "filename": "src/test/ui/span/lint-unused-unsafe.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc54bf949dd377fe5f606720a6ab190755a3a312/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc54bf949dd377fe5f606720a6ab190755a3a312/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr?ref=fc54bf949dd377fe5f606720a6ab190755a3a312", "patch": "@@ -65,14 +65,12 @@ note: because it's nested under this `unsafe` block\n    | |_____^\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:39:5\n+  --> $DIR/lint-unused-unsafe.rs:40:9\n    |\n-39 | /     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n-40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+40 | /         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n 41 | |             unsf()\n 42 | |         }\n-43 | |     }\n-   | |_____^ unnecessary `unsafe` block\n+   | |_________^ unnecessary `unsafe` block\n    |\n note: because it's nested under this `unsafe` fn\n   --> $DIR/lint-unused-unsafe.rs:38:1\n@@ -87,12 +85,14 @@ note: because it's nested under this `unsafe` fn\n    | |_^\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:40:9\n+  --> $DIR/lint-unused-unsafe.rs:39:5\n    |\n-40 | /         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+39 | /     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n 41 | |             unsf()\n 42 | |         }\n-   | |_________^ unnecessary `unsafe` block\n+43 | |     }\n+   | |_____^ unnecessary `unsafe` block\n    |\n note: because it's nested under this `unsafe` fn\n   --> $DIR/lint-unused-unsafe.rs:38:1"}]}