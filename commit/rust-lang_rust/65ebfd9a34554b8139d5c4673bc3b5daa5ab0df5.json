{"sha": "65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZWJmZDlhMzQ1NTRiODEzOWQ1YzQ2NzNiYzNiNWRhYTVhYjBkZjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-11T10:13:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-11T10:19:10Z"}, "message": "Simplify", "tree": {"sha": "206edfb15c0eec57c1872a2acc435d7f38df1c88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/206edfb15c0eec57c1872a2acc435d7f38df1c88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5", "html_url": "https://github.com/rust-lang/rust/commit/65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7176029803fe2e00f29ab7d20a384e3ee6f53ba3", "html_url": "https://github.com/rust-lang/rust/commit/7176029803fe2e00f29ab7d20a384e3ee6f53ba3"}], "stats": {"total": 99, "additions": 35, "deletions": 64}, "files": [{"sha": "7f1c0401a28a1219ad573840c3230e5a311bc3dd", "filename": "src/parser/grammar/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5/src%2Fparser%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5/src%2Fparser%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fattributes.rs?ref=65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5", "patch": "@@ -1,7 +1,7 @@\n use super::*;\n \n pub(super) fn inner_attributes(p: &mut Parser) {\n-    while p.at([POUND, EXCL]) {\n+    while p.current() == POUND && p.nth(1) == EXCL {\n         attribute(p, true)\n     }\n }"}, {"sha": "f5b63aaabcb9e305a223b90c5fd7a66411b74e18", "filename": "src/parser/grammar/mod.rs", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5/src%2Fparser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5/src%2Fparser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fmod.rs?ref=65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5", "patch": "@@ -110,65 +110,3 @@ fn error_block(p: &mut Parser, message: &str) {\n     }\n     err.complete(p, ERROR);\n }\n-\n-impl<'p> Parser<'p> {\n-    fn at<L: Lookahead>(&self, l: L) -> bool {\n-        l.is_ahead(self)\n-    }\n-\n-    fn err_and_bump(&mut self, message: &str) {\n-        let err = self.start();\n-        self.error(message);\n-        self.bump();\n-        err.complete(self, ERROR);\n-    }\n-\n-    fn expect(&mut self, kind: SyntaxKind) -> bool {\n-        if self.at(kind) {\n-            self.bump();\n-            true\n-        } else {\n-            self.error(format!(\"expected {:?}\", kind));\n-            false\n-        }\n-    }\n-\n-    fn eat(&mut self, kind: SyntaxKind) -> bool {\n-        self.current() == kind && {\n-            self.bump();\n-            true\n-        }\n-    }\n-}\n-\n-trait Lookahead: Copy {\n-    fn is_ahead(self, p: &Parser) -> bool;\n-}\n-\n-impl Lookahead for SyntaxKind {\n-    fn is_ahead(self, p: &Parser) -> bool {\n-        p.current() == self\n-    }\n-}\n-\n-impl Lookahead for [SyntaxKind; 2] {\n-    fn is_ahead(self, p: &Parser) -> bool {\n-        p.current() == self[0] && p.nth(1) == self[1]\n-    }\n-}\n-\n-impl Lookahead for [SyntaxKind; 3] {\n-    fn is_ahead(self, p: &Parser) -> bool {\n-        p.current() == self[0] && p.nth(1) == self[1] && p.nth(2) == self[2]\n-    }\n-}\n-\n-#[derive(Clone, Copy)]\n-struct AnyOf<'a>(&'a [SyntaxKind]);\n-\n-impl<'a> Lookahead for AnyOf<'a> {\n-    fn is_ahead(self, p: &Parser) -> bool {\n-        let curr = p.current();\n-        self.0.iter().any(|&k| k == curr)\n-    }\n-}"}, {"sha": "d3eb20ea14bceddc00871078acaa56d48e644a19", "filename": "src/parser/grammar/paths.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5/src%2Fparser%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5/src%2Fparser%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fpaths.rs?ref=65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5", "patch": "@@ -1,7 +1,10 @@\n use super::*;\n \n pub(super) fn is_path_start(p: &Parser) -> bool {\n-    AnyOf(&[IDENT, SELF_KW, SUPER_KW, COLONCOLON]).is_ahead(p)\n+    match p.current() {\n+        IDENT | SELF_KW | SUPER_KW | COLONCOLON => true,\n+        _ => false,\n+    }\n }\n \n pub(super) fn use_path(p: &mut Parser) {"}, {"sha": "c23ed33495cefe9b0b14350f06d7ec1c97bb1cc0", "filename": "src/parser/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5/src%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5/src%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fmod.rs?ref=65ebfd9a34554b8139d5c4673bc3b5daa5ab0df5", "patch": "@@ -26,3 +26,33 @@ fn is_insignificant(kind: SyntaxKind) -> bool {\n         _ => false,\n     }\n }\n+\n+impl<'p> parser::Parser<'p> {\n+    fn at(&self, kind: SyntaxKind) -> bool {\n+        self.current() == kind\n+    }\n+\n+    fn err_and_bump(&mut self, message: &str) {\n+        let err = self.start();\n+        self.error(message);\n+        self.bump();\n+        err.complete(self, ERROR);\n+    }\n+\n+    fn expect(&mut self, kind: SyntaxKind) -> bool {\n+        if self.at(kind) {\n+            self.bump();\n+            true\n+        } else {\n+            self.error(format!(\"expected {:?}\", kind));\n+            false\n+        }\n+    }\n+\n+    fn eat(&mut self, kind: SyntaxKind) -> bool {\n+        self.at(kind) && {\n+            self.bump();\n+            true\n+        }\n+    }\n+}"}]}