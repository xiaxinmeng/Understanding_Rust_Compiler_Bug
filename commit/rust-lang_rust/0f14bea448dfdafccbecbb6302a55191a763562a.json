{"sha": "0f14bea448dfdafccbecbb6302a55191a763562a", "node_id": "C_kwDOAAsO6NoAKDBmMTRiZWE0NDhkZmRhZmNjYmVjYmI2MzAyYTU1MTkxYTc2MzU2MmE", "commit": {"author": {"name": "Mario Carneiro", "email": "di.gama@gmail.com", "date": "2022-02-18T04:27:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-18T04:27:53Z"}, "message": "Optimize char_try_from_u32\n\nThe optimization was proposed by @falk-hueffner in https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Micro-optimizing.20char.3A.3Afrom_u32/near/272146171,  and I simplified it a bit and added an explanation of why the optimization is correct.", "tree": {"sha": "94d258d596ea34dc45441d850bb5321c36f40335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94d258d596ea34dc45441d850bb5321c36f40335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f14bea448dfdafccbecbb6302a55191a763562a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiDyBJCRBK7hj4Ov3rIwAAhgEIALL3MsNGAyORcxCC3L9AKlWK\nP5KKjlZmBZE4plyYQsVK87d4roxonj+6DDqbSyk4vAeLQv3ZgnlWG6ZSU9+U4KPQ\nm/WuCrFhlACEdCS5WU+K23nX80zMV7v3g/4uNJGGQHnHW1PYtMGCwzEy+z+eLqD5\n5VqbOjaq85pIToiMGD7/MO68Pxi+5DWyEbSQzuRO1SuNLEMGu4IbE+wzHQb03raF\nBEIfjKn4p5KkE0AHRgkDzKwKbxSoWvxxmiqS1q3foIJpX/4Ss+S7HRHhyxHF/8je\nckRcwSACbWc3ACJjbelxTh6OxDUAvNfwVHVDWhO942qH5g27lGBRDeOO41rIemo=\n=r25v\n-----END PGP SIGNATURE-----\n", "payload": "tree 94d258d596ea34dc45441d850bb5321c36f40335\nparent 73a7423e77b49a99e270531fbadda5b8899df3f6\nauthor Mario Carneiro <di.gama@gmail.com> 1645158473 -0800\ncommitter GitHub <noreply@github.com> 1645158473 -0800\n\nOptimize char_try_from_u32\n\nThe optimization was proposed by @falk-hueffner in https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Micro-optimizing.20char.3A.3Afrom_u32/near/272146171,  and I simplified it a bit and added an explanation of why the optimization is correct."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f14bea448dfdafccbecbb6302a55191a763562a", "html_url": "https://github.com/rust-lang/rust/commit/0f14bea448dfdafccbecbb6302a55191a763562a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f14bea448dfdafccbecbb6302a55191a763562a/comments", "author": {"login": "digama0", "id": 868588, "node_id": "MDQ6VXNlcjg2ODU4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/868588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/digama0", "html_url": "https://github.com/digama0", "followers_url": "https://api.github.com/users/digama0/followers", "following_url": "https://api.github.com/users/digama0/following{/other_user}", "gists_url": "https://api.github.com/users/digama0/gists{/gist_id}", "starred_url": "https://api.github.com/users/digama0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/digama0/subscriptions", "organizations_url": "https://api.github.com/users/digama0/orgs", "repos_url": "https://api.github.com/users/digama0/repos", "events_url": "https://api.github.com/users/digama0/events{/privacy}", "received_events_url": "https://api.github.com/users/digama0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73a7423e77b49a99e270531fbadda5b8899df3f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/73a7423e77b49a99e270531fbadda5b8899df3f6", "html_url": "https://github.com/rust-lang/rust/commit/73a7423e77b49a99e270531fbadda5b8899df3f6"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "56dc2a594e176ab54f51144941d6033606cfadd9", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0f14bea448dfdafccbecbb6302a55191a763562a/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f14bea448dfdafccbecbb6302a55191a763562a/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=0f14bea448dfdafccbecbb6302a55191a763562a", "patch": "@@ -271,7 +271,20 @@ impl FromStr for char {\n \n #[inline]\n const fn char_try_from_u32(i: u32) -> Result<char, CharTryFromError> {\n-    if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n+    // This is an optimized version of the check\n+    // (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF),\n+    // which can also be written as\n+    // i >= 0x110000 || (i >= 0xD800 && i < 0xE000).\n+    //\n+    // The XOR with 0xD800 permutes the ranges such that 0xD800..0xE000 is\n+    // mapped to 0x0000..0x0800, while keeping all the high bits outside 0xFFFF the same.\n+    // In particular, numbers >= 0x110000 stay in this range.\n+    //\n+    // Subtracting 0x800 causes 0x0000..0x0800 to wrap, meaning that a single\n+    // unsigned comparison against 0x110000 - 0x800 will detect both the wrapped\n+    // surrogate range as well as the numbers originally larger than 0x110000.\n+    //\n+    if (i ^ 0xD800).wrapping_sub(0x800) >= 0x110000 - 0x800 {\n         Err(CharTryFromError(()))\n     } else {\n         // SAFETY: checked that it's a legal unicode value"}]}