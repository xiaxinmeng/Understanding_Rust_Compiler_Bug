{"sha": "5cff7c093eec13405ad8f6d16019c3b11cf88eac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZmY3YzA5M2VlYzEzNDA1YWQ4ZjZkMTYwMTljM2IxMWNmODhlYWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-23T23:54:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-24T00:18:01Z"}, "message": "rustdoc: Prune undocumented fn args", "tree": {"sha": "cf65405dd519723e7d6297ae657d57c81a983c05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf65405dd519723e7d6297ae657d57c81a983c05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cff7c093eec13405ad8f6d16019c3b11cf88eac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cff7c093eec13405ad8f6d16019c3b11cf88eac", "html_url": "https://github.com/rust-lang/rust/commit/5cff7c093eec13405ad8f6d16019c3b11cf88eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cff7c093eec13405ad8f6d16019c3b11cf88eac/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5660b8bfb5130a6840931c63623a2aaf99775844", "url": "https://api.github.com/repos/rust-lang/rust/commits/5660b8bfb5130a6840931c63623a2aaf99775844", "html_url": "https://github.com/rust-lang/rust/commit/5660b8bfb5130a6840931c63623a2aaf99775844"}], "stats": {"total": 98, "additions": 58, "deletions": 40}, "files": [{"sha": "921b0c8a433baf2801afa5bc2651dd425e96dd3e", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 58, "deletions": 40, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/5cff7c093eec13405ad8f6d16019c3b11cf88eac/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cff7c093eec13405ad8f6d16019c3b11cf88eac/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=5cff7c093eec13405ad8f6d16019c3b11cf88eac", "patch": "@@ -44,13 +44,34 @@ fn fold_fn(\n     fold: fold::fold<ctxt>,\n     doc: doc::fndoc\n ) -> doc::fndoc {\n+    let doc = ~{\n+        args: vec::filter_map(doc.args) {|doc|\n+            if option::is_some(doc.desc) {\n+                some(doc)\n+            } else {\n+                none\n+            }\n+        }\n+        with *doc\n+    };\n+\n     fold.ctxt.have_docs =\n         doc.brief != none\n         || doc.desc != none\n         || doc.return.desc != none;\n     ret doc;\n }\n \n+#[test]\n+fn should_elide_undocumented_arguments() {\n+    let source = \"#[doc = \\\"hey\\\"] fn a(b: int) { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert vec::is_empty(doc.topmod.fns[0].args);\n+}\n+\n fn fold_modlist(\n     fold: fold::fold<ctxt>,\n     list: doc::modlist\n@@ -65,6 +86,35 @@ fn fold_modlist(\n     })\n }\n \n+#[test]\n+fn should_elide_undocumented_mods() {\n+    let source = \"mod a { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::is_empty(*doc.topmod.mods);\n+}\n+\n+#[test]\n+fn should_not_elide_undocument_mods_with_documented_mods() {\n+    let source = \"mod a { #[doc = \\\"b\\\"] mod b { } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert vec::is_not_empty(*doc.topmod.mods);\n+}\n+\n+#[test]\n+fn should_not_elide_undocument_mods_with_documented_fns() {\n+    let source = \"mod a { #[doc = \\\"b\\\"] fn b() { } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert vec::is_not_empty(*doc.topmod.mods);\n+}\n+\n fn fold_fnlist(\n     fold: fold::fold<ctxt>,\n     list: doc::fnlist\n@@ -79,43 +129,11 @@ fn fold_fnlist(\n     })\n }\n \n-#[cfg(test)]\n-mod tests {\n-    #[test]\n-    fn should_elide_undocumented_mods() {\n-        let source = \"mod a { }\";\n-        let srv = astsrv::mk_srv_from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = run(srv, doc);\n-        assert vec::is_empty(*doc.topmod.mods);\n-    }\n-\n-    #[test]\n-    fn should_not_elide_undocument_mods_with_documented_mods() {\n-        let source = \"mod a { #[doc = \\\"b\\\"] mod b { } }\";\n-        let srv = astsrv::mk_srv_from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = attr_pass::mk_pass()(srv, doc);\n-        let doc = run(srv, doc);\n-        assert vec::is_not_empty(*doc.topmod.mods);\n-    }\n-\n-    #[test]\n-    fn should_not_elide_undocument_mods_with_documented_fns() {\n-        let source = \"mod a { #[doc = \\\"b\\\"] fn b() { } }\";\n-        let srv = astsrv::mk_srv_from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = attr_pass::mk_pass()(srv, doc);\n-        let doc = run(srv, doc);\n-        assert vec::is_not_empty(*doc.topmod.mods);\n-    }\n-\n-    #[test]\n-    fn should_elide_undocumented_fns() {\n-        let source = \"fn a() { }\";\n-        let srv = astsrv::mk_srv_from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = run(srv, doc);\n-        assert vec::is_empty(*doc.topmod.fns);\n-    }\n-}\n\\ No newline at end of file\n+#[test]\n+fn should_elide_undocumented_fns() {\n+    let source = \"fn a() { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::is_empty(*doc.topmod.fns);\n+}"}]}