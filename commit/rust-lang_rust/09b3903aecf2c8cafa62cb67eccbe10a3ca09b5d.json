{"sha": "09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YjM5MDNhZWNmMmM4Y2FmYTYyY2I2N2VjY2JlMTBhM2NhMDliNWQ=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-01-27T18:08:51Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-01-27T18:08:51Z"}, "message": "Fix a few links in the docs", "tree": {"sha": "8a2da1f4744b3171c52e426d73faf982156189ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a2da1f4744b3171c52e426d73faf982156189ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d", "html_url": "https://github.com/rust-lang/rust/commit/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8367fb7ba6abae89ab7e17c1b3987ee321f5bb71", "url": "https://api.github.com/repos/rust-lang/rust/commits/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71", "html_url": "https://github.com/rust-lang/rust/commit/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "8ab580e6aa9fd7a5a4850142eee35ab596292bc0", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d", "patch": "@@ -710,7 +710,7 @@ Please note that [`catch_unwind()`] will only catch unwinding panics, not\n those who abort the process. See the documentation of [`catch_unwind()`]\n for more information.\n \n-[`catch_unwind()`]: https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\n+[`catch_unwind()`]: ../std/panic/fn.catch_unwind.html\n \n # Representing opaque structs\n "}, {"sha": "38d843263ffda09c7c1609e684a42da31a9763df", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d", "patch": "@@ -59,7 +59,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// as long as `T` implements [`Send`] and [`Sync`][sync]. The disadvantage is\n /// that atomic operations are more expensive than ordinary memory accesses.\n /// If you are not sharing reference-counted values between threads, consider\n-/// using [`rc::Rc`] for lower overhead. [`Rc`] is a safe default, because\n+/// using [`rc::Rc`][`Rc`] for lower overhead. [`Rc`] is a safe default, because\n /// the compiler will catch any attempt to send an [`Rc`] between threads.\n /// However, a library might choose `Arc` in order to give library consumers\n /// more flexibility."}, {"sha": "dd6edc7d39af0ca0afca1f2be4418cd9430099df", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d", "patch": "@@ -307,6 +307,7 @@ pub trait BuildHasher {\n /// [`BuildHasher`]: trait.BuildHasher.html\n /// [`Default`]: ../default/trait.Default.html\n /// [`Hasher`]: trait.Hasher.html\n+/// [`HashMap`]: ../../std/collections/struct.HashMap.html\n #[stable(since = \"1.7.0\", feature = \"build_hasher\")]\n pub struct BuildHasherDefault<H>(marker::PhantomData<H>);\n "}, {"sha": "3b406873d4b191b63fc2d5a71cc416fd884d4606", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d", "patch": "@@ -1108,9 +1108,9 @@ pub trait Iterator {\n     ///\n     /// One of the keys to `collect()`'s power is that many things you might\n     /// not think of as 'collections' actually are. For example, a [`String`]\n-    /// is a collection of [`char`]s. And a collection of [`Result<T, E>`] can\n-    /// be thought of as single [`Result`]`<Collection<T>, E>`. See the examples\n-    /// below for more.\n+    /// is a collection of [`char`]s. And a collection of\n+    /// [`Result<T, E>`][`Result`] can be thought of as single\n+    /// [`Result`]`<Collection<T>, E>`. See the examples below for more.\n     ///\n     /// Because `collect()` is so general, it can cause problems with type\n     /// inference. As such, `collect()` is one of the few times you'll see"}, {"sha": "743e3c41170a34d0c99ef3575cd234811eb3deb2", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d", "patch": "@@ -24,7 +24,7 @@\n //! same as [LLVM atomic orderings][1]. For more information see the [nomicon][2].\n //!\n //! [1]: http://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations\n-//! [2]: https://doc.rust-lang.org/nomicon/atomics.html\n+//! [2]: ../../../nomicon/atomics.html\n //!\n //! Atomic variables are safe to share between threads (they implement `Sync`)\n //! but they do not themselves provide the mechanism for sharing and follow the\n@@ -144,7 +144,7 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// LLVM's](http://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations).\n ///\n /// For more information see the [nomicon][1].\n-/// [1]: https://doc.rust-lang.org/nomicon/atomics.html\n+/// [1]: ../../../nomicon/atomics.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Debug)]\n pub enum Ordering {"}, {"sha": "c3a6b2433ed8815acb1460ba3800a2a13857738b", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d", "patch": "@@ -222,7 +222,7 @@ fn _var_os(key: &OsStr) -> Option<OsString> {\n \n /// Possible errors from the [`env::var`] function.\n ///\n-/// [env::var]: fn.var.html\n+/// [`env::var`]: fn.var.html\n #[derive(Debug, PartialEq, Eq, Clone)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub enum VarError {"}, {"sha": "8789006436c0c7baa2cfe93a0960b3ea1b4faa57", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=09b3903aecf2c8cafa62cb67eccbe10a3ca09b5d", "patch": "@@ -391,7 +391,7 @@ impl Builder {\n /// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n /// [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-/// [`panic!`]: ../../std/macro.panic.html\n+/// [`panic`]: ../../std/macro.panic.html\n /// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n ///\n /// # Examples\n@@ -974,7 +974,7 @@ impl<T> JoinHandle<T> {\n     /// to [`panic`].\n     ///\n     /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    /// [`panic!`]: ../../std/macro.panic.html\n+    /// [`panic`]: ../../std/macro.panic.html\n     ///\n     /// # Examples\n     ///"}]}