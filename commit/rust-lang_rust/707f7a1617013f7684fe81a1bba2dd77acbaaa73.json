{"sha": "707f7a1617013f7684fe81a1bba2dd77acbaaa73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwN2Y3YTE2MTcwMTNmNzY4NGZlODFhMWJiYTJkZDc3YWNiYWFhNzM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-03-06T13:07:50Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-03-06T13:50:34Z"}, "message": "Check that traits with default impls have no methods\n\nfixes #23080", "tree": {"sha": "9c3e545a6f52defa7b2a1cd55ba49c195dd5da4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c3e545a6f52defa7b2a1cd55ba49c195dd5da4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/707f7a1617013f7684fe81a1bba2dd77acbaaa73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/707f7a1617013f7684fe81a1bba2dd77acbaaa73", "html_url": "https://github.com/rust-lang/rust/commit/707f7a1617013f7684fe81a1bba2dd77acbaaa73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/707f7a1617013f7684fe81a1bba2dd77acbaaa73/comments", "author": null, "committer": null, "parents": [{"sha": "1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "html_url": "https://github.com/rust-lang/rust/commit/1fe8f221450bad3ffb1351c6549f67c18ce0b94e"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "57469d94ce8cb4e6255237164029a2185b290631", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/707f7a1617013f7684fe81a1bba2dd77acbaaa73/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707f7a1617013f7684fe81a1bba2dd77acbaaa73/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=707f7a1617013f7684fe81a1bba2dd77acbaaa73", "patch": "@@ -465,6 +465,29 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n     }\n }\n \n+// Check that trait with default impls (`impl Trait for ..`) contain no methods\n+struct DefaultedTraitVisitor<'a, 'tcx: 'a> { ccx: &'a CrateCtxt<'a, 'tcx> }\n+\n+impl<'a, 'tcx> Visitor<'tcx> for DefaultedTraitVisitor<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &ast::Item) {\n+        let tcx = self.ccx.tcx;\n+\n+        match item.node {\n+            ast::ItemTrait(_, _, _, ref trait_methods) => {\n+                if ty::trait_has_default_impl(tcx, local_def(item.id)) &&\n+                    !trait_methods.is_empty()\n+                {\n+                    tcx.sess.span_err(\n+                        item.span,\n+                        \"traits with default impls (`e.g. impl Trait for ..`) must have no \\\n+                        methods\")\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+}\n+\n pub fn check_item_types(ccx: &CrateCtxt) {\n     let krate = ccx.tcx.map.krate();\n     let mut visit = wf::CheckTypeWellFormedVisitor::new(ccx);\n@@ -478,6 +501,11 @@ pub fn check_item_types(ccx: &CrateCtxt) {\n     visit::walk_crate(&mut visit, krate);\n \n     ccx.tcx.sess.abort_if_errors();\n+\n+    let mut visit = DefaultedTraitVisitor { ccx: ccx };\n+    visit::walk_crate(&mut visit, krate);\n+\n+    ccx.tcx.sess.abort_if_errors();\n }\n \n fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,"}, {"sha": "61b9a1a14e0e2997c952e603d09c0871999569bb", "filename": "src/test/compile-fail/issue-23080.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/707f7a1617013f7684fe81a1bba2dd77acbaaa73/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707f7a1617013f7684fe81a1bba2dd77acbaaa73/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs?ref=707f7a1617013f7684fe81a1bba2dd77acbaaa73", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+unsafe trait Trait {\n+//~^ error: traits with default impls (`e.g. impl Trait for ..`) must have no methods\n+    fn method(&self) {\n+        println!(\"Hello\");\n+    }\n+}\n+\n+unsafe impl Trait for .. {}\n+\n+fn call_method<T: Trait>(x: T) {\n+    x.method();\n+}\n+\n+fn main() {\n+    // ICE\n+    call_method(());\n+}"}]}