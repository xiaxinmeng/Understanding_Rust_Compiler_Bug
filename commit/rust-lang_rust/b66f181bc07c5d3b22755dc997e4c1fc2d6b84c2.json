{"sha": "b66f181bc07c5d3b22755dc997e4c1fc2d6b84c2", "node_id": "C_kwDOAAsO6NoAKGI2NmYxODFiYzA3YzVkM2IyMjc1NWRjOTk3ZTRjMWZjMmQ2Yjg0YzI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-07T14:02:22Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-07T14:02:22Z"}, "message": "Fix some TryToNav impls not upmapping ranges out of macros", "tree": {"sha": "f17deb56530cf42a3164a88cc57be05947110e62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f17deb56530cf42a3164a88cc57be05947110e62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b66f181bc07c5d3b22755dc997e4c1fc2d6b84c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b66f181bc07c5d3b22755dc997e4c1fc2d6b84c2", "html_url": "https://github.com/rust-lang/rust/commit/b66f181bc07c5d3b22755dc997e4c1fc2d6b84c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b66f181bc07c5d3b22755dc997e4c1fc2d6b84c2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b0970970564d5014315721ee0d58eba3a936e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b0970970564d5014315721ee0d58eba3a936e2", "html_url": "https://github.com/rust-lang/rust/commit/49b0970970564d5014315721ee0d58eba3a936e2"}], "stats": {"total": 157, "additions": 89, "deletions": 68}, "files": [{"sha": "68bd476a4a824e9a08bd9622b710a953efa0e68e", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 89, "deletions": 68, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/b66f181bc07c5d3b22755dc997e4c1fc2d6b84c2/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66f181bc07c5d3b22755dc997e4c1fc2d6b84c2/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=b66f181bc07c5d3b22755dc997e4c1fc2d6b84c2", "patch": "@@ -91,18 +91,17 @@ impl NavigationTarget {\n \n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_smol_str()).unwrap_or_default();\n-        if let Some(src) = module.declaration_source(db) {\n-            let node = src.syntax();\n-            let full_range = node.original_file_range(db);\n-            let focus_range = src\n-                .value\n+        if let Some(src @ InFile { value, .. }) = &module.declaration_source(db) {\n+            let FileRange { file_id, range: full_range } = src.syntax().original_file_range(db);\n+            let focus_range = value\n                 .name()\n-                .map(|name| src.with_value(name.syntax()).original_file_range(db).range);\n+                .and_then(|name| src.with_value(name.syntax()).original_file_range_opt(db))\n+                .map(|it| it.range);\n             let mut res = NavigationTarget::from_syntax(\n-                full_range.file_id,\n+                file_id,\n                 name,\n                 focus_range,\n-                full_range.range,\n+                full_range,\n                 SymbolKind::Module,\n             );\n             res.docs = module.attrs(db).docs();\n@@ -142,9 +141,9 @@ impl NavigationTarget {\n             .name()\n             .and_then(|it| node.with_value(it.syntax()).original_file_range_opt(db))\n             .map(|it| it.range);\n-        let frange = node.map(|it| it.syntax()).original_file_range(db);\n+        let FileRange { file_id, range } = node.map(|it| it.syntax()).original_file_range(db);\n \n-        NavigationTarget::from_syntax(frange.file_id, name, focus_range, frange.range, kind)\n+        NavigationTarget::from_syntax(file_id, name, focus_range, range, kind)\n     }\n \n     fn from_syntax(\n@@ -287,39 +286,49 @@ where\n \n impl ToNav for hir::Module {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        let src = self.definition_source(db);\n+        let InFile { file_id, value } = self.definition_source(db);\n+\n         let name = self.name(db).map(|it| it.to_smol_str()).unwrap_or_default();\n-        let (syntax, focus) = match &src.value {\n+        let (syntax, focus) = match &value {\n             ModuleSource::SourceFile(node) => (node.syntax(), None),\n-            ModuleSource::Module(node) => {\n-                (node.syntax(), node.name().map(|it| it.syntax().text_range()))\n-            }\n+            ModuleSource::Module(node) => (\n+                node.syntax(),\n+                node.name()\n+                    .and_then(|it| InFile::new(file_id, it.syntax()).original_file_range_opt(db))\n+                    .map(|it| it.range),\n+            ),\n             ModuleSource::BlockExpr(node) => (node.syntax(), None),\n         };\n-        let frange = src.with_value(syntax).original_file_range(db);\n-        NavigationTarget::from_syntax(frange.file_id, name, focus, frange.range, SymbolKind::Module)\n+        let FileRange { file_id, range: full_range } =\n+            InFile::new(file_id, syntax).original_file_range(db);\n+        NavigationTarget::from_syntax(file_id, name, focus, full_range, SymbolKind::Module)\n     }\n }\n \n impl TryToNav for hir::Impl {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n-        let src = self.source(db)?;\n+        let InFile { file_id, value } = self.source(db)?;\n         let derive_attr = self.is_builtin_derive(db);\n-        let frange = match &derive_attr {\n-            Some(item) => item.syntax().original_file_range(db),\n-            None => src.syntax().original_file_range(db),\n-        };\n+\n+        let range = |syntax: &_| InFile::new(file_id, syntax).original_file_range(db);\n         let focus_range = if derive_attr.is_some() {\n             None\n         } else {\n-            src.value.self_ty().map(|ty| src.with_value(ty.syntax()).original_file_range(db).range)\n+            value\n+                .self_ty()\n+                .and_then(|ty| InFile::new(file_id, ty.syntax()).original_file_range_opt(db))\n+                .map(|it| it.range)\n+        };\n+        let FileRange { file_id, range: full_range } = match &derive_attr {\n+            Some(InFile { value, .. }) => range(value.syntax()),\n+            None => range(value.syntax()),\n         };\n \n         Some(NavigationTarget::from_syntax(\n-            frange.file_id,\n+            file_id,\n             \"impl\".into(),\n             focus_range,\n-            frange.range,\n+            full_range,\n             SymbolKind::Impl,\n         ))\n     }\n@@ -338,14 +347,9 @@ impl TryToNav for hir::Field {\n                 res\n             }\n             FieldSource::Pos(it) => {\n-                let frange = src.with_value(it.syntax()).original_file_range(db);\n-                NavigationTarget::from_syntax(\n-                    frange.file_id,\n-                    \"\".into(),\n-                    None,\n-                    frange.range,\n-                    SymbolKind::Field,\n-                )\n+                let FileRange { file_id, range } =\n+                    src.with_value(it.syntax()).original_file_range(db);\n+                NavigationTarget::from_syntax(file_id, \"\".into(), None, range, SymbolKind::Field)\n             }\n         };\n         Some(field_source)\n@@ -408,15 +412,17 @@ impl TryToNav for hir::GenericParam {\n \n impl ToNav for hir::Local {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        let src = self.source(db);\n-        let (node, name) = match &src.value {\n-            Either::Left(bind_pat) => (bind_pat.syntax().clone(), bind_pat.name()),\n-            Either::Right(it) => (it.syntax().clone(), it.name()),\n+        let InFile { file_id, value } = self.source(db);\n+        let (node, name) = match &value {\n+            Either::Left(bind_pat) => (bind_pat.syntax(), bind_pat.name()),\n+            Either::Right(it) => (it.syntax(), it.name()),\n         };\n-        let focus_range =\n-            name.map(|it| src.with_value(&it.syntax().clone()).original_file_range(db).range);\n+        let focus_range = name\n+            .and_then(|it| InFile::new(file_id, it.syntax()).original_file_range_opt(db))\n+            .map(|it| it.range);\n+        let FileRange { file_id, range: full_range } =\n+            InFile::new(file_id, node).original_file_range(db);\n \n-        let full_range = src.with_value(&node).original_file_range(db);\n         let name = match self.name(db) {\n             Some(it) => it.to_smol_str(),\n             None => \"\".into(),\n@@ -429,10 +435,10 @@ impl ToNav for hir::Local {\n             SymbolKind::Local\n         };\n         NavigationTarget {\n-            file_id: full_range.file_id,\n+            file_id,\n             name,\n             kind: Some(kind),\n-            full_range: full_range.range,\n+            full_range,\n             focus_range,\n             container_name: None,\n             description: None,\n@@ -443,17 +449,18 @@ impl ToNav for hir::Local {\n \n impl ToNav for hir::Label {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        let src = self.source(db);\n-        let node = src.value.syntax();\n-        let FileRange { file_id, range } = src.with_value(node).original_file_range(db);\n-        let focus_range =\n-            src.value.lifetime().and_then(|lt| lt.lifetime_ident_token()).map(|lt| lt.text_range());\n+        let InFile { file_id, value } = self.source(db);\n         let name = self.name(db).to_smol_str();\n+\n+        let range = |syntax: &_| InFile::new(file_id, syntax).original_file_range(db);\n+        let FileRange { file_id, range: full_range } = range(value.syntax());\n+        let focus_range = value.lifetime().map(|lt| range(lt.syntax()).range);\n+\n         NavigationTarget {\n             file_id,\n             name,\n             kind: Some(SymbolKind::Label),\n-            full_range: range,\n+            full_range,\n             focus_range,\n             container_name: None,\n             description: None,\n@@ -464,21 +471,25 @@ impl ToNav for hir::Label {\n \n impl TryToNav for hir::TypeParam {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n-        let src = self.source(db)?;\n-        let full_range = match &src.value {\n-            Either::Left(type_param) => type_param.syntax().text_range(),\n+        let InFile { file_id, value } = self.source(db)?;\n+        let name = self.name(db).to_smol_str();\n+\n+        let range = |syntax: &_| InFile::new(file_id, syntax).original_file_range(db);\n+        let focus_range = |syntax: &_| InFile::new(file_id, syntax).original_file_range_opt(db);\n+        let FileRange { file_id, range: full_range } = match &value {\n+            Either::Left(type_param) => range(type_param.syntax()),\n             Either::Right(trait_) => trait_\n                 .name()\n-                .map_or_else(|| trait_.syntax().text_range(), |name| name.syntax().text_range()),\n+                .and_then(|name| focus_range(name.syntax()))\n+                .unwrap_or_else(|| range(trait_.syntax())),\n         };\n-        let focus_range = match &src.value {\n-            Either::Left(it) => it.name(),\n-            Either::Right(it) => it.name(),\n-        }\n-        .map(|it| it.syntax().text_range());\n+        let focus_range = value\n+            .either(|it| it.name(), |it| it.name())\n+            .and_then(|it| focus_range(it.syntax()))\n+            .map(|it| it.range);\n         Some(NavigationTarget {\n-            file_id: src.file_id.original_file(db),\n-            name: self.name(db).to_smol_str(),\n+            file_id,\n+            name,\n             kind: Some(SymbolKind::TypeParam),\n             full_range,\n             focus_range,\n@@ -491,11 +502,14 @@ impl TryToNav for hir::TypeParam {\n \n impl TryToNav for hir::LifetimeParam {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n-        let src = self.source(db)?;\n-        let full_range = src.value.syntax().text_range();\n+        let InFile { file_id, value } = self.source(db)?;\n+        let name = self.name(db).to_smol_str();\n+\n+        let FileRange { file_id, range: full_range } =\n+            InFile::new(file_id, value.syntax()).original_file_range(db);\n         Some(NavigationTarget {\n-            file_id: src.file_id.original_file(db),\n-            name: self.name(db).to_smol_str(),\n+            file_id,\n+            name,\n             kind: Some(SymbolKind::LifetimeParam),\n             full_range,\n             focus_range: Some(full_range),\n@@ -508,14 +522,21 @@ impl TryToNav for hir::LifetimeParam {\n \n impl TryToNav for hir::ConstParam {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n-        let src = self.source(db)?;\n-        let full_range = src.value.syntax().text_range();\n+        let InFile { file_id, value } = self.source(db)?;\n+        let name = self.name(db).to_smol_str();\n+\n+        let focus_range = value\n+            .name()\n+            .and_then(|it| InFile::new(file_id, it.syntax()).original_file_range_opt(db))\n+            .map(|it| it.range);\n+        let FileRange { file_id, range: full_range } =\n+            InFile::new(file_id, value.syntax()).original_file_range(db);\n         Some(NavigationTarget {\n-            file_id: src.file_id.original_file(db),\n-            name: self.name(db).to_smol_str(),\n+            file_id,\n+            name,\n             kind: Some(SymbolKind::ConstParam),\n             full_range,\n-            focus_range: src.value.name().map(|n| n.syntax().text_range()),\n+            focus_range,\n             container_name: None,\n             description: None,\n             docs: None,"}]}