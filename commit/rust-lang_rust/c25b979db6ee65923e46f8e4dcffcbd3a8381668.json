{"sha": "c25b979db6ee65923e46f8e4dcffcbd3a8381668", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNWI5NzlkYjZlZTY1OTIzZTQ2ZjhlNGRjZmZjYmQzYTgzODE2Njg=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-30T07:26:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-30T07:26:52Z"}, "message": "Rollup merge of #87052 - phlopsi:patch-1, r=jyn514\n\nOptimize fmt::PadAdapter::wrap\n\nAfter adding the first `write!` usage to my project and printing the result to the console, I noticed, that my binary contains the strings \"called `Option::unwrap()` on a `None` value`\" and more importantly \"C:\\Users\\Patrick Fischer\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\core\\src\\fmt\\builders.rs\", with my release build being configured as follows:\n```\n[profile.release]\npanic = \"abort\"\ncodegen-units = 1\nstrip = \"symbols\" # the important bit\nlto = true\n```\nI am in a no_std environment and my custom panic handler is a simple `loop {}`. I did not expect the above information to be preserved. I heavily suspect the edited function to be the culprit. It contains the only direct use of `Option::unwrap` in the entire file and I tracked the symbols in the assembly to be used from the section `_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17ha1d5e5efe167202aE`.\n\nAside from me suspecting this function to be the culprit, the replaced code performs the same operation as `Option::insert`, but without the `unreachable_unchecked` optimization `Option::insert` provides. Therefore, it makes sense to me to use the more optimized version, instead.\n\nAs I don't change any semantics, I hope a simple pull request suffices.", "tree": {"sha": "f205aa04b82c65b1f0f92dca8850c08084b06cfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f205aa04b82c65b1f0f92dca8850c08084b06cfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c25b979db6ee65923e46f8e4dcffcbd3a8381668", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhA6m8CRBK7hj4Ov3rIwAA68wIADe9Lw7rY5NygEzNZHSKpQcX\n5xo+qi0D1da+oAzx3qtZM2PAOWNJjb0rdh3uJ0ICNXB27Nygv7ZTyNslAPz4HK+X\nDYvvKgWwLhQ4frqIIOAykPPxK2meGXxFlgOFn8uz4eCESm/Vkct9ON6Ea3SrNUHF\nnl1zPRUMuZ5UYEYQg05rNIAscuAG64hEZWS1OZi9i9Z39Y5+UaMwc1UEcautH7PN\nSf2TDDCQKPDj7iKOBPdYDWSdWQL2dsWTtEaKpL6JPSsNsnELwaQkJs/ZwDxCXjEk\ntDmxKnmKMT2jPAHSALImcCtkeJjRZGViWNLU0122G15a/Bojnc2t7aKjyr9lekI=\n=rQV4\n-----END PGP SIGNATURE-----\n", "payload": "tree f205aa04b82c65b1f0f92dca8850c08084b06cfd\nparent fe1c942eee3489743d655d81ca89166217db0547\nparent 3e82dca65c226324580db910b2609e8dce1850ac\nauthor Yuki Okushi <jtitor@2k36.org> 1627630012 +0900\ncommitter GitHub <noreply@github.com> 1627630012 +0900\n\nRollup merge of #87052 - phlopsi:patch-1, r=jyn514\n\nOptimize fmt::PadAdapter::wrap\n\nAfter adding the first `write!` usage to my project and printing the result to the console, I noticed, that my binary contains the strings \"called `Option::unwrap()` on a `None` value`\" and more importantly \"C:\\Users\\Patrick Fischer\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\core\\src\\fmt\\builders.rs\", with my release build being configured as follows:\n```\n[profile.release]\npanic = \"abort\"\ncodegen-units = 1\nstrip = \"symbols\" # the important bit\nlto = true\n```\nI am in a no_std environment and my custom panic handler is a simple `loop {}`. I did not expect the above information to be preserved. I heavily suspect the edited function to be the culprit. It contains the only direct use of `Option::unwrap` in the entire file and I tracked the symbols in the assembly to be used from the section `_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17ha1d5e5efe167202aE`.\n\nAside from me suspecting this function to be the culprit, the replaced code performs the same operation as `Option::insert`, but without the `unreachable_unchecked` optimization `Option::insert` provides. Therefore, it makes sense to me to use the more optimized version, instead.\n\nAs I don't change any semantics, I hope a simple pull request suffices.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c25b979db6ee65923e46f8e4dcffcbd3a8381668", "html_url": "https://github.com/rust-lang/rust/commit/c25b979db6ee65923e46f8e4dcffcbd3a8381668", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c25b979db6ee65923e46f8e4dcffcbd3a8381668/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe1c942eee3489743d655d81ca89166217db0547", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1c942eee3489743d655d81ca89166217db0547", "html_url": "https://github.com/rust-lang/rust/commit/fe1c942eee3489743d655d81ca89166217db0547"}, {"sha": "3e82dca65c226324580db910b2609e8dce1850ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e82dca65c226324580db910b2609e8dce1850ac", "html_url": "https://github.com/rust-lang/rust/commit/3e82dca65c226324580db910b2609e8dce1850ac"}], "stats": {"total": 5, "additions": 1, "deletions": 4}, "files": [{"sha": "8e7b03d02f157db216cb9fb71440374600cfe997", "filename": "library/core/src/fmt/builders.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c25b979db6ee65923e46f8e4dcffcbd3a8381668/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c25b979db6ee65923e46f8e4dcffcbd3a8381668/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs?ref=c25b979db6ee65923e46f8e4dcffcbd3a8381668", "patch": "@@ -23,10 +23,7 @@ impl<'buf, 'state> PadAdapter<'buf, 'state> {\n         slot: &'slot mut Option<Self>,\n         state: &'state mut PadAdapterState,\n     ) -> fmt::Formatter<'slot> {\n-        fmt.wrap_buf(move |buf| {\n-            *slot = Some(PadAdapter { buf, state });\n-            slot.as_mut().unwrap()\n-        })\n+        fmt.wrap_buf(move |buf| slot.insert(PadAdapter { buf, state }))\n     }\n }\n "}]}