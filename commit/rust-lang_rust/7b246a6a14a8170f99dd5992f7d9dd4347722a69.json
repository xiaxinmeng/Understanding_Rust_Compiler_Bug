{"sha": "7b246a6a14a8170f99dd5992f7d9dd4347722a69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMjQ2YTZhMTRhODE3MGY5OWRkNTk5MmY3ZDlkZDQzNDc3MjJhNjk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-29T12:12:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-29T12:12:19Z"}, "message": "Merge #7076\n\n7076: Properly parse path separators in format-like postfix r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "fb4450a7d6a1b4571032f3568549aeb7eb286b3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb4450a7d6a1b4571032f3568549aeb7eb286b3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b246a6a14a8170f99dd5992f7d9dd4347722a69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf6x0jCRBK7hj4Ov3rIwAAdHIIAEI/eSY0WqP8dcnTcmoLiwOG\nTZKVm1u9TGimHo1dZyaJQqeljjudRwqRziv4ixONmSo9Vd++QznLYXBMqXj+58pQ\n3tc9I0V4mddyhyMBtG+zM5eRcKGxIvKZwDLvecufRbU+h02QBFGMnovXdxax17si\np2FCnJctrN3Szv28xx36NVUobTAHChXtXIprxv7LZE14Wd8TozuqOErxBk48qEH+\noPSqcN24TChwVQk4xpk/0IV1ElTgKDOKylnJYUfbFZ18xxiKVqTl+6N+D3FqmMVN\nNNrNpuB/wVVRMzZccITSZhNL1moQCxPIN8clVGZag6CDYtr41LX5eAbqE0rXopQ=\n=lPDU\n-----END PGP SIGNATURE-----\n", "payload": "tree fb4450a7d6a1b4571032f3568549aeb7eb286b3d\nparent bd18093740e55b3afce7d63cd99b1baf5639e50b\nparent ddc25d87ca3ae8d355f3ead885e9bbd45844f698\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609243939 +0000\ncommitter GitHub <noreply@github.com> 1609243939 +0000\n\nMerge #7076\n\n7076: Properly parse path separators in format-like postfix r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b246a6a14a8170f99dd5992f7d9dd4347722a69", "html_url": "https://github.com/rust-lang/rust/commit/7b246a6a14a8170f99dd5992f7d9dd4347722a69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b246a6a14a8170f99dd5992f7d9dd4347722a69/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd18093740e55b3afce7d63cd99b1baf5639e50b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd18093740e55b3afce7d63cd99b1baf5639e50b", "html_url": "https://github.com/rust-lang/rust/commit/bd18093740e55b3afce7d63cd99b1baf5639e50b"}, {"sha": "ddc25d87ca3ae8d355f3ead885e9bbd45844f698", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc25d87ca3ae8d355f3ead885e9bbd45844f698", "html_url": "https://github.com/rust-lang/rust/commit/ddc25d87ca3ae8d355f3ead885e9bbd45844f698"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "def4b13fba715008be025e7ba5bb9bd43eba5347", "filename": "crates/completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7b246a6a14a8170f99dd5992f7d9dd4347722a69/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b246a6a14a8170f99dd5992f7d9dd4347722a69/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=7b246a6a14a8170f99dd5992f7d9dd4347722a69", "patch": "@@ -108,7 +108,8 @@ impl FormatStrParser {\n         // \"{MyStruct { val_a: 0, val_b: 1 }}\".\n         let mut inexpr_open_count = 0;\n \n-        for chr in self.input.chars() {\n+        let mut chars = self.input.chars().peekable();\n+        while let Some(chr) = chars.next() {\n             match (self.state, chr) {\n                 (State::NotExpr, '{') => {\n                     self.output.push(chr);\n@@ -157,6 +158,11 @@ impl FormatStrParser {\n                         inexpr_open_count -= 1;\n                     }\n                 }\n+                (State::Expr, ':') if chars.peek().copied() == Some(':') => {\n+                    // path seperator\n+                    current_expr.push_str(\"::\");\n+                    chars.next();\n+                }\n                 (State::Expr, ':') => {\n                     if inexpr_open_count == 0 {\n                         // We're outside of braces, thus assume that it's a specifier, like \"{Some(value):?}\"\n@@ -249,6 +255,9 @@ mod tests {\n                 expect![[\"{:?}; SomeStruct { val_a: 0, val_b: 1 }\"]],\n             ),\n             (\"{     2 + 2        }\", expect![[\"{}; 2 + 2\"]]),\n+            (\"{strsim::jaro_winkle(a)}\", expect![[\"{}; strsim::jaro_winkle(a)\"]]),\n+            (\"{foo::bar::baz()}\", expect![[\"{}; foo::bar::baz()\"]]),\n+            (\"{foo::bar():?}\", expect![[\"{:?}; foo::bar()\"]]),\n         ];\n \n         for (input, output) in test_vector {"}]}