{"sha": "100141f57c27d0b282aec6156d60ab9d26583a47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMDE0MWY1N2MyN2QwYjI4MmFlYzYxNTZkNjBhYjlkMjY1ODNhNDc=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T17:32:09Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T17:32:09Z"}, "message": "Remove null checks, fall through to UB upon deref", "tree": {"sha": "2955ee0e641f4fff716e2d890d8f3e29ca27feae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2955ee0e641f4fff716e2d890d8f3e29ca27feae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/100141f57c27d0b282aec6156d60ab9d26583a47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/100141f57c27d0b282aec6156d60ab9d26583a47", "html_url": "https://github.com/rust-lang/rust/commit/100141f57c27d0b282aec6156d60ab9d26583a47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/100141f57c27d0b282aec6156d60ab9d26583a47/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79f3307f308ac1d9304437509db0f8a4a295d63b", "url": "https://api.github.com/repos/rust-lang/rust/commits/79f3307f308ac1d9304437509db0f8a4a295d63b", "html_url": "https://github.com/rust-lang/rust/commit/79f3307f308ac1d9304437509db0f8a4a295d63b"}], "stats": {"total": 70, "additions": 0, "deletions": 70}, "files": [{"sha": "c9d846288a43e2147ccfd39dc3f6f1919444ae9c", "filename": "src/shims/sync.rs", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/100141f57c27d0b282aec6156d60ab9d26583a47/src%2Fshims%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100141f57c27d0b282aec6156d60ab9d26583a47/src%2Fshims%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fsync.rs?ref=100141f57c27d0b282aec6156d60ab9d26583a47", "patch": "@@ -179,11 +179,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutexattr_init(&mut self, attr_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let attr = this.read_scalar(attr_op)?.not_undef()?;\n-        if this.is_null(attr)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         let default_kind = this.eval_libc(\"PTHREAD_MUTEX_DEFAULT\")?;\n         mutexattr_set_kind(this, attr_op, default_kind)?;\n \n@@ -197,11 +192,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let attr = this.read_scalar(attr_op)?.not_undef()?;\n-        if this.is_null(attr)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         let kind = this.read_scalar(kind_op)?.not_undef()?;\n         if kind == this.eval_libc(\"PTHREAD_MUTEX_NORMAL\")?\n             || kind == this.eval_libc(\"PTHREAD_MUTEX_ERRORCHECK\")?\n@@ -219,11 +209,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutexattr_destroy(&mut self, attr_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let attr = this.read_scalar(attr_op)?.not_undef()?;\n-        if this.is_null(attr)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         mutexattr_set_kind(this, attr_op, ScalarMaybeUndef::Undef)?;\n \n         Ok(0)\n@@ -236,11 +221,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n-        if this.is_null(mutex)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         let attr = this.read_scalar(attr_op)?.not_undef()?;\n         let kind = if this.is_null(attr)? {\n             this.eval_libc(\"PTHREAD_MUTEX_DEFAULT\")?\n@@ -257,11 +237,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_lock(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n-        if this.is_null(mutex)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         let kind = mutex_get_kind(this, mutex_op)?.not_undef()?;\n         let locked_count = mutex_get_locked_count(this, mutex_op)?.to_u32()?;\n \n@@ -295,11 +270,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_trylock(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n-        if this.is_null(mutex)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         let kind = mutex_get_kind(this, mutex_op)?.not_undef()?;\n         let locked_count = mutex_get_locked_count(this, mutex_op)?.to_u32()?;\n \n@@ -328,11 +298,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_unlock(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n-        if this.is_null(mutex)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         let kind = mutex_get_kind(this, mutex_op)?.not_undef()?;\n         let locked_count = mutex_get_locked_count(this, mutex_op)?.to_u32()?;\n \n@@ -371,11 +336,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_destroy(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n-        if this.is_null(mutex)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         if mutex_get_locked_count(this, mutex_op)?.to_u32()? != 0 {\n             return this.eval_libc_i32(\"EBUSY\");\n         }\n@@ -389,11 +349,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_rdlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n-        if this.is_null(rwlock)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         let readers = rwlock_get_readers(this, rwlock_op)?.to_u32()?;\n         let writers = rwlock_get_writers(this, rwlock_op)?.to_u32()?;\n         if writers != 0 {\n@@ -414,11 +369,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_tryrdlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n-        if this.is_null(rwlock)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         let readers = rwlock_get_readers(this, rwlock_op)?.to_u32()?;\n         let writers = rwlock_get_writers(this, rwlock_op)?.to_u32()?;\n         if writers != 0 {\n@@ -437,11 +387,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_wrlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n-        if this.is_null(rwlock)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         let readers = rwlock_get_readers(this, rwlock_op)?.to_u32()?;\n         let writers = rwlock_get_writers(this, rwlock_op)?.to_u32()?;\n         if readers != 0 {\n@@ -461,11 +406,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_trywrlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n-        if this.is_null(rwlock)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         let readers = rwlock_get_readers(this, rwlock_op)?.to_u32()?;\n         let writers = rwlock_get_writers(this, rwlock_op)?.to_u32()?;\n         if readers != 0 || writers != 0 {\n@@ -479,11 +419,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_unlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n-        if this.is_null(rwlock)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         let readers = rwlock_get_readers(this, rwlock_op)?.to_u32()?;\n         let writers = rwlock_get_writers(this, rwlock_op)?.to_u32()?;\n         if let Some(new_readers) = readers.checked_sub(1) {\n@@ -500,11 +435,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_destroy(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n-        if this.is_null(rwlock)? {\n-            return this.eval_libc_i32(\"EINVAL\");\n-        }\n-\n         if rwlock_get_readers(this, rwlock_op)?.to_u32()? != 0 {\n             return this.eval_libc_i32(\"EBUSY\");\n         }"}]}