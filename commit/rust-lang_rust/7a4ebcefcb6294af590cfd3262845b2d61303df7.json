{"sha": "7a4ebcefcb6294af590cfd3262845b2d61303df7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNGViY2VmY2I2Mjk0YWY1OTBjZmQzMjYyODQ1YjJkNjEzMDNkZjc=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-02T20:50:49Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-02T22:20:59Z"}, "message": "Update nbody benchmark to more idiomatic Rust; nix obsolete comments", "tree": {"sha": "660162170cfb4a38a5388e18c610576e1f4557e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/660162170cfb4a38a5388e18c610576e1f4557e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4ebcefcb6294af590cfd3262845b2d61303df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4ebcefcb6294af590cfd3262845b2d61303df7", "html_url": "https://github.com/rust-lang/rust/commit/7a4ebcefcb6294af590cfd3262845b2d61303df7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4ebcefcb6294af590cfd3262845b2d61303df7/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb28b768af676b61253645fdad77c258c7d2be77", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb28b768af676b61253645fdad77c258c7d2be77", "html_url": "https://github.com/rust-lang/rust/commit/eb28b768af676b61253645fdad77c258c7d2be77"}], "stats": {"total": 58, "additions": 27, "deletions": 31}, "files": [{"sha": "aa9d411f2b63c4cd5e7bef3eb5606bbe2c356236", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 27, "deletions": 31, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7a4ebcefcb6294af590cfd3262845b2d61303df7/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4ebcefcb6294af590cfd3262845b2d61303df7/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=7a4ebcefcb6294af590cfd3262845b2d61303df7", "patch": "@@ -22,29 +22,25 @@ fn main(args: ~[str]) {\n         args\n     };\n     let n = int::from_str(args[1]).get();\n-    let bodies: ~[Body::props] = NBodySystem::MakeNBodySystem();\n+    let bodies: ~[Body::props] = NBodySystem::make();\n     io::println(#fmt(\"%f\", NBodySystem::energy(bodies)));\n-    let mut i: int = 0;\n+    let mut i = 0;\n     while i < n { NBodySystem::advance(bodies, 0.01); i += 1; }\n     io::println(#fmt(\"%f\", NBodySystem::energy(bodies)));\n }\n \n-// Body::props is a record of floats, so\n-// vec<Body::props> is a vector of records of floats\n-\n mod NBodySystem {\n \n-    fn MakeNBodySystem() -> ~[Body::props] {\n-        // these each return a Body::props\n+    fn make() -> ~[Body::props] {\n         let bodies: ~[Body::props] =\n             ~[Body::sun(), Body::jupiter(), Body::saturn(), Body::uranus(),\n-             Body::neptune()];\n+              Body::neptune()];\n \n-        let mut px: float = 0.0;\n-        let mut py: float = 0.0;\n-        let mut pz: float = 0.0;\n+        let mut px = 0.0;\n+        let mut py = 0.0;\n+        let mut pz = 0.0;\n \n-        let mut i: int = 0;\n+        let mut i = 0;\n         while i < 5 {\n             px += bodies[i].vx * bodies[i].mass;\n             py += bodies[i].vy * bodies[i].mass;\n@@ -54,16 +50,16 @@ mod NBodySystem {\n         }\n \n         // side-effecting\n-        Body::offsetMomentum(bodies[0], px, py, pz);\n+        Body::offset_momentum(bodies[0], px, py, pz);\n \n         ret bodies;\n     }\n \n     fn advance(bodies: ~[Body::props], dt: float) {\n \n-        let mut i: int = 0;\n+        let mut i = 0;\n         while i < 5 {\n-            let mut j: int = i + 1;\n+            let mut j = i + 1;\n             while j < 5 { advance_one(bodies[i], bodies[j], dt); j += 1; }\n \n             i += 1;\n@@ -74,14 +70,14 @@ mod NBodySystem {\n     }\n \n     fn advance_one(bi: Body::props, bj: Body::props, dt: float) unsafe {\n-        let dx: float = bi.x - bj.x;\n-        let dy: float = bi.y - bj.y;\n-        let dz: float = bi.z - bj.z;\n+        let dx = bi.x - bj.x;\n+        let dy = bi.y - bj.y;\n+        let dz = bi.z - bj.z;\n \n-        let dSquared: float = dx * dx + dy * dy + dz * dz;\n+        let dSquared = dx * dx + dy * dy + dz * dz;\n \n-        let distance: float = libc::sqrt(dSquared);\n-        let mag: float = dt / (dSquared * distance);\n+        let distance = libc::sqrt(dSquared);\n+        let mag = dt / (dSquared * distance);\n \n         bi.vx -= dx * bj.mass * mag;\n         bi.vy -= dy * bj.mass * mag;\n@@ -99,20 +95,20 @@ mod NBodySystem {\n     }\n \n     fn energy(bodies: ~[Body::props]) -> float unsafe {\n-        let mut dx: float;\n-        let mut dy: float;\n-        let mut dz: float;\n-        let mut distance: float;\n-        let mut e: float = 0.0;\n+        let mut dx;\n+        let mut dy;\n+        let mut dz;\n+        let mut distance;\n+        let mut e = 0.0;\n \n-        let mut i: int = 0;\n+        let mut i = 0;\n         while i < 5 {\n             e +=\n                 0.5 * bodies[i].mass *\n-                    (bodies[i].vx * bodies[i].vx + bodies[i].vy * bodies[i].vy\n-                         + bodies[i].vz * bodies[i].vz);\n+                (bodies[i].vx * bodies[i].vx + bodies[i].vy * bodies[i].vy\n+                 + bodies[i].vz * bodies[i].vz);\n \n-            let mut j: int = i + 1;\n+            let mut j = i + 1;\n             while j < 5 {\n                 dx = bodies[i].x - bodies[j].x;\n                 dy = bodies[i].y - bodies[j].y;\n@@ -197,7 +193,7 @@ mod Body {\n              mass: SOLAR_MASS};\n     }\n \n-    fn offsetMomentum(props: Body::props, px: float, py: float, pz: float) {\n+    fn offset_momentum(props: Body::props, px: float, py: float, pz: float) {\n         props.vx = -px / SOLAR_MASS;\n         props.vy = -py / SOLAR_MASS;\n         props.vz = -pz / SOLAR_MASS;"}]}