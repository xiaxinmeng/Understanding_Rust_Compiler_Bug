{"sha": "5c3d6320deb20f78d83d12fb3a319b9dd6b15290", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjM2Q2MzIwZGViMjBmNzhkODNkMTJmYjNhMzE5YjlkZDZiMTUyOTA=", "commit": {"author": {"name": "Lymia Aluysia", "email": "lymia@lymiahugs.com", "date": "2018-03-18T17:16:02Z"}, "committer": {"name": "Lymia Aluysia", "email": "lymia@lymiahugs.com", "date": "2018-03-18T17:16:02Z"}, "message": "Return a is_raw parameter from Token::ident rather than having separate methods.", "tree": {"sha": "eb05d495d99a1d3e511f7e66657a105d5e12bcd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb05d495d99a1d3e511f7e66657a105d5e12bcd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c3d6320deb20f78d83d12fb3a319b9dd6b15290", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEfrc19M/exUzAyXK/2y4gTJiSUfcFAlqunuIACgkQ2y4gTJiS\nUffQixAAo+a9z06utzKkA8lU/2UFgNfx44D/mB5kfeW3Y8L+deXLpu5qiyIDtbKT\nn+QN6/j33D2E3vBNnty8Y+fRKJLu1dDgjWAYd/MUReFBczeSrHwOhsSr2c8NcwoX\n84HrSSTYmQFzgV6onxyC1t6U+tzGdA058ug3Sn/GBtJqImbsRMLd1szgRjg08hh6\nKNZ53Zccycj+PbRvG4VFbXtx0tRynCLoIzqnMsvVnnBzEUATxaKPcSrjo2qzTKxO\nQPofOgMv9J4WKpXPN5nL9bhwWGnRB1129SDZg1o3iCHcOY/UIdk40ohNpsJpIkr/\nrfbQZ44KP1TJReHO+LOYuF6ceULM0TIjrPZQHUmaDIl9BGU7E5HTjSiq6UxkmaD3\nglVL1GqM7ltEAYDCJdw0BZHJS9yfZ7GcmfqrCQCEY8GnjkFKN/qLpSjCVOL2QhV+\nr1PGxq4YJW2Jm7M+IQh6m4cfc76YK6+8yUPVdYI2H+UMYJ72VEYETU450xc+whAp\nLNHZmoL1sHUFT5e135yvaXN3xWe0GIZ/jHcDvKBLXKF4sIg/6CViFS2+dk485D7h\nf7QGh+GPwt7x1aWuicfClvwdYy1HIK6tTMlbTWEiQTcgHwMovnnFOU4VY3SBQzP9\nbE7kKbRKy2bxEl/1cJm6xlspDHiGJuBpY5l7f74Re20wTeB3S6o=\n=Qq9o\n-----END PGP SIGNATURE-----", "payload": "tree eb05d495d99a1d3e511f7e66657a105d5e12bcd9\nparent d2e7953d1325b1a1fe1cef526dbe8d23fa3e00a1\nauthor Lymia Aluysia <lymia@lymiahugs.com> 1521393362 -0500\ncommitter Lymia Aluysia <lymia@lymiahugs.com> 1521393362 -0500\n\nReturn a is_raw parameter from Token::ident rather than having separate methods.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3d6320deb20f78d83d12fb3a319b9dd6b15290", "html_url": "https://github.com/rust-lang/rust/commit/5c3d6320deb20f78d83d12fb3a319b9dd6b15290", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c3d6320deb20f78d83d12fb3a319b9dd6b15290/comments", "author": {"login": "Lymia", "id": 483849, "node_id": "MDQ6VXNlcjQ4Mzg0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/483849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lymia", "html_url": "https://github.com/Lymia", "followers_url": "https://api.github.com/users/Lymia/followers", "following_url": "https://api.github.com/users/Lymia/following{/other_user}", "gists_url": "https://api.github.com/users/Lymia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lymia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lymia/subscriptions", "organizations_url": "https://api.github.com/users/Lymia/orgs", "repos_url": "https://api.github.com/users/Lymia/repos", "events_url": "https://api.github.com/users/Lymia/events{/privacy}", "received_events_url": "https://api.github.com/users/Lymia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lymia", "id": 483849, "node_id": "MDQ6VXNlcjQ4Mzg0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/483849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lymia", "html_url": "https://github.com/Lymia", "followers_url": "https://api.github.com/users/Lymia/followers", "following_url": "https://api.github.com/users/Lymia/following{/other_user}", "gists_url": "https://api.github.com/users/Lymia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lymia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lymia/subscriptions", "organizations_url": "https://api.github.com/users/Lymia/orgs", "repos_url": "https://api.github.com/users/Lymia/repos", "events_url": "https://api.github.com/users/Lymia/events{/privacy}", "received_events_url": "https://api.github.com/users/Lymia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2e7953d1325b1a1fe1cef526dbe8d23fa3e00a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e7953d1325b1a1fe1cef526dbe8d23fa3e00a1", "html_url": "https://github.com/rust-lang/rust/commit/d2e7953d1325b1a1fe1cef526dbe8d23fa3e00a1"}], "stats": {"total": 53, "additions": 19, "deletions": 34}, "files": [{"sha": "8cb331c65da2871c5ffca5f7a7d178bff1a08c0b", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d6320deb20f78d83d12fb3a319b9dd6b15290/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d6320deb20f78d83d12fb3a319b9dd6b15290/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=5c3d6320deb20f78d83d12fb3a319b9dd6b15290", "patch": "@@ -364,8 +364,8 @@ pub fn parse_failure_msg(tok: Token) -> String {\n \n /// Perform a token equality check, ignoring syntax context (that is, an unhygienic comparison)\n fn token_name_eq(t1: &Token, t2: &Token) -> bool {\n-    if let (Some(id1), Some(id2)) = (t1.ident(), t2.ident()) {\n-        id1.name == id2.name && t1.is_raw_ident() == t2.is_raw_ident()\n+    if let (Some((id1, is_raw1)), Some((id2, is_raw2))) = (t1.ident(), t2.ident()) {\n+        id1.name == id2.name && is_raw1 == is_raw2\n     } else if let (&token::Lifetime(id1), &token::Lifetime(id2)) = (t1, t2) {\n         id1.name == id2.name\n     } else {"}, {"sha": "f324edeb1178ad49db4d4fc6e9f9cda20dc56be6", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d6320deb20f78d83d12fb3a319b9dd6b15290/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d6320deb20f78d83d12fb3a319b9dd6b15290/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=5c3d6320deb20f78d83d12fb3a319b9dd6b15290", "patch": "@@ -200,7 +200,7 @@ pub fn parse(\n                 let span = match trees.next() {\n                     Some(tokenstream::TokenTree::Token(span, token::Colon)) => match trees.next() {\n                         Some(tokenstream::TokenTree::Token(end_sp, ref tok)) => match tok.ident() {\n-                            Some(kind) => {\n+                            Some((kind, _)) => {\n                                 let span = end_sp.with_lo(start_sp.lo());\n                                 result.push(TokenTree::MetaVarDecl(span, ident, kind));\n                                 continue;\n@@ -289,7 +289,7 @@ where\n             // `tree` is followed by an `ident`. This could be `$meta_var` or the `$crate` special\n             // metavariable that names the crate of the invokation.\n             Some(tokenstream::TokenTree::Token(ident_span, ref token)) if token.is_ident() => {\n-                let ident = token.ident().unwrap();\n+                let (ident, _) = token.ident().unwrap();\n                 let span = ident_span.with_lo(span.lo());\n                 if ident.name == keywords::Crate.name() {\n                     let ident = ast::Ident {"}, {"sha": "4e7a282adc5842a38dda60abca5b4ce3e7bdabbe", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d6320deb20f78d83d12fb3a319b9dd6b15290/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d6320deb20f78d83d12fb3a319b9dd6b15290/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=5c3d6320deb20f78d83d12fb3a319b9dd6b15290", "patch": "@@ -310,32 +310,17 @@ impl Token {\n         }\n     }\n \n-    fn ident_common(&self, allow_raw: bool) -> Option<ast::Ident> {\n+    pub fn ident(&self) -> Option<(ast::Ident, bool)> {\n         match *self {\n-            Ident(ident, is_raw) if !is_raw || allow_raw => Some(ident),\n+            Ident(ident, is_raw) => Some((ident, is_raw)),\n             Interpolated(ref nt) => match nt.0 {\n-                NtIdent(ident, is_raw) if !is_raw || allow_raw => Some(ident.node),\n+                NtIdent(ident, is_raw) => Some((ident.node, is_raw)),\n                 _ => None,\n             },\n             _ => None,\n         }\n     }\n \n-    pub fn nonraw_ident(&self) -> Option<ast::Ident> {\n-        self.ident_common(false)\n-    }\n-\n-    pub fn is_raw_ident(&self) -> bool {\n-        match *self {\n-            Ident(_, true) => true,\n-            _ => false,\n-        }\n-    }\n-\n-    pub fn ident(&self) -> Option<ast::Ident> {\n-        self.ident_common(true)\n-    }\n-\n     /// Returns `true` if the token is an identifier.\n     pub fn is_ident(&self) -> bool {\n         self.ident().is_some()\n@@ -404,37 +389,37 @@ impl Token {\n \n     /// Returns `true` if the token is a given keyword, `kw`.\n     pub fn is_keyword(&self, kw: keywords::Keyword) -> bool {\n-        self.nonraw_ident().map(|ident| ident.name == kw.name()).unwrap_or(false)\n+        self.ident().map(|(ident, is_raw)| ident.name == kw.name() && !is_raw).unwrap_or(false)\n     }\n \n     pub fn is_path_segment_keyword(&self) -> bool {\n-        match self.nonraw_ident() {\n-            Some(id) => is_path_segment_keyword(id),\n-            None => false,\n+        match self.ident() {\n+            Some((id, false)) => is_path_segment_keyword(id),\n+            _ => false,\n         }\n     }\n \n     // Returns true for reserved identifiers used internally for elided lifetimes,\n     // unnamed method parameters, crate root module, error recovery etc.\n     pub fn is_special_ident(&self) -> bool {\n-        match self.nonraw_ident() {\n-            Some(id) => is_special_ident(id),\n+        match self.ident() {\n+            Some((id, false)) => is_special_ident(id),\n             _ => false,\n         }\n     }\n \n     /// Returns `true` if the token is a keyword used in the language.\n     pub fn is_used_keyword(&self) -> bool {\n-        match self.nonraw_ident() {\n-            Some(id) => is_used_keyword(id),\n+        match self.ident() {\n+            Some((id, false)) => is_used_keyword(id),\n             _ => false,\n         }\n     }\n \n     /// Returns `true` if the token is a keyword reserved for possible future use.\n     pub fn is_unused_keyword(&self) -> bool {\n-        match self.nonraw_ident() {\n-            Some(id) => is_unused_keyword(id),\n+        match self.ident() {\n+            Some((id, false)) => is_unused_keyword(id),\n             _ => false,\n         }\n     }\n@@ -507,8 +492,8 @@ impl Token {\n \n     /// Returns `true` if the token is either a special identifier or a keyword.\n     pub fn is_reserved_ident(&self) -> bool {\n-        match self.nonraw_ident() {\n-            Some(id) => is_reserved_ident(id),\n+        match self.ident() {\n+            Some((id, false)) => is_reserved_ident(id),\n             _ => false,\n         }\n     }"}]}