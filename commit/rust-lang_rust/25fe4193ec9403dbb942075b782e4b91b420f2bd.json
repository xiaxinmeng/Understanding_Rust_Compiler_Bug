{"sha": "25fe4193ec9403dbb942075b782e4b91b420f2bd", "node_id": "C_kwDOAAsO6NoAKDI1ZmU0MTkzZWM5NDAzZGJiOTQyMDc1Yjc4MmU0YjkxYjQyMGYyYmQ", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-07-10T14:01:13Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-07-10T14:09:15Z"}, "message": "change applicability type to MaybeIncorrect", "tree": {"sha": "17572464d35c0470771cc9130a8baabbb2f0f51e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17572464d35c0470771cc9130a8baabbb2f0f51e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25fe4193ec9403dbb942075b782e4b91b420f2bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25fe4193ec9403dbb942075b782e4b91b420f2bd", "html_url": "https://github.com/rust-lang/rust/commit/25fe4193ec9403dbb942075b782e4b91b420f2bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25fe4193ec9403dbb942075b782e4b91b420f2bd/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d1b976b1d9f8f75d51d61390eeaf350737bf251", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1b976b1d9f8f75d51d61390eeaf350737bf251", "html_url": "https://github.com/rust-lang/rust/commit/4d1b976b1d9f8f75d51d61390eeaf350737bf251"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "32a14887d20ea1127cf4fbde3063ae81fd62089e", "filename": "clippy_lints/src/loops/explicit_counter_loop.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/25fe4193ec9403dbb942075b782e4b91b420f2bd/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fe4193ec9403dbb942075b782e4b91b420f2bd/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs?ref=25fe4193ec9403dbb942075b782e4b91b420f2bd", "patch": "@@ -1,5 +1,5 @@\n use super::{make_iterator_snippet, IncrementVisitor, InitializeVisitor, EXPLICIT_COUNTER_LOOP};\n-use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{get_enclosing_block, is_integer_const};\n use if_chain::if_chain;\n@@ -34,24 +34,29 @@ pub(super) fn check<'tcx>(\n                 if let Some((name, ty, initializer)) = initialize_visitor.get_result();\n                 if is_integer_const(cx, initializer, 0);\n                 then {\n-                    let mut applicability = Applicability::MachineApplicable;\n+                    let mut applicability = Applicability::MaybeIncorrect;\n \n                     let int_name = match ty.map(Ty::kind) {\n                         // usize or inferred\n                         Some(ty::Uint(UintTy::Usize)) | None => {\n-                            span_lint_and_sugg(\n+                            span_lint_and_then(\n                                 cx,\n                                 EXPLICIT_COUNTER_LOOP,\n                                 expr.span.with_hi(arg.span.hi()),\n                                 &format!(\"the variable `{}` is used as a loop counter\", name),\n-                                \"consider using\",\n-                                format!(\n-                                    \"for ({}, {}) in {}.enumerate()\",\n-                                    name,\n-                                    snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n-                                    make_iterator_snippet(cx, arg, &mut applicability),\n-                                ),\n-                                applicability,\n+                                |diag| {\n+                                    diag.span_suggestion(\n+                                        expr.span.with_hi(arg.span.hi()),\n+                                        \"consider using\",\n+                                        format!(\n+                                            \"for ({}, {}) in {}.enumerate()\",\n+                                            name,\n+                                            snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n+                                            make_iterator_snippet(cx, arg, &mut applicability),\n+                                        ),\n+                                        applicability,\n+                                    );\n+                                }\n                             );\n                             return;\n                         }"}]}