{"sha": "fb27c4cc70bc4b1f01847ca95933849152b4df80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMjdjNGNjNzBiYzRiMWYwMTg0N2NhOTU5MzM4NDkxNTJiNGRmODA=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-30T19:09:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-30T19:09:29Z"}, "message": "Rollup merge of #87557 - rylev:fix-invalid-prelude-collision-error, r=nikomatsakis\n\nFix issue with autofix for ambiguous associated function from Rust 2021 prelude when struct is generic\n\nFixes #86940\n\nThe test cases and associated issue should make it clear what specifically this is meant to fix. The fix is slightly hacky in that we check against the literal source code of the call site for the presence of `<` in order to determine if the user has included the generics for the struct (meaning we don't need to include them for them).\n\nr? ``@nikomatsakis``", "tree": {"sha": "a7178f668b522d4c8e9e274c399b7868935df5bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7178f668b522d4c8e9e274c399b7868935df5bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb27c4cc70bc4b1f01847ca95933849152b4df80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhBE5pCRBK7hj4Ov3rIwAA0P8IAJpjtRjBuEtQI8BzmzkUpx1e\nPQGK5ROj7WksBv1Q7U2n32S5h6gqLXrhc2XBOg959U5PXxMIlBjSobLEPxxCHiPT\nH95/dSwxOUnsVWprZ8NYdhefJ7k/gt00TWwOeZSWb6/dD7aQLG7BKYlrrXc4Zt8Q\nAkdlINdWBlb1n3e8tvC7t/u0E/CDeuj8VgOTTiXO53Bl0aTCXFR/TNRsRFFeqVBP\n92p7YKd5Ahc0So88OupIIHy6adxH7LeoJIZ8xwElPZQPyqFv207ZP6kPChnZi1Nt\nf1Di6ev2224KS3x0BtwZxFvfxo5Sp5ve8VUYwZ203uTWXS5Nh6SnPTYbI7t3x7o=\n=IowR\n-----END PGP SIGNATURE-----\n", "payload": "tree a7178f668b522d4c8e9e274c399b7868935df5bc\nparent f7a2a2281548c90214c18c6cb65030b70b58df7b\nparent 578fcbdb3c4cb893f5bd1d884788d60e2a2b6786\nauthor Yuki Okushi <jtitor@2k36.org> 1627672169 +0900\ncommitter GitHub <noreply@github.com> 1627672169 +0900\n\nRollup merge of #87557 - rylev:fix-invalid-prelude-collision-error, r=nikomatsakis\n\nFix issue with autofix for ambiguous associated function from Rust 2021 prelude when struct is generic\n\nFixes #86940\n\nThe test cases and associated issue should make it clear what specifically this is meant to fix. The fix is slightly hacky in that we check against the literal source code of the call site for the presence of `<` in order to determine if the user has included the generics for the struct (meaning we don't need to include them for them).\n\nr? ``@nikomatsakis``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb27c4cc70bc4b1f01847ca95933849152b4df80", "html_url": "https://github.com/rust-lang/rust/commit/fb27c4cc70bc4b1f01847ca95933849152b4df80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb27c4cc70bc4b1f01847ca95933849152b4df80/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7a2a2281548c90214c18c6cb65030b70b58df7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7a2a2281548c90214c18c6cb65030b70b58df7b", "html_url": "https://github.com/rust-lang/rust/commit/f7a2a2281548c90214c18c6cb65030b70b58df7b"}, {"sha": "578fcbdb3c4cb893f5bd1d884788d60e2a2b6786", "url": "https://api.github.com/repos/rust-lang/rust/commits/578fcbdb3c4cb893f5bd1d884788d60e2a2b6786", "html_url": "https://github.com/rust-lang/rust/commit/578fcbdb3c4cb893f5bd1d884788d60e2a2b6786"}], "stats": {"total": 129, "additions": 126, "deletions": 3}, "files": [{"sha": "6eb8af98640eb53f17bfbaf518bb03c1ac7348f3", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fb27c4cc70bc4b1f01847ca95933849152b4df80/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb27c4cc70bc4b1f01847ca95933849152b4df80/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=fb27c4cc70bc4b1f01847ca95933849152b4df80", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{Ref, Ty};\n+use rustc_middle::ty::{Adt, Ref, Ty};\n use rustc_session::lint::builtin::RUST_2021_PRELUDE_COLLISIONS;\n use rustc_span::symbol::kw::Underscore;\n use rustc_span::symbol::{sym, Ident};\n@@ -255,16 +255,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 method_name.name\n             ));\n \n-            let self_ty = self\n+            let self_ty_name = self\n                 .sess()\n                 .source_map()\n                 .span_to_snippet(self_ty_span)\n                 .unwrap_or_else(|_| self_ty.to_string());\n \n+            let self_ty_generics_count = match self_ty.kind() {\n+                // Get the number of generics the self type has (if an Adt) unless we can determine that\n+                // the user has written the self type with generics already which we (naively) do by looking\n+                // for a \"<\" in `self_ty_name`.\n+                Adt(def, _) if !self_ty_name.contains(\"<\") => self.tcx.generics_of(def.did).count(),\n+                _ => 0,\n+            };\n+            let self_ty_generics = if self_ty_generics_count > 0 {\n+                format!(\"<{}>\", vec![\"_\"; self_ty_generics_count].join(\", \"))\n+            } else {\n+                String::new()\n+            };\n             lint.span_suggestion(\n                 span,\n                 \"disambiguate the associated function\",\n-                format!(\"<{} as {}>::{}\", self_ty, trait_name, method_name.name,),\n+                format!(\n+                    \"<{}{} as {}>::{}\",\n+                    self_ty_name, self_ty_generics, trait_name, method_name.name,\n+                ),\n                 Applicability::MachineApplicable,\n             );\n "}, {"sha": "f0d8cb944cf841f49f39a7929da84c78afa32005", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fb27c4cc70bc4b1f01847ca95933849152b4df80/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fb27c4cc70bc4b1f01847ca95933849152b4df80/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed?ref=fb27c4cc70bc4b1f01847ca95933849152b4df80", "patch": "@@ -0,0 +1,37 @@\n+// test for https://github.com/rust-lang/rust/issues/86940\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_prelude_collisions)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n+\n+struct Generic<T, U>(T, U);\n+\n+trait MyFromIter {\n+    fn from_iter(_: i32) -> Self;\n+}\n+\n+impl MyFromIter for Generic<i32, i32> {\n+    fn from_iter(x: i32) -> Self {\n+        Self(x, x)\n+    }\n+}\n+\n+impl std::iter::FromIterator<i32> for Generic<i32, i32> {\n+    fn from_iter<T: IntoIterator<Item = i32>>(_: T) -> Self {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    <Generic<_, _> as MyFromIter>::from_iter(1);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~| this is accepted in the current edition (Rust 2018)\n+    <Generic::<i32, i32> as MyFromIter>::from_iter(1);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~| this is accepted in the current edition (Rust 2018)\n+    <Generic::<_, _> as MyFromIter>::from_iter(1);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~| this is accepted in the current edition (Rust 2018)\n+}"}, {"sha": "1984053705984a7c82e5806ab00cba2efc77e0c5", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fb27c4cc70bc4b1f01847ca95933849152b4df80/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb27c4cc70bc4b1f01847ca95933849152b4df80/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs?ref=fb27c4cc70bc4b1f01847ca95933849152b4df80", "patch": "@@ -0,0 +1,37 @@\n+// test for https://github.com/rust-lang/rust/issues/86940\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_prelude_collisions)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n+\n+struct Generic<T, U>(T, U);\n+\n+trait MyFromIter {\n+    fn from_iter(_: i32) -> Self;\n+}\n+\n+impl MyFromIter for Generic<i32, i32> {\n+    fn from_iter(x: i32) -> Self {\n+        Self(x, x)\n+    }\n+}\n+\n+impl std::iter::FromIterator<i32> for Generic<i32, i32> {\n+    fn from_iter<T: IntoIterator<Item = i32>>(_: T) -> Self {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    Generic::from_iter(1);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~| this is accepted in the current edition (Rust 2018)\n+    Generic::<i32, i32>::from_iter(1);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~| this is accepted in the current edition (Rust 2018)\n+    Generic::<_, _>::from_iter(1);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~| this is accepted in the current edition (Rust 2018)\n+}"}, {"sha": "2c6a63df42f2ce4b5041c8f099269eb0f6917975", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fb27c4cc70bc4b1f01847ca95933849152b4df80/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb27c4cc70bc4b1f01847ca95933849152b4df80/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr?ref=fb27c4cc70bc4b1f01847ca95933849152b4df80", "patch": "@@ -0,0 +1,34 @@\n+warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision-generic.rs:28:5\n+   |\n+LL |     Generic::from_iter(1);\n+   |     ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic<_, _> as MyFromIter>::from_iter`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/future-prelude-collision-generic.rs:5:9\n+   |\n+LL | #![warn(rust_2021_prelude_collisions)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+\n+warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision-generic.rs:31:5\n+   |\n+LL |     Generic::<i32, i32>::from_iter(1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<i32, i32> as MyFromIter>::from_iter`\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+\n+warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision-generic.rs:34:5\n+   |\n+LL |     Generic::<_, _>::from_iter(1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<_, _> as MyFromIter>::from_iter`\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "3a9fd69322869518567d41a2e18f556ac1cdbc88", "filename": "src/test/ui/rust-2021/prelude2021.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fb27c4cc70bc4b1f01847ca95933849152b4df80/src%2Ftest%2Fui%2Frust-2021%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb27c4cc70bc4b1f01847ca95933849152b4df80/src%2Ftest%2Fui%2Frust-2021%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fprelude2021.rs?ref=fb27c4cc70bc4b1f01847ca95933849152b4df80", "previous_filename": "src/test/ui/prelude2021.rs"}]}