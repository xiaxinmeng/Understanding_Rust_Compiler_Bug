{"sha": "4cc9d0ba7e454730988f318aeed92ab5e5ff8269", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYzlkMGJhN2U0NTQ3MzA5ODhmMzE4YWVlZDkyYWI1ZTVmZjgyNjk=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-26T23:07:40Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-26T23:07:40Z"}, "message": "Add additional constants to primitive floating point numbers\n\nThese follow the values defined in the C99 standard", "tree": {"sha": "9ae8a7eb75ad92fb3a4067f756f6b404700cea6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ae8a7eb75ad92fb3a4067f756f6b404700cea6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cc9d0ba7e454730988f318aeed92ab5e5ff8269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cc9d0ba7e454730988f318aeed92ab5e5ff8269", "html_url": "https://github.com/rust-lang/rust/commit/4cc9d0ba7e454730988f318aeed92ab5e5ff8269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cc9d0ba7e454730988f318aeed92ab5e5ff8269/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7cf89f6e8c076cfd844b884474279687554597e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cf89f6e8c076cfd844b884474279687554597e", "html_url": "https://github.com/rust-lang/rust/commit/b7cf89f6e8c076cfd844b884474279687554597e"}], "stats": {"total": 97, "additions": 96, "deletions": 1}, "files": [{"sha": "bc067369bdbfaef43492af08b910fe251bd9a808", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4cc9d0ba7e454730988f318aeed92ab5e5ff8269/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc9d0ba7e454730988f318aeed92ab5e5ff8269/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=4cc9d0ba7e454730988f318aeed92ab5e5ff8269", "patch": "@@ -508,6 +508,14 @@ impl Real for f32 {\n     fn tanh(&self) -> f32 { tanh(*self) }\n }\n \n+impl Bounded for f32 {\n+    #[inline(always)]\n+    fn min_value() -> f32 { 1.17549435e-38 }\n+\n+    #[inline(always)]\n+    fn max_value() -> f32 { 3.40282347e+38 }\n+}\n+\n impl Primitive for f32 {\n     #[inline(always)]\n     fn bits() -> uint { 32 }\n@@ -532,6 +540,27 @@ impl Float for f32 {\n     #[inline(always)]\n     fn is_NaN(&self) -> bool { *self != *self }\n \n+    #[inline(always)]\n+    fn mantissa_digits() -> uint { 24 }\n+\n+    #[inline(always)]\n+    fn digits() -> uint { 6 }\n+\n+    #[inline(always)]\n+    fn epsilon() -> f32 { 1.19209290e-07 }\n+\n+    #[inline(always)]\n+    fn min_exp() -> int { -125 }\n+\n+    #[inline(always)]\n+    fn max_exp() -> int { 128 }\n+\n+    #[inline(always)]\n+    fn min_10_exp() -> int { -37 }\n+\n+    #[inline(always)]\n+    fn max_10_exp() -> int { 38 }\n+\n     /// Returns `true` if the number is infinite\n     #[inline(always)]\n     fn is_infinite(&self) -> bool {"}, {"sha": "2a9f1cb3350fee7a84607f213f507d5eb7da1e03", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4cc9d0ba7e454730988f318aeed92ab5e5ff8269/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc9d0ba7e454730988f318aeed92ab5e5ff8269/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=4cc9d0ba7e454730988f318aeed92ab5e5ff8269", "patch": "@@ -548,6 +548,14 @@ impl RealExt for f64 {\n     fn yn(&self, n: int) -> f64 { yn(n as c_int, *self) }\n }\n \n+impl Bounded for f64 {\n+    #[inline(always)]\n+    fn min_value() -> f64 { 2.2250738585072014e-308 }\n+\n+    #[inline(always)]\n+    fn max_value() -> f64 { 1.7976931348623157e+308 }\n+}\n+\n impl Primitive for f64 {\n     #[inline(always)]\n     fn bits() -> uint { 64 }\n@@ -584,6 +592,27 @@ impl Float for f64 {\n         !(self.is_NaN() || self.is_infinite())\n     }\n \n+    #[inline(always)]\n+    fn mantissa_digits() -> uint { 53 }\n+\n+    #[inline(always)]\n+    fn digits() -> uint { 15 }\n+\n+    #[inline(always)]\n+    fn epsilon() -> f64 { 2.2204460492503131e-16 }\n+\n+    #[inline(always)]\n+    fn min_exp() -> int { -1021 }\n+\n+    #[inline(always)]\n+    fn max_exp() -> int { 1024 }\n+\n+    #[inline(always)]\n+    fn min_10_exp() -> int { -307 }\n+\n+    #[inline(always)]\n+    fn max_10_exp() -> int { 308 }\n+\n     ///\n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This\n     /// produces a more accurate result with better performance than a separate multiplication"}, {"sha": "55f12817026819a83450434dc6f9aaad14b7369e", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4cc9d0ba7e454730988f318aeed92ab5e5ff8269/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc9d0ba7e454730988f318aeed92ab5e5ff8269/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=4cc9d0ba7e454730988f318aeed92ab5e5ff8269", "patch": "@@ -700,6 +700,14 @@ impl Signed for float {\n     fn is_negative(&self) -> bool { *self < 0.0 || (1.0 / *self) == neg_infinity }\n }\n \n+impl Bounded for float {\n+    #[inline(always)]\n+    fn min_value() -> float { Bounded::min_value::<f64>() as float }\n+\n+    #[inline(always)]\n+    fn max_value() -> float { Bounded::max_value::<f64>() as float }\n+}\n+\n impl Primitive for float {\n     #[inline(always)]\n     fn bits() -> uint { Primitive::bits::<f64>() }\n@@ -724,6 +732,27 @@ impl Float for float {\n     #[inline(always)]\n     fn is_NaN(&self) -> bool { *self != *self }\n \n+    #[inline(always)]\n+    fn mantissa_digits() -> uint { Float::mantissa_digits::<f64>() }\n+\n+    #[inline(always)]\n+    fn digits() -> uint { Float::digits::<f64>() }\n+\n+    #[inline(always)]\n+    fn epsilon() -> float { Float::epsilon::<f64>() as float }\n+\n+    #[inline(always)]\n+    fn min_exp() -> int { Float::min_exp::<f64>() }\n+\n+    #[inline(always)]\n+    fn max_exp() -> int { Float::max_exp::<f64>() }\n+\n+    #[inline(always)]\n+    fn min_10_exp() -> int { Float::min_10_exp::<f64>() }\n+\n+    #[inline(always)]\n+    fn max_10_exp() -> int { Float::max_10_exp::<f64>() }\n+\n     /// Returns `true` if the number is infinite\n     #[inline(always)]\n     fn is_infinite(&self) -> bool {"}, {"sha": "0e2669a26b6b3c5e720ba56def648d2e665233a7", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4cc9d0ba7e454730988f318aeed92ab5e5ff8269/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc9d0ba7e454730988f318aeed92ab5e5ff8269/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=4cc9d0ba7e454730988f318aeed92ab5e5ff8269", "patch": "@@ -219,6 +219,7 @@ pub trait Bounded {\n ///\n pub trait Primitive: Num\n                    + NumCast\n+                   + Bounded\n                    + Neg<Self>\n                    + Add<Self,Self>\n                    + Sub<Self,Self>\n@@ -235,7 +236,6 @@ pub trait Primitive: Num\n ///\n pub trait Int: Integer\n              + Primitive\n-             + Bounded\n              + Bitwise\n              + BitCount {}\n \n@@ -255,6 +255,14 @@ pub trait Float: Real\n     fn is_infinite(&self) -> bool;\n     fn is_finite(&self) -> bool;\n \n+    fn mantissa_digits() -> uint;\n+    fn digits() -> uint;\n+    fn epsilon() -> Self;\n+    fn min_exp() -> int;\n+    fn max_exp() -> int;\n+    fn min_10_exp() -> int;\n+    fn max_10_exp() -> int;\n+\n     fn mul_add(&self, a: Self, b: Self) -> Self;\n     fn next_after(&self, other: Self) -> Self;\n }"}]}