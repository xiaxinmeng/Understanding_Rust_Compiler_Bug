{"sha": "4e5c02e8980d16feeee953f112f940c598180ddc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNWMwMmU4OTgwZDE2ZmVlZWU5NTNmMTEyZjk0MGM1OTgxODBkZGM=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-11-14T10:25:54Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-11-17T16:28:37Z"}, "message": "Ignore trait implementations", "tree": {"sha": "26c8eec50eaadd02cebce3c275c8348127215afb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26c8eec50eaadd02cebce3c275c8348127215afb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e5c02e8980d16feeee953f112f940c598180ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5c02e8980d16feeee953f112f940c598180ddc", "html_url": "https://github.com/rust-lang/rust/commit/4e5c02e8980d16feeee953f112f940c598180ddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e5c02e8980d16feeee953f112f940c598180ddc/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c8d248190819f09753d4f6a9f89e3804e232ae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8d248190819f09753d4f6a9f89e3804e232ae7", "html_url": "https://github.com/rust-lang/rust/commit/4c8d248190819f09753d4f6a9f89e3804e232ae7"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "2960ffc5352e78b485bbb74502256d8a66283ef6", "filename": "clippy_lints/src/unnecessary_wrap.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4e5c02e8980d16feeee953f112f940c598180ddc/clippy_lints%2Fsrc%2Funnecessary_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5c02e8980d16feeee953f112f940c598180ddc/clippy_lints%2Fsrc%2Funnecessary_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wrap.rs?ref=4e5c02e8980d16feeee953f112f940c598180ddc", "patch": "@@ -1,11 +1,11 @@\n use crate::utils::{\n-    in_macro, is_type_diagnostic_item, match_path, match_qpath, paths, return_ty, snippet, span_lint_and_then,\n-    trait_ref_of_method, visitors::find_all_ret_expressions,\n+    in_macro, is_type_diagnostic_item, match_qpath, paths, return_ty, snippet, span_lint_and_then,\n+    visitors::find_all_ret_expressions,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, ExprKind, FnDecl, HirId};\n+use rustc_hir::{Body, ExprKind, FnDecl, HirId, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -63,14 +63,6 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWrap {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if_chain! {\n-            if let Some(trait_ref) = trait_ref_of_method(cx, hir_id);\n-            if match_path(trait_ref.path, &paths::PARTIAL_ORD);\n-            then {\n-                return;\n-            }\n-        }\n-\n         match fn_kind {\n             FnKind::ItemFn(.., visibility, _) | FnKind::Method(.., Some(visibility), _) => {\n                 if visibility.node.is_pub() {\n@@ -81,6 +73,12 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWrap {\n             _ => (),\n         }\n \n+        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+            if matches!(item.kind, ItemKind::Impl{ of_trait: Some(_), ..} | ItemKind::Trait(..)) {\n+                return;\n+            }\n+        }\n+\n         let (return_type, path) = if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(option_type)) {\n             (\"Option\", &paths::OPTION_SOME)\n         } else if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(result_type)) {"}, {"sha": "2be5ff93f86959efd637996f0805417359260170", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e5c02e8980d16feeee953f112f940c598180ddc/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5c02e8980d16feeee953f112f940c598180ddc/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=4e5c02e8980d16feeee953f112f940c598180ddc", "patch": "@@ -81,7 +81,6 @@ pub const OS_STR_TO_OS_STRING: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsStr\", \"to\n pub const PARKING_LOT_MUTEX_GUARD: [&str; 2] = [\"parking_lot\", \"MutexGuard\"];\n pub const PARKING_LOT_RWLOCK_READ_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockReadGuard\"];\n pub const PARKING_LOT_RWLOCK_WRITE_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockWriteGuard\"];\n-pub const PARTIAL_ORD: [&str; 3] = [\"std\", \"cmp\", \"PartialOrd\"];\n pub const PATH: [&str; 3] = [\"std\", \"path\", \"Path\"];\n pub const PATH_BUF: [&str; 3] = [\"std\", \"path\", \"PathBuf\"];\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];"}, {"sha": "11208690428259a4e8e5d312103bbee244f66088", "filename": "tests/ui/unnecessary_wrap.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e5c02e8980d16feeee953f112f940c598180ddc/tests%2Fui%2Funnecessary_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5c02e8980d16feeee953f112f940c598180ddc/tests%2Fui%2Funnecessary_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wrap.rs?ref=4e5c02e8980d16feeee953f112f940c598180ddc", "patch": "@@ -95,6 +95,20 @@ impl A {\n     }\n }\n \n+trait B {\n+    // trait impls are not linted\n+    fn func13() -> Option<i32> {\n+        Some(1)\n+    }\n+}\n+\n+impl A for B {\n+    // trait impls are not linted\n+    fn func13() -> Option<i32> {\n+        Some(0)\n+    }\n+}\n+\n fn main() {\n     // method calls are not linted\n     func1(true, true);"}]}