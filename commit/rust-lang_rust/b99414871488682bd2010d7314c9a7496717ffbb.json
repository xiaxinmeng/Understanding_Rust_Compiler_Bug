{"sha": "b99414871488682bd2010d7314c9a7496717ffbb", "node_id": "C_kwDOAAsO6NoAKGI5OTQxNDg3MTQ4ODY4MmJkMjAxMGQ3MzE0YzlhNzQ5NjcxN2ZmYmI", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-04-30T17:40:35Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-04-30T17:40:35Z"}, "message": "Clean up all trailing whitespace", "tree": {"sha": "d0d4bfb27aeb7de8830ef5b95c1bbe16b1c40e58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0d4bfb27aeb7de8830ef5b95c1bbe16b1c40e58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b99414871488682bd2010d7314c9a7496717ffbb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmJtdJMACgkQ+boUO5X/\nbYJ9uhAArpwC1qLIrHQEclI+2bavfNqhmFBYF/CDPVeVEEyrlW6f81Duc6ofabf1\nK9IyOnzz6Tf0nOSrh9yannqRdpNvQmG7jPydriVaUJfCOIGyP1wrWV3+ouM5lrNV\nLG3YeeczWdjZ3mCX1blms5DDepM7Eti+nLZCCqF/strrriyQZLaAnD0mfVEEs870\nBhsxfcolHci7iKWpo2WeVBYkoqq5cpOyhaqZPjc7Ohp12af/hfmlap1vNtUMEVpi\nkQmWqtdKLGjK0PAmQcSk4hvakWH0p0ZJl5eY6SBvx5cQwwYjiBF1cXSE31c22Pgb\niqlUyUYzMABttvzDkFMTdL8/jn02v1dpnpCeXPHD2+23scNrd4gGsl/mvJJlqznt\n9zbXua6pyJUL28z2tYBlOrOEQLwtw872UxK9lWmbRJS8qS3z9L5iqRgCJb7ZqkF6\npkNMjXNq7f5v9c7tr7P7HeUtakSzM8YtlTB61yZAznI1M3919T0ggwETS90LcAYX\nmpCNLgST2ZCxmBDubqOPcRJvpvnhGoVqETf0NNYNKQ4blf4BQC8GMSijz647cQgY\norkGESdU1tu3q6Bh09uRFNw7YRB/Ul+v25yi6j16Tajm1j+vfXxI9purvDpbWkfS\nryjvEGblbRd7r3cmdRotvS7Ok6c+hmVPYM0P/ghRp76ZPSOLGHA=\n=a76X\n-----END PGP SIGNATURE-----", "payload": "tree d0d4bfb27aeb7de8830ef5b95c1bbe16b1c40e58\nparent e1068cf2114d48fe16ecd8652c8c6b85282a894e\nauthor David Tolnay <dtolnay@gmail.com> 1651340435 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1651340435 -0700\n\nClean up all trailing whitespace\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b99414871488682bd2010d7314c9a7496717ffbb", "html_url": "https://github.com/rust-lang/rust/commit/b99414871488682bd2010d7314c9a7496717ffbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b99414871488682bd2010d7314c9a7496717ffbb/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1068cf2114d48fe16ecd8652c8c6b85282a894e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1068cf2114d48fe16ecd8652c8c6b85282a894e", "html_url": "https://github.com/rust-lang/rust/commit/e1068cf2114d48fe16ecd8652c8c6b85282a894e"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "6d65ab6e1e469fdec650a54d3f88f3d2ef90e4d0", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -42,7 +42,7 @@ rustc_version = \"0.4\"\n colored = \"2\"\n \n [package.metadata.rust-analyzer]\n-# This crate uses #[feature(rustc_private)]. \n+# This crate uses #[feature(rustc_private)].\n # See https://github.com/rust-analyzer/rust-analyzer/pull/7891\n rustc_private = true\n "}, {"sha": "b182f6cec65a8185a689c19297ec4347a5d323cb", "filename": "bench-cargo-miri/mse/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/bench-cargo-miri%2Fmse%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/bench-cargo-miri%2Fmse%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/bench-cargo-miri%2Fmse%2Fsrc%2Fmain.rs?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -4,7 +4,7 @@ static PCM: &[i16] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n fn main() {\n     #[cfg(increase_thread_usage)]\n     let thread = std::thread::spawn(|| 4);\n-    \n+\n     for _ in 0..2 {\n         mse(PCM.len(), PCM, EXPECTED);\n     }"}, {"sha": "421db2b3d79f09f62ec095127825d0d3fa1baeb1", "filename": "rustup-toolchain", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/rustup-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/rustup-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustup-toolchain?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -8,9 +8,9 @@ set -e\n # USAGE:\n #\n # ./rustup-toolchain: Update \"miri\" toolchain to match `rust-version` (the known-good version for this commit).\n-# \n+#\n # ./rustup-toolchain HEAD: Update \"miri\" toolchain and `rust-version` file to latest rustc HEAD.\n-# \n+#\n # ./rustup-toolchain $COMMIT: Update \"miri\" toolchain and `rust-version` file to match that commit.\n \n # Make sure rustup-toolchain-install-master is installed."}, {"sha": "6aa5a469be3babe8e9b1c30e0831a3d6498def05", "filename": "tests/compile-fail/data_race/dangling_thread_async_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_async_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_async_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_async_race.rs?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -36,7 +36,7 @@ fn main() {\n \n     let join2 = unsafe {\n         spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 3) and Write on Thread(id = 1) \n+            *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 3) and Write on Thread(id = 1)\n         })\n     };\n "}, {"sha": "9f9dbfc77ed50c037308bb011f79d3ec522277ff", "filename": "tests/compile-fail/data_race/dealloc_read_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race2.rs?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            // Also an error of the form: Data race detected between Read on Thread(id = 2) and Deallocate on Thread(id = 1) \n+            // Also an error of the form: Data race detected between Read on Thread(id = 2) and Deallocate on Thread(id = 1)\n             // but the invalid allocation is detected first.\n             *ptr.0 //~ ERROR dereferenced after this allocation got freed\n         });"}, {"sha": "5a1c0a4b6d6da4d9012a027f5d3859960b0f0c1d", "filename": "tests/compile-fail/data_race/read_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race_stack.rs?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -40,7 +40,7 @@ pub fn main() {\n             let mut stack_var = 0usize;\n \n             pointer.store(&mut stack_var as *mut _, Ordering::Release);\n-            \n+\n             sleep(Duration::from_millis(200));\n \n             stack_var //~ ERROR Data race detected between Read on Thread(id = 1) and Write on Thread(id = 2)"}, {"sha": "bfe1464cb5728e13f4b1c9382a85e4016a58c84d", "filename": "tests/compile-fail/data_race/write_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race_stack.rs?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -37,11 +37,11 @@ pub fn main() {\n             let mut stack_var = 0usize;\n \n             pointer.store(&mut stack_var as *mut _, Ordering::Release);\n-            \n+\n             sleep(Duration::from_millis(200));\n \n             stack_var = 1usize; //~ ERROR Data race detected between Write on Thread(id = 1) and Write on Thread(id = 2)\n-            \n+\n             // read to silence errors\n             stack_var\n         });"}, {"sha": "670c037988c2b280b05f51c49f987f7029ef0449", "filename": "tests/compile-fail/panic/double_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Fcompile-fail%2Fpanic%2Fdouble_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Fcompile-fail%2Fpanic%2Fdouble_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fdouble_panic.rs?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -8,5 +8,5 @@ impl Drop for Foo {\n }\n fn main() {\n     let _foo = Foo;\n-    panic!(\"first\"); \n+    panic!(\"first\");\n }"}, {"sha": "dc4e099982f80186c6e46ef6361b3eadbe4908dc", "filename": "tests/compile-fail/rc_as_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Fcompile-fail%2Frc_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Fcompile-fail%2Frc_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frc_as_ptr.rs?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     assert!(ptr::eq(&*strong, Weak::as_ptr(&weak)));\n     // The strong here keeps it alive, so we can still access the object.\n     assert_eq!(42, **unsafe { &*Weak::as_ptr(&weak) });\n-    \n+\n     drop(strong);\n     // But not any more. We can do Weak::as_raw(&weak), but accessing the pointer would lead to\n     // undefined behaviour."}, {"sha": "58ed63eaf395c11e20866f39f98ec1e1e2c40cdc", "filename": "tests/run-pass/backtrace-api-v1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Frun-pass%2Fbacktrace-api-v1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Frun-pass%2Fbacktrace-api-v1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api-v1.rs?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -24,7 +24,7 @@ fn main() {\n         unsafe {\n             miri_resolve_frame_names(*frame, 0, name.as_mut_ptr(), filename.as_mut_ptr());\n         }\n-        \n+\n         let name = String::from_utf8(name).unwrap();\n         let filename = String::from_utf8(filename).unwrap();\n \n@@ -62,4 +62,4 @@ struct MiriFrame {\n     lineno: u32,\n     colno: u32,\n     fn_ptr: *mut (),\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2dc0ee3f8f1ae0bc356adfdb2fa8a84cec34da81", "filename": "tests/run-pass/concurrency/data_race.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Frun-pass%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Frun-pass%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fdata_race.rs?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -16,12 +16,12 @@ fn test_fence_sync() {\n     let mut var = 0u32;\n     let ptr = &mut var as *mut u32;\n     let evil_ptr = EvilSend(ptr);\n-    \n-    \n+\n+\n     let j1 = spawn(move || {\n         unsafe { *evil_ptr.0 = 1; }\n         fence(Ordering::Release);\n-        SYNC.store(1, Ordering::Relaxed)   \n+        SYNC.store(1, Ordering::Relaxed)\n     });\n \n     let j2 = spawn(move || {"}, {"sha": "5c19c260dd95698e6012efe11e1bdb420b065104", "filename": "tests/run-pass/dyn-arbitrary-self.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Frun-pass%2Fdyn-arbitrary-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Frun-pass%2Fdyn-arbitrary-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdyn-arbitrary-self.rs?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -24,14 +24,14 @@ fn stdlib_pointers() {\n         sync::Arc,\n         pin::Pin,\n     };\n-    \n+\n     trait Trait {\n         fn by_rc(self: Rc<Self>) -> i64;\n         fn by_arc(self: Arc<Self>) -> i64;\n         fn by_pin_mut(self: Pin<&mut Self>) -> i64;\n         fn by_pin_box(self: Pin<Box<Self>>) -> i64;\n     }\n-    \n+\n     impl Trait for i64 {\n         fn by_rc(self: Rc<Self>) -> i64 {\n             *self\n@@ -46,7 +46,7 @@ fn stdlib_pointers() {\n             *self\n         }\n     }\n-    \n+\n     let rc = Rc::new(1i64) as Rc<dyn Trait>;\n     assert_eq!(1, rc.by_rc());\n \n@@ -66,34 +66,34 @@ fn pointers_and_wrappers() {\n         ops::{Deref, CoerceUnsized, DispatchFromDyn},\n         marker::Unsize,\n     };\n-    \n+\n     struct Ptr<T: ?Sized>(Box<T>);\n-    \n+\n     impl<T: ?Sized> Deref for Ptr<T> {\n         type Target = T;\n-    \n+\n         fn deref(&self) -> &T {\n             &*self.0\n         }\n     }\n-    \n+\n     impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<Ptr<U>> for Ptr<T> {}\n     impl<T: Unsize<U> + ?Sized, U: ?Sized> DispatchFromDyn<Ptr<U>> for Ptr<T> {}\n-    \n+\n     struct Wrapper<T: ?Sized>(T);\n-    \n+\n     impl<T: ?Sized> Deref for Wrapper<T> {\n         type Target = T;\n-    \n+\n         fn deref(&self) -> &T {\n             &self.0\n         }\n     }\n-    \n+\n     impl<T: CoerceUnsized<U>, U> CoerceUnsized<Wrapper<U>> for Wrapper<T> {}\n     impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<Wrapper<U>> for Wrapper<T> {}\n-    \n-    \n+\n+\n     trait Trait {\n         // This method isn't object-safe yet. Unsized by-value `self` is object-safe (but not callable\n         // without unsized_locals), but wrappers arond `Self` currently are not.\n@@ -103,7 +103,7 @@ fn pointers_and_wrappers() {\n         fn wrapper_ptr(self: Wrapper<Ptr<Self>>) -> i32;\n         fn wrapper_ptr_wrapper(self: Wrapper<Ptr<Wrapper<Self>>>) -> i32;\n     }\n-    \n+\n     impl Trait for i32 {\n         fn ptr_wrapper(self: Ptr<Wrapper<Self>>) -> i32 {\n             **self\n@@ -115,7 +115,7 @@ fn pointers_and_wrappers() {\n             ***self\n         }\n     }\n-    \n+\n     let pw = Ptr(Box::new(Wrapper(5))) as Ptr<Wrapper<dyn Trait>>;\n     assert_eq!(pw.ptr_wrapper(), 5);\n "}, {"sha": "6af3e28854ab516ee801375ad76771efb63e6b8a", "filename": "tests/run-pass/ptr_offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Frun-pass%2Fptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Frun-pass%2Fptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_offset.rs?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -18,7 +18,7 @@ fn test_offset_from() { unsafe {\n     assert_eq!(x.offset_from(y), -12);\n     assert_eq!((y as *const u32).offset_from(x as *const u32), 12/4);\n     assert_eq!((x as *const u32).offset_from(y as *const u32), -12/4);\n-    \n+\n     let x = (((x as usize) * 2) / 2) as *const u8;\n     assert_eq!(y.offset_from(x), 12);\n     assert_eq!(x.offset_from(y), -12);"}, {"sha": "80bab726a8f153fd174edb3a0caf8f1a54d9cef4", "filename": "tests/run-pass/stacked-borrows/stacked-borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -Zmiri-tag-raw-pointers\n use std::ptr;\n-    \n+\n // Test various stacked-borrows-related things.\n fn main() {\n     read_does_not_invalidate1();"}, {"sha": "cbdc7c6e9106887c318d63ea67eb285802e95d20", "filename": "tests/run-pass/threadleak_ignored.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Frun-pass%2Fthreadleak_ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99414871488682bd2010d7314c9a7496717ffbb/tests%2Frun-pass%2Fthreadleak_ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fthreadleak_ignored.rs?ref=b99414871488682bd2010d7314c9a7496717ffbb", "patch": "@@ -22,7 +22,7 @@ fn main() {\n     // Set up a channel so that we can learn when the other thread initialized `X`\n     // (so that we are sure there is something to drop).\n     let (send, recv) = std::sync::mpsc::channel::<()>();\n-    \n+\n     let _detached = std::thread::spawn(move || {\n         X.with(|x| *x.borrow_mut() = Some(LoudDrop(1)));\n         send.send(()).unwrap();"}]}