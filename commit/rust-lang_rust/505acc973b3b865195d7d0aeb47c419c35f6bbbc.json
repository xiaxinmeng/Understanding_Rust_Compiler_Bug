{"sha": "505acc973b3b865195d7d0aeb47c419c35f6bbbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNWFjYzk3M2IzYjg2NTE5NWQ3ZDBhZWI0N2M0MTljMzVmNmJiYmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-11T12:34:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-11T13:29:33Z"}, "message": "Make call info to use real name resolution", "tree": {"sha": "f5130e4e301e2adadf12f0b69f65f6cc19480ed0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5130e4e301e2adadf12f0b69f65f6cc19480ed0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/505acc973b3b865195d7d0aeb47c419c35f6bbbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/505acc973b3b865195d7d0aeb47c419c35f6bbbc", "html_url": "https://github.com/rust-lang/rust/commit/505acc973b3b865195d7d0aeb47c419c35f6bbbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/505acc973b3b865195d7d0aeb47c419c35f6bbbc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10d66d63d716a10ba7a5a8d1b69c9066249caf69", "url": "https://api.github.com/repos/rust-lang/rust/commits/10d66d63d716a10ba7a5a8d1b69c9066249caf69", "html_url": "https://github.com/rust-lang/rust/commit/10d66d63d716a10ba7a5a8d1b69c9066249caf69"}], "stats": {"total": 59, "additions": 33, "deletions": 26}, "files": [{"sha": "8702c6222a7545d51190fed7458682f137e5d496", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/505acc973b3b865195d7d0aeb47c419c35f6bbbc/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505acc973b3b865195d7d0aeb47c419c35f6bbbc/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=505acc973b3b865195d7d0aeb47c419c35f6bbbc", "patch": "@@ -60,7 +60,7 @@ pub use self::{\n     source_id::{AstIdMap, ErasedFileAstId},\n     ids::{HirFileId, MacroDefId, MacroCallId, MacroCallLoc},\n     nameres::{PerNs, Namespace, ImportId},\n-    ty::{Ty, ApplicationTy, TypeCtor, Substs, display::HirDisplay},\n+    ty::{Ty, ApplicationTy, TypeCtor, Substs, display::HirDisplay, CallableDef},\n     impl_block::{ImplBlock, ImplItem},\n     docs::{Docs, Documentation},\n     adt::AdtDef,"}, {"sha": "ecf13fbc30029a867df4c0992c41e755221c74ed", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/505acc973b3b865195d7d0aeb47c419c35f6bbbc/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505acc973b3b865195d7d0aeb47c419c35f6bbbc/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=505acc973b3b865195d7d0aeb47c419c35f6bbbc", "patch": "@@ -15,10 +15,11 @@ use std::sync::Arc;\n use std::{fmt, mem};\n \n use crate::{Name, AdtDef, type_ref::Mutability, db::HirDatabase, Trait};\n+use display::{HirDisplay, HirFormatter};\n \n-pub(crate) use lower::{TypableDef, CallableDef, type_for_def, type_for_field, callable_item_sig};\n+pub(crate) use lower::{TypableDef, type_for_def, type_for_field, callable_item_sig};\n pub(crate) use infer::{infer, InferenceResult, InferTy};\n-use display::{HirDisplay, HirFormatter};\n+pub use lower::CallableDef;\n \n /// A type constructor or type name: this might be something like the primitive\n /// type `bool`, a struct like `Vec`, or things like function pointers or\n@@ -288,6 +289,15 @@ impl Ty {\n         }\n     }\n \n+    pub fn as_callable(&self) -> Option<(CallableDef, &Substs)> {\n+        match self {\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::FnDef(callable_def), parameters }) => {\n+                Some((*callable_def, parameters))\n+            }\n+            _ => None,\n+        }\n+    }\n+\n     fn builtin_deref(&self) -> Option<Ty> {\n         match self {\n             Ty::Apply(a_ty) => match a_ty.ctor {"}, {"sha": "d06876777200a3d08bbe132b5ddff85ba308cf11", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/505acc973b3b865195d7d0aeb47c419c35f6bbbc/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505acc973b3b865195d7d0aeb47c419c35f6bbbc/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=505acc973b3b865195d7d0aeb47c419c35f6bbbc", "patch": "@@ -2,7 +2,6 @@ use test_utils::tested_by;\n use ra_db::SourceDatabase;\n use ra_syntax::{\n     AstNode, SyntaxNode, TextUnit,\n-    SyntaxKind::FN_DEF,\n     ast::{self, ArgListOwner},\n     algo::find_node_at_offset,\n };\n@@ -18,19 +17,26 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let calling_node = FnCallNode::with_node(syntax, position.offset)?;\n     let name_ref = calling_node.name_ref()?;\n \n-    // Resolve the function's NameRef (NOTE: this isn't entirely accurate).\n-    let file_symbols = crate::symbol_index::index_resolve(db, name_ref);\n-    let symbol = file_symbols.into_iter().find(|it| it.ptr.kind() == FN_DEF)?;\n-    let fn_file = db.parse(symbol.file_id);\n-    let fn_def = symbol.ptr.to_node(&fn_file);\n-    let fn_def = ast::FnDef::cast(fn_def).unwrap();\n-    let function = hir::source_binder::function_from_source(db, symbol.file_id, fn_def)?;\n+    let analyser = hir::SourceAnalyser::new(db, position.file_id, name_ref.syntax());\n+    let function = match calling_node {\n+        FnCallNode::CallExpr(expr) => {\n+            //FIXME: apply subst\n+            let (callable_def, _subst) =\n+                analyser.type_of(db, expr.expr()?.into())?.as_callable()?;\n+            match callable_def {\n+                hir::CallableDef::Function(it) => it,\n+                //FIXME: handle other callables\n+                _ => return None,\n+            }\n+        }\n+        FnCallNode::MethodCallExpr(expr) => analyser.resolve_method_call(expr)?,\n+    };\n \n     let mut call_info = CallInfo::new(db, function);\n \n     // If we have a calling expression let's find which argument we are on\n     let num_params = call_info.parameters().len();\n-    let has_self = fn_def.param_list().and_then(|l| l.self_param()).is_some();\n+    let has_self = function.signature(db).has_self_param();\n \n     if num_params == 1 {\n         if !has_self {\n@@ -142,7 +148,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_fn_signature_two_args_first() {\n+    fn test_fn_signature_two_args_firstx() {\n         let info = call_info(\n             r#\"fn foo(x: u32, y: u32) -> u32 {x + y}\n fn bar() { foo(<|>3, ); }\"#,\n@@ -382,11 +388,9 @@ assert_eq!(6, my_crate::add_one(5));\n     fn test_fn_signature_with_docs_from_actix() {\n         let info = call_info(\n             r#\"\n-pub trait WriteHandler<E>\n-where\n-    Self: Actor,\n-    Self::Context: ActorContext,\n-{\n+struct WriteHandler<E>;\n+\n+impl<E> WriteHandler<E> {\n     /// Method is called when writer emits error.\n     ///\n     /// If this method returns `ErrorAction::Continue` writer processing\n@@ -403,8 +407,7 @@ where\n     }\n }\n \n-pub fn foo() {\n-    WriteHandler r;\n+pub fn foo(mut r: WriteHandler<()>) {\n     r.finished(<|>);\n }\n "}, {"sha": "ddcf46b4e39e04bc064a4168f49b1c40b43533e1", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/505acc973b3b865195d7d0aeb47c419c35f6bbbc/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505acc973b3b865195d7d0aeb47c419c35f6bbbc/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=505acc973b3b865195d7d0aeb47c419c35f6bbbc", "patch": "@@ -19,7 +19,6 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) token: SyntaxToken<'a>,\n     pub(super) resolver: Resolver,\n     pub(super) module: Option<hir::Module>,\n-    pub(super) function: Option<hir::Function>,\n     pub(super) function_syntax: Option<&'a ast::FnDef>,\n     pub(super) use_item_syntax: Option<&'a ast::UseItem>,\n     pub(super) struct_lit_syntax: Option<&'a ast::StructLit>,\n@@ -59,7 +58,6 @@ impl<'a> CompletionContext<'a> {\n             offset: position.offset,\n             resolver,\n             module,\n-            function: None,\n             function_syntax: None,\n             use_item_syntax: None,\n             struct_lit_syntax: None,\n@@ -150,10 +148,6 @@ impl<'a> CompletionContext<'a> {\n             .ancestors()\n             .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n             .find_map(ast::FnDef::cast);\n-        if let (Some(module), Some(fn_def)) = (self.module, self.function_syntax) {\n-            let function = source_binder::function_from_module(self.db, module, fn_def);\n-            self.function = Some(function);\n-        }\n \n         let parent = match name_ref.syntax().parent() {\n             Some(it) => it,"}]}