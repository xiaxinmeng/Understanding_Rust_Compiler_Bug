{"sha": "c807ff3b449a8dafc5cef539e5e65b2fe6dab879", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MDdmZjNiNDQ5YThkYWZjNWNlZjUzOWU1ZTY1YjJmZTZkYWI4Nzk=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2015-10-18T21:31:32Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2015-10-19T02:57:32Z"}, "message": "Create entry points for unwind frame registry in libstd.", "tree": {"sha": "fbe9cf5d1554bc6f84376c49e69a751b39329346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbe9cf5d1554bc6f84376c49e69a751b39329346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c807ff3b449a8dafc5cef539e5e65b2fe6dab879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c807ff3b449a8dafc5cef539e5e65b2fe6dab879", "html_url": "https://github.com/rust-lang/rust/commit/c807ff3b449a8dafc5cef539e5e65b2fe6dab879", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c807ff3b449a8dafc5cef539e5e65b2fe6dab879/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "def917afeb4ae4668010c2ff2b2757ed7ac4931a", "url": "https://api.github.com/repos/rust-lang/rust/commits/def917afeb4ae4668010c2ff2b2757ed7ac4931a", "html_url": "https://github.com/rust-lang/rust/commit/def917afeb4ae4668010c2ff2b2757ed7ac4931a"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "f318cde71bd6672bb48f700698b5986cd55e5491", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c807ff3b449a8dafc5cef539e5e65b2fe6dab879/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c807ff3b449a8dafc5cef539e5e65b2fe6dab879/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c807ff3b449a8dafc5cef539e5e65b2fe6dab879", "patch": "@@ -400,6 +400,15 @@ pub mod __rand {\n     pub use rand::{thread_rng, ThreadRng, Rng};\n }\n \n+// Rust runtime's startup objects depend on these symbols, so they must be public.\n+// Since sys_common isn't public, we have to re-export them here explicitly.\n+#[doc(hidden)]\n+#[unstable(feature = \"eh_frame_registry\", issue = \"0\")]\n+#[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n+pub mod __frame_registry {\n+    pub use sys_common::unwind::imp::eh_frame_registry::*;\n+}\n+\n // Include a number of private modules that exist solely to provide\n // the rustdoc documentation for primitive types. Using `include!`\n // because rustdoc only looks for these modules at the crate level."}, {"sha": "74d334bd062805255480846b1679e2b99cc88a87", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c807ff3b449a8dafc5cef539e5e65b2fe6dab879/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c807ff3b449a8dafc5cef539e5e65b2fe6dab879/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=c807ff3b449a8dafc5cef539e5e65b2fe6dab879", "patch": "@@ -128,6 +128,10 @@ extern {}\n #[link(name = \"c++abi\")]\n extern {}\n \n+#[cfg(all(target_os = \"windows\", target_env=\"gnu\"))]\n+#[link(name = \"gcc_eh\")]\n+extern {}\n+\n extern \"C\" {\n     // iOS on armv7 uses SjLj exceptions and requires to link\n     // against corresponding routine (..._SjLj_...)"}, {"sha": "6d82eb7dfb1987815bdb09e296ef8952f3257ca3", "filename": "src/libstd/sys/common/unwind/gcc.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c807ff3b449a8dafc5cef539e5e65b2fe6dab879/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c807ff3b449a8dafc5cef539e5e65b2fe6dab879/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs?ref=c807ff3b449a8dafc5cef539e5e65b2fe6dab879", "patch": "@@ -238,3 +238,24 @@ pub mod eabi {\n unsafe extern fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {\n     uw::_Unwind_Resume(panic_ctx as *mut uw::_Unwind_Exception);\n }\n+\n+#[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n+pub mod eh_frame_registry {\n+    #[link(name = \"gcc_eh\")]\n+    extern {\n+        fn __register_frame_info(eh_frame_begin: *const u8, object: *mut u8);\n+        fn __deregister_frame_info(eh_frame_begin: *const u8, object: *mut u8);\n+    }\n+    #[cfg(not(test))]\n+    #[no_mangle]\n+    pub unsafe extern fn rust_eh_register_frames(eh_frame_begin: *const u8,\n+                                                 object: *mut u8) {\n+        __register_frame_info(eh_frame_begin, object);\n+    }\n+    #[cfg(not(test))]\n+    #[no_mangle]\n+    pub  unsafe extern fn rust_eh_unregister_frames(eh_frame_begin: *const u8,\n+                                                   object: *mut u8) {\n+        __deregister_frame_info(eh_frame_begin, object);\n+    }\n+}"}]}