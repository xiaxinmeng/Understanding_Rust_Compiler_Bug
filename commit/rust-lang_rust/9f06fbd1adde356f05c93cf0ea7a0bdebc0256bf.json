{"sha": "9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf", "node_id": "C_kwDOAAsO6NoAKDlmMDZmYmQxYWRkZTM1NmYwNWM5M2NmMGVhN2EwYmRlYmMwMjU2YmY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-10-23T21:48:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-23T21:48:17Z"}, "message": "Rollup merge of #103402 - joshtriplett:niche-wrap-fix, r=oli-obk\n\nFix wrapped valid-range handling in ty_find_init_error\n\nRust's niche handling allows for wrapping valid ranges with end < start;\nfor instance, a valid range with start=43 and end=41 means a niche of\n42. Most places in the compiler handle this correctly, but\n`ty_find_init_error` assumed that `lo > 0` means the type cannot contain a\nzero.\n\nFix it to handle wrapping ranges.", "tree": {"sha": "2acad081c92672ce3938fc26210147323e3c7465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2acad081c92672ce3938fc26210147323e3c7465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjVbahCRBK7hj4Ov3rIwAAlLkIAE/J4sEv6iJ3/nyUZqFVMAce\ntLjAFpqcUHUecEjKmWi7QhPFFiLRMnYr/E6GiAPfFmBbKJYr6fzK/pD9G2e60OH+\ncu4e6MWNJZnutNjgw8HfJYpS7SW4DcQ7ACoDkHI3AfzwJb6qsvlGHu5b6OT390p0\nf+WYHkrT9q5Oq6M42czFtliJKN8blZx73stke8KdPJDxgKTLmBHsS8UvVJB2rfjD\n0J/dwp5p2EZPiaqlLC/K+bXl8/OHUR0gzdCo58lEAOsIEI4Ab5uZ5f/11muRlzfw\nptmxSDJp4I04bTD00gYRMyplzKMsBkXolzBWtqHg7ZiGzye7sYxF8Al1byLjr2w=\n=6zWP\n-----END PGP SIGNATURE-----\n", "payload": "tree 2acad081c92672ce3938fc26210147323e3c7465\nparent 646e0d370d8e8572e0fbbf9dd0ab6496c4116037\nparent 36662dfc83cb297c21f410eea60deb3ef6d0e940\nauthor Michael Howell <michael@notriddle.com> 1666561697 -0700\ncommitter GitHub <noreply@github.com> 1666561697 -0700\n\nRollup merge of #103402 - joshtriplett:niche-wrap-fix, r=oli-obk\n\nFix wrapped valid-range handling in ty_find_init_error\n\nRust's niche handling allows for wrapping valid ranges with end < start;\nfor instance, a valid range with start=43 and end=41 means a niche of\n42. Most places in the compiler handle this correctly, but\n`ty_find_init_error` assumed that `lo > 0` means the type cannot contain a\nzero.\n\nFix it to handle wrapping ranges.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf", "html_url": "https://github.com/rust-lang/rust/commit/9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "646e0d370d8e8572e0fbbf9dd0ab6496c4116037", "url": "https://api.github.com/repos/rust-lang/rust/commits/646e0d370d8e8572e0fbbf9dd0ab6496c4116037", "html_url": "https://github.com/rust-lang/rust/commit/646e0d370d8e8572e0fbbf9dd0ab6496c4116037"}, {"sha": "36662dfc83cb297c21f410eea60deb3ef6d0e940", "url": "https://api.github.com/repos/rust-lang/rust/commits/36662dfc83cb297c21f410eea60deb3ef6d0e940", "html_url": "https://github.com/rust-lang/rust/commit/36662dfc83cb297c21f410eea60deb3ef6d0e940"}], "stats": {"total": 125, "additions": 73, "deletions": 52}, "files": [{"sha": "53c4910513422421f6feb8345d4ea435d24199b4", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf", "patch": "@@ -2526,7 +2526,10 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                         // return `Bound::Excluded`.  (And we have tests checking that we\n                         // handle the attribute correctly.)\n                         // We don't add a span since users cannot declare such types anyway.\n-                        (Bound::Included(lo), _) if lo > 0 => {\n+                        (Bound::Included(lo), Bound::Included(hi)) if 0 < lo && lo < hi => {\n+                            return Some((format!(\"`{}` must be non-null\", ty), None));\n+                        }\n+                        (Bound::Included(lo), Bound::Unbounded) if 0 < lo => {\n                             return Some((format!(\"`{}` must be non-null\", ty), None));\n                         }\n                         (Bound::Included(_), _) | (_, Bound::Included(_))"}, {"sha": "57d8cbe7c93410cbf5b762a2024cdd8ef57a8c43", "filename": "src/test/ui/lint/invalid_value.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf/src%2Ftest%2Fui%2Flint%2Finvalid_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf/src%2Ftest%2Fui%2Flint%2Finvalid_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finvalid_value.rs?ref=9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf", "patch": "@@ -44,6 +44,10 @@ enum TwoUninhabited {\n     B(Void),\n }\n \n+#[rustc_layout_scalar_valid_range_start(254)]\n+#[rustc_layout_scalar_valid_range_end(1)]\n+pub(crate) struct WrapAroundRange(u8);\n+\n #[allow(unused)]\n fn generic<T: 'static>() {\n     unsafe {\n@@ -131,6 +135,9 @@ fn main() {\n         let _val: *const [()] = mem::zeroed();\n         let _val: *const [()] = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n \n+        let _val: WrapAroundRange = mem::zeroed();\n+        let _val: WrapAroundRange = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n         // Things where 0 is okay due to rustc implementation details,\n         // but that are not guaranteed to keep working.\n         let _val: Result<i32, i32> = mem::zeroed();"}, {"sha": "76afb765f0f0582b66be1caef8bb29a983a5a72b", "filename": "src/test/ui/lint/invalid_value.stderr", "status": "modified", "additions": 62, "deletions": 51, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr?ref=9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf", "patch": "@@ -1,5 +1,5 @@\n error: the type `&T` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:50:32\n+  --> $DIR/invalid_value.rs:54:32\n    |\n LL |         let _val: &'static T = mem::zeroed();\n    |                                ^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ LL | #![deny(invalid_value)]\n    |         ^^^^^^^^^^^^^\n \n error: the type `&T` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:51:32\n+  --> $DIR/invalid_value.rs:55:32\n    |\n LL |         let _val: &'static T = mem::uninitialized();\n    |                                ^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |         let _val: &'static T = mem::uninitialized();\n    = note: references must be non-null\n \n error: the type `Wrap<&T>` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:53:38\n+  --> $DIR/invalid_value.rs:57:38\n    |\n LL |         let _val: Wrap<&'static T> = mem::zeroed();\n    |                                      ^^^^^^^^^^^^^\n@@ -41,7 +41,7 @@ LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `Wrap<&T>` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:54:38\n+  --> $DIR/invalid_value.rs:58:38\n    |\n LL |         let _val: Wrap<&'static T> = mem::uninitialized();\n    |                                      ^^^^^^^^^^^^^^^^^^^^\n@@ -56,7 +56,7 @@ LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `!` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:61:23\n+  --> $DIR/invalid_value.rs:65:23\n    |\n LL |         let _val: ! = mem::zeroed();\n    |                       ^^^^^^^^^^^^^\n@@ -67,7 +67,7 @@ LL |         let _val: ! = mem::zeroed();\n    = note: the `!` type has no valid value\n \n error: the type `!` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:62:23\n+  --> $DIR/invalid_value.rs:66:23\n    |\n LL |         let _val: ! = mem::uninitialized();\n    |                       ^^^^^^^^^^^^^^^^^^^^\n@@ -78,7 +78,7 @@ LL |         let _val: ! = mem::uninitialized();\n    = note: the `!` type has no valid value\n \n error: the type `(i32, !)` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:64:30\n+  --> $DIR/invalid_value.rs:68:30\n    |\n LL |         let _val: (i32, !) = mem::zeroed();\n    |                              ^^^^^^^^^^^^^\n@@ -89,7 +89,7 @@ LL |         let _val: (i32, !) = mem::zeroed();\n    = note: the `!` type has no valid value\n \n error: the type `(i32, !)` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:65:30\n+  --> $DIR/invalid_value.rs:69:30\n    |\n LL |         let _val: (i32, !) = mem::uninitialized();\n    |                              ^^^^^^^^^^^^^^^^^^^^\n@@ -100,7 +100,7 @@ LL |         let _val: (i32, !) = mem::uninitialized();\n    = note: integers must not be uninitialized\n \n error: the type `Void` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:67:26\n+  --> $DIR/invalid_value.rs:71:26\n    |\n LL |         let _val: Void = mem::zeroed();\n    |                          ^^^^^^^^^^^^^\n@@ -115,7 +115,7 @@ LL | enum Void {}\n    | ^^^^^^^^^\n \n error: the type `Void` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:68:26\n+  --> $DIR/invalid_value.rs:72:26\n    |\n LL |         let _val: Void = mem::uninitialized();\n    |                          ^^^^^^^^^^^^^^^^^^^^\n@@ -130,7 +130,7 @@ LL | enum Void {}\n    | ^^^^^^^^^\n \n error: the type `&i32` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:70:34\n+  --> $DIR/invalid_value.rs:74:34\n    |\n LL |         let _val: &'static i32 = mem::zeroed();\n    |                                  ^^^^^^^^^^^^^\n@@ -141,7 +141,7 @@ LL |         let _val: &'static i32 = mem::zeroed();\n    = note: references must be non-null\n \n error: the type `&i32` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:71:34\n+  --> $DIR/invalid_value.rs:75:34\n    |\n LL |         let _val: &'static i32 = mem::uninitialized();\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n@@ -152,7 +152,7 @@ LL |         let _val: &'static i32 = mem::uninitialized();\n    = note: references must be non-null\n \n error: the type `Ref` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:73:25\n+  --> $DIR/invalid_value.rs:77:25\n    |\n LL |         let _val: Ref = mem::zeroed();\n    |                         ^^^^^^^^^^^^^\n@@ -167,7 +167,7 @@ LL | struct Ref(&'static i32);\n    |            ^^^^^^^^^^^^\n \n error: the type `Ref` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:74:25\n+  --> $DIR/invalid_value.rs:78:25\n    |\n LL |         let _val: Ref = mem::uninitialized();\n    |                         ^^^^^^^^^^^^^^^^^^^^\n@@ -182,7 +182,7 @@ LL | struct Ref(&'static i32);\n    |            ^^^^^^^^^^^^\n \n error: the type `fn()` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:76:26\n+  --> $DIR/invalid_value.rs:80:26\n    |\n LL |         let _val: fn() = mem::zeroed();\n    |                          ^^^^^^^^^^^^^\n@@ -193,7 +193,7 @@ LL |         let _val: fn() = mem::zeroed();\n    = note: function pointers must be non-null\n \n error: the type `fn()` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:77:26\n+  --> $DIR/invalid_value.rs:81:26\n    |\n LL |         let _val: fn() = mem::uninitialized();\n    |                          ^^^^^^^^^^^^^^^^^^^^\n@@ -204,7 +204,7 @@ LL |         let _val: fn() = mem::uninitialized();\n    = note: function pointers must be non-null\n \n error: the type `Wrap<fn()>` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:79:32\n+  --> $DIR/invalid_value.rs:83:32\n    |\n LL |         let _val: Wrap<fn()> = mem::zeroed();\n    |                                ^^^^^^^^^^^^^\n@@ -219,7 +219,7 @@ LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `Wrap<fn()>` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:80:32\n+  --> $DIR/invalid_value.rs:84:32\n    |\n LL |         let _val: Wrap<fn()> = mem::uninitialized();\n    |                                ^^^^^^^^^^^^^^^^^^^^\n@@ -234,7 +234,7 @@ LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `WrapEnum<fn()>` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:82:36\n+  --> $DIR/invalid_value.rs:86:36\n    |\n LL |         let _val: WrapEnum<fn()> = mem::zeroed();\n    |                                    ^^^^^^^^^^^^^\n@@ -249,7 +249,7 @@ LL | enum WrapEnum<T> { Wrapped(T) }\n    |                            ^\n \n error: the type `WrapEnum<fn()>` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:83:36\n+  --> $DIR/invalid_value.rs:87:36\n    |\n LL |         let _val: WrapEnum<fn()> = mem::uninitialized();\n    |                                    ^^^^^^^^^^^^^^^^^^^^\n@@ -264,7 +264,7 @@ LL | enum WrapEnum<T> { Wrapped(T) }\n    |                            ^\n \n error: the type `Wrap<(RefPair, i32)>` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:85:42\n+  --> $DIR/invalid_value.rs:89:42\n    |\n LL |         let _val: Wrap<(RefPair, i32)> = mem::zeroed();\n    |                                          ^^^^^^^^^^^^^\n@@ -279,7 +279,7 @@ LL | struct RefPair((&'static i32, i32));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: the type `Wrap<(RefPair, i32)>` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:86:42\n+  --> $DIR/invalid_value.rs:90:42\n    |\n LL |         let _val: Wrap<(RefPair, i32)> = mem::uninitialized();\n    |                                          ^^^^^^^^^^^^^^^^^^^^\n@@ -294,7 +294,7 @@ LL | struct RefPair((&'static i32, i32));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: the type `NonNull<i32>` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:88:34\n+  --> $DIR/invalid_value.rs:92:34\n    |\n LL |         let _val: NonNull<i32> = mem::zeroed();\n    |                                  ^^^^^^^^^^^^^\n@@ -305,7 +305,7 @@ LL |         let _val: NonNull<i32> = mem::zeroed();\n    = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `NonNull<i32>` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:89:34\n+  --> $DIR/invalid_value.rs:93:34\n    |\n LL |         let _val: NonNull<i32> = mem::uninitialized();\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n@@ -316,7 +316,7 @@ LL |         let _val: NonNull<i32> = mem::uninitialized();\n    = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `(NonZeroU32, i32)` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:91:39\n+  --> $DIR/invalid_value.rs:95:39\n    |\n LL |         let _val: (NonZeroU32, i32) = mem::zeroed();\n    |                                       ^^^^^^^^^^^^^\n@@ -327,7 +327,7 @@ LL |         let _val: (NonZeroU32, i32) = mem::zeroed();\n    = note: `std::num::NonZeroU32` must be non-null\n \n error: the type `(NonZeroU32, i32)` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:92:39\n+  --> $DIR/invalid_value.rs:96:39\n    |\n LL |         let _val: (NonZeroU32, i32) = mem::uninitialized();\n    |                                       ^^^^^^^^^^^^^^^^^^^^\n@@ -338,7 +338,7 @@ LL |         let _val: (NonZeroU32, i32) = mem::uninitialized();\n    = note: `std::num::NonZeroU32` must be non-null\n \n error: the type `*const dyn Send` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:94:37\n+  --> $DIR/invalid_value.rs:98:37\n    |\n LL |         let _val: *const dyn Send = mem::zeroed();\n    |                                     ^^^^^^^^^^^^^\n@@ -349,7 +349,7 @@ LL |         let _val: *const dyn Send = mem::zeroed();\n    = note: the vtable of a wide raw pointer must be non-null\n \n error: the type `*const dyn Send` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:95:37\n+  --> $DIR/invalid_value.rs:99:37\n    |\n LL |         let _val: *const dyn Send = mem::uninitialized();\n    |                                     ^^^^^^^^^^^^^^^^^^^^\n@@ -360,7 +360,7 @@ LL |         let _val: *const dyn Send = mem::uninitialized();\n    = note: the vtable of a wide raw pointer must be non-null\n \n error: the type `[fn(); 2]` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:97:31\n+  --> $DIR/invalid_value.rs:101:31\n    |\n LL |         let _val: [fn(); 2] = mem::zeroed();\n    |                               ^^^^^^^^^^^^^\n@@ -371,7 +371,7 @@ LL |         let _val: [fn(); 2] = mem::zeroed();\n    = note: function pointers must be non-null\n \n error: the type `[fn(); 2]` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:98:31\n+  --> $DIR/invalid_value.rs:102:31\n    |\n LL |         let _val: [fn(); 2] = mem::uninitialized();\n    |                               ^^^^^^^^^^^^^^^^^^^^\n@@ -382,7 +382,7 @@ LL |         let _val: [fn(); 2] = mem::uninitialized();\n    = note: function pointers must be non-null\n \n error: the type `TwoUninhabited` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:100:36\n+  --> $DIR/invalid_value.rs:104:36\n    |\n LL |         let _val: TwoUninhabited = mem::zeroed();\n    |                                    ^^^^^^^^^^^^^\n@@ -397,7 +397,7 @@ LL | enum TwoUninhabited {\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: the type `TwoUninhabited` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:101:36\n+  --> $DIR/invalid_value.rs:105:36\n    |\n LL |         let _val: TwoUninhabited = mem::uninitialized();\n    |                                    ^^^^^^^^^^^^^^^^^^^^\n@@ -412,7 +412,7 @@ LL | enum TwoUninhabited {\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: the type `OneFruitNonZero` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:103:37\n+  --> $DIR/invalid_value.rs:107:37\n    |\n LL |         let _val: OneFruitNonZero = mem::zeroed();\n    |                                     ^^^^^^^^^^^^^\n@@ -427,7 +427,7 @@ LL |     Banana(NonZeroU32),\n    |            ^^^^^^^^^^\n \n error: the type `OneFruitNonZero` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:104:37\n+  --> $DIR/invalid_value.rs:108:37\n    |\n LL |         let _val: OneFruitNonZero = mem::uninitialized();\n    |                                     ^^^^^^^^^^^^^^^^^^^^\n@@ -442,7 +442,7 @@ LL |     Banana(NonZeroU32),\n    |            ^^^^^^^^^^\n \n error: the type `bool` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:108:26\n+  --> $DIR/invalid_value.rs:112:26\n    |\n LL |         let _val: bool = mem::uninitialized();\n    |                          ^^^^^^^^^^^^^^^^^^^^\n@@ -453,7 +453,7 @@ LL |         let _val: bool = mem::uninitialized();\n    = note: booleans must be either `true` or `false`\n \n error: the type `Wrap<char>` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:111:32\n+  --> $DIR/invalid_value.rs:115:32\n    |\n LL |         let _val: Wrap<char> = mem::uninitialized();\n    |                                ^^^^^^^^^^^^^^^^^^^^\n@@ -468,7 +468,7 @@ LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `NonBig` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:114:28\n+  --> $DIR/invalid_value.rs:118:28\n    |\n LL |         let _val: NonBig = mem::uninitialized();\n    |                            ^^^^^^^^^^^^^^^^^^^^\n@@ -479,7 +479,7 @@ LL |         let _val: NonBig = mem::uninitialized();\n    = note: `NonBig` must be initialized inside its custom valid range\n \n error: the type `Fruit` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:117:27\n+  --> $DIR/invalid_value.rs:121:27\n    |\n LL |         let _val: Fruit = mem::uninitialized();\n    |                           ^^^^^^^^^^^^^^^^^^^^\n@@ -494,7 +494,7 @@ LL | enum Fruit {\n    | ^^^^^^^^^^\n \n error: the type `[bool; 2]` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:120:31\n+  --> $DIR/invalid_value.rs:124:31\n    |\n LL |         let _val: [bool; 2] = mem::uninitialized();\n    |                               ^^^^^^^^^^^^^^^^^^^^\n@@ -505,7 +505,7 @@ LL |         let _val: [bool; 2] = mem::uninitialized();\n    = note: booleans must be either `true` or `false`\n \n error: the type `i32` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:123:25\n+  --> $DIR/invalid_value.rs:127:25\n    |\n LL |         let _val: i32 = mem::uninitialized();\n    |                         ^^^^^^^^^^^^^^^^^^^^\n@@ -516,7 +516,7 @@ LL |         let _val: i32 = mem::uninitialized();\n    = note: integers must not be uninitialized\n \n error: the type `f32` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:126:25\n+  --> $DIR/invalid_value.rs:130:25\n    |\n LL |         let _val: f32 = mem::uninitialized();\n    |                         ^^^^^^^^^^^^^^^^^^^^\n@@ -527,7 +527,7 @@ LL |         let _val: f32 = mem::uninitialized();\n    = note: floats must not be uninitialized\n \n error: the type `*const ()` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:129:31\n+  --> $DIR/invalid_value.rs:133:31\n    |\n LL |         let _val: *const () = mem::uninitialized();\n    |                               ^^^^^^^^^^^^^^^^^^^^\n@@ -538,7 +538,7 @@ LL |         let _val: *const () = mem::uninitialized();\n    = note: raw pointers must not be uninitialized\n \n error: the type `*const [()]` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:132:33\n+  --> $DIR/invalid_value.rs:136:33\n    |\n LL |         let _val: *const [()] = mem::uninitialized();\n    |                                 ^^^^^^^^^^^^^^^^^^^^\n@@ -548,8 +548,19 @@ LL |         let _val: *const [()] = mem::uninitialized();\n    |\n    = note: raw pointers must not be uninitialized\n \n+error: the type `WrapAroundRange` does not permit being left uninitialized\n+  --> $DIR/invalid_value.rs:139:37\n+   |\n+LL |         let _val: WrapAroundRange = mem::uninitialized();\n+   |                                     ^^^^^^^^^^^^^^^^^^^^\n+   |                                     |\n+   |                                     this code causes undefined behavior when executed\n+   |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |\n+   = note: `WrapAroundRange` must be initialized inside its custom valid range\n+\n error: the type `Result<i32, i32>` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:137:38\n+  --> $DIR/invalid_value.rs:144:38\n    |\n LL |         let _val: Result<i32, i32> = mem::uninitialized();\n    |                                      ^^^^^^^^^^^^^^^^^^^^\n@@ -564,7 +575,7 @@ LL | pub enum Result<T, E> {\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error: the type `&i32` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:145:34\n+  --> $DIR/invalid_value.rs:152:34\n    |\n LL |         let _val: &'static i32 = mem::transmute(0usize);\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^\n@@ -575,7 +586,7 @@ LL |         let _val: &'static i32 = mem::transmute(0usize);\n    = note: references must be non-null\n \n error: the type `&[i32]` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:146:36\n+  --> $DIR/invalid_value.rs:153:36\n    |\n LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -586,7 +597,7 @@ LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    = note: references must be non-null\n \n error: the type `NonZeroU32` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:147:32\n+  --> $DIR/invalid_value.rs:154:32\n    |\n LL |         let _val: NonZeroU32 = mem::transmute(0);\n    |                                ^^^^^^^^^^^^^^^^^\n@@ -597,7 +608,7 @@ LL |         let _val: NonZeroU32 = mem::transmute(0);\n    = note: `std::num::NonZeroU32` must be non-null\n \n error: the type `NonNull<i32>` does not permit zero-initialization\n-  --> $DIR/invalid_value.rs:150:34\n+  --> $DIR/invalid_value.rs:157:34\n    |\n LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -608,7 +619,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();\n    = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `NonNull<i32>` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:151:34\n+  --> $DIR/invalid_value.rs:158:34\n    |\n LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -619,7 +630,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `bool` does not permit being left uninitialized\n-  --> $DIR/invalid_value.rs:152:26\n+  --> $DIR/invalid_value.rs:159:26\n    |\n LL |         let _val: bool = MaybeUninit::uninit().assume_init();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -629,5 +640,5 @@ LL |         let _val: bool = MaybeUninit::uninit().assume_init();\n    |\n    = note: booleans must be either `true` or `false`\n \n-error: aborting due to 50 previous errors\n+error: aborting due to 51 previous errors\n "}]}