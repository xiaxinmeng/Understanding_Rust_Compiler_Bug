{"sha": "6b37a795815af3cc4b8cd0b9a13108c060a9e214", "node_id": "C_kwDOAAsO6NoAKDZiMzdhNzk1ODE1YWYzY2M0YjhjZDBiOWExMzEwOGMwNjBhOWUyMTQ", "commit": {"author": {"name": "hdelc", "email": "hdelc02@gmail.com", "date": "2022-08-02T13:39:50Z"}, "committer": {"name": "hdelc", "email": "hdelc02@gmail.com", "date": "2022-08-02T13:41:32Z"}, "message": "Refactor `Display` impl for `Target` to `Target::name` method", "tree": {"sha": "3f67d1284e9e6712dcb51edab6cb7ac0dcb38991", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f67d1284e9e6712dcb51edab6cb7ac0dcb38991"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b37a795815af3cc4b8cd0b9a13108c060a9e214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b37a795815af3cc4b8cd0b9a13108c060a9e214", "html_url": "https://github.com/rust-lang/rust/commit/6b37a795815af3cc4b8cd0b9a13108c060a9e214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b37a795815af3cc4b8cd0b9a13108c060a9e214/comments", "author": {"login": "hdelc", "id": 62157015, "node_id": "MDQ6VXNlcjYyMTU3MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/62157015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hdelc", "html_url": "https://github.com/hdelc", "followers_url": "https://api.github.com/users/hdelc/followers", "following_url": "https://api.github.com/users/hdelc/following{/other_user}", "gists_url": "https://api.github.com/users/hdelc/gists{/gist_id}", "starred_url": "https://api.github.com/users/hdelc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hdelc/subscriptions", "organizations_url": "https://api.github.com/users/hdelc/orgs", "repos_url": "https://api.github.com/users/hdelc/repos", "events_url": "https://api.github.com/users/hdelc/events{/privacy}", "received_events_url": "https://api.github.com/users/hdelc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hdelc", "id": 62157015, "node_id": "MDQ6VXNlcjYyMTU3MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/62157015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hdelc", "html_url": "https://github.com/hdelc", "followers_url": "https://api.github.com/users/hdelc/followers", "following_url": "https://api.github.com/users/hdelc/following{/other_user}", "gists_url": "https://api.github.com/users/hdelc/gists{/gist_id}", "starred_url": "https://api.github.com/users/hdelc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hdelc/subscriptions", "organizations_url": "https://api.github.com/users/hdelc/orgs", "repos_url": "https://api.github.com/users/hdelc/repos", "events_url": "https://api.github.com/users/hdelc/events{/privacy}", "received_events_url": "https://api.github.com/users/hdelc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e98b0e8ee7d3ab6273625049e3e23118a0f15813", "url": "https://api.github.com/repos/rust-lang/rust/commits/e98b0e8ee7d3ab6273625049e3e23118a0f15813", "html_url": "https://github.com/rust-lang/rust/commit/e98b0e8ee7d3ab6273625049e3e23118a0f15813"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "622a234cd9f12135e519dea4a02e875415cf3e75", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/6b37a795815af3cc4b8cd0b9a13108c060a9e214/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b37a795815af3cc4b8cd0b9a13108c060a9e214/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=6b37a795815af3cc4b8cd0b9a13108c060a9e214", "patch": "@@ -60,51 +60,7 @@ pub enum Target {\n \n impl Display for Target {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n-            f,\n-            \"{}\",\n-            match *self {\n-                Target::ExternCrate => \"extern crate\",\n-                Target::Use => \"use\",\n-                Target::Static => \"static item\",\n-                Target::Const => \"constant item\",\n-                Target::Fn => \"function\",\n-                Target::Closure => \"closure\",\n-                Target::Mod => \"module\",\n-                Target::ForeignMod => \"foreign module\",\n-                Target::GlobalAsm => \"global asm\",\n-                Target::TyAlias => \"type alias\",\n-                Target::OpaqueTy => \"opaque type\",\n-                Target::Enum => \"enum\",\n-                Target::Variant => \"enum variant\",\n-                Target::Struct => \"struct\",\n-                Target::Field => \"struct field\",\n-                Target::Union => \"union\",\n-                Target::Trait => \"trait\",\n-                Target::TraitAlias => \"trait alias\",\n-                Target::Impl => \"item\",\n-                Target::Expression => \"expression\",\n-                Target::Statement => \"statement\",\n-                Target::Arm => \"match arm\",\n-                Target::AssocConst => \"associated const\",\n-                Target::Method(kind) => match kind {\n-                    MethodKind::Inherent => \"inherent method\",\n-                    MethodKind::Trait { body: false } => \"required trait method\",\n-                    MethodKind::Trait { body: true } => \"provided trait method\",\n-                },\n-                Target::AssocTy => \"associated type\",\n-                Target::ForeignFn => \"foreign function\",\n-                Target::ForeignStatic => \"foreign static item\",\n-                Target::ForeignTy => \"foreign type\",\n-                Target::GenericParam(kind) => match kind {\n-                    GenericParamKind::Type => \"type parameter\",\n-                    GenericParamKind::Lifetime => \"lifetime parameter\",\n-                    GenericParamKind::Const => \"const parameter\",\n-                },\n-                Target::MacroDef => \"macro def\",\n-                Target::Param => \"function param\",\n-            }\n-        )\n+        write!(f, \"{}\", Self::name(&self))\n     }\n }\n \n@@ -185,4 +141,48 @@ impl Target {\n             hir::GenericParamKind::Const { .. } => Target::GenericParam(GenericParamKind::Const),\n         }\n     }\n+\n+    pub fn name(&self) -> &str {\n+        match *self {\n+            Target::ExternCrate => \"extern crate\",\n+            Target::Use => \"use\",\n+            Target::Static => \"static item\",\n+            Target::Const => \"constant item\",\n+            Target::Fn => \"function\",\n+            Target::Closure => \"closure\",\n+            Target::Mod => \"module\",\n+            Target::ForeignMod => \"foreign module\",\n+            Target::GlobalAsm => \"global asm\",\n+            Target::TyAlias => \"type alias\",\n+            Target::OpaqueTy => \"opaque type\",\n+            Target::Enum => \"enum\",\n+            Target::Variant => \"enum variant\",\n+            Target::Struct => \"struct\",\n+            Target::Field => \"struct field\",\n+            Target::Union => \"union\",\n+            Target::Trait => \"trait\",\n+            Target::TraitAlias => \"trait alias\",\n+            Target::Impl => \"item\",\n+            Target::Expression => \"expression\",\n+            Target::Statement => \"statement\",\n+            Target::Arm => \"match arm\",\n+            Target::AssocConst => \"associated const\",\n+            Target::Method(kind) => match kind {\n+                MethodKind::Inherent => \"inherent method\",\n+                MethodKind::Trait { body: false } => \"required trait method\",\n+                MethodKind::Trait { body: true } => \"provided trait method\",\n+            },\n+            Target::AssocTy => \"associated type\",\n+            Target::ForeignFn => \"foreign function\",\n+            Target::ForeignStatic => \"foreign static item\",\n+            Target::ForeignTy => \"foreign type\",\n+            Target::GenericParam(kind) => match kind {\n+                GenericParamKind::Type => \"type parameter\",\n+                GenericParamKind::Lifetime => \"lifetime parameter\",\n+                GenericParamKind::Const => \"const parameter\",\n+            },\n+            Target::MacroDef => \"macro def\",\n+            Target::Param => \"function param\",\n+        }\n+    }\n }"}]}