{"sha": "7d357190ff8cd5a06117ff1fbb4a739fa67ae44f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMzU3MTkwZmY4Y2Q1YTA2MTE3ZmYxZmJiNGE3MzlmYTY3YWU0NGY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-01-05T17:29:50Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-01-05T17:50:46Z"}, "message": "[MIR] Implement calling of closures and add missing monomorphization when translating function references.", "tree": {"sha": "83c156fbcc650425c9fa28085a32fe9ac40404bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83c156fbcc650425c9fa28085a32fe9ac40404bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d357190ff8cd5a06117ff1fbb4a739fa67ae44f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d357190ff8cd5a06117ff1fbb4a739fa67ae44f", "html_url": "https://github.com/rust-lang/rust/commit/7d357190ff8cd5a06117ff1fbb4a739fa67ae44f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d357190ff8cd5a06117ff1fbb4a739fa67ae44f/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04b6c4939b6e292b477303f0b970865296f6467d", "url": "https://api.github.com/repos/rust-lang/rust/commits/04b6c4939b6e292b477303f0b970865296f6467d", "html_url": "https://github.com/rust-lang/rust/commit/04b6c4939b6e292b477303f0b970865296f6467d"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "0f4a0407298c8da5a071226262017d4321fb7786", "filename": "src/librustc_trans/trans/mir/constant.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d357190ff8cd5a06117ff1fbb4a739fa67ae44f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d357190ff8cd5a06117ff1fbb4a739fa67ae44f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs?ref=7d357190ff8cd5a06117ff1fbb4a739fa67ae44f", "patch": "@@ -89,8 +89,10 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n     {\n         let ty = bcx.monomorphize(&constant.ty);\n         match constant.literal {\n-            mir::Literal::Item { def_id, kind, substs } =>\n-                self.trans_item_ref(bcx, ty, kind, substs, def_id),\n+            mir::Literal::Item { def_id, kind, substs } => {\n+                let substs = bcx.tcx().mk_substs(bcx.monomorphize(&substs));\n+                self.trans_item_ref(bcx, ty, kind, substs, def_id)\n+            }\n             mir::Literal::Value { ref value } => {\n                 self.trans_constval(bcx, value, ty)\n             }"}, {"sha": "737c3dace2efe138e3d8b5fa0d6a2e2db5c4ec90", "filename": "src/librustc_trans/trans/mir/did.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7d357190ff8cd5a06117ff1fbb4a739fa67ae44f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d357190ff8cd5a06117ff1fbb4a739fa67ae44f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs?ref=7d357190ff8cd5a06117ff1fbb4a739fa67ae44f", "patch": "@@ -21,6 +21,7 @@ use rustc::middle::traits;\n use rustc::mir::repr::ItemKind;\n use trans::common::{Block, fulfill_obligation};\n use trans::base;\n+use trans::closure;\n use trans::expr;\n use trans::monomorphize;\n use trans::meth;\n@@ -38,6 +39,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                           substs: &'tcx Substs<'tcx>,\n                           did: DefId)\n                           -> OperandRef<'tcx> {\n+        debug!(\"trans_item_ref(ty={:?}, kind={:?}, substs={:?}, did={})\",\n+            ty, kind, substs, bcx.tcx().item_path_str(did));\n+\n         match kind {\n             ItemKind::Function => self.trans_fn_ref(bcx, ty, substs, did),\n             ItemKind::Method => match bcx.tcx().impl_or_trait_item(did).container() {\n@@ -68,6 +72,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         substs: &'tcx Substs<'tcx>,\n                         did: DefId)\n                         -> OperandRef<'tcx> {\n+        debug!(\"trans_fn_ref(ty={:?}, substs={:?}, did={})\",\n+            ty, substs, bcx.tcx().item_path_str(did));\n+\n         let did = inline::maybe_instantiate_inline(bcx.ccx(), did);\n \n         if !substs.types.is_empty() || is_named_tuple_constructor(bcx.tcx(), did) {\n@@ -101,9 +108,14 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                trait_id: DefId,\n                                substs: &'tcx Substs<'tcx>)\n                                -> OperandRef<'tcx> {\n+        debug!(\"trans_static_method(ty={:?}, method={}, trait={}, substs={:?})\",\n+                ty,\n+                bcx.tcx().item_path_str(method_id),\n+                bcx.tcx().item_path_str(trait_id),\n+                substs);\n+\n         let ccx = bcx.ccx();\n         let tcx = bcx.tcx();\n-        let mname = tcx.item_name(method_id);\n         let subst::SeparateVecsPerParamSpace {\n             types: rcvr_type,\n             selfs: rcvr_self,\n@@ -118,6 +130,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         match vtbl {\n             traits::VtableImpl(traits::VtableImplData { impl_def_id, substs: imp_substs, .. }) => {\n                 assert!(!imp_substs.types.needs_infer());\n+\n+                let mname = tcx.item_name(method_id);\n+\n                 let subst::SeparateVecsPerParamSpace {\n                     types: impl_type,\n                     selfs: impl_self,\n@@ -130,6 +145,17 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 let mthsubsts = tcx.mk_substs(mth.substs);\n                 self.trans_fn_ref(bcx, ty, mthsubsts, mth.method.def_id)\n             },\n+            traits::VtableClosure(data) => {\n+                let trait_closure_kind = bcx.tcx().lang_items.fn_trait_kind(trait_id).unwrap();\n+                let llfn = closure::trans_closure_method(bcx.ccx(),\n+                                                         data.closure_def_id,\n+                                                         data.substs,\n+                                                         trait_closure_kind);\n+                OperandRef {\n+                    ty: ty,\n+                    val: OperandValue::Immediate(llfn)\n+                }\n+            },\n             traits::VtableObject(ref data) => {\n                 let idx = traits::get_vtable_index_of_object_method(tcx, data, method_id);\n                 OperandRef::from_rvalue_datum("}]}