{"sha": "ddd8feea31c7b40edbfd8552cbf763032732e358", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZDhmZWVhMzFjN2I0MGVkYmZkODU1MmNiZjc2MzAzMjczMmUzNTg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-20T16:58:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-20T16:58:22Z"}, "message": "Support single-element append on vec, str. Closes #44.", "tree": {"sha": "44e1462dd52b352a541d439d11c3de2a1cfcc090", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44e1462dd52b352a541d439d11c3de2a1cfcc090"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddd8feea31c7b40edbfd8552cbf763032732e358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd8feea31c7b40edbfd8552cbf763032732e358", "html_url": "https://github.com/rust-lang/rust/commit/ddd8feea31c7b40edbfd8552cbf763032732e358", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddd8feea31c7b40edbfd8552cbf763032732e358/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40fccac7fb347f75536ad5c48420692e36f839e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/40fccac7fb347f75536ad5c48420692e36f839e8", "html_url": "https://github.com/rust-lang/rust/commit/40fccac7fb347f75536ad5c48420692e36f839e8"}], "stats": {"total": 98, "additions": 90, "deletions": 8}, "files": [{"sha": "626bc3544b5cdc26c2b67a2fcf2b204c6cf8d78c", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddd8feea31c7b40edbfd8552cbf763032732e358/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ddd8feea31c7b40edbfd8552cbf763032732e358/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=ddd8feea31c7b40edbfd8552cbf763032732e358", "patch": "@@ -427,6 +427,7 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       acyclic-unwind.rs \\\n                       alt-pattern-simple.rs \\\n                       alt-tag.rs \\\n+                      append-units.rs \\\n                       argv.rs \\\n                       autoderef-full-lval.rs \\\n                       autoderef-objfn.rs \\"}, {"sha": "03174b0aa100f5e28ebafd46e2d73a33b32d0852", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ddd8feea31c7b40edbfd8552cbf763032732e358/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/ddd8feea31c7b40edbfd8552cbf763032732e358/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=ddd8feea31c7b40edbfd8552cbf763032732e358", "patch": "@@ -88,6 +88,7 @@ let trans_visitor\n   let zero = imm 0L in\n   let imm_true = imm_of_ty 1L TY_u8 in\n   let imm_false = imm_of_ty 0L TY_u8 in\n+  let zero_byte = imm_of_ty 0L TY_u8 in\n   let nil_ptr = Il.Mem ((Il.Abs (Asm.IMM 0L)), Il.NilTy) in\n   let wordptr_ty = Il.AddrTy (Il.ScalarTy word_sty) in\n \n@@ -4389,18 +4390,18 @@ let trans_visitor\n       (src_ty:Ast.ty)\n       : unit =\n     let elt_ty = seq_unit_ty dst_ty in\n-    let trim_trailing_null = dst_ty = Ast.TY_str in\n-      assert (simplified_ty src_ty = simplified_ty dst_ty);\n-      match simplified_ty src_ty with\n-          Ast.TY_str\n-        | Ast.TY_vec _ ->\n+    let trailing_null = simplified_ty dst_ty = Ast.TY_str in\n+      match (simplified_ty dst_ty, simplified_ty src_ty) with\n+          (Ast.TY_str, Ast.TY_str)\n+        | (Ast.TY_vec _, Ast.TY_vec _)\n+            when (simplified_ty dst_ty) = (simplified_ty src_ty) ->\n             let is_gc = if type_has_state src_ty then 1L else 0L in\n             let src_cell = need_cell src_oper in\n             let src_vec = deref src_cell in\n             let src_fill = get_element_ptr src_vec Abi.vec_elt_fill in\n             let dst_vec = deref dst_cell in\n             let dst_fill = get_element_ptr dst_vec Abi.vec_elt_fill in\n-              if trim_trailing_null\n+              if trailing_null\n               then sub_from dst_fill (imm 1L);\n               trans_upcall \"upcall_vec_grow\"\n                 dst_cell\n@@ -4457,9 +4458,53 @@ let trans_visitor\n                       let v = next_vreg_cell word_sty in\n                         mov v (Il.Cell src_fill);\n                         add_to dst_fill (Il.Cell v);\n-        | t ->\n+\n+        | (Ast.TY_str, e)\n+        | (Ast.TY_vec _, e)\n+            when e = simplified_ty elt_ty ->\n+\n+            let dst_is_gc = if type_has_state dst_ty then 1L else 0L in\n+            let elt_sz = ty_sz_in_current_frame elt_ty in\n+              trans_upcall \"upcall_vec_grow\"\n+                dst_cell\n+                [| Il.Cell dst_cell;\n+                   elt_sz;\n+                   imm dst_is_gc |];\n+\n+              (* \n+               * By now, dst_cell points to a vec/str with room for us\n+               * to add to.\n+               *)\n+\n+              (* Reload dst vec, fill; might have changed. *)\n+              let dst_vec = deref dst_cell in\n+              let dst_fill = get_element_ptr dst_vec Abi.vec_elt_fill in\n+\n+              let eltp_rty = Il.AddrTy (referent_type word_bits elt_ty) in\n+              let dptr = next_vreg_cell eltp_rty in\n+              let dst_data =\n+                get_element_ptr_dyn_in_current_frame\n+                  dst_vec Abi.vec_elt_data\n+              in\n+                lea dptr (fst (need_mem_cell dst_data));\n+                add_to dptr (Il.Cell dst_fill);\n+                if trailing_null\n+                then sub_from dptr elt_sz;\n+                trans_copy_ty\n+                  (get_ty_params_of_current_frame()) true\n+                  (deref dptr) elt_ty\n+                  (Il.Mem (force_to_mem src_oper)) elt_ty\n+                  None;\n+                add_to dptr elt_sz;\n+                if trailing_null\n+                then mov (deref dptr) zero_byte;\n+                add_to dst_fill elt_sz;\n+\n+        | _ ->\n             begin\n-              bug () \"unsupported vector-append type %a\" Ast.sprintf_ty t\n+              bug () \"unsupported vector-append types %a += %a\"\n+                Ast.sprintf_ty dst_ty\n+                Ast.sprintf_ty src_ty\n             end\n \n "}, {"sha": "17a4b38f53d1bfb164513fa6999b92727dacb1f4", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ddd8feea31c7b40edbfd8552cbf763032732e358/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/ddd8feea31c7b40edbfd8552cbf763032732e358/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=ddd8feea31c7b40edbfd8552cbf763032732e358", "patch": "@@ -763,6 +763,27 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n         | Ast.STMT_copy (dst, src) ->\n             infer_lval (check_expr src) dst\n \n+        | Ast.STMT_copy_binop (dst, Ast.BINOP_add, src) ->\n+            begin\n+            let src_ty = check_atom ~deref:true src in\n+            let dst_ty = check_lval dst in\n+              match fundamental_ty dst_ty, fundamental_ty src_ty with\n+                  Ast.TY_vec elt1, Ast.TY_vec elt2\n+                | Ast.TY_vec elt1, elt2 ->\n+                    if elt1 = elt2\n+                    then ()\n+                    else\n+                      Common.err None\n+                        \"mismatched types in vec-append: %a += %a\"\n+                        Ast.sprintf_ty dst_ty\n+                        Ast.sprintf_ty src_ty\n+                | Ast.TY_str, (Ast.TY_mach Common.TY_u8)\n+                | Ast.TY_str, Ast.TY_str -> ()\n+                | _ ->\n+                    infer_lval src_ty dst;\n+                    demand src_ty (check_binop Ast.BINOP_add src_ty)\n+            end\n+\n         | Ast.STMT_copy_binop (dst, binop, src) ->\n             let ty = check_atom ~deref:true src in\n             infer_lval ty dst;"}, {"sha": "05b3478ba0daa77e36700e362587a995ca03b1c9", "filename": "src/test/run-pass/append-units.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ddd8feea31c7b40edbfd8552cbf763032732e358/src%2Ftest%2Frun-pass%2Fappend-units.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd8feea31c7b40edbfd8552cbf763032732e358/src%2Ftest%2Frun-pass%2Fappend-units.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fappend-units.rs?ref=ddd8feea31c7b40edbfd8552cbf763032732e358", "patch": "@@ -0,0 +1,15 @@\n+fn main() {\n+  auto v = vec(1,2,3);\n+  v += 4;\n+  v += 5;\n+  check (v.(3) == 4);\n+  check (v.(4) == 5);\n+\n+  auto s = \"hello\";\n+  log s;\n+  s += 'z' as u8;\n+  s += 'y' as u8;\n+  log s;\n+  check (s.(5) == 'z' as u8);\n+  check (s.(6) == 'y' as u8);\n+}"}]}