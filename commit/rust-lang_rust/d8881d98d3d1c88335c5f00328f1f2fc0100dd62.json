{"sha": "d8881d98d3d1c88335c5f00328f1f2fc0100dd62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ODgxZDk4ZDNkMWM4ODMzNWM1ZjAwMzI4ZjFmMmZjMDEwMGRkNjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T08:51:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T08:51:48Z"}, "message": "Fix Some|None order in fill_match_arms", "tree": {"sha": "76854b4bd5ee2aa41e423b694105ddf1d14b3741", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76854b4bd5ee2aa41e423b694105ddf1d14b3741"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8881d98d3d1c88335c5f00328f1f2fc0100dd62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8881d98d3d1c88335c5f00328f1f2fc0100dd62", "html_url": "https://github.com/rust-lang/rust/commit/d8881d98d3d1c88335c5f00328f1f2fc0100dd62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8881d98d3d1c88335c5f00328f1f2fc0100dd62/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0bcaea46652ade4259559f08368179d54d4fdd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0bcaea46652ade4259559f08368179d54d4fdd1", "html_url": "https://github.com/rust-lang/rust/commit/c0bcaea46652ade4259559f08368179d54d4fdd1"}], "stats": {"total": 80, "additions": 69, "deletions": 11}, "files": [{"sha": "b57ff75aedb9c3626d5fb853fc7e82704c58144a", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d8881d98d3d1c88335c5f00328f1f2fc0100dd62/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8881d98d3d1c88335c5f00328f1f2fc0100dd62/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=d8881d98d3d1c88335c5f00328f1f2fc0100dd62", "patch": "@@ -4,8 +4,9 @@ use hir::{Adt, HasSource, ModuleDef, Semantics};\n use itertools::Itertools;\n use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, make, AstNode, MatchArm, NameOwner, Pat};\n+use test_utils::tested_by;\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{utils::FamousDefs, AssistContext, AssistId, Assists};\n \n // Assist: fill_match_arms\n //\n@@ -49,12 +50,18 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     let missing_arms: Vec<MatchArm> = if let Some(enum_def) = resolve_enum_def(&ctx.sema, &expr) {\n         let variants = enum_def.variants(ctx.db);\n \n-        variants\n+        let mut variants = variants\n             .into_iter()\n             .filter_map(|variant| build_pat(ctx.db, module, variant))\n             .filter(|variant_pat| is_variant_missing(&mut arms, variant_pat))\n             .map(|pat| make::match_arm(iter::once(pat), make::expr_empty_block()))\n-            .collect()\n+            .collect::<Vec<_>>();\n+        if Some(enum_def) == FamousDefs(&ctx.sema, module.krate()).core_option_Option() {\n+            // Match `Some` variant first.\n+            tested_by!(option_order);\n+            variants.reverse()\n+        }\n+        variants\n     } else if let Some(enum_defs) = resolve_tuple_of_enum_def(&ctx.sema, &expr) {\n         // Partial fill not currently supported for tuple of enums.\n         if !arms.is_empty() {\n@@ -167,9 +174,13 @@ fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> O\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::{\n+        tests::{check_assist, check_assist_not_applicable, check_assist_target},\n+        utils::FamousDefs,\n+    };\n \n     use super::fill_match_arms;\n+    use test_utils::covers;\n \n     #[test]\n     fn all_match_arms_provided() {\n@@ -736,4 +747,29 @@ mod tests {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn option_order() {\n+        covers!(option_order);\n+        let before = r#\"\n+fn foo(opt: Option<i32>) {\n+    match opt<|> {\n+    }\n+}\"#;\n+        let before =\n+            &format!(\"//- main.rs crate:main deps:core\\n{}{}\", before, FamousDefs::FIXTURE);\n+\n+        check_assist(\n+            fill_match_arms,\n+            before,\n+            r#\"\n+fn foo(opt: Option<i32>) {\n+    match <|>opt {\n+        Some(_) => {}\n+        None => {}\n+    }\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "722f3c6a4b7b543bf816a09478c8188c754e4de0", "filename": "crates/ra_assists/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8881d98d3d1c88335c5f00328f1f2fc0100dd62/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8881d98d3d1c88335c5f00328f1f2fc0100dd62/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmarks.rs?ref=d8881d98d3d1c88335c5f00328f1f2fc0100dd62", "patch": "@@ -1,6 +1,7 @@\n //! See test_utils/src/marks.rs\n \n test_utils::marks![\n+    option_order\n     introduce_var_in_comment_is_not_applicable\n     test_introduce_var_expr_stmt\n     test_introduce_var_last_expr"}, {"sha": "0038a9764b15da65f5a82c61404afd9f66c2b871", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d8881d98d3d1c88335c5f00328f1f2fc0100dd62/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8881d98d3d1c88335c5f00328f1f2fc0100dd62/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=d8881d98d3d1c88335c5f00328f1f2fc0100dd62", "patch": "@@ -3,7 +3,7 @@ pub(crate) mod insert_use;\n \n use std::{iter, ops};\n \n-use hir::{Adt, Crate, Semantics, Trait, Type};\n+use hir::{Adt, Crate, Enum, ScopeDef, Semantics, Trait, Type};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, make, NameOwner},\n@@ -200,13 +200,19 @@ impl FamousDefs<'_, '_> {\n     #[cfg(test)]\n     pub(crate) const FIXTURE: &'static str = r#\"\n //- /libcore.rs crate:core\n-pub mod convert{\n+pub mod convert {\n     pub trait From<T> {\n         fn from(T) -> Self;\n     }\n }\n \n-pub mod prelude { pub use crate::convert::From }\n+pub mod option {\n+    pub enum Option<T> { None, Some(T)}\n+}\n+\n+pub mod prelude {\n+    pub use crate::{convert::From, option::Option::{self, *}};\n+}\n #[prelude_import]\n pub use prelude::*;\n \"#;\n@@ -215,7 +221,25 @@ pub use prelude::*;\n         self.find_trait(\"core:convert:From\")\n     }\n \n+    pub(crate) fn core_option_Option(&self) -> Option<Enum> {\n+        self.find_enum(\"core:option:Option\")\n+    }\n+\n     fn find_trait(&self, path: &str) -> Option<Trait> {\n+        match self.find_def(path)? {\n+            hir::ScopeDef::ModuleDef(hir::ModuleDef::Trait(it)) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    fn find_enum(&self, path: &str) -> Option<Enum> {\n+        match self.find_def(path)? {\n+            hir::ScopeDef::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Enum(it))) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    fn find_def(&self, path: &str) -> Option<ScopeDef> {\n         let db = self.0.db;\n         let mut path = path.split(':');\n         let trait_ = path.next_back()?;\n@@ -240,9 +264,6 @@ pub use prelude::*;\n         }\n         let def =\n             module.scope(db, None).into_iter().find(|(name, _def)| &name.to_string() == trait_)?.1;\n-        match def {\n-            hir::ScopeDef::ModuleDef(hir::ModuleDef::Trait(it)) => Some(it),\n-            _ => None,\n-        }\n+        Some(def)\n     }\n }"}]}