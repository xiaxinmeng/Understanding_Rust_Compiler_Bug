{"sha": "6a4bdda87bc09ba080f42ffe30cb488b3740ca9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNGJkZGE4N2JjMDliYTA4MGY0MmZmZTMwY2I0ODhiMzc0MGNhOWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-05-05T15:06:08Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-05-12T17:16:37Z"}, "message": "Reduce js files size", "tree": {"sha": "4086e1bb95236a21c9b1dfd9ab93e0c151d30779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4086e1bb95236a21c9b1dfd9ab93e0c151d30779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a4bdda87bc09ba080f42ffe30cb488b3740ca9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a4bdda87bc09ba080f42ffe30cb488b3740ca9e", "html_url": "https://github.com/rust-lang/rust/commit/6a4bdda87bc09ba080f42ffe30cb488b3740ca9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a4bdda87bc09ba080f42ffe30cb488b3740ca9e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b7c8d2912b062e421bf17a584835e2ac66c124", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b7c8d2912b062e421bf17a584835e2ac66c124", "html_url": "https://github.com/rust-lang/rust/commit/72b7c8d2912b062e421bf17a584835e2ac66c124"}], "stats": {"total": 57, "additions": 31, "deletions": 26}, "files": [{"sha": "7bddeb2f33f75b7f653abac58140b298a0cd4cb9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6a4bdda87bc09ba080f42ffe30cb488b3740ca9e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a4bdda87bc09ba080f42ffe30cb488b3740ca9e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=6a4bdda87bc09ba080f42ffe30cb488b3740ca9e", "patch": "@@ -413,9 +413,9 @@ impl ToJson for Type {\n         match self.name {\n             Some(ref name) => {\n                 let mut data = BTreeMap::new();\n-                data.insert(\"name\".to_owned(), name.to_json());\n+                data.insert(\"n\".to_owned(), name.to_json());\n                 if let Some(ref generics) = self.generics {\n-                    data.insert(\"generics\".to_owned(), generics.to_json());\n+                    data.insert(\"g\".to_owned(), generics.to_json());\n                 }\n                 Json::Object(data)\n             },\n@@ -438,8 +438,12 @@ impl ToJson for IndexItemFunctionType {\n             Json::Null\n         } else {\n             let mut data = BTreeMap::new();\n-            data.insert(\"inputs\".to_owned(), self.inputs.to_json());\n-            data.insert(\"output\".to_owned(), self.output.to_json());\n+            if !self.inputs.is_empty() {\n+                data.insert(\"i\".to_owned(), self.inputs.to_json());\n+            }\n+            if let Some(ref output) = self.output {\n+                data.insert(\"o\".to_owned(), output.to_json());\n+            }\n             Json::Object(data)\n         }\n     }\n@@ -897,8 +901,8 @@ themePicker.onblur = handleThemeButtonsBlur;\n     }\n \n     fn show_item(item: &IndexItem, krate: &str) -> String {\n-        format!(\"{{'crate':'{}','ty':{},'name':'{}','desc':'{}','path':'{}'{}}}\",\n-                krate, item.ty as usize, item.name, item.desc, item.path,\n+        format!(\"{{'crate':'{}','ty':{},'name':'{}','desc':'{}','p':'{}'{}}}\",\n+                krate, item.ty as usize, item.name, item.desc.replace(\"'\", \"\\\\'\"), item.path,\n                 if let Some(p) = item.parent_idx {\n                     format!(\",'parent':{}\", p)\n                 } else {"}, {"sha": "527c880b34ff01be3b9d7c9930c9bda717de2765", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6a4bdda87bc09ba080f42ffe30cb488b3740ca9e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/6a4bdda87bc09ba080f42ffe30cb488b3740ca9e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=6a4bdda87bc09ba080f42ffe30cb488b3740ca9e", "patch": "@@ -462,7 +462,7 @@\n                         if (isType !== true || obj.type) {\n                             var res = buildHrefAndPath(obj);\n                             obj.displayPath = pathSplitter(res[0]);\n-                            obj.fullPath = obj.displayPath + obj.name;\n+                            obj.fullPath = obj.displayPath + obj.n;\n                             obj.href = res[1];\n                             out.push(obj);\n                             if (out.length >= MAX_RESULTS) {\n@@ -597,8 +597,8 @@\n                 // match as well.\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n                 if (val.generics.length > 0) {\n-                    if (obj.generics && obj.generics.length >= val.generics.length) {\n-                        var elems = obj.generics.slice(0);\n+                    if (obj.g && obj.g.length >= val.generics.length) {\n+                        var elems = obj.g.slice(0);\n                         var total = 0;\n                         var done = 0;\n                         // We need to find the type that matches the most to remove it in order\n@@ -630,11 +630,11 @@\n             // Check for type name and type generics (if any).\n             function checkType(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n-                if (obj.name === val.name) {\n+                if (obj.n === val.name) {\n                     if (literalSearch === true) {\n                         if (val.generics && val.generics.length !== 0) {\n-                            if (obj.generics && obj.length >= val.generics.length) {\n-                                var elems = obj.generics.slice(0);\n+                            if (obj.g && obj.length >= val.generics.length) {\n+                                var elems = obj.g.slice(0);\n                                 var allFound = true;\n                                 var x;\n \n@@ -658,7 +658,7 @@\n                     }\n                     // If the type has generics but don't match, then it won't return at this point.\n                     // Otherwise, `checkGenerics` will return 0 and it'll return.\n-                    if (obj.generics && obj.generics.length !== 0) {\n+                    if (obj.g && obj.g.length !== 0) {\n                         var tmp_lev = checkGenerics(obj, val);\n                         if (tmp_lev <= MAX_LEV_DISTANCE) {\n                             return tmp_lev;\n@@ -669,22 +669,22 @@\n                 }\n                 // Names didn't match so let's check if one of the generic types could.\n                 if (literalSearch === true) {\n-                     if (obj.generics && obj.generics.length > 0) {\n-                        for (var x = 0; x < obj.generics.length; ++x) {\n-                            if (obj.generics[x] === val.name) {\n+                     if (obj.g && obj.g.length > 0) {\n+                        for (var x = 0; x < obj.g.length; ++x) {\n+                            if (obj.g[x] === val.name) {\n                                 return true;\n                             }\n                         }\n                     }\n                     return false;\n                 }\n-                var lev_distance = Math.min(levenshtein(obj.name, val.name), lev_distance);\n+                var lev_distance = Math.min(levenshtein(obj.n, val.name), lev_distance);\n                 if (lev_distance <= MAX_LEV_DISTANCE) {\n                     lev_distance = Math.min(checkGenerics(obj, val), lev_distance);\n-                } else if (obj.generics && obj.generics.length > 0) {\n+                } else if (obj.g && obj.g.length > 0) {\n                     // We can check if the type we're looking for is inside the generics!\n-                    for (var x = 0; x < obj.generics.length; ++x) {\n-                        lev_distance = Math.min(levenshtein(obj.generics[x], val.name),\n+                    for (var x = 0; x < obj.g.length; ++x) {\n+                        lev_distance = Math.min(levenshtein(obj.g[x], val.name),\n                                                 lev_distance);\n                     }\n                 }\n@@ -696,9 +696,9 @@\n             function findArg(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n \n-                if (obj && obj.type && obj.type.inputs.length > 0) {\n-                    for (var i = 0; i < obj.type.inputs.length; i++) {\n-                        var tmp = checkType(obj.type.inputs[i], val, literalSearch);\n+                if (obj && obj.type && obj.type.i && obj.type.i.length > 0) {\n+                    for (var i = 0; i < obj.type.i.length; i++) {\n+                        var tmp = checkType(obj.type.i[i], val, literalSearch);\n                         if (literalSearch === true && tmp === true) {\n                             return true;\n                         }\n@@ -714,8 +714,8 @@\n             function checkReturned(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n \n-                if (obj && obj.type && obj.type.output) {\n-                    var tmp = checkType(obj.type.output, val, literalSearch);\n+                if (obj && obj.type && obj.type.o) {\n+                    var tmp = checkType(obj.type.o, val, literalSearch);\n                     if (literalSearch === true && tmp === true) {\n                         return true;\n                     }\n@@ -860,7 +860,7 @@\n                     var fullId = generateId(ty);\n \n                     // allow searching for void (no output) functions as well\n-                    var typeOutput = type.output ? type.output.name : \"\";\n+                    var typeOutput = type.o ? type.o.name : \"\";\n                     var returned = checkReturned(ty, output, true);\n                     if (output.name === \"*\" || returned === true) {\n                         var in_args = false;\n@@ -1029,6 +1029,7 @@\n                 for (var i = 0; i < aliases.length; ++i) {\n                     aliases[i].is_alias = true;\n                     aliases[i].alias = query.raw;\n+                    aliases[i].path = aliases[i].p;\n                     var res = buildHrefAndPath(aliases[i]);\n                     aliases[i].displayPath = pathSplitter(res[0]);\n                     aliases[i].fullPath = aliases[i].displayPath + aliases[i].name;"}]}