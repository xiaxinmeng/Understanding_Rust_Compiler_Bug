{"sha": "a2f720d9fe12a0981a14fd16f84cb8b23c284432", "node_id": "C_kwDOAAsO6NoAKGEyZjcyMGQ5ZmUxMmEwOTgxYTE0ZmQxNmY4NGNiOGIyM2MyODQ0MzI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-13T10:11:45Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-22T17:17:05Z"}, "message": "Allow building and testing without rustup\n\nThis can be done by installing the nightly specified in\nrust-toolchain.toml and then pointing the CARGO, RUSTC and RUSTDOC env\nvars to the right executables.", "tree": {"sha": "72bf520fddbf2d7a78cf204bab284008afe5e60a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72bf520fddbf2d7a78cf204bab284008afe5e60a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f720d9fe12a0981a14fd16f84cb8b23c284432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f720d9fe12a0981a14fd16f84cb8b23c284432", "html_url": "https://github.com/rust-lang/rust/commit/a2f720d9fe12a0981a14fd16f84cb8b23c284432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f720d9fe12a0981a14fd16f84cb8b23c284432/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22befab611db45f5448d09db63e67fb72bd9af0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/22befab611db45f5448d09db63e67fb72bd9af0c", "html_url": "https://github.com/rust-lang/rust/commit/22befab611db45f5448d09db63e67fb72bd9af0c"}], "stats": {"total": 96, "additions": 78, "deletions": 18}, "files": [{"sha": "8ffd4852083d59061a4f1c9906f0e58ef0df8cbb", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2f720d9fe12a0981a14fd16f84cb8b23c284432/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f720d9fe12a0981a14fd16f84cb8b23c284432/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=a2f720d9fe12a0981a14fd16f84cb8b23c284432", "patch": "@@ -16,6 +16,7 @@ pub(crate) fn run(\n     sysroot_kind: SysrootKind,\n     dirs: &Dirs,\n     cg_clif_dylib: &Path,\n+    rustup_toolchain_name: Option<&str>,\n     bootstrap_host_compiler: &Compiler,\n ) {\n     ABI_CAFE_REPO.fetch(dirs);\n@@ -27,6 +28,7 @@ pub(crate) fn run(\n         sysroot_kind,\n         cg_clif_dylib,\n         bootstrap_host_compiler,\n+        rustup_toolchain_name,\n         bootstrap_host_compiler.triple.clone(),\n     );\n "}, {"sha": "d2e712941bfbb68cf91aa6274ba2ef515e2dc91a", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2f720d9fe12a0981a14fd16f84cb8b23c284432/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f720d9fe12a0981a14fd16f84cb8b23c284432/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=a2f720d9fe12a0981a14fd16f84cb8b23c284432", "patch": "@@ -3,7 +3,7 @@ use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_file_name, get_rustc_version, get_toolchain_name};\n+use super::rustc_info::{get_file_name, get_rustc_version};\n use super::utils::{remove_dir_if_exists, spawn_and_wait, try_hard_link, CargoProject, Compiler};\n use super::SysrootKind;\n \n@@ -17,6 +17,7 @@ pub(crate) fn build_sysroot(\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib_src: &Path,\n     bootstrap_host_compiler: &Compiler,\n+    rustup_toolchain_name: Option<&str>,\n     target_triple: String,\n ) -> Compiler {\n     eprintln!(\"[BUILD] sysroot {:?}\", sysroot_kind);\n@@ -41,18 +42,29 @@ pub(crate) fn build_sysroot(\n \n     // Build and copy rustc and cargo wrappers\n     let wrapper_base_name = get_file_name(&bootstrap_host_compiler.rustc, \"____\", \"bin\");\n-    let toolchain_name = get_toolchain_name();\n     for wrapper in [\"rustc-clif\", \"rustdoc-clif\", \"cargo-clif\"] {\n         let wrapper_name = wrapper_base_name.replace(\"____\", wrapper);\n \n         let mut build_cargo_wrapper_cmd = Command::new(&bootstrap_host_compiler.rustc);\n         let wrapper_path = DIST_DIR.to_path(dirs).join(&wrapper_name);\n         build_cargo_wrapper_cmd\n-            .env(\"TOOLCHAIN_NAME\", toolchain_name.clone())\n             .arg(RelPath::SCRIPTS.to_path(dirs).join(&format!(\"{wrapper}.rs\")))\n             .arg(\"-o\")\n             .arg(&wrapper_path)\n             .arg(\"-Cstrip=debuginfo\");\n+        if let Some(rustup_toolchain_name) = &rustup_toolchain_name {\n+            build_cargo_wrapper_cmd\n+                .env(\"TOOLCHAIN_NAME\", rustup_toolchain_name)\n+                .env_remove(\"CARGO\")\n+                .env_remove(\"RUSTC\")\n+                .env_remove(\"RUSTDOC\");\n+        } else {\n+            build_cargo_wrapper_cmd\n+                .env_remove(\"TOOLCHAIN_NAME\")\n+                .env(\"CARGO\", &bootstrap_host_compiler.cargo)\n+                .env(\"RUSTC\", &bootstrap_host_compiler.rustc)\n+                .env(\"RUSTDOC\", &bootstrap_host_compiler.rustdoc);\n+        }\n         spawn_and_wait(build_cargo_wrapper_cmd);\n         try_hard_link(wrapper_path, BIN_DIR.to_path(dirs).join(wrapper_name));\n     }"}, {"sha": "d1d6f34dcffb880a2216f39fb0b48f57a5839c3a", "filename": "build_system/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a2f720d9fe12a0981a14fd16f84cb8b23c284432/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f720d9fe12a0981a14fd16f84cb8b23c284432/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=a2f720d9fe12a0981a14fd16f84cb8b23c284432", "patch": "@@ -103,6 +103,14 @@ pub(crate) fn main() {\n         }\n     }\n \n+    let rustup_toolchain_name = match (env::var(\"CARGO\"), env::var(\"RUSTC\"), env::var(\"RUSTDOC\")) {\n+        (Ok(_), Ok(_), Ok(_)) => None,\n+        (Err(_), Err(_), Err(_)) => Some(rustc_info::get_toolchain_name()),\n+        _ => {\n+            eprintln!(\"All of CARGO, RUSTC and RUSTDOC need to be set or none must be set\");\n+            process::exit(1);\n+        }\n+    };\n     let bootstrap_host_compiler = {\n         let cargo = rustc_info::get_cargo_path();\n         let rustc = rustc_info::get_rustc_path();\n@@ -173,6 +181,7 @@ pub(crate) fn main() {\n                 sysroot_kind,\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n+                rustup_toolchain_name.as_deref(),\n                 target_triple.clone(),\n             );\n         }\n@@ -181,7 +190,14 @@ pub(crate) fn main() {\n                 eprintln!(\"Abi-cafe doesn't support cross-compilation\");\n                 process::exit(1);\n             }\n-            abi_cafe::run(channel, sysroot_kind, &dirs, &cg_clif_dylib, &bootstrap_host_compiler);\n+            abi_cafe::run(\n+                channel,\n+                sysroot_kind,\n+                &dirs,\n+                &cg_clif_dylib,\n+                rustup_toolchain_name.as_deref(),\n+                &bootstrap_host_compiler,\n+            );\n         }\n         Command::Build => {\n             build_sysroot::build_sysroot(\n@@ -190,6 +206,7 @@ pub(crate) fn main() {\n                 sysroot_kind,\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n+                rustup_toolchain_name.as_deref(),\n                 target_triple,\n             );\n         }\n@@ -200,6 +217,7 @@ pub(crate) fn main() {\n                 sysroot_kind,\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n+                rustup_toolchain_name.as_deref(),\n                 target_triple,\n             );\n             bench::benchmark(&dirs, &bootstrap_host_compiler);"}, {"sha": "c14b4fdaf3348d2e306e42db038638b423fde2aa", "filename": "build_system/rustc_info.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a2f720d9fe12a0981a14fd16f84cb8b23c284432/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f720d9fe12a0981a14fd16f84cb8b23c284432/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=a2f720d9fe12a0981a14fd16f84cb8b23c284432", "patch": "@@ -34,6 +34,9 @@ pub(crate) fn get_toolchain_name() -> String {\n }\n \n pub(crate) fn get_cargo_path() -> PathBuf {\n+    if let Ok(cargo) = std::env::var(\"CARGO\") {\n+        return PathBuf::from(cargo);\n+    }\n     let cargo_path = Command::new(\"rustup\")\n         .stderr(Stdio::inherit())\n         .args(&[\"which\", \"cargo\"])\n@@ -44,6 +47,9 @@ pub(crate) fn get_cargo_path() -> PathBuf {\n }\n \n pub(crate) fn get_rustc_path() -> PathBuf {\n+    if let Ok(rustc) = std::env::var(\"RUSTC\") {\n+        return PathBuf::from(rustc);\n+    }\n     let rustc_path = Command::new(\"rustup\")\n         .stderr(Stdio::inherit())\n         .args(&[\"which\", \"rustc\"])\n@@ -54,6 +60,9 @@ pub(crate) fn get_rustc_path() -> PathBuf {\n }\n \n pub(crate) fn get_rustdoc_path() -> PathBuf {\n+    if let Ok(rustdoc) = std::env::var(\"RUSTDOC\") {\n+        return PathBuf::from(rustdoc);\n+    }\n     let rustc_path = Command::new(\"rustup\")\n         .stderr(Stdio::inherit())\n         .args(&[\"which\", \"rustdoc\"])"}, {"sha": "40bcf1e0c1e050446a0e00582aa267a80b8c09da", "filename": "build_system/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2f720d9fe12a0981a14fd16f84cb8b23c284432/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f720d9fe12a0981a14fd16f84cb8b23c284432/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=a2f720d9fe12a0981a14fd16f84cb8b23c284432", "patch": "@@ -217,6 +217,7 @@ pub(crate) fn run_tests(\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib: &Path,\n     bootstrap_host_compiler: &Compiler,\n+    rustup_toolchain_name: Option<&str>,\n     target_triple: String,\n ) {\n     if config::get_bool(\"testsuite.no_sysroot\") {\n@@ -226,6 +227,7 @@ pub(crate) fn run_tests(\n             SysrootKind::None,\n             cg_clif_dylib,\n             bootstrap_host_compiler,\n+            rustup_toolchain_name,\n             target_triple.clone(),\n         );\n \n@@ -251,6 +253,7 @@ pub(crate) fn run_tests(\n             sysroot_kind,\n             cg_clif_dylib,\n             bootstrap_host_compiler,\n+            rustup_toolchain_name,\n             target_triple.clone(),\n         );\n         // Rust's build system denies a couple of lints that trigger on several of the test"}, {"sha": "1aee083f8df8fe49ceef07e23749b44f808b51c6", "filename": "build_system/usage.txt", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a2f720d9fe12a0981a14fd16f84cb8b23c284432/build_system%2Fusage.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a2f720d9fe12a0981a14fd16f84cb8b23c284432/build_system%2Fusage.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fusage.txt?ref=a2f720d9fe12a0981a14fd16f84cb8b23c284432", "patch": "@@ -30,8 +30,9 @@ OPTIONS:\n             Require Cargo.lock and cache are up to date\n \n REQUIREMENTS:\n-    * Rustup: The build system has a hard coded dependency on rustup to install the right nightly\n-      version and make sure it is used where necessary.\n+    * Rustup: By default rustup is used to install the right nightly version. If you don't want to\n+      use rustup, you can manually install the nightly version indicated by rust-toolchain.toml and\n+      point the CARGO, RUSTC and RUSTDOC env vars to the right executables.\n     * Git: `./y.rs prepare` uses git for applying patches and on Windows for downloading test repos.\n     * Curl and tar (non-Windows only): Used by `./y.rs prepare` to download a single commit for\n       repos. Git will be used to clone the whole repo when using Windows."}, {"sha": "0d5d9f7db013eeb10ae2ba9b9cee36bf5ec95e9a", "filename": "scripts/cargo-clif.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a2f720d9fe12a0981a14fd16f84cb8b23c284432/scripts%2Fcargo-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f720d9fe12a0981a14fd16f84cb8b23c284432/scripts%2Fcargo-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo-clif.rs?ref=a2f720d9fe12a0981a14fd16f84cb8b23c284432", "patch": "@@ -28,8 +28,13 @@ fn main() {\n     env::set_var(\"RUSTFLAGS\", env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + &rustflags);\n     env::set_var(\"RUSTDOCFLAGS\", env::var(\"RUSTDOCFLAGS\").unwrap_or(String::new()) + &rustflags);\n \n-    // Ensure that the right toolchain is used\n-    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n+    let cargo = if let Some(cargo) = option_env!(\"CARGO\") {\n+        cargo\n+    } else {\n+        // Ensure that the right toolchain is used\n+        env::set_var(\"RUSTUP_TOOLCHAIN\", option_env!(\"TOOLCHAIN_NAME\").expect(\"TOOLCHAIN_NAME\"));\n+        \"cargo\"\n+    };\n \n     let args: Vec<_> = match env::args().nth(1).as_deref() {\n         Some(\"jit\") => {\n@@ -64,10 +69,10 @@ fn main() {\n     };\n \n     #[cfg(unix)]\n-    panic!(\"Failed to spawn cargo: {}\", Command::new(\"cargo\").args(args).exec());\n+    panic!(\"Failed to spawn cargo: {}\", Command::new(cargo).args(args).exec());\n \n     #[cfg(not(unix))]\n     std::process::exit(\n-        Command::new(\"cargo\").args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n+        Command::new(cargo).args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n     );\n }"}, {"sha": "df94b80b34f107bef30ae4d314f5a4c30990834b", "filename": "scripts/rustc-clif.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a2f720d9fe12a0981a14fd16f84cb8b23c284432/scripts%2Frustc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f720d9fe12a0981a14fd16f84cb8b23c284432/scripts%2Frustc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustc-clif.rs?ref=a2f720d9fe12a0981a14fd16f84cb8b23c284432", "patch": "@@ -30,14 +30,19 @@ fn main() {\n     }\n     args.extend(passed_args);\n \n-    // Ensure that the right toolchain is used\n-    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n+    let rustc = if let Some(rustc) = option_env!(\"RUSTC\") {\n+        rustc\n+    } else {\n+        // Ensure that the right toolchain is used\n+        env::set_var(\"RUSTUP_TOOLCHAIN\", option_env!(\"TOOLCHAIN_NAME\").expect(\"TOOLCHAIN_NAME\"));\n+        \"rustc\"\n+    };\n \n     #[cfg(unix)]\n-    panic!(\"Failed to spawn rustc: {}\", Command::new(\"rustc\").args(args).exec());\n+    panic!(\"Failed to spawn rustc: {}\", Command::new(rustc).args(args).exec());\n \n     #[cfg(not(unix))]\n     std::process::exit(\n-        Command::new(\"rustc\").args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n+        Command::new(rustc).args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n     );\n }"}, {"sha": "36a00dc676ef335f80b6aa3fe7d23d0656613daf", "filename": "scripts/rustdoc-clif.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a2f720d9fe12a0981a14fd16f84cb8b23c284432/scripts%2Frustdoc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f720d9fe12a0981a14fd16f84cb8b23c284432/scripts%2Frustdoc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustdoc-clif.rs?ref=a2f720d9fe12a0981a14fd16f84cb8b23c284432", "patch": "@@ -30,14 +30,19 @@ fn main() {\n     }\n     args.extend(passed_args);\n \n-    // Ensure that the right toolchain is used\n-    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n+    let rustdoc = if let Some(rustdoc) = option_env!(\"RUSTDOC\") {\n+        rustdoc\n+    } else {\n+        // Ensure that the right toolchain is used\n+        env::set_var(\"RUSTUP_TOOLCHAIN\", option_env!(\"TOOLCHAIN_NAME\").expect(\"TOOLCHAIN_NAME\"));\n+        \"rustdoc\"\n+    };\n \n     #[cfg(unix)]\n-    panic!(\"Failed to spawn rustdoc: {}\", Command::new(\"rustdoc\").args(args).exec());\n+    panic!(\"Failed to spawn rustdoc: {}\", Command::new(rustdoc).args(args).exec());\n \n     #[cfg(not(unix))]\n     std::process::exit(\n-        Command::new(\"rustdoc\").args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n+        Command::new(rustdoc).args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n     );\n }"}]}