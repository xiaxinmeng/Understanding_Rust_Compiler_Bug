{"sha": "f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2Yzc1MmIyNzFjZDQyN2UxYTBlM2M2ODcyMmVjMmMwYTM0ZjMwMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-28T10:28:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-28T10:28:30Z"}, "message": "Auto merge of #4462 - JohnTitor:fix-build-arg, r=flip1995\n\nReplace `Arg` with `Param`\n\nFix build issue.\nRustup to https://github.com/rust-lang/rust/pull/63127\n\nchangelog: none", "tree": {"sha": "f9d26906a9272f5b9f21bc5682146fbaa51948cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d26906a9272f5b9f21bc5682146fbaa51948cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "html_url": "https://github.com/rust-lang/rust/commit/f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "949b347f654f40ed7e4ab9dedb9e2c9b0a8c2133", "url": "https://api.github.com/repos/rust-lang/rust/commits/949b347f654f40ed7e4ab9dedb9e2c9b0a8c2133", "html_url": "https://github.com/rust-lang/rust/commit/949b347f654f40ed7e4ab9dedb9e2c9b0a8c2133"}, {"sha": "2c282252a93effa847517a4ced1b24036372dd46", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c282252a93effa847517a4ced1b24036372dd46", "html_url": "https://github.com/rust-lang/rust/commit/2c282252a93effa847517a4ced1b24036372dd46"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "1e1e4317e34ec48687c4c4da5762cfb453013088", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "patch": "@@ -47,8 +47,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ByteCount {\n             then {\n                 let body = cx.tcx.hir().body(body_id);\n                 if_chain! {\n-                    if body.arguments.len() == 1;\n-                    if let Some(argname) = get_pat_name(&body.arguments[0].pat);\n+                    if body.params.len() == 1;\n+                    if let Some(argname) = get_pat_name(&body.params[0].pat);\n                     if let ExprKind::Binary(ref op, ref l, ref r) = body.value.node;\n                     if op.node == BinOpKind::Eq;\n                     if match_type(cx,"}, {"sha": "e174cdfb86033f92095752bcc83bb53de3dabc7d", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "patch": "@@ -108,7 +108,7 @@ fn is_argument(map: &hir::map::Map<'_>, id: HirId) -> bool {\n     }\n \n     match map.find(map.get_parent_node(id)) {\n-        Some(Node::Arg(_)) => true,\n+        Some(Node::Param(_)) => true,\n         _ => false,\n     }\n }"}, {"sha": "485a29ed3d89c80e77874965065a7278ee493a0b", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "patch": "@@ -202,7 +202,10 @@ fn get_type_name(cx: &LateContext<'_, '_>, ty: Ty<'_>) -> String {\n     }\n }\n \n-fn compare_inputs(closure_inputs: &mut dyn Iterator<Item = &Arg>, call_args: &mut dyn Iterator<Item = &Expr>) -> bool {\n+fn compare_inputs(\n+    closure_inputs: &mut dyn Iterator<Item = &Param>,\n+    call_args: &mut dyn Iterator<Item = &Expr>,\n+) -> bool {\n     for (closure_input, function_arg) in closure_inputs.zip(call_args) {\n         if let PatKind::Binding(_, _, ident, _) = closure_input.pat.node {\n             // XXXManishearth Should I be checking the binding mode here?"}, {"sha": "e009d28db68509cbcfb6317e8968c72dd5487eb5", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "patch": "@@ -280,7 +280,7 @@ impl<'a, 'tcx> Functions {\n     }\n }\n \n-fn raw_ptr_arg(arg: &hir::Arg, ty: &hir::Ty) -> Option<hir::HirId> {\n+fn raw_ptr_arg(arg: &hir::Param, ty: &hir::Ty) -> Option<hir::HirId> {\n     if let (&hir::PatKind::Binding(_, id, _, _), &hir::TyKind::Ptr(_)) = (&arg.pat.node, &ty.node) {\n         Some(id)\n     } else {"}, {"sha": "5c44346aa6df549ef180e19b447ca2d82fc4f7db", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "patch": "@@ -57,7 +57,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapClone {\n             let closure_body = cx.tcx.hir().body(body_id);\n             let closure_expr = remove_blocks(&closure_body.value);\n             then {\n-                match closure_body.arguments[0].pat.node {\n+                match closure_body.params[0].pat.node {\n                     hir::PatKind::Ref(ref inner, _) => if let hir::PatKind::Binding(\n                         hir::BindingAnnotation::Unannotated, .., name, None\n                     ) = inner.node {"}, {"sha": "0df14c2664aefadd814112099896ab245d55f406", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "patch": "@@ -161,7 +161,10 @@ fn reduce_unit_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a hir::Expr) ->\n     }\n }\n \n-fn unit_closure<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'a hir::Expr) -> Option<(&'tcx hir::Arg, &'a hir::Expr)> {\n+fn unit_closure<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'a hir::Expr,\n+) -> Option<(&'tcx hir::Param, &'a hir::Expr)> {\n     if let hir::ExprKind::Closure(_, ref decl, inner_expr_id, _, _) = expr.node {\n         let body = cx.tcx.hir().body(inner_expr_id);\n         let body_expr = &body.value;"}, {"sha": "81a8e69220c168f2ed2dcad66f88cdd073913ce3", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "patch": "@@ -1732,8 +1732,8 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n             if bin_op.node == op;\n \n             // Extract the names of the two arguments to the closure\n-            if let Some(first_arg_ident) = get_arg_name(&closure_body.arguments[0].pat);\n-            if let Some(second_arg_ident) = get_arg_name(&closure_body.arguments[1].pat);\n+            if let Some(first_arg_ident) = get_arg_name(&closure_body.params[0].pat);\n+            if let Some(second_arg_ident) = get_arg_name(&closure_body.params[1].pat);\n \n             if match_var(&*left_expr, first_arg_ident);\n             if replacement_has_args || match_var(&*right_expr, second_arg_ident);\n@@ -2345,7 +2345,7 @@ fn lint_flat_map_identity<'a, 'tcx>(\n             if let hir::ExprKind::Closure(_, _, body_id, _, _) = arg_node;\n             let body = cx.tcx.hir().body(*body_id);\n \n-            if let hir::PatKind::Binding(_, _, binding_ident, _) = body.arguments[0].pat.node;\n+            if let hir::PatKind::Binding(_, _, binding_ident, _) = body.params[0].pat.node;\n             if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = body.value.node;\n \n             if path.segments.len() == 1;\n@@ -2390,7 +2390,7 @@ fn lint_search_is_some<'a, 'tcx>(\n                 if search_method == \"find\";\n                 if let hir::ExprKind::Closure(_, _, body_id, ..) = search_args[1].node;\n                 let closure_body = cx.tcx.hir().body(body_id);\n-                if let Some(closure_arg) = closure_body.arguments.get(0);\n+                if let Some(closure_arg) = closure_body.params.get(0);\n                 if let hir::PatKind::Ref(..) = closure_arg.pat.node;\n                 then {\n                     Some(search_snippet.replacen('&', \"\", 1))"}, {"sha": "1d562566fdf881e7d43f41f997188b09133a4f0d", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "patch": "@@ -17,7 +17,7 @@ pub(super) fn lint(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &[hir::Expr\n \n     if let hir::ExprKind::Closure(_, _, body_id, ..) = args[1].node {\n         let body = cx.tcx.hir().body(body_id);\n-        let arg_id = body.arguments[0].pat.hir_id;\n+        let arg_id = body.params[0].pat.hir_id;\n         let mutates_arg = match mutated_variables(&body.value, cx) {\n             Some(used_mutably) => used_mutably.contains(&arg_id),\n             None => true,"}, {"sha": "d3ca5cb539a1be08c58168b37af489bdbfdeca50", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n         let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n \n-        for (idx, ((input, &ty), arg)) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments).enumerate() {\n+        for (idx, ((input, &ty), arg)) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.params).enumerate() {\n             // All spans generated from a proc-macro invocation are the same...\n             if span == input.span {\n                 return;"}, {"sha": "28d337d3cd67c1d46e36fb535dc9b8a2441d86a1", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "patch": "@@ -2056,7 +2056,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                             continue;\n                         }\n                         let generics_suggestion_span = generics.span.substitute_dummy({\n-                            let pos = snippet_opt(cx, item.span.until(body.arguments[0].pat.span))\n+                            let pos = snippet_opt(cx, item.span.until(body.params[0].pat.span))\n                                 .and_then(|snip| {\n                                     let i = snip.find(\"fn\")?;\n                                     Some(item.span.lo() + BytePos((i + (&snip[i..]).find('(')?) as u32))"}, {"sha": "8fb45899653c0d3d1a740d5f5ff871be42af7a1d", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "patch": "@@ -835,7 +835,7 @@ pub fn remove_blocks(expr: &Expr) -> &Expr {\n     }\n }\n \n-pub fn is_self(slf: &Arg) -> bool {\n+pub fn is_self(slf: &Param) -> bool {\n     if let PatKind::Binding(.., name, _) = slf.pat.node {\n         name.name == kw::SelfLower\n     } else {\n@@ -855,8 +855,8 @@ pub fn is_self_ty(slf: &hir::Ty) -> bool {\n     false\n }\n \n-pub fn iter_input_pats<'tcx>(decl: &FnDecl, body: &'tcx Body) -> impl Iterator<Item = &'tcx Arg> {\n-    (0..decl.inputs.len()).map(move |i| &body.arguments[i])\n+pub fn iter_input_pats<'tcx>(decl: &FnDecl, body: &'tcx Body) -> impl Iterator<Item = &'tcx Param> {\n+    (0..decl.inputs.len()).map(move |i| &body.params[i])\n }\n \n /// Checks if a given expression is a match expression expanded from the `?`"}, {"sha": "be7bd0d21f69cb4b8ab12ad90b4a4a6497e42016", "filename": "clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c752b271cd427e1a0e3c68722ec2c0a34f3016/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=f6c752b271cd427e1a0e3c68722ec2c0a34f3016", "patch": "@@ -13,7 +13,7 @@ pub fn get_spans(\n     replacements: &[(&'static str, &'static str)],\n ) -> Option<Vec<(Span, Cow<'static, str>)>> {\n     if let Some(body) = opt_body_id.map(|id| cx.tcx.hir().body(id)) {\n-        get_binding_name(&body.arguments[idx]).map_or_else(\n+        get_binding_name(&body.params[idx]).map_or_else(\n             || Some(vec![]),\n             |name| extract_clone_suggestions(cx, name, replacements, body),\n         )\n@@ -80,6 +80,6 @@ impl<'a, 'tcx> Visitor<'tcx> for PtrCloneVisitor<'a, 'tcx> {\n     }\n }\n \n-fn get_binding_name(arg: &Arg) -> Option<Name> {\n+fn get_binding_name(arg: &Param) -> Option<Name> {\n     get_pat_name(&arg.pat)\n }"}]}