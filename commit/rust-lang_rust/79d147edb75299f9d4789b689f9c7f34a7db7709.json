{"sha": "79d147edb75299f9d4789b689f9c7f34a7db7709", "node_id": "C_kwDOAAsO6NoAKDc5ZDE0N2VkYjc1Mjk5ZjlkNDc4OWI2ODlmOWM3ZjM0YTdkYjc3MDk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T18:34:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T18:38:17Z"}, "message": "make home_dir work on macOS", "tree": {"sha": "1d7dd788eccc18d4e6c7f38ef393bf4a8f5cae2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d7dd788eccc18d4e6c7f38ef393bf4a8f5cae2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79d147edb75299f9d4789b689f9c7f34a7db7709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79d147edb75299f9d4789b689f9c7f34a7db7709", "html_url": "https://github.com/rust-lang/rust/commit/79d147edb75299f9d4789b689f9c7f34a7db7709", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79d147edb75299f9d4789b689f9c7f34a7db7709/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "437d2414124b9f7409c00ceb86008c1945e1fb7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/437d2414124b9f7409c00ceb86008c1945e1fb7a", "html_url": "https://github.com/rust-lang/rust/commit/437d2414124b9f7409c00ceb86008c1945e1fb7a"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "6ea10de0b8a83157d5c69db66e6aa5ee64d11d00", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/79d147edb75299f9d4789b689f9c7f34a7db7709/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d147edb75299f9d4789b689f9c7f34a7db7709/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=79d147edb75299f9d4789b689f9c7f34a7db7709", "patch": "@@ -553,6 +553,42 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_int(super::UID, dest)?;\n             }\n \n+            \"getpwuid_r\" if this.frame_in_std() => {\n+                let [uid, pwd, buf, buflen, result] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                this.check_no_isolation(\"`getpwuid_r`\")?;\n+\n+                let uid = this.read_scalar(uid)?.to_u32()?;\n+                let pwd = this.deref_operand(pwd)?;\n+                let buf = this.read_pointer(buf)?;\n+                let buflen = this.read_scalar(buflen)?.to_machine_usize(this)?;\n+                let result = this.deref_operand(result)?;\n+\n+                // Must be for \"us\".\n+                if uid != crate::shims::unix::UID {\n+                    throw_unsup_format!(\"`getpwuid_r` on other users is not supported\");\n+                }\n+\n+                // Reset all fields to `uninit` to make sure nobody reads them.\n+                // (This is a std-only shim so we are okay with such hacks.)\n+                this.write_uninit(&pwd.into())?;\n+\n+                // We only set the home_dir field.\n+                #[allow(deprecated)]\n+                let home_dir = std::env::home_dir().unwrap();\n+                let (written, _) = this.write_path_to_c_str(&home_dir, buf, buflen)?;\n+                let pw_dir = this.mplace_field_named(&pwd, \"pw_dir\")?;\n+                this.write_pointer(buf, &pw_dir.into())?;\n+\n+                if written {\n+                    this.write_pointer(pwd.ptr, &result.into())?;\n+                    this.write_null(dest)?;\n+                } else {\n+                    this.write_null(&result.into())?;\n+                    this.write_scalar(this.eval_libc(\"ERANGE\")?, dest)?;\n+                }\n+            }\n+\n             // Platform-specific shims\n             _ => {\n                 match this.tcx.sess.target.os.as_ref() {"}, {"sha": "bae3780b460c787bb1ff1cada8b9693824a62b91", "filename": "src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/79d147edb75299f9d4789b689f9c7f34a7db7709/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d147edb75299f9d4789b689f9c7f34a7db7709/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=79d147edb75299f9d4789b689f9c7f34a7db7709", "patch": "@@ -155,41 +155,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n \n-            \"getpwuid_r\" if this.frame_in_std() => {\n-                let [uid, pwd, buf, buflen, result] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.check_no_isolation(\"`getpwuid_r`\")?;\n-\n-                let uid = this.read_scalar(uid)?.to_u32()?;\n-                let pwd = this.deref_operand(pwd)?;\n-                let buf = this.read_pointer(buf)?;\n-                let buflen = this.read_scalar(buflen)?.to_machine_usize(this)?;\n-                let result = this.deref_operand(result)?;\n-\n-                // Must be for \"us\".\n-                if uid != crate::shims::unix::UID {\n-                    throw_unsup_format!(\"`getpwuid_r` on other users is not supported\");\n-                }\n-\n-                // Reset all fields to `uninit` to make sure nobody reads them.\n-                this.write_uninit(&pwd.into())?;\n-\n-                // We only set the home_dir field.\n-                #[allow(deprecated)]\n-                let home_dir = std::env::home_dir().unwrap();\n-                let (written, _) = this.write_path_to_c_str(&home_dir, buf, buflen)?;\n-                let pw_dir = this.mplace_field_named(&pwd, \"pw_dir\")?;\n-                this.write_pointer(buf, &pw_dir.into())?;\n-\n-                if written {\n-                    this.write_pointer(pwd.ptr, &result.into())?;\n-                    this.write_null(dest)?;\n-                } else {\n-                    this.write_null(&result.into())?;\n-                    this.write_scalar(this.eval_libc(\"ERANGE\")?, dest)?;\n-                }\n-            }\n-\n             _ => return Ok(EmulateByNameResult::NotSupported),\n         };\n "}, {"sha": "9eb9c3af569dd88e0b16ba61c99bda8faae63de9", "filename": "tests/pass/env/home.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79d147edb75299f9d4789b689f9c7f34a7db7709/tests%2Fpass%2Fenv%2Fhome.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d147edb75299f9d4789b689f9c7f34a7db7709/tests%2Fpass%2Fenv%2Fhome.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv%2Fhome.rs?ref=79d147edb75299f9d4789b689f9c7f34a7db7709", "patch": "@@ -1,4 +1,4 @@\n-//@only-target-linux: home_dir is only supported on Linux\n+//@ignore-target-windows: home_dir is not supported on Windows\n //@compile-flags: -Zmiri-disable-isolation\n use std::env;\n "}]}