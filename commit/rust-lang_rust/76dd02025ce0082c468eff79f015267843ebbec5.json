{"sha": "76dd02025ce0082c468eff79f015267843ebbec5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZGQwMjAyNWNlMDA4MmM0NjhlZmY3OWYwMTUyNjc4NDNlYmJlYzU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-09T13:01:15Z"}, "committer": {"name": "ggomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-11T15:13:36Z"}, "message": "Add missing examples for std::cell types", "tree": {"sha": "9e0b0b329e8f3adddd2c5e9318cce769d438a4fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e0b0b329e8f3adddd2c5e9318cce769d438a4fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76dd02025ce0082c468eff79f015267843ebbec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76dd02025ce0082c468eff79f015267843ebbec5", "html_url": "https://github.com/rust-lang/rust/commit/76dd02025ce0082c468eff79f015267843ebbec5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76dd02025ce0082c468eff79f015267843ebbec5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4114b68eba6914b46202a2108f34f7653e393851", "url": "https://api.github.com/repos/rust-lang/rust/commits/4114b68eba6914b46202a2108f34f7653e393851", "html_url": "https://github.com/rust-lang/rust/commit/4114b68eba6914b46202a2108f34f7653e393851"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "65cb1aaaff6fd1e729d0e9a4ceb9a09ca57269a8", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/76dd02025ce0082c468eff79f015267843ebbec5/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76dd02025ce0082c468eff79f015267843ebbec5/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=76dd02025ce0082c468eff79f015267843ebbec5", "patch": "@@ -237,6 +237,17 @@ impl<T:Copy> Cell<T> {\n     ///\n     /// This call borrows `Cell` mutably (at compile-time) which guarantees\n     /// that we possess the only reference.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let mut c = Cell::new(5);\n+    /// *c.get_mut() += 1;\n+    ///\n+    /// assert_eq!(c.get(), 6);\n+    /// ```\n     #[inline]\n     #[stable(feature = \"cell_get_mut\", since = \"1.11.0\")]\n     pub fn get_mut(&mut self) -> &mut T {\n@@ -388,6 +399,22 @@ impl<T: ?Sized> RefCell<T> {\n     ///\n     /// The returned value can be dispatched on to determine if a call to\n     /// `borrow` or `borrow_mut` would succeed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(borrow_state)]\n+    ///\n+    /// use std::cell::{BorrowState, RefCell};\n+    ///\n+    /// let c = RefCell::new(5);\n+    ///\n+    /// match c.borrow_state() {\n+    ///     BorrowState::Writing => println!(\"Cannot be borrowed\"),\n+    ///     BorrowState::Reading => println!(\"Cannot be borrowed mutably\"),\n+    ///     BorrowState::Unused => println!(\"Can be borrowed (mutably as well)\"),\n+    /// }\n+    /// ```\n     #[unstable(feature = \"borrow_state\", issue = \"27733\")]\n     #[inline]\n     pub fn borrow_state(&self) -> BorrowState {\n@@ -498,6 +525,17 @@ impl<T: ?Sized> RefCell<T> {\n     /// This can be used to circumvent `RefCell`'s safety checks.\n     ///\n     /// This function is `unsafe` because `UnsafeCell`'s field is public.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(as_unsafe_cell)]\n+    ///\n+    /// use std::cell::RefCell;\n+    ///\n+    /// let c = RefCell::new(5);\n+    /// let c = unsafe { c.as_unsafe_cell() };\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n     pub unsafe fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n@@ -508,6 +546,17 @@ impl<T: ?Sized> RefCell<T> {\n     ///\n     /// This call borrows `RefCell` mutably (at compile-time) so there is no\n     /// need for dynamic checks.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::RefCell;\n+    ///\n+    /// let mut c = RefCell::new(5);\n+    /// *c.get_mut() += 1;\n+    ///\n+    /// assert_eq!(c, RefCell::new(6));\n+    /// ```\n     #[inline]\n     #[stable(feature = \"cell_get_mut\", since = \"1.11.0\")]\n     pub fn get_mut(&mut self) -> &mut T {"}]}