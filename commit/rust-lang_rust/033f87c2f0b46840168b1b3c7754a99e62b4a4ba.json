{"sha": "033f87c2f0b46840168b1b3c7754a99e62b4a4ba", "node_id": "C_kwDOAAsO6NoAKDAzM2Y4N2MyZjBiNDY4NDAxNjhiMWIzYzc3NTRhOTllNjJiNGE0YmE", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-10-01T13:30:00Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-10-01T13:30:00Z"}, "message": "Add some profiling calls to name resolution", "tree": {"sha": "253377422290ebe98f200bd07d557f30b48388f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/253377422290ebe98f200bd07d557f30b48388f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033f87c2f0b46840168b1b3c7754a99e62b4a4ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033f87c2f0b46840168b1b3c7754a99e62b4a4ba", "html_url": "https://github.com/rust-lang/rust/commit/033f87c2f0b46840168b1b3c7754a99e62b4a4ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033f87c2f0b46840168b1b3c7754a99e62b4a4ba/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0646d5cf9e994be6d7fbc7809d3f94c5bcb3ac49", "url": "https://api.github.com/repos/rust-lang/rust/commits/0646d5cf9e994be6d7fbc7809d3f94c5bcb3ac49", "html_url": "https://github.com/rust-lang/rust/commit/0646d5cf9e994be6d7fbc7809d3f94c5bcb3ac49"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "dbd4378968cc9c0135861486d682e2318fd29eb4", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/033f87c2f0b46840168b1b3c7754a99e62b4a4ba/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033f87c2f0b46840168b1b3c7754a99e62b4a4ba/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=033f87c2f0b46840168b1b3c7754a99e62b4a4ba", "patch": "@@ -275,6 +275,8 @@ struct DefCollector<'a> {\n \n impl DefCollector<'_> {\n     fn seed_with_top_level(&mut self) {\n+        let _p = profile::span(\"seed_with_top_level\");\n+\n         let file_id = self.db.crate_graph()[self.def_map.krate].root_file_id;\n         let item_tree = self.db.file_item_tree(file_id.into());\n         let module_id = self.def_map.root;\n@@ -346,15 +348,20 @@ impl DefCollector<'_> {\n         }\n     }\n \n-    fn collect(&mut self) {\n+    fn resolution_loop(&mut self) {\n+        let _p = profile::span(\"DefCollector::resolution_loop\");\n+\n         // main name resolution fixed-point loop.\n         let mut i = 0;\n         'outer: loop {\n             loop {\n                 self.db.unwind_if_cancelled();\n-                loop {\n-                    if self.resolve_imports() == ReachedFixedPoint::Yes {\n-                        break;\n+                {\n+                    let _p = profile::span(\"resolve_imports loop\");\n+                    loop {\n+                        if self.resolve_imports() == ReachedFixedPoint::Yes {\n+                            break;\n+                        }\n                     }\n                 }\n                 if self.resolve_macros() == ReachedFixedPoint::Yes {\n@@ -372,6 +379,12 @@ impl DefCollector<'_> {\n                 break;\n             }\n         }\n+    }\n+\n+    fn collect(&mut self) {\n+        let _p = profile::span(\"DefCollector::collect\");\n+\n+        self.resolution_loop();\n \n         // Resolve all indeterminate resolved imports again\n         // As some of the macros will expand newly import shadowing partial resolved imports\n@@ -723,6 +736,7 @@ impl DefCollector<'_> {\n     }\n \n     fn resolve_import(&self, module_id: LocalModuleId, import: &Import) -> PartialResolvedImport {\n+        let _p = profile::span(\"resolve_import\").detail(|| format!(\"{}\", import.path));\n         tracing::debug!(\"resolving import: {:?} ({:?})\", import, self.def_map.edition);\n         if import.is_extern_crate {\n             let name = import\n@@ -790,6 +804,8 @@ impl DefCollector<'_> {\n     }\n \n     fn record_resolved_import(&mut self, directive: &ImportDirective) {\n+        let _p = profile::span(\"record_resolved_import\");\n+\n         let module_id = directive.module_id;\n         let import = &directive.import;\n         let mut def = directive.status.namespaces();\n@@ -1244,6 +1260,8 @@ impl DefCollector<'_> {\n     fn finish(mut self) -> DefMap {\n         // Emit diagnostics for all remaining unexpanded macros.\n \n+        let _p = profile::span(\"DefCollector::finish\");\n+\n         for directive in &self.unresolved_macros {\n             match &directive.kind {\n                 MacroDirectiveKind::FnLike { ast_id, expand_to } => {"}]}