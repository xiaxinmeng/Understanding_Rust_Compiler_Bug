{"sha": "8eef79ca9a2ff47db25905e8c21e2ffba1d353cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZWY3OWNhOWEyZmY0N2RiMjU5MDVlOGMyMWUyZmZiYTFkMzUzY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-28T03:38:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-28T03:38:28Z"}, "message": "Auto merge of #84968 - FabianWolff:master, r=estebank\n\nFix incorrect suggestions for E0605\n\nFixes #84598. Here is a simplified version of the problem presented in issue #84598:\n\n```Rust\n#![allow(unused_variables)]\n#![allow(dead_code)]\n\ntrait T { fn t(&self) -> i32; }\n\nunsafe fn foo(t: *mut dyn T) {\n    (t as &dyn T).t();\n}\n\nfn main() {}\n```\n\nThe current output is:\n```\nerror[E0605]: non-primitive cast: `*mut (dyn T + 'static)` as `&dyn T`\n --> src/main.rs:7:5\n  |\n7 |     (t as &dyn T).t();\n  |     ^^^^^^^^^^^^^ invalid cast\n  |\nhelp: borrow the value for the cast to be valid\n  |\n7 |     (&t as &dyn T).t();\n  |      ^\n```\n\nThis is incorrect, though: The cast will _not_ be valid when writing `&t` instead of `t`:\n```\nerror[E0277]: the trait bound `*mut (dyn T + 'static): T` is not satisfied\n --> t4.rs:7:6\n  |\n7 |     (&t as &dyn T).t();\n  |      ^^ the trait `T` is not implemented for `*mut (dyn T + 'static)`\n  |\n  = note: required for the cast to the object type `dyn T`\n```\n\nThe correct suggestion is `&*t`, which I have implemented in this pull request. Of course, this suggestion will always require an unsafe block, but arguably, that's what the user really wants if they're trying to cast a pointer to a reference.\n\nIn any case, claiming that the cast will be valid after implementing the suggestion is overly optimistic, as the coercion logic doesn't seem to resolve all nested obligations, i.e. the cast may still be invalid after implementing the suggestion. I have therefore rephrased the suggestion slightly (\"consider borrowing the value\" instead of \"borrow the value for the cast to be valid\").\n\nAdditionally, I have fixed another incorrect suggestion not mentioned in #84598, which relates to casting immutable references to mutable ones:\n\n```rust\nfn main() {\n    let mut x = 0;\n    let m = &x as &mut i32;\n}\n```\ncurrently leads to\n```\nerror[E0605]: non-primitive cast: `&i32` as `&mut i32`\n --> t5.rs:3:13\n  |\n3 |     let m = &x as &mut i32;\n  |             ^^^^^^^^^^^^^^ invalid cast\n  |\nhelp: borrow the value for the cast to be valid\n  |\n3 |     let m = &mut &x as &mut i32;\n  |             ^^^^\n```\nwhich is obviously incorrect:\n```\nerror[E0596]: cannot borrow data in a `&` reference as mutable\n --> t5.rs:3:13\n  |\n3 |     let m = &mut &x as &mut i32;\n  |             ^^^^^^^ cannot borrow as mutable\n```\nI've changed the suggestion to a note explaining the problem:\n```\nerror[E0605]: non-primitive cast: `&i32` as `&mut i32`\n --> t5.rs:3:13\n  |\n3 |     let m = &x as &mut i32;\n  |             ^^^^^^^^^^^^^^ invalid cast\n  |\nnote: this reference is immutable\n --> t5.rs:3:13\n  |\n3 |     let m = &x as &mut i32;\n  |             ^^\nnote: trying to cast to a mutable reference type\n --> t5.rs:3:19\n  |\n3 |     let m = &x as &mut i32;\n  |                   ^^^^^^^^\n```\nIn this example, it would have been even nicer to suggest replacing `&x` with `&mut x`, but this would be much more complex because we would have to take apart the expression to be cast (currently, we only look at its type), and `&x` could be stored in a variable, where such a suggestion would not even be directly applicable:\n```rust\nfn main() {\n    let mut x = 0;\n    let r = &x;\n    let m = r as &mut i32;\n}\n```\nMy solution covers this case, too.", "tree": {"sha": "481025eed32323eae2af23740e150e7933e6639a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/481025eed32323eae2af23740e150e7933e6639a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb", "html_url": "https://github.com/rust-lang/rust/commit/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df3d86b535182cd52927405a4316ad688d2240f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/df3d86b535182cd52927405a4316ad688d2240f8", "html_url": "https://github.com/rust-lang/rust/commit/df3d86b535182cd52927405a4316ad688d2240f8"}, {"sha": "71d1b2a009aa36422573d5ad4f74711b871df53e", "url": "https://api.github.com/repos/rust-lang/rust/commits/71d1b2a009aa36422573d5ad4f74711b871df53e", "html_url": "https://github.com/rust-lang/rust/commit/71d1b2a009aa36422573d5ad4f74711b871df53e"}], "stats": {"total": 91, "additions": 74, "deletions": 17}, "files": [{"sha": "3cbc3d231f847eda831051f4ba638dd159e0643e", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=8eef79ca9a2ff47db25905e8c21e2ffba1d353cb", "patch": "@@ -35,6 +35,7 @@ use crate::type_error_struct;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n+use rustc_middle::mir::Mutability;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::cast::{CastKind, CastTy};\n use rustc_middle::ty::error::TypeError;\n@@ -347,15 +348,52 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     fcx.ty_to_string(self.cast_ty)\n                 );\n                 let mut sugg = None;\n+                let mut sugg_mutref = false;\n                 if let ty::Ref(reg, _, mutbl) = *self.cast_ty.kind() {\n-                    if fcx\n-                        .try_coerce(\n-                            self.expr,\n-                            fcx.tcx.mk_ref(reg, TypeAndMut { ty: self.expr_ty, mutbl }),\n-                            self.cast_ty,\n-                            AllowTwoPhase::No,\n-                        )\n-                        .is_ok()\n+                    if let ty::RawPtr(TypeAndMut { ty: expr_ty, .. }) = *self.expr_ty.kind() {\n+                        if fcx\n+                            .try_coerce(\n+                                self.expr,\n+                                fcx.tcx.mk_ref(\n+                                    &ty::RegionKind::ReErased,\n+                                    TypeAndMut { ty: expr_ty, mutbl },\n+                                ),\n+                                self.cast_ty,\n+                                AllowTwoPhase::No,\n+                            )\n+                            .is_ok()\n+                        {\n+                            sugg = Some(format!(\"&{}*\", mutbl.prefix_str()));\n+                        }\n+                    } else if let ty::Ref(expr_reg, expr_ty, expr_mutbl) = *self.expr_ty.kind() {\n+                        if expr_mutbl == Mutability::Not\n+                            && mutbl == Mutability::Mut\n+                            && fcx\n+                                .try_coerce(\n+                                    self.expr,\n+                                    fcx.tcx.mk_ref(\n+                                        expr_reg,\n+                                        TypeAndMut { ty: expr_ty, mutbl: Mutability::Mut },\n+                                    ),\n+                                    self.cast_ty,\n+                                    AllowTwoPhase::No,\n+                                )\n+                                .is_ok()\n+                        {\n+                            sugg_mutref = true;\n+                        }\n+                    }\n+\n+                    if !sugg_mutref\n+                        && sugg == None\n+                        && fcx\n+                            .try_coerce(\n+                                self.expr,\n+                                fcx.tcx.mk_ref(reg, TypeAndMut { ty: self.expr_ty, mutbl }),\n+                                self.cast_ty,\n+                                AllowTwoPhase::No,\n+                            )\n+                            .is_ok()\n                     {\n                         sugg = Some(format!(\"&{}\", mutbl.prefix_str()));\n                     }\n@@ -375,11 +413,15 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                         sugg = Some(format!(\"&{}\", mutbl.prefix_str()));\n                     }\n                 }\n-                if let Some(sugg) = sugg {\n+                if sugg_mutref {\n+                    err.span_label(self.span, \"invalid cast\");\n+                    err.span_note(self.expr.span, \"this reference is immutable\");\n+                    err.span_note(self.cast_span, \"trying to cast to a mutable reference type\");\n+                } else if let Some(sugg) = sugg {\n                     err.span_label(self.span, \"invalid cast\");\n                     err.span_suggestion_verbose(\n                         self.expr.span.shrink_to_lo(),\n-                        \"borrow the value for the cast to be valid\",\n+                        \"consider borrowing the value\",\n                         sugg,\n                         Applicability::MachineApplicable,\n                     );"}, {"sha": "90cfa263c5224d29bc0402ae08627d67763667ea", "filename": "src/test/ui/cast/issue-84213.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr?ref=8eef79ca9a2ff47db25905e8c21e2ffba1d353cb", "patch": "@@ -4,7 +4,7 @@ error[E0605]: non-primitive cast: `Something` as `*const Something`\n LL |     let _pointer_to_something = something as *const Something;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n    |\n-help: borrow the value for the cast to be valid\n+help: consider borrowing the value\n    |\n LL |     let _pointer_to_something = &something as *const Something;\n    |                                 ^\n@@ -15,7 +15,7 @@ error[E0605]: non-primitive cast: `Something` as `*mut Something`\n LL |     let _mut_pointer_to_something = something as *mut Something;\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n    |\n-help: borrow the value for the cast to be valid\n+help: consider borrowing the value\n    |\n LL |     let _mut_pointer_to_something = &mut something as *mut Something;\n    |                                     ^^^^"}, {"sha": "6314e7a3a8a7857a8902df58994a9b88c7ee3047", "filename": "src/test/ui/error-codes/E0605.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr?ref=8eef79ca9a2ff47db25905e8c21e2ffba1d353cb", "patch": "@@ -8,7 +8,12 @@ error[E0605]: non-primitive cast: `*const u8` as `&u8`\n   --> $DIR/E0605.rs:6:5\n    |\n LL |     v as &u8;\n-   |     ^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+   |     ^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL |     &*v as &u8;\n+   |     ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f90e89efb4a8cf3e0dde4495f4cfb97ffd30e2e2", "filename": "src/test/ui/issues/issue-22289.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/src%2Ftest%2Fui%2Fissues%2Fissue-22289.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/src%2Ftest%2Fui%2Fissues%2Fissue-22289.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22289.stderr?ref=8eef79ca9a2ff47db25905e8c21e2ffba1d353cb", "patch": "@@ -4,7 +4,7 @@ error[E0605]: non-primitive cast: `i32` as `&(dyn Any + 'static)`\n LL |     0 as &dyn std::any::Any;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n    |\n-help: borrow the value for the cast to be valid\n+help: consider borrowing the value\n    |\n LL |     &0 as &dyn std::any::Any;\n    |     ^"}, {"sha": "47ee544c02af796827c3e0bca29dd2ae8d65527a", "filename": "src/test/ui/issues/issue-22312.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr?ref=8eef79ca9a2ff47db25905e8c21e2ffba1d353cb", "patch": "@@ -4,7 +4,7 @@ error[E0605]: non-primitive cast: `Self` as `&dyn Index<usize, Output = <Self as\n LL |         let indexer = &(*self as &dyn Index<usize, Output = <Self as Index<usize>>::Output>);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n    |\n-help: borrow the value for the cast to be valid\n+help: consider borrowing the value\n    |\n LL |         let indexer = &(&*self as &dyn Index<usize, Output = <Self as Index<usize>>::Output>);\n    |                         ^"}, {"sha": "b08fe8c7352a9e9d6999e38b892344ff9bbfcb4f", "filename": "src/test/ui/issues/issue-2995.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr?ref=8eef79ca9a2ff47db25905e8c21e2ffba1d353cb", "patch": "@@ -2,7 +2,12 @@ error[E0605]: non-primitive cast: `*const isize` as `&isize`\n   --> $DIR/issue-2995.rs:2:22\n    |\n LL |     let _q: &isize = p as &isize;\n-   |                      ^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+   |                      ^^^^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL |     let _q: &isize = &*p as &isize;\n+   |                      ^^\n \n error: aborting due to previous error\n "}, {"sha": "6a97d1ee3b813f38b74ac3a647ad4af124c742db", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eef79ca9a2ff47db25905e8c21e2ffba1d353cb/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=8eef79ca9a2ff47db25905e8c21e2ffba1d353cb", "patch": "@@ -24,7 +24,12 @@ error[E0605]: non-primitive cast: `*const u8` as `&u8`\n   --> $DIR/cast-rfc0401.rs:29:13\n    |\n LL |     let _ = v as &u8;\n-   |             ^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+   |             ^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL |     let _ = &*v as &u8;\n+   |             ^^\n \n error[E0605]: non-primitive cast: `*const u8` as `E`\n   --> $DIR/cast-rfc0401.rs:30:13"}]}