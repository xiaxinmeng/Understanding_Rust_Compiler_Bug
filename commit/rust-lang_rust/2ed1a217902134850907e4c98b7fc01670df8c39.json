{"sha": "2ed1a217902134850907e4c98b7fc01670df8c39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZDFhMjE3OTAyMTM0ODUwOTA3ZTRjOThiN2ZjMDE2NzBkZjhjMzk=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-09-04T19:51:58Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-09-04T19:51:58Z"}, "message": "add some intra-doc links to `Iterator`", "tree": {"sha": "e45baf3048846a640a873503a1f8b321bdc218ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e45baf3048846a640a873503a1f8b321bdc218ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ed1a217902134850907e4c98b7fc01670df8c39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl9SmuwWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdKMEB/oCPMTWUwT5we+8NeUCap7nICrj\ncBfc0xFNdou5p9s81D4hYS9l7aucYsVkXUNDdwqDe3Wa6ktUQMQ53qSBnzH/Ivxw\n9MBIlLNhEdMB4vU6rSqCabBoRjnwZmy5WUj4aL/j72bgUTKFUdLf1wxw2pfdekcW\nysFMa0H1/DLDPrC4u1QCE5ko6obHzvBkBqcKUiK8YgnWrrBkPGp/uGCs4y8WhZcg\nA0EtsHjdqSwWIWskdNal90E+xv9CG4sbJENl3p/q/uYBCFuXCs1OpX/0ZPA4Buok\nhI2+HydEgTJtfcf5+oqjqkNiy38ZPTidnC267ixCIKsCdDmoP2Opty38a8S1\n=CH6O\n-----END PGP SIGNATURE-----", "payload": "tree e45baf3048846a640a873503a1f8b321bdc218ba\nparent 4ffb5c5954a304daf47a567b34e74e421db86d98\nauthor Andy Russell <arussell123@gmail.com> 1599249118 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1599249118 -0400\n\nadd some intra-doc links to `Iterator`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed1a217902134850907e4c98b7fc01670df8c39", "html_url": "https://github.com/rust-lang/rust/commit/2ed1a217902134850907e4c98b7fc01670df8c39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ed1a217902134850907e4c98b7fc01670df8c39/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ffb5c5954a304daf47a567b34e74e421db86d98", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ffb5c5954a304daf47a567b34e74e421db86d98", "html_url": "https://github.com/rust-lang/rust/commit/4ffb5c5954a304daf47a567b34e74e421db86d98"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "527c3872dda53ac043af657ad45b5739640fadf2", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2ed1a217902134850907e4c98b7fc01670df8c39/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed1a217902134850907e4c98b7fc01670df8c39/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=2ed1a217902134850907e4c98b7fc01670df8c39", "patch": "@@ -819,7 +819,7 @@ pub trait Iterator {\n         Enumerate::new(self)\n     }\n \n-    /// Creates an iterator which can use `peek` to look at the next element of\n+    /// Creates an iterator which can use [`peek`] to look at the next element of\n     /// the iterator without consuming it.\n     ///\n     /// Adds a [`peek`] method to an iterator. See its documentation for\n@@ -2002,7 +2002,7 @@ pub trait Iterator {\n \n     /// The same as [`fold()`], but uses the first element in the\n     /// iterator as the initial value, folding every subsequent element into it.\n-    /// If the iterator is empty, return `None`; otherwise, return the result\n+    /// If the iterator is empty, return [`None`]; otherwise, return the result\n     /// of the fold.\n     ///\n     /// [`fold()`]: Iterator::fold\n@@ -2831,7 +2831,7 @@ pub trait Iterator {\n         Product::product(self)\n     }\n \n-    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// Lexicographically compares the elements of this [`Iterator`] with those\n     /// of another.\n     ///\n     /// # Examples\n@@ -2853,7 +2853,7 @@ pub trait Iterator {\n         self.cmp_by(other, |x, y| x.cmp(&y))\n     }\n \n-    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// Lexicographically compares the elements of this [`Iterator`] with those\n     /// of another with respect to the specified comparison function.\n     ///\n     /// # Examples\n@@ -2905,7 +2905,7 @@ pub trait Iterator {\n         }\n     }\n \n-    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// Lexicographically compares the elements of this [`Iterator`] with those\n     /// of another.\n     ///\n     /// # Examples\n@@ -2929,7 +2929,7 @@ pub trait Iterator {\n         self.partial_cmp_by(other, |x, y| x.partial_cmp(&y))\n     }\n \n-    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// Lexicographically compares the elements of this [`Iterator`] with those\n     /// of another with respect to the specified comparison function.\n     ///\n     /// # Examples\n@@ -2990,7 +2990,7 @@ pub trait Iterator {\n         }\n     }\n \n-    /// Determines if the elements of this `Iterator` are equal to those of\n+    /// Determines if the elements of this [`Iterator`] are equal to those of\n     /// another.\n     ///\n     /// # Examples\n@@ -3009,7 +3009,7 @@ pub trait Iterator {\n         self.eq_by(other, |x, y| x == y)\n     }\n \n-    /// Determines if the elements of this `Iterator` are equal to those of\n+    /// Determines if the elements of this [`Iterator`] are equal to those of\n     /// another with respect to the specified equality function.\n     ///\n     /// # Examples\n@@ -3050,7 +3050,7 @@ pub trait Iterator {\n         }\n     }\n \n-    /// Determines if the elements of this `Iterator` are unequal to those of\n+    /// Determines if the elements of this [`Iterator`] are unequal to those of\n     /// another.\n     ///\n     /// # Examples\n@@ -3069,7 +3069,7 @@ pub trait Iterator {\n         !self.eq(other)\n     }\n \n-    /// Determines if the elements of this `Iterator` are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are lexicographically\n     /// less than those of another.\n     ///\n     /// # Examples\n@@ -3090,7 +3090,7 @@ pub trait Iterator {\n         self.partial_cmp(other) == Some(Ordering::Less)\n     }\n \n-    /// Determines if the elements of this `Iterator` are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are lexicographically\n     /// less or equal to those of another.\n     ///\n     /// # Examples\n@@ -3111,7 +3111,7 @@ pub trait Iterator {\n         matches!(self.partial_cmp(other), Some(Ordering::Less | Ordering::Equal))\n     }\n \n-    /// Determines if the elements of this `Iterator` are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are lexicographically\n     /// greater than those of another.\n     ///\n     /// # Examples\n@@ -3132,7 +3132,7 @@ pub trait Iterator {\n         self.partial_cmp(other) == Some(Ordering::Greater)\n     }\n \n-    /// Determines if the elements of this `Iterator` are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are lexicographically\n     /// greater than or equal to those of another.\n     ///\n     /// # Examples"}]}