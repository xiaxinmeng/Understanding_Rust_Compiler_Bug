{"sha": "69ffe7bb1314ccfdbde419d242cf636413dfd5f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZmZlN2JiMTMxNGNjZmRiZGU0MTlkMjQyY2Y2MzY0MTNkZmQ1ZjY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-15T10:36:06Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-15T10:36:06Z"}, "message": "Address review comments", "tree": {"sha": "c7521f2ea391305dcdf270807c8010c2b5384d77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7521f2ea391305dcdf270807c8010c2b5384d77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ffe7bb1314ccfdbde419d242cf636413dfd5f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ffe7bb1314ccfdbde419d242cf636413dfd5f6", "html_url": "https://github.com/rust-lang/rust/commit/69ffe7bb1314ccfdbde419d242cf636413dfd5f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ffe7bb1314ccfdbde419d242cf636413dfd5f6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd01ed3c46183253dd0c28d9efa8678c426599e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd01ed3c46183253dd0c28d9efa8678c426599e", "html_url": "https://github.com/rust-lang/rust/commit/7bd01ed3c46183253dd0c28d9efa8678c426599e"}], "stats": {"total": 26, "additions": 3, "deletions": 23}, "files": [{"sha": "0c65b77a38240af17f80298d32103b3ba226d327", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/69ffe7bb1314ccfdbde419d242cf636413dfd5f6/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ffe7bb1314ccfdbde419d242cf636413dfd5f6/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=69ffe7bb1314ccfdbde419d242cf636413dfd5f6", "patch": "@@ -385,29 +385,9 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n         } else if ecx.memory.dead_alloc_map.contains_key(&alloc_id) {\n             // dangling pointer\n             throw_unsup!(ValidationFailure(\"encountered dangling pointer in final constant\".into()))\n-        } else if let Some(_) = ecx.tcx.alloc_map.lock().get(alloc_id) {\n-            // We have hit an `AllocId` that belongs to an already interned static,\n-            // and are thus not interning any further.\n-\n-            // For `InternKind::Promoted` this is only reachable for allocations\n-            // created for string and byte string literals, since these are interned immediately\n-            // at creation time.\n-\n-            // FIXME(oli-obk): Since we are also checking things during interning,\n-            // we should probably continue doing those checks no matter what we encounter.\n-            // So we basically have to check if the allocation is ok as per the interning rules as\n-            // if we interned it right here.\n-            // This should be as simple as\n-            /*\n-            for &(_, ((), reloc)) in alloc.relocations().iter() {\n-                if leftover_allocations.insert(reloc) {\n-                    todo.push(reloc);\n-                }\n-            }\n-            */\n-            // But I (oli-obk) haven't thought about the ramnificatons yet. This also would cause\n-            // compile-time regressions, so we should think about caching these.\n-        } else {\n+        } else if ecx.tcx.alloc_map.lock().get(alloc_id).is_none() {\n+            // We have hit an `AllocId` that is neither in local or global memory and isn't marked\n+            // as dangling by local memory.\n             span_bug!(ecx.tcx.span, \"encountered unknown alloc id {:?}\", alloc_id);\n         }\n     }"}]}