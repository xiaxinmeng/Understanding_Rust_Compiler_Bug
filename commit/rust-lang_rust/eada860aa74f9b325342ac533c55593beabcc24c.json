{"sha": "eada860aa74f9b325342ac533c55593beabcc24c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZGE4NjBhYTc0ZjliMzI1MzQyYWM1MzNjNTU1OTNiZWFiY2MyNGM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-02T13:51:28Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-02T13:51:28Z"}, "message": "Small fixes in #802", "tree": {"sha": "682ed77b53403431e1d52d843e7bae8053eaf1d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/682ed77b53403431e1d52d843e7bae8053eaf1d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eada860aa74f9b325342ac533c55593beabcc24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eada860aa74f9b325342ac533c55593beabcc24c", "html_url": "https://github.com/rust-lang/rust/commit/eada860aa74f9b325342ac533c55593beabcc24c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eada860aa74f9b325342ac533c55593beabcc24c/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e63a1ae2b39cf691340f557fdea6f5d50ace35", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e63a1ae2b39cf691340f557fdea6f5d50ace35", "html_url": "https://github.com/rust-lang/rust/commit/51e63a1ae2b39cf691340f557fdea6f5d50ace35"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "cc618453132f2ab88ad6a51e79d215e9ed764fc3", "filename": "src/types.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eada860aa74f9b325342ac533c55593beabcc24c/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eada860aa74f9b325342ac533c55593beabcc24c/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=eada860aa74f9b325342ac533c55593beabcc24c", "patch": "@@ -5,6 +5,7 @@ use rustc::ty;\n use rustc_front::hir::*;\n use rustc_front::intravisit::{FnKind, Visitor, walk_ty};\n use rustc_front::util::{is_comparison_binop, binop_to_string};\n+use std::cmp::Ordering;\n use syntax::ast::{IntTy, UintTy, FloatTy};\n use syntax::codemap::Span;\n use utils::*;\n@@ -803,8 +804,6 @@ enum FullInt {\n     U(u64),\n }\n \n-use std::cmp::Ordering;\n-\n impl FullInt {\n     #[allow(cast_sign_loss)]\n     fn cmp_s_u(s: i64, u: u64) -> Ordering {\n@@ -843,8 +842,7 @@ impl Ord for FullInt {\n \n fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(FullInt, FullInt)> {\n     use rustc::ty::TypeVariants::{TyInt, TyUint};\n-    use syntax::ast::UintTy;\n-    use syntax::ast::IntTy;\n+    use syntax::ast::{IntTy, UintTy};\n     use std::*;\n \n     if let ExprCast(ref cast_exp,_) = expr.node {\n@@ -912,21 +910,21 @@ fn upcast_comparison_bounds_err(\n         lhs_bounds: Option<(FullInt, FullInt)>, lhs: &Expr, rhs: &Expr, invert: bool) {\n     use utils::comparisons::*;\n \n-    if let Some(nlb) = lhs_bounds {\n+    if let Some((lb, ub)) = lhs_bounds {\n         if let Some(norm_rhs_val) = node_as_const_fullint(cx, rhs) {\n             if rel == Rel::Eq || rel == Rel::Ne {\n-                if norm_rhs_val < nlb.0 || norm_rhs_val > nlb.0 {\n+                if norm_rhs_val < lb || norm_rhs_val > ub {\n                     err_upcast_comparison(cx, &span, lhs, rel == Rel::Ne);\n                 }\n             } else if match rel {\n-                Rel::Lt => if invert { norm_rhs_val < nlb.0 } else { nlb.1 < norm_rhs_val },\n-                Rel::Le => if invert { norm_rhs_val <= nlb.0  } else { nlb.1 <= norm_rhs_val },\n+                Rel::Lt => if invert { norm_rhs_val < lb } else { ub < norm_rhs_val },\n+                Rel::Le => if invert { norm_rhs_val <= lb  } else { ub <= norm_rhs_val },\n                 Rel::Eq | Rel::Ne => unreachable!(),\n             } {\n                 err_upcast_comparison(cx, &span, lhs, true)\n             } else if match rel {\n-                Rel::Lt => if invert { norm_rhs_val >= nlb.1 } else { nlb.0 >= norm_rhs_val },\n-                Rel::Le => if invert { norm_rhs_val > nlb.1 } else { nlb.0 > norm_rhs_val },\n+                Rel::Lt => if invert { norm_rhs_val >= ub } else { lb >= norm_rhs_val },\n+                Rel::Le => if invert { norm_rhs_val > ub } else { lb > norm_rhs_val },\n                 Rel::Eq | Rel::Ne => unreachable!(),\n             } {\n                 err_upcast_comparison(cx, &span, lhs, false)"}, {"sha": "443dd89aab9e3d0bb6403ae497963ef372ed9089", "filename": "tests/compile-fail/invalid_upcast_comparisons.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eada860aa74f9b325342ac533c55593beabcc24c/tests%2Fcompile-fail%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eada860aa74f9b325342ac533c55593beabcc24c/tests%2Fcompile-fail%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_upcast_comparisons.rs?ref=eada860aa74f9b325342ac533c55593beabcc24c", "patch": "@@ -19,7 +19,17 @@ fn main() {\n \n     -5 > (zero as i32); //~ERROR because of the numeric bounds on `zero` prior to casting, this expression is always false\n     -5 >= (u8_max as i32); //~ERROR because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n+    1337 == (u8_max as i32); //~ERROR because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n \n     -5 == (zero as i32); //~ERROR because of the numeric bounds on `zero` prior to casting, this expression is always false\n     -5 != (u8_max as i32); //~ERROR because of the numeric bounds on `u8_max` prior to casting, this expression is always true\n+\n+    // Those are Ok:\n+    42 == (u8_max as i32);\n+    42 != (u8_max as i32);\n+    42 > (u8_max as i32);\n+    (u8_max as i32) == 42;\n+    (u8_max as i32) != 42;\n+    (u8_max as i32) > 42;\n+    (u8_max as i32) < 42;\n }"}]}