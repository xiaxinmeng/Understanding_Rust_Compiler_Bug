{"sha": "920bed121337538e4dbf58a73750157f5666cb72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMGJlZDEyMTMzNzUzOGU0ZGJmNThhNzM3NTAxNTdmNTY2NmNiNzI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-22T14:09:08Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-22T14:09:08Z"}, "message": "Don't create an empty `LazyTokenStream`", "tree": {"sha": "211a5af6f78ac01932eaa42a18adb53d58dccd82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/211a5af6f78ac01932eaa42a18adb53d58dccd82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/920bed121337538e4dbf58a73750157f5666cb72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+RkosACgkQtAh+UQ6Y\nsWRv3Q/8DZ4S3LaT+Wxe9bXWPIQqAGabkumfTe7R4vr7Ds6lxLj+Ce9phvpSwp8/\nT7VnazxsDZZdnmgaGSjlS8FgMl8BaBQY33rWyOxqEuMmCS1yBtKAc4KrE2G5j/tX\n0MRH28Q5MuepDWQEPdFulQpONkLCxp82B1rIPC1/6CdO0PSDLSM/mgfAj5cu/BO7\nq3bNBxRv0G9QJI2afW3ts2TTmUBsld5UDjoFg1wrzWU1czWo6xJ7PBBuJ+LB9/bc\ntoqv2gFSUNmykjtjENSl2t30Ze9ydrQVgjqMYSUWBxTzvQPcMFztaOnLO35pJryD\nElASzmO3OBFaXLHoaA66/KxpbtpX0kHZX9NbnvROmb5paPPa3Retuiyi1VMsoi0R\ns4myOGjL+OChAesCzEqEig2QL6WoHwpmv3kzUPU4G0dGOwN2ChriWXK3MkePczqv\nvF7c6HkgrltgFPIh8+ITFeGwkrQdQnaAqNrtb6vP6TIIjW6eHBRk9Ul1bJNbO6zB\nqHy6lPpNUqTViBRxeBXCXyQoCXQWgjnHAuoT3+Cwu9KPDJrSWZqjFhkNY2p2mgnL\nMHdYARvhHV14MhEiFQDso6RoctfXddv1J91doxVEafILBtgOV57UI/0W1+iDc6Y1\nxSt8hev/BDM/RGlY7hGCC1fI7XjTTR4ER0xuIWQXwg/af9MB8OY=\n=LSl+\n-----END PGP SIGNATURE-----", "payload": "tree 211a5af6f78ac01932eaa42a18adb53d58dccd82\nparent 37b25e8a4940406e53486e81446b6c6545d5e0ed\nauthor Aaron Hill <aa1ronham@gmail.com> 1603375748 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1603375748 -0400\n\nDon't create an empty `LazyTokenStream`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/920bed121337538e4dbf58a73750157f5666cb72", "html_url": "https://github.com/rust-lang/rust/commit/920bed121337538e4dbf58a73750157f5666cb72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/920bed121337538e4dbf58a73750157f5666cb72/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b25e8a4940406e53486e81446b6c6545d5e0ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/37b25e8a4940406e53486e81446b6c6545d5e0ed", "html_url": "https://github.com/rust-lang/rust/commit/37b25e8a4940406e53486e81446b6c6545d5e0ed"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "e4804cb66162b39c6205a8655d9ac78adf55482b", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/920bed121337538e4dbf58a73750157f5666cb72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920bed121337538e4dbf58a73750157f5666cb72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=920bed121337538e4dbf58a73750157f5666cb72", "patch": "@@ -72,7 +72,7 @@ impl<'a> Parser<'a> {\n                 }\n             })?;\n             if let Some(mut attr) = attr {\n-                attr.tokens = Some(tokens);\n+                attr.tokens = tokens;\n                 attrs.push(attr);\n             } else {\n                 break;\n@@ -176,7 +176,7 @@ impl<'a> Parser<'a> {\n             };\n             if capture_tokens {\n                 let (mut item, tokens) = self.collect_tokens(do_parse)?;\n-                item.tokens = Some(tokens);\n+                item.tokens = tokens;\n                 item\n             } else {\n                 do_parse(self)?\n@@ -213,7 +213,7 @@ impl<'a> Parser<'a> {\n                 }\n             })?;\n             if let Some(mut attr) = attr {\n-                attr.tokens = Some(tokens);\n+                attr.tokens = tokens;\n                 attrs.push(attr);\n             } else {\n                 break;"}, {"sha": "a026353d825259f9aeea490b6538aa159a45adc5", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/920bed121337538e4dbf58a73750157f5666cb72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920bed121337538e4dbf58a73750157f5666cb72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=920bed121337538e4dbf58a73750157f5666cb72", "patch": "@@ -1116,7 +1116,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, P<Expr>> {\n         if needs_tokens {\n             let (mut expr, tokens) = self.collect_tokens(f)?;\n-            expr.tokens = Some(tokens);\n+            expr.tokens = tokens;\n             Ok(expr)\n         } else {\n             f(self)"}, {"sha": "e57a2e42b5dded7270008fc427083d428f6ce01f", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/920bed121337538e4dbf58a73750157f5666cb72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920bed121337538e4dbf58a73750157f5666cb72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=920bed121337538e4dbf58a73750157f5666cb72", "patch": "@@ -151,7 +151,7 @@ impl<'a> Parser<'a> {\n         if let Some(tokens) = tokens {\n             if let Some(item) = &mut item {\n                 if !item.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n-                    item.tokens = Some(tokens);\n+                    item.tokens = tokens;\n                 }\n             }\n         }"}, {"sha": "8ab39b6e6d8faa1be30cc51f664cd372438928e6", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/920bed121337538e4dbf58a73750157f5666cb72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920bed121337538e4dbf58a73750157f5666cb72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=920bed121337538e4dbf58a73750157f5666cb72", "patch": "@@ -1178,8 +1178,9 @@ impl<'a> Parser<'a> {\n \n     /// Records all tokens consumed by the provided callback,\n     /// including the current token. These tokens are collected\n-    /// into a `TokenStream`, and returned along with the result\n-    /// of the callback.\n+    /// into a `LazyTokenStream`, and returned along with the result\n+    /// of the callback. The returned `LazyTokenStream` will be `None`\n+    /// if not tokens were captured.\n     ///\n     /// Note: If your callback consumes an opening delimiter\n     /// (including the case where you call `collect_tokens`\n@@ -1195,7 +1196,7 @@ impl<'a> Parser<'a> {\n     pub fn collect_tokens<R>(\n         &mut self,\n         f: impl FnOnce(&mut Self) -> PResult<'a, R>,\n-    ) -> PResult<'a, (R, LazyTokenStream)> {\n+    ) -> PResult<'a, (R, Option<LazyTokenStream>)> {\n         let start_token = (self.token.clone(), self.token_spacing);\n         let mut cursor_snapshot = self.token_cursor.clone();\n \n@@ -1205,6 +1206,11 @@ impl<'a> Parser<'a> {\n         let num_calls = new_calls - cursor_snapshot.num_next_calls;\n         let desugar_doc_comments = self.desugar_doc_comments;\n \n+        // We didn't capture any tokens\n+        if num_calls == 0 {\n+            return Ok((ret, None));\n+        }\n+\n         // Produces a `TokenStream` on-demand. Using `cursor_snapshot`\n         // and `num_calls`, we can reconstruct the `TokenStream` seen\n         // by the callback. This allows us to avoid producing a `TokenStream`\n@@ -1233,7 +1239,7 @@ impl<'a> Parser<'a> {\n         };\n         let stream = LazyTokenStream::new(LazyTokenStreamInner::Lazy(Box::new(lazy_cb)));\n \n-        Ok((ret, stream))\n+        Ok((ret, Some(stream)))\n     }\n \n     /// `::{` or `::*`"}, {"sha": "98fb1c829251072dc012f11f271a62ce9eaf7906", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/920bed121337538e4dbf58a73750157f5666cb72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920bed121337538e4dbf58a73750157f5666cb72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=920bed121337538e4dbf58a73750157f5666cb72", "patch": "@@ -103,7 +103,7 @@ impl<'a> Parser<'a> {\n                     // If we captured tokens during parsing (due to outer attributes),\n                     // use those.\n                     if item.tokens.is_none() {\n-                        item.tokens = Some(tokens);\n+                        item.tokens = tokens;\n                     }\n                     token::NtItem(item)\n                 }\n@@ -115,7 +115,7 @@ impl<'a> Parser<'a> {\n                 let (mut block, tokens) = self.collect_tokens(|this| this.parse_block())?;\n                 // We have have eaten an NtBlock, which could already have tokens\n                 if block.tokens.is_none() {\n-                    block.tokens = Some(tokens);\n+                    block.tokens = tokens;\n                 }\n                 token::NtBlock(block)\n             }\n@@ -124,7 +124,7 @@ impl<'a> Parser<'a> {\n                 match stmt {\n                     Some(mut s) => {\n                         if s.tokens.is_none() {\n-                            s.tokens = Some(tokens);\n+                            s.tokens = tokens;\n                         }\n                         token::NtStmt(s)\n                     }\n@@ -137,7 +137,7 @@ impl<'a> Parser<'a> {\n                 let (mut pat, tokens) = self.collect_tokens(|this| this.parse_pat(None))?;\n                 // We have have eaten an NtPat, which could already have tokens\n                 if pat.tokens.is_none() {\n-                    pat.tokens = Some(tokens);\n+                    pat.tokens = tokens;\n                 }\n                 token::NtPat(pat)\n             }\n@@ -146,7 +146,7 @@ impl<'a> Parser<'a> {\n                 // If we captured tokens during parsing (due to outer attributes),\n                 // use those.\n                 if expr.tokens.is_none() {\n-                    expr.tokens = Some(tokens);\n+                    expr.tokens = tokens;\n                 }\n                 token::NtExpr(expr)\n             }\n@@ -155,15 +155,15 @@ impl<'a> Parser<'a> {\n                     self.collect_tokens(|this| this.parse_literal_maybe_minus())?;\n                 // We have have eaten a nonterminal, which  could already have tokens\n                 if lit.tokens.is_none() {\n-                    lit.tokens = Some(tokens);\n+                    lit.tokens = tokens;\n                 }\n                 token::NtLiteral(lit)\n             }\n             NonterminalKind::Ty => {\n                 let (mut ty, tokens) = self.collect_tokens(|this| this.parse_ty())?;\n                 // We have an eaten an NtTy, which could already have tokens\n                 if ty.tokens.is_none() {\n-                    ty.tokens = Some(tokens);\n+                    ty.tokens = tokens;\n                 }\n                 token::NtTy(ty)\n             }\n@@ -183,15 +183,15 @@ impl<'a> Parser<'a> {\n                     self.collect_tokens(|this| this.parse_path(PathStyle::Type))?;\n                 // We have have eaten an NtPath, which could already have tokens\n                 if path.tokens.is_none() {\n-                    path.tokens = Some(tokens);\n+                    path.tokens = tokens;\n                 }\n                 token::NtPath(path)\n             }\n             NonterminalKind::Meta => {\n                 let (mut attr, tokens) = self.collect_tokens(|this| this.parse_attr_item(false))?;\n                 // We may have eaten a nonterminal, which could already have tokens\n                 if attr.tokens.is_none() {\n-                    attr.tokens = Some(tokens);\n+                    attr.tokens = tokens;\n                 }\n                 token::NtMeta(P(attr))\n             }\n@@ -201,7 +201,7 @@ impl<'a> Parser<'a> {\n                     self.collect_tokens(|this| this.parse_visibility(FollowedByType::Yes))?;\n                 // We may have etan an `NtVis`, which could already have tokens\n                 if vis.tokens.is_none() {\n-                    vis.tokens = Some(tokens);\n+                    vis.tokens = tokens;\n                 }\n                 token::NtVis(vis)\n             }"}]}