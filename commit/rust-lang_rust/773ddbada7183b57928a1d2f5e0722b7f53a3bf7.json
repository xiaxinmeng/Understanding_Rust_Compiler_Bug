{"sha": "773ddbada7183b57928a1d2f5e0722b7f53a3bf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3M2RkYmFkYTcxODNiNTc5MjhhMWQyZjVlMDcyMmI3ZjUzYTNiZjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-25T09:41:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-25T09:41:15Z"}, "message": "Auto merge of #79388 - tmiasko:naked-def-only, r=lcnr\n\nValidate that `#[naked]` is applied to a function definition", "tree": {"sha": "4dfbcd434bec53530e8f7f93b572ce3dee4a9ae0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dfbcd434bec53530e8f7f93b572ce3dee4a9ae0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/773ddbada7183b57928a1d2f5e0722b7f53a3bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/773ddbada7183b57928a1d2f5e0722b7f53a3bf7", "html_url": "https://github.com/rust-lang/rust/commit/773ddbada7183b57928a1d2f5e0722b7f53a3bf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/773ddbada7183b57928a1d2f5e0722b7f53a3bf7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec039bd07510e5f9bde0d48c039871c0a7846e0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec039bd07510e5f9bde0d48c039871c0a7846e0b", "html_url": "https://github.com/rust-lang/rust/commit/ec039bd07510e5f9bde0d48c039871c0a7846e0b"}, {"sha": "75e00e8cf40faafbe8a19d2f35df66c0ca681bcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e00e8cf40faafbe8a19d2f35df66c0ca681bcb", "html_url": "https://github.com/rust-lang/rust/commit/75e00e8cf40faafbe8a19d2f35df66c0ca681bcb"}], "stats": {"total": 130, "additions": 116, "deletions": 14}, "files": [{"sha": "9c0234953bba996955aa9ca00172954cf30d7470", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/773ddbada7183b57928a1d2f5e0722b7f53a3bf7/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773ddbada7183b57928a1d2f5e0722b7f53a3bf7/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=773ddbada7183b57928a1d2f5e0722b7f53a3bf7", "patch": "@@ -89,6 +89,8 @@ impl CheckAttrVisitor<'tcx> {\n                 self.check_allow_internal_unstable(&attr, span, target, &attrs)\n             } else if self.tcx.sess.check_name(attr, sym::rustc_allow_const_fn_unstable) {\n                 self.check_rustc_allow_const_fn_unstable(hir_id, &attr, span, target)\n+            } else if self.tcx.sess.check_name(attr, sym::naked) {\n+                self.check_naked(attr, span, target)\n             } else {\n                 // lint-only checks\n                 if self.tcx.sess.check_name(attr, sym::cold) {\n@@ -162,6 +164,25 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n+    /// Checks if `#[naked]` is applied to a function definition.\n+    fn check_naked(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        match target {\n+            Target::Fn\n+            | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"attribute should be applied to a function definition\",\n+                    )\n+                    .span_label(*span, \"not a function definition\")\n+                    .emit();\n+                false\n+            }\n+        }\n+    }\n+\n     /// Checks if a `#[track_caller]` is applied to a non-naked function. Returns `true` if valid.\n     fn check_track_caller(\n         &self,\n@@ -171,7 +192,7 @@ impl CheckAttrVisitor<'tcx> {\n         target: Target,\n     ) -> bool {\n         match target {\n-            _ if self.tcx.sess.contains_name(attrs, sym::naked) => {\n+            _ if attrs.iter().any(|attr| attr.has_name(sym::naked)) => {\n                 struct_span_err!(\n                     self.tcx.sess,\n                     *attr_span,"}, {"sha": "cdb6c17454b733863afb8f54a5903b2efa03ea74", "filename": "src/test/ui/asm/naked-invalid-attr.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/773ddbada7183b57928a1d2f5e0722b7f53a3bf7/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773ddbada7183b57928a1d2f5e0722b7f53a3bf7/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.rs?ref=773ddbada7183b57928a1d2f5e0722b7f53a3bf7", "patch": "@@ -0,0 +1,51 @@\n+// Checks that #[naked] attribute can be placed on function definitions only.\n+//\n+// ignore-wasm32 asm unsupported\n+#![feature(asm)]\n+#![feature(naked_functions)]\n+#![naked] //~ ERROR should be applied to a function definition\n+\n+extern \"C\" {\n+    #[naked] //~ ERROR should be applied to a function definition\n+    fn f();\n+}\n+\n+#[naked] //~ ERROR should be applied to a function definition\n+#[repr(C)]\n+struct S {\n+    a: u32,\n+    b: u32,\n+}\n+\n+trait Invoke {\n+    #[naked] //~ ERROR should be applied to a function definition\n+    extern \"C\" fn invoke(&self);\n+}\n+\n+impl Invoke for S {\n+    #[naked]\n+    extern \"C\" fn invoke(&self) {\n+        unsafe { asm!(\"\", options(noreturn)) }\n+    }\n+}\n+\n+#[naked]\n+extern \"C\" fn ok() {\n+    unsafe { asm!(\"\", options(noreturn)) }\n+}\n+\n+impl S {\n+    #[naked]\n+    extern \"C\" fn g() {\n+        unsafe { asm!(\"\", options(noreturn)) }\n+    }\n+\n+    #[naked]\n+    extern \"C\" fn h(&self) {\n+        unsafe { asm!(\"\", options(noreturn)) }\n+    }\n+}\n+\n+fn main() {\n+    #[naked] || {}; //~ ERROR should be applied to a function definition\n+}"}, {"sha": "beaa34140c9643c3b63c9791eb2422c1a676f294", "filename": "src/test/ui/asm/naked-invalid-attr.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/773ddbada7183b57928a1d2f5e0722b7f53a3bf7/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/773ddbada7183b57928a1d2f5e0722b7f53a3bf7/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.stderr?ref=773ddbada7183b57928a1d2f5e0722b7f53a3bf7", "patch": "@@ -0,0 +1,42 @@\n+error: attribute should be applied to a function definition\n+  --> $DIR/naked-invalid-attr.rs:9:5\n+   |\n+LL |     #[naked]\n+   |     ^^^^^^^^\n+LL |     fn f();\n+   |     ------- not a function definition\n+\n+error: attribute should be applied to a function definition\n+  --> $DIR/naked-invalid-attr.rs:13:1\n+   |\n+LL |   #[naked]\n+   |   ^^^^^^^^\n+LL |   #[repr(C)]\n+LL | / struct S {\n+LL | |     a: u32,\n+LL | |     b: u32,\n+LL | | }\n+   | |_- not a function definition\n+\n+error: attribute should be applied to a function definition\n+  --> $DIR/naked-invalid-attr.rs:50:5\n+   |\n+LL |     #[naked] || {};\n+   |     ^^^^^^^^ ----- not a function definition\n+\n+error: attribute should be applied to a function definition\n+  --> $DIR/naked-invalid-attr.rs:21:5\n+   |\n+LL |     #[naked]\n+   |     ^^^^^^^^\n+LL |     extern \"C\" fn invoke(&self);\n+   |     ---------------------------- not a function definition\n+\n+error: attribute should be applied to a function definition\n+  --> $DIR/naked-invalid-attr.rs:6:1\n+   |\n+LL | #![naked]\n+   | ^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "c60ff7dc93449f30e470e1b304c577fc2f85c398", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/773ddbada7183b57928a1d2f5e0722b7f53a3bf7/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773ddbada7183b57928a1d2f5e0722b7f53a3bf7/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs?ref=773ddbada7183b57928a1d2f5e0722b7f53a3bf7", "patch": "@@ -12,10 +12,4 @@ impl S {\n     fn g() {}\n }\n \n-extern \"Rust\" {\n-    #[track_caller] //~ ERROR cannot use `#[track_caller]` with `#[naked]`\n-    #[naked]\n-    fn h();\n-}\n-\n fn main() {}"}, {"sha": "211cd3f16ba1b48ad3d9ecf62e0881c8afc2cd78", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/773ddbada7183b57928a1d2f5e0722b7f53a3bf7/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/773ddbada7183b57928a1d2f5e0722b7f53a3bf7/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr?ref=773ddbada7183b57928a1d2f5e0722b7f53a3bf7", "patch": "@@ -4,18 +4,12 @@ error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n LL | #[track_caller]\n    | ^^^^^^^^^^^^^^^\n \n-error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n-  --> $DIR/error-with-naked.rs:16:5\n-   |\n-LL |     #[track_caller]\n-   |     ^^^^^^^^^^^^^^^\n-\n error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n   --> $DIR/error-with-naked.rs:10:5\n    |\n LL |     #[track_caller]\n    |     ^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0736`."}]}