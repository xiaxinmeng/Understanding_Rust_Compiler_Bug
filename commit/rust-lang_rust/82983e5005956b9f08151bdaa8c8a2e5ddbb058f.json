{"sha": "82983e5005956b9f08151bdaa8c8a2e5ddbb058f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOTgzZTUwMDU5NTZiOWYwODE1MWJkYWE4YzhhMmU1ZGRiYjA1OGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T01:13:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T16:37:00Z"}, "message": "Replace the crate cache in session with the one in cstore", "tree": {"sha": "82d050e148045b7605b07b50183664e709a58187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82d050e148045b7605b07b50183664e709a58187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82983e5005956b9f08151bdaa8c8a2e5ddbb058f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82983e5005956b9f08151bdaa8c8a2e5ddbb058f", "html_url": "https://github.com/rust-lang/rust/commit/82983e5005956b9f08151bdaa8c8a2e5ddbb058f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82983e5005956b9f08151bdaa8c8a2e5ddbb058f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084", "url": "https://api.github.com/repos/rust-lang/rust/commits/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084", "html_url": "https://github.com/rust-lang/rust/commit/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "687376ca6959ed4139e5449d5ef0e66a9605efd3", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82983e5005956b9f08151bdaa8c8a2e5ddbb058f/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82983e5005956b9f08151bdaa8c8a2e5ddbb058f/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=82983e5005956b9f08151bdaa8c8a2e5ddbb058f", "patch": "@@ -353,8 +353,7 @@ fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n fn build_session(@session::options sopts) -> session::session {\n     auto target_cfg = build_target_config();\n     auto cstore = metadata::cstore::mk_cstore();\n-    auto crate_cache = std::map::new_int_hash[session::crate_metadata]();\n-    ret session::session(target_cfg, sopts, cstore, crate_cache, [],\n+    ret session::session(target_cfg, sopts, cstore, [],\n                          [], [], codemap::new_codemap(), 0u);\n }\n "}, {"sha": "7b52919ccad14860591e37e7b79f730974a3a40f", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82983e5005956b9f08151bdaa8c8a2e5ddbb058f/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82983e5005956b9f08151bdaa8c8a2e5ddbb058f/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=82983e5005956b9f08151bdaa8c8a2e5ddbb058f", "patch": "@@ -46,7 +46,6 @@ type crate_metadata = rec(str name, vec[u8] data);\n obj session(@config targ_cfg,\n             @options opts,\n             metadata::cstore::cstore cstore,\n-            map::hashmap[int, crate_metadata] crates,\n             mutable vec[str] used_crate_files,\n             mutable vec[str] used_libraries,\n             mutable vec[str] used_link_args,\n@@ -101,11 +100,6 @@ obj session(@config targ_cfg,\n         self.span_bug(sp, \"unimplemented \" + msg);\n     }\n     fn unimpl(str msg) -> ! { self.bug(\"unimplemented \" + msg); }\n-    fn get_external_crate(int num) -> crate_metadata { ret crates.get(num); }\n-    fn set_external_crate(int num, &crate_metadata metadata) {\n-        crates.insert(num, metadata);\n-    }\n-    fn has_external_crate(int num) -> bool { ret crates.contains_key(num); }\n     fn add_used_link_args(&str args) {\n         used_link_args += str::split(args, ' ' as u8);\n     }"}, {"sha": "f99be6e12320853dd38fe3739b6adf77015d5492", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82983e5005956b9f08151bdaa8c8a2e5ddbb058f/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82983e5005956b9f08151bdaa8c8a2e5ddbb058f/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=82983e5005956b9f08151bdaa8c8a2e5ddbb058f", "patch": "@@ -138,7 +138,8 @@ fn load_library_crate(&session::session sess, span span, int cnum,\n                       &vec[str] library_search_paths) {\n     alt (find_library_crate(sess, ident, metas, library_search_paths)) {\n         case (some(?t)) {\n-            sess.set_external_crate(cnum, rec(name=ident, data=t._1));\n+            cstore::set_crate_data(sess.get_cstore(), cnum,\n+                                   rec(name=ident, data=t._1));\n             sess.add_used_crate_file(t._0);\n             ret;\n         }"}, {"sha": "d90404c79a9392e3335f4302a93b460b8d873674", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82983e5005956b9f08151bdaa8c8a2e5ddbb058f/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82983e5005956b9f08151bdaa8c8a2e5ddbb058f/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=82983e5005956b9f08151bdaa8c8a2e5ddbb058f", "patch": "@@ -15,6 +15,7 @@ import tydecode::parse_def_id;\n import tydecode::parse_ty_data;\n import driver::session;\n import syntax::print::pprust;\n+import cstore;\n \n export get_symbol;\n export get_tag_variants;\n@@ -138,7 +139,7 @@ fn resolve_path(vec[ast::ident] path, vec[u8] data) -> vec[ast::def_id] {\n // Crate metadata queries\n fn lookup_defs(session::session sess, int cnum, vec[ast::ident] path) ->\n    vec[ast::def] {\n-    auto data = sess.get_external_crate(cnum).data;\n+    auto data = cstore::get_crate_data(sess.get_cstore(), cnum).data;\n     ret vec::map(bind lookup_def(cnum, data, _), resolve_path(path, data));\n }\n \n@@ -171,7 +172,8 @@ fn lookup_def(int cnum, vec[u8] data, &ast::def_id did_) -> ast::def {\n \n fn get_type(ty::ctxt tcx, ast::def_id def) -> ty::ty_param_count_and_ty {\n     auto external_crate_id = def._0;\n-    auto data = tcx.sess.get_external_crate(external_crate_id).data;\n+    auto data = cstore::get_crate_data(tcx.sess.get_cstore(),\n+                                       external_crate_id).data;\n     auto item = lookup_item(def._1, data);\n     auto t = item_type(item, external_crate_id, tcx);\n     auto tp_count;\n@@ -184,19 +186,22 @@ fn get_type(ty::ctxt tcx, ast::def_id def) -> ty::ty_param_count_and_ty {\n }\n \n fn get_type_param_count(ty::ctxt tcx, &ast::def_id def) -> uint {\n-    auto data = tcx.sess.get_external_crate(def._0).data;\n+    auto data = cstore::get_crate_data(tcx.sess.get_cstore(),\n+                                       def._0).data;\n     ret item_ty_param_count(lookup_item(def._1, data));\n }\n \n fn get_symbol(session::session sess, ast::def_id def) -> str {\n     auto external_crate_id = def._0;\n-    auto data = sess.get_external_crate(external_crate_id).data;\n+    auto data = cstore::get_crate_data(sess.get_cstore(),\n+                                       external_crate_id).data;\n     ret item_symbol(lookup_item(def._1, data));\n }\n \n fn get_tag_variants(ty::ctxt tcx, ast::def_id def) -> ty::variant_info[] {\n     auto external_crate_id = def._0;\n-    auto data = tcx.sess.get_external_crate(external_crate_id).data;\n+    auto data = cstore::get_crate_data(tcx.sess.get_cstore(),\n+                                       external_crate_id).data;\n     auto items = ebml::get_doc(ebml::new_doc(data), tag_items);\n     auto item = find_item(def._1, items);\n     let ty::variant_info[] infos = ~[];"}, {"sha": "7e92991d38d2b4759d32b45b3794fac3e527f53b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82983e5005956b9f08151bdaa8c8a2e5ddbb058f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82983e5005956b9f08151bdaa8c8a2e5ddbb058f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=82983e5005956b9f08151bdaa8c8a2e5ddbb058f", "patch": "@@ -66,6 +66,7 @@ import link::mangle_exported_name;\n import metadata::tyencode;\n import metadata::creader;\n import metadata::decoder;\n+import metadata::cstore;\n import util::ppaux::ty_to_str;\n import util::ppaux::ty_to_short_str;\n import syntax::print::pprust::expr_to_str;\n@@ -9262,8 +9263,9 @@ fn create_module_map(&@crate_ctxt ccx) -> ValueRef {\n fn create_crate_map(&@crate_ctxt ccx) -> ValueRef {\n     let ValueRef[] subcrates = ~[];\n     auto i = 1;\n-    while (ccx.sess.has_external_crate(i)) {\n-        auto name = ccx.sess.get_external_crate(i).name;\n+    auto cstore = ccx.sess.get_cstore();\n+    while (cstore::have_crate_data(cstore, i)) {\n+        auto name = cstore::get_crate_data(cstore, i).name;\n         auto cr =\n             llvm::LLVMAddGlobal(ccx.llmod, T_int(),\n                                 str::buf(\"_rust_crate_map_\" + name));"}]}