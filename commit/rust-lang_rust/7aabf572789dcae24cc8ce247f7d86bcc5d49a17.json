{"sha": "7aabf572789dcae24cc8ce247f7d86bcc5d49a17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYWJmNTcyNzg5ZGNhZTI0Y2M4Y2UyNDdmN2Q4NmJjYzVkNDlhMTc=", "commit": {"author": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2017-09-21T10:13:26Z"}, "committer": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2017-09-22T20:05:18Z"}, "message": "Add information about the syntax used in ranges\n\n... or ..=", "tree": {"sha": "d47c849b0da920d01dc0fb96d09b3c120d526f92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d47c849b0da920d01dc0fb96d09b3c120d526f92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7aabf572789dcae24cc8ce247f7d86bcc5d49a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7aabf572789dcae24cc8ce247f7d86bcc5d49a17", "html_url": "https://github.com/rust-lang/rust/commit/7aabf572789dcae24cc8ce247f7d86bcc5d49a17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7aabf572789dcae24cc8ce247f7d86bcc5d49a17/comments", "author": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4737c5a068a38e4b004180b3f39bb0974190b06e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4737c5a068a38e4b004180b3f39bb0974190b06e", "html_url": "https://github.com/rust-lang/rust/commit/4737c5a068a38e4b004180b3f39bb0974190b06e"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "6da8c38dfcf355e0b4b7aaf04f51c7d6677d0b3e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7aabf572789dcae24cc8ce247f7d86bcc5d49a17/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aabf572789dcae24cc8ce247f7d86bcc5d49a17/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7aabf572789dcae24cc8ce247f7d86bcc5d49a17", "patch": "@@ -1869,7 +1869,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_range_end(&mut self, e: &RangeEnd) -> hir::RangeEnd {\n         match *e {\n-            RangeEnd::Included => hir::RangeEnd::Included,\n+            RangeEnd::Included(_) => hir::RangeEnd::Included,\n             RangeEnd::Excluded => hir::RangeEnd::Excluded,\n         }\n     }"}, {"sha": "0504e889ea10b4d9139cbe651e3796d5357b1f2a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7aabf572789dcae24cc8ce247f7d86bcc5d49a17/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aabf572789dcae24cc8ce247f7d86bcc5d49a17/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7aabf572789dcae24cc8ce247f7d86bcc5d49a17", "patch": "@@ -538,10 +538,16 @@ pub enum BindingMode {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum RangeEnd {\n-    Included,\n+    Included(RangeSyntax),\n     Excluded,\n }\n \n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum RangeSyntax {\n+    DotDotDot,\n+    DotDotEq,\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum PatKind {\n     /// Represents a wildcard pattern (`_`)\n@@ -578,7 +584,7 @@ pub enum PatKind {\n     Ref(P<Pat>, Mutability),\n     /// A literal\n     Lit(P<Expr>),\n-    /// A range pattern, e.g. `1...2` or `1..2`\n+    /// A range pattern, e.g. `1...2`, `1..=2` or `1..2`\n     Range(P<Expr>, P<Expr>, RangeEnd),\n     /// `[a, b, ..i, y, z]` is represented as:\n     ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`"}, {"sha": "bc78bfa785bf45b2a03574a5793996a4ba81e18d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7aabf572789dcae24cc8ce247f7d86bcc5d49a17/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aabf572789dcae24cc8ce247f7d86bcc5d49a17/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7aabf572789dcae24cc8ce247f7d86bcc5d49a17", "patch": "@@ -38,7 +38,7 @@ use ast::{Ty, TyKind, TypeBinding, TyParam, TyParamBounds};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n use ast::{BinOpKind, UnOp};\n-use ast::RangeEnd;\n+use ast::{RangeEnd, RangeSyntax};\n use {ast, attr};\n use codemap::{self, CodeMap, Spanned, respan};\n use syntax_pos::{self, Span, BytePos};\n@@ -3557,7 +3557,8 @@ impl<'a> Parser<'a> {\n                     token::DotDotDot | token::DotDotEq | token::DotDot => {\n                         let end_kind = match self.token {\n                             token::DotDot => RangeEnd::Excluded,\n-                            token::DotDotDot | token::DotDotEq => RangeEnd::Included,\n+                            token::DotDotDot => RangeEnd::Included(RangeSyntax::DotDotDot),\n+                            token::DotDotEq => RangeEnd::Included(RangeSyntax::DotDotEq),\n                             _ => panic!(\"can only parse `..`/`...`/`..=` for ranges \\\n                                          (checked above)\"),\n                         };\n@@ -3600,10 +3601,12 @@ impl<'a> Parser<'a> {\n                     Ok(begin) => {\n                         if self.eat(&token::DotDotDot) {\n                             let end = self.parse_pat_range_end()?;\n-                            pat = PatKind::Range(begin, end, RangeEnd::Included);\n+                            pat = PatKind::Range(begin, end,\n+                                    RangeEnd::Included(RangeSyntax::DotDotDot));\n                         } else if self.eat(&token::DotDotEq) {\n                             let end = self.parse_pat_range_end()?;\n-                            pat = PatKind::Range(begin, end, RangeEnd::Included);\n+                            pat = PatKind::Range(begin, end,\n+                                    RangeEnd::Included(RangeSyntax::DotDotEq));\n                         } else if self.eat(&token::DotDot) {\n                             let end = self.parse_pat_range_end()?;\n                             pat = PatKind::Range(begin, end, RangeEnd::Excluded);"}, {"sha": "959dd4ef30f29853506d4288199b5a14c0e44b0d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7aabf572789dcae24cc8ce247f7d86bcc5d49a17/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aabf572789dcae24cc8ce247f7d86bcc5d49a17/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7aabf572789dcae24cc8ce247f7d86bcc5d49a17", "patch": "@@ -11,7 +11,7 @@\n pub use self::AnnNode::*;\n \n use abi::{self, Abi};\n-use ast::{self, BlockCheckMode, PatKind, RangeEnd};\n+use ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use ast::{SelfKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::Attribute;\n use util::parser::{self, AssocOp, Fixity};\n@@ -2590,7 +2590,8 @@ impl<'a> State<'a> {\n                 self.print_expr(begin)?;\n                 self.s.space()?;\n                 match *end_kind {\n-                    RangeEnd::Included => self.s.word(\"...\")?,\n+                    RangeEnd::Included(RangeSyntax::DotDotDot) => self.s.word(\"...\")?,\n+                    RangeEnd::Included(RangeSyntax::DotDotEq) => self.s.word(\"..=\")?,\n                     RangeEnd::Excluded => self.s.word(\"..\")?,\n                 }\n                 self.print_expr(end)?;"}]}