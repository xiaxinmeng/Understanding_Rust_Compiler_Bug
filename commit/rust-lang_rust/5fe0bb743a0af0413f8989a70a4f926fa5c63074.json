{"sha": "5fe0bb743a0af0413f8989a70a4f926fa5c63074", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZTBiYjc0M2EwYWYwNDEzZjg5ODlhNzBhNGY5MjZmYTVjNjMwNzQ=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-03-20T17:22:57Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-03-20T17:46:31Z"}, "message": "Future-proof indexing on maps: remove IndexMut\n\nThis commit removes the `IndexMut` impls on `HashMap` and `BTreeMap`, in\norder to future-proof the API against the eventual inclusion of an\n`IndexSet` trait.\n\nIdeally, we would eventually be able to support:\n\n```rust\nmap[owned_key] = val;\nmap[borrowed_key].mutating_method(arguments);\n&mut map[borrowed_key];\n```\n\nbut to keep the design space as unconstrained as possible, we do not\ncurrently want to support `IndexMut`, in case some other strategy will\neventually be needed.\n\nCode currently using mutating index notation can use `get_mut` instead.\n\n[breaking-change]\n\nCloses #23448", "tree": {"sha": "8f8b3e7df284e8246cd1c3f53bc4c7cca4c18f88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f8b3e7df284e8246cd1c3f53bc4c7cca4c18f88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fe0bb743a0af0413f8989a70a4f926fa5c63074", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe0bb743a0af0413f8989a70a4f926fa5c63074", "html_url": "https://github.com/rust-lang/rust/commit/5fe0bb743a0af0413f8989a70a4f926fa5c63074", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fe0bb743a0af0413f8989a70a4f926fa5c63074/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc660bd1c200e672e91bfdbb83e57e6e057314c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc660bd1c200e672e91bfdbb83e57e6e057314c", "html_url": "https://github.com/rust-lang/rust/commit/cbc660bd1c200e672e91bfdbb83e57e6e057314c"}], "stats": {"total": 31, "additions": 5, "deletions": 26}, "files": [{"sha": "a9e1ce8d7ce50db9a5c0b3c3a5c75b561c0ba754", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5fe0bb743a0af0413f8989a70a4f926fa5c63074/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe0bb743a0af0413f8989a70a4f926fa5c63074/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=5fe0bb743a0af0413f8989a70a4f926fa5c63074", "patch": "@@ -24,7 +24,7 @@ use core::default::Default;\n use core::fmt::Debug;\n use core::hash::{Hash, Hasher};\n use core::iter::{Map, FromIterator, IntoIterator};\n-use core::ops::{Index, IndexMut};\n+use core::ops::{Index};\n use core::{iter, fmt, mem, usize};\n use Bound::{self, Included, Excluded, Unbounded};\n \n@@ -925,15 +925,6 @@ impl<K: Ord, Q: ?Sized, V> Index<Q> for BTreeMap<K, V>\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<K: Ord, Q: ?Sized, V> IndexMut<Q> for BTreeMap<K, V>\n-    where K: Borrow<Q>, Q: Ord\n-{\n-    fn index_mut(&mut self, key: &Q) -> &mut V {\n-        self.get_mut(key).expect(\"no entry found for key\")\n-    }\n-}\n-\n /// Genericises over how to get the correct type of iterator from the correct type\n /// of Node ownership.\n trait Traverse<N> {"}, {"sha": "566af2590e6c07cd0ec1a256856951ee36478222", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fe0bb743a0af0413f8989a70a4f926fa5c63074/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe0bb743a0af0413f8989a70a4f926fa5c63074/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5fe0bb743a0af0413f8989a70a4f926fa5c63074", "patch": "@@ -900,7 +900,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             return;\n         }\n         if self.glob_map.contains_key(&import_id) {\n-            self.glob_map[import_id].insert(name);\n+            self.glob_map.get_mut(&import_id).unwrap().insert(name);\n             return;\n         }\n "}, {"sha": "46451019760dd478aa179449473532a32d15fe63", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fe0bb743a0af0413f8989a70a4f926fa5c63074/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe0bb743a0af0413f8989a70a4f926fa5c63074/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5fe0bb743a0af0413f8989a70a4f926fa5c63074", "patch": "@@ -603,7 +603,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n         // We've successfully resolved the import. Write the results in.\n         let mut import_resolutions = module_.import_resolutions.borrow_mut();\n-        let import_resolution = &mut (*import_resolutions)[target];\n+        let import_resolution = import_resolutions.get_mut(&target).unwrap();\n \n         {\n             let mut check_and_write_import = |namespace, result: &_, used_public: &mut bool| {"}, {"sha": "ce4bb4465517b21ef55189e1fc99f2312fae03ee", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fe0bb743a0af0413f8989a70a4f926fa5c63074/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe0bb743a0af0413f8989a70a4f926fa5c63074/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=5fe0bb743a0af0413f8989a70a4f926fa5c63074", "patch": "@@ -380,7 +380,7 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n                 // borrow_kind of the upvar to make sure it\n                 // is inferred to mutable if necessary\n                 let mut upvar_capture_map = self.fcx.inh.upvar_capture_map.borrow_mut();\n-                let ub = &mut upvar_capture_map[upvar_id];\n+                let ub = upvar_capture_map.get_mut(&upvar_id).unwrap();\n                 self.adjust_upvar_borrow_kind(upvar_id, ub, borrow_kind);\n \n                 // also need to be in an FnMut closure since this is not an ImmBorrow"}, {"sha": "9139e182ce479594ba38b0ccc132a33f2f9b98a5", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5fe0bb743a0af0413f8989a70a4f926fa5c63074/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe0bb743a0af0413f8989a70a4f926fa5c63074/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=5fe0bb743a0af0413f8989a70a4f926fa5c63074", "patch": "@@ -23,7 +23,7 @@ use hash::{Hash, SipHasher};\n use iter::{self, Iterator, ExactSizeIterator, IntoIterator, IteratorExt, FromIterator, Extend, Map};\n use marker::Sized;\n use mem::{self, replace};\n-use ops::{Deref, FnMut, Index, IndexMut};\n+use ops::{Deref, FnMut, Index};\n use option::Option::{self, Some, None};\n use rand::{self, Rng};\n use result::Result::{self, Ok, Err};\n@@ -1258,18 +1258,6 @@ impl<K, Q: ?Sized, V, S> Index<Q> for HashMap<K, V, S>\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<K, V, S, Q: ?Sized> IndexMut<Q> for HashMap<K, V, S>\n-    where K: Eq + Hash + Borrow<Q>,\n-          Q: Eq + Hash,\n-          S: HashState,\n-{\n-    #[inline]\n-    fn index_mut<'a>(&'a mut self, index: &Q) -> &'a mut V {\n-        self.get_mut(index).expect(\"no entry found for key\")\n-    }\n-}\n-\n /// HashMap iterator.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a, V: 'a> {"}]}