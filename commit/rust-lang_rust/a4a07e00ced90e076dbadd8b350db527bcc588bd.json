{"sha": "a4a07e00ced90e076dbadd8b350db527bcc588bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YTA3ZTAwY2VkOTBlMDc2ZGJhZGQ4YjM1MGRiNTI3YmNjNTg4YmQ=", "commit": {"author": {"name": "Tobia", "email": "tobia.conforto@gruppo4.it", "date": "2019-04-01T09:16:03Z"}, "committer": {"name": "Tobia", "email": "tobia.conforto@gruppo4.it", "date": "2019-04-12T16:24:10Z"}, "message": "Replaced linear token counting macros with optimized implementation", "tree": {"sha": "13e55524c00d9acf65a0ef3fe6e0587c617a8480", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13e55524c00d9acf65a0ef3fe6e0587c617a8480"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4a07e00ced90e076dbadd8b350db527bcc588bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4a07e00ced90e076dbadd8b350db527bcc588bd", "html_url": "https://github.com/rust-lang/rust/commit/a4a07e00ced90e076dbadd8b350db527bcc588bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4a07e00ced90e076dbadd8b350db527bcc588bd/comments", "author": {"login": "tobia", "id": 48756, "node_id": "MDQ6VXNlcjQ4NzU2", "avatar_url": "https://avatars.githubusercontent.com/u/48756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobia", "html_url": "https://github.com/tobia", "followers_url": "https://api.github.com/users/tobia/followers", "following_url": "https://api.github.com/users/tobia/following{/other_user}", "gists_url": "https://api.github.com/users/tobia/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobia/subscriptions", "organizations_url": "https://api.github.com/users/tobia/orgs", "repos_url": "https://api.github.com/users/tobia/repos", "events_url": "https://api.github.com/users/tobia/events{/privacy}", "received_events_url": "https://api.github.com/users/tobia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tobia", "id": 48756, "node_id": "MDQ6VXNlcjQ4NzU2", "avatar_url": "https://avatars.githubusercontent.com/u/48756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobia", "html_url": "https://github.com/tobia", "followers_url": "https://api.github.com/users/tobia/followers", "following_url": "https://api.github.com/users/tobia/following{/other_user}", "gists_url": "https://api.github.com/users/tobia/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobia/subscriptions", "organizations_url": "https://api.github.com/users/tobia/orgs", "repos_url": "https://api.github.com/users/tobia/repos", "events_url": "https://api.github.com/users/tobia/events{/privacy}", "received_events_url": "https://api.github.com/users/tobia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab3eb38df8dca99110b6149b3a15deeb4ef0413", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab3eb38df8dca99110b6149b3a15deeb4ef0413", "html_url": "https://github.com/rust-lang/rust/commit/eab3eb38df8dca99110b6149b3a15deeb4ef0413"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "c72edb6cc6d72600d461d248a4d77d52ac1a98c6", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4a07e00ced90e076dbadd8b350db527bcc588bd/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4a07e00ced90e076dbadd8b350db527bcc588bd/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=a4a07e00ced90e076dbadd8b350db527bcc588bd", "patch": "@@ -696,9 +696,17 @@ impl DefPathData {\n     }\n }\n \n+/// Evaluates to the number of tokens passed to it.\n+///\n+/// Logarithmic counting: every one or two recursive expansions, the number of\n+/// tokens to count is divided by two, instead of being reduced by one.\n+/// Therefore, the recursion depth is the binary logarithm of the number of\n+/// tokens to count, and the expanded tree is likewise very small.\n macro_rules! count {\n-    () => (0usize);\n-    ( $x:tt $($xs:tt)* ) => (1usize + count!($($xs)*));\n+    ()                     => (0usize);\n+    ($one:tt)              => (1usize);\n+    ($($pairs:tt $_p:tt)*) => (count!($($pairs)*) << 1usize);\n+    ($odd:tt $($rest:tt)*) => (count!($($rest)*) | 1usize);\n }\n \n // We define the GlobalMetaDataKind enum with this macro because we want to"}, {"sha": "d53891828f1c08ef06472f2aa966282a4413c88b", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a4a07e00ced90e076dbadd8b350db527bcc588bd/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4a07e00ced90e076dbadd8b350db527bcc588bd/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=a4a07e00ced90e076dbadd8b350db527bcc588bd", "patch": "@@ -723,10 +723,17 @@ macro_rules! peel {\n     ($name:ident, $($other:ident,)*) => (tuple! { $($other,)* })\n }\n \n-/// Evaluates to the number of identifiers passed to it, for example: `count_idents!(a, b, c) == 3\n-macro_rules! count_idents {\n-    () => { 0 };\n-    ($_i:ident, $($rest:ident,)*) => { 1 + count_idents!($($rest,)*) }\n+/// Evaluates to the number of tokens passed to it.\n+///\n+/// Logarithmic counting: every one or two recursive expansions, the number of\n+/// tokens to count is divided by two, instead of being reduced by one.\n+/// Therefore, the recursion depth is the binary logarithm of the number of\n+/// tokens to count, and the expanded tree is likewise very small.\n+macro_rules! count {\n+    ()                     => (0usize);\n+    ($one:tt)              => (1usize);\n+    ($($pairs:tt $_p:tt)*) => (count!($($pairs)*) << 1usize);\n+    ($odd:tt $($rest:tt)*) => (count!($($rest)*) | 1usize);\n }\n \n macro_rules! tuple {\n@@ -735,7 +742,7 @@ macro_rules! tuple {\n         impl<$($name:Decodable),*> Decodable for ($($name,)*) {\n             #[allow(non_snake_case)]\n             fn decode<D: Decoder>(d: &mut D) -> Result<($($name,)*), D::Error> {\n-                let len: usize = count_idents!($($name,)*);\n+                let len: usize = count!($($name)*);\n                 d.read_tuple(len, |d| {\n                     let mut i = 0;\n                     let ret = ($(d.read_tuple_arg({ i+=1; i-1 }, |d| -> Result<$name, D::Error> {"}]}