{"sha": "b00fd57075263f928a59b0d375f004427077c53a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMGZkNTcwNzUyNjNmOTI4YTU5YjBkMzc1ZjAwNDQyNzA3N2M1M2E=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-07T17:54:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-07T18:04:44Z"}, "message": "implement by-value object safety", "tree": {"sha": "8c0a82b69b354f475249579a2e9439274c7d6cf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c0a82b69b354f475249579a2e9439274c7d6cf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b00fd57075263f928a59b0d375f004427077c53a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b00fd57075263f928a59b0d375f004427077c53a", "html_url": "https://github.com/rust-lang/rust/commit/b00fd57075263f928a59b0d375f004427077c53a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b00fd57075263f928a59b0d375f004427077c53a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "944ffbf5b550b4e6e2fa509d59ae1ae5d72d10ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/944ffbf5b550b4e6e2fa509d59ae1ae5d72d10ea", "html_url": "https://github.com/rust-lang/rust/commit/944ffbf5b550b4e6e2fa509d59ae1ae5d72d10ea"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "ba48a28fc83159d2b6b58243ca4202ab9a1c55c3", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b00fd57075263f928a59b0d375f004427077c53a/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00fd57075263f928a59b0d375f004427077c53a/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=b00fd57075263f928a59b0d375f004427077c53a", "patch": "@@ -407,25 +407,41 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n             }\n             // cannot use the shim here, because that will only result in infinite recursion\n             ty::InstanceDef::Virtual(_, idx) => {\n+                let mut args = args.to_vec();\n                 let ptr_size = self.pointer_size();\n-                let ptr = self.deref_operand(args[0])?;\n-                let vtable = ptr.vtable()?;\n+                // We have to implement all \"object safe receivers\".  Currently we\n+                // support built-in pointers (&, &mut, Box) as well as unsized-self.  We do\n+                // not yet support custom self types.\n+                // Also see librustc_codegen_llvm/abi.rs and librustc_codegen_llvm/mir/block.rs.\n+                let receiver_place = match args[0].layout.ty.builtin_deref(true) {\n+                    Some(_) => {\n+                        // Built-in pointer.\n+                        self.deref_operand(args[0])?\n+                    }\n+                    None => {\n+                        // Unsized self.\n+                        args[0].to_mem_place()\n+                    }\n+                };\n+                // Find and consult vtable\n+                let vtable = receiver_place.vtable()?;\n                 self.memory.check_align(vtable.into(), self.tcx.data_layout.pointer_align.abi)?;\n                 let fn_ptr = self.memory.get(vtable.alloc_id)?.read_ptr_sized(\n                     self,\n                     vtable.offset(ptr_size * (idx as u64 + 3), self)?,\n                 )?.to_ptr()?;\n                 let instance = self.memory.get_fn(fn_ptr)?;\n \n-                // We have to patch the self argument, in particular get the layout\n-                // expected by the actual function. Cannot just use \"field 0\" due to\n-                // Box<self>.\n-                let mut args = args.to_vec();\n-                let pointee = args[0].layout.ty.builtin_deref(true).unwrap().ty;\n-                let fake_fat_ptr_ty = self.tcx.mk_mut_ptr(pointee);\n-                args[0] = OpTy::from(ImmTy { // strip vtable\n-                    layout: self.layout_of(fake_fat_ptr_ty)?.field(self, 0)?,\n-                    imm: Immediate::Scalar(ptr.ptr.into())\n+                // `*mut receiver_place.layout.ty` is almost the layout that we\n+                // want for args[0]: We have to project to field 0 because we want\n+                // a thin pointer.\n+                assert!(receiver_place.layout.is_unsized());\n+                let receiver_ptr_ty = self.tcx.mk_mut_ptr(receiver_place.layout.ty);\n+                let this_receiver_ptr = self.layout_of(receiver_ptr_ty)?.field(self, 0)?;\n+                // Adjust receiver argument.\n+                args[0] = OpTy::from(ImmTy {\n+                    layout: this_receiver_ptr,\n+                    imm: Immediate::Scalar(receiver_place.ptr.into())\n                 });\n                 trace!(\"Patched self operand to {:#?}\", args[0]);\n                 // recurse with concrete function"}, {"sha": "94e7f883f575be86b681538ffe1f6e79fac411a1", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b00fd57075263f928a59b0d375f004427077c53a/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00fd57075263f928a59b0d375f004427077c53a/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=b00fd57075263f928a59b0d375f004427077c53a", "patch": "@@ -3,7 +3,7 @@ use rustc::ty::{self, Ty};\n use rustc::ty::layout::{Size, Align, LayoutOf};\n use rustc::mir::interpret::{Scalar, Pointer, EvalResult, PointerArithmetic};\n \n-use super::{InterpretCx, Machine, MemoryKind};\n+use super::{InterpretCx, InterpError, Machine, MemoryKind};\n \n impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M> {\n     /// Creates a dynamic vtable for the given type and vtable origin. This is used only for\n@@ -76,7 +76,14 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n \n         for (i, method) in methods.iter().enumerate() {\n             if let Some((def_id, substs)) = *method {\n-                let instance = self.resolve(def_id, substs)?;\n+                // resolve for vtable: insert thims where needed\n+                let substs = self.subst_and_normalize_erasing_regions(substs)?;\n+                let instance = ty::Instance::resolve_for_vtable(\n+                    *self.tcx,\n+                    self.param_env,\n+                    def_id,\n+                    substs,\n+                ).ok_or_else(|| InterpError::TooGeneric)?;\n                 let fn_ptr = self.memory.create_fn_alloc(instance).with_default_tag();\n                 let method_ptr = vtable.offset(ptr_size * (3 + i as u64), self)?;\n                 self.memory"}]}