{"sha": "4604f46ce8fa5b80b2e47f845c8ed669e8e714ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MDRmNDZjZThmYTViODBiMmU0N2Y4NDVjOGVkNjY5ZThlNzE0YmE=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2018-08-14T11:33:58Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2018-08-14T11:33:58Z"}, "message": "Expose FileLines JSON representation", "tree": {"sha": "a1669474dd6a8aae959ef5808ef530debc69074c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1669474dd6a8aae959ef5808ef530debc69074c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4604f46ce8fa5b80b2e47f845c8ed669e8e714ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4604f46ce8fa5b80b2e47f845c8ed669e8e714ba", "html_url": "https://github.com/rust-lang/rust/commit/4604f46ce8fa5b80b2e47f845c8ed669e8e714ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4604f46ce8fa5b80b2e47f845c8ed669e8e714ba/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c1ad96e9fca2186e691f64be55e96fec6a204be", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1ad96e9fca2186e691f64be55e96fec6a204be", "html_url": "https://github.com/rust-lang/rust/commit/7c1ad96e9fca2186e691f64be55e96fec6a204be"}], "stats": {"total": 82, "additions": 70, "deletions": 12}, "files": [{"sha": "962a4bb9a4136a5f37d466808b38ba6cb1296ab2", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 70, "deletions": 12, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4604f46ce8fa5b80b2e47f845c8ed669e8e714ba/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4604f46ce8fa5b80b2e47f845c8ed669e8e714ba/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=4604f46ce8fa5b80b2e47f845c8ed669e8e714ba", "patch": "@@ -15,6 +15,7 @@ use std::path::PathBuf;\n use std::rc::Rc;\n use std::{cmp, fmt, iter, str};\n \n+use serde::ser::{self, Serialize, Serializer};\n use serde::de::{Deserialize, Deserializer};\n use serde_json as json;\n \n@@ -53,6 +54,35 @@ impl fmt::Display for FileName {\n     }\n }\n \n+impl<'de> Deserialize<'de> for FileName {\n+    fn deserialize<D>(deserializer: D) -> Result<FileName, D::Error>\n+    where\n+        D: Deserializer<'de>,\n+    {\n+        let s = String::deserialize(deserializer)?;\n+        if s == \"stdin\" {\n+            Ok(FileName::Stdin)\n+        } else {\n+            Ok(FileName::Real(s.into()))\n+        }\n+    }\n+}\n+\n+impl Serialize for FileName {\n+    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n+    where\n+        S: Serializer,\n+    {\n+        let s = match self {\n+            FileName::Stdin => Ok(\"stdin\"),\n+            FileName::Real(path) => path.to_str().ok_or_else(||\n+                ser::Error::custom(\"path can't be serialized as UTF-8 string\"))\n+        };\n+\n+        s.and_then(|s| serializer.serialize_str(s))\n+    }\n+}\n+\n impl LineRange {\n     pub fn file_name(&self) -> FileName {\n         self.file.name.clone().into()\n@@ -175,6 +205,20 @@ impl FileLines {\n         Files(self.0.as_ref().map(|m| m.keys()))\n     }\n \n+    /// Returns JSON representation as accepted by the `--file-lines JSON` arg.\n+    pub fn to_json_spans(&self) -> Vec<JsonSpan> {\n+        match &self.0 {\n+            None => vec![],\n+            Some(file_ranges) => file_ranges\n+                .iter()\n+                .flat_map(|(file, ranges)| ranges.iter().map(move |r| (file, r)))\n+                .map(|(file, range)| JsonSpan {\n+                    file: file.to_owned(),\n+                    range: (range.lo, range.hi),\n+                }).collect(),\n+        }\n+    }\n+\n     /// Returns true if `self` includes all lines in all files. Otherwise runs `f` on all ranges in\n     /// the designated file (if any) and returns true if `f` ever does.\n     fn file_range_matches<F>(&self, file_name: &FileName, f: F) -> bool\n@@ -249,22 +293,12 @@ impl str::FromStr for FileLines {\n }\n \n // For JSON decoding.\n-#[derive(Clone, Debug, Deserialize)]\n-struct JsonSpan {\n-    #[serde(deserialize_with = \"deserialize_filename\")]\n+#[derive(Clone, Debug, Deserialize, Serialize)]\n+pub struct JsonSpan {\n     file: FileName,\n     range: (usize, usize),\n }\n \n-fn deserialize_filename<'de, D: Deserializer<'de>>(d: D) -> Result<FileName, D::Error> {\n-    let s = String::deserialize(d)?;\n-    if s == \"stdin\" {\n-        Ok(FileName::Stdin)\n-    } else {\n-        Ok(FileName::Real(s.into()))\n-    }\n-}\n-\n impl JsonSpan {\n     fn into_tuple(self) -> Result<(FileName, Range), String> {\n         let (lo, hi) = self.range;\n@@ -350,4 +384,28 @@ mod test {\n             Range::new(3, 7).merge(Range::new(4, 5))\n         );\n     }\n+\n+    use std::{collections::HashMap, path::PathBuf};\n+    use super::{FileName, FileLines};\n+    use super::json::{self, json, json_internal};\n+\n+    #[test]\n+    fn file_lines_to_json() {\n+        let ranges: HashMap<FileName, Vec<Range>> = [\n+            (FileName::Real(PathBuf::from(\"src/main.rs\")), vec![\n+                Range::new(1, 3),\n+                Range::new(5, 7)\n+            ]),\n+            (FileName::Real(PathBuf::from(\"src/lib.rs\")), vec![\n+                Range::new(1, 7)\n+        ])].iter().cloned().collect();\n+\n+        let file_lines = FileLines::from_ranges(ranges);\n+        let json = json::to_value(&file_lines.to_json_spans()).unwrap();\n+        assert_eq!(json, json! {[\n+            {\"file\": \"src/main.rs\", \"range\": [1, 3]},\n+            {\"file\": \"src/main.rs\", \"range\": [5, 7]},\n+            {\"file\": \"src/lib.rs\",  \"range\": [1, 7]},\n+        ]});\n+    }\n }"}]}