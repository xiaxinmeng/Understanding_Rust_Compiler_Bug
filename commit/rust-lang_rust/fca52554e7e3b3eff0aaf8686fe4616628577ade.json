{"sha": "fca52554e7e3b3eff0aaf8686fe4616628577ade", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYTUyNTU0ZTdlM2IzZWZmMGFhZjg2ODZmZTQ2MTY2Mjg1NzdhZGU=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-11-09T04:12:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-29T20:09:10Z"}, "message": "Make it possible to invoke item macros without passing identifier arguments.", "tree": {"sha": "cf48e7031d7943d2bc5cd9eafc56c7abd8975a15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf48e7031d7943d2bc5cd9eafc56c7abd8975a15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fca52554e7e3b3eff0aaf8686fe4616628577ade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fca52554e7e3b3eff0aaf8686fe4616628577ade", "html_url": "https://github.com/rust-lang/rust/commit/fca52554e7e3b3eff0aaf8686fe4616628577ade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fca52554e7e3b3eff0aaf8686fe4616628577ade/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cafea5ecb69ad9439502426a69e5d297c4525758", "url": "https://api.github.com/repos/rust-lang/rust/commits/cafea5ecb69ad9439502426a69e5d297c4525758", "html_url": "https://github.com/rust-lang/rust/commit/cafea5ecb69ad9439502426a69e5d297c4525758"}], "stats": {"total": 88, "additions": 55, "deletions": 33}, "files": [{"sha": "3701614f137982ed33c484f4990f61569215060b", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fca52554e7e3b3eff0aaf8686fe4616628577ade/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca52554e7e3b3eff0aaf8686fe4616628577ade/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=fca52554e7e3b3eff0aaf8686fe4616628577ade", "patch": "@@ -12,7 +12,7 @@ use ast_util::dummy_sp;\n // new-style macro! tt code:\n //\n //    syntax_expander_tt, syntax_expander_tt_item, mac_result,\n-//    expr_tt, item_tt\n+//    normal_tt, item_tt\n //\n // also note that ast::mac has way too many cases and can probably\n // be trimmed down substantially.\n@@ -60,7 +60,10 @@ enum syntax_extension {\n     item_decorator(item_decorator),\n \n     // Token-tree expanders\n-    expr_tt(syntax_expander_tt),\n+    normal_tt(syntax_expander_tt),\n+\n+    // perhaps macro_rules! will lose its odd special identifier argument,\n+    // and this can go away also\n     item_tt(syntax_expander_tt_item),\n }\n \n@@ -69,8 +72,8 @@ enum syntax_extension {\n fn syntax_expander_table() -> HashMap<~str, syntax_extension> {\n     fn builtin(f: syntax_expander_) -> syntax_extension\n         {normal({expander: f, span: None})}\n-    fn builtin_expr_tt(f: syntax_expander_tt_) -> syntax_extension {\n-        expr_tt({expander: f, span: None})\n+    fn builtin_normal_tt(f: syntax_expander_tt_) -> syntax_extension {\n+        normal_tt({expander: f, span: None})\n     }\n     fn builtin_item_tt(f: syntax_expander_tt_item_) -> syntax_extension {\n         item_tt({expander: f, span: None})\n@@ -94,7 +97,7 @@ fn syntax_expander_table() -> HashMap<~str, syntax_extension> {\n     syntax_expanders.insert(~\"ident_to_str\",\n                             builtin(ext::ident_to_str::expand_syntax_ext));\n     syntax_expanders.insert(~\"log_syntax\",\n-                            builtin_expr_tt(\n+                            builtin_normal_tt(\n                                 ext::log_syntax::expand_syntax_ext));\n     syntax_expanders.insert(~\"ast\",\n                             builtin(ext::qquote::expand_ast));\n@@ -139,7 +142,7 @@ fn syntax_expander_table() -> HashMap<~str, syntax_extension> {\n                             builtin_item_tt(ext::pipes::expand_proto));\n     syntax_expanders.insert(\n         ~\"trace_macros\",\n-        builtin_expr_tt(ext::trace_macros::expand_trace_macros));\n+        builtin_normal_tt(ext::trace_macros::expand_trace_macros));\n     return syntax_expanders;\n }\n "}, {"sha": "c296938d5d2f5f6139b9b8e1a0b5acfa17adee42", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/fca52554e7e3b3eff0aaf8686fe4616628577ade/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca52554e7e3b3eff0aaf8686fe4616628577ade/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=fca52554e7e3b3eff0aaf8686fe4616628577ade", "patch": "@@ -54,7 +54,7 @@ fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n                     exts.insert(named_extension.name, named_extension.ext);\n                     (ast::expr_rec(~[], None), s)\n                   }\n-                  Some(expr_tt(_)) => {\n+                  Some(normal_tt(_)) => {\n                     cx.span_fatal(pth.span,\n                                   fmt!(\"this tt-style macro should be \\\n                                         invoked '%s!(...)'\", *extname))\n@@ -78,7 +78,7 @@ fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n                     cx.span_fatal(pth.span,\n                                   fmt!(\"macro undefined: '%s'\", *extname))\n                   }\n-                  Some(expr_tt({expander: exp, span: exp_sp})) => {\n+                  Some(normal_tt({expander: exp, span: exp_sp})) => {\n                     let expanded = match exp(cx, mac.span, tts) {\n                       mr_expr(e) => e,\n                       mr_expr_or_item(expr_maker,_) => expr_maker(),\n@@ -153,7 +153,7 @@ fn expand_mod_items(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n             };\n             match exts.find(mname) {\n               None | Some(normal(_)) | Some(macro_defining(_))\n-              | Some(expr_tt(_)) | Some(item_tt(*)) => items,\n+              | Some(normal_tt(_)) | Some(item_tt(*)) => items,\n               Some(item_decorator(dec_fn)) => {\n                 dec_fn(cx, attr.span, attr.node.value, items)\n               }\n@@ -200,34 +200,49 @@ fn expand_item_mac(exts: HashMap<~str, syntax_extension>,\n     match it.node {\n       item_mac({node: mac_invoc_tt(pth, tts), _}) => {\n         let extname = cx.parse_sess().interner.get(pth.idents[0]);\n-        match exts.find(*extname) {\n+        let (expanded, ex_span) = match exts.find(*extname) {\n           None => {\n             cx.span_fatal(pth.span,\n-                          fmt!(\"macro undefined: '%s'\", *extname))\n+                          fmt!(\"macro undefined: '%s!'\", *extname))\n+          }\n+          Some(normal_tt(expand)) => {\n+            if it.ident != parse::token::special_idents::invalid {\n+                cx.span_fatal(pth.span,\n+                              fmt!(\"macro %s! expects no ident argument, \\\n+                                    given '%s'\", *extname,\n+                                   *cx.parse_sess().interner.get(it.ident)));\n+            }\n+            (expand.expander(cx, it.span, tts), expand.span)\n           }\n           Some(item_tt(expand)) => {\n-            let expanded = expand.expander(cx, it.span, it.ident, tts);\n-            cx.bt_push(ExpandedFrom({call_site: it.span,\n-                                      callie: {name: *extname,\n-                                               span: expand.span}}));\n-            let maybe_it = match expanded {\n-              mr_item(it) => fld.fold_item(it),\n-              mr_expr(_) => cx.span_fatal(pth.span,\n-                                         ~\"expr macro in item position: \" +\n-                                         *extname),\n-              mr_expr_or_item(_, item_maker) =>\n-                option::chain(item_maker(), |i| {fld.fold_item(i)}),\n-              mr_def(mdef) => {\n-                exts.insert(mdef.name, mdef.ext);\n-                None\n-              }\n-            };\n-            cx.bt_pop();\n-            return maybe_it\n+            if it.ident == parse::token::special_idents::invalid {\n+                cx.span_fatal(pth.span,\n+                              fmt!(\"macro %s! expects an ident argument\",\n+                                   *extname));\n+            }\n+            (expand.expander(cx, it.span, it.ident, tts), expand.span)\n           }\n           _ => cx.span_fatal(\n               it.span, fmt!(\"%s! is not legal in item position\", *extname))\n-        }\n+        };\n+\n+        cx.bt_push(ExpandedFrom({call_site: it.span,\n+                                  callie: {name: *extname,\n+                                           span: ex_span}}));\n+        let maybe_it = match expanded {\n+            mr_item(it) => fld.fold_item(it),\n+            mr_expr(_) => cx.span_fatal(pth.span,\n+                                        ~\"expr macro in item position: \" +\n+                                        *extname),\n+            mr_expr_or_item(_, item_maker) =>\n+                option::chain(item_maker(), |i| {fld.fold_item(i)}),\n+            mr_def(mdef) => {\n+                exts.insert(mdef.name, mdef.ext);\n+                None\n+            }\n+        };\n+        cx.bt_pop();\n+        return maybe_it;\n       }\n       _ => cx.span_bug(it.span, ~\"invalid item macro invocation\")\n     }"}, {"sha": "012e421718ad48fbb9691c24ee714cc3c961b553", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca52554e7e3b3eff0aaf8686fe4616628577ade/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca52554e7e3b3eff0aaf8686fe4616628577ade/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=fca52554e7e3b3eff0aaf8686fe4616628577ade", "patch": "@@ -1,4 +1,4 @@\n-use base::{ext_ctxt, mac_result, mr_expr_or_item, mr_def, expr_tt};\n+use base::{ext_ctxt, mac_result, mr_expr_or_item, mr_def, normal_tt};\n use codemap::span;\n use ast::{ident, matcher_, matcher, match_tok,\n              match_nonterminal, match_seq, tt_delim};\n@@ -113,6 +113,6 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n \n     return mr_def({\n         name: *cx.parse_sess().interner.get(name),\n-        ext: expr_tt({expander: exp, span: Some(sp)})\n+        ext: normal_tt({expander: exp, span: Some(sp)})\n     });\n }"}, {"sha": "638a02775d933f10dd746530f36942d6af0d874f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fca52554e7e3b3eff0aaf8686fe4616628577ade/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca52554e7e3b3eff0aaf8686fe4616628577ade/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fca52554e7e3b3eff0aaf8686fe4616628577ade", "patch": "@@ -3534,7 +3534,11 @@ impl Parser {\n             // item macro.\n             let pth = self.parse_path_without_tps();\n             self.expect(token::NOT);\n-            let id = self.parse_ident();\n+            let id = if self.token == token::LPAREN {\n+                token::special_idents::invalid // no special identifier\n+            } else {\n+                self.parse_ident()\n+            };\n             let tts = match self.token {\n               token::LPAREN | token::LBRACE => {\n                 let ket = token::flip_delimiter(copy self.token);"}]}