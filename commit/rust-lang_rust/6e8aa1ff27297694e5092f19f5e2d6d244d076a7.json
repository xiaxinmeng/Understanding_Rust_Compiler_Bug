{"sha": "6e8aa1ff27297694e5092f19f5e2d6d244d076a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOGFhMWZmMjcyOTc2OTRlNTA5MmYxOWY1ZTJkNmQyNDRkMDc2YTc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-23T20:01:24Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-23T20:01:24Z"}, "message": "review comments: wording and style", "tree": {"sha": "9a1de5fbbdef2ba01f6602ebf5cad8d92cea548f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a1de5fbbdef2ba01f6602ebf5cad8d92cea548f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e8aa1ff27297694e5092f19f5e2d6d244d076a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8aa1ff27297694e5092f19f5e2d6d244d076a7", "html_url": "https://github.com/rust-lang/rust/commit/6e8aa1ff27297694e5092f19f5e2d6d244d076a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e8aa1ff27297694e5092f19f5e2d6d244d076a7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f84b7e1b052fd135ae2e754499b4fe286d5ba699", "url": "https://api.github.com/repos/rust-lang/rust/commits/f84b7e1b052fd135ae2e754499b4fe286d5ba699", "html_url": "https://github.com/rust-lang/rust/commit/f84b7e1b052fd135ae2e754499b4fe286d5ba699"}], "stats": {"total": 69, "additions": 32, "deletions": 37}, "files": [{"sha": "761807213d2a71c76a6cf2d56e535b541f3e370d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6e8aa1ff27297694e5092f19f5e2d6d244d076a7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8aa1ff27297694e5092f19f5e2d6d244d076a7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6e8aa1ff27297694e5092f19f5e2d6d244d076a7", "patch": "@@ -5502,7 +5502,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n     ) {\n-        match (&expected.kind, &found.kind) {\n+        let (sig, did, substs) = match (&expected.kind, &found.kind) {\n             (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n                 let sig1 = self.tcx.fn_sig(*did1).subst(self.tcx, substs1);\n                 let sig2 = self.tcx.fn_sig(*did2).subst(self.tcx, substs2);\n@@ -5513,29 +5513,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     \"different `fn` items always have unique types, even if their signatures are \\\n                      the same\",\n                 );\n-                err.help(&format!(\"change the expectation to require function pointer `{}`\", sig1));\n-                err.help(&format!(\n-                    \"if the expectation is due to type inference, cast the expected `fn` to a \\\n-                     function pointer: `{} as {}`\",\n-                    self.tcx.def_path_str_with_substs(*did1, substs1),\n-                    sig1\n-                ));\n+                (sig1, *did1, substs1)\n             }\n             (ty::FnDef(did, substs), ty::FnPtr(sig2)) => {\n                 let sig1 = self.tcx.fn_sig(*did).subst(self.tcx, substs);\n                 if sig1 != *sig2 {\n                     return;\n                 }\n-                err.help(&format!(\"change the expectation to require function pointer `{}`\", sig1));\n-                err.help(&format!(\n-                    \"if the expectation is due to type inference, cast the expected `fn` to a \\\n-                     function pointer: `{} as {}`\",\n-                    self.tcx.def_path_str_with_substs(*did, substs),\n-                    sig1\n-                ));\n+                (sig1, *did, substs)\n             }\n-            _ => {}\n-        }\n+            _ => return,\n+        };\n+        err.help(&format!(\"change the expected type to be function pointer `{}`\", sig));\n+        err.help(&format!(\n+            \"if the expected type is due to type inference, cast the expected `fn` to a function \\\n+             pointer: `{} as {}`\",\n+            self.tcx.def_path_str_with_substs(did, substs),\n+            sig\n+        ));\n     }\n \n     /// A common error is to add an extra semicolon:"}, {"sha": "abae40162a0fcacdfc6f58397fc0fa8622f60204", "filename": "src/test/ui/fn/fn-item-type.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e8aa1ff27297694e5092f19f5e2d6d244d076a7/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8aa1ff27297694e5092f19f5e2d6d244d076a7/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs?ref=6e8aa1ff27297694e5092f19f5e2d6d244d076a7", "patch": "@@ -16,40 +16,40 @@ fn main() {\n     //~| found fn item `fn(_) -> _ {bar::<u8>}`\n     //~| expected fn item, found a different fn item\n     //~| different `fn` items always have unique types, even if their signatures are the same\n-    //~| change the expectation to require function pointer\n-    //~| if the expectation is due to type inference, cast the expected `fn` to a function pointer\n+    //~| change the expected type to be function pointer\n+    //~| if the expected type is due to type inference, cast the expected `fn` to a function pointer\n \n     eq(foo::<u8>, foo::<i8>);\n     //~^ ERROR mismatched types\n     //~| expected `u8`, found `i8`\n     //~| different `fn` items always have unique types, even if their signatures are the same\n-    //~| change the expectation to require function pointer\n-    //~| if the expectation is due to type inference, cast the expected `fn` to a function pointer\n+    //~| change the expected type to be function pointer\n+    //~| if the expected type is due to type inference, cast the expected `fn` to a function pointer\n \n     eq(bar::<String>, bar::<Vec<u8>>);\n     //~^ ERROR mismatched types\n     //~| expected fn item `fn(_) -> _ {bar::<std::string::String>}`\n     //~| found fn item `fn(_) -> _ {bar::<std::vec::Vec<u8>>}`\n     //~| expected struct `std::string::String`, found struct `std::vec::Vec`\n     //~| different `fn` items always have unique types, even if their signatures are the same\n-    //~| change the expectation to require function pointer\n-    //~| if the expectation is due to type inference, cast the expected `fn` to a function pointer\n+    //~| change the expected type to be function pointer\n+    //~| if the expected type is due to type inference, cast the expected `fn` to a function pointer\n \n     // Make sure we distinguish between trait methods correctly.\n     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n     //~^ ERROR mismatched types\n     //~| expected `u8`, found `u16`\n     //~| different `fn` items always have unique types, even if their signatures are the same\n-    //~| change the expectation to require function pointer\n-    //~| if the expectation is due to type inference, cast the expected `fn` to a function pointer\n+    //~| change the expected type to be function pointer\n+    //~| if the expected type is due to type inference, cast the expected `fn` to a function pointer\n \n     eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n     //~^ ERROR mismatched types\n     //~| expected fn item `fn(_) -> _ {foo::<u8>}`\n     //~| found fn pointer `fn(_) -> _`\n     //~| expected fn item, found fn pointer\n-    //~| change the expectation to require function pointer\n-    //~| if the expectation is due to type inference, cast the expected `fn` to a function pointer\n+    //~| change the expected type to be function pointer\n+    //~| if the expected type is due to type inference, cast the expected `fn` to a function pointer\n \n     eq(foo::<u8> as fn(isize) -> isize, bar::<u8>); // ok!\n }"}, {"sha": "bfa9efa219f4c8aa71c2df4a1a00e8e0820f74d8", "filename": "src/test/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e8aa1ff27297694e5092f19f5e2d6d244d076a7/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e8aa1ff27297694e5092f19f5e2d6d244d076a7/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr?ref=6e8aa1ff27297694e5092f19f5e2d6d244d076a7", "patch": "@@ -7,8 +7,8 @@ LL |     eq(foo::<u8>, bar::<u8>);\n    = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n               found fn item `fn(_) -> _ {bar::<u8>}`\n    = note: different `fn` items always have unique types, even if their signatures are the same\n-   = help: change the expectation to require function pointer `fn(isize) -> isize`\n-   = help: if the expectation is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n+   = help: change the expected type to be function pointer `fn(isize) -> isize`\n+   = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:22:19\n@@ -19,8 +19,8 @@ LL |     eq(foo::<u8>, foo::<i8>);\n    = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n               found fn item `fn(_) -> _ {foo::<i8>}`\n    = note: different `fn` items always have unique types, even if their signatures are the same\n-   = help: change the expectation to require function pointer `fn(isize) -> isize`\n-   = help: if the expectation is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n+   = help: change the expected type to be function pointer `fn(isize) -> isize`\n+   = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:29:23\n@@ -31,8 +31,8 @@ LL |     eq(bar::<String>, bar::<Vec<u8>>);\n    = note: expected fn item `fn(_) -> _ {bar::<std::string::String>}`\n               found fn item `fn(_) -> _ {bar::<std::vec::Vec<u8>>}`\n    = note: different `fn` items always have unique types, even if their signatures are the same\n-   = help: change the expectation to require function pointer `fn(isize) -> isize`\n-   = help: if the expectation is due to type inference, cast the expected `fn` to a function pointer: `bar::<std::string::String> as fn(isize) -> isize`\n+   = help: change the expected type to be function pointer `fn(isize) -> isize`\n+   = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `bar::<std::string::String> as fn(isize) -> isize`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:39:26\n@@ -43,8 +43,8 @@ LL |     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n    = note: expected fn item `fn() {<u8 as Foo>::foo}`\n               found fn item `fn() {<u16 as Foo>::foo}`\n    = note: different `fn` items always have unique types, even if their signatures are the same\n-   = help: change the expectation to require function pointer `fn()`\n-   = help: if the expectation is due to type inference, cast the expected `fn` to a function pointer: `<u8 as Foo>::foo as fn()`\n+   = help: change the expected type to be function pointer `fn()`\n+   = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `<u8 as Foo>::foo as fn()`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:46:19\n@@ -54,8 +54,8 @@ LL |     eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n    |\n    = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n            found fn pointer `fn(_) -> _`\n-   = help: change the expectation to require function pointer `fn(isize) -> isize`\n-   = help: if the expectation is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n+   = help: change the expected type to be function pointer `fn(isize) -> isize`\n+   = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n \n error: aborting due to 5 previous errors\n "}]}