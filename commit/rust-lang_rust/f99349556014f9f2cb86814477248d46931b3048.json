{"sha": "f99349556014f9f2cb86814477248d46931b3048", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OTM0OTU1NjAxNGY5ZjJjYjg2ODE0NDc3MjQ4ZDQ2OTMxYjMwNDg=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-06-16T23:17:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-19T00:01:45Z"}, "message": "Fallout from TaskBuilder changes\n\nThis commit brings code downstream of libstd up to date with the new\nTaskBuilder API.", "tree": {"sha": "3353b2b14273b731ae27eccda809dc11fb714e68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3353b2b14273b731ae27eccda809dc11fb714e68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f99349556014f9f2cb86814477248d46931b3048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f99349556014f9f2cb86814477248d46931b3048", "html_url": "https://github.com/rust-lang/rust/commit/f99349556014f9f2cb86814477248d46931b3048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f99349556014f9f2cb86814477248d46931b3048/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a23511a65de7cce47aa12541de60df72b10eb2eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a23511a65de7cce47aa12541de60df72b10eb2eb", "html_url": "https://github.com/rust-lang/rust/commit/a23511a65de7cce47aa12541de60df72b10eb2eb"}], "stats": {"total": 126, "additions": 46, "deletions": 80}, "files": [{"sha": "f55fd78762c5dbaa093a1e5efc3af153846c79b5", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -366,22 +366,19 @@ fn monitor(f: proc():Send) {\n     #[cfg(not(rtopt))]\n     static STACK_SIZE: uint = 20000000; // 20MB\n \n-    let mut task_builder = TaskBuilder::new().named(\"rustc\");\n+    let (tx, rx) = channel();\n+    let w = io::ChanWriter::new(tx);\n+    let mut r = io::ChanReader::new(rx);\n+\n+    let mut task = TaskBuilder::new().named(\"rustc\").stderr(box w);\n \n     // FIXME: Hacks on hacks. If the env is trying to override the stack size\n     // then *don't* set it explicitly.\n     if os::getenv(\"RUST_MIN_STACK\").is_none() {\n-        task_builder.opts.stack_size = Some(STACK_SIZE);\n+        task = task.stack_size(STACK_SIZE);\n     }\n \n-    let (tx, rx) = channel();\n-    let w = io::ChanWriter::new(tx);\n-    let mut r = io::ChanReader::new(rx);\n-\n-    match task_builder.try(proc() {\n-        io::stdio::set_stderr(box w);\n-        f()\n-    }) {\n+    match task.try(f) {\n         Ok(()) => { /* fallthrough */ }\n         Err(value) => {\n             // Task failed without emitting a fatal diagnostic"}, {"sha": "1fe8e8fc0db346d935ce45ad723744374484be83", "filename": "src/libsync/lock.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Flibsync%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Flibsync%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flock.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -459,7 +459,7 @@ mod tests {\n     use std::prelude::*;\n     use std::comm::Empty;\n     use std::task;\n-    use std::task::TaskBuilder;\n+    use std::task::try_future;\n \n     use Arc;\n     use super::{Mutex, Barrier, RWLock};\n@@ -629,17 +629,15 @@ mod tests {\n         let mut children = Vec::new();\n         for _ in range(0, 5) {\n             let arc3 = arc.clone();\n-            let mut builder = TaskBuilder::new();\n-            children.push(builder.future_result());\n-            builder.spawn(proc() {\n+            children.push(try_future(proc() {\n                 let lock = arc3.read();\n                 assert!(*lock >= 0);\n-            });\n+            }));\n         }\n \n         // Wait for children to pass their asserts\n         for r in children.mut_iter() {\n-            assert!(r.recv().is_ok());\n+            assert!(r.get_ref().is_ok());\n         }\n \n         // Wait for writer to finish"}, {"sha": "112ffd7c1a4a480899e26bbc345a25845d2f23b5", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -1049,14 +1049,13 @@ pub fn run_test(opts: &TestOpts,\n             if nocapture {\n                 drop((stdout, stderr));\n             } else {\n-                task.opts.stdout = Some(box stdout as Box<Writer + Send>);\n-                task.opts.stderr = Some(box stderr as Box<Writer + Send>);\n+                task = task.stdout(box stdout as Box<Writer + Send>);\n+                task = task.stderr(box stderr as Box<Writer + Send>);\n             }\n-            let result_future = task.future_result();\n-            task.spawn(testfn);\n+            let result_future = task.try_future(testfn);\n \n             let stdout = reader.read_to_end().unwrap().move_iter().collect();\n-            let task_result = result_future.recv();\n+            let task_result = result_future.unwrap();\n             let test_result = calc_result(&desc, task_result.is_ok());\n             monitor_ch.send((desc.clone(), test_result, stdout));\n         })"}, {"sha": "14155d54d73ccbdf6e5afc84e0f172f213f6fe53", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -24,7 +24,6 @@ extern crate debug;\n use std::comm;\n use std::os;\n use std::task;\n-use std::task::TaskBuilder;\n use std::uint;\n \n fn move_out<T>(_x: T) {}\n@@ -64,22 +63,20 @@ fn run(args: &[String]) {\n     let mut worker_results = Vec::new();\n     for _ in range(0u, workers) {\n         let to_child = to_child.clone();\n-        let mut builder = TaskBuilder::new();\n-        worker_results.push(builder.future_result());\n-        builder.spawn(proc() {\n+        worker_results.push(task::try_future(proc() {\n             for _ in range(0u, size / workers) {\n                 //println!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n             //println!(\"worker {:?} exiting\", i);\n-        });\n+        }));\n     }\n     task::spawn(proc() {\n         server(&from_parent, &to_parent);\n     });\n \n-    for r in worker_results.iter() {\n-        r.recv();\n+    for r in worker_results.move_iter() {\n+        r.unwrap();\n     }\n \n     //println!(\"sending stop message\");"}, {"sha": "7ec2796b230a7a309ab13bd9f07794d3f6d86a2d", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -19,7 +19,6 @@ extern crate debug;\n \n use std::os;\n use std::task;\n-use std::task::TaskBuilder;\n use std::uint;\n \n fn move_out<T>(_x: T) {}\n@@ -58,38 +57,34 @@ fn run(args: &[String]) {\n     let mut worker_results = Vec::new();\n     let from_parent = if workers == 1 {\n         let (to_child, from_parent) = channel();\n-        let mut builder = TaskBuilder::new();\n-        worker_results.push(builder.future_result());\n-        builder.spawn(proc() {\n+        worker_results.push(task::try_future(proc() {\n             for _ in range(0u, size / workers) {\n                 //println!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n             //println!(\"worker {:?} exiting\", i);\n-        });\n+        }));\n         from_parent\n     } else {\n         let (to_child, from_parent) = channel();\n         for _ in range(0u, workers) {\n             let to_child = to_child.clone();\n-            let mut builder = TaskBuilder::new();\n-            worker_results.push(builder.future_result());\n-            builder.spawn(proc() {\n+            worker_results.push(task::try_future(proc() {\n                 for _ in range(0u, size / workers) {\n                     //println!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n                     to_child.send(bytes(num_bytes));\n                 }\n                 //println!(\"worker {:?} exiting\", i);\n-            });\n+            }));\n         }\n         from_parent\n     };\n     task::spawn(proc() {\n         server(&from_parent, &to_parent);\n     });\n \n-    for r in worker_results.iter() {\n-        r.recv();\n+    for r in worker_results.move_iter() {\n+        r.unwrap();\n     }\n \n     //println!(\"sending stop message\");"}, {"sha": "57a6d0e7c523d860210f5ae230400b91e5d89c7a", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -24,7 +24,6 @@ extern crate time;\n use std::os;\n use std::result::{Ok, Err};\n use std::task;\n-use std::task::TaskBuilder;\n use std::uint;\n \n fn fib(n: int) -> int {\n@@ -79,14 +78,12 @@ fn stress_task(id: int) {\n fn stress(num_tasks: int) {\n     let mut results = Vec::new();\n     for i in range(0, num_tasks) {\n-        let mut builder = TaskBuilder::new();\n-        results.push(builder.future_result());\n-        builder.spawn(proc() {\n+        results.push(task::try_future(proc() {\n             stress_task(i);\n-        });\n+        }));\n     }\n-    for r in results.iter() {\n-        r.recv();\n+    for r in results.move_iter() {\n+        r.unwrap();\n     }\n }\n "}, {"sha": "4ff735708b5ab7753936e7408835ce30e9acfb39", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -13,9 +13,7 @@ use std::task::TaskBuilder;\n static generations: uint = 1024+256+128+49;\n \n fn spawn(f: proc():Send) {\n-    let mut t = TaskBuilder::new();\n-    t.opts.stack_size = Some(32 * 1024);\n-    t.spawn(f);\n+    TaskBuilder::new().stack_size(32 * 1024).spawn(f)\n }\n \n fn child_no(x: uint) -> proc():Send {"}, {"sha": "851f87adfc20dac8a0b72691db20eff460110b99", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -9,17 +9,14 @@\n // except according to those terms.\n \n use std::task;\n-use std::task::TaskBuilder;\n \n pub fn main() { test00(); }\n \n fn start(_task_number: int) { println!(\"Started / Finished task.\"); }\n \n fn test00() {\n     let i: int = 0;\n-    let mut builder = TaskBuilder::new();\n-    let mut result = builder.future_result();\n-    builder.spawn(proc() {\n+    let mut result = task::try_future(proc() {\n         start(i)\n     });\n \n@@ -31,7 +28,7 @@ fn test00() {\n     }\n \n     // Try joining tasks that have already finished.\n-    result.recv();\n+    result.unwrap();\n \n     println!(\"Joined task.\");\n }"}, {"sha": "cd31d15db10925d03ae24046a89f7c364f4ba26f", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -10,7 +10,7 @@\n \n extern crate debug;\n \n-use std::task::TaskBuilder;\n+use std::task;\n \n pub fn main() { println!(\"===== WITHOUT THREADS =====\"); test00(); }\n \n@@ -39,14 +39,12 @@ fn test00() {\n     let mut results = Vec::new();\n     while i < number_of_tasks {\n         let tx = tx.clone();\n-        let mut builder = TaskBuilder::new();\n-        results.push(builder.future_result());\n-        builder.spawn({\n+        results.push(task::try_future({\n             let i = i;\n             proc() {\n                 test00_start(&tx, i, number_of_messages)\n             }\n-        });\n+        }));\n         i = i + 1;\n     }\n \n@@ -62,7 +60,7 @@ fn test00() {\n     }\n \n     // Join spawned tasks...\n-    for r in results.iter() { r.recv(); }\n+    for r in results.mut_iter() { r.get_ref(); }\n \n     println!(\"Completed: Final number is: \");\n     println!(\"{:?}\", sum);"}, {"sha": "a46b4513c5deecf0b4e12a7ead18685727c3de92", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -10,7 +10,7 @@\n \n extern crate debug;\n \n-use std::task::TaskBuilder;\n+use std::task;\n \n pub fn main() { test00(); }\n \n@@ -25,9 +25,7 @@ fn test00() {\n     let (tx, rx) = channel();\n     let number_of_messages: int = 10;\n \n-    let mut builder = TaskBuilder::new();\n-    let result = builder.future_result();\n-    builder.spawn(proc() {\n+    let result = task::try_future(proc() {\n         test00_start(&tx, number_of_messages);\n     });\n \n@@ -38,7 +36,7 @@ fn test00() {\n         i += 1;\n     }\n \n-    result.recv();\n+    result.unwrap();\n \n     assert_eq!(sum, number_of_messages * (number_of_messages - 1) / 2);\n }"}, {"sha": "6a71f9df6e45ee70eff9b0cbb27d98739774fc29", "filename": "src/test/run-pass/task-stderr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-stderr.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n use std::io::{ChanReader, ChanWriter};\n-use std::task::build;\n+use std::task::TaskBuilder;\n \n fn main() {\n     let (tx, rx) = channel();\n     let mut reader = ChanReader::new(rx);\n     let stderr = ChanWriter::new(tx);\n \n-    let res = build().stderr(box stderr as Box<Writer + Send>).try(proc() -> () {\n+    let res = TaskBuilder::new().stderr(box stderr as Box<Writer + Send>).try(proc() -> () {\n         fail!(\"Hello, world!\")\n     });\n     assert!(res.is_err());"}, {"sha": "99bf247229e059085ea5452de1286447f433b824", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -60,9 +60,7 @@ fn main() {\n     let (tx, rx) = channel();\n     for _ in range(0, 1000) {\n         let tx = tx.clone();\n-        let mut builder = TaskBuilder::new();\n-        builder.opts.stack_size = Some(64 * 1024);\n-        builder.spawn(proc() {\n+        TaskBuilder::new().stack_size(64 * 1024).spawn(proc() {\n             let host = addr.ip.to_str();\n             let port = addr.port;\n             match TcpStream::connect(host.as_slice(), port) {"}, {"sha": "89d204dcecbdbc03a8acd1835034b3609d2e3064", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -9,18 +9,15 @@\n // except according to those terms.\n \n use std::task;\n-use std::task::TaskBuilder;\n \n pub fn main() {\n-    let mut builder = TaskBuilder::new();\n-    let mut result = builder.future_result();\n-    builder.spawn(child);\n+    let mut result = task::try_future(child);\n     println!(\"1\");\n     task::deschedule();\n     println!(\"2\");\n     task::deschedule();\n     println!(\"3\");\n-    result.recv();\n+    result.unwrap();\n }\n \n fn child() {"}, {"sha": "d882b1abd295ddec68fa194365d6a1912dc01152", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99349556014f9f2cb86814477248d46931b3048/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=f99349556014f9f2cb86814477248d46931b3048", "patch": "@@ -9,15 +9,12 @@\n // except according to those terms.\n \n use std::task;\n-use std::task::TaskBuilder;\n \n pub fn main() {\n-    let mut builder = TaskBuilder::new();\n-    let mut result = builder.future_result();\n-    builder.spawn(child);\n+    let mut result = task::try_future(child);\n     println!(\"1\");\n     task::deschedule();\n-    result.recv();\n+    result.unwrap();\n }\n \n fn child() { println!(\"2\"); }"}]}