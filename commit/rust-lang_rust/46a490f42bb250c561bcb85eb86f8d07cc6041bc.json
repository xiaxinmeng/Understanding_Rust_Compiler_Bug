{"sha": "46a490f42bb250c561bcb85eb86f8d07cc6041bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YTQ5MGY0MmJiMjUwYzU2MWJjYjg1ZWI4NmY4ZDA3Y2M2MDQxYmM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:41Z"}, "message": "rollup merge of #21075: iKevinY/intro-changes\n\n- Make punctuation/formatting consistent with the changes made to *The Rust Programming Language* in #20782.\n- Use title casing for \"Safety and Speed\" section.\n- Reword some phrases to improve clarity.", "tree": {"sha": "c45ec68f7dd49af1f05a07a5c120c08ac3ea699c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c45ec68f7dd49af1f05a07a5c120c08ac3ea699c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46a490f42bb250c561bcb85eb86f8d07cc6041bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46a490f42bb250c561bcb85eb86f8d07cc6041bc", "html_url": "https://github.com/rust-lang/rust/commit/46a490f42bb250c561bcb85eb86f8d07cc6041bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46a490f42bb250c561bcb85eb86f8d07cc6041bc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee960afc1058b6e029629d8defda483f160567e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee960afc1058b6e029629d8defda483f160567e9", "html_url": "https://github.com/rust-lang/rust/commit/ee960afc1058b6e029629d8defda483f160567e9"}, {"sha": "31ac1fb93df9b9a2db332f055052dbfb779bdf91", "url": "https://api.github.com/repos/rust-lang/rust/commits/31ac1fb93df9b9a2db332f055052dbfb779bdf91", "html_url": "https://github.com/rust-lang/rust/commit/31ac1fb93df9b9a2db332f055052dbfb779bdf91"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "d93b680ae6de704cb83fd73394475fb1681b88e8", "filename": "src/doc/intro.md", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/46a490f42bb250c561bcb85eb86f8d07cc6041bc/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/46a490f42bb250c561bcb85eb86f8d07cc6041bc/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=46a490f42bb250c561bcb85eb86f8d07cc6041bc", "patch": "@@ -5,7 +5,7 @@ accomplishes these goals by being memory safe without using garbage collection.\n \n This introduction will give you a rough idea of what Rust is like, eliding many\n details. It does not require prior experience with systems programming, but you\n-may find the syntax easier if you've used a 'curly brace' programming language\n+may find the syntax easier if you've used a \"curly brace\" programming language\n before, like C or JavaScript. The concepts are more important than the syntax,\n so don't worry if you don't get every last detail: you can read [The\n Rust Programming Language](book/index.html) to get a more complete explanation.\n@@ -15,7 +15,7 @@ Rust to follow along. If you'd like to anyway, check out [the\n homepage](http://rust-lang.org) for explanation.\n \n To show off Rust, let's talk about how easy it is to get started with Rust.\n-Then, we'll talk about Rust's most interesting feature, **ownership**, and\n+Then, we'll talk about Rust's most interesting feature, *ownership*, and\n then discuss how it makes concurrency easier to reason about. Finally,\n we'll talk about how Rust breaks down the perceived dichotomy between speed\n and safety.\n@@ -57,7 +57,7 @@ version = \"0.0.1\"\n authors = [\"Your Name <you@example.com>\"]\n ```\n \n-This is called a **manifest**, and it contains all of the metadata that Cargo\n+This is called a *manifest*, and it contains all of the metadata that Cargo\n needs to compile your project.\n \n Here's what's in `src/main.rs`:\n@@ -68,7 +68,7 @@ fn main() {\n }\n ```\n \n-Cargo generated a 'hello world' for us. We'll talk more about the syntax here\n+Cargo generated a \"Hello World\" for us. We'll talk more about the syntax here\n later, but that's what Rust code looks like! Let's compile and run it:\n \n ```{bash}\n@@ -146,8 +146,8 @@ Enough about tools, let's talk code!\n \n # Ownership\n \n-Rust's defining feature is 'memory safety without garbage collection.' Let's\n-take a moment to talk about what that means. **Memory safety** means that the\n+Rust's defining feature is \"memory safety without garbage collection\". Let's\n+take a moment to talk about what that means. *Memory safety* means that the\n programming language eliminates certain kinds of bugs, such as [buffer\n overflows](http://en.wikipedia.org/wiki/Buffer_overflow) and [dangling\n pointers](http://en.wikipedia.org/wiki/Dangling_pointer). These problems occur\n@@ -170,7 +170,7 @@ We make an array, `v`, and then call `push` on it. `push` is a method which\n adds an element to the end of an array.\n \n Next, we make a new variable, `x`, that's equal to the first element of\n-the array. Simple, but this is where the 'bug' will appear.\n+the array. Simple, but this is where the \"bug\" will appear.\n \n Let's keep going. We then call `push` again, pushing \"world\" onto the\n end of the array. `v` now is `[\"Hello\", \"world\"]`.\n@@ -222,7 +222,7 @@ its length changes, we may need to allocate more memory. In Ruby, this happens\n as well, we just don't think about it very often. So why does the C++ version\n segfault when we allocate more memory?\n \n-The answer is that in the C++ version, `x` is a **reference** to the memory\n+The answer is that in the C++ version, `x` is a *reference* to the memory\n location where the first element of the array is stored. But in Ruby, `x` is a\n standalone value, not connected to the underyling array at all. Let's dig into\n the details for a moment. Your program has access to memory, provided to it by\n@@ -332,11 +332,11 @@ error: aborting due to previous error\n \n When we try to mutate the array by `push`ing it the second time, Rust throws\n an error. It says that we \"cannot borrow v as mutable because it is also\n-borrowed as immutable.\" What's up with \"borrowed\"?\n+borrowed as immutable.\" What does it mean by \"borrowed\"?\n \n-In Rust, the type system encodes the notion of **ownership**. The variable `v`\n-is an \"owner\" of the vector. When we make a reference to `v`, we let that\n-variable (in this case, `x`) 'borrow' it for a while. Just like if you own a\n+In Rust, the type system encodes the notion of *ownership*. The variable `v`\n+is an *owner* of the vector. When we make a reference to `v`, we let that\n+variable (in this case, `x`) *borrow* it for a while. Just like if you own a\n book, and you lend it to me, I'm borrowing the book.\n \n So, when I try to modify the vector with the second call to `push`, I need\n@@ -408,7 +408,7 @@ child thread when it goes out of scope. Because we `collect` these guards into\n a `Vec<T>`, and that vector goes out of scope at the end of our program, our\n program will wait for every thread to finish before finishing.\n \n-One common form of problem in concurrent programs is a 'data race.'\n+One common form of problem in concurrent programs is a *data race*.\n This occurs when two different threads attempt to access the same\n location in memory in a non-synchronized way, where at least one of\n them is a write. If one thread is attempting to read, and one thread\n@@ -461,9 +461,9 @@ code tries to make three owners. This may cause a safety problem, so\n Rust disallows it.\n \n What to do here? Rust has two types that helps us: `Arc<T>` and `Mutex<T>`.\n-\"Arc\" stands for \"atomically reference counted.\" In other words, an Arc will\n+*Arc* stands for \"atomically reference counted\". In other words, an Arc will\n keep track of the number of references to something, and not free the\n-associated resource until the count is zero. The 'atomic' portion refers to an\n+associated resource until the count is zero. The *atomic* portion refers to an\n Arc's usage of concurrency primitives to atomically update the count, making it\n safe across threads. If we use an Arc, we can have our three references. But,\n an Arc does not allow mutable borrows of the data it holds, and we want to\n@@ -526,13 +526,13 @@ give us assurance _at compile time_ that we weren't doing something incorrect\n with regards to concurrency. In order to share ownership, we were forced to be\n explicit and use a mechanism to ensure that it would be properly handled.\n \n-# Safety _and_ speed\n+# Safety _and_ Speed\n \n-Safety and speed are always presented as a continuum. On one hand, you have\n-maximum speed, but no safety. On the other, you have absolute safety, with no\n-speed. Rust seeks to break out of this mode by introducing safety at compile\n-time, ensuring that you haven't done anything wrong, while compiling to the\n-same low-level code you'd expect without the safety.\n+Safety and speed are always presented as a continuum. At one end of the spectrum,\n+you have maximum speed, but no safety. On the other end, you have absolute safety\n+with no speed. Rust seeks to break out of this paradigm by introducing safety at\n+compile time, ensuring that you haven't done anything wrong, while compiling to\n+the same low-level code you'd expect without the safety.\n \n As an example, Rust's ownership system is _entirely_ at compile time. The\n safety check that makes this an error about moved values:"}]}