{"sha": "206edf66c92e12f1d98b56ea48a340e7e86d8552", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNmVkZjY2YzkyZTEyZjFkOThiNTZlYTQ4YTM0MGU3ZTg2ZDg1NTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-28T02:55:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-28T02:56:42Z"}, "message": "make rand code use slices", "tree": {"sha": "8689810e01108282b0c311132f4893783996df0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8689810e01108282b0c311132f4893783996df0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/206edf66c92e12f1d98b56ea48a340e7e86d8552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/206edf66c92e12f1d98b56ea48a340e7e86d8552", "html_url": "https://github.com/rust-lang/rust/commit/206edf66c92e12f1d98b56ea48a340e7e86d8552", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/206edf66c92e12f1d98b56ea48a340e7e86d8552/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a01d82f6f3e33ca742c8e985d2a4819faeafe40", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a01d82f6f3e33ca742c8e985d2a4819faeafe40", "html_url": "https://github.com/rust-lang/rust/commit/0a01d82f6f3e33ca742c8e985d2a4819faeafe40"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "f935f14f4b483205e535d34b9e7a4303435466a8", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/206edf66c92e12f1d98b56ea48a340e7e86d8552/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206edf66c92e12f1d98b56ea48a340e7e86d8552/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=206edf66c92e12f1d98b56ea48a340e7e86d8552", "patch": "@@ -165,12 +165,12 @@ impl Rng {\n     }\n \n     /// Choose an item randomly, failing if values is empty\n-    fn choose<T:copy>(values: ~[T]) -> T {\n+    fn choose<T:copy>(values: &[T]) -> T {\n         self.choose_option(values).get()\n     }\n \n     /// Choose Some(item) randomly, returning None if values is empty\n-    fn choose_option<T:copy>(values: ~[T]) -> Option<T> {\n+    fn choose_option<T:copy>(values: &[T]) -> Option<T> {\n         if values.is_empty() {\n             None\n         } else {\n@@ -182,15 +182,15 @@ impl Rng {\n      * Choose an item respecting the relative weights, failing if the sum of\n      * the weights is 0\n      */\n-    fn choose_weighted<T: copy>(v : ~[Weighted<T>]) -> T {\n+    fn choose_weighted<T: copy>(v : &[Weighted<T>]) -> T {\n         self.choose_weighted_option(v).get()\n     }\n \n     /**\n      * Choose Some(item) respecting the relative weights, returning none if\n      * the sum of the weights is 0\n      */\n-    fn choose_weighted_option<T:copy>(v: ~[Weighted<T>]) -> Option<T> {\n+    fn choose_weighted_option<T:copy>(v: &[Weighted<T>]) -> Option<T> {\n         let mut total = 0u;\n         for v.each |item| {\n             total += item.weight;\n@@ -213,7 +213,7 @@ impl Rng {\n      * Return a vec containing copies of the items, in order, where\n      * the weight of the item determines how many copies there are\n      */\n-    fn weighted_vec<T:copy>(v: ~[Weighted<T>]) -> ~[T] {\n+    fn weighted_vec<T:copy>(v: &[Weighted<T>]) -> ~[T] {\n         let mut r = ~[];\n         for v.each |item| {\n             for uint::range(0u, item.weight) |_i| {\n@@ -224,14 +224,14 @@ impl Rng {\n     }\n \n     /// Shuffle a vec\n-    fn shuffle<T:copy>(values: ~[T]) -> ~[T] {\n-        let mut m = vec::to_mut(values);\n+    fn shuffle<T:copy>(values: &[T]) -> ~[T] {\n+        let mut m = vec::from_slice(values);\n         self.shuffle_mut(m);\n-        return vec::from_mut(m);\n+        return m;\n     }\n \n     /// Shuffle a mutable vec in place\n-    fn shuffle_mut<T>(&&values: ~[mut T]) {\n+    fn shuffle_mut<T>(values: &[mut T]) {\n         let mut i = values.len();\n         while i >= 2u {\n             // invariant: elements with index >= i have been locked in place.\n@@ -402,14 +402,14 @@ mod tests {\n     #[test]\n     fn choose() {\n         let r = rand::Rng();\n-        assert r.choose(~[1, 1, 1]) == 1;\n+        assert r.choose([1, 1, 1]) == 1;\n     }\n \n     #[test]\n     fn choose_option() {\n         let r = rand::Rng();\n-        assert r.choose_option(~[]).is_none();\n-        assert r.choose_option(~[1, 1, 1]) == Some(1);\n+        assert r.choose_option::<int>([]).is_none();\n+        assert r.choose_option([1, 1, 1]) == Some(1);\n     }\n \n     #[test]\n@@ -431,7 +431,7 @@ mod tests {\n             {weight: 0u, item: 42},\n             {weight: 1u, item: 43}\n         ]) == Some(43);\n-        assert r.choose_weighted_option(~[]).is_none();\n+        assert r.choose_weighted_option::<int>([]).is_none();\n     }\n \n     #[test]"}, {"sha": "db564fc4a6f3ef6261cd22e8c3d3e5c0da5f1b27", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206edf66c92e12f1d98b56ea48a340e7e86d8552/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206edf66c92e12f1d98b56ea48a340e7e86d8552/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=206edf66c92e12f1d98b56ea48a340e7e86d8552", "patch": "@@ -1086,7 +1086,7 @@ pure fn zip<T, U>(+v: ~[const T], +u: ~[const U]) -> ~[(T, U)] {\n  * * a - The index of the first element\n  * * b - The index of the second element\n  */\n-fn swap<T>(&&v: ~[mut T], a: uint, b: uint) {\n+fn swap<T>(v: &[mut T], a: uint, b: uint) {\n     v[a] <-> v[b];\n }\n "}]}