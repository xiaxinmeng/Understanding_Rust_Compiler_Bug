{"sha": "1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZmQ5ODdmNjkxMWVjNDYzYzhkMWNjMTBmODBkZDc3YTg4M2Q5MmM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-18T12:08:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-18T12:08:51Z"}, "message": "Rollup merge of #85339 - FabianWolff:issue-83893, r=varkor\n\nReport an error if a lang item has the wrong number of generic arguments\n\nThis pull request fixes #83893. The issue is that the lang item code currently checks whether the lang item has the correct item kind (e.g. a `#[lang=\"add\"]` has to be a trait), but not whether the item has the correct number of generic arguments.\n\nThis can lead to an \"index out of bounds\" ICE when the compiler tries to create more substitutions than there are suitable types available (if the lang item was declared with too many generic arguments).\n\nFor instance, here is a reduced (\"reduced\" in the sense that it does not trigger additional errors) version of the example given in #83893:\n```rust\n#![feature(lang_items,no_core)]\n#![no_core]\n#![crate_type=\"lib\"]\n\n#[lang = \"sized\"]\ntrait MySized {}\n\n#[lang = \"add\"]\ntrait MyAdd<'a, T> {}\n\nfn ice() {\n    let r = 5;\n    let a = 6;\n    r + a\n}\n```\nOn current nightly, this immediately causes an ICE without any warnings or errors emitted. With the changes in this PR, however, I get no ICE and two errors:\n```\nerror[E0718]: `add` language item must be applied to a trait with 1 generic argument\n --> pr-ex.rs:8:1\n  |\n8 | #[lang = \"add\"]\n  | ^^^^^^^^^^^^^^^\n9 | trait MyAdd<'a, T> {}\n  |            ------- this trait has 2 generic arguments, not 1\n\nerror[E0369]: cannot add `{integer}` to `{integer}`\n  --> pr-ex.rs:14:7\n   |\n14 |     r + a\n   |     - ^ - {integer}\n   |     |\n   |     {integer}\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0369, E0718.\nFor more information about an error, try `rustc --explain E0369`.\n```", "tree": {"sha": "57a91ed45200ea25d8eac13a64f4c18d210ca63d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57a91ed45200ea25d8eac13a64f4c18d210ca63d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgo65VCRBK7hj4Ov3rIwAAOA8IAI2foV3TPoTsEdor1u4vAJOd\n/TNBygqXwW6/s2FL6j4k6Aj+HVuFKSaxhXjJqv0WNk4KZnkx8Yer27o8OJnpFcf2\nx6+DUa/NRi3Z0WJsmzahDMsxcWm+5BbskHnIv+mHeE64lgHfGPWDLG/+pogKdxkX\nZZOacuxVd7hrsWD9lSlYT4ao4dqg8ezS3UQejd40n2rWG+xAA6ku2b4OKv2YMAw7\nvR84HBklCrzEe/I5UIaNFjYqkYT9L00vEDB89IHnrISZYAKNLXNoqcoxbDAS4/o7\npL1qz6xX3iK6oBWSEZmh5+Z6cNTwcK4T7n65C4x9N/0ve0vkoJLb5EBdzgPPuYs=\n=R5PQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 57a91ed45200ea25d8eac13a64f4c18d210ca63d\nparent a181806b8cbd21736b86ee6ee2f4797c0a4a58b4\nparent 7b301985faa73b1404cbc21ffe7c7f859a293448\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1621339731 +0200\ncommitter GitHub <noreply@github.com> 1621339731 +0200\n\nRollup merge of #85339 - FabianWolff:issue-83893, r=varkor\n\nReport an error if a lang item has the wrong number of generic arguments\n\nThis pull request fixes #83893. The issue is that the lang item code currently checks whether the lang item has the correct item kind (e.g. a `#[lang=\"add\"]` has to be a trait), but not whether the item has the correct number of generic arguments.\n\nThis can lead to an \"index out of bounds\" ICE when the compiler tries to create more substitutions than there are suitable types available (if the lang item was declared with too many generic arguments).\n\nFor instance, here is a reduced (\"reduced\" in the sense that it does not trigger additional errors) version of the example given in #83893:\n```rust\n#![feature(lang_items,no_core)]\n#![no_core]\n#![crate_type=\"lib\"]\n\n#[lang = \"sized\"]\ntrait MySized {}\n\n#[lang = \"add\"]\ntrait MyAdd<'a, T> {}\n\nfn ice() {\n    let r = 5;\n    let a = 6;\n    r + a\n}\n```\nOn current nightly, this immediately causes an ICE without any warnings or errors emitted. With the changes in this PR, however, I get no ICE and two errors:\n```\nerror[E0718]: `add` language item must be applied to a trait with 1 generic argument\n --> pr-ex.rs:8:1\n  |\n8 | #[lang = \"add\"]\n  | ^^^^^^^^^^^^^^^\n9 | trait MyAdd<'a, T> {}\n  |            ------- this trait has 2 generic arguments, not 1\n\nerror[E0369]: cannot add `{integer}` to `{integer}`\n  --> pr-ex.rs:14:7\n   |\n14 |     r + a\n   |     - ^ - {integer}\n   |     |\n   |     {integer}\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0369, E0718.\nFor more information about an error, try `rustc --explain E0369`.\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "html_url": "https://github.com/rust-lang/rust/commit/1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a181806b8cbd21736b86ee6ee2f4797c0a4a58b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a181806b8cbd21736b86ee6ee2f4797c0a4a58b4", "html_url": "https://github.com/rust-lang/rust/commit/a181806b8cbd21736b86ee6ee2f4797c0a4a58b4"}, {"sha": "7b301985faa73b1404cbc21ffe7c7f859a293448", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b301985faa73b1404cbc21ffe7c7f859a293448", "html_url": "https://github.com/rust-lang/rust/commit/7b301985faa73b1404cbc21ffe7c7f859a293448"}], "stats": {"total": 270, "additions": 263, "deletions": 7}, "files": [{"sha": "118fcca4508eacf9af643fde1bd61d0c355b693e", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 124, "deletions": 3, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "patch": "@@ -13,12 +13,13 @@ use crate::weak_lang_items;\n use rustc_middle::middle::cstore::ExternCrate;\n use rustc_middle::ty::TyCtxt;\n \n-use rustc_errors::struct_span_err;\n+use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::{extract, ITEM_REFS};\n use rustc_hir::{HirId, LangItem, LanguageItems, Target};\n+use rustc_span::Span;\n \n use rustc_middle::ty::query::Providers;\n \n@@ -61,8 +62,7 @@ impl LanguageItemCollector<'tcx> {\n             match ITEM_REFS.get(&value).cloned() {\n                 // Known lang item with attribute on correct target.\n                 Some((item_index, expected_target)) if actual_target == expected_target => {\n-                    let def_id = self.tcx.hir().local_def_id(hir_id);\n-                    self.collect_item(item_index, def_id.to_def_id());\n+                    self.collect_item_extended(item_index, hir_id, span);\n                 }\n                 // Known lang item with attribute on incorrect target.\n                 Some((_, expected_target)) => {\n@@ -180,6 +180,127 @@ impl LanguageItemCollector<'tcx> {\n             self.items.groups[group as usize].push(item_def_id);\n         }\n     }\n+\n+    // Like collect_item() above, but also checks whether the lang item is declared\n+    // with the right number of generic arguments if it is a trait.\n+    fn collect_item_extended(&mut self, item_index: usize, hir_id: HirId, span: Span) {\n+        let item_def_id = self.tcx.hir().local_def_id(hir_id).to_def_id();\n+        let lang_item = LangItem::from_u32(item_index as u32).unwrap();\n+        let name = lang_item.name();\n+\n+        self.collect_item(item_index, item_def_id);\n+\n+        // Now check whether the lang_item has the expected number of generic\n+        // arguments if it is a trait. Generally speaking, binary and indexing\n+        // operations have one (for the RHS/index), unary operations have none,\n+        // and the rest also have none except for the closure traits (one for\n+        // the argument list), generators (one for the resume argument),\n+        // ordering/equality relations (one for the RHS), and various conversion\n+        // traits.\n+\n+        let expected_num = match lang_item {\n+            // Binary operations\n+            LangItem::Add\n+            | LangItem::Sub\n+            | LangItem::Mul\n+            | LangItem::Div\n+            | LangItem::Rem\n+            | LangItem::BitXor\n+            | LangItem::BitAnd\n+            | LangItem::BitOr\n+            | LangItem::Shl\n+            | LangItem::Shr\n+            | LangItem::AddAssign\n+            | LangItem::SubAssign\n+            | LangItem::MulAssign\n+            | LangItem::DivAssign\n+            | LangItem::RemAssign\n+            | LangItem::BitXorAssign\n+            | LangItem::BitAndAssign\n+            | LangItem::BitOrAssign\n+            | LangItem::ShlAssign\n+            | LangItem::ShrAssign\n+            | LangItem::Index\n+            | LangItem::IndexMut\n+\n+            // Miscellaneous\n+            | LangItem::Unsize\n+            | LangItem::CoerceUnsized\n+            | LangItem::DispatchFromDyn\n+            | LangItem::Fn\n+            | LangItem::FnMut\n+            | LangItem::FnOnce\n+            | LangItem::Generator\n+            | LangItem::PartialEq\n+            | LangItem::PartialOrd\n+                => Some(1),\n+\n+            // Unary operations\n+            LangItem::Neg\n+            | LangItem::Not\n+\n+            // Miscellaneous\n+            | LangItem::Deref\n+            | LangItem::DerefMut\n+            | LangItem::Sized\n+            | LangItem::StructuralPeq\n+            | LangItem::StructuralTeq\n+            | LangItem::Copy\n+            | LangItem::Clone\n+            | LangItem::Sync\n+            | LangItem::DiscriminantKind\n+            | LangItem::PointeeTrait\n+            | LangItem::Freeze\n+            | LangItem::Drop\n+            | LangItem::Receiver\n+            | LangItem::Future\n+            | LangItem::Unpin\n+            | LangItem::Termination\n+            | LangItem::Try\n+            | LangItem::Send\n+            | LangItem::UnwindSafe\n+            | LangItem::RefUnwindSafe\n+                => Some(0),\n+\n+            // Not a trait\n+            _ => None,\n+        };\n+\n+        if let Some(expected_num) = expected_num {\n+            let (actual_num, generics_span) = match self.tcx.hir().get(hir_id) {\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Trait(_, _, generics, ..),\n+                    ..\n+                }) => (generics.params.len(), generics.span),\n+                _ => bug!(\"op/index/deref lang item target is not a trait: {:?}\", lang_item),\n+            };\n+\n+            if expected_num != actual_num {\n+                // We are issuing E0718 \"incorrect target\" here, because while the\n+                // item kind of the target is correct, the target is still wrong\n+                // because of the wrong number of generic arguments.\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0718,\n+                    \"`{}` language item must be applied to a trait with {} generic argument{}\",\n+                    name,\n+                    expected_num,\n+                    pluralize!(expected_num)\n+                )\n+                .span_label(\n+                    generics_span,\n+                    format!(\n+                        \"this trait has {} generic argument{}, not {}\",\n+                        actual_num,\n+                        pluralize!(actual_num),\n+                        expected_num\n+                    ),\n+                )\n+                .emit();\n+            }\n+        }\n+    }\n }\n \n /// Traverses and collects all the lang items in all crates."}, {"sha": "427102afee103535dcf882c84e7ac2180fefa083", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "patch": "@@ -303,8 +303,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         opt_input_types: Option<&[Ty<'tcx>]>,\n     ) -> Option<InferOk<'tcx, MethodCallee<'tcx>>> {\n         debug!(\n-            \"lookup_in_trait_adjusted(self_ty={:?}, m_name={}, trait_def_id={:?})\",\n-            self_ty, m_name, trait_def_id\n+            \"lookup_in_trait_adjusted(self_ty={:?}, m_name={}, trait_def_id={:?}, opt_input_types={:?})\",\n+            self_ty, m_name, trait_def_id, opt_input_types\n         );\n \n         // Construct a trait-reference `self_ty : Trait<input_tys>`"}, {"sha": "ad7853b7cd0f10282626d5a4d087ca37f6ccd822", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "patch": "@@ -1187,3 +1187,14 @@ fn fatally_break_rust(sess: &Session) {\n fn potentially_plural_count(count: usize, word: &str) -> String {\n     format!(\"{} {}{}\", count, word, pluralize!(count))\n }\n+\n+fn has_expected_num_generic_args<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    trait_did: Option<DefId>,\n+    expected: usize,\n+) -> bool {\n+    trait_did.map_or(true, |trait_did| {\n+        let generics = tcx.generics_of(trait_did);\n+        generics.count() == expected + if generics.has_self { 1 } else { 0 }\n+    })\n+}"}, {"sha": "963436d05d8ef30a52bac21eb8c15855f9635c4f", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "patch": "@@ -1,7 +1,7 @@\n //! Code related to processing overloaded binary and unary operators.\n \n use super::method::MethodCallee;\n-use super::FnCtxt;\n+use super::{has_expected_num_generic_args, FnCtxt};\n use rustc_ast as ast;\n use rustc_errors::{self, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -795,6 +795,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             lhs_ty, op, opname, trait_did\n         );\n \n+        // Catches cases like #83893, where a lang item is declared with the\n+        // wrong number of generic arguments. Should have yielded an error\n+        // elsewhere by now, but we have to catch it here so that we do not\n+        // index `other_tys` out of bounds (if the lang item has too many\n+        // generic arguments, `other_tys` is too short).\n+        if !has_expected_num_generic_args(\n+            self.tcx,\n+            trait_did,\n+            match op {\n+                // Binary ops have a generic right-hand side, unary ops don't\n+                Op::Binary(..) => 1,\n+                Op::Unary(..) => 0,\n+            },\n+        ) {\n+            return Err(());\n+        }\n+\n         let method = trait_did.and_then(|trait_did| {\n             let opname = Ident::with_dummy_span(opname);\n             self.lookup_method_in_trait(span, opname, trait_did, lhs_ty, Some(other_tys))"}, {"sha": "a63aec07ad1c086a2ef4a7a41f6387782dd195e3", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "patch": "@@ -1,5 +1,5 @@\n use crate::check::method::MethodCallee;\n-use crate::check::{FnCtxt, PlaceOp};\n+use crate::check::{has_expected_num_generic_args, FnCtxt, PlaceOp};\n use rustc_hir as hir;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n@@ -153,6 +153,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             PlaceOp::Deref => (self.tcx.lang_items().deref_trait(), sym::deref),\n             PlaceOp::Index => (self.tcx.lang_items().index_trait(), sym::index),\n         };\n+\n+        // If the lang item was declared incorrectly, stop here so that we don't\n+        // run into an ICE (#83893). The error is reported where the lang item is\n+        // declared.\n+        if !has_expected_num_generic_args(\n+            self.tcx,\n+            imm_tr,\n+            match op {\n+                PlaceOp::Deref => 0,\n+                PlaceOp::Index => 1,\n+            },\n+        ) {\n+            return None;\n+        }\n+\n         imm_tr.and_then(|trait_did| {\n             self.lookup_method_in_trait(\n                 span,\n@@ -177,6 +192,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             PlaceOp::Deref => (self.tcx.lang_items().deref_mut_trait(), sym::deref_mut),\n             PlaceOp::Index => (self.tcx.lang_items().index_mut_trait(), sym::index_mut),\n         };\n+\n+        // If the lang item was declared incorrectly, stop here so that we don't\n+        // run into an ICE (#83893). The error is reported where the lang item is\n+        // declared.\n+        if !has_expected_num_generic_args(\n+            self.tcx,\n+            mut_tr,\n+            match op {\n+                PlaceOp::Deref => 0,\n+                PlaceOp::Index => 1,\n+            },\n+        ) {\n+            return None;\n+        }\n+\n         mut_tr.and_then(|trait_did| {\n             self.lookup_method_in_trait(\n                 span,"}, {"sha": "0c329542928c559adf4f00c268a2b989269476de", "filename": "src/test/ui/lang-items/lang-item-missing-generator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.rs?ref=1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "previous_filename": "src/test/ui/lang-item-missing-generator.rs"}, {"sha": "fa13bf0b12719050bb268f8014248e718bc62c1d", "filename": "src/test/ui/lang-items/lang-item-missing-generator.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr?ref=1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "previous_filename": "src/test/ui/lang-item-missing-generator.stderr"}, {"sha": "4e26343242e0105d46a5b5c4e2304b8699efeb4d", "filename": "src/test/ui/lang-items/lang-item-missing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing.rs?ref=1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "previous_filename": "src/test/ui/lang-item-missing.rs"}, {"sha": "f7516c7d377dab1ff50429237150044408aa9e26", "filename": "src/test/ui/lang-items/lang-item-missing.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing.stderr?ref=1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "previous_filename": "src/test/ui/lang-item-missing.stderr"}, {"sha": "9f4f2464a1e65db1f9d119abc7b30def5aaf17ff", "filename": "src/test/ui/lang-items/wrong-number-generic-args-add.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-add.rs?ref=1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "patch": "@@ -0,0 +1,20 @@\n+// Checks whether declaring a lang item with the wrong number\n+// of generic arguments crashes the compiler (issue #83893).\n+\n+#![feature(lang_items,no_core)]\n+#![no_core]\n+#![crate_type=\"lib\"]\n+\n+#[lang = \"sized\"]\n+trait MySized {}\n+\n+#[lang = \"add\"]\n+trait MyAdd<'a, T> {}\n+//~^^ ERROR: `add` language item must be applied to a trait with 1 generic argument [E0718]\n+\n+fn ice() {\n+    let r = 5;\n+    let a = 6;\n+    r + a\n+    //~^ ERROR: cannot add `{integer}` to `{integer}` [E0369]\n+}"}, {"sha": "6f89441fd285d978b460319a62592b4893a7af5f", "filename": "src/test/ui/lang-items/wrong-number-generic-args-add.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-add.stderr?ref=1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "patch": "@@ -0,0 +1,20 @@\n+error[E0718]: `add` language item must be applied to a trait with 1 generic argument\n+  --> $DIR/wrong-number-generic-args-add.rs:11:1\n+   |\n+LL | #[lang = \"add\"]\n+   | ^^^^^^^^^^^^^^^\n+LL | trait MyAdd<'a, T> {}\n+   |            ------- this trait has 2 generic arguments, not 1\n+\n+error[E0369]: cannot add `{integer}` to `{integer}`\n+  --> $DIR/wrong-number-generic-args-add.rs:18:7\n+   |\n+LL |     r + a\n+   |     - ^ - {integer}\n+   |     |\n+   |     {integer}\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0369, E0718.\n+For more information about an error, try `rustc --explain E0369`."}, {"sha": "1d90e63dc5470749fccfd178df32cdc640449f74", "filename": "src/test/ui/lang-items/wrong-number-generic-args-index.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-index.rs?ref=1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "patch": "@@ -0,0 +1,19 @@\n+// Checks whether declaring a lang item with the wrong number\n+// of generic arguments crashes the compiler (issue #83893).\n+\n+#![feature(lang_items,no_core)]\n+#![no_core]\n+#![crate_type=\"lib\"]\n+\n+#[lang = \"sized\"]\n+trait MySized {}\n+\n+#[lang = \"index\"]\n+trait MyIndex<'a, T> {}\n+//~^^ ERROR: `index` language item must be applied to a trait with 1 generic argument [E0718]\n+\n+fn ice() {\n+    let arr = [0; 5];\n+    let _ = arr[2];\n+    //~^ ERROR: cannot index into a value of type `[{integer}; 5]` [E0608]\n+}"}, {"sha": "bc3f19ff276239284b9cbbe75d353fc12c264185", "filename": "src/test/ui/lang-items/wrong-number-generic-args-index.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bfd987f6911ec463c8d1cc10f80dd77a883d92c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-index.stderr?ref=1bfd987f6911ec463c8d1cc10f80dd77a883d92c", "patch": "@@ -0,0 +1,18 @@\n+error[E0718]: `index` language item must be applied to a trait with 1 generic argument\n+  --> $DIR/wrong-number-generic-args-index.rs:11:1\n+   |\n+LL | #[lang = \"index\"]\n+   | ^^^^^^^^^^^^^^^^^\n+LL | trait MyIndex<'a, T> {}\n+   |              ------- this trait has 2 generic arguments, not 1\n+\n+error[E0608]: cannot index into a value of type `[{integer}; 5]`\n+  --> $DIR/wrong-number-generic-args-index.rs:17:13\n+   |\n+LL |     let _ = arr[2];\n+   |             ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0608, E0718.\n+For more information about an error, try `rustc --explain E0608`."}]}