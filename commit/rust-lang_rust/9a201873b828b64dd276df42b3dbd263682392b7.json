{"sha": "9a201873b828b64dd276df42b3dbd263682392b7", "node_id": "C_kwDOAAsO6NoAKDlhMjAxODczYjgyOGI2NGRkMjc2ZGY0MmIzZGJkMjYzNjgyMzkyYjc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-22T11:38:35Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-23T12:05:55Z"}, "message": "Move highlight configuration from protocol into the feature", "tree": {"sha": "a181c30e427e7af4f904a8fa42a0456744b6d577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a181c30e427e7af4f904a8fa42a0456744b6d577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a201873b828b64dd276df42b3dbd263682392b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a201873b828b64dd276df42b3dbd263682392b7", "html_url": "https://github.com/rust-lang/rust/commit/9a201873b828b64dd276df42b3dbd263682392b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a201873b828b64dd276df42b3dbd263682392b7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afc8cfb4d1a565f844fa805aa658fb80b23c1314", "url": "https://api.github.com/repos/rust-lang/rust/commits/afc8cfb4d1a565f844fa805aa658fb80b23c1314", "html_url": "https://github.com/rust-lang/rust/commit/afc8cfb4d1a565f844fa805aa658fb80b23c1314"}], "stats": {"total": 205, "additions": 119, "deletions": 86}, "files": [{"sha": "d61d69a090b33850049acfa36b8327ba7b887965", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=9a201873b828b64dd276df42b3dbd263682392b7", "patch": "@@ -98,7 +98,7 @@ pub use crate::{\n     static_index::{StaticIndex, StaticIndexedFile, TokenId, TokenStaticData},\n     syntax_highlighting::{\n         tags::{Highlight, HlMod, HlMods, HlOperator, HlPunct, HlTag},\n-        HlRange,\n+        HighlightConfig, HlRange,\n     },\n };\n pub use hir::{Documentation, Semantics};\n@@ -517,8 +517,12 @@ impl Analysis {\n     }\n \n     /// Computes syntax highlighting for the given file\n-    pub fn highlight(&self, file_id: FileId) -> Cancellable<Vec<HlRange>> {\n-        self.with_db(|db| syntax_highlighting::highlight(db, file_id, None, false))\n+    pub fn highlight(\n+        &self,\n+        highlight_config: HighlightConfig,\n+        file_id: FileId,\n+    ) -> Cancellable<Vec<HlRange>> {\n+        self.with_db(|db| syntax_highlighting::highlight(db, highlight_config, file_id, None))\n     }\n \n     /// Computes all ranges to highlight for a given item in a file.\n@@ -533,9 +537,13 @@ impl Analysis {\n     }\n \n     /// Computes syntax highlighting for the given file range.\n-    pub fn highlight_range(&self, frange: FileRange) -> Cancellable<Vec<HlRange>> {\n+    pub fn highlight_range(\n+        &self,\n+        highlight_config: HighlightConfig,\n+        frange: FileRange,\n+    ) -> Cancellable<Vec<HlRange>> {\n         self.with_db(|db| {\n-            syntax_highlighting::highlight(db, frange.file_id, Some(frange.range), false)\n+            syntax_highlighting::highlight(db, highlight_config, frange.file_id, Some(frange.range))\n         })\n     }\n "}, {"sha": "21beeb44a9d90a05123906df6f57ce1271e28cba", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=9a201873b828b64dd276df42b3dbd263682392b7", "patch": "@@ -14,7 +14,7 @@ mod html;\n mod tests;\n \n use hir::{Name, Semantics};\n-use ide_db::{FxHashMap, RootDatabase};\n+use ide_db::{FxHashMap, RootDatabase, SymbolKind};\n use syntax::{\n     ast, AstNode, AstToken, NodeOrToken, SyntaxKind::*, SyntaxNode, TextRange, WalkEvent, T,\n };\n@@ -24,7 +24,7 @@ use crate::{\n         escape::highlight_escape_string, format::highlight_format_string, highlights::Highlights,\n         macro_::MacroHighlighter, tags::Highlight,\n     },\n-    FileId, HlMod, HlTag,\n+    FileId, HlMod, HlOperator, HlPunct, HlTag,\n };\n \n pub(crate) use html::highlight_as_html;\n@@ -36,6 +36,16 @@ pub struct HlRange {\n     pub binding_hash: Option<u64>,\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub struct HighlightConfig {\n+    pub strings: bool,\n+    pub punctuation: bool,\n+    pub specialize_punctuation: bool,\n+    pub specialize_operator: bool,\n+    pub operator: bool,\n+    pub syntactic_name_ref_highlighting: bool,\n+}\n+\n // Feature: Semantic Syntax Highlighting\n //\n // rust-analyzer highlights the code semantically.\n@@ -155,9 +165,9 @@ pub struct HlRange {\n // image::https://user-images.githubusercontent.com/48062697/113187625-f7f50100-9250-11eb-825e-91c58f236071.png[]\n pub(crate) fn highlight(\n     db: &RootDatabase,\n+    config: HighlightConfig,\n     file_id: FileId,\n     range_to_highlight: Option<TextRange>,\n-    syntactic_name_ref_highlighting: bool,\n ) -> Vec<HlRange> {\n     let _p = profile::span(\"highlight\");\n     let sema = Semantics::new(db);\n@@ -183,26 +193,18 @@ pub(crate) fn highlight(\n         Some(it) => it.krate(),\n         None => return hl.to_vec(),\n     };\n-    traverse(\n-        &mut hl,\n-        &sema,\n-        file_id,\n-        &root,\n-        krate,\n-        range_to_highlight,\n-        syntactic_name_ref_highlighting,\n-    );\n+    traverse(&mut hl, &sema, config, file_id, &root, krate, range_to_highlight);\n     hl.to_vec()\n }\n \n fn traverse(\n     hl: &mut Highlights,\n     sema: &Semantics<'_, RootDatabase>,\n+    config: HighlightConfig,\n     file_id: FileId,\n     root: &SyntaxNode,\n     krate: hir::Crate,\n     range_to_highlight: TextRange,\n-    syntactic_name_ref_highlighting: bool,\n ) {\n     let is_unlinked = sema.to_module_def(file_id).is_none();\n     let mut bindings_shadow_count: FxHashMap<Name, u32> = FxHashMap::default();\n@@ -325,7 +327,7 @@ fn traverse(\n             Leave(NodeOrToken::Node(node)) => {\n                 // Doc comment highlighting injection, we do this when leaving the node\n                 // so that we overwrite the highlighting of the doc comment itself.\n-                inject::doc_comment(hl, sema, file_id, &node);\n+                inject::doc_comment(hl, sema, config, file_id, &node);\n                 continue;\n             }\n         };\n@@ -400,7 +402,8 @@ fn traverse(\n                 let string_to_highlight = ast::String::cast(descended_token.clone());\n                 if let Some((string, expanded_string)) = string.zip(string_to_highlight) {\n                     if string.is_raw() {\n-                        if inject::ra_fixture(hl, sema, &string, &expanded_string).is_some() {\n+                        if inject::ra_fixture(hl, sema, config, &string, &expanded_string).is_some()\n+                        {\n                             continue;\n                         }\n                     }\n@@ -421,7 +424,7 @@ fn traverse(\n                 sema,\n                 krate,\n                 &mut bindings_shadow_count,\n-                syntactic_name_ref_highlighting,\n+                config.syntactic_name_ref_highlighting,\n                 name_like,\n             ),\n             NodeOrToken::Token(token) => highlight::token(sema, token).zip(Some(None)),\n@@ -439,6 +442,27 @@ fn traverse(\n                 // something unresolvable. FIXME: There should be a way to prevent that\n                 continue;\n             }\n+\n+            // apply config filtering\n+            match &mut highlight.tag {\n+                HlTag::StringLiteral if !config.strings => continue,\n+                // If punctuation is disabled, make the macro bang part of the macro call again.\n+                tag @ HlTag::Punctuation(HlPunct::MacroBang)\n+                    if !config.punctuation || !config.specialize_punctuation =>\n+                {\n+                    *tag = HlTag::Symbol(SymbolKind::Macro);\n+                }\n+                HlTag::Punctuation(_) if !config.punctuation => continue,\n+                tag @ HlTag::Punctuation(_) if !config.specialize_punctuation => {\n+                    *tag = HlTag::Punctuation(HlPunct::Other);\n+                }\n+                HlTag::Operator(_) if !config.operator && highlight.mods.is_empty() => continue,\n+                tag @ HlTag::Operator(_) if !config.specialize_operator => {\n+                    *tag = HlTag::Operator(HlOperator::Other);\n+                }\n+                _ => (),\n+            }\n+\n             if inside_attribute {\n                 highlight |= HlMod::Attribute\n             }"}, {"sha": "c841456aef3c4f5053b3544614646b42bceb74a5", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=9a201873b828b64dd276df42b3dbd263682392b7", "patch": "@@ -5,7 +5,10 @@ use oorandom::Rand32;\n use stdx::format_to;\n use syntax::AstNode;\n \n-use crate::{syntax_highlighting::highlight, FileId, RootDatabase};\n+use crate::{\n+    syntax_highlighting::{highlight, HighlightConfig},\n+    FileId, RootDatabase,\n+};\n \n pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: bool) -> String {\n     let parse = db.parse(file_id);\n@@ -20,7 +23,19 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n         )\n     }\n \n-    let hl_ranges = highlight(db, file_id, None, false);\n+    let hl_ranges = highlight(\n+        db,\n+        HighlightConfig {\n+            strings: true,\n+            punctuation: true,\n+            specialize_punctuation: true,\n+            specialize_operator: true,\n+            operator: true,\n+            syntactic_name_ref_highlighting: false,\n+        },\n+        file_id,\n+        None,\n+    );\n     let text = parse.tree().syntax().to_string();\n     let mut buf = String::new();\n     buf.push_str(STYLE);"}, {"sha": "9139528c7ed96d08685e6bb646e50aa7482bf5e4", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=9a201873b828b64dd276df42b3dbd263682392b7", "patch": "@@ -15,13 +15,14 @@ use syntax::{\n \n use crate::{\n     doc_links::{doc_attributes, extract_definitions_from_docs, resolve_doc_path_for_def},\n-    syntax_highlighting::{highlights::Highlights, injector::Injector},\n+    syntax_highlighting::{highlights::Highlights, injector::Injector, HighlightConfig},\n     Analysis, HlMod, HlRange, HlTag, RootDatabase,\n };\n \n pub(super) fn ra_fixture(\n     hl: &mut Highlights,\n     sema: &Semantics<'_, RootDatabase>,\n+    config: HighlightConfig,\n     literal: &ast::String,\n     expanded: &ast::String,\n ) -> Option<()> {\n@@ -63,7 +64,13 @@ pub(super) fn ra_fixture(\n \n     let (analysis, tmp_file_id) = Analysis::from_single_file(inj.take_text());\n \n-    for mut hl_range in analysis.highlight(tmp_file_id).unwrap() {\n+    for mut hl_range in analysis\n+        .highlight(\n+            HighlightConfig { syntactic_name_ref_highlighting: false, ..config },\n+            tmp_file_id,\n+        )\n+        .unwrap()\n+    {\n         for range in inj.map_range_up(hl_range.range) {\n             if let Some(range) = literal.map_range_up(range) {\n                 hl_range.range = range;\n@@ -86,6 +93,7 @@ const RUSTDOC_FENCES: [&str; 2] = [\"```\", \"~~~\"];\n pub(super) fn doc_comment(\n     hl: &mut Highlights,\n     sema: &Semantics<'_, RootDatabase>,\n+    config: HighlightConfig,\n     src_file_id: FileId,\n     node: &SyntaxNode,\n ) {\n@@ -206,7 +214,14 @@ pub(super) fn doc_comment(\n \n     let (analysis, tmp_file_id) = Analysis::from_single_file(inj.take_text());\n \n-    if let Ok(ranges) = analysis.with_db(|db| super::highlight(db, tmp_file_id, None, true)) {\n+    if let Ok(ranges) = analysis.with_db(|db| {\n+        super::highlight(\n+            db,\n+            HighlightConfig { syntactic_name_ref_highlighting: true, ..config },\n+            tmp_file_id,\n+            None,\n+        )\n+    }) {\n         for HlRange { range, highlight, binding_hash } in ranges {\n             for range in inj.map_range_up(range) {\n                 hl.add(HlRange { range, highlight: highlight | HlMod::Injected, binding_hash });"}, {"sha": "246c6e3722559208f0b9ebc5ec211f0670b5becb", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=9a201873b828b64dd276df42b3dbd263682392b7", "patch": "@@ -4,7 +4,16 @@ use expect_test::{expect_file, ExpectFile};\n use ide_db::SymbolKind;\n use test_utils::{bench, bench_fixture, skip_slow_tests, AssertLinear};\n \n-use crate::{fixture, FileRange, HlTag, TextRange};\n+use crate::{fixture, FileRange, HighlightConfig, HlTag, TextRange};\n+\n+const HL_CONFIG: HighlightConfig = HighlightConfig {\n+    strings: true,\n+    punctuation: true,\n+    specialize_punctuation: true,\n+    specialize_operator: true,\n+    operator: true,\n+    syntactic_name_ref_highlighting: false,\n+};\n \n #[test]\n fn attributes() {\n@@ -996,7 +1005,10 @@ struct Foo {\n \n     // The \"x\"\n     let highlights = &analysis\n-        .highlight_range(FileRange { file_id, range: TextRange::at(45.into(), 1.into()) })\n+        .highlight_range(\n+            HL_CONFIG,\n+            FileRange { file_id, range: TextRange::at(45.into(), 1.into()) },\n+        )\n         .unwrap();\n \n     assert_eq!(&highlights[0].highlight.to_string(), \"field.declaration.public\");\n@@ -1011,7 +1023,7 @@ macro_rules! test {}\n }\"#\n         .trim(),\n     );\n-    let _ = analysis.highlight(file_id).unwrap();\n+    let _ = analysis.highlight(HL_CONFIG, file_id).unwrap();\n }\n \n /// Highlights the code given by the `ra_fixture` argument, renders the\n@@ -1035,7 +1047,7 @@ fn benchmark_syntax_highlighting_long_struct() {\n     let hash = {\n         let _pt = bench(\"syntax highlighting long struct\");\n         analysis\n-            .highlight(file_id)\n+            .highlight(HL_CONFIG, file_id)\n             .unwrap()\n             .iter()\n             .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n@@ -1061,7 +1073,7 @@ fn syntax_highlighting_not_quadratic() {\n             let time = Instant::now();\n \n             let hash = analysis\n-                .highlight(file_id)\n+                .highlight(HL_CONFIG, file_id)\n                 .unwrap()\n                 .iter()\n                 .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n@@ -1086,7 +1098,7 @@ fn benchmark_syntax_highlighting_parser() {\n     let hash = {\n         let _pt = bench(\"syntax highlighting parser\");\n         analysis\n-            .highlight(file_id)\n+            .highlight(HL_CONFIG, file_id)\n             .unwrap()\n             .iter()\n             .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Function))"}, {"sha": "3badc890958ae5fc4979c58bb45b6e7430c624b5", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=9a201873b828b64dd276df42b3dbd263682392b7", "patch": "@@ -12,8 +12,8 @@ use std::{ffi::OsString, fmt, iter, path::PathBuf};\n use flycheck::FlycheckConfig;\n use ide::{\n     AssistConfig, CallableSnippets, CompletionConfig, DiagnosticsConfig, ExprFillDefaultMode,\n-    HighlightRelatedConfig, HoverConfig, HoverDocFormat, InlayHintsConfig, JoinLinesConfig,\n-    Snippet, SnippetScope,\n+    HighlightConfig, HighlightRelatedConfig, HoverConfig, HoverDocFormat, InlayHintsConfig,\n+    JoinLinesConfig, Snippet, SnippetScope,\n };\n use ide_db::{\n     imports::insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n@@ -543,15 +543,6 @@ impl HoverActionsConfig {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n-pub struct HighlightingConfig {\n-    pub strings: bool,\n-    pub punctuation: bool,\n-    pub specialize_punctuation: bool,\n-    pub specialize_operator: bool,\n-    pub operator: bool,\n-}\n-\n #[derive(Debug, Clone)]\n pub struct FilesConfig {\n     pub watcher: FilesWatcher,\n@@ -1200,15 +1191,16 @@ impl Config {\n         }\n     }\n \n-    pub fn highlighting_config(&self) -> HighlightingConfig {\n-        HighlightingConfig {\n+    pub fn highlighting_config(&self) -> HighlightConfig {\n+        HighlightConfig {\n             strings: self.data.semanticHighlighting_strings_enable,\n             punctuation: self.data.semanticHighlighting_punctuation_enable,\n             specialize_punctuation: self\n                 .data\n                 .semanticHighlighting_punctuation_specialization_enable,\n             operator: self.data.semanticHighlighting_operator_enable,\n             specialize_operator: self.data.semanticHighlighting_operator_specialization_enable,\n+            syntactic_name_ref_highlighting: false,\n         }\n     }\n "}, {"sha": "d89f0f5a3cf456d24c7889deec9355b3098e7a34", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=9a201873b828b64dd276df42b3dbd263682392b7", "patch": "@@ -1504,10 +1504,8 @@ pub(crate) fn handle_semantic_tokens_full(\n     let text = snap.analysis.file_text(file_id)?;\n     let line_index = snap.file_line_index(file_id)?;\n \n-    let highlights = snap.analysis.highlight(file_id)?;\n-    let highlighting_config = snap.config.highlighting_config();\n-    let semantic_tokens =\n-        to_proto::semantic_tokens(&text, &line_index, highlights, highlighting_config);\n+    let highlights = snap.analysis.highlight(snap.config.highlighting_config(), file_id)?;\n+    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n \n     // Unconditionally cache the tokens\n     snap.semantic_tokens_cache.lock().insert(params.text_document.uri, semantic_tokens.clone());\n@@ -1525,10 +1523,8 @@ pub(crate) fn handle_semantic_tokens_full_delta(\n     let text = snap.analysis.file_text(file_id)?;\n     let line_index = snap.file_line_index(file_id)?;\n \n-    let highlights = snap.analysis.highlight(file_id)?;\n-    let highlight_strings = snap.config.highlighting_config();\n-    let semantic_tokens =\n-        to_proto::semantic_tokens(&text, &line_index, highlights, highlight_strings);\n+    let highlights = snap.analysis.highlight(snap.config.highlighting_config(), file_id)?;\n+    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n \n     let mut cache = snap.semantic_tokens_cache.lock();\n     let cached_tokens = cache.entry(params.text_document.uri).or_default();\n@@ -1556,10 +1552,8 @@ pub(crate) fn handle_semantic_tokens_range(\n     let text = snap.analysis.file_text(frange.file_id)?;\n     let line_index = snap.file_line_index(frange.file_id)?;\n \n-    let highlights = snap.analysis.highlight_range(frange)?;\n-    let highlight_strings = snap.config.highlighting_config();\n-    let semantic_tokens =\n-        to_proto::semantic_tokens(&text, &line_index, highlights, highlight_strings);\n+    let highlights = snap.analysis.highlight_range(snap.config.highlighting_config(), frange)?;\n+    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n     Ok(Some(semantic_tokens.into()))\n }\n "}, {"sha": "7a89d6e3e1233a0dc7fbb08820cc924b7272f35d", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a201873b828b64dd276df42b3dbd263682392b7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=9a201873b828b64dd276df42b3dbd263682392b7", "patch": "@@ -18,7 +18,7 @@ use vfs::AbsPath;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n-    config::{CallInfoConfig, Config, HighlightingConfig},\n+    config::{CallInfoConfig, Config},\n     global_state::GlobalStateSnapshot,\n     line_index::{LineEndings, LineIndex, OffsetEncoding},\n     lsp_ext,\n@@ -517,42 +517,15 @@ pub(crate) fn semantic_tokens(\n     text: &str,\n     line_index: &LineIndex,\n     highlights: Vec<HlRange>,\n-    config: HighlightingConfig,\n ) -> lsp_types::SemanticTokens {\n     let id = TOKEN_RESULT_COUNTER.fetch_add(1, Ordering::SeqCst).to_string();\n     let mut builder = semantic_tokens::SemanticTokensBuilder::new(id);\n \n-    for mut highlight_range in highlights {\n+    for highlight_range in highlights {\n         if highlight_range.highlight.is_empty() {\n             continue;\n         }\n \n-        // apply config filtering\n-        match &mut highlight_range.highlight.tag {\n-            HlTag::StringLiteral if !config.strings => continue,\n-            // If punctuation is disabled, make the macro bang part of the macro call again.\n-            tag @ HlTag::Punctuation(HlPunct::MacroBang)\n-                if !config.punctuation || !config.specialize_punctuation =>\n-            {\n-                *tag = HlTag::Symbol(SymbolKind::Macro);\n-            }\n-            HlTag::Punctuation(_)\n-                if !config.punctuation && highlight_range.highlight.mods.is_empty() =>\n-            {\n-                continue\n-            }\n-            tag @ HlTag::Punctuation(_) if !config.specialize_punctuation => {\n-                *tag = HlTag::Punctuation(HlPunct::Other);\n-            }\n-            HlTag::Operator(_) if !config.operator && highlight_range.highlight.mods.is_empty() => {\n-                continue\n-            }\n-            tag @ HlTag::Operator(_) if !config.specialize_operator => {\n-                *tag = HlTag::Operator(HlOperator::Other);\n-            }\n-            _ => (),\n-        }\n-\n         let (ty, mods) = semantic_token_type_and_modifiers(highlight_range.highlight);\n         let token_index = semantic_tokens::type_index(ty);\n         let modifier_bitset = mods.0;"}]}