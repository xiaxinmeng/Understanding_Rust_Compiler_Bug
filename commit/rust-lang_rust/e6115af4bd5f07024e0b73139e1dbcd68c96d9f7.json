{"sha": "e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MTE1YWY0YmQ1ZjA3MDI0ZTBiNzMxMzllMWRiY2Q2OGM5NmQ5Zjc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-10-10T14:33:19Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-10-14T09:51:13Z"}, "message": "Implement `dyn Trait` syntax", "tree": {"sha": "caead936dd84ba0d4492222d3c3bd6da121dffd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caead936dd84ba0d4492222d3c3bd6da121dffd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "html_url": "https://github.com/rust-lang/rust/commit/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3037965b5bb762b6ed0dc860aefe01b664943ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3037965b5bb762b6ed0dc860aefe01b664943ce8", "html_url": "https://github.com/rust-lang/rust/commit/3037965b5bb762b6ed0dc860aefe01b664943ce8"}], "stats": {"total": 190, "additions": 149, "deletions": 41}, "files": [{"sha": "54aecb4b00f826580f8d0e683ec2d1e80c7d4650", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -705,7 +705,7 @@ impl<'a> LoweringContext<'a> {\n                 let expr = self.lower_body(None, |this| this.lower_expr(expr));\n                 hir::TyTypeof(expr)\n             }\n-            TyKind::TraitObject(ref bounds) => {\n+            TyKind::TraitObject(ref bounds, ..) => {\n                 let mut lifetime_bound = None;\n                 let bounds = bounds.iter().filter_map(|bound| {\n                     match *bound {"}, {"sha": "14e33378969aaa8cd25d1f091917fe7e1740acb2", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -152,7 +152,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     err.emit();\n                 });\n             }\n-            TyKind::TraitObject(ref bounds) => {\n+            TyKind::TraitObject(ref bounds, ..) => {\n                 let mut any_lifetime_bounds = false;\n                 for bound in bounds {\n                     if let RegionTyParamBound(ref lifetime) = *bound {"}, {"sha": "47e5ad6c0108834a427f7d8e6331c4cd73229c2f", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -288,7 +288,7 @@ impl Sig for ast::Ty {\n                     })\n                 }\n             }\n-            ast::TyKind::TraitObject(ref bounds) => {\n+            ast::TyKind::TraitObject(ref bounds, ..) => {\n                 // FIXME recurse into bounds\n                 let nested = pprust::bounds_to_string(bounds);\n                 Ok(text_sig(nested))"}, {"sha": "f445def9e0335182dbed2e0118e0a8f288098706", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -1419,7 +1419,7 @@ pub enum TyKind {\n     Path(Option<QSelf>, Path),\n     /// A trait object type `Bound1 + Bound2 + Bound3`\n     /// where `Bound` is a trait or a lifetime.\n-    TraitObject(TyParamBounds),\n+    TraitObject(TyParamBounds, TraitObjectSyntax),\n     /// An `impl Bound1 + Bound2 + Bound3` type\n     /// where `Bound` is a trait or a lifetime.\n     ImplTrait(TyParamBounds),\n@@ -1438,6 +1438,13 @@ pub enum TyKind {\n     Err,\n }\n \n+/// Syntax used to declare a trait object.\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum TraitObjectSyntax {\n+    Dyn,\n+    None,\n+}\n+\n /// Inline assembly dialect.\n ///\n /// E.g. `\"intel\"` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")``"}, {"sha": "9060a613bc132d87f03f2300483046420bc62511", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -398,6 +398,9 @@ declare_features! (\n \n     // Default match binding modes (RFC 2005)\n     (active, match_default_bindings, \"1.22.0\", Some(42640)),\n+\n+    // Trait object syntax with `dyn` prefix\n+    (active, dyn_trait, \"1.22.0\", Some(44662)),\n );\n \n declare_features! (\n@@ -1417,6 +1420,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, never_type, ty.span,\n                                    \"The `!` type is experimental\");\n             },\n+            ast::TyKind::TraitObject(_, ast::TraitObjectSyntax::Dyn) => {\n+                gate_feature_post!(&self, dyn_trait, ty.span,\n+                                   \"`dyn Trait` syntax is unstable\");\n+            }\n             _ => {}\n         }\n         visit::walk_ty(self, ty)"}, {"sha": "d7d491db71f05bfb449c7d5d21436a2da42de7be", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -400,8 +400,8 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n             TyKind::Typeof(expr) => {\n                 TyKind::Typeof(fld.fold_expr(expr))\n             }\n-            TyKind::TraitObject(bounds) => {\n-                TyKind::TraitObject(bounds.move_map(|b| fld.fold_ty_param_bound(b)))\n+            TyKind::TraitObject(bounds, syntax) => {\n+                TyKind::TraitObject(bounds.move_map(|b| fld.fold_ty_param_bound(b)), syntax)\n             }\n             TyKind::ImplTrait(bounds) => {\n                 TyKind::ImplTrait(bounds.move_map(|b| fld.fold_ty_param_bound(b)))"}, {"sha": "bd400ef6dd6dab9ecdbb0fd960171bc9c13ec94a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -33,7 +33,7 @@ use ast::{Stmt, StmtKind};\n use ast::{VariantData, StructField};\n use ast::StrStyle;\n use ast::SelfKind;\n-use ast::{TraitItem, TraitRef};\n+use ast::{TraitItem, TraitRef, TraitObjectSyntax};\n use ast::{Ty, TyKind, TypeBinding, TyParam, TyParamBounds};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n@@ -364,6 +364,13 @@ fn is_ident_or_underscore(t: &token::Token) -> bool {\n     t.is_ident() || *t == token::Underscore\n }\n \n+// Returns true if `IDENT t` can start a type - `IDENT::a::b`, `IDENT<u8, u8>`,\n+// `IDENT<<u8 as Trait>::AssocTy>`, `IDENT(u8, u8) -> u8`.\n+fn can_continue_type_after_ident(t: &token::Token) -> bool {\n+    t == &token::ModSep || t == &token::Lt ||\n+    t == &token::BinOp(token::Shl) || t == &token::OpenDelim(token::Paren)\n+}\n+\n /// Information about the path to a module.\n pub struct ModulePath {\n     pub name: String,\n@@ -1428,7 +1435,7 @@ impl<'a> Parser<'a> {\n                     TyKind::Path(None, ref path) if maybe_bounds => {\n                         self.parse_remaining_bounds(Vec::new(), path.clone(), lo, true)?\n                     }\n-                    TyKind::TraitObject(ref bounds)\n+                    TyKind::TraitObject(ref bounds, TraitObjectSyntax::None)\n                             if maybe_bounds && bounds.len() == 1 && !trailing_plus => {\n                         let path = match bounds[0] {\n                             TraitTyParamBound(ref pt, ..) => pt.trait_ref.path.clone(),\n@@ -1472,27 +1479,6 @@ impl<'a> Parser<'a> {\n         } else if self.eat(&token::Underscore) {\n             // A type to be inferred `_`\n             TyKind::Infer\n-        } else if self.eat_lt() {\n-            // Qualified path\n-            let (qself, path) = self.parse_qpath(PathStyle::Type)?;\n-            TyKind::Path(Some(qself), path)\n-        } else if self.token.is_path_start() {\n-            // Simple path\n-            let path = self.parse_path(PathStyle::Type)?;\n-            if self.eat(&token::Not) {\n-                // Macro invocation in type position\n-                let (_, tts) = self.expect_delimited_token_tree()?;\n-                TyKind::Mac(respan(lo.to(self.span), Mac_ { path: path, tts: tts }))\n-            } else {\n-                // Just a type path or bound list (trait object type) starting with a trait.\n-                //   `Type`\n-                //   `Trait1 + Trait2 + 'a`\n-                if allow_plus && self.check(&token::BinOp(token::Plus)) {\n-                    self.parse_remaining_bounds(Vec::new(), path, lo, true)?\n-                } else {\n-                    TyKind::Path(None, path)\n-                }\n-            }\n         } else if self.token_is_bare_fn_keyword() {\n             // Function pointer type\n             self.parse_ty_bare_fn(Vec::new())?\n@@ -1512,10 +1498,37 @@ impl<'a> Parser<'a> {\n         } else if self.eat_keyword(keywords::Impl) {\n             // FIXME: figure out priority of `+` in `impl Trait1 + Trait2` (#34511).\n             TyKind::ImplTrait(self.parse_ty_param_bounds()?)\n+        } else if self.check_keyword(keywords::Dyn) &&\n+                  self.look_ahead(1, |t| t.can_begin_bound() && !can_continue_type_after_ident(t)) {\n+            // FIXME: figure out priority of `+` in `dyn Trait1 + Trait2` (#34511).\n+            self.bump(); // `dyn`\n+            TyKind::TraitObject(self.parse_ty_param_bounds()?, TraitObjectSyntax::Dyn)\n         } else if self.check(&token::Question) ||\n-                  self.check_lifetime() && self.look_ahead(1, |t| t == &token::BinOp(token::Plus)){\n+                  self.check_lifetime() && self.look_ahead(1, |t| t == &token::BinOp(token::Plus)) {\n             // Bound list (trait object type)\n-            TyKind::TraitObject(self.parse_ty_param_bounds_common(allow_plus)?)\n+            TyKind::TraitObject(self.parse_ty_param_bounds_common(allow_plus)?,\n+                                TraitObjectSyntax::None)\n+        } else if self.eat_lt() {\n+            // Qualified path\n+            let (qself, path) = self.parse_qpath(PathStyle::Type)?;\n+            TyKind::Path(Some(qself), path)\n+        } else if self.token.is_path_start() {\n+            // Simple path\n+            let path = self.parse_path(PathStyle::Type)?;\n+            if self.eat(&token::Not) {\n+                // Macro invocation in type position\n+                let (_, tts) = self.expect_delimited_token_tree()?;\n+                TyKind::Mac(respan(lo.to(self.span), Mac_ { path: path, tts: tts }))\n+            } else {\n+                // Just a type path or bound list (trait object type) starting with a trait.\n+                //   `Type`\n+                //   `Trait1 + Trait2 + 'a`\n+                if allow_plus && self.check(&token::BinOp(token::Plus)) {\n+                    self.parse_remaining_bounds(Vec::new(), path, lo, true)?\n+                } else {\n+                    TyKind::Path(None, path)\n+                }\n+            }\n         } else {\n             let msg = format!(\"expected type, found {}\", self.this_token_descr());\n             return Err(self.fatal(&msg));\n@@ -1538,7 +1551,7 @@ impl<'a> Parser<'a> {\n             self.bump(); // `+`\n             bounds.append(&mut self.parse_ty_param_bounds()?);\n         }\n-        Ok(TyKind::TraitObject(bounds))\n+        Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::None))\n     }\n \n     fn maybe_recover_from_bad_type_plus(&mut self, allow_plus: bool, ty: &Ty) -> PResult<'a, ()> {\n@@ -4256,6 +4269,7 @@ impl<'a> Parser<'a> {\n     fn parse_ty_param_bounds_common(&mut self, allow_plus: bool) -> PResult<'a, TyParamBounds> {\n         let mut bounds = Vec::new();\n         loop {\n+            // This needs to be syncronized with `Token::can_begin_bound`.\n             let is_bound_start = self.check_path() || self.check_lifetime() ||\n                                  self.check(&token::Question) ||\n                                  self.check_keyword(keywords::For) ||"}, {"sha": "20db87cfc82d9849367418a197ed876691136aa0", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -258,6 +258,12 @@ impl Token {\n         }\n     }\n \n+    /// Returns `true` if the token can appear at the start of a generic bound.\n+    pub fn can_begin_bound(&self) -> bool {\n+        self.is_path_start() || self.is_lifetime() || self.is_keyword(keywords::For) ||\n+        self == &Question || self == &OpenDelim(Paren)\n+    }\n+\n     /// Returns `true` if the token is any literal\n     pub fn is_lit(&self) -> bool {\n         match *self {"}, {"sha": "02f871c58c73cfb7065d05f8f34c98d16b656fbf", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -1049,8 +1049,9 @@ impl<'a> State<'a> {\n             ast::TyKind::Path(Some(ref qself), ref path) => {\n                 self.print_qpath(path, qself, false)?\n             }\n-            ast::TyKind::TraitObject(ref bounds) => {\n-                self.print_bounds(\"\", &bounds[..])?;\n+            ast::TyKind::TraitObject(ref bounds, syntax) => {\n+                let prefix = if syntax == ast::TraitObjectSyntax::Dyn { \"dyn \" } else { \"\" };\n+                self.print_bounds(prefix, &bounds[..])?;\n             }\n             ast::TyKind::ImplTrait(ref bounds) => {\n                 self.print_bounds(\"impl \", &bounds[..])?;"}, {"sha": "521c6030eba2cc06d064e78ec08a475631638e69", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -348,7 +348,7 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expression)\n         }\n-        TyKind::TraitObject(ref bounds) |\n+        TyKind::TraitObject(ref bounds, ..) |\n         TyKind::ImplTrait(ref bounds) => {\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n         }"}, {"sha": "872fc031cfb1a8a0fe980b86a5f6e34857884de9", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -309,10 +309,11 @@ declare_keywords! {\n     (54, Yield,          \"yield\")\n \n     // Weak keywords, have special meaning only in specific contexts.\n-    (55, Default,        \"default\")\n-    (56, StaticLifetime, \"'static\")\n-    (57, Union,          \"union\")\n-    (58, Catch,          \"catch\")\n+    (55, Catch,          \"catch\")\n+    (56, Default,        \"default\")\n+    (57, Dyn,            \"dyn\")\n+    (58, StaticLifetime, \"'static\")\n+    (59, Union,          \"union\")\n }\n \n // If an interner exists in TLS, return it. Otherwise, prepare a fresh one."}, {"sha": "a7cfda504c75382a20ada7c28d518915990066ed", "filename": "src/test/compile-fail/dyn-trait-compatibility.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Ftest%2Fcompile-fail%2Fdyn-trait-compatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Ftest%2Fcompile-fail%2Fdyn-trait-compatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdyn-trait-compatibility.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type A0 = dyn;\n+//~^ ERROR cannot find type `dyn` in this scope\n+type A1 = dyn::dyn;\n+//~^ ERROR Use of undeclared type or module `dyn`\n+type A2 = dyn<dyn, dyn>;\n+//~^ ERROR cannot find type `dyn` in this scope\n+//~| ERROR cannot find type `dyn` in this scope\n+//~| ERROR cannot find type `dyn` in this scope\n+type A3 = dyn<<dyn as dyn>::dyn>;\n+//~^ ERROR cannot find type `dyn` in this scope\n+//~| ERROR cannot find type `dyn` in this scope\n+//~| ERROR Use of undeclared type or module `dyn`\n+type A4 = dyn(dyn, dyn) -> dyn;\n+//~^ ERROR cannot find type `dyn` in this scope\n+//~| ERROR cannot find type `dyn` in this scope\n+//~| ERROR cannot find type `dyn` in this scope\n+//~| ERROR cannot find type `dyn` in this scope\n+\n+fn main() {}"}, {"sha": "4b3803d019baa043e0a2038616ac4cffbd95f341", "filename": "src/test/compile-fail/feature-gate-dyn-trait.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dyn-trait.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Trait {}\n+type A = Box<dyn Trait>; //~ ERROR `dyn Trait` syntax is unstable\n+\n+fn main() {}"}, {"sha": "6cd439167314bd9ba4f684f4538b26b1bb8b45b5", "filename": "src/test/compile-fail/trait-bounds-not-on-struct.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(dyn_trait)]\n \n struct Foo;\n \n fn foo(_x: Box<Foo + Send>) { } //~ ERROR expected trait, found struct `Foo`\n \n+type A<T> = Box<dyn Vec<T>>; //~ ERROR expected trait, found struct `Vec`\n+\n fn main() { }"}, {"sha": "3e8c140eb197d154c9f7af6f02ef97d908e7d7fa", "filename": "src/test/parse-fail/trait-object-bad-parens.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -17,4 +17,6 @@ fn main() {\n     //~^ ERROR expected a path on the left-hand side of `+`, not `( Copy + Copy)`\n     let _: Box<(Copy +) + Copy>;\n     //~^ ERROR expected a path on the left-hand side of `+`, not `( Copy)`\n+    let _: Box<(dyn Copy) + Copy>;\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `(dyn  Copy)`\n }"}, {"sha": "91930852a57f64c9f489002c47159346ceb7b975", "filename": "src/test/run-pass/dyn-trait.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Ftest%2Frun-pass%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Ftest%2Frun-pass%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdyn-trait.rs?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(dyn_trait)]\n+\n+use std::fmt::Display;\n+\n+static BYTE: u8 = 33;\n+\n+fn main() {\n+    let x: &(dyn 'static + Display) = &BYTE;\n+    let y: Box<dyn Display + 'static> = Box::new(BYTE);\n+    let xstr = format!(\"{}\", x);\n+    let ystr = format!(\"{}\", y);\n+    assert_eq!(xstr, \"33\");\n+    assert_eq!(ystr, \"33\");\n+}"}, {"sha": "9beae91540abfd09a1ebdd8e6d68c2b72e8b2c69", "filename": "src/test/ui/issue-44406.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Ftest%2Fui%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6115af4bd5f07024e0b73139e1dbcd68c96d9f7/src%2Ftest%2Fui%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44406.stderr?ref=e6115af4bd5f07024e0b73139e1dbcd68c96d9f7", "patch": "@@ -13,11 +13,11 @@ error: expected type, found keyword `true`\n 18 |     foo!(true);\n    |          ^^^^ expecting a type here because of type ascription\n \n-error: expected one of `!`, `&&`, `&`, `(`, `*`, `.`, `;`, `<`, `?`, `[`, `_`, `extern`, `fn`, `for`, `impl`, `unsafe`, `}`, an operator, or lifetime, found `true`\n+error: expected one of `!`, `&&`, `&`, `(`, `*`, `.`, `;`, `<`, `?`, `[`, `_`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`, `}`, an operator, or lifetime, found `true`\n   --> $DIR/issue-44406.rs:18:10\n    |\n 13 |         bar(baz: $rest)\n-   |                 - expected one of 19 possible tokens here\n+   |                 - expected one of 20 possible tokens here\n ...\n 18 |     foo!(true);\n    |          ^^^^ unexpected token"}]}