{"sha": "56ba260749bbd30321bcbe755652ef215106719c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YmEyNjA3NDliYmQzMDMyMWJjYmU3NTU2NTJlZjIxNTEwNjcxOWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-16T00:10:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-18T17:32:38Z"}, "message": "Update test for equivalency to include region binders in object types, add new tests relating to HRTB, consolidate the `unboxed_closures` and `overloaded_calls` feature gates.", "tree": {"sha": "94c85d275ccae7e76788798f4833b8033fe59765", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94c85d275ccae7e76788798f4833b8033fe59765"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56ba260749bbd30321bcbe755652ef215106719c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56ba260749bbd30321bcbe755652ef215106719c", "html_url": "https://github.com/rust-lang/rust/commit/56ba260749bbd30321bcbe755652ef215106719c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56ba260749bbd30321bcbe755652ef215106719c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a846b86a85d4cf30a45fc81eba35c02b0451be3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a846b86a85d4cf30a45fc81eba35c02b0451be3", "html_url": "https://github.com/rust-lang/rust/commit/7a846b86a85d4cf30a45fc81eba35c02b0451be3"}], "stats": {"total": 612, "additions": 531, "deletions": 81}, "files": [{"sha": "62e0f5e4f1f48a4e5d4ad8a7fe3e61bc52f0249b", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -2513,11 +2513,6 @@ The currently implemented features of the reference compiler are:\n                closure as `once` is unlikely to be supported going forward. So\n                they are hidden behind this feature until they are to be removed.\n \n-* `overloaded_calls` - Allow implementing the `Fn*` family of traits on user\n-                       types, allowing overloading the call operator (`()`).\n-                       This feature may still undergo changes before being\n-                       stabilized.\n-\n * `phase` - Usage of the `#[phase]` attribute allows loading compiler plugins\n             for custom lints or syntax extensions. The implementation is\n             considered unwholesome and in need of overhaul, and it is not clear\n@@ -2560,7 +2555,8 @@ The currently implemented features of the reference compiler are:\n * `trace_macros` - Allows use of the `trace_macros` macro, which is a nasty\n                    hack that will certainly be removed.\n \n-* `unboxed_closures` - A work in progress feature with many known bugs.\n+* `unboxed_closures` - Rust's new closure design, which is currently a work in\n+                       progress feature with many known bugs.\n \n * `unsafe_destructor` - Allows use of the `#[unsafe_destructor]` attribute,\n                         which is considered wildly unsafe and will be"}, {"sha": "8ae5c3a0a959704f51cccfb49f103d5dd28329f4", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -2264,11 +2264,11 @@ fn try_overloaded_call<'a>(fcx: &FnCtxt,\n         fcx.inh.method_map.borrow_mut().insert(method_call, method_callee);\n         write_call(fcx, call_expression, output_type);\n \n-        if !fcx.tcx().sess.features.borrow().overloaded_calls {\n+        if !fcx.tcx().sess.features.borrow().unboxed_closures {\n             span_err!(fcx.tcx().sess, call_expression.span, E0056,\n                 \"overloaded calls are experimental\");\n             span_help!(fcx.tcx().sess, call_expression.span,\n-                \"add `#![feature(overloaded_calls)]` to \\\n+                \"add `#![feature(unboxed_closures)]` to \\\n                 the crate attributes to enable\");\n         }\n "}, {"sha": "ebdcf2789340227b0214e2c80e03579121c12583", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -58,7 +58,6 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"quote\", Active),\n     (\"linkage\", Active),\n     (\"struct_inherit\", Removed),\n-    (\"overloaded_calls\", Active),\n \n     (\"quad_precision_float\", Removed),\n \n@@ -101,7 +100,7 @@ enum Status {\n /// A set of features to be used by later passes.\n pub struct Features {\n     pub default_type_params: bool,\n-    pub overloaded_calls: bool,\n+    pub unboxed_closures: bool,\n     pub rustc_diagnostic_macros: bool,\n     pub import_shadowing: bool,\n     pub visible_private_types: bool,\n@@ -112,7 +111,7 @@ impl Features {\n     pub fn new() -> Features {\n         Features {\n             default_type_params: false,\n-            overloaded_calls: false,\n+            unboxed_closures: false,\n             rustc_diagnostic_macros: false,\n             import_shadowing: false,\n             visible_private_types: false,\n@@ -458,7 +457,7 @@ pub fn check_crate(span_handler: &SpanHandler, krate: &ast::Crate) -> (Features,\n \n     (Features {\n         default_type_params: cx.has_feature(\"default_type_params\"),\n-        overloaded_calls: cx.has_feature(\"overloaded_calls\"),\n+        unboxed_closures: cx.has_feature(\"unboxed_closures\"),\n         rustc_diagnostic_macros: cx.has_feature(\"rustc_diagnostic_macros\"),\n         import_shadowing: cx.has_feature(\"import_shadowing\"),\n         visible_private_types: cx.has_feature(\"visible_private_types\"),"}, {"sha": "54f1595780db715f0dc3b23705d47512364e3073", "filename": "src/test/auxiliary/issue-18711.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fauxiliary%2Fissue-18711.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fauxiliary%2Fissue-18711.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-18711.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures, overloaded_calls)]\n+#![feature(unboxed_closures)]\n #![crate_type = \"rlib\"]\n \n pub fn inner<F>(f: F) -> F {"}, {"sha": "9a6a2c7495b798b147b75f8244169046bfdcfc11", "filename": "src/test/auxiliary/unboxed-closures-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures, overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n #[inline]\n pub fn has_closures() -> uint {"}, {"sha": "ffe5739e0bb5e41f573172b7979b6f474c7a3019", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -40,7 +40,7 @@\n \n // ignore-android see #10393 #13206\n \n-#![feature(slicing_syntax, unboxed_closures, overloaded_calls)]\n+#![feature(slicing_syntax, unboxed_closures)]\n \n extern crate libc;\n "}, {"sha": "acb289aa3ade89f0b87a853f22872be1f60ece61", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -41,7 +41,7 @@\n // no-pretty-expanded FIXME #15189\n \n #![allow(non_snake_case)]\n-#![feature(unboxed_closures, overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n use std::iter::AdditiveIterator;\n use std::mem;"}, {"sha": "938fc53d61054c89b6ce16672729ce585a0951b2", "filename": "src/test/compile-fail/borrowck-overloaded-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n use std::ops::{Fn, FnMut, FnOnce};\n "}, {"sha": "4199deee7b80e037d99d4a25e0543728673fdaa8", "filename": "src/test/compile-fail/hrtb-higher-ranker-supertraits-transitive.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test HRTB supertraits with several levels of expansion required.\n+\n+trait Foo<'tcx>\n+{\n+    fn foo(&'tcx self) -> &'tcx int;\n+}\n+\n+trait Bar<'ccx>\n+    : for<'tcx> Foo<'tcx>\n+{\n+    fn bar(&'ccx self) -> &'ccx int;\n+}\n+\n+trait Baz\n+    : for<'ccx> Bar<'ccx>\n+{\n+    fn dummy(&self);\n+}\n+\n+trait Qux\n+    : Bar<'static>\n+{\n+    fn dummy(&self);\n+}\n+\n+fn want_foo_for_any_tcx<F>(f: &F)\n+    where F : for<'tcx> Foo<'tcx>\n+{\n+}\n+\n+fn want_bar_for_any_ccx<B>(b: &B)\n+    where B : for<'ccx> Bar<'ccx>\n+{\n+}\n+\n+fn want_baz<B>(b: &B)\n+    where B : Baz\n+{\n+    want_foo_for_any_tcx(b);\n+    want_bar_for_any_ccx(b);\n+}\n+\n+fn want_qux<B>(b: &B)\n+    where B : Qux\n+{\n+    want_foo_for_any_tcx(b);\n+    want_bar_for_any_ccx(b); //~ ERROR not implemented\n+}\n+\n+fn main() {}"}, {"sha": "108ca1b82e0df69659c377337bfaeb3bb5484dd3", "filename": "src/test/compile-fail/hrtb-higher-ranker-supertraits.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a trait (`Bar`) with a higher-ranked supertrait.\n+\n+trait Foo<'tcx>\n+{\n+    fn foo(&'tcx self) -> &'tcx int;\n+}\n+\n+trait Bar<'ccx>\n+    : for<'tcx> Foo<'tcx>\n+{\n+    fn bar(&'ccx self) -> &'ccx int;\n+}\n+\n+fn want_foo_for_some_tcx<'x,F>(f: &'x F)\n+    where F : Foo<'x>\n+{\n+    want_foo_for_some_tcx(f);\n+    want_foo_for_any_tcx(f); //~ ERROR not implemented\n+}\n+\n+fn want_foo_for_any_tcx<F>(f: &F)\n+    where F : for<'tcx> Foo<'tcx>\n+{\n+    want_foo_for_some_tcx(f);\n+    want_foo_for_any_tcx(f);\n+}\n+\n+fn want_bar_for_some_ccx<'x,B>(b: &B)\n+    where B : Bar<'x>\n+{\n+    want_foo_for_some_tcx(b);\n+    want_foo_for_any_tcx(b);\n+\n+    want_bar_for_some_ccx(b);\n+    want_bar_for_any_ccx(b); //~ ERROR not implemented\n+}\n+\n+fn want_bar_for_any_ccx<B>(b: &B)\n+    where B : for<'ccx> Bar<'ccx>\n+{\n+    want_foo_for_some_tcx(b);\n+    want_foo_for_any_tcx(b);\n+\n+    want_bar_for_some_ccx(b);\n+    want_bar_for_any_ccx(b);\n+}\n+\n+fn main() {}"}, {"sha": "733a5b2a85af1238aaabb96f5cfc8000e6fd1128", "filename": "src/test/compile-fail/hrtb-identity-fn-borrows.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the `'a` in the where clause correctly links the region\n+// of the output to the region of the input.\n+\n+trait FnLike<A,R> {\n+    fn call(&self, arg: A) -> R;\n+}\n+\n+fn call_repeatedly<F>(f: F)\n+    where F : for<'a> FnLike<&'a int, &'a int>\n+{\n+    // Result is stored: cannot re-assign `x`\n+    let mut x = 3;\n+    let y = f.call(&x);\n+    x = 5; //~ ERROR cannot assign\n+\n+    // Result is not stored: can re-assign `x`\n+    let mut x = 3;\n+    f.call(&x);\n+    f.call(&x);\n+    f.call(&x);\n+    x = 5;\n+}\n+\n+fn main() {\n+}"}, {"sha": "dd3c88b8a10b4c7709c1aa85907a0959b62c4fbd", "filename": "src/test/compile-fail/issue-15094.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n use std::{fmt, ops};\n "}, {"sha": "943d326182f89e30cfdba190256e2aeef1069990", "filename": "src/test/compile-fail/issue-18532.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fissue-18532.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fissue-18532.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18532.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -12,7 +12,7 @@\n // when a type error or unconstrained type variable propagates\n // into it.\n \n-#![feature(overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n fn main() {\n     (return)((),());"}, {"sha": "b3a4c3125891fdf7bdba3d1f1e40704b75a8d0ba", "filename": "src/test/compile-fail/overloaded-calls-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n "}, {"sha": "396a809c2e12fc541639ce7625d5137d2537e28d", "filename": "src/test/compile-fail/overloaded-calls-nontuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-nontuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-nontuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-nontuple.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n "}, {"sha": "1d1b244ab5aeb51a031c23a1c31b0aaee78c3943", "filename": "src/test/compile-fail/stage0-clone-contravariant-lifetime.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fstage0-clone-contravariant-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fstage0-clone-contravariant-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstage0-clone-contravariant-lifetime.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A zero-dependency test that covers some basic traits, default\n+// methods, etc.  When mucking about with basic type system stuff I\n+// often encounter problems in the iterator trait, so it's useful to\n+// have hanging around. -nmatsakis\n+\n+// error-pattern: requires `start` lang_item\n+\n+#![no_std]\n+#![feature(lang_items)]\n+\n+#[lang = \"sized\"]\n+pub trait Sized for Sized? {\n+    // Empty.\n+}\n+\n+pub mod std {\n+    pub mod clone {\n+        pub trait Clone {\n+            fn clone(&self) -> Self;\n+        }\n+    }\n+}\n+\n+pub struct ContravariantLifetime<'a>;\n+\n+impl <'a> ::std::clone::Clone for ContravariantLifetime<'a> {\n+    #[inline]\n+    fn clone(&self) -> ContravariantLifetime<'a> {\n+        match *self { ContravariantLifetime => ContravariantLifetime, }\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "2c0772b1414bd8567ab56729347e1186c6cefdaf", "filename": "src/test/compile-fail/stage0-cmp.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fstage0-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Fstage0-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstage0-cmp.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// A zero-dependency test that covers some basic traits, default\n+// methods, etc.  When mucking about with basic type system stuff I\n+// often encounter problems in the iterator trait, so it's useful to\n+// have hanging around. -nmatsakis\n+\n+// error-pattern: requires `start` lang_item\n+\n+#![no_std]\n+#![feature(lang_items)]\n+\n+#[lang = \"sized\"]\n+pub trait Sized for Sized? {\n+    // Empty.\n+}\n+\n+#[unstable = \"Definition may change slightly after trait reform\"]\n+pub trait PartialEq for Sized? {\n+    /// This method tests for `self` and `other` values to be equal, and is used by `==`.\n+    fn eq(&self, other: &Self) -> bool;\n+}\n+\n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+#[unstable = \"Trait is unstable.\"]\n+impl<'a, Sized? T: PartialEq> PartialEq for &'a T {\n+    #[inline]\n+    fn eq(&self, other: & &'a T) -> bool { PartialEq::eq(*self, *other) }\n+}\n+\n+fn main() { }"}, {"sha": "6f875efdef7eab13715525a710ed1ac8759f39c1", "filename": "src/test/compile-fail/unboxed-closure-sugar-equiv.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -16,13 +16,13 @@\n #![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n-struct Foo<T,U> {\n-    t: T, u: U\n+trait Foo<T,U> {\n+    fn dummy(&self, t: T, u: U);\n }\n \n-trait Eq<X> { }\n-impl<X> Eq<X> for X { }\n-fn eq<A,B:Eq<A>>() { }\n+trait Eq<Sized? X> for Sized? { }\n+impl<Sized? X> Eq<X> for X { }\n+fn eq<Sized? A,Sized? B:Eq<A>>() { }\n \n fn test<'a,'b>() {\n     // No errors expected:\n@@ -32,6 +32,22 @@ fn test<'a,'b>() {\n     eq::< Foo<(int,uint),uint>,         Foo(int,uint) -> uint         >();\n     eq::< Foo<(&'a int,&'b uint),uint>, Foo(&'a int,&'b uint) -> uint >();\n \n+    // Test that anonymous regions in `()` form are equivalent\n+    // to fresh bound regions, and that we can intermingle\n+    // named and anonymous as we choose:\n+    eq::< for<'a,'b> Foo<(&'a int,&'b uint),uint>,\n+          for<'a,'b> Foo(&'a int,&'b uint) -> uint            >();\n+    eq::< for<'a,'b> Foo<(&'a int,&'b uint),uint>,\n+          for<'a> Foo(&'a int,&uint) -> uint                  >();\n+    eq::< for<'a,'b> Foo<(&'a int,&'b uint),uint>,\n+          for<'b> Foo(&int,&'b uint) -> uint                  >();\n+    eq::< for<'a,'b> Foo<(&'a int,&'b uint),uint>,\n+          Foo(&int,&uint) -> uint                             >();\n+\n+    // FIXME(#18992) Test lifetime elision in `()` form:\n+    // eq::< for<'a,'b> Foo<(&'a int,), &'a int>,\n+    //      Foo(&int) -> &int                                   >();\n+\n     // Errors expected:\n     eq::< Foo<(),()>,                   Foo(char)                     >();\n     //~^ ERROR not implemented"}, {"sha": "9d104afd6464e98ae162960f227377e78d26cf9e", "filename": "src/test/run-pass/bare-fn-implements-fn-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n "}, {"sha": "cd40e2a7843665c85a7f8fa51db2ec5e14161460", "filename": "src/test/run-pass/capture-clauses-unboxed-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n fn each<'a,T,F:FnMut(&'a T)>(x: &'a [T], mut f: F) {\n     for val in x.iter() {"}, {"sha": "5a793f7065a41fa6a0c93ac5c7e792a79fc1f1bb", "filename": "src/test/run-pass/hrtb-binder-levels-in-object-types.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-binder-levels-in-object-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-binder-levels-in-object-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-binder-levels-in-object-types.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we handle binder levels in object types correctly.\n+// Initially, the reference to `'tcx` in the object type\n+// `&Typer<'tcx>` was getting an incorrect binder level, yielding\n+// weird compilation ICEs and so forth.\n+\n+trait Typer<'tcx> {\n+    fn method(&self, data: &'tcx int) -> &'tcx int { data }\n+}\n+\n+struct Tcx<'tcx> {\n+    fields: &'tcx int\n+}\n+\n+impl<'tcx> Typer<'tcx> for Tcx<'tcx> {\n+}\n+\n+fn g<'tcx>(typer: &Typer<'tcx>) {\n+}\n+\n+fn check_static_type<'x>(tcx: &Tcx<'x>) {\n+    g(tcx)\n+}\n+\n+fn main() { }"}, {"sha": "5bdfa3cafd747973cb915cdb8c108d79d93ae2d0", "filename": "src/test/run-pass/hrtb-debruijn-object-types-in-closures.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-debruijn-object-types-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-debruijn-object-types-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-debruijn-object-types-in-closures.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Typer<'tcx> {\n+    fn method(&self, data: &'tcx int) -> &'tcx int { data }\n+    fn dummy(&self) { }\n+}\n+\n+fn g(_: |&Typer|) {\n+}\n+\n+fn h() {\n+    g(|typer| typer.dummy())\n+}\n+\n+fn main() { }"}, {"sha": "c8992afe36ac71870b2d345fb6f7a3b054d8f64e", "filename": "src/test/run-pass/hrtb-fn-like-trait-object.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-fn-like-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-fn-like-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-fn-like-trait-object.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A basic test of using a higher-ranked trait bound.\n+\n+trait FnLike<A,R> {\n+    fn call(&self, arg: A) -> R;\n+}\n+\n+type FnObject<'b> = for<'a> FnLike<&'a int, &'a int> + 'b;\n+\n+struct Identity;\n+\n+impl<'a, T> FnLike<&'a T, &'a T> for Identity {\n+    fn call(&self, arg: &'a T) -> &'a T {\n+        arg\n+    }\n+}\n+\n+fn call_repeatedly(f: &FnObject) {\n+    let x = 3;\n+    let y = f.call(&x);\n+    assert_eq!(3, *y);\n+}\n+\n+fn main() {\n+    call_repeatedly(&Identity);\n+}"}, {"sha": "4067b922cfd6b18ef149758adb2e1851e7d3913f", "filename": "src/test/run-pass/hrtb-fn-like-trait.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-fn-like-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-fn-like-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-fn-like-trait.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A basic test of using a higher-ranked trait bound.\n+\n+trait FnLike<A,R> {\n+    fn call(&self, arg: A) -> R;\n+}\n+\n+struct Identity;\n+\n+impl<'a, T> FnLike<&'a T, &'a T> for Identity {\n+    fn call(&self, arg: &'a T) -> &'a T {\n+        arg\n+    }\n+}\n+\n+fn call_repeatedly<F>(f: F)\n+    where F : for<'a> FnLike<&'a int, &'a int>\n+{\n+    let x = 3;\n+    let y = f.call(&x);\n+    assert_eq!(3, *y);\n+}\n+\n+fn main() {\n+    call_repeatedly(Identity);\n+}"}, {"sha": "9b37b8e49ef3c5c247639548a813c6f95ddd4af5", "filename": "src/test/run-pass/hrtb-resolve-lifetime.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-resolve-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-resolve-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-resolve-lifetime.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A basic test of using a higher-ranked trait bound.\n+\n+trait FnLike<A,R> {\n+    fn call(&self, arg: A) -> R;\n+}\n+\n+type FnObject<'b> = for<'a> FnLike<&'a int, &'a int> + 'b;\n+\n+fn main() {\n+}"}, {"sha": "e17e0ae2189d3aa760a4d740e53a968d7bf898c3", "filename": "src/test/run-pass/hrtb-trait-object-paren-notation.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures)]\n+\n+// A basic test of using a higher-ranked trait bound.\n+\n+trait FnLike<A,R> {\n+    fn call(&self, arg: A) -> R;\n+}\n+\n+type FnObject<'b> = for<'a> FnLike(&'a int) -> (&'a int) + 'b;\n+\n+struct Identity;\n+\n+impl<'a, T> FnLike<(&'a T,), &'a T> for Identity {\n+    fn call(&self, (arg,): (&'a T,)) -> &'a T {\n+        arg\n+    }\n+}\n+\n+fn call_repeatedly(f: &FnObject) {\n+    let x = 3;\n+    let y = f.call((&x,));\n+    assert_eq!(3, *y);\n+}\n+\n+fn main() {\n+    call_repeatedly(&Identity);\n+}"}, {"sha": "076b9c7684ec4010b0de0cad705edece265b19f7", "filename": "src/test/run-pass/hrtb-trait-object-passed-to-closure.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-passed-to-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-passed-to-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-passed-to-closure.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `&PrinterSupport`, which is really short for `&'a\n+// PrinterSupport<'b>`, gets properly expanded when it appears in a\n+// closure type. This used to result in messed up De Bruijn indices.\n+\n+trait PrinterSupport<'ast> {\n+    fn ast_map(&self) -> Option<&'ast uint> { None }\n+}\n+\n+struct NoAnn<'ast> {\n+    f: Option<&'ast uint>\n+}\n+\n+impl<'ast> PrinterSupport<'ast> for NoAnn<'ast> {\n+}\n+\n+fn foo<'ast> (f: Option<&'ast uint>, g: |&PrinterSupport|) {\n+    let annotation = NoAnn { f: f };\n+    g(&annotation)\n+}\n+\n+fn main() {}"}, {"sha": "fea628177da41c4933caf9650e3e847dd9f755f5", "filename": "src/test/run-pass/hrtb-unboxed-closure-trait.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-unboxed-closure-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fhrtb-unboxed-closure-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-unboxed-closure-trait.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test HRTB used with the `Fn` trait.\n+\n+#![feature(unboxed_closures)]\n+\n+fn foo<F:Fn(&int)>(f: F) {\n+    let x = 22;\n+    f(&x);\n+}\n+\n+fn main() {\n+    foo(|&: x: &int| println!(\"{}\", *x));\n+}"}, {"sha": "7f3321e0b3eed8143146f5984fdacda707365275", "filename": "src/test/run-pass/issue-14958.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14958.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n trait Foo {}\n "}, {"sha": "6cc5ab4d6cbaa49f4968debd0c4c067ca72620cb", "filename": "src/test/run-pass/issue-14959.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14959.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n use std::ops::Fn;\n "}, {"sha": "ebc879d82fbb1f197a074c512e5ba3819ed1ed99", "filename": "src/test/run-pass/issue-16774.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16774.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n struct X(Box<int>);\n "}, {"sha": "ef2c15c748ca36a317efa02f7993daf4215a9d20", "filename": "src/test/run-pass/issue-18652.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-18652.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-18652.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18652.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -12,7 +12,7 @@\n // once closure as an optimization by trans.  This used to hit an\n // incorrect assert.\n \n-#![feature(unboxed_closures, overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n fn main() {\n     let x = 2u8;"}, {"sha": "6a2f73a787a4835c1d54df7682cf467965d6a69e", "filename": "src/test/run-pass/issue-18661.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-18661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-18661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18661.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -11,7 +11,7 @@\n // Test that param substitutions from the correct environment are\n // used when translating unboxed closure calls.\n \n-#![feature(unboxed_closures, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n pub fn inside<F: Fn()>(c: F) {\n     c.call(());"}, {"sha": "be6dd583132ecf742f94741a236a5dd8505d3e4e", "filename": "src/test/run-pass/issue-18685.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-18685.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-18685.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18685.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -11,7 +11,7 @@\n // Test that the self param space is not used in a conflicting\n // manner by unboxed closures within a default method on a trait\n \n-#![feature(unboxed_closures, overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n trait Tr {\n     fn foo(&self);"}, {"sha": "6a04e68af0cb3c028abcd5119523dba397f7599e", "filename": "src/test/run-pass/issue-18711.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-18711.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Fissue-18711.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18711.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -11,7 +11,7 @@\n // Test that we don't panic on a RefCell borrow conflict in certain\n // code paths involving unboxed closures.\n \n-#![feature(unboxed_closures, overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n // aux-build:issue-18711.rs\n extern crate \"issue-18711\" as issue;"}, {"sha": "d0dbee39ae095cece48af0590070b040fbb15e91", "filename": "src/test/run-pass/overloaded-calls-param-vtables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -10,7 +10,7 @@\n \n // Tests that nested vtables work with overloaded calls.\n \n-#![feature(overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n use std::ops::Fn;\n "}, {"sha": "b0a40f74ff973dff2466d35148406636cb71ec63", "filename": "src/test/run-pass/overloaded-calls-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, overloaded_calls)]\n+#![feature(lang_items, unboxed_closures)]\n \n use std::ops::{Fn, FnMut, FnOnce};\n "}, {"sha": "809a251fe8059b547af96225cb7c84c4955dcaf4", "filename": "src/test/run-pass/overloaded-calls-zero-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n use std::ops::{FnMut};\n "}, {"sha": "635e1670aada1bd2be866634b7e3a41df878659d", "filename": "src/test/run-pass/unboxed-closures-all-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, overloaded_calls, unboxed_closures, unboxed_closures)]\n+#![feature(lang_items, unboxed_closures)]\n \n fn a<F:Fn(int, int) -> int>(f: F) -> int {\n     f(1, 2)"}, {"sha": "be955486dac33d75ce2a8f2939c844d2adc095c7", "filename": "src/test/run-pass/unboxed-closures-by-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n // Test by-ref capture of environment in unboxed closure types\n "}, {"sha": "2854d64f6637b8dec6e8fd78b70637b7ea6efb06", "filename": "src/test/run-pass/unboxed-closures-direct-sugary-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures, overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n fn main() {\n     let mut unboxed = |&mut:| {};"}, {"sha": "8d4d7b4ecb5033ad8873d1b51e93163b3e1cf209", "filename": "src/test/run-pass/unboxed-closures-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -11,7 +11,7 @@\n // A battery of tests to ensure destructors of unboxed closure environments\n // run at the right times.\n \n-#![feature(overloaded_calls, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n static mut DROP_COUNT: uint = 0;\n "}, {"sha": "2628bd90eef0e1756ea2f26ac7aa7e81f2a66be1", "filename": "src/test/run-pass/unboxed-closures-extern-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -11,7 +11,7 @@\n // Checks that extern fn points implement the full range of Fn traits.\n \n #![feature(unboxed_closures)]\n-#![feature(overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n use std::ops::{Fn,FnMut,FnOnce};\n "}, {"sha": "77d41ae190778a738cf39661311eeb7b5fede41e", "filename": "src/test/run-pass/unboxed-closures-fn-as-fnmut-and-fnonce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -12,7 +12,7 @@\n // any Fn trait to be used where Fn is implemented.\n \n #![feature(unboxed_closures)]\n-#![feature(overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n use std::ops::{Fn,FnMut,FnOnce};\n "}, {"sha": "02395624cd123b2c310115c9920286b5048d5bac", "filename": "src/test/run-pass/unboxed-closures-fnmut-as-fnonce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -12,7 +12,7 @@\n // FnMut or FnOnce to be used where FnMut is implemented.\n \n #![feature(unboxed_closures)]\n-#![feature(overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n use std::ops::{FnMut,FnOnce};\n "}, {"sha": "61ceb5e140e32bcb102adc9f8ad46fba0a2e63ee", "filename": "src/test/run-pass/unboxed-closures-single-word-env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -11,7 +11,7 @@\n // Ensures that single-word environments work right in unboxed closures.\n // These take a different path in codegen.\n \n-#![feature(overloaded_calls, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n fn a<F:Fn(int, int) -> int>(f: F) -> int {\n     f(1, 2)"}, {"sha": "edcb85006ca578259aebe4e94117247db5650f0c", "filename": "src/test/run-pass/unboxed-closures-sugar-1.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7a846b86a85d4cf30a45fc81eba35c02b0451be3/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a846b86a85d4cf30a45fc81eba35c02b0451be3/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-1.rs?ref=7a846b86a85d4cf30a45fc81eba35c02b0451be3", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that the unboxed closure sugar can be used with an arbitrary\n-// struct type and that it is equivalent to the same syntax using\n-// angle brackets. This test covers only simple types and in\n-// particular doesn't test bound regions.\n-\n-#![allow(dead_code)]\n-\n-trait Foo<T,U> {\n-    fn dummy(&self) -> (T,U);\n-}\n-\n-trait Eq<X> { }\n-impl<X> Eq<X> for X { }\n-fn eq<A,B:Eq<A>>() { }\n-\n-fn test<'a,'b>() {\n-    eq::< Foo<(),()>,                   Foo()                         >();\n-    eq::< Foo<(int,),()>,               Foo(int)                      >();\n-    eq::< Foo<(int,uint),()>,           Foo(int,uint)                 >();\n-    eq::< Foo<(int,uint),uint>,         Foo(int,uint) -> uint         >();\n-    eq::< Foo<(&'a int,&'b uint),uint>, Foo(&'a int,&'b uint) -> uint >();\n-}\n-\n-fn main() { }"}, {"sha": "4fdfb8cf02a716774f3bb130d6c2a529d83b1d13", "filename": "src/test/run-pass/unboxed-closures-unique-type-id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba260749bbd30321bcbe755652ef215106719c/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs?ref=56ba260749bbd30321bcbe755652ef215106719c", "patch": "@@ -19,7 +19,7 @@\n //\n // compile-flags: -g\n \n-#![feature(unboxed_closures, overloaded_calls)]\n+#![feature(unboxed_closures)]\n \n use std::ptr;\n "}]}