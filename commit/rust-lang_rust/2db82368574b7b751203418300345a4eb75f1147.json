{"sha": "2db82368574b7b751203418300345a4eb75f1147", "node_id": "C_kwDOAAsO6NoAKDJkYjgyMzY4NTc0YjdiNzUxMjAzNDE4MzAwMzQ1YTRlYjc1ZjExNDc", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-03-10T10:34:42Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-03-10T10:34:42Z"}, "message": "add doc comments", "tree": {"sha": "47cc31689e643c9d1f2ed65f725409c22afc422a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47cc31689e643c9d1f2ed65f725409c22afc422a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2db82368574b7b751203418300345a4eb75f1147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2db82368574b7b751203418300345a4eb75f1147", "html_url": "https://github.com/rust-lang/rust/commit/2db82368574b7b751203418300345a4eb75f1147", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2db82368574b7b751203418300345a4eb75f1147/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ded25204b9b91cf4f14977cae81215a60409558", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ded25204b9b91cf4f14977cae81215a60409558", "html_url": "https://github.com/rust-lang/rust/commit/3ded25204b9b91cf4f14977cae81215a60409558"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "e042df98edf38bafc9c45fd83a35903a4bcc364b", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2db82368574b7b751203418300345a4eb75f1147/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db82368574b7b751203418300345a4eb75f1147/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=2db82368574b7b751203418300345a4eb75f1147", "patch": "@@ -156,6 +156,9 @@ impl AttemptLocalParseRecovery {\n     }\n }\n \n+// SnapshotParser is used to create a snapshot of the parser\n+// without causing duplicate errors being emitted when the `Parser`\n+// is dropped.\n pub(super) struct SnapshotParser<'a> {\n     parser: Parser<'a>,\n     unclosed_delims: Vec<UnmatchedBrace>,\n@@ -200,15 +203,21 @@ impl<'a> Parser<'a> {\n         &self.sess.span_diagnostic\n     }\n \n-    pub(super) fn restore(&mut self, snapshot: SnapshotParser<'a>) {\n+    /// Relace `self` with `snapshot.parser` and extend `unclosed_delims` with `snapshot.unclosed_delims`.\n+    /// This is to avoid losing unclosed delims errors `create_snapshot_for_diagnostic` clears.\n+    pub(super) fn restore_snapshot(&mut self, snapshot: SnapshotParser<'a>) {\n         *self = snapshot.parser;\n         self.unclosed_delims.extend(snapshot.unclosed_delims.clone());\n     }\n \n-    pub(super) fn diagnostic_snapshot(&self) -> SnapshotParser<'a> {\n+    /// Create a snapshot of the `Parser`.\n+    pub(super) fn create_snapshot_for_diagnostic(&self) -> SnapshotParser<'a> {\n         let mut snapshot = self.clone();\n         let unclosed_delims = self.unclosed_delims.clone();\n-        // initialize unclosed_delims to avoid duplicate errors.\n+        // Clear `unclosed_delims` in snapshot to avoid\n+        // duplicate errors being emitted when the `Parser`\n+        // is dropped (which may or may not happen, depending\n+        // if the parsing the snapshot is created for is successful)\n         snapshot.unclosed_delims.clear();\n         SnapshotParser { parser: snapshot, unclosed_delims }\n     }"}, {"sha": "5d41d808336428ca0251eb3e006d3d0effb9db76", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2db82368574b7b751203418300345a4eb75f1147/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db82368574b7b751203418300345a4eb75f1147/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=2db82368574b7b751203418300345a4eb75f1147", "patch": "@@ -625,14 +625,14 @@ impl<'a> Parser<'a> {\n         } else if self.check_type() {\n             // Parse type argument.\n             let is_const_fn = self.look_ahead(1, |t| t.kind == token::OpenDelim(token::Paren));\n-            let mut snapshot = self.diagnostic_snapshot();\n+            let mut snapshot = self.create_snapshot_for_diagnostic();\n             match self.parse_ty() {\n                 Ok(ty) => GenericArg::Type(ty),\n                 Err(err) => {\n                     if is_const_fn {\n                         if let Ok(expr) = (*snapshot).parse_expr_res(Restrictions::CONST_EXPR, None)\n                         {\n-                            self.restore(snapshot);\n+                            self.restore_snapshot(snapshot);\n                             return Ok(Some(self.dummy_const_arg_needs_braces(err, expr.span)));\n                         }\n                     }"}]}