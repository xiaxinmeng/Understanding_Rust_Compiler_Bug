{"sha": "4cd2637e2bf1016c95a401a4d5cc70406fbacf08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZDI2MzdlMmJmMTAxNmM5NWE0MDFhNGQ1Y2M3MDQwNmZiYWNmMDg=", "commit": {"author": {"name": "Naz\u0131m Can Alt\u0131nova", "email": "canaltinova@gmail.com", "date": "2020-08-08T14:34:42Z"}, "committer": {"name": "Naz\u0131m Can Alt\u0131nova", "email": "canaltinova@gmail.com", "date": "2020-08-08T14:35:54Z"}, "message": "Update the tracking issue number of map_into_keys_values", "tree": {"sha": "e48f0d90408a7d0a74957fbf6b8d7133b62ef6bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e48f0d90408a7d0a74957fbf6b8d7133b62ef6bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cd2637e2bf1016c95a401a4d5cc70406fbacf08", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEpYetfNnk4ATM3f2Aci54bwcpZHoFAl8uuEwACgkQci54bwcp\nZHraOhAApaUZZmB2Dwst9laJH8oKob7UQGJNPhPjTfHmY9iBiPMGAGESq36BGTkH\nlXZFs5rMwSi/oeBMppT5x5yvuCWOOrZ7mcFMclrU1P6lGQj4ZkVggaTAii4kuX1r\nNAGHlLV1XDG16nrjba5j9kcc5k1NGoV/h7vXRulFbRLkbf9A3yJJ6nmgyJmiMr2z\nX2snPUBvRX/NIG9B1cRGqoEThDojMXaLJvy9pY+plgBkORZqcUpuksMAOl75pa/q\n6Yb1Amir+67JEM6PzJut31LTgSTI1ZN9m30Km7/pXd2B9Y5o4jRJh6rvHtDIGock\nobXO/ytEjjhNXwtC3ZRLDBiCNna7az0/5c6zGaoC9wXAh838s/t4mHF6FHpq257j\nr3Qgk4wYpbICV8Fy+E/F4yg32RNtLQ2UwK8GH7GxLH/FkiEjo6pLrXrhLjut1gMX\nVtYywKlLRuvZXjost+gzdUngFpYn65KhTZ8pGPW+faoR2NFTJ8A9L6ETz5wBmNBK\np0eRs7eR9XzrS8e+zs0+qboWIaf0ctWM0E+IKA8d8Vgb/niro4cyP1F0RIvSfOFL\nOGYQTNhz3OFBbQmCoKkvHX9Lo4RQY0ESjimdmlPo48IAGY2JaCtY7p/UQEirehgU\nzQxj+9Kd/WK+bFlWJTDyoyxt7dM5pJ6PpMzcLH/r/ueg2KGOl/U=\n=v9CH\n-----END PGP SIGNATURE-----", "payload": "tree e48f0d90408a7d0a74957fbf6b8d7133b62ef6bb\nparent 1cdce3919fe838ad7718b4cc7ca7b62300e8575b\nauthor Naz\u0131m Can Alt\u0131nova <canaltinova@gmail.com> 1596897282 +0200\ncommitter Naz\u0131m Can Alt\u0131nova <canaltinova@gmail.com> 1596897354 +0200\n\nUpdate the tracking issue number of map_into_keys_values\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd2637e2bf1016c95a401a4d5cc70406fbacf08", "html_url": "https://github.com/rust-lang/rust/commit/4cd2637e2bf1016c95a401a4d5cc70406fbacf08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cd2637e2bf1016c95a401a4d5cc70406fbacf08/comments", "author": {"login": "canova", "id": 466239, "node_id": "MDQ6VXNlcjQ2NjIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/466239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canova", "html_url": "https://github.com/canova", "followers_url": "https://api.github.com/users/canova/followers", "following_url": "https://api.github.com/users/canova/following{/other_user}", "gists_url": "https://api.github.com/users/canova/gists{/gist_id}", "starred_url": "https://api.github.com/users/canova/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canova/subscriptions", "organizations_url": "https://api.github.com/users/canova/orgs", "repos_url": "https://api.github.com/users/canova/repos", "events_url": "https://api.github.com/users/canova/events{/privacy}", "received_events_url": "https://api.github.com/users/canova/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canova", "id": 466239, "node_id": "MDQ6VXNlcjQ2NjIzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/466239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canova", "html_url": "https://github.com/canova", "followers_url": "https://api.github.com/users/canova/followers", "following_url": "https://api.github.com/users/canova/following{/other_user}", "gists_url": "https://api.github.com/users/canova/gists{/gist_id}", "starred_url": "https://api.github.com/users/canova/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canova/subscriptions", "organizations_url": "https://api.github.com/users/canova/orgs", "repos_url": "https://api.github.com/users/canova/repos", "events_url": "https://api.github.com/users/canova/events{/privacy}", "received_events_url": "https://api.github.com/users/canova/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cdce3919fe838ad7718b4cc7ca7b62300e8575b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdce3919fe838ad7718b4cc7ca7b62300e8575b", "html_url": "https://github.com/rust-lang/rust/commit/1cdce3919fe838ad7718b4cc7ca7b62300e8575b"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "b8ae1ed318f673888d826b3d69c636ae25f0c1a0", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4cd2637e2bf1016c95a401a4d5cc70406fbacf08/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd2637e2bf1016c95a401a4d5cc70406fbacf08/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=4cd2637e2bf1016c95a401a4d5cc70406fbacf08", "patch": "@@ -363,7 +363,7 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n /// See its documentation for more.\n ///\n /// [`into_keys`]: BTreeMap::into_keys\n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n #[derive(Debug)]\n pub struct IntoKeys<K, V> {\n     inner: IntoIter<K, V>,\n@@ -375,7 +375,7 @@ pub struct IntoKeys<K, V> {\n /// See its documentation for more.\n ///\n /// [`into_values`]: BTreeMap::into_values\n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n #[derive(Debug)]\n pub struct IntoValues<K, V> {\n     inner: IntoIter<K, V>,\n@@ -1336,7 +1336,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// assert_eq!(keys, [1, 2]);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n     }\n@@ -1359,7 +1359,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// assert_eq!(values, [\"hello\", \"goodbye\"]);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n     }\n@@ -1853,7 +1853,7 @@ impl<'a, K, V> Range<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> Iterator for IntoKeys<K, V> {\n     type Item = K;\n \n@@ -1878,24 +1878,24 @@ impl<K, V> Iterator for IntoKeys<K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> DoubleEndedIterator for IntoKeys<K, V> {\n     fn next_back(&mut self) -> Option<K> {\n         self.inner.next_back().map(|(k, _)| k)\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> ExactSizeIterator for IntoKeys<K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> FusedIterator for IntoKeys<K, V> {}\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> Iterator for IntoValues<K, V> {\n     type Item = V;\n \n@@ -1912,21 +1912,21 @@ impl<K, V> Iterator for IntoValues<K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> DoubleEndedIterator for IntoValues<K, V> {\n     fn next_back(&mut self) -> Option<V> {\n         self.inner.next_back().map(|(_, v)| v)\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> ExactSizeIterator for IntoValues<K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> FusedIterator for IntoValues<K, V> {}\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]"}, {"sha": "70f7214e2f1d78d3c5f2e1d3a5c798f43fe5ecf3", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4cd2637e2bf1016c95a401a4d5cc70406fbacf08/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd2637e2bf1016c95a401a4d5cc70406fbacf08/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=4cd2637e2bf1016c95a401a4d5cc70406fbacf08", "patch": "@@ -891,7 +891,7 @@ where\n     /// let vec: Vec<&str> = map.into_keys().collect();\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n     }\n@@ -914,7 +914,7 @@ where\n     /// let vec: Vec<i32> = map.into_values().collect();\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n     }\n@@ -1206,7 +1206,7 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n /// See its documentation for more.\n ///\n /// [`into_keys`]: HashMap::into_keys\n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n pub struct IntoKeys<K, V> {\n     inner: IntoIter<K, V>,\n }\n@@ -1217,7 +1217,7 @@ pub struct IntoKeys<K, V> {\n /// See its documentation for more.\n ///\n /// [`into_values`]: HashMap::into_values\n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n pub struct IntoValues<K, V> {\n     inner: IntoIter<K, V>,\n }\n@@ -1895,7 +1895,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> Iterator for IntoKeys<K, V> {\n     type Item = K;\n \n@@ -1908,24 +1908,24 @@ impl<K, V> Iterator for IntoKeys<K, V> {\n         self.inner.size_hint()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> ExactSizeIterator for IntoKeys<K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> FusedIterator for IntoKeys<K, V> {}\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K: Debug, V: Debug> fmt::Debug for IntoKeys<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(k, _)| k)).finish()\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> Iterator for IntoValues<K, V> {\n     type Item = V;\n \n@@ -1938,17 +1938,17 @@ impl<K, V> Iterator for IntoValues<K, V> {\n         self.inner.size_hint()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> ExactSizeIterator for IntoValues<K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K, V> FusedIterator for IntoValues<K, V> {}\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"55214\")]\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n impl<K: Debug, V: Debug> fmt::Debug for IntoValues<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(_, v)| v)).finish()"}]}