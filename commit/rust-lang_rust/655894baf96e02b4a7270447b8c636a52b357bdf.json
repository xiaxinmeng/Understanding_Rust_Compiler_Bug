{"sha": "655894baf96e02b4a7270447b8c636a52b357bdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NTg5NGJhZjk2ZTAyYjRhNzI3MDQ0N2I4YzYzNmE1MmIzNTdiZGY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-20T14:38:00Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-26T11:17:55Z"}, "message": "Add flag indicating whether AST `borrowck` query signalled any error.", "tree": {"sha": "baa8b811b0d960c6463fe8e10a47cbd01eaac11f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baa8b811b0d960c6463fe8e10a47cbd01eaac11f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/655894baf96e02b4a7270447b8c636a52b357bdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/655894baf96e02b4a7270447b8c636a52b357bdf", "html_url": "https://github.com/rust-lang/rust/commit/655894baf96e02b4a7270447b8c636a52b357bdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/655894baf96e02b4a7270447b8c636a52b357bdf/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fefe81605d6111faa8dbb3635ab2c51d59de740a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fefe81605d6111faa8dbb3635ab2c51d59de740a", "html_url": "https://github.com/rust-lang/rust/commit/fefe81605d6111faa8dbb3635ab2c51d59de740a"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "c8d513a59f00de4776015a98a67b7107aee3060a", "filename": "src/librustc/middle/borrowck.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/655894baf96e02b4a7270447b8c636a52b357bdf/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655894baf96e02b4a7270447b8c636a52b357bdf/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck.rs?ref=655894baf96e02b4a7270447b8c636a52b357bdf", "patch": "@@ -15,9 +15,15 @@ use util::nodemap::FxHashSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n \n+#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub enum SignalledError { SawSomeError, NoErrorsSeen }\n+\n+impl_stable_hash_for!(enum self::SignalledError { SawSomeError, NoErrorsSeen });\n+\n #[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct BorrowCheckResult {\n     pub used_mut_nodes: FxHashSet<HirId>,\n+    pub signalled_any_error: SignalledError,\n }\n \n impl<'a> HashStable<StableHashingContext<'a>> for BorrowCheckResult {\n@@ -26,7 +32,9 @@ impl<'a> HashStable<StableHashingContext<'a>> for BorrowCheckResult {\n                                           hasher: &mut StableHasher<W>) {\n         let BorrowCheckResult {\n             ref used_mut_nodes,\n+            ref signalled_any_error,\n         } = *self;\n         used_mut_nodes.hash_stable(hcx, hasher);\n+        signalled_any_error.hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "49bd69f8262169ad18bb2a85daa9cb487bbdf9ca", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/655894baf96e02b4a7270447b8c636a52b357bdf/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655894baf96e02b4a7270447b8c636a52b357bdf/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=655894baf96e02b4a7270447b8c636a52b357bdf", "patch": "@@ -447,10 +447,12 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                                       .region_scope_tree\n                                       .yield_in_scope_for_expr(scope,\n                                                                cmt.hir_id,\n-                                                               self.bccx.body) {\n+                                                               self.bccx.body)\n+        {\n             self.bccx.cannot_borrow_across_generator_yield(borrow_span,\n                                                            yield_span,\n                                                            Origin::Ast).emit();\n+            self.bccx.signal_error();\n         }\n     }\n \n@@ -507,9 +509,13 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             new_loan, old_loan, old_loan, new_loan).err();\n \n         match (err_old_new, err_new_old) {\n-            (Some(mut err), None) | (None, Some(mut err)) => err.emit(),\n+            (Some(mut err), None) | (None, Some(mut err)) => {\n+                err.emit();\n+                self.bccx.signal_error();\n+            }\n             (Some(mut err_old), Some(mut err_new)) => {\n                 err_old.emit();\n+                self.bccx.signal_error();\n                 err_new.cancel();\n             }\n             (None, None) => return true,\n@@ -695,6 +701,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                         loan_span, &self.bccx.loan_path_to_string(&loan_path),\n                         Origin::Ast)\n                     .emit();\n+                self.bccx.signal_error();\n             }\n         }\n     }\n@@ -745,6 +752,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 };\n \n                 err.emit();\n+                self.bccx.signal_error();\n             }\n         }\n     }\n@@ -914,5 +922,6 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         self.bccx.cannot_assign_to_borrowed(\n             span, loan.span, &self.bccx.loan_path_to_string(loan_path), Origin::Ast)\n             .emit();\n+        self.bccx.signal_error();\n     }\n }"}, {"sha": "e51caf89ee651b39e7ddc46feb10adc51809ca8f", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/655894baf96e02b4a7270447b8c636a52b357bdf/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655894baf96e02b4a7270447b8c636a52b357bdf/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=655894baf96e02b4a7270447b8c636a52b357bdf", "patch": "@@ -99,6 +99,7 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &Vec<Move\n                            \"captured outer variable\");\n         }\n         err.emit();\n+        bccx.signal_error();\n     }\n }\n "}, {"sha": "86a7f30147024956ac1752e3068349a44b342327", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/655894baf96e02b4a7270447b8c636a52b357bdf/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655894baf96e02b4a7270447b8c636a52b357bdf/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=655894baf96e02b4a7270447b8c636a52b357bdf", "patch": "@@ -28,7 +28,7 @@ use rustc::middle::dataflow::DataFlowContext;\n use rustc::middle::dataflow::BitwiseOperator;\n use rustc::middle::dataflow::DataFlowOperator;\n use rustc::middle::dataflow::KillFrom;\n-use rustc::middle::borrowck::BorrowCheckResult;\n+use rustc::middle::borrowck::{BorrowCheckResult, SignalledError};\n use rustc::hir::def_id::{DefId, LocalDefId};\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n@@ -42,7 +42,7 @@ use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n use rustc_mir::util::suggest_ref_mut;\n use rustc::util::nodemap::FxHashSet;\n \n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::fmt;\n use std::rc::Rc;\n use rustc_data_structures::sync::Lrc;\n@@ -105,6 +105,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n             // and do not need borrowchecking.\n             return Lrc::new(BorrowCheckResult {\n                 used_mut_nodes: FxHashSet(),\n+                signalled_any_error: SignalledError::NoErrorsSeen,\n             })\n         }\n         _ => { }\n@@ -121,6 +122,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n         owner_def_id,\n         body,\n         used_mut_nodes: RefCell::new(FxHashSet()),\n+        signalled_any_error: Cell::new(SignalledError::NoErrorsSeen),\n     };\n \n     // Eventually, borrowck will always read the MIR, but at the\n@@ -154,6 +156,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n \n     Lrc::new(BorrowCheckResult {\n         used_mut_nodes: bccx.used_mut_nodes.into_inner(),\n+        signalled_any_error: bccx.signalled_any_error.into_inner(),\n     })\n }\n \n@@ -234,6 +237,7 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n         owner_def_id,\n         body,\n         used_mut_nodes: RefCell::new(FxHashSet()),\n+        signalled_any_error: Cell::new(SignalledError::NoErrorsSeen),\n     };\n \n     let dataflow_data = build_borrowck_dataflow_data(&mut bccx, true, body_id, |_| cfg);\n@@ -257,6 +261,15 @@ pub struct BorrowckCtxt<'a, 'tcx: 'a> {\n     body: &'tcx hir::Body,\n \n     used_mut_nodes: RefCell<FxHashSet<HirId>>,\n+\n+    signalled_any_error: Cell<SignalledError>,\n+}\n+\n+\n+impl<'a, 'tcx: 'a> BorrowckCtxt<'a, 'tcx> {\n+    fn signal_error(&self) {\n+        self.signalled_any_error.set(SignalledError::SawSomeError);\n+    }\n }\n \n impl<'a, 'b, 'tcx: 'b> BorrowckErrors<'a> for &'a BorrowckCtxt<'b, 'tcx> {\n@@ -645,6 +658,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     .span_label(use_span, format!(\"use of possibly uninitialized `{}`\",\n                                                   self.loan_path_to_string(lp)))\n                     .emit();\n+                self.signal_error();\n                 return;\n             }\n             _ => {\n@@ -760,6 +774,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         // not considered particularly helpful.\n \n         err.emit();\n+        self.signal_error();\n     }\n \n     pub fn report_partial_reinitialization_of_uninitialized_structure(\n@@ -770,6 +785,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                       &self.loan_path_to_string(lp),\n                                                       Origin::Ast)\n             .emit();\n+        self.signal_error();\n     }\n \n     pub fn report_reassigned_immutable_variable(&self,\n@@ -787,6 +803,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                 self.loan_path_to_string(lp)));\n         }\n         err.emit();\n+        self.signal_error();\n     }\n \n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(&self,\n@@ -908,6 +925,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     self.tcx.hir.hir_to_node_id(err.cmt.hir_id)\n                 );\n                 db.emit();\n+                self.signal_error();\n             }\n             err_out_of_scope(super_scope, sub_scope, cause) => {\n                 let msg = match opt_loan_path(&err.cmt) {\n@@ -1022,6 +1040,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 }\n \n                 db.emit();\n+                self.signal_error();\n             }\n             err_borrowed_pointer_too_short(loan_scope, ptr_scope) => {\n                 let descr = self.cmt_to_path_or_string(err.cmt);\n@@ -1047,6 +1066,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     \"\");\n \n                 db.emit();\n+                self.signal_error();\n             }\n         }\n     }\n@@ -1125,6 +1145,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             err.help(\"closures behind references must be called via `&mut`\");\n         }\n         err.emit();\n+        self.signal_error();\n     }\n \n     /// Given a type, if it is an immutable reference, return a suggestion to make it mutable\n@@ -1307,6 +1328,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                        cmt_path_or_string),\n                              suggestion)\n             .emit();\n+        self.signal_error();\n     }\n \n     fn region_end_span(&self, region: ty::Region<'tcx>) -> Option<Span> {"}]}