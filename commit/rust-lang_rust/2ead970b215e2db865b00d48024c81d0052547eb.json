{"sha": "2ead970b215e2db865b00d48024c81d0052547eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYWQ5NzBiMjE1ZTJkYjg2NWIwMGQ0ODAyNGM4MWQwMDUyNTQ3ZWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T00:05:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:22Z"}, "message": "librustc: De-`@mut` `trait_defs`", "tree": {"sha": "4014bcb9e259164a79326719d111412ac13564b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4014bcb9e259164a79326719d111412ac13564b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ead970b215e2db865b00d48024c81d0052547eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ead970b215e2db865b00d48024c81d0052547eb", "html_url": "https://github.com/rust-lang/rust/commit/2ead970b215e2db865b00d48024c81d0052547eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ead970b215e2db865b00d48024c81d0052547eb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f444dca5b8d32b8fd64256ec7ffc55b480d84ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f444dca5b8d32b8fd64256ec7ffc55b480d84ea", "html_url": "https://github.com/rust-lang/rust/commit/3f444dca5b8d32b8fd64256ec7ffc55b480d84ea"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "5886eedc48bbc4ea6d453077d2fb1d7873bea607", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ead970b215e2db865b00d48024c81d0052547eb/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ead970b215e2db865b00d48024c81d0052547eb/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=2ead970b215e2db865b00d48024c81d0052547eb", "patch": "@@ -119,8 +119,13 @@ fn check_impl_of_trait(cx: &mut Context, it: @item, trait_ref: &trait_ref, self_\n     let ast_trait_def = cx.tcx.def_map.find(&trait_ref.ref_id)\n                             .expect(\"trait ref not in def map!\");\n     let trait_def_id = ast_util::def_id_of_def(*ast_trait_def);\n-    let trait_def = cx.tcx.trait_defs.find(&trait_def_id)\n-                        .expect(\"trait def not in trait-defs map!\");\n+    let trait_def;\n+    {\n+        let trait_defs = cx.tcx.trait_defs.borrow();\n+        trait_def = *trait_defs.get()\n+                               .find(&trait_def_id)\n+                               .expect(\"trait def not in trait-defs map!\");\n+    }\n \n     // If this trait has builtin-kind supertraits, meet them.\n     let self_ty: ty::t = ty::node_id_to_type(cx.tcx, it.id);"}, {"sha": "5633be1d83c71cb0fae4ac28d0ed5293f3230048", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ead970b215e2db865b00d48024c81d0052547eb/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ead970b215e2db865b00d48024c81d0052547eb/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2ead970b215e2db865b00d48024c81d0052547eb", "patch": "@@ -298,7 +298,7 @@ struct ctxt_ {\n     impl_trait_cache: RefCell<HashMap<ast::DefId, Option<@ty::TraitRef>>>,\n \n     trait_refs: RefCell<HashMap<NodeId, @TraitRef>>,\n-    trait_defs: @mut HashMap<DefId, @TraitDef>,\n+    trait_defs: RefCell<HashMap<DefId, @TraitDef>>,\n \n     /// Despite its name, `items` does not only map NodeId to an item but\n     /// also to expr/stmt/local/arg/etc\n@@ -987,7 +987,7 @@ pub fn mk_ctxt(s: session::Session,\n         node_types: @mut HashMap::new(),\n         node_type_substs: RefCell::new(HashMap::new()),\n         trait_refs: RefCell::new(HashMap::new()),\n-        trait_defs: @mut HashMap::new(),\n+        trait_defs: RefCell::new(HashMap::new()),\n         items: amap,\n         intrinsic_defs: @mut HashMap::new(),\n         freevars: freevars,\n@@ -3963,7 +3963,8 @@ pub fn lookup_impl_vtables(cx: ctxt,\n \n /// Given the did of a trait, returns its canonical trait ref.\n pub fn lookup_trait_def(cx: ctxt, did: ast::DefId) -> @ty::TraitDef {\n-    match cx.trait_defs.find(&did) {\n+    let mut trait_defs = cx.trait_defs.borrow_mut();\n+    match trait_defs.get().find(&did) {\n         Some(&trait_def) => {\n             // The item is in this crate. The caller should have added it to the\n             // type cache already\n@@ -3972,7 +3973,7 @@ pub fn lookup_trait_def(cx: ctxt, did: ast::DefId) -> @ty::TraitDef {\n         None => {\n             assert!(did.crate != ast::LOCAL_CRATE);\n             let trait_def = @csearch::get_trait_def(cx, did);\n-            cx.trait_defs.insert(did, trait_def);\n+            trait_defs.get().insert(did, trait_def);\n             return trait_def;\n         }\n     }"}, {"sha": "8e37745e621693a06bb84be84d7f463534e30d97", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2ead970b215e2db865b00d48024c81d0052547eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ead970b215e2db865b00d48024c81d0052547eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=2ead970b215e2db865b00d48024c81d0052547eb", "patch": "@@ -740,10 +740,14 @@ fn get_trait_def(ccx: &CrateCtxt, trait_id: ast::DefId) -> @ty::TraitDef {\n pub fn trait_def_of_item(ccx: &CrateCtxt, it: &ast::item) -> @ty::TraitDef {\n     let def_id = local_def(it.id);\n     let tcx = ccx.tcx;\n-    match tcx.trait_defs.find(&def_id) {\n-      Some(&def) => return def,\n-      _ => {}\n+    {\n+        let trait_defs = tcx.trait_defs.borrow();\n+        match trait_defs.get().find(&def_id) {\n+          Some(&def) => return def,\n+          _ => {}\n+        }\n     }\n+\n     match it.node {\n         ast::item_trait(ref generics, ref supertraits, _) => {\n             let self_ty = ty::mk_self(tcx, def_id);\n@@ -755,7 +759,8 @@ pub fn trait_def_of_item(ccx: &CrateCtxt, it: &ast::item) -> @ty::TraitDef {\n             let trait_def = @ty::TraitDef {generics: ty_generics,\n                                            bounds: bounds,\n                                            trait_ref: trait_ref};\n-            tcx.trait_defs.insert(def_id, trait_def);\n+            let mut trait_defs = tcx.trait_defs.borrow_mut();\n+            trait_defs.get().insert(def_id, trait_def);\n             return trait_def;\n         }\n         ref s => {"}]}