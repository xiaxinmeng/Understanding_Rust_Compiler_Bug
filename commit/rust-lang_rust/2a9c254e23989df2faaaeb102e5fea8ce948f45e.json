{"sha": "2a9c254e23989df2faaaeb102e5fea8ce948f45e", "node_id": "C_kwDOAAsO6NoAKDJhOWMyNTRlMjM5ODlkZjJmYWFhZWIxMDJlNWZlYThjZTk0OGY0NWU", "commit": {"author": {"name": "Michael Schubart", "email": "michael@schubart.net", "date": "2023-02-16T18:12:11Z"}, "committer": {"name": "Michael Schubart", "email": "michael@schubart.net", "date": "2023-02-27T07:14:55Z"}, "message": "Add `collection_is_never_read`", "tree": {"sha": "7bd3420513977f2feace12aa795d4847e2397c2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bd3420513977f2feace12aa795d4847e2397c2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a9c254e23989df2faaaeb102e5fea8ce948f45e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9c254e23989df2faaaeb102e5fea8ce948f45e", "html_url": "https://github.com/rust-lang/rust/commit/2a9c254e23989df2faaaeb102e5fea8ce948f45e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a9c254e23989df2faaaeb102e5fea8ce948f45e/comments", "author": {"login": "schubart", "id": 75188, "node_id": "MDQ6VXNlcjc1MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/75188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schubart", "html_url": "https://github.com/schubart", "followers_url": "https://api.github.com/users/schubart/followers", "following_url": "https://api.github.com/users/schubart/following{/other_user}", "gists_url": "https://api.github.com/users/schubart/gists{/gist_id}", "starred_url": "https://api.github.com/users/schubart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schubart/subscriptions", "organizations_url": "https://api.github.com/users/schubart/orgs", "repos_url": "https://api.github.com/users/schubart/repos", "events_url": "https://api.github.com/users/schubart/events{/privacy}", "received_events_url": "https://api.github.com/users/schubart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "schubart", "id": 75188, "node_id": "MDQ6VXNlcjc1MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/75188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schubart", "html_url": "https://github.com/schubart", "followers_url": "https://api.github.com/users/schubart/followers", "following_url": "https://api.github.com/users/schubart/following{/other_user}", "gists_url": "https://api.github.com/users/schubart/gists{/gist_id}", "starred_url": "https://api.github.com/users/schubart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schubart/subscriptions", "organizations_url": "https://api.github.com/users/schubart/orgs", "repos_url": "https://api.github.com/users/schubart/repos", "events_url": "https://api.github.com/users/schubart/events{/privacy}", "received_events_url": "https://api.github.com/users/schubart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba7fd68e87cd13ece77baa83684396c8b9cbc633", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7fd68e87cd13ece77baa83684396c8b9cbc633", "html_url": "https://github.com/rust-lang/rust/commit/ba7fd68e87cd13ece77baa83684396c8b9cbc633"}], "stats": {"total": 283, "additions": 283, "deletions": 0}, "files": [{"sha": "f31e9825a17a48c3d85c5f201b1b58a3d12ba04a", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a9c254e23989df2faaaeb102e5fea8ce948f45e/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/2a9c254e23989df2faaaeb102e5fea8ce948f45e/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=2a9c254e23989df2faaaeb102e5fea8ce948f45e", "patch": "@@ -4307,6 +4307,7 @@ Released 2018-09-13\n [`collapsible_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n [`collapsible_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\n [`collapsible_str_replace`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_str_replace\n+[`collection_is_never_read`]: https://rust-lang.github.io/rust-clippy/master/index.html#collection_is_never_read\n [`comparison_chain`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n [`comparison_to_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_to_empty\n [`const_static_lifetime`]: https://rust-lang.github.io/rust-clippy/master/index.html#const_static_lifetime"}, {"sha": "fbc66a2155f4bd4a4b8075e8f871bd81e32d26cb", "filename": "clippy_lints/src/collection_is_never_read.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/2a9c254e23989df2faaaeb102e5fea8ce948f45e/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9c254e23989df2faaaeb102e5fea8ce948f45e/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs?ref=2a9c254e23989df2faaaeb102e5fea8ce948f45e", "patch": "@@ -0,0 +1,123 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::get_enclosing_block;\n+use clippy_utils::get_parent_node;\n+use clippy_utils::path_to_local_id;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::visitors::for_each_expr_with_closures;\n+use core::ops::ControlFlow;\n+use rustc_hir::Block;\n+use rustc_hir::ExprKind;\n+use rustc_hir::HirId;\n+use rustc_hir::Local;\n+use rustc_hir::Node;\n+use rustc_hir::PatKind;\n+use rustc_lint::LateContext;\n+use rustc_lint::LateLintPass;\n+use rustc_session::declare_lint_pass;\n+use rustc_session::declare_tool_lint;\n+use rustc_span::symbol::sym;\n+use rustc_span::Symbol;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for collections that are never queried.\n+    ///\n+    /// ### Why is this bad?\n+    /// Putting effort into constructing a collection but then never querying it might indicate that\n+    /// the author forgot to do whatever they intended to do with the collection. Example: Clone\n+    /// a vector, sort it for iteration, but then mistakenly iterate the original vector\n+    /// instead.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let mut sorted_samples = samples.clone();\n+    /// sorted_samples.sort();\n+    /// for sample in &samples { // Oops, meant to use `sorted_samples`.\n+    ///     println!(\"{sample}\");\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let mut sorted_samples = samples.clone();\n+    /// sorted_samples.sort();\n+    /// for sample in &sorted_samples {\n+    ///     println!(\"{sample}\");\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub COLLECTION_IS_NEVER_READ,\n+    nursery,\n+    \"a collection is never queried\"\n+}\n+declare_lint_pass!(CollectionIsNeverRead => [COLLECTION_IS_NEVER_READ]);\n+\n+static COLLECTIONS: [Symbol; 10] = [\n+    sym::BTreeMap,\n+    sym::BTreeSet,\n+    sym::BinaryHeap,\n+    sym::HashMap,\n+    sym::HashSet,\n+    sym::LinkedList,\n+    sym::Option,\n+    sym::String,\n+    sym::Vec,\n+    sym::VecDeque,\n+];\n+\n+impl<'tcx> LateLintPass<'tcx> for CollectionIsNeverRead {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n+        // Look for local variables whose type is a container. Search surrounding bock for read access.\n+        let ty = cx.typeck_results().pat_ty(local.pat);\n+        if COLLECTIONS.iter().any(|&sym| is_type_diagnostic_item(cx, ty, sym))\n+            && let PatKind::Binding(_, local_id, _, _) = local.pat.kind\n+            && let Some(enclosing_block) = get_enclosing_block(cx, local.hir_id)\n+            && has_no_read_access(cx, local_id, enclosing_block)\n+        {\n+            span_lint(cx, COLLECTION_IS_NEVER_READ, local.span, \"collection is never read\");\n+        }\n+    }\n+}\n+\n+fn has_no_read_access<'tcx>(cx: &LateContext<'tcx>, id: HirId, block: &'tcx Block<'tcx>) -> bool {\n+    let mut has_access = false;\n+    let mut has_read_access = false;\n+\n+    // Inspect all expressions and sub-expressions in the block.\n+    for_each_expr_with_closures(cx, block, |expr| {\n+        // Ignore expressions that are not simply `id`.\n+        if !path_to_local_id(expr, id) {\n+            return ControlFlow::Continue(());\n+        }\n+\n+        // `id` is being accessed. Investigate if it's a read access.\n+        has_access = true;\n+\n+        // `id` appearing in the left-hand side of an assignment is not a read access:\n+        //\n+        // id = ...; // Not reading `id`.\n+        if let Some(Node::Expr(parent)) = get_parent_node(cx.tcx, expr.hir_id)\n+            && let ExprKind::Assign(lhs, ..) = parent.kind\n+            && path_to_local_id(lhs, id)\n+        {\n+            return ControlFlow::Continue(());\n+        }\n+\n+        // Method call on `id` in a statement ignores any return value, so it's not a read access:\n+        //\n+        // id.foo(...); // Not reading `id`.\n+        if let Some(Node::Expr(parent)) = get_parent_node(cx.tcx, expr.hir_id)\n+            && let ExprKind::MethodCall(_, receiver, _, _) = parent.kind\n+            && path_to_local_id(receiver, id)\n+            && let Some(Node::Stmt(..)) = get_parent_node(cx.tcx, parent.hir_id)\n+        {\n+            return ControlFlow::Continue(());\n+        }\n+\n+        // Any other access to `id` is a read access. Stop searching.\n+        has_read_access = true;\n+        ControlFlow::Break(())\n+    });\n+\n+    // Ignore collections that have no access at all. Other lints should catch them.\n+    has_access && !has_read_access\n+}"}, {"sha": "470a2e79e4796ec113af0c1d5b04042264809ff6", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a9c254e23989df2faaaeb102e5fea8ce948f45e/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9c254e23989df2faaaeb102e5fea8ce948f45e/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=2a9c254e23989df2faaaeb102e5fea8ce948f45e", "patch": "@@ -92,6 +92,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::cognitive_complexity::COGNITIVE_COMPLEXITY_INFO,\n     crate::collapsible_if::COLLAPSIBLE_ELSE_IF_INFO,\n     crate::collapsible_if::COLLAPSIBLE_IF_INFO,\n+    crate::collection_is_never_read::COLLECTION_IS_NEVER_READ_INFO,\n     crate::comparison_chain::COMPARISON_CHAIN_INFO,\n     crate::copies::BRANCHES_SHARING_CODE_INFO,\n     crate::copies::IFS_SAME_COND_INFO,"}, {"sha": "c6ad7940b81a1592310a4fab821a3008df9642d8", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9c254e23989df2faaaeb102e5fea8ce948f45e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9c254e23989df2faaaeb102e5fea8ce948f45e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2a9c254e23989df2faaaeb102e5fea8ce948f45e", "patch": "@@ -87,6 +87,7 @@ mod casts;\n mod checked_conversions;\n mod cognitive_complexity;\n mod collapsible_if;\n+mod collection_is_never_read;\n mod comparison_chain;\n mod copies;\n mod copy_iterator;\n@@ -924,6 +925,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     store.register_late_pass(|_| Box::new(no_mangle_with_rust_abi::NoMangleWithRustAbi));\n+    store.register_late_pass(|_| Box::new(collection_is_never_read::CollectionIsNeverRead));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "2c37fc212b0337ee7bf55ecd1baaa4894f0ccfde", "filename": "tests/ui/collection_is_never_read.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/2a9c254e23989df2faaaeb102e5fea8ce948f45e/tests%2Fui%2Fcollection_is_never_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9c254e23989df2faaaeb102e5fea8ce948f45e/tests%2Fui%2Fcollection_is_never_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollection_is_never_read.rs?ref=2a9c254e23989df2faaaeb102e5fea8ce948f45e", "patch": "@@ -0,0 +1,116 @@\n+#![allow(unused)]\n+#![warn(clippy::collection_is_never_read)]\n+\n+use std::collections::HashMap;\n+\n+fn main() {}\n+\n+fn not_a_collection() {\n+    // TODO: Expand `collection_is_never_read` beyond collections?\n+    let mut x = 10; // Ok\n+    x += 1;\n+}\n+\n+fn no_access_at_all() {\n+    // Other lints should catch this.\n+    let x = vec![1, 2, 3]; // Ok\n+}\n+\n+fn write_without_read() {\n+    // The main use case for `collection_is_never_read`.\n+    let mut x = HashMap::new(); // WARNING\n+    x.insert(1, 2);\n+}\n+\n+fn read_without_write() {\n+    let mut x = vec![1, 2, 3]; // Ok\n+    let _ = x.len();\n+}\n+\n+fn write_and_read() {\n+    let mut x = vec![1, 2, 3]; // Ok\n+    x.push(4);\n+    let _ = x.len();\n+}\n+\n+fn write_after_read() {\n+    // TODO: Warn here, but this requires more extensive data flow analysis.\n+    let mut x = vec![1, 2, 3]; // Ok\n+    let _ = x.len();\n+    x.push(4); // Pointless\n+}\n+\n+fn write_before_reassign() {\n+    // TODO: Warn here, but this requires more extensive data flow analysis.\n+    let mut x = HashMap::new(); // Ok\n+    x.insert(1, 2); // Pointless\n+    x = HashMap::new();\n+    let _ = x.len();\n+}\n+\n+fn read_in_closure() {\n+    let mut x = HashMap::new(); // Ok\n+    x.insert(1, 2);\n+    let _ = || {\n+        let _ = x.len();\n+    };\n+}\n+\n+fn write_in_closure() {\n+    let mut x = vec![1, 2, 3]; // WARNING\n+    let _ = || {\n+        x.push(4);\n+    };\n+}\n+\n+fn read_in_format() {\n+    let mut x = HashMap::new(); // Ok\n+    x.insert(1, 2);\n+    format!(\"{x:?}\");\n+}\n+\n+fn shadowing_1() {\n+    let x = HashMap::<usize, usize>::new(); // Ok\n+    let _ = x.len();\n+    let mut x = HashMap::new(); // WARNING\n+    x.insert(1, 2);\n+}\n+\n+fn shadowing_2() {\n+    let mut x = HashMap::new(); // WARNING\n+    x.insert(1, 2);\n+    let x = HashMap::<usize, usize>::new(); // Ok\n+    let _ = x.len();\n+}\n+\n+#[allow(clippy::let_unit_value)]\n+fn fake_read() {\n+    let mut x = vec![1, 2, 3]; // Ok\n+    x.reverse();\n+    // `collection_is_never_read` gets fooled, but other lints should catch this.\n+    let _: () = x.clear();\n+}\n+\n+fn assignment() {\n+    let mut x = vec![1, 2, 3]; // WARNING\n+    let y = vec![4, 5, 6]; // Ok\n+    x = y;\n+}\n+\n+#[allow(clippy::self_assignment)]\n+fn self_assignment() {\n+    let mut x = vec![1, 2, 3]; // WARNING\n+    x = x;\n+}\n+\n+fn method_argument_but_not_target() {\n+    struct MyStruct;\n+    impl MyStruct {\n+        fn my_method(&self, _argument: &[usize]) {}\n+    }\n+    let my_struct = MyStruct;\n+\n+    let mut x = vec![1, 2, 3]; // Ok\n+    x.reverse();\n+    my_struct.my_method(&x);\n+}"}, {"sha": "43349f550a6cdbc39b9b1f9b83fa7e88f228dbdb", "filename": "tests/ui/collection_is_never_read.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2a9c254e23989df2faaaeb102e5fea8ce948f45e/tests%2Fui%2Fcollection_is_never_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a9c254e23989df2faaaeb102e5fea8ce948f45e/tests%2Fui%2Fcollection_is_never_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollection_is_never_read.stderr?ref=2a9c254e23989df2faaaeb102e5fea8ce948f45e", "patch": "@@ -0,0 +1,40 @@\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:21:5\n+   |\n+LL |     let mut x = HashMap::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::collection-is-never-read` implied by `-D warnings`\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:60:5\n+   |\n+LL |     let mut x = vec![1, 2, 3]; // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:75:5\n+   |\n+LL |     let mut x = HashMap::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:80:5\n+   |\n+LL |     let mut x = HashMap::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:95:5\n+   |\n+LL |     let mut x = vec![1, 2, 3]; // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:102:5\n+   |\n+LL |     let mut x = vec![1, 2, 3]; // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}]}