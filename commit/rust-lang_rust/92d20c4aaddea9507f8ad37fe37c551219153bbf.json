{"sha": "92d20c4aaddea9507f8ad37fe37c551219153bbf", "node_id": "C_kwDOAAsO6NoAKDkyZDIwYzRhYWRkZWE5NTA3ZjhhZDM3ZmUzN2M1NTEyMTkxNTNiYmY", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-02-15T12:58:34Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-02-15T23:38:59Z"}, "message": "Support pretty printing of invalid constants\n\nMake it possible to pretty print invalid constants by introducing a\nfallible variant of `destructure_const` and falling back to debug\nformatting when it fails.", "tree": {"sha": "12922a3d4bbc15f867ab89b344c994e62ab704da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12922a3d4bbc15f867ab89b344c994e62ab704da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92d20c4aaddea9507f8ad37fe37c551219153bbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92d20c4aaddea9507f8ad37fe37c551219153bbf", "html_url": "https://github.com/rust-lang/rust/commit/92d20c4aaddea9507f8ad37fe37c551219153bbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92d20c4aaddea9507f8ad37fe37c551219153bbf/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfb2856f271fcb647b3cad1b88b29ec97bbab2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb2856f271fcb647b3cad1b88b29ec97bbab2a3", "html_url": "https://github.com/rust-lang/rust/commit/bfb2856f271fcb647b3cad1b88b29ec97bbab2a3"}], "stats": {"total": 146, "additions": 117, "deletions": 29}, "files": [{"sha": "ba1d5f45bbb10be632ea2f3888b10235110f5604", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/92d20c4aaddea9507f8ad37fe37c551219153bbf/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d20c4aaddea9507f8ad37fe37c551219153bbf/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=92d20c4aaddea9507f8ad37fe37c551219153bbf", "patch": "@@ -11,7 +11,8 @@ use rustc_middle::{\n use rustc_span::{source_map::DUMMY_SP, symbol::Symbol};\n \n use crate::interpret::{\n-    intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, MPlaceTy, MemPlaceMeta, Scalar,\n+    intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, InterpResult, MPlaceTy,\n+    MemPlaceMeta, Scalar,\n };\n \n mod error;\n@@ -132,42 +133,39 @@ fn const_to_valtree_inner<'tcx>(\n     }\n }\n \n-/// This function uses `unwrap` copiously, because an already validated constant\n-/// must have valid fields and can thus never fail outside of compiler bugs. However, it is\n-/// invoked from the pretty printer, where it can receive enums with no variants and e.g.\n-/// `read_discriminant` needs to be able to handle that.\n-pub(crate) fn destructure_const<'tcx>(\n+/// This function should never fail for validated constants. However, it is also invoked from the\n+/// pretty printer which might attempt to format invalid constants and in that case it might fail.\n+pub(crate) fn try_destructure_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     val: ty::Const<'tcx>,\n-) -> mir::DestructuredConst<'tcx> {\n+) -> InterpResult<'tcx, mir::DestructuredConst<'tcx>> {\n     trace!(\"destructure_const: {:?}\", val);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n-    let op = ecx.const_to_op(val, None).unwrap();\n+    let op = ecx.const_to_op(val, None)?;\n \n     // We go to `usize` as we cannot allocate anything bigger anyway.\n     let (field_count, variant, down) = match val.ty().kind() {\n         ty::Array(_, len) => (usize::try_from(len.eval_usize(tcx, param_env)).unwrap(), None, op),\n-        ty::Adt(def, _) if def.variants.is_empty() => {\n-            return mir::DestructuredConst { variant: None, fields: &[] };\n-        }\n         ty::Adt(def, _) => {\n-            let variant = ecx.read_discriminant(&op).unwrap().1;\n-            let down = ecx.operand_downcast(&op, variant).unwrap();\n+            let variant = ecx.read_discriminant(&op)?.1;\n+            let down = ecx.operand_downcast(&op, variant)?;\n             (def.variants[variant].fields.len(), Some(variant), down)\n         }\n         ty::Tuple(substs) => (substs.len(), None, op),\n         _ => bug!(\"cannot destructure constant {:?}\", val),\n     };\n \n-    let fields_iter = (0..field_count).map(|i| {\n-        let field_op = ecx.operand_field(&down, i).unwrap();\n-        let val = op_to_const(&ecx, &field_op);\n-        ty::Const::from_value(tcx, val, field_op.layout.ty)\n-    });\n-    let fields = tcx.arena.alloc_from_iter(fields_iter);\n+    let fields = (0..field_count)\n+        .map(|i| {\n+            let field_op = ecx.operand_field(&down, i)?;\n+            let val = op_to_const(&ecx, &field_op);\n+            Ok(ty::Const::from_value(tcx, val, field_op.layout.ty))\n+        })\n+        .collect::<InterpResult<'tcx, Vec<_>>>()?;\n+    let fields = tcx.arena.alloc_from_iter(fields);\n \n-    mir::DestructuredConst { variant, fields }\n+    Ok(mir::DestructuredConst { variant, fields })\n }\n \n pub(crate) fn deref_const<'tcx>("}, {"sha": "77d312f585138f6c4c9eda1031cb4f4c1a27955a", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92d20c4aaddea9507f8ad37fe37c551219153bbf/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d20c4aaddea9507f8ad37fe37c551219153bbf/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=92d20c4aaddea9507f8ad37fe37c551219153bbf", "patch": "@@ -41,9 +41,9 @@ pub fn provide(providers: &mut Providers) {\n     providers.eval_to_const_value_raw = const_eval::eval_to_const_value_raw_provider;\n     providers.eval_to_allocation_raw = const_eval::eval_to_allocation_raw_provider;\n     providers.const_caller_location = const_eval::const_caller_location;\n-    providers.destructure_const = |tcx, param_env_and_value| {\n+    providers.try_destructure_const = |tcx, param_env_and_value| {\n         let (param_env, value) = param_env_and_value.into_parts();\n-        const_eval::destructure_const(tcx, param_env, value)\n+        const_eval::try_destructure_const(tcx, param_env, value).ok()\n     };\n     providers.const_to_valtree = |tcx, param_env_and_value| {\n         let (param_env, raw) = param_env_and_value.into_parts();"}, {"sha": "4a57f483c70e2b8a1069263ca031f8271ca817a5", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92d20c4aaddea9507f8ad37fe37c551219153bbf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d20c4aaddea9507f8ad37fe37c551219153bbf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=92d20c4aaddea9507f8ad37fe37c551219153bbf", "patch": "@@ -98,4 +98,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         let raw_const = self.eval_to_allocation_raw(param_env.and(gid))?;\n         Ok(self.global_alloc(raw_const.alloc_id).unwrap_memory())\n     }\n+\n+    /// Destructure a constant ADT or array into its variant index and its field values.\n+    pub fn destructure_const(\n+        self,\n+        param_env_and_val: ty::ParamEnvAnd<'tcx, ty::Const<'tcx>>,\n+    ) -> mir::DestructuredConst<'tcx> {\n+        self.try_destructure_const(param_env_and_val).unwrap()\n+    }\n }"}, {"sha": "43cfe6f3b8a7a51e608f6ff6ed38d817ba1f6368", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92d20c4aaddea9507f8ad37fe37c551219153bbf/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d20c4aaddea9507f8ad37fe37c551219153bbf/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=92d20c4aaddea9507f8ad37fe37c551219153bbf", "patch": "@@ -924,10 +924,12 @@ rustc_queries! {\n     }\n \n     /// Destructure a constant ADT or array into its variant index and its\n-    /// field values.\n-    query destructure_const(\n+    /// field values or return `None` if constant is invalid.\n+    ///\n+    /// Use infallible `TyCtxt::destructure_const` when you know that constant is valid.\n+    query try_destructure_const(\n         key: ty::ParamEnvAnd<'tcx, ty::Const<'tcx>>\n-    ) -> mir::DestructuredConst<'tcx> {\n+    ) -> Option<mir::DestructuredConst<'tcx>> {\n         desc { \"destructure constant\" }\n         remap_env_constness\n     }"}, {"sha": "ae838a461574b2df1dee5d0a317423c33c28975f", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/92d20c4aaddea9507f8ad37fe37c551219153bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d20c4aaddea9507f8ad37fe37c551219153bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=92d20c4aaddea9507f8ad37fe37c551219153bbf", "patch": "@@ -1459,10 +1459,18 @@ pub trait PrettyPrinter<'tcx>:\n             // FIXME(eddyb) for `--emit=mir`/`-Z dump-mir`, we should provide the\n             // correct `ty::ParamEnv` to allow printing *all* constant values.\n             (_, ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) if !ty.has_param_types_or_consts() => {\n-                let contents =\n-                    self.tcx().destructure_const(ty::ParamEnv::reveal_all().and(\n-                        self.tcx().mk_const(ty::ConstS { val: ty::ConstKind::Value(ct), ty }),\n-                    ));\n+                let Some(contents) = self.tcx().try_destructure_const(\n+                    ty::ParamEnv::reveal_all()\n+                        .and(self.tcx().mk_const(ty::ConstS { val: ty::ConstKind::Value(ct), ty })),\n+                ) else {\n+                    // Fall back to debug pretty printing for invalid constants.\n+                    p!(write(\"{:?}\", ct));\n+                    if print_ty {\n+                        p!(\": \", print(ty));\n+                    }\n+                    return Ok(self);\n+                };\n+\n                 let fields = contents.fields.iter().copied();\n \n                 match *ty.kind() {"}, {"sha": "ee6c3b5f36fd4ecc6168815253278ce97f79426f", "filename": "src/test/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/92d20c4aaddea9507f8ad37fe37c551219153bbf/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/92d20c4aaddea9507f8ad37fe37c551219153bbf/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=92d20c4aaddea9507f8ad37fe37c551219153bbf", "patch": "@@ -0,0 +1,55 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:15:11: 15:11\n+      let _1: std::option::Option<()>;     // in scope 0 at $DIR/invalid_constant.rs:16:5: 16:12\n+      let mut _2: std::option::Option<std::option::Option<()>>; // in scope 0 at $DIR/invalid_constant.rs:16:7: 16:11\n+      scope 1 (inlined f) {                // at $DIR/invalid_constant.rs:16:5: 16:12\n+          debug x => _2;                   // in scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+          let mut _3: isize;               // in scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+          let _4: std::option::Option<()>; // in scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+          scope 2 {\n+              debug y => _4;               // in scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n+          }\n+      }\n+  \n+      bb0: {\n+          discriminant(_2) = 0;            // scope 0 at $DIR/invalid_constant.rs:16:7: 16:11\n+-         _3 = discriminant(_2);           // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+-         switchInt(move _3) -> [0_isize: bb3, otherwise: bb2]; // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n++         _3 = const 0_isize;              // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n++         switchInt(const 0_isize) -> [0_isize: bb3, otherwise: bb2]; // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+      }\n+  \n+      bb1: {\n+          nop;                             // scope 0 at $DIR/invalid_constant.rs:15:11: 17:2\n+          return;                          // scope 0 at $DIR/invalid_constant.rs:17:2: 17:2\n+      }\n+  \n+      bb2: {\n+-         _4 = ((_2 as Some).0: std::option::Option<()>); // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+-         _1 = _4;                         // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n++         _4 = const Scalar(0x02): Option::<()>; // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n++                                          // ty::Const\n++                                          // + ty: std::option::Option<()>\n++                                          // + val: Value(Scalar(0x02))\n++                                          // mir::Constant\n++                                          // + span: $DIR/invalid_constant.rs:16:5: 16:12\n++                                          // + literal: Const { ty: std::option::Option<()>, val: Value(Scalar(0x02)) }\n++         _1 = const Scalar(0x02): Option::<()>; // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n++                                          // ty::Const\n++                                          // + ty: std::option::Option<()>\n++                                          // + val: Value(Scalar(0x02))\n++                                          // mir::Constant\n++                                          // + span: $DIR/invalid_constant.rs:16:5: 16:12\n++                                          // + literal: Const { ty: std::option::Option<()>, val: Value(Scalar(0x02)) }\n+          goto -> bb1;                     // scope 0 at $DIR/invalid_constant.rs:10:20: 10:21\n+      }\n+  \n+      bb3: {\n+          discriminant(_1) = 0;            // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+          goto -> bb1;                     // scope 0 at $DIR/invalid_constant.rs:9:17: 9:21\n+      }\n+  }\n+  "}, {"sha": "1eb6f37df59683bd7896e7e9de9964edbeb52d35", "filename": "src/test/mir-opt/const_prop/invalid_constant.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/92d20c4aaddea9507f8ad37fe37c551219153bbf/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d20c4aaddea9507f8ad37fe37c551219153bbf/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs?ref=92d20c4aaddea9507f8ad37fe37c551219153bbf", "patch": "@@ -0,0 +1,17 @@\n+// Verify that we can pretty print invalid constant introduced\n+// by constant propagation. Regression test for issue #93688.\n+//\n+// compile-flags: -Copt-level=0 -Zinline-mir\n+\n+#[inline(always)]\n+pub fn f(x: Option<Option<()>>) -> Option<()> {\n+    match x {\n+        None => None,\n+        Some(y) => y,\n+    }\n+}\n+\n+// EMIT_MIR invalid_constant.main.ConstProp.diff\n+fn main() {\n+    f(None);\n+}"}]}