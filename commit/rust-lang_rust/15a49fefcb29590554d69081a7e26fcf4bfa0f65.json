{"sha": "15a49fefcb29590554d69081a7e26fcf4bfa0f65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTQ5ZmVmY2IyOTU5MDU1NGQ2OTA4MWE3ZTI2ZmNmNGJmYTBmNjU=", "commit": {"author": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-05T22:42:48Z"}, "committer": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-05T22:42:48Z"}, "message": "Tone it down a little", "tree": {"sha": "380c174aa8ba0b2bee03385560d0f9cc62f45944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380c174aa8ba0b2bee03385560d0f9cc62f45944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a49fefcb29590554d69081a7e26fcf4bfa0f65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a49fefcb29590554d69081a7e26fcf4bfa0f65", "html_url": "https://github.com/rust-lang/rust/commit/15a49fefcb29590554d69081a7e26fcf4bfa0f65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a49fefcb29590554d69081a7e26fcf4bfa0f65/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c7668a903fb31f8bd767ed5c2a1e1fd3c778915", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c7668a903fb31f8bd767ed5c2a1e1fd3c778915", "html_url": "https://github.com/rust-lang/rust/commit/8c7668a903fb31f8bd767ed5c2a1e1fd3c778915"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "fd2d9cdb0d4b9cc41e0e618d4612c6960fc437ef", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/15a49fefcb29590554d69081a7e26fcf4bfa0f65/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a49fefcb29590554d69081a7e26fcf4bfa0f65/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=15a49fefcb29590554d69081a7e26fcf4bfa0f65", "patch": "@@ -283,7 +283,7 @@ extern \"rust-intrinsic\" {\n     /// [invalid value]\n     /// (https://doc.rust-lang.org/nomicon/meet-safe-and-unsafe.html).\n     ///\n-    /// `transmute::<T, U>(t)` is semantically equivalent to the following:\n+    /// `transmute` is semantically equivalent to the following:\n     ///\n     /// ```\n     /// use std::{mem, ptr};\n@@ -303,7 +303,7 @@ extern \"rust-intrinsic\" {\n     /// the absolute last resort.\n     ///\n     /// The [nomicon](https://doc.rust-lang.org/nomicon/transmutes.html) has\n-    /// more complete documentation. Read it before using `transmute`.\n+    /// additional documentation.\n     ///\n     /// # Alternatives\n     ///\n@@ -343,13 +343,13 @@ extern \"rust-intrinsic\" {\n     /// ```\n     /// // this is not a good way to do this.\n     /// let slice = unsafe { mem::transmute::<&str, &[u8]>(\"Rust\") };\n-    /// assert_eq!(slice, [82, 117, 115, 116]);\n+    /// assert_eq!(slice, &[82, 117, 115, 116]);\n     /// // You could use `str::as_bytes`\n     /// let slice = \"Rust\".as_bytes();\n-    /// assert_eq!(slice, [82, 117, 115, 116]);\n+    /// assert_eq!(slice, &[82, 117, 115, 116]);\n     /// // Or, just use a byte string, if you have control over the string\n     /// // literal\n-    /// assert_eq!(b\"Rust\", [82, 117, 116, 116]);\n+    /// assert_eq!(b\"Rust\", &[82, 117, 116, 116]);\n     /// ```\n     ///\n     /// Turning a `Vec<&T>` into a `Vec<Option<&T>>`:\n@@ -373,7 +373,7 @@ extern \"rust-intrinsic\" {\n     /// // exact same size, and the same or lesser alignment, as the old\n     /// // type. The same caveats exist for this method as transmute, for\n     /// // the original inner type (`&i32`) to the converted inner type\n-    /// // (`Option<&i32>`), so read the nomicon page linked above.\n+    /// // (`Option<&i32>`), so read the nomicon pages linked above.\n     /// let v_from_raw = Vec::from_raw_parts(v_orig.as_mut_ptr(),\n     ///                                      v_orig.len(),\n     ///                                      v_orig.capacity());\n@@ -441,7 +441,7 @@ extern \"rust-intrinsic\" {\n     /// assert_eq!(bitpattern, 0x3F800000);\n     /// ```\n     ///\n-    /// Turning a pointer into a function pointer (this isn't guaranteed to\n+    /// Turning a pointer into a function pointer (this is not guaranteed to\n     /// work in Rust, although, for example, Linux does make this guarantee):\n     ///\n     /// ```\n@@ -453,8 +453,8 @@ extern \"rust-intrinsic\" {\n     /// assert_eq!(function(), 0);\n     /// ```\n     ///\n-    /// Extending a lifetime, or shortening an invariant an invariant lifetime;\n-    /// this is advanced, very unsafe rust:\n+    /// Extending a lifetime, or shortening an invariant lifetime; this is\n+    /// advanced, very unsafe rust:\n     ///\n     /// ```\n     /// use std::mem;\n@@ -464,11 +464,10 @@ extern \"rust-intrinsic\" {\n     ///     mem::transmute::<R<'b>, R<'static>>(ptr);\n     /// }\n     ///\n-    /// unsafe fn shorten_invariant<'b, 'c>(r: &'b mut R<'static>)\n-    ///                                     -> &'b R<'c> {\n-    ///     let ref_to_original =\n-    ///         mem::transmute::<&'b mut R<'static>, &'b mut R<'c>>(\n-    ///             ref_to_extended);\n+    /// unsafe fn shorten_invariant_lifetime<'b, 'c>(r: &'b mut R<'static>)\n+    ///                                              -> &'b mut R<'c> {\n+    ///     mem::transmute::<&'b mut R<'static>, &'b mut R<'c>>(\n+    ///         ref_to_extended)\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}