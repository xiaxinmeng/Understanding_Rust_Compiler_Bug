{"sha": "d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3Nzc3YWU2ODJkNDk4ZmY0M2UzZDZiNjVhN2E4ZDBiMjM2MWZhMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-05T01:22:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-05T01:22:54Z"}, "message": "Auto merge of #38103 - zackmdavis:lint_errors_resulting_from_lint_groups_or_warnings_meta-lint_obscure_the_original_lint_name, r=nikomatsakis\n\nnote individual lint name in messages set via lint group attribute\n\n![lint_errors_resulting_from_lint_groups_obscure](https://cloud.githubusercontent.com/assets/1076988/20783614/c107d5c8-b749-11e6-85de-eada7f67c986.png)\n\nResolves #36846.\n\nr? @jonathandturner\n\n-----\n\n***Update*** 16 December (new commits):\n![lint_group_makeover_party](https://cloud.githubusercontent.com/assets/1076988/21284540/ff1ae2fc-c3d2-11e6-93be-d0689f5fa7a8.png)", "tree": {"sha": "b73bfb7da0b98aff3851fc91481774ad38470a3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b73bfb7da0b98aff3851fc91481774ad38470a3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "html_url": "https://github.com/rust-lang/rust/commit/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea7a6486a26af085862cd7a5596bb69e83d85e12", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7a6486a26af085862cd7a5596bb69e83d85e12", "html_url": "https://github.com/rust-lang/rust/commit/ea7a6486a26af085862cd7a5596bb69e83d85e12"}, {"sha": "72af42e8974f521e3fed753feac3d0638ad61025", "url": "https://api.github.com/repos/rust-lang/rust/commits/72af42e8974f521e3fed753feac3d0638ad61025", "html_url": "https://github.com/rust-lang/rust/commit/72af42e8974f521e3fed753feac3d0638ad61025"}], "stats": {"total": 342, "additions": 263, "deletions": 79}, "files": [{"sha": "32bc81e947037afaef2030b2f9250f35dd6da22f", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 43, "deletions": 26, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -40,8 +40,10 @@ use std::cmp;\n use std::default::Default as StdDefault;\n use std::mem;\n use std::fmt;\n+use std::ops::Deref;\n use syntax::attr;\n use syntax::ast;\n+use syntax::symbol::Symbol;\n use syntax_pos::{MultiSpan, Span};\n use errors::{self, Diagnostic, DiagnosticBuilder};\n use hir;\n@@ -299,8 +301,9 @@ impl LintStore {\n             check_lint_name_cmdline(sess, self,\n                                     &lint_name[..], level);\n \n+            let lint_flag_val = Symbol::intern(&lint_name);\n             match self.find_lint(&lint_name[..], sess, None) {\n-                Ok(lint_id) => self.set_level(lint_id, (level, CommandLine)),\n+                Ok(lint_id) => self.set_level(lint_id, (level, CommandLine(lint_flag_val))),\n                 Err(FindLintError::Removed) => { }\n                 Err(_) => {\n                     match self.lint_groups.iter().map(|(&x, pair)| (x, pair.0.clone()))\n@@ -310,7 +313,7 @@ impl LintStore {\n                         Some(v) => {\n                             v.iter()\n                              .map(|lint_id: &LintId|\n-                                     self.set_level(*lint_id, (level, CommandLine)))\n+                                     self.set_level(*lint_id, (level, CommandLine(lint_flag_val))))\n                              .collect::<Vec<()>>();\n                         }\n                         None => {\n@@ -446,42 +449,54 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n                               -> DiagnosticBuilder<'a>\n     where S: Into<MultiSpan>\n {\n-    let (mut level, source) = lvlsrc;\n+    let (level, source) = lvlsrc;\n     if level == Allow {\n         return sess.diagnostic().struct_dummy();\n     }\n \n     let name = lint.name_lower();\n     let mut def = None;\n-    let msg = match source {\n-        Default => {\n-            format!(\"{}, #[{}({})] on by default\", msg,\n-                    level.as_str(), name)\n-        },\n-        CommandLine => {\n-            format!(\"{} [-{} {}]\", msg,\n-                    match level {\n-                        Warn => 'W', Deny => 'D', Forbid => 'F',\n-                        Allow => bug!()\n-                    }, name.replace(\"_\", \"-\"))\n-        },\n-        Node(src) => {\n-            def = Some(src);\n-            msg.to_string()\n-        }\n-    };\n \n-    // For purposes of printing, we can treat forbid as deny.\n-    if level == Forbid { level = Deny; }\n+    // Except for possible note details, forbid behaves like deny.\n+    let effective_level = if level == Forbid { Deny } else { level };\n \n-    let mut err = match (level, span) {\n+    let mut err = match (effective_level, span) {\n         (Warn, Some(sp)) => sess.struct_span_warn(sp, &msg[..]),\n         (Warn, None)     => sess.struct_warn(&msg[..]),\n         (Deny, Some(sp)) => sess.struct_span_err(sp, &msg[..]),\n         (Deny, None)     => sess.struct_err(&msg[..]),\n         _ => bug!(\"impossible level in raw_emit_lint\"),\n     };\n \n+    match source {\n+        Default => {\n+            err.note(&format!(\"#[{}({})] on by default\", level.as_str(), name));\n+        },\n+        CommandLine(lint_flag_val) => {\n+            let flag = match level {\n+                Warn => \"-W\", Deny => \"-D\", Forbid => \"-F\",\n+                Allow => bug!(\"earlier conditional return should handle Allow case\")\n+            };\n+            let hyphen_case_lint_name = name.replace(\"_\", \"-\");\n+            if lint_flag_val.as_str().deref() == name {\n+                err.note(&format!(\"requested on the command line with `{} {}`\",\n+                                  flag, hyphen_case_lint_name));\n+            } else {\n+                let hyphen_case_flag_val = lint_flag_val.as_str().replace(\"_\", \"-\");\n+                err.note(&format!(\"`{} {}` implied by `{} {}`\",\n+                                  flag, hyphen_case_lint_name, flag, hyphen_case_flag_val));\n+            }\n+        },\n+        Node(lint_attr_name, src) => {\n+            def = Some(src);\n+            if lint_attr_name.as_str().deref() != name {\n+                let level_str = level.as_str();\n+                err.note(&format!(\"#[{}({})] implied by #[{}({})]\",\n+                                  level_str, name, level_str, lint_attr_name));\n+            }\n+        }\n+    }\n+\n     // Check for future incompatibility lints and issue a stronger warning.\n     if let Some(future_incompatible) = lints.future_incompatible(LintId::of(lint)) {\n         let explanation = format!(\"this was previously accepted by the compiler \\\n@@ -649,6 +664,8 @@ pub trait LintContext<'tcx>: Sized {\n                 }\n             };\n \n+            let lint_attr_name = result.expect(\"lint attribute should be well-formed\").0;\n+\n             for (lint_id, level, span) in v {\n                 let (now, now_source) = self.lints().get_level_source(lint_id);\n                 if now == Forbid && level != Forbid {\n@@ -660,19 +677,19 @@ pub trait LintContext<'tcx>: Sized {\n                     diag_builder.span_label(span, &format!(\"overruled by previous forbid\"));\n                     match now_source {\n                         LintSource::Default => &mut diag_builder,\n-                        LintSource::Node(forbid_source_span) => {\n+                        LintSource::Node(_, forbid_source_span) => {\n                             diag_builder.span_label(forbid_source_span,\n                                                     &format!(\"`forbid` level set here\"))\n                         },\n-                        LintSource::CommandLine => {\n+                        LintSource::CommandLine(_) => {\n                             diag_builder.note(\"`forbid` lint level was set on command line\")\n                         }\n                     }.emit()\n                 } else if now != level {\n                     let src = self.lints().get_level_source(lint_id).1;\n                     self.level_stack().push((lint_id, (now, src)));\n                     pushed += 1;\n-                    self.mut_lints().set_level(lint_id, (level, Node(span)));\n+                    self.mut_lints().set_level(lint_id, (level, Node(lint_attr_name, span)));\n                 }\n             }\n         }"}, {"sha": "e9f603db15d6214b538c29a71a5aa55454641997", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -38,6 +38,7 @@ use std::ascii::AsciiExt;\n use syntax_pos::Span;\n use syntax::visit as ast_visit;\n use syntax::ast;\n+use syntax::symbol::Symbol;\n \n pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         raw_emit_lint, check_crate, check_ast_crate, gather_attrs,\n@@ -338,10 +339,10 @@ pub enum LintSource {\n     Default,\n \n     /// Lint level was set by an attribute.\n-    Node(Span),\n+    Node(ast::Name, Span),\n \n     /// Lint level was set by a command-line flag.\n-    CommandLine,\n+    CommandLine(Symbol),\n }\n \n pub type LevelSource = (Level, LintSource);"}, {"sha": "1d67bf3a1cddad7617c3cbf9cc73fa0ca399020a", "filename": "src/test/compile-fail/imports/rfc-1560-warning-cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fcompile-fail%2Fimports%2Frfc-1560-warning-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fcompile-fail%2Fimports%2Frfc-1560-warning-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Frfc-1560-warning-cycle.rs?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -23,6 +23,7 @@ mod bar {\n         //~^ WARN `Foo` is ambiguous\n         //~| WARN hard error in a future release\n         //~| NOTE see issue #38260\n+        //~| NOTE #[warn(legacy_imports)] on by default\n     }\n }\n "}, {"sha": "086938334c78aa5480dc39ffedd72f8eb883b4d4", "filename": "src/test/compile-fail/issue-30730.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fcompile-fail%2Fissue-30730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fcompile-fail%2Fissue-30730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30730.rs?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -9,5 +9,7 @@\n // except according to those terms.\n \n #![deny(warnings)] //~ NOTE: lint level defined here\n-use std::thread; //~ ERROR: unused import\n+use std::thread;\n+//~^ ERROR: unused import\n+//~| NOTE: #[deny(unused_imports)] implied by #[deny(warnings)]\n fn main() {}"}, {"sha": "b2e6072c9855c38f93db02865e105befb2be182f", "filename": "src/test/compile-fail/lint-group-style.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -1,41 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![deny(bad_style)]\n-//~^ NOTE lint level defined here\n-#![allow(dead_code)]\n-\n-fn CamelCase() {} //~ ERROR function `CamelCase` should have a snake case name\n-\n-#[allow(bad_style)]\n-mod test {\n-    fn CamelCase() {}\n-\n-    #[forbid(bad_style)]\n-    //~^ NOTE lint level defined here\n-    //~^^ NOTE lint level defined here\n-    mod bad {\n-        fn CamelCase() {} //~ ERROR function `CamelCase` should have a snake case name\n-\n-        static bad: isize = 1; //~ ERROR static variable `bad` should have an upper case name\n-    }\n-\n-    mod warn {\n-        #![warn(bad_style)]\n-        //~^ NOTE lint level defined here\n-        //~| NOTE lint level defined here\n-\n-        fn CamelCase() {} //~ WARN function `CamelCase` should have a snake case name\n-\n-        struct snake_case; //~ WARN type `snake_case` should have a camel case name\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "0e68ff752e5a9876769844624525e55dda0fe82c", "filename": "src/test/compile-fail/lint-output-format-2.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -11,15 +11,20 @@\n // compile-flags: -F unused_features\n // aux-build:lint_output_format.rs\n \n-#![feature(foo)] //~ ERROR unused or unknown feature\n+#![feature(foo)]\n+//~^ ERROR unused or unknown feature\n+//~| NOTE requested on the command line with `-F unused-features`\n \n #![feature(test_feature)]\n \n extern crate lint_output_format;\n use lint_output_format::{foo, bar};\n-//~^ WARNING use of deprecated item: text,\n+//~^ WARNING use of deprecated item: text\n+//~| NOTE #[warn(deprecated)] on by default\n \n fn main() {\n-    let _x = foo(); //~ WARNING #[warn(deprecated)] on by default\n+    let _x = foo();\n+    //~^ WARNING use of deprecated item: text\n+    //~| NOTE #[warn(deprecated)] on by default\n     let _y = bar();\n }"}, {"sha": "5c195c8a4c63a37ddd09a1a4d21fa31967709b44", "filename": "src/test/run-pass/path-lookahead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Frun-pass%2Fpath-lookahead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Frun-pass%2Fpath-lookahead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpath-lookahead.rs?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -10,11 +10,11 @@\n \n // Parser test for #37765\n \n-fn with_parens<T: ToString>(arg: T) -> String { //~WARN dead_code\n-  return (<T as ToString>::to_string(&arg)); //~WARN unused_parens\n+fn with_parens<T: ToString>(arg: T) -> String { //~WARN function is never used: `with_parens`\n+  return (<T as ToString>::to_string(&arg)); //~WARN unnecessary parentheses around `return` value\n }\n \n-fn no_parens<T: ToString>(arg: T) -> String { //~WARN dead_code\n+fn no_parens<T: ToString>(arg: T) -> String { //~WARN function is never used: `no_parens`\n   return <T as ToString>::to_string(&arg);\n }\n "}, {"sha": "2a707c6eb8b103b428de32c4fb5f2c64f848b38a", "filename": "src/test/ui/compare-method/proj-outlives-region.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -1,4 +1,4 @@\n-error[E0276]: impl has stricter requirements than trait, #[deny(extra_requirement_in_impl)] on by default\n+error[E0276]: impl has stricter requirements than trait\n   --> $DIR/proj-outlives-region.rs:22:5\n    |\n 17 |     fn foo() where T: 'a;\n@@ -7,6 +7,7 @@ error[E0276]: impl has stricter requirements than trait, #[deny(extra_requiremen\n 22 |     fn foo() where U: 'a { } //~ ERROR E0276\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: 'a`\n    |\n+   = note: #[deny(extra_requirement_in_impl)] on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>\n "}, {"sha": "9e822bd8b0790097ff4832bd78edadf41677b8e9", "filename": "src/test/ui/compare-method/region-unrelated.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -1,4 +1,4 @@\n-error[E0276]: impl has stricter requirements than trait, #[deny(extra_requirement_in_impl)] on by default\n+error[E0276]: impl has stricter requirements than trait\n   --> $DIR/region-unrelated.rs:22:5\n    |\n 17 |     fn foo() where T: 'a;\n@@ -7,6 +7,7 @@ error[E0276]: impl has stricter requirements than trait, #[deny(extra_requiremen\n 22 |     fn foo() where V: 'a { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `V: 'a`\n    |\n+   = note: #[deny(extra_requirement_in_impl)] on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>\n "}, {"sha": "cdb9684933d9b14fa02fc22ca0527f43a385c6c5", "filename": "src/test/ui/lint/command-line-lint-group-allow.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-allow.rs?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -A bad-style\n+\n+fn main() {\n+    let _InappropriateCamelCasing = true;\n+}"}, {"sha": "1248601c1e44a37863ed1e0796716682ca35e219", "filename": "src/test/ui/lint/command-line-lint-group-deny.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.rs?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -D bad-style\n+\n+fn main() {\n+    let _InappropriateCamelCasing = true;\n+}"}, {"sha": "23fac66cc6c98f60ba85966bc8c10f565bd4ee3e", "filename": "src/test/ui/lint/command-line-lint-group-deny.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.stderr?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -0,0 +1,10 @@\n+error: variable `_InappropriateCamelCasing` should have a snake case name such as `_inappropriate_camel_casing`\n+  --> $DIR/command-line-lint-group-deny.rs:14:9\n+   |\n+14 |     let _InappropriateCamelCasing = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D non-snake-case` implied by `-D bad-style`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ae16db44864c98f85c3ea55440bb2fe32877de85", "filename": "src/test/ui/lint/command-line-lint-group-forbid.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.rs?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -F bad-style\n+\n+fn main() {\n+    let _InappropriateCamelCasing = true;\n+}"}, {"sha": "0babd7f6fe47a06dbaccf37ad6790a8b15d2bb45", "filename": "src/test/ui/lint/command-line-lint-group-forbid.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.stderr?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -0,0 +1,10 @@\n+error: variable `_InappropriateCamelCasing` should have a snake case name such as `_inappropriate_camel_casing`\n+  --> $DIR/command-line-lint-group-forbid.rs:14:9\n+   |\n+14 |     let _InappropriateCamelCasing = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-F non-snake-case` implied by `-F bad-style`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7d65c802788bf1a006bb1b598d5891a2c4f5bd76", "filename": "src/test/ui/lint/command-line-lint-group-warn.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.rs?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -W bad-style\n+\n+fn main() {\n+    let _InappropriateCamelCasing = true;\n+}"}, {"sha": "998c892c7e3493ec1ea5f837729874ad18bc0f19", "filename": "src/test/ui/lint/command-line-lint-group-warn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.stderr?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -0,0 +1,8 @@\n+warning: variable `_InappropriateCamelCasing` should have a snake case name such as `_inappropriate_camel_casing`\n+  --> $DIR/command-line-lint-group-warn.rs:14:9\n+   |\n+14 |     let _InappropriateCamelCasing = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-W non-snake-case` implied by `-W bad-style`\n+"}, {"sha": "2bd760e417a89993974d12b0ed5dd7c74801df37", "filename": "src/test/ui/lint/lint-group-style.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Flint-group-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Flint-group-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-style.rs?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2014\u20132017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(bad_style)]\n+#![allow(dead_code)]\n+\n+fn CamelCase() {}\n+\n+#[allow(bad_style)]\n+mod test {\n+    fn CamelCase() {}\n+\n+    #[forbid(bad_style)]\n+    mod bad {\n+        fn CamelCase() {}\n+\n+        static bad: isize = 1;\n+    }\n+\n+    mod warn {\n+        #![warn(bad_style)]\n+\n+        fn CamelCase() {}\n+\n+        struct snake_case;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9c0f4866af6902e43ff1eac30e998fcb0d0543d8", "filename": "src/test/ui/lint/lint-group-style.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -0,0 +1,67 @@\n+error: function `CamelCase` should have a snake case name such as `camel_case`\n+  --> $DIR/lint-group-style.rs:14:1\n+   |\n+14 | fn CamelCase() {}\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(non_snake_case)] implied by #[deny(bad_style)]\n+note: lint level defined here\n+  --> $DIR/lint-group-style.rs:11:9\n+   |\n+11 | #![deny(bad_style)]\n+   |         ^^^^^^^^^\n+\n+error: function `CamelCase` should have a snake case name such as `camel_case`\n+  --> $DIR/lint-group-style.rs:22:9\n+   |\n+22 |         fn CamelCase() {}\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[forbid(non_snake_case)] implied by #[forbid(bad_style)]\n+note: lint level defined here\n+  --> $DIR/lint-group-style.rs:20:14\n+   |\n+20 |     #[forbid(bad_style)]\n+   |              ^^^^^^^^^\n+\n+error: static variable `bad` should have an upper case name such as `BAD`\n+  --> $DIR/lint-group-style.rs:24:9\n+   |\n+24 |         static bad: isize = 1;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[forbid(non_upper_case_globals)] implied by #[forbid(bad_style)]\n+note: lint level defined here\n+  --> $DIR/lint-group-style.rs:20:14\n+   |\n+20 |     #[forbid(bad_style)]\n+   |              ^^^^^^^^^\n+\n+warning: function `CamelCase` should have a snake case name such as `camel_case`\n+  --> $DIR/lint-group-style.rs:30:9\n+   |\n+30 |         fn CamelCase() {}\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(non_snake_case)] implied by #[warn(bad_style)]\n+note: lint level defined here\n+  --> $DIR/lint-group-style.rs:28:17\n+   |\n+28 |         #![warn(bad_style)]\n+   |                 ^^^^^^^^^\n+\n+warning: type `snake_case` should have a camel case name such as `SnakeCase`\n+  --> $DIR/lint-group-style.rs:32:9\n+   |\n+32 |         struct snake_case;\n+   |         ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(non_camel_case_types)] implied by #[warn(bad_style)]\n+note: lint level defined here\n+  --> $DIR/lint-group-style.rs:28:17\n+   |\n+28 |         #![warn(bad_style)]\n+   |                 ^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c4f2616f5945b1baa5680d1bc475fc3e8c282f5c", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -4,6 +4,7 @@ error: variable `theTwo` should have a snake case name such as `the_two`\n 19 |     let theTwo = 2;\n    |         ^^^^^^\n    |\n+   = note: #[deny(non_snake_case)] implied by #[deny(warnings)]\n note: lint level defined here\n   --> $DIR/issue-24690.rs:16:9\n    |\n@@ -15,13 +16,16 @@ error: variable `theOtherTwo` should have a snake case name such as `the_other_t\n    |\n 20 |     let theOtherTwo = 2;\n    |         ^^^^^^^^^^^\n+   |\n+   = note: #[deny(non_snake_case)] implied by #[deny(warnings)]\n \n error: unused variable: `theOtherTwo`\n   --> $DIR/issue-24690.rs:20:9\n    |\n 20 |     let theOtherTwo = 2;\n    |         ^^^^^^^^^^^\n    |\n+   = note: #[deny(unused_variables)] implied by #[deny(warnings)]\n note: lint level defined here\n   --> $DIR/issue-24690.rs:16:9\n    |"}, {"sha": "4b1ca7f98bbf65d1d2ad8bd2e73462f5dcd16087", "filename": "src/test/ui/span/multispan-import-lint.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr?ref=d7777ae682d498ff43e3d6b65a7a8d0b2361fa0b", "patch": "@@ -1,6 +1,8 @@\n-warning: unused imports: `Eq`, `Ord`, `PartialEq`, `PartialOrd`, #[warn(unused_imports)] on by default\n+warning: unused imports: `Eq`, `Ord`, `PartialEq`, `PartialOrd`\n   --> $DIR/multispan-import-lint.rs:11:16\n    |\n 11 | use std::cmp::{Eq, Ord, min, PartialEq, PartialOrd};\n    |                ^^  ^^^       ^^^^^^^^^  ^^^^^^^^^^\n+   |\n+   = note: #[warn(unused_imports)] on by default\n "}]}