{"sha": "a501d96f3368575eb9a8feeb3f16f5900dc06b48", "node_id": "C_kwDOAAsO6NoAKGE1MDFkOTZmMzM2ODU3NWViOWE4ZmVlYjNmMTZmNTkwMGRjMDZiNDg", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-15T18:44:27Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-15T18:44:27Z"}, "message": "Merge branch 'staging'", "tree": {"sha": "ecda7b1b27927f063080d51c306b1f845ab861dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecda7b1b27927f063080d51c306b1f845ab861dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a501d96f3368575eb9a8feeb3f16f5900dc06b48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a501d96f3368575eb9a8feeb3f16f5900dc06b48", "html_url": "https://github.com/rust-lang/rust/commit/a501d96f3368575eb9a8feeb3f16f5900dc06b48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a501d96f3368575eb9a8feeb3f16f5900dc06b48/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e082eebb5f3fceac83b5cca666e601e5ce0a964b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e082eebb5f3fceac83b5cca666e601e5ce0a964b", "html_url": "https://github.com/rust-lang/rust/commit/e082eebb5f3fceac83b5cca666e601e5ce0a964b"}, {"sha": "e735206f50af9754ab21171e4472cfbe1eecd92f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e735206f50af9754ab21171e4472cfbe1eecd92f", "html_url": "https://github.com/rust-lang/rust/commit/e735206f50af9754ab21171e4472cfbe1eecd92f"}], "stats": {"total": 201, "additions": 52, "deletions": 149}, "files": [{"sha": "76b48d70ab7c72905500ec070b417f5872060abf", "filename": ".cirrus.yml", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a501d96f3368575eb9a8feeb3f16f5900dc06b48/.cirrus.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a501d96f3368575eb9a8feeb3f16f5900dc06b48/.cirrus.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cirrus.yml?ref=a501d96f3368575eb9a8feeb3f16f5900dc06b48", "patch": "@@ -15,9 +15,4 @@ task:\n     - ./y.rs prepare\n   test_script:\n     - . $HOME/.cargo/env\n-    - # Enable backtraces for easier debugging\n-    - export RUST_BACKTRACE=1\n-    - # Reduce amount of benchmark runs as they are slow\n-    - export COMPILE_RUNS=2\n-    - export RUN_RUNS=2\n     - ./y.rs test"}, {"sha": "b79406879ff32b8023a586ad16c646828943b2e3", "filename": ".github/workflows/main.yml", "status": "modified", "additions": 26, "deletions": 109, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/a501d96f3368575eb9a8feeb3f16f5900dc06b48/.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a501d96f3368575eb9a8feeb3f16f5900dc06b48/.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmain.yml?ref=a501d96f3368575eb9a8feeb3f16f5900dc06b48", "patch": "@@ -25,6 +25,10 @@ jobs:\n     runs-on: ${{ matrix.os }}\n     timeout-minutes: 60\n \n+    defaults:\n+      run:\n+        shell: bash\n+\n     strategy:\n       fail-fast: false\n       matrix:\n@@ -46,6 +50,14 @@ jobs:\n           - os: ubuntu-latest\n             env:\n               TARGET_TRIPLE: s390x-unknown-linux-gnu\n+          # Native Windows build with MSVC\n+          - os: windows-latest\n+            env:\n+              TARGET_TRIPLE: x86_64-pc-windows-msvc\n+          # cross-compile from Windows to Windows MinGW\n+          - os: windows-latest\n+            env:\n+              TARGET_TRIPLE: x86_64-pc-windows-gnu\n \n     steps:\n     - uses: actions/checkout@v3\n@@ -54,21 +66,25 @@ jobs:\n       uses: actions/cache@v3\n       with:\n         path: ~/.cargo/bin\n-        key: ${{ runner.os }}-cargo-installed-crates\n+        key: ${{ runner.os }}-${{ matrix.env.TARGET_TRIPLE }}-cargo-installed-crates\n \n     - name: Cache cargo registry and index\n       uses: actions/cache@v3\n       with:\n         path: |\n             ~/.cargo/registry\n             ~/.cargo/git\n-        key: ${{ runner.os }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}\n+        key: ${{ runner.os }}-${{ matrix.env.TARGET_TRIPLE }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}\n \n     - name: Cache cargo target dir\n       uses: actions/cache@v3\n       with:\n         path: build/cg_clif\n-        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n+        key: ${{ runner.os }}-${{ matrix.env.TARGET_TRIPLE }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n+\n+    - name: Set MinGW as the default toolchain\n+      if: matrix.os == 'windows-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n+      run: rustup set default-host x86_64-pc-windows-gnu\n \n     - name: Install MinGW toolchain and wine\n       if: matrix.os == 'ubuntu-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n@@ -89,6 +105,10 @@ jobs:\n         sudo apt-get update\n         sudo apt-get install -y gcc-s390x-linux-gnu qemu-user\n \n+    - name: Windows setup\n+      if: matrix.os == 'windows-latest'\n+      run: git config --global core.autocrlf false\n+\n     - name: Prepare dependencies\n       run: ./y.rs prepare\n \n@@ -104,124 +124,21 @@ jobs:\n     - name: Test\n       env:\n         TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n-      run: |\n-        # Enable backtraces for easier debugging\n-        export RUST_BACKTRACE=1\n-\n-        # Reduce amount of benchmark runs as they are slow\n-        export COMPILE_RUNS=2\n-        export RUN_RUNS=2\n-\n-        # Enable extra checks\n-        export CG_CLIF_ENABLE_VERIFIER=1\n-\n-        ./y.rs test\n+      run: ./y.rs test\n \n     - name: Package prebuilt cg_clif\n       run: tar cvfJ cg_clif.tar.xz dist\n \n     - name: Upload prebuilt cg_clif\n-      if: matrix.env.TARGET_TRIPLE != 'x86_64-pc-windows-gnu'\n+      if: matrix.os == 'windows-latest' || matrix.env.TARGET_TRIPLE != 'x86_64-pc-windows-gnu'\n       uses: actions/upload-artifact@v3\n       with:\n         name: cg_clif-${{ matrix.env.TARGET_TRIPLE }}\n         path: cg_clif.tar.xz\n \n     - name: Upload prebuilt cg_clif (cross compile)\n-      if: matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n+      if: matrix.os != 'windows-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n       uses: actions/upload-artifact@v3\n       with:\n         name: cg_clif-${{ runner.os }}-cross-x86_64-mingw\n         path: cg_clif.tar.xz\n-\n-  windows:\n-    runs-on: ${{ matrix.os }}\n-    timeout-minutes: 60\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        include:\n-          # Native Windows build with MSVC\n-          - os: windows-latest\n-            env:\n-              TARGET_TRIPLE: x86_64-pc-windows-msvc\n-          # cross-compile from Windows to Windows MinGW\n-          - os: windows-latest\n-            env:\n-              TARGET_TRIPLE: x86_64-pc-windows-gnu\n-\n-    steps:\n-    - uses: actions/checkout@v3\n-\n-    - name: Cache cargo installed crates\n-      uses: actions/cache@v3\n-      with:\n-        path: ~/.cargo/bin\n-        key: ${{ runner.os }}-${{ matrix.env.TARGET_TRIPLE }}-cargo-installed-crates\n-\n-    - name: Cache cargo registry and index\n-      uses: actions/cache@v3\n-      with:\n-        path: |\n-            ~/.cargo/registry\n-            ~/.cargo/git\n-        key: ${{ runner.os }}-${{ matrix.env.TARGET_TRIPLE }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}\n-\n-    - name: Cache cargo target dir\n-      uses: actions/cache@v3\n-      with:\n-        path: build/cg_clif\n-        key: ${{ runner.os }}-${{ matrix.env.TARGET_TRIPLE }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n-\n-    - name: Set MinGW as the default toolchain\n-      if: matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n-      run: rustup set default-host x86_64-pc-windows-gnu\n-\n-    - name: Prepare dependencies\n-      run: |\n-        git config --global core.autocrlf false\n-        rustc y.rs -o y.exe -g\n-        ./y.exe prepare\n-\n-    - name: Build without unstable features\n-      env:\n-        TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n-      # This is the config rust-lang/rust uses for builds\n-      run: ./y.rs build --no-unstable-features\n-\n-    - name: Build\n-      run: ./y.rs build --sysroot none\n-\n-    - name: Test\n-      run: |\n-        # Enable backtraces for easier debugging\n-        $Env:RUST_BACKTRACE=1\n-\n-        # Reduce amount of benchmark runs as they are slow\n-        $Env:COMPILE_RUNS=2\n-        $Env:RUN_RUNS=2\n-\n-        # Enable extra checks\n-        $Env:CG_CLIF_ENABLE_VERIFIER=1\n-\n-        # WIP Disable some tests\n-\n-        # This fails due to some weird argument handling by hyperfine, not an actual regression\n-        # more of a build system issue\n-        (Get-Content config.txt) -replace '(bench.simple-raytracer)', '# $1' |  Out-File config.txt\n-\n-        # This fails with a different output than expected\n-        (Get-Content config.txt) -replace '(test.regex-shootout-regex-dna)', '# $1' |  Out-File config.txt\n-\n-        ./y.exe test\n-\n-    - name: Package prebuilt cg_clif\n-      # don't use compression as xzip isn't supported by tar on windows and bzip2 hangs\n-      run: tar cvf cg_clif.tar dist\n-\n-    - name: Upload prebuilt cg_clif\n-      uses: actions/upload-artifact@v3\n-      with:\n-        name: cg_clif-${{ matrix.env.TARGET_TRIPLE }}\n-        path: cg_clif.tar"}, {"sha": "0565938ee35313e8ab308545a48a2e2fd05cee69", "filename": ".github/workflows/nightly-cranelift.yml", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a501d96f3368575eb9a8feeb3f16f5900dc06b48/.github%2Fworkflows%2Fnightly-cranelift.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a501d96f3368575eb9a8feeb3f16f5900dc06b48/.github%2Fworkflows%2Fnightly-cranelift.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fnightly-cranelift.yml?ref=a501d96f3368575eb9a8feeb3f16f5900dc06b48", "patch": "@@ -45,15 +45,4 @@ jobs:\n     - name: Build\n       run: ./y.rs build --sysroot none\n     - name: Test\n-      run: |\n-        # Enable backtraces for easier debugging\n-        export RUST_BACKTRACE=1\n-\n-        # Reduce amount of benchmark runs as they are slow\n-        export COMPILE_RUNS=2\n-        export RUN_RUNS=2\n-\n-        # Enable extra checks\n-        export CG_CLIF_ENABLE_VERIFIER=1\n-\n-        ./test.sh\n+      run: ./test.sh"}, {"sha": "bab81b9dc2a819a280505ba036dbb11b0fd7587b", "filename": ".github/workflows/rustc.yml", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a501d96f3368575eb9a8feeb3f16f5900dc06b48/.github%2Fworkflows%2Frustc.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a501d96f3368575eb9a8feeb3f16f5900dc06b48/.github%2Fworkflows%2Frustc.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frustc.yml?ref=a501d96f3368575eb9a8feeb3f16f5900dc06b48", "patch": "@@ -37,14 +37,7 @@ jobs:\n         ./y.rs prepare\n \n     - name: Test\n-      run: |\n-        # Enable backtraces for easier debugging\n-        export RUST_BACKTRACE=1\n-\n-        # Enable extra checks\n-        export CG_CLIF_ENABLE_VERIFIER=1\n-\n-        ./scripts/test_bootstrap.sh\n+      run: ./scripts/test_bootstrap.sh\n   rustc_test_suite:\n     runs-on: ubuntu-latest\n \n@@ -78,11 +71,4 @@ jobs:\n         ./y.rs prepare\n \n     - name: Test\n-      run: |\n-        # Enable backtraces for easier debugging\n-        export RUST_BACKTRACE=1\n-\n-        # Enable extra checks\n-        export CG_CLIF_ENABLE_VERIFIER=1\n-\n-        ./scripts/test_rustc_tests.sh\n+      run: ./scripts/test_rustc_tests.sh"}, {"sha": "2f311aed7c8dbad41c383ed9d3a8b88ae189338b", "filename": "build_system/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a501d96f3368575eb9a8feeb3f16f5900dc06b48/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a501d96f3368575eb9a8feeb3f16f5900dc06b48/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=a501d96f3368575eb9a8feeb3f16f5900dc06b48", "patch": "@@ -64,12 +64,18 @@ pub(crate) enum SysrootKind {\n }\n \n pub fn main() {\n+    if env::var(\"RUST_BACKTRACE\").is_err() {\n+        env::set_var(\"RUST_BACKTRACE\", \"1\");\n+    }\n     env::set_var(\"CG_CLIF_DISPLAY_CG_TIME\", \"1\");\n     env::set_var(\"CG_CLIF_DISABLE_INCR_CACHE\", \"1\");\n \n     if is_ci() {\n         // Disabling incr comp reduces cache size and incr comp doesn't save as much on CI anyway\n         env::set_var(\"CARGO_BUILD_INCREMENTAL\", \"false\");\n+\n+        // Enable the Cranelift verifier\n+        env::set_var(\"CG_CLIF_ENABLE_VERIFIER\", \"1\");\n     }\n \n     let mut args = env::args().skip(1);"}, {"sha": "37c35106af6d39488dffbbaa6c9f92033b9f22f9", "filename": "build_system/tests.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a501d96f3368575eb9a8feeb3f16f5900dc06b48/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a501d96f3368575eb9a8feeb3f16f5900dc06b48/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=a501d96f3368575eb9a8feeb3f16f5900dc06b48", "patch": "@@ -2,9 +2,9 @@ use super::build_sysroot;\n use super::config;\n use super::path::{Dirs, RelPath};\n use super::prepare::GitRepo;\n-use super::rustc_info::get_wrapper_file_name;\n+use super::rustc_info::{get_file_name, get_wrapper_file_name};\n use super::utils::{\n-    hyperfine_command, spawn_and_wait, spawn_and_wait_with_input, CargoProject, Compiler,\n+    hyperfine_command, is_ci, spawn_and_wait, spawn_and_wait_with_input, CargoProject, Compiler,\n };\n use super::SysrootKind;\n use std::env;\n@@ -281,7 +281,10 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::new(\"bench.simple-raytracer\", &|runner| {\n-        let run_runs = env::var(\"RUN_RUNS\").unwrap_or(\"10\".to_string()).parse().unwrap();\n+        let run_runs = env::var(\"RUN_RUNS\")\n+            .unwrap_or(if is_ci() { \"2\" } else { \"10\" }.to_string())\n+            .parse()\n+            .unwrap();\n \n         if runner.is_native {\n             eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n@@ -315,13 +318,20 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n \n             eprintln!(\"[BENCH RUN] ebobby/simple-raytracer\");\n             fs::copy(\n-                target_dir.join(\"debug\").join(\"main\"),\n-                RelPath::BUILD.to_path(&runner.dirs).join(\"raytracer_cg_clif\"),\n+                target_dir.join(\"debug\").join(get_file_name(\"main\", \"bin\")),\n+                RelPath::BUILD\n+                    .to_path(&runner.dirs)\n+                    .join(get_file_name(\"raytracer_cg_clif\", \"bin\")),\n             )\n             .unwrap();\n \n-            let mut bench_run =\n-                hyperfine_command(0, run_runs, None, \"./raytracer_cg_llvm\", \"./raytracer_cg_clif\");\n+            let mut bench_run = hyperfine_command(\n+                0,\n+                run_runs,\n+                None,\n+                Path::new(\".\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")).to_str().unwrap(),\n+                Path::new(\".\").join(get_file_name(\"raytracer_cg_clif\", \"bin\")).to_str().unwrap(),\n+            );\n             bench_run.current_dir(RelPath::BUILD.to_path(&runner.dirs));\n             spawn_and_wait(bench_run);\n         } else {"}]}