{"sha": "4519f54857af1e4fa9deca42bde218078865b125", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MTlmNTQ4NTdhZjFlNGZhOWRlY2E0MmJkZTIxODA3ODg2NWIxMjU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-06-30T07:18:41Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-06-30T19:37:30Z"}, "message": "Warn for unused variables\n\nModify typestate to check for unused variables and emit warnings\nwhere relevant. This exposed a (previously harmless) bug in\ncollect_locals where outer functions had bit-vector entries\nfor init constraints for variables declared in their inner\nnested functions. Fixing that required changing collect_locals to\nuse visit instead of walk -- probably a good thing anyway.", "tree": {"sha": "8596a08a7286a3b44ee7a3b00d006e46695d1c64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8596a08a7286a3b44ee7a3b00d006e46695d1c64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4519f54857af1e4fa9deca42bde218078865b125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4519f54857af1e4fa9deca42bde218078865b125", "html_url": "https://github.com/rust-lang/rust/commit/4519f54857af1e4fa9deca42bde218078865b125", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4519f54857af1e4fa9deca42bde218078865b125/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "add9031dd5c2814195df163b1d35a853876c64f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/add9031dd5c2814195df163b1d35a853876c64f6", "html_url": "https://github.com/rust-lang/rust/commit/add9031dd5c2814195df163b1d35a853876c64f6"}], "stats": {"total": 191, "additions": 122, "deletions": 69}, "files": [{"sha": "3ed1a56928acffd431d1264f2b0f773b83d83ffc", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=4519f54857af1e4fa9deca42bde218078865b125", "patch": "@@ -51,15 +51,15 @@ fn collect_ids_local(&@local l, @mutable vec[node_id] rs) {\n     vec::push(*rs, l.node.id);\n }\n \n-fn node_ids_in_fn(&_fn f, &span sp, &fn_ident i, node_id id,\n-                  @mutable vec[node_id] rs) {\n+fn node_ids_in_fn(&_fn f, &vec[ty_param] tps, &span sp, &fn_ident i,\n+                  node_id id, @mutable vec[node_id] rs) {\n     auto collect_ids = walk::default_visitor();\n     collect_ids =\n         rec(visit_expr_pre=bind collect_ids_expr(_, rs),\n             visit_block_pre=bind collect_ids_block(_, rs),\n             visit_stmt_pre=bind collect_ids_stmt(_, rs),\n             visit_local_pre=bind collect_ids_local(_, rs) with collect_ids);\n-    walk::walk_fn(collect_ids, f, sp, i, id);\n+    walk::walk_fn(collect_ids, f, tps, sp, i, id);\n }\n \n fn init_vecs(&crate_ctxt ccx, &vec[node_id] node_ids, uint len) {\n@@ -69,24 +69,24 @@ fn init_vecs(&crate_ctxt ccx, &vec[node_id] node_ids, uint len) {\n     }\n }\n \n-fn visit_fn(&crate_ctxt ccx, uint num_constraints, &_fn f, &span sp,\n-            &fn_ident i, node_id id) {\n+fn visit_fn(&crate_ctxt ccx, uint num_constraints, &_fn f, &vec[ty_param] tps,\n+            &span sp, &fn_ident i, node_id id) {\n     let @mutable vec[node_id] node_ids = @mutable [];\n-    node_ids_in_fn(f, sp, i, id, node_ids);\n+    node_ids_in_fn(f, tps, sp, i, id, node_ids);\n     auto node_id_vec = *node_ids;\n     init_vecs(ccx, node_id_vec, num_constraints);\n }\n \n-fn annotate_in_fn(&crate_ctxt ccx, &_fn f, &span sp, &fn_ident i,\n-                  node_id id) {\n+fn annotate_in_fn(&crate_ctxt ccx, &_fn f, &vec[ty_param] tps,\n+                  &span sp, &fn_ident i, node_id id) {\n     auto f_info = get_fn_info(ccx, id);\n-    visit_fn(ccx, num_constraints(f_info), f, sp, i, id);\n+    visit_fn(ccx, num_constraints(f_info), f, tps, sp, i, id);\n }\n \n fn annotate_crate(&crate_ctxt ccx, &crate crate) {\n     auto do_ann = walk::default_visitor();\n     do_ann =\n-        rec(visit_fn_pre=bind annotate_in_fn(ccx, _, _, _, _) with do_ann);\n+        rec(visit_fn_pre=bind annotate_in_fn(ccx, _, _, _, _, _) with do_ann);\n     walk::walk_crate(do_ann, crate);\n }\n //"}, {"sha": "02a1798ad1bca618a2e9c70c5b334fc576126fe3", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=4519f54857af1e4fa9deca42bde218078865b125", "patch": "@@ -217,7 +217,15 @@ type norm_constraint = rec(uint bit_num, constr c);\n \n type constr_map = @std::map::hashmap[node_id, constraint];\n \n-type fn_info = rec(constr_map constrs, uint num_constraints, controlflow cf);\n+type fn_info = rec(constr_map constrs,\n+                   uint num_constraints,\n+                   controlflow cf,\n+                   /* list, accumulated during pre/postcondition\n+                    computation, of all local variables that may be\n+                    used*/\n+                   // Doesn't seem to work without the @ --\n+                   // bug?\n+                   @mutable vec[node_id] used_vars);\n \n \n /* mapping from node ID to typestate annotation */\n@@ -770,6 +778,16 @@ fn args_mention(&vec[@constr_arg_use] args, &def_id v) -> bool {\n     ret util::common::any[@constr_arg_use](bind mentions(v,_), args);\n }\n \n+fn use_var(&fn_ctxt fcx, &node_id v) {\n+    vec::push(*fcx.enclosing.used_vars, v);\n+}\n+\n+fn vec_contains(&@mutable vec[node_id] v, &node_id i) -> bool {\n+    for (node_id d in *v) {\n+        if (d == i) { ret true; }\n+    }\n+    ret false;\n+}\n //\n // Local Variables:\n // mode: rust"}, {"sha": "ebf5d7bab3ce8c6b50bb6c8476a591869bdc8f4d", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=4519f54857af1e4fa9deca42bde218078865b125", "patch": "@@ -42,26 +42,31 @@ import std::option;\n import std::option::t;\n import std::option::some;\n import std::option::none;\n-import aux::fn_ctxt;\n-import aux::crate_ctxt;\n-import aux::new_crate_ctxt;\n-import aux::expr_precond;\n-import aux::expr_prestate;\n-import aux::expr_poststate;\n-import aux::stmt_poststate;\n-import aux::stmt_to_ann;\n-import aux::num_constraints;\n-import aux::tritv_to_str;\n-import aux::first_difference_string;\n+import aux::*;\n import pretty::pprust::ty_to_str;\n import util::common::log_stmt_err;\n-import aux::log_tritv_err;\n import bitvectors::promises;\n import annotate::annotate_crate;\n import collect_locals::mk_f_to_fn_info;\n import pre_post_conditions::fn_pre_post;\n import states::find_pre_post_state_fn;\n \n+fn check_unused_vars(&fn_ctxt fcx) {\n+    // FIXME: could be more efficient\n+    for (norm_constraint c in constraints(fcx)) {\n+        alt (c.c.node.c) {\n+            case (ninit(?v)) {\n+                if (!vec_contains(fcx.enclosing.used_vars,\n+                                  c.c.node.id)) {\n+                    fcx.ccx.tcx.sess.span_warn(c.c.span,\n+                                               \"Unused variable \" + v);\n+                }\n+            }\n+            case (_) { /* ignore pred constraints */ }\n+        }\n+    }\n+}\n+\n fn check_states_expr(&fn_ctxt fcx, &@expr e) {\n     let precond prec = expr_precond(fcx.ccx, e);\n     let prestate pres = expr_prestate(fcx.ccx, e);\n@@ -119,8 +124,8 @@ fn check_states_stmt(&fn_ctxt fcx, &@stmt s) {\n     }\n }\n \n-fn check_states_against_conditions(&fn_ctxt fcx, &_fn f, node_id id,\n-                                   &span sp, &fn_ident i) {\n+fn check_states_against_conditions(&fn_ctxt fcx, &_fn f, &vec[ast::ty_param] tps,\n+                                   node_id id, &span sp, &fn_ident i) {\n     /* Postorder traversal instead of pre is important\n        because we want the smallest possible erroneous statement\n        or expression. */\n@@ -142,9 +147,9 @@ fn check_states_against_conditions(&fn_ctxt fcx, &_fn f, node_id id,\n                   keep_going=bind kg(keepgoing)\n                   with walk::default_visitor());\n \n-    walk::walk_fn(v, f, sp, i, id);\n+    walk::walk_fn(v, f, tps, sp, i, id);\n \n-    /* Finally, check that the return value is initialized */\n+    /* Check that the return value is initialized */\n     auto post = aux::block_poststate(fcx.ccx, f.body);\n     let aux::constr_ ret_c = rec(id=fcx.id, c=aux::ninit(fcx.name));\n     if (f.proto == ast::proto_fn && !promises(fcx, post, ret_c) &&\n@@ -170,9 +175,13 @@ fn check_states_against_conditions(&fn_ctxt fcx, &_fn f, node_id id,\n                                            return to the caller\");\n         }\n     }\n+\n+    /* Finally, check for unused variables */\n+    check_unused_vars(fcx);\n }\n \n-fn check_fn_states(&fn_ctxt fcx, &_fn f, node_id id, &span sp, &fn_ident i) {\n+fn check_fn_states(&fn_ctxt fcx, &_fn f, &vec[ast::ty_param] tps,\n+                   node_id id, &span sp, &fn_ident i) {\n     /* Compute the pre- and post-states for this function */\n \n     // Fixpoint iteration\n@@ -181,17 +190,18 @@ fn check_fn_states(&fn_ctxt fcx, &_fn f, node_id id, &span sp, &fn_ident i) {\n     /* Now compare each expr's pre-state to its precondition\n        and post-state to its postcondition */\n \n-    check_states_against_conditions(fcx, f, id, sp, i);\n+    check_states_against_conditions(fcx, f, tps, id, sp, i);\n }\n \n-fn fn_states(&crate_ctxt ccx, &_fn f, &span sp, &fn_ident i, node_id id) {\n+fn fn_states(&crate_ctxt ccx, &_fn f, &vec[ast::ty_param] tps,\n+             &span sp, &fn_ident i, node_id id) {\n     /* Look up the var-to-bit-num map for this function */\n \n     assert (ccx.fm.contains_key(id));\n     auto f_info = ccx.fm.get(id);\n     auto name = option::from_maybe(\"anon\", i);\n     auto fcx = rec(enclosing=f_info, id=id, name=name, ccx=ccx);\n-    check_fn_states(fcx, f, id, sp, i);\n+    check_fn_states(fcx, f, tps, id, sp, i);\n }\n \n fn check_crate(ty::ctxt cx, @crate crate) {\n@@ -206,15 +216,16 @@ fn check_crate(ty::ctxt cx, @crate crate) {\n \n     auto do_pre_post = walk::default_visitor();\n     do_pre_post =\n-        rec(visit_fn_post=bind fn_pre_post(ccx, _, _, _, _)\n+        rec(visit_fn_post=bind fn_pre_post(ccx, _, _, _, _, _)\n             with do_pre_post);\n     walk::walk_crate(do_pre_post, *crate);\n     /* Check the pre- and postcondition against the pre- and poststate\n        for every expression */\n \n     auto do_states = walk::default_visitor();\n     do_states =\n-        rec(visit_fn_post=bind fn_states(ccx, _, _, _, _) with do_states);\n+        rec(visit_fn_post=bind fn_states(ccx, _, _, _, _, _)\n+            with do_states);\n     walk::walk_crate(do_states, *crate);\n }\n //"}, {"sha": "f2e271f1afa63ad133ca8d7fe7d0be27666c2904", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=4519f54857af1e4fa9deca42bde218078865b125", "patch": "@@ -28,13 +28,14 @@ import util::common::respan;\n \n type ctxt = rec(@mutable vec[aux::constr] cs, ty::ctxt tcx);\n \n-fn collect_local(&ctxt cx, &@local loc) {\n+fn collect_local(&@local loc, &ctxt cx, &visit::vt[ctxt] v) {\n     log \"collect_local: pushing \" + loc.node.ident;\n     vec::push(*cx.cs,\n               respan(loc.span, rec(id=loc.node.id, c=ninit(loc.node.ident))));\n+    visit::visit_local(loc, cx, v);\n }\n \n-fn collect_pred(&ctxt cx, &@expr e) {\n+fn collect_pred(&@expr e, &ctxt cx, &visit::vt[ctxt] v) {\n     alt (e.node) {\n         case (expr_check(_, ?ch)) {\n             vec::push(*cx.cs, expr_to_constr(cx.tcx, ch));\n@@ -55,16 +56,25 @@ fn collect_pred(&ctxt cx, &@expr e) {\n         }\n         case (_) { }\n     }\n+    // visit subexpressions\n+    visit::visit_expr(e, cx, v);\n }\n \n-fn find_locals(&ty::ctxt tcx, &_fn f, &span sp, &fn_ident i, node_id id)\n+fn do_nothing(&@item i, &ctxt ignore1, &visit::vt[ctxt] ignore) {\n+}\n+ \n+fn find_locals(&ty::ctxt tcx, &_fn f, &vec[ast::ty_param] tps,\n+               &span sp, &fn_ident i, node_id id)\n     -> ctxt {\n     let ctxt cx = rec(cs=@mutable vec::alloc(0u), tcx=tcx);\n-    auto visitor = walk::default_visitor();\n+    auto visitor = visit::default_visitor[ctxt]();\n+\n     visitor =\n-        rec(visit_local_pre=bind collect_local(cx, _),\n-            visit_expr_pre=bind collect_pred(cx, _) with visitor);\n-    walk_fn(visitor, f, sp, i, id);\n+        @rec(visit_local=collect_local,\n+             visit_expr=collect_pred,\n+             visit_item=do_nothing\n+             with *visitor);\n+    visit::visit_fn(f, tps, sp, i, id, cx, visit::vtor(visitor));\n     ret cx;\n }\n \n@@ -104,15 +114,16 @@ fn add_constraint(&ty::ctxt tcx, aux::constr c, uint next, constr_map tbl) ->\n \n /* builds a table mapping each local var defined in f\n    to a bit number in the precondition/postcondition vectors */\n-fn mk_fn_info(&crate_ctxt ccx, &_fn f, &span f_sp, &fn_ident f_name,\n+fn mk_fn_info(&crate_ctxt ccx, &_fn f, &vec[ast::ty_param] tp,\n+              &span f_sp, &fn_ident f_name,\n               node_id id) {\n     auto res_map = @new_int_hash[constraint]();\n     let uint next = 0u;\n     let vec[arg] f_args = f.decl.inputs;\n     /* ignore args, which we know are initialized;\n        just collect locally declared vars */\n \n-    let ctxt cx = find_locals(ccx.tcx, f, f_sp, f_name, id);\n+    let ctxt cx = find_locals(ccx.tcx, f, tp, f_sp, f_name, id);\n     /* now we have to add bit nums for both the constraints\n        and the variables... */\n \n@@ -125,10 +136,12 @@ fn mk_fn_info(&crate_ctxt ccx, &_fn f, &span f_sp, &fn_ident f_name,\n     auto name = fn_ident_to_string(id, f_name);\n     add_constraint(cx.tcx, respan(f_sp, rec(id=id, c=ninit(name))), next,\n                    res_map);\n+    let @mutable vec[node_id] v = @mutable [];\n     auto rslt =\n         rec(constrs=res_map,\n             num_constraints=vec::len(*cx.cs) + 1u,\n-            cf=f.decl.cf);\n+            cf=f.decl.cf,\n+            used_vars=v);\n     ccx.fm.insert(id, rslt);\n     log name + \" has \" + uistr(num_constraints(rslt)) + \" constraints\";\n }\n@@ -140,7 +153,7 @@ fn mk_fn_info(&crate_ctxt ccx, &_fn f, &span f_sp, &fn_ident f_name,\n fn mk_f_to_fn_info(&crate_ctxt ccx, @crate c) {\n     let ast_visitor vars_visitor = walk::default_visitor();\n     vars_visitor =\n-        rec(visit_fn_pre=bind mk_fn_info(ccx, _, _, _, _)\n+        rec(visit_fn_pre=bind mk_fn_info(ccx, _, _, _, _, _)\n             with vars_visitor);\n     walk_crate(vars_visitor, *c);\n }"}, {"sha": "207fd7d3a90fd721e02b3f5f2852ddcad35c3af4", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=4519f54857af1e4fa9deca42bde218078865b125", "patch": "@@ -55,6 +55,7 @@ import aux::substitute_constr_args;\n import aux::ninit;\n import aux::npred;\n import aux::path_to_ident;\n+import aux::use_var;\n import bitvectors::bit_num;\n import bitvectors::promises;\n import bitvectors::seq_preconds;\n@@ -74,10 +75,12 @@ import util::common::elt_exprs;\n import util::common::field_exprs;\n import util::common::has_nonlocal_exits;\n import util::common::log_stmt;\n+import util::common::log_stmt_err;\n import util::common::log_expr_err;\n import util::common::log_block_err;\n import util::common::log_block;\n import util::common::span;\n+import util::common::istr;\n import pretty::ppaux::fn_ident_to_string;\n \n fn find_pre_post_mod(&_mod m) -> _mod {\n@@ -109,11 +112,12 @@ fn find_pre_post_item(&crate_ctxt ccx, &item i) {\n     alt (i.node) {\n         case (item_const(_, ?e)) {\n             // make a fake fcx\n-\n+            let @mutable vec[node_id] v = @mutable [];\n             auto fake_fcx =\n                 rec(enclosing=rec(constrs=@new_int_hash[constraint](),\n                                   num_constraints=0u,\n-                                  cf=return),\n+                                  cf=return,\n+                                  used_vars=v),\n                     id=0,\n                     name=\"\",\n                     ccx=ccx);\n@@ -323,6 +327,7 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) {\n                         bit_num(fcx,\n                                 rec(id=d_id._1,\n                                     c=ninit(path_to_ident(fcx.ccx.tcx, p))));\n+                    use_var(fcx, d_id._1);\n                     require_and_preserve(i, rslt);\n                 }\n                 case (_) {/* nothing to check */ }\n@@ -686,6 +691,9 @@ fn find_pre_post_block(&fn_ctxt fcx, block b) {\n }\n \n fn find_pre_post_fn(&fn_ctxt fcx, &_fn f) {\n+    // hack\n+    use_var(fcx, fcx.id);\n+\n     find_pre_post_block(fcx, f.body);\n \n     // Treat the tail expression as a return statement\n@@ -697,8 +705,8 @@ fn find_pre_post_fn(&fn_ctxt fcx, &_fn f) {\n     }\n }\n \n-fn fn_pre_post(crate_ctxt ccx, &_fn f, &span sp, &fn_ident i,\n-               node_id id) {\n+fn fn_pre_post(crate_ctxt ccx, &_fn f, &vec[ty_param] tps,\n+               &span sp, &fn_ident i, node_id id) {\n     assert (ccx.fm.contains_key(id));\n     auto fcx = rec(enclosing=ccx.fm.get(id), id=id,\n                    name=fn_ident_to_string(id, i), ccx=ccx);"}, {"sha": "06c5a2e80ec4b5766332b9ec468be68f7135aee2", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=4519f54857af1e4fa9deca42bde218078865b125", "patch": "@@ -1025,21 +1025,21 @@ mod writeback {\n         fn visit_item_post(@mutable bool ignore, &@ast::item item) {\n             *ignore = false;\n         }\n-        fn visit_fn_pre(@mutable bool ignore, &ast::_fn f, &span sp,\n-                        &ast::fn_ident i, ast::node_id d) {\n+        fn visit_fn_pre(@mutable bool ignore, &ast::_fn f, &vec[ast::ty_param] tps,\n+                        &span sp, &ast::fn_ident i, ast::node_id d) {\n             *ignore = true;\n         }\n-        fn visit_fn_post(@mutable bool ignore, &ast::_fn f, &span sp,\n-                         &ast::fn_ident i, ast::node_id d) {\n+        fn visit_fn_post(@mutable bool ignore, &ast::_fn f, &vec[ast::ty_param] tps, \n+                         &span sp, &ast::fn_ident i, ast::node_id d) {\n             *ignore = false;\n         }\n         fn keep_going(@mutable bool ignore) -> bool { ret !*ignore; }\n         auto visit =\n             rec(keep_going=bind keep_going(ignore),\n                 visit_item_pre=bind visit_item_pre(ignore, _),\n                 visit_item_post=bind visit_item_post(ignore, _),\n-                visit_fn_pre=bind visit_fn_pre(ignore, _, _, _, _),\n-                visit_fn_post=bind visit_fn_post(ignore, _, _, _, _),\n+                visit_fn_pre=bind visit_fn_pre(ignore, _, _, _, _, _),\n+                visit_fn_post=bind visit_fn_post(ignore, _, _, _, _, _),\n                 visit_stmt_pre=bind visit_stmt_pre(fcx, _),\n                 visit_expr_pre=bind visit_expr_pre(fcx, _),\n                 visit_block_pre=bind visit_block_pre(fcx, _),"}, {"sha": "707eae8d30f74d1fd211d7dd002fe6e47b80717f", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4519f54857af1e4fa9deca42bde218078865b125/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=4519f54857af1e4fa9deca42bde218078865b125", "patch": "@@ -1,5 +1,6 @@\n \n import front::ast;\n+import middle::ty::ty_param;\n import std::option;\n import std::option::some;\n import std::option::none;\n@@ -38,8 +39,8 @@ type ast_visitor =\n         fn(&@ast::ty)  visit_ty_pre,\n         fn(&@ast::ty)  visit_ty_post,\n         fn(&@ast::constr)  visit_constr,\n-        fn(&ast::_fn, &span, &ast::fn_ident, ast::node_id) visit_fn_pre,\n-        fn(&ast::_fn, &span, &ast::fn_ident, ast::node_id) visit_fn_post);\n+        fn(&ast::_fn, &vec[ast::ty_param], &span, &ast::fn_ident, ast::node_id) visit_fn_pre,\n+        fn(&ast::_fn, &vec[ast::ty_param], &span, &ast::fn_ident, ast::node_id) visit_fn_post);\n \n fn walk_crate(&ast_visitor v, &ast::crate c) {\n     if (!v.keep_going()) { ret; }\n@@ -99,14 +100,14 @@ fn walk_item(&ast_visitor v, @ast::item i) {\n     v.visit_item_pre(i);\n     alt (i.node) {\n         case (ast::item_const(?t, ?e)) { walk_ty(v, t); walk_expr(v, e); }\n-        case (ast::item_fn(?f, _)) {\n-            walk_fn(v, f, i.span, some(i.ident), i.id);\n+        case (ast::item_fn(?f, ?tps)) {\n+            walk_fn(v, f, tps, i.span, some(i.ident), i.id);\n         }\n         case (ast::item_mod(?m)) { walk_mod(v, m); }\n         case (ast::item_native_mod(?nm)) { walk_native_mod(v, nm); }\n         case (ast::item_ty(?t, _)) { walk_ty(v, t); }\n-        case (ast::item_res(?f, ?dtor_id, _, _)) {\n-            walk_fn(v, f, i.span, some(i.ident), dtor_id);\n+        case (ast::item_res(?f, ?dtor_id, ?tps, _)) {\n+            walk_fn(v, f, tps, i.span, some(i.ident), dtor_id);\n         }\n         case (ast::item_tag(?variants, _)) {\n             for (ast::variant vr in variants) {\n@@ -119,14 +120,15 @@ fn walk_item(&ast_visitor v, @ast::item i) {\n             for (ast::obj_field f in ob.fields) { walk_ty(v, f.ty); }\n             for (@ast::method m in ob.methods) {\n                 v.visit_method_pre(m);\n-                walk_fn(v, m.node.meth, m.span,\n+                // Methods don't have ty params?\n+                walk_fn(v, m.node.meth, [], m.span,\n                         some(m.node.ident), m.node.id);\n                 v.visit_method_post(m);\n             }\n             alt (ob.dtor) {\n                 case (none) { }\n                 case (some(?m)) {\n-                    walk_fn(v, m.node.meth, m.span,\n+                    walk_fn(v, m.node.meth, [], m.span,\n                             some(m.node.ident), m.node.id);\n                 }\n             }\n@@ -220,13 +222,13 @@ fn walk_fn_decl(&ast_visitor v, &ast::fn_decl fd) {\n     walk_ty(v, fd.output);\n }\n \n-fn walk_fn(&ast_visitor v, &ast::_fn f, &span sp, &ast::fn_ident i,\n-           ast::node_id d) {\n+fn walk_fn(&ast_visitor v, &ast::_fn f, &vec[ast::ty_param] tps,\n+           &span sp, &ast::fn_ident i, ast::node_id d) {\n     if (!v.keep_going()) { ret; }\n-    v.visit_fn_pre(f, sp, i, d);\n+    v.visit_fn_pre(f, tps, sp, i, d);\n     walk_fn_decl(v, f.decl);\n     walk_block(v, f.body);\n-    v.visit_fn_post(f, sp, i, d);\n+    v.visit_fn_post(f, tps, sp, i, d);\n }\n \n fn walk_block(&ast_visitor v, &ast::block b) {\n@@ -343,7 +345,7 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n             }\n         }\n         case (ast::expr_fn(?f)) {\n-            walk_fn(v, f, e.span, none, e.id);\n+            walk_fn(v, f, [], e.span, none, e.id);\n         }\n         case (ast::expr_block(?b)) { walk_block(v, b); }\n         case (ast::expr_assign(?a, ?b)) {\n@@ -407,7 +409,7 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n             // Methods\n             for (@ast::method m in anon_obj.methods) {\n                 v.visit_method_pre(m);\n-                walk_fn(v, m.node.meth, m.span, some(m.node.ident),\n+                walk_fn(v, m.node.meth, [], m.span, some(m.node.ident),\n                         m.node.id);\n                 v.visit_method_post(m);\n             }\n@@ -450,7 +452,8 @@ fn def_visit_ty(&@ast::ty t) { }\n \n fn def_visit_constr(&@ast::constr c) { }\n \n-fn def_visit_fn(&ast::_fn f, &span sp, &ast::fn_ident i, ast::node_id d) { }\n+fn def_visit_fn(&ast::_fn f, &vec[ast::ty_param] tps,\n+  &span sp, &ast::fn_ident i, ast::node_id d) { }\n \n fn default_visitor() -> ast_visitor {\n     ret rec(keep_going=def_keep_going,"}]}