{"sha": "2dd2fb728e61a6e7912e1e2818407625ad806bb9", "node_id": "C_kwDOAAsO6NoAKDJkZDJmYjcyOGU2MWE2ZTc5MTJlMWUyODE4NDA3NjI1YWQ4MDZiYjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-28T21:22:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-28T21:22:18Z"}, "message": "Rollup merge of #104493 - adamncasey:cgroupzeroperiod, r=m-ou-se\n\navailable_parallelism: Gracefully handle zero value cfs_period_us\n\nThere seem to be some scenarios where the cgroup cpu quota field `cpu.cfs_period_us` can contain `0`. This field is used to determine the \"amount\" of parallelism suggested by the function `std::thread::available_parallelism`\n\nA zero value of this field cause a panic when `available_parallelism()` is invoked. This issue was detected by the call from binaries built by `cargo test`. I really don't feel like `0` is a good value for `cpu.cfs_period_us`, but I also don't think applications should panic if this value is seen.\n\nThis panic started happening with rust 1.64.0.\n\nThis case is gracefully handled by other projects which read this information: [num_cpus](https://github.com/seanmonstar/num_cpus/blob/e437b9d9083d717692e35d917de8674a7987dd06/src/linux.rs#L207-L210), [ninja](https://github.com/ninja-build/ninja/pull/2174/files), [dotnet](https://github.com/dotnet/runtime/blob/c4341d45acca3ea662cd8d71e7d71094450dd045/src/coreclr/pal/src/misc/cgroup.cpp#L481-L483)\n\nBefore this change, running `cargo test` in environments configured as described above would trigger this panic:\n```\n$ RUST_BACKTRACE=1 cargo test\n    Finished test [unoptimized + debuginfo] target(s) in 3.55s\n     Running unittests src/main.rs (target/debug/deps/x-9a42e145aca2934d)\nthread 'main' panicked at 'attempt to divide by zero', library/std/src/sys/unix/thread.rs:546:70\nstack backtrace:\n   0: rust_begin_unwind\n   1: core::panicking::panic_fmt\n   2: core::panicking::panic\n   3: std::sys::unix::thread::cgroups::quota\n   4: std::sys::unix::thread::available_parallelism\n   5: std::thread::available_parallelism\n   6: test::helpers::concurrency::get_concurrency\n   7: test::console::run_tests_console\n   8: test::test_main\n   9: test::test_main_static\n  10: x::main\n             at ./src/main.rs:1:1\n  11: core::ops::function::FnOnce::call_once\n             at /tmp/rust-1.64-1.64.0-1/library/core/src/ops/function.rs:248:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nerror: test failed, to rerun pass '--bin x'\n```\n\nI've tested this change in an environment which has the bad (questionable?) setup and rebuilding the test executable against a fixed std library fixes the panic.", "tree": {"sha": "0ce7e04d8cc2e0c10601a13db280fa68fba8fe48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ce7e04d8cc2e0c10601a13db280fa68fba8fe48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dd2fb728e61a6e7912e1e2818407625ad806bb9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjrLOKCRBK7hj4Ov3rIwAAKboIAEjUqIh+wXYqvJm0JLk0TRf1\nfzPerYEoIhysiiZRJdV31Z1Lf0SBf0gX50+CvIJaZFs9sAV4r8p390gn5P2L7GSn\nObBeJrv5NKZ0wu6HQNo1DE6Fqv80mkEboR91bMcJsEKTv2Yg0qCmxQ/OBIRedlz/\ngak2UQt1LM5m2vZ7/JTYB2vsqblWxRofD1d57eFrFg+5dfrdsiDroWcDCFWHqLBk\n1WIZjEv8xcJDKJ0pNT0Jb7DcTqyGNrJWsfRq3NJ7vJwPH/UJK90pEqGT7bboucjd\nknahLSGROPwz+fc9iOrmDRhEGvXK7ppNYvbO9LKHKUXxAthcQnhf7P3NPSMKQ6Q=\n=JHUv\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ce7e04d8cc2e0c10601a13db280fa68fba8fe48\nparent d91432832e585f641976037eca8ee7aa2a7d346d\nparent 04f1ead55243c895da7c3703e2daca319f381124\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672262538 +0100\ncommitter GitHub <noreply@github.com> 1672262538 +0100\n\nRollup merge of #104493 - adamncasey:cgroupzeroperiod, r=m-ou-se\n\navailable_parallelism: Gracefully handle zero value cfs_period_us\n\nThere seem to be some scenarios where the cgroup cpu quota field `cpu.cfs_period_us` can contain `0`. This field is used to determine the \"amount\" of parallelism suggested by the function `std::thread::available_parallelism`\n\nA zero value of this field cause a panic when `available_parallelism()` is invoked. This issue was detected by the call from binaries built by `cargo test`. I really don't feel like `0` is a good value for `cpu.cfs_period_us`, but I also don't think applications should panic if this value is seen.\n\nThis panic started happening with rust 1.64.0.\n\nThis case is gracefully handled by other projects which read this information: [num_cpus](https://github.com/seanmonstar/num_cpus/blob/e437b9d9083d717692e35d917de8674a7987dd06/src/linux.rs#L207-L210), [ninja](https://github.com/ninja-build/ninja/pull/2174/files), [dotnet](https://github.com/dotnet/runtime/blob/c4341d45acca3ea662cd8d71e7d71094450dd045/src/coreclr/pal/src/misc/cgroup.cpp#L481-L483)\n\nBefore this change, running `cargo test` in environments configured as described above would trigger this panic:\n```\n$ RUST_BACKTRACE=1 cargo test\n    Finished test [unoptimized + debuginfo] target(s) in 3.55s\n     Running unittests src/main.rs (target/debug/deps/x-9a42e145aca2934d)\nthread 'main' panicked at 'attempt to divide by zero', library/std/src/sys/unix/thread.rs:546:70\nstack backtrace:\n   0: rust_begin_unwind\n   1: core::panicking::panic_fmt\n   2: core::panicking::panic\n   3: std::sys::unix::thread::cgroups::quota\n   4: std::sys::unix::thread::available_parallelism\n   5: std::thread::available_parallelism\n   6: test::helpers::concurrency::get_concurrency\n   7: test::console::run_tests_console\n   8: test::test_main\n   9: test::test_main_static\n  10: x::main\n             at ./src/main.rs:1:1\n  11: core::ops::function::FnOnce::call_once\n             at /tmp/rust-1.64-1.64.0-1/library/core/src/ops/function.rs:248:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nerror: test failed, to rerun pass '--bin x'\n```\n\nI've tested this change in an environment which has the bad (questionable?) setup and rebuilding the test executable against a fixed std library fixes the panic.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd2fb728e61a6e7912e1e2818407625ad806bb9", "html_url": "https://github.com/rust-lang/rust/commit/2dd2fb728e61a6e7912e1e2818407625ad806bb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dd2fb728e61a6e7912e1e2818407625ad806bb9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d91432832e585f641976037eca8ee7aa2a7d346d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d91432832e585f641976037eca8ee7aa2a7d346d", "html_url": "https://github.com/rust-lang/rust/commit/d91432832e585f641976037eca8ee7aa2a7d346d"}, {"sha": "04f1ead55243c895da7c3703e2daca319f381124", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f1ead55243c895da7c3703e2daca319f381124", "html_url": "https://github.com/rust-lang/rust/commit/04f1ead55243c895da7c3703e2daca319f381124"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "b251949bda207e1bf0fcfa99750e7311f4412dce", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd2fb728e61a6e7912e1e2818407625ad806bb9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd2fb728e61a6e7912e1e2818407625ad806bb9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=2dd2fb728e61a6e7912e1e2818407625ad806bb9", "patch": "@@ -505,7 +505,7 @@ mod cgroups {\n                     let limit = raw_quota.next()?;\n                     let period = raw_quota.next()?;\n                     match (limit.parse::<usize>(), period.parse::<usize>()) {\n-                        (Ok(limit), Ok(period)) => {\n+                        (Ok(limit), Ok(period)) if period > 0 => {\n                             quota = quota.min(limit / period);\n                         }\n                         _ => {}\n@@ -565,7 +565,7 @@ mod cgroups {\n                 let period = parse_file(\"cpu.cfs_period_us\");\n \n                 match (limit, period) {\n-                    (Some(limit), Some(period)) => quota = quota.min(limit / period),\n+                    (Some(limit), Some(period)) if period > 0 => quota = quota.min(limit / period),\n                     _ => {}\n                 }\n "}]}