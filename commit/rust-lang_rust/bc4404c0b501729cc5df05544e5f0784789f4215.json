{"sha": "bc4404c0b501729cc5df05544e5f0784789f4215", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNDQwNGMwYjUwMTcyOWNjNWRmMDU1NDRlNWYwNzg0Nzg5ZjQyMTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-19T15:26:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T22:35:06Z"}, "message": "improve handling for subtype\n\nStill not great, but good enough to land this PR.", "tree": {"sha": "82de553fe5dd5c502c28d9e5f5714f17126d6198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82de553fe5dd5c502c28d9e5f5714f17126d6198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc4404c0b501729cc5df05544e5f0784789f4215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4404c0b501729cc5df05544e5f0784789f4215", "html_url": "https://github.com/rust-lang/rust/commit/bc4404c0b501729cc5df05544e5f0784789f4215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc4404c0b501729cc5df05544e5f0784789f4215/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a24e04dff6b9b92bbec791c61a69876401d10512", "url": "https://api.github.com/repos/rust-lang/rust/commits/a24e04dff6b9b92bbec791c61a69876401d10512", "html_url": "https://github.com/rust-lang/rust/commit/a24e04dff6b9b92bbec791c61a69876401d10512"}], "stats": {"total": 612, "additions": 233, "deletions": 379}, "files": [{"sha": "4cce8343c02c871f83efe94c4c7f61ac84f92a5d", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -132,12 +132,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n             ty::ReEmpty => (\"the empty lifetime\".to_owned(), None),\n \n+            ty::RePlaceholder(_) => (format!(\"any other region\"), None),\n+\n             // FIXME(#13998) RePlaceholder should probably print like\n             // ReFree rather than dumping Debug output on the user.\n             //\n             // We shouldn't really be having unification failures with ReVar\n             // and ReLateBound though.\n-            ty::RePlaceholder(..) | ty::ReVar(_) | ty::ReLateBound(..) | ty::ReErased => {\n+            ty::ReVar(_) | ty::ReLateBound(..) | ty::ReErased => {\n                 (format!(\"lifetime {:?}\", region), None)\n             }\n \n@@ -324,8 +326,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     // the error. If all of these fails, we fall back to a rather\n                     // general bit of code that displays the error information\n                     RegionResolutionError::ConcreteFailure(origin, sub, sup) => {\n-                        self.report_concrete_failure(region_scope_tree, origin, sub, sup)\n-                            .emit();\n+                        if sub.is_placeholder() || sup.is_placeholder() {\n+                            self.report_placeholder_failure(region_scope_tree, origin, sub, sup)\n+                                .emit();\n+                        } else {\n+                            self.report_concrete_failure(region_scope_tree, origin, sub, sup)\n+                                .emit();\n+                        }\n                     }\n \n                     RegionResolutionError::GenericBoundFailure(origin, param_ty, sub) => {\n@@ -346,14 +353,32 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         sup_origin,\n                         sup_r,\n                     ) => {\n-                        self.report_sub_sup_conflict(\n-                            region_scope_tree,\n-                            var_origin,\n-                            sub_origin,\n-                            sub_r,\n-                            sup_origin,\n-                            sup_r,\n-                        );\n+                        if sub_r.is_placeholder() {\n+                            self.report_placeholder_failure(\n+                                region_scope_tree,\n+                                sub_origin,\n+                                sub_r,\n+                                sup_r,\n+                            )\n+                                .emit();\n+                        } else if sup_r.is_placeholder() {\n+                            self.report_placeholder_failure(\n+                                region_scope_tree,\n+                                sup_origin,\n+                                sub_r,\n+                                sup_r,\n+                            )\n+                                .emit();\n+                        } else {\n+                            self.report_sub_sup_conflict(\n+                                region_scope_tree,\n+                                var_origin,\n+                                sub_origin,\n+                                sub_r,\n+                                sup_origin,\n+                                sup_r,\n+                            );\n+                        }\n                     }\n                 }\n             }"}, {"sha": "0dda636a9bd53e7c1855237cee3a62c7fab8cc07", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 64, "deletions": 46, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -14,9 +14,16 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n     /// an anonymous region, emit an descriptive diagnostic error.\n     pub(super) fn try_report_placeholder_conflict(&self) -> Option<ErrorReported> {\n-        // Check for the first case: relating two trait-refs, and we\n-        // find a conflict between two placeholders.\n         match &self.error {\n+            ///////////////////////////////////////////////////////////////////////////\n+            // NB. The ordering of cases in this match is very\n+            // sensitive, because we are often matching against\n+            // specific cases and then using an `_` to match all\n+            // others.\n+\n+            ///////////////////////////////////////////////////////////////////////////\n+            // Check for errors from comparing trait failures -- first\n+            // with two placeholders, then with one.\n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n                 _,\n@@ -27,19 +34,19 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n-            )) => if expected.def_id == found.def_id {\n-                return Some(self.try_report_placeholders_trait(\n+            ))\n+                if expected.def_id == found.def_id =>\n+            {\n+                Some(self.try_report_placeholders_trait(\n                     Some(self.tcx.mk_region(ty::ReVar(*vid))),\n                     cause,\n                     Some(sub_placeholder),\n                     Some(sup_placeholder),\n                     expected.def_id,\n                     expected.substs,\n                     found.substs,\n-                ));\n-            } else {\n-                // I actually can't see why this would be the case ever.\n-            },\n+                ))\n+            }\n \n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n@@ -51,19 +58,19 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 _,\n-            )) => if expected.def_id == found.def_id {\n-                return Some(self.try_report_placeholders_trait(\n+            ))\n+                if expected.def_id == found.def_id =>\n+            {\n+                Some(self.try_report_placeholders_trait(\n                     Some(self.tcx.mk_region(ty::ReVar(*vid))),\n                     cause,\n                     Some(sub_placeholder),\n                     None,\n                     expected.def_id,\n                     expected.substs,\n                     found.substs,\n-                ));\n-            } else {\n-                // I actually can't see why this would be the case ever.\n-            },\n+                ))\n+            }\n \n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n@@ -75,48 +82,40 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 _,\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n-            )) => if expected.def_id == found.def_id {\n-                return Some(self.try_report_placeholders_trait(\n+            ))\n+                if expected.def_id == found.def_id =>\n+            {\n+                Some(self.try_report_placeholders_trait(\n                     Some(self.tcx.mk_region(ty::ReVar(*vid))),\n                     cause,\n                     None,\n                     Some(*sup_placeholder),\n                     expected.def_id,\n                     expected.substs,\n                     found.substs,\n-                ));\n-            } else {\n-                // I actually can't see why this would be the case ever.\n-            },\n-\n-            Some(RegionResolutionError::ConcreteFailure(\n-                SubregionOrigin::Subtype(TypeTrace { .. }),\n-                ty::RePlaceholder(_),\n-                ty::RePlaceholder(_),\n-            )) => {\n-                // I actually can't see why this would be the case ever.\n+                ))\n             }\n \n             Some(RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::Subtype(TypeTrace {\n                     cause,\n                     values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n                 }),\n-                sub_region,\n+                sub_region @ ty::RePlaceholder(_),\n                 sup_region @ ty::RePlaceholder(_),\n-            )) => if expected.def_id == found.def_id {\n-                return Some(self.try_report_placeholders_trait(\n-                    Some(sub_region),\n-                    cause,\n+            ))\n+                if expected.def_id == found.def_id =>\n+            {\n+                Some(self.try_report_placeholders_trait(\n                     None,\n+                    cause,\n+                    Some(*sub_region),\n                     Some(*sup_region),\n                     expected.def_id,\n                     expected.substs,\n                     found.substs,\n-                ));\n-            } else {\n-                // I actually can't see why this would be the case ever.\n-            },\n+                ))\n+            }\n \n             Some(RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::Subtype(TypeTrace {\n@@ -125,24 +124,43 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 }),\n                 sub_region @ ty::RePlaceholder(_),\n                 sup_region,\n-            )) => if expected.def_id == found.def_id {\n-                return Some(self.try_report_placeholders_trait(\n+            ))\n+                if expected.def_id == found.def_id =>\n+            {\n+                Some(self.try_report_placeholders_trait(\n                     Some(sup_region),\n                     cause,\n-                    None,\n                     Some(*sub_region),\n+                    None,\n                     expected.def_id,\n                     expected.substs,\n                     found.substs,\n-                ));\n-            } else {\n-                // I actually can't see why this would be the case ever.\n-            },\n+                ))\n+            }\n \n-            _ => {}\n-        }\n+            Some(RegionResolutionError::ConcreteFailure(\n+                SubregionOrigin::Subtype(TypeTrace {\n+                    cause,\n+                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n+                }),\n+                sub_region,\n+                sup_region @ ty::RePlaceholder(_),\n+            ))\n+                if expected.def_id == found.def_id =>\n+            {\n+                Some(self.try_report_placeholders_trait(\n+                    Some(sub_region),\n+                    cause,\n+                    None,\n+                    Some(*sup_region),\n+                    expected.def_id,\n+                    expected.substs,\n+                    found.substs,\n+                ))\n+            }\n \n-        None\n+            _ => None,\n+        }\n     }\n \n     // error[E0308]: implementation of `Foo` does not apply to enough lifetimes"}, {"sha": "e45a4b17cdd9c1f537b1296a48cc4e7d267cf792", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -442,4 +442,24 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n     }\n+\n+    pub(super) fn report_placeholder_failure(\n+        &self,\n+        region_scope_tree: &region::ScopeTree,\n+        placeholder_origin: SubregionOrigin<'tcx>,\n+        sub: Region<'tcx>,\n+        sup: Region<'tcx>,\n+    ) -> DiagnosticBuilder<'tcx> {\n+        // I can't think how to do better than this right now. -nikomatsakis\n+        match placeholder_origin {\n+            infer::Subtype(trace) => {\n+                let terr = TypeError::RegionsPlaceholderMismatch;\n+                self.report_and_explain_type_error(trace, &terr)\n+            }\n+\n+            _ => {\n+                self.report_concrete_failure(region_scope_tree, placeholder_origin, sub, sup)\n+            }\n+        }\n+    }\n }"}, {"sha": "461e09819d97d738af466c14b657b6904fc423fa", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -225,7 +225,7 @@ pub struct InferCtxt<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n pub type PlaceholderMap<'tcx> = BTreeMap<ty::BoundRegion, ty::Region<'tcx>>;\n \n /// See `error_reporting` module for more details\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub enum ValuePairs<'tcx> {\n     Types(ExpectedFound<Ty<'tcx>>),\n     Regions(ExpectedFound<ty::Region<'tcx>>),"}, {"sha": "76e102d88d7cef93db9ca21ee5f9179b5c3fb97e", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -1,5 +1,5 @@\n use hir::def_id::DefId;\n-use ty::{self, BoundRegion, Region, Ty, TyCtxt};\n+use ty::{self, Region, Ty, TyCtxt};\n use std::borrow::Cow;\n use std::fmt;\n use rustc_target::spec::abi;\n@@ -9,7 +9,7 @@ use syntax_pos::Span;\n \n use hir;\n \n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub struct ExpectedFound<T> {\n     pub expected: T,\n     pub found: T,\n@@ -27,8 +27,7 @@ pub enum TypeError<'tcx> {\n     ArgCount,\n \n     RegionsDoesNotOutlive(Region<'tcx>, Region<'tcx>),\n-    RegionsInsufficientlyPolymorphic(BoundRegion, Region<'tcx>),\n-    RegionsOverlyPolymorphic(BoundRegion, Region<'tcx>),\n+    RegionsPlaceholderMismatch,\n \n     Sorts(ExpectedFound<Ty<'tcx>>),\n     IntMismatch(ExpectedFound<ty::IntVarValue>),\n@@ -102,17 +101,8 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             RegionsDoesNotOutlive(..) => {\n                 write!(f, \"lifetime mismatch\")\n             }\n-            RegionsInsufficientlyPolymorphic(br, _) => {\n-                write!(f,\n-                       \"expected bound lifetime parameter{}{}, found concrete lifetime\",\n-                       if br.is_named() { \" \" } else { \"\" },\n-                       br)\n-            }\n-            RegionsOverlyPolymorphic(br, _) => {\n-                write!(f,\n-                       \"expected concrete lifetime, found bound lifetime parameter{}{}\",\n-                       if br.is_named() { \" \" } else { \"\" },\n-                       br)\n+            RegionsPlaceholderMismatch => {\n+                write!(f, \"one type is more general than the other\")\n             }\n             Sorts(values) => ty::tls::with(|tcx| {\n                 report_maybe_different(f, &values.expected.sort_string(tcx),"}, {"sha": "f9b43f42d5298595024d1342c88f307b8594b957", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -434,12 +434,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             RegionsDoesNotOutlive(a, b) => {\n                 return tcx.lift(&(a, b)).map(|(a, b)| RegionsDoesNotOutlive(a, b))\n             }\n-            RegionsInsufficientlyPolymorphic(a, b) => {\n-                return tcx.lift(&b).map(|b| RegionsInsufficientlyPolymorphic(a, b))\n-            }\n-            RegionsOverlyPolymorphic(a, b) => {\n-                return tcx.lift(&b).map(|b| RegionsOverlyPolymorphic(a, b))\n-            }\n+            RegionsPlaceholderMismatch => RegionsPlaceholderMismatch,\n             IntMismatch(x) => IntMismatch(x),\n             FloatMismatch(x) => FloatMismatch(x),\n             Traits(x) => Traits(x),\n@@ -1006,8 +1001,7 @@ EnumTypeFoldableImpl! {\n         (ty::error::TypeError::FixedArraySize)(x),\n         (ty::error::TypeError::ArgCount),\n         (ty::error::TypeError::RegionsDoesNotOutlive)(a, b),\n-        (ty::error::TypeError::RegionsInsufficientlyPolymorphic)(a, b),\n-        (ty::error::TypeError::RegionsOverlyPolymorphic)(a, b),\n+        (ty::error::TypeError::RegionsPlaceholderMismatch),\n         (ty::error::TypeError::IntMismatch)(x),\n         (ty::error::TypeError::FloatMismatch)(x),\n         (ty::error::TypeError::Traits)(x),"}, {"sha": "a2720bdf385cdcc71c975ae0fe90d60f4bbaa1a5", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -1396,6 +1396,13 @@ impl RegionKind {\n         }\n     }\n \n+    pub fn is_placeholder(&self) -> bool {\n+        match *self {\n+            ty::RePlaceholder(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn bound_at_or_above_binder(&self, index: DebruijnIndex) -> bool {\n         match *self {\n             ty::ReLateBound(debruijn, _) => debruijn >= index,"}, {"sha": "e4704494e149248f7bd1a029ce53d22785fd2766", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -1,24 +1,12 @@\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+error[E0308]: mismatched types\n   --> $DIR/higher-ranked-projection.rs:25:5\n    |\n LL |     foo(());\n-   |     ^^^\n+   |     ^^^ one type is more general than the other\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:12), 'a) })...\n-   = note: ...so that the types are compatible:\n-           expected Mirror\n-              found Mirror\n-note: but, the lifetime must be valid for the expression at 25:5...\n-  --> $DIR/higher-ranked-projection.rs:25:5\n-   |\n-LL |     foo(());\n-   |     ^^^\n-note: ...so type `fn(()) {foo::<&(), ()>}` of expression is valid during the expression\n-  --> $DIR/higher-ranked-projection.rs:25:5\n-   |\n-LL |     foo(());\n-   |     ^^^\n+   = note: expected type `Mirror`\n+              found type `Mirror`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "db15ec51d87c6e2fdfdfa08c9ebf36ca82100640", "filename": "src/test/ui/associated-types/higher-ranked-projection.good.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -3,7 +3,7 @@ error: compilation successful\n    |\n LL | / fn main() { //[good]~ ERROR compilation successful\n LL | |     foo(());\n-LL | |     //[bad]~^ ERROR E0495\n+LL | |     //[bad]~^ ERROR E0308\n LL | | }\n    | |_^\n "}, {"sha": "5b380c982f041277eff83b5cc63a0b6c7b9893d5", "filename": "src/test/ui/associated-types/higher-ranked-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -23,5 +23,5 @@ fn foo<U, T>(_t: T)\n #[rustc_error]\n fn main() { //[good]~ ERROR compilation successful\n     foo(());\n-    //[bad]~^ ERROR E0495\n+    //[bad]~^ ERROR E0308\n }"}, {"sha": "6977fd47a2e85f03ead9066f7d3b6ef41812d651", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -44,7 +44,7 @@ fn expect_bound_supply_free_from_closure() {\n     // the argument level.\n     type Foo<'a> = fn(&'a u32);\n     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-    //~^ ERROR cannot infer\n+    //~^ ERROR mismatched types\n     });\n }\n "}, {"sha": "b1cfd6cef1022b0baa030c5151a30f07ec5c7000", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -40,57 +40,29 @@ error[E0308]: mismatched types\n   --> $DIR/expect-fn-supply-fn.rs:30:52\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |                                                    ^^^^^^^^ lifetime mismatch\n+   |                                                    ^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `fn(&u32)`\n               found type `for<'r> fn(&'r u32)`\n-   = note: lifetime RePlaceholder(Placeholder { universe: U2, name: BrAnon(0) })...\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 30:48\n-  --> $DIR/expect-fn-supply-fn.rs:30:48\n-   |\n-LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |                                                ^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/expect-fn-supply-fn.rs:37:53\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |                                                     ^^^^^^^^^^^ lifetime mismatch\n+   |                                                     ^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> fn(&'r u32)`\n               found type `fn(&'x u32)`\n-   = note: lifetime RePlaceholder(Placeholder { universe: U3, name: BrAnon(0) })...\n-note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 34:37\n-  --> $DIR/expect-fn-supply-fn.rs:34:37\n-   |\n-LL | fn expect_bound_supply_free_from_fn<'x>(x: &'x u32) {\n-   |                                     ^^\n \n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements\n+error[E0308]: mismatched types\n   --> $DIR/expect-fn-supply-fn.rs:46:53\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |                                                     ^^^^^^^\n-   |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U3, name: BrAnon(0) })...\n-   = note: ...so that the types are compatible:\n-           expected for<'r> fn(&'r u32)\n-              found fn(&u32)\n-note: but, the lifetime must be valid for the expression at 46:65...\n-  --> $DIR/expect-fn-supply-fn.rs:46:65\n+   |                                                     ^^^^^^^ one type is more general than the other\n    |\n-LL |       with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |  _________________________________________________________________^\n-LL | |     //~^ ERROR cannot infer\n-LL | |     });\n-   | |_____^\n-note: ...so that the type `fn(&u32)` will meet its required lifetime bounds\n-  --> $DIR/expect-fn-supply-fn.rs:46:53\n-   |\n-LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |                                                     ^^^^^^^\n+   = note: expected type `for<'r> fn(&'r u32)`\n+              found type `fn(&u32)`\n \n error: aborting due to 5 previous errors\n \n-Some errors occurred: E0308, E0495.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "bdfabdabbebb761a342fe682a582227ff53ef126", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -1,19 +1,16 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in generic type due to conflicting requirements\n+error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:39:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^\n+   |                            ^^^^^^^^^^^ one type is more general than the other\n ...\n LL | / check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,\n LL | |                                             for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n    | |_________________________________________________________________________________________- in this macro invocation\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:26), 'b) })...\n-   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:25), 'a) })...\n-   = note: ...so that the expression is assignable:\n-           expected std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32>\n-              found std::option::Option<for<'a> fn(&'a u32, &'a u32) -> &'a u32>\n+   = note: expected type `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32>`\n+              found type `std::option::Option<for<'a> fn(&'a u32, &'a u32) -> &'a u32>`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "74b8c89b6e86f3482c9a2f1c5482cd50973baae6", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -2,24 +2,14 @@ error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:39:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ lifetime mismatch\n+   |                            ^^^^^^^^^^^ one type is more general than the other\n ...\n LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n LL | |                              fn(&'x u32)) }\n    | |___________________________________________- in this macro invocation\n    |\n    = note: expected type `std::option::Option<for<'a> fn(&'a u32)>`\n               found type `std::option::Option<fn(&'x u32)>`\n-   = note: lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:23), 'a) })...\n-note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 38:22\n-  --> $DIR/hr-subtype.rs:38:22\n-   |\n-LL |           fn supertype<'x,'y:'x,'z:'y>() {\n-   |                        ^^\n-...\n-LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n-LL | |                              fn(&'x u32)) }\n-   | |___________________________________________- in this macro invocation\n \n error: aborting due to previous error\n "}, {"sha": "8168941e2777c6d34a8281c82a1989b7cebfbd63", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -1,19 +1,16 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in generic type due to conflicting requirements\n+error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:39:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^\n+   |                            ^^^^^^^^^^^ one type is more general than the other\n ...\n LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n LL | |                                         for<'a>    fn(Inv<'a>, Inv<'a>)) }\n    | |__________________________________________________________________________- in this macro invocation\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:25), 'a) })...\n-   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:26), 'b) })...\n-   = note: ...so that the expression is assignable:\n-           expected std::option::Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>\n-              found std::option::Option<for<'a> fn(Inv<'a>, Inv<'a>)>\n+   = note: expected type `std::option::Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n+              found type `std::option::Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "24182d76b3581b707a659e9bbbfa9e4f0215424d", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -19,5 +19,5 @@ fn main() {\n     //     yielding `fn(&!b u32)`, in a fresh universe U1\n     //   - So we get `?a = !b` but the universe U0 assigned to `?a` cannot name `!b`.\n \n-    let _: for<'b> fn(&'b u32) = foo(); //~ ERROR cannot infer\n+    let _: for<'b> fn(&'b u32) = foo(); //~ ERROR mismatched types\n }"}, {"sha": "4a2a619298cd5cd18ffb61fffd5176e91802d374", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -1,24 +1,12 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+error[E0308]: mismatched types\n   --> $DIR/hrtb-exists-forall-fn.rs:22:34\n    |\n-LL |     let _: for<'b> fn(&'b u32) = foo(); //~ ERROR cannot infer\n-   |                                  ^^^\n+LL |     let _: for<'b> fn(&'b u32) = foo(); //~ ERROR mismatched types\n+   |                                  ^^^^^ one type is more general than the other\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:11), 'b) })...\n-   = note: ...so that the expression is assignable:\n-           expected for<'b> fn(&'b u32)\n-              found fn(&u32)\n-note: but, the lifetime must be valid for the call at 22:34...\n-  --> $DIR/hrtb-exists-forall-fn.rs:22:34\n-   |\n-LL |     let _: for<'b> fn(&'b u32) = foo(); //~ ERROR cannot infer\n-   |                                  ^^^^^\n-note: ...so type `fn(&u32)` of expression is valid during the expression\n-  --> $DIR/hrtb-exists-forall-fn.rs:22:34\n-   |\n-LL |     let _: for<'b> fn(&'b u32) = foo(); //~ ERROR cannot infer\n-   |                                  ^^^^^\n+   = note: expected type `for<'b> fn(&'b u32)`\n+              found type `fn(&u32)`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0d7b5cbf82348d0391ebfbd8262c0dfa11fff5f9", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -2,12 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:5\n    |\n LL |     want_bar_for_any_ccx(b); //~ ERROR\n-   |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |     ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'ccx> Bar<'ccx>`\n               found type `Bar<'static>`\n-   = note: lifetime RePlaceholder(Placeholder { universe: U4, name: BrNamed(crate0:DefIndex(1:16), 'ccx) })...\n-   = note: ...does not necessarily outlive the static lifetime\n \n error: aborting due to previous error\n "}, {"sha": "3d2d403462d8b2bd48912211467db4ca327333f4", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -16,7 +16,6 @@ fn want_foo_for_some_tcx<'x,F>(f: &'x F)\n {\n     want_foo_for_some_tcx(f);\n     want_foo_for_any_tcx(f); //~ ERROR E0308\n-    //~^ ERROR E0308\n }\n \n fn want_foo_for_any_tcx<F>(f: &F)\n@@ -34,7 +33,6 @@ fn want_bar_for_some_ccx<'x,B>(b: &B)\n \n     want_bar_for_some_ccx(b);\n     want_bar_for_any_ccx(b); //~ ERROR E0308\n-    //~^ ERROR E0308\n }\n \n fn want_bar_for_any_ccx<B>(b: &B)"}, {"sha": "31dbeec2a551bd888513ba9c9263ed2f789b9412", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -2,62 +2,20 @@ error[E0308]: mismatched types\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:18:5\n    |\n LL |     want_foo_for_any_tcx(f); //~ ERROR E0308\n-   |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |     ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'tcx> Foo<'tcx>`\n               found type `Foo<'x>`\n-   = note: lifetime RePlaceholder(Placeholder { universe: U4, name: BrNamed(crate0:DefIndex(1:15), 'tcx) })...\n-note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 14:26\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:14:26\n-   |\n-LL | fn want_foo_for_some_tcx<'x,F>(f: &'x F)\n-   |                          ^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:18:5\n-   |\n-LL |     want_foo_for_any_tcx(f); //~ ERROR E0308\n-   |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected type `for<'tcx> Foo<'tcx>`\n-              found type `Foo<'x>`\n-note: the lifetime 'x as defined on the function body at 14:26...\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:14:26\n-   |\n-LL | fn want_foo_for_some_tcx<'x,F>(f: &'x F)\n-   |                          ^^\n-   = note: ...does not necessarily outlive lifetime RePlaceholder(Placeholder { universe: U4, name: BrNamed(crate0:DefIndex(1:15), 'tcx) })\n \n error[E0308]: mismatched types\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:36:5\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:35:5\n    |\n LL |     want_bar_for_any_ccx(b); //~ ERROR E0308\n-   |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |     ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'ccx> Bar<'ccx>`\n               found type `Bar<'x>`\n-   = note: lifetime RePlaceholder(Placeholder { universe: U8, name: BrNamed(crate0:DefIndex(1:19), 'ccx) })...\n-note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 29:26\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:29:26\n-   |\n-LL | fn want_bar_for_some_ccx<'x,B>(b: &B)\n-   |                          ^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:36:5\n-   |\n-LL |     want_bar_for_any_ccx(b); //~ ERROR E0308\n-   |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected type `for<'ccx> Bar<'ccx>`\n-              found type `Bar<'x>`\n-note: the lifetime 'x as defined on the function body at 29:26...\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:29:26\n-   |\n-LL | fn want_bar_for_some_ccx<'x,B>(b: &B)\n-   |                          ^^\n-   = note: ...does not necessarily outlive lifetime RePlaceholder(Placeholder { universe: U8, name: BrNamed(crate0:DefIndex(1:19), 'ccx) })\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "7bd89960e42e5bb35e3ad3e561719bee1e30c8fc", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -43,7 +43,7 @@ fn foo_hrtb_bar_not<'b,T>(mut t: T)\n     // be implemented. Thus to satisfy `&mut T : for<'a> Foo<&'a\n     // isize>`, we require `T : for<'a> Bar<&'a isize>`, but the where\n     // clause only specifies `T : Bar<&'b isize>`.\n-    foo_hrtb_bar_not(&mut t); //~ ERROR E0495\n+    foo_hrtb_bar_not(&mut t); //~ ERROR E0308\n }\n \n fn foo_hrtb_bar_hrtb<T>(mut t: T)"}, {"sha": "ec3bf8a1a1be3b79bfaa7356b49278130ab852eb", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -1,22 +1,12 @@\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+error[E0308]: mismatched types\n   --> $DIR/hrtb-perfect-forwarding.rs:46:5\n    |\n-LL |     foo_hrtb_bar_not(&mut t); //~ ERROR E0495\n-   |     ^^^^^^^^^^^^^^^^\n+LL |     foo_hrtb_bar_not(&mut t); //~ ERROR E0308\n+   |     ^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:23), 'a) })...\n-   = note: ...so that the types are compatible:\n-           expected Foo<&'a isize>\n-              found Foo<&isize>\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 39:21...\n-  --> $DIR/hrtb-perfect-forwarding.rs:39:21\n-   |\n-LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n-   |                     ^^\n-   = note: ...so that the types are compatible:\n-           expected Bar<&isize>\n-              found Bar<&'b isize>\n+   = note: expected type `Foo<&'a isize>`\n+              found type `Foo<&isize>`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "320992c0764cfd4a3a87200e1c8e970b62c2d5b3", "filename": "src/test/ui/issues/issue-40000.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -3,5 +3,5 @@ fn main() {\n \n     fn foo(x: Box<Fn(&i32)>) {}\n     let bar = Box::new(|x: &i32| {}) as Box<Fn(_)>;\n-    foo(bar); //~ ERROR E0495\n+    foo(bar); //~ ERROR E0308\n }"}, {"sha": "d7966cea52bb0faba8303917e77e74967c9e6cf1", "filename": "src/test/ui/issues/issue-40000.stderr", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -1,26 +1,12 @@\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+error[E0308]: mismatched types\n   --> $DIR/issue-40000.rs:6:9\n    |\n-LL |     foo(bar); //~ ERROR E0495\n-   |         ^^^\n+LL |     foo(bar); //~ ERROR E0308\n+   |         ^^^ one type is more general than the other\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U8, name: BrAnon(0) })...\n-   = note: ...so that the types are compatible:\n-           expected dyn for<'r> std::ops::Fn(&'r i32)\n-              found dyn std::ops::Fn(&i32)\n-note: but, the lifetime must be valid for the block suffix following statement 2 at 5:5...\n-  --> $DIR/issue-40000.rs:5:5\n-   |\n-LL | /     let bar = Box::new(|x: &i32| {}) as Box<Fn(_)>;\n-LL | |     foo(bar); //~ ERROR E0495\n-LL | | }\n-   | |_^\n-note: ...so that variable is valid at time of its declaration\n-  --> $DIR/issue-40000.rs:5:9\n-   |\n-LL |     let bar = Box::new(|x: &i32| {}) as Box<Fn(_)>;\n-   |         ^^^\n+   = note: expected type `dyn for<'r> std::ops::Fn(&'r i32)`\n+              found type `dyn std::ops::Fn(&i32)`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "9be7a813603d4a30bc423b726ad291da6a5893a1", "filename": "src/test/ui/lub-glb/old-lub-glb-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -7,7 +7,7 @@ fn foo(\n     x: &for<'a, 'b> Foo<&'a u8, &'b u8>,\n     y: &for<'a> Foo<&'a u8, &'a u8>,\n ) {\n-    let z = match 22 { //~ ERROR cannot infer\n+    let z = match 22 { //~ ERROR E0308\n         0 => x,\n         _ => y,\n     };"}, {"sha": "17d3648156b51b205d9fb3a996b2cef7f590bf5c", "filename": "src/test/ui/lub-glb/old-lub-glb-object.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -1,19 +1,16 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in generic type due to conflicting requirements\n+error[E0308]: mismatched types\n   --> $DIR/old-lub-glb-object.rs:10:13\n    |\n-LL |       let z = match 22 { //~ ERROR cannot infer\n+LL |       let z = match 22 { //~ ERROR E0308\n    |  _____________^\n LL | |         0 => x,\n LL | |         _ => y,\n LL | |     };\n-   | |_____^\n+   | |_____^ one type is more general than the other\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U5, name: BrNamed(crate0:DefIndex(1:11), 'a) })...\n-   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U5, name: BrNamed(crate0:DefIndex(1:12), 'b) })...\n-   = note: ...so that the types are compatible:\n-           expected dyn for<'a, 'b> Foo<&'a u8, &'b u8>\n-              found dyn for<'a> Foo<&'a u8, &'a u8>\n+   = note: expected type `dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n+              found type `dyn for<'a> Foo<&'a u8, &'a u8>`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "437150666be0cc6b0e5086c16de4d947b26356c8", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -9,6 +9,4 @@ fn baz<F: Fn(*mut &u32)>(_: F) {}\n fn _test<'a>(f: fn(*mut &'a u32)) {\n     baz(f); //~ ERROR mismatched types\n      //~| ERROR mismatched types\n-     //~| ERROR mismatched types\n-     //~| ERROR mismatched types\n }"}, {"sha": "a6628006587c181143321f1b28800f9bcfa3730b", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -26,63 +26,21 @@ error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f); //~ ERROR mismatched types\n-   |     ^^^ lifetime mismatch\n+   |     ^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> std::ops::Fn<(*mut &'r u32,)>`\n               found type `std::ops::Fn<(*mut &'a u32,)>`\n-   = note: lifetime RePlaceholder(Placeholder { universe: U2, name: BrAnon(0) })...\n-note: ...does not necessarily outlive the lifetime 'a as defined on the function body at 9:10\n-  --> $DIR/closure-arg-type-mismatch.rs:9:10\n-   |\n-LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n-   |          ^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/closure-arg-type-mismatch.rs:10:5\n-   |\n-LL |     baz(f); //~ ERROR mismatched types\n-   |     ^^^ lifetime mismatch\n-   |\n-   = note: expected type `std::ops::FnOnce<(*mut &u32,)>`\n-              found type `std::ops::FnOnce<(*mut &'a u32,)>`\n-   = note: lifetime RePlaceholder(Placeholder { universe: U3, name: BrAnon(0) })...\n-note: ...does not necessarily outlive the lifetime 'a as defined on the function body at 9:10\n-  --> $DIR/closure-arg-type-mismatch.rs:9:10\n-   |\n-LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n-   |          ^^\n \n error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f); //~ ERROR mismatched types\n-   |     ^^^ lifetime mismatch\n-   |\n-   = note: expected type `for<'r> std::ops::Fn<(*mut &'r u32,)>`\n-              found type `std::ops::Fn<(*mut &'a u32,)>`\n-note: the lifetime 'a as defined on the function body at 9:10...\n-  --> $DIR/closure-arg-type-mismatch.rs:9:10\n-   |\n-LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n-   |          ^^\n-   = note: ...does not necessarily outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrAnon(0) })\n-\n-error[E0308]: mismatched types\n-  --> $DIR/closure-arg-type-mismatch.rs:10:5\n-   |\n-LL |     baz(f); //~ ERROR mismatched types\n-   |     ^^^ lifetime mismatch\n+   |     ^^^ one type is more general than the other\n    |\n    = note: expected type `std::ops::FnOnce<(*mut &u32,)>`\n               found type `std::ops::FnOnce<(*mut &'a u32,)>`\n-note: the lifetime 'a as defined on the function body at 9:10...\n-  --> $DIR/closure-arg-type-mismatch.rs:9:10\n-   |\n-LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n-   |          ^^\n-   = note: ...does not necessarily outlive lifetime RePlaceholder(Placeholder { universe: U3, name: BrAnon(0) })\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0308, E0631.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "152a525493732aa4eb3278bd69574cf970a71f1b", "filename": "src/test/ui/mismatched_types/closure-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -5,5 +5,5 @@ impl<T: Fn(&())> Foo for T {}\n fn baz<T: Foo>(_: T) {}\n \n fn main() {\n-    baz(|_| ()); //~ ERROR E0495\n+    baz(|_| ()); //~ ERROR E0308\n }"}, {"sha": "0d87bc228755fc60942ceaae778871dbc88a2b7f", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -1,15 +1,12 @@\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+error[E0308]: mismatched types\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n-LL |     baz(|_| ()); //~ ERROR E0495\n-   |     ^^^\n+LL |     baz(|_| ()); //~ ERROR E0308\n+   |     ^^^ one type is more general than the other\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U6, name: BrAnon(0) })...\n-   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U6, name: BrAnon(0) })...\n-   = note: ...so that the types are compatible:\n-           expected for<'r> std::ops::Fn<(&'r (),)>\n-              found std::ops::Fn<(&(),)>\n+   = note: expected type `for<'r> std::ops::Fn<(&'r (),)>`\n+              found type `std::ops::Fn<(&(),)>`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a9234e43191eabed1a59258a7f0c609579c0b080", "filename": "src/test/ui/regions-fn-subtyping-return-static-fail.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -1,15 +1,12 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in generic type due to conflicting requirements\n+error[E0308]: mismatched types\n   --> $DIR/regions-fn-subtyping-return-static-fail.rs:48:12\n    |\n LL |     want_G(baz); //~ ERROR\n-   |            ^^^\n+   |            ^^^ one type is more general than the other\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U3, name: BrNamed(crate0:DefIndex(1:11), 'cx) })...\n-   = note: ...but the lifetime must also be valid for the static lifetime...\n-   = note: ...so that the expression is assignable:\n-           expected for<'cx> fn(&'cx S) -> &'static S\n-              found for<'r> fn(&'r S) -> &'r S\n+   = note: expected type `for<'cx> fn(&'cx S) -> &'static S`\n+              found type `for<'r> fn(&'r S) -> &'r S`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ab4c6d9cf9198d541f9a050d39bfb09706f812f1", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -17,7 +17,7 @@ fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n fn d() {\n     // 'a and 'b are early bound in the function `a` because they appear\n     // inconstraints:\n-    let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR E0495\n+    let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR mismatched types\n }\n \n fn e() {"}, {"sha": "47e1d0efdc77b8d257a9f8ef43f22520ae19b894", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -16,19 +16,16 @@ LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n LL |     a(x, y); //~ ERROR lifetime mismatch [E0623]\n    |       ^ ...but data from `y` flows into `x` here\n \n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+error[E0308]: mismatched types\n   --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:43\n    |\n-LL |     let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR E0495\n-   |                                           ^\n+LL |     let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR mismatched types\n+   |                                           ^ one type is more general than the other\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrAnon(1) })...\n-   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrAnon(1) })...\n-   = note: ...so that the expression is assignable:\n-           expected for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)\n-              found for<'r, 's> fn(&'r mut &isize, &'s mut &isize)\n+   = note: expected type `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n+              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n \n error: aborting due to 3 previous errors\n \n-Some errors occurred: E0495, E0623.\n-For more information about an error, try `rustc --explain E0495`.\n+Some errors occurred: E0308, E0623.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "066522548ad4567d98c7e9673718d0051cadfc81", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -19,7 +19,7 @@ fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n fn d() {\n     // 'a and 'b are early bound in the function `a` because they appear\n     // inconstraints:\n-    let _: fn(&mut &isize, &mut &isize, &mut &isize) = a; //~ ERROR E0495\n+    let _: fn(&mut &isize, &mut &isize, &mut &isize) = a; //~ ERROR E0308\n }\n \n fn e() {"}, {"sha": "1e7b99053f77f01be9f359eb537206d940e3cf93", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -27,19 +27,16 @@ LL | fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n LL |     a(x, y, z); //~ ERROR lifetime mismatch [E0623]\n    |       ^ ...but data from `y` flows into `x` here\n \n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+error[E0308]: mismatched types\n   --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:56\n    |\n-LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a; //~ ERROR E0495\n-   |                                                        ^\n+LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a; //~ ERROR E0308\n+   |                                                        ^ one type is more general than the other\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrAnon(1) })...\n-   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrAnon(1) })...\n-   = note: ...so that the expression is assignable:\n-           expected for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)\n-              found for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize)\n+   = note: expected type `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n+              found type `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize)`\n \n error: aborting due to 4 previous errors\n \n-Some errors occurred: E0495, E0623.\n-For more information about an error, try `rustc --explain E0495`.\n+Some errors occurred: E0308, E0623.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "7d7f62e19792f1847158ad3a76f726ddac6bd353", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.rs?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -17,7 +17,7 @@ fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n fn d() {\n     // 'a and 'b are early bound in the function `a` because they appear\n     // inconstraints:\n-    let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR E0495\n+    let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR E0308\n }\n \n fn e() {"}, {"sha": "a43ee7ec3ace0d9c6f41ad11cec64c9daf95e218", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4404c0b501729cc5df05544e5f0784789f4215/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr?ref=bc4404c0b501729cc5df05544e5f0784789f4215", "patch": "@@ -16,19 +16,16 @@ LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n LL |     a(x, y); //~ ERROR lifetime mismatch [E0623]\n    |       ^ ...but data from `y` flows into `x` here\n \n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+error[E0308]: mismatched types\n   --> $DIR/regions-lifetime-bounds-on-fns.rs:20:43\n    |\n-LL |     let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR E0495\n-   |                                           ^\n+LL |     let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR E0308\n+   |                                           ^ one type is more general than the other\n    |\n-   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrAnon(1) })...\n-   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrAnon(1) })...\n-   = note: ...so that the expression is assignable:\n-           expected for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)\n-              found for<'r, 's> fn(&'r mut &isize, &'s mut &isize)\n+   = note: expected type `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n+              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n \n error: aborting due to 3 previous errors\n \n-Some errors occurred: E0495, E0623.\n-For more information about an error, try `rustc --explain E0495`.\n+Some errors occurred: E0308, E0623.\n+For more information about an error, try `rustc --explain E0308`."}]}