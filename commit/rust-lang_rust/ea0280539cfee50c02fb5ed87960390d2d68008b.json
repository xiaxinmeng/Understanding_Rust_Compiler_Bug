{"sha": "ea0280539cfee50c02fb5ed87960390d2d68008b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMDI4MDUzOWNmZWU1MGMwMmZiNWVkODc5NjAzOTBkMmQ2ODAwOGI=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-08-07T05:19:06Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-08-07T05:19:06Z"}, "message": "Implement select generically", "tree": {"sha": "528a00a93a291f5fd6c83ab786e41ff7c6ec9fa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/528a00a93a291f5fd6c83ab786e41ff7c6ec9fa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea0280539cfee50c02fb5ed87960390d2d68008b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0280539cfee50c02fb5ed87960390d2d68008b", "html_url": "https://github.com/rust-lang/rust/commit/ea0280539cfee50c02fb5ed87960390d2d68008b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea0280539cfee50c02fb5ed87960390d2d68008b/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de13b20b2706607c9c130e16d5fb2b83241a94c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/de13b20b2706607c9c130e16d5fb2b83241a94c1", "html_url": "https://github.com/rust-lang/rust/commit/de13b20b2706607c9c130e16d5fb2b83241a94c1"}], "stats": {"total": 152, "additions": 75, "deletions": 77}, "files": [{"sha": "1f7ea854a933ba112625f6805d62d1bc8debafaa", "filename": "crates/core_simd/src/select.rs", "status": "modified", "additions": 68, "deletions": 70, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/ea0280539cfee50c02fb5ed87960390d2d68008b/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0280539cfee50c02fb5ed87960390d2d68008b/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fselect.rs?ref=ea0280539cfee50c02fb5ed87960390d2d68008b", "patch": "@@ -1,3 +1,5 @@\n+use crate::{LaneCount, Mask, MaskElement, Simd, SimdElement, SupportedLaneCount};\n+\n mod sealed {\n     pub trait Sealed {}\n }\n@@ -9,79 +11,75 @@ pub trait Select<Mask>: Sealed {\n     fn select(mask: Mask, true_values: Self, false_values: Self) -> Self;\n }\n \n-macro_rules! impl_select {\n-    {\n-        $mask:ident ($bits_ty:ident): $($type:ident),*\n-    } => {\n-        $(\n-        impl<const LANES: usize> Sealed for crate::$type<LANES> where crate::LaneCount<LANES>: crate::SupportedLaneCount {}\n-        impl<const LANES: usize> Select<crate::$mask<LANES>> for crate::$type<LANES>\n-        where\n-            crate::LaneCount<LANES>: crate::SupportedLaneCount,\n-        {\n-            #[doc(hidden)]\n-            #[inline]\n-            fn select(mask: crate::$mask<LANES>, true_values: Self, false_values: Self) -> Self {\n-                unsafe { crate::intrinsics::simd_select(mask.to_int(), true_values, false_values) }\n-            }\n-        }\n-        )*\n+impl<Element, const LANES: usize> Sealed for Simd<Element, LANES>\n+where\n+    Element: SimdElement,\n+    LaneCount<LANES>: SupportedLaneCount,\n+{\n+}\n \n-        impl<const LANES: usize> Sealed for crate::$mask<LANES>\n-        where\n-            crate::LaneCount<LANES>: crate::SupportedLaneCount,\n-        {}\n+impl<Element, const LANES: usize> Select<Mask<Element::Mask, LANES>> for Simd<Element, LANES>\n+where\n+    Element: SimdElement,\n+    LaneCount<LANES>: SupportedLaneCount,\n+{\n+    #[inline]\n+    fn select(mask: Mask<Element::Mask, LANES>, true_values: Self, false_values: Self) -> Self {\n+        unsafe { crate::intrinsics::simd_select(mask.to_int(), true_values, false_values) }\n+    }\n+}\n \n-        impl<const LANES: usize> Select<Self> for crate::$mask<LANES>\n-        where\n-            crate::LaneCount<LANES>: crate::SupportedLaneCount,\n-        {\n-            #[doc(hidden)]\n-            #[inline]\n-            fn select(mask: Self, true_values: Self, false_values: Self) -> Self {\n-                mask & true_values | !mask & false_values\n-            }\n-        }\n+impl<Element, const LANES: usize> Sealed for Mask<Element, LANES>\n+where\n+    Element: MaskElement,\n+    LaneCount<LANES>: SupportedLaneCount,\n+{\n+}\n \n-        impl<const LANES: usize> crate::$mask<LANES>\n-        where\n-            crate::LaneCount<LANES>: crate::SupportedLaneCount,\n-        {\n-            /// Choose lanes from two vectors.\n-            ///\n-            /// For each lane in the mask, choose the corresponding lane from `true_values` if\n-            /// that lane mask is true, and `false_values` if that lane mask is false.\n-            ///\n-            /// ```\n-            /// # #![feature(portable_simd)]\n-            /// # use core_simd::{Mask32, SimdI32};\n-            /// let a = SimdI32::from_array([0, 1, 2, 3]);\n-            /// let b = SimdI32::from_array([4, 5, 6, 7]);\n-            /// let mask = Mask32::from_array([true, false, false, true]);\n-            /// let c = mask.select(a, b);\n-            /// assert_eq!(c.to_array(), [0, 5, 6, 3]);\n-            /// ```\n-            ///\n-            /// `select` can also be used on masks:\n-            /// ```\n-            /// # #![feature(portable_simd)]\n-            /// # use core_simd::Mask32;\n-            /// let a = Mask32::from_array([true, true, false, false]);\n-            /// let b = Mask32::from_array([false, false, true, true]);\n-            /// let mask = Mask32::from_array([true, false, false, true]);\n-            /// let c = mask.select(a, b);\n-            /// assert_eq!(c.to_array(), [true, false, true, false]);\n-            /// ```\n-            #[inline]\n-            pub fn select<S: Select<Self>>(self, true_values: S, false_values: S) -> S {\n-                S::select(self, true_values, false_values)\n-            }\n-        }\n+impl<Element, const LANES: usize> Select<Self> for Mask<Element, LANES>\n+where\n+    Element: MaskElement,\n+    LaneCount<LANES>: SupportedLaneCount,\n+{\n+    #[doc(hidden)]\n+    #[inline]\n+    fn select(mask: Self, true_values: Self, false_values: Self) -> Self {\n+        mask & true_values | !mask & false_values\n     }\n }\n \n-impl_select! { Mask8 (SimdI8): SimdU8, SimdI8 }\n-impl_select! { Mask16 (SimdI16): SimdU16, SimdI16 }\n-impl_select! { Mask32 (SimdI32): SimdU32, SimdI32, SimdF32}\n-impl_select! { Mask64 (SimdI64): SimdU64, SimdI64, SimdF64}\n-impl_select! { MaskSize (SimdIsize): SimdUsize, SimdIsize }\n+impl<Element, const LANES: usize> Mask<Element, LANES>\n+where\n+    Element: MaskElement,\n+    LaneCount<LANES>: SupportedLaneCount,\n+{\n+    /// Choose lanes from two vectors.\n+    ///\n+    /// For each lane in the mask, choose the corresponding lane from `true_values` if\n+    /// that lane mask is true, and `false_values` if that lane mask is false.\n+    ///\n+    /// ```\n+    /// # #![feature(portable_simd)]\n+    /// # use core_simd::{Mask32, SimdI32};\n+    /// let a = SimdI32::from_array([0, 1, 2, 3]);\n+    /// let b = SimdI32::from_array([4, 5, 6, 7]);\n+    /// let mask = Mask32::from_array([true, false, false, true]);\n+    /// let c = mask.select(a, b);\n+    /// assert_eq!(c.to_array(), [0, 5, 6, 3]);\n+    /// ```\n+    ///\n+    /// `select` can also be used on masks:\n+    /// ```\n+    /// # #![feature(portable_simd)]\n+    /// # use core_simd::Mask32;\n+    /// let a = Mask32::from_array([true, true, false, false]);\n+    /// let b = Mask32::from_array([false, false, true, true]);\n+    /// let mask = Mask32::from_array([true, false, false, true]);\n+    /// let c = mask.select(a, b);\n+    /// assert_eq!(c.to_array(), [true, false, true, false]);\n+    /// ```\n+    #[inline]\n+    pub fn select<S: Select<Self>>(self, true_values: S, false_values: S) -> S {\n+        S::select(self, true_values, false_values)\n+    }\n+}"}, {"sha": "03c2f93a9c2937e9f2b892e8fdbf3d3799e76a0a", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ea0280539cfee50c02fb5ed87960390d2d68008b/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0280539cfee50c02fb5ed87960390d2d68008b/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=ea0280539cfee50c02fb5ed87960390d2d68008b", "patch": "@@ -9,7 +9,7 @@ pub use uint::*;\n // Vectors of pointers are not for public use at the current time.\n pub(crate) mod ptr;\n \n-use crate::{LaneCount, SupportedLaneCount};\n+use crate::{LaneCount, MaskElement, SupportedLaneCount};\n \n /// A SIMD vector of `LANES` elements of type `Element`.\n #[repr(simd)]\n@@ -338,32 +338,32 @@ use sealed::Sealed;\n /// Marker trait for types that may be used as SIMD vector elements.\n pub unsafe trait SimdElement: Sealed + Copy {\n     /// The mask element type corresponding to this element type.\n-    type Mask: SimdElement;\n+    type Mask: MaskElement;\n }\n \n impl Sealed for u8 {}\n unsafe impl SimdElement for u8 {\n-    type Mask = u8;\n+    type Mask = i8;\n }\n \n impl Sealed for u16 {}\n unsafe impl SimdElement for u16 {\n-    type Mask = u16;\n+    type Mask = i16;\n }\n \n impl Sealed for u32 {}\n unsafe impl SimdElement for u32 {\n-    type Mask = u32;\n+    type Mask = i32;\n }\n \n impl Sealed for u64 {}\n unsafe impl SimdElement for u64 {\n-    type Mask = u64;\n+    type Mask = i64;\n }\n \n impl Sealed for usize {}\n unsafe impl SimdElement for usize {\n-    type Mask = usize;\n+    type Mask = isize;\n }\n \n impl Sealed for i8 {}"}]}