{"sha": "be67aceaeb849233daf6a3ee765be67f5e797e30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNjdhY2VhZWI4NDkyMzNkYWY2YTNlZTc2NWJlNjdmNWU3OTdlMzA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T21:51:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:31Z"}, "message": "librustc: De-`@mut` `IrMaps`", "tree": {"sha": "bbd0b35168ae080c035772f5d76b7fbff64d1244", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbd0b35168ae080c035772f5d76b7fbff64d1244"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be67aceaeb849233daf6a3ee765be67f5e797e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be67aceaeb849233daf6a3ee765be67f5e797e30", "html_url": "https://github.com/rust-lang/rust/commit/be67aceaeb849233daf6a3ee765be67f5e797e30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be67aceaeb849233daf6a3ee765be67f5e797e30/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "810177c78709e114f31ad16540f51b17fb6f3b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/810177c78709e114f31ad16540f51b17fb6f3b98", "html_url": "https://github.com/rust-lang/rust/commit/810177c78709e114f31ad16540f51b17fb6f3b98"}], "stats": {"total": 50, "additions": 22, "deletions": 28}, "files": [{"sha": "c2f8dfee8a94bda880aba0d555ea34dfe73bda7e", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/be67aceaeb849233daf6a3ee765be67f5e797e30/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be67aceaeb849233daf6a3ee765be67f5e797e30/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=be67aceaeb849233daf6a3ee765be67f5e797e30", "patch": "@@ -155,13 +155,13 @@ fn live_node_kind_to_str(lnk: LiveNodeKind, cx: ty::ctxt) -> ~str {\n \n struct LivenessVisitor;\n \n-impl Visitor<@mut IrMaps> for LivenessVisitor {\n-    fn visit_fn(&mut self, fk:&fn_kind, fd:&fn_decl, b:P<Block>, s:Span, n:NodeId, e:@mut IrMaps) {\n+impl Visitor<@IrMaps> for LivenessVisitor {\n+    fn visit_fn(&mut self, fk:&fn_kind, fd:&fn_decl, b:P<Block>, s:Span, n:NodeId, e:@IrMaps) {\n         visit_fn(self, fk, fd, b, s, n, e);\n     }\n-    fn visit_local(&mut self, l:@Local, e:@mut IrMaps) { visit_local(self, l, e); }\n-    fn visit_expr(&mut self, ex:@Expr, e:@mut IrMaps) { visit_expr(self, ex, e); }\n-    fn visit_arm(&mut self, a:&Arm, e:@mut IrMaps) { visit_arm(self, a, e); }\n+    fn visit_local(&mut self, l:@Local, e:@IrMaps) { visit_local(self, l, e); }\n+    fn visit_expr(&mut self, ex:@Expr, e:@IrMaps) { visit_expr(self, ex, e); }\n+    fn visit_arm(&mut self, a:&Arm, e:@IrMaps) { visit_arm(self, a, e); }\n }\n \n pub fn check_crate(tcx: ty::ctxt,\n@@ -170,9 +170,7 @@ pub fn check_crate(tcx: ty::ctxt,\n                    crate: &Crate) {\n     let mut visitor = LivenessVisitor;\n \n-    let initial_maps = @mut IrMaps(tcx,\n-                                   method_map,\n-                                   capture_map);\n+    let initial_maps = @IrMaps(tcx, method_map, capture_map);\n     visit::walk_crate(&mut visitor, crate, initial_maps);\n     tcx.sess.abort_if_errors();\n }\n@@ -273,7 +271,7 @@ fn IrMaps(tcx: ty::ctxt,\n }\n \n impl IrMaps {\n-    pub fn add_live_node(&mut self, lnk: LiveNodeKind) -> LiveNode {\n+    pub fn add_live_node(&self, lnk: LiveNodeKind) -> LiveNode {\n         let num_live_nodes = self.num_live_nodes.get();\n         let ln = LiveNode(num_live_nodes);\n         let mut lnks = self.lnks.borrow_mut();\n@@ -286,17 +284,15 @@ impl IrMaps {\n         ln\n     }\n \n-    pub fn add_live_node_for_node(&mut self,\n-                                  node_id: NodeId,\n-                                  lnk: LiveNodeKind) {\n+    pub fn add_live_node_for_node(&self, node_id: NodeId, lnk: LiveNodeKind) {\n         let ln = self.add_live_node(lnk);\n         let mut live_node_map = self.live_node_map.borrow_mut();\n         live_node_map.get().insert(node_id, ln);\n \n         debug!(\"{} is node {}\", ln.to_str(), node_id);\n     }\n \n-    pub fn add_variable(&mut self, vk: VarKind) -> Variable {\n+    pub fn add_variable(&self, vk: VarKind) -> Variable {\n         let v = Variable(self.num_vars.get());\n         {\n             let mut var_kinds = self.var_kinds.borrow_mut();\n@@ -317,7 +313,7 @@ impl IrMaps {\n         v\n     }\n \n-    pub fn variable(&mut self, node_id: NodeId, span: Span) -> Variable {\n+    pub fn variable(&self, node_id: NodeId, span: Span) -> Variable {\n         let variable_map = self.variable_map.borrow();\n         match variable_map.get().find(&node_id) {\n           Some(&var) => var,\n@@ -328,7 +324,7 @@ impl IrMaps {\n         }\n     }\n \n-    pub fn variable_name(&mut self, var: Variable) -> @str {\n+    pub fn variable_name(&self, var: Variable) -> @str {\n         let var_kinds = self.var_kinds.borrow();\n         match var_kinds.get()[*var] {\n             Local(LocalInfo { ident: nm, .. }) | Arg(_, nm) => {\n@@ -338,12 +334,12 @@ impl IrMaps {\n         }\n     }\n \n-    pub fn set_captures(&mut self, node_id: NodeId, cs: ~[CaptureInfo]) {\n+    pub fn set_captures(&self, node_id: NodeId, cs: ~[CaptureInfo]) {\n         let mut capture_info_map = self.capture_info_map.borrow_mut();\n         capture_info_map.get().insert(node_id, @cs);\n     }\n \n-    pub fn captures(&mut self, expr: &Expr) -> @~[CaptureInfo] {\n+    pub fn captures(&self, expr: &Expr) -> @~[CaptureInfo] {\n         let capture_info_map = self.capture_info_map.borrow();\n         match capture_info_map.get().find(&expr.id) {\n           Some(&caps) => caps,\n@@ -353,7 +349,7 @@ impl IrMaps {\n         }\n     }\n \n-    pub fn lnk(&mut self, ln: LiveNode) -> LiveNodeKind {\n+    pub fn lnk(&self, ln: LiveNode) -> LiveNodeKind {\n         let lnks = self.lnks.borrow();\n         lnks.get()[*ln]\n     }\n@@ -380,14 +376,12 @@ fn visit_fn(v: &mut LivenessVisitor,\n             body: P<Block>,\n             sp: Span,\n             id: NodeId,\n-            this: @mut IrMaps) {\n+            this: @IrMaps) {\n     debug!(\"visit_fn: id={}\", id);\n     let _i = ::util::common::indenter();\n \n     // swap in a new set of IR maps for this function body:\n-    let fn_maps = @mut IrMaps(this.tcx,\n-                              this.method_map,\n-                              this.capture_map);\n+    let fn_maps = @IrMaps(this.tcx, this.method_map, this.capture_map);\n \n     unsafe {\n         debug!(\"creating fn_maps: {}\", transmute::<&IrMaps, *IrMaps>(fn_maps));\n@@ -441,7 +435,7 @@ fn visit_fn(v: &mut LivenessVisitor,\n     lsets.warn_about_unused_args(decl, entry_ln);\n }\n \n-fn visit_local(v: &mut LivenessVisitor, local: @Local, this: @mut IrMaps) {\n+fn visit_local(v: &mut LivenessVisitor, local: @Local, this: @IrMaps) {\n     let def_map = this.tcx.def_map;\n     pat_util::pat_bindings(def_map, local.pat, |bm, p_id, sp, path| {\n         debug!(\"adding local variable {}\", p_id);\n@@ -465,7 +459,7 @@ fn visit_local(v: &mut LivenessVisitor, local: @Local, this: @mut IrMaps) {\n     visit::walk_local(v, local, this);\n }\n \n-fn visit_arm(v: &mut LivenessVisitor, arm: &Arm, this: @mut IrMaps) {\n+fn visit_arm(v: &mut LivenessVisitor, arm: &Arm, this: @IrMaps) {\n     let def_map = this.tcx.def_map;\n     for pat in arm.pats.iter() {\n         pat_util::pat_bindings(def_map, *pat, |bm, p_id, sp, path| {\n@@ -488,7 +482,7 @@ fn visit_arm(v: &mut LivenessVisitor, arm: &Arm, this: @mut IrMaps) {\n     visit::walk_arm(v, arm, this);\n }\n \n-fn visit_expr(v: &mut LivenessVisitor, expr: @Expr, this: @mut IrMaps) {\n+fn visit_expr(v: &mut LivenessVisitor, expr: @Expr, this: @IrMaps) {\n     match expr.node {\n       // live nodes required for uses or definitions of variables:\n       ExprPath(_) | ExprSelf => {\n@@ -594,7 +588,7 @@ type LiveNodeMap = @RefCell<HashMap<NodeId, LiveNode>>;\n \n pub struct Liveness {\n     tcx: ty::ctxt,\n-    ir: @mut IrMaps,\n+    ir: @IrMaps,\n     s: Specials,\n     successors: @mut ~[LiveNode],\n     users: @mut ~[Users],\n@@ -608,7 +602,7 @@ pub struct Liveness {\n     cont_ln: LiveNodeMap\n }\n \n-fn Liveness(ir: @mut IrMaps, specials: Specials) -> Liveness {\n+fn Liveness(ir: @IrMaps, specials: Specials) -> Liveness {\n     Liveness {\n         ir: ir,\n         tcx: ir.tcx,\n@@ -626,7 +620,7 @@ fn Liveness(ir: @mut IrMaps, specials: Specials) -> Liveness {\n \n impl Liveness {\n     pub fn live_node(&self, node_id: NodeId, span: Span) -> LiveNode {\n-        let ir: &mut IrMaps = self.ir;\n+        let ir: &IrMaps = self.ir;\n         let live_node_map = ir.live_node_map.borrow();\n         match live_node_map.get().find(&node_id) {\n           Some(&ln) => ln,"}]}