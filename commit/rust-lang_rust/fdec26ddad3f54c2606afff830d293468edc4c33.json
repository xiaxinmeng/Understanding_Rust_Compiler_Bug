{"sha": "fdec26ddad3f54c2606afff830d293468edc4c33", "node_id": "C_kwDOAAsO6NoAKGZkZWMyNmRkYWQzZjU0YzI2MDZhZmZmODMwZDI5MzQ2OGVkYzRjMzM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-23T05:04:33Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-25T01:35:56Z"}, "message": "Shrink `MatcherPosRepetition`.\n\nCurrently it copies a `KleeneOp` and a `Token` out of a\n`SequenceRepetition`. It's better to store a reference to the\n`SequenceRepetition`, which is now possible due to #95159 having changed\nthe lifetimes.", "tree": {"sha": "3284a0fbbdb137de61891a20518d11ebde3a3df5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3284a0fbbdb137de61891a20518d11ebde3a3df5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdec26ddad3f54c2606afff830d293468edc4c33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdec26ddad3f54c2606afff830d293468edc4c33", "html_url": "https://github.com/rust-lang/rust/commit/fdec26ddad3f54c2606afff830d293468edc4c33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdec26ddad3f54c2606afff830d293468edc4c33/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cad5f1e7742e46ce16dc54d38516301e3ae72a9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cad5f1e7742e46ce16dc54d38516301e3ae72a9e", "html_url": "https://github.com/rust-lang/rust/commit/cad5f1e7742e46ce16dc54d38516301e3ae72a9e"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "5e97fc903209f00ba0d226bdf5208b070c568f72", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fdec26ddad3f54c2606afff830d293468edc4c33/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdec26ddad3f54c2606afff830d293468edc4c33/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=fdec26ddad3f54c2606afff830d293468edc4c33", "patch": "@@ -160,7 +160,7 @@ struct MatcherPos<'tt> {\n \n // This type is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(MatcherPos<'_>, 136);\n+rustc_data_structures::static_assert_size!(MatcherPos<'_>, 112);\n \n impl<'tt> MatcherPos<'tt> {\n     /// `len` `Vec`s (initially shared and empty) that will store matches of metavars.\n@@ -209,11 +209,7 @@ impl<'tt> MatcherPos<'tt> {\n             match_lo: up.match_cur,\n             match_cur: up.match_cur,\n             match_hi: up.match_cur + seq.num_captures,\n-            repetition: Some(MatcherPosRepetition {\n-                up,\n-                sep: seq.separator.clone(),\n-                seq_op: seq.kleene.op,\n-            }),\n+            repetition: Some(MatcherPosRepetition { up, seq }),\n             stack: smallvec![],\n         }\n     }\n@@ -227,15 +223,12 @@ impl<'tt> MatcherPos<'tt> {\n \n #[derive(Clone)]\n struct MatcherPosRepetition<'tt> {\n-    /// The KleeneOp of this sequence.\n-    seq_op: mbe::KleeneOp,\n-\n-    /// The separator.\n-    sep: Option<Token>,\n-\n     /// The \"parent\" matcher position. That is, the matcher position just before we enter the\n     /// sequence.\n     up: Box<MatcherPos<'tt>>,\n+\n+    /// The sequence itself.\n+    seq: &'tt SequenceRepetition,\n }\n \n enum EofItems<'tt> {\n@@ -559,14 +552,19 @@ impl<'tt> TtParser<'tt> {\n                     self.cur_items.push(new_pos);\n                 }\n \n-                if idx == len && repetition.sep.is_some() {\n-                    if repetition.sep.as_ref().map_or(false, |sep| token_name_eq(token, sep)) {\n+                if idx == len && repetition.seq.separator.is_some() {\n+                    if repetition\n+                        .seq\n+                        .separator\n+                        .as_ref()\n+                        .map_or(false, |sep| token_name_eq(token, sep))\n+                    {\n                         // The matcher has a separator, and it matches the current token. We can\n                         // advance past the separator token.\n                         item.idx += 1;\n                         self.next_items.push(item);\n                     }\n-                } else if repetition.seq_op != mbe::KleeneOp::ZeroOrOne {\n+                } else if repetition.seq.kleene.op != mbe::KleeneOp::ZeroOrOne {\n                     // We don't need a separator. Move the \"dot\" back to the beginning of the\n                     // matcher and try to match again UNLESS we are only allowed to have _one_\n                     // repetition."}]}