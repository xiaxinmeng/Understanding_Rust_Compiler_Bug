{"sha": "6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNWJlZGE2NzcyMjMwZDhlYzBlNWU0YjllNTYxMTAwYWNmODFhNmY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-07T07:46:44Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-07T07:46:44Z"}, "message": "syntax: move expand_generic_deriving to be a method on TraitDef", "tree": {"sha": "385860306f6e7a3eea69bf7edbe3874ea418edee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/385860306f6e7a3eea69bf7edbe3874ea418edee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "html_url": "https://github.com/rust-lang/rust/commit/6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43e52e4bf144bbd2f366a4f32ac0128136273226", "url": "https://api.github.com/repos/rust-lang/rust/commits/43e52e4bf144bbd2f366a4f32ac0128136273226", "html_url": "https://github.com/rust-lang/rust/commit/43e52e4bf144bbd2f366a4f32ac0128136273226"}], "stats": {"total": 92, "additions": 37, "deletions": 55}, "files": [{"sha": "4fc67f2f52e785bc5318db9e98777279591d9799", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "patch": "@@ -38,9 +38,7 @@ pub fn expand_deriving_clone(cx: @ExtCtxt,\n         ]\n     };\n \n-    expand_deriving_generic(cx, span,\n-                            mitem, in_items,\n-                            &trait_def)\n+    trait_def.expand(cx, span, mitem, in_items)\n }\n \n pub fn expand_deriving_deep_clone(cx: @ExtCtxt,\n@@ -67,9 +65,7 @@ pub fn expand_deriving_deep_clone(cx: @ExtCtxt,\n         ]\n     };\n \n-    expand_deriving_generic(cx, span,\n-                            mitem, in_items,\n-                            &trait_def)\n+    trait_def.expand(cx, span, mitem, in_items)\n }\n \n fn cs_clone("}, {"sha": "5fc75511e57b4c50635a78fd8ee58bbcfe97a141", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "patch": "@@ -54,7 +54,5 @@ pub fn expand_deriving_eq(cx: @ExtCtxt,\n             md!(\"ne\", cs_ne)\n         ]\n     };\n-\n-    expand_deriving_generic(cx, span, mitem, in_items,\n-                            &trait_def)\n+    trait_def.expand(cx, span, mitem, in_items)\n }"}, {"sha": "e07215a905a55a826554d50f8543f3fab8b055f2", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "patch": "@@ -49,9 +49,7 @@ pub fn expand_deriving_ord(cx: @ExtCtxt,\n             md!(\"ge\", false, true)\n         ]\n     };\n-\n-    expand_deriving_generic(cx, span, mitem, in_items,\n-                            &trait_def)\n+    trait_def.expand(cx, span, mitem, in_items)\n }\n \n /// `less`: is this `lt` or `le`? `equal`: is this `le` or `ge`?"}, {"sha": "acd2073b2734b5c138b4611839c3735163259d27", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "patch": "@@ -42,7 +42,5 @@ pub fn expand_deriving_totaleq(cx: @ExtCtxt,\n             }\n         ]\n     };\n-\n-    expand_deriving_generic(cx, span, mitem, in_items,\n-                            &trait_def)\n+    trait_def.expand(cx, span, mitem, in_items)\n }"}, {"sha": "94407cd6e7294e55b534267b43bcc5a655d0d59a", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "patch": "@@ -38,8 +38,7 @@ pub fn expand_deriving_totalord(cx: @ExtCtxt,\n         ]\n     };\n \n-    expand_deriving_generic(cx, span, mitem, in_items,\n-                            &trait_def)\n+    trait_def.expand(cx, span, mitem, in_items)\n }\n \n "}, {"sha": "2081f262825cedb5ece1eb6d47e4475654d231ae", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "patch": "@@ -49,8 +49,7 @@ pub fn expand_deriving_decodable(cx: @ExtCtxt,\n         ]\n     };\n \n-    expand_deriving_generic(cx, span, mitem, in_items,\n-                            &trait_def)\n+    trait_def.expand(cx, span, mitem, in_items)\n }\n \n fn decodable_substructure(cx: @ExtCtxt, span: span,"}, {"sha": "2d24de553d6c3ffa06bb4b9239dc01fb25d4da11", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "patch": "@@ -109,8 +109,7 @@ pub fn expand_deriving_encodable(cx: @ExtCtxt,\n         ]\n     };\n \n-    expand_deriving_generic(cx, span, mitem, in_items,\n-                            &trait_def)\n+    trait_def.expand(cx, span, mitem, in_items)\n }\n \n fn encodable_substructure(cx: @ExtCtxt, span: span,"}, {"sha": "52a2d9ff9de4a1600b90a4a05cd5a25a17125dfd", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "patch": "@@ -178,35 +178,6 @@ use core::vec;\n pub use self::ty::*;\n mod ty;\n \n-pub fn expand_deriving_generic(cx: @ExtCtxt,\n-                               span: span,\n-                               _mitem: @ast::meta_item,\n-                               in_items: ~[@ast::item],\n-                               trait_def: &TraitDef) -> ~[@ast::item] {\n-    let mut result = ~[];\n-    for in_items.each |item| {\n-        result.push(*item);\n-        match item.node {\n-            ast::item_struct(struct_def, ref generics) => {\n-                result.push(trait_def.expand_struct_def(cx,\n-                                                        span,\n-                                                        struct_def,\n-                                                        item.ident,\n-                                                        generics));\n-            }\n-            ast::item_enum(ref enum_definition, ref generics) => {\n-                result.push(trait_def.expand_enum_def(cx,\n-                                                      span,\n-                                                      enum_definition,\n-                                                      item.ident,\n-                                                      generics));\n-            }\n-            _ => ()\n-        }\n-    }\n-    result\n-}\n-\n pub struct TraitDef<'self> {\n     /// Path of the trait, including any type parameters\n     path: Path<'self>,\n@@ -310,6 +281,32 @@ pub type EnumNonMatchFunc<'self> =\n \n \n impl<'self> TraitDef<'self> {\n+    pub fn expand(&self, cx: @ExtCtxt,\n+                  span: span,\n+                  _mitem: @ast::meta_item,\n+                  in_items: ~[@ast::item]) -> ~[@ast::item] {\n+        let mut result = ~[];\n+        for in_items.each |item| {\n+            result.push(*item);\n+            match item.node {\n+                ast::item_struct(struct_def, ref generics) => {\n+                    result.push(self.expand_struct_def(cx, span,\n+                                                       struct_def,\n+                                                       item.ident,\n+                                                       generics));\n+                }\n+                ast::item_enum(ref enum_def, ref generics) => {\n+                    result.push(self.expand_enum_def(cx, span,\n+                                                     enum_def,\n+                                                     item.ident,\n+                                                     generics));\n+                }\n+                _ => ()\n+            }\n+        }\n+        result\n+    }\n+\n     /**\n      *\n      * Given that we are deriving a trait `Tr` for a type `T<'a, ...,"}, {"sha": "13f83b55a4047ce2b176cb42e49a257567f64bcc", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "patch": "@@ -42,7 +42,7 @@ pub fn expand_deriving_iter_bytes(cx: @ExtCtxt,\n         ]\n     };\n \n-    expand_deriving_generic(cx, span, mitem, in_items, &trait_def)\n+    trait_def.expand(cx, span, mitem, in_items)\n }\n \n fn iter_bytes_substructure(cx: @ExtCtxt, span: span, substr: &Substructure) -> @expr {"}, {"sha": "ab5ac6d78479386718924d76869c17ce40b94cb7", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "patch": "@@ -47,8 +47,7 @@ pub fn expand_deriving_rand(cx: @ExtCtxt,\n             }\n         ]\n     };\n-\n-    expand_deriving_generic(cx, span, mitem, in_items, &trait_def)\n+    trait_def.expand(cx, span, mitem, in_items)\n }\n \n fn rand_substructure(cx: @ExtCtxt, span: span, substr: &Substructure) -> @expr {"}, {"sha": "41be3a775c1644803f03c1e7bee95000deb468e8", "filename": "src/libsyntax/ext/deriving/to_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5beda6772230d8ec0e5e4b9e561100acf81a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs?ref=6d5beda6772230d8ec0e5e4b9e561100acf81a6f", "patch": "@@ -37,8 +37,7 @@ pub fn expand_deriving_to_str(cx: @ExtCtxt,\n             }\n         ]\n     };\n-\n-    expand_deriving_generic(cx, span, mitem, in_items, &trait_def)\n+    trait_def.expand(cx, span, mitem, in_items)\n }\n \n fn to_str_substructure(cx: @ExtCtxt, span: span, substr: &Substructure) -> @expr {"}]}