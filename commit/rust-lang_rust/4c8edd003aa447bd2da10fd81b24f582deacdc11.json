{"sha": "4c8edd003aa447bd2da10fd81b24f582deacdc11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOGVkZDAwM2FhNDQ3YmQyZGExMGZkODFiMjRmNTgyZGVhY2RjMTE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-13T17:16:56Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-16T19:19:06Z"}, "message": "Use imports_locator", "tree": {"sha": "6b7b97ba769e7b1c7de4feebfdcd06173bf52853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b7b97ba769e7b1c7de4feebfdcd06173bf52853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c8edd003aa447bd2da10fd81b24f582deacdc11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8edd003aa447bd2da10fd81b24f582deacdc11", "html_url": "https://github.com/rust-lang/rust/commit/4c8edd003aa447bd2da10fd81b24f582deacdc11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c8edd003aa447bd2da10fd81b24f582deacdc11/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1556550f83b7b8e9dd42c80ab6e08a632dfd256", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1556550f83b7b8e9dd42c80ab6e08a632dfd256", "html_url": "https://github.com/rust-lang/rust/commit/d1556550f83b7b8e9dd42c80ab6e08a632dfd256"}], "stats": {"total": 205, "additions": 119, "deletions": 86}, "files": [{"sha": "453a6cebfb8cbca4082fe0433f6084ee451840bf", "filename": "crates/assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4c8edd003aa447bd2da10fd81b24f582deacdc11/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8edd003aa447bd2da10fd81b24f582deacdc11/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=4c8edd003aa447bd2da10fd81b24f582deacdc11", "patch": "@@ -62,19 +62,21 @@ pub(crate) fn replace_derive_with_manual_impl(\n     let current_module = ctx.sema.scope(annotated_name.syntax()).module()?;\n     let current_crate = current_module.krate();\n \n-    let found_traits = imports_locator::find_imports(&ctx.sema, current_crate, trait_token.text())\n-        .into_iter()\n-        .filter_map(|candidate: either::Either<hir::ModuleDef, hir::MacroDef>| match candidate {\n-            either::Either::Left(hir::ModuleDef::Trait(trait_)) => Some(trait_),\n-            _ => None,\n-        })\n-        .flat_map(|trait_| {\n-            current_module\n-                .find_use_path(ctx.sema.db, hir::ModuleDef::Trait(trait_))\n-                .as_ref()\n-                .map(mod_path_to_ast)\n-                .zip(Some(trait_))\n-        });\n+    let found_traits =\n+        imports_locator::find_exact_imports(&ctx.sema, current_crate, trait_token.text())\n+            .filter_map(\n+                |candidate: either::Either<hir::ModuleDef, hir::MacroDef>| match candidate {\n+                    either::Either::Left(hir::ModuleDef::Trait(trait_)) => Some(trait_),\n+                    _ => None,\n+                },\n+            )\n+            .flat_map(|trait_| {\n+                current_module\n+                    .find_use_path(ctx.sema.db, hir::ModuleDef::Trait(trait_))\n+                    .as_ref()\n+                    .map(mod_path_to_ast)\n+                    .zip(Some(trait_))\n+            });\n \n     let mut no_traits_found = true;\n     for (trait_path, trait_) in found_traits.inspect(|_| no_traits_found = false) {"}, {"sha": "89e62ba79c0c50dfeea0cdf33c656259ae171b95", "filename": "crates/assists/src/utils/import_assets.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4c8edd003aa447bd2da10fd81b24f582deacdc11/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8edd003aa447bd2da10fd81b24f582deacdc11/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs?ref=4c8edd003aa447bd2da10fd81b24f582deacdc11", "patch": "@@ -179,21 +179,25 @@ impl ImportAssets {\n             }\n         };\n \n-        let mut res = imports_locator::find_imports(sema, current_crate, &self.get_search_query())\n-            .into_iter()\n-            .filter_map(filter)\n-            .filter_map(|candidate| {\n-                let item: hir::ItemInNs = candidate.either(Into::into, Into::into);\n-                if let Some(prefix_kind) = prefixed {\n-                    self.module_with_name_to_import.find_use_path_prefixed(db, item, prefix_kind)\n-                } else {\n-                    self.module_with_name_to_import.find_use_path(db, item)\n-                }\n-                .map(|path| (path, item))\n-            })\n-            .filter(|(use_path, _)| !use_path.segments.is_empty())\n-            .take(20)\n-            .collect::<Vec<_>>();\n+        let mut res =\n+            imports_locator::find_exact_imports(sema, current_crate, &self.get_search_query())\n+                .filter_map(filter)\n+                .filter_map(|candidate| {\n+                    let item: hir::ItemInNs = candidate.either(Into::into, Into::into);\n+                    if let Some(prefix_kind) = prefixed {\n+                        self.module_with_name_to_import.find_use_path_prefixed(\n+                            db,\n+                            item,\n+                            prefix_kind,\n+                        )\n+                    } else {\n+                        self.module_with_name_to_import.find_use_path(db, item)\n+                    }\n+                    .map(|path| (path, item))\n+                })\n+                .filter(|(use_path, _)| !use_path.segments.is_empty())\n+                .take(20)\n+                .collect::<Vec<_>>();\n         res.sort_by_key(|(path, _)| path.clone());\n         res\n     }"}, {"sha": "272c9a35469c21729ae1a929417858ed8592f03f", "filename": "crates/completion/src/completions/magic.rs", "status": "modified", "additions": 36, "deletions": 38, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4c8edd003aa447bd2da10fd81b24f582deacdc11/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmagic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8edd003aa447bd2da10fd81b24f582deacdc11/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmagic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmagic.rs?ref=4c8edd003aa447bd2da10fd81b24f582deacdc11", "patch": "@@ -2,8 +2,8 @@\n \n use assists::utils::{insert_use, mod_path_to_ast, ImportScope};\n use either::Either;\n-use hir::{db::HirDatabase, MacroDef, ModuleDef, Query};\n-use itertools::Itertools;\n+use hir::{db::HirDatabase, MacroDef, ModuleDef};\n+use ide_db::imports_locator;\n use syntax::{algo, AstNode};\n use text_edit::TextEdit;\n \n@@ -22,42 +22,40 @@ pub(crate) fn complete_magic(acc: &mut Completions, ctx: &CompletionContext) ->\n \n     let potential_import_name = ctx.token.to_string();\n \n-    let possible_imports = ctx\n-        .krate?\n-        // TODO kb use imports_locator instead?\n-        .query_external_importables(ctx.db, Query::new(&potential_import_name).limit(40))\n-        .unique()\n-        .filter_map(|import_candidate| {\n-            let use_path = match import_candidate {\n-                Either::Left(module_def) => current_module.find_use_path(ctx.db, module_def),\n-                Either::Right(macro_def) => current_module.find_use_path(ctx.db, macro_def),\n-            }?;\n-            Some((use_path, additional_completion(ctx.db, import_candidate)))\n-        })\n-        .filter_map(|(mod_path, additional_completion)| {\n-            let mut builder = TextEdit::builder();\n-\n-            let correct_qualifier = format!(\n-                \"{}{}\",\n-                mod_path.segments.last()?,\n-                additional_completion.unwrap_or_default()\n-            );\n-            builder.replace(anchor.syntax().text_range(), correct_qualifier);\n-\n-            let rewriter = insert_use(&import_scope, mod_path_to_ast(&mod_path), ctx.config.merge);\n-            let old_ast = rewriter.rewrite_root()?;\n-            algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut builder);\n-\n-            let completion_item: CompletionItem = CompletionItem::new(\n-                CompletionKind::Magic,\n-                ctx.source_range(),\n-                mod_path.to_string(),\n-            )\n-            .kind(CompletionItemKind::Struct)\n-            .text_edit(builder.finish())\n-            .into();\n-            Some(completion_item)\n-        });\n+    let possible_imports =\n+        imports_locator::find_similar_imports(&ctx.sema, ctx.krate?, &potential_import_name)\n+            .filter_map(|import_candidate| {\n+                let use_path = match import_candidate {\n+                    Either::Left(module_def) => current_module.find_use_path(ctx.db, module_def),\n+                    Either::Right(macro_def) => current_module.find_use_path(ctx.db, macro_def),\n+                }?;\n+                Some((use_path, additional_completion(ctx.db, import_candidate)))\n+            })\n+            .filter_map(|(mod_path, additional_completion)| {\n+                let mut builder = TextEdit::builder();\n+\n+                let correct_qualifier = format!(\n+                    \"{}{}\",\n+                    mod_path.segments.last()?,\n+                    additional_completion.unwrap_or_default()\n+                );\n+                builder.replace(anchor.syntax().text_range(), correct_qualifier);\n+\n+                let rewriter =\n+                    insert_use(&import_scope, mod_path_to_ast(&mod_path), ctx.config.merge);\n+                let old_ast = rewriter.rewrite_root()?;\n+                algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut builder);\n+\n+                let completion_item: CompletionItem = CompletionItem::new(\n+                    CompletionKind::Magic,\n+                    ctx.source_range(),\n+                    mod_path.to_string(),\n+                )\n+                .kind(CompletionItemKind::Struct)\n+                .text_edit(builder.finish())\n+                .into();\n+                Some(completion_item)\n+            });\n     acc.add_all(possible_imports);\n \n     Some(())"}, {"sha": "8323af8b285e00556ec0f1431ff9bd7d4951bdaa", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c8edd003aa447bd2da10fd81b24f582deacdc11/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8edd003aa447bd2da10fd81b24f582deacdc11/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=4c8edd003aa447bd2da10fd81b24f582deacdc11", "patch": "@@ -118,7 +118,7 @@ pub fn completions(\n     completions::macro_in_item_position::complete_macro_in_item_position(&mut acc, &ctx);\n     completions::trait_impl::complete_trait_impl(&mut acc, &ctx);\n     completions::mod_::complete_mod(&mut acc, &ctx);\n-    completions::complete_magic::complete_magic(&mut acc, &ctx);\n+    completions::magic::complete_magic(&mut acc, &ctx);\n \n     Some(acc)\n }"}, {"sha": "4b7ea3aa9f6868d598bc01ef0de7ec73e72d0b43", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c8edd003aa447bd2da10fd81b24f582deacdc11/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8edd003aa447bd2da10fd81b24f582deacdc11/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=4c8edd003aa447bd2da10fd81b24f582deacdc11", "patch": "@@ -49,7 +49,7 @@ pub use hir_def::{\n     builtin_type::BuiltinType,\n     docs::Documentation,\n     find_path::PrefixKind,\n-    import_map::Query,\n+    import_map::Query as ExternalImportablesQuery,\n     item_scope::ItemInNs,\n     nameres::ModuleSource,\n     path::{ModPath, PathKind},"}, {"sha": "71fb7207b6612dc1c5be3b4ba200dcbbb6c4bf4f", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 47, "deletions": 18, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4c8edd003aa447bd2da10fd81b24f582deacdc11/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8edd003aa447bd2da10fd81b24f582deacdc11/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=4c8edd003aa447bd2da10fd81b24f582deacdc11", "patch": "@@ -1,40 +1,69 @@\n //! This module contains an import search funcionality that is provided to the assists module.\n //! Later, this should be moved away to a separate crate that is accessible from the assists module.\n \n-use hir::{Crate, MacroDef, ModuleDef, Query as ImportMapQuery, Semantics};\n+use hir::{Crate, ExternalImportablesQuery, MacroDef, ModuleDef, Semantics};\n use syntax::{ast, AstNode, SyntaxKind::NAME};\n \n use crate::{\n     defs::{Definition, NameClass},\n-    symbol_index::{self, FileSymbol, Query as SymbolQuery},\n+    symbol_index::{self, FileSymbol, Query as LocalImportablesQuery},\n     RootDatabase,\n };\n use either::Either;\n use rustc_hash::FxHashSet;\n \n-pub fn find_imports<'a>(\n+pub fn find_exact_imports<'a>(\n     sema: &Semantics<'a, RootDatabase>,\n     krate: Crate,\n     name_to_import: &str,\n-) -> Vec<Either<ModuleDef, MacroDef>> {\n-    let _p = profile::span(\"search_for_imports\");\n+) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n+    let _p = profile::span(\"find_exact_imports\");\n+    find_imports(\n+        sema,\n+        krate,\n+        {\n+            let mut local_query = LocalImportablesQuery::new(name_to_import.to_string());\n+            local_query.exact();\n+            local_query.limit(40);\n+            local_query\n+        },\n+        ExternalImportablesQuery::new(name_to_import).anchor_end().case_sensitive().limit(40),\n+    )\n+}\n+\n+pub fn find_similar_imports<'a>(\n+    sema: &Semantics<'a, RootDatabase>,\n+    krate: Crate,\n+    name_to_import: &str,\n+) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n+    let _p = profile::span(\"find_similar_imports\");\n+    find_imports(\n+        sema,\n+        krate,\n+        {\n+            let mut local_query = LocalImportablesQuery::new(name_to_import.to_string());\n+            local_query.limit(40);\n+            local_query\n+        },\n+        ExternalImportablesQuery::new(name_to_import).limit(40),\n+    )\n+}\n+\n+fn find_imports<'a>(\n+    sema: &Semantics<'a, RootDatabase>,\n+    krate: Crate,\n+    local_query: LocalImportablesQuery,\n+    external_query: ExternalImportablesQuery,\n+) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n+    let _p = profile::span(\"find_similar_imports\");\n     let db = sema.db;\n \n     // Query dependencies first.\n-    let mut candidates: FxHashSet<_> = krate\n-        .query_external_importables(\n-            db,\n-            ImportMapQuery::new(name_to_import).anchor_end().case_sensitive().limit(40),\n-        )\n-        .collect();\n+    let mut candidates: FxHashSet<_> =\n+        krate.query_external_importables(db, external_query).collect();\n \n     // Query the local crate using the symbol index.\n-    let local_results = {\n-        let mut query = SymbolQuery::new(name_to_import.to_string());\n-        query.exact();\n-        query.limit(40);\n-        symbol_index::crate_symbols(db, krate.into(), query)\n-    };\n+    let local_results = symbol_index::crate_symbols(db, krate.into(), local_query);\n \n     candidates.extend(\n         local_results\n@@ -47,7 +76,7 @@ pub fn find_imports<'a>(\n             }),\n     );\n \n-    candidates.into_iter().collect()\n+    candidates.into_iter()\n }\n \n fn get_name_definition<'a>("}]}