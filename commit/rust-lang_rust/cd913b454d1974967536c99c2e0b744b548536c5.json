{"sha": "cd913b454d1974967536c99c2e0b744b548536c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkOTEzYjQ1NGQxOTc0OTY3NTM2Yzk5YzJlMGI3NDRiNTQ4NTM2YzU=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-26T00:19:23Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-27T01:03:32Z"}, "message": "stdlib: Added an incredibly simple treemap.", "tree": {"sha": "fd00252937c662eae46b1a615b66ed0a3cfac43e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd00252937c662eae46b1a615b66ed0a3cfac43e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd913b454d1974967536c99c2e0b744b548536c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd913b454d1974967536c99c2e0b744b548536c5", "html_url": "https://github.com/rust-lang/rust/commit/cd913b454d1974967536c99c2e0b744b548536c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd913b454d1974967536c99c2e0b744b548536c5/comments", "author": null, "committer": null, "parents": [{"sha": "78f07a1453e13b3116e032c5957390965a54defb", "url": "https://api.github.com/repos/rust-lang/rust/commits/78f07a1453e13b3116e032c5957390965a54defb", "html_url": "https://github.com/rust-lang/rust/commit/78f07a1453e13b3116e032c5957390965a54defb"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "ffbf26b59283e556f79ac2efc639347f4708eed6", "filename": "src/lib/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd913b454d1974967536c99c2e0b744b548536c5/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/cd913b454d1974967536c99c2e0b744b548536c5/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=cd913b454d1974967536c99c2e0b744b548536c5", "patch": "@@ -75,6 +75,7 @@ mod net;\n \n // FIXME: parametric\n mod map;\n+mod treemap;\n mod deque;\n mod list;\n mod rand;"}, {"sha": "97ab1353c6b08e302d264b472f1440140712375c", "filename": "src/lib/treemap.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/cd913b454d1974967536c99c2e0b744b548536c5/src%2Flib%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd913b454d1974967536c99c2e0b744b548536c5/src%2Flib%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftreemap.rs?ref=cd913b454d1974967536c99c2e0b744b548536c5", "patch": "@@ -0,0 +1,76 @@\n+/*\n+A key,value store that works on anything.\n+\n+This works using a binary search tree. In the first version, it's a\n+very naive algorithm, but it will probably be updated to be a\n+red-black tree or something else.\n+\n+*/\n+\n+import option::some;\n+import option::none;\n+import option = option::t;\n+\n+export treemap;\n+export init;\n+export insert;\n+export find;\n+\n+tag tree_node<@K, @V> {\n+    empty;\n+    node(@K, @V, treemap<K, V>, treemap<K, V>);\n+}\n+\n+type treemap<@K, @V> = @mutable tree_node<K, V>;\n+\n+fn init<@K, @V>() -> treemap<K,V> { @mutable empty }\n+\n+fn insert<@K, @V>(m : &treemap<K, V>, k : &K, v : &V) {\n+    alt m {\n+      @empty. {\n+        *m = node(@k, @v, @mutable empty, @mutable empty);\n+      }\n+      @node(@kk, _, _, _) {\n+        // We have to name left and right individually, because\n+        // otherwise the alias checker complains.\n+        if k < kk {\n+            alt m {\n+              @node(_, _, left, _) {\n+                insert(left, k, v);\n+              }\n+            }\n+        }\n+        else {\n+            alt m {\n+              @node(_, _, _, right) {\n+                insert(right, k, v);\n+              }\n+            }\n+        }\n+      }\n+    }\n+}\n+\n+fn find<@K, @V>(m : &treemap<K, V>, k : &K) -> option<V> {\n+  alt *m {\n+    empty. { none }\n+    node(@kk, @v, _, _) {\n+      if k == kk { some(v) }\n+      // Again, ugliness to unpack left and right individually.\n+      else if k < kk {\n+          alt *m {\n+            node(_, _, left, _) {\n+              find(left, k)\n+            }\n+          }\n+      }\n+      else {\n+          alt *m {\n+            node(_, _, _, right) {\n+              find(right, k)\n+            }\n+          }\n+      }\n+    }\n+  }\n+}"}, {"sha": "64d52beb20225c44e4a025d37d0b44c8da435bc7", "filename": "src/test/stdtest/stdtest.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd913b454d1974967536c99c2e0b744b548536c5/src%2Ftest%2Fstdtest%2Fstdtest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/cd913b454d1974967536c99c2e0b744b548536c5/src%2Ftest%2Fstdtest%2Fstdtest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstdtest.rc?ref=cd913b454d1974967536c99c2e0b744b548536c5", "patch": "@@ -12,6 +12,7 @@ mod io;\n mod vec;\n mod list;\n mod map;\n+mod treemap;\n mod net;\n mod option;\n mod os;"}, {"sha": "58777b2579c577893ad65013d7c4bd7a2b19b680", "filename": "src/test/stdtest/treemap.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cd913b454d1974967536c99c2e0b744b548536c5/src%2Ftest%2Fstdtest%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd913b454d1974967536c99c2e0b744b548536c5/src%2Ftest%2Fstdtest%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftreemap.rs?ref=cd913b454d1974967536c99c2e0b744b548536c5", "patch": "@@ -0,0 +1,42 @@\n+use std;\n+import std::treemap::*;\n+import std::option::some;\n+import std::option::none;\n+\n+#[test]\n+fn init_treemap() {\n+    let m = init::<int, int>();\n+}\n+\n+#[test]\n+fn insert_one() {\n+    let m = init();\n+    insert(m, 1, 2);\n+}\n+\n+#[test]\n+fn insert_two() {\n+    let m = init();\n+    insert(m, 1, 2);\n+    insert(m, 3, 4);\n+}\n+\n+#[test]\n+fn insert_find() {\n+    let m = init();\n+    insert(m, 1, 2);\n+    assert(find(m, 1) == some(2));\n+}\n+\n+#[test]\n+fn find_empty() {\n+    let m = init::<int, int>();\n+    assert(find(m, 1) == none);\n+}\n+\n+#[test]\n+fn find_not_found() {\n+    let m = init();\n+    insert(m, 1, 2);\n+    assert(find(m, 2) == none);\n+}"}]}