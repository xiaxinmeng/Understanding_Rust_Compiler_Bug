{"sha": "b6975bf22f651c67b1b2e84c1421b4b6623c89de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OTc1YmYyMmY2NTFjNjdiMWIyZTg0YzE0MjFiNGI2NjIzYzg5ZGU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-05T17:57:32Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-19T08:25:13Z"}, "message": "auto impl`DiscriminantKind` for every type", "tree": {"sha": "8c21830b6be328ef6d2d1af176ef2d404a1365de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c21830b6be328ef6d2d1af176ef2d404a1365de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6975bf22f651c67b1b2e84c1421b4b6623c89de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6975bf22f651c67b1b2e84c1421b4b6623c89de", "html_url": "https://github.com/rust-lang/rust/commit/b6975bf22f651c67b1b2e84c1421b4b6623c89de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6975bf22f651c67b1b2e84c1421b4b6623c89de/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f7c5a80a38ea64ea49dd1a048e023c623a10acc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7c5a80a38ea64ea49dd1a048e023c623a10acc", "html_url": "https://github.com/rust-lang/rust/commit/9f7c5a80a38ea64ea49dd1a048e023c623a10acc"}], "stats": {"total": 162, "additions": 140, "deletions": 22}, "files": [{"sha": "cb23054d8710e739f7daf79d1ae86002a552edff", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=b6975bf22f651c67b1b2e84c1421b4b6623c89de", "patch": "@@ -409,6 +409,9 @@ pub enum Vtable<'tcx, N> {\n     /// Same as above, but for a function pointer type with the given signature.\n     VtableFnPointer(VtableFnPointerData<'tcx, N>),\n \n+    /// Vtable for a builtin `DeterminantKind` trait implementation.\n+    VtableDiscriminantKind(VtableDiscriminantKindData),\n+\n     /// Vtable automatically generated for a generator.\n     VtableGenerator(VtableGeneratorData<'tcx, N>),\n \n@@ -427,6 +430,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             VtableGenerator(c) => c.nested,\n             VtableObject(d) => d.nested,\n             VtableFnPointer(d) => d.nested,\n+            VtableDiscriminantKind(VtableDiscriminantKindData) => Vec::new(),\n             VtableTraitAlias(d) => d.nested,\n         }\n     }\n@@ -441,6 +445,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             VtableGenerator(c) => &c.nested[..],\n             VtableObject(d) => &d.nested[..],\n             VtableFnPointer(d) => &d.nested[..],\n+            VtableDiscriminantKind(VtableDiscriminantKindData) => &[],\n             VtableTraitAlias(d) => &d.nested[..],\n         }\n     }\n@@ -482,6 +487,9 @@ impl<'tcx, N> Vtable<'tcx, N> {\n                 fn_ty: p.fn_ty,\n                 nested: p.nested.into_iter().map(f).collect(),\n             }),\n+            VtableDiscriminantKind(VtableDiscriminantKindData) => {\n+                VtableDiscriminantKind(VtableDiscriminantKindData)\n+            }\n             VtableTraitAlias(d) => VtableTraitAlias(VtableTraitAliasData {\n                 alias_def_id: d.alias_def_id,\n                 substs: d.substs,\n@@ -558,6 +566,10 @@ pub struct VtableFnPointerData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n+// FIXME(@lcnr): This should be  refactored and merged with other builtin vtables.\n+#[derive(Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n+pub struct VtableDiscriminantKindData;\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct VtableTraitAliasData<'tcx, N> {\n     pub alias_def_id: DefId,"}, {"sha": "a12f5910b14b969005aa341de5c7fdee9bdf8fca", "filename": "src/librustc_middle/traits/select.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_middle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_middle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fselect.rs?ref=b6975bf22f651c67b1b2e84c1421b4b6623c89de", "patch": "@@ -132,6 +132,9 @@ pub enum SelectionCandidate<'tcx> {\n     /// types generated for a fn pointer type (e.g., `fn(int) -> int`)\n     FnPointerCandidate,\n \n+    /// Builtin implementation of `DiscriminantKind`.\n+    DiscriminantKindCandidate,\n+\n     TraitAliasCandidate(DefId),\n \n     ObjectCandidate,"}, {"sha": "c457d311b4093e037ad0df29113c4ef3779c902a", "filename": "src/librustc_middle/traits/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs?ref=b6975bf22f651c67b1b2e84c1421b4b6623c89de", "patch": "@@ -19,6 +19,8 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::Vtable<'tcx, N> {\n \n             super::VtableFnPointer(ref d) => write!(f, \"VtableFnPointer({:?})\", d),\n \n+            super::VtableDiscriminantKind(ref d) => write!(f, \"{:?}\", d),\n+\n             super::VtableObject(ref d) => write!(f, \"{:?}\", d),\n \n             super::VtableParam(ref n) => write!(f, \"VtableParam({:?})\", n),\n@@ -273,6 +275,9 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n                     traits::VtableFnPointer(traits::VtableFnPointerData { fn_ty, nested })\n                 })\n             }\n+            traits::VtableDiscriminantKind(traits::VtableDiscriminantKindData) => {\n+                Some(traits::VtableDiscriminantKind(traits::VtableDiscriminantKindData))\n+            }\n             traits::VtableParam(n) => Some(traits::VtableParam(n)),\n             traits::VtableBuiltin(n) => Some(traits::VtableBuiltin(n)),\n             traits::VtableObject(traits::VtableObjectData {"}, {"sha": "f102f34c744de56d2c11fc08aef0392e27506bc9", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 81, "deletions": 4, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=b6975bf22f651c67b1b2e84c1421b4b6623c89de", "patch": "@@ -12,7 +12,10 @@ use super::Selection;\n use super::SelectionContext;\n use super::SelectionError;\n use super::{Normalized, NormalizedTy, ProjectionCacheEntry, ProjectionCacheKey};\n-use super::{VtableClosureData, VtableFnPointerData, VtableGeneratorData, VtableImplData};\n+use super::{\n+    VtableClosureData, VtableDiscriminantKindData, VtableFnPointerData, VtableGeneratorData,\n+    VtableImplData,\n+};\n \n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n@@ -23,6 +26,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::{FnOnceTraitLangItem, GeneratorTraitLangItem};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n+use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::DUMMY_SP;\n@@ -1043,6 +1047,46 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     }\n                 }\n             }\n+            super::VtableDiscriminantKind(..) => {\n+                // While `DiscriminantKind` is automatically implemented for every type,\n+                // the concrete discriminant may not be known yet.\n+                //\n+                // Any type with multiple potential discriminant types is therefore not eligible.\n+                let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n+\n+                match self_ty.kind {\n+                    ty::Bool\n+                    | ty::Char\n+                    | ty::Int(_)\n+                    | ty::Uint(_)\n+                    | ty::Float(_)\n+                    | ty::Adt(..)\n+                    | ty::Foreign(_)\n+                    | ty::Str\n+                    | ty::Array(..)\n+                    | ty::Slice(_)\n+                    | ty::RawPtr(..)\n+                    | ty::Ref(..)\n+                    | ty::FnDef(..)\n+                    | ty::FnPtr(..)\n+                    | ty::Dynamic(..)\n+                    | ty::Closure(..)\n+                    | ty::Generator(..)\n+                    | ty::GeneratorWitness(..)\n+                    | ty::Never\n+                    | ty::Tuple(..)\n+                    // Integers and floats always have `u8` as their discriminant.\n+                    | ty::Infer(ty::InferTy::IntVar(_) | ty::InferTy::FloatVar(..)) => true,\n+\n+                    ty::Projection(..)\n+                    | ty::Opaque(..)\n+                    | ty::Param(..)\n+                    | ty::Bound(..)\n+                    | ty::Placeholder(..)\n+                    | ty::Infer(..)\n+                    | ty::Error => false,\n+                }\n+            }\n             super::VtableParam(..) => {\n                 // This case tell us nothing about the value of an\n                 // associated type. Consider:\n@@ -1124,13 +1168,15 @@ fn confirm_select_candidate<'cx, 'tcx>(\n         super::VtableGenerator(data) => confirm_generator_candidate(selcx, obligation, data),\n         super::VtableClosure(data) => confirm_closure_candidate(selcx, obligation, data),\n         super::VtableFnPointer(data) => confirm_fn_pointer_candidate(selcx, obligation, data),\n+        super::VtableDiscriminantKind(data) => {\n+            confirm_discriminant_kind_candidate(selcx, obligation, data)\n+        }\n         super::VtableObject(_) => confirm_object_candidate(selcx, obligation, obligation_trait_ref),\n         super::VtableAutoImpl(..)\n         | super::VtableParam(..)\n         | super::VtableBuiltin(..)\n-        | super::VtableTraitAlias(..) =>\n-        // we don't create Select candidates with this kind of resolution\n-        {\n+        | super::VtableTraitAlias(..) => {\n+            // we don't create Select candidates with this kind of resolution\n             span_bug!(\n                 obligation.cause.span,\n                 \"Cannot project an associated type from `{:?}`\",\n@@ -1259,6 +1305,37 @@ fn confirm_generator_candidate<'cx, 'tcx>(\n         .with_addl_obligations(obligations)\n }\n \n+fn confirm_discriminant_kind_candidate<'cx, 'tcx>(\n+    selcx: &mut SelectionContext<'cx, 'tcx>,\n+    obligation: &ProjectionTyObligation<'tcx>,\n+    _: VtableDiscriminantKindData,\n+) -> Progress<'tcx> {\n+    let tcx = selcx.tcx();\n+\n+    let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n+    let substs = tcx.mk_substs([self_ty.into()].iter());\n+\n+    let assoc_items = tcx.associated_items(tcx.lang_items().discriminant_kind_trait().unwrap());\n+    // FIXME: emit an error if the trait definition is wrong\n+    let discriminant_def_id = assoc_items.in_definition_order().next().unwrap().def_id;\n+\n+    let discriminant_ty = match self_ty.kind {\n+        // Use the discriminant type for enums.\n+        ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),\n+        // Default to `i32` for generators.\n+        ty::Generator(..) => tcx.types.i32,\n+        // Use `u8` for all other types.\n+        _ => tcx.types.u8,\n+    };\n+\n+    let predicate = ty::ProjectionPredicate {\n+        projection_ty: ty::ProjectionTy { substs, item_def_id: discriminant_def_id },\n+        ty: discriminant_ty,\n+    };\n+\n+    confirm_param_env_candidate(selcx, obligation, ty::Binder::bind(predicate))\n+}\n+\n fn confirm_fn_pointer_candidate<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,"}, {"sha": "d903779e5075fa925d0f26eba1c32f30b10311bf", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=b6975bf22f651c67b1b2e84c1421b4b6623c89de", "patch": "@@ -24,12 +24,13 @@ use super::{ObjectCastObligation, Obligation};\n use super::{ObligationCause, PredicateObligation, TraitObligation};\n use super::{OutputTypeParameterMismatch, Overflow, SelectionError, Unimplemented};\n use super::{\n-    VtableAutoImpl, VtableBuiltin, VtableClosure, VtableFnPointer, VtableGenerator, VtableImpl,\n-    VtableObject, VtableParam, VtableTraitAlias,\n+    VtableAutoImpl, VtableBuiltin, VtableClosure, VtableDiscriminantKind, VtableFnPointer,\n+    VtableGenerator, VtableImpl, VtableObject, VtableParam, VtableTraitAlias,\n };\n use super::{\n-    VtableAutoImplData, VtableBuiltinData, VtableClosureData, VtableFnPointerData,\n-    VtableGeneratorData, VtableImplData, VtableObjectData, VtableTraitAliasData,\n+    VtableAutoImplData, VtableBuiltinData, VtableClosureData, VtableDiscriminantKindData,\n+    VtableFnPointerData, VtableGeneratorData, VtableImplData, VtableObjectData,\n+    VtableTraitAliasData,\n };\n \n use crate::infer::{CombinedSnapshot, InferCtxt, InferOk, PlaceholderMap, TypeFreshener};\n@@ -1382,6 +1383,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // For other types, we'll use the builtin rules.\n             let copy_conditions = self.copy_clone_conditions(obligation);\n             self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates)?;\n+        } else if lang_items.discriminant_kind_trait() == Some(def_id) {\n+            // `DiscriminantKind` is automatically implemented for every type.\n+            candidates.vec.push(DiscriminantKindCandidate);\n         } else if lang_items.sized_trait() == Some(def_id) {\n             // Sized is never implementable by end-users, it is\n             // always automatically computed.\n@@ -1995,22 +1999,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let is_global =\n             |cand: &ty::PolyTraitRef<'_>| cand.is_global() && !cand.has_late_bound_regions();\n \n+        // (*) Prefer `BuiltinCandidate { has_nested: false }` and `DiscriminantKindCandidate`\n+        // to anything else.\n+        //\n+        // This is a fix for #53123 and prevents winnowing from accidentally extending the\n+        // lifetime of a variable.\n         match other.candidate {\n-            // Prefer `BuiltinCandidate { has_nested: false }` to anything else.\n-            // This is a fix for #53123 and prevents winnowing from accidentally extending the\n-            // lifetime of a variable.\n-            BuiltinCandidate { has_nested: false } => true,\n+            // (*)\n+            BuiltinCandidate { has_nested: false } | DiscriminantKindCandidate => true,\n             ParamCandidate(ref cand) => match victim.candidate {\n                 AutoImplCandidate(..) => {\n                     bug!(\n                         \"default implementations shouldn't be recorded \\\n                          when there are other valid candidates\"\n                     );\n                 }\n-                // Prefer `BuiltinCandidate { has_nested: false }` to anything else.\n-                // This is a fix for #53123 and prevents winnowing from accidentally extending the\n-                // lifetime of a variable.\n-                BuiltinCandidate { has_nested: false } => false,\n+                // (*)\n+                BuiltinCandidate { has_nested: false } | DiscriminantKindCandidate => false,\n                 ImplCandidate(..)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n@@ -2038,10 +2043,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                          when there are other valid candidates\"\n                     );\n                 }\n-                // Prefer `BuiltinCandidate { has_nested: false }` to anything else.\n-                // This is a fix for #53123 and prevents winnowing from accidentally extending the\n-                // lifetime of a variable.\n-                BuiltinCandidate { has_nested: false } => false,\n+                // (*)\n+                BuiltinCandidate { has_nested: false } | DiscriminantKindCandidate => false,\n                 ImplCandidate(..)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n@@ -2486,6 +2489,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(VtableFnPointer(data))\n             }\n \n+            DiscriminantKindCandidate => Ok(VtableDiscriminantKind(VtableDiscriminantKindData)),\n+\n             TraitAliasCandidate(alias_def_id) => {\n                 let data = self.confirm_trait_alias_candidate(obligation, alias_def_id);\n                 Ok(VtableTraitAlias(data))"}, {"sha": "a793031d4025be48ba09fca9a4837d7dbaa47c50", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=b6975bf22f651c67b1b2e84c1421b4b6623c89de", "patch": "@@ -236,7 +236,10 @@ fn resolve_associated_item<'tcx>(\n                 None\n             }\n         }\n-        traits::VtableAutoImpl(..) | traits::VtableParam(..) | traits::VtableTraitAlias(..) => None,\n+        traits::VtableAutoImpl(..)\n+        | traits::VtableParam(..)\n+        | traits::VtableTraitAlias(..)\n+        | traits::VtableDiscriminantKind(..) => None,\n     })\n }\n "}, {"sha": "a45a44a6801e8b04fd8fc4f783b8e77ce83db700", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6975bf22f651c67b1b2e84c1421b4b6623c89de/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=b6975bf22f651c67b1b2e84c1421b4b6623c89de", "patch": "@@ -48,7 +48,20 @@ fn enforce_trait_manually_implementable(\n     let did = Some(trait_def_id);\n     let li = tcx.lang_items();\n \n-    // Disallow *all* explicit impls of `Sized` and `Unsize` for now.\n+    // Disallow *all* explicit impls of `DiscriminantKind`, `Sized` and `Unsize` for now.\n+    if did == li.discriminant_kind_trait() {\n+        let span = impl_header_span(tcx, impl_def_id);\n+        struct_span_err!(\n+            tcx.sess,\n+            span,\n+            E0322,\n+            \"explicit impls for the `DiscriminantKind` trait are not permitted\"\n+        )\n+        .span_label(span, \"impl of 'DiscriminantKind' not allowed\")\n+        .emit();\n+        return;\n+    }\n+\n     if did == li.sized_trait() {\n         let span = impl_header_span(tcx, impl_def_id);\n         struct_span_err!("}]}