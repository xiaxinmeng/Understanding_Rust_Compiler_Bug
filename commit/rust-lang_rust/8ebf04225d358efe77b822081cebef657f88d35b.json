{"sha": "8ebf04225d358efe77b822081cebef657f88d35b", "node_id": "C_kwDOAAsO6NoAKDhlYmYwNDIyNWQzNThlZmU3N2I4MjIwODFjZWJlZjY1N2Y4OGQzNWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-02T07:57:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-02T07:57:21Z"}, "message": "Auto merge of #112198 - compiler-errors:rollup-o2xe4of, r=compiler-errors\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #111670 (Require that const param tys implement `ConstParamTy`)\n - #111914 (CFI: Fix cfi with async: transform_ty: unexpected GeneratorWitness(Bi\u2026)\n - #112030 (Migrate `item_trait_alias` to Askama)\n - #112150 (Support 128-bit atomics on all x86_64 Apple targets)\n - #112174 (Fix broken link)\n - #112190 (Improve comments on `TyCtxt` and `GlobalCtxt`.)\n - #112193 (Check tuple elements are `Sized` in `offset_of`)\n\nFailed merges:\n\n - #112071 (Group rfcs tests)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "807d30f8b7320a1278878c0a7358b358d9eeca66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/807d30f8b7320a1278878c0a7358b358d9eeca66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ebf04225d358efe77b822081cebef657f88d35b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebf04225d358efe77b822081cebef657f88d35b", "html_url": "https://github.com/rust-lang/rust/commit/8ebf04225d358efe77b822081cebef657f88d35b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ebf04225d358efe77b822081cebef657f88d35b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33c3d101280c8eb3cd8af421bfb56a8afcc3881d", "url": "https://api.github.com/repos/rust-lang/rust/commits/33c3d101280c8eb3cd8af421bfb56a8afcc3881d", "html_url": "https://github.com/rust-lang/rust/commit/33c3d101280c8eb3cd8af421bfb56a8afcc3881d"}, {"sha": "ebb7f642e46f2f95ab9c1c82e5a7640876bf2776", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb7f642e46f2f95ab9c1c82e5a7640876bf2776", "html_url": "https://github.com/rust-lang/rust/commit/ebb7f642e46f2f95ab9c1c82e5a7640876bf2776"}], "stats": {"total": 1066, "additions": 717, "deletions": 349}, "files": [{"sha": "0c7010526655ea538393e1fda934c08cd371a153", "filename": "compiler/rustc_error_codes/src/error_codes/E0741.md", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0741.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0741.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0741.md?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -10,15 +10,19 @@ struct A;\n struct B<const X: A>; // error!\n ```\n \n-Only structural-match types (that is, types that derive `PartialEq` and `Eq`)\n-may be used as the types of const generic parameters.\n+Only structural-match types, which are types that derive `PartialEq` and `Eq`\n+and implement `ConstParamTy`, may be used as the types of const generic\n+parameters.\n \n-To fix the previous code example, we derive `PartialEq` and `Eq`:\n+To fix the previous code example, we derive `PartialEq`, `Eq`, and\n+`ConstParamTy`:\n \n ```\n #![feature(adt_const_params)]\n \n-#[derive(PartialEq, Eq)] // We derive both traits here.\n+use std::marker::ConstParamTy;\n+\n+#[derive(PartialEq, Eq, ConstParamTy)] // We derive both traits here.\n struct A;\n \n struct B<const X: A>; // ok!"}, {"sha": "08ff2cfba5c26d2cf4e67e8cfdd0b80a95be926c", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -115,36 +115,22 @@ pub trait EmissionGuarantee: Sized {\n     ) -> DiagnosticBuilder<'_, Self>;\n }\n \n-/// Private module for sealing the `IsError` helper trait.\n-mod sealed_level_is_error {\n-    use crate::Level;\n-\n-    /// Sealed helper trait for statically checking that a `Level` is an error.\n-    pub(crate) trait IsError<const L: Level> {}\n-\n-    impl IsError<{ Level::Bug }> for () {}\n-    impl IsError<{ Level::DelayedBug }> for () {}\n-    impl IsError<{ Level::Fatal }> for () {}\n-    // NOTE(eddyb) `Level::Error { lint: true }` is also an error, but lints\n-    // don't need error guarantees, as their levels are always dynamic.\n-    impl IsError<{ Level::Error { lint: false } }> for () {}\n-}\n-\n impl<'a> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     /// Convenience function for internal use, clients should use one of the\n     /// `struct_*` methods on [`Handler`].\n     #[track_caller]\n-    pub(crate) fn new_guaranteeing_error<M: Into<DiagnosticMessage>, const L: Level>(\n+    pub(crate) fn new_guaranteeing_error<M: Into<DiagnosticMessage>>(\n         handler: &'a Handler,\n         message: M,\n-    ) -> Self\n-    where\n-        (): sealed_level_is_error::IsError<L>,\n-    {\n+    ) -> Self {\n         Self {\n             inner: DiagnosticBuilderInner {\n                 state: DiagnosticBuilderState::Emittable(handler),\n-                diagnostic: Box::new(Diagnostic::new_with_code(L, None, message)),\n+                diagnostic: Box::new(Diagnostic::new_with_code(\n+                    Level::Error { lint: false },\n+                    None,\n+                    message,\n+                )),\n             },\n             _marker: PhantomData,\n         }\n@@ -203,9 +189,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n         handler: &Handler,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, Self> {\n-        DiagnosticBuilder::new_guaranteeing_error::<_, { Level::Error { lint: false } }>(\n-            handler, msg,\n-        )\n+        DiagnosticBuilder::new_guaranteeing_error(handler, msg)\n     }\n }\n "}, {"sha": "bf77ed81f9bd03475f67b783cc8683fdd6042e02", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -6,7 +6,6 @@\n #![feature(array_windows)]\n #![feature(drain_filter)]\n #![feature(if_let_guard)]\n-#![feature(adt_const_params)]\n #![feature(let_chains)]\n #![feature(never_type)]\n #![feature(result_option_inspect)]\n@@ -845,7 +844,7 @@ impl Handler {\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        DiagnosticBuilder::new_guaranteeing_error::<_, { Level::Error { lint: false } }>(self, msg)\n+        DiagnosticBuilder::new_guaranteeing_error(self, msg)\n     }\n \n     /// This should only be used by `rustc_middle::lint::struct_lint_level`. Do not use it for hard errors."}, {"sha": "69e32c35ed8d3fc8c9dd34d90a92a47c356faf47", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 14, "deletions": 77, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -829,83 +829,20 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n             let ty = tcx.type_of(param.def_id).subst_identity();\n \n             if tcx.features().adt_const_params {\n-                if let Some(non_structural_match_ty) =\n-                    traits::search_for_adt_const_param_violation(param.span, tcx, ty)\n-                {\n-                    // We use the same error code in both branches, because this is really the same\n-                    // issue: we just special-case the message for type parameters to make it\n-                    // clearer.\n-                    match non_structural_match_ty.kind() {\n-                        ty::Param(_) => {\n-                            // Const parameters may not have type parameters as their types,\n-                            // because we cannot be sure that the type parameter derives `PartialEq`\n-                            // and `Eq` (just implementing them is not enough for `structural_match`).\n-                            struct_span_err!(\n-                                tcx.sess,\n-                                hir_ty.span,\n-                                E0741,\n-                                \"`{ty}` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be \\\n-                                used as the type of a const parameter\",\n-                            )\n-                            .span_label(\n-                                hir_ty.span,\n-                                format!(\"`{ty}` may not derive both `PartialEq` and `Eq`\"),\n-                            )\n-                            .note(\n-                                \"it is not currently possible to use a type parameter as the type of a \\\n-                                const parameter\",\n-                            )\n-                            .emit();\n-                        }\n-                        ty::Float(_) => {\n-                            struct_span_err!(\n-                                tcx.sess,\n-                                hir_ty.span,\n-                                E0741,\n-                                \"`{ty}` is forbidden as the type of a const generic parameter\",\n-                            )\n-                            .note(\"floats do not derive `Eq` or `Ord`, which are required for const parameters\")\n-                            .emit();\n-                        }\n-                        ty::FnPtr(_) => {\n-                            struct_span_err!(\n-                                tcx.sess,\n-                                hir_ty.span,\n-                                E0741,\n-                                \"using function pointers as const generic parameters is forbidden\",\n-                            )\n-                            .emit();\n-                        }\n-                        ty::RawPtr(_) => {\n-                            struct_span_err!(\n-                                tcx.sess,\n-                                hir_ty.span,\n-                                E0741,\n-                                \"using raw pointers as const generic parameters is forbidden\",\n-                            )\n-                            .emit();\n-                        }\n-                        _ => {\n-                            let mut diag = struct_span_err!(\n-                                tcx.sess,\n-                                hir_ty.span,\n-                                E0741,\n-                                \"`{}` must be annotated with `#[derive(PartialEq, Eq)]` to be used as \\\n-                                the type of a const parameter\",\n-                                non_structural_match_ty,\n-                            );\n-\n-                            if ty == non_structural_match_ty {\n-                                diag.span_label(\n-                                    hir_ty.span,\n-                                    format!(\"`{ty}` doesn't derive both `PartialEq` and `Eq`\"),\n-                                );\n-                            }\n-\n-                            diag.emit();\n-                        }\n-                    }\n-                }\n+                enter_wf_checking_ctxt(tcx, hir_ty.span, param.def_id, |wfcx| {\n+                    let trait_def_id =\n+                        tcx.require_lang_item(LangItem::ConstParamTy, Some(hir_ty.span));\n+                    wfcx.register_bound(\n+                        ObligationCause::new(\n+                            hir_ty.span,\n+                            param.def_id,\n+                            ObligationCauseCode::ConstParam(ty),\n+                        ),\n+                        wfcx.param_env,\n+                        ty,\n+                        trait_def_id,\n+                    );\n+                });\n             } else {\n                 let err_ty_str;\n                 let mut is_ptr = true;"}, {"sha": "5e10add013b054d398b52bb4131e2edfc9e3512c", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -3117,16 +3117,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n                 ty::Tuple(tys) => {\n-                    let fstr = field.as_str();\n-\n-                    if let Ok(index) = fstr.parse::<usize>() {\n-                        if fstr == index.to_string() {\n-                            if let Some(&field_ty) = tys.get(index) {\n-                                field_indices.push(index.into());\n-                                current_container = field_ty;\n+                    if let Ok(index) = field.as_str().parse::<usize>()\n+                        && field.name == sym::integer(index)\n+                    {\n+                        for ty in tys.iter().take(index + 1) {\n+                            self.require_type_is_sized(ty, expr.span, traits::MiscObligation);\n+                        }\n+                        if let Some(&field_ty) = tys.get(index) {\n+                            field_indices.push(index.into());\n+                            current_container = field_ty;\n \n-                                continue;\n-                            }\n+                            continue;\n                         }\n                     }\n                 }"}, {"sha": "bf3872e81d4a78f8e338ba90dafc7a699dcb74be", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -445,6 +445,9 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Obligations to prove that a `std::ops::Drop` impl is not stronger than\n     /// the ADT it's being implemented for.\n     DropImpl,\n+\n+    /// Requirement for a `const N: Ty` to implement `Ty: ConstParamTy`\n+    ConstParam(Ty<'tcx>),\n }\n \n /// The 'location' at which we try to perform HIR-based wf checking."}, {"sha": "673d09cddf4abb94537a70b4e0287844ed34adbf", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -478,6 +478,17 @@ impl<'tcx> TyCtxtFeed<'tcx, LocalDefId> {\n /// [rustc dev guide] for more details.\n ///\n /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/ty.html\n+///\n+/// An implementation detail: `TyCtxt` is a wrapper type for [GlobalCtxt],\n+/// which is the struct that actually holds all the data. `TyCtxt` derefs to\n+/// `GlobalCtxt`, and in practice `TyCtxt` is passed around everywhere, and all\n+/// operations are done via `TyCtxt`. A `TyCtxt` is obtained for a `GlobalCtxt`\n+/// by calling `enter` with a closure `f`. That function creates both the\n+/// `TyCtxt`, and an `ImplicitCtxt` around it that is put into TLS. Within `f`:\n+/// - The `ImplicitCtxt` is available implicitly via TLS.\n+/// - The `TyCtxt` is available explicitly via the `tcx` parameter, and also\n+///   implicitly within the `ImplicitCtxt`. Explicit access is preferred when\n+///   possible.\n #[derive(Copy, Clone)]\n #[rustc_diagnostic_item = \"TyCtxt\"]\n #[rustc_pass_by_value]\n@@ -493,6 +504,7 @@ impl<'tcx> Deref for TyCtxt<'tcx> {\n     }\n }\n \n+/// See [TyCtxt] for details about this type.\n pub struct GlobalCtxt<'tcx> {\n     pub arena: &'tcx WorkerLocal<Arena<'tcx>>,\n     pub hir_arena: &'tcx WorkerLocal<hir::Arena<'tcx>>,"}, {"sha": "81af071eefd92b5a5445bf4cc8f08d06c4364aa6", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -609,9 +609,7 @@ fn encode_ty<'tcx>(\n         }\n \n         // Function types\n-        ty::FnDef(def_id, substs)\n-        | ty::Closure(def_id, substs)\n-        | ty::Generator(def_id, substs, ..) => {\n+        ty::FnDef(def_id, substs) | ty::Closure(def_id, substs) => {\n             // u<length><name>[I<element-type1..element-typeN>E], where <element-type> is <subst>,\n             // as vendor extended type.\n             let mut s = String::new();\n@@ -622,6 +620,23 @@ fn encode_ty<'tcx>(\n             typeid.push_str(&s);\n         }\n \n+        ty::Generator(def_id, substs, ..) => {\n+            // u<length><name>[I<element-type1..element-typeN>E], where <element-type> is <subst>,\n+            // as vendor extended type.\n+            let mut s = String::new();\n+            let name = encode_ty_name(tcx, *def_id);\n+            let _ = write!(s, \"u{}{}\", name.len(), &name);\n+            // Encode parent substs only\n+            s.push_str(&encode_substs(\n+                tcx,\n+                tcx.mk_substs(substs.as_generator().parent_substs()),\n+                dict,\n+                options,\n+            ));\n+            compress(dict, DictKey::Ty(ty, TyQ::None), &mut s);\n+            typeid.push_str(&s);\n+        }\n+\n         // Pointer types\n         ty::Ref(region, ty0, ..) => {\n             // [U3mut]u3refI<element-type>E as vendor extended type qualifier and type\n@@ -740,7 +755,12 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n     let mut ty = ty;\n \n     match ty.kind() {\n-        ty::Float(..) | ty::Char | ty::Str | ty::Never | ty::Foreign(..) => {}\n+        ty::Float(..)\n+        | ty::Char\n+        | ty::Str\n+        | ty::Never\n+        | ty::Foreign(..)\n+        | ty::GeneratorWitness(..) => {}\n \n         ty::Bool => {\n             if options.contains(EncodeTyOptions::NORMALIZE_INTEGERS) {\n@@ -928,7 +948,6 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n \n         ty::Bound(..)\n         | ty::Error(..)\n-        | ty::GeneratorWitness(..)\n         | ty::GeneratorWitnessMIR(..)\n         | ty::Infer(..)\n         | ty::Alias(..)"}, {"sha": "74ef53915c929cb22ab05025765b56a8e6ee6942", "filename": "compiler/rustc_target/src/abi/call/x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86_64.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,5 +1,5 @@\n // The classification code for the x86_64 ABI is taken from the clay language\n-// https://github.com/jckarter/clay/blob/master/compiler/src/externals.cpp\n+// https://github.com/jckarter/clay/blob/db0bd2702ab0b6e48965cd85f8859bbd5f60e48e/compiler/externals.cpp\n \n use crate::abi::call::{ArgAbi, CastTarget, FnAbi, Reg, RegKind};\n use crate::abi::{self, Abi, HasDataLayout, Size, TyAbiInterface, TyAndLayout};"}, {"sha": "061b6a96fc888f87e28e50430f32ef80593a6c40", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> Target {\n             .into(),\n         arch: arch.target_arch(),\n         options: TargetOptions {\n-            max_atomic_width: Some(64),\n+            max_atomic_width: Some(128),\n             stack_probes: StackProbeType::X86,\n             ..base\n         },"}, {"sha": "50f359c357bdf2ad4fa16c5d7f43f5629a32e766", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> Target {\n             .into(),\n         arch: arch.target_arch(),\n         options: TargetOptions {\n-            max_atomic_width: Some(64),\n+            max_atomic_width: Some(128),\n             stack_probes: StackProbeType::X86,\n             ..base\n         },"}, {"sha": "76de7d20c4c6f9b60f76bf724001e20ad0600a3d", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".into(),\n         arch: arch.target_arch(),\n         options: TargetOptions {\n-            max_atomic_width: Some(64),\n+            max_atomic_width: Some(128),\n             stack_probes: StackProbeType::X86,\n             ..opts(\"tvos\", arch)\n         },"}, {"sha": "5fcc00a86ff95905ce5f7c2e6eceaca1876ceecd", "filename": "compiler/rustc_target/src/spec/x86_64_apple_watchos_sim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n             .into(),\n         arch: arch.target_arch(),\n         options: TargetOptions {\n-            max_atomic_width: Some(64),\n+            max_atomic_width: Some(128),\n             stack_probes: StackProbeType::X86,\n             forces_embed_bitcode: true,\n             // Taken from a clang build on Xcode 11.4.1."}, {"sha": "01c74be7057c9c654c54c5eae2351392b1a0f730", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -149,6 +149,12 @@ pub trait TypeErrCtxtExt<'tcx> {\n         root_obligation: &PredicateObligation<'tcx>,\n         error: &SelectionError<'tcx>,\n     );\n+\n+    fn report_const_param_not_wf(\n+        &self,\n+        ty: Ty<'tcx>,\n+        obligation: &PredicateObligation<'tcx>,\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n }\n \n impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n@@ -641,6 +647,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         span = obligation.cause.span;\n                     }\n                 }\n+\n                 if let ObligationCauseCode::CompareImplItemObligation {\n                     impl_item_def_id,\n                     trait_item_def_id,\n@@ -657,6 +664,13 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     return;\n                 }\n \n+                // Report a const-param specific error\n+                if let ObligationCauseCode::ConstParam(ty) = *obligation.cause.code().peel_derives()\n+                {\n+                    self.report_const_param_not_wf(ty, &obligation).emit();\n+                    return;\n+                }\n+\n                 let bound_predicate = obligation.predicate.kind();\n                 match bound_predicate.skip_binder() {\n                     ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) => {\n@@ -1163,6 +1177,102 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         self.point_at_returns_when_relevant(&mut err, &obligation);\n         err.emit();\n     }\n+\n+    fn report_const_param_not_wf(\n+        &self,\n+        ty: Ty<'tcx>,\n+        obligation: &PredicateObligation<'tcx>,\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n+        let span = obligation.cause.span;\n+\n+        let mut diag = match ty.kind() {\n+            _ if ty.has_param() => {\n+                span_bug!(span, \"const param tys cannot mention other generic parameters\");\n+            }\n+            ty::Float(_) => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0741,\n+                    \"`{ty}` is forbidden as the type of a const generic parameter\",\n+                )\n+            }\n+            ty::FnPtr(_) => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0741,\n+                    \"using function pointers as const generic parameters is forbidden\",\n+                )\n+            }\n+            ty::RawPtr(_) => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0741,\n+                    \"using raw pointers as const generic parameters is forbidden\",\n+                )\n+            }\n+            ty::Adt(def, _) => {\n+                // We should probably see if we're *allowed* to derive `ConstParamTy` on the type...\n+                let mut diag = struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0741,\n+                    \"`{ty}` must implement `ConstParamTy` to be used as the type of a const generic parameter\",\n+                );\n+                // Only suggest derive if this isn't a derived obligation,\n+                // and the struct is local.\n+                if let Some(span) = self.tcx.hir().span_if_local(def.did())\n+                    && obligation.cause.code().parent().is_none()\n+                {\n+                    if ty.is_structural_eq_shallow(self.tcx) {\n+                        diag.span_suggestion(\n+                            span,\n+                            \"add `#[derive(ConstParamTy)]` to the struct\",\n+                            \"#[derive(ConstParamTy)]\\n\",\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else {\n+                        // FIXME(adt_const_params): We should check there's not already an\n+                        // overlapping `Eq`/`PartialEq` impl.\n+                        diag.span_suggestion(\n+                            span,\n+                            \"add `#[derive(ConstParamTy, PartialEq, Eq)]` to the struct\",\n+                            \"#[derive(ConstParamTy, PartialEq, Eq)]\\n\",\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                }\n+                diag\n+            }\n+            _ => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0741,\n+                    \"`{ty}` can't be used as a const parameter type\",\n+                )\n+            }\n+        };\n+\n+        let mut code = obligation.cause.code();\n+        let mut pred = obligation.predicate.to_opt_poly_trait_pred();\n+        while let Some((next_code, next_pred)) = code.parent() {\n+            if let Some(pred) = pred {\n+                let pred = self.instantiate_binder_with_placeholders(pred);\n+                diag.note(format!(\n+                    \"`{}` must implement `{}`, but it does not\",\n+                    pred.self_ty(),\n+                    pred.print_modifiers_and_trait_path()\n+                ));\n+            }\n+            code = next_code;\n+            pred = next_pred;\n+        }\n+\n+        diag\n+    }\n }\n \n trait InferCtxtPrivExt<'tcx> {"}, {"sha": "204d6fd043b3c3dca04b2908ec586ebc923aa288", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -2655,7 +2655,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             | ObligationCauseCode::BinOp { .. }\n             | ObligationCauseCode::AscribeUserTypeProvePredicate(..)\n             | ObligationCauseCode::RustCall\n-            | ObligationCauseCode::DropImpl => {}\n+            | ObligationCauseCode::DropImpl\n+            | ObligationCauseCode::ConstParam(_) => {}\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");\n             }"}, {"sha": "e9cfd63e2eddc2982231caaa5eac1c7355ecff38", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -100,7 +100,8 @@ pub fn type_allowed_to_implement_const_param_ty<'tcx>(\n         | ty::Str\n         | ty::Array(..)\n         | ty::Slice(_)\n-        | ty::Ref(.., hir::Mutability::Not) => return Ok(()),\n+        | ty::Ref(.., hir::Mutability::Not)\n+        | ty::Tuple(_) => return Ok(()),\n \n         &ty::Adt(adt, substs) => (adt, substs),\n "}, {"sha": "c2f94cb6385662468db95eef64aa92eeebeba0b4", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -62,9 +62,7 @@ pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n pub use self::specialize::{\n     specialization_graph, translate_substs, translate_substs_with_cause, OverlapError,\n };\n-pub use self::structural_match::{\n-    search_for_adt_const_param_violation, search_for_structural_match_violation,\n-};\n+pub use self::structural_match::search_for_structural_match_violation;\n pub use self::structural_normalize::StructurallyNormalizeExt;\n pub use self::util::elaborate;\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};"}, {"sha": "420f8c5dceb50a06842996458f06229879d127f4", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 18, "deletions": 52, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -34,24 +34,7 @@ pub fn search_for_structural_match_violation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n ) -> Option<Ty<'tcx>> {\n-    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default(), adt_const_param: false })\n-        .break_value()\n-}\n-\n-/// This method traverses the structure of `ty`, trying to find any\n-/// types that are not allowed to be used in a const generic.\n-///\n-/// This is either because the type does not implement `StructuralEq`\n-/// and `StructuralPartialEq`, or because the type is intentionally\n-/// not supported in const generics (such as floats and raw pointers,\n-/// which are allowed in match blocks).\n-pub fn search_for_adt_const_param_violation<'tcx>(\n-    span: Span,\n-    tcx: TyCtxt<'tcx>,\n-    ty: Ty<'tcx>,\n-) -> Option<Ty<'tcx>> {\n-    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default(), adt_const_param: true })\n-        .break_value()\n+    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default() }).break_value()\n }\n \n /// This implements the traversal over the structure of a given type to try to\n@@ -65,11 +48,6 @@ struct Search<'tcx> {\n     /// Tracks ADTs previously encountered during search, so that\n     /// we will not recur on them again.\n     seen: FxHashSet<hir::def_id::DefId>,\n-\n-    // Additionally deny things that have been allowed in patterns,\n-    // but are not allowed in adt const params, such as floats and\n-    // fn ptrs.\n-    adt_const_param: bool,\n }\n \n impl<'tcx> Search<'tcx> {\n@@ -124,41 +102,29 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for Search<'tcx> {\n             }\n \n             ty::FnPtr(..) => {\n-                if !self.adt_const_param {\n-                    return ControlFlow::Continue(());\n-                } else {\n-                    return ControlFlow::Break(ty);\n-                }\n+                return ControlFlow::Continue(());\n             }\n \n             ty::RawPtr(..) => {\n-                if !self.adt_const_param {\n-                    // structural-match ignores substructure of\n-                    // `*const _`/`*mut _`, so skip `super_visit_with`.\n-                    //\n-                    // For example, if you have:\n-                    // ```\n-                    // struct NonStructural;\n-                    // #[derive(PartialEq, Eq)]\n-                    // struct T(*const NonStructural);\n-                    // const C: T = T(std::ptr::null());\n-                    // ```\n-                    //\n-                    // Even though `NonStructural` does not implement `PartialEq`,\n-                    // structural equality on `T` does not recur into the raw\n-                    // pointer. Therefore, one can still use `C` in a pattern.\n-                    return ControlFlow::Continue(());\n-                } else {\n-                    return ControlFlow::Break(ty);\n-                }\n+                // structural-match ignores substructure of\n+                // `*const _`/`*mut _`, so skip `super_visit_with`.\n+                //\n+                // For example, if you have:\n+                // ```\n+                // struct NonStructural;\n+                // #[derive(PartialEq, Eq)]\n+                // struct T(*const NonStructural);\n+                // const C: T = T(std::ptr::null());\n+                // ```\n+                //\n+                // Even though `NonStructural` does not implement `PartialEq`,\n+                // structural equality on `T` does not recur into the raw\n+                // pointer. Therefore, one can still use `C` in a pattern.\n+                return ControlFlow::Continue(());\n             }\n \n             ty::Float(_) => {\n-                if !self.adt_const_param {\n-                    return ControlFlow::Continue(());\n-                } else {\n-                    return ControlFlow::Break(ty);\n-                }\n+                return ControlFlow::Continue(());\n             }\n \n             ty::Array(..) | ty::Slice(_) | ty::Ref(..) | ty::Tuple(..) => {"}, {"sha": "9a541ccaeacbcd615566d0a60d46182792910ba9", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -205,6 +205,20 @@ pub trait StructuralPartialEq {\n     // Empty.\n }\n \n+marker_impls! {\n+    #[unstable(feature = \"structural_match\", issue = \"31434\")]\n+    StructuralPartialEq for\n+        usize, u8, u16, u32, u64, u128,\n+        isize, i8, i16, i32, i64, i128,\n+        bool,\n+        char,\n+        str /* Technically requires `[u8]: StructuralEq` */,\n+        (),\n+        {T, const N: usize} [T; N],\n+        {T} [T],\n+        {T: ?Sized} &T,\n+}\n+\n /// Required trait for constants used in pattern matches.\n ///\n /// Any type that derives `Eq` automatically implements this trait, *regardless*\n@@ -267,6 +281,7 @@ marker_impls! {\n         bool,\n         char,\n         str /* Technically requires `[u8]: StructuralEq` */,\n+        (),\n         {T, const N: usize} [T; N],\n         {T} [T],\n         {T: ?Sized} &T,\n@@ -974,7 +989,8 @@ pub trait PointerLike {}\n #[lang = \"const_param_ty\"]\n #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n #[rustc_on_unimplemented(message = \"`{Self}` can't be used as a const parameter type\")]\n-pub trait ConstParamTy: StructuralEq {}\n+#[allow(multiple_supertrait_upcastable)]\n+pub trait ConstParamTy: StructuralEq + StructuralPartialEq {}\n \n /// Derive macro generating an impl of the trait `ConstParamTy`.\n #[rustc_builtin_macro]\n@@ -983,8 +999,7 @@ pub macro ConstParamTy($item:item) {\n     /* compiler built-in */\n }\n \n-// FIXME(generic_const_parameter_types): handle `ty::FnDef`/`ty::Closure`\n-// FIXME(generic_const_parameter_types): handle `ty::Tuple`\n+// FIXME(adt_const_params): handle `ty::FnDef`/`ty::Closure`\n marker_impls! {\n     #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n     ConstParamTy for\n@@ -998,6 +1013,11 @@ marker_impls! {\n         {T: ?Sized + ConstParamTy} &T,\n }\n \n+// FIXME(adt_const_params): Add to marker_impls call above once not in bootstrap\n+#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n+#[cfg(not(bootstrap))]\n+impl ConstParamTy for () {}\n+\n /// A common trait implemented by all function pointers.\n #[unstable(\n     feature = \"fn_ptr_trait\","}, {"sha": "a6f792ed0e3e9e810f70ff7034c1b6eef056dd32", "filename": "library/core/src/mem/transmutability.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,3 +1,5 @@\n+use crate::marker::ConstParamTy;\n+\n /// Are values of a type transmutable into values of another type?\n ///\n /// This trait is implemented on-the-fly by the compiler for types `Src` and `Self` when the bits of\n@@ -33,6 +35,9 @@ pub struct Assume {\n     pub validity: bool,\n }\n \n+#[unstable(feature = \"transmutability\", issue = \"99571\")]\n+impl ConstParamTy for Assume {}\n+\n impl Assume {\n     /// Do not assume that *you* have ensured any safety properties are met.\n     #[unstable(feature = \"transmutability\", issue = \"99571\")]"}, {"sha": "ac8d04a82860e2e09262855698e5384fb00ad1a1", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,6 +1,9 @@\n // See src/libstd/primitive_docs.rs for documentation.\n \n use crate::cmp::Ordering::{self, *};\n+#[cfg(not(bootstrap))]\n+use crate::marker::ConstParamTy;\n+use crate::marker::{StructuralEq, StructuralPartialEq};\n \n // Recursive macro for implementing n-ary tuple functions and operations\n //\n@@ -45,6 +48,28 @@ macro_rules! tuple_impls {\n             {}\n         }\n \n+        maybe_tuple_doc! {\n+            $($T)+ @\n+            #[unstable(feature = \"structural_match\", issue = \"31434\")]\n+            #[cfg(not(bootstrap))]\n+            impl<$($T: ConstParamTy),+> ConstParamTy for ($($T,)+)\n+            {}\n+        }\n+\n+        maybe_tuple_doc! {\n+            $($T)+ @\n+            #[unstable(feature = \"structural_match\", issue = \"31434\")]\n+            impl<$($T),+> StructuralPartialEq for ($($T,)+)\n+            {}\n+        }\n+\n+        maybe_tuple_doc! {\n+            $($T)+ @\n+            #[unstable(feature = \"structural_match\", issue = \"31434\")]\n+            impl<$($T),+> StructuralEq for ($($T,)+)\n+            {}\n+        }\n+\n         maybe_tuple_doc! {\n             $($T)+ @\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1d66805bd5c06e021fbb000f60e1b3c11682f746", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1101,7 +1101,12 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n     );\n }\n \n-fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::TraitAlias) {\n+fn item_trait_alias(\n+    w: &mut impl fmt::Write,\n+    cx: &mut Context<'_>,\n+    it: &clean::Item,\n+    t: &clean::TraitAlias,\n+) {\n     wrap_item(w, |w| {\n         write!(\n             w,\n@@ -1111,16 +1116,17 @@ fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &\n             print_where_clause(&t.generics, cx, 0, Ending::Newline),\n             bounds(&t.bounds, true, cx),\n             attrs = render_attributes_in_pre(it, \"\", cx.tcx()),\n-        );\n+        )\n+        .unwrap();\n     });\n \n-    write!(w, \"{}\", document(cx, it, None, HeadingOffset::H2));\n-\n+    write!(w, \"{}\", document(cx, it, None, HeadingOffset::H2)).unwrap();\n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n     // associated items from the aliased type (see discussion in #32077), but\n     // we need #14072 to make sense of the generics.\n     write!(w, \"{}\", render_assoc_items(cx, it, it.item_id.expect_def_id(), AssocItemRender::All))\n+        .unwrap();\n }\n \n fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::OpaqueTy) {\n@@ -1673,13 +1679,14 @@ fn bounds(t_bounds: &[clean::GenericBound], trait_alias: bool, cx: &Context<'_>)\n     bounds\n }\n \n-fn wrap_item<F>(w: &mut Buffer, f: F)\n+fn wrap_item<W, F>(w: &mut W, f: F)\n where\n-    F: FnOnce(&mut Buffer),\n+    W: fmt::Write,\n+    F: FnOnce(&mut W),\n {\n-    w.write_str(r#\"<pre class=\"rust item-decl\"><code>\"#);\n+    write!(w, r#\"<pre class=\"rust item-decl\"><code>\"#).unwrap();\n     f(w);\n-    w.write_str(\"</code></pre>\");\n+    write!(w, \"</code></pre>\").unwrap();\n }\n \n #[derive(PartialEq, Eq)]"}, {"sha": "08916398cbb289a8a0fce8799aabfea3b161d2b6", "filename": "src/tools/clippy/tests/ui/same_functions_in_if_condition.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_functions_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_functions_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_functions_in_if_condition.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -10,6 +10,8 @@\n     clippy::uninlined_format_args\n )]\n \n+use std::marker::ConstParamTy;\n+\n fn function() -> bool {\n     true\n }\n@@ -96,7 +98,7 @@ fn main() {\n     };\n     println!(\"{}\", os);\n \n-    #[derive(PartialEq, Eq)]\n+    #[derive(PartialEq, Eq, ConstParamTy)]\n     enum E {\n         A,\n         B,"}, {"sha": "6aacc73b90dc187d668ad72ef1d7e2af3fd66f64", "filename": "src/tools/clippy/tests/ui/same_functions_in_if_condition.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_functions_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_functions_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_functions_in_if_condition.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,11 +1,11 @@\n error: this `if` has the same function call as a previous `if`\n-  --> $DIR/same_functions_in_if_condition.rs:37:15\n+  --> $DIR/same_functions_in_if_condition.rs:39:15\n    |\n LL |     } else if function() {\n    |               ^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/same_functions_in_if_condition.rs:36:8\n+  --> $DIR/same_functions_in_if_condition.rs:38:8\n    |\n LL |     if function() {\n    |        ^^^^^^^^^^\n@@ -16,61 +16,61 @@ LL | #![deny(clippy::same_functions_in_if_condition)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `if` has the same function call as a previous `if`\n-  --> $DIR/same_functions_in_if_condition.rs:42:15\n+  --> $DIR/same_functions_in_if_condition.rs:44:15\n    |\n LL |     } else if fn_arg(a) {\n    |               ^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/same_functions_in_if_condition.rs:41:8\n+  --> $DIR/same_functions_in_if_condition.rs:43:8\n    |\n LL |     if fn_arg(a) {\n    |        ^^^^^^^^^\n \n error: this `if` has the same function call as a previous `if`\n-  --> $DIR/same_functions_in_if_condition.rs:47:15\n+  --> $DIR/same_functions_in_if_condition.rs:49:15\n    |\n LL |     } else if obj.method() {\n    |               ^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/same_functions_in_if_condition.rs:46:8\n+  --> $DIR/same_functions_in_if_condition.rs:48:8\n    |\n LL |     if obj.method() {\n    |        ^^^^^^^^^^^^\n \n error: this `if` has the same function call as a previous `if`\n-  --> $DIR/same_functions_in_if_condition.rs:52:15\n+  --> $DIR/same_functions_in_if_condition.rs:54:15\n    |\n LL |     } else if obj.method_arg(a) {\n    |               ^^^^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/same_functions_in_if_condition.rs:51:8\n+  --> $DIR/same_functions_in_if_condition.rs:53:8\n    |\n LL |     if obj.method_arg(a) {\n    |        ^^^^^^^^^^^^^^^^^\n \n error: this `if` has the same function call as a previous `if`\n-  --> $DIR/same_functions_in_if_condition.rs:59:15\n+  --> $DIR/same_functions_in_if_condition.rs:61:15\n    |\n LL |     } else if v.pop().is_none() {\n    |               ^^^^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/same_functions_in_if_condition.rs:57:8\n+  --> $DIR/same_functions_in_if_condition.rs:59:8\n    |\n LL |     if v.pop().is_none() {\n    |        ^^^^^^^^^^^^^^^^^\n \n error: this `if` has the same function call as a previous `if`\n-  --> $DIR/same_functions_in_if_condition.rs:64:15\n+  --> $DIR/same_functions_in_if_condition.rs:66:15\n    |\n LL |     } else if v.len() == 42 {\n    |               ^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/same_functions_in_if_condition.rs:62:8\n+  --> $DIR/same_functions_in_if_condition.rs:64:8\n    |\n LL |     if v.len() == 42 {\n    |        ^^^^^^^^^^^^^"}, {"sha": "06d674234510ab643e28921d3c6a327c5cb11998", "filename": "tests/incremental/const-generics/hash-tyvid-regression-1.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,8 +1,20 @@\n // revisions: cfail\n #![feature(generic_const_exprs, adt_const_params)]\n #![allow(incomplete_features)]\n+\n+use std::marker::ConstParamTy;\n+\n+#[derive(PartialEq, Eq, ConstParamTy)]\n+struct NonZeroUsize(usize);\n+\n+impl NonZeroUsize {\n+    const fn get(self) -> usize {\n+        self.0\n+    }\n+}\n+\n // regression test for #77650\n-fn c<T, const N: std::num::NonZeroUsize>()\n+fn c<T, const N: NonZeroUsize>()\n where\n     [T; N.get()]: Sized,\n {"}, {"sha": "33f226ff611e81e99f06c0066bbf98a740deb6ec", "filename": "tests/incremental/const-generics/hash-tyvid-regression-2.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,11 +1,23 @@\n // revisions: cfail\n #![feature(generic_const_exprs, adt_const_params)]\n #![allow(incomplete_features)]\n+\n+use std::marker::ConstParamTy;\n+\n+#[derive(PartialEq, Eq, ConstParamTy)]\n+struct NonZeroUsize(usize);\n+\n+impl NonZeroUsize {\n+    const fn get(self) -> usize {\n+        self.0\n+    }\n+}\n+\n // regression test for #77650\n-struct C<T, const N: core::num::NonZeroUsize>([T; N.get()])\n+struct C<T, const N: NonZeroUsize>([T; N.get()])\n where\n     [T; N.get()]: Sized;\n-impl<'a, const N: core::num::NonZeroUsize, A, B: PartialEq<A>> PartialEq<&'a [A]> for C<B, N>\n+impl<'a, const N: NonZeroUsize, A, B: PartialEq<A>> PartialEq<&'a [A]> for C<B, N>\n where\n     [B; N.get()]: Sized,\n {"}, {"sha": "f1c108fed11ba39b3b1fe242429bfd466d444146", "filename": "tests/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-3.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-3.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -2,7 +2,18 @@\n #![feature(generic_const_exprs, adt_const_params)]\n #![allow(incomplete_features)]\n \n-use std::{convert::TryFrom, num::NonZeroUsize};\n+use std::{convert::TryFrom};\n+\n+use std::marker::ConstParamTy;\n+\n+#[derive(PartialEq, Eq, ConstParamTy)]\n+struct NonZeroUsize(usize);\n+\n+impl NonZeroUsize {\n+    const fn get(self) -> usize {\n+        self.0\n+    }\n+}\n \n struct A<const N: NonZeroUsize>([u8; N.get()])\n where"}, {"sha": "48910b82a1032d3f40fd0893ccd5fe3f0ebb4571", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_bad.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -11,6 +11,10 @@ note: required by a bound in `check`\n    |\n LL | fn check(_: impl std::marker::ConstParamTy) {}\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+help: use parentheses to call this function\n+   |\n+LL |     check(main());\n+   |               ++\n \n error[E0277]: `[closure@$DIR/const_param_ty_bad.rs:8:11: 8:13]` can't be used as a const parameter type\n   --> $DIR/const_param_ty_bad.rs:8:11\n@@ -25,6 +29,10 @@ note: required by a bound in `check`\n    |\n LL | fn check(_: impl std::marker::ConstParamTy) {}\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+help: use parentheses to call this closure\n+   |\n+LL |     check(|| {}());\n+   |                ++\n \n error[E0277]: `fn()` can't be used as a const parameter type\n   --> $DIR/const_param_ty_bad.rs:9:11\n@@ -39,6 +47,10 @@ note: required by a bound in `check`\n    |\n LL | fn check(_: impl std::marker::ConstParamTy) {}\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+help: use parentheses to call this function pointer\n+   |\n+LL |     check(main as fn()());\n+   |                       ++\n \n error[E0277]: `&mut ()` can't be used as a const parameter type\n   --> $DIR/const_param_ty_bad.rs:10:11\n@@ -48,11 +60,17 @@ LL |     check(&mut ());\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = note: `ConstParamTy` is implemented for `&()`, but not for `&mut ()`\n note: required by a bound in `check`\n   --> $DIR/const_param_ty_bad.rs:4:18\n    |\n LL | fn check(_: impl std::marker::ConstParamTy) {}\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+help: consider removing the leading `&`-reference\n+   |\n+LL -     check(&mut ());\n+LL +     check(());\n+   |\n \n error[E0277]: `*mut ()` can't be used as a const parameter type\n   --> $DIR/const_param_ty_bad.rs:11:11\n@@ -62,6 +80,7 @@ LL |     check(&mut () as *mut ());\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = help: the trait `ConstParamTy` is implemented for `()`\n note: required by a bound in `check`\n   --> $DIR/const_param_ty_bad.rs:4:18\n    |\n@@ -76,6 +95,7 @@ LL |     check(&() as *const ());\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = help: the trait `ConstParamTy` is implemented for `()`\n note: required by a bound in `check`\n   --> $DIR/const_param_ty_bad.rs:4:18\n    |"}, {"sha": "100ab332a40d87cd0a377b4536ae816db6f42739", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_good.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -49,5 +49,7 @@ fn main() {\n     check::<D<u8>>();\n     check::<D<[&[bool]; 8]>>();\n \n-    // FIXME: test tuples\n+    check::<()>();\n+    check::<(i32,)>();\n+    check::<(D<u8>, D<i32>)>();\n }"}, {"sha": "08f7c5cb5423ea4c66bec0c9a33a38edc618d0a5", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_no_structural_eq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -9,9 +9,11 @@ struct CantParam(ImplementsConstParamTy);\n \n impl std::marker::ConstParamTy for CantParam {}\n //~^ error: the type `CantParam` does not `#[derive(Eq)]`\n+//~| error: the type `CantParam` does not `#[derive(PartialEq)]`\n \n #[derive(std::marker::ConstParamTy)]\n //~^ error: the type `CantParamDerive` does not `#[derive(Eq)]`\n+//~| error: the type `CantParamDerive` does not `#[derive(PartialEq)]`\n struct CantParamDerive(ImplementsConstParamTy);\n \n fn check<T: std::marker::ConstParamTy>() {}"}, {"sha": "43c5b96dc7cb85c0e7ba5c87ed55bccddaa0a45e", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_no_structural_eq.stderr", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,3 +1,12 @@\n+error[E0277]: the type `CantParam` does not `#[derive(PartialEq)]`\n+  --> $DIR/const_param_ty_impl_no_structural_eq.rs:10:36\n+   |\n+LL | impl std::marker::ConstParamTy for CantParam {}\n+   |                                    ^^^^^^^^^ the trait `StructuralPartialEq` is not implemented for `CantParam`\n+   |\n+note: required by a bound in `ConstParamTy`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+\n error[E0277]: the type `CantParam` does not `#[derive(Eq)]`\n   --> $DIR/const_param_ty_impl_no_structural_eq.rs:10:36\n    |\n@@ -7,8 +16,18 @@ LL | impl std::marker::ConstParamTy for CantParam {}\n note: required by a bound in `ConstParamTy`\n   --> $SRC_DIR/core/src/marker.rs:LL:COL\n \n+error[E0277]: the type `CantParamDerive` does not `#[derive(PartialEq)]`\n+  --> $DIR/const_param_ty_impl_no_structural_eq.rs:14:10\n+   |\n+LL | #[derive(std::marker::ConstParamTy)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `StructuralPartialEq` is not implemented for `CantParamDerive`\n+   |\n+note: required by a bound in `ConstParamTy`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+   = note: this error originates in the derive macro `std::marker::ConstParamTy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error[E0277]: the type `CantParamDerive` does not `#[derive(Eq)]`\n-  --> $DIR/const_param_ty_impl_no_structural_eq.rs:13:10\n+  --> $DIR/const_param_ty_impl_no_structural_eq.rs:14:10\n    |\n LL | #[derive(std::marker::ConstParamTy)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `StructuralEq` is not implemented for `CantParamDerive`\n@@ -17,6 +36,6 @@ note: required by a bound in `ConstParamTy`\n   --> $SRC_DIR/core/src/marker.rs:LL:COL\n    = note: this error originates in the derive macro `std::marker::ConstParamTy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "c04e96c569b4133bea673f2fc8d9411b42b4fb01", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_union.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -14,6 +14,7 @@ impl Eq for Union {}\n impl std::marker::StructuralEq for Union {}\n \n impl std::marker::ConstParamTy for Union {}\n+//~^ ERROR the type `Union` does not `#[derive(PartialEq)]`\n \n #[derive(std::marker::ConstParamTy)]\n //~^ ERROR this trait cannot be derived for unions"}, {"sha": "985b933c40c7937ca3768b62f9256fd19ee19a58", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_union.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,8 +1,18 @@\n error: this trait cannot be derived for unions\n-  --> $DIR/const_param_ty_impl_union.rs:18:10\n+  --> $DIR/const_param_ty_impl_union.rs:19:10\n    |\n LL | #[derive(std::marker::ConstParamTy)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0277]: the type `Union` does not `#[derive(PartialEq)]`\n+  --> $DIR/const_param_ty_impl_union.rs:16:36\n+   |\n+LL | impl std::marker::ConstParamTy for Union {}\n+   |                                    ^^^^^ the trait `StructuralPartialEq` is not implemented for `Union`\n+   |\n+note: required by a bound in `ConstParamTy`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f53cf85cdd39cc8ef4378acb60b2586160f1242d", "filename": "tests/ui/const-generics/const-param-with-additional-obligations.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fconst-param-with-additional-obligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fconst-param-with-additional-obligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-with-additional-obligations.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -0,0 +1,17 @@\n+#![feature(adt_const_params)]\n+#![allow(incomplete_features)]\n+\n+use std::marker::ConstParamTy;\n+\n+#[derive(Eq, PartialEq)]\n+struct Foo<T>(T);\n+\n+trait Other {}\n+\n+impl<T> ConstParamTy for Foo<T> where T: Other + ConstParamTy {}\n+\n+fn foo<const N: Foo<u8>>() {}\n+//~^ ERROR `Foo<u8>` must implement `ConstParamTy` to be used as the type of a const generic parameter\n+//~| NOTE `u8` must implement `Other`, but it does not\n+\n+fn main() {}"}, {"sha": "f7ec4d57401c14db2fb0a0c09907ab5ea02ed3b2", "filename": "tests/ui/const-generics/const-param-with-additional-obligations.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fconst-param-with-additional-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fconst-param-with-additional-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-with-additional-obligations.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -0,0 +1,11 @@\n+error[E0741]: `Foo<u8>` must implement `ConstParamTy` to be used as the type of a const generic parameter\n+  --> $DIR/const-param-with-additional-obligations.rs:13:17\n+   |\n+LL | fn foo<const N: Foo<u8>>() {}\n+   |                 ^^^^^^^\n+   |\n+   = note: `u8` must implement `Other`, but it does not\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "6fe5390471ddcabf423ba059597e459522b5d823", "filename": "tests/ui/const-generics/float-generic.adt_const_params.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Ffloat-generic.adt_const_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Ffloat-generic.adt_const_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ffloat-generic.adt_const_params.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -3,8 +3,6 @@ error[E0741]: `f32` is forbidden as the type of a const generic parameter\n    |\n LL | fn foo<const F: f32>() {}\n    |                 ^^^\n-   |\n-   = note: floats do not derive `Eq` or `Ord`, which are required for const parameters\n \n error: aborting due to previous error\n "}, {"sha": "4fec2a9f32f81cb7ab47924937241ccd6a932778", "filename": "tests/ui/const-generics/forbid-non-structural_match-types.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,13 +1,15 @@\n #![feature(adt_const_params)]\n #![allow(incomplete_features)]\n \n-#[derive(PartialEq, Eq)]\n+use std::marker::ConstParamTy;\n+\n+#[derive(PartialEq, Eq, ConstParamTy)]\n struct A;\n \n struct B<const X: A>; // ok\n \n struct C;\n \n-struct D<const X: C>; //~ ERROR `C` must be annotated with `#[derive(PartialEq, Eq)]`\n+struct D<const X: C>; //~ ERROR `C` must implement `ConstParamTy` to be used as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "0efb9e9d3c2870965ffe730456c696c93397a6e1", "filename": "tests/ui/const-generics/forbid-non-structural_match-types.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,8 +1,14 @@\n-error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n-  --> $DIR/forbid-non-structural_match-types.rs:11:19\n+error[E0741]: `C` must implement `ConstParamTy` to be used as the type of a const generic parameter\n+  --> $DIR/forbid-non-structural_match-types.rs:13:19\n    |\n LL | struct D<const X: C>;\n-   |                   ^ `C` doesn't derive both `PartialEq` and `Eq`\n+   |                   ^\n+   |\n+help: add `#[derive(ConstParamTy, PartialEq, Eq)]` to the struct\n+   |\n+LL + #[derive(ConstParamTy, PartialEq, Eq)]\n+LL | struct C;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c478718b4cc79b683d0344a9cb9944d302fa9e1b", "filename": "tests/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -7,7 +7,7 @@ LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    = help: try adding a `where` bound using this expression: `where [(); 0 + N]:`\n \n error: overly complex generic constant\n-  --> $DIR/array-size-in-generic-struct-param.rs:19:15\n+  --> $DIR/array-size-in-generic-struct-param.rs:23:15\n    |\n LL |     arr: [u8; CFG.arr_size],\n    |               ^^^^^^^^^^^^ field access is not supported in generic constants"}, {"sha": "956e9c9c988a4599c83981332b488f1cd6c9e048", "filename": "tests/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.min.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -8,7 +8,7 @@ LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/array-size-in-generic-struct-param.rs:19:15\n+  --> $DIR/array-size-in-generic-struct-param.rs:23:15\n    |\n LL |     arr: [u8; CFG.arr_size],\n    |               ^^^ cannot perform const operation using `CFG`\n@@ -17,7 +17,7 @@ LL |     arr: [u8; CFG.arr_size],\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: `Config` is forbidden as the type of a const generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:17:21\n+  --> $DIR/array-size-in-generic-struct-param.rs:21:21\n    |\n LL | struct B<const CFG: Config> {\n    |                     ^^^^^^"}, {"sha": "33ca6dcb3049cf54d8892ba4af428dc846adf599", "filename": "tests/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -9,7 +9,11 @@ struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n //[full]~^ ERROR unconstrained generic constant\n //[min]~^^ ERROR generic parameters may not be used in const operations\n \n+#[cfg(full)]\n+use std::marker::ConstParamTy;\n+\n #[derive(PartialEq, Eq)]\n+#[cfg_attr(full, derive(ConstParamTy))]\n struct Config {\n     arr_size: usize,\n }"}, {"sha": "fcfad300c44e55a8d049cd5a1b9bd067339cf804", "filename": "tests/ui/const-generics/invalid-enum.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Finvalid-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Finvalid-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Finvalid-enum.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,7 +1,9 @@\n #![feature(adt_const_params)]\n #![allow(incomplete_features)]\n \n-#[derive(PartialEq, Eq)]\n+use std::marker::ConstParamTy;\n+\n+#[derive(PartialEq, Eq, ConstParamTy)]\n enum CompileFlag {\n     A,\n     B,"}, {"sha": "7e8a632b34f79148c49d9b563086465a2f3f9236", "filename": "tests/ui/const-generics/invalid-enum.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Finvalid-enum.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,5 +1,5 @@\n error[E0573]: expected type, found variant `CompileFlag::A`\n-  --> $DIR/invalid-enum.rs:21:12\n+  --> $DIR/invalid-enum.rs:23:12\n    |\n LL |   test_1::<CompileFlag::A>();\n    |            ^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |   test_1::<CompileFlag::A>();\n    |            help: try using the variant's enum: `CompileFlag`\n \n error[E0573]: expected type, found variant `CompileFlag::A`\n-  --> $DIR/invalid-enum.rs:25:15\n+  --> $DIR/invalid-enum.rs:27:15\n    |\n LL |   test_2::<_, CompileFlag::A>(0);\n    |               ^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |   test_2::<_, CompileFlag::A>(0);\n    |               help: try using the variant's enum: `CompileFlag`\n \n error[E0573]: expected type, found variant `CompileFlag::A`\n-  --> $DIR/invalid-enum.rs:29:18\n+  --> $DIR/invalid-enum.rs:31:18\n    |\n LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n    |                  ^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n    |                  help: try using the variant's enum: `CompileFlag`\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/invalid-enum.rs:29:18\n+  --> $DIR/invalid-enum.rs:31:18\n    |\n LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n    |                  ^^^^^^^^^^^^^^\n@@ -37,7 +37,7 @@ LL |   let _: Example<{ CompileFlag::A }, _> = Example { x: 0 };\n    |                  +                +\n \n error[E0747]: type provided when a constant was expected\n-  --> $DIR/invalid-enum.rs:33:18\n+  --> $DIR/invalid-enum.rs:35:18\n    |\n LL |   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n    |                  ^^^^^^^^^^^^^^^^^^^\n@@ -48,7 +48,7 @@ LL |   let _: Example<{ Example::ASSOC_FLAG }, _> = Example { x: 0 };\n    |                  +                     +\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/invalid-enum.rs:21:12\n+  --> $DIR/invalid-enum.rs:23:12\n    |\n LL |   test_1::<CompileFlag::A>();\n    |            ^^^^^^^^^^^^^^\n@@ -59,7 +59,7 @@ LL |   test_1::<{ CompileFlag::A }>();\n    |            +                +\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/invalid-enum.rs:25:15\n+  --> $DIR/invalid-enum.rs:27:15\n    |\n LL |   test_2::<_, CompileFlag::A>(0);\n    |               ^^^^^^^^^^^^^^"}, {"sha": "c8d5515e987398e185eeb70ad0201f3088ed1d24", "filename": "tests/ui/const-generics/issue-66451.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissue-66451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissue-66451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-66451.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,13 +1,15 @@\n #![feature(adt_const_params)]\n #![allow(incomplete_features)]\n \n-#[derive(Debug, PartialEq, Eq)]\n+use std::marker::ConstParamTy;\n+\n+#[derive(Debug, PartialEq, Eq, ConstParamTy)]\n struct Foo {\n     value: i32,\n     nested: &'static Bar<i32>,\n }\n \n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq, ConstParamTy)]\n struct Bar<T>(T);\n \n struct Test<const F: Foo>;"}, {"sha": "946d5148667ece9bdcf9186a3cf45e1c00ec1638", "filename": "tests/ui/const-generics/issue-66451.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissue-66451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissue-66451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-66451.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-66451.rs:27:10\n+  --> $DIR/issue-66451.rs:29:10\n    |\n LL |       let y: Test<{\n    |  ____________-"}, {"sha": "fa6f1fde435a0085daef842a3a7e200ba9014354", "filename": "tests/ui/const-generics/issue-80471.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissue-80471.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissue-80471.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-80471.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -8,6 +8,6 @@ enum Nat {\n }\n \n fn foo<const N: Nat>() {}\n-//~^ ERROR `Box<Nat>` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+//~^ ERROR `Nat` must implement `ConstParamTy` to be used as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "3b7143de543d70ac417371c185b3c86e7437667a", "filename": "tests/ui/const-generics/issue-80471.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissue-80471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissue-80471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-80471.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -7,11 +7,17 @@ LL | #![feature(adt_const_params)]\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0741]: `Box<Nat>` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+error[E0741]: `Nat` must implement `ConstParamTy` to be used as the type of a const generic parameter\n   --> $DIR/issue-80471.rs:10:17\n    |\n LL | fn foo<const N: Nat>() {}\n    |                 ^^^\n+   |\n+help: add `#[derive(ConstParamTy)]` to the struct\n+   |\n+LL + #[derive(ConstParamTy)]\n+LL | enum Nat {\n+   |\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "e2d8c5ca0e1484ce30ac90daf2187b267c09d7fd", "filename": "tests/ui/const-generics/issues/issue-63322-forbid-dyn.full.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,8 +1,10 @@\n-error[E0741]: `(dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+error[E0741]: `&'static (dyn A + 'static)` can't be used as a const parameter type\n   --> $DIR/issue-63322-forbid-dyn.rs:9:18\n    |\n LL | fn test<const T: &'static dyn A>() {\n    |                  ^^^^^^^^^^^^^^\n+   |\n+   = note: `(dyn A + 'static)` must implement `ConstParamTy`, but it does not\n \n error: aborting due to previous error\n "}, {"sha": "8bc35ab3d3795deb87f7ef8e0a3e00d309e05c60", "filename": "tests/ui/const-generics/issues/issue-63322-forbid-dyn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -7,7 +7,7 @@ struct B;\n impl A for B {}\n \n fn test<const T: &'static dyn A>() {\n-    //[full]~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n+    //[full]~^ ERROR `&'static (dyn A + 'static)` can't be used as a const parameter type\n     //[min]~^^ ERROR `&'static (dyn A + 'static)` is forbidden\n     unimplemented!()\n }"}, {"sha": "b6460e0017fa5bb002cefb6d10ef9983f4aa4feb", "filename": "tests/ui/const-generics/issues/issue-71381.full.stderr", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -14,19 +14,6 @@ LL |         const FN: unsafe extern \"C\" fn(Args),\n    |\n    = note: type parameters may not be used in the type of const parameters\n \n-error[E0741]: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71381.rs:14:61\n-   |\n-LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n-   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0741]: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71381.rs:23:19\n-   |\n-LL |         const FN: unsafe extern \"C\" fn(Args),\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0741, E0770.\n-For more information about an error, try `rustc --explain E0741`.\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "8a878efb42a0e6dd3915692cd8a96e0505ca7f3b", "filename": "tests/ui/const-generics/issues/issue-71381.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -12,17 +12,17 @@ unsafe extern \"C\" fn pass(args: PassArg) {\n \n impl Test {\n     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n-        //~^ ERROR: using function pointers as const generic parameters is forbidden\n-        //~| ERROR: the type of const parameters must not depend on other generic parameters\n+        //[min]~^ ERROR: using function pointers as const generic parameters is forbidden\n+        //~^^ ERROR: the type of const parameters must not depend on other generic parameters\n         self.0 = Self::trampiline::<Args, IDX, FN> as _\n     }\n \n     unsafe extern \"C\" fn trampiline<\n         Args: Sized,\n         const IDX: usize,\n         const FN: unsafe extern \"C\" fn(Args),\n-        //~^ ERROR: using function pointers as const generic parameters is forbidden\n-        //~| ERROR: the type of const parameters must not depend on other generic parameters\n+        //[min]~^ ERROR: using function pointers as const generic parameters is forbidden\n+        //~^^ ERROR: the type of const parameters must not depend on other generic parameters\n     >(\n         args: Args,\n     ) {\n@@ -31,6 +31,6 @@ impl Test {\n }\n \n fn main() {\n-    let x = Test();\n+    let x = Test(std::ptr::null());\n     x.call_me::<PassArg, 30, pass>()\n }"}, {"sha": "b55f410a02370c6f5cca314ca360a23a06928c33", "filename": "tests/ui/const-generics/issues/issue-71611.full.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -6,13 +6,6 @@ LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |\n    = note: type parameters may not be used in the type of const parameters\n \n-error[E0741]: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71611.rs:5:21\n-   |\n-LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n-   |                     ^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0741, E0770.\n-For more information about an error, try `rustc --explain E0741`.\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "c917f66818bad8f2ed5ad5accdd0db5a658e52e9", "filename": "tests/ui/const-generics/issues/issue-71611.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -3,8 +3,8 @@\n #![cfg_attr(full, allow(incomplete_features))]\n \n fn func<A, const F: fn(inner: A)>(outer: A) {\n-    //~^ ERROR: using function pointers as const generic parameters is forbidden\n-    //~| ERROR: the type of const parameters must not depend on other generic parameters\n+    //[min]~^ ERROR: using function pointers as const generic parameters is forbidden\n+    //~^^ ERROR: the type of const parameters must not depend on other generic parameters\n     F(outer);\n }\n "}, {"sha": "bbcf8682b711999904aff685f858a619e675eb9c", "filename": "tests/ui/const-generics/issues/issue-74255.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,5 +1,5 @@\n error: `IceEnum` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74255.rs:14:31\n+  --> $DIR/issue-74255.rs:18:31\n    |\n LL |     fn ice_struct_fn<const I: IceEnum>() {}\n    |                               ^^^^^^^"}, {"sha": "60b2fd37c44f6cd4d210b70362d628be72ef063e", "filename": "tests/ui/const-generics/issues/issue-74255.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -3,7 +3,11 @@\n #![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n+#[cfg(full)]\n+use std::marker::ConstParamTy;\n+\n #[derive(PartialEq, Eq)]\n+#[cfg_attr(full, derive(ConstParamTy))]\n enum IceEnum {\n     Variant\n }"}, {"sha": "c37ee93d420fd3ca5fa7729d9c3433c62e708be6", "filename": "tests/ui/const-generics/issues/issue-74950.min.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,5 +1,5 @@\n error: `Inner` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74950.rs:17:23\n+  --> $DIR/issue-74950.rs:20:23\n    |\n LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n@@ -8,7 +8,7 @@ LL | struct Outer<const I: Inner>;\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74950.rs:17:23\n+  --> $DIR/issue-74950.rs:20:23\n    |\n LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n@@ -17,7 +17,7 @@ LL | struct Outer<const I: Inner>;\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74950.rs:17:23\n+  --> $DIR/issue-74950.rs:20:23\n    |\n LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n@@ -26,7 +26,7 @@ LL | struct Outer<const I: Inner>;\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74950.rs:17:23\n+  --> $DIR/issue-74950.rs:20:23\n    |\n LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n@@ -35,7 +35,7 @@ LL | struct Outer<const I: Inner>;\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74950.rs:17:23\n+  --> $DIR/issue-74950.rs:20:23\n    |\n LL | struct Outer<const I: Inner>;\n    |                       ^^^^^"}, {"sha": "43bb322656b3e3b23932a7ca09ee1151b60d12be", "filename": "tests/ui/const-generics/issues/issue-74950.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -3,8 +3,11 @@\n #![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n+#[cfg(full)]\n+use std::marker::ConstParamTy;\n \n #[derive(PartialEq, Eq)]\n+#[cfg_attr(full, derive(ConstParamTy))]\n struct Inner;\n \n // Note: We emit the error 5 times if we don't deduplicate:"}, {"sha": "a32c1f965f8b59409e80a4b923c86eee2d4c59cb", "filename": "tests/ui/const-generics/issues/issue-87076.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-87076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-87076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-87076.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -3,7 +3,9 @@\n #![feature(adt_const_params)]\n #![allow(incomplete_features)]\n \n-#[derive(PartialEq, Eq)]\n+use std::marker::ConstParamTy;\n+\n+#[derive(PartialEq, Eq, ConstParamTy)]\n pub struct UnitDims {\n     pub time: u8,\n     pub length: u8,"}, {"sha": "8e7a1fcd9959768c9a0f8eff1966e6756b9ede86", "filename": "tests/ui/const-generics/issues/issue-97278.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -9,6 +9,6 @@ enum Bar {\n }\n \n fn test<const BAR: Bar>() {}\n-//~^ ERROR `Arc<i32>` must be annotated with `#[derive(PartialEq, Eq)]`\n+//~^ ERROR  `Bar` must implement `ConstParamTy` to be used as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "31e92f840e189faaf199d7547103ec6ab49cd193", "filename": "tests/ui/const-generics/issues/issue-97278.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,8 +1,14 @@\n-error[E0741]: `Arc<i32>` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+error[E0741]: `Bar` must implement `ConstParamTy` to be used as the type of a const generic parameter\n   --> $DIR/issue-97278.rs:11:20\n    |\n LL | fn test<const BAR: Bar>() {}\n    |                    ^^^\n+   |\n+help: add `#[derive(ConstParamTy)]` to the struct\n+   |\n+LL + #[derive(ConstParamTy)]\n+LL | enum Bar {\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "dd075a6ad052406d425ea13a2cf50cb55b232f97", "filename": "tests/ui/const-generics/issues/issue-99641.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-99641.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-99641.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-99641.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -3,10 +3,10 @@\n \n fn main() {\n     pub struct Color<const WHITE: (fn(),)>;\n-    //~^ ERROR using function pointers\n+    //~^ ERROR `(fn(),)` can't be used as a const parameter type\n \n     impl<const WHITE: (fn(),)> Color<WHITE> {\n-        //~^ ERROR using function pointers\n+        //~^ ERROR `(fn(),)` can't be used as a const parameter type\n         pub fn new() -> Self {\n             Color::<WHITE>\n         }"}, {"sha": "800aec3ef2ce7ad7f5b922dd90e6899216ce44e7", "filename": "tests/ui/const-generics/issues/issue-99641.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-99641.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-99641.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-99641.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,14 +1,18 @@\n-error[E0741]: using function pointers as const generic parameters is forbidden\n+error[E0741]: `(fn(),)` can't be used as a const parameter type\n   --> $DIR/issue-99641.rs:5:35\n    |\n LL |     pub struct Color<const WHITE: (fn(),)>;\n    |                                   ^^^^^^^\n+   |\n+   = note: `fn()` must implement `ConstParamTy`, but it does not\n \n-error[E0741]: using function pointers as const generic parameters is forbidden\n+error[E0741]: `(fn(),)` can't be used as a const parameter type\n   --> $DIR/issue-99641.rs:8:23\n    |\n LL |     impl<const WHITE: (fn(),)> Color<WHITE> {\n    |                       ^^^^^^^\n+   |\n+   = note: `fn()` must implement `ConstParamTy`, but it does not\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2ce6c4a823c375419ba040bfc0d9bac85d46a2b8", "filename": "tests/ui/const-generics/overlapping_impls.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Foverlapping_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Foverlapping_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Foverlapping_impls.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -2,7 +2,8 @@\n #![allow(incomplete_features)]\n #![feature(adt_const_params)]\n #![feature(generic_const_exprs)]\n-use std::marker::PhantomData;\n+\n+use std::marker::{ConstParamTy, PhantomData};\n \n struct Foo<const I: i32, const J: i32> {}\n \n@@ -22,7 +23,7 @@ pub struct Foo2<const P: Protocol, T> {\n     _marker: PhantomData<T>,\n }\n \n-#[derive(PartialEq, Eq)]\n+#[derive(PartialEq, Eq, ConstParamTy)]\n pub enum Protocol {\n     Variant1,\n     Variant2,"}, {"sha": "5bf48ad738587821ad68568fcd34a97e9c2571e3", "filename": "tests/ui/const-generics/std/const-generics-range.full.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.full.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -0,0 +1,39 @@\n+error[E0741]: `std::ops::Range<usize>` must implement `ConstParamTy` to be used as the type of a const generic parameter\n+  --> $DIR/const-generics-range.rs:8:24\n+   |\n+LL | struct _Range<const R: std::ops::Range<usize>>;\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0741]: `RangeFrom<usize>` must implement `ConstParamTy` to be used as the type of a const generic parameter\n+  --> $DIR/const-generics-range.rs:13:28\n+   |\n+LL | struct _RangeFrom<const R: std::ops::RangeFrom<usize>>;\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0741]: `RangeFull` must implement `ConstParamTy` to be used as the type of a const generic parameter\n+  --> $DIR/const-generics-range.rs:18:28\n+   |\n+LL | struct _RangeFull<const R: std::ops::RangeFull>;\n+   |                            ^^^^^^^^^^^^^^^^^^^\n+\n+error[E0741]: `RangeInclusive<usize>` must implement `ConstParamTy` to be used as the type of a const generic parameter\n+  --> $DIR/const-generics-range.rs:24:33\n+   |\n+LL | struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0741]: `RangeTo<usize>` must implement `ConstParamTy` to be used as the type of a const generic parameter\n+  --> $DIR/const-generics-range.rs:29:26\n+   |\n+LL | struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0741]: `RangeToInclusive<usize>` must implement `ConstParamTy` to be used as the type of a const generic parameter\n+  --> $DIR/const-generics-range.rs:34:35\n+   |\n+LL | struct _RangeToInclusive<const R: std::ops::RangeToInclusive<usize>>;\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "53fca6e884a9a9e8669fcfb3ee7ae2710b26a5f8", "filename": "tests/ui/const-generics/std/const-generics-range.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,5 +1,5 @@\n error: `std::ops::Range<usize>` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-generics-range.rs:7:24\n+  --> $DIR/const-generics-range.rs:8:24\n    |\n LL | struct _Range<const R: std::ops::Range<usize>>;\n    |                        ^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | struct _Range<const R: std::ops::Range<usize>>;\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `RangeFrom<usize>` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-generics-range.rs:12:28\n+  --> $DIR/const-generics-range.rs:13:28\n    |\n LL | struct _RangeFrom<const R: std::ops::RangeFrom<usize>>;\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL | struct _RangeFrom<const R: std::ops::RangeFrom<usize>>;\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `RangeFull` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-generics-range.rs:17:28\n+  --> $DIR/const-generics-range.rs:18:28\n    |\n LL | struct _RangeFull<const R: std::ops::RangeFull>;\n    |                            ^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL | struct _RangeFull<const R: std::ops::RangeFull>;\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `RangeInclusive<usize>` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-generics-range.rs:23:33\n+  --> $DIR/const-generics-range.rs:24:33\n    |\n LL | struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `RangeTo<usize>` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-generics-range.rs:28:26\n+  --> $DIR/const-generics-range.rs:29:26\n    |\n LL | struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL | struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `RangeToInclusive<usize>` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-generics-range.rs:33:35\n+  --> $DIR/const-generics-range.rs:34:35\n    |\n LL | struct _RangeToInclusive<const R: std::ops::RangeToInclusive<usize>>;\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "bda59f3ec45909da5f10a7170dc3806041c274ac", "filename": "tests/ui/const-generics/std/const-generics-range.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,4 +1,5 @@\n-// [full] check-pass\n+// [full] known-bug: unknown\n+\n // revisions: full min\n #![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]"}, {"sha": "fb0405b651cc5850956357d30a0564d24e55de41", "filename": "tests/ui/consts/refs_check_const_eq-issue-88384.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -8,10 +8,10 @@ struct CompileTimeSettings{\n }\n \n struct Foo<const T: CompileTimeSettings>;\n-//~^ ERROR using function pointers as const generic parameters is forbidden\n+//~^ ERROR `CompileTimeSettings` must implement `ConstParamTy` to be used as the type of a const generic parameter\n \n impl<const T: CompileTimeSettings> Foo<T> {\n-    //~^ ERROR using function pointers as const generic parameters is forbidden\n+    //~^ ERROR `CompileTimeSettings` must implement `ConstParamTy` to be used as the type of a const generic parameter\n     fn call_hooks(){\n     }\n }"}, {"sha": "c490cd053e70e2c6f4a088d876afc5ce4a2e75c2", "filename": "tests/ui/consts/refs_check_const_eq-issue-88384.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -7,17 +7,29 @@ LL | #![feature(adt_const_params)]\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0741]: using function pointers as const generic parameters is forbidden\n+error[E0741]: `CompileTimeSettings` must implement `ConstParamTy` to be used as the type of a const generic parameter\n   --> $DIR/refs_check_const_eq-issue-88384.rs:10:21\n    |\n LL | struct Foo<const T: CompileTimeSettings>;\n    |                     ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: add `#[derive(ConstParamTy)]` to the struct\n+   |\n+LL + #[derive(ConstParamTy)]\n+LL | struct CompileTimeSettings{\n+   |\n \n-error[E0741]: using function pointers as const generic parameters is forbidden\n+error[E0741]: `CompileTimeSettings` must implement `ConstParamTy` to be used as the type of a const generic parameter\n   --> $DIR/refs_check_const_eq-issue-88384.rs:13:15\n    |\n LL | impl<const T: CompileTimeSettings> Foo<T> {\n    |               ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: add `#[derive(ConstParamTy)]` to the struct\n+   |\n+LL + #[derive(ConstParamTy)]\n+LL | struct CompileTimeSettings{\n+   |\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "7eedc325d60f69c675fba134cd495c253f72ab1e", "filename": "tests/ui/mir/thir-constparam-temp.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fmir%2Fthir-constparam-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fmir%2Fthir-constparam-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fthir-constparam-temp.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -3,7 +3,9 @@\n #![feature(adt_const_params)]\n #![allow(incomplete_features)]\n \n-#[derive(PartialEq, Eq)]\n+use std::marker::ConstParamTy;\n+\n+#[derive(PartialEq, Eq, ConstParamTy)]\n struct Yikes;\n \n impl Yikes {"}, {"sha": "d50747e5434fadffe28f138a1b19778dc7ad05b8", "filename": "tests/ui/mir/thir-constparam-temp.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fmir%2Fthir-constparam-temp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fmir%2Fthir-constparam-temp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fthir-constparam-temp.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,18 +1,18 @@\n warning: taking a mutable reference to a `const` item\n-  --> $DIR/thir-constparam-temp.rs:14:5\n+  --> $DIR/thir-constparam-temp.rs:16:5\n    |\n LL |     YIKES.mut_self()\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: each usage of a `const` item creates a new temporary\n    = note: the mutable reference will refer to this temporary, not the original `const` item\n note: mutable reference created due to call to this method\n-  --> $DIR/thir-constparam-temp.rs:10:5\n+  --> $DIR/thir-constparam-temp.rs:12:5\n    |\n LL |     fn mut_self(&mut self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n note: `const` item defined here\n-  --> $DIR/thir-constparam-temp.rs:13:8\n+  --> $DIR/thir-constparam-temp.rs:15:8\n    |\n LL | fn foo<const YIKES: Yikes>() {\n    |        ^^^^^^^^^^^^^^^^^^"}, {"sha": "e393b159e64d5e44b7537cddd2820d0971cab11a", "filename": "tests/ui/offset-of/offset-of-dst-field.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -36,6 +36,8 @@ fn main() {\n     offset_of!(Alpha, z); //~ ERROR the size for values of type\n     offset_of!(Beta, z); //~ ERROR the size for values of type\n     offset_of!(Gamma, z); //~ ERROR the size for values of type\n+    offset_of!((u8, dyn Trait), 0); // ok\n+    offset_of!((u8, dyn Trait), 1); //~ ERROR the size for values of type\n }\n \n fn delta() {"}, {"sha": "4eaceaa93581774a0b118e31eda11c7823870bc9", "filename": "tests/ui/offset-of/offset-of-dst-field.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -25,8 +25,17 @@ LL |     offset_of!(Gamma, z);\n    = help: the trait `Sized` is not implemented for `Extern`\n    = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n+  --> $DIR/offset-of-dst-field.rs:40:5\n+   |\n+LL |     offset_of!((u8, dyn Trait), 1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `dyn Trait`\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error[E0277]: the size for values of type `Extern` cannot be known at compilation time\n-  --> $DIR/offset-of-dst-field.rs:43:5\n+  --> $DIR/offset-of-dst-field.rs:45:5\n    |\n LL |     offset_of!(Delta<Extern>, z);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -35,7 +44,7 @@ LL |     offset_of!(Delta<Extern>, z);\n    = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n-  --> $DIR/offset-of-dst-field.rs:44:5\n+  --> $DIR/offset-of-dst-field.rs:46:5\n    |\n LL |     offset_of!(Delta<dyn Trait>, z);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -44,7 +53,7 @@ LL |     offset_of!(Delta<dyn Trait>, z);\n    = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/offset-of-dst-field.rs:42:5\n+  --> $DIR/offset-of-dst-field.rs:44:5\n    |\n LL |     offset_of!(Delta<Alpha>, z);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -58,7 +67,7 @@ LL | struct Alpha {\n    = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/offset-of-dst-field.rs:48:5\n+  --> $DIR/offset-of-dst-field.rs:50:5\n    |\n LL | fn generic_with_maybe_sized<T: ?Sized>() -> usize {\n    |                             - this type parameter needs to be `std::marker::Sized`\n@@ -72,6 +81,6 @@ LL - fn generic_with_maybe_sized<T: ?Sized>() -> usize {\n LL + fn generic_with_maybe_sized<T>() -> usize {\n    |\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "4077538b77f270a8436f430912866b00cd6bf7b9", "filename": "tests/ui/offset-of/offset-of-tuple.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Foffset-of%2Foffset-of-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Foffset-of%2Foffset-of-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-tuple.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -0,0 +1,10 @@\n+#![feature(offset_of)]\n+#![feature(builtin_syntax)]\n+\n+fn main() {\n+    core::mem::offset_of!((u8, u8), _0); //~ ERROR no field `_0`\n+    core::mem::offset_of!((u8, u8), +1); //~ ERROR no rules expected\n+    core::mem::offset_of!((u8, u8), -1); //~ ERROR no rules expected\n+    builtin # offset_of((u8, u8), _0); //~ ERROR no field `_0`\n+    builtin # offset_of((u8, u8), +1); //~ ERROR expected identifier\n+}"}, {"sha": "cc9ce0f34550c98ca4aacfe3a15de553c43c0809", "filename": "tests/ui/offset-of/offset-of-tuple.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Foffset-of%2Foffset-of-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Foffset-of%2Foffset-of-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-tuple.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -0,0 +1,37 @@\n+error: expected identifier, found `+`\n+  --> $DIR/offset-of-tuple.rs:9:35\n+   |\n+LL |     builtin # offset_of((u8, u8), +1);\n+   |                                   ^ expected identifier\n+\n+error: no rules expected the token `1`\n+  --> $DIR/offset-of-tuple.rs:6:38\n+   |\n+LL |     core::mem::offset_of!((u8, u8), +1);\n+   |                                      ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence start\n+\n+error: no rules expected the token `1`\n+  --> $DIR/offset-of-tuple.rs:7:38\n+   |\n+LL |     core::mem::offset_of!((u8, u8), -1);\n+   |                                      ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence start\n+\n+error[E0609]: no field `_0` on type `(u8, u8)`\n+  --> $DIR/offset-of-tuple.rs:5:37\n+   |\n+LL |     core::mem::offset_of!((u8, u8), _0);\n+   |                                     ^^\n+\n+error[E0609]: no field `_0` on type `(u8, u8)`\n+  --> $DIR/offset-of-tuple.rs:8:35\n+   |\n+LL |     builtin # offset_of((u8, u8), _0);\n+   |                                   ^^\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0609`."}, {"sha": "49c8328da5c553806dc749a1835e01600294ac9b", "filename": "tests/ui/offset-of/offset-of-unsized.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Foffset-of%2Foffset-of-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Foffset-of%2Foffset-of-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-unsized.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,5 +1,6 @@\n // build-pass\n-// regression test for #112051\n+// regression test for #112051, not in `offset-of-dst` as the issue is in codegen,\n+// and isn't triggered in the presence of typeck errors\n \n #![feature(offset_of)]\n "}, {"sha": "8f4118057cec4dd931736923c0830e280825fd2a", "filename": "tests/ui/sanitize/issue-111184-generator-witness.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fsanitize%2Fissue-111184-generator-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fsanitize%2Fissue-111184-generator-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fissue-111184-generator-witness.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -0,0 +1,17 @@\n+// Regression test for issue 111184, where ty::GeneratorWitness were not expected to occur in\n+// encode_ty and caused the compiler to ICE.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsanitizer=cfi --edition=2021\n+// no-prefer-dynamic\n+// only-x86_64-unknown-linux-gnu\n+// run-pass\n+\n+use std::future::Future;\n+\n+async fn foo() {}\n+fn bar<T>(_: impl Future<Output = T>) {}\n+\n+fn main() {\n+    bar(foo());\n+}"}, {"sha": "947fddf3f31b53e479ee7150eea84d8d63633530", "filename": "tests/ui/symbol-names/const-generics-structural-demangling.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,14 +1,13 @@\n // build-fail\n // compile-flags: -C symbol-mangling-version=v0 --crate-name=c\n \n-// NOTE(eddyb) we need `core` for `core::option::Option`, normalize away its\n-// disambiguator hash, which can/should change (including between stage{1,2}).\n-// normalize-stderr-test: \"core\\[[0-9a-f]+\\]\" -> \"core[HASH]\"\n // normalize-stderr-test: \"c\\[[0-9a-f]+\\]\" -> \"c[HASH]\"\n \n #![feature(adt_const_params, decl_macro, rustc_attrs)]\n #![allow(incomplete_features)]\n \n+use std::marker::ConstParamTy;\n+\n pub struct RefByte<const RB: &'static u8>;\n \n #[rustc_symbol_name]\n@@ -43,25 +42,31 @@ pub struct TupleByteBool<const TBB: (u8, bool)>;\n //~| ERROR demangling-alt(<c::TupleByteBool<{(1, false)}>>)\n impl TupleByteBool<{(1, false)}> {}\n \n-pub struct OptionUsize<const OU: Option<usize>>;\n+#[derive(PartialEq, Eq, ConstParamTy)]\n+pub enum MyOption<T> {\n+    Some(T),\n+    None,\n+}\n+\n+pub struct OptionUsize<const OU: MyOption<usize>>;\n \n // HACK(eddyb) the full mangling is only in `.stderr` because we can normalize\n // the `core` disambiguator hash away there, but not here.\n #[rustc_symbol_name]\n //~^ ERROR symbol-name\n //~| ERROR demangling\n-//~| ERROR demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::None}>>)\n-impl OptionUsize<{None}> {}\n+//~| ERROR demangling-alt(<c::OptionUsize<{c::MyOption::<usize>::None}>>)\n+impl OptionUsize<{MyOption::None}> {}\n \n // HACK(eddyb) the full mangling is only in `.stderr` because we can normalize\n // the `core` disambiguator hash away there, but not here.\n #[rustc_symbol_name]\n //~^ ERROR symbol-name\n //~| ERROR demangling\n-//~| ERROR demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::Some(0)}>>)\n-impl OptionUsize<{Some(0)}> {}\n+//~| ERROR demangling-alt(<c::OptionUsize<{c::MyOption::<usize>::Some(0)}>>)\n+impl OptionUsize<{MyOption::Some(0)}> {}\n \n-#[derive(PartialEq, Eq)]\n+#[derive(PartialEq, Eq, ConstParamTy)]\n pub struct Foo {\n     s: &'static str,\n     ch: char,\n@@ -78,7 +83,7 @@ impl Foo_<{Foo { s: \"abc\", ch: 'x', slice: &[1, 2, 3] }}> {}\n // NOTE(eddyb) this tests specifically the use of disambiguators in field names,\n // using macros 2.0 hygiene to create a `struct` with conflicting field names.\n macro duplicate_field_name_test($x:ident) {\n-    #[derive(PartialEq, Eq)]\n+    #[derive(PartialEq, Eq, ConstParamTy)]\n     pub struct Bar {\n         $x: u8,\n         x: u16,"}, {"sha": "96dea154d05c0e786f515aa002a3c85da3f28d64", "filename": "tests/ui/symbol-names/const-generics-structural-demangling.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebf04225d358efe77b822081cebef657f88d35b/tests%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.stderr?ref=8ebf04225d358efe77b822081cebef657f88d35b", "patch": "@@ -1,131 +1,131 @@\n error: symbol-name(_RMCsCRATE_HASH_1cINtB<REF>_7RefByteKRh7b_E)\n-  --> $DIR/const-generics-structural-demangling.rs:14:1\n+  --> $DIR/const-generics-structural-demangling.rs:13:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(<c[HASH]::RefByte<{&123u8}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:14:1\n+  --> $DIR/const-generics-structural-demangling.rs:13:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::RefByte<{&123}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:14:1\n+  --> $DIR/const-generics-structural-demangling.rs:13:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: symbol-name(_RMs_CsCRATE_HASH_1cINtB<REF>_6RefZstKRAEE)\n-  --> $DIR/const-generics-structural-demangling.rs:24:1\n+  --> $DIR/const-generics-structural-demangling.rs:23:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(<c[HASH]::RefZst<{&[]}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:24:1\n+  --> $DIR/const-generics-structural-demangling.rs:23:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::RefZst<{&[]}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:24:1\n+  --> $DIR/const-generics-structural-demangling.rs:23:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: symbol-name(_RMs0_CsCRATE_HASH_1cINtB<REF>_11Array3BytesKAh1_h2_h3_EE)\n-  --> $DIR/const-generics-structural-demangling.rs:32:1\n+  --> $DIR/const-generics-structural-demangling.rs:31:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(<c[HASH]::Array3Bytes<{[1u8, 2u8, 3u8]}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:32:1\n+  --> $DIR/const-generics-structural-demangling.rs:31:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::Array3Bytes<{[1, 2, 3]}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:32:1\n+  --> $DIR/const-generics-structural-demangling.rs:31:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: symbol-name(_RMs1_CsCRATE_HASH_1cINtB<REF>_13TupleByteBoolKTh1_b0_EE)\n-  --> $DIR/const-generics-structural-demangling.rs:40:1\n+  --> $DIR/const-generics-structural-demangling.rs:39:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(<c[HASH]::TupleByteBool<{(1u8, false)}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:40:1\n+  --> $DIR/const-generics-structural-demangling.rs:39:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::TupleByteBool<{(1, false)}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:40:1\n+  --> $DIR/const-generics-structural-demangling.rs:39:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs2_CsCRATE_HASH_1cINtB<REF>_11OptionUsizeKVNtINtNtCsCRATE_HASH_4core6option6OptionjE4NoneUE)\n-  --> $DIR/const-generics-structural-demangling.rs:50:1\n+error: symbol-name(_RMs2_CsCRATE_HASH_1cINtB<REF>_11OptionUsizeKVNtINtB<REF>_8MyOptionjE4NoneUE)\n+  --> $DIR/const-generics-structural-demangling.rs:55:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[HASH]::OptionUsize<{core[HASH]::option::Option::<usize>::None}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:50:1\n+error: demangling(<c[HASH]::OptionUsize<{c[HASH]::MyOption::<usize>::None}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:55:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::None}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:50:1\n+error: demangling-alt(<c::OptionUsize<{c::MyOption::<usize>::None}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:55:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs3_CsCRATE_HASH_1cINtB<REF>_11OptionUsizeKVNtINtNtCsCRATE_HASH_4core6option6OptionjE4SomeTj0_EE)\n-  --> $DIR/const-generics-structural-demangling.rs:58:1\n+error: symbol-name(_RMs3_CsCRATE_HASH_1cINtB<REF>_11OptionUsizeKVNtINtB<REF>_8MyOptionjE4SomeTj0_EE)\n+  --> $DIR/const-generics-structural-demangling.rs:63:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[HASH]::OptionUsize<{core[HASH]::option::Option::<usize>::Some(0usize)}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:58:1\n+error: demangling(<c[HASH]::OptionUsize<{c[HASH]::MyOption::<usize>::Some(0usize)}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:63:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::Some(0)}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:58:1\n+error: demangling-alt(<c::OptionUsize<{c::MyOption::<usize>::Some(0)}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:63:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: symbol-name(_RMs4_CsCRATE_HASH_1cINtB<REF>_4Foo_KVNtB<REF>_3FooS1sRe616263_2chc78_5sliceRAh1_h2_h3_EEE)\n-  --> $DIR/const-generics-structural-demangling.rs:72:1\n+  --> $DIR/const-generics-structural-demangling.rs:77:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(<c[HASH]::Foo_<{c[HASH]::Foo { s: \"abc\", ch: 'x', slice: &[1u8, 2u8, 3u8] }}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:72:1\n+  --> $DIR/const-generics-structural-demangling.rs:77:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::Foo_<{c::Foo { s: \"abc\", ch: 'x', slice: &[1, 2, 3] }}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:72:1\n+  --> $DIR/const-generics-structural-demangling.rs:77:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs9_CsCRATE_HASH_1cINtB<REF>_4Bar_KVNtB<REF>_3BarS1xh7b_s_1xt1000_EE)\n-  --> $DIR/const-generics-structural-demangling.rs:88:5\n+error: symbol-name(_RMsf_CsCRATE_HASH_1cINtB<REF>_4Bar_KVNtB<REF>_3BarS1xh7b_s_1xt1000_EE)\n+  --> $DIR/const-generics-structural-demangling.rs:93:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -136,7 +136,7 @@ LL | duplicate_field_name_test!(x);\n    = note: this error originates in the macro `duplicate_field_name_test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: demangling(<c[HASH]::Bar_<{c[HASH]::Bar { x: 123u8, x: 4096u16 }}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:88:5\n+  --> $DIR/const-generics-structural-demangling.rs:93:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -147,7 +147,7 @@ LL | duplicate_field_name_test!(x);\n    = note: this error originates in the macro `duplicate_field_name_test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: demangling-alt(<c::Bar_<{c::Bar { x: 123, x: 4096 }}>>)\n-  --> $DIR/const-generics-structural-demangling.rs:88:5\n+  --> $DIR/const-generics-structural-demangling.rs:93:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^"}]}