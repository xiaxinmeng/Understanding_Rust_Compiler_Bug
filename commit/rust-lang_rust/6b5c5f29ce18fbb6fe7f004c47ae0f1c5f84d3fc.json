{"sha": "6b5c5f29ce18fbb6fe7f004c47ae0f1c5f84d3fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNWM1ZjI5Y2UxOGZiYjZmZTdmMDA0YzQ3YWUwZjFjNWY4NGQzZmM=", "commit": {"author": {"name": "Jordi Polo", "email": "mumismo@gmail.com", "date": "2017-02-12T02:02:55Z"}, "committer": {"name": "Jordi Polo", "email": "mumismo@gmail.com", "date": "2017-02-12T02:02:55Z"}, "message": "Sustitutes try! for ? in the Result documentation", "tree": {"sha": "1e9dcf241b2bed1aa91cba970fcdc7d6641eb2d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e9dcf241b2bed1aa91cba970fcdc7d6641eb2d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b5c5f29ce18fbb6fe7f004c47ae0f1c5f84d3fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5c5f29ce18fbb6fe7f004c47ae0f1c5f84d3fc", "html_url": "https://github.com/rust-lang/rust/commit/6b5c5f29ce18fbb6fe7f004c47ae0f1c5f84d3fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b5c5f29ce18fbb6fe7f004c47ae0f1c5f84d3fc/comments", "author": {"login": "JordiPolo", "id": 21734, "node_id": "MDQ6VXNlcjIxNzM0", "avatar_url": "https://avatars.githubusercontent.com/u/21734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JordiPolo", "html_url": "https://github.com/JordiPolo", "followers_url": "https://api.github.com/users/JordiPolo/followers", "following_url": "https://api.github.com/users/JordiPolo/following{/other_user}", "gists_url": "https://api.github.com/users/JordiPolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/JordiPolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JordiPolo/subscriptions", "organizations_url": "https://api.github.com/users/JordiPolo/orgs", "repos_url": "https://api.github.com/users/JordiPolo/repos", "events_url": "https://api.github.com/users/JordiPolo/events{/privacy}", "received_events_url": "https://api.github.com/users/JordiPolo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JordiPolo", "id": 21734, "node_id": "MDQ6VXNlcjIxNzM0", "avatar_url": "https://avatars.githubusercontent.com/u/21734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JordiPolo", "html_url": "https://github.com/JordiPolo", "followers_url": "https://api.github.com/users/JordiPolo/followers", "following_url": "https://api.github.com/users/JordiPolo/following{/other_user}", "gists_url": "https://api.github.com/users/JordiPolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/JordiPolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JordiPolo/subscriptions", "organizations_url": "https://api.github.com/users/JordiPolo/orgs", "repos_url": "https://api.github.com/users/JordiPolo/repos", "events_url": "https://api.github.com/users/JordiPolo/events{/privacy}", "received_events_url": "https://api.github.com/users/JordiPolo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba7cf7cc5daefb9f28371b8be87dc262fb55937c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7cf7cc5daefb9f28371b8be87dc262fb55937c", "html_url": "https://github.com/rust-lang/rust/commit/ba7cf7cc5daefb9f28371b8be87dc262fb55937c"}], "stats": {"total": 38, "additions": 15, "deletions": 23}, "files": [{"sha": "a05db9b489ca19ad523a4257985cf00a0b5afd3e", "filename": "src/libcore/result.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6b5c5f29ce18fbb6fe7f004c47ae0f1c5f84d3fc/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5c5f29ce18fbb6fe7f004c47ae0f1c5f84d3fc/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=6b5c5f29ce18fbb6fe7f004c47ae0f1c5f84d3fc", "patch": "@@ -139,25 +139,25 @@\n //! assert!(file.write_all(b\"important message\").is_ok());\n //! ```\n //!\n-//! Or propagate the error up the call stack with [`try!`]:\n+//! Or propagate the error up the call stack with [`?`]:\n //!\n //! ```\n //! # use std::fs::File;\n //! # use std::io::prelude::*;\n //! # use std::io;\n //! # #[allow(dead_code)]\n //! fn write_message() -> io::Result<()> {\n-//!     let mut file = try!(File::create(\"valuable_data.txt\"));\n-//!     try!(file.write_all(b\"important message\"));\n+//!     let mut file = File::create(\"valuable_data.txt\")?;\n+//!     file.write_all(b\"important message\")?;\n //!     Ok(())\n //! }\n //! ```\n //!\n-//! # The `try!` macro\n+//! # The `?` syntax\n //!\n //! When writing code that calls many functions that return the\n-//! [`Result`] type, the error handling can be tedious. The [`try!`]\n-//! macro hides some of the boilerplate of propagating errors up the\n+//! [`Result`] type, the error handling can be tedious. The [`?`]\n+//! syntax hides some of the boilerplate of propagating errors up the\n //! call stack.\n //!\n //! It replaces this:\n@@ -208,37 +208,29 @@\n //! }\n //!\n //! fn write_info(info: &Info) -> io::Result<()> {\n-//!     let mut file = try!(File::create(\"my_best_friends.txt\"));\n+//!     let mut file = File::create(\"my_best_friends.txt\")?;\n //!     // Early return on error\n-//!     try!(file.write_all(format!(\"name: {}\\n\", info.name).as_bytes()));\n-//!     try!(file.write_all(format!(\"age: {}\\n\", info.age).as_bytes()));\n-//!     try!(file.write_all(format!(\"rating: {}\\n\", info.rating).as_bytes()));\n+//!     file.write_all(format!(\"name: {}\\n\", info.name).as_bytes())?;\n+//!     file.write_all(format!(\"age: {}\\n\", info.age).as_bytes())?;\n+//!     file.write_all(format!(\"rating: {}\\n\", info.rating).as_bytes())?;\n //!     Ok(())\n //! }\n //! ```\n //!\n //! *It's much nicer!*\n //!\n-//! Wrapping an expression in [`try!`] will result in the unwrapped\n+//! Ending the expression with [`?`] will result in the unwrapped\n //! success ([`Ok`]) value, unless the result is [`Err`], in which case\n-//! [`Err`] is returned early from the enclosing function. Its simple definition\n-//! makes it clear:\n+//! [`Err`] is returned early from the enclosing function.\n //!\n-//! ```\n-//! macro_rules! try {\n-//!     ($e:expr) => (match $e { Ok(e) => e, Err(e) => return Err(e) })\n-//! }\n-//! ```\n-//!\n-//! [`try!`] is imported by the prelude and is available everywhere, but it can only\n-//! be used in functions that return [`Result`] because of the early return of\n-//! [`Err`] that it provides.\n+//! [`?`] can only be used in functions that return [`Result`] because of the\n+//! early return of [`Err`] that it provides.\n //!\n //! [`expect`]: enum.Result.html#method.expect\n //! [`Write`]: ../../std/io/trait.Write.html\n //! [`write_all`]: ../../std/io/trait.Write.html#method.write_all\n //! [`io::Result`]: ../../std/io/type.Result.html\n-//! [`try!`]: ../../std/macro.try.html\n+//! [`?`]: ../../std/macro.try.html\n //! [`Result`]: enum.Result.html\n //! [`Ok(T)`]: enum.Result.html#variant.Ok\n //! [`Err(E)`]: enum.Result.html#variant.Err"}]}