{"sha": "e9e04e56fc6767f63458de1c137b5231cfd77b33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZTA0ZTU2ZmM2NzY3ZjYzNDU4ZGUxYzEzN2I1MjMxY2ZkNzdiMzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-24T07:38:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-24T08:11:48Z"}, "message": "move path methods together, to the bottom of the string helpers", "tree": {"sha": "3c0feef55a4e5b2ad0720098bc3194dd23d0493a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c0feef55a4e5b2ad0720098bc3194dd23d0493a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9e04e56fc6767f63458de1c137b5231cfd77b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e04e56fc6767f63458de1c137b5231cfd77b33", "html_url": "https://github.com/rust-lang/rust/commit/e9e04e56fc6767f63458de1c137b5231cfd77b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9e04e56fc6767f63458de1c137b5231cfd77b33/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8817397828f2e4aedf4251bdc02c6299d1d1654c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8817397828f2e4aedf4251bdc02c6299d1d1654c", "html_url": "https://github.com/rust-lang/rust/commit/8817397828f2e4aedf4251bdc02c6299d1d1654c"}], "stats": {"total": 156, "additions": 79, "deletions": 77}, "files": [{"sha": "7ca2b238218a176fff13dff79b3a9953fa01334b", "filename": "src/helpers.rs", "status": "modified", "additions": 79, "deletions": 77, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/e9e04e56fc6767f63458de1c137b5231cfd77b33/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e04e56fc6767f63458de1c137b5231cfd77b33/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=e9e04e56fc6767f63458de1c137b5231cfd77b33", "patch": "@@ -498,42 +498,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         bytes_to_os_str(bytes)\n     }\n \n-    /// Read a null-terminated sequence of bytes, and perform path separator conversion if needed.\n-    fn read_path_from_c_str<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, Cow<'a, Path>>\n-    where\n-        'tcx: 'a,\n-        'mir: 'a,\n-    {\n-        let this = self.eval_context_ref();\n-        let os_str = this.read_os_str_from_c_str(scalar)?;\n-\n-        #[cfg(windows)]\n-        return Ok(if this.tcx.sess.target.target.target_os == \"windows\" {\n-            // Windows-on-Windows, all fine.\n-            Cow::Borrowed(Path::new(os_str))\n-        } else {\n-            // Unix target, Windows host. Need to convert target '/' to host '\\'.\n-            let converted = os_str\n-                .encode_wide()\n-                .map(|wchar| if wchar == '/' as u16 { '\\\\' as u16 } else { wchar })\n-                .collect::<Vec<_>>();\n-            Cow::Owned(PathBuf::from(OsString::from_wide(&converted)))\n-        });\n-        #[cfg(unix)]\n-        return Ok(if this.tcx.sess.target.target.target_os == \"windows\" {\n-            // Windows target, Unix host. Need to convert target '\\' to host '/'.\n-            let converted = os_str\n-                .as_bytes()\n-                .iter()\n-                .map(|&wchar| if wchar == '/' as u8 { '\\\\' as u8 } else { wchar })\n-                .collect::<Vec<_>>();\n-            Cow::Owned(PathBuf::from(OsString::from_vec(converted)))\n-        } else {\n-            // Unix-on-Unix, all is fine.\n-            Cow::Borrowed(Path::new(os_str))\n-        });\n-    }\n-\n     /// Helper function to read an OsString from a 0x0000-terminated sequence of u16,\n     /// which is what the Windows APIs usually handle.\n     fn read_os_str_from_wide_str<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, OsString>\n@@ -595,46 +559,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok((true, string_length))\n     }\n \n-    /// Write a Path to the machine memory, adjusting path separators if needed.\n-    fn write_path_to_c_str(\n-        &mut self,\n-        path: &Path,\n-        scalar: Scalar<Tag>,\n-        size: u64,\n-    ) -> InterpResult<'tcx, (bool, u64)> {\n-        let this = self.eval_context_mut();\n-\n-        #[cfg(windows)]\n-        let os_str = if this.tcx.sess.target.target.target_os == \"windows\" {\n-            // Windows-on-Windows, all fine.\n-            Cow::Borrowed(path.as_os_str())\n-        } else {\n-            // Unix target, Windows host. Need to convert host '\\\\' to target '/'.\n-            let converted = path\n-                .as_os_str()\n-                .encode_wide()\n-                .map(|wchar| if wchar == '\\\\' as u16 { '/' as u16 } else { wchar })\n-                .collect::<Vec<_>>();\n-            Cow::Owned(OsString::from_wide(&converted))\n-        };\n-        #[cfg(unix)]\n-        let os_str = if this.tcx.sess.target.target.target_os == \"windows\" {\n-            // Windows target, Unix host. Need to convert host '/' to target '\\'.\n-            let converted = path\n-                .as_os_str()\n-                .as_bytes()\n-                .iter()\n-                .map(|&wchar| if wchar == '/' as u8 { '\\\\' as u8 } else { wchar })\n-                .collect::<Vec<_>>();\n-            Cow::Owned(OsString::from_vec(converted))\n-        } else {\n-            // Unix-on-Unix, all is fine.\n-            Cow::Borrowed(path.as_os_str())\n-        };\n-\n-        this.write_os_str_to_c_str(&os_str, scalar, size)\n-    }\n-\n     /// Helper function to write an OsStr as a 0x0000-terminated u16-sequence, which is what\n     /// the Windows APIs usually handle. This function returns `Ok((false, length))` without trying\n     /// to write if `size` is not large enough to fit the contents of `os_string` plus a null\n@@ -674,7 +598,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Store the UTF-16 string.\n         let char_size = Size::from_bytes(2);\n         for (idx, c) in u16_vec.into_iter().chain(iter::once(0x0000)).enumerate() {\n-            let place = this.mplace_field(mplace, idx as u64)?; \n+            let place = this.mplace_field(mplace, u64::try_from(idx).unwrap())?; \n             this.write_scalar(Scalar::from_uint(c, char_size), place.into())?;\n         }\n         Ok((true, string_length))\n@@ -695,6 +619,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n+    /// Allocate enough memory to store the given `OsStr` as a null-terminated sequence of bytes.\n     fn alloc_os_str_as_c_str(\n         &mut self,\n         os_str: &OsStr,\n@@ -709,6 +634,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         arg_place.ptr.assert_ptr()\n     }\n \n+    /// Allocate enough memory to store the given `OsStr` as a null-terminated sequence of `u16`.\n     fn alloc_os_str_as_wide_str(\n         &mut self,\n         os_str: &OsStr,\n@@ -722,6 +648,82 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         assert!(self.write_os_str_to_wide_str(os_str, arg_place, size).unwrap().0);\n         arg_place.ptr.assert_ptr()\n     }\n+\n+    /// Read a null-terminated sequence of bytes, and perform path separator conversion if needed.\n+    fn read_path_from_c_str<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, Cow<'a, Path>>\n+    where\n+        'tcx: 'a,\n+        'mir: 'a,\n+    {\n+        let this = self.eval_context_ref();\n+        let os_str = this.read_os_str_from_c_str(scalar)?;\n+\n+        #[cfg(windows)]\n+        return Ok(if this.tcx.sess.target.target.target_os == \"windows\" {\n+            // Windows-on-Windows, all fine.\n+            Cow::Borrowed(Path::new(os_str))\n+        } else {\n+            // Unix target, Windows host. Need to convert target '/' to host '\\'.\n+            let converted = os_str\n+                .encode_wide()\n+                .map(|wchar| if wchar == '/' as u16 { '\\\\' as u16 } else { wchar })\n+                .collect::<Vec<_>>();\n+            Cow::Owned(PathBuf::from(OsString::from_wide(&converted)))\n+        });\n+        #[cfg(unix)]\n+        return Ok(if this.tcx.sess.target.target.target_os == \"windows\" {\n+            // Windows target, Unix host. Need to convert target '\\' to host '/'.\n+            let converted = os_str\n+                .as_bytes()\n+                .iter()\n+                .map(|&wchar| if wchar == '/' as u8 { '\\\\' as u8 } else { wchar })\n+                .collect::<Vec<_>>();\n+            Cow::Owned(PathBuf::from(OsString::from_vec(converted)))\n+        } else {\n+            // Unix-on-Unix, all is fine.\n+            Cow::Borrowed(Path::new(os_str))\n+        });\n+    }\n+\n+    /// Write a Path to the machine memory, adjusting path separators if needed.\n+    fn write_path_to_c_str(\n+        &mut self,\n+        path: &Path,\n+        scalar: Scalar<Tag>,\n+        size: u64,\n+    ) -> InterpResult<'tcx, (bool, u64)> {\n+        let this = self.eval_context_mut();\n+\n+        #[cfg(windows)]\n+        let os_str = if this.tcx.sess.target.target.target_os == \"windows\" {\n+            // Windows-on-Windows, all fine.\n+            Cow::Borrowed(path.as_os_str())\n+        } else {\n+            // Unix target, Windows host. Need to convert host '\\\\' to target '/'.\n+            let converted = path\n+                .as_os_str()\n+                .encode_wide()\n+                .map(|wchar| if wchar == '\\\\' as u16 { '/' as u16 } else { wchar })\n+                .collect::<Vec<_>>();\n+            Cow::Owned(OsString::from_wide(&converted))\n+        };\n+        #[cfg(unix)]\n+        let os_str = if this.tcx.sess.target.target.target_os == \"windows\" {\n+            // Windows target, Unix host. Need to convert host '/' to target '\\'.\n+            let converted = path\n+                .as_os_str()\n+                .as_bytes()\n+                .iter()\n+                .map(|&wchar| if wchar == '/' as u8 { '\\\\' as u8 } else { wchar })\n+                .collect::<Vec<_>>();\n+            Cow::Owned(OsString::from_vec(converted))\n+        } else {\n+            // Unix-on-Unix, all is fine.\n+            Cow::Borrowed(path.as_os_str())\n+        };\n+\n+        this.write_os_str_to_c_str(&os_str, scalar, size)\n+    }\n }\n \n pub fn immty_from_int_checked<'tcx>("}]}