{"sha": "88493d26657557b1e328be2057594db79cb2f594", "node_id": "C_kwDOAAsO6NoAKDg4NDkzZDI2NjU3NTU3YjFlMzI4YmUyMDU3NTk0ZGI3OWNiMmY1OTQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-05-16T12:35:27Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-05-16T12:35:27Z"}, "message": "Only keep impl blocks from bodies", "tree": {"sha": "da5a724958ca0b5681c964ec0f18f13cba1aa108", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da5a724958ca0b5681c964ec0f18f13cba1aa108"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88493d26657557b1e328be2057594db79cb2f594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88493d26657557b1e328be2057594db79cb2f594", "html_url": "https://github.com/rust-lang/rust/commit/88493d26657557b1e328be2057594db79cb2f594", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88493d26657557b1e328be2057594db79cb2f594/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "url": "https://api.github.com/repos/rust-lang/rust/commits/69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "html_url": "https://github.com/rust-lang/rust/commit/69fef92ab2f287f072b66fb7b4f62c8bb4acba43"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "8f8dc6b709053a24eb9d670d7cffa10ccb3f757f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/88493d26657557b1e328be2057594db79cb2f594/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88493d26657557b1e328be2057594db79cb2f594/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=88493d26657557b1e328be2057594db79cb2f594", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LocalDefIdSet};\n-use rustc_hir::intravisit::{walk_item, Visitor};\n+use rustc_hir::intravisit::{walk_body, walk_item, Visitor};\n use rustc_hir::{Node, CRATE_HIR_ID};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n@@ -106,6 +106,7 @@ pub(crate) struct RustdocVisitor<'a, 'tcx> {\n     exact_paths: DefIdMap<Vec<Symbol>>,\n     modules: Vec<Module<'tcx>>,\n     is_importable_from_parent: bool,\n+    inside_body: bool,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -129,6 +130,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             exact_paths: Default::default(),\n             modules: vec![om],\n             is_importable_from_parent: true,\n+            inside_body: false,\n         }\n     }\n \n@@ -368,6 +370,26 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         import_id: Option<LocalDefId>,\n     ) {\n         debug!(\"visiting item {:?}\", item);\n+        if self.inside_body {\n+            // Only impls can be \"seen\" outside a body. For example:\n+            //\n+            // ```\n+            // struct Bar;\n+            //\n+            // fn foo() {\n+            //     impl Bar { fn bar() {} }\n+            // }\n+            // Bar::bar();\n+            // ```\n+            if let hir::ItemKind::Impl(impl_) = item.kind &&\n+                // Don't duplicate impls when inlining or if it's implementing a trait, we'll pick\n+                // them up regardless of where they're located.\n+                impl_.of_trait.is_none()\n+            {\n+                self.add_to_current_mod(item, None, None);\n+            }\n+            return;\n+        }\n         let name = renamed.unwrap_or(item.ident.name);\n         let tcx = self.cx.tcx;\n \n@@ -564,4 +586,10 @@ impl<'a, 'tcx> Visitor<'tcx> for RustdocVisitor<'a, 'tcx> {\n     fn visit_lifetime(&mut self, _: &hir::Lifetime) {\n         // Unneeded.\n     }\n+\n+    fn visit_body(&mut self, b: &'tcx hir::Body<'tcx>) {\n+        let prev = mem::replace(&mut self.inside_body, true);\n+        walk_body(self, b);\n+        self.inside_body = prev;\n+    }\n }"}]}