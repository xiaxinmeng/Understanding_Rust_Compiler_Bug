{"sha": "419d59f6e77a88773c90481bbfb8a0cee237ba9a", "node_id": "C_kwDOAAsO6NoAKDQxOWQ1OWY2ZTc3YTg4NzczYzkwNDgxYmJmYjhhMGNlZTIzN2JhOWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-31T11:19:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-31T11:19:33Z"}, "message": "Auto merge of #14454 - Veykril:crate-origins, r=Veykril\n\ninternal: Refine CrateOrigin variants", "tree": {"sha": "3e87374d67fbaece2ae951e8c0d11759f972f251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e87374d67fbaece2ae951e8c0d11759f972f251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/419d59f6e77a88773c90481bbfb8a0cee237ba9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/419d59f6e77a88773c90481bbfb8a0cee237ba9a", "html_url": "https://github.com/rust-lang/rust/commit/419d59f6e77a88773c90481bbfb8a0cee237ba9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/419d59f6e77a88773c90481bbfb8a0cee237ba9a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42d671fcb7173f1bdb4e785d732e6fb31b5bea0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/42d671fcb7173f1bdb4e785d732e6fb31b5bea0b", "html_url": "https://github.com/rust-lang/rust/commit/42d671fcb7173f1bdb4e785d732e6fb31b5bea0b"}, {"sha": "31db1fc75fe24c81e58ba7ee4612e4be3f323f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/31db1fc75fe24c81e58ba7ee4612e4be3f323f95", "html_url": "https://github.com/rust-lang/rust/commit/31db1fc75fe24c81e58ba7ee4612e4be3f323f95"}], "stats": {"total": 578, "additions": 343, "deletions": 235}, "files": [{"sha": "0ce8ec864be9bdeeeaf63c0a635007c3704f20b2", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=419d59f6e77a88773c90481bbfb8a0cee237ba9a", "patch": "@@ -166,6 +166,7 @@ impl ChangeFixture {\n                         .as_deref()\n                         .map(Arc::from)\n                         .ok_or_else(|| \"target_data_layout unset\".into()),\n+                    None,\n                 );\n                 let prev = crates.insert(crate_name.clone(), crate_id);\n                 assert!(prev.is_none());\n@@ -200,10 +201,11 @@ impl ChangeFixture {\n                 default_cfg,\n                 Env::default(),\n                 false,\n-                CrateOrigin::CratesIo { repo: None, name: None },\n+                CrateOrigin::Local { repo: None, name: None },\n                 default_target_data_layout\n                     .map(|x| x.into())\n                     .ok_or_else(|| \"target_data_layout unset\".into()),\n+                None,\n             );\n         } else {\n             for (from, to, prelude) in crate_deps {\n@@ -245,6 +247,7 @@ impl ChangeFixture {\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::Core),\n                 target_layout.clone(),\n+                None,\n             );\n \n             for krate in all_crates {\n@@ -281,8 +284,9 @@ impl ChangeFixture {\n                 CfgOptions::default(),\n                 Env::default(),\n                 true,\n-                CrateOrigin::CratesIo { repo: None, name: None },\n+                CrateOrigin::Local { repo: None, name: None },\n                 target_layout,\n+                None,\n             );\n             proc_macros.insert(proc_macros_crate, Ok(proc_macro));\n \n@@ -427,18 +431,17 @@ fn parse_crate(crate_str: String) -> (String, CrateOrigin, Option<String>) {\n         let (version, origin) = match b.split_once(':') {\n             Some((\"CratesIo\", data)) => match data.split_once(',') {\n                 Some((version, url)) => {\n-                    (version, CrateOrigin::CratesIo { repo: Some(url.to_owned()), name: None })\n+                    (version, CrateOrigin::Local { repo: Some(url.to_owned()), name: None })\n                 }\n                 _ => panic!(\"Bad crates.io parameter: {data}\"),\n             },\n             _ => panic!(\"Bad string for crate origin: {b}\"),\n         };\n         (a.to_owned(), origin, Some(version.to_string()))\n     } else {\n-        let crate_origin = match &*crate_str {\n-            \"std\" => CrateOrigin::Lang(LangCrateOrigin::Std),\n-            \"core\" => CrateOrigin::Lang(LangCrateOrigin::Core),\n-            _ => CrateOrigin::CratesIo { repo: None, name: None },\n+        let crate_origin = match LangCrateOrigin::from(&*crate_str) {\n+            LangCrateOrigin::Other => CrateOrigin::Local { repo: None, name: None },\n+            origin => CrateOrigin::Lang(origin),\n         };\n         (crate_str, crate_origin, None)\n     }"}, {"sha": "e65568bb8ef59c2594b27b11e499d41e76002255", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 57, "deletions": 13, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=419d59f6e77a88773c90481bbfb8a0cee237ba9a", "patch": "@@ -135,8 +135,12 @@ impl ops::Deref for CrateName {\n /// Origin of the crates. It is used in emitting monikers.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum CrateOrigin {\n-    /// Crates that are from crates.io official registry,\n-    CratesIo { repo: Option<String>, name: Option<String> },\n+    /// Crates that are from the rustc workspace\n+    Rustc { name: String },\n+    /// Crates that are workspace members,\n+    Local { repo: Option<String>, name: Option<String> },\n+    /// Crates that are non member libraries.\n+    Library { repo: Option<String>, name: String },\n     /// Crates that are provided by the language, like std, core, proc-macro, ...\n     Lang(LangCrateOrigin),\n }\n@@ -257,6 +261,32 @@ pub struct ProcMacro {\n     pub expander: Arc<dyn ProcMacroExpander>,\n }\n \n+#[derive(Debug, Copy, Clone)]\n+pub enum ReleaseChannel {\n+    Stable,\n+    Beta,\n+    Nightly,\n+}\n+\n+impl ReleaseChannel {\n+    pub fn as_str(self) -> &'static str {\n+        match self {\n+            ReleaseChannel::Stable => \"stable\",\n+            ReleaseChannel::Beta => \"beta\",\n+            ReleaseChannel::Nightly => \"nightly\",\n+        }\n+    }\n+\n+    pub fn from_str(str: &str) -> Option<Self> {\n+        Some(match str {\n+            \"stable\" => ReleaseChannel::Stable,\n+            \"beta\" => ReleaseChannel::Beta,\n+            \"nightly\" => ReleaseChannel::Nightly,\n+            _ => return None,\n+        })\n+    }\n+}\n+\n #[derive(Debug, Clone)]\n pub struct CrateData {\n     pub root_file_id: FileId,\n@@ -271,11 +301,13 @@ pub struct CrateData {\n     pub display_name: Option<CrateDisplayName>,\n     pub cfg_options: CfgOptions,\n     pub potential_cfg_options: CfgOptions,\n-    pub target_layout: TargetLayoutLoadResult,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n     pub origin: CrateOrigin,\n     pub is_proc_macro: bool,\n+    // FIXME: These things should not be per crate! These are more per workspace crate graph level things\n+    pub target_layout: TargetLayoutLoadResult,\n+    pub channel: Option<ReleaseChannel>,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -329,6 +361,7 @@ impl CrateGraph {\n         is_proc_macro: bool,\n         origin: CrateOrigin,\n         target_layout: Result<Arc<str>, Arc<str>>,\n+        channel: Option<ReleaseChannel>,\n     ) -> CrateId {\n         let data = CrateData {\n             root_file_id,\n@@ -342,6 +375,7 @@ impl CrateGraph {\n             origin,\n             target_layout,\n             is_proc_macro,\n+            channel,\n         };\n         let crate_id = CrateId(self.arena.len() as u32);\n         let prev = self.arena.insert(crate_id, data);\n@@ -653,8 +687,9 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             false,\n-            CrateOrigin::CratesIo { repo: None, name: None },\n+            CrateOrigin::Local { repo: None, name: None },\n             Err(\"\".into()),\n+            None,\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -665,8 +700,9 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             false,\n-            CrateOrigin::CratesIo { repo: None, name: None },\n+            CrateOrigin::Local { repo: None, name: None },\n             Err(\"\".into()),\n+            None,\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -677,8 +713,9 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             false,\n-            CrateOrigin::CratesIo { repo: None, name: None },\n+            CrateOrigin::Local { repo: None, name: None },\n             Err(\"\".into()),\n+            None,\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -703,8 +740,9 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             false,\n-            CrateOrigin::CratesIo { repo: None, name: None },\n+            CrateOrigin::Local { repo: None, name: None },\n             Err(\"\".into()),\n+            None,\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -715,8 +753,9 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             false,\n-            CrateOrigin::CratesIo { repo: None, name: None },\n+            CrateOrigin::Local { repo: None, name: None },\n             Err(\"\".into()),\n+            None,\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -738,8 +777,9 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             false,\n-            CrateOrigin::CratesIo { repo: None, name: None },\n+            CrateOrigin::Local { repo: None, name: None },\n             Err(\"\".into()),\n+            None,\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -750,8 +790,9 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             false,\n-            CrateOrigin::CratesIo { repo: None, name: None },\n+            CrateOrigin::Local { repo: None, name: None },\n             Err(\"\".into()),\n+            None,\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -762,8 +803,9 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             false,\n-            CrateOrigin::CratesIo { repo: None, name: None },\n+            CrateOrigin::Local { repo: None, name: None },\n             Err(\"\".into()),\n+            None,\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -785,8 +827,9 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             false,\n-            CrateOrigin::CratesIo { repo: None, name: None },\n+            CrateOrigin::Local { repo: None, name: None },\n             Err(\"\".into()),\n+            None,\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -797,8 +840,9 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             false,\n-            CrateOrigin::CratesIo { repo: None, name: None },\n+            CrateOrigin::Local { repo: None, name: None },\n             Err(\"\".into()),\n+            None,\n         );\n         assert!(graph\n             .add_dep("}, {"sha": "2ffcd7a089985b0cccb02e38114290f56bdc73f5", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=419d59f6e77a88773c90481bbfb8a0cee237ba9a", "patch": "@@ -16,8 +16,8 @@ pub use crate::{\n     input::{\n         CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency,\n         Edition, Env, LangCrateOrigin, ProcMacro, ProcMacroExpander, ProcMacroExpansionError,\n-        ProcMacroId, ProcMacroKind, ProcMacroLoadResult, ProcMacroPaths, ProcMacros, SourceRoot,\n-        SourceRootId, TargetLayoutLoadResult,\n+        ProcMacroId, ProcMacroKind, ProcMacroLoadResult, ProcMacroPaths, ProcMacros,\n+        ReleaseChannel, SourceRoot, SourceRootId, TargetLayoutLoadResult,\n     },\n };\n pub use salsa::{self, Cancelled};"}, {"sha": "8d86c615d44d29905dd411687aa9d35c87688493", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=419d59f6e77a88773c90481bbfb8a0cee237ba9a", "patch": "@@ -12,7 +12,7 @@ use url::Url;\n \n use hir::{db::HirDatabase, Adt, AsAssocItem, AssocItem, AssocItemContainer, HasAttrs};\n use ide_db::{\n-    base_db::{CrateOrigin, LangCrateOrigin, SourceDatabase},\n+    base_db::{CrateOrigin, LangCrateOrigin, ReleaseChannel, SourceDatabase},\n     defs::{Definition, NameClass, NameRefClass},\n     helpers::pick_best_token,\n     RootDatabase,\n@@ -436,8 +436,9 @@ fn get_doc_base_url(db: &RootDatabase, def: Definition) -> Option<Url> {\n \n     let krate = def.krate(db)?;\n     let display_name = krate.display_name(db)?;\n-\n-    let base = match db.crate_graph()[krate.into()].origin {\n+    let crate_data = &db.crate_graph()[krate.into()];\n+    let channel = crate_data.channel.map_or(\"nightly\", ReleaseChannel::as_str);\n+    let base = match &crate_data.origin {\n         // std and co do not specify `html_root_url` any longer so we gotta handwrite this ourself.\n         // FIXME: Use the toolchains channel instead of nightly\n         CrateOrigin::Lang(\n@@ -447,9 +448,14 @@ fn get_doc_base_url(db: &RootDatabase, def: Definition) -> Option<Url> {\n             | LangCrateOrigin::Std\n             | LangCrateOrigin::Test),\n         ) => {\n-            format!(\"https://doc.rust-lang.org/nightly/{origin}\")\n+            format!(\"https://doc.rust-lang.org/{channel}/{origin}\")\n+        }\n+        CrateOrigin::Lang(_) => return None,\n+        CrateOrigin::Rustc { name: _ } => {\n+            format!(\"https://doc.rust-lang.org/{channel}/nightly-rustc/\")\n         }\n-        _ => {\n+        CrateOrigin::Local { repo: _, name: _ } => {\n+            // FIXME: These should not attempt to link to docs.rs!\n             krate.get_html_root_url(db).or_else(|| {\n                 let version = krate.version(db);\n                 // Fallback to docs.rs. This uses `display_name` and can never be\n@@ -464,6 +470,21 @@ fn get_doc_base_url(db: &RootDatabase, def: Definition) -> Option<Url> {\n                 ))\n             })?\n         }\n+        CrateOrigin::Library { repo: _, name } => {\n+            krate.get_html_root_url(db).or_else(|| {\n+                let version = krate.version(db);\n+                // Fallback to docs.rs. This uses `display_name` and can never be\n+                // correct, but that's what fallbacks are about.\n+                //\n+                // FIXME: clicking on the link should just open the file in the editor,\n+                // instead of falling back to external urls.\n+                Some(format!(\n+                    \"https://docs.rs/{krate}/{version}/\",\n+                    krate = name,\n+                    version = version.as_deref().unwrap_or(\"*\")\n+                ))\n+            })?\n+        }\n     };\n     Url::parse(&base).ok()?.join(&format!(\"{display_name}/\")).ok()\n }"}, {"sha": "22ddf91ab33ef179bb669be5e1b24c3461a007b1", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=419d59f6e77a88773c90481bbfb8a0cee237ba9a", "patch": "@@ -240,8 +240,9 @@ impl Analysis {\n             cfg_options,\n             Env::default(),\n             false,\n-            CrateOrigin::CratesIo { repo: None, name: None },\n+            CrateOrigin::Local { repo: None, name: None },\n             Err(\"Analysis::from_single_file has no target layout\".into()),\n+            None,\n         );\n         change.change_file(file_id, Some(Arc::new(text)));\n         change.set_crate_graph(crate_graph);"}, {"sha": "7f36e1df547a3e325e5af2173b3c51f36b8446d0", "filename": "crates/ide/src/moniker.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fide%2Fsrc%2Fmoniker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fide%2Fsrc%2Fmoniker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmoniker.rs?ref=419d59f6e77a88773c90481bbfb8a0cee237ba9a", "patch": "@@ -245,11 +245,17 @@ pub(crate) fn def_to_moniker(\n         kind: if krate == from_crate { MonikerKind::Export } else { MonikerKind::Import },\n         package_information: {\n             let (name, repo, version) = match krate.origin(db) {\n-                CrateOrigin::CratesIo { repo, name } => (\n+                CrateOrigin::Library { repo, name } => (name, repo, krate.version(db)),\n+                CrateOrigin::Local { repo, name } => (\n                     name.unwrap_or(krate.display_name(db)?.canonical_name().to_string()),\n                     repo,\n                     krate.version(db),\n                 ),\n+                CrateOrigin::Rustc { name } => (\n+                    name.clone(),\n+                    Some(\"https://github.com/rust-lang/rust/\".to_string()),\n+                    Some(format!(\"https://github.com/rust-lang/rust/compiler/{name}\",)),\n+                ),\n                 CrateOrigin::Lang(lang) => (\n                     krate.display_name(db)?.canonical_name().to_string(),\n                     Some(\"https://github.com/rust-lang/rust/\".to_string()),"}, {"sha": "d94b15f60c84c1b25768808eacbe6b8c0a20d614", "filename": "crates/ide/src/shuffle_crate_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs?ref=419d59f6e77a88773c90481bbfb8a0cee237ba9a", "patch": "@@ -40,6 +40,7 @@ pub(crate) fn shuffle_crate_graph(db: &mut RootDatabase) {\n             data.is_proc_macro,\n             data.origin.clone(),\n             data.target_layout.clone(),\n+            data.channel,\n         );\n         new_proc_macros.insert(new_id, proc_macros[&old_id].clone());\n         map.insert(old_id, new_id);"}, {"sha": "87b9da46e2cc843097f440360b244f97d592bc8e", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html?ref=419d59f6e77a88773c90481bbfb8a0cee237ba9a", "patch": "@@ -43,5 +43,5 @@\n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n <pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module crate_root default_library library\">std</span><span class=\"semicolon\">;</span>\n-<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module crate_root library\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module crate_root declaration library\">abc</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module crate_root default_library library\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module crate_root default_library declaration library\">abc</span><span class=\"semicolon\">;</span>\n </code></pre>\n\\ No newline at end of file"}, {"sha": "ea238ad598525c729acd15b385b2884657a916b4", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 137, "deletions": 161, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=419d59f6e77a88773c90481bbfb8a0cee237ba9a", "patch": "@@ -41,7 +41,8 @@ fn load_rust_project(file: &str) -> (CrateGraph, ProcMacroPaths) {\n     let data = get_test_json_file(file);\n     let project = rooted_project_json(data);\n     let sysroot = Ok(get_fake_sysroot());\n-    let project_workspace = ProjectWorkspace::Json { project, sysroot, rustc_cfg: Vec::new() };\n+    let project_workspace =\n+        ProjectWorkspace::Json { project, sysroot, rustc_cfg: Vec::new(), toolchain: None };\n     to_crate_graph(project_workspace)\n }\n \n@@ -154,9 +155,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -187,13 +185,14 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: CratesIo {\n-                            repo: None,\n-                            name: Some(\n-                                \"hello-world\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"hello-world\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         1,\n@@ -223,9 +222,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -265,13 +261,14 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: CratesIo {\n-                            repo: None,\n-                            name: Some(\n-                                \"hello-world\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"hello-world\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         2,\n@@ -301,9 +298,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -343,13 +337,14 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: CratesIo {\n-                            repo: None,\n-                            name: Some(\n-                                \"hello-world\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"hello-world\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         3,\n@@ -379,9 +374,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -421,13 +413,14 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: CratesIo {\n-                            repo: None,\n-                            name: Some(\n-                                \"hello-world\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"hello-world\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         4,\n@@ -466,9 +459,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"feature=use_std\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -489,15 +479,14 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         },\n                         dependencies: [],\n-                        origin: CratesIo {\n-                            repo: Some(\n-                                \"https://github.com/rust-lang/libc\",\n-                            ),\n-                            name: Some(\n-                                \"libc\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"libc\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                 },\n             }\"#]],\n@@ -552,9 +541,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -585,13 +571,14 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: CratesIo {\n-                            repo: None,\n-                            name: Some(\n-                                \"hello-world\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"hello-world\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         1,\n@@ -623,9 +610,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -665,13 +649,14 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: CratesIo {\n-                            repo: None,\n-                            name: Some(\n-                                \"hello-world\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"hello-world\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         2,\n@@ -703,9 +688,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -745,13 +727,14 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: CratesIo {\n-                            repo: None,\n-                            name: Some(\n-                                \"hello-world\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"hello-world\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         3,\n@@ -783,9 +766,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -825,13 +805,14 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: CratesIo {\n-                            repo: None,\n-                            name: Some(\n-                                \"hello-world\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"hello-world\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         4,\n@@ -870,9 +851,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"feature=use_std\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -893,15 +871,14 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         },\n                         dependencies: [],\n-                        origin: CratesIo {\n-                            repo: Some(\n-                                \"https://github.com/rust-lang/libc\",\n-                            ),\n-                            name: Some(\n-                                \"libc\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"libc\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                 },\n             }\"#]],\n@@ -946,9 +923,6 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -979,13 +953,14 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: CratesIo {\n-                            repo: None,\n-                            name: Some(\n-                                \"hello-world\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"hello-world\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         1,\n@@ -1017,9 +992,6 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1059,13 +1031,14 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: CratesIo {\n-                            repo: None,\n-                            name: Some(\n-                                \"hello-world\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"hello-world\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         2,\n@@ -1097,9 +1070,6 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1139,13 +1109,14 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: CratesIo {\n-                            repo: None,\n-                            name: Some(\n-                                \"hello-world\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"hello-world\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         3,\n@@ -1177,9 +1148,6 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1219,13 +1187,14 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: CratesIo {\n-                            repo: None,\n-                            name: Some(\n-                                \"hello-world\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"hello-world\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         4,\n@@ -1264,9 +1233,6 @@ fn cargo_hello_world_project_model() {\n                                 \"feature=use_std\",\n                             ],\n                         ),\n-                        target_layout: Err(\n-                            \"target_data_layout not loaded\",\n-                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1287,15 +1253,14 @@ fn cargo_hello_world_project_model() {\n                             },\n                         },\n                         dependencies: [],\n-                        origin: CratesIo {\n-                            repo: Some(\n-                                \"https://github.com/rust-lang/libc\",\n-                            ),\n-                            name: Some(\n-                                \"libc\",\n-                            ),\n+                        origin: Rustc {\n+                            name: \"libc\",\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n+                        channel: None,\n                     },\n                 },\n             }\"#]],\n@@ -1332,9 +1297,6 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: Err(\n-                            \"rust-project.json projects have no target layout set\",\n-                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1353,6 +1315,10 @@ fn rust_project_hello_world_project_model() {\n                             Alloc,\n                         ),\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         1,\n@@ -1376,9 +1342,6 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: Err(\n-                            \"rust-project.json projects have no target layout set\",\n-                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1387,6 +1350,10 @@ fn rust_project_hello_world_project_model() {\n                             Core,\n                         ),\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         2,\n@@ -1410,9 +1377,6 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: Err(\n-                            \"rust-project.json projects have no target layout set\",\n-                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1421,6 +1385,10 @@ fn rust_project_hello_world_project_model() {\n                             Other,\n                         ),\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         3,\n@@ -1444,9 +1412,6 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: Err(\n-                            \"rust-project.json projects have no target layout set\",\n-                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1455,6 +1420,10 @@ fn rust_project_hello_world_project_model() {\n                             Other,\n                         ),\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         4,\n@@ -1478,9 +1447,6 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: Err(\n-                            \"rust-project.json projects have no target layout set\",\n-                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1508,6 +1474,10 @@ fn rust_project_hello_world_project_model() {\n                             Other,\n                         ),\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         5,\n@@ -1531,9 +1501,6 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: Err(\n-                            \"rust-project.json projects have no target layout set\",\n-                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1542,6 +1509,10 @@ fn rust_project_hello_world_project_model() {\n                             Other,\n                         ),\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         6,\n@@ -1565,9 +1536,6 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: Err(\n-                            \"rust-project.json projects have no target layout set\",\n-                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1649,6 +1617,10 @@ fn rust_project_hello_world_project_model() {\n                             Std,\n                         ),\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         7,\n@@ -1672,9 +1644,6 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: Err(\n-                            \"rust-project.json projects have no target layout set\",\n-                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1683,6 +1652,10 @@ fn rust_project_hello_world_project_model() {\n                             Other,\n                         ),\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         8,\n@@ -1706,9 +1679,6 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: Err(\n-                            \"rust-project.json projects have no target layout set\",\n-                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1717,6 +1687,10 @@ fn rust_project_hello_world_project_model() {\n                             Test,\n                         ),\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         9,\n@@ -1740,9 +1714,6 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: Err(\n-                            \"rust-project.json projects have no target layout set\",\n-                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1751,6 +1722,10 @@ fn rust_project_hello_world_project_model() {\n                             Other,\n                         ),\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n+                        channel: None,\n                     },\n                     CrateId(\n                         10,\n@@ -1774,9 +1749,6 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: Err(\n-                            \"rust-project.json projects have no target layout set\",\n-                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1818,13 +1790,17 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: false,\n                             },\n                         ],\n-                        origin: CratesIo {\n+                        origin: Local {\n                             repo: None,\n                             name: Some(\n                                 \"hello_world\",\n                             ),\n                         },\n                         is_proc_macro: false,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n+                        channel: None,\n                     },\n                 },\n             }\"#]],"}, {"sha": "aac5f428b57c212755e683dac94bb662f9dbd50b", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 88, "deletions": 33, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=419d59f6e77a88773c90481bbfb8a0cee237ba9a", "patch": "@@ -7,7 +7,7 @@ use std::{collections::VecDeque, fmt, fs, process::Command, sync::Arc};\n use anyhow::{format_err, Context, Result};\n use base_db::{\n     CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency, Edition, Env,\n-    FileId, LangCrateOrigin, ProcMacroPaths, TargetLayoutLoadResult,\n+    FileId, LangCrateOrigin, ProcMacroPaths, ReleaseChannel, TargetLayoutLoadResult,\n };\n use cfg::{CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n@@ -82,7 +82,14 @@ pub enum ProjectWorkspace {\n         target_layout: Result<String, String>,\n     },\n     /// Project workspace was manually specified using a `rust-project.json` file.\n-    Json { project: ProjectJson, sysroot: Result<Sysroot, Option<String>>, rustc_cfg: Vec<CfgFlag> },\n+    Json {\n+        project: ProjectJson,\n+        sysroot: Result<Sysroot, Option<String>>,\n+        /// Holds cfg flags for the current target. We get those by running\n+        /// `rustc --print cfg`.\n+        rustc_cfg: Vec<CfgFlag>,\n+        toolchain: Option<Version>,\n+    },\n     // FIXME: The primary limitation of this approach is that the set of detached files needs to be fixed at the beginning.\n     // That's not the end user experience we should strive for.\n     // Ideally, you should be able to just open a random detached file in existing cargo projects, and get the basic features working.\n@@ -96,6 +103,8 @@ pub enum ProjectWorkspace {\n     DetachedFiles {\n         files: Vec<AbsPathBuf>,\n         sysroot: Result<Sysroot, Option<String>>,\n+        /// Holds cfg flags for the current target. We get those by running\n+        /// `rustc --print cfg`.\n         rustc_cfg: Vec<CfgFlag>,\n     },\n }\n@@ -127,12 +136,13 @@ impl fmt::Debug for ProjectWorkspace {\n                 .field(\"toolchain\", &toolchain)\n                 .field(\"data_layout\", &data_layout)\n                 .finish(),\n-            ProjectWorkspace::Json { project, sysroot, rustc_cfg } => {\n+            ProjectWorkspace::Json { project, sysroot, rustc_cfg, toolchain } => {\n                 let mut debug_struct = f.debug_struct(\"Json\");\n                 debug_struct.field(\"n_crates\", &project.n_crates());\n                 if let Ok(sysroot) = sysroot {\n                     debug_struct.field(\"n_sysroot_crates\", &sysroot.crates().len());\n                 }\n+                debug_struct.field(\"toolchain\", &toolchain);\n                 debug_struct.field(\"n_rustc_cfg\", &rustc_cfg.len());\n                 debug_struct.finish()\n             }\n@@ -152,6 +162,19 @@ impl ProjectWorkspace {\n         config: &CargoConfig,\n         progress: &dyn Fn(String),\n     ) -> Result<ProjectWorkspace> {\n+        let version = |current_dir, cmd_path, prefix: &str| {\n+            let cargo_version = utf8_stdout({\n+                let mut cmd = Command::new(cmd_path);\n+                cmd.envs(&config.extra_env);\n+                cmd.arg(\"--version\").current_dir(current_dir);\n+                cmd\n+            })?;\n+            anyhow::Ok(\n+                cargo_version\n+                    .get(prefix.len()..)\n+                    .and_then(|it| Version::parse(it.split_whitespace().next()?).ok()),\n+            )\n+        };\n         let res = match manifest {\n             ProjectManifest::ProjectJson(project_json) => {\n                 let project_json = project_json.canonicalize()?;\n@@ -162,24 +185,17 @@ impl ProjectWorkspace {\n                     format!(\"Failed to deserialize json file {}\", project_json.display())\n                 })?;\n                 let project_location = project_json.parent().to_path_buf();\n+                let toolchain = version(&*project_location, toolchain::rustc(), \"rustc \")?;\n                 let project_json = ProjectJson::new(&project_location, data);\n                 ProjectWorkspace::load_inline(\n                     project_json,\n                     config.target.as_deref(),\n                     &config.extra_env,\n+                    toolchain,\n                 )\n             }\n             ProjectManifest::CargoToml(cargo_toml) => {\n-                let cargo_version = utf8_stdout({\n-                    let mut cmd = Command::new(toolchain::cargo());\n-                    cmd.envs(&config.extra_env);\n-                    cmd.arg(\"--version\");\n-                    cmd\n-                })?;\n-                let toolchain = cargo_version\n-                    .get(\"cargo \".len()..)\n-                    .and_then(|it| Version::parse(it.split_whitespace().next()?).ok());\n-\n+                let toolchain = version(cargo_toml.parent(), toolchain::cargo(), \"cargo \")?;\n                 let meta = CargoWorkspace::fetch_metadata(\n                     &cargo_toml,\n                     cargo_toml.parent(),\n@@ -304,6 +320,7 @@ impl ProjectWorkspace {\n         project_json: ProjectJson,\n         target: Option<&str>,\n         extra_env: &FxHashMap<String, String>,\n+        toolchain: Option<Version>,\n     ) -> ProjectWorkspace {\n         let sysroot = match (project_json.sysroot.clone(), project_json.sysroot_src.clone()) {\n             (Some(sysroot), Some(sysroot_src)) => Ok(Sysroot::load(sysroot, sysroot_src)),\n@@ -328,7 +345,7 @@ impl ProjectWorkspace {\n         }\n \n         let rustc_cfg = rustc_cfg::get(None, target, extra_env);\n-        ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg }\n+        ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg, toolchain }\n     }\n \n     pub fn load_detached_files(\n@@ -470,7 +487,7 @@ impl ProjectWorkspace {\n             })\n         };\n         match self {\n-            ProjectWorkspace::Json { project, sysroot, rustc_cfg: _ } => project\n+            ProjectWorkspace::Json { project, sysroot, rustc_cfg: _, toolchain: _ } => project\n                 .crates()\n                 .map(|(_, krate)| PackageRoot {\n                     is_local: krate.is_workspace_member,\n@@ -577,22 +594,25 @@ impl ProjectWorkspace {\n         let _p = profile::span(\"ProjectWorkspace::to_crate_graph\");\n \n         let (mut crate_graph, proc_macros) = match self {\n-            ProjectWorkspace::Json { project, sysroot, rustc_cfg } => project_json_to_crate_graph(\n-                rustc_cfg.clone(),\n-                load,\n-                project,\n-                sysroot.as_ref().ok(),\n-                extra_env,\n-                Err(\"rust-project.json projects have no target layout set\".into()),\n-            ),\n+            ProjectWorkspace::Json { project, sysroot, rustc_cfg, toolchain } => {\n+                project_json_to_crate_graph(\n+                    rustc_cfg.clone(),\n+                    load,\n+                    project,\n+                    sysroot.as_ref().ok(),\n+                    extra_env,\n+                    Err(\"rust-project.json projects have no target layout set\".into()),\n+                    toolchain.as_ref().and_then(|it| ReleaseChannel::from_str(it.pre.as_str())),\n+                )\n+            }\n             ProjectWorkspace::Cargo {\n                 cargo,\n                 sysroot,\n                 rustc,\n                 rustc_cfg,\n                 cfg_overrides,\n                 build_scripts,\n-                toolchain: _,\n+                toolchain,\n                 target_layout,\n             } => cargo_to_crate_graph(\n                 load,\n@@ -606,6 +626,7 @@ impl ProjectWorkspace {\n                     Ok(it) => Ok(Arc::from(it.as_str())),\n                     Err(it) => Err(Arc::from(it.as_str())),\n                 },\n+                toolchain.as_ref().and_then(|it| ReleaseChannel::from_str(it.pre.as_str())),\n             ),\n             ProjectWorkspace::DetachedFiles { files, sysroot, rustc_cfg } => {\n                 detached_files_to_crate_graph(\n@@ -657,9 +678,19 @@ impl ProjectWorkspace {\n                     && sysroot == o_sysroot\n             }\n             (\n-                Self::Json { project, sysroot, rustc_cfg },\n-                Self::Json { project: o_project, sysroot: o_sysroot, rustc_cfg: o_rustc_cfg },\n-            ) => project == o_project && rustc_cfg == o_rustc_cfg && sysroot == o_sysroot,\n+                Self::Json { project, sysroot, rustc_cfg, toolchain },\n+                Self::Json {\n+                    project: o_project,\n+                    sysroot: o_sysroot,\n+                    rustc_cfg: o_rustc_cfg,\n+                    toolchain: o_toolchain,\n+                },\n+            ) => {\n+                project == o_project\n+                    && rustc_cfg == o_rustc_cfg\n+                    && sysroot == o_sysroot\n+                    && toolchain == o_toolchain\n+            }\n             (\n                 Self::DetachedFiles { files, sysroot, rustc_cfg },\n                 Self::DetachedFiles { files: o_files, sysroot: o_sysroot, rustc_cfg: o_rustc_cfg },\n@@ -684,6 +715,7 @@ fn project_json_to_crate_graph(\n     sysroot: Option<&Sysroot>,\n     extra_env: &FxHashMap<String, String>,\n     target_layout: TargetLayoutLoadResult,\n+    channel: Option<ReleaseChannel>,\n ) -> (CrateGraph, ProcMacroPaths) {\n     let mut crate_graph = CrateGraph::default();\n     let mut proc_macros: ProcMacroPaths = FxHashMap::default();\n@@ -694,6 +726,7 @@ fn project_json_to_crate_graph(\n             rustc_cfg.clone(),\n             target_layout.clone(),\n             load,\n+            channel,\n         )\n     });\n \n@@ -726,15 +759,16 @@ fn project_json_to_crate_graph(\n                 cfg_options,\n                 env,\n                 krate.is_proc_macro,\n-                if krate.display_name.is_some() {\n-                    CrateOrigin::CratesIo {\n+                if let Some(name) = krate.display_name.clone() {\n+                    CrateOrigin::Local {\n                         repo: krate.repository.clone(),\n-                        name: krate.display_name.clone().map(|n| n.canonical_name().to_string()),\n+                        name: Some(name.canonical_name().to_string()),\n                     }\n                 } else {\n-                    CrateOrigin::CratesIo { repo: None, name: None }\n+                    CrateOrigin::Local { repo: None, name: None }\n                 },\n                 target_layout.clone(),\n+                None,\n             );\n             if krate.is_proc_macro {\n                 if let Some(path) = krate.proc_macro_dylib_path.clone() {\n@@ -784,6 +818,7 @@ fn cargo_to_crate_graph(\n     override_cfg: &CfgOverrides,\n     build_scripts: &WorkspaceBuildScripts,\n     target_layout: TargetLayoutLoadResult,\n+    channel: Option<ReleaseChannel>,\n ) -> (CrateGraph, ProcMacroPaths) {\n     let _p = profile::span(\"cargo_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n@@ -795,6 +830,7 @@ fn cargo_to_crate_graph(\n             rustc_cfg.clone(),\n             target_layout.clone(),\n             load,\n+            channel,\n         ),\n         None => (SysrootPublicDeps::default(), None),\n     };\n@@ -859,6 +895,8 @@ fn cargo_to_crate_graph(\n                     &cargo[tgt].name,\n                     cargo[tgt].is_proc_macro,\n                     target_layout.clone(),\n+                    true,\n+                    channel,\n                 );\n                 if cargo[tgt].kind == TargetKind::Lib {\n                     lib_tgt = Some((crate_id, cargo[tgt].name.clone()));\n@@ -945,6 +983,7 @@ fn cargo_to_crate_graph(\n                     rustc_build_scripts\n                 },\n                 target_layout,\n+                channel,\n             );\n         }\n     }\n@@ -967,6 +1006,7 @@ fn detached_files_to_crate_graph(\n             rustc_cfg.clone(),\n             target_layout.clone(),\n             load,\n+            None,\n         ),\n         None => (SysrootPublicDeps::default(), None),\n     };\n@@ -995,11 +1035,12 @@ fn detached_files_to_crate_graph(\n             cfg_options.clone(),\n             Env::default(),\n             false,\n-            CrateOrigin::CratesIo {\n+            CrateOrigin::Local {\n                 repo: None,\n                 name: display_name.map(|n| n.canonical_name().to_string()),\n             },\n             target_layout.clone(),\n+            None,\n         );\n \n         public_deps.add_to_crate_graph(&mut crate_graph, detached_file_crate);\n@@ -1021,6 +1062,7 @@ fn handle_rustc_crates(\n     override_cfg: &CfgOverrides,\n     build_scripts: &WorkspaceBuildScripts,\n     target_layout: TargetLayoutLoadResult,\n+    channel: Option<ReleaseChannel>,\n ) {\n     let mut rustc_pkg_crates = FxHashMap::default();\n     // The root package of the rustc-dev component is rustc_driver, so we match that\n@@ -1078,6 +1120,8 @@ fn handle_rustc_crates(\n                         &rustc_workspace[tgt].name,\n                         rustc_workspace[tgt].is_proc_macro,\n                         target_layout.clone(),\n+                        true,\n+                        channel,\n                     );\n                     pkg_to_lib_crate.insert(pkg, crate_id);\n                     // Add dependencies on core / std / alloc for this crate\n@@ -1143,6 +1187,8 @@ fn add_target_crate_root(\n     cargo_name: &str,\n     is_proc_macro: bool,\n     target_layout: TargetLayoutLoadResult,\n+    rustc_crate: bool,\n+    channel: Option<ReleaseChannel>,\n ) -> CrateId {\n     let edition = pkg.edition;\n     let mut potential_cfg_options = cfg_options.clone();\n@@ -1181,8 +1227,15 @@ fn add_target_crate_root(\n         potential_cfg_options,\n         env,\n         is_proc_macro,\n-        CrateOrigin::CratesIo { repo: pkg.repository.clone(), name: Some(pkg.name.clone()) },\n+        if rustc_crate {\n+            CrateOrigin::Rustc { name: pkg.name.clone() }\n+        } else if pkg.is_member {\n+            CrateOrigin::Local { repo: pkg.repository.clone(), name: Some(pkg.name.clone()) }\n+        } else {\n+            CrateOrigin::Library { repo: pkg.repository.clone(), name: pkg.name.clone() }\n+        },\n         target_layout,\n+        channel,\n     );\n     if is_proc_macro {\n         let proc_macro = match build_data.as_ref().map(|it| it.proc_macro_dylib_path.as_ref()) {\n@@ -1217,6 +1270,7 @@ fn sysroot_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n     target_layout: TargetLayoutLoadResult,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n+    channel: Option<ReleaseChannel>,\n ) -> (SysrootPublicDeps, Option<CrateId>) {\n     let _p = profile::span(\"sysroot_to_crate_graph\");\n     let mut cfg_options = CfgOptions::default();\n@@ -1239,6 +1293,7 @@ fn sysroot_to_crate_graph(\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::from(&*sysroot[krate].name)),\n                 target_layout.clone(),\n+                channel,\n             );\n             Some((krate, crate_id))\n         })"}, {"sha": "899c31d2063175e4002c7162c0e818a1e1f94295", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=419d59f6e77a88773c90481bbfb8a0cee237ba9a", "patch": "@@ -192,6 +192,7 @@ impl GlobalState {\n                                 it.clone(),\n                                 cargo_config.target.as_deref(),\n                                 &cargo_config.extra_env,\n+                                None,\n                             ))\n                         }\n                     })\n@@ -427,19 +428,19 @@ impl GlobalState {\n         let (crate_graph, proc_macro_paths) = {\n             let vfs = &mut self.vfs.write().0;\n             let loader = &mut self.loader;\n-            let mem_docs = &self.mem_docs;\n-            let mut load = move |path: &AbsPath| {\n+            let mut load = |path: &AbsPath| {\n                 let _p = profile::span(\"switch_workspaces::load\");\n                 let vfs_path = vfs::VfsPath::from(path.to_path_buf());\n-                if !mem_docs.contains(&vfs_path) {\n-                    let contents = loader.handle.load_sync(path);\n-                    vfs.set_file_contents(vfs_path.clone(), contents);\n-                }\n-                let res = vfs.file_id(&vfs_path);\n-                if res.is_none() {\n-                    tracing::warn!(\"failed to load {}\", path.display())\n+                match vfs.file_id(&vfs_path) {\n+                    Some(file_id) => Some(file_id),\n+                    None => {\n+                        if !self.mem_docs.contains(&vfs_path) {\n+                            let contents = loader.handle.load_sync(path);\n+                            vfs.set_file_contents(vfs_path.clone(), contents);\n+                        }\n+                        vfs.file_id(&vfs_path)\n+                    }\n                 }\n-                res\n             };\n \n             let mut crate_graph = CrateGraph::default();"}, {"sha": "8ffa3a808f1af2c2b15f88f925291c741723bd0b", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419d59f6e77a88773c90481bbfb8a0cee237ba9a/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=419d59f6e77a88773c90481bbfb8a0cee237ba9a", "patch": "@@ -160,7 +160,7 @@ impl Vfs {\n     /// [`FileId`] for it.\n     pub fn set_file_contents(&mut self, path: VfsPath, contents: Option<Vec<u8>>) -> bool {\n         let file_id = self.alloc_file_id(path);\n-        let change_kind = match (&self.get(file_id), &contents) {\n+        let change_kind = match (self.get(file_id), &contents) {\n             (None, None) => return false,\n             (Some(old), Some(new)) if old == new => return false,\n             (None, Some(_)) => ChangeKind::Create,"}]}