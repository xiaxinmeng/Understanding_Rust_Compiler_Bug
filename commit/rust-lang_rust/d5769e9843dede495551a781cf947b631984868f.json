{"sha": "d5769e9843dede495551a781cf947b631984868f", "node_id": "C_kwDOAAsO6NoAKGQ1NzY5ZTk4NDNkZWRlNDk1NTUxYTc4MWNmOTQ3YjYzMTk4NDg2OGY", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-19T06:17:31Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-19T06:29:17Z"}, "message": "switch to limiting the number of init/uninit chunks", "tree": {"sha": "1e4350cf2cb0007243b391861c7a5efa33a509f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e4350cf2cb0007243b391861c7a5efa33a509f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5769e9843dede495551a781cf947b631984868f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5769e9843dede495551a781cf947b631984868f", "html_url": "https://github.com/rust-lang/rust/commit/d5769e9843dede495551a781cf947b631984868f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5769e9843dede495551a781cf947b631984868f/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e5597491a7880934f927edb506605d3368794e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e5597491a7880934f927edb506605d3368794e", "html_url": "https://github.com/rust-lang/rust/commit/b7e5597491a7880934f927edb506605d3368794e"}], "stats": {"total": 42, "additions": 16, "deletions": 26}, "files": [{"sha": "14de6c5986a33f13ed1b8a467c16f3f0b1471b5a", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d5769e9843dede495551a781cf947b631984868f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5769e9843dede495551a781cf947b631984868f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=d5769e9843dede495551a781cf947b631984868f", "patch": "@@ -37,7 +37,7 @@ pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) ->\n         alloc: &'a Allocation,\n         range: Range<usize>,\n     ) {\n-        let mut chunks = alloc\n+        let chunks = alloc\n             .init_mask()\n             .range_as_init_chunks(Size::from_bytes(range.start), Size::from_bytes(range.end));\n \n@@ -53,32 +53,20 @@ pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) ->\n             }\n         };\n \n-        // Generating partially-uninit consts is limited to small allocations,\n+        // Generating partially-uninit consts is limited to small numbers of chunks,\n         // to avoid the cost of generating large complex const expressions.\n         // For example, `[(u32, u8); 1024 * 1024]` contains uninit padding in each element,\n         // and would result in `{ [5 x i8] zeroinitializer, [3 x i8] undef, ...repeat 1M times... }`.\n-        let allow_partially_uninit =\n-            match cx.sess().opts.debugging_opts.partially_uninit_const_threshold {\n-                Some(max) => range.len() <= max,\n-                None => false,\n-            };\n+        let max = cx.sess().opts.debugging_opts.uninit_const_chunk_threshold;\n+        let allow_uninit_chunks = chunks.clone().take(max.saturating_add(1)).count() <= max;\n \n-        if allow_partially_uninit {\n+        if allow_uninit_chunks {\n             llvals.extend(chunks.map(chunk_to_llval));\n         } else {\n-            let llval = match (chunks.next(), chunks.next()) {\n-                (Some(chunk), None) => {\n-                    // exactly one chunk, either fully init or fully uninit\n-                    chunk_to_llval(chunk)\n-                }\n-                _ => {\n-                    // partially uninit, codegen as if it was initialized\n-                    // (using some arbitrary value for uninit bytes)\n-                    let bytes = alloc.inspect_with_uninit_and_ptr_outside_interpreter(range);\n-                    cx.const_bytes(bytes)\n-                }\n-            };\n-            llvals.push(llval);\n+            // If this allocation contains any uninit bytes, codegen as if it was initialized\n+            // (using some arbitrary value for uninit bytes).\n+            let bytes = alloc.inspect_with_uninit_and_ptr_outside_interpreter(range);\n+            llvals.push(cx.const_bytes(bytes));\n         }\n     }\n "}, {"sha": "def5c30411b84152c6fe87625ab7a1f5da4db96c", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5769e9843dede495551a781cf947b631984868f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5769e9843dede495551a781cf947b631984868f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=d5769e9843dede495551a781cf947b631984868f", "patch": "@@ -758,7 +758,6 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(osx_rpath_install_name, true);\n     tracked!(panic_abort_tests, true);\n     tracked!(panic_in_drop, PanicStrategy::Abort);\n-    tracked!(partially_uninit_const_threshold, Some(123));\n     tracked!(pick_stable_methods_before_any_unstable, false);\n     tracked!(plt, Some(true));\n     tracked!(polonius, true);\n@@ -789,6 +788,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(trap_unreachable, Some(false));\n     tracked!(treat_err_as_bug, NonZeroUsize::new(1));\n     tracked!(tune_cpu, Some(String::from(\"abc\")));\n+    tracked!(uninit_const_chunk_threshold, 123);\n     tracked!(unleash_the_miri_inside_of_you, true);\n     tracked!(use_ctors_section, Some(true));\n     tracked!(verify_llvm_ir, true);"}, {"sha": "5de119f956282b51448f6bda0135825b1517c9b1", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5769e9843dede495551a781cf947b631984868f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5769e9843dede495551a781cf947b631984868f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=d5769e9843dede495551a781cf947b631984868f", "patch": "@@ -957,6 +957,7 @@ impl InitMask {\n }\n \n /// Yields [`InitChunk`]s. See [`InitMask::range_as_init_chunks`].\n+#[derive(Clone)]\n pub struct InitChunkIter<'a> {\n     init_mask: &'a InitMask,\n     /// Whether the next chunk we will return is initialized."}, {"sha": "26bb268a039bf3c05236aad1f5f1ba63a71f730b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5769e9843dede495551a781cf947b631984868f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5769e9843dede495551a781cf947b631984868f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=d5769e9843dede495551a781cf947b631984868f", "patch": "@@ -1341,9 +1341,6 @@ options! {\n         \"panic strategy for panics in drops\"),\n     parse_only: bool = (false, parse_bool, [UNTRACKED],\n         \"parse only; do not compile, assemble, or link (default: no)\"),\n-    partially_uninit_const_threshold: Option<usize> = (Some(1024), parse_opt_number, [TRACKED],\n-        \"allow generating const initializers with mixed init/uninit bytes, \\\n-        and set the maximum total size of a const allocation for which this is allowed (default: 1024 bytes)\"),\n     perf_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"print some performance-related statistics (default: no)\"),\n     pick_stable_methods_before_any_unstable: bool = (true, parse_bool, [TRACKED],\n@@ -1488,6 +1485,9 @@ options! {\n         \"in diagnostics, use heuristics to shorten paths referring to items\"),\n     ui_testing: bool = (false, parse_bool, [UNTRACKED],\n         \"emit compiler diagnostics in a form suitable for UI testing (default: no)\"),\n+    uninit_const_chunk_threshold: usize = (256, parse_number, [TRACKED],\n+        \"allow generating const initializers with mixed init/uninit chunks, \\\n+        and set the maximum number of chunks for which this is allowed (default: 256)\"),\n     unleash_the_miri_inside_of_you: bool = (false, parse_bool, [TRACKED],\n         \"take the brakes off const evaluation. NOTE: this is unsound (default: no)\"),\n     unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],"}, {"sha": "d8c8fce105fe4c5cae53bbee1a41806bead9de93", "filename": "src/test/codegen/uninit-consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5769e9843dede495551a781cf947b631984868f/src%2Ftest%2Fcodegen%2Funinit-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5769e9843dede495551a781cf947b631984868f/src%2Ftest%2Fcodegen%2Funinit-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funinit-consts.rs?ref=d5769e9843dede495551a781cf947b631984868f", "patch": "@@ -15,7 +15,8 @@ pub struct PartiallyUninit {\n \n // CHECK: [[PARTIALLY_UNINIT:@[0-9]+]] = private unnamed_addr constant <{ [4 x i8], [12 x i8] }> <{ [4 x i8] c\"\\EF\\BE\\AD\\DE\", [12 x i8] undef }>, align 4\n \n-// This shouldn't contain undef, since it's larger than the 1024 byte limit.\n+// This shouldn't contain undef, since it contains more than 256 chunks\n+// (the default value of uninit_const_chunk_threshold).\n // CHECK: [[UNINIT_PADDING_HUGE:@[0-9]+]] = private unnamed_addr constant <{ [32768 x i8] }> <{ [32768 x i8] c\"{{.+}}\" }>, align 4\n \n // CHECK: [[FULLY_UNINIT_HUGE:@[0-9]+]] = private unnamed_addr constant <{ [16384 x i8] }> undef"}]}