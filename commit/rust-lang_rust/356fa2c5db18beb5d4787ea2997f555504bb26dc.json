{"sha": "356fa2c5db18beb5d4787ea2997f555504bb26dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NmZhMmM1ZGIxOGJlYjVkNDc4N2VhMjk5N2Y1NTU1MDRiYjI2ZGM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-14T08:58:50Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-22T01:31:00Z"}, "message": "Warn on unused `#[macro_use]` imports.", "tree": {"sha": "d8b35821e186802f71ced76b55927c4eaf8a0526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8b35821e186802f71ced76b55927c4eaf8a0526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/356fa2c5db18beb5d4787ea2997f555504bb26dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/356fa2c5db18beb5d4787ea2997f555504bb26dc", "html_url": "https://github.com/rust-lang/rust/commit/356fa2c5db18beb5d4787ea2997f555504bb26dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/356fa2c5db18beb5d4787ea2997f555504bb26dc/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2efec3c18050b4093ed8be9537145bdc2a50f7e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2efec3c18050b4093ed8be9537145bdc2a50f7e7", "html_url": "https://github.com/rust-lang/rust/commit/2efec3c18050b4093ed8be9537145bdc2a50f7e7"}], "stats": {"total": 91, "additions": 67, "deletions": 24}, "files": [{"sha": "b99b8f29299c28d8be5c3bea4ac4a9998cdcc59f", "filename": "src/libproc_macro_tokens/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibproc_macro_tokens%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibproc_macro_tokens%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_tokens%2Flib.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -59,7 +59,7 @@\n \n extern crate syntax;\n extern crate syntax_pos;\n-#[macro_use] extern crate log;\n+extern crate log;\n \n pub mod build;\n pub mod parse;"}, {"sha": "bf0829cbdd041f10fd0e01684bc0d9741afe86e7", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -57,7 +57,7 @@ extern crate rustc_const_math;\n extern crate rustc_errors as errors;\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n-#[macro_use] extern crate syntax_pos;\n+extern crate syntax_pos;\n #[macro_use] #[no_link] extern crate rustc_bitflags;\n \n extern crate serialize as rustc_serialize; // used by deriving"}, {"sha": "beecf4cd8eb3b5123ee9b9d835dcc2f1bdde4446", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -28,8 +28,8 @@\n #![feature(const_fn)]\n #![cfg_attr(not(stage0), feature(i128))]\n \n-#[macro_use] extern crate log;\n-#[macro_use] extern crate syntax;\n+extern crate log;\n+extern crate syntax;\n \n // SNAP: remove use of this crate\n extern crate rustc_i128;"}, {"sha": "e82ba32c34ac87e337ccc7e36661ac1aab0d8038", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -57,7 +57,6 @@ extern crate serialize;\n extern crate rustc_llvm as llvm;\n #[macro_use]\n extern crate log;\n-#[macro_use]\n extern crate syntax;\n extern crate syntax_ext;\n extern crate syntax_pos;"}, {"sha": "7946f6a0a46dcb32c5a351e2b051182b63bc2b85", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -27,9 +27,7 @@\n \n extern crate serialize;\n extern crate term;\n-#[macro_use]\n extern crate log;\n-#[macro_use]\n extern crate libc;\n extern crate std_unicode;\n extern crate serialize as rustc_serialize; // used by deriving"}, {"sha": "2d25baf6960fb626c657645c385c8f5093e6d4b6", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -30,7 +30,7 @@ extern crate rustc_data_structures;\n extern crate serialize as rustc_serialize;\n \n #[macro_use] extern crate log;\n-#[macro_use] extern crate syntax;\n+extern crate syntax;\n extern crate syntax_pos;\n \n extern crate rustc_i128;"}, {"sha": "34bc57884ecbbb5b9a19a457fc195cd3bf821eca", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -37,7 +37,6 @@\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n \n-#[macro_use]\n extern crate syntax;\n #[macro_use]\n extern crate rustc;"}, {"sha": "42d1d3c2ba57421ab52bfe39d3d7766d249c4509", "filename": "src/librustc_plugin/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_plugin%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_plugin%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2FCargo.toml?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -13,7 +13,6 @@ crate-type = [\"dylib\"]\n log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n-rustc_bitflags = { path = \"../librustc_bitflags\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "8f389499dd64a4682c9aedb07db971d3b7cdd223", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -63,9 +63,8 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n \n-#[macro_use] extern crate log;\n+extern crate log;\n #[macro_use] extern crate syntax;\n-#[macro_use] #[no_link] extern crate rustc_bitflags;\n \n extern crate rustc;\n extern crate rustc_back;"}, {"sha": "f74af416cde09c5a62a40e3f8f1a995fa2fd4bb1", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -552,16 +552,35 @@ impl<'a> Resolver<'a> {\n             used = true; // Avoid the normal unused extern crate warning\n         }\n \n+        let (graph_root, arenas) = (self.graph_root, self.arenas);\n+        let macro_use_directive = |span| arenas.alloc_import_directive(ImportDirective {\n+            id: item.id,\n+            parent: graph_root,\n+            imported_module: Cell::new(Some(module)),\n+            subclass: ImportDirectiveSubclass::MacroUse,\n+            span: span,\n+            module_path: Vec::new(),\n+            vis: Cell::new(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))),\n+            expansion: expansion,\n+            used: Cell::new(false),\n+        });\n+\n         if let Some(span) = legacy_imports.import_all {\n+            let directive = macro_use_directive(span);\n+            self.potentially_unused_imports.push(directive);\n             module.for_each_child(|ident, ns, binding| if ns == MacroNS {\n-                self.legacy_import_macro(ident.name, binding, span, allow_shadowing);\n+                let imported_binding = self.import(binding, directive);\n+                self.legacy_import_macro(ident.name, imported_binding, span, allow_shadowing);\n             });\n         } else {\n             for (name, span) in legacy_imports.imports {\n                 let ident = Ident::with_empty_ctxt(name);\n                 let result = self.resolve_ident_in_module(module, ident, MacroNS, false, None);\n                 if let Ok(binding) = result {\n-                    self.legacy_import_macro(name, binding, span, allow_shadowing);\n+                    let directive = macro_use_directive(span);\n+                    self.potentially_unused_imports.push(directive);\n+                    let imported_binding = self.import(binding, directive);\n+                    self.legacy_import_macro(name, imported_binding, span, allow_shadowing);\n                 } else {\n                     span_err!(self.session, span, E0469, \"imported macro not found\");\n                 }"}, {"sha": "d150ff1ff81f55e6eb8cb7d5624bb0679556c568", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -125,6 +125,11 @@ pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n                 let msg = \"unused extern crate\".to_string();\n                 resolver.session.add_lint(lint, directive.id, directive.span, msg);\n             }\n+            ImportDirectiveSubclass::MacroUse => {\n+                let lint = lint::builtin::UNUSED_IMPORTS;\n+                let msg = \"unused `#[macro_use]` import\".to_string();\n+                resolver.session.add_lint(lint, directive.id, directive.span, msg);\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "682b3ff834fad1eca4ddb76284ed08d12881cf97", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -341,12 +341,15 @@ impl<'a> Resolver<'a> {\n             };\n         }\n \n-        let binding = match binding {\n-            Some(binding) => MacroBinding::Legacy(binding),\n-            None => match self.builtin_macros.get(&name).cloned() {\n-                Some(binding) => MacroBinding::Modern(binding),\n-                None => return None,\n-            },\n+        let binding = if let Some(binding) = binding {\n+            MacroBinding::Legacy(binding)\n+        } else if let Some(binding) = self.builtin_macros.get(&name).cloned() {\n+            if !self.use_extern_macros {\n+                self.record_use(Ident::with_empty_ctxt(name), MacroNS, binding, DUMMY_SP);\n+            }\n+            MacroBinding::Modern(binding)\n+        } else {\n+            return None;\n         };\n \n         if !self.use_extern_macros {\n@@ -378,6 +381,7 @@ impl<'a> Resolver<'a> {\n             let (legacy_resolution, resolution) = match (legacy_resolution, resolution) {\n                 (Some(legacy_resolution), Ok(resolution)) => (legacy_resolution, resolution),\n                 (Some(MacroBinding::Modern(binding)), Err(_)) => {\n+                    self.record_use(ident, MacroNS, binding, span);\n                     self.err_if_macro_use_proc_macro(ident.name, span, binding);\n                     continue\n                 },"}, {"sha": "65cdeb9253d89ed4c1d2ab79d2d6cd75756be10e", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -49,6 +49,7 @@ pub enum ImportDirectiveSubclass<'a> {\n         // n.b. `max_vis` is only used in `finalize_import` to check for reexport errors.\n     },\n     ExternCrate,\n+    MacroUse,\n }\n \n /// One import directive.\n@@ -835,5 +836,6 @@ fn import_directive_subclass_to_string(subclass: &ImportDirectiveSubclass) -> St\n         SingleImport { source, .. } => source.to_string(),\n         GlobImport { .. } => \"*\".to_string(),\n         ExternCrate => \"<extern crate>\".to_string(),\n+        MacroUse => \"#[macro_use]\".to_string(),\n     }\n }"}, {"sha": "3d9ce864ec121deeaa2988ba2cacf50103cb0497", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -39,7 +39,7 @@ Core encoding and decoding interfaces.\n \n // test harness access\n #[cfg(test)] extern crate test;\n-#[macro_use] extern crate log;\n+extern crate log;\n \n extern crate std_unicode;\n extern crate collections;"}, {"sha": "365521970cd2126f366d3f4e392936bdd622b689", "filename": "src/test/compile-fail/imports/unused-macro-use.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Ftest%2Fcompile-fail%2Fimports%2Funused-macro-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Ftest%2Fcompile-fail%2Fimports%2Funused-macro-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Funused-macro-use.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(unused)]\n+\n+#[macro_use] //~ ERROR unused `#[macro_use]` import\n+extern crate core;\n+\n+#[macro_use(\n+    panic //~ ERROR unused `#[macro_use]` import\n+)]\n+extern crate core as core_2;\n+\n+fn main() {}"}, {"sha": "40671353f8ac6f9d98a4091c2119252f5b87153e", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -26,8 +26,6 @@ extern crate rand; // no error, the use marks it as used\n \n extern crate lint_unused_extern_crate as other; // no error, the use * marks it as used\n \n-#[macro_use] extern crate core; // no error, the `#[macro_use]` marks it as used\n-\n #[allow(unused_imports)]\n use rand::isaac::IsaacRng;\n "}, {"sha": "83fd766c547398a91214a5db57fe62d7b362ab10", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356fa2c5db18beb5d4787ea2997f555504bb26dc/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=356fa2c5db18beb5d4787ea2997f555504bb26dc", "patch": "@@ -25,7 +25,7 @@ const TEST_REPOS: &'static [Test] = &[\n     Test {\n         name: \"cargo\",\n         repo: \"https://github.com/rust-lang/cargo\",\n-        sha: \"b7be4f2ef2cf743492edc6dfb55d087ed88f2d76\",\n+        sha: \"2324c2bbaf7fc6ea9cbdd77c034ef1af769cb617\",\n         lock: None,\n     },\n     Test {"}]}