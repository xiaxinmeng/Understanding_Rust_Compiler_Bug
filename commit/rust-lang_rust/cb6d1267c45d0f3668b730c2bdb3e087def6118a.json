{"sha": "cb6d1267c45d0f3668b730c2bdb3e087def6118a", "node_id": "C_kwDOAAsO6NoAKGNiNmQxMjY3YzQ1ZDBmMzY2OGI3MzBjMmJkYjNlMDg3ZGVmNjExOGE", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-09-23T17:55:30Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-09-23T17:55:30Z"}, "message": "a few more core lint fixes", "tree": {"sha": "cb897d2a48050f3c2d1b2f278ecce762804d1ae0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb897d2a48050f3c2d1b2f278ecce762804d1ae0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb6d1267c45d0f3668b730c2bdb3e087def6118a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6d1267c45d0f3668b730c2bdb3e087def6118a", "html_url": "https://github.com/rust-lang/rust/commit/cb6d1267c45d0f3668b730c2bdb3e087def6118a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb6d1267c45d0f3668b730c2bdb3e087def6118a/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "url": "https://api.github.com/repos/rust-lang/rust/commits/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "html_url": "https://github.com/rust-lang/rust/commit/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "b12208ac62a8840344d3edbf8b84c9d9db7a6981", "filename": "src/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6d1267c45d0f3668b730c2bdb3e087def6118a/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6d1267c45d0f3668b730c2bdb3e087def6118a/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=cb6d1267c45d0f3668b730c2bdb3e087def6118a", "patch": "@@ -193,8 +193,8 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n \n     let xs: Vec<Cow<'static, str>> = vec![\n         \"the compiler unexpectedly panicked. this is a bug.\".into(),\n-        format!(\"we would appreciate a bug report: {}\", bug_report_url).into(),\n-        format!(\"Clippy version: {}\", version_info).into(),\n+        format!(\"we would appreciate a bug report: {bug_report_url}\").into(),\n+        format!(\"Clippy version: {version_info}\").into(),\n     ];\n \n     for note in &xs {\n@@ -290,7 +290,7 @@ pub fn main() {\n \n         if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n             let version_info = rustc_tools_util::get_version_info!();\n-            println!(\"{}\", version_info);\n+            println!(\"{version_info}\");\n             exit(0);\n         }\n "}, {"sha": "fce3cdfc462e07e613fba96ba2049c2955ad2dfb", "filename": "src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6d1267c45d0f3668b730c2bdb3e087def6118a/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6d1267c45d0f3668b730c2bdb3e087def6118a/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=cb6d1267c45d0f3668b730c2bdb3e087def6118a", "patch": "@@ -37,12 +37,12 @@ You can use tool lints to allow or deny lints from your code, eg.:\n \"#;\n \n fn show_help() {\n-    println!(\"{}\", CARGO_CLIPPY_HELP);\n+    println!(\"{CARGO_CLIPPY_HELP}\");\n }\n \n fn show_version() {\n     let version_info = rustc_tools_util::get_version_info!();\n-    println!(\"{}\", version_info);\n+    println!(\"{version_info}\");\n }\n \n pub fn main() {\n@@ -133,7 +133,7 @@ impl ClippyCmd {\n         let clippy_args: String = self\n             .clippy_args\n             .iter()\n-            .map(|arg| format!(\"{}__CLIPPY_HACKERY__\", arg))\n+            .map(|arg| format!(\"{arg}__CLIPPY_HACKERY__\"))\n             .collect();\n \n         // Currently, `CLIPPY_TERMINAL_WIDTH` is used only to format \"unknown field\" error messages."}, {"sha": "fa769222d1af379ed5b737ebd25dbdd37cb87267", "filename": "tests/compile-test.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb6d1267c45d0f3668b730c2bdb3e087def6118a/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6d1267c45d0f3668b730c2bdb3e087def6118a/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=cb6d1267c45d0f3668b730c2bdb3e087def6118a", "patch": "@@ -111,15 +111,14 @@ static EXTERN_FLAGS: LazyLock<String> = LazyLock::new(|| {\n         .collect();\n     assert!(\n         not_found.is_empty(),\n-        \"dependencies not found in depinfo: {:?}\\n\\\n+        \"dependencies not found in depinfo: {not_found:?}\\n\\\n         help: Make sure the `-Z binary-dep-depinfo` rust flag is enabled\\n\\\n         help: Try adding to dev-dependencies in Cargo.toml\\n\\\n         help: Be sure to also add `extern crate ...;` to tests/compile-test.rs\",\n-        not_found,\n     );\n     crates\n         .into_iter()\n-        .map(|(name, path)| format!(\" --extern {}={}\", name, path))\n+        .map(|(name, path)| format!(\" --extern {name}={path}\"))\n         .collect()\n });\n \n@@ -150,9 +149,8 @@ fn base_config(test_dir: &str) -> compiletest::Config {\n         .map(|p| format!(\" -L dependency={}\", Path::new(p).join(\"deps\").display()))\n         .unwrap_or_default();\n     config.target_rustcflags = Some(format!(\n-        \"--emit=metadata -Dwarnings -Zui-testing -L dependency={}{}{}\",\n+        \"--emit=metadata -Dwarnings -Zui-testing -L dependency={}{host_libs}{}\",\n         deps_path.display(),\n-        host_libs,\n         &*EXTERN_FLAGS,\n     ));\n \n@@ -239,7 +237,7 @@ fn run_ui_toml() {\n         Ok(true) => {},\n         Ok(false) => panic!(\"Some tests failed\"),\n         Err(e) => {\n-            panic!(\"I/O failure during tests: {:?}\", e);\n+            panic!(\"I/O failure during tests: {e:?}\");\n         },\n     }\n }\n@@ -348,7 +346,7 @@ fn run_ui_cargo() {\n         Ok(true) => {},\n         Ok(false) => panic!(\"Some tests failed\"),\n         Err(e) => {\n-            panic!(\"I/O failure during tests: {:?}\", e);\n+            panic!(\"I/O failure during tests: {e:?}\");\n         },\n     }\n }\n@@ -419,16 +417,15 @@ fn check_rustfix_coverage() {\n             if rs_path.starts_with(\"tests/ui/crashes\") {\n                 continue;\n             }\n-            assert!(rs_path.starts_with(\"tests/ui/\"), \"{:?}\", rs_file);\n+            assert!(rs_path.starts_with(\"tests/ui/\"), \"{rs_file:?}\");\n             let filename = rs_path.strip_prefix(\"tests/ui/\").unwrap();\n             assert!(\n                 RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS\n                     .binary_search_by_key(&filename, Path::new)\n                     .is_ok(),\n-                \"`{}` runs `MachineApplicable` diagnostics but is missing a `run-rustfix` annotation. \\\n+                \"`{rs_file}` runs `MachineApplicable` diagnostics but is missing a `run-rustfix` annotation. \\\n                 Please either add `// run-rustfix` at the top of the file or add the file to \\\n                 `RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS` in `tests/compile-test.rs`.\",\n-                rs_file,\n             );\n         }\n     }\n@@ -478,15 +475,13 @@ fn ui_cargo_toml_metadata() {\n                 .map(|component| component.as_os_str().to_string_lossy().replace('-', \"_\"))\n                 .any(|s| *s == name)\n                 || path.starts_with(&cargo_common_metadata_path),\n-            \"{:?} has incorrect package name\",\n-            path\n+            \"{path:?} has incorrect package name\"\n         );\n \n         let publish = package.get(\"publish\").and_then(toml::Value::as_bool).unwrap_or(true);\n         assert!(\n             !publish || publish_exceptions.contains(&path.parent().unwrap().to_path_buf()),\n-            \"{:?} lacks `publish = false`\",\n-            path\n+            \"{path:?} lacks `publish = false`\"\n         );\n     }\n }"}, {"sha": "abd0d1bc5934f027698ce072d663157866e633dd", "filename": "tests/lint_message_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6d1267c45d0f3668b730c2bdb3e087def6118a/tests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6d1267c45d0f3668b730c2bdb3e087def6118a/tests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flint_message_convention.rs?ref=cb6d1267c45d0f3668b730c2bdb3e087def6118a", "patch": "@@ -102,7 +102,7 @@ fn lint_message_convention() {\n             \"error: the test '{}' contained the following nonconforming lines :\",\n             message.path.display()\n         );\n-        message.bad_lines.iter().for_each(|line| eprintln!(\"{}\", line));\n+        message.bad_lines.iter().for_each(|line| eprintln!(\"{line}\"));\n         eprintln!(\"\\n\\n\");\n     }\n "}, {"sha": "caedd5d76cd6fb43ceb3ebf47859e6405f709663", "filename": "tests/missing-test-files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6d1267c45d0f3668b730c2bdb3e087def6118a/tests%2Fmissing-test-files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6d1267c45d0f3668b730c2bdb3e087def6118a/tests%2Fmissing-test-files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmissing-test-files.rs?ref=cb6d1267c45d0f3668b730c2bdb3e087def6118a", "patch": "@@ -17,7 +17,7 @@ fn test_missing_tests() {\n             \"Didn't see a test file for the following files:\\n\\n{}\\n\",\n             missing_files\n                 .iter()\n-                .map(|s| format!(\"\\t{}\", s))\n+                .map(|s| format!(\"\\t{s}\"))\n                 .collect::<Vec<_>>()\n                 .join(\"\\n\")\n         );"}, {"sha": "9e07769a8e4fd8883d4bb98021397dfd76cfea4b", "filename": "tests/versioncheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb6d1267c45d0f3668b730c2bdb3e087def6118a/tests%2Fversioncheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6d1267c45d0f3668b730c2bdb3e087def6118a/tests%2Fversioncheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fversioncheck.rs?ref=cb6d1267c45d0f3668b730c2bdb3e087def6118a", "patch": "@@ -8,12 +8,12 @@ use std::fs;\n #[test]\n fn check_that_clippy_lints_and_clippy_utils_have_the_same_version_as_clippy() {\n     fn read_version(path: &str) -> String {\n-        let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"error reading `{}`: {:?}\", path, e));\n+        let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"error reading `{path}`: {e:?}\"));\n         contents\n             .lines()\n             .filter_map(|l| l.split_once('='))\n             .find_map(|(k, v)| (k.trim() == \"version\").then(|| v.trim()))\n-            .unwrap_or_else(|| panic!(\"error finding version in `{}`\", path))\n+            .unwrap_or_else(|| panic!(\"error finding version in `{path}`\"))\n             .to_string()\n     }\n \n@@ -83,7 +83,7 @@ fn check_that_clippy_has_the_same_major_version_as_rustc() {\n             // we don't want our tests failing suddenly\n         },\n         _ => {\n-            panic!(\"Failed to parse rustc version: {:?}\", vsplit);\n+            panic!(\"Failed to parse rustc version: {vsplit:?}\");\n         },\n     };\n }"}]}