{"sha": "96407424de1888ed977e8ea5dc8a5ee597f547f3", "node_id": "C_kwDOAAsO6NoAKDk2NDA3NDI0ZGUxODg4ZWQ5NzdlOGVhNWRjOGE1ZWU1OTdmNTQ3ZjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-14T11:48:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-14T11:48:33Z"}, "message": "Auto merge of #14574 - Veykril:blocks, r=Veykril\n\ninternal: Make block_def_map infallible", "tree": {"sha": "c2724292ec40ac8c71ca602f86c54e67c33ef4ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2724292ec40ac8c71ca602f86c54e67c33ef4ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96407424de1888ed977e8ea5dc8a5ee597f547f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96407424de1888ed977e8ea5dc8a5ee597f547f3", "html_url": "https://github.com/rust-lang/rust/commit/96407424de1888ed977e8ea5dc8a5ee597f547f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96407424de1888ed977e8ea5dc8a5ee597f547f3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1", "html_url": "https://github.com/rust-lang/rust/commit/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1"}, {"sha": "c32d51979d023bf0580a72f24d148ff82b2d71ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c32d51979d023bf0580a72f24d148ff82b2d71ed", "html_url": "https://github.com/rust-lang/rust/commit/c32d51979d023bf0580a72f24d148ff82b2d71ed"}], "stats": {"total": 92, "additions": 32, "deletions": 60}, "files": [{"sha": "6b887bb1b3143bcd6b43be3a625a75f1a9810ffc", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=96407424de1888ed977e8ea5dc8a5ee597f547f3", "patch": "@@ -461,9 +461,7 @@ impl Body {\n         &'a self,\n         db: &'a dyn DefDatabase,\n     ) -> impl Iterator<Item = (BlockId, Arc<DefMap>)> + '_ {\n-        self.block_scopes\n-            .iter()\n-            .map(move |&block| (block, db.block_def_map(block).expect(\"block ID without DefMap\")))\n+        self.block_scopes.iter().map(move |&block| (block, db.block_def_map(block)))\n     }\n \n     pub fn pretty_print(&self, db: &dyn DefDatabase, owner: DefWithBodyId) -> String {"}, {"sha": "b5487dda1b9421a53d6f993c719adacda5bdfb41", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=96407424de1888ed977e8ea5dc8a5ee597f547f3", "patch": "@@ -948,15 +948,14 @@ impl ExprCollector<'_> {\n             None\n         };\n \n-        let (module, def_map) = match block_id\n-            .and_then(|block_id| self.db.block_def_map(block_id).zip(Some(block_id)))\n-        {\n-            Some((def_map, block_id)) => {\n-                self.body.block_scopes.push(block_id);\n-                (def_map.root(), def_map)\n-            }\n-            None => (self.expander.module, self.expander.def_map.clone()),\n-        };\n+        let (module, def_map) =\n+            match block_id.map(|block_id| (self.db.block_def_map(block_id), block_id)) {\n+                Some((def_map, block_id)) => {\n+                    self.body.block_scopes.push(block_id);\n+                    (def_map.root(), def_map)\n+                }\n+                None => (self.expander.module, self.expander.def_map.clone()),\n+            };\n         let prev_def_map = mem::replace(&mut self.expander.def_map, def_map);\n         let prev_local_module = mem::replace(&mut self.expander.module, module);\n "}, {"sha": "ffd399258744499da95a064e608c4c0ec3ae958c", "filename": "crates/hir-def/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdb.rs?ref=96407424de1888ed977e8ea5dc8a5ee597f547f3", "patch": "@@ -96,7 +96,7 @@ pub trait DefDatabase: InternDatabase + ExpandDatabase + Upcast<dyn ExpandDataba\n     // FIXME: This actually can't return None anymore as we no longer allocate block scopes for\n     // non item declaring blocks\n     #[salsa::invoke(DefMap::block_def_map_query)]\n-    fn block_def_map(&self, block: BlockId) -> Option<Arc<DefMap>>;\n+    fn block_def_map(&self, block: BlockId) -> Arc<DefMap>;\n \n     // region:data\n "}, {"sha": "ec9a8e800680ec3b8bf98b16ec9fcbb7a7315ac7", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=96407424de1888ed977e8ea5dc8a5ee597f547f3", "patch": "@@ -101,13 +101,7 @@ pub struct ModuleId {\n impl ModuleId {\n     pub fn def_map(&self, db: &dyn db::DefDatabase) -> Arc<DefMap> {\n         match self.block {\n-            Some(block) => {\n-                db.block_def_map(block).unwrap_or_else(|| {\n-                    // NOTE: This should be unreachable - all `ModuleId`s come from their `DefMap`s,\n-                    // so the `DefMap` here must exist.\n-                    unreachable!(\"no `block_def_map` for `ModuleId` {:?}\", self);\n-                })\n-            }\n+            Some(block) => db.block_def_map(block),\n             None => db.crate_def_map(self.krate),\n         }\n     }"}, {"sha": "655004dcfe2f048a6318020b579c82d6f0743ba0", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=96407424de1888ed977e8ea5dc8a5ee597f547f3", "patch": "@@ -243,17 +243,10 @@ impl DefMap {\n         Arc::new(def_map)\n     }\n \n-    pub(crate) fn block_def_map_query(\n-        db: &dyn DefDatabase,\n-        block_id: BlockId,\n-    ) -> Option<Arc<DefMap>> {\n+    pub(crate) fn block_def_map_query(db: &dyn DefDatabase, block_id: BlockId) -> Arc<DefMap> {\n         let block: BlockLoc = db.lookup_intern_block(block_id);\n \n         let tree_id = TreeId::new(block.ast_id.file_id, Some(block_id));\n-        let item_tree = tree_id.item_tree(db);\n-        if item_tree.top_level_items().is_empty() {\n-            return None;\n-        }\n \n         let parent_map = block.module.def_map(db);\n         let krate = block.module.krate;\n@@ -269,7 +262,7 @@ impl DefMap {\n         def_map.block = Some(BlockInfo { block: block_id, parent: block.module });\n \n         let def_map = collector::collect_defs(db, def_map, tree_id);\n-        Some(Arc::new(def_map))\n+        Arc::new(def_map)\n     }\n \n     fn empty(krate: CrateId, edition: Edition, module_data: ModuleData) -> DefMap {"}, {"sha": "12499faeb622a62e30c5a4522bf59b1a21f11d23", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=96407424de1888ed977e8ea5dc8a5ee597f547f3", "patch": "@@ -572,15 +572,12 @@ impl Resolver {\n                 scope_id,\n             }));\n             if let Some(block) = expr_scopes.block(scope_id) {\n-                if let Some(def_map) = db.block_def_map(block) {\n-                    let root = def_map.root();\n-                    resolver\n-                        .scopes\n-                        .push(Scope::BlockScope(ModuleItemMap { def_map, module_id: root }));\n-                    // FIXME: This adds as many module scopes as there are blocks, but resolving in each\n-                    // already traverses all parents, so this is O(n\u00b2). I think we could only store the\n-                    // innermost module scope instead?\n-                }\n+                let def_map = db.block_def_map(block);\n+                let root = def_map.root();\n+                resolver.scopes.push(Scope::BlockScope(ModuleItemMap { def_map, module_id: root }));\n+                // FIXME: This adds as many module scopes as there are blocks, but resolving in each\n+                // already traverses all parents, so this is O(n\u00b2). I think we could only store the\n+                // innermost module scope instead?\n             }\n         }\n \n@@ -741,13 +738,12 @@ fn resolver_for_scope_(\n \n     for scope in scope_chain.into_iter().rev() {\n         if let Some(block) = scopes.block(scope) {\n-            if let Some(def_map) = db.block_def_map(block) {\n-                let root = def_map.root();\n-                r = r.push_block_scope(def_map, root);\n-                // FIXME: This adds as many module scopes as there are blocks, but resolving in each\n-                // already traverses all parents, so this is O(n\u00b2). I think we could only store the\n-                // innermost module scope instead?\n-            }\n+            let def_map = db.block_def_map(block);\n+            let root = def_map.root();\n+            r = r.push_block_scope(def_map, root);\n+            // FIXME: This adds as many module scopes as there are blocks, but resolving in each\n+            // already traverses all parents, so this is O(n\u00b2). I think we could only store the\n+            // innermost module scope instead?\n         }\n \n         r = r.push_expr_scope(owner, Arc::clone(&scopes), scope);"}, {"sha": "1cd652e7f02c1624bdb78ba1d96dd4a8e5e6d992", "filename": "crates/hir-def/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftest_db.rs?ref=96407424de1888ed977e8ea5dc8a5ee597f547f3", "patch": "@@ -210,13 +210,11 @@ impl TestDB {\n             });\n \n         for scope in scope_iter {\n-            let containing_blocks =\n+            let mut containing_blocks =\n                 scopes.scope_chain(Some(scope)).filter_map(|scope| scopes.block(scope));\n \n-            for block in containing_blocks {\n-                if let Some(def_map) = self.block_def_map(block) {\n-                    return Some(def_map);\n-                }\n+            if let Some(block) = containing_blocks.next().map(|block| self.block_def_map(block)) {\n+                return Some(block);\n             }\n         }\n "}, {"sha": "11c4dc4341072b49b14e312f6c59561771fa28aa", "filename": "crates/hir-ty/src/chalk_db.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs?ref=96407424de1888ed977e8ea5dc8a5ee597f547f3", "patch": "@@ -129,10 +129,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         let impl_maps = [in_deps, in_self];\n         let block_impls = iter::successors(self.block, |&block_id| {\n             cov_mark::hit!(block_local_impls);\n-            self.db\n-                .block_def_map(block_id)\n-                .and_then(|map| map.parent())\n-                .and_then(|module| module.containing_block())\n+            self.db.block_def_map(block_id).parent().and_then(|module| module.containing_block())\n         })\n         .inspect(|&block_id| {\n             // make sure we don't search the same block twice"}, {"sha": "9b8839f3576bb08367f2d3c23d779e5048cbfcfb", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96407424de1888ed977e8ea5dc8a5ee597f547f3/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=96407424de1888ed977e8ea5dc8a5ee597f547f3", "patch": "@@ -156,7 +156,7 @@ impl TraitImpls {\n         let _p = profile::span(\"trait_impls_in_block_query\");\n         let mut impls = Self { map: FxHashMap::default() };\n \n-        let block_def_map = db.block_def_map(block)?;\n+        let block_def_map = db.block_def_map(block);\n         impls.collect_def_map(db, &block_def_map);\n         impls.shrink_to_fit();\n \n@@ -290,7 +290,7 @@ impl InherentImpls {\n         let _p = profile::span(\"inherent_impls_in_block_query\");\n         let mut impls = Self { map: FxHashMap::default(), invalid_impls: Vec::default() };\n \n-        let block_def_map = db.block_def_map(block)?;\n+        let block_def_map = db.block_def_map(block);\n         impls.collect_def_map(db, &block_def_map);\n         impls.shrink_to_fit();\n \n@@ -1191,10 +1191,7 @@ fn iterate_inherent_methods(\n             )?;\n         }\n \n-        block = db\n-            .block_def_map(block_id)\n-            .and_then(|map| map.parent())\n-            .and_then(|module| module.containing_block());\n+        block = db.block_def_map(block_id).parent().and_then(|module| module.containing_block());\n     }\n \n     for krate in def_crates {"}]}