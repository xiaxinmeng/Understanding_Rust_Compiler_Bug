{"sha": "5170a3f45af6a7a2a2e46a115daca8f31379b3a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNzBhM2Y0NWFmNmE3YTJhMmU0NmExMTVkYWNhOGYzMTM3OWIzYTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-04T07:53:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-04T07:53:25Z"}, "message": "Auto merge of #63233 - RalfJung:get_unchecked, r=Centril\n\nclarify that unchecked indexing is UB even if the reference is never used", "tree": {"sha": "9fcd5857d51599703a80391889e98de7d5ea874f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fcd5857d51599703a80391889e98de7d5ea874f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5170a3f45af6a7a2a2e46a115daca8f31379b3a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5170a3f45af6a7a2a2e46a115daca8f31379b3a8", "html_url": "https://github.com/rust-lang/rust/commit/5170a3f45af6a7a2a2e46a115daca8f31379b3a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5170a3f45af6a7a2a2e46a115daca8f31379b3a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c13edcd9d64f640261c488e04459733313f3843", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c13edcd9d64f640261c488e04459733313f3843", "html_url": "https://github.com/rust-lang/rust/commit/2c13edcd9d64f640261c488e04459733313f3843"}, {"sha": "9b5623f8bcc5f69fb3aac5a473231bee70234a51", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5623f8bcc5f69fb3aac5a473231bee70234a51", "html_url": "https://github.com/rust-lang/rust/commit/9b5623f8bcc5f69fb3aac5a473231bee70234a51"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "c8257d30488a986333119d3dcc618b361d046082", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5170a3f45af6a7a2a2e46a115daca8f31379b3a8/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5170a3f45af6a7a2a2e46a115daca8f31379b3a8/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=5170a3f45af6a7a2a2e46a115daca8f31379b3a8", "patch": "@@ -292,10 +292,13 @@ impl<T> [T] {\n     /// Returns a reference to an element or subslice, without doing bounds\n     /// checking.\n     ///\n-    /// This is generally not recommended, use with caution! For a safe\n-    /// alternative see [`get`].\n+    /// This is generally not recommended, use with caution!\n+    /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n+    /// even if the resulting reference is not used.\n+    /// For a safe alternative see [`get`].\n     ///\n     /// [`get`]: #method.get\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     ///\n     /// # Examples\n     ///\n@@ -317,10 +320,13 @@ impl<T> [T] {\n     /// Returns a mutable reference to an element or subslice, without doing\n     /// bounds checking.\n     ///\n-    /// This is generally not recommended, use with caution! For a safe\n-    /// alternative see [`get_mut`].\n+    /// This is generally not recommended, use with caution!\n+    /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n+    /// even if the resulting reference is not used.\n+    /// For a safe alternative see [`get_mut`].\n     ///\n     /// [`get_mut`]: #method.get_mut\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     ///\n     /// # Examples\n     ///\n@@ -2629,11 +2635,17 @@ pub trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n \n     /// Returns a shared reference to the output at this location, without\n     /// performing any bounds checking.\n+    /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n+    /// even if the resulting reference is not used.\n+    /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n     #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     unsafe fn get_unchecked(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, without\n     /// performing any bounds checking.\n+    /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n+    /// even if the resulting reference is not used.\n+    /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n     #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     unsafe fn get_unchecked_mut(self, slice: &mut T) -> &mut Self::Output;\n "}]}