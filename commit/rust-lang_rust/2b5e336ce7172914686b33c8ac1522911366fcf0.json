{"sha": "2b5e336ce7172914686b33c8ac1522911366fcf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNWUzMzZjZTcxNzI5MTQ2ODZiMzNjOGFjMTUyMjkxMTM2NmZjZjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-20T19:19:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-20T19:19:12Z"}, "message": "move abstract traits to top", "tree": {"sha": "e706eea2010ee6d05269512b4d5e3dab033c789a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e706eea2010ee6d05269512b4d5e3dab033c789a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b5e336ce7172914686b33c8ac1522911366fcf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5e336ce7172914686b33c8ac1522911366fcf0", "html_url": "https://github.com/rust-lang/rust/commit/2b5e336ce7172914686b33c8ac1522911366fcf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b5e336ce7172914686b33c8ac1522911366fcf0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2bce118ae72ee5cf96b8c6ac687914cb842363c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2bce118ae72ee5cf96b8c6ac687914cb842363c", "html_url": "https://github.com/rust-lang/rust/commit/d2bce118ae72ee5cf96b8c6ac687914cb842363c"}], "stats": {"total": 124, "additions": 59, "deletions": 65}, "files": [{"sha": "6c2c5f78b77265eed30e969259369ed6a741d3bc", "filename": "crates/ra_syntax/src/parsing.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2b5e336ce7172914686b33c8ac1522911366fcf0/crates%2Fra_syntax%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5e336ce7172914686b33c8ac1522911366fcf0/crates%2Fra_syntax%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing.rs?ref=2b5e336ce7172914686b33c8ac1522911366fcf0", "patch": "@@ -8,7 +8,7 @@ mod grammar;\n mod reparsing;\n \n use crate::{\n-    SyntaxError,\n+    SyntaxError, SyntaxKind, SmolStr,\n     parsing::builder::GreenBuilder,\n     syntax_node::GreenNode,\n };\n@@ -23,3 +23,51 @@ pub(crate) fn parse_text(text: &str) -> (GreenNode, Vec<SyntaxError>) {\n         parser_impl::parse_with(GreenBuilder::new(), text, &tokens, grammar::root);\n     (green, errors)\n }\n+\n+/// `TreeSink` abstracts details of a particular syntax tree implementation.\n+trait TreeSink {\n+    type Tree;\n+\n+    /// Adds new leaf to the current branch.\n+    fn leaf(&mut self, kind: SyntaxKind, text: SmolStr);\n+\n+    /// Start new branch and make it current.\n+    fn start_branch(&mut self, kind: SyntaxKind);\n+\n+    /// Finish current branch and restore previous\n+    /// branch as current.\n+    fn finish_branch(&mut self);\n+\n+    fn error(&mut self, error: SyntaxError);\n+\n+    /// Complete tree building. Make sure that\n+    /// `start_branch` and `finish_branch` calls\n+    /// are paired!\n+    fn finish(self) -> Self::Tree;\n+}\n+\n+/// `TokenSource` abstracts the source of the tokens parser operates one.\n+///\n+/// Hopefully this will allow us to treat text and token trees in the same way!\n+trait TokenSource {\n+    fn token_kind(&self, pos: TokenPos) -> SyntaxKind;\n+    fn is_token_joint_to_next(&self, pos: TokenPos) -> bool;\n+    fn is_keyword(&self, pos: TokenPos, kw: &str) -> bool;\n+}\n+\n+#[derive(Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Default)]\n+pub(crate) struct TokenPos(pub u32);\n+\n+impl std::ops::Add<u32> for TokenPos {\n+    type Output = TokenPos;\n+\n+    fn add(self, rhs: u32) -> TokenPos {\n+        TokenPos(self.0 + rhs)\n+    }\n+}\n+\n+impl std::ops::AddAssign<u32> for TokenPos {\n+    fn add_assign(&mut self, rhs: u32) {\n+        self.0 += rhs\n+    }\n+}"}, {"sha": "a05e7f84b5c5931e6b8515f9cd63b9355fdbbf2f", "filename": "crates/ra_syntax/src/parsing/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5e336ce7172914686b33c8ac1522911366fcf0/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5e336ce7172914686b33c8ac1522911366fcf0/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fbuilder.rs?ref=2b5e336ce7172914686b33c8ac1522911366fcf0", "patch": "@@ -1,5 +1,5 @@\n use crate::{\n-    parsing::parser_impl::TreeSink,\n+    parsing::TreeSink,\n     syntax_node::{GreenNode, RaTypes},\n     SmolStr, SyntaxKind, SyntaxError,\n };"}, {"sha": "89439e0746561e11b6b3c5491a349114ee82970f", "filename": "crates/ra_syntax/src/parsing/parser_impl.rs", "status": "modified", "additions": 5, "deletions": 35, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2b5e336ce7172914686b33c8ac1522911366fcf0/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5e336ce7172914686b33c8ac1522911366fcf0/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl.rs?ref=2b5e336ce7172914686b33c8ac1522911366fcf0", "patch": "@@ -4,47 +4,17 @@ pub(crate) mod input;\n use std::cell::Cell;\n \n use crate::{\n-    SmolStr,\n-    syntax_error::{ParseError, SyntaxError},\n+    syntax_error::ParseError,\n     parsing::{\n+        TreeSink, TokenSource, TokenPos,\n         lexer::Token,\n         parser_api::Parser,\n-        parser_impl::{\n-            event::{Event, EventProcessor},\n-            input::InputPosition,\n-        },\n+        parser_impl::event::{Event, EventProcessor},\n     },\n };\n \n use crate::SyntaxKind::{self, EOF, TOMBSTONE};\n \n-pub(super) trait TreeSink {\n-    type Tree;\n-\n-    /// Adds new leaf to the current branch.\n-    fn leaf(&mut self, kind: SyntaxKind, text: SmolStr);\n-\n-    /// Start new branch and make it current.\n-    fn start_branch(&mut self, kind: SyntaxKind);\n-\n-    /// Finish current branch and restore previous\n-    /// branch as current.\n-    fn finish_branch(&mut self);\n-\n-    fn error(&mut self, error: SyntaxError);\n-\n-    /// Complete tree building. Make sure that\n-    /// `start_branch` and `finish_branch` calls\n-    /// are paired!\n-    fn finish(self) -> Self::Tree;\n-}\n-\n-pub(super) trait TokenSource {\n-    fn token_kind(&self, pos: InputPosition) -> SyntaxKind;\n-    fn is_token_joint_to_next(&self, pos: InputPosition) -> bool;\n-    fn is_keyword(&self, pos: InputPosition, kw: &str) -> bool;\n-}\n-\n /// Parse a sequence of tokens into the representative node tree\n pub(super) fn parse_with<S: TreeSink>(\n     sink: S,\n@@ -67,7 +37,7 @@ pub(super) fn parse_with<S: TreeSink>(\n /// the public API of the `Parser`.\n pub(super) struct ParserImpl<'a> {\n     token_source: &'a dyn TokenSource,\n-    pos: InputPosition,\n+    pos: TokenPos,\n     events: Vec<Event>,\n     steps: Cell<u32>,\n }\n@@ -76,7 +46,7 @@ impl<'a> ParserImpl<'a> {\n     fn new(token_source: &'a dyn TokenSource) -> ParserImpl<'a> {\n         ParserImpl {\n             token_source,\n-            pos: InputPosition::new(),\n+            pos: TokenPos::default(),\n             events: Vec::new(),\n             steps: Cell::new(0),\n         }"}, {"sha": "e9735e5260c14b534717a39c127b50841f0f8c7c", "filename": "crates/ra_syntax/src/parsing/parser_impl/input.rs", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2b5e336ce7172914686b33c8ac1522911366fcf0/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5e336ce7172914686b33c8ac1522911366fcf0/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl%2Finput.rs?ref=2b5e336ce7172914686b33c8ac1522911366fcf0", "patch": "@@ -1,30 +1,29 @@\n use crate::{\n     SyntaxKind, SyntaxKind::EOF, TextRange, TextUnit,\n     parsing::{\n+        TokenPos,\n         parser_impl::TokenSource,\n         lexer::Token,\n     },\n };\n \n-use std::ops::{Add, AddAssign};\n-\n impl<'t> TokenSource for ParserInput<'t> {\n-    fn token_kind(&self, pos: InputPosition) -> SyntaxKind {\n+    fn token_kind(&self, pos: TokenPos) -> SyntaxKind {\n         let idx = pos.0 as usize;\n         if !(idx < self.tokens.len()) {\n             return EOF;\n         }\n         self.tokens[idx].kind\n     }\n-    fn is_token_joint_to_next(&self, pos: InputPosition) -> bool {\n+    fn is_token_joint_to_next(&self, pos: TokenPos) -> bool {\n         let idx_curr = pos.0 as usize;\n         let idx_next = pos.0 as usize;\n         if !(idx_next < self.tokens.len()) {\n             return true;\n         }\n         self.start_offsets[idx_curr] + self.tokens[idx_curr].len == self.start_offsets[idx_next]\n     }\n-    fn is_keyword(&self, pos: InputPosition, kw: &str) -> bool {\n+    fn is_keyword(&self, pos: TokenPos, kw: &str) -> bool {\n         let idx = pos.0 as usize;\n         if !(idx < self.tokens.len()) {\n             return false;\n@@ -72,26 +71,3 @@ impl<'t> ParserInput<'t> {\n         ParserInput { text, start_offsets, tokens }\n     }\n }\n-\n-#[derive(Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]\n-pub(crate) struct InputPosition(u32);\n-\n-impl InputPosition {\n-    pub fn new() -> Self {\n-        InputPosition(0)\n-    }\n-}\n-\n-impl Add<u32> for InputPosition {\n-    type Output = InputPosition;\n-\n-    fn add(self, rhs: u32) -> InputPosition {\n-        InputPosition(self.0 + rhs)\n-    }\n-}\n-\n-impl AddAssign<u32> for InputPosition {\n-    fn add_assign(&mut self, rhs: u32) {\n-        self.0 += rhs\n-    }\n-}"}]}