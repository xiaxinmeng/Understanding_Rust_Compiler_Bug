{"sha": "27cc90effa886046754d15255303c6510b92df45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3Y2M5MGVmZmE4ODYwNDY3NTRkMTUyNTUzMDNjNjUxMGI5MmRmNDU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-05T10:16:28Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-05T10:16:28Z"}, "message": "Improvements for latest Cranelift", "tree": {"sha": "7f1261e4afbe69a8b7f6838682b81d3b63e981fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f1261e4afbe69a8b7f6838682b81d3b63e981fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27cc90effa886046754d15255303c6510b92df45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27cc90effa886046754d15255303c6510b92df45", "html_url": "https://github.com/rust-lang/rust/commit/27cc90effa886046754d15255303c6510b92df45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27cc90effa886046754d15255303c6510b92df45/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8add1960ab7867286e22711fdd3abf0dc0bdf1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8add1960ab7867286e22711fdd3abf0dc0bdf1d", "html_url": "https://github.com/rust-lang/rust/commit/f8add1960ab7867286e22711fdd3abf0dc0bdf1d"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "92a9de1e17667477671830245249219f3cae505c", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27cc90effa886046754d15255303c6510b92df45/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cc90effa886046754d15255303c6510b92df45/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=27cc90effa886046754d15255303c6510b92df45", "patch": "@@ -197,11 +197,6 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n \n         if let Some(ref mcr) = &context.mach_compile_result {\n             for &MachSrcLoc { start, end, loc } in mcr.sections.get_srclocs_sorted() {\n-                // FIXME get_srclocs_sorted omits default srclocs\n-                if func_end < start {\n-                    line_program.row().address_offset = func_end as u64;\n-                    create_row_for_span(line_program, self.mir.span);\n-                }\n                 line_program.row().address_offset = start as u64;\n                 if !loc.is_default() {\n                     let source_info = *source_info_set.get_index(loc.bits() as usize).unwrap();\n@@ -211,12 +206,10 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                 }\n                 func_end = end;\n             }\n-            // FIXME get_srclocs_sorted omits default srclocs\n-            if func_end < mcr.sections.total_size() {\n-                line_program.row().address_offset = func_end as u64;\n-                create_row_for_span(line_program, self.mir.span);\n-                func_end = mcr.sections.total_size();\n-            }\n+\n+            line_program.end_sequence(func_end as u64);\n+\n+            func_end = mcr.sections.total_size();\n         } else {\n             let encinfo = isa.encoding_info();\n             let mut blocks = func.layout.blocks().collect::<Vec<_>>();\n@@ -235,12 +228,11 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                     func_end = offset + size;\n                 }\n             }\n+            line_program.end_sequence(func_end as u64);\n         }\n \n         assert_ne!(func_end, 0);\n \n-        line_program.end_sequence(func_end as u64);\n-\n         let entry = self.debug_context.dwarf.unit.get_mut(self.entry_id);\n         entry.set(\n             gimli::DW_AT_low_pc,"}, {"sha": "a0f933d7c62b1b33ab78e2deca15034cf0774e72", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27cc90effa886046754d15255303c6510b92df45/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cc90effa886046754d15255303c6510b92df45/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=27cc90effa886046754d15255303c6510b92df45", "patch": "@@ -9,7 +9,7 @@ use crate::backend::WriteDebugInfo;\n pub(crate) struct UnwindContext<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     frame_table: FrameTable,\n-    cie_id: CieId,\n+    cie_id: Option<CieId>,\n }\n \n impl<'tcx> UnwindContext<'tcx> {\n@@ -18,9 +18,13 @@ impl<'tcx> UnwindContext<'tcx> {\n         module: &mut Module<impl Backend>,\n     ) -> Self {\n         let mut frame_table = FrameTable::default();\n-        let cie = module.isa().create_systemv_cie().expect(\"SystemV unwind info CIE\");\n \n-        let cie_id = frame_table.add_cie(cie);\n+\n+        let cie_id = if let Some(cie) = module.isa().create_systemv_cie() {\n+            Some(frame_table.add_cie(cie))\n+        } else {\n+            None\n+        };\n \n         UnwindContext {\n             tcx,\n@@ -38,7 +42,7 @@ impl<'tcx> UnwindContext<'tcx> {\n \n         match unwind_info {\n             UnwindInfo::SystemV(unwind_info) => {\n-                self.frame_table.add_fde(self.cie_id, unwind_info.to_fde(Address::Symbol {\n+                self.frame_table.add_fde(self.cie_id.unwrap(), unwind_info.to_fde(Address::Symbol {\n                     symbol: func_id.as_u32() as usize,\n                     addend: 0,\n                 }));"}]}