{"sha": "9a9908405d499e333baa20375bcaadfcca5459de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhOTkwODQwNWQ0OTllMzMzYmFhMjAzNzViY2FhZGZjY2E1NDU5ZGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-26T01:10:50Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-26T22:16:03Z"}, "message": "librustc: Ensure that proc upvars have static lifetime.\n\nSince procs do not have lifetime bounds, we must do this to maintain\nsafety.\n\nThis can break code that incorrectly captured references in procedure\ntypes. Change such code to not do this, perhaps with a trait object\ninstead.\n\nA better solution would be to add higher-rank lifetime support to procs.\nHowever, this would be a lot of work for a feature we want to remove in\nfavor of unboxed closures. The corresponding \"real fix\" is #15067.\n\nCloses #14036.\n\n[breaking-change]", "tree": {"sha": "34fb20a79f98280a96ea273a193db9af816e5503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34fb20a79f98280a96ea273a193db9af816e5503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a9908405d499e333baa20375bcaadfcca5459de", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9908405d499e333baa20375bcaadfcca5459de", "html_url": "https://github.com/rust-lang/rust/commit/9a9908405d499e333baa20375bcaadfcca5459de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a9908405d499e333baa20375bcaadfcca5459de/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c33a14cc546ddacd5398cebf57aa5ac574cfea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c33a14cc546ddacd5398cebf57aa5ac574cfea7", "html_url": "https://github.com/rust-lang/rust/commit/4c33a14cc546ddacd5398cebf57aa5ac574cfea7"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "59a075f22b28bebaff33ef2e94ed3ff1ee5f856e", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a9908405d499e333baa20375bcaadfcca5459de/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9908405d499e333baa20375bcaadfcca5459de/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=9a9908405d499e333baa20375bcaadfcca5459de", "patch": "@@ -533,6 +533,10 @@ fn spawn_process_os(cfg: ProcessConfig,\n \n     let dirp = cfg.cwd.map(|c| c.with_ref(|p| p)).unwrap_or(ptr::null());\n \n+    let cfg = unsafe {\n+        mem::transmute::<ProcessConfig,ProcessConfig<'static>>(cfg)\n+    };\n+\n     with_envp(cfg.env, proc(envp) {\n         with_argv(cfg.program, cfg.args, proc(argv) unsafe {\n             let (mut input, mut output) = try!(pipe());"}, {"sha": "34754f045ffce8b00ecc1d677d3c2df6b6d536b5", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a9908405d499e333baa20375bcaadfcca5459de/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9908405d499e333baa20375bcaadfcca5459de/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=9a9908405d499e333baa20375bcaadfcca5459de", "patch": "@@ -198,8 +198,14 @@ fn with_appropriate_checker(cx: &Context,\n     let fty = ty::node_id_to_type(cx.tcx, id);\n     match ty::get(fty).sty {\n         ty::ty_closure(box ty::ClosureTy {\n-            store: ty::UniqTraitStore, bounds, ..\n-        }) => b(|cx, fv| check_for_uniq(cx, fv, bounds)),\n+            store: ty::UniqTraitStore,\n+            bounds: mut bounds, ..\n+        }) => {\n+            // Procs can't close over non-static references!\n+            bounds.add(ty::BoundStatic);\n+\n+            b(|cx, fv| check_for_uniq(cx, fv, bounds))\n+        }\n \n         ty::ty_closure(box ty::ClosureTy {\n             store: ty::RegionTraitStore(region, _), bounds, .."}, {"sha": "f11ddc0151f96077fd43c344c35b43ae673cddd2", "filename": "src/test/compile-fail/proc-static-bound.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9a9908405d499e333baa20375bcaadfcca5459de/src%2Ftest%2Fcompile-fail%2Fproc-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9908405d499e333baa20375bcaadfcca5459de/src%2Ftest%2Fcompile-fail%2Fproc-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-static-bound.rs?ref=9a9908405d499e333baa20375bcaadfcca5459de", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut x = Some(1);\n+    let mut p: proc(&mut Option<int>) = proc(_) {};\n+    match x {\n+        Some(ref y) => {\n+            p = proc(z: &mut Option<int>) {\n+                *z = None;\n+                let _ = y;\n+                //~^ ERROR cannot capture variable of type `&int`, which does not fulfill `'static`\n+            };\n+        }\n+        None => {}\n+    }\n+    p(&mut x);\n+}\n+"}]}