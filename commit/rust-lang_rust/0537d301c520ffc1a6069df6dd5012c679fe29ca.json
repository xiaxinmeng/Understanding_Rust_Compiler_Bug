{"sha": "0537d301c520ffc1a6069df6dd5012c679fe29ca", "node_id": "C_kwDOAAsO6NoAKDA1MzdkMzAxYzUyMGZmYzFhNjA2OWRmNmRkNTAxMmM2NzlmZTI5Y2E", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-05T07:42:19Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-11-17T12:46:43Z"}, "message": "Add feature gate", "tree": {"sha": "8f5ac3e516848559066c56a7fda6afce0153a007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f5ac3e516848559066c56a7fda6afce0153a007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0537d301c520ffc1a6069df6dd5012c679fe29ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0537d301c520ffc1a6069df6dd5012c679fe29ca", "html_url": "https://github.com/rust-lang/rust/commit/0537d301c520ffc1a6069df6dd5012c679fe29ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0537d301c520ffc1a6069df6dd5012c679fe29ca/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "html_url": "https://github.com/rust-lang/rust/commit/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9"}], "stats": {"total": 114, "additions": 69, "deletions": 45}, "files": [{"sha": "3a1db1193b3dd336f82cc7c1f9fbc1af8d866bbd", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0537d301c520ffc1a6069df6dd5012c679fe29ca/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537d301c520ffc1a6069df6dd5012c679fe29ca/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=0537d301c520ffc1a6069df6dd5012c679fe29ca", "patch": "@@ -376,6 +376,8 @@ declare_features! (\n     (active, deprecated_safe, \"1.61.0\", Some(94978), None),\n     /// Allows having using `suggestion` in the `#[deprecated]` attribute.\n     (active, deprecated_suggestion, \"1.61.0\", Some(94785), None),\n+    /// Allows patterns to dereference values to match them.\n+    (active, deref_patterns, \"1.64.0\", Some(87121), None),\n     /// Tells rustdoc to automatically generate `#[doc(cfg(...))]`.\n     (active, doc_auto_cfg, \"1.58.0\", Some(43781), None),\n     /// Allows `#[doc(cfg(...))]`."}, {"sha": "b20949bcbd54a1d5b30e9af63f1605a9a8f11c2a", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0537d301c520ffc1a6069df6dd5012c679fe29ca/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537d301c520ffc1a6069df6dd5012c679fe29ca/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=0537d301c520ffc1a6069df6dd5012c679fe29ca", "patch": "@@ -401,7 +401,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        if let hir::ExprKind::Lit(Spanned { node: ast::LitKind::Str(..), .. }) = lt.kind {\n+        if self.tcx.features().deref_patterns && let hir::ExprKind::Lit(Spanned { node: ast::LitKind::Str(..), .. }) = lt.kind {\n             let tcx = self.tcx;\n             let expected = self.resolve_vars_if_possible(expected);\n             pat_ty = match expected.kind() {"}, {"sha": "a06e613b82f46d4f59746fe0cda2e26d16175967", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0537d301c520ffc1a6069df6dd5012c679fe29ca/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537d301c520ffc1a6069df6dd5012c679fe29ca/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0537d301c520ffc1a6069df6dd5012c679fe29ca", "patch": "@@ -597,6 +597,7 @@ symbols! {\n         deref,\n         deref_method,\n         deref_mut,\n+        deref_patterns,\n         deref_target,\n         derive,\n         derive_const,"}, {"sha": "e03f2455954f8e8c84b8c42501b6135f312c40fb", "filename": "src/test/ui/deref-patterns/basic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0537d301c520ffc1a6069df6dd5012c679fe29ca/src%2Ftest%2Fui%2Fderef-patterns%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537d301c520ffc1a6069df6dd5012c679fe29ca/src%2Ftest%2Fui%2Fderef-patterns%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Fbasic.rs?ref=0537d301c520ffc1a6069df6dd5012c679fe29ca", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // check-run-results\n+#![feature(deref_patterns)]\n \n fn main() {\n     test(Some(String::from(\"42\")));\n@@ -13,4 +14,4 @@ fn test(o: Option<String>) {\n         Some(_) => println!(\"something else?\"),\n         None => println!(\"nil\"),\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "90d0448e94a5fb459d7005d5707ec44900ea93e4", "filename": "src/test/ui/deref-patterns/gate.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0537d301c520ffc1a6069df6dd5012c679fe29ca/src%2Ftest%2Fui%2Fderef-patterns%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537d301c520ffc1a6069df6dd5012c679fe29ca/src%2Ftest%2Fui%2Fderef-patterns%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Fgate.rs?ref=0537d301c520ffc1a6069df6dd5012c679fe29ca", "patch": "@@ -0,0 +1,7 @@\n+// gate-test-deref_patterns\n+fn main() {\n+    match String::new() {\n+        \"\" | _ => {}\n+        //~^ mismatched types\n+    }\n+}"}, {"sha": "7ffd0eb7e6c03a0c2b5dc54dbd5ac69032a5a099", "filename": "src/test/ui/deref-patterns/gate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0537d301c520ffc1a6069df6dd5012c679fe29ca/src%2Ftest%2Fui%2Fderef-patterns%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0537d301c520ffc1a6069df6dd5012c679fe29ca/src%2Ftest%2Fui%2Fderef-patterns%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Fgate.stderr?ref=0537d301c520ffc1a6069df6dd5012c679fe29ca", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/gate.rs:3:9\n+   |\n+LL |     match String::new() {\n+   |           ------------- this expression has type `String`\n+LL |         \"\" | _ => {}\n+   |         ^^ expected struct `String`, found `&str`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "2e7d26d0dfd9617d7e287e92d8e3d5570b1fc779", "filename": "src/test/ui/deref-patterns/mir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0537d301c520ffc1a6069df6dd5012c679fe29ca/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537d301c520ffc1a6069df6dd5012c679fe29ca/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.rs?ref=0537d301c520ffc1a6069df6dd5012c679fe29ca", "patch": "@@ -1,10 +1,12 @@\n // compile-flags: -Z unpretty=mir\n // build-pass\n+#![feature(deref_patterns)]\n+\n fn main() {\n     let s = Some(String::new());\n     let a;\n     match s {\n         Some(\"a\") => a = 1234,\n         s => a = 4321,\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e73d37efb24a23ece528210ba4b6f8c1461e87d8", "filename": "src/test/ui/deref-patterns/mir.stdout", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0537d301c520ffc1a6069df6dd5012c679fe29ca/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0537d301c520ffc1a6069df6dd5012c679fe29ca/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.stdout?ref=0537d301c520ffc1a6069df6dd5012c679fe29ca", "patch": "@@ -1,99 +1,99 @@\n // WARNING: This output format is intended for human consumers only\n // and is subject to change without notice. Knock yourself out.\n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/mir.rs:3:11: 3:11\n-    let _1: std::option::Option<std::string::String>; // in scope 0 at $DIR/mir.rs:4:9: 4:10\n-    let mut _2: std::string::String;     // in scope 0 at $DIR/mir.rs:4:18: 4:31\n-    let mut _4: &std::string::String;    // in scope 0 at $DIR/mir.rs:7:14: 7:17\n-    let mut _5: &str;                    // in scope 0 at $DIR/mir.rs:7:14: 7:17\n-    let mut _6: bool;                    // in scope 0 at $DIR/mir.rs:7:14: 7:17\n-    let mut _7: isize;                   // in scope 0 at $DIR/mir.rs:7:9: 7:18\n-    let mut _9: bool;                    // in scope 0 at $DIR/mir.rs:10:1: 10:2\n+    let mut _0: ();                      // return place in scope 0 at $DIR/mir.rs:5:11: 5:11\n+    let _1: std::option::Option<std::string::String>; // in scope 0 at $DIR/mir.rs:6:9: 6:10\n+    let mut _2: std::string::String;     // in scope 0 at $DIR/mir.rs:6:18: 6:31\n+    let mut _4: &std::string::String;    // in scope 0 at $DIR/mir.rs:9:14: 9:17\n+    let mut _5: &str;                    // in scope 0 at $DIR/mir.rs:9:14: 9:17\n+    let mut _6: bool;                    // in scope 0 at $DIR/mir.rs:9:14: 9:17\n+    let mut _7: isize;                   // in scope 0 at $DIR/mir.rs:9:9: 9:18\n+    let mut _9: bool;                    // in scope 0 at $DIR/mir.rs:12:1: 12:2\n     scope 1 {\n-        debug s => _1;                   // in scope 1 at $DIR/mir.rs:4:9: 4:10\n-        let _3: i32;                     // in scope 1 at $DIR/mir.rs:5:9: 5:10\n+        debug s => _1;                   // in scope 1 at $DIR/mir.rs:6:9: 6:10\n+        let _3: i32;                     // in scope 1 at $DIR/mir.rs:7:9: 7:10\n         scope 2 {\n-            debug a => _3;               // in scope 2 at $DIR/mir.rs:5:9: 5:10\n-            let _8: std::option::Option<std::string::String>; // in scope 2 at $DIR/mir.rs:8:9: 8:10\n+            debug a => _3;               // in scope 2 at $DIR/mir.rs:7:9: 7:10\n+            let _8: std::option::Option<std::string::String>; // in scope 2 at $DIR/mir.rs:10:9: 10:10\n             scope 3 {\n-                debug s => _8;           // in scope 3 at $DIR/mir.rs:8:9: 8:10\n+                debug s => _8;           // in scope 3 at $DIR/mir.rs:10:9: 10:10\n             }\n         }\n     }\n \n     bb0: {\n-        _9 = const false;                // scope 0 at $DIR/mir.rs:4:9: 4:10\n-        _2 = String::new() -> bb1;       // scope 0 at $DIR/mir.rs:4:18: 4:31\n+        _9 = const false;                // scope 0 at $DIR/mir.rs:6:9: 6:10\n+        _2 = String::new() -> bb1;       // scope 0 at $DIR/mir.rs:6:18: 6:31\n                                          // mir::Constant\n-                                         // + span: $DIR/mir.rs:4:18: 4:29\n+                                         // + span: $DIR/mir.rs:6:18: 6:29\n                                          // + literal: Const { ty: fn() -> String {String::new}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        _9 = const true;                 // scope 0 at $DIR/mir.rs:4:13: 4:32\n-        Deinit(_1);                      // scope 0 at $DIR/mir.rs:4:13: 4:32\n-        ((_1 as Some).0: std::string::String) = move _2; // scope 0 at $DIR/mir.rs:4:13: 4:32\n-        discriminant(_1) = 1;            // scope 0 at $DIR/mir.rs:4:13: 4:32\n-        _7 = discriminant(_1);           // scope 2 at $DIR/mir.rs:6:11: 6:12\n-        switchInt(move _7) -> [1_isize: bb3, otherwise: bb2]; // scope 2 at $DIR/mir.rs:6:5: 6:12\n+        _9 = const true;                 // scope 0 at $DIR/mir.rs:6:13: 6:32\n+        Deinit(_1);                      // scope 0 at $DIR/mir.rs:6:13: 6:32\n+        ((_1 as Some).0: std::string::String) = move _2; // scope 0 at $DIR/mir.rs:6:13: 6:32\n+        discriminant(_1) = 1;            // scope 0 at $DIR/mir.rs:6:13: 6:32\n+        _7 = discriminant(_1);           // scope 2 at $DIR/mir.rs:8:11: 8:12\n+        switchInt(move _7) -> [1_isize: bb3, otherwise: bb2]; // scope 2 at $DIR/mir.rs:8:5: 8:12\n     }\n \n     bb2: {\n-        _9 = const false;                // scope 2 at $DIR/mir.rs:8:9: 8:10\n-        _8 = move _1;                    // scope 2 at $DIR/mir.rs:8:9: 8:10\n-        _3 = const 4321_i32;             // scope 3 at $DIR/mir.rs:8:14: 8:22\n-        drop(_8) -> [return: bb7, unwind: bb12]; // scope 2 at $DIR/mir.rs:8:21: 8:22\n+        _9 = const false;                // scope 2 at $DIR/mir.rs:10:9: 10:10\n+        _8 = move _1;                    // scope 2 at $DIR/mir.rs:10:9: 10:10\n+        _3 = const 4321_i32;             // scope 3 at $DIR/mir.rs:10:14: 10:22\n+        drop(_8) -> [return: bb7, unwind: bb12]; // scope 2 at $DIR/mir.rs:10:21: 10:22\n     }\n \n     bb3: {\n-        _4 = &((_1 as Some).0: std::string::String); // scope 2 at $DIR/mir.rs:7:14: 7:17\n-        _5 = <String as Deref>::deref(move _4) -> bb4; // scope 2 at $DIR/mir.rs:7:14: 7:17\n+        _4 = &((_1 as Some).0: std::string::String); // scope 2 at $DIR/mir.rs:9:14: 9:17\n+        _5 = <String as Deref>::deref(move _4) -> bb4; // scope 2 at $DIR/mir.rs:9:14: 9:17\n                                          // mir::Constant\n-                                         // + span: $DIR/mir.rs:7:14: 7:17\n+                                         // + span: $DIR/mir.rs:9:14: 9:17\n                                          // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb4: {\n-        _6 = <str as PartialEq>::eq(_5, const \"a\") -> [return: bb5, unwind: bb12]; // scope 2 at $DIR/mir.rs:7:14: 7:17\n+        _6 = <str as PartialEq>::eq(_5, const \"a\") -> [return: bb5, unwind: bb12]; // scope 2 at $DIR/mir.rs:9:14: 9:17\n                                          // mir::Constant\n-                                         // + span: $DIR/mir.rs:7:14: 7:17\n+                                         // + span: $DIR/mir.rs:9:14: 9:17\n                                          // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }\n                                          // mir::Constant\n-                                         // + span: $DIR/mir.rs:7:14: 7:17\n+                                         // + span: $DIR/mir.rs:9:14: 9:17\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n     }\n \n     bb5: {\n-        switchInt(move _6) -> [false: bb2, otherwise: bb6]; // scope 2 at $DIR/mir.rs:7:14: 7:17\n+        switchInt(move _6) -> [false: bb2, otherwise: bb6]; // scope 2 at $DIR/mir.rs:9:14: 9:17\n     }\n \n     bb6: {\n-        _3 = const 1234_i32;             // scope 2 at $DIR/mir.rs:7:22: 7:30\n-        goto -> bb7;                     // scope 2 at $DIR/mir.rs:7:22: 7:30\n+        _3 = const 1234_i32;             // scope 2 at $DIR/mir.rs:9:22: 9:30\n+        goto -> bb7;                     // scope 2 at $DIR/mir.rs:9:22: 9:30\n     }\n \n     bb7: {\n-        switchInt(_9) -> [false: bb8, otherwise: bb10]; // scope 0 at $DIR/mir.rs:10:1: 10:2\n+        switchInt(_9) -> [false: bb8, otherwise: bb10]; // scope 0 at $DIR/mir.rs:12:1: 12:2\n     }\n \n     bb8: {\n-        _9 = const false;                // scope 0 at $DIR/mir.rs:10:1: 10:2\n-        return;                          // scope 0 at $DIR/mir.rs:10:2: 10:2\n+        _9 = const false;                // scope 0 at $DIR/mir.rs:12:1: 12:2\n+        return;                          // scope 0 at $DIR/mir.rs:12:2: 12:2\n     }\n \n     bb9 (cleanup): {\n-        resume;                          // scope 0 at $DIR/mir.rs:3:1: 10:2\n+        resume;                          // scope 0 at $DIR/mir.rs:5:1: 12:2\n     }\n \n     bb10: {\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/mir.rs:10:1: 10:2\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/mir.rs:12:1: 12:2\n     }\n \n     bb11 (cleanup): {\n-        drop(_1) -> bb9;                 // scope 0 at $DIR/mir.rs:10:1: 10:2\n+        drop(_1) -> bb9;                 // scope 0 at $DIR/mir.rs:12:1: 12:2\n     }\n \n     bb12 (cleanup): {\n-        switchInt(_9) -> [false: bb9, otherwise: bb11]; // scope 0 at $DIR/mir.rs:10:1: 10:2\n+        switchInt(_9) -> [false: bb9, otherwise: bb11]; // scope 0 at $DIR/mir.rs:12:1: 12:2\n     }\n }"}]}