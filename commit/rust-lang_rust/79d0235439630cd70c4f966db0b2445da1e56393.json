{"sha": "79d0235439630cd70c4f966db0b2445da1e56393", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZDAyMzU0Mzk2MzBjZDcwYzRmOTY2ZGIwYjI0NDVkYTFlNTYzOTM=", "commit": {"author": {"name": "Sebastian Hahn", "email": "sebastian@torproject.org", "date": "2015-12-18T19:40:17Z"}, "committer": {"name": "Sebastian Hahn", "email": "sebastian@torproject.org", "date": "2015-12-18T19:40:17Z"}, "message": "Implement Weak::new_downgraded() (#30425)\n\nThis adds a constructor for a Weak that can never be upgraded. These are\nmostly useless, but for example are required when deserializing.", "tree": {"sha": "60c305d2037be49ca8a5c2199de1afa96e6d976d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60c305d2037be49ca8a5c2199de1afa96e6d976d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79d0235439630cd70c4f966db0b2445da1e56393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79d0235439630cd70c4f966db0b2445da1e56393", "html_url": "https://github.com/rust-lang/rust/commit/79d0235439630cd70c4f966db0b2445da1e56393", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79d0235439630cd70c4f966db0b2445da1e56393/comments", "author": {"login": "shahn", "id": 128636, "node_id": "MDQ6VXNlcjEyODYzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/128636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shahn", "html_url": "https://github.com/shahn", "followers_url": "https://api.github.com/users/shahn/followers", "following_url": "https://api.github.com/users/shahn/following{/other_user}", "gists_url": "https://api.github.com/users/shahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/shahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shahn/subscriptions", "organizations_url": "https://api.github.com/users/shahn/orgs", "repos_url": "https://api.github.com/users/shahn/repos", "events_url": "https://api.github.com/users/shahn/events{/privacy}", "received_events_url": "https://api.github.com/users/shahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shahn", "id": 128636, "node_id": "MDQ6VXNlcjEyODYzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/128636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shahn", "html_url": "https://github.com/shahn", "followers_url": "https://api.github.com/users/shahn/followers", "following_url": "https://api.github.com/users/shahn/following{/other_user}", "gists_url": "https://api.github.com/users/shahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/shahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shahn/subscriptions", "organizations_url": "https://api.github.com/users/shahn/orgs", "repos_url": "https://api.github.com/users/shahn/repos", "events_url": "https://api.github.com/users/shahn/events{/privacy}", "received_events_url": "https://api.github.com/users/shahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de62f9d885623318206620ddd2856a288ccd3ee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/de62f9d885623318206620ddd2856a288ccd3ee4", "html_url": "https://github.com/rust-lang/rust/commit/de62f9d885623318206620ddd2856a288ccd3ee4"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "15debf2683d1f598d3ec36707849e2653dda780a", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/79d0235439630cd70c4f966db0b2445da1e56393/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d0235439630cd70c4f966db0b2445da1e56393/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=79d0235439630cd70c4f966db0b2445da1e56393", "patch": "@@ -160,7 +160,7 @@ use core::cell::Cell;\n use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{Hasher, Hash};\n-use core::intrinsics::{assume, abort};\n+use core::intrinsics::{assume, abort, uninit};\n use core::marker;\n #[cfg(not(stage0))]\n use core::marker::Unsize;\n@@ -830,6 +830,36 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> {\n     }\n }\n \n+impl<T> Weak<T> {\n+    /// Constructs a new `Weak<T>` without an accompanying instance of T.\n+    ///\n+    /// This allocates memory for T, but does not initialize it. Calling\n+    /// Weak<T>::upgrade() on the return value always gives None.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::rc::Weak;\n+    ///\n+    /// let five = Weak::new_downgraded();\n+    /// ```\n+\n+    #[unstable(feature = \"downgraded_weak\",\n+               reason = \"recently added\",\n+               issue=\"30425\")]\n+    pub fn new_downgraded() -> Weak<T> {\n+        unsafe {\n+            Weak {\n+                _ptr: Shared::new(Box::into_raw(box RcBox {\n+                    strong: Cell::new(0),\n+                    weak: Cell::new(1),\n+                    value: uninit(),\n+                })),\n+            }\n+        }\n+    }\n+}\n+\n // NOTE: We checked_add here to deal with mem::forget safety. In particular\n // if you mem::forget Rcs (or Weaks), the ref-count can overflow, and then\n // you can free the allocation while outstanding Rcs (or Weaks) exist.\n@@ -1122,6 +1152,12 @@ mod tests {\n         let foo_rc = Rc::from(foo);\n         assert!(123 == *foo_rc);\n     }\n+\n+    #[test]\n+    fn test_new_downgraded() {\n+        let foo: Weak<usize> = Weak::new_downgraded();\n+        assert!(foo.upgrade().is_none());\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}