{"sha": "adc18904483fbd9df409291da4c4e299c8b6cb3e", "node_id": "C_kwDOAAsO6NoAKGFkYzE4OTA0NDgzZmJkOWRmNDA5MjkxZGE0YzRlMjk5YzhiNmNiM2U", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2023-01-25T06:46:19Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2023-01-25T06:46:19Z"}, "message": "create and use GlobalAlloc::address_space", "tree": {"sha": "504ab69273f4224adc6a642664ce71331f88fb9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/504ab69273f4224adc6a642664ce71331f88fb9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adc18904483fbd9df409291da4c4e299c8b6cb3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adc18904483fbd9df409291da4c4e299c8b6cb3e", "html_url": "https://github.com/rust-lang/rust/commit/adc18904483fbd9df409291da4c4e299c8b6cb3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adc18904483fbd9df409291da4c4e299c8b6cb3e/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "009192b01bd88a7bb6c1948d1f47dd598af0bfd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/009192b01bd88a7bb6c1948d1f47dd598af0bfd9", "html_url": "https://github.com/rust-lang/rust/commit/009192b01bd88a7bb6c1948d1f47dd598af0bfd9"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "dc41cb761b59c44b9e60d2567d3b5b5b276a315f", "filename": "compiler/rustc_codegen_gcc/src/consts.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/adc18904483fbd9df409291da4c4e299c8b6cb3e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc18904483fbd9df409291da4c4e299c8b6cb3e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs?ref=adc18904483fbd9df409291da4c4e299c8b6cb3e", "patch": "@@ -7,9 +7,9 @@ use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs}\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::ty::layout::LayoutOf;\n-use rustc_middle::mir::interpret::{self, ConstAllocation, ErrorHandled, GlobalAlloc, Scalar as InterpScalar, read_target_uint};\n+use rustc_middle::mir::interpret::{self, ConstAllocation, ErrorHandled, Scalar as InterpScalar, read_target_uint};\n use rustc_span::def_id::DefId;\n-use rustc_target::abi::{self, AddressSpace, Align, HasDataLayout, Primitive, Size, WrappingRange};\n+use rustc_target::abi::{self, Align, HasDataLayout, Primitive, Size, WrappingRange};\n \n use crate::base;\n use crate::context::CodegenCx;\n@@ -323,12 +323,7 @@ pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: ConstAl\n             .expect(\"const_alloc_to_llvm: could not read relocation pointer\")\n             as u64;\n \n-        let address_space = match cx.tcx.global_alloc(alloc_id) {\n-            GlobalAlloc::Function(..) => cx.data_layout().instruction_address_space,\n-            GlobalAlloc::Static(..) | GlobalAlloc::Memory(..) | GlobalAlloc::VTable(..) => {\n-                AddressSpace::DATA\n-            }\n-        };\n+        let address_space = cx.tcx.global_alloc(alloc_id).address_space(cx);\n \n         llvals.push(cx.scalar_to_backend(\n             InterpScalar::from_pointer("}, {"sha": "cad3c5d87b73c6bf445a15a08bf8f99702f40e2f", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/adc18904483fbd9df409291da4c4e299c8b6cb3e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc18904483fbd9df409291da4c4e299c8b6cb3e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=adc18904483fbd9df409291da4c4e299c8b6cb3e", "patch": "@@ -13,17 +13,15 @@ use rustc_codegen_ssa::traits::*;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::interpret::{\n-    read_target_uint, Allocation, ConstAllocation, ErrorHandled, GlobalAlloc, InitChunk, Pointer,\n+    read_target_uint, Allocation, ConstAllocation, ErrorHandled, InitChunk, Pointer,\n     Scalar as InterpScalar,\n };\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::{bug, span_bug};\n use rustc_session::config::Lto;\n-use rustc_target::abi::{\n-    AddressSpace, Align, HasDataLayout, Primitive, Scalar, Size, WrappingRange,\n-};\n+use rustc_target::abi::{Align, HasDataLayout, Primitive, Scalar, Size, WrappingRange};\n use std::ops::Range;\n \n pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: ConstAllocation<'_>) -> &'ll Value {\n@@ -98,12 +96,7 @@ pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: ConstAllocation<\n         .expect(\"const_alloc_to_llvm: could not read relocation pointer\")\n             as u64;\n \n-        let address_space = match cx.tcx.global_alloc(alloc_id) {\n-            GlobalAlloc::Function(..) => cx.data_layout().instruction_address_space,\n-            GlobalAlloc::Static(..) | GlobalAlloc::Memory(..) | GlobalAlloc::VTable(..) => {\n-                AddressSpace::DATA\n-            }\n-        };\n+        let address_space = cx.tcx.global_alloc(alloc_id).address_space(cx);\n \n         llvals.push(cx.scalar_to_backend(\n             InterpScalar::from_pointer("}, {"sha": "b0975616b6151546773253fb88af57da891f678f", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/adc18904483fbd9df409291da4c4e299c8b6cb3e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc18904483fbd9df409291da4c4e299c8b6cb3e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=adc18904483fbd9df409291da4c4e299c8b6cb3e", "patch": "@@ -110,7 +110,7 @@ use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_serialize::{Decodable, Encodable};\n-use rustc_target::abi::Endian;\n+use rustc_target::abi::{AddressSpace, Endian, HasDataLayout};\n \n use crate::mir;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n@@ -438,6 +438,17 @@ impl<'tcx> GlobalAlloc<'tcx> {\n             _ => bug!(\"expected vtable, got {:?}\", self),\n         }\n     }\n+\n+    /// The address space that this `GlobalAlloc` should be placed in.\n+    #[inline]\n+    pub fn address_space(&self, cx: &impl HasDataLayout) -> AddressSpace {\n+        match self {\n+            GlobalAlloc::Function(..) => cx.data_layout().instruction_address_space,\n+            GlobalAlloc::Static(..) | GlobalAlloc::Memory(..) | GlobalAlloc::VTable(..) => {\n+                AddressSpace::DATA\n+            }\n+        }\n+    }\n }\n \n pub(crate) struct AllocMap<'tcx> {"}]}