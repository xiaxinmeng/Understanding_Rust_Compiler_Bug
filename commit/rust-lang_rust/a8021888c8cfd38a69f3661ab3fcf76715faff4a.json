{"sha": "a8021888c8cfd38a69f3661ab3fcf76715faff4a", "node_id": "C_kwDOAAsO6NoAKGE4MDIxODg4YzhjZmQzOGE2OWYzNjYxYWIzZmNmNzY3MTVmYWZmNGE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-11T22:59:05Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-24T15:57:15Z"}, "message": "resolve: Use a single common map for local and foreign modules", "tree": {"sha": "64e278ea7cc1746c007e9f278513b58a940397f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64e278ea7cc1746c007e9f278513b58a940397f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8021888c8cfd38a69f3661ab3fcf76715faff4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8021888c8cfd38a69f3661ab3fcf76715faff4a", "html_url": "https://github.com/rust-lang/rust/commit/a8021888c8cfd38a69f3661ab3fcf76715faff4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8021888c8cfd38a69f3661ab3fcf76715faff4a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a238589833cd3bb2eb9e7746735baa9948c09ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a238589833cd3bb2eb9e7746735baa9948c09ee", "html_url": "https://github.com/rust-lang/rust/commit/1a238589833cd3bb2eb9e7746735baa9948c09ee"}], "stats": {"total": 33, "additions": 13, "deletions": 20}, "files": [{"sha": "c15b1c111ba50a80b927243d3dfa0832f339bf28", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8021888c8cfd38a69f3661ab3fcf76715faff4a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8021888c8cfd38a69f3661ab3fcf76715faff4a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=a8021888c8cfd38a69f3661ab3fcf76715faff4a", "patch": "@@ -114,16 +114,12 @@ impl<'a> Resolver<'a> {\n     }\n \n     pub fn get_module(&mut self, def_id: DefId) -> Module<'a> {\n-        // If this is a local module, it will be in `module_map`, no need to recalculate it.\n-        if let Some(def_id) = def_id.as_local() {\n-            return self.module_map[&def_id];\n-        }\n-\n         // Cache module resolution\n-        if let Some(&module) = self.extern_module_map.get(&def_id) {\n-            return module;\n+        if let Some(module) = self.module_map.get(&def_id) {\n+            return *module;\n         }\n \n+        assert!(!def_id.is_local());\n         let (name, parent) = if def_id.index == CRATE_DEF_INDEX {\n             // This is the crate root\n             (self.cstore().crate_name(def_id.krate), None)\n@@ -148,7 +144,7 @@ impl<'a> Resolver<'a> {\n             // FIXME: Account for `#[no_implicit_prelude]` attributes.\n             parent.map_or(false, |module| module.no_implicit_prelude),\n         );\n-        self.extern_module_map.insert(def_id, module);\n+        self.module_map.insert(def_id, module);\n         module\n     }\n \n@@ -772,7 +768,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         || self.r.session.contains_name(&item.attrs, sym::no_implicit_prelude),\n                 );\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n-                self.r.module_map.insert(local_def_id, module);\n+                self.r.module_map.insert(def_id, module);\n \n                 // Descend into the module.\n                 self.parent_scope.module = module;"}, {"sha": "b4d29684e790aff4d1575008e80d218970ad2d00", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8021888c8cfd38a69f3661ab3fcf76715faff4a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8021888c8cfd38a69f3661ab3fcf76715faff4a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=a8021888c8cfd38a69f3661ab3fcf76715faff4a", "patch": "@@ -799,9 +799,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     }\n \n     fn with_scope<T>(&mut self, id: NodeId, f: impl FnOnce(&mut Self) -> T) -> T {\n-        let id = self.r.local_def_id(id);\n-        let module = self.r.module_map.get(&id).cloned(); // clones a reference\n-        if let Some(module) = module {\n+        if let Some(module) = self.r.module_map.get(&self.r.local_def_id(id).to_def_id()).copied() {\n             // Move down in the graph.\n             let orig_module = replace(&mut self.parent_scope.module, module);\n             self.with_rib(ValueNS, ModuleRibKind(module), |this| {"}, {"sha": "11ed7ded304833a67771fc1ae77a52b957cb2800", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8021888c8cfd38a69f3661ab3fcf76715faff4a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8021888c8cfd38a69f3661ab3fcf76715faff4a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=a8021888c8cfd38a69f3661ab3fcf76715faff4a", "patch": "@@ -943,8 +943,7 @@ pub struct Resolver<'a> {\n     /// some AST passes can generate identifiers that only resolve to local or\n     /// language items.\n     empty_module: Module<'a>,\n-    module_map: FxHashMap<LocalDefId, Module<'a>>,\n-    extern_module_map: FxHashMap<DefId, Module<'a>>,\n+    module_map: FxHashMap<DefId, Module<'a>>,\n     binding_parent_modules: FxHashMap<PtrKey<'a, NameBinding<'a>>, Module<'a>>,\n     underscore_disambiguator: u32,\n \n@@ -1288,7 +1287,7 @@ impl<'a> Resolver<'a> {\n             true,\n         );\n         let mut module_map = FxHashMap::default();\n-        module_map.insert(CRATE_DEF_ID, graph_root);\n+        module_map.insert(root_def_id, graph_root);\n \n         let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);\n         let root = definitions.get_root_def();\n@@ -1355,7 +1354,6 @@ impl<'a> Resolver<'a> {\n             empty_module,\n             module_map,\n             block_map: Default::default(),\n-            extern_module_map: FxHashMap::default(),\n             binding_parent_modules: FxHashMap::default(),\n             ast_transform_scopes: FxHashMap::default(),\n "}, {"sha": "a9778a28cb584fb4caeb3c0e69a60a59f3668f9a", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8021888c8cfd38a69f3661ab3fcf76715faff4a/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8021888c8cfd38a69f3661ab3fcf76715faff4a/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=a8021888c8cfd38a69f3661ab3fcf76715faff4a", "patch": "@@ -225,21 +225,22 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         features: &[Symbol],\n         parent_module_id: Option<NodeId>,\n     ) -> LocalExpnId {\n-        let parent_module = parent_module_id.map(|module_id| self.local_def_id(module_id));\n+        let parent_module =\n+            parent_module_id.map(|module_id| self.local_def_id(module_id).to_def_id());\n         let expn_id = LocalExpnId::fresh(\n             ExpnData::allow_unstable(\n                 ExpnKind::AstPass(pass),\n                 call_site,\n                 self.session.edition(),\n                 features.into(),\n                 None,\n-                parent_module.map(LocalDefId::to_def_id),\n+                parent_module,\n             ),\n             self.create_stable_hashing_context(),\n         );\n \n-        let parent_scope = parent_module\n-            .map_or(self.empty_module, |parent_def_id| self.module_map[&parent_def_id]);\n+        let parent_scope =\n+            parent_module.map_or(self.empty_module, |def_id| self.get_module(def_id));\n         self.ast_transform_scopes.insert(expn_id, parent_scope);\n \n         expn_id"}]}