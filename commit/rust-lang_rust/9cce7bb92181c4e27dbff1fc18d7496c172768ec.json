{"sha": "9cce7bb92181c4e27dbff1fc18d7496c172768ec", "node_id": "C_kwDOAAsO6NoAKDljY2U3YmI5MjE4MWM0ZTI3ZGJmZjFmYzE4ZDc0OTZjMTcyNzY4ZWM", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-21T01:49:51Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-25T18:04:33Z"}, "message": "Account for type obligation coming from `const` and `static`", "tree": {"sha": "55ab0a233b5f9d32f053cea0a739fa9690306175", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55ab0a233b5f9d32f053cea0a739fa9690306175"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cce7bb92181c4e27dbff1fc18d7496c172768ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cce7bb92181c4e27dbff1fc18d7496c172768ec", "html_url": "https://github.com/rust-lang/rust/commit/9cce7bb92181c4e27dbff1fc18d7496c172768ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cce7bb92181c4e27dbff1fc18d7496c172768ec/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "html_url": "https://github.com/rust-lang/rust/commit/37a11a96a1b3ad68c40cc293270cf8ffbe7904de"}], "stats": {"total": 75, "additions": 50, "deletions": 25}, "files": [{"sha": "12cd7ad184892968db333849816429badd9be776", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 46, "deletions": 22, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9cce7bb92181c4e27dbff1fc18d7496c172768ec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cce7bb92181c4e27dbff1fc18d7496c172768ec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=9cce7bb92181c4e27dbff1fc18d7496c172768ec", "patch": "@@ -179,31 +179,55 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let mut primary_span = lhs.span;\n                 let mut secondary_span = lhs.span;\n                 let mut post_message = \"\";\n-                if let hir::ExprKind::Path(hir::QPath::Resolved(\n-                    None,\n-                    hir::Path { res: hir::def::Res::Local(hir_id), .. },\n-                )) = lhs.kind\n-                {\n-                    if let Some(hir::Node::Binding(pat)) = self.tcx.hir().find(*hir_id) {\n-                        let parent = self.tcx.hir().get_parent_node(pat.hir_id);\n-                        primary_span = pat.span;\n-                        secondary_span = pat.span;\n-                        match self.tcx.hir().find(parent) {\n-                            Some(hir::Node::Local(hir::Local { ty: Some(ty), .. })) => {\n-                                primary_span = ty.span;\n-                                post_message = \" type\";\n-                            }\n-                            Some(hir::Node::Local(hir::Local { init: Some(init), .. })) => {\n-                                primary_span = init.span;\n-                                post_message = \" value\";\n-                            }\n-                            Some(hir::Node::Param(hir::Param { ty_span, .. })) => {\n-                                primary_span = *ty_span;\n-                                post_message = \" parameter type\";\n+                match lhs.kind {\n+                    hir::ExprKind::Path(hir::QPath::Resolved(\n+                        None,\n+                        hir::Path {\n+                            res:\n+                                hir::def::Res::Def(\n+                                    hir::def::DefKind::Static | hir::def::DefKind::Const,\n+                                    def_id,\n+                                ),\n+                            ..\n+                        },\n+                    )) => {\n+                        if let Some(hir::Node::Item(hir::Item {\n+                            ident,\n+                            kind: hir::ItemKind::Static(ty, ..) | hir::ItemKind::Const(ty, ..),\n+                            ..\n+                        })) = self.tcx.hir().get_if_local(*def_id)\n+                        {\n+                            primary_span = ty.span;\n+                            secondary_span = ident.span;\n+                            post_message = \" type\";\n+                        }\n+                    }\n+                    hir::ExprKind::Path(hir::QPath::Resolved(\n+                        None,\n+                        hir::Path { res: hir::def::Res::Local(hir_id), .. },\n+                    )) => {\n+                        if let Some(hir::Node::Binding(pat)) = self.tcx.hir().find(*hir_id) {\n+                            let parent = self.tcx.hir().get_parent_node(pat.hir_id);\n+                            primary_span = pat.span;\n+                            secondary_span = pat.span;\n+                            match self.tcx.hir().find(parent) {\n+                                Some(hir::Node::Local(hir::Local { ty: Some(ty), .. })) => {\n+                                    primary_span = ty.span;\n+                                    post_message = \" type\";\n+                                }\n+                                Some(hir::Node::Local(hir::Local { init: Some(init), .. })) => {\n+                                    primary_span = init.span;\n+                                    post_message = \" value\";\n+                                }\n+                                Some(hir::Node::Param(hir::Param { ty_span, .. })) => {\n+                                    primary_span = *ty_span;\n+                                    post_message = \" parameter type\";\n+                                }\n+                                _ => {}\n                             }\n-                            _ => {}\n                         }\n                     }\n+                    _ => {}\n                 }\n \n                 if primary_span != secondary_span"}, {"sha": "983e1026f91e9fb50952e4bca2cee9403cf51116", "filename": "src/test/ui/static/static-mut-bad-types.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9cce7bb92181c4e27dbff1fc18d7496c172768ec/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cce7bb92181c4e27dbff1fc18d7496c172768ec/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-bad-types.stderr?ref=9cce7bb92181c4e27dbff1fc18d7496c172768ec", "patch": "@@ -1,10 +1,11 @@\n error[E0308]: mismatched types\n   --> $DIR/static-mut-bad-types.rs:5:13\n    |\n+LL | static mut a: isize = 3;\n+   |               ----- expected due to this type\n+...\n LL |         a = true;\n-   |         -   ^^^^ expected `isize`, found `bool`\n-   |         |\n-   |         expected due to the type of this binding\n+   |             ^^^^ expected `isize`, found `bool`\n \n error: aborting due to previous error\n "}]}