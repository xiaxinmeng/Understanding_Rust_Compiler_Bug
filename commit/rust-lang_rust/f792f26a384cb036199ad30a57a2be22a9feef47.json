{"sha": "f792f26a384cb036199ad30a57a2be22a9feef47", "node_id": "C_kwDOAAsO6NoAKGY3OTJmMjZhMzg0Y2IwMzYxOTlhZDMwYTU3YTJiZTIyYTlmZWVmNDc", "commit": {"author": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2022-04-01T05:51:37Z"}, "committer": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2022-07-23T17:51:37Z"}, "message": "Update documentation for LLVM CFI support\n\nThis commit updates the documentation for the LLVM Control Flow\nIntegrity (CFI) support in the Rust compiler (see #95548 and #89653).", "tree": {"sha": "cba59a0aa69edf29367127ca5f8c26aa4239beb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba59a0aa69edf29367127ca5f8c26aa4239beb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f792f26a384cb036199ad30a57a2be22a9feef47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f792f26a384cb036199ad30a57a2be22a9feef47", "html_url": "https://github.com/rust-lang/rust/commit/f792f26a384cb036199ad30a57a2be22a9feef47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f792f26a384cb036199ad30a57a2be22a9feef47/comments", "author": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ad7a646a5df1c7e37fc4529f0f1000091ac902d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad7a646a5df1c7e37fc4529f0f1000091ac902d", "html_url": "https://github.com/rust-lang/rust/commit/5ad7a646a5df1c7e37fc4529f0f1000091ac902d"}], "stats": {"total": 114, "additions": 85, "deletions": 29}, "files": [{"sha": "448c0a4a3d201c42229a08635d3cab47347664ea", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 85, "deletions": 29, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/f792f26a384cb036199ad30a57a2be22a9feef47/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/f792f26a384cb036199ad30a57a2be22a9feef47/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=f792f26a384cb036199ad30a57a2be22a9feef47", "patch": "@@ -191,7 +191,8 @@ Shadow byte legend (one shadow byte represents 8 application bytes):\n \n The LLVM Control Flow Integrity (CFI) support in the Rust compiler initially\n provides forward-edge control flow protection for Rust-compiled code only by\n-aggregating function pointers in groups identified by their number of arguments.\n+aggregating function pointers in groups identified by their return and parameter\n+types.\n \n Forward-edge control flow protection for C or C++ and Rust -compiled code \"mixed\n binaries\" (i.e., for when C or C++ and Rust -compiled code share the same\n@@ -243,7 +244,7 @@ fn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n fn main() {\n     let answer = do_twice(add_one, 5);\n \n-    println!(\"The answer is: {answer}\");\n+    println!(\"The answer is: {}\", answer);\n \n     println!(\"With CFI enabled, you should not see the next answer\");\n     let f: fn(i32) -> i32 = unsafe {\n@@ -253,30 +254,30 @@ fn main() {\n     };\n     let next_answer = do_twice(f, 5);\n \n-    println!(\"The next answer is: {next_answer}\");\n+    println!(\"The next answer is: {}\", next_answer);\n }\n ```\n Fig. 1.\u2003Modified example from the [Advanced Functions and\n Closures][rust-book-ch19-05] chapter of the [The Rust Programming\n Language][rust-book] book.\n \n-[//]: # (FIXME: Replace with output from cargo using nightly when #89652 is merged)\n-\n ```shell\n-$ rustc rust_cfi.rs -o rust_cfi\n-$ ./rust_cfi\n+$ cargo run --release\n+   Compiling rust-cfi-1 v0.1.0 (/home/rcvalle/rust-cfi-1)\n+    Finished release [optimized] target(s) in 0.76s\n+     Running `target/release/rust-cfi-1`\n The answer is: 12\n With CFI enabled, you should not see the next answer\n The next answer is: 14\n $\n ```\n Fig. 2.\u2003Build and execution of the modified example with LLVM CFI disabled.\n \n-[//]: # (FIXME: Replace with output from cargo using nightly when #89652 is merged)\n-\n ```shell\n-$ rustc -Clto -Zsanitizer=cfi rust_cfi.rs -o rust_cfi\n-$ ./rust_cfi\n+$ RUSTFLAGS=\"-Zsanitizer=cfi -Cembed-bitcode=yes -Clto\" cargo run --release\n+   Compiling rust-cfi-1 v0.1.0 (/home/rcvalle/rust-cfi-1)\n+    Finished release [optimized] target(s) in 3.39s\n+     Running `target/release/rust-cfi-1`\n The answer is: 12\n With CFI enabled, you should not see the next answer\n Illegal instruction\n@@ -306,37 +307,37 @@ fn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n fn main() {\n     let answer = do_twice(add_one, 5);\n \n-    println!(\"The answer is: {answer}\");\n+    println!(\"The answer is: {}\", answer);\n \n     println!(\"With CFI enabled, you should not see the next answer\");\n     let f: fn(i32) -> i32 =\n         unsafe { mem::transmute::<*const u8, fn(i32) -> i32>(add_two as *const u8) };\n     let next_answer = do_twice(f, 5);\n \n-    println!(\"The next answer is: {next_answer}\");\n+    println!(\"The next answer is: {}\", next_answer);\n }\n ```\n Fig. 4.\u2003Another modified example from the [Advanced Functions and\n Closures][rust-book-ch19-05] chapter of the [The Rust Programming\n Language][rust-book] book.\n \n-[//]: # (FIXME: Replace with output from cargo using nightly when #89652 is merged)\n-\n ```shell\n-$ rustc rust_cfi.rs -o rust_cfi\n-$ ./rust_cfi\n+$ cargo run --release\n+   Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)\n+    Finished release [optimized] target(s) in 0.76s\n+     Running `target/release/rust-cfi-2`\n The answer is: 12\n With CFI enabled, you should not see the next answer\n The next answer is: 14\n $\n ```\n Fig. 5.\u2003Build and execution of the modified example with LLVM CFI disabled.\n \n-[//]: # (FIXME: Replace with output from cargo using nightly when #89652 is merged)\n-\n ```shell\n-$ rustc -Clto -Zsanitizer=cfi rust_cfi.rs -o rust_cfi\n-$ ./rust_cfi\n+$ RUSTFLAGS=\"-Zsanitizer=cfi -Cembed-bitcode=yes -Clto\" cargo run --release\n+   Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)\n+    Finished release [optimized] target(s) in 3.38s\n+     Running `target/release/rust-cfi-2`\n The answer is: 12\n With CFI enabled, you should not see the next answer\n Illegal instruction\n@@ -346,14 +347,69 @@ Fig. 6.\u2003Build and execution of the modified example with LLVM CFI enabled.\n \n When LLVM CFI is enabled, if there are any attempts to change/hijack control\n flow using an indirect branch/call to a function with different number of\n-arguments than intended/passed in the call/branch site, the execution is also\n-terminated (see Fig. 6).\n-\n-Forward-edge control flow protection not only by aggregating function pointers\n-in groups identified by their number of arguments, but also their argument\n-types, will also be provided in later work by defining and using compatible type\n-identifiers (see Type metadata in the design document in the tracking\n-issue [#89653](https://github.com/rust-lang/rust/issues/89653)).\n+parameters than arguments intended/passed in the call/branch site, the\n+execution is also terminated (see Fig. 6).\n+\n+```rust\n+use std::mem;\n+\n+fn add_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+fn add_two(x: i64) -> i64 {\n+    x + 2\n+}\n+\n+fn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    f(arg) + f(arg)\n+}\n+\n+fn main() {\n+    let answer = do_twice(add_one, 5);\n+\n+    println!(\"The answer is: {}\", answer);\n+\n+    println!(\"With CFI enabled, you should not see the next answer\");\n+    let f: fn(i32) -> i32 =\n+        unsafe { mem::transmute::<*const u8, fn(i32) -> i32>(add_two as *const u8) };\n+    let next_answer = do_twice(f, 5);\n+\n+    println!(\"The next answer is: {}\", next_answer);\n+}\n+```\n+Fig. 7.\u2003Another modified example from the [Advanced Functions and\n+Closures][rust-book-ch19-05] chapter of the [The Rust Programming\n+Language][rust-book] book.\n+\n+```shell\n+ cargo run --release\n+   Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n+    Finished release [optimized] target(s) in 0.74s\n+     Running `target/release/rust-cfi-3`\n+The answer is: 12\n+With CFI enabled, you should not see the next answer\n+The next answer is: 14\n+$\n+```\n+Fig. 8.\u2003Build and execution of the modified example with LLVM CFI disabled.\n+\n+```shell\n+$ RUSTFLAGS=\"-Zsanitizer=cfi -Cembed-bitcode=yes -Clto\" cargo run --release\n+   Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n+    Finished release [optimized] target(s) in 3.40s\n+     Running `target/release/rust-cfi-3`\n+The answer is: 12\n+With CFI enabled, you should not see the next answer\n+Illegal instruction\n+$\n+```\n+Fig. 9.\u2003Build and execution of the modified example with LLVM CFI enabled.\n+\n+When LLVM CFI is enabled, if there are any attempts to change/hijack control\n+flow using an indirect branch/call to a function with different return and\n+parameter types than the return type expected and arguments intended/passed in\n+the call/branch site, the execution is also terminated (see Fig. 9).\n \n [rust-book-ch19-05]: https://doc.rust-lang.org/book/ch19-05-advanced-functions-and-closures.html\n [rust-book]: https://doc.rust-lang.org/book/title-page.html"}]}