{"sha": "3374a7d6f85081826e6256f97baca0795af29570", "node_id": "C_kwDOAAsO6NoAKDMzNzRhN2Q2Zjg1MDgxODI2ZTYyNTZmOTdiYWNhMDc5NWFmMjk1NzA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-03T17:12:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-03T17:12:18Z"}, "message": "Rollup merge of #102607 - WaffleLapkin:docky_docky_slice_from_ptr_range, r=joshtriplett\n\nImprove documentation of `slice::{from_ptr_range, from_ptr_range_mut}`\n\nDocument panic conditions (`T` is a ZST) and sync docs of shared/unique version.\n\ncc `@wx-csy`", "tree": {"sha": "6d68649bda7162556d90aec4acecad29a903d0a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d68649bda7162556d90aec4acecad29a903d0a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3374a7d6f85081826e6256f97baca0795af29570", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjOxfyCRBK7hj4Ov3rIwAAiOYIAA6yOFE6ClVHa1zH6d7YyKDG\n1n9eDWNhFl42anZK3Xo9TbG6/CO+P1/7RUmZx/hpCfNuVIS1houi62kpUjO+nAYX\n25Yixi4TLs6WnjNUruOAAqri/dVRZSu4uqBoFXOXvXIquC7rPpCtq9pP5/gDTS6w\nXDInXZsuIDq6K5vjYwJWSM3ECT6oYwhEclxg62Ue4N71xTgWJ2areD9bZxWNaNVj\nmqLZHjtja4tHUTYDvQ2cljngYb/F/5Ov67Km+ROF6lUZo7aGr3b0oBH26C8K2LiL\n3thb4WMvcC5Z4FV3sqO+5n+5OSP8GnoEkUGgOGANHOjjxFKiDdWH4sgY1iyPmnY=\n=zXv5\n-----END PGP SIGNATURE-----\n", "payload": "tree 6d68649bda7162556d90aec4acecad29a903d0a4\nparent 8ede2340b76f605c56cf6757a74d265200ab1c1e\nparent 2cd5fafd2597e4d2561bcfe54afb5a9f16b72cc5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664817138 +0200\ncommitter GitHub <noreply@github.com> 1664817138 +0200\n\nRollup merge of #102607 - WaffleLapkin:docky_docky_slice_from_ptr_range, r=joshtriplett\n\nImprove documentation of `slice::{from_ptr_range, from_ptr_range_mut}`\n\nDocument panic conditions (`T` is a ZST) and sync docs of shared/unique version.\n\ncc `@wx-csy`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3374a7d6f85081826e6256f97baca0795af29570", "html_url": "https://github.com/rust-lang/rust/commit/3374a7d6f85081826e6256f97baca0795af29570", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3374a7d6f85081826e6256f97baca0795af29570/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ede2340b76f605c56cf6757a74d265200ab1c1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ede2340b76f605c56cf6757a74d265200ab1c1e", "html_url": "https://github.com/rust-lang/rust/commit/8ede2340b76f605c56cf6757a74d265200ab1c1e"}, {"sha": "2cd5fafd2597e4d2561bcfe54afb5a9f16b72cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd5fafd2597e4d2561bcfe54afb5a9f16b72cc5", "html_url": "https://github.com/rust-lang/rust/commit/2cd5fafd2597e4d2561bcfe54afb5a9f16b72cc5"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "3c5abd215a4b76ec244fd6e03decb8543d8b605b", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3374a7d6f85081826e6256f97baca0795af29570/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3374a7d6f85081826e6256f97baca0795af29570/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=3374a7d6f85081826e6256f97baca0795af29570", "patch": "@@ -188,6 +188,10 @@ pub const fn from_mut<T>(s: &mut T) -> &mut [T] {\n ///\n /// Note that a range created from [`slice::as_ptr_range`] fulfills these requirements.\n ///\n+/// # Panics\n+///\n+/// This function panics if `T` is a Zero-Sized Type (\u201cZST\u201d).\n+///\n /// # Caveat\n ///\n /// The lifetime for the returned slice is inferred from its usage. To\n@@ -219,9 +223,15 @@ pub const unsafe fn from_ptr_range<'a, T>(range: Range<*const T>) -> &'a [T] {\n     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n }\n \n-/// Performs the same functionality as [`from_ptr_range`], except that a\n+/// Forms a mutable slice from a pointer range.\n+///\n+/// This is the same functionality as [`from_ptr_range`], except that a\n /// mutable slice is returned.\n ///\n+/// This function is useful for interacting with foreign interfaces which\n+/// use two pointers to refer to a range of elements in memory, as is\n+/// common in C++.\n+///\n /// # Safety\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n@@ -247,6 +257,18 @@ pub const unsafe fn from_ptr_range<'a, T>(range: Range<*const T>) -> &'a [T] {\n ///\n /// Note that a range created from [`slice::as_mut_ptr_range`] fulfills these requirements.\n ///\n+/// # Panics\n+///\n+/// This function panics if `T` is a Zero-Sized Type (\u201cZST\u201d).\n+///\n+/// # Caveat\n+///\n+/// The lifetime for the returned slice is inferred from its usage. To\n+/// prevent accidental misuse, it's suggested to tie the lifetime to whichever\n+/// source lifetime is safe in the context, such as by providing a helper\n+/// function taking the lifetime of a host value for the slice, or by explicit\n+/// annotation.\n+///\n /// # Examples\n ///\n /// ```"}]}