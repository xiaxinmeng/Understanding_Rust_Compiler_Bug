{"sha": "027a232755fa9728e9699337267f6675dfd0a8ba", "node_id": "C_kwDOAAsO6NoAKDAyN2EyMzI3NTVmYTk3MjhlOTY5OTMzNzI2N2Y2Njc1ZGZkMGE4YmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-10T17:59:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-10T17:59:27Z"}, "message": "Auto merge of #95487 - cjgillot:menhir, r=oli-obk\n\nAvoid accessing HIR from MIR passes\n\n`hir_owner_nodes` contains a lot of information, and the query result is typically dirty. This forces dependent queries to be re-executed needlessly.\n\nThis PR refactors some accesses to HIR to go through more targeted queries that yield the same result.\n\nBased on https://github.com/rust-lang/rust/pull/95435 and https://github.com/rust-lang/rust/pull/95436", "tree": {"sha": "9dbdc83bbb585766936912f74dee789f19ef1daa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dbdc83bbb585766936912f74dee789f19ef1daa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/027a232755fa9728e9699337267f6675dfd0a8ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/027a232755fa9728e9699337267f6675dfd0a8ba", "html_url": "https://github.com/rust-lang/rust/commit/027a232755fa9728e9699337267f6675dfd0a8ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/027a232755fa9728e9699337267f6675dfd0a8ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f32b73bdb3833c18c73fe3062bde8e1721ccca", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f32b73bdb3833c18c73fe3062bde8e1721ccca", "html_url": "https://github.com/rust-lang/rust/commit/18f32b73bdb3833c18c73fe3062bde8e1721ccca"}, {"sha": "bbacfcb6c4b25ad4741ae9cf32db342f7e612b29", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbacfcb6c4b25ad4741ae9cf32db342f7e612b29", "html_url": "https://github.com/rust-lang/rust/commit/bbacfcb6c4b25ad4741ae9cf32db342f7e612b29"}], "stats": {"total": 199, "additions": 89, "deletions": 110}, "files": [{"sha": "0a1eae39d75ce59b3dbad6dea9f4fca259523a2e", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -23,7 +23,6 @@ use rustc_data_structures::graph::dominators::Dominators;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::Node;\n use rustc_index::bit_set::ChunkedBitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n@@ -288,14 +287,16 @@ fn do_mir_borrowck<'a, 'tcx>(\n         .pass_name(\"borrowck\")\n         .iterate_to_fixpoint();\n \n-    let def_hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n-    let movable_generator = !matches!(\n-        tcx.hir().get(def_hir_id),\n-        Node::Expr(&hir::Expr {\n-            kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),\n-            ..\n-        })\n-    );\n+    let movable_generator =\n+        // The first argument is the generator type passed by value\n+        if let Some(local) = body.local_decls.raw.get(1)\n+        // Get the interior types and substs which typeck computed\n+        && let ty::Generator(_, _, hir::Movability::Static) = local.ty.kind()\n+    {\n+        false\n+    } else {\n+        true\n+    };\n \n     for (idx, move_data_results) in promoted_errors {\n         let promoted_body = &promoted[idx];\n@@ -385,7 +386,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         let scope = mbcx.body.source_info(location).scope;\n         let lint_root = match &mbcx.body.source_scopes[scope].local_data {\n             ClearCrossCrate::Set(data) => data.lint_root,\n-            _ => def_hir_id,\n+            _ => tcx.hir().local_def_id_to_hir_id(def.did),\n         };\n \n         // Span and message don't matter; we overwrite them below anyway"}, {"sha": "e26adba0d3002eeb9528577f805c876e7f610bd4", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -828,10 +828,8 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n     mut f: impl FnMut(ty::Region<'tcx>),\n ) {\n     if let Some((owner, late_bounds)) = tcx.is_late_bound_map(fn_def_id.expect_local()) {\n-        for &late_bound in late_bounds.iter() {\n-            let hir_id = HirId { owner, local_id: late_bound };\n-            let name = tcx.hir().name(hir_id);\n-            let region_def_id = tcx.hir().local_def_id(hir_id);\n+        for &region_def_id in late_bounds.iter() {\n+            let name = tcx.item_name(region_def_id.to_def_id());\n             let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                 scope: owner.to_def_id(),\n                 bound_region: ty::BoundRegionKind::BrNamed(region_def_id.to_def_id(), name),"}, {"sha": "625f57b872bf7ecf6fc3a39a5663994b05847175", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -222,7 +222,7 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n \n         // `async` functions cannot be `const fn`. This is checked during AST lowering, so there's\n         // no need to emit duplicate errors here.\n-        if is_async_fn(self.ccx) || body.generator.is_some() {\n+        if self.ccx.is_async() || body.generator.is_some() {\n             tcx.sess.delay_span_bug(body.span, \"`async` functions cannot be `const fn`\");\n             return;\n         }\n@@ -1056,12 +1056,8 @@ fn is_int_bool_or_char(ty: Ty<'_>) -> bool {\n     ty.is_bool() || ty.is_integral() || ty.is_char()\n }\n \n-fn is_async_fn(ccx: &ConstCx<'_, '_>) -> bool {\n-    ccx.fn_sig().map_or(false, |sig| sig.header.asyncness == hir::IsAsync::Async)\n-}\n-\n fn emit_unstable_in_stable_error(ccx: &ConstCx<'_, '_>, span: Span, gate: Symbol) {\n-    let attr_span = ccx.fn_sig().map_or(ccx.body.span, |sig| sig.span.shrink_to_lo());\n+    let attr_span = ccx.tcx.def_span(ccx.def_id()).shrink_to_lo();\n \n     ccx.tcx\n         .sess"}, {"sha": "25ba97ee60567d0ba3f882256925f77d89db5781", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -61,14 +61,8 @@ impl<'mir, 'tcx> ConstCx<'mir, 'tcx> {\n             && is_const_stable_const_fn(self.tcx, self.def_id().to_def_id())\n     }\n \n-    /// Returns the function signature of the item being const-checked if it is a `fn` or `const fn`.\n-    pub fn fn_sig(&self) -> Option<&'tcx hir::FnSig<'tcx>> {\n-        // Get this from the HIR map instead of a query to avoid cycle errors.\n-        //\n-        // FIXME: Is this still an issue?\n-        let hir_map = self.tcx.hir();\n-        let hir_id = hir_map.local_def_id_to_hir_id(self.def_id());\n-        hir_map.fn_sig_by_hir_id(hir_id)\n+    fn is_async(&self) -> bool {\n+        self.tcx.asyncness(self.def_id()) == hir::IsAsync::Async\n     }\n }\n "}, {"sha": "53d60d280c001dcf3179d0488facd869e828a5dc", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -223,6 +223,14 @@ impl DefKind {\n             | DefKind::Impl => None,\n         }\n     }\n+\n+    #[inline]\n+    pub fn is_fn_like(self) -> bool {\n+        match self {\n+            DefKind::Fn | DefKind::AssocFn | DefKind::Closure | DefKind::Generator => true,\n+            _ => false,\n+        }\n+    }\n }\n \n /// The resolution of a path or export."}, {"sha": "70586cefaeee1fea4c5158b2794c011aa67a61de", "filename": "compiler/rustc_middle/src/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -64,7 +64,7 @@ pub struct ResolveLifetimes {\n     /// Set of lifetime def ids that are late-bound; a region can\n     /// be late-bound if (a) it does NOT appear in a where-clause and\n     /// (b) it DOES appear in the arguments.\n-    pub late_bound: FxHashMap<LocalDefId, FxHashSet<ItemLocalId>>,\n+    pub late_bound: FxHashMap<LocalDefId, FxHashSet<LocalDefId>>,\n \n     pub late_bound_vars: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Vec<ty::BoundVariableKind>>>,\n }"}, {"sha": "f38ade1076eac3481682cd48e189df9577d68eed", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -1502,8 +1502,7 @@ rustc_queries! {\n         Option<&'tcx FxHashMap<ItemLocalId, Region>> {\n         desc { \"looking up a named region\" }\n     }\n-    query is_late_bound_map(_: LocalDefId) ->\n-        Option<(LocalDefId, &'tcx FxHashSet<ItemLocalId>)> {\n+    query is_late_bound_map(_: LocalDefId) -> Option<(LocalDefId, &'tcx FxHashSet<LocalDefId>)> {\n         desc { \"testing if a region is late bound\" }\n     }\n     /// For a given item (like a struct), gets the default lifetimes to be used"}, {"sha": "5244aaaec0a3cbff9912c151daafa37a67f08504", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -2772,11 +2772,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())\n     }\n \n-    pub fn is_late_bound(self, id: HirId) -> bool {\n-        self.is_late_bound_map(id.owner)\n-            .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))\n-    }\n-\n     pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {\n         self.mk_bound_variable_kinds(\n             self.late_bound_vars_map(id.owner)"}, {"sha": "aa47630a26ac046cfd19dc84824a47bf7e89c7a0", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -71,8 +71,9 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n         }\n \n         let def_id = body.source.def_id().expect_local();\n-        let is_fn_like = tcx.hir().get_by_def_id(def_id).fn_kind().is_some();\n-        let is_assoc_const = tcx.def_kind(def_id) == DefKind::AssocConst;\n+        let def_kind = tcx.def_kind(def_id);\n+        let is_fn_like = def_kind.is_fn_like();\n+        let is_assoc_const = def_kind == DefKind::AssocConst;\n \n         // Only run const prop on functions, methods, closures and associated constants\n         if !is_fn_like && !is_assoc_const {"}, {"sha": "50400cdeac978a876bb6dd01d95efe5502924ef9", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> MirLint<'tcx> for ConstProp {\n         }\n \n         let def_id = body.source.def_id().expect_local();\n-        let is_fn_like = tcx.hir().get_by_def_id(def_id).fn_kind().is_some();\n+        let is_fn_like = tcx.def_kind(def_id).is_fn_like();\n         let is_assoc_const = tcx.def_kind(def_id) == DefKind::AssocConst;\n \n         // Only run const prop on functions, methods, closures and associated constants"}, {"sha": "d395ccd3819336640da691dd9f6628c72b4845d5", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -366,7 +366,7 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n \n     let mir_borrowck = tcx.mir_borrowck_opt_const_arg(def);\n \n-    let is_fn_like = tcx.hir().get_by_def_id(def.did).fn_kind().is_some();\n+    let is_fn_like = tcx.def_kind(def.did).is_fn_like();\n     if is_fn_like {\n         let did = def.did.to_def_id();\n         let def = ty::WithOptConstParam::unknown(did);"}, {"sha": "d10cac2ac7635f03d0c3668d9da12108a79179cd", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -725,9 +725,6 @@ fn build_call_shim<'tcx>(\n pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n     debug_assert!(tcx.is_constructor(ctor_id));\n \n-    let span =\n-        tcx.hir().span_if_local(ctor_id).unwrap_or_else(|| bug!(\"no span for ctor {:?}\", ctor_id));\n-\n     let param_env = tcx.param_env(ctor_id);\n \n     // Normalize the sig.\n@@ -740,6 +737,8 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n \n     debug!(\"build_ctor: ctor_id={:?} sig={:?}\", ctor_id, sig);\n \n+    let span = tcx.def_span(ctor_id);\n+\n     let local_decls = local_decls_for_sig(&sig, span);\n \n     let source_info = SourceInfo::outermost(span);"}, {"sha": "2bf01146fae027709d33c1af365940c4859eeb0d", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -427,15 +427,15 @@ fn resolve_lifetimes_trait_definition(\n     tcx: TyCtxt<'_>,\n     local_def_id: LocalDefId,\n ) -> ResolveLifetimes {\n-    convert_named_region_map(do_resolve(tcx, local_def_id, true, false))\n+    convert_named_region_map(tcx, do_resolve(tcx, local_def_id, true, false))\n }\n \n /// Computes the `ResolveLifetimes` map that contains data for an entire `Item`.\n /// You should not read the result of this query directly, but rather use\n /// `named_region_map`, `is_late_bound_map`, etc.\n #[tracing::instrument(level = \"debug\", skip(tcx))]\n fn resolve_lifetimes(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> ResolveLifetimes {\n-    convert_named_region_map(do_resolve(tcx, local_def_id, false, false))\n+    convert_named_region_map(tcx, do_resolve(tcx, local_def_id, false, false))\n }\n \n fn do_resolve(\n@@ -468,7 +468,7 @@ fn do_resolve(\n     named_region_map\n }\n \n-fn convert_named_region_map(named_region_map: NamedRegionMap) -> ResolveLifetimes {\n+fn convert_named_region_map(tcx: TyCtxt<'_>, named_region_map: NamedRegionMap) -> ResolveLifetimes {\n     let mut rl = ResolveLifetimes::default();\n \n     for (hir_id, v) in named_region_map.defs {\n@@ -477,7 +477,8 @@ fn convert_named_region_map(named_region_map: NamedRegionMap) -> ResolveLifetime\n     }\n     for hir_id in named_region_map.late_bound {\n         let map = rl.late_bound.entry(hir_id.owner).or_default();\n-        map.insert(hir_id.local_id);\n+        let def_id = tcx.hir().local_def_id(hir_id);\n+        map.insert(def_id);\n     }\n     for (hir_id, v) in named_region_map.late_bound_vars {\n         let map = rl.late_bound_vars.entry(hir_id.owner).or_default();\n@@ -537,7 +538,7 @@ fn item_for(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> LocalDefId {\n fn is_late_bound_map<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n-) -> Option<(LocalDefId, &'tcx FxHashSet<ItemLocalId>)> {\n+) -> Option<(LocalDefId, &'tcx FxHashSet<LocalDefId>)> {\n     match tcx.def_kind(def_id) {\n         DefKind::AnonConst | DefKind::InlineConst => {\n             let mut def_id = tcx\n@@ -774,8 +775,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 });\n                             }\n                             for (&owner, late_bound) in resolved_lifetimes.late_bound.iter() {\n-                                late_bound.iter().for_each(|&local_id| {\n-                                    self.map.late_bound.insert(hir::HirId { owner, local_id });\n+                                late_bound.iter().for_each(|&id| {\n+                                    let hir_id = self.tcx.local_def_id_to_hir_id(id);\n+                                    debug_assert_eq!(owner, hir_id.owner);\n+                                    self.map.late_bound.insert(hir_id);\n                                 });\n                             }\n                             for (&owner, late_bound_vars) in"}, {"sha": "0ff0267d0ce768ad03807b72fd32b79922790f58", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -97,7 +97,6 @@\n extern crate rustc_middle;\n \n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n-use rustc_hir::Node;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n use rustc_middle::ty::query::Providers;\n@@ -168,17 +167,14 @@ fn compute_symbol_name<'tcx>(\n \n     debug!(\"symbol_name(def_id={:?}, substs={:?})\", def_id, substs);\n \n-    // FIXME(eddyb) Precompute a custom symbol name based on attributes.\n-    let is_foreign = if let Some(def_id) = def_id.as_local() {\n+    if let Some(def_id) = def_id.as_local() {\n         if tcx.proc_macro_decls_static(()) == Some(def_id) {\n             let stable_crate_id = tcx.sess.local_stable_crate_id();\n             return tcx.sess.generate_proc_macro_decls_symbol(stable_crate_id);\n         }\n-        matches!(tcx.hir().get_by_def_id(def_id), Node::ForeignItem(_))\n-    } else {\n-        tcx.is_foreign_item(def_id)\n-    };\n+    }\n \n+    // FIXME(eddyb) Precompute a custom symbol name based on attributes.\n     let attrs = tcx.codegen_fn_attrs(def_id);\n \n     // Foreign items by default use no mangling for their symbol name. There's a\n@@ -197,7 +193,7 @@ fn compute_symbol_name<'tcx>(\n     //   show up in the `wasm-import-name` custom attribute in LLVM IR.\n     //\n     // [1]: https://bugs.llvm.org/show_bug.cgi?id=44316\n-    if is_foreign\n+    if tcx.is_foreign_item(def_id)\n         && (!tcx.sess.target.is_like_wasm\n             || !tcx.wasm_import_module_map(def_id.krate).contains_key(&def_id))\n     {"}, {"sha": "6ad71bdb48169bfdf5eb29751804f7b5d3b7186f", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -414,12 +414,7 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n /// Check if a function is async.\n fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n     let node = tcx.hir().get_by_def_id(def_id.expect_local());\n-\n-    let fn_kind = node.fn_kind().unwrap_or_else(|| {\n-        bug!(\"asyncness: expected fn-like node but got `{:?}`\", def_id);\n-    });\n-\n-    fn_kind.asyncness()\n+    if let Some(fn_kind) = node.fn_kind() { fn_kind.asyncness() } else { hir::IsAsync::NotAsync }\n }\n \n /// Don't call this directly: use ``tcx.conservative_is_privately_uninhabited`` instead."}, {"sha": "153ab8d95fd4bdcec34b3046a46b9e596058f9ad", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -1388,6 +1388,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n \n     fn has_late_bound_regions<'tcx>(\n         tcx: TyCtxt<'tcx>,\n+        def_id: LocalDefId,\n         generics: &'tcx hir::Generics<'tcx>,\n         decl: &'tcx hir::FnDecl<'tcx>,\n     ) -> Option<Span> {\n@@ -1396,9 +1397,14 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             outer_index: ty::INNERMOST,\n             has_late_bound_regions: None,\n         };\n+        let late_bound_map = tcx.is_late_bound_map(def_id);\n+        let is_late_bound = |id| {\n+            let id = tcx.hir().local_def_id(id);\n+            late_bound_map.map_or(false, |(_, set)| set.contains(&id))\n+        };\n         for param in generics.params {\n             if let GenericParamKind::Lifetime { .. } = param.kind {\n-                if tcx.is_late_bound(param.hir_id) {\n+                if is_late_bound(param.hir_id) {\n                     return Some(param.span);\n                 }\n             }\n@@ -1410,25 +1416,25 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     match node {\n         Node::TraitItem(item) => match item.kind {\n             hir::TraitItemKind::Fn(ref sig, _) => {\n-                has_late_bound_regions(tcx, &item.generics, sig.decl)\n+                has_late_bound_regions(tcx, item.def_id, &item.generics, sig.decl)\n             }\n             _ => None,\n         },\n         Node::ImplItem(item) => match item.kind {\n             hir::ImplItemKind::Fn(ref sig, _) => {\n-                has_late_bound_regions(tcx, &item.generics, sig.decl)\n+                has_late_bound_regions(tcx, item.def_id, &item.generics, sig.decl)\n             }\n             _ => None,\n         },\n         Node::ForeignItem(item) => match item.kind {\n             hir::ForeignItemKind::Fn(fn_decl, _, ref generics) => {\n-                has_late_bound_regions(tcx, generics, fn_decl)\n+                has_late_bound_regions(tcx, item.def_id, generics, fn_decl)\n             }\n             _ => None,\n         },\n         Node::Item(item) => match item.kind {\n             hir::ItemKind::Fn(ref sig, .., ref generics, _) => {\n-                has_late_bound_regions(tcx, generics, sig.decl)\n+                has_late_bound_regions(tcx, item.def_id, generics, sig.decl)\n             }\n             _ => None,\n         },\n@@ -1677,7 +1683,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         params.push(opt_self);\n     }\n \n-    let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n+    let early_lifetimes = early_bound_lifetimes_from_generics(tcx, hir_id.owner, ast_generics);\n     params.extend(early_lifetimes.enumerate().map(|(i, param)| ty::GenericParamDef {\n         name: param.name.ident().name,\n         index: own_start + i as u32,\n@@ -2034,10 +2040,23 @@ fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ImplPolarity {\n /// `resolve_lifetime::early_bound_lifetimes`.\n fn early_bound_lifetimes_from_generics<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'tcx>,\n+    def_id: LocalDefId,\n     generics: &'a hir::Generics<'a>,\n ) -> impl Iterator<Item = &'a hir::GenericParam<'a>> + Captures<'tcx> {\n+    let late_bound_map = if generics.params.is_empty() {\n+        // This function may be called on `def_id == CRATE_DEF_ID`,\n+        // which makes `is_late_bound_map` ICE.  Don't even try if there\n+        // is no generic parameter.\n+        None\n+    } else {\n+        tcx.is_late_bound_map(def_id)\n+    };\n+    let is_late_bound = move |hir_id| {\n+        let id = tcx.hir().local_def_id(hir_id);\n+        late_bound_map.map_or(false, |(_, set)| set.contains(&id))\n+    };\n     generics.params.iter().filter(move |param| match param.kind {\n-        GenericParamKind::Lifetime { .. } => !tcx.is_late_bound(param.hir_id),\n+        GenericParamKind::Lifetime { .. } => !is_late_bound(param.hir_id),\n         _ => false,\n     })\n }\n@@ -2221,7 +2240,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     // well. In the case of parameters declared on a fn or method, we\n     // have to be careful to only iterate over early-bound regions.\n     let mut index = parent_count + has_own_self as u32;\n-    for param in early_bound_lifetimes_from_generics(tcx, ast_generics) {\n+    for param in early_bound_lifetimes_from_generics(tcx, hir_id.owner, ast_generics) {\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n             index,"}, {"sha": "e622192f2c94dab0b2fb10010938780275e3b509", "filename": "compiler/rustc_typeck/src/variance/mod.rs", "status": "modified", "additions": 13, "deletions": 38, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027a232755fa9728e9699337267f6675dfd0a8ba/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs?ref=027a232755fa9728e9699337267f6675dfd0a8ba", "patch": "@@ -3,9 +3,8 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/variance.html\n \n-use hir::Node;\n use rustc_arena::DroplessArena;\n-use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, CrateVariancesMap, TyCtxt};\n@@ -38,42 +37,18 @@ fn crate_variances(tcx: TyCtxt<'_>, (): ()) -> CrateVariancesMap<'_> {\n }\n \n fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n-    let id = tcx.hir().local_def_id_to_hir_id(item_def_id.expect_local());\n-    let unsupported = || {\n-        // Variance not relevant.\n-        span_bug!(tcx.hir().span(id), \"asked to compute variance for wrong kind of item\")\n-    };\n-    match tcx.hir().get(id) {\n-        Node::Item(item) => match item.kind {\n-            hir::ItemKind::Enum(..)\n-            | hir::ItemKind::Struct(..)\n-            | hir::ItemKind::Union(..)\n-            | hir::ItemKind::Fn(..) => {}\n-\n-            _ => unsupported(),\n-        },\n-\n-        Node::TraitItem(item) => match item.kind {\n-            hir::TraitItemKind::Fn(..) => {}\n-\n-            _ => unsupported(),\n-        },\n-\n-        Node::ImplItem(item) => match item.kind {\n-            hir::ImplItemKind::Fn(..) => {}\n-\n-            _ => unsupported(),\n-        },\n-\n-        Node::ForeignItem(item) => match item.kind {\n-            hir::ForeignItemKind::Fn(..) => {}\n-\n-            _ => unsupported(),\n-        },\n-\n-        Node::Variant(_) | Node::Ctor(..) => {}\n-\n-        _ => unsupported(),\n+    match tcx.def_kind(item_def_id) {\n+        DefKind::Fn\n+        | DefKind::AssocFn\n+        | DefKind::Enum\n+        | DefKind::Struct\n+        | DefKind::Union\n+        | DefKind::Variant\n+        | DefKind::Ctor(..) => {}\n+        _ => {\n+            // Variance not relevant.\n+            span_bug!(tcx.def_span(item_def_id), \"asked to compute variance for wrong kind of item\")\n+        }\n     }\n \n     // Everything else must be inferred."}]}