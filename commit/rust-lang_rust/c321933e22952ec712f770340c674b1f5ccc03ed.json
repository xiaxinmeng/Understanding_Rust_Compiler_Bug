{"sha": "c321933e22952ec712f770340c674b1f5ccc03ed", "node_id": "C_kwDOAAsO6NoAKGMzMjE5MzNlMjI5NTJlYzcxMmY3NzAzNDBjNjc0YjFmNWNjYzAzZWQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-01T09:25:25Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-01T09:38:59Z"}, "message": "Give `def_span` the same SyntaxContext as `span_with_body`.", "tree": {"sha": "3df2fb0f81a491998307443d23bc9cdfd37f567b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3df2fb0f81a491998307443d23bc9cdfd37f567b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c321933e22952ec712f770340c674b1f5ccc03ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c321933e22952ec712f770340c674b1f5ccc03ed", "html_url": "https://github.com/rust-lang/rust/commit/c321933e22952ec712f770340c674b1f5ccc03ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c321933e22952ec712f770340c674b1f5ccc03ed/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de341fe668fd821f701ca970c897d167104f0a17", "url": "https://api.github.com/repos/rust-lang/rust/commits/de341fe668fd821f701ca970c897d167104f0a17", "html_url": "https://github.com/rust-lang/rust/commit/de341fe668fd821f701ca970c897d167104f0a17"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "3a42b68e53a261a6dfa9c88a4c5741e0c24a62c7", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c321933e22952ec712f770340c674b1f5ccc03ed/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c321933e22952ec712f770340c674b1f5ccc03ed/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c321933e22952ec712f770340c674b1f5ccc03ed", "patch": "@@ -937,9 +937,19 @@ impl<'hir> Map<'hir> {\n \n         let span = match self.find(hir_id)? {\n             // Function-like.\n-            Node::Item(Item { kind: ItemKind::Fn(sig, ..), .. })\n-            | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, ..), .. })\n-            | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, ..), .. }) => sig.span,\n+            Node::Item(Item { kind: ItemKind::Fn(sig, ..), span: outer_span, .. })\n+            | Node::TraitItem(TraitItem {\n+                kind: TraitItemKind::Fn(sig, ..),\n+                span: outer_span,\n+                ..\n+            })\n+            | Node::ImplItem(ImplItem {\n+                kind: ImplItemKind::Fn(sig, ..), span: outer_span, ..\n+            }) => {\n+                // Ensure that the returned span has the item's SyntaxContext, and not the\n+                // SyntaxContext of the visibility.\n+                sig.span.find_ancestor_in_same_ctxt(*outer_span).unwrap_or(*outer_span)\n+            }\n             // Constants and Statics.\n             Node::Item(Item {\n                 kind:\n@@ -981,7 +991,11 @@ impl<'hir> Map<'hir> {\n             }\n             // Other cases.\n             Node::Item(item) => match &item.kind {\n-                ItemKind::Use(path, _) => path.span,\n+                ItemKind::Use(path, _) => {\n+                    // Ensure that the returned span has the item's SyntaxContext, and not the\n+                    // SyntaxContext of the path.\n+                    path.span.find_ancestor_in_same_ctxt(item.span).unwrap_or(item.span)\n+                }\n                 _ => named_span(item.span, item.ident, item.kind.generics()),\n             },\n             Node::Variant(variant) => named_span(variant.span, variant.ident, None),\n@@ -991,11 +1005,17 @@ impl<'hir> Map<'hir> {\n                 _ => named_span(item.span, item.ident, None),\n             },\n             Node::Ctor(_) => return self.opt_span(self.get_parent_node(hir_id)),\n-            Node::Expr(Expr { kind: ExprKind::Closure(Closure { fn_decl_span, .. }), .. }) => {\n-                *fn_decl_span\n+            Node::Expr(Expr {\n+                kind: ExprKind::Closure(Closure { fn_decl_span, .. }),\n+                span,\n+                ..\n+            }) => {\n+                // Ensure that the returned span has the item's SyntaxContext.\n+                fn_decl_span.find_ancestor_in_same_ctxt(*span).unwrap_or(*span)\n             }\n             _ => self.span_with_body(hir_id),\n         };\n+        debug_assert_eq!(span.ctxt(), self.span_with_body(hir_id).ctxt());\n         Some(span)\n     }\n "}]}