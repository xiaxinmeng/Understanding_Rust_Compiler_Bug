{"sha": "8b8c7430f127bab7871011ca183f93d433375b6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOGM3NDMwZjEyN2JhYjc4NzEwMTFjYTE4M2Y5M2Q0MzMzNzViNmM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-14T16:02:45Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-14T16:06:36Z"}, "message": "re-use `mir-opt` compiletest instead of rolling our own", "tree": {"sha": "385110eced6fa1db598648f3a03c9cf9afd807cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/385110eced6fa1db598648f3a03c9cf9afd807cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b8c7430f127bab7871011ca183f93d433375b6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYUW4MAAoJEFbW7qD8Z6xGIxEP/0kIFch8twf4YczmBr7MvgB2\nsg9tBq65l5dVJjegY3znIBsRduCRLwfH8QNeIYZmMtMpYVwWMVwtoE+cRMEgUHgS\nkHwmBQCjqFXSeqIx41vgYWuzLelQd28nifjJtGr98ZI/8VVjad+/c8kKklI8EW+7\nIL6Wz87ZWEeFP351TLZWlemj5oGzxKgLnBfDk5dcud/bzYfgU+kJeGw1YXNwtyuO\n6gIEUE1J1y3LQtlyMCkfvu40JiqTl1YWOHZTAmvj42uk1rEdjyd/AIZOqUHkTcu1\nVa4p47hzFA/msbjh3KSPFWgxb7aLTkipyJ0wqiQ79c4JwEXZDKYYG/wnB6XvHcoM\nSrorJknJUODhYuI++q/P6xIFe3jXrrEpUvhz+uBPh602/M22BIp+cGydvnCIxlvC\nn2pa0fC5mZ4Rq4AjwmbL3xZ5xr9KB8KKO2k2044em+RkJYUSYjAUmqIYt3AkYyPB\n+JkMC6GK2pOCarC2qJ/8Xw4D6GnTB6cExh3+A/NxkcRKXGYgKMqKQeiQXse++5RJ\n8tyNp19r7/yBinxJ8Vuz2skwzqrD2tnyGzTpGNHjQlYxo98agEmQ4oFQrSUkAgNj\nKJZUOB08OFbiDqWcNC6M/cnPOtP4u19rpr3AQbKuJ46hcjEwUEhDACtdClRdNYYw\nVK7wGszz66xXZ6ki4P92\n=nIba\n-----END PGP SIGNATURE-----", "payload": "tree 385110eced6fa1db598648f3a03c9cf9afd807cb\nparent 69fa3ebff6c7be2f40bafc776832179f74ae0d1b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1481731365 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1481731596 +0100\n\nre-use `mir-opt` compiletest instead of rolling our own"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8c7430f127bab7871011ca183f93d433375b6c", "html_url": "https://github.com/rust-lang/rust/commit/8b8c7430f127bab7871011ca183f93d433375b6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b8c7430f127bab7871011ca183f93d433375b6c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69fa3ebff6c7be2f40bafc776832179f74ae0d1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/69fa3ebff6c7be2f40bafc776832179f74ae0d1b", "html_url": "https://github.com/rust-lang/rust/commit/69fa3ebff6c7be2f40bafc776832179f74ae0d1b"}], "stats": {"total": 71, "additions": 12, "deletions": 59}, "files": [{"sha": "c5422e48b5e13db13b43f3805dfa1a872681e5e7", "filename": "src/bin/miri.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b8c7430f127bab7871011ca183f93d433375b6c/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8c7430f127bab7871011ca183f93d433375b6c/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=8b8c7430f127bab7871011ca183f93d433375b6c", "patch": "@@ -21,7 +21,6 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         let mut control = CompileController::basic();\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n         control.after_analysis.callback = Box::new(after_analysis);\n-        control.after_analysis.stop = Compilation::Stop;\n         control\n     }\n }"}, {"sha": "f7bf16926ba7c7b432d56f43462cfa0f86d0c358", "filename": "tests/compiletest.rs", "status": "modified", "additions": 12, "deletions": 58, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8b8c7430f127bab7871011ca183f93d433375b6c/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8c7430f127bab7871011ca183f93d433375b6c/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=8b8c7430f127bab7871011ca183f93d433375b6c", "patch": "@@ -27,6 +27,15 @@ fn run_pass() {\n     compiletest::run_tests(&config);\n }\n \n+fn miri_pass(path: &str, target: &str) {\n+    let mut config = compiletest::default_config();\n+    config.mode = \"mir-opt\".parse().expect(\"Invalid mode\");\n+    config.src_base = PathBuf::from(path);\n+    config.target = target.to_owned();\n+    config.rustc_path = PathBuf::from(\"target/debug/miri\");\n+    compiletest::run_tests(&config);\n+}\n+\n fn for_all_targets<F: FnMut(String)>(sysroot: &str, mut f: F) {\n     for target in std::fs::read_dir(format!(\"{}/lib/rustlib/\", sysroot)).unwrap() {\n         let target = target.unwrap();\n@@ -57,65 +66,10 @@ fn compile_test() {\n     };\n     run_pass();\n     for_all_targets(&sysroot, |target| {\n-        let files = std::fs::read_dir(\"tests/run-pass\").unwrap();\n-        let files: Box<Iterator<Item=_>> = if let Ok(path) = std::env::var(\"MIRI_RUSTC_TEST\") {\n-            Box::new(files.chain(std::fs::read_dir(path).unwrap()))\n-        } else {\n-            Box::new(files)\n-        };\n-        let mut mir_not_found = 0;\n-        let mut crate_not_found = 0;\n-        let mut success = 0;\n-        let mut failed = 0;\n-        for file in files {\n-            let file = file.unwrap();\n-            let path = file.path();\n-\n-            if !file.metadata().unwrap().is_file() || !path.to_str().unwrap().ends_with(\".rs\") {\n-                continue;\n-            }\n-\n-            let stderr = std::io::stderr();\n-            write!(stderr.lock(), \"test [miri-pass] {} ... \", path.display()).unwrap();\n-            let mut cmd = std::process::Command::new(\"target/debug/miri\");\n-            cmd.arg(path);\n-            cmd.arg(format!(\"--target={}\", target));\n-            let libs = Path::new(&sysroot).join(\"lib\");\n-            let sysroot = libs.join(\"rustlib\").join(&target).join(\"lib\");\n-            let paths = std::env::join_paths(&[libs, sysroot]).unwrap();\n-            cmd.env(compiletest::procsrv::dylib_env_var(), paths);\n-\n-            match cmd.output() {\n-                Ok(ref output) if output.status.success() => {\n-                    success += 1;\n-                    writeln!(stderr.lock(), \"ok\").unwrap()\n-                },\n-                Ok(output) => {\n-                    let output_err = std::str::from_utf8(&output.stderr).unwrap();\n-                    if let Some(text) = output_err.splitn(2, \"no mir for `\").nth(1) {\n-                        mir_not_found += 1;\n-                        let end = text.find('`').unwrap();\n-                        writeln!(stderr.lock(), \"NO MIR FOR `{}`\", &text[..end]).unwrap();\n-                    } else if let Some(text) = output_err.splitn(2, \"can't find crate for `\").nth(1) {\n-                        crate_not_found += 1;\n-                        let end = text.find('`').unwrap();\n-                        writeln!(stderr.lock(), \"CAN'T FIND CRATE FOR `{}`\", &text[..end]).unwrap();\n-                    } else {\n-                        failed += 1;\n-                        writeln!(stderr.lock(), \"FAILED with exit code {:?}\", output.status.code()).unwrap();\n-                        writeln!(stderr.lock(), \"stdout: \\n {}\", std::str::from_utf8(&output.stdout).unwrap()).unwrap();\n-                        writeln!(stderr.lock(), \"stderr: \\n {}\", output_err).unwrap();\n-                    }\n-                }\n-                Err(e) => {\n-                    writeln!(stderr.lock(), \"FAILED: {}\", e).unwrap();\n-                    panic!(\"failed to execute miri\");\n-                },\n-            }\n+        miri_pass(\"tests/run-pass\", &target);\n+        if let Ok(path) = std::env::var(\"MIRI_RUSTC_TEST\") {\n+            miri_pass(&path, &target);\n         }\n-        let stderr = std::io::stderr();\n-        writeln!(stderr.lock(), \"{} success, {} mir not found, {} crate not found, {} failed\", success, mir_not_found, crate_not_found, failed).unwrap();\n-        assert_eq!(failed, 0, \"some tests failed\");\n     });\n     compile_fail(&sysroot);\n }"}]}