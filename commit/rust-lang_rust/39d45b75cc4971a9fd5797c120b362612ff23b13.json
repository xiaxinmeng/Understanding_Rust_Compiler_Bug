{"sha": "39d45b75cc4971a9fd5797c120b362612ff23b13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZDQ1Yjc1Y2M0OTcxYTlmZDU3OTdjMTIwYjM2MjYxMmZmMjNiMTM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-16T02:06:36Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-16T02:06:36Z"}, "message": "rustc: Anti-copy police", "tree": {"sha": "536da88dc605582b9e8583d83c759466c62509ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/536da88dc605582b9e8583d83c759466c62509ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d45b75cc4971a9fd5797c120b362612ff23b13", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d45b75cc4971a9fd5797c120b362612ff23b13", "html_url": "https://github.com/rust-lang/rust/commit/39d45b75cc4971a9fd5797c120b362612ff23b13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d45b75cc4971a9fd5797c120b362612ff23b13/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd2c7f61a9baa9551f6af4e4a76019c0c0198889", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2c7f61a9baa9551f6af4e4a76019c0c0198889", "html_url": "https://github.com/rust-lang/rust/commit/dd2c7f61a9baa9551f6af4e4a76019c0c0198889"}], "stats": {"total": 49, "additions": 22, "deletions": 27}, "files": [{"sha": "cc86d50af428864bae4ac7c6e63928d04ef0a7ef", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39d45b75cc4971a9fd5797c120b362612ff23b13/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d45b75cc4971a9fd5797c120b362612ff23b13/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=39d45b75cc4971a9fd5797c120b362612ff23b13", "patch": "@@ -63,7 +63,7 @@ pub struct EncodeParams {\n     reachable: reachable::map,\n     reexports2: middle::resolve::ExportMap2,\n     item_symbols: @mut HashMap<ast::node_id, ~str>,\n-    discrim_symbols: @mut HashMap<ast::node_id, ~str>,\n+    discrim_symbols: @mut HashMap<ast::node_id, @~str>,\n     link_meta: LinkMeta,\n     cstore: @mut cstore::CStore,\n     encode_inlined_item: encode_inlined_item\n@@ -90,7 +90,7 @@ pub struct EncodeContext {\n     reachable: reachable::map,\n     reexports2: middle::resolve::ExportMap2,\n     item_symbols: @mut HashMap<ast::node_id, ~str>,\n-    discrim_symbols: @mut HashMap<ast::node_id, ~str>,\n+    discrim_symbols: @mut HashMap<ast::node_id, @~str>,\n     link_meta: LinkMeta,\n     cstore: @mut cstore::CStore,\n     encode_inlined_item: encode_inlined_item,\n@@ -285,7 +285,7 @@ fn encode_symbol(ecx: @EncodeContext, ebml_w: writer::Encoder, id: node_id) {\n fn encode_discriminant(ecx: @EncodeContext, ebml_w: writer::Encoder,\n                        id: node_id) {\n     ebml_w.start_tag(tag_items_data_item_symbol);\n-    ebml_w.writer.write(str::to_bytes(*ecx.discrim_symbols.get(&id)));\n+    ebml_w.writer.write(str::to_bytes(**ecx.discrim_symbols.get(&id)));\n     ebml_w.end_tag();\n }\n "}, {"sha": "cd6b23aadadd50502351e3ad116cf852ab08afc1", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/39d45b75cc4971a9fd5797c120b362612ff23b13/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d45b75cc4971a9fd5797c120b362612ff23b13/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=39d45b75cc4971a9fd5797c120b362612ff23b13", "patch": "@@ -468,11 +468,9 @@ pub fn set_glue_inlining(f: ValueRef, t: ty::t) {\n \n // Double-check that we never ask LLVM to declare the same symbol twice. It\n // silently mangles such symbols, breaking our linkage model.\n-pub fn note_unique_llvm_symbol(ccx: @CrateContext, +sym: ~str) {\n-    // XXX: this should not be necessary\n-    use core::container::Set;\n+pub fn note_unique_llvm_symbol(ccx: @CrateContext, sym: @~str) {\n     if ccx.all_llvm_symbols.contains(&sym) {\n-        ccx.sess.bug(~\"duplicate LLVM symbol: \" + sym);\n+        ccx.sess.bug(~\"duplicate LLVM symbol: \" + *sym);\n     }\n     ccx.all_llvm_symbols.insert(sym);\n }\n@@ -2576,11 +2574,10 @@ pub fn trans_constant(ccx: @CrateContext, it: @ast::item) {\n                 path_name(variant.node.name),\n                 path_name(special_idents::descrim)\n             ]);\n-            let s = mangle_exported_name(ccx, p, ty::mk_int(ccx.tcx));\n+            let s = @mangle_exported_name(ccx, p, ty::mk_int(ccx.tcx));\n             let disr_val = vi[i].disr_val;\n-            // XXX: Bad copy.\n-            note_unique_llvm_symbol(ccx, copy s);\n-            let discrim_gvar = str::as_c_str(s, |buf| {\n+            note_unique_llvm_symbol(ccx, s);\n+            let discrim_gvar = str::as_c_str(*s, |buf| {\n                 unsafe {\n                     llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type, buf)\n                 }"}, {"sha": "f14096443b2b7064d10bada8c4b1c7dd03a983bd", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39d45b75cc4971a9fd5797c120b362612ff23b13/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d45b75cc4971a9fd5797c120b362612ff23b13/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=39d45b75cc4971a9fd5797c120b362612ff23b13", "patch": "@@ -173,7 +173,7 @@ pub struct CrateContext {\n      link_meta: LinkMeta,\n      enum_sizes: @mut HashMap<ty::t, uint>,\n      discrims: @mut HashMap<ast::def_id, ValueRef>,\n-     discrim_symbols: @mut HashMap<ast::node_id, ~str>,\n+     discrim_symbols: @mut HashMap<ast::node_id, @~str>,\n      tydescs: @mut HashMap<ty::t, @mut tydesc_info>,\n      // Set when running emit_tydescs to enforce that no more tydescs are\n      // created.\n@@ -215,7 +215,7 @@ pub struct CrateContext {\n      symbol_hasher: @hash::State,\n      type_hashcodes: @mut HashMap<ty::t, @str>,\n      type_short_names: @mut HashMap<ty::t, ~str>,\n-     all_llvm_symbols: @mut HashSet<~str>,\n+     all_llvm_symbols: @mut HashSet<@~str>,\n      tcx: ty::ctxt,\n      maps: astencode::Maps,\n      stats: @mut Stats,"}, {"sha": "827f4afaf783c38e912520e8f2d342e6be5b17b2", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39d45b75cc4971a9fd5797c120b362612ff23b13/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d45b75cc4971a9fd5797c120b362612ff23b13/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=39d45b75cc4971a9fd5797c120b362612ff23b13", "patch": "@@ -684,15 +684,14 @@ pub fn declare_tydesc(ccx: @CrateContext, t: ty::t) -> @mut tydesc_info {\n     let llalign = llalign_of(ccx, llty);\n     let addrspace = declare_tydesc_addrspace(ccx, t);\n     //XXX this triggers duplicate LLVM symbols\n-    let name = if false /*ccx.sess.opts.debuginfo*/ {\n+    let name = @(if false /*ccx.sess.opts.debuginfo*/ {\n         mangle_internal_name_by_type_only(ccx, t, ~\"tydesc\")\n     } else {\n         mangle_internal_name_by_seq(ccx, ~\"tydesc\")\n-    };\n-    // XXX: Bad copy.\n-    note_unique_llvm_symbol(ccx, copy name);\n-    debug!(\"+++ declare_tydesc %s %s\", ppaux::ty_to_str(ccx.tcx, t), name);\n-    let gvar = str::as_c_str(name, |buf| {\n+    });\n+    note_unique_llvm_symbol(ccx, name);\n+    debug!(\"+++ declare_tydesc %s %s\", ppaux::ty_to_str(ccx.tcx, t), *name);\n+    let gvar = str::as_c_str(*name, |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(ccx.llmod, ccx.tydesc_type, buf)\n         }\n@@ -718,17 +717,16 @@ pub fn declare_generic_glue(ccx: @CrateContext, t: ty::t, llfnty: TypeRef,\n                             +name: ~str) -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"declare_generic_glue\");\n     let name = name;\n-    let mut fn_nm;\n     //XXX this triggers duplicate LLVM symbols\n-    if false /*ccx.sess.opts.debuginfo*/ {\n-        fn_nm = mangle_internal_name_by_type_only(ccx, t, (~\"glue_\" + name));\n+    let fn_nm = @(if false /*ccx.sess.opts.debuginfo*/ {\n+        mangle_internal_name_by_type_only(ccx, t, (~\"glue_\" + name))\n     } else {\n-        fn_nm = mangle_internal_name_by_seq(ccx, (~\"glue_\" + name));\n-    }\n-    debug!(\"%s is for type %s\", fn_nm, ppaux::ty_to_str(ccx.tcx, t));\n+        mangle_internal_name_by_seq(ccx, (~\"glue_\" + name))\n+    });\n+    debug!(\"%s is for type %s\", *fn_nm, ppaux::ty_to_str(ccx.tcx, t));\n     // XXX: Bad copy.\n-    note_unique_llvm_symbol(ccx, copy fn_nm);\n-    let llfn = decl_cdecl_fn(ccx.llmod, fn_nm, llfnty);\n+    note_unique_llvm_symbol(ccx, fn_nm);\n+    let llfn = decl_cdecl_fn(ccx.llmod, *fn_nm, llfnty);\n     set_glue_inlining(llfn, t);\n     return llfn;\n }"}]}