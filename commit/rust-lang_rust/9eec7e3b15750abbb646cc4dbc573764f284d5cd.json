{"sha": "9eec7e3b15750abbb646cc4dbc573764f284d5cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZWM3ZTNiMTU3NTBhYmJiNjQ2Y2M0ZGJjNTczNzY0ZjI4NGQ1Y2Q=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-24T06:06:29Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-24T06:06:29Z"}, "message": "Expansion of rules to cover stage1, stage2 in more cases. Fix typo in makefile.", "tree": {"sha": "d3fd8af1dcbd7bd7b755a91b7820e4e7c6fd1314", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3fd8af1dcbd7bd7b755a91b7820e4e7c6fd1314"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eec7e3b15750abbb646cc4dbc573764f284d5cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eec7e3b15750abbb646cc4dbc573764f284d5cd", "html_url": "https://github.com/rust-lang/rust/commit/9eec7e3b15750abbb646cc4dbc573764f284d5cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eec7e3b15750abbb646cc4dbc573764f284d5cd/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "912c1fc81c844fcffecbae638a4adb629a68cbfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/912c1fc81c844fcffecbae638a4adb629a68cbfb", "html_url": "https://github.com/rust-lang/rust/commit/912c1fc81c844fcffecbae638a4adb629a68cbfb"}], "stats": {"total": 93, "additions": 88, "deletions": 5}, "files": [{"sha": "c34b3bf6204813344ff1e40e9c1c65424d9d154c", "filename": "Makefile.in", "status": "modified", "additions": 88, "deletions": 5, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/9eec7e3b15750abbb646cc4dbc573764f284d5cd/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/9eec7e3b15750abbb646cc4dbc573764f284d5cd/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=9eec7e3b15750abbb646cc4dbc573764f284d5cd", "patch": "@@ -633,14 +633,20 @@ ALL_TEST_INPUTS = $(wildcard $(S)src/test/*/*.rs   \\\n \n TEST_XFAILS_BOOT = $(shell grep -l xfail-boot $(ALL_TEST_INPUTS))\n TEST_XFAILS_STAGE0 = $(shell grep -l xfail-stage0 $(ALL_TEST_INPUTS))\n+TEST_XFAILS_STAGE1 = $(shell grep -l xfail-stage1 $(ALL_TEST_INPUTS))\n+TEST_XFAILS_STAGE2 = $(shell grep -l xfail-stage2 $(ALL_TEST_INPUTS))\n \n ifdef MINGW_CROSS\n TEST_XFAILS_BOOT += $(S)src/test/run-pass/native-mod.rc\n TEST_XFAILS_STAGE0 += $(S)src/test/run-pass/native-mod.rc\n+TEST_XFAILS_STAGE1 += $(S)src/test/run-pass/native-mod.rc\n+TEST_XFAILS_STAGE2 += $(S)src/test/run-pass/native-mod.rc\n endif\n ifdef CFG_WINDOWSY\n TEST_XFAILS_BOOT += $(S)src/test/run-pass/native-mod.rc\n TEST_XFAILS_STAGE0 += $(S)src/test/run-pass/native-mod.rc\n+TEST_XFAILS_STAGE1 += $(S)src/test/run-pass/native-mod.rc\n+TEST_XFAILS_STAGE2 += $(S)src/test/run-pass/native-mod.rc\n endif\n \n BENCH_RS = $(wildcard $(S)src/test/bench/shootout/*.rs) \\\n@@ -655,13 +661,21 @@ CFAIL_RS = $(wildcard $(S)src/test/compile-fail/*.rs)\n ifdef CHECK_XFAILS\n TEST_RPASS_CRATES_BOOT = $(filter $(TEST_XFAILS_BOOT), $(RPASS_RC))\n TEST_RPASS_CRATES_STAGE0 = $(filter $(TEST_XFAILS_STAGE0), $(RPASS_RC))\n+TEST_RPASS_CRATES_STAGE1 = $(filter $(TEST_XFAILS_STAGE1), $(RPASS_RC))\n+TEST_RPASS_CRATES_STAGE2 = $(filter $(TEST_XFAILS_STAGE2), $(RPASS_RC))\n TEST_RPASS_SOURCES_BOOT = $(filter $(TEST_XFAILS_BOOT), $(RPASS_RS))\n TEST_RPASS_SOURCES_STAGE0 = $(filter $(TEST_XFAILS_STAGE0), $(RPASS_RS))\n+TEST_RPASS_SOURCES_STAGE1 = $(filter $(TEST_XFAILS_STAGE1), $(RPASS_RS))\n+TEST_RPASS_SOURCES_STAGE2 = $(filter $(TEST_XFAILS_STAGE2), $(RPASS_RS))\n else\n TEST_RPASS_CRATES_BOOT = $(filter-out $(TEST_XFAILS_BOOT), $(RPASS_RC))\n TEST_RPASS_CRATES_STAGE0 = $(filter-out $(TEST_XFAILS_STAGE0), $(RPASS_RC))\n+TEST_RPASS_CRATES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE1), $(RPASS_RC))\n+TEST_RPASS_CRATES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE2), $(RPASS_RC))\n TEST_RPASS_SOURCES_BOOT = $(filter-out $(TEST_XFAILS_BOOT), $(RPASS_RS))\n TEST_RPASS_SOURCES_STAGE0 = $(filter-out $(TEST_XFAILS_STAGE0), $(RPASS_RS))\n+TEST_RPASS_SOURCES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE1), $(RPASS_RS))\n+TEST_RPASS_SOURCES_STAGE2 = $(filter-out $(TEST_XFAILS_STAGE2), $(RPASS_RS))\n endif\n \n TEST_RPASS_EXES_BOOT = \\\n@@ -670,77 +684,138 @@ TEST_RPASS_EXES_BOOT = \\\n TEST_RPASS_EXES_STAGE0 = \\\n   $(subst $(S)src/,,$(TEST_RPASS_CRATES_STAGE0:.rc=.stage0$(X))) \\\n   $(subst $(S)src/,,$(TEST_RPASS_SOURCES_STAGE0:.rs=.stage0$(X)))\n+TEST_RPASS_EXES_STAGE1 = \\\n+  $(subst $(S)src/,,$(TEST_RPASS_CRATES_STAGE1:.rc=.stage1$(X))) \\\n+  $(subst $(S)src/,,$(TEST_RPASS_SOURCES_STAGE1:.rs=.stage1$(X)))\n+TEST_RPASS_EXES_STAGE2 = \\\n+  $(subst $(S)src/,,$(TEST_RPASS_CRATES_STAGE1:.rc=.stage2$(X))) \\\n+  $(subst $(S)src/,,$(TEST_RPASS_SOURCES_STAGE1:.rs=.stage2$(X)))\n \n TEST_RPASS_OUTS_BOOT  = \\\n   $(TEST_RPASS_EXES_BOOT:.boot$(X)=.boot.out)\n TEST_RPASS_OUTS_STAGE0 = \\\n   $(TEST_RPASS_EXES_STAGE0:.stage0$(X)=.stage0.out)\n+TEST_RPASS_OUTS_STAGE1 = \\\n+  $(TEST_RPASS_EXES_STAGE1:.stage1$(X)=.stage1.out)\n+TEST_RPASS_OUTS_STAGE2 = \\\n+  $(TEST_RPASS_EXES_STAGE2:.stage2$(X)=.stage2.out)\n \n TEST_RPASS_TMPS_BOOT  = \\\n   $(TEST_RPASS_EXES_BOOT:.boot$(X)=.boot$(X).tmp)\n TEST_RPASS_TMPS_STAGE0 = \\\n   $(TEST_RPASS_EXES_STAGE0:.stage0$(X)=.stage0$(X).tmp)\n+TEST_RPASS_TMPS_STAGE1 = \\\n+  $(TEST_RPASS_EXES_STAGE1:.stage1$(X)=.stage1$(X).tmp)\n+TEST_RPASS_TMPS_STAGE2 = \\\n+  $(TEST_RPASS_EXES_STAGE2:.stage2$(X)=.stage2$(X).tmp)\n \n \n TEST_RFAIL_CRATES_BOOT = $(filter-out $(TEST_XFAILS_BOOT), $(RFAIL_RC))\n TEST_RFAIL_CRATES_STAGE0 = $(filter-out $(TEST_XFAILS_STAGE0), $(RFAIL_RC))\n+TEST_RFAIL_CRATES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE1), $(RFAIL_RC))\n+TEST_RFAIL_CRATES_STAGE2 = $(filter-out $(TEST_XFAILS_STAGE2), $(RFAIL_RC))\n TEST_RFAIL_SOURCES_BOOT = $(filter-out $(TEST_XFAILS_BOOT), $(RFAIL_RS))\n TEST_RFAIL_SOURCES_STAGE0 = $(filter-out $(TEST_XFAILS_STAGE0), $(RFAIL_RS))\n+TEST_RFAIL_SOURCES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE1), $(RFAIL_RS))\n+TEST_RFAIL_SOURCES_STAGE2 = $(filter-out $(TEST_XFAILS_STAGE2), $(RFAIL_RS))\n \n TEST_RFAIL_EXES_BOOT = \\\n   $(subst $(S)src/,,$(TEST_RFAIL_CRATES_BOOT:.rc=.boot$(X))) \\\n   $(subst $(S)src/,,$(TEST_RFAIL_SOURCES_BOOT:.rs=.boot$(X)))\n TEST_RFAIL_EXES_STAGE0 = \\\n   $(subst $(S)src/,,$(TEST_RFAIL_CRATES_STAGE0:.rc=.stage0$(X))) \\\n   $(subst $(S)src/,,$(TEST_RFAIL_SOURCES_STAGE0:.rs=.stage0$(X)))\n+TEST_RFAIL_EXES_STAGE1 = \\\n+  $(subst $(S)src/,,$(TEST_RFAIL_CRATES_STAGE1:.rc=.stage1$(X))) \\\n+  $(subst $(S)src/,,$(TEST_RFAIL_SOURCES_STAGE1:.rs=.stage1$(X)))\n+TEST_RFAIL_EXES_STAGE2 = \\\n+  $(subst $(S)src/,,$(TEST_RFAIL_CRATES_STAGE2:.rc=.stage2$(X))) \\\n+  $(subst $(S)src/,,$(TEST_RFAIL_SOURCES_STAGE2:.rs=.stage2$(X)))\n \n TEST_RFAIL_OUTS_BOOT  = \\\n   $(TEST_RFAIL_EXES_BOOT:.boot$(X)=.boot.out)\n TEST_RFAIL_OUTS_STAGE0 = \\\n   $(TEST_RFAIL_EXES_STAGE0:.stage0$(X)=.stage0.out)\n+TEST_RFAIL_OUTS_STAGE1 = \\\n+  $(TEST_RFAIL_EXES_STAGE0:.stage1$(X)=.stage1.out)\n+TEST_RFAIL_OUTS_STAGE2 = \\\n+  $(TEST_RFAIL_EXES_STAGE0:.stage2$(X)=.stage2.out)\n \n TEST_RFAIL_TMPS_BOOT  = \\\n   $(TEST_RFAIL_EXES_BOOT:.boot$(X)=.boot$(X).tmp)\n TEST_RFAIL_TMPS_STAGE0 = \\\n   $(TEST_RFAIL_EXES_STAGE0:.stage0$(X)=.stage0$(X).tmp)\n-\n+TEST_RFAIL_TMPS_STAGE1 = \\\n+  $(TEST_RFAIL_EXES_STAGE1:.stage1$(X)=.stage1$(X).tmp)\n+TEST_RFAIL_TMPS_STAGE2 = \\\n+  $(TEST_RFAIL_EXES_STAGE2:.stage2$(X)=.stage2$(X).tmp)\n \n TEST_CFAIL_CRATES_BOOT = $(filter-out $(TEST_XFAILS_BOOT), $(CFAIL_RC))\n TEST_CFAIL_CRATES_STAGE0 = $(filter-out $(TEST_XFAILS_STAGE0), $(CFAIL_RC))\n+TEST_CFAIL_CRATES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE1), $(CFAIL_RC))\n+TEST_CFAIL_CRATES_STAGE2 = $(filter-out $(TEST_XFAILS_STAGE2), $(CFAIL_RC))\n TEST_CFAIL_SOURCES_BOOT = $(filter-out $(TEST_XFAILS_BOOT), $(CFAIL_RS))\n TEST_CFAIL_SOURCES_STAGE0 = $(filter-out $(TEST_XFAILS_STAGE0), $(CFAIL_RS))\n+TEST_CFAIL_SOURCES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE1), $(CFAIL_RS))\n+TEST_CFAIL_SOURCES_STAGE2 = $(filter-out $(TEST_XFAILS_STAGE2), $(CFAIL_RS))\n \n TEST_CFAIL_EXES_BOOT = \\\n   $(subst $(S)src/,,$(TEST_CFAIL_CRATES_BOOT:.rc=.boot$(X))) \\\n   $(subst $(S)src/,,$(TEST_CFAIL_SOURCES_BOOT:.rs=.boot$(X)))\n TEST_CFAIL_EXES_STAGE0 = \\\n   $(subst $(S)src/,,$(TEST_CFAIL_CRATES_STAGE0:.rc=.stage0$(X))) \\\n   $(subst $(S)src/,,$(TEST_CFAIL_SOURCES_STAGE0:.rs=.stage0$(X)))\n+TEST_CFAIL_EXES_STAGE1 = \\\n+  $(subst $(S)src/,,$(TEST_CFAIL_CRATES_STAGE1:.rc=.stage1$(X))) \\\n+  $(subst $(S)src/,,$(TEST_CFAIL_SOURCES_STAGE1:.rs=.stage1$(X)))\n+TEST_CFAIL_EXES_STAGE2 = \\\n+  $(subst $(S)src/,,$(TEST_CFAIL_CRATES_STAGE2:.rc=.stage2$(X))) \\\n+  $(subst $(S)src/,,$(TEST_CFAIL_SOURCES_STAGE2:.rs=.stage2$(X)))\n \n TEST_CFAIL_OUTS_BOOT = \\\n   $(TEST_CFAIL_EXES_BOOT:.boot$(X)=.boot.out)\n TEST_CFAIL_OUTS_STAGE0 = \\\n   $(TEST_CFAIL_EXES_STAGE0:.stage0$(X)=.stage0.out)\n+TEST_CFAIL_OUTS_STAGE1 = \\\n+  $(TEST_CFAIL_EXES_STAGE1:.stage1$(X)=.stage1.out)\n+TEST_CFAIL_OUTS_STAGE2 = \\\n+  $(TEST_CFAIL_EXES_STAGE0:.stage2$(X)=.stage2.out)\n \n TEST_CFAIL_TMPS_BOOT = \\\n   $(TEST_CFAIL_EXES_BOOT:.boot$(X)=.boot$(X).tmp)\n TEST_CFAIL_TMPS_STAGE0 = \\\n   $(TEST_CFAIL_EXES_STAGE0:.stage0$(X)=.stage0$(X).tmp)\n+TEST_CFAIL_TMPS_STAGE1 = \\\n+  $(TEST_CFAIL_EXES_STAGE1:.stage1$(X)=.stage1$(X).tmp)\n+TEST_CFAIL_TMPS_STAGE0 = \\\n+  $(TEST_CFAIL_EXES_STAGE2:.stage2$(X)=.stage2$(X).tmp)\n \n \n ALL_TEST_CRATES = $(TEST_CFAIL_CRATES_BOOT) \\\n                    $(TEST_RFAIL_CRATES_BOOT) \\\n                    $(TEST_RPASS_CRATES_BOOT) \\\n                    $(TEST_CFAIL_CRATES_STAGE0) \\\n                    $(TEST_RFAIL_CRATES_STAGE0) \\\n-                   $(TEST_RPASS_CRATES_STAGE0)\n+                   $(TEST_RPASS_CRATES_STAGE0) \\\n+                   $(TEST_CFAIL_CRATES_STAGE1) \\\n+                   $(TEST_RFAIL_CRATES_STAGE1) \\\n+                   $(TEST_RPASS_CRATES_STAGE1) \\\n+                   $(TEST_CFAIL_CRATES_STAGE2) \\\n+                   $(TEST_RFAIL_CRATES_STAGE2) \\\n+                   $(TEST_RPASS_CRATES_STAGE2)\n \n ALL_TEST_SOURCES = $(TEST_CFAIL_SOURCES_BOOT) \\\n                     $(TEST_RFAIL_SOURCES_BOOT) \\\n                     $(TEST_RPASS_SOURCES_BOOT) \\\n                     $(TEST_CFAIL_SOURCES_STAGE0) \\\n                     $(TEST_RFAIL_SOURCES_STAGE0) \\\n-                    $(TEST_RPASS_SOURCES_STAGE0)\n+                    $(TEST_RPASS_SOURCES_STAGE0) \\\n+                    $(TEST_CFAIL_SOURCES_STAGE1) \\\n+                    $(TEST_RFAIL_SOURCES_STAGE1) \\\n+                    $(TEST_RPASS_SOURCES_STAGE1) \\\n+                    $(TEST_CFAIL_SOURCES_STAGE2) \\\n+                    $(TEST_RFAIL_SOURCES_STAGE2) \\\n+                    $(TEST_RPASS_SOURCES_STAGE2)\n \n # The test suite currently relies on logging to validate results so\n # make sure that logging uses the default configuration\n@@ -757,11 +832,19 @@ check: tidy \\\n        $(TEST_RPASS_EXES_STAGE0) $(TEST_RFAIL_EXES_STAGE0) \\\n        $(TEST_RPASS_OUTS_STAGE0) $(TEST_RFAIL_OUTS_STAGE0) \\\n        $(TEST_CFAIL_OUTS_STAGE0)\n+#       $(TEST_RPASS_EXES_STAGE1) $(TEST_RFAIL_EXES_STAGE1) \\\n+#       $(TEST_RPASS_OUTS_STAGE1) $(TEST_RFAIL_OUTS_STAGE1) \\\n+#       $(TEST_CFAIL_OUTS_STAGE1) \\\n+#       $(TEST_RPASS_EXES_STAGE2) $(TEST_RFAIL_EXES_STAGE2) \\\n+#       $(TEST_RPASS_OUTS_STAGE2) $(TEST_RFAIL_OUTS_STAGE2) \\\n+#       $(TEST_CFAIL_OUTS_STAGE2)\n \n \n compile-check: tidy \\\n        $(TEST_RPASS_EXES_BOOT) $(TEST_RFAIL_EXES_BOOT) \\\n-       $(TEST_RPASS_EXES_STAGE0) $(TEST_RFAIL_EXES_STAGE0)\n+       $(TEST_RPASS_EXES_STAGE0) $(TEST_RFAIL_EXES_STAGE0) \\\n+       $(TEST_RPASS_EXES_STAGE1) $(TEST_RFAIL_EXES_STAGE1) \\\n+       $(TEST_RPASS_EXES_STAGE2) $(TEST_RFAIL_EXES_STAGE2)\n \n \n ######################################################################\n@@ -777,7 +860,7 @@ compile-check: tidy \\\n \t@# programs, I\\'ll live with the noise.\n \t-$(Q)$(CFG_DSYMUTIL) $@\n \n-%.stage1(X): %.stage1.o $(SREQ1)\n+%.stage1$(X): %.stage1.o $(SREQ1)\n \t@$(call E, link [gcc]: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o -o $@ $< \\\n       -Lstage1 -Lrt -lrustrt -lstd -lm"}]}