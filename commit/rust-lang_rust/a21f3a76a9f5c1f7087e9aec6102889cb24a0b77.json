{"sha": "a21f3a76a9f5c1f7087e9aec6102889cb24a0b77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMWYzYTc2YTlmNWMxZjcwODdlOWFlYzYxMDI4ODljYjI0YTBiNzc=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-28T15:51:41Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-28T16:22:05Z"}, "message": "Clean up encode_dep_graph", "tree": {"sha": "ddb34386db4a128f0397dd6e56ace02c278aaed4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddb34386db4a128f0397dd6e56ace02c278aaed4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a21f3a76a9f5c1f7087e9aec6102889cb24a0b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a21f3a76a9f5c1f7087e9aec6102889cb24a0b77", "html_url": "https://github.com/rust-lang/rust/commit/a21f3a76a9f5c1f7087e9aec6102889cb24a0b77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a21f3a76a9f5c1f7087e9aec6102889cb24a0b77/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3e6d882fec61ef290b9097f896cfbcf39f5b4bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e6d882fec61ef290b9097f896cfbcf39f5b4bd", "html_url": "https://github.com/rust-lang/rust/commit/f3e6d882fec61ef290b9097f896cfbcf39f5b4bd"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "45cef479a4f43077414c211b65c7965742d4a254", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a21f3a76a9f5c1f7087e9aec6102889cb24a0b77/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21f3a76a9f5c1f7087e9aec6102889cb24a0b77/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=a21f3a76a9f5c1f7087e9aec6102889cb24a0b77", "patch": "@@ -153,7 +153,8 @@ fn encode_dep_graph(tcx: TyCtxt<'_>, encoder: &mut Encoder) {\n         let total_node_count = serialized_graph.nodes.len();\n         let total_edge_count = serialized_graph.edge_list_data.len();\n \n-        let mut counts: FxHashMap<_, Stat> = FxHashMap::default();\n+        let mut counts: FxHashMap<_, Stat> =\n+            FxHashMap::with_capacity_and_hasher(total_node_count, Default::default());\n \n         for (i, &node) in serialized_graph.nodes.iter_enumerated() {\n             let stat = counts.entry(node.kind).or_insert(Stat {\n@@ -170,14 +171,6 @@ fn encode_dep_graph(tcx: TyCtxt<'_>, encoder: &mut Encoder) {\n         let mut counts: Vec<_> = counts.values().cloned().collect();\n         counts.sort_by_key(|s| -(s.node_counter as i64));\n \n-        let percentage_of_all_nodes: Vec<f64> = counts\n-            .iter()\n-            .map(|s| (100.0 * (s.node_counter as f64)) / (total_node_count as f64))\n-            .collect();\n-\n-        let average_edges_per_kind: Vec<f64> =\n-            counts.iter().map(|s| (s.edge_counter as f64) / (s.node_counter as f64)).collect();\n-\n         println!(\"[incremental]\");\n         println!(\"[incremental] DepGraph Statistics\");\n \n@@ -207,13 +200,13 @@ fn encode_dep_graph(tcx: TyCtxt<'_>, encoder: &mut Encoder) {\n                   |------------------|\"\n         );\n \n-        for (i, stat) in counts.iter().enumerate() {\n+        for stat in counts.iter() {\n             println!(\n                 \"[incremental]  {:<36}|{:>16.1}% |{:>12} |{:>17.1} |\",\n                 format!(\"{:?}\", stat.kind),\n-                percentage_of_all_nodes[i],\n+                (100.0 * (stat.node_counter as f64)) / (total_node_count as f64), // percentage of all nodes\n                 stat.node_counter,\n-                average_edges_per_kind[i]\n+                (stat.edge_counter as f64) / (stat.node_counter as f64), // average edges per kind\n             );\n         }\n "}]}