{"sha": "9832374f6e378971e1a933362cf9781b121bb845", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MzIzNzRmNmUzNzg5NzFlMWE5MzMzNjJjZjk3ODFiMTIxYmI4NDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-20T08:59:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-20T08:59:12Z"}, "message": "Auto merge of #76893 - lcnr:existential-proj, r=estebank\n\nImprove `skip_binder` usage during FlagComputation\n\nIt looks like there was previously a bug around `ExistentialPredicate::Projection` here, don't know how to best trigger that one to add a regression test though.", "tree": {"sha": "fe24b8b72eb3fdc00b943912870d6ad765b96115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe24b8b72eb3fdc00b943912870d6ad765b96115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9832374f6e378971e1a933362cf9781b121bb845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9832374f6e378971e1a933362cf9781b121bb845", "html_url": "https://github.com/rust-lang/rust/commit/9832374f6e378971e1a933362cf9781b121bb845", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9832374f6e378971e1a933362cf9781b121bb845/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "554633534c550d20715e5e1576702b1f035586ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/554633534c550d20715e5e1576702b1f035586ad", "html_url": "https://github.com/rust-lang/rust/commit/554633534c550d20715e5e1576702b1f035586ad"}, {"sha": "7652b4b1d9cec0ad22f529a4335d05f7d7792521", "url": "https://api.github.com/repos/rust-lang/rust/commits/7652b4b1d9cec0ad22f529a4335d05f7d7792521", "html_url": "https://github.com/rust-lang/rust/commit/7652b4b1d9cec0ad22f529a4335d05f7d7792521"}], "stats": {"total": 70, "additions": 33, "deletions": 37}, "files": [{"sha": "99c8300661d3d6b383f26fedd8b13ac9c940bef2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9832374f6e378971e1a933362cf9781b121bb845/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9832374f6e378971e1a933362cf9781b121bb845/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9832374f6e378971e1a933362cf9781b121bb845", "patch": "@@ -134,7 +134,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n     fn intern_predicate(&self, kind: PredicateKind<'tcx>) -> &'tcx PredicateInner<'tcx> {\n         self.predicate\n             .intern(kind, |kind| {\n-                let flags = super::flags::FlagComputation::for_predicate(&kind);\n+                let flags = super::flags::FlagComputation::for_predicate(kind);\n \n                 let predicate_struct = PredicateInner {\n                     kind,"}, {"sha": "8b97a87f214b83955fffc55fd2348464fd6ddc46", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 32, "deletions": 36, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9832374f6e378971e1a933362cf9781b121bb845/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9832374f6e378971e1a933362cf9781b121bb845/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=9832374f6e378971e1a933362cf9781b121bb845", "patch": "@@ -22,7 +22,7 @@ impl FlagComputation {\n         result\n     }\n \n-    pub fn for_predicate(kind: &ty::PredicateKind<'_>) -> FlagComputation {\n+    pub fn for_predicate(kind: ty::PredicateKind<'_>) -> FlagComputation {\n         let mut result = FlagComputation::new();\n         result.add_predicate_kind(kind);\n         result\n@@ -53,7 +53,14 @@ impl FlagComputation {\n \n     /// Adds the flags/depth from a set of types that appear within the current type, but within a\n     /// region binder.\n-    fn add_bound_computation(&mut self, computation: FlagComputation) {\n+    fn bound_computation<T, F>(&mut self, value: ty::Binder<T>, f: F)\n+    where\n+        F: FnOnce(&mut Self, T),\n+    {\n+        let mut computation = FlagComputation::new();\n+\n+        f(&mut computation, value.skip_binder());\n+\n         self.add_flags(computation.flags);\n \n         // The types that contributed to `computation` occurred within\n@@ -101,9 +108,7 @@ impl FlagComputation {\n             }\n \n             &ty::GeneratorWitness(ts) => {\n-                let mut computation = FlagComputation::new();\n-                computation.add_tys(ts.skip_binder());\n-                self.add_bound_computation(computation);\n+                self.bound_computation(ts, |flags, ts| flags.add_tys(ts));\n             }\n \n             &ty::Closure(_, substs) => {\n@@ -154,20 +159,21 @@ impl FlagComputation {\n                 self.add_substs(substs);\n             }\n \n-            &ty::Dynamic(ref obj, r) => {\n-                let mut computation = FlagComputation::new();\n-                for predicate in obj.skip_binder().iter() {\n-                    match predicate {\n-                        ty::ExistentialPredicate::Trait(tr) => computation.add_substs(tr.substs),\n-                        ty::ExistentialPredicate::Projection(p) => {\n-                            let mut proj_computation = FlagComputation::new();\n-                            proj_computation.add_existential_projection(&p);\n-                            self.add_bound_computation(proj_computation);\n+            &ty::Dynamic(obj, r) => {\n+                self.bound_computation(obj, |computation, obj| {\n+                    for predicate in obj.iter() {\n+                        match predicate {\n+                            ty::ExistentialPredicate::Trait(tr) => {\n+                                computation.add_substs(tr.substs)\n+                            }\n+                            ty::ExistentialPredicate::Projection(p) => {\n+                                computation.add_existential_projection(&p);\n+                            }\n+                            ty::ExistentialPredicate::AutoTrait(_) => {}\n                         }\n-                        ty::ExistentialPredicate::AutoTrait(_) => {}\n                     }\n-                }\n-                self.add_bound_computation(computation);\n+                });\n+\n                 self.add_region(r);\n             }\n \n@@ -195,22 +201,21 @@ impl FlagComputation {\n                 self.add_substs(substs);\n             }\n \n-            &ty::FnPtr(f) => {\n-                self.add_fn_sig(f);\n-            }\n+            &ty::FnPtr(fn_sig) => self.bound_computation(fn_sig, |computation, fn_sig| {\n+                computation.add_tys(fn_sig.inputs());\n+                computation.add_ty(fn_sig.output());\n+            }),\n         }\n     }\n \n-    fn add_predicate_kind(&mut self, kind: &ty::PredicateKind<'_>) {\n+    fn add_predicate_kind(&mut self, kind: ty::PredicateKind<'_>) {\n         match kind {\n             ty::PredicateKind::ForAll(binder) => {\n-                let mut computation = FlagComputation::new();\n-\n-                computation.add_predicate_atom(binder.skip_binder());\n-\n-                self.add_bound_computation(computation);\n+                self.bound_computation(binder, |computation, atom| {\n+                    computation.add_predicate_atom(atom)\n+                });\n             }\n-            &ty::PredicateKind::Atom(atom) => self.add_predicate_atom(atom),\n+            ty::PredicateKind::Atom(atom) => self.add_predicate_atom(atom),\n         }\n     }\n \n@@ -266,15 +271,6 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_fn_sig(&mut self, fn_sig: ty::PolyFnSig<'_>) {\n-        let mut computation = FlagComputation::new();\n-\n-        computation.add_tys(fn_sig.skip_binder().inputs());\n-        computation.add_ty(fn_sig.skip_binder().output());\n-\n-        self.add_bound_computation(computation);\n-    }\n-\n     fn add_region(&mut self, r: ty::Region<'_>) {\n         self.add_flags(r.type_flags());\n         if let ty::ReLateBound(debruijn, _) = *r {"}]}