{"sha": "1eb0844f5d4321a7769238af740e6d93d3e966e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYjA4NDRmNWQ0MzIxYTc3NjkyMzhhZjc0MGU2ZDkzZDNlOTY2ZTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-24T23:59:39Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-24T23:59:39Z"}, "message": "parse: move condition into guard", "tree": {"sha": "8ab798df5cb6478ced74668243d365029ab51922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ab798df5cb6478ced74668243d365029ab51922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eb0844f5d4321a7769238af740e6d93d3e966e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb0844f5d4321a7769238af740e6d93d3e966e4", "html_url": "https://github.com/rust-lang/rust/commit/1eb0844f5d4321a7769238af740e6d93d3e966e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eb0844f5d4321a7769238af740e6d93d3e966e4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32295aee6ef45e1602d8df6033be47e06225a319", "url": "https://api.github.com/repos/rust-lang/rust/commits/32295aee6ef45e1602d8df6033be47e06225a319", "html_url": "https://github.com/rust-lang/rust/commit/32295aee6ef45e1602d8df6033be47e06225a319"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "b7bf99e6e1603e756c3b2e19b80feb793ac4cc06", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1eb0844f5d4321a7769238af740e6d93d3e966e4/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb0844f5d4321a7769238af740e6d93d3e966e4/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=1eb0844f5d4321a7769238af740e6d93d3e966e4", "patch": "@@ -366,36 +366,36 @@ impl<'a> Parser<'a> {\n \n         let mut eat_semi = true;\n         match stmt.kind {\n-            StmtKind::Expr(ref expr) if self.token != token::Eof => {\n-                // expression without semicolon\n-                if classify::expr_requires_semi_to_be_stmt(expr) {\n-                    // Just check for errors and recover; do not eat semicolon yet.\n-                    if let Err(mut e) =\n-                        self.expect_one_of(&[], &[token::Semi, token::CloseDelim(token::Brace)])\n-                    {\n-                        if let TokenKind::DocComment(..) = self.token.kind {\n-                            if let Ok(snippet) = self.span_to_snippet(self.token.span) {\n-                                let sp = self.token.span;\n-                                let marker = &snippet[..3];\n-                                let (comment_marker, doc_comment_marker) = marker.split_at(2);\n-\n-                                e.span_suggestion(\n-                                    sp.with_hi(sp.lo() + BytePos(marker.len() as u32)),\n-                                    &format!(\n-                                        \"add a space before `{}` to use a regular comment\",\n-                                        doc_comment_marker,\n-                                    ),\n-                                    format!(\"{} {}\", comment_marker, doc_comment_marker),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            }\n+            // Expression without semicolon.\n+            StmtKind::Expr(ref expr)\n+                if self.token != token::Eof && classify::expr_requires_semi_to_be_stmt(expr) =>\n+            {\n+                // Just check for errors and recover; do not eat semicolon yet.\n+                if let Err(mut e) =\n+                    self.expect_one_of(&[], &[token::Semi, token::CloseDelim(token::Brace)])\n+                {\n+                    if let TokenKind::DocComment(..) = self.token.kind {\n+                        if let Ok(snippet) = self.span_to_snippet(self.token.span) {\n+                            let sp = self.token.span;\n+                            let marker = &snippet[..3];\n+                            let (comment_marker, doc_comment_marker) = marker.split_at(2);\n+\n+                            e.span_suggestion(\n+                                sp.with_hi(sp.lo() + BytePos(marker.len() as u32)),\n+                                &format!(\n+                                    \"add a space before `{}` to use a regular comment\",\n+                                    doc_comment_marker,\n+                                ),\n+                                format!(\"{} {}\", comment_marker, doc_comment_marker),\n+                                Applicability::MaybeIncorrect,\n+                            );\n                         }\n-                        e.emit();\n-                        self.recover_stmt();\n-                        // Don't complain about type errors in body tail after parse error (#57383).\n-                        let sp = expr.span.to(self.prev_span);\n-                        stmt.kind = StmtKind::Expr(self.mk_expr_err(sp));\n                     }\n+                    e.emit();\n+                    self.recover_stmt();\n+                    // Don't complain about type errors in body tail after parse error (#57383).\n+                    let sp = expr.span.to(self.prev_span);\n+                    stmt.kind = StmtKind::Expr(self.mk_expr_err(sp));\n                 }\n             }\n             StmtKind::Local(..) => {"}]}