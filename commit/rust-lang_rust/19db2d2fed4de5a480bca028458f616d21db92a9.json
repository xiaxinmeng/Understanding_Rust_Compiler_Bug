{"sha": "19db2d2fed4de5a480bca028458f616d21db92a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZGIyZDJmZWQ0ZGU1YTQ4MGJjYTAyODQ1OGY2MTZkMjFkYjkyYTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-04T10:16:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:53:40Z"}, "message": "ast_stmt_expr_attr -> pretty & ui tests", "tree": {"sha": "6aa212b9aa0c0ddef28ee397455edbf26e25dcf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6aa212b9aa0c0ddef28ee397455edbf26e25dcf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19db2d2fed4de5a480bca028458f616d21db92a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19db2d2fed4de5a480bca028458f616d21db92a9", "html_url": "https://github.com/rust-lang/rust/commit/19db2d2fed4de5a480bca028458f616d21db92a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19db2d2fed4de5a480bca028458f616d21db92a9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b53c5be0607d0c1e9aee357a309491ee1e99c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b53c5be0607d0c1e9aee357a309491ee1e99c80", "html_url": "https://github.com/rust-lang/rust/commit/9b53c5be0607d0c1e9aee357a309491ee1e99c80"}], "stats": {"total": 1003, "additions": 692, "deletions": 311}, "files": [{"sha": "5b975424512d45a5426d9604faafc666c9a37e4f", "filename": "src/test/pretty/ast-stmt-expr-attr.rs", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs?ref=19db2d2fed4de5a480bca028458f616d21db92a9", "patch": "@@ -0,0 +1,175 @@\n+// pp-exact\n+\n+fn main() { }\n+\n+#[cfg(FALSE)]\n+fn syntax() {\n+    let _ = #[attr] box 0;\n+    let _ = #[attr] [#![attr] ];\n+    let _ = #[attr] [#![attr] 0];\n+    let _ = #[attr] [#![attr] 0; 0];\n+    let _ = #[attr] [#![attr] 0, 0, 0];\n+    let _ = #[attr] foo();\n+    let _ = #[attr] x.foo();\n+    let _ = #[attr] (#![attr] );\n+    let _ = #[attr] (#![attr] #[attr] 0,);\n+    let _ = #[attr] (#![attr] #[attr] 0, 0);\n+    let _ = #[attr] 0 + #[attr] 0;\n+    let _ = #[attr] 0 / #[attr] 0;\n+    let _ = #[attr] 0 & #[attr] 0;\n+    let _ = #[attr] 0 % #[attr] 0;\n+    let _ = #[attr] (0 + 0);\n+    let _ = #[attr] !0;\n+    let _ = #[attr] -0;\n+    let _ = #[attr] false;\n+    let _ = #[attr] 0;\n+    let _ = #[attr] 'c';\n+    let _ = #[attr] x as Y;\n+    let _ = #[attr] (x as Y);\n+    let _ =\n+        #[attr] while true {\n+                    #![attr]\n+                };\n+    let _ =\n+        #[attr] while let Some(false) = true {\n+                    #![attr]\n+                };\n+    let _ =\n+        #[attr] for x in y {\n+                    #![attr]\n+                };\n+    let _ =\n+        #[attr] loop  {\n+                    #![attr]\n+                };\n+    let _ =\n+        #[attr] match true {\n+                    #![attr]\n+                            #[attr]\n+                            _ => false,\n+                };\n+    let _ = #[attr] || #[attr] foo;\n+    let _ = #[attr] move || #[attr] foo;\n+    let _ =\n+        #[attr] ||\n+                    #[attr] {\n+                                #![attr]\n+                                foo\n+                            };\n+    let _ =\n+        #[attr] move ||\n+                    #[attr] {\n+                                #![attr]\n+                                foo\n+                            };\n+    let _ =\n+        #[attr] ||\n+                    {\n+                        #![attr]\n+                        foo\n+                    };\n+    let _ =\n+        #[attr] move ||\n+                    {\n+                        #![attr]\n+                        foo\n+                    };\n+    let _ =\n+        #[attr] {\n+                    #![attr]\n+                };\n+    let _ =\n+        #[attr] {\n+                    #![attr]\n+                    let _ = ();\n+                };\n+    let _ =\n+        #[attr] {\n+                    #![attr]\n+                    let _ = ();\n+                    foo\n+                };\n+    let _ = #[attr] x = y;\n+    let _ = #[attr] (x = y);\n+    let _ = #[attr] x += y;\n+    let _ = #[attr] (x += y);\n+    let _ = #[attr] foo.bar;\n+    let _ = (#[attr] foo).bar;\n+    let _ = #[attr] foo.0;\n+    let _ = (#[attr] foo).0;\n+    let _ = #[attr] foo[bar];\n+    let _ = (#[attr] foo)[bar];\n+    let _ = #[attr] 0..#[attr] 0;\n+    let _ = #[attr] 0..;\n+    let _ = #[attr] (0..0);\n+    let _ = #[attr] (0..);\n+    let _ = #[attr] (..0);\n+    let _ = #[attr] (..);\n+    let _ = #[attr] foo::bar::baz;\n+    let _ = #[attr] &0;\n+    let _ = #[attr] &mut 0;\n+    let _ = #[attr] &#[attr] 0;\n+    let _ = #[attr] &mut #[attr] 0;\n+    let _ = #[attr] break ;\n+    let _ = #[attr] continue ;\n+    let _ = #[attr] return;\n+    let _ = #[attr] foo!();\n+    let _ = #[attr] foo!(# ! [attr]);\n+    let _ = #[attr] foo![];\n+    let _ = #[attr] foo![# ! [attr]];\n+    let _ = #[attr] foo! { };\n+    let _ = #[attr] foo! { # ! [attr] };\n+    let _ = #[attr] Foo{#![attr] bar: baz,};\n+    let _ = #[attr] Foo{#![attr] ..foo};\n+    let _ = #[attr] Foo{#![attr] bar: baz, ..foo};\n+    let _ = #[attr] (#![attr] 0);\n+\n+    {\n+        #[attr]\n+        let _ = 0;\n+\n+        #[attr]\n+        0;\n+\n+        #[attr]\n+        foo!();\n+\n+        #[attr]\n+        foo! { }\n+\n+        #[attr]\n+        foo![];\n+    }\n+\n+    {\n+        #[attr]\n+        let _ = 0;\n+    }\n+    {\n+\n+        #[attr]\n+        0\n+    }\n+    {\n+\n+        #[attr]\n+        {\n+            #![attr]\n+        }\n+    }\n+    {\n+\n+        #[attr]\n+        foo!()\n+    }\n+    {\n+\n+        #[attr]\n+        foo![]\n+    }\n+    {\n+\n+        #[attr]\n+        foo! { }\n+    }\n+}"}, {"sha": "d6d49df63ef1556a5f7540fc0280b1fc96b5aa31", "filename": "src/test/ui-fulldeps/ast_stmt_expr_attr.rs", "status": "removed", "additions": 0, "deletions": 311, "changes": 311, "blob_url": "https://github.com/rust-lang/rust/blob/9b53c5be0607d0c1e9aee357a309491ee1e99c80/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b53c5be0607d0c1e9aee357a309491ee1e99c80/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs?ref=9b53c5be0607d0c1e9aee357a309491ee1e99c80", "patch": "@@ -1,311 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_imports)]\n-// ignore-cross-compile\n-\n-#![feature(rustc_private)]\n-\n-extern crate syntax;\n-extern crate syntax_expand;\n-extern crate rustc_parse;\n-extern crate rustc_errors;\n-\n-use rustc_errors::PResult;\n-use rustc_parse::parser::attr::*;\n-use rustc_parse::new_parser_from_source_str;\n-use rustc_parse::parser::Parser;\n-use syntax::ast::*;\n-use syntax::attr::*;\n-use syntax::ast;\n-use syntax::sess::ParseSess;\n-use syntax::source_map::{FilePathMapping, FileName};\n-use syntax::ptr::P;\n-use syntax::print::pprust;\n-use syntax::token;\n-use std::fmt;\n-\n-// Copied out of syntax::util::parser_testing\n-\n-pub fn string_to_parser<'a>(ps: &'a ParseSess, source_str: String) -> Parser<'a> {\n-    new_parser_from_source_str(ps, FileName::Custom(source_str.clone()), source_str)\n-}\n-\n-fn with_error_checking_parse<'a, T, F>(s: String, ps: &'a ParseSess, f: F) -> PResult<'a, T> where\n-    F: FnOnce(&mut Parser<'a>) -> PResult<'a, T>,\n-{\n-    let mut p = string_to_parser(&ps, s);\n-    let x = f(&mut p);\n-\n-    if ps.span_diagnostic.has_errors() || p.token != token::Eof {\n-        if let Err(mut e) = x {\n-            e.cancel();\n-        }\n-        return Err(p.fatal(\"parse error\"));\n-    }\n-\n-    x\n-}\n-\n-fn expr<'a>(s: &str, ps: &'a ParseSess) -> PResult<'a, P<ast::Expr>> {\n-    with_error_checking_parse(s.to_string(), ps, |p| {\n-        p.parse_expr()\n-    })\n-}\n-\n-fn stmt<'a>(s: &str, ps: &'a ParseSess) -> PResult<'a, ast::Stmt> {\n-    with_error_checking_parse(s.to_string(), ps, |p| {\n-        p.parse_stmt().map(|s| s.unwrap())\n-    })\n-}\n-\n-fn attr<'a>(s: &str, ps: &'a ParseSess) -> PResult<'a, ast::Attribute> {\n-    with_error_checking_parse(s.to_string(), ps, |p| {\n-        p.parse_attribute(true)\n-    })\n-}\n-\n-fn str_compare<T, F: Fn(&T) -> String>(e: &str, expected: &[T], actual: &[T], f: F) {\n-    let expected: Vec<_> = expected.iter().map(|e| f(e)).collect();\n-    let actual: Vec<_> = actual.iter().map(|e| f(e)).collect();\n-\n-    if expected != actual {\n-        panic!(\"parsed `{}` as {:?}, expected {:?}\", e, actual, expected);\n-    }\n-}\n-\n-fn sess() -> ParseSess {\n-    ParseSess::new(FilePathMapping::empty())\n-}\n-\n-fn check_expr_attrs(es: &str, expected: &[&str]) {\n-    let ps = sess();\n-    let e = expr(es, &ps).expect(\"parse error\");\n-    let actual = &e.attrs;\n-    str_compare(es,\n-                &expected.iter().map(|r| attr(r, &ps).unwrap()).collect::<Vec<_>>(),\n-                &actual,\n-                pprust::attribute_to_string);\n-}\n-\n-fn check_stmt_attrs(es: &str, expected: &[&str]) {\n-    let ps = sess();\n-    let e = stmt(es, &ps).expect(\"parse error\");\n-    let actual = e.kind.attrs();\n-    str_compare(es,\n-                &expected.iter().map(|r| attr(r, &ps).unwrap()).collect::<Vec<_>>(),\n-                actual,\n-                pprust::attribute_to_string);\n-}\n-\n-fn reject_expr_parse(es: &str) {\n-    let ps = sess();\n-    match expr(es, &ps) {\n-        Ok(_) => panic!(\"parser did not reject `{}`\", es),\n-        Err(mut e) => e.cancel(),\n-    };\n-}\n-\n-fn reject_stmt_parse(es: &str) {\n-    let ps = sess();\n-    match stmt(es, &ps) {\n-        Ok(_) => panic!(\"parser did not reject `{}`\", es),\n-        Err(mut e) => e.cancel(),\n-    };\n-}\n-\n-fn main() {\n-    syntax::with_default_globals(|| run());\n-}\n-\n-fn run() {\n-    let both = &[\"#[attr]\", \"#![attr]\"];\n-    let outer = &[\"#[attr]\"];\n-    let none = &[];\n-\n-    check_expr_attrs(\"#[attr] box 0\", outer);\n-    reject_expr_parse(\"box #![attr] 0\");\n-\n-    check_expr_attrs(\"#[attr] [#![attr]]\", both);\n-    check_expr_attrs(\"#[attr] [#![attr] 0]\", both);\n-    check_expr_attrs(\"#[attr] [#![attr] 0; 0]\", both);\n-    check_expr_attrs(\"#[attr] [#![attr] 0, 0, 0]\", both);\n-    reject_expr_parse(\"[#[attr]]\");\n-\n-    check_expr_attrs(\"#[attr] foo()\", outer);\n-    check_expr_attrs(\"#[attr] x.foo()\", outer);\n-    reject_expr_parse(\"foo#[attr]()\");\n-    reject_expr_parse(\"foo(#![attr])\");\n-    reject_expr_parse(\"x.foo(#![attr])\");\n-    reject_expr_parse(\"x.#[attr]foo()\");\n-    reject_expr_parse(\"x.#![attr]foo()\");\n-\n-    check_expr_attrs(\"#[attr] (#![attr])\", both);\n-    check_expr_attrs(\"#[attr] (#![attr] #[attr] 0,)\", both);\n-    check_expr_attrs(\"#[attr] (#![attr] #[attr] 0, 0)\", both);\n-\n-    check_expr_attrs(\"#[attr] 0 + #[attr] 0\", none);\n-    check_expr_attrs(\"#[attr] 0 / #[attr] 0\", none);\n-    check_expr_attrs(\"#[attr] 0 & #[attr] 0\", none);\n-    check_expr_attrs(\"#[attr] 0 % #[attr] 0\", none);\n-    check_expr_attrs(\"#[attr] (0 + 0)\", outer);\n-    reject_expr_parse(\"0 + #![attr] 0\");\n-\n-    check_expr_attrs(\"#[attr] !0\", outer);\n-    check_expr_attrs(\"#[attr] -0\", outer);\n-    reject_expr_parse(\"!#![attr] 0\");\n-    reject_expr_parse(\"-#![attr] 0\");\n-\n-    check_expr_attrs(\"#[attr] false\", outer);\n-    check_expr_attrs(\"#[attr] 0\", outer);\n-    check_expr_attrs(\"#[attr] 'c'\", outer);\n-\n-    check_expr_attrs(\"#[attr] x as Y\", none);\n-    check_expr_attrs(\"#[attr] (x as Y)\", outer);\n-    reject_expr_parse(\"x #![attr] as Y\");\n-\n-    reject_expr_parse(\"#[attr] if false {}\");\n-    reject_expr_parse(\"if false #[attr] {}\");\n-    reject_expr_parse(\"if false {#![attr]}\");\n-    reject_expr_parse(\"if false {} #[attr] else {}\");\n-    reject_expr_parse(\"if false {} else #[attr] {}\");\n-    reject_expr_parse(\"if false {} else {#![attr]}\");\n-    reject_expr_parse(\"if false {} else #[attr] if true {}\");\n-    reject_expr_parse(\"if false {} else if true #[attr] {}\");\n-    reject_expr_parse(\"if false {} else if true {#![attr]}\");\n-\n-    reject_expr_parse(\"#[attr] if let Some(false) = false {}\");\n-    reject_expr_parse(\"if let Some(false) = false #[attr] {}\");\n-    reject_expr_parse(\"if let Some(false) = false {#![attr]}\");\n-    reject_expr_parse(\"if let Some(false) = false {} #[attr] else {}\");\n-    reject_expr_parse(\"if let Some(false) = false {} else #[attr] {}\");\n-    reject_expr_parse(\"if let Some(false) = false {} else {#![attr]}\");\n-    reject_expr_parse(\"if let Some(false) = false {} else #[attr] if let Some(false) = true {}\");\n-    reject_expr_parse(\"if let Some(false) = false {} else if let Some(false) = true #[attr] {}\");\n-    reject_expr_parse(\"if let Some(false) = false {} else if let Some(false) = true {#![attr]}\");\n-\n-    check_expr_attrs(\"#[attr] while true {#![attr]}\", both);\n-\n-    check_expr_attrs(\"#[attr] while let Some(false) = true {#![attr]}\", both);\n-\n-    check_expr_attrs(\"#[attr] for x in y {#![attr]}\", both);\n-\n-    check_expr_attrs(\"#[attr] loop {#![attr]}\", both);\n-\n-    check_expr_attrs(\"#[attr] match true {#![attr] #[attr] _ => false}\", both);\n-\n-    check_expr_attrs(\"#[attr]      || #[attr] foo\", outer);\n-    check_expr_attrs(\"#[attr] move || #[attr] foo\", outer);\n-    check_expr_attrs(\"#[attr]      || #[attr] { #![attr] foo }\", outer);\n-    check_expr_attrs(\"#[attr] move || #[attr] { #![attr] foo }\", outer);\n-    check_expr_attrs(\"#[attr]      || { #![attr] foo }\", outer);\n-    check_expr_attrs(\"#[attr] move || { #![attr] foo }\", outer);\n-    reject_expr_parse(\"|| #![attr] foo\");\n-    reject_expr_parse(\"move || #![attr] foo\");\n-    reject_expr_parse(\"|| #![attr] {foo}\");\n-    reject_expr_parse(\"move || #![attr] {foo}\");\n-\n-    check_expr_attrs(\"#[attr] { #![attr] }\", both);\n-    check_expr_attrs(\"#[attr] { #![attr] let _ = (); }\", both);\n-    check_expr_attrs(\"#[attr] { #![attr] let _ = (); foo }\", both);\n-\n-    check_expr_attrs(\"#[attr] x = y\", none);\n-    check_expr_attrs(\"#[attr] (x = y)\", outer);\n-\n-    check_expr_attrs(\"#[attr] x += y\", none);\n-    check_expr_attrs(\"#[attr] (x += y)\", outer);\n-\n-    check_expr_attrs(\"#[attr] foo.bar\", outer);\n-    check_expr_attrs(\"(#[attr] foo).bar\", none);\n-\n-    check_expr_attrs(\"#[attr] foo.0\", outer);\n-    check_expr_attrs(\"(#[attr] foo).0\", none);\n-\n-    check_expr_attrs(\"#[attr] foo[bar]\", outer);\n-    check_expr_attrs(\"(#[attr] foo)[bar]\", none);\n-\n-    check_expr_attrs(\"#[attr] 0..#[attr] 0\", none);\n-    check_expr_attrs(\"#[attr] 0..\", none);\n-    reject_expr_parse(\"#[attr] ..#[attr] 0\");\n-    reject_expr_parse(\"#[attr] ..\");\n-\n-    check_expr_attrs(\"#[attr] (0..0)\", outer);\n-    check_expr_attrs(\"#[attr] (0..)\", outer);\n-    check_expr_attrs(\"#[attr] (..0)\", outer);\n-    check_expr_attrs(\"#[attr] (..)\", outer);\n-\n-    check_expr_attrs(\"#[attr] foo::bar::baz\", outer);\n-\n-    check_expr_attrs(\"#[attr] &0\", outer);\n-    check_expr_attrs(\"#[attr] &mut 0\", outer);\n-    check_expr_attrs(\"#[attr] & #[attr] 0\", outer);\n-    check_expr_attrs(\"#[attr] &mut #[attr] 0\", outer);\n-    reject_expr_parse(\"#[attr] &#![attr] 0\");\n-    reject_expr_parse(\"#[attr] &mut #![attr] 0\");\n-\n-    check_expr_attrs(\"#[attr] break\", outer);\n-    check_expr_attrs(\"#[attr] continue\", outer);\n-    check_expr_attrs(\"#[attr] return\", outer);\n-\n-    check_expr_attrs(\"#[attr] foo!()\", outer);\n-    check_expr_attrs(\"#[attr] foo!(#![attr])\", outer);\n-    check_expr_attrs(\"#[attr] foo![]\", outer);\n-    check_expr_attrs(\"#[attr] foo![#![attr]]\", outer);\n-    check_expr_attrs(\"#[attr] foo!{}\", outer);\n-    check_expr_attrs(\"#[attr] foo!{#![attr]}\", outer);\n-\n-    check_expr_attrs(\"#[attr] Foo { #![attr] bar: baz }\", both);\n-    check_expr_attrs(\"#[attr] Foo { #![attr] ..foo }\", both);\n-    check_expr_attrs(\"#[attr] Foo { #![attr] bar: baz, ..foo }\", both);\n-\n-    check_expr_attrs(\"#[attr] (#![attr] 0)\", both);\n-\n-    // Look at statements in their natural habitat...\n-    check_expr_attrs(\"{\n-        #[attr] let _ = 0;\n-        #[attr] 0;\n-        #[attr] foo!();\n-        #[attr] foo!{}\n-        #[attr] foo![];\n-    }\", none);\n-\n-    check_stmt_attrs(\"#[attr] let _ = 0\", outer);\n-    check_stmt_attrs(\"#[attr] 0\",         outer);\n-    check_stmt_attrs(\"#[attr] {#![attr]}\", both);\n-    check_stmt_attrs(\"#[attr] foo!()\",    outer);\n-    check_stmt_attrs(\"#[attr] foo![]\",    outer);\n-    check_stmt_attrs(\"#[attr] foo!{}\",    outer);\n-\n-    reject_stmt_parse(\"#[attr] #![attr] let _ = 0\");\n-    reject_stmt_parse(\"#[attr] #![attr] 0\");\n-    reject_stmt_parse(\"#[attr] #![attr] foo!()\");\n-    reject_stmt_parse(\"#[attr] #![attr] foo![]\");\n-    reject_stmt_parse(\"#[attr] #![attr] foo!{}\");\n-\n-    // FIXME: Allow attributes in pattern constexprs?\n-    // note: requires parens in patterns to allow disambiguation\n-\n-    reject_expr_parse(\"match 0 {\n-        0..=#[attr] 10 => ()\n-    }\");\n-    reject_expr_parse(\"match 0 {\n-        0..=#[attr] -10 => ()\n-    }\");\n-    reject_expr_parse(\"match 0 {\n-        0..=-#[attr] 10 => ()\n-    }\");\n-    reject_expr_parse(\"match 0 {\n-        0..=#[attr] FOO => ()\n-    }\");\n-\n-    // make sure we don't catch this bug again...\n-    reject_expr_parse(\"{\n-        fn foo() {\n-            #[attr];\n-        }\n-    }\");\n-    reject_expr_parse(\"{\n-        fn foo() {\n-            #[attr]\n-        }\n-    }\");\n-}"}, {"sha": "e5ac59ae463010b1a6aff3c0cfc0886194055d4e", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad-2.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad-2.rs?ref=19db2d2fed4de5a480bca028458f616d21db92a9", "patch": "@@ -0,0 +1,2 @@\n+#[cfg(FALSE)] fn e() { let _ = x.#![attr]foo(); }\n+//~^ ERROR unexpected token: `#`"}, {"sha": "ca1043250ba78521178b2ec789374d7b173cfed1", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad-2.stderr?ref=19db2d2fed4de5a480bca028458f616d21db92a9", "patch": "@@ -0,0 +1,8 @@\n+error: unexpected token: `#`\n+  --> $DIR/attr-stmt-expr-attr-bad-2.rs:1:34\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = x.#![attr]foo(); }\n+   |                                  ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7dc71af52f4d97b234d57ca37719be438d87298a", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad-3.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad-3.rs?ref=19db2d2fed4de5a480bca028458f616d21db92a9", "patch": "@@ -0,0 +1,2 @@\n+#[cfg(FALSE)] fn e() { let _ = x.#[attr]foo(); }\n+//~^ ERROR unexpected token: `#`"}, {"sha": "ab9366d042a2c1acae5ed5e2778c0b931126760e", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad-3.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad-3.stderr?ref=19db2d2fed4de5a480bca028458f616d21db92a9", "patch": "@@ -0,0 +1,8 @@\n+error: unexpected token: `#`\n+  --> $DIR/attr-stmt-expr-attr-bad-3.rs:1:34\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = x.#[attr]foo(); }\n+   |                                  ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "ef10010ed0e617c7bd14d4b5aff7baca6e193455", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.rs", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs?ref=19db2d2fed4de5a480bca028458f616d21db92a9", "patch": "@@ -0,0 +1,107 @@\n+fn main() {}\n+\n+#[cfg(FALSE)] fn e() { let _ = box #![attr] 0; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = [#[attr]]; }\n+//~^ ERROR expected expression, found `]`\n+#[cfg(FALSE)] fn e() { let _ = foo#[attr](); }\n+//~^ ERROR expected one of\n+#[cfg(FALSE)] fn e() { let _ = foo(#![attr]); }\n+//~^ ERROR an inner attribute is not permitted in this context\n+//~| ERROR expected expression, found `)`\n+#[cfg(FALSE)] fn e() { let _ = x.foo(#![attr]); }\n+//~^ ERROR an inner attribute is not permitted in this context\n+//~| ERROR expected expression, found `)`\n+#[cfg(FALSE)] fn e() { let _ = 0 + #![attr] 0; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = !#![attr] 0; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = -#![attr] 0; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = x #![attr] as Y; }\n+//~^ ERROR expected one of\n+#[cfg(FALSE)] fn e() { let _ = || #![attr] foo; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = move || #![attr] foo; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = || #![attr] {foo}; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = move || #![attr] {foo}; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = #[attr] ..#[attr] 0; }\n+//~^ ERROR expected expression, found `..`\n+#[cfg(FALSE)] fn e() { let _ = #[attr] ..; }\n+//~^ ERROR expected expression, found `..`\n+#[cfg(FALSE)] fn e() { let _ = #[attr] &#![attr] 0; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = #[attr] &mut #![attr] 0; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = #[attr] if 0 {}; }\n+//~^ ERROR attributes are not yet allowed on `if` expressions\n+#[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n+//~^ ERROR expected `{`, found `#`\n+#[cfg(FALSE)] fn e() { let _ = if 0 {#![attr]}; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = if 0 {} #[attr] else {}; }\n+//~^ ERROR expected one of\n+#[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] {}; }\n+//~^ ERROR expected `{`, found `#`\n+#[cfg(FALSE)] fn e() { let _ = if 0 {} else {#![attr]}; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n+//~^ ERROR attributes are not yet allowed on `if` expressions\n+//~| ERROR expected `{`, found `#`\n+#[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n+//~^ ERROR expected `{`, found `#`\n+#[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 {#![attr]}; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = #[attr] if let _ = 0 {}; }\n+//~^ ERROR attributes are not yet allowed on `if` expressions\n+#[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n+//~^ ERROR expected `{`, found `#`\n+#[cfg(FALSE)] fn e() { let _ = if let _ = 0 {#![attr]}; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} #[attr] else {}; }\n+//~^ ERROR expected one of\n+#[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] {}; }\n+//~^ ERROR expected `{`, found `#`\n+#[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else {#![attr]}; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n+//~^ ERROR attributes are not yet allowed on `if` expressions\n+//~| ERROR expected `{`, found `#`\n+#[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}; }\n+//~^ ERROR expected `{`, found `#`\n+#[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 {#![attr]}; }\n+//~^ ERROR an inner attribute is not permitted in this context\n+\n+#[cfg(FALSE)] fn s() { #[attr] #![attr] let _ = 0; }\n+//~^ ERROR an inner attribute is not permitted following an outer attribute\n+#[cfg(FALSE)] fn s() { #[attr] #![attr] 0; }\n+//~^ ERROR an inner attribute is not permitted following an outer attribute\n+#[cfg(FALSE)] fn s() { #[attr] #![attr] foo!(); }\n+//~^ ERROR an inner attribute is not permitted following an outer attribute\n+#[cfg(FALSE)] fn s() { #[attr] #![attr] foo![]; }\n+//~^ ERROR an inner attribute is not permitted following an outer attribute\n+#[cfg(FALSE)] fn s() { #[attr] #![attr] foo!{}; }\n+//~^ ERROR an inner attribute is not permitted following an outer attribute\n+\n+// FIXME: Allow attributes in pattern constexprs?\n+// note: requires parens in patterns to allow disambiguation\n+\n+#[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] 10 => () } }\n+//~^ ERROR `X..=` range patterns are not supported\n+//~| ERROR expected one of `=>`, `if`, or `|`, found `#`\n+#[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] -10 => () } }\n+//~^ ERROR `X..=` range patterns are not supported\n+//~| ERROR expected one of `=>`, `if`, or `|`, found `#`\n+#[cfg(FALSE)] fn e() { match 0 { 0..=-#[attr] 10 => () } }\n+//~^ ERROR unexpected token: `#`\n+#[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] FOO => () } }\n+//~^ ERROR `X..=` range patterns are not supported\n+//~| ERROR expected one of `=>`, `if`, or `|`, found `#`\n+\n+// make sure we don't catch this bug again...\n+#[cfg(FALSE)] fn e() { { fn foo() { #[attr]; } } }\n+//~^ ERROR expected statement after outer attribute\n+#[cfg(FALSE)] fn e() { { fn foo() { #[attr] } } }"}, {"sha": "9a0d3176714faf9f3e5a708083c254a35f53ad45", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.stderr", "status": "added", "additions": 390, "deletions": 0, "changes": 390, "blob_url": "https://github.com/rust-lang/rust/blob/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19db2d2fed4de5a480bca028458f616d21db92a9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr?ref=19db2d2fed4de5a480bca028458f616d21db92a9", "patch": "@@ -0,0 +1,390 @@\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:3:36\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = box #![attr] 0; }\n+   |                                    ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: expected expression, found `]`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:5:40\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = [#[attr]]; }\n+   |                                        ^ expected expression\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:7:35\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = foo#[attr](); }\n+   |                                   ^ expected one of 7 possible tokens\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:9:36\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = foo(#![attr]); }\n+   |                                    ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: expected expression, found `)`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:9:44\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = foo(#![attr]); }\n+   |                                            ^ expected expression\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:12:38\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = x.foo(#![attr]); }\n+   |                                      ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: expected expression, found `)`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:12:46\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = x.foo(#![attr]); }\n+   |                                              ^ expected expression\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:15:36\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = 0 + #![attr] 0; }\n+   |                                    ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:17:33\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = !#![attr] 0; }\n+   |                                 ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:19:33\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = -#![attr] 0; }\n+   |                                 ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:21:34\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = x #![attr] as Y; }\n+   |                                  ^ expected one of 7 possible tokens\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:23:35\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = || #![attr] foo; }\n+   |                                   ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:25:40\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = move || #![attr] foo; }\n+   |                                        ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:27:35\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = || #![attr] {foo}; }\n+   |                                   ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:29:40\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = move || #![attr] {foo}; }\n+   |                                        ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: expected expression, found `..`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:31:40\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = #[attr] ..#[attr] 0; }\n+   |                                        ^^ expected expression\n+\n+error: expected expression, found `..`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:33:40\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = #[attr] ..; }\n+   |                                        ^^ expected expression\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:35:41\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &#![attr] 0; }\n+   |                                         ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:37:45\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &mut #![attr] 0; }\n+   |                                             ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: attributes are not yet allowed on `if` expressions\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:39:32\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = #[attr] if 0 {}; }\n+   |                                ^^^^^^^\n+\n+error: expected `{`, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:41:37\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n+   |                                --   ^       --- help: try placing this code inside a block: `{ {}; }`\n+   |                                |    |\n+   |                                |    expected `{`\n+   |                                this `if` statement has a condition, but no block\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:43:38\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if 0 {#![attr]}; }\n+   |                                      ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:45:40\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} #[attr] else {}; }\n+   |                                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n+\n+error: expected `{`, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:47:45\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] {}; }\n+   |                                             ^       --- help: try placing this code inside a block: `{ {}; }`\n+   |                                             |\n+   |                                             expected `{`\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:49:46\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else {#![attr]}; }\n+   |                                              ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: attributes are not yet allowed on `if` expressions\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:51:45\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n+   |                                             ^^^^^^^\n+\n+error: expected `{`, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:51:45\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n+   |                                             ^       -------- help: try placing this code inside a block: `{ if 0 {}; }`\n+   |                                             |\n+   |                                             expected `{`\n+\n+error: expected `{`, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:54:50\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n+   |                                             --   ^       --- help: try placing this code inside a block: `{ {}; }`\n+   |                                             |    |\n+   |                                             |    expected `{`\n+   |                                             this `if` statement has a condition, but no block\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:56:51\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 {#![attr]}; }\n+   |                                                   ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: attributes are not yet allowed on `if` expressions\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:58:32\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = #[attr] if let _ = 0 {}; }\n+   |                                ^^^^^^^\n+\n+error: expected `{`, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:60:45\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n+   |                                --           ^       --- help: try placing this code inside a block: `{ {}; }`\n+   |                                |            |\n+   |                                |            expected `{`\n+   |                                this `if` statement has a condition, but no block\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:62:46\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {#![attr]}; }\n+   |                                              ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:64:48\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} #[attr] else {}; }\n+   |                                                ^ expected one of `.`, `;`, `?`, `else`, or an operator\n+\n+error: expected `{`, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:66:53\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] {}; }\n+   |                                                     ^       --- help: try placing this code inside a block: `{ {}; }`\n+   |                                                     |\n+   |                                                     expected `{`\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:68:54\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else {#![attr]}; }\n+   |                                                      ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: attributes are not yet allowed on `if` expressions\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:70:53\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n+   |                                                     ^^^^^^^\n+\n+error: expected `{`, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:70:53\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n+   |                                                     ^       ---------------- help: try placing this code inside a block: `{ if let _ = 0 {}; }`\n+   |                                                     |\n+   |                                                     expected `{`\n+\n+error: expected `{`, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:73:66\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}; }\n+   |                                                     --           ^       --- help: try placing this code inside a block: `{ {}; }`\n+   |                                                     |            |\n+   |                                                     |            expected `{`\n+   |                                                     this `if` statement has a condition, but no block\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:75:67\n+   |\n+LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 {#![attr]}; }\n+   |                                                                   ^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: an inner attribute is not permitted following an outer attribute\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:78:32\n+   |\n+LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] let _ = 0; }\n+   |                        ------- ^^^^^^^^ not permitted following an outer attibute\n+   |                        |\n+   |                        previous outer attribute\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: an inner attribute is not permitted following an outer attribute\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:80:32\n+   |\n+LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] 0; }\n+   |                        ------- ^^^^^^^^ not permitted following an outer attibute\n+   |                        |\n+   |                        previous outer attribute\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: an inner attribute is not permitted following an outer attribute\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:82:32\n+   |\n+LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!(); }\n+   |                        ------- ^^^^^^^^ not permitted following an outer attibute\n+   |                        |\n+   |                        previous outer attribute\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: an inner attribute is not permitted following an outer attribute\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:84:32\n+   |\n+LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo![]; }\n+   |                        ------- ^^^^^^^^ not permitted following an outer attibute\n+   |                        |\n+   |                        previous outer attribute\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: an inner attribute is not permitted following an outer attribute\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:86:32\n+   |\n+LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!{}; }\n+   |                        ------- ^^^^^^^^ not permitted following an outer attibute\n+   |                        |\n+   |                        previous outer attribute\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+\n+error: `X..=` range patterns are not supported\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:92:34\n+   |\n+LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] 10 => () } }\n+   |                                  ^^^^ help: try using the maximum value for the type: `0..=MAX`\n+\n+error: expected one of `=>`, `if`, or `|`, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:92:38\n+   |\n+LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] 10 => () } }\n+   |                                      ^ expected one of `=>`, `if`, or `|`\n+\n+error: `X..=` range patterns are not supported\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:95:34\n+   |\n+LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] -10 => () } }\n+   |                                  ^^^^ help: try using the maximum value for the type: `0..=MAX`\n+\n+error: expected one of `=>`, `if`, or `|`, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:95:38\n+   |\n+LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] -10 => () } }\n+   |                                      ^ expected one of `=>`, `if`, or `|`\n+\n+error: unexpected token: `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:98:39\n+   |\n+LL | #[cfg(FALSE)] fn e() { match 0 { 0..=-#[attr] 10 => () } }\n+   |                                       ^\n+\n+error: `X..=` range patterns are not supported\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:100:34\n+   |\n+LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] FOO => () } }\n+   |                                  ^^^^ help: try using the maximum value for the type: `0..=MAX`\n+\n+error: expected one of `=>`, `if`, or `|`, found `#`\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:100:38\n+   |\n+LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] FOO => () } }\n+   |                                      ^ expected one of `=>`, `if`, or `|`\n+\n+error: expected statement after outer attribute\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:105:44\n+   |\n+LL | #[cfg(FALSE)] fn e() { { fn foo() { #[attr]; } } }\n+   |                                            ^\n+\n+error: aborting due to 52 previous errors\n+"}]}