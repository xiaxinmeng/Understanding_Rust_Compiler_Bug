{"sha": "0bc067089eae3011b92aed71191a48bf2b9a0d58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYzA2NzA4OWVhZTMwMTFiOTJhZWQ3MTE5MWE0OGJmMmI5YTBkNTg=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-04-17T21:33:21Z"}, "committer": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-04-17T21:33:21Z"}, "message": "add neg_multiply lint (#862)\n\nadd neg_multiply lint", "tree": {"sha": "6e388dcf8b3f830eb20165bbdf42cf8a205c5fae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e388dcf8b3f830eb20165bbdf42cf8a205c5fae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bc067089eae3011b92aed71191a48bf2b9a0d58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc067089eae3011b92aed71191a48bf2b9a0d58", "html_url": "https://github.com/rust-lang/rust/commit/0bc067089eae3011b92aed71191a48bf2b9a0d58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bc067089eae3011b92aed71191a48bf2b9a0d58/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b433327311891938459db97004f02a5102d52c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b433327311891938459db97004f02a5102d52c6c", "html_url": "https://github.com/rust-lang/rust/commit/b433327311891938459db97004f02a5102d52c6c"}], "stats": {"total": 107, "additions": 105, "deletions": 2}, "files": [{"sha": "d02136421ec2fa20c6b9d53480696c3f0f3feb4b", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bc067089eae3011b92aed71191a48bf2b9a0d58/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0bc067089eae3011b92aed71191a48bf2b9a0d58/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0bc067089eae3011b92aed71191a48bf2b9a0d58", "patch": "@@ -145,6 +145,7 @@ All notable changes to this project will be documented in this file.\n [`needless_range_loop`]: https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop\n [`needless_return`]: https://github.com/Manishearth/rust-clippy/wiki#needless_return\n [`needless_update`]: https://github.com/Manishearth/rust-clippy/wiki#needless_update\n+[`neg_multiply`]: https://github.com/Manishearth/rust-clippy/wiki#neg_multiply\n [`new_ret_no_self`]: https://github.com/Manishearth/rust-clippy/wiki#new_ret_no_self\n [`new_without_default`]: https://github.com/Manishearth/rust-clippy/wiki#new_without_default\n [`no_effect`]: https://github.com/Manishearth/rust-clippy/wiki#no_effect"}, {"sha": "3951418eade5693f5dd6a9b67ca1b819d94cc575", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0bc067089eae3011b92aed71191a48bf2b9a0d58/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0bc067089eae3011b92aed71191a48bf2b9a0d58/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0bc067089eae3011b92aed71191a48bf2b9a0d58", "patch": "@@ -14,7 +14,7 @@ Table of contents:\n * [License](#license)\n \n ##Lints\n-There are 141 lints included in this crate:\n+There are 142 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -95,6 +95,7 @@ name\n [needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)                           | warn    | for-looping over a range of indices where an iterator over items would do\n [needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                                   | warn    | using a return statement like `return expr;` where an expression would suffice\n [needless_update](https://github.com/Manishearth/rust-clippy/wiki#needless_update)                                   | warn    | using `{ ..base }` when there are no missing fields\n+[neg_multiply](https://github.com/Manishearth/rust-clippy/wiki#neg_multiply)                                         | warn    | Warns on multiplying integers with -1\n [new_ret_no_self](https://github.com/Manishearth/rust-clippy/wiki#new_ret_no_self)                                   | warn    | not returning `Self` in a `new` method\n [new_without_default](https://github.com/Manishearth/rust-clippy/wiki#new_without_default)                           | warn    | `fn new() -> Self` method without `Default` implementation\n [no_effect](https://github.com/Manishearth/rust-clippy/wiki#no_effect)                                               | warn    | statements with no effect"}, {"sha": "4a5f457ed7d10bb66312402d63bd0e21e7e07885", "filename": "src/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0bc067089eae3011b92aed71191a48bf2b9a0d58/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc067089eae3011b92aed71191a48bf2b9a0d58/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=0bc067089eae3011b92aed71191a48bf2b9a0d58", "patch": "@@ -177,8 +177,9 @@ impl PartialOrd for Constant {\n     }\n }\n \n+/// parse a `LitKind` to a `Constant`\n #[allow(cast_possible_wrap)]\n-fn lit_to_constant(lit: &LitKind) -> Constant {\n+pub fn lit_to_constant(lit: &LitKind) -> Constant {\n     match *lit {\n         LitKind::Str(ref is, style) => Constant::Str(is.to_string(), style),\n         LitKind::Byte(b) => Constant::Int(ConstInt::U8(b)),"}, {"sha": "6d98cf55f091650210708c48ae3a45bdcb3e99ce", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0bc067089eae3011b92aed71191a48bf2b9a0d58/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc067089eae3011b92aed71191a48bf2b9a0d58/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0bc067089eae3011b92aed71191a48bf2b9a0d58", "patch": "@@ -88,6 +88,7 @@ pub mod mut_reference;\n pub mod mutex_atomic;\n pub mod needless_bool;\n pub mod needless_update;\n+pub mod neg_multiply;\n pub mod new_without_default;\n pub mod no_effect;\n pub mod non_expressive_names;\n@@ -232,6 +233,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box blacklisted_name::BlackListedName::new(conf.blacklisted_names));\n     reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold));\n     reg.register_early_lint_pass(box doc::Doc::new(conf.doc_valid_idents));\n+    reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         array_indexing::INDEXING_SLICING,\n@@ -343,6 +345,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         needless_bool::BOOL_COMPARISON,\n         needless_bool::NEEDLESS_BOOL,\n         needless_update::NEEDLESS_UPDATE,\n+        neg_multiply::NEG_MULTIPLY,\n         new_without_default::NEW_WITHOUT_DEFAULT,\n         no_effect::NO_EFFECT,\n         non_expressive_names::MANY_SINGLE_CHAR_NAMES,"}, {"sha": "fb986409a416ea9abb63da2b963d12318e2ba8a8", "filename": "src/neg_multiply.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0bc067089eae3011b92aed71191a48bf2b9a0d58/src%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc067089eae3011b92aed71191a48bf2b9a0d58/src%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneg_multiply.rs?ref=0bc067089eae3011b92aed71191a48bf2b9a0d58", "patch": "@@ -0,0 +1,57 @@\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use syntax::codemap::{Span, Spanned};\n+\n+use consts::{self, Constant};\n+use utils::span_lint;\n+\n+/// **What it does:** Checks for multiplication by -1 as a form of negation.\n+///\n+/// **Why is this bad?** It's more readable to just negate.\n+///\n+/// **Known problems:** This only catches integers (for now)\n+///\n+/// **Example:** `x * -1`\n+declare_lint! {\n+    pub NEG_MULTIPLY,\n+    Warn,\n+    \"Warns on multiplying integers with -1\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct NegMultiply;\n+\n+impl LintPass for NegMultiply {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NEG_MULTIPLY)\n+    }\n+}\n+\n+#[allow(match_same_arms)]\n+impl LateLintPass for NegMultiply {\n+    fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n+        if let ExprBinary(Spanned { node: BiMul, .. }, ref l, ref r) = e.node {\n+            match (&l.node, &r.node) {\n+                (&ExprUnary(..), &ExprUnary(..)) => (),\n+                (&ExprUnary(UnNeg, ref lit), _) => check_mul(cx, e.span, lit, r),\n+                (_, &ExprUnary(UnNeg, ref lit)) => check_mul(cx, e.span, lit, l),\n+                _ => ()\n+            }\n+        }\n+    }\n+}\n+\n+fn check_mul(cx: &LateContext, span: Span, lit: &Expr, exp: &Expr) {\n+    if_let_chain!([\n+        let ExprLit(ref l) = lit.node,\n+        let Constant::Int(ref ci) = consts::lit_to_constant(&l.node),\n+        let Some(val) = ci.to_u64(),\n+        val == 1,\n+        cx.tcx.expr_ty(exp).is_integral()\n+    ], {\n+        span_lint(cx, \n+                  NEG_MULTIPLY,\n+                  span,\n+                  \"Negation by multiplying with -1\");\n+    })\n+}"}, {"sha": "9deb38920deb155c57e1497fdd4044868c807e7d", "filename": "tests/compile-fail/neg_multiply.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0bc067089eae3011b92aed71191a48bf2b9a0d58/tests%2Fcompile-fail%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc067089eae3011b92aed71191a48bf2b9a0d58/tests%2Fcompile-fail%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneg_multiply.rs?ref=0bc067089eae3011b92aed71191a48bf2b9a0d58", "patch": "@@ -0,0 +1,40 @@\n+#![feature(plugin)]\n+\n+#![plugin(clippy)]\n+#![deny(neg_multiply)]\n+#![allow(no_effect)]\n+\n+use std::ops::Mul;\n+\n+struct X;\n+\n+impl Mul<isize> for X {\n+    type Output = X;\n+    \n+    fn mul(self, _r: isize) -> Self {\n+        self\n+    }\n+}\n+\n+impl Mul<X> for isize {\n+    type Output = X;\n+    \n+    fn mul(self, _r: X) -> X {\n+        X\n+    }\n+}\n+\n+fn main() {\n+    let x = 0;\n+\n+    x * -1;\n+    //~^ ERROR Negation by multiplying with -1\n+\n+    -1 * x;\n+    //~^ ERROR Negation by multiplying with -1\n+\n+    -1 * -1; // should be ok\n+    \n+    X * -1; // should be ok\n+    -1 * X; // should also be ok\n+}"}]}