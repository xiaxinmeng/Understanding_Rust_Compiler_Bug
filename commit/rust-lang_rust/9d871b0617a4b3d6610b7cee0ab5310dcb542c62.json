{"sha": "9d871b0617a4b3d6610b7cee0ab5310dcb542c62", "node_id": "C_kwDOAAsO6NoAKDlkODcxYjA2MTdhNGIzZDY2MTBiN2NlZTBhYjUzMTBkY2I1NDJjNjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-21T19:19:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-21T19:19:49Z"}, "message": "Auto merge of #111731 - MU001999:fix/issue-111727, r=cjgillot\n\nKeep only the trait when emitting the error for `MyTrait + 'a`\n\nFixes #111727", "tree": {"sha": "85d96241b560449e3bc8ffc32786b56b5c42efd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85d96241b560449e3bc8ffc32786b56b5c42efd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d871b0617a4b3d6610b7cee0ab5310dcb542c62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d871b0617a4b3d6610b7cee0ab5310dcb542c62", "html_url": "https://github.com/rust-lang/rust/commit/9d871b0617a4b3d6610b7cee0ab5310dcb542c62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d871b0617a4b3d6610b7cee0ab5310dcb542c62/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "965cf5c1f5d4906935c552e1b9099c56e097e7aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/965cf5c1f5d4906935c552e1b9099c56e097e7aa", "html_url": "https://github.com/rust-lang/rust/commit/965cf5c1f5d4906935c552e1b9099c56e097e7aa"}, {"sha": "d57383855eb56dc530deb18f0ab8ce39ac71a6ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/d57383855eb56dc530deb18f0ab8ce39ac71a6ae", "html_url": "https://github.com/rust-lang/rust/commit/d57383855eb56dc530deb18f0ab8ce39ac71a6ae"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "17364509844db802d6baf24764314c3a6f8a1f34", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9d871b0617a4b3d6610b7cee0ab5310dcb542c62/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d871b0617a4b3d6610b7cee0ab5310dcb542c62/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=9d871b0617a4b3d6610b7cee0ab5310dcb542c62", "patch": "@@ -288,8 +288,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mode = no_match_data.mode;\n         let tcx = self.tcx;\n         let rcvr_ty = self.resolve_vars_if_possible(rcvr_ty);\n-        let (ty_str, ty_file) = tcx.short_ty_string(rcvr_ty);\n-        let short_ty_str = with_forced_trimmed_paths!(rcvr_ty.to_string());\n+        let ((mut ty_str, ty_file), short_ty_str) = if trait_missing_method\n+            && let ty::Dynamic(predicates, _, _) = rcvr_ty.kind() {\n+                ((predicates.to_string(), None), with_forced_trimmed_paths!(predicates.to_string()))\n+            } else {\n+                (tcx.short_ty_string(rcvr_ty), with_forced_trimmed_paths!(rcvr_ty.to_string()))\n+            };\n         let is_method = mode == Mode::MethodCall;\n         let unsatisfied_predicates = &no_match_data.unsatisfied_predicates;\n         let similar_candidate = no_match_data.similar_candidate;\n@@ -329,12 +333,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         span = item_name.span;\n \n         // Don't show generic arguments when the method can't be found in any implementation (#81576).\n-        let mut ty_str_reported = if trait_missing_method {\n-            ty_str.strip_prefix(\"dyn \").expect(\"Failed to remove the prefix dyn\").to_owned()\n-        } else {\n-            ty_str.clone()\n-        };\n-\n+        let mut ty_str_reported = ty_str.clone();\n         if let ty::Adt(_, generics) = rcvr_ty.kind() {\n             if generics.len() > 0 {\n                 let mut autoderef = self.autoderef(span, rcvr_ty);\n@@ -383,14 +382,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if tcx.sess.source_map().is_multiline(sugg_span) {\n             err.span_label(sugg_span.with_hi(span.lo()), \"\");\n         }\n-        let mut ty_str = if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n-            short_ty_str\n-        } else {\n-            ty_str\n-        };\n-        if trait_missing_method {\n-            ty_str =\n-                ty_str.strip_prefix(\"dyn \").expect(\"Failed to remove the prefix dyn\").to_owned();\n+\n+        if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n+            ty_str = short_ty_str;\n         }\n \n         if let Some(file) = ty_file {"}, {"sha": "36f3081211d2fdbfe8339d8d32d4abddb49e8d76", "filename": "tests/ui/resolve/issue-111727.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d871b0617a4b3d6610b7cee0ab5310dcb542c62/tests%2Fui%2Fresolve%2Fissue-111727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d871b0617a4b3d6610b7cee0ab5310dcb542c62/tests%2Fui%2Fresolve%2Fissue-111727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-111727.rs?ref=9d871b0617a4b3d6610b7cee0ab5310dcb542c62", "patch": "@@ -0,0 +1,5 @@\n+// edition: 2021\n+\n+fn main() {\n+    std::any::Any::create(); //~ ERROR\n+}"}, {"sha": "bd748211ed321eb95d25d830f10b4b3d226cfd55", "filename": "tests/ui/resolve/issue-111727.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d871b0617a4b3d6610b7cee0ab5310dcb542c62/tests%2Fui%2Fresolve%2Fissue-111727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d871b0617a4b3d6610b7cee0ab5310dcb542c62/tests%2Fui%2Fresolve%2Fissue-111727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-111727.stderr?ref=9d871b0617a4b3d6610b7cee0ab5310dcb542c62", "patch": "@@ -0,0 +1,9 @@\n+error[E0599]: no function or associated item named `create` found for trait `Any`\n+  --> $DIR/issue-111727.rs:4:20\n+   |\n+LL |     std::any::Any::create();\n+   |                    ^^^^^^ function or associated item not found in `Any`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}