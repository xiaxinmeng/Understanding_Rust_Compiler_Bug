{"sha": "8f8c90e5b5b9d005999c18257f3844e92bc89eee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmOGM5MGU1YjViOWQwMDU5OTljMTgyNTdmMzg0NGU5MmJjODllZWU=", "commit": {"author": {"name": "Christopher Serr", "email": "christopher.serr@gmail.com", "date": "2020-06-27T12:03:32Z"}, "committer": {"name": "Christopher Serr", "email": "christopher.serr@gmail.com", "date": "2020-07-02T07:32:12Z"}, "message": "Add comments and format the code", "tree": {"sha": "02c3e61fe533421d24d1024fef54f26f19a38ba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02c3e61fe533421d24d1024fef54f26f19a38ba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f8c90e5b5b9d005999c18257f3844e92bc89eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f8c90e5b5b9d005999c18257f3844e92bc89eee", "html_url": "https://github.com/rust-lang/rust/commit/8f8c90e5b5b9d005999c18257f3844e92bc89eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f8c90e5b5b9d005999c18257f3844e92bc89eee/comments", "author": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c08451fc43f4185d122efa91b996e137365f49c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c08451fc43f4185d122efa91b996e137365f49c", "html_url": "https://github.com/rust-lang/rust/commit/4c08451fc43f4185d122efa91b996e137365f49c"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "eed327d0bc1563d2f23e94114b378166c64429f4", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f8c90e5b5b9d005999c18257f3844e92bc89eee/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f8c90e5b5b9d005999c18257f3844e92bc89eee/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=8f8c90e5b5b9d005999c18257f3844e92bc89eee", "patch": "@@ -479,11 +479,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 let llptr = self.struct_gep(place.llval, i as u64);\n                 let load = self.load(llptr, align);\n                 scalar_load_metadata(self, load, scalar);\n-                if scalar.is_bool() {\n-                    self.trunc(load, self.type_i1())\n-                } else {\n-                    load\n-                }\n+                if scalar.is_bool() { self.trunc(load, self.type_i1()) } else { load }\n             };\n \n             OperandValue::Pair(\n@@ -658,6 +654,9 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn fptoui_sat(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> Option<&'ll Value> {\n+        // WebAssembly has saturating floating point to integer casts if the\n+        // `nontrapping-fptoint` target feature is activated. We'll use those if\n+        // they are available.\n         if self.sess().target.target.arch == \"wasm32\"\n             && self.sess().target_features.contains(&sym::wasm_nontrapping_fptoint)\n         {\n@@ -680,6 +679,9 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn fptosi_sat(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> Option<&'ll Value> {\n+        // WebAssembly has saturating floating point to integer casts if the\n+        // `nontrapping-fptoint` target feature is activated. We'll use those if\n+        // they are available.\n         if self.sess().target.target.arch == \"wasm32\"\n             && self.sess().target_features.contains(&sym::wasm_nontrapping_fptoint)\n         {"}]}