{"sha": "d9317a174e434d4c99fc1a37fd7dc0d2f5328d37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MzE3YTE3NGU0MzRkNGM5OWZjMWEzN2ZkN2RjMGQyZjUzMjhkMzc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-10T04:39:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-10T04:39:18Z"}, "message": "doc: Tweak the wording of the memory model goals", "tree": {"sha": "436918e2ad1de169c2fb4e17f655a2c8c872151d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/436918e2ad1de169c2fb4e17f655a2c8c872151d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9317a174e434d4c99fc1a37fd7dc0d2f5328d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9317a174e434d4c99fc1a37fd7dc0d2f5328d37", "html_url": "https://github.com/rust-lang/rust/commit/d9317a174e434d4c99fc1a37fd7dc0d2f5328d37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9317a174e434d4c99fc1a37fd7dc0d2f5328d37/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6da09c3b437dad240218b91ea06c301982764152", "url": "https://api.github.com/repos/rust-lang/rust/commits/6da09c3b437dad240218b91ea06c301982764152", "html_url": "https://github.com/rust-lang/rust/commit/6da09c3b437dad240218b91ea06c301982764152"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "59117d339a1da1dfa30e9a7ffa9840b01b5c3b42", "filename": "doc/tutorial.md", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d9317a174e434d4c99fc1a37fd7dc0d2f5328d37/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/d9317a174e434d4c99fc1a37fd7dc0d2f5328d37/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=d9317a174e434d4c99fc1a37fd7dc0d2f5328d37", "patch": "@@ -988,16 +988,17 @@ illuminate several of Rust's unique features as we encounter them.\n \n Rust has three competing goals that inform its view of memory:\n \n-* Memory safety: memory that is managed by and is accessible to the\n-  Rust language must be guaranteed to be valid; under normal\n+* Memory safety: Memory that is managed by and is accessible to the\n+  Rust language must be guaranteed to be valid. Under normal\n   circumstances it must be impossible for Rust to trigger a\n-  segmentation fault or leak memory\n-* Performance: high-performance low-level code must be able to employ\n-  a number of allocation strategies; low-performance high-level code\n-  must be able to employ a single, garbage-collection-based, heap\n-  allocation strategy\n-* Concurrency: Rust must maintain memory safety guarantees, even for\n-  code running in parallel\n+  segmentation fault or leak memory.\n+* Performance: High-performance low-level code must be able to employ\n+  a number of allocation strategies. Tracing garbage collection must be\n+  optional and, if it is not desired, memory safety must not be compromised.\n+  Less performance-critical, high-level code should be able to employ a single,\n+  garbage-collection-based, heap allocation strategy.\n+* Concurrency: Rust code must be free of in-memory data races. (Note that other\n+  types of races are still possible.)\n \n ## How performance considerations influence the memory model\n "}]}