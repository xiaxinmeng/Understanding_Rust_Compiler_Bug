{"sha": "64912c9a56415c8a8586cd743ddbf3ab9baea2de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0OTEyYzlhNTY0MTVjOGE4NTg2Y2Q3NDNkZGJmM2FiOWJhZWEyZGU=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-20T21:29:24Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-20T21:29:24Z"}, "message": "Use an unambiguous abbreviation for \"operand\" :)", "tree": {"sha": "721cf08ccfab5ab133085140d829675aecc2d66e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/721cf08ccfab5ab133085140d829675aecc2d66e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64912c9a56415c8a8586cd743ddbf3ab9baea2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64912c9a56415c8a8586cd743ddbf3ab9baea2de", "html_url": "https://github.com/rust-lang/rust/commit/64912c9a56415c8a8586cd743ddbf3ab9baea2de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64912c9a56415c8a8586cd743ddbf3ab9baea2de/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5316fe6bb51963c809b690c8db89ecf6ac08209f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5316fe6bb51963c809b690c8db89ecf6ac08209f", "html_url": "https://github.com/rust-lang/rust/commit/5316fe6bb51963c809b690c8db89ecf6ac08209f"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "04d3c4f90c5e8e900d8f4e3df248c782910a6515", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/64912c9a56415c8a8586cd743ddbf3ab9baea2de/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64912c9a56415c8a8586cd743ddbf3ab9baea2de/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=64912c9a56415c8a8586cd743ddbf3ab9baea2de", "patch": "@@ -1132,7 +1132,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         // and so forth. - Niko\n         fcx.write_nil(expr.id);\n       }\n-      ast::expr_unary(unop, oper) {\n+      ast::expr_unary(unop, oprnd) {\n         let exp_inner = unpack_expected(fcx, expected) {|sty|\n             alt unop {\n               ast::box(_) | ast::uniq(_) {\n@@ -1145,17 +1145,17 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n               ast::deref { none }\n             }\n         };\n-        bot = check_expr(fcx, oper, exp_inner);\n-        let mut oper_t = fcx.expr_ty(oper);\n+        bot = check_expr(fcx, oprnd, exp_inner);\n+        let mut oprnd_t = fcx.expr_ty(oprnd);\n         alt unop {\n           ast::box(mutbl) {\n-            oper_t = ty::mk_box(tcx, {ty: oper_t, mutbl: mutbl});\n+            oprnd_t = ty::mk_box(tcx, {ty: oprnd_t, mutbl: mutbl});\n           }\n           ast::uniq(mutbl) {\n-            oper_t = ty::mk_uniq(tcx, {ty: oper_t, mutbl: mutbl});\n+            oprnd_t = ty::mk_uniq(tcx, {ty: oprnd_t, mutbl: mutbl});\n           }\n           ast::deref {\n-            let sty = structure_of(fcx, expr.span, oper_t);\n+            let sty = structure_of(fcx, expr.span, oprnd_t);\n \n             // deref'ing an unsafe pointer requires that we be in an unsafe\n             // context\n@@ -1169,7 +1169,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n             }\n \n             alt ty::deref_sty(tcx, sty, true) {\n-              some(mt) { oper_t = mt.ty }\n+              some(mt) { oprnd_t = mt.ty }\n               none {\n                 alt sty {\n                   ty::ty_enum(*) {\n@@ -1183,39 +1183,39 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                     tcx.sess.span_err(\n                         expr.span,\n                         #fmt[\"type %s cannot be dereferenced\",\n-                             fcx.infcx.ty_to_str(oper_t)]);\n+                             fcx.infcx.ty_to_str(oprnd_t)]);\n                   }\n                 }\n               }\n             }\n           }\n           ast::not {\n-            oper_t = structurally_resolved_type(fcx, oper.span, oper_t);\n-            if !(ty::type_is_integral(oper_t) ||\n-                 ty::get(oper_t).struct == ty::ty_bool) {\n-                oper_t = check_user_unop(fcx, \"!\", \"!\", expr,\n-                                         oper, oper_t);\n+            oprnd_t = structurally_resolved_type(fcx, oprnd.span, oprnd_t);\n+            if !(ty::type_is_integral(oprnd_t) ||\n+                 ty::get(oprnd_t).struct == ty::ty_bool) {\n+                oprnd_t = check_user_unop(fcx, \"!\", \"!\", expr,\n+                                         oprnd, oprnd_t);\n             }\n           }\n           ast::neg {\n-            oper_t = structurally_resolved_type(fcx, oper.span, oper_t);\n-            if !(ty::type_is_integral(oper_t) ||\n-                 ty::type_is_fp(oper_t)) {\n-                oper_t = check_user_unop(fcx, \"-\", \"unary-\", expr,\n-                                         oper, oper_t);\n+            oprnd_t = structurally_resolved_type(fcx, oprnd.span, oprnd_t);\n+            if !(ty::type_is_integral(oprnd_t) ||\n+                 ty::type_is_fp(oprnd_t)) {\n+                oprnd_t = check_user_unop(fcx, \"-\", \"unary-\", expr,\n+                                         oprnd, oprnd_t);\n             }\n           }\n         }\n-        fcx.write_ty(id, oper_t);\n+        fcx.write_ty(id, oprnd_t);\n       }\n-      ast::expr_addr_of(mutbl, oper) {\n-        bot = check_expr(fcx, oper, unpack_expected(fcx, expected) {|ty|\n+      ast::expr_addr_of(mutbl, oprnd) {\n+        bot = check_expr(fcx, oprnd, unpack_expected(fcx, expected) {|ty|\n             alt ty { ty::ty_rptr(_, mt) { some(mt.ty) } _ { none } }\n         });\n-        let region = region_of(fcx, oper);\n-        let tm = { ty: fcx.expr_ty(oper), mutbl: mutbl };\n-        let oper_t = ty::mk_rptr(tcx, region, tm);\n-        fcx.write_ty(id, oper_t);\n+        let region = region_of(fcx, oprnd);\n+        let tm = { ty: fcx.expr_ty(oprnd), mutbl: mutbl };\n+        let oprnd_t = ty::mk_rptr(tcx, region, tm);\n+        fcx.write_ty(id, oprnd_t);\n       }\n       ast::expr_path(pth) {\n         let defn = lookup_def(fcx, pth.span, id);"}]}