{"sha": "9b21131278cc38ab8d79444de340015faadd061c", "node_id": "C_kwDOAAsO6NoAKDliMjExMzEyNzhjYzM4YWI4ZDc5NDQ0ZGUzNDAwMTVmYWFkZDA2MWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T23:36:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T23:36:21Z"}, "message": "Auto merge of #98360 - estebank:uninit-binding, r=oli-obk\n\n On partial uninit error point at where we need init\n\nWhen a binding is declared without a value, borrowck verifies that all\ncodepaths have *one* assignment to them to initialize them fully. If\nthere are any cases where a condition can be met that leaves the binding\nuninitialized or we attempt to initialize a field of an uninitialized\nbinding, we emit E0381.\n\nWe now look at all the statements that initialize the binding, and use\nthem to explore branching code paths that *don't* and point at them. If\nwe find *no* potential places where an assignment to the binding might\nbe missing, we display the spans of all the existing initializers to\nprovide some context.\n\nFix https://github.com/rust-lang/rust/issues/97956.", "tree": {"sha": "d1ab6e8690db439b7e41afc90a576d6a07dfaa04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1ab6e8690db439b7e41afc90a576d6a07dfaa04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b21131278cc38ab8d79444de340015faadd061c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b21131278cc38ab8d79444de340015faadd061c", "html_url": "https://github.com/rust-lang/rust/commit/9b21131278cc38ab8d79444de340015faadd061c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b21131278cc38ab8d79444de340015faadd061c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1517f5de01c445b5124b30f02257b02b4c5ef3b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1517f5de01c445b5124b30f02257b02b4c5ef3b2", "html_url": "https://github.com/rust-lang/rust/commit/1517f5de01c445b5124b30f02257b02b4c5ef3b2"}, {"sha": "2a2df9dda98524c3027e4b77b95403a144086a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a2df9dda98524c3027e4b77b95403a144086a9b", "html_url": "https://github.com/rust-lang/rust/commit/2a2df9dda98524c3027e4b77b95403a144086a9b"}], "stats": {"total": 1505, "additions": 1060, "deletions": 445}, "files": [{"sha": "08ea00d71ef9d246620a96d91f16b1afde05dc0c", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -33,22 +33,6 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn cannot_act_on_uninitialized_variable(\n-        &self,\n-        span: Span,\n-        verb: &str,\n-        desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n-        struct_span_err!(\n-            self,\n-            span,\n-            E0381,\n-            \"{} of possibly-uninitialized variable: `{}`\",\n-            verb,\n-            desc,\n-        )\n-    }\n-\n     pub(crate) fn cannot_mutably_borrow_multiply(\n         &self,\n         new_loan_span: Span,\n@@ -175,8 +159,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n             self,\n             new_loan_span,\n             E0501,\n-            \"cannot borrow {}{} as {} because previous closure \\\n-             requires unique access\",\n+            \"cannot borrow {}{} as {} because previous closure requires unique access\",\n             desc_new,\n             opt_via,\n             kind_new,\n@@ -453,9 +436,8 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n             self,\n             closure_span,\n             E0373,\n-            \"{} may outlive the current function, \\\n-             but it borrows {}, \\\n-             which is owned by the current function\",\n+            \"{} may outlive the current function, but it borrows {}, which is owned by the current \\\n+             function\",\n             closure_kind,\n             borrowed_path,\n         );\n@@ -479,7 +461,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n     }\n \n     #[rustc_lint_diagnostics]\n-    fn struct_span_err_with_code<S: Into<MultiSpan>>(\n+    pub(crate) fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,"}, {"sha": "b9cfc3732dc7cf13cd77a9e2195d4c4899859b62", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 275, "deletions": 20, "changes": 295, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -2,9 +2,12 @@ use either::Either;\n use rustc_const_eval::util::CallKind;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n+use rustc_errors::{\n+    struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n+};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::ObligationCause;\n@@ -18,6 +21,7 @@ use rustc_middle::ty::{\n     self, subst::Subst, suggest_constraining_type_params, EarlyBinder, PredicateKind, Ty,\n };\n use rustc_mir_dataflow::move_paths::{InitKind, MoveOutIndex, MovePathIndex};\n+use rustc_span::hygiene::DesugaringKind;\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, Span};\n use rustc_trait_selection::infer::InferCtxtExt;\n@@ -94,32 +98,20 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 return;\n             }\n \n-            let item_msg =\n-                match self.describe_place_with_options(used_place, IncludingDowncast(true)) {\n-                    Some(name) => format!(\"`{}`\", name),\n-                    None => \"value\".to_owned(),\n-                };\n-            let mut err = self.cannot_act_on_uninitialized_variable(\n+            let err = self.report_use_of_uninitialized(\n+                mpi,\n+                used_place,\n+                moved_place,\n+                desired_action,\n                 span,\n-                desired_action.as_noun(),\n-                &self\n-                    .describe_place_with_options(moved_place, IncludingDowncast(true))\n-                    .unwrap_or_else(|| \"_\".to_owned()),\n+                use_spans,\n             );\n-            err.span_label(span, format!(\"use of possibly-uninitialized {}\", item_msg));\n-\n-            use_spans.var_span_label_path_only(\n-                &mut err,\n-                format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n-            );\n-\n             self.buffer_error(err);\n         } else {\n             if let Some((reported_place, _)) = self.has_move_error(&move_out_indices) {\n                 if self.prefixes(*reported_place, PrefixSet::All).any(|p| p == used_place) {\n                     debug!(\n-                        \"report_use_of_moved_or_uninitialized place: error suppressed \\\n-                         mois={:?}\",\n+                        \"report_use_of_moved_or_uninitialized place: error suppressed mois={:?}\",\n                         move_out_indices\n                     );\n                     return;\n@@ -326,6 +318,130 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n     }\n \n+    fn report_use_of_uninitialized(\n+        &self,\n+        mpi: MovePathIndex,\n+        used_place: PlaceRef<'tcx>,\n+        moved_place: PlaceRef<'tcx>,\n+        desired_action: InitializationRequiringAction,\n+        span: Span,\n+        use_spans: UseSpans<'tcx>,\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+        // We need all statements in the body where the binding was assigned to to later find all\n+        // the branching code paths where the binding *wasn't* assigned to.\n+        let inits = &self.move_data.init_path_map[mpi];\n+        let move_path = &self.move_data.move_paths[mpi];\n+        let decl_span = self.body.local_decls[move_path.place.local].source_info.span;\n+        let mut spans = vec![];\n+        for init_idx in inits {\n+            let init = &self.move_data.inits[*init_idx];\n+            let span = init.span(&self.body);\n+            if !span.is_dummy() {\n+                spans.push(span);\n+            }\n+        }\n+\n+        let (name, desc) =\n+            match self.describe_place_with_options(moved_place, IncludingDowncast(true)) {\n+                Some(name) => (format!(\"`{name}`\"), format!(\"`{name}` \")),\n+                None => (\"the variable\".to_string(), String::new()),\n+            };\n+        let path = match self.describe_place_with_options(used_place, IncludingDowncast(true)) {\n+            Some(name) => format!(\"`{name}`\"),\n+            None => \"value\".to_string(),\n+        };\n+\n+        // We use the statements were the binding was initialized, and inspect the HIR to look\n+        // for the branching codepaths that aren't covered, to point at them.\n+        let hir_id = self.mir_hir_id();\n+        let map = self.infcx.tcx.hir();\n+        let body_id = map.body_owned_by(hir_id);\n+        let body = map.body(body_id);\n+\n+        let mut visitor = ConditionVisitor { spans: &spans, name: &name, errors: vec![] };\n+        visitor.visit_body(&body);\n+\n+        let isnt_initialized = if let InitializationRequiringAction::PartialAssignment\n+        | InitializationRequiringAction::Assignment = desired_action\n+        {\n+            // The same error is emitted for bindings that are *sometimes* initialized and the ones\n+            // that are *partially* initialized by assigning to a field of an uninitialized\n+            // binding. We differentiate between them for more accurate wording here.\n+            \"isn't fully initialized\"\n+        } else if spans\n+            .iter()\n+            .filter(|i| {\n+                // We filter these to avoid misleading wording in cases like the following,\n+                // where `x` has an `init`, but it is in the same place we're looking at:\n+                // ```\n+                // let x;\n+                // x += 1;\n+                // ```\n+                !i.contains(span)\n+                    // We filter these to avoid incorrect main message on `match-cfg-fake-edges.rs`\n+                        && !visitor\n+                            .errors\n+                            .iter()\n+                            .map(|(sp, _)| *sp)\n+                            .any(|sp| span < sp && !sp.contains(span))\n+            })\n+            .count()\n+            == 0\n+        {\n+            \"isn't initialized\"\n+        } else {\n+            \"is possibly-uninitialized\"\n+        };\n+\n+        let used = desired_action.as_general_verb_in_past_tense();\n+        let mut err =\n+            struct_span_err!(self, span, E0381, \"{used} binding {desc}{isnt_initialized}\");\n+        use_spans.var_span_label_path_only(\n+            &mut err,\n+            format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n+        );\n+\n+        if let InitializationRequiringAction::PartialAssignment\n+        | InitializationRequiringAction::Assignment = desired_action\n+        {\n+            err.help(\n+                \"partial initialization isn't supported, fully initialize the binding with a \\\n+                 default value and mutate it, or use `std::mem::MaybeUninit`\",\n+            );\n+        }\n+        err.span_label(span, format!(\"{path} {used} here but it {isnt_initialized}\"));\n+\n+        let mut shown = false;\n+        for (sp, label) in visitor.errors {\n+            if sp < span && !sp.overlaps(span) {\n+                // When we have a case like `match-cfg-fake-edges.rs`, we don't want to mention\n+                // match arms coming after the primary span because they aren't relevant:\n+                // ```\n+                // let x;\n+                // match y {\n+                //     _ if { x = 2; true } => {}\n+                //     _ if {\n+                //         x; //~ ERROR\n+                //         false\n+                //     } => {}\n+                //     _ => {} // We don't want to point to this.\n+                // };\n+                // ```\n+                err.span_label(sp, &label);\n+                shown = true;\n+            }\n+        }\n+        if !shown {\n+            for sp in &spans {\n+                if *sp < span && !sp.overlaps(span) {\n+                    err.span_label(*sp, \"binding initialized here in some conditions\");\n+                }\n+            }\n+        }\n+        err.span_label(decl_span, \"binding declared here but left uninitialized\");\n+        err\n+    }\n+\n     fn suggest_borrow_fn_like(\n         &self,\n         err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n@@ -2448,3 +2564,142 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n         }\n     }\n }\n+\n+/// Detect whether one of the provided spans is a statement nested within the top-most visited expr\n+struct ReferencedStatementsVisitor<'a>(&'a [Span], bool);\n+\n+impl<'a, 'v> Visitor<'v> for ReferencedStatementsVisitor<'a> {\n+    fn visit_stmt(&mut self, s: &'v hir::Stmt<'v>) {\n+        match s.kind {\n+            hir::StmtKind::Semi(expr) if self.0.contains(&expr.span) => {\n+                self.1 = true;\n+            }\n+            _ => {}\n+        }\n+    }\n+}\n+\n+/// Given a set of spans representing statements initializing the relevant binding, visit all the\n+/// function expressions looking for branching code paths that *do not* initialize the binding.\n+struct ConditionVisitor<'b> {\n+    spans: &'b [Span],\n+    name: &'b str,\n+    errors: Vec<(Span, String)>,\n+}\n+\n+impl<'b, 'v> Visitor<'v> for ConditionVisitor<'b> {\n+    fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n+        match ex.kind {\n+            hir::ExprKind::If(cond, body, None) => {\n+                // `if` expressions with no `else` that initialize the binding might be missing an\n+                // `else` arm.\n+                let mut v = ReferencedStatementsVisitor(self.spans, false);\n+                v.visit_expr(body);\n+                if v.1 {\n+                    self.errors.push((\n+                        cond.span,\n+                        format!(\n+                            \"if this `if` condition is `false`, {} is not initialized\",\n+                            self.name,\n+                        ),\n+                    ));\n+                    self.errors.push((\n+                        ex.span.shrink_to_hi(),\n+                        format!(\"an `else` arm might be missing here, initializing {}\", self.name),\n+                    ));\n+                }\n+            }\n+            hir::ExprKind::If(cond, body, Some(other)) => {\n+                // `if` expressions where the binding is only initialized in one of the two arms\n+                // might be missing a binding initialization.\n+                let mut a = ReferencedStatementsVisitor(self.spans, false);\n+                a.visit_expr(body);\n+                let mut b = ReferencedStatementsVisitor(self.spans, false);\n+                b.visit_expr(other);\n+                match (a.1, b.1) {\n+                    (true, true) | (false, false) => {}\n+                    (true, false) => {\n+                        if other.span.is_desugaring(DesugaringKind::WhileLoop) {\n+                            self.errors.push((\n+                                cond.span,\n+                                format!(\n+                                    \"if this condition isn't met and the `while` loop runs 0 \\\n+                                     times, {} is not initialized\",\n+                                    self.name\n+                                ),\n+                            ));\n+                        } else {\n+                            self.errors.push((\n+                                body.span.shrink_to_hi().until(other.span),\n+                                format!(\n+                                    \"if the `if` condition is `false` and this `else` arm is \\\n+                                     executed, {} is not initialized\",\n+                                    self.name\n+                                ),\n+                            ));\n+                        }\n+                    }\n+                    (false, true) => {\n+                        self.errors.push((\n+                            cond.span,\n+                            format!(\n+                                \"if this condition is `true`, {} is not initialized\",\n+                                self.name\n+                            ),\n+                        ));\n+                    }\n+                }\n+            }\n+            hir::ExprKind::Match(e, arms, loop_desugar) => {\n+                // If the binding is initialized in one of the match arms, then the other match\n+                // arms might be missing an initialization.\n+                let results: Vec<bool> = arms\n+                    .iter()\n+                    .map(|arm| {\n+                        let mut v = ReferencedStatementsVisitor(self.spans, false);\n+                        v.visit_arm(arm);\n+                        v.1\n+                    })\n+                    .collect();\n+                if results.iter().any(|x| *x) && !results.iter().all(|x| *x) {\n+                    for (arm, seen) in arms.iter().zip(results) {\n+                        if !seen {\n+                            if loop_desugar == hir::MatchSource::ForLoopDesugar {\n+                                self.errors.push((\n+                                    e.span,\n+                                    format!(\n+                                        \"if the `for` loop runs 0 times, {} is not initialized \",\n+                                        self.name\n+                                    ),\n+                                ));\n+                            } else if let Some(guard) = &arm.guard {\n+                                self.errors.push((\n+                                    arm.pat.span.to(guard.body().span),\n+                                    format!(\n+                                        \"if this pattern and condition are matched, {} is not \\\n+                                         initialized\",\n+                                        self.name\n+                                    ),\n+                                ));\n+                            } else {\n+                                self.errors.push((\n+                                    arm.pat.span,\n+                                    format!(\n+                                        \"if this pattern is matched, {} is not initialized\",\n+                                        self.name\n+                                    ),\n+                                ));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            // FIXME: should we also account for binops, particularly `&&` and `||`? `try` should\n+            // also be accounted for. For now it is fine, as if we don't find *any* relevant\n+            // branching code paths, we point at the places where the binding *is* initialized for\n+            // *some* context.\n+            _ => {}\n+        }\n+        walk_expr(self, ex);\n+    }\n+}"}, {"sha": "2ed35062da129f4eaba6510c34cee7d3457bf003", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -907,6 +907,16 @@ impl InitializationRequiringAction {\n             InitializationRequiringAction::PartialAssignment => \"partially assigned\",\n         }\n     }\n+\n+    fn as_general_verb_in_past_tense(self) -> &'static str {\n+        match self {\n+            InitializationRequiringAction::Borrow\n+            | InitializationRequiringAction::MatchOn\n+            | InitializationRequiringAction::Use => \"used\",\n+            InitializationRequiringAction::Assignment => \"assigned\",\n+            InitializationRequiringAction::PartialAssignment => \"partially assigned\",\n+        }\n+    }\n }\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {"}, {"sha": "aa12d4aa4b40c8326e2cc3476efedfb4db148bb8", "filename": "src/test/ui/asm/aarch64/type-check-2-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -17,10 +17,10 @@ fn main() {\n \n         let x: u64;\n         asm!(\"{}\", in(reg) x);\n-        //~^ ERROR use of possibly-uninitialized variable: `x`\n+        //~^ ERROR used binding `x` isn't initialized\n         let mut y: u64;\n         asm!(\"{}\", inout(reg) y);\n-        //~^ ERROR use of possibly-uninitialized variable: `y`\n+        //~^ ERROR used binding `y` isn't initialized\n         let _ = y;\n \n         // Outputs require mutable places"}, {"sha": "b2a695529f94818b35e714f50518173bb82071a1", "filename": "src/test/ui/asm/aarch64/type-check-2-2.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,14 +1,18 @@\n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/type-check-2-2.rs:19:28\n    |\n+LL |         let x: u64;\n+   |             - binding declared here but left uninitialized\n LL |         asm!(\"{}\", in(reg) x);\n-   |                            ^ use of possibly-uninitialized `x`\n+   |                            ^ `x` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `y`\n+error[E0381]: used binding `y` isn't initialized\n   --> $DIR/type-check-2-2.rs:22:9\n    |\n+LL |         let mut y: u64;\n+   |             ----- binding declared here but left uninitialized\n LL |         asm!(\"{}\", inout(reg) y);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `y`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ `y` used here but it isn't initialized\n \n error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n   --> $DIR/type-check-2-2.rs:30:29"}, {"sha": "6190e0b52f4e9d4100fbc2c307f4ce097c3f7c8c", "filename": "src/test/ui/asm/x86_64/type-check-5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -13,10 +13,10 @@ fn main() {\n \n         let x: u64;\n         asm!(\"{}\", in(reg) x);\n-        //~^ ERROR use of possibly-uninitialized variable: `x`\n+        //~^ ERROR E0381\n         let mut y: u64;\n         asm!(\"{}\", inout(reg) y);\n-        //~^ ERROR use of possibly-uninitialized variable: `y`\n+        //~^ ERROR E0381\n         let _ = y;\n \n         // Outputs require mutable places"}, {"sha": "e9c93fea561a81b3717c9654b683a076e551acc4", "filename": "src/test/ui/asm/x86_64/type-check-5.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,14 +1,18 @@\n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/type-check-5.rs:15:28\n    |\n+LL |         let x: u64;\n+   |             - binding declared here but left uninitialized\n LL |         asm!(\"{}\", in(reg) x);\n-   |                            ^ use of possibly-uninitialized `x`\n+   |                            ^ `x` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `y`\n+error[E0381]: used binding `y` isn't initialized\n   --> $DIR/type-check-5.rs:18:9\n    |\n+LL |         let mut y: u64;\n+   |             ----- binding declared here but left uninitialized\n LL |         asm!(\"{}\", inout(reg) y);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `y`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ `y` used here but it isn't initialized\n \n error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n   --> $DIR/type-check-5.rs:26:29"}, {"sha": "c4d81bf83a3c43caadb487b010526a1864b3d743", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -6,8 +6,7 @@ async fn no_non_guaranteed_initialization(x: usize) -> usize {\n     if x > 5 {\n         y = echo(10).await;\n     }\n-    y\n-    //~^ use of possibly-uninitialized variable: `y`\n+    y //~ ERROR E0381\n }\n \n async fn echo(x: usize) -> usize { x + 1 }"}, {"sha": "12c15bf56ce22aa1b7b512b03e9922ed49d063c3", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,15 @@\n-error[E0381]: use of possibly-uninitialized variable: `y`\n+error[E0381]: used binding `y` is possibly-uninitialized\n   --> $DIR/no-non-guaranteed-initialization.rs:9:5\n    |\n+LL |     let y;\n+   |         - binding declared here but left uninitialized\n+LL |     if x > 5 {\n+   |        ----- if this `if` condition is `false`, `y` is not initialized\n+LL |         y = echo(10).await;\n+LL |     }\n+   |      - an `else` arm might be missing here, initializing `y`\n LL |     y\n-   |     ^ use of possibly-uninitialized `y`\n+   |     ^ `y` used here but it is possibly-uninitialized\n \n error: aborting due to previous error\n "}, {"sha": "7577aee3fb7d6c77d852dd99f4b2b43a98168382", "filename": "src/test/ui/async-await/partial-initialization-across-await.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -10,26 +10,23 @@ async fn noop() {}\n \n async fn test_tuple() {\n     let mut t: (i32, i32);\n-    t.0 = 42;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+    t.0 = 42; //~ ERROR E0381\n     noop().await;\n     t.1 = 88;\n     let _ = t;\n }\n \n async fn test_tuple_struct() {\n     let mut t: T;\n-    t.0 = 42;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+    t.0 = 42; //~ ERROR E0381\n     noop().await;\n     t.1 = 88;\n     let _ = t;\n }\n \n async fn test_struct() {\n     let mut t: S;\n-    t.x = 42;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+    t.x = 42; //~ ERROR E0381\n     noop().await;\n     t.y = 88;\n     let _ = t;"}, {"sha": "6a0eeffb946111f233da3316b5af026efc12fabc", "filename": "src/test/ui/async-await/partial-initialization-across-await.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,20 +1,32 @@\n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/partial-initialization-across-await.rs:13:5\n    |\n+LL |     let mut t: (i32, i32);\n+   |         ----- binding declared here but left uninitialized\n LL |     t.0 = 42;\n-   |     ^^^^^^^^ use of possibly-uninitialized `t`\n+   |     ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n-  --> $DIR/partial-initialization-across-await.rs:22:5\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n+  --> $DIR/partial-initialization-across-await.rs:21:5\n    |\n+LL |     let mut t: T;\n+   |         ----- binding declared here but left uninitialized\n LL |     t.0 = 42;\n-   |     ^^^^^^^^ use of possibly-uninitialized `t`\n+   |     ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n-  --> $DIR/partial-initialization-across-await.rs:31:5\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n+  --> $DIR/partial-initialization-across-await.rs:29:5\n    |\n+LL |     let mut t: S;\n+   |         ----- binding declared here but left uninitialized\n LL |     t.x = 42;\n-   |     ^^^^^^^^ use of possibly-uninitialized `t`\n+   |     ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1ed92865da55bdcc8238c9990b38a62aa03e61d2", "filename": "src/test/ui/borrowck/assign_mutable_fields.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,14 +1,22 @@\n-error[E0381]: assign to part of possibly-uninitialized variable: `x`\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/assign_mutable_fields.rs:9:5\n    |\n+LL |     let mut x: (u32, u32);\n+   |         ----- binding declared here but left uninitialized\n LL |     x.0 = 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `x`\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/assign_mutable_fields.rs:17:5\n    |\n+LL |     let mut x: (u32, u32);\n+   |         ----- binding declared here but left uninitialized\n LL |     x.0 = 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eeb4f05d60c963d1edd17fb122b164870d8c1322", "filename": "src/test/ui/borrowck/borrowck-and-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     let i: isize;\n \n     println!(\"{}\", false && { i = 5; true });\n-    println!(\"{}\", i); //~ ERROR borrow of possibly-uninitialized variable: `i`\n+    println!(\"{}\", i); //~ ERROR E0381\n }"}, {"sha": "7f3d27d6091d83e8aec5fe9122e7318629861bd7", "filename": "src/test/ui/borrowck/borrowck-and-init.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,13 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `i`\n+error[E0381]: used binding `i` is possibly-uninitialized\n   --> $DIR/borrowck-and-init.rs:5:20\n    |\n+LL |     let i: isize;\n+   |         - binding declared here but left uninitialized\n+LL |\n+LL |     println!(\"{}\", false && { i = 5; true });\n+   |                               ----- binding initialized here in some conditions\n LL |     println!(\"{}\", i);\n-   |                    ^ use of possibly-uninitialized `i`\n+   |                    ^ `i` used here but it is possibly-uninitialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "8d13b25a357560f14e1f9943a41a9b9b6787d28e", "filename": "src/test/ui/borrowck/borrowck-block-unint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,7 +1,7 @@\n fn force<F>(f: F) where F: FnOnce() { f(); }\n fn main() {\n     let x: isize;\n-    force(|| {  //~ ERROR borrow of possibly-uninitialized variable: `x`\n+    force(|| {  //~ ERROR E0381\n         println!(\"{}\", x);\n     });\n }"}, {"sha": "e720db1c6961b275b230d4daf985a8a67ba3e83e", "filename": "src/test/ui/borrowck/borrowck-block-unint.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-block-unint.rs:4:11\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n LL |     force(|| {\n-   |           ^^ use of possibly-uninitialized `x`\n+   |           ^^ `x` used here but it isn't initialized\n LL |         println!(\"{}\", x);\n    |                        - borrow occurs due to use in closure\n "}, {"sha": "3abca33a84add3f9c4fe8a04df94ac8dbd9e997b", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -6,7 +6,7 @@ fn foo() -> isize {\n         x = 0;\n     }\n \n-    println!(\"{}\", x); //~ ERROR borrow of possibly-uninitialized variable: `x`\n+    println!(\"{}\", x); //~ ERROR E0381\n \n     return 17;\n }"}, {"sha": "23ea1a2de7fc7d66f24e16cfe66807d0c639014c", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,11 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-break-uninit-2.rs:9:20\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n+...\n LL |     println!(\"{}\", x);\n-   |                    ^ use of possibly-uninitialized `x`\n+   |                    ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "824f91dbc62c2f88633cbfc5dd81c03c30a74bd0", "filename": "src/test/ui/borrowck/borrowck-break-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -6,7 +6,7 @@ fn foo() -> isize {\n         x = 0;\n     }\n \n-    println!(\"{}\", x); //~ ERROR borrow of possibly-uninitialized variable: `x`\n+    println!(\"{}\", x); //~ ERROR E0381\n \n     return 17;\n }"}, {"sha": "2b9b0a190f6c8ae5c1d9798e2a75c14476d220b8", "filename": "src/test/ui/borrowck/borrowck-break-uninit.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,11 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-break-uninit.rs:9:20\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n+...\n LL |     println!(\"{}\", x);\n-   |                    ^ use of possibly-uninitialized `x`\n+   |                    ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "03edf445ee97b41cde5111d7c54b7e1ca36617be", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -78,20 +78,20 @@ fn fu_move_after_fu_move() {\n \n fn copy_after_field_assign_after_uninit() {\n     let mut x: A;\n-    x.a = 1; //~ ERROR assign to part of possibly-uninitialized variable: `x`\n+    x.a = 1; //~ ERROR E0381\n     drop(x.a);\n }\n \n fn borrow_after_field_assign_after_uninit() {\n     let mut x: A;\n-    x.a = 1; //~ ERROR assign to part of possibly-uninitialized variable: `x`\n+    x.a = 1; //~ ERROR E0381\n     let p = &x.a;\n     drop(*p);\n }\n \n fn move_after_field_assign_after_uninit() {\n     let mut x: A;\n-    x.b = Box::new(1); //~ ERROR assign to part of possibly-uninitialized variable: `x`\n+    x.b = Box::new(1); //~ ERROR E0381\n     drop(x.b);\n }\n "}, {"sha": "e009f5913edd072c2026c35721bb3edd000e6cf9", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -108,23 +108,35 @@ LL |     let _z = A { a: 4, .. x };\n    |\n    = note: move occurs because `x.b` has type `Box<isize>`, which does not implement the `Copy` trait\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `x`\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/borrowck-field-sensitivity.rs:81:5\n    |\n+LL |     let mut x: A;\n+   |         ----- binding declared here but left uninitialized\n LL |     x.a = 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `x`\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/borrowck-field-sensitivity.rs:87:5\n    |\n+LL |     let mut x: A;\n+   |         ----- binding declared here but left uninitialized\n LL |     x.a = 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `x`\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/borrowck-field-sensitivity.rs:94:5\n    |\n+LL |     let mut x: A;\n+   |         ----- binding declared here but left uninitialized\n LL |     x.b = Box::new(1);\n-   |     ^^^ use of possibly-uninitialized `x`\n+   |     ^^^ `x` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "f619c045b250f1264375b22affd6e197894afc19", "filename": "src/test/ui/borrowck/borrowck-for-loop-uninitialized-binding.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-uninitialized-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-uninitialized-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-uninitialized-binding.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -0,0 +1,7 @@\n+fn f() -> isize {\n+    let mut x: isize;\n+    for _ in 0..0 { x = 10; }\n+    return x; //~ ERROR E0381\n+}\n+\n+fn main() { f(); }"}, {"sha": "c08c93f361726e5a9096df112438dfc7e3ab68b9", "filename": "src/test/ui/borrowck/borrowck-for-loop-uninitialized-binding.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-uninitialized-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-uninitialized-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-uninitialized-binding.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -0,0 +1,13 @@\n+error[E0381]: used binding `x` is possibly-uninitialized\n+  --> $DIR/borrowck-for-loop-uninitialized-binding.rs:4:12\n+   |\n+LL |     let mut x: isize;\n+   |         ----- binding declared here but left uninitialized\n+LL |     for _ in 0..0 { x = 10; }\n+   |              ---- if the `for` loop runs 0 times, `x` is not initialized \n+LL |     return x;\n+   |            ^ `x` used here but it is possibly-uninitialized\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "534d771be1dfaf02bd6a73cf9e429b47146e5875", "filename": "src/test/ui/borrowck/borrowck-if-no-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -2,5 +2,5 @@ fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n     let x: isize; if 1 > 2 { x = 10; }\n-    foo(x); //~ ERROR use of possibly-uninitialized variable: `x`\n+    foo(x); //~ ERROR E0381\n }"}, {"sha": "9eafc2c2a86e6b4051adef9e3e5a231c28e666c8", "filename": "src/test/ui/borrowck/borrowck-if-no-else.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,13 @@\n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` is possibly-uninitialized\n   --> $DIR/borrowck-if-no-else.rs:5:9\n    |\n+LL |     let x: isize; if 1 > 2 { x = 10; }\n+   |         -            -----            - an `else` arm might be missing here, initializing `x`\n+   |         |            |\n+   |         |            if this `if` condition is `false`, `x` is not initialized\n+   |         binding declared here but left uninitialized\n LL |     foo(x);\n-   |         ^ use of possibly-uninitialized `x`\n+   |         ^ `x` used here but it is possibly-uninitialized\n \n error: aborting due to previous error\n "}, {"sha": "69d450c59891a9b1258a42ed7e3908aa0d35ea9d", "filename": "src/test/ui/borrowck/borrowck-if-with-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     } else {\n         x = 10;\n     }\n-    foo(x); //~ ERROR use of possibly-uninitialized variable: `x`\n+    foo(x); //~ ERROR E0381\n }"}, {"sha": "3f0fe291ca2508e44f723ca6ab88129117ad1bb3", "filename": "src/test/ui/borrowck/borrowck-if-with-else.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,13 @@\n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` is possibly-uninitialized\n   --> $DIR/borrowck-if-with-else.rs:10:9\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n+LL |     if 1 > 2 {\n+   |        ----- if this condition is `true`, `x` is not initialized\n+...\n LL |     foo(x);\n-   |         ^ use of possibly-uninitialized `x`\n+   |         ^ `x` used here but it is possibly-uninitialized\n \n error: aborting due to previous error\n "}, {"sha": "e6476b9c1bef797e6a4163b9212c0790ae5963e4", "filename": "src/test/ui/borrowck/borrowck-init-in-called-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let j = || -> isize {\n         let i: isize;\n-        i //~ ERROR use of possibly-uninitialized variable: `i`\n+        i //~ ERROR E0381\n     };\n     j();\n }"}, {"sha": "e8a2fbc91ea6430ebaac8d494676ccd8253c809a", "filename": "src/test/ui/borrowck/borrowck-init-in-called-fn-expr.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: use of possibly-uninitialized variable: `i`\n+error[E0381]: used binding `i` isn't initialized\n   --> $DIR/borrowck-init-in-called-fn-expr.rs:4:9\n    |\n+LL |         let i: isize;\n+   |             - binding declared here but left uninitialized\n LL |         i\n-   |         ^ use of possibly-uninitialized `i`\n+   |         ^ `i` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "7eb204a0d167268234f30cb0ccc674b240cc605d", "filename": "src/test/ui/borrowck/borrowck-init-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let f  = || -> isize {\n         let i: isize;\n-        i //~ ERROR use of possibly-uninitialized variable: `i`\n+        i //~ ERROR E0381\n     };\n     println!(\"{}\", f());\n }"}, {"sha": "1e950d6a20defb7688834981a5b1d0320dd9e791", "filename": "src/test/ui/borrowck/borrowck-init-in-fn-expr.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: use of possibly-uninitialized variable: `i`\n+error[E0381]: used binding `i` isn't initialized\n   --> $DIR/borrowck-init-in-fn-expr.rs:4:9\n    |\n+LL |         let i: isize;\n+   |             - binding declared here but left uninitialized\n LL |         i\n-   |         ^ use of possibly-uninitialized `i`\n+   |         ^ `i` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "c07957ab13973535ae487a02a5a950625ad39755", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -7,6 +7,6 @@ struct Point {\n fn main() {\n     let mut origin: Point;\n     origin = Point { x: 10, ..origin };\n-    //~^ ERROR use of possibly-uninitialized variable: `origin` [E0381]\n+    //~^ ERROR E0381\n     origin.clone();\n }"}, {"sha": "83a3e3e0e3ae0b84619a87220168fb30080dbfe8", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: use of possibly-uninitialized variable: `origin`\n+error[E0381]: used binding `origin` isn't initialized\n   --> $DIR/borrowck-init-in-fru.rs:9:14\n    |\n+LL |     let mut origin: Point;\n+   |         ---------- binding declared here but left uninitialized\n LL |     origin = Point { x: 10, ..origin };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `origin.y`\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ `origin.y` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "3d08c1b81a79bee077438784d1ad2b52e3565e84", "filename": "src/test/ui/borrowck/borrowck-init-op-equal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let v: isize;\n-    v += 1; //~ ERROR use of possibly-uninitialized variable: `v`\n+    v += 1; //~ ERROR E0381\n     v.clone();\n }\n "}, {"sha": "74704b2abfee87d8c6750df0bf3f9ace74043ab6", "filename": "src/test/ui/borrowck/borrowck-init-op-equal.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: use of possibly-uninitialized variable: `v`\n+error[E0381]: used binding `v` isn't initialized\n   --> $DIR/borrowck-init-op-equal.rs:3:5\n    |\n+LL |     let v: isize;\n+   |         - binding declared here but left uninitialized\n LL |     v += 1;\n-   |     ^^^^^^ use of possibly-uninitialized `v`\n+   |     ^^^^^^ `v` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "2a52a3f4e5eb1ad0c2eebcfe4bb4d884b7dd9cef", "filename": "src/test/ui/borrowck/borrowck-init-plus-equal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let mut v: isize;\n-    v = v + 1; //~ ERROR use of possibly-uninitialized variable: `v`\n+    v = v + 1; //~ ERROR E0381\n     v.clone();\n }\n "}, {"sha": "7542576d636be299238f6aedccff1e149a684af5", "filename": "src/test/ui/borrowck/borrowck-init-plus-equal.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: use of possibly-uninitialized variable: `v`\n+error[E0381]: used binding `v` isn't initialized\n   --> $DIR/borrowck-init-plus-equal.rs:3:9\n    |\n+LL |     let mut v: isize;\n+   |         ----- binding declared here but left uninitialized\n LL |     v = v + 1;\n-   |         ^ use of possibly-uninitialized `v`\n+   |         ^ `v` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "079cf899e6dbf5af2c00493685c90d8ca879c17f", "filename": "src/test/ui/borrowck/borrowck-or-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     let i: isize;\n \n     println!(\"{}\", false || { i = 5; true });\n-    println!(\"{}\", i); //~ ERROR borrow of possibly-uninitialized variable: `i`\n+    println!(\"{}\", i); //~ ERROR E0381\n }"}, {"sha": "0bc24f1b6932f2e56988f9d1f3d84a470ac37b55", "filename": "src/test/ui/borrowck/borrowck-or-init.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,13 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `i`\n+error[E0381]: used binding `i` is possibly-uninitialized\n   --> $DIR/borrowck-or-init.rs:5:20\n    |\n+LL |     let i: isize;\n+   |         - binding declared here but left uninitialized\n+LL |\n+LL |     println!(\"{}\", false || { i = 5; true });\n+   |                               ----- binding initialized here in some conditions\n LL |     println!(\"{}\", i);\n-   |                    ^ use of possibly-uninitialized `i`\n+   |                    ^ `i` used here but it is possibly-uninitialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a43a1936678ff7288ec55faa73ce4c00a00a41ab", "filename": "src/test/ui/borrowck/borrowck-partial-reinit-4.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -14,8 +14,7 @@ impl Drop for Test2 {\n \n fn stuff() {\n     let mut x : (Test2, Test2);\n-    (x.0).0 = Some(Test);\n-    //~^ ERROR assign of possibly-uninitialized variable: `x.0`\n+    (x.0).0 = Some(Test); //~ ERROR E0381\n }\n \n fn main() {"}, {"sha": "d12a482cb69a9ddd6afa1e2da14a9fd14670712e", "filename": "src/test/ui/borrowck/borrowck-partial-reinit-4.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,12 @@\n-error[E0381]: assign of possibly-uninitialized variable: `x.0`\n+error[E0381]: assigned binding `x.0` isn't fully initialized\n   --> $DIR/borrowck-partial-reinit-4.rs:17:5\n    |\n+LL |     let mut x : (Test2, Test2);\n+   |         ----- binding declared here but left uninitialized\n LL |     (x.0).0 = Some(Test);\n-   |     ^^^^^^^ use of possibly-uninitialized `x.0`\n+   |     ^^^^^^^ `x.0` assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to previous error\n "}, {"sha": "a63ffcff732ee0c0c68d71b2b8f73a0f3f08d3d3", "filename": "src/test/ui/borrowck/borrowck-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,6 +1,6 @@\n fn f() -> isize {\n     let x: isize;\n-    return x; //~ ERROR use of possibly-uninitialized variable: `x`\n+    return x; //~ ERROR E0381\n }\n \n fn main() { f(); }"}, {"sha": "1c916e223175c8424185e4428b5816db996174a2", "filename": "src/test/ui/borrowck/borrowck-return.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-return.rs:3:12\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n LL |     return x;\n-   |            ^ use of possibly-uninitialized `x`\n+   |            ^ `x` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "2cea4392d6adb63b03ddfd8e06b6c2ea90bbebef", "filename": "src/test/ui/borrowck/borrowck-storage-dead.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-storage-dead.rs:16:17\n    |\n+LL |         let x: i32;\n+   |             - binding declared here but left uninitialized\n LL |         let _ = x + 1;\n-   |                 ^ use of possibly-uninitialized `x`\n+   |                 ^ `x` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "e97ce6aa407ed15425bebd5c04afd7d62bbff68e", "filename": "src/test/ui/borrowck/borrowck-uninit-after-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let bar;\n     fn baz(_x: isize) { }\n-    baz(bar); //~ ERROR use of possibly-uninitialized variable: `bar`\n+    baz(bar); //~ ERROR E0381\n }"}, {"sha": "588b1b0c9729cc2c1ee7f32ba8d36ae9f24b26aa", "filename": "src/test/ui/borrowck/borrowck-uninit-after-item.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,11 @@\n-error[E0381]: use of possibly-uninitialized variable: `bar`\n+error[E0381]: used binding `bar` isn't initialized\n   --> $DIR/borrowck-uninit-after-item.rs:4:9\n    |\n+LL |     let bar;\n+   |         --- binding declared here but left uninitialized\n+LL |     fn baz(_x: isize) { }\n LL |     baz(bar);\n-   |         ^^^ use of possibly-uninitialized `bar`\n+   |         ^^^ `bar` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "6a38a7989197087b695660d8a89b9823097e5526", "filename": "src/test/ui/borrowck/borrowck-uninit-field-access.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: use of possibly-uninitialized variable: `a`\n+error[E0381]: used binding `a` isn't initialized\n   --> $DIR/borrowck-uninit-field-access.rs:21:13\n    |\n+LL |     let mut a: Point;\n+   |         ----- binding declared here but left uninitialized\n LL |     let _ = a.x + 1;\n-   |             ^^^ use of possibly-uninitialized `a.x`\n+   |             ^^^ `a.x` used here but it isn't initialized\n \n error[E0382]: use of moved value: `line1.origin`\n   --> $DIR/borrowck-uninit-field-access.rs:25:13"}, {"sha": "92c3692bd2f692094e64ba9038bef3469bea3f59", "filename": "src/test/ui/borrowck/borrowck-uninit-in-assignop.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -3,32 +3,32 @@\n \n pub fn main() {\n     let x: isize;\n-    x += 1; //~ ERROR use of possibly-uninitialized variable: `x`\n+    x += 1; //~ ERROR E0381\n \n     let x: isize;\n-    x -= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n+    x -= 1; //~ ERROR E0381\n \n     let x: isize;\n-    x *= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n+    x *= 1; //~ ERROR E0381\n \n     let x: isize;\n-    x /= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n+    x /= 1; //~ ERROR E0381\n \n     let x: isize;\n-    x %= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n+    x %= 1; //~ ERROR E0381\n \n     let x: isize;\n-    x ^= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n+    x ^= 1; //~ ERROR E0381\n \n     let x: isize;\n-    x &= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n+    x &= 1; //~ ERROR E0381\n \n     let x: isize;\n-    x |= 1; //~ ERROR use of possibly-uninitialized variable: `x`\n+    x |= 1; //~ ERROR E0381\n \n     let x: isize;\n-    x <<= 1;    //~ ERROR use of possibly-uninitialized variable: `x`\n+    x <<= 1; //~ ERROR E0381\n \n     let x: isize;\n-    x >>= 1;    //~ ERROR use of possibly-uninitialized variable: `x`\n+    x >>= 1; //~ ERROR E0381\n }"}, {"sha": "744cb14e662b3bcf824b17c8962be85b1bea8901", "filename": "src/test/ui/borrowck/borrowck-uninit-in-assignop.stderr", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,62 +1,82 @@\n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:6:5\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n LL |     x += 1;\n-   |     ^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:9:5\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n LL |     x -= 1;\n-   |     ^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:12:5\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n LL |     x *= 1;\n-   |     ^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:15:5\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n LL |     x /= 1;\n-   |     ^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:18:5\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n LL |     x %= 1;\n-   |     ^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:21:5\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n LL |     x ^= 1;\n-   |     ^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:24:5\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n LL |     x &= 1;\n-   |     ^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:27:5\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n LL |     x |= 1;\n-   |     ^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:30:5\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n LL |     x <<= 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^^ `x` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:33:5\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n LL |     x >>= 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^^ `x` used here but it isn't initialized\n \n error: aborting due to 10 previous errors\n "}, {"sha": "c36b9707d2287e0fab1bfa67d6e23dd0fb67f9f7", "filename": "src/test/ui/borrowck/borrowck-uninit-ref-chain.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -5,29 +5,29 @@ struct S<X, Y> {\n \n fn main() {\n     let x: &&Box<i32>;\n-    let _y = &**x; //~ [E0381]\n+    let _y = &**x; //~ ERROR [E0381]\n \n     let x: &&S<i32, i32>;\n-    let _y = &**x; //~ [E0381]\n+    let _y = &**x; //~ ERROR [E0381]\n \n     let x: &&i32;\n-    let _y = &**x; //~ [E0381]\n+    let _y = &**x; //~ ERROR [E0381]\n \n \n     let mut a: S<i32, i32>;\n-    a.x = 0;            //~ ERROR assign to part of possibly-uninitialized variable: `a` [E0381]\n+    a.x = 0; //~ ERROR [E0381]\n     let _b = &a.x;\n \n     let mut a: S<&&i32, &&i32>;\n-    a.x = &&0;          //~ ERROR assign to part of possibly-uninitialized variable: `a` [E0381]\n+    a.x = &&0; //~ ERROR [E0381]\n     let _b = &**a.x;\n \n \n     let mut a: S<i32, i32>;\n-    a.x = 0;            //~ ERROR assign to part of possibly-uninitialized variable: `a` [E0381]\n+    a.x = 0; //~ ERROR [E0381]\n     let _b = &a.y;\n \n     let mut a: S<&&i32, &&i32>;\n-    a.x = &&0;          //~ assign to part of possibly-uninitialized variable: `a` [E0381]\n+    a.x = &&0; //~ ERROR [E0381]\n     let _b = &**a.y;\n }"}, {"sha": "c486cb6dd0cd338f4c01c11e21f750b5a1f95d4c", "filename": "src/test/ui/borrowck/borrowck-uninit-ref-chain.stderr", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,44 +1,66 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:8:14\n    |\n+LL |     let x: &&Box<i32>;\n+   |         - binding declared here but left uninitialized\n LL |     let _y = &**x;\n-   |              ^^^^ use of possibly-uninitialized `**x`\n+   |              ^^^^ `**x` used here but it isn't initialized\n \n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:11:14\n    |\n+LL |     let x: &&S<i32, i32>;\n+   |         - binding declared here but left uninitialized\n LL |     let _y = &**x;\n-   |              ^^^^ use of possibly-uninitialized `**x`\n+   |              ^^^^ `**x` used here but it isn't initialized\n \n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:14:14\n    |\n+LL |     let x: &&i32;\n+   |         - binding declared here but left uninitialized\n LL |     let _y = &**x;\n-   |              ^^^^ use of possibly-uninitialized `**x`\n+   |              ^^^^ `**x` used here but it isn't initialized\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `a`\n+error[E0381]: partially assigned binding `a` isn't fully initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:18:5\n    |\n+LL |     let mut a: S<i32, i32>;\n+   |         ----- binding declared here but left uninitialized\n LL |     a.x = 0;\n-   |     ^^^^^^^ use of possibly-uninitialized `a`\n+   |     ^^^^^^^ `a` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `a`\n+error[E0381]: partially assigned binding `a` isn't fully initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:22:5\n    |\n+LL |     let mut a: S<&&i32, &&i32>;\n+   |         ----- binding declared here but left uninitialized\n LL |     a.x = &&0;\n-   |     ^^^^^^^^^ use of possibly-uninitialized `a`\n+   |     ^^^^^^^^^ `a` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `a`\n+error[E0381]: partially assigned binding `a` isn't fully initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:27:5\n    |\n+LL |     let mut a: S<i32, i32>;\n+   |         ----- binding declared here but left uninitialized\n LL |     a.x = 0;\n-   |     ^^^^^^^ use of possibly-uninitialized `a`\n+   |     ^^^^^^^ `a` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `a`\n+error[E0381]: partially assigned binding `a` isn't fully initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:31:5\n    |\n+LL |     let mut a: S<&&i32, &&i32>;\n+   |         ----- binding declared here but left uninitialized\n LL |     a.x = &&0;\n-   |     ^^^^^^^^^ use of possibly-uninitialized `a`\n+   |     ^^^^^^^^^ `a` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "5d0ebabb00872a1abb46741eccfed0b8801a243c", "filename": "src/test/ui/borrowck/borrowck-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -2,5 +2,5 @@ fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n     let x: isize;\n-    foo(x); //~ ERROR use of possibly-uninitialized variable: `x`\n+    foo(x); //~ ERROR E0381\n }"}, {"sha": "d5566691a820040fe1add7e4b3da896a84d8677d", "filename": "src/test/ui/borrowck/borrowck-uninit.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit.rs:5:9\n    |\n+LL |     let x: isize;\n+   |         - binding declared here but left uninitialized\n LL |     foo(x);\n-   |         ^ use of possibly-uninitialized `x`\n+   |         ^ `x` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "bbe9f22aac307c68a4ad094d2eba035a0902f589", "filename": "src/test/ui/borrowck/borrowck-union-uninitialized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -10,8 +10,8 @@ fn main() {\n     unsafe {\n         let mut s: S;\n         let mut u: U;\n-        s.a = 0; //~ ERROR assign to part of possibly-uninitialized variable: `s`\n-        u.a = 0; //~ ERROR assign to part of possibly-uninitialized variable: `u`\n+        s.a = 0; //~ ERROR E0381\n+        u.a = 0; //~ ERROR E0381\n         let sa = s.a;\n         let ua = u.a;\n     }"}, {"sha": "b7ff5f3955ee5885ce0c3b7eaf1a84b78c0c0aac", "filename": "src/test/ui/borrowck/borrowck-union-uninitialized.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,14 +1,24 @@\n-error[E0381]: assign to part of possibly-uninitialized variable: `s`\n+error[E0381]: partially assigned binding `s` isn't fully initialized\n   --> $DIR/borrowck-union-uninitialized.rs:13:9\n    |\n+LL |         let mut s: S;\n+   |             ----- binding declared here but left uninitialized\n+LL |         let mut u: U;\n LL |         s.a = 0;\n-   |         ^^^^^^^ use of possibly-uninitialized `s`\n+   |         ^^^^^^^ `s` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `u`\n+error[E0381]: partially assigned binding `u` isn't fully initialized\n   --> $DIR/borrowck-union-uninitialized.rs:14:9\n    |\n+LL |         let mut u: U;\n+   |             ----- binding declared here but left uninitialized\n+LL |         s.a = 0;\n LL |         u.a = 0;\n-   |         ^^^^^^^ use of possibly-uninitialized `u`\n+   |         ^^^^^^^ `u` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "459cf1398b750e74ec49879b68a41ae7d2e6a0bf", "filename": "src/test/ui/borrowck/borrowck-use-in-index-lvalue.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,14 +1,18 @@\n-error[E0381]: use of possibly-uninitialized variable: `w`\n+error[E0381]: used binding `w` isn't initialized\n   --> $DIR/borrowck-use-in-index-lvalue.rs:3:5\n    |\n+LL |     let w: &mut [isize];\n+   |         - binding declared here but left uninitialized\n LL |     w[5] = 0;\n-   |     ^^^^ use of possibly-uninitialized `*w`\n+   |     ^^^^ `*w` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `w`\n+error[E0381]: used binding `w` isn't initialized\n   --> $DIR/borrowck-use-in-index-lvalue.rs:6:5\n    |\n+LL |     let mut w: &mut [isize];\n+   |         ----- binding declared here but left uninitialized\n LL |     w[5] = 0;\n-   |     ^^^^ use of possibly-uninitialized `*w`\n+   |     ^^^^ `*w` used here but it isn't initialized\n \n error: aborting due to 2 previous errors\n "}, {"sha": "942ed4fc6cabf172cc6451c98442f5b901876d83", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-use-uninitialized-in-cast-trait.rs:9:13\n    |\n+LL |     let x: &i32;\n+   |         - binding declared here but left uninitialized\n LL |     let y = x as *const dyn Foo;\n-   |             ^ use of possibly-uninitialized `*x`\n+   |             ^ `*x` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "f3289e239818a7c445a0a162035791ffb613a461", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-use-uninitialized-in-cast.rs:7:13\n    |\n+LL |     let x: &i32;\n+   |         - binding declared here but left uninitialized\n LL |     let y = x as *const i32;\n-   |             ^ use of possibly-uninitialized `*x`\n+   |             ^ `*x` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "7100b713031d2375d5111a5c773e6ef09ed1770e", "filename": "src/test/ui/borrowck/borrowck-while-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -4,7 +4,7 @@ fn test(cond: bool) {\n         v = 3;\n         break;\n     }\n-    println!(\"{}\", v); //~ ERROR borrow of possibly-uninitialized variable: `v`\n+    println!(\"{}\", v); //~ ERROR E0381\n }\n \n fn main() {"}, {"sha": "44674febf4973b4c3929e779e62e4a8554a7947d", "filename": "src/test/ui/borrowck/borrowck-while-break.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,13 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `v`\n+error[E0381]: used binding `v` is possibly-uninitialized\n   --> $DIR/borrowck-while-break.rs:7:20\n    |\n+LL |     let v;\n+   |         - binding declared here but left uninitialized\n+LL |     while cond {\n+   |           ---- if this condition isn't met and the `while` loop runs 0 times, `v` is not initialized\n+...\n LL |     println!(\"{}\", v);\n-   |                    ^ use of possibly-uninitialized `v`\n+   |                    ^ `v` used here but it is possibly-uninitialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "62a9bdd2020559817e7e6bf8c2fca085cfcd7d9c", "filename": "src/test/ui/borrowck/borrowck-while-cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x: bool;\n-    while x { } //~ ERROR use of possibly-uninitialized variable: `x`\n+    while x { } //~ ERROR E0381\n }"}, {"sha": "e41c1c55e6024365c46873574341244938fe0a19", "filename": "src/test/ui/borrowck/borrowck-while-cond.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-while-cond.rs:3:11\n    |\n+LL |     let x: bool;\n+   |         - binding declared here but left uninitialized\n LL |     while x { }\n-   |           ^ use of possibly-uninitialized `x`\n+   |           ^ `x` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "f49a778eb6bbeb38c3ff8fc496e4dbaa961d4b79", "filename": "src/test/ui/borrowck/borrowck-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,7 +1,7 @@\n fn f() -> isize {\n     let mut x: isize;\n     while 1 == 1 { x = 10; }\n-    return x; //~ ERROR use of possibly-uninitialized variable: `x`\n+    return x; //~ ERROR E0381\n }\n \n fn main() { f(); }"}, {"sha": "c45235990c383c56783321d61b0e665adab05bf8", "filename": "src/test/ui/borrowck/borrowck-while.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,12 @@\n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` is possibly-uninitialized\n   --> $DIR/borrowck-while.rs:4:12\n    |\n+LL |     let mut x: isize;\n+   |         ----- binding declared here but left uninitialized\n+LL |     while 1 == 1 { x = 10; }\n+   |           ------ if this condition isn't met and the `while` loop runs 0 times, `x` is not initialized\n LL |     return x;\n-   |            ^ use of possibly-uninitialized `x`\n+   |            ^ `x` used here but it is possibly-uninitialized\n \n error: aborting due to previous error\n "}, {"sha": "17de40d5ba9674ae5e1646df36c8fd28305272e5", "filename": "src/test/ui/borrowck/disallow-possibly-uninitialized.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -4,19 +4,19 @@\n fn main() {\n     let mut t: (u64, u64);\n     t.0 = 1;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+    //~^ ERROR E0381\n     t.1 = 1;\n \n     let mut t: (u64, u64);\n     t.1 = 1;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+    //~^ ERROR E0381\n     t.0 = 1;\n \n     let mut t: (u64, u64);\n     t.0 = 1;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+    //~^ ERROR E0381\n \n     let mut t: (u64,);\n     t.0 = 1;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+    //~^ ERROR E0381\n }"}, {"sha": "9a84c6fefae59681474f06d7cac4ecc4cb1c79e3", "filename": "src/test/ui/borrowck/disallow-possibly-uninitialized.stderr", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,26 +1,42 @@\n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/disallow-possibly-uninitialized.rs:6:5\n    |\n+LL |     let mut t: (u64, u64);\n+   |         ----- binding declared here but left uninitialized\n LL |     t.0 = 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `t`\n+   |     ^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/disallow-possibly-uninitialized.rs:11:5\n    |\n+LL |     let mut t: (u64, u64);\n+   |         ----- binding declared here but left uninitialized\n LL |     t.1 = 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `t`\n+   |     ^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/disallow-possibly-uninitialized.rs:16:5\n    |\n+LL |     let mut t: (u64, u64);\n+   |         ----- binding declared here but left uninitialized\n LL |     t.0 = 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `t`\n+   |     ^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/disallow-possibly-uninitialized.rs:20:5\n    |\n+LL |     let mut t: (u64,);\n+   |         ----- binding declared here but left uninitialized\n LL |     t.0 = 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `t`\n+   |     ^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c419c5840d9a850689c2539025c85634c0b25929", "filename": "src/test/ui/borrowck/issue-24267-flow-exit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -9,11 +9,11 @@ pub fn main() {\n pub fn foo1() {\n     let x: i32;\n     loop { x = break; }\n-    println!(\"{}\", x); //~ ERROR borrow of possibly-uninitialized variable: `x`\n+    println!(\"{}\", x); //~ ERROR E0381\n }\n \n pub fn foo2() {\n     let x: i32;\n     for _ in 0..10 { x = continue; }\n-    println!(\"{}\", x); //~ ERROR borrow of possibly-uninitialized variable: `x`\n+    println!(\"{}\", x); //~ ERROR E0381\n }"}, {"sha": "d436e8ff9096c1e7499ae356d27721d5b97c2975", "filename": "src/test/ui/borrowck/issue-24267-flow-exit.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,16 +1,22 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/issue-24267-flow-exit.rs:12:20\n    |\n+LL |     let x: i32;\n+   |         - binding declared here but left uninitialized\n+LL |     loop { x = break; }\n LL |     println!(\"{}\", x);\n-   |                    ^ use of possibly-uninitialized `x`\n+   |                    ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/issue-24267-flow-exit.rs:18:20\n    |\n+LL |     let x: i32;\n+   |         - binding declared here but left uninitialized\n+LL |     for _ in 0..10 { x = continue; }\n LL |     println!(\"{}\", x);\n-   |                    ^ use of possibly-uninitialized `x`\n+   |                    ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "205ea10c90bf066aef50651d8aeaade9e255b1e3", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-marks-mut-as-used.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -10,23 +10,23 @@ fn main() {\n     {\n         let mut t: Tuple;\n         t.0 = S(1);\n-        //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+        //~^ ERROR E0381\n         t.1 = 2;\n         println!(\"{:?} {:?}\", t.0, t.1);\n     }\n \n     {\n         let mut u: Tpair;\n         u.0 = S(1);\n-        //~^ ERROR assign to part of possibly-uninitialized variable: `u` [E0381]\n+        //~^ ERROR E0381\n         u.1 = 2;\n         println!(\"{:?} {:?}\", u.0, u.1);\n     }\n \n     {\n         let mut v: Spair;\n         v.x = S(1);\n-        //~^ ERROR assign to part of possibly-uninitialized variable: `v` [E0381]\n+        //~^ ERROR E0381\n         v.y = 2;\n         println!(\"{:?} {:?}\", v.x, v.y);\n     }"}, {"sha": "2a0eba396f144a5ae8ea47aff72c7904b06c4c0b", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-marks-mut-as-used.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-marks-mut-as-used.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,20 +1,32 @@\n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/issue-54499-field-mutation-marks-mut-as-used.rs:12:9\n    |\n+LL |         let mut t: Tuple;\n+   |             ----- binding declared here but left uninitialized\n LL |         t.0 = S(1);\n-   |         ^^^^^^^^^^ use of possibly-uninitialized `t`\n+   |         ^^^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `u`\n+error[E0381]: partially assigned binding `u` isn't fully initialized\n   --> $DIR/issue-54499-field-mutation-marks-mut-as-used.rs:20:9\n    |\n+LL |         let mut u: Tpair;\n+   |             ----- binding declared here but left uninitialized\n LL |         u.0 = S(1);\n-   |         ^^^^^^^^^^ use of possibly-uninitialized `u`\n+   |         ^^^^^^^^^^ `u` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `v`\n+error[E0381]: partially assigned binding `v` isn't fully initialized\n   --> $DIR/issue-54499-field-mutation-marks-mut-as-used.rs:28:9\n    |\n+LL |         let mut v: Spair;\n+   |             ----- binding declared here but left uninitialized\n LL |         v.x = S(1);\n-   |         ^^^^^^^^^^ use of possibly-uninitialized `v`\n+   |         ^^^^^^^^^^ `v` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "50d0c40fdf6f5c03dcb869daf86f8f699e674875", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-never-init.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -10,23 +10,23 @@ fn main() {\n     {\n         let t: Tuple;\n         t.0 = S(1);\n-        //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+        //~^ ERROR E0381\n         t.1 = 2;\n         println!(\"{:?} {:?}\", t.0, t.1);\n     }\n \n     {\n         let u: Tpair;\n         u.0 = S(1);\n-        //~^ ERROR assign to part of possibly-uninitialized variable: `u` [E0381]\n+        //~^ ERROR E0381\n         u.1 = 2;\n         println!(\"{:?} {:?}\", u.0, u.1);\n     }\n \n     {\n         let v: Spair;\n         v.x = S(1);\n-        //~^ ERROR assign to part of possibly-uninitialized variable: `v` [E0381]\n+        //~^ ERROR E0381\n         v.y = 2;\n         println!(\"{:?} {:?}\", v.x, v.y);\n     }"}, {"sha": "67a62583057f64e97e62661cbc67302a81290ed3", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-never-init.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-never-init.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,20 +1,32 @@\n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/issue-54499-field-mutation-of-never-init.rs:12:9\n    |\n+LL |         let t: Tuple;\n+   |             - binding declared here but left uninitialized\n LL |         t.0 = S(1);\n-   |         ^^^^^^^^^^ use of possibly-uninitialized `t`\n+   |         ^^^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `u`\n+error[E0381]: partially assigned binding `u` isn't fully initialized\n   --> $DIR/issue-54499-field-mutation-of-never-init.rs:20:9\n    |\n+LL |         let u: Tpair;\n+   |             - binding declared here but left uninitialized\n LL |         u.0 = S(1);\n-   |         ^^^^^^^^^^ use of possibly-uninitialized `u`\n+   |         ^^^^^^^^^^ `u` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `v`\n+error[E0381]: partially assigned binding `v` isn't fully initialized\n   --> $DIR/issue-54499-field-mutation-of-never-init.rs:28:9\n    |\n+LL |         let v: Spair;\n+   |             - binding declared here but left uninitialized\n LL |         v.x = S(1);\n-   |         ^^^^^^^^^^ use of possibly-uninitialized `v`\n+   |         ^^^^^^^^^^ `v` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "93ce34d2fe535e4364c1564212faf23803605cb2", "filename": "src/test/ui/borrowck/issue-62107-match-arm-scopes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let e: i32;\n     match e {\n-        //~^ ERROR use of possibly-uninitialized variable\n+        //~^ ERROR E0381\n         ref u if true => {}\n         ref v if true => {\n             let tx = 0;"}, {"sha": "f5d2eecfa91a300ea0f46cdaa8f9acf7f9b8a044", "filename": "src/test/ui/borrowck/issue-62107-match-arm-scopes.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: use of possibly-uninitialized variable: `e`\n+error[E0381]: used binding `e` isn't initialized\n   --> $DIR/issue-62107-match-arm-scopes.rs:3:11\n    |\n+LL |     let e: i32;\n+   |         - binding declared here but left uninitialized\n LL |     match e {\n-   |           ^ use of possibly-uninitialized `e`\n+   |           ^ `e` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "e6b25573e7040206944fde9fb1a55492b57df648", "filename": "src/test/ui/borrowck/reassignment_immutable_fields.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,14 +1,22 @@\n-error[E0381]: assign to part of possibly-uninitialized variable: `x`\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/reassignment_immutable_fields.rs:7:5\n    |\n+LL |     let x: (u32, u32);\n+   |         - binding declared here but left uninitialized\n LL |     x.0 = 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `x`\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/reassignment_immutable_fields.rs:15:5\n    |\n+LL |     let x: (u32, u32);\n+   |         - binding declared here but left uninitialized\n LL |     x.0 = 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a3885b5f5caea4593bcaf8df52d32a95cf7dd63d", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_overlapping.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,12 @@\n-error[E0381]: assign to part of possibly-uninitialized variable: `x`\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/reassignment_immutable_fields_overlapping.rs:12:5\n    |\n+LL |     let x: Foo;\n+   |         - binding declared here but left uninitialized\n LL |     x.a = 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0594]: cannot assign to `x.b`, as `x` is not declared as mutable\n   --> $DIR/reassignment_immutable_fields_overlapping.rs:13:5"}, {"sha": "49c81adad49373c788f0e80ad693b131490c3954", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_twice.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -7,11 +7,15 @@ LL |     x = (22, 44);\n LL |     x.0 = 1;\n    |     ^^^^^^^ cannot assign\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `x`\n+error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/reassignment_immutable_fields_twice.rs:12:5\n    |\n+LL |     let x: (u32, u32);\n+   |         - binding declared here but left uninitialized\n LL |     x.0 = 1;\n-   |     ^^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^^ `x` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "69cf920de94786691213fda435a0813ac9220212", "filename": "src/test/ui/closures/2229_closure_analysis/match/pattern-matching-should-fail.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -6,14 +6,14 @@\n fn test1() {\n     let x: !;\n     let c1 = || match x { };\n-    //~^ ERROR: use of possibly-uninitialized variable: `x`\n+    //~^ ERROR E0381\n }\n \n // Should fake read the discriminant and throw an error\n fn test2() {\n     let x: !;\n     let c2 = || match x { _ => () };\n-    //~^ ERROR: borrow of possibly-uninitialized variable: `x`\n+    //~^ ERROR E0381\n }\n \n // Testing single variant patterns\n@@ -25,7 +25,7 @@ enum SingleVariant {\n fn test3() {\n     let variant: !;\n     let c = || {\n-    //~^ ERROR: borrow of possibly-uninitialized variable: `variant`\n+    //~^ ERROR E0381\n         match variant {\n             SingleVariant::Points(_) => {}\n         }\n@@ -36,8 +36,7 @@ fn test3() {\n // Should fake read the discriminant and throw an error\n fn test4() {\n     let variant: !;\n-    let c = || {\n-    //~^ ERROR: borrow of possibly-uninitialized variable: `variant`\n+    let c = || { //~ ERROR E0381\n         match variant {\n             SingleVariant::Points(a) => {\n                 println!(\"{:?}\", a);\n@@ -52,11 +51,9 @@ fn test5() {\n     let g: !;\n \n     let a = || {\n-        match g { };\n-        //~^ ERROR: use of possibly-uninitialized variable: `g`\n+        match g { }; //~ ERROR E0381\n         let c = ||  {\n-            match t { };\n-            //~^ ERROR: use of possibly-uninitialized variable: `t`\n+            match t { }; //~ ERROR E0381\n         };\n \n         c();\n@@ -68,7 +65,7 @@ fn test5() {\n fn test6() {\n     let x: u8;\n     let c1 = || match x { };\n-    //~^ ERROR: use of possibly-uninitialized variable: `x`\n+    //~^ ERROR E0381\n     //~| ERROR: non-exhaustive patterns: type `u8` is non-empty\n }\n "}, {"sha": "fea5441ec673d063a8bbc644ad2da440057042c8", "filename": "src/test/ui/closures/2229_closure_analysis/match/pattern-matching-should-fail.stderr", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/pattern-matching-should-fail.rs:70:23\n+  --> $DIR/pattern-matching-should-fail.rs:67:23\n    |\n LL |     let c1 = || match x { };\n    |                       ^\n@@ -12,55 +12,70 @@ LL +         _ => todo!(),\n LL ~     };\n    |\n \n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:8:23\n    |\n+LL |     let x: !;\n+   |         - binding declared here but left uninitialized\n LL |     let c1 = || match x { };\n-   |                       ^ use of possibly-uninitialized `x`\n+   |                       ^ `x` used here but it isn't initialized\n \n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:15:14\n    |\n+LL |     let x: !;\n+   |         - binding declared here but left uninitialized\n LL |     let c2 = || match x { _ => () };\n    |              ^^       - borrow occurs due to use in closure\n    |              |\n-   |              use of possibly-uninitialized `x`\n+   |              `x` used here but it isn't initialized\n \n-error[E0381]: borrow of possibly-uninitialized variable: `variant`\n+error[E0381]: used binding `variant` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:27:13\n    |\n+LL |     let variant: !;\n+   |         ------- binding declared here but left uninitialized\n LL |     let c = || {\n-   |             ^^ use of possibly-uninitialized `variant`\n+   |             ^^ `variant` used here but it isn't initialized\n LL |\n LL |         match variant {\n    |               ------- borrow occurs due to use in closure\n \n-error[E0381]: borrow of possibly-uninitialized variable: `variant`\n+error[E0381]: used binding `variant` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:39:13\n    |\n+LL |     let variant: !;\n+   |         ------- binding declared here but left uninitialized\n LL |     let c = || {\n-   |             ^^ use of possibly-uninitialized `variant`\n-LL |\n+   |             ^^ `variant` used here but it isn't initialized\n LL |         match variant {\n    |               ------- borrow occurs due to use in closure\n \n-error[E0381]: use of possibly-uninitialized variable: `g`\n-  --> $DIR/pattern-matching-should-fail.rs:55:15\n+error[E0381]: used binding `g` isn't initialized\n+  --> $DIR/pattern-matching-should-fail.rs:54:15\n    |\n+LL |     let g: !;\n+   |         - binding declared here but left uninitialized\n+...\n LL |         match g { };\n-   |               ^ use of possibly-uninitialized `g`\n+   |               ^ `g` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `t`\n-  --> $DIR/pattern-matching-should-fail.rs:58:19\n+error[E0381]: used binding `t` isn't initialized\n+  --> $DIR/pattern-matching-should-fail.rs:56:19\n    |\n+LL |     let t: !;\n+   |         - binding declared here but left uninitialized\n+...\n LL |             match t { };\n-   |                   ^ use of possibly-uninitialized `t`\n+   |                   ^ `t` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/pattern-matching-should-fail.rs:70:23\n+error[E0381]: used binding `x` isn't initialized\n+  --> $DIR/pattern-matching-should-fail.rs:67:23\n    |\n+LL |     let x: u8;\n+   |         - binding declared here but left uninitialized\n LL |     let c1 = || match x { };\n-   |                       ^ use of possibly-uninitialized `x`\n+   |                       ^ `x` used here but it isn't initialized\n \n error: aborting due to 8 previous errors\n "}, {"sha": "e64adacac9fd26ad6ac1c08240d352a41f704a07", "filename": "src/test/ui/const-generics/const-generic-default-wont-borrowck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,6 +1,5 @@\n struct X<const N: usize = {\n-    let s: &'static str; s.len()\n-    //~^ ERROR borrow of possibly-uninitialized variable\n+    let s: &'static str; s.len() //~ ERROR E0381\n }>;\n \n fn main() {}"}, {"sha": "c62f1d1d230617f86f1a35f540ca06e26ca03027", "filename": "src/test/ui/const-generics/const-generic-default-wont-borrowck.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `s`\n+error[E0381]: used binding `s` isn't initialized\n   --> $DIR/const-generic-default-wont-borrowck.rs:2:26\n    |\n LL |     let s: &'static str; s.len()\n-   |                          ^^^^^^^ use of possibly-uninitialized `*s`\n+   |         -                ^^^^^^^ `*s` used here but it isn't initialized\n+   |         |\n+   |         binding declared here but left uninitialized\n \n error: aborting due to previous error\n "}, {"sha": "82d2d7c21d859e87ada14ab3df1f97b6d42f97a6", "filename": "src/test/ui/consts/issue-78655.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,6 +1,6 @@\n const FOO: *const u32 = {\n     let x;\n-    &x //~ ERROR borrow of possibly-uninitialized variable: `x`\n+    &x //~ ERROR E0381\n };\n \n fn main() {"}, {"sha": "f5b1123e7f3431340f5d3773ba9cff0bc5799cf5", "filename": "src/test/ui/consts/issue-78655.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/issue-78655.rs:3:5\n    |\n+LL |     let x;\n+   |         - binding declared here but left uninitialized\n LL |     &x\n-   |     ^^ use of possibly-uninitialized `x`\n+   |     ^^ `x` used here but it isn't initialized\n \n error: could not evaluate constant pattern\n   --> $DIR/issue-78655.rs:7:9"}, {"sha": "59d5ef202051a2e589be3f708990f2b87a251829", "filename": "src/test/ui/drop/repeat-drop-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -9,7 +9,7 @@ const _: [String; 0] = [String::new(); 0];\n \n fn must_be_init() {\n     let x: u8;\n-    let _ = [x; 0]; //~ ERROR: use of possibly-uninitialized variable: `x`\n+    let _ = [x; 0]; //~ ERROR E0381\n }\n \n fn main() {}"}, {"sha": "48fa2bfa975c03dedbd6b3449b71d8ef0e75c0e8", "filename": "src/test/ui/drop/repeat-drop-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -17,11 +17,13 @@ LL | const _: [String; 0] = [String::new(); 0];\n    |                        |constants cannot evaluate destructors\n    |                        value is dropped here\n \n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/repeat-drop-2.rs:12:14\n    |\n+LL |     let x: u8;\n+   |         - binding declared here but left uninitialized\n LL |     let _ = [x; 0];\n-   |              ^ use of possibly-uninitialized `x`\n+   |              ^ `x` used here but it isn't initialized\n \n error: aborting due to 3 previous errors\n "}, {"sha": "65d9e6d39ca5a8d960d9ff2f366447e015e11af9", "filename": "src/test/ui/generator/partial-initialization-across-yield.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -9,8 +9,7 @@ struct T(i32, i32);\n fn test_tuple() {\n     let _ = || {\n         let mut t: (i32, i32);\n-        t.0 = 42;\n-        //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+        t.0 = 42; //~ ERROR E0381\n         yield;\n         t.1 = 88;\n         let _ = t;\n@@ -20,8 +19,7 @@ fn test_tuple() {\n fn test_tuple_struct() {\n     let _ = || {\n         let mut t: T;\n-        t.0 = 42;\n-        //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+        t.0 = 42; //~ ERROR E0381\n         yield;\n         t.1 = 88;\n         let _ = t;\n@@ -31,8 +29,7 @@ fn test_tuple_struct() {\n fn test_struct() {\n     let _ = || {\n         let mut t: S;\n-        t.x = 42;\n-        //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+        t.x = 42; //~ ERROR E0381\n         yield;\n         t.y = 88;\n         let _ = t;"}, {"sha": "3f9f1c046ba4b1b3afe408ae4f2742b28ddcd3ca", "filename": "src/test/ui/generator/partial-initialization-across-yield.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,20 +1,32 @@\n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n   --> $DIR/partial-initialization-across-yield.rs:12:9\n    |\n+LL |         let mut t: (i32, i32);\n+   |             ----- binding declared here but left uninitialized\n LL |         t.0 = 42;\n-   |         ^^^^^^^^ use of possibly-uninitialized `t`\n+   |         ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n-  --> $DIR/partial-initialization-across-yield.rs:23:9\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n+  --> $DIR/partial-initialization-across-yield.rs:22:9\n    |\n+LL |         let mut t: T;\n+   |             ----- binding declared here but left uninitialized\n LL |         t.0 = 42;\n-   |         ^^^^^^^^ use of possibly-uninitialized `t`\n+   |         ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n-  --> $DIR/partial-initialization-across-yield.rs:34:9\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n+  --> $DIR/partial-initialization-across-yield.rs:32:9\n    |\n+LL |         let mut t: S;\n+   |             ----- binding declared here but left uninitialized\n LL |         t.x = 42;\n-   |         ^^^^^^^^ use of possibly-uninitialized `t`\n+   |         ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6546e397785caab6a6e5a96351275af157bfc589", "filename": "src/test/ui/loops/loop-proper-liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -6,7 +6,7 @@ fn test1() {\n     'a: loop {\n         x = loop { break 'a };\n     }\n-    println!(\"{:?}\", x); //~ ERROR borrow of possibly-uninitialized variable\n+    println!(\"{:?}\", x); //~ ERROR E0381\n }\n \n // test2 and test3 should not fail."}, {"sha": "75041031736526066f90f1ef888d06fea637af7c", "filename": "src/test/ui/loops/loop-proper-liveness.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,11 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/loop-proper-liveness.rs:9:22\n    |\n+LL |     let x: i32;\n+   |         - binding declared here but left uninitialized\n+...\n LL |     println!(\"{:?}\", x);\n-   |                      ^ use of possibly-uninitialized `x`\n+   |                      ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "fc7341a563bb2a9d6b9ab144c9df8d63b430429a", "filename": "src/test/ui/mir/drop-elaboration-after-borrowck-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -6,7 +6,7 @@ static A: () = {\n     //~^ ERROR destructors cannot be evaluated at compile-time\n     a[0] = String::new();\n     //~^ ERROR destructors cannot be evaluated at compile-time\n-    //~| ERROR use of possibly-uninitialized variable\n+    //~| ERROR binding `a` isn't initialized\n };\n \n struct B<T>([T; 1]);"}, {"sha": "d8154f8d2cbc40ad33d0340fc660c2f19751d724", "filename": "src/test/ui/mir/drop-elaboration-after-borrowck-error.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -16,11 +16,14 @@ LL |     let a: [String; 1];\n LL | };\n    | - value is dropped here\n \n-error[E0381]: use of possibly-uninitialized variable: `a`\n+error[E0381]: used binding `a` isn't initialized\n   --> $DIR/drop-elaboration-after-borrowck-error.rs:7:5\n    |\n+LL |     let a: [String; 1];\n+   |         - binding declared here but left uninitialized\n+LL |\n LL |     a[0] = String::new();\n-   |     ^^^^ use of possibly-uninitialized `a`\n+   |     ^^^^ `a` used here but it isn't initialized\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/drop-elaboration-after-borrowck-error.rs:18:9"}, {"sha": "d76b69ecdc8bb15c0b553195281041bdcd6d2542", "filename": "src/test/ui/moves/issue-72649-uninit-in-loop.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -57,17 +57,17 @@ fn moved_loop_2() {\n \n fn uninit_1() {\n     loop {\n-        let value: NonCopy;\n-        let _used = value; //~ ERROR use of possibly-uninitialized variable: `value`\n-        //~^ NOTE use of possibly-uninitialized `value`\n+        let value: NonCopy; //~ NOTE declared here\n+        let _used = value; //~ ERROR binding `value` isn't initialized\n+        //~^ NOTE `value` used here but it isn't initialized\n     }\n }\n \n fn uninit_2() {\n-    let mut value: NonCopy;\n+    let mut value: NonCopy; //~ NOTE declared here\n     loop {\n-        let _used = value; //~ ERROR use of possibly-uninitialized variable: `value`\n-        //~^ NOTE use of possibly-uninitialized `value`\n+        let _used = value; //~ ERROR binding `value` isn't initialized\n+        //~^ NOTE `value` used here but it isn't initialized\n     }\n }\n "}, {"sha": "c7373b5be9d8dc7471d2b14543fefb08ce4a5b71", "filename": "src/test/ui/moves/issue-72649-uninit-in-loop.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -40,17 +40,22 @@ LL |     let mut value = NonCopy{};\n LL |         let _used2 = value;\n    |                      ^^^^^ value moved here, in previous iteration of loop\n \n-error[E0381]: use of possibly-uninitialized variable: `value`\n+error[E0381]: used binding `value` isn't initialized\n   --> $DIR/issue-72649-uninit-in-loop.rs:61:21\n    |\n+LL |         let value: NonCopy;\n+   |             ----- binding declared here but left uninitialized\n LL |         let _used = value;\n-   |                     ^^^^^ use of possibly-uninitialized `value`\n+   |                     ^^^^^ `value` used here but it isn't initialized\n \n-error[E0381]: use of possibly-uninitialized variable: `value`\n+error[E0381]: used binding `value` isn't initialized\n   --> $DIR/issue-72649-uninit-in-loop.rs:69:21\n    |\n+LL |     let mut value: NonCopy;\n+   |         --------- binding declared here but left uninitialized\n+LL |     loop {\n LL |         let _used = value;\n-   |                     ^^^^^ use of possibly-uninitialized `value`\n+   |                     ^^^^^ `value` used here but it isn't initialized\n \n error: aborting due to 6 previous errors\n "}, {"sha": "0b8d76def872c9587518e10ae4200258d12c1d49", "filename": "src/test/ui/moves/move-into-dead-array-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -11,5 +11,5 @@ fn main() {\n \n fn foo(i: usize) {\n     let mut a: [D; 4];\n-    a[i] = d();        //~ ERROR use of possibly-uninitialized variable: `a`\n+    a[i] = d(); //~ ERROR E0381\n }"}, {"sha": "344a6bbf0c92c77b192298f983efc3e988d59efc", "filename": "src/test/ui/moves/move-into-dead-array-1.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: use of possibly-uninitialized variable: `a`\n+error[E0381]: used binding `a` isn't initialized\n   --> $DIR/move-into-dead-array-1.rs:14:5\n    |\n+LL |     let mut a: [D; 4];\n+   |         ----- binding declared here but left uninitialized\n LL |     a[i] = d();\n-   |     ^^^^ use of possibly-uninitialized `a`\n+   |     ^^^^ `a` used here but it isn't initialized\n \n error: aborting due to previous error\n "}, {"sha": "19fd7028692d416efbd24898815380220581f730", "filename": "src/test/ui/moves/move-of-addr-of-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmoves%2Fmove-of-addr-of-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmoves%2Fmove-of-addr-of-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-of-addr-of-mut.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -5,7 +5,7 @@ struct S;\n \n fn main() {\n     let mut x: S;\n-    std::ptr::addr_of_mut!(x); //~ borrow of\n+    std::ptr::addr_of_mut!(x); //~ ERROR E0381\n \n     let y = x; // Should error here if `addr_of_mut` is ever allowed on uninitialized variables\n     drop(y);"}, {"sha": "e75f2b1c0894c63b17a3a5eedd53aeff5533cb28", "filename": "src/test/ui/moves/move-of-addr-of-mut.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmoves%2Fmove-of-addr-of-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fmoves%2Fmove-of-addr-of-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-of-addr-of-mut.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/move-of-addr-of-mut.rs:8:5\n    |\n+LL |     let mut x: S;\n+   |         ----- binding declared here but left uninitialized\n LL |     std::ptr::addr_of_mut!(x);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `x`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `std::ptr::addr_of_mut` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "46a156d2af9eeaa083336a64748ea155f4f1b242", "filename": "src/test/ui/nll/issue-21232-partial-init-and-erroneous-use.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -25,14 +25,12 @@ impl Drop for D {\n \n fn cannot_partially_init_adt_with_drop() {\n     let d: D;\n-    d.x = 10;\n-    //~^ ERROR assign of possibly-uninitialized variable: `d` [E0381]\n+    d.x = 10; //~ ERROR E0381\n }\n \n fn cannot_partially_init_mutable_adt_with_drop() {\n     let mut d: D;\n-    d.x = 10;\n-    //~^ ERROR assign of possibly-uninitialized variable: `d` [E0381]\n+    d.x = 10; //~ ERROR E0381\n }\n \n fn cannot_partially_reinit_adt_with_drop() {\n@@ -44,14 +42,12 @@ fn cannot_partially_reinit_adt_with_drop() {\n \n fn cannot_partially_init_inner_adt_via_outer_with_drop() {\n     let d: D;\n-    d.s.y = 20;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `d` [E0381]\n+    d.s.y = 20; //~ ERROR E0381\n }\n \n fn cannot_partially_init_inner_adt_via_mutable_outer_with_drop() {\n     let mut d: D;\n-    d.s.y = 20;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `d` [E0381]\n+    d.s.y = 20; //~ ERROR E0381\n }\n \n fn cannot_partially_reinit_inner_adt_via_outer_with_drop() {"}, {"sha": "63f230be7d4b3afdf26c31d2f35c24ad260575c3", "filename": "src/test/ui/nll/issue-21232-partial-init-and-erroneous-use.stderr", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,17 +1,25 @@\n-error[E0381]: assign of possibly-uninitialized variable: `d`\n+error[E0381]: assigned binding `d` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:28:5\n    |\n+LL |     let d: D;\n+   |         - binding declared here but left uninitialized\n LL |     d.x = 10;\n-   |     ^^^^^^^^ use of possibly-uninitialized `d`\n+   |     ^^^^^^^^ `d` assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign of possibly-uninitialized variable: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:34:5\n+error[E0381]: assigned binding `d` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:33:5\n    |\n+LL |     let mut d: D;\n+   |         ----- binding declared here but left uninitialized\n LL |     d.x = 10;\n-   |     ^^^^^^^^ use of possibly-uninitialized `d`\n+   |     ^^^^^^^^ `d` assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign of moved value: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:41:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:39:5\n    |\n LL |     let mut d = D { x: 0, s: S{ y: 0, z: 0 } };\n    |         ----- move occurs because `d` has type `D`, which does not implement the `Copy` trait\n@@ -20,20 +28,28 @@ LL |     drop(d);\n LL |     d.x = 10;\n    |     ^^^^^^^^ value assigned here after move\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:47:5\n+error[E0381]: partially assigned binding `d` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:45:5\n    |\n+LL |     let d: D;\n+   |         - binding declared here but left uninitialized\n LL |     d.s.y = 20;\n-   |     ^^^^^^^^^^ use of possibly-uninitialized `d.s`\n+   |     ^^^^^^^^^^ `d.s` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:53:5\n+error[E0381]: partially assigned binding `d` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:50:5\n    |\n+LL |     let mut d: D;\n+   |         ----- binding declared here but left uninitialized\n LL |     d.s.y = 20;\n-   |     ^^^^^^^^^^ use of possibly-uninitialized `d.s`\n+   |     ^^^^^^^^^^ `d.s` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign to part of moved value: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:60:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:56:5\n    |\n LL |     let mut d = D { x: 0, s: S{ y: 0, z: 0} };\n    |         ----- move occurs because `d` has type `D`, which does not implement the `Copy` trait"}, {"sha": "4cd1e406f94400dc4b81b6b56b01126f983eb4ac", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -94,15 +94,13 @@ macro_rules! use_part {\n \n fn test_0000_local_fully_init_and_use_struct() {\n     let s: S<B>;\n-    s.x = 10; s.y = Box::new(20);\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `s` [E0381]\n+    s.x = 10; s.y = Box::new(20); //~ ERROR E0381\n     use_fully!(struct s);\n }\n \n fn test_0001_local_fully_init_and_use_tuple() {\n     let t: T;\n-    t.0 = 10; t.1 = Box::new(20);\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+    t.0 = 10; t.1 = Box::new(20); //~ ERROR E0381\n     use_fully!(tuple t);\n }\n \n@@ -122,15 +120,13 @@ fn test_0011_local_fully_reinit_and_use_tuple() {\n \n fn test_0100_local_partial_init_and_use_struct() {\n     let s: S<B>;\n-    s.x = 10;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `s` [E0381]\n+    s.x = 10; //~ ERROR E0381\n     use_part!(struct s);\n }\n \n fn test_0101_local_partial_init_and_use_tuple() {\n     let t: T;\n-    t.0 = 10;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+    t.0 = 10; //~ ERROR E0381\n     use_part!(tuple t);\n }\n \n@@ -150,15 +146,13 @@ fn test_0111_local_partial_reinit_and_use_tuple() {\n \n fn test_0200_local_void_init_and_use_struct() {\n     let s: S<Void>;\n-    s.x = 10;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `s` [E0381]\n+    s.x = 10; //~ ERROR E0381\n     use_part!(struct s);\n }\n \n fn test_0201_local_void_init_and_use_tuple() {\n     let t: Tvoid;\n-    t.0 = 10;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `t` [E0381]\n+    t.0 = 10; //~ ERROR E0381\n     use_part!(tuple t);\n }\n \n@@ -173,15 +167,13 @@ fn test_0201_local_void_init_and_use_tuple() {\n \n fn test_1000_field_fully_init_and_use_struct() {\n     let q: Q<S<B>>;\n-    q.r.f.x = 10; q.r.f.y = Box::new(20);\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `q` [E0381]\n+    q.r.f.x = 10; q.r.f.y = Box::new(20); //~ ERROR E0381\n     use_fully!(struct q.r.f);\n }\n \n fn test_1001_field_fully_init_and_use_tuple() {\n     let q: Q<T>;\n-    q.r.f.0 = 10; q.r.f.1 = Box::new(20);\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `q` [E0381]\n+    q.r.f.0 = 10; q.r.f.1 = Box::new(20); //~ ERROR E0381\n     use_fully!(tuple q.r.f);\n }\n \n@@ -201,15 +193,13 @@ fn test_1011_field_fully_reinit_and_use_tuple() {\n \n fn test_1100_field_partial_init_and_use_struct() {\n     let q: Q<S<B>>;\n-    q.r.f.x = 10;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `q` [E0381]\n+    q.r.f.x = 10; //~ ERROR E0381\n     use_part!(struct q.r.f);\n }\n \n fn test_1101_field_partial_init_and_use_tuple() {\n     let q: Q<T>;\n-    q.r.f.0 = 10;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `q` [E0381]\n+    q.r.f.0 = 10; //~ ERROR E0381\n     use_part!(tuple q.r.f);\n }\n \n@@ -229,15 +219,13 @@ fn test_1111_field_partial_reinit_and_use_tuple() {\n \n fn test_1200_field_void_init_and_use_struct() {\n     let mut q: Q<S<Void>>;\n-    q.r.f.x = 10;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `q` [E0381]\n+    q.r.f.x = 10; //~ ERROR E0381\n     use_part!(struct q.r.f);\n }\n \n fn test_1201_field_void_init_and_use_tuple() {\n     let mut q: Q<Tvoid>;\n-    q.r.f.0 = 10;\n-    //~^ ERROR assign to part of possibly-uninitialized variable: `q` [E0381]\n+    q.r.f.0 = 10; //~ ERROR E0381\n     use_part!(tuple q.r.f);\n }\n "}, {"sha": "947c9e29b4508e2a9466be663a1a1e57270977f0", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.stderr", "status": "modified", "additions": 94, "deletions": 46, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,17 +1,25 @@\n-error[E0381]: assign to part of possibly-uninitialized variable: `s`\n+error[E0381]: partially assigned binding `s` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:97:5\n    |\n+LL |     let s: S<B>;\n+   |         - binding declared here but left uninitialized\n LL |     s.x = 10; s.y = Box::new(20);\n-   |     ^^^^^^^^ use of possibly-uninitialized `s`\n+   |     ^^^^^^^^ `s` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:104:5\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-use.rs:103:5\n    |\n+LL |     let t: T;\n+   |         - binding declared here but left uninitialized\n LL |     t.0 = 10; t.1 = Box::new(20);\n-   |     ^^^^^^^^ use of possibly-uninitialized `t`\n+   |     ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign to part of moved value: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:111:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:109:5\n    |\n LL |     let mut s: S<B> = S::new(); drop(s);\n    |         -----                        - value moved here\n@@ -21,7 +29,7 @@ LL |     s.x = 10; s.y = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n \n error[E0382]: assign to part of moved value: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:118:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:116:5\n    |\n LL |     let mut t: T = (0, Box::new(0)); drop(t);\n    |         -----                             - value moved here\n@@ -30,20 +38,28 @@ LL |     let mut t: T = (0, Box::new(0)); drop(t);\n LL |     t.0 = 10; t.1 = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:125:5\n+error[E0381]: partially assigned binding `s` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-use.rs:123:5\n    |\n+LL |     let s: S<B>;\n+   |         - binding declared here but left uninitialized\n LL |     s.x = 10;\n-   |     ^^^^^^^^ use of possibly-uninitialized `s`\n+   |     ^^^^^^^^ `s` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:132:5\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-use.rs:129:5\n    |\n+LL |     let t: T;\n+   |         - binding declared here but left uninitialized\n LL |     t.0 = 10;\n-   |     ^^^^^^^^ use of possibly-uninitialized `t`\n+   |     ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign to part of moved value: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:139:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:135:5\n    |\n LL |     let mut s: S<B> = S::new(); drop(s);\n    |         -----                        - value moved here\n@@ -53,7 +69,7 @@ LL |     s.x = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n \n error[E0382]: assign to part of moved value: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:146:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:142:5\n    |\n LL |     let mut t: T = (0, Box::new(0)); drop(t);\n    |         -----                             - value moved here\n@@ -62,32 +78,48 @@ LL |     let mut t: T = (0, Box::new(0)); drop(t);\n LL |     t.0 = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:153:5\n+error[E0381]: partially assigned binding `s` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-use.rs:149:5\n    |\n+LL |     let s: S<Void>;\n+   |         - binding declared here but left uninitialized\n LL |     s.x = 10;\n-   |     ^^^^^^^^ use of possibly-uninitialized `s`\n+   |     ^^^^^^^^ `s` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:160:5\n+error[E0381]: partially assigned binding `t` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-use.rs:155:5\n    |\n+LL |     let t: Tvoid;\n+   |         - binding declared here but left uninitialized\n LL |     t.0 = 10;\n-   |     ^^^^^^^^ use of possibly-uninitialized `t`\n+   |     ^^^^^^^^ `t` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:176:5\n+error[E0381]: partially assigned binding `q` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-use.rs:170:5\n    |\n+LL |     let q: Q<S<B>>;\n+   |         - binding declared here but left uninitialized\n LL |     q.r.f.x = 10; q.r.f.y = Box::new(20);\n-   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n+   |     ^^^^^^^^^^^^ `q.r.f` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:183:5\n+error[E0381]: partially assigned binding `q` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-use.rs:176:5\n    |\n+LL |     let q: Q<T>;\n+   |         - binding declared here but left uninitialized\n LL |     q.r.f.0 = 10; q.r.f.1 = Box::new(20);\n-   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n+   |     ^^^^^^^^^^^^ `q.r.f` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign to part of moved value: `q.r`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:190:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:182:5\n    |\n LL |     let mut q: Q<S<B>> = Q::new(S::new()); drop(q.r);\n    |                                                 --- value moved here\n@@ -97,7 +129,7 @@ LL |     q.r.f.x = 10; q.r.f.y = Box::new(20);\n    = note: move occurs because `q.r` has type `R<S<Box<u32>>>`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `q.r`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:197:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:189:5\n    |\n LL |     let mut q: Q<T> = Q::new((0, Box::new(0))); drop(q.r);\n    |                                                      --- value moved here\n@@ -106,20 +138,28 @@ LL |     q.r.f.0 = 10; q.r.f.1 = Box::new(20);\n    |\n    = note: move occurs because `q.r` has type `R<(u32, Box<u32>)>`, which does not implement the `Copy` trait\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:204:5\n+error[E0381]: partially assigned binding `q` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-use.rs:196:5\n    |\n+LL |     let q: Q<S<B>>;\n+   |         - binding declared here but left uninitialized\n LL |     q.r.f.x = 10;\n-   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n+   |     ^^^^^^^^^^^^ `q.r.f` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:211:5\n+error[E0381]: partially assigned binding `q` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-use.rs:202:5\n    |\n+LL |     let q: Q<T>;\n+   |         - binding declared here but left uninitialized\n LL |     q.r.f.0 = 10;\n-   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n+   |     ^^^^^^^^^^^^ `q.r.f` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign to part of moved value: `q.r`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:218:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:208:5\n    |\n LL |     let mut q: Q<S<B>> = Q::new(S::new()); drop(q.r);\n    |                                                 --- value moved here\n@@ -129,7 +169,7 @@ LL |     q.r.f.x = 10;\n    = note: move occurs because `q.r` has type `R<S<Box<u32>>>`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `q.r`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:225:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:215:5\n    |\n LL |     let mut q: Q<T> = Q::new((0, Box::new(0))); drop(q.r);\n    |                                                      --- value moved here\n@@ -138,20 +178,28 @@ LL |     q.r.f.0 = 10;\n    |\n    = note: move occurs because `q.r` has type `R<(u32, Box<u32>)>`, which does not implement the `Copy` trait\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:232:5\n+error[E0381]: partially assigned binding `q` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-use.rs:222:5\n    |\n+LL |     let mut q: Q<S<Void>>;\n+   |         ----- binding declared here but left uninitialized\n LL |     q.r.f.x = 10;\n-   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n+   |     ^^^^^^^^^^^^ `q.r.f` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:239:5\n+error[E0381]: partially assigned binding `q` isn't fully initialized\n+  --> $DIR/issue-21232-partial-init-and-use.rs:228:5\n    |\n+LL |     let mut q: Q<Tvoid>;\n+   |         ----- binding declared here but left uninitialized\n LL |     q.r.f.0 = 10;\n-   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n+   |     ^^^^^^^^^^^^ `q.r.f` partially assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign to part of moved value: `c`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:257:13\n+  --> $DIR/issue-21232-partial-init-and-use.rs:245:13\n    |\n LL |     let mut c = (1, \"\".to_owned());\n    |         ----- move occurs because `c` has type `(i32, String)`, which does not implement the `Copy` trait\n@@ -162,7 +210,7 @@ LL |             c.0 = 2;\n    |             ^^^^^^^ value partially assigned here after move\n \n error[E0382]: assign to part of moved value: `c`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:267:13\n+  --> $DIR/issue-21232-partial-init-and-use.rs:255:13\n    |\n LL |     let mut c = (1, (1, \"\".to_owned()));\n    |         ----- move occurs because `c` has type `(i32, (i32, String))`, which does not implement the `Copy` trait\n@@ -173,7 +221,7 @@ LL |             (c.1).0 = 2;\n    |             ^^^^^^^^^^^ value partially assigned here after move\n \n error[E0382]: assign to part of moved value: `c.1`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:275:13\n+  --> $DIR/issue-21232-partial-init-and-use.rs:263:13\n    |\n LL |         c2 => {\n    |         -- value moved here"}, {"sha": "252f7f8ba07cff05e8bbc6f3aed6e2779e001640", "filename": "src/test/ui/nll/match-cfg-fake-edges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -18,7 +18,7 @@ fn guard_may_be_skipped(y: i32) {\n     match y {\n         _ if { x = 2; true } => 1,\n         _ if {\n-            x; //~ ERROR use of possibly-uninitialized variable: `x`\n+            x; //~ ERROR E0381\n             false\n         } => 2,\n         _ => 3,"}, {"sha": "250aa482e5c675012bb30ce48b460a7e6275181f", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,14 @@\n-error[E0381]: use of possibly-uninitialized variable: `x`\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/match-cfg-fake-edges.rs:21:13\n    |\n+LL |     let x;\n+   |         - binding declared here but left uninitialized\n+...\n+LL |         _ if { x = 2; true } => 1,\n+   |                ----- binding initialized here in some conditions\n+LL |         _ if {\n LL |             x;\n-   |             ^ use of possibly-uninitialized `x`\n+   |             ^ `x` used here but it isn't initialized\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/match-cfg-fake-edges.rs:35:13"}, {"sha": "664f36f695cf3ce12b37dbf7741960c17a8cd16a", "filename": "src/test/ui/nll/match-on-borrowed.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -33,11 +33,13 @@ LL |     match t {\n LL |     x;\n    |     - borrow later used here\n \n-error[E0381]: use of possibly-uninitialized variable: `n`\n+error[E0381]: used binding `n` isn't initialized\n   --> $DIR/match-on-borrowed.rs:93:11\n    |\n+LL |     let n: Never;\n+   |         - binding declared here but left uninitialized\n LL |     match n {}\n-   |           ^ use of possibly-uninitialized `n`\n+   |           ^ `n` used here but it isn't initialized\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e0dded1521760ed527626460a314a9c7d636b9c0", "filename": "src/test/ui/rfc-2497-if-let-chains/chains-without-let.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,19 +1,19 @@\n fn and_chain() {\n     let z;\n     if true && { z = 3; true} && z == 3 {}\n-    //~^ ERROR use of possibly-uninitialized\n+    //~^ ERROR E0381\n }\n \n fn and_chain_2() {\n     let z;\n     true && { z = 3; true} && z == 3;\n-    //~^ ERROR use of possibly-uninitialized\n+    //~^ ERROR E0381\n }\n \n fn or_chain() {\n     let z;\n     if false || { z = 3; false} || z == 3 {}\n-    //~^ ERROR use of possibly-uninitialized\n+    //~^ ERROR E0381\n }\n \n fn main() {"}, {"sha": "30d5a6779fcd7ba8de7b439272d0284c2a2905e4", "filename": "src/test/ui/rfc-2497-if-let-chains/chains-without-let.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,20 +1,32 @@\n-error[E0381]: use of possibly-uninitialized variable: `z`\n+error[E0381]: used binding `z` is possibly-uninitialized\n   --> $DIR/chains-without-let.rs:3:34\n    |\n+LL |     let z;\n+   |         - binding declared here but left uninitialized\n LL |     if true && { z = 3; true} && z == 3 {}\n-   |                                  ^ use of possibly-uninitialized `z`\n+   |                  -----           ^ `z` used here but it is possibly-uninitialized\n+   |                  |\n+   |                  binding initialized here in some conditions\n \n-error[E0381]: use of possibly-uninitialized variable: `z`\n+error[E0381]: used binding `z` is possibly-uninitialized\n   --> $DIR/chains-without-let.rs:9:31\n    |\n+LL |     let z;\n+   |         - binding declared here but left uninitialized\n LL |     true && { z = 3; true} && z == 3;\n-   |                               ^ use of possibly-uninitialized `z`\n+   |               -----           ^ `z` used here but it is possibly-uninitialized\n+   |               |\n+   |               binding initialized here in some conditions\n \n-error[E0381]: use of possibly-uninitialized variable: `z`\n+error[E0381]: used binding `z` is possibly-uninitialized\n   --> $DIR/chains-without-let.rs:15:36\n    |\n+LL |     let z;\n+   |         - binding declared here but left uninitialized\n LL |     if false || { z = 3; false} || z == 3 {}\n-   |                                    ^ use of possibly-uninitialized `z`\n+   |                   -----            ^ `z` used here but it is possibly-uninitialized\n+   |                   |\n+   |                   binding initialized here in some conditions\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f4f45abcc75b1ad1037bdff3662cb203c8d67aac", "filename": "src/test/ui/try-block/try-block-opt-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -12,5 +12,5 @@ pub fn main() {\n         Ok::<(), ()>(())?;\n         use_val(cfg_res);\n     };\n-    assert_eq!(cfg_res, 5); //~ ERROR borrow of possibly-uninitialized variable: `cfg_res`\n+    assert_eq!(cfg_res, 5); //~ ERROR E0381\n }"}, {"sha": "c397385017ff487cdb2de28f6a57c40579394e12", "filename": "src/test/ui/try-block/try-block-opt-init.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,14 @@\n-error[E0381]: borrow of possibly-uninitialized variable: `cfg_res`\n+error[E0381]: used binding `cfg_res` is possibly-uninitialized\n   --> $DIR/try-block-opt-init.rs:15:5\n    |\n+LL |     let cfg_res;\n+   |         ------- binding declared here but left uninitialized\n+...\n+LL |         cfg_res = 5;\n+   |         ----------- binding initialized here in some conditions\n+...\n LL |     assert_eq!(cfg_res, 5);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `cfg_res`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ `cfg_res` used here but it is possibly-uninitialized\n    |\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "2764bb563d30748046293437c1c05ad7363c2b2c", "filename": "src/test/ui/uninhabited/privately-uninhabited-mir-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.rs?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -25,5 +25,5 @@ fn main() {\n     widget::Widget::new();\n     // Error. Widget type is not known to be uninhabited here,\n     // so the following code is considered reachable.\n-    *y = 2; //~ ERROR use of possibly-uninitialized variable\n+    *y = 2; //~ ERROR E0381\n }"}, {"sha": "95c209f47c92a450b236dd0ebfa3dd14ef5b0295", "filename": "src/test/ui/uninhabited/privately-uninhabited-mir-call.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b21131278cc38ab8d79444de340015faadd061c/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.stderr?ref=9b21131278cc38ab8d79444de340015faadd061c", "patch": "@@ -1,8 +1,11 @@\n-error[E0381]: use of possibly-uninitialized variable: `y`\n+error[E0381]: used binding `y` isn't initialized\n   --> $DIR/privately-uninhabited-mir-call.rs:28:5\n    |\n+LL |     let y: &mut u32;\n+   |         - binding declared here but left uninitialized\n+...\n LL |     *y = 2;\n-   |     ^^^^^^ use of possibly-uninitialized `y`\n+   |     ^^^^^^ `y` used here but it isn't initialized\n \n error: aborting due to previous error\n "}]}