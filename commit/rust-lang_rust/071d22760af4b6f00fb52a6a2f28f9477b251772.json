{"sha": "071d22760af4b6f00fb52a6a2f28f9477b251772", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MWQyMjc2MGFmNGI2ZjAwZmI1MmE2YTJmMjhmOTQ3N2IyNTE3NzI=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-01-31T03:49:15Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-01-31T18:25:29Z"}, "message": "rustbuild: Don't build compiler twice for error-index-generator.", "tree": {"sha": "653513912013f3122b55b961a8e790bef1a86e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/653513912013f3122b55b961a8e790bef1a86e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/071d22760af4b6f00fb52a6a2f28f9477b251772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/071d22760af4b6f00fb52a6a2f28f9477b251772", "html_url": "https://github.com/rust-lang/rust/commit/071d22760af4b6f00fb52a6a2f28f9477b251772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/071d22760af4b6f00fb52a6a2f28f9477b251772/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd20a8be0d74a7026267af5c9a0cd251eeaba7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd20a8be0d74a7026267af5c9a0cd251eeaba7c6", "html_url": "https://github.com/rust-lang/rust/commit/fd20a8be0d74a7026267af5c9a0cd251eeaba7c6"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "885fcfff030a2094e75c71dfbc5ede75573167f3", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/071d22760af4b6f00fb52a6a2f28f9477b251772/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071d22760af4b6f00fb52a6a2f28f9477b251772/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=071d22760af4b6f00fb52a6a2f28f9477b251772", "patch": "@@ -146,7 +146,7 @@ mod defaults {\n         // rustdoc tool.\n         assert_eq!(\n             first(builder.cache.all::<doc::ErrorIndex>()),\n-            &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 0 }, target: a },]\n+            &[doc::ErrorIndex { target: a },]\n         );\n         assert_eq!(\n             first(builder.cache.all::<tool::ErrorIndex>()),\n@@ -556,7 +556,7 @@ mod dist {\n         // rustdoc tool.\n         assert_eq!(\n             first(builder.cache.all::<doc::ErrorIndex>()),\n-            &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 1 }, target: a },]\n+            &[doc::ErrorIndex { target: a },]\n         );\n         assert_eq!(\n             first(builder.cache.all::<tool::ErrorIndex>()),\n@@ -594,7 +594,7 @@ mod dist {\n         // rustdoc tool.\n         assert_eq!(\n             first(builder.cache.all::<doc::ErrorIndex>()),\n-            &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 1 }, target: a },]\n+            &[doc::ErrorIndex { target: a },]\n         );\n         assert_eq!(\n             first(builder.cache.all::<tool::ErrorIndex>()),"}, {"sha": "c4b3e4cf95dae1424a7c503bb96342da08a65687", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/071d22760af4b6f00fb52a6a2f28f9477b251772/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071d22760af4b6f00fb52a6a2f28f9477b251772/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=071d22760af4b6f00fb52a6a2f28f9477b251772", "patch": "@@ -636,7 +636,6 @@ impl Step for Rustdoc {\n \n #[derive(Ord, PartialOrd, Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {\n-    pub compiler: Compiler,\n     pub target: TargetSelection,\n }\n \n@@ -652,12 +651,7 @@ impl Step for ErrorIndex {\n \n     fn make_run(run: RunConfig<'_>) {\n         let target = run.target;\n-        // error_index_generator depends on librustdoc. Use the compiler that\n-        // is normally used to build rustdoc for other documentation so that\n-        // it shares the same artifacts.\n-        let compiler =\n-            run.builder.compiler_for(run.builder.top_stage, run.builder.config.build, target);\n-        run.builder.ensure(ErrorIndex { compiler, target });\n+        run.builder.ensure(ErrorIndex { target });\n     }\n \n     /// Generates the HTML rendered error-index by running the\n@@ -666,7 +660,7 @@ impl Step for ErrorIndex {\n         builder.info(&format!(\"Documenting error index ({})\", self.target));\n         let out = builder.doc_out(self.target);\n         t!(fs::create_dir_all(&out));\n-        let mut index = tool::ErrorIndex::command(builder, self.compiler);\n+        let mut index = tool::ErrorIndex::command(builder);\n         index.arg(\"html\");\n         index.arg(out.join(\"error-index.html\"));\n         index.arg(&builder.version);"}, {"sha": "edacfd59c5c5108782095a3030c34389f82cc89f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/071d22760af4b6f00fb52a6a2f28f9477b251772/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071d22760af4b6f00fb52a6a2f28f9477b251772/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=071d22760af4b6f00fb52a6a2f28f9477b251772", "patch": "@@ -1482,7 +1482,7 @@ impl Step for ErrorIndex {\n         // error_index_generator depends on librustdoc. Use the compiler that\n         // is normally used to build rustdoc for other tests (like compiletest\n         // tests in src/test/rustdoc) so that it shares the same artifacts.\n-        let compiler = run.builder.compiler_for(run.builder.top_stage, run.target, run.target);\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.builder.config.build);\n         run.builder.ensure(ErrorIndex { compiler });\n     }\n \n@@ -1499,19 +1499,16 @@ impl Step for ErrorIndex {\n         t!(fs::create_dir_all(&dir));\n         let output = dir.join(\"error-index.md\");\n \n-        let mut tool = tool::ErrorIndex::command(builder, compiler);\n+        let mut tool = tool::ErrorIndex::command(builder);\n         tool.arg(\"markdown\").arg(&output);\n \n-        // Use the rustdoc that was built by self.compiler. This copy of\n-        // rustdoc is shared with other tests (like compiletest tests in\n-        // src/test/rustdoc). This helps avoid building rustdoc multiple\n-        // times.\n-        let rustdoc_compiler = builder.compiler(builder.top_stage, builder.config.build);\n-        builder.info(&format!(\"Testing error-index stage{}\", rustdoc_compiler.stage));\n+        builder.info(&format!(\"Testing error-index stage{}\", compiler.stage));\n         let _time = util::timeit(&builder);\n         builder.run_quiet(&mut tool);\n-        builder.ensure(compile::Std { compiler: rustdoc_compiler, target: rustdoc_compiler.host });\n-        markdown_test(builder, rustdoc_compiler, &output);\n+        // The tests themselves need to link to std, so make sure it is\n+        // available.\n+        builder.ensure(compile::Std { compiler, target: compiler.host });\n+        markdown_test(builder, compiler, &output);\n     }\n }\n "}, {"sha": "bf6bea539e5c2b1638107b94a818cb95eba0248b", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/071d22760af4b6f00fb52a6a2f28f9477b251772/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071d22760af4b6f00fb52a6a2f28f9477b251772/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=071d22760af4b6f00fb52a6a2f28f9477b251772", "patch": "@@ -376,7 +376,15 @@ pub struct ErrorIndex {\n }\n \n impl ErrorIndex {\n-    pub fn command(builder: &Builder<'_>, compiler: Compiler) -> Command {\n+    pub fn command(builder: &Builder<'_>) -> Command {\n+        // This uses stage-1 to match the behavior of building rustdoc.\n+        // Error-index-generator links with the rustdoc library, so we want to\n+        // use the same librustdoc to avoid building rustdoc twice (and to\n+        // avoid building the compiler an extra time). This uses\n+        // saturating_sub to deal with building with stage 0. (Using stage 0\n+        // isn't recommended, since it will fail if any new error index tests\n+        // use new syntax, but it should work otherwise.)\n+        let compiler = builder.compiler(builder.top_stage.saturating_sub(1), builder.config.build);\n         let mut cmd = Command::new(builder.ensure(ErrorIndex { compiler }));\n         add_dylib_path(\n             vec![PathBuf::from(&builder.sysroot_libdir(compiler, compiler.host))],\n@@ -396,8 +404,14 @@ impl Step for ErrorIndex {\n     fn make_run(run: RunConfig<'_>) {\n         // Compile the error-index in the same stage as rustdoc to avoid\n         // recompiling rustdoc twice if we can.\n-        let host = run.builder.config.build;\n-        let compiler = run.builder.compiler_for(run.builder.top_stage, host, host);\n+        //\n+        // NOTE: This `make_run` isn't used in normal situations, only if you\n+        // manually build the tool with `x.py build\n+        // src/tools/error-index-generator` which almost nobody does.\n+        // Normally, `x.py test` or `x.py doc` will use the\n+        // `ErrorIndex::command` function instead.\n+        let compiler =\n+            run.builder.compiler(run.builder.top_stage.saturating_sub(1), run.builder.config.build);\n         run.builder.ensure(ErrorIndex { compiler });\n     }\n "}]}