{"sha": "428d5ac5b94b2470ce379b0751861ec903825d7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOGQ1YWM1Yjk0YjI0NzBjZTM3OWIwNzUxODYxZWM5MDM4MjVkN2I=", "commit": {"author": {"name": "Stuart Pernsteiner", "email": "spernsteiner@mozilla.com", "date": "2014-08-11T23:55:13Z"}, "committer": {"name": "Stuart Pernsteiner", "email": "spernsteiner@mozilla.com", "date": "2014-08-12T23:14:27Z"}, "message": "Revert \"avoid redundant translation of items during monomorphization\"\n\nThis reverts commit f97f65f7b70e455c1c3e72e620120c9f1a96d89a.\n\nConflicts:\n\tsrc/librustc/middle/trans/base.rs\n\tsrc/librustc/middle/trans/foreign.rs\n\tsrc/librustc/middle/trans/monomorphize.rs", "tree": {"sha": "11c8bbf0db226ccebf31f897067b9ba9b36f06b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11c8bbf0db226ccebf31f897067b9ba9b36f06b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/428d5ac5b94b2470ce379b0751861ec903825d7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/428d5ac5b94b2470ce379b0751861ec903825d7b", "html_url": "https://github.com/rust-lang/rust/commit/428d5ac5b94b2470ce379b0751861ec903825d7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/428d5ac5b94b2470ce379b0751861ec903825d7b/comments", "author": {"login": "spernsteiner", "id": 3031136, "node_id": "MDQ6VXNlcjMwMzExMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3031136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spernsteiner", "html_url": "https://github.com/spernsteiner", "followers_url": "https://api.github.com/users/spernsteiner/followers", "following_url": "https://api.github.com/users/spernsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/spernsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/spernsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spernsteiner/subscriptions", "organizations_url": "https://api.github.com/users/spernsteiner/orgs", "repos_url": "https://api.github.com/users/spernsteiner/repos", "events_url": "https://api.github.com/users/spernsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/spernsteiner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spernsteiner", "id": 3031136, "node_id": "MDQ6VXNlcjMwMzExMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3031136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spernsteiner", "html_url": "https://github.com/spernsteiner", "followers_url": "https://api.github.com/users/spernsteiner/followers", "following_url": "https://api.github.com/users/spernsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/spernsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/spernsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spernsteiner/subscriptions", "organizations_url": "https://api.github.com/users/spernsteiner/orgs", "repos_url": "https://api.github.com/users/spernsteiner/repos", "events_url": "https://api.github.com/users/spernsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/spernsteiner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5a94c4a88ab1d9696ec17964bc989bd6fa4e260", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a94c4a88ab1d9696ec17964bc989bd6fa4e260", "html_url": "https://github.com/rust-lang/rust/commit/d5a94c4a88ab1d9696ec17964bc989bd6fa4e260"}], "stats": {"total": 101, "additions": 21, "deletions": 80}, "files": [{"sha": "0c224a440ff6f4dfff6469ed855fd3fb3cdaf41f", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=428d5ac5b94b2470ce379b0751861ec903825d7b", "patch": "@@ -1343,8 +1343,7 @@ pub fn new_fn_ctxt<'a>(ccx: &'a CrateContext,\n                        output_type: ty::t,\n                        param_substs: &'a param_substs,\n                        sp: Option<Span>,\n-                       block_arena: &'a TypedArena<Block<'a>>,\n-                       handle_items: HandleItemsFlag)\n+                       block_arena: &'a TypedArena<Block<'a>>)\n                        -> FunctionContext<'a> {\n     param_substs.validate();\n \n@@ -1379,8 +1378,7 @@ pub fn new_fn_ctxt<'a>(ccx: &'a CrateContext,\n           block_arena: block_arena,\n           ccx: ccx,\n           debug_context: debug_context,\n-          scopes: RefCell::new(Vec::new()),\n-          handle_items: handle_items,\n+          scopes: RefCell::new(Vec::new())\n     };\n \n     if has_env {\n@@ -1708,8 +1706,7 @@ pub fn trans_closure(ccx: &CrateContext,\n                      abi: Abi,\n                      has_env: bool,\n                      is_unboxed_closure: IsUnboxedClosureFlag,\n-                     maybe_load_env: <'a> |&'a Block<'a>| -> &'a Block<'a>,\n-                     handle_items: HandleItemsFlag) {\n+                     maybe_load_env: <'a> |&'a Block<'a>| -> &'a Block<'a>) {\n     ccx.stats.n_closures.set(ccx.stats.n_closures.get() + 1);\n \n     let _icx = push_ctxt(\"trans_closure\");\n@@ -1726,8 +1723,7 @@ pub fn trans_closure(ccx: &CrateContext,\n                           output_type,\n                           param_substs,\n                           Some(body.span),\n-                          &arena,\n-                          handle_items);\n+                          &arena);\n     let mut bcx = init_function(&fcx, false, output_type);\n \n     // cleanup scope for the incoming arguments\n@@ -1836,8 +1832,7 @@ pub fn trans_fn(ccx: &CrateContext,\n                 llfndecl: ValueRef,\n                 param_substs: &param_substs,\n                 id: ast::NodeId,\n-                attrs: &[ast::Attribute],\n-                handle_items: HandleItemsFlag) {\n+                attrs: &[ast::Attribute]) {\n     let _s = StatRecorder::new(ccx, ccx.tcx.map.path_to_string(id).to_string());\n     debug!(\"trans_fn(param_substs={})\", param_substs.repr(ccx.tcx()));\n     let _icx = push_ctxt(\"trans_fn\");\n@@ -1857,8 +1852,7 @@ pub fn trans_fn(ccx: &CrateContext,\n                   abi,\n                   false,\n                   NotUnboxedClosure,\n-                  |bcx| bcx,\n-                  handle_items);\n+                  |bcx| bcx);\n }\n \n pub fn trans_enum_variant(ccx: &CrateContext,\n@@ -1964,7 +1958,7 @@ fn trans_enum_variant_or_tuple_like_struct(ccx: &CrateContext,\n \n     let arena = TypedArena::new();\n     let fcx = new_fn_ctxt(ccx, llfndecl, ctor_id, false, result_ty,\n-                          param_substs, None, &arena, TranslateItems);\n+                          param_substs, None, &arena);\n     let bcx = init_function(&fcx, false, result_ty);\n \n     assert!(!fcx.needs_ret_allocas);\n@@ -2074,8 +2068,7 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n                          llfn,\n                          &param_substs::empty(),\n                          item.id,\n-                         item.attrs.as_slice(),\n-                         TranslateItems);\n+                         item.attrs.as_slice());\n             }\n         } else {\n             // Be sure to travel more than just one layer deep to catch nested"}, {"sha": "379b53eebbb4f527cdad7f1d8049c61987e5017b", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=428d5ac5b94b2470ce379b0751861ec903825d7b", "patch": "@@ -339,8 +339,7 @@ pub fn trans_unboxing_shim(bcx: &Block,\n                           return_type,\n                           &empty_param_substs,\n                           None,\n-                          &block_arena,\n-                          TranslateItems);\n+                          &block_arena);\n     let mut bcx = init_function(&fcx, false, return_type);\n \n     // Create the substituted versions of the self type."}, {"sha": "44c52a6739ab4de0c8c51d6e1354d2fe1bf62704", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=428d5ac5b94b2470ce379b0751861ec903825d7b", "patch": "@@ -394,8 +394,7 @@ pub fn trans_expr_fn<'a>(\n                   ty::ty_fn_abi(fty),\n                   true,\n                   NotUnboxedClosure,\n-                  |bcx| load_environment(bcx, cdata_ty, &freevars, store),\n-                  bcx.fcx.handle_items);\n+                  |bcx| load_environment(bcx, cdata_ty, &freevars, store));\n     fill_fn_pair(bcx, dest_addr, llfn, llbox);\n     bcx\n }\n@@ -487,8 +486,7 @@ pub fn trans_unboxed_closure<'a>(\n                   ty::ty_fn_abi(function_type),\n                   true,\n                   IsUnboxedClosure,\n-                  |bcx| load_unboxed_closure_environment(bcx, freevars_ptr),\n-                  bcx.fcx.handle_items);\n+                  |bcx| load_unboxed_closure_environment(bcx, freevars_ptr));\n \n     // Don't hoist this to the top of the function. It's perfectly legitimate\n     // to have a zero-size unboxed closure (in which case dest will be\n@@ -575,7 +573,7 @@ pub fn get_wrapper_for_bare_fn(ccx: &CrateContext,\n     let arena = TypedArena::new();\n     let empty_param_substs = param_substs::empty();\n     let fcx = new_fn_ctxt(ccx, llfn, ast::DUMMY_NODE_ID, true, f.sig.output,\n-                          &empty_param_substs, None, &arena, TranslateItems);\n+                          &empty_param_substs, None, &arena);\n     let bcx = init_function(&fcx, true, f.sig.output);\n \n     let args = create_datums_for_fn_args(&fcx,"}, {"sha": "3b89c73b31da8cee0bf4ca5321d03236b4b7cc86", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=428d5ac5b94b2470ce379b0751861ec903825d7b", "patch": "@@ -224,12 +224,6 @@ impl<T:Subst+Clone> SubstP for T {\n pub type RvalueDatum = datum::Datum<datum::Rvalue>;\n pub type LvalueDatum = datum::Datum<datum::Lvalue>;\n \n-#[deriving(Clone, Eq, PartialEq)]\n-pub enum HandleItemsFlag {\n-    IgnoreItems,\n-    TranslateItems,\n-}\n-\n // Function context.  Every LLVM function we create will have one of\n // these.\n pub struct FunctionContext<'a> {\n@@ -303,9 +297,6 @@ pub struct FunctionContext<'a> {\n \n     // Cleanup scopes.\n     pub scopes: RefCell<Vec<cleanup::CleanupScope<'a>> >,\n-\n-    // How to handle items encountered during translation of this function.\n-    pub handle_items: HandleItemsFlag,\n }\n \n impl<'a> FunctionContext<'a> {"}, {"sha": "6ea85f83d25aca1e78bfe17520a37c2f20376f20", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=428d5ac5b94b2470ce379b0751861ec903825d7b", "patch": "@@ -69,12 +69,7 @@ pub fn trans_stmt<'a>(cx: &'a Block<'a>,\n                         debuginfo::create_local_var_metadata(bcx, &**local);\n                     }\n                 }\n-                ast::DeclItem(ref i) => {\n-                    match fcx.handle_items {\n-                        TranslateItems => trans_item(cx.fcx.ccx, &**i),\n-                        IgnoreItems => {}\n-                    }\n-                }\n+                ast::DeclItem(ref i) => trans_item(cx.fcx.ccx, &**i)\n             }\n         }\n         ast::StmtMac(..) => cx.tcx().sess.bug(\"unexpanded macro\")"}, {"sha": "88bb88da3f043d31117461ef61ea42e89b283fb0", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=428d5ac5b94b2470ce379b0751861ec903825d7b", "patch": "@@ -630,7 +630,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n \n         let llfn = base::decl_internal_rust_fn(ccx, t, ps.as_slice());\n         base::set_llvm_fn_attrs(attrs, llfn);\n-        base::trans_fn(ccx, decl, body, llfn, param_substs, id, [], TranslateItems);\n+        base::trans_fn(ccx, decl, body, llfn, param_substs, id, []);\n         llfn\n     }\n "}, {"sha": "cc7cb16334131831ce80f37a26720cb78520e93e", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=428d5ac5b94b2470ce379b0751861ec903825d7b", "patch": "@@ -468,7 +468,7 @@ fn make_generic_glue(ccx: &CrateContext,\n     let arena = TypedArena::new();\n     let empty_param_substs = param_substs::empty();\n     let fcx = new_fn_ctxt(ccx, llfn, ast::DUMMY_NODE_ID, false, ty::mk_nil(),\n-                          &empty_param_substs, None, &arena, TranslateItems);\n+                          &empty_param_substs, None, &arena);\n \n     let bcx = init_function(&fcx, false, ty::mk_nil());\n "}, {"sha": "bf39f3a6aa385842d1d2a838aafe61dcbffa9648", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=428d5ac5b94b2470ce379b0751861ec903825d7b", "patch": "@@ -133,7 +133,7 @@ pub fn maybe_instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n           if unparameterized {\n               let llfn = get_item_val(ccx, mth.id);\n                 trans_fn(ccx, &*mth.pe_fn_decl(), &*mth.pe_body(), llfn,\n-                       &param_substs::empty(), mth.id, [], TranslateItems);\n+                       &param_substs::empty(), mth.id, []);\n           }\n           local_def(mth.id)\n         }"}, {"sha": "9e45b294a37b396e01401203a1fd65d93a41f052", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=428d5ac5b94b2470ce379b0751861ec903825d7b", "patch": "@@ -75,8 +75,7 @@ pub fn trans_impl(ccx: &CrateContext,\n                      llfn,\n                      &param_substs::empty(),\n                      method.id,\n-                     [],\n-                     TranslateItems);\n+                     []);\n         } else {\n             let mut v = TransItemVisitor{ ccx: ccx };\n             visit::walk_method_helper(&mut v, &**method, ());"}, {"sha": "6d705c7d914e39118788d7d8cad768bb7b1028cf", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=428d5ac5b94b2470ce379b0751861ec903825d7b", "patch": "@@ -166,8 +166,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n                           ccx, &**decl, &**body, [], d, &psubsts, fn_id.node,\n                           Some(hash.as_slice()));\n                   } else {\n-                      trans_fn(ccx, &**decl, &**body, d, &psubsts, fn_id.node, [],\n-                               IgnoreItems);\n+                      trans_fn(ccx, &**decl, &**body, d, &psubsts, fn_id.node, []);\n                   }\n \n                   d\n@@ -201,8 +200,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         ast_map::NodeMethod(mth) => {\n             let d = mk_lldecl(abi::Rust);\n             set_llvm_fn_attrs(mth.attrs.as_slice(), d);\n-            trans_fn(ccx, &*mth.pe_fn_decl(), &*mth.pe_body(), d, &psubsts, mth.id, [],\n-                     IgnoreItems);\n+            trans_fn(ccx, &*mth.pe_fn_decl(), &*mth.pe_body(), d, &psubsts, mth.id, []);\n             d\n         }\n         ast_map::NodeTraitMethod(method) => {\n@@ -211,7 +209,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n                     let d = mk_lldecl(abi::Rust);\n                     set_llvm_fn_attrs(mth.attrs.as_slice(), d);\n                     trans_fn(ccx, &*mth.pe_fn_decl(), &*mth.pe_body(), d,\n-                             &psubsts, mth.id, [], IgnoreItems);\n+                             &psubsts, mth.id, []);\n                     d\n                 }\n                 _ => {"}, {"sha": "9caa9f681aadffe42beb6d8b8a03261a45cda3b6", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428d5ac5b94b2470ce379b0751861ec903825d7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=428d5ac5b94b2470ce379b0751861ec903825d7b", "patch": "@@ -312,7 +312,7 @@ impl<'a, 'b> Reflector<'a, 'b> {\n                 let empty_param_substs = param_substs::empty();\n                 let fcx = new_fn_ctxt(ccx, llfdecl, ast::DUMMY_NODE_ID, false,\n                                       ty::mk_u64(), &empty_param_substs,\n-                                      None, &arena, TranslateItems);\n+                                      None, &arena);\n                 let bcx = init_function(&fcx, false, ty::mk_u64());\n \n                 // we know the return type of llfdecl is an int here, so"}, {"sha": "18ba80a712d11c4ebfe488165142feabbef0bd47", "filename": "src/test/run-make/issue-7349/Makefile", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d5a94c4a88ab1d9696ec17964bc989bd6fa4e260/src%2Ftest%2Frun-make%2Fissue-7349%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d5a94c4a88ab1d9696ec17964bc989bd6fa4e260/src%2Ftest%2Frun-make%2Fissue-7349%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-7349%2FMakefile?ref=d5a94c4a88ab1d9696ec17964bc989bd6fa4e260", "patch": "@@ -1,11 +0,0 @@\n--include ../tools.mk\n-\n-# Test to make sure that inner functions within a polymorphic outer function\n-# don't get re-translated when the outer function is monomorphized.  The test\n-# code monomorphizes the outer function several times, but the magic constant\n-# `8675309` used in the inner function should appear only once in the generated\n-# IR.\n-\n-all:\n-\t$(RUSTC) foo.rs --emit=ir\n-\t[ \"$$(grep -c 8675309 \"$(TMPDIR)/foo.ll\")\" -eq \"1\" ]"}, {"sha": "775b7314841cc288a0928048d5efd134b48019c1", "filename": "src/test/run-make/issue-7349/foo.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d5a94c4a88ab1d9696ec17964bc989bd6fa4e260/src%2Ftest%2Frun-make%2Fissue-7349%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a94c4a88ab1d9696ec17964bc989bd6fa4e260/src%2Ftest%2Frun-make%2Fissue-7349%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-7349%2Ffoo.rs?ref=d5a94c4a88ab1d9696ec17964bc989bd6fa4e260", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn outer<T>() {\n-    #[allow(dead_code)]\n-    fn inner() -> uint {\n-        8675309\n-    }\n-}\n-\n-fn main() {\n-    outer::<int>();\n-    outer::<uint>();\n-}"}]}