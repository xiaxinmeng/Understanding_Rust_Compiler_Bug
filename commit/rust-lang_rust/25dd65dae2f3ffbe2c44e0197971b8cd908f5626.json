{"sha": "25dd65dae2f3ffbe2c44e0197971b8cd908f5626", "node_id": "C_kwDOAAsO6NoAKDI1ZGQ2NWRhZTJmM2ZmYmUyYzQ0ZTAxOTc5NzFiOGNkOTA4ZjU2MjY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-02T12:19:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-02T12:19:25Z"}, "message": "Merge #11163\n\n11163: internal: start tests for top-level parser entry points r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "40fae8203b4c7de36272615ee1ed10dbcf9910a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40fae8203b4c7de36272615ee1ed10dbcf9910a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25dd65dae2f3ffbe2c44e0197971b8cd908f5626", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0ZhNCRBK7hj4Ov3rIwAAVu4IAEgRy1cK8EwyLVGwdQ7NZ/yx\nSRRJD7ZIJ3BfiQfGjNQDxoSf6WsFCRB7Za0Oyw/t13/7vrpXU5qYrqoM6P/9RgWX\nYKlCo6DfkEx+/I4AvMGD5rzSF/WLNzvB+zOQsFGi+b50b+z6sQQSmB07za0BwHtv\n+0ny+sBfApVH/eLaM2XpYGHPocqxWROLrJN5mmkQlmyff9/v51+YO3CIwCUujuMd\nd92b2fjhb1dmaz1w5g+xYKrWuTgLQbKsK9/itUD0dxY6TWsWXGhTkAeKs05bcnJj\nLt3TH10oXNVL1DHedKECUTsy9uWOlHE6WzSjoF7KBm86FuQXy53+5r1cPgAUMmk=\n=qtFh\n-----END PGP SIGNATURE-----\n", "payload": "tree 40fae8203b4c7de36272615ee1ed10dbcf9910a3\nparent d783226381ca96f164bef2ca6fda3df62c6a5f7b\nparent bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641125965 +0000\ncommitter GitHub <noreply@github.com> 1641125965 +0000\n\nMerge #11163\n\n11163: internal: start tests for top-level parser entry points r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25dd65dae2f3ffbe2c44e0197971b8cd908f5626", "html_url": "https://github.com/rust-lang/rust/commit/25dd65dae2f3ffbe2c44e0197971b8cd908f5626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25dd65dae2f3ffbe2c44e0197971b8cd908f5626/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d783226381ca96f164bef2ca6fda3df62c6a5f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d783226381ca96f164bef2ca6fda3df62c6a5f7b", "html_url": "https://github.com/rust-lang/rust/commit/d783226381ca96f164bef2ca6fda3df62c6a5f7b"}, {"sha": "bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0", "html_url": "https://github.com/rust-lang/rust/commit/bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0"}], "stats": {"total": 347, "additions": 228, "deletions": 119}, "files": [{"sha": "52388dacc61b68955de2ca24c268b19fd1ed684f", "filename": "crates/parser/src/tests.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/25dd65dae2f3ffbe2c44e0197971b8cd908f5626/crates%2Fparser%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25dd65dae2f3ffbe2c44e0197971b8cd908f5626/crates%2Fparser%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests.rs?ref=25dd65dae2f3ffbe2c44e0197971b8cd908f5626", "patch": "@@ -1,5 +1,6 @@\n mod sourcegen_inline_tests;\n-mod entries;\n+mod prefix_entries;\n+mod top_entries;\n \n use std::{\n     fmt::Write,\n@@ -9,7 +10,7 @@ use std::{\n \n use expect_test::expect_file;\n \n-use crate::LexedStr;\n+use crate::{LexedStr, TopEntryPoint};\n \n #[test]\n fn lex_ok() {\n@@ -45,7 +46,7 @@ fn lex(text: &str) -> String {\n #[test]\n fn parse_ok() {\n     for case in TestCase::list(\"parser/ok\") {\n-        let (actual, errors) = parse(&case.text);\n+        let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n         assert!(!errors, \"errors in an OK file {}:\\n{}\", case.rs.display(), actual);\n         expect_file![case.txt].assert_eq(&actual);\n     }\n@@ -54,7 +55,7 @@ fn parse_ok() {\n #[test]\n fn parse_inline_ok() {\n     for case in TestCase::list(\"parser/inline/ok\") {\n-        let (actual, errors) = parse(&case.text);\n+        let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n         assert!(!errors, \"errors in an OK file {}:\\n{}\", case.rs.display(), actual);\n         expect_file![case.txt].assert_eq(&actual);\n     }\n@@ -63,7 +64,7 @@ fn parse_inline_ok() {\n #[test]\n fn parse_err() {\n     for case in TestCase::list(\"parser/err\") {\n-        let (actual, errors) = parse(&case.text);\n+        let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n         assert!(errors, \"no errors in an ERR file {}:\\n{}\", case.rs.display(), actual);\n         expect_file![case.txt].assert_eq(&actual)\n     }\n@@ -72,36 +73,48 @@ fn parse_err() {\n #[test]\n fn parse_inline_err() {\n     for case in TestCase::list(\"parser/inline/err\") {\n-        let (actual, errors) = parse(&case.text);\n+        let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n         assert!(errors, \"no errors in an ERR file {}:\\n{}\", case.rs.display(), actual);\n         expect_file![case.txt].assert_eq(&actual)\n     }\n }\n \n-fn parse(text: &str) -> (String, bool) {\n+fn parse(entry: TopEntryPoint, text: &str) -> (String, bool) {\n     let lexed = LexedStr::new(text);\n     let input = lexed.to_input();\n-    let output = crate::TopEntryPoint::SourceFile.parse(&input);\n+    let output = entry.parse(&input);\n \n     let mut buf = String::new();\n     let mut errors = Vec::new();\n     let mut indent = String::new();\n+    let mut depth = 0;\n+    let mut len = 0;\n     lexed.intersperse_trivia(&output, &mut |step| match step {\n         crate::StrStep::Token { kind, text } => {\n+            assert!(depth > 0);\n+            len += text.len();\n             write!(buf, \"{}\", indent).unwrap();\n             write!(buf, \"{:?} {:?}\\n\", kind, text).unwrap();\n         }\n         crate::StrStep::Enter { kind } => {\n+            assert!(depth > 0 || len == 0);\n+            depth += 1;\n             write!(buf, \"{}\", indent).unwrap();\n             write!(buf, \"{:?}\\n\", kind).unwrap();\n             indent.push_str(\"  \");\n         }\n         crate::StrStep::Exit => {\n+            assert!(depth > 0);\n+            depth -= 1;\n             indent.pop();\n             indent.pop();\n         }\n-        crate::StrStep::Error { msg, pos } => errors.push(format!(\"error {}: {}\\n\", pos, msg)),\n+        crate::StrStep::Error { msg, pos } => {\n+            assert!(depth > 0);\n+            errors.push(format!(\"error {}: {}\\n\", pos, msg))\n+        }\n     });\n+    assert_eq!(len, text.len());\n \n     for (token, msg) in lexed.errors() {\n         let pos = lexed.text_start(token);"}, {"sha": "d52c6fbb16fd2a181a9037c9aff2d494b9315efe", "filename": "crates/parser/src/tests/entries.rs", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/d783226381ca96f164bef2ca6fda3df62c6a5f7b/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d783226381ca96f164bef2ca6fda3df62c6a5f7b/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs?ref=d783226381ca96f164bef2ca6fda3df62c6a5f7b", "patch": "@@ -1,110 +0,0 @@\n-use crate::{LexedStr, PrefixEntryPoint, Step};\n-\n-#[test]\n-fn vis() {\n-    check_prefix(PrefixEntryPoint::Vis, \"pub(crate) fn foo() {}\", \"pub(crate)\");\n-    check_prefix(PrefixEntryPoint::Vis, \"fn foo() {}\", \"\");\n-    check_prefix(PrefixEntryPoint::Vis, \"pub(fn foo() {}\", \"pub\");\n-    check_prefix(PrefixEntryPoint::Vis, \"pub(crate fn foo() {}\", \"pub(crate\");\n-    check_prefix(PrefixEntryPoint::Vis, \"crate fn foo() {}\", \"crate\");\n-}\n-\n-#[test]\n-fn block() {\n-    check_prefix(PrefixEntryPoint::Block, \"{}, 92\", \"{}\");\n-    check_prefix(PrefixEntryPoint::Block, \"{, 92)\", \"{, 92)\");\n-    check_prefix(PrefixEntryPoint::Block, \"()\", \"\");\n-}\n-\n-#[test]\n-fn stmt() {\n-    check_prefix(PrefixEntryPoint::Stmt, \"92; fn\", \"92\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"let _ = 92; 1\", \"let _ = 92\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"pub fn f() {} = 92\", \"pub fn f() {}\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"struct S;;\", \"struct S;\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"fn f() {};\", \"fn f() {}\");\n-    check_prefix(PrefixEntryPoint::Stmt, \";;;\", \";\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"+\", \"+\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"@\", \"@\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"loop {} - 1\", \"loop {}\");\n-}\n-\n-#[test]\n-fn pat() {\n-    check_prefix(PrefixEntryPoint::Pat, \"x y\", \"x\");\n-    check_prefix(PrefixEntryPoint::Pat, \"fn f() {}\", \"fn\");\n-    // FIXME: This one is wrong, we should consume only one pattern.\n-    check_prefix(PrefixEntryPoint::Pat, \".. ..\", \".. ..\");\n-}\n-\n-#[test]\n-fn ty() {\n-    check_prefix(PrefixEntryPoint::Ty, \"fn() foo\", \"fn()\");\n-    check_prefix(PrefixEntryPoint::Ty, \"Clone + Copy + fn\", \"Clone + Copy +\");\n-    check_prefix(PrefixEntryPoint::Ty, \"struct f\", \"struct\");\n-}\n-\n-#[test]\n-fn expr() {\n-    check_prefix(PrefixEntryPoint::Expr, \"92 92\", \"92\");\n-    check_prefix(PrefixEntryPoint::Expr, \"+1\", \"+\");\n-    check_prefix(PrefixEntryPoint::Expr, \"-1\", \"-1\");\n-    check_prefix(PrefixEntryPoint::Expr, \"fn foo() {}\", \"fn\");\n-    check_prefix(PrefixEntryPoint::Expr, \"#[attr] ()\", \"#[attr] ()\");\n-}\n-\n-#[test]\n-fn path() {\n-    check_prefix(PrefixEntryPoint::Path, \"foo::bar baz\", \"foo::bar\");\n-    check_prefix(PrefixEntryPoint::Path, \"foo::<> baz\", \"foo::<>\");\n-    check_prefix(PrefixEntryPoint::Path, \"foo<> baz\", \"foo<>\");\n-    check_prefix(PrefixEntryPoint::Path, \"Fn() -> i32?\", \"Fn() -> i32\");\n-    // FIXME: This shouldn't be accepted as path actually.\n-    check_prefix(PrefixEntryPoint::Path, \"<_>::foo\", \"<_>::foo\");\n-}\n-\n-#[test]\n-fn item() {\n-    // FIXME: This shouldn't consume the semicolon.\n-    check_prefix(PrefixEntryPoint::Item, \"fn foo() {};\", \"fn foo() {};\");\n-    check_prefix(PrefixEntryPoint::Item, \"#[attr] pub struct S {} 92\", \"#[attr] pub struct S {}\");\n-    check_prefix(PrefixEntryPoint::Item, \"item!{}?\", \"item!{}\");\n-    check_prefix(PrefixEntryPoint::Item, \"????\", \"?\");\n-}\n-\n-#[test]\n-fn meta_item() {\n-    check_prefix(PrefixEntryPoint::MetaItem, \"attr, \", \"attr\");\n-    check_prefix(\n-        PrefixEntryPoint::MetaItem,\n-        \"attr(some token {stream});\",\n-        \"attr(some token {stream})\",\n-    );\n-    check_prefix(PrefixEntryPoint::MetaItem, \"path::attr = 2 * 2!\", \"path::attr = 2 * 2\");\n-}\n-\n-fn check_prefix(entry: PrefixEntryPoint, input: &str, prefix: &str) {\n-    let lexed = LexedStr::new(input);\n-    let input = lexed.to_input();\n-\n-    let mut n_tokens = 0;\n-    for step in entry.parse(&input).iter() {\n-        match step {\n-            Step::Token { n_input_tokens, .. } => n_tokens += n_input_tokens as usize,\n-            Step::Enter { .. } | Step::Exit | Step::Error { .. } => (),\n-        }\n-    }\n-\n-    let mut i = 0;\n-    loop {\n-        if n_tokens == 0 {\n-            break;\n-        }\n-        if !lexed.kind(i).is_trivia() {\n-            n_tokens -= 1;\n-        }\n-        i += 1;\n-    }\n-    let buf = &lexed.as_str()[..lexed.text_start(i)];\n-    assert_eq!(buf, prefix);\n-}"}, {"sha": "e626b4f27e0c3a69049e4a86475a9134df9b2818", "filename": "crates/parser/src/tests/prefix_entries.rs", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/25dd65dae2f3ffbe2c44e0197971b8cd908f5626/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25dd65dae2f3ffbe2c44e0197971b8cd908f5626/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs?ref=25dd65dae2f3ffbe2c44e0197971b8cd908f5626", "patch": "@@ -0,0 +1,107 @@\n+use crate::{LexedStr, PrefixEntryPoint, Step};\n+\n+#[test]\n+fn vis() {\n+    check(PrefixEntryPoint::Vis, \"pub(crate) fn foo() {}\", \"pub(crate)\");\n+    check(PrefixEntryPoint::Vis, \"fn foo() {}\", \"\");\n+    check(PrefixEntryPoint::Vis, \"pub(fn foo() {}\", \"pub\");\n+    check(PrefixEntryPoint::Vis, \"pub(crate fn foo() {}\", \"pub(crate\");\n+    check(PrefixEntryPoint::Vis, \"crate fn foo() {}\", \"crate\");\n+}\n+\n+#[test]\n+fn block() {\n+    check(PrefixEntryPoint::Block, \"{}, 92\", \"{}\");\n+    check(PrefixEntryPoint::Block, \"{, 92)\", \"{, 92)\");\n+    check(PrefixEntryPoint::Block, \"()\", \"\");\n+}\n+\n+#[test]\n+fn stmt() {\n+    check(PrefixEntryPoint::Stmt, \"92; fn\", \"92\");\n+    check(PrefixEntryPoint::Stmt, \"let _ = 92; 1\", \"let _ = 92\");\n+    check(PrefixEntryPoint::Stmt, \"pub fn f() {} = 92\", \"pub fn f() {}\");\n+    check(PrefixEntryPoint::Stmt, \"struct S;;\", \"struct S;\");\n+    check(PrefixEntryPoint::Stmt, \"fn f() {};\", \"fn f() {}\");\n+    check(PrefixEntryPoint::Stmt, \";;;\", \";\");\n+    check(PrefixEntryPoint::Stmt, \"+\", \"+\");\n+    check(PrefixEntryPoint::Stmt, \"@\", \"@\");\n+    check(PrefixEntryPoint::Stmt, \"loop {} - 1\", \"loop {}\");\n+}\n+\n+#[test]\n+fn pat() {\n+    check(PrefixEntryPoint::Pat, \"x y\", \"x\");\n+    check(PrefixEntryPoint::Pat, \"fn f() {}\", \"fn\");\n+    // FIXME: This one is wrong, we should consume only one pattern.\n+    check(PrefixEntryPoint::Pat, \".. ..\", \".. ..\");\n+}\n+\n+#[test]\n+fn ty() {\n+    check(PrefixEntryPoint::Ty, \"fn() foo\", \"fn()\");\n+    check(PrefixEntryPoint::Ty, \"Clone + Copy + fn\", \"Clone + Copy +\");\n+    check(PrefixEntryPoint::Ty, \"struct f\", \"struct\");\n+}\n+\n+#[test]\n+fn expr() {\n+    check(PrefixEntryPoint::Expr, \"92 92\", \"92\");\n+    check(PrefixEntryPoint::Expr, \"+1\", \"+\");\n+    check(PrefixEntryPoint::Expr, \"-1\", \"-1\");\n+    check(PrefixEntryPoint::Expr, \"fn foo() {}\", \"fn\");\n+    check(PrefixEntryPoint::Expr, \"#[attr] ()\", \"#[attr] ()\");\n+}\n+\n+#[test]\n+fn path() {\n+    check(PrefixEntryPoint::Path, \"foo::bar baz\", \"foo::bar\");\n+    check(PrefixEntryPoint::Path, \"foo::<> baz\", \"foo::<>\");\n+    check(PrefixEntryPoint::Path, \"foo<> baz\", \"foo<>\");\n+    check(PrefixEntryPoint::Path, \"Fn() -> i32?\", \"Fn() -> i32\");\n+    // FIXME: This shouldn't be accepted as path actually.\n+    check(PrefixEntryPoint::Path, \"<_>::foo\", \"<_>::foo\");\n+}\n+\n+#[test]\n+fn item() {\n+    // FIXME: This shouldn't consume the semicolon.\n+    check(PrefixEntryPoint::Item, \"fn foo() {};\", \"fn foo() {};\");\n+    check(PrefixEntryPoint::Item, \"#[attr] pub struct S {} 92\", \"#[attr] pub struct S {}\");\n+    check(PrefixEntryPoint::Item, \"item!{}?\", \"item!{}\");\n+    check(PrefixEntryPoint::Item, \"????\", \"?\");\n+}\n+\n+#[test]\n+fn meta_item() {\n+    check(PrefixEntryPoint::MetaItem, \"attr, \", \"attr\");\n+    check(PrefixEntryPoint::MetaItem, \"attr(some token {stream});\", \"attr(some token {stream})\");\n+    check(PrefixEntryPoint::MetaItem, \"path::attr = 2 * 2!\", \"path::attr = 2 * 2\");\n+}\n+\n+#[track_caller]\n+fn check(entry: PrefixEntryPoint, input: &str, prefix: &str) {\n+    let lexed = LexedStr::new(input);\n+    let input = lexed.to_input();\n+\n+    let mut n_tokens = 0;\n+    for step in entry.parse(&input).iter() {\n+        match step {\n+            Step::Token { n_input_tokens, .. } => n_tokens += n_input_tokens as usize,\n+            Step::Enter { .. } | Step::Exit | Step::Error { .. } => (),\n+        }\n+    }\n+\n+    let mut i = 0;\n+    loop {\n+        if n_tokens == 0 {\n+            break;\n+        }\n+        if !lexed.kind(i).is_trivia() {\n+            n_tokens -= 1;\n+        }\n+        i += 1;\n+    }\n+    let buf = &lexed.as_str()[..lexed.text_start(i)];\n+    assert_eq!(buf, prefix);\n+}"}, {"sha": "0b77c0a5b96a70d24218b900f2c6c38cc47b8acf", "filename": "crates/parser/src/tests/top_entries.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/25dd65dae2f3ffbe2c44e0197971b8cd908f5626/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25dd65dae2f3ffbe2c44e0197971b8cd908f5626/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs?ref=25dd65dae2f3ffbe2c44e0197971b8cd908f5626", "patch": "@@ -0,0 +1,99 @@\n+use expect_test::expect;\n+\n+use crate::TopEntryPoint;\n+\n+#[test]\n+fn source_file() {\n+    check(\n+        TopEntryPoint::SourceFile,\n+        \"\",\n+        expect![[r#\"\n+        SOURCE_FILE\n+    \"#]],\n+    );\n+\n+    check(\n+        TopEntryPoint::SourceFile,\n+        \"struct S;\",\n+        expect![[r#\"\n+        SOURCE_FILE\n+          STRUCT\n+            STRUCT_KW \"struct\"\n+            WHITESPACE \" \"\n+            NAME\n+              IDENT \"S\"\n+            SEMICOLON \";\"\n+    \"#]],\n+    );\n+\n+    check(\n+        TopEntryPoint::SourceFile,\n+        \"@error@\",\n+        expect![[r#\"\n+        SOURCE_FILE\n+          ERROR\n+            AT \"@\"\n+          MACRO_CALL\n+            PATH\n+              PATH_SEGMENT\n+                NAME_REF\n+                  IDENT \"error\"\n+          ERROR\n+            AT \"@\"\n+        error 0: expected an item\n+        error 6: expected BANG\n+        error 6: expected `{`, `[`, `(`\n+        error 6: expected SEMICOLON\n+        error 6: expected an item\n+    \"#]],\n+    );\n+}\n+\n+#[test]\n+fn macro_stmt() {\n+    check(\n+        TopEntryPoint::MacroStmts,\n+        \"#!/usr/bin/rust\",\n+        expect![[r##\"\n+            MACRO_STMTS\n+              ERROR\n+                SHEBANG \"#!/usr/bin/rust\"\n+            error 0: expected expression\n+        \"##]],\n+    );\n+    check(\n+        TopEntryPoint::MacroStmts,\n+        \"let x = 1 2 struct S;\",\n+        expect![[r#\"\n+            MACRO_STMTS\n+              LET_STMT\n+                LET_KW \"let\"\n+                WHITESPACE \" \"\n+                IDENT_PAT\n+                  NAME\n+                    IDENT \"x\"\n+                WHITESPACE \" \"\n+                EQ \"=\"\n+                WHITESPACE \" \"\n+                LITERAL\n+                  INT_NUMBER \"1\"\n+              WHITESPACE \" \"\n+              EXPR_STMT\n+                LITERAL\n+                  INT_NUMBER \"2\"\n+              WHITESPACE \" \"\n+              STRUCT\n+                STRUCT_KW \"struct\"\n+                WHITESPACE \" \"\n+                NAME\n+                  IDENT \"S\"\n+                SEMICOLON \";\"\n+        \"#]],\n+    );\n+}\n+\n+#[track_caller]\n+fn check(entry: TopEntryPoint, input: &str, expect: expect_test::Expect) {\n+    let (parsed, _errors) = super::parse(entry, input);\n+    expect.assert_eq(&parsed)\n+}"}]}