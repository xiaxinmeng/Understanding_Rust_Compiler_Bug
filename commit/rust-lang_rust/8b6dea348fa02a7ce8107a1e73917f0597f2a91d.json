{"sha": "8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNmRlYTM0OGZhMDJhN2NlODEwN2ExZTczOTE3ZjA1OTdmMmE5MWQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-26T08:55:38Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-26T08:55:38Z"}, "message": "Merge #666\n\n666: rename source_file -> parse r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "36b2bc1e21eccda2c624e3dd70ddd7052b9f9907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36b2bc1e21eccda2c624e3dd70ddd7052b9f9907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "html_url": "https://github.com/rust-lang/rust/commit/8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "c869ee219a80af1993496e00490dc107202ff55c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c869ee219a80af1993496e00490dc107202ff55c", "html_url": "https://github.com/rust-lang/rust/commit/c869ee219a80af1993496e00490dc107202ff55c"}, {"sha": "9457b1f0e64d38e7dc24d8c66a52ffef759d4dbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9457b1f0e64d38e7dc24d8c66a52ffef759d4dbf", "html_url": "https://github.com/rust-lang/rust/commit/9457b1f0e64d38e7dc24d8c66a52ffef759d4dbf"}], "stats": {"total": 88, "additions": 41, "deletions": 47}, "files": [{"sha": "6e17f33f078e475f35ac7f22c882c97444ca4255", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -71,7 +71,7 @@ pub trait SourceDatabase: salsa::Database + CheckCanceled {\n     #[salsa::input]\n     fn file_text(&self, file_id: FileId) -> Arc<String>;\n     // Parses the file into the syntax tree.\n-    fn source_file(&self, file_id: FileId) -> TreeArc<SourceFile>;\n+    fn parse(&self, file_id: FileId) -> TreeArc<SourceFile>;\n     /// Path to a file, relative to the root of its source root.\n     #[salsa::input]\n     fn file_relative_path(&self, file_id: FileId) -> RelativePathBuf;\n@@ -98,7 +98,7 @@ fn source_root_crates(db: &impl SourceDatabase, id: SourceRootId) -> Arc<Vec<Cra\n     Arc::new(res)\n }\n \n-fn source_file(db: &impl SourceDatabase, file_id: FileId) -> TreeArc<SourceFile> {\n+fn parse(db: &impl SourceDatabase, file_id: FileId) -> TreeArc<SourceFile> {\n     let text = db.file_text(file_id);\n     SourceFile::parse(&*text)\n }"}, {"sha": "5df4bd4a152726ca01f70d4fca8565f23e9a9bf3", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -20,8 +20,8 @@ use crate::{\n \n #[salsa::query_group(HirDatabaseStorage)]\n pub trait HirDatabase: SourceDatabase + AsRef<HirInterner> {\n-    #[salsa::invoke(HirFileId::hir_source_file)]\n-    fn hir_source_file(&self, file_id: HirFileId) -> TreeArc<SourceFile>;\n+    #[salsa::invoke(HirFileId::hir_parse)]\n+    fn hir_parse(&self, file_id: HirFileId) -> TreeArc<SourceFile>;\n \n     #[salsa::invoke(crate::macros::expand_macro_invocation)]\n     fn expand_macro_invocation(&self, invoc: MacroCallId) -> Option<Arc<MacroExpansion>>;"}, {"sha": "7dd4b540e7a1d0db830153deb7f506302e85e128", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -86,12 +86,9 @@ impl HirFileId {\n         }\n     }\n \n-    pub(crate) fn hir_source_file(\n-        db: &impl HirDatabase,\n-        file_id: HirFileId,\n-    ) -> TreeArc<SourceFile> {\n+    pub(crate) fn hir_parse(db: &impl HirDatabase, file_id: HirFileId) -> TreeArc<SourceFile> {\n         match file_id.0 {\n-            HirFileIdRepr::File(file_id) => db.source_file(file_id),\n+            HirFileIdRepr::File(file_id) => db.parse(file_id),\n             HirFileIdRepr::Macro(m) => {\n                 if let Some(exp) = db.expand_macro_invocation(m) {\n                     return exp.file();\n@@ -370,7 +367,7 @@ impl SourceFileItems {\n             self.arena.iter().map(|(_id, i)| i).collect::<Vec<_>>(),\n         );\n     }\n-    pub fn id_of_source_file(&self) -> SourceFileItemId {\n+    pub fn id_of_parse(&self) -> SourceFileItemId {\n         let (id, _syntax) = self.arena.iter().next().unwrap();\n         id\n     }"}, {"sha": "1d77548f385a15928ad9a012fc345ef32ca6d19a", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -129,7 +129,7 @@ impl LoweredModule {\n                     let id = loc.id(db);\n                     let file_id = HirFileId::from(id);\n                     //FIXME: expand recursively\n-                    for item in db.hir_source_file(file_id).items() {\n+                    for item in db.hir_parse(file_id).items() {\n                         self.add_def_id(source_map, db, module, file_id, item);\n                     }\n                 }"}, {"sha": "61c93a96489763577d017269fb73eede89afc2f2", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -23,7 +23,7 @@ pub(super) fn fn_scopes(db: &impl HirDatabase, func: Function) -> Arc<FnScopes>\n }\n \n pub(super) fn file_items(db: &impl HirDatabase, file_id: HirFileId) -> Arc<SourceFileItems> {\n-    let source_file = db.hir_source_file(file_id);\n+    let source_file = db.hir_parse(file_id);\n     let res = SourceFileItems::new(file_id, &source_file);\n     Arc::new(res)\n }\n@@ -34,10 +34,7 @@ pub(super) fn file_item(\n ) -> TreeArc<SyntaxNode> {\n     match source_item_id.item_id {\n         Some(id) => db.file_items(source_item_id.file_id)[id].to_owned(),\n-        None => db\n-            .hir_source_file(source_item_id.file_id)\n-            .syntax()\n-            .to_owned(),\n+        None => db.hir_parse(source_item_id.file_id).syntax().to_owned(),\n     }\n }\n "}, {"sha": "c0b3f1cd481490899481411d115e4776bd274de0", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -43,7 +43,7 @@ pub fn module_from_declaration(\n \n /// Locates the module by position in the source code.\n pub fn module_from_position(db: &impl HirDatabase, position: FilePosition) -> Option<Module> {\n-    let file = db.source_file(position.file_id);\n+    let file = db.parse(position.file_id);\n     match find_node_at_offset::<ast::Module>(file.syntax(), position.offset) {\n         Some(m) if !m.has_semi() => module_from_inline(db, position.file_id.into(), m),\n         _ => module_from_file_id(db, position.file_id.into()),\n@@ -95,7 +95,7 @@ fn module_from_source(db: &impl HirDatabase, source: SourceItemId) -> Option<Mod\n }\n \n pub fn function_from_position(db: &impl HirDatabase, position: FilePosition) -> Option<Function> {\n-    let file = db.source_file(position.file_id);\n+    let file = db.parse(position.file_id);\n     let fn_def = find_node_at_offset::<ast::FnDef>(file.syntax(), position.offset)?;\n     function_from_source(db, position.file_id, fn_def)\n }"}, {"sha": "e0b0689f8fcb4ed9e0a77a43c4c2b632510eba52", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -547,7 +547,7 @@ fn quux() {\n \n fn infer(content: &str) -> String {\n     let (db, _, file_id) = MockDatabase::with_single_file(content);\n-    let source_file = db.source_file(file_id);\n+    let source_file = db.parse(file_id);\n     let mut acc = String::new();\n     for fn_def in source_file\n         .syntax()"}, {"sha": "3267fff961787b3d63785a06a6985885b231bc7f", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -10,7 +10,7 @@ use crate::{FilePosition, CallInfo, db::RootDatabase};\n \n /// Computes parameter information for the given call expression.\n pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo> {\n-    let file = db.source_file(position.file_id);\n+    let file = db.parse(position.file_id);\n     let syntax = file.syntax();\n \n     // Find the calling expression and it's NameRef\n@@ -22,7 +22,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let symbol = file_symbols\n         .into_iter()\n         .find(|it| it.ptr.kind() == FN_DEF)?;\n-    let fn_file = db.source_file(symbol.file_id);\n+    let fn_file = db.parse(symbol.file_id);\n     let fn_def = symbol.ptr.to_node(&fn_file);\n     let fn_def = ast::FnDef::cast(fn_def).unwrap();\n     let mut call_info = CallInfo::new(fn_def)?;"}, {"sha": "b1867de4270284f48d88ac004173c716ea4871fb", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -45,7 +45,7 @@ pub use crate::completion::completion_item::{CompletionItem, CompletionItemKind,\n /// identifier prefix/fuzzy match should be done higher in the stack, together\n /// with ordering of completions (currently this is done by the client).\n pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Option<Completions> {\n-    let original_file = db.source_file(position.file_id);\n+    let original_file = db.parse(position.file_id);\n     let ctx = CompletionContext::new(db, &original_file, position)?;\n \n     let mut acc = Completions::default();"}, {"sha": "cd2ebe471b78b685859021d6dd2297e7fa06c1d9", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -10,7 +10,7 @@ use crate::{\n };\n \n pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {\n-    let source_file = db.source_file(frange.file_id);\n+    let source_file = db.parse(frange.file_id);\n     if let Some(range) = extend_selection_in_macro(db, &source_file, frange) {\n         return range;\n     }"}, {"sha": "2a20c20ee9e1ef476e3a518db42dce3ba9a1b5de", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -11,7 +11,7 @@ pub(crate) fn goto_definition(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let file = db.source_file(position.file_id);\n+    let file = db.parse(position.file_id);\n     let syntax = file.syntax();\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n         let navs = reference_definition(db, position.file_id, name_ref).to_vec();"}, {"sha": "ff9ae2d9c871ef9b6ac16201c2a987b87f12365b", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n use crate::{db::RootDatabase, RangeInfo, FilePosition, FileRange, NavigationTarget};\n \n pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<String>> {\n-    let file = db.source_file(position.file_id);\n+    let file = db.parse(position.file_id);\n     let mut res = Vec::new();\n \n     let mut range = None;\n@@ -53,7 +53,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n }\n \n pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n-    let file = db.source_file(frange.file_id);\n+    let file = db.parse(frange.file_id);\n     let syntax = file.syntax();\n     let leaf_node = find_covering_node(syntax, frange.range);\n     // if we picked identifier, expand to pattern/expression\n@@ -88,7 +88,7 @@ fn doc_text_for(db: &RootDatabase, nav: NavigationTarget) -> Option<String> {\n \n impl NavigationTarget {\n     fn node(&self, db: &RootDatabase) -> Option<TreeArc<SyntaxNode>> {\n-        let source_file = db.source_file(self.file_id());\n+        let source_file = db.parse(self.file_id());\n         let source_file = source_file.syntax();\n         let node = source_file\n             .descendants()"}, {"sha": "399433a01b8786ca566b716307ac8c893f9b8d05", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -76,9 +76,9 @@ impl db::RootDatabase {\n     /// syntax trees. However, if we actually do that, everything is recomputed\n     /// for some reason. Needs investigation.\n     pub(crate) fn collect_garbage(&mut self) {\n-        self.query(ra_db::SourceFileQuery)\n+        self.query(ra_db::ParseQuery)\n             .sweep(SweepStrategy::default().discard_values());\n-        self.query(hir::db::HirSourceFileQuery)\n+        self.query(hir::db::HirParseQuery)\n             .sweep(SweepStrategy::default().discard_values());\n         self.query(hir::db::FileItemsQuery)\n             .sweep(SweepStrategy::default().discard_values());\n@@ -102,7 +102,7 @@ impl db::RootDatabase {\n     }\n \n     pub(crate) fn find_all_refs(&self, position: FilePosition) -> Vec<(FileId, TextRange)> {\n-        let file = self.source_file(position.file_id);\n+        let file = self.parse(position.file_id);\n         // Find the binding associated with the offset\n         let (binding, descr) = match find_binding(self, &file, position) {\n             None => return Vec::new(),\n@@ -150,7 +150,7 @@ impl db::RootDatabase {\n     }\n \n     pub(crate) fn diagnostics(&self, file_id: FileId) -> Vec<Diagnostic> {\n-        let syntax = self.source_file(file_id);\n+        let syntax = self.parse(file_id);\n \n         let mut res = ra_ide_api_light::diagnostics(&syntax)\n             .into_iter()\n@@ -214,7 +214,7 @@ impl db::RootDatabase {\n     }\n \n     pub(crate) fn assists(&self, frange: FileRange) -> Vec<SourceChange> {\n-        let file = self.source_file(frange.file_id);\n+        let file = self.parse(frange.file_id);\n         assists::assists(&file, frange.range)\n             .into_iter()\n             .map(|local_edit| SourceChange::from_local_edit(frange.file_id, local_edit))"}, {"sha": "43c8bea71049a99b6bc87b3c341c915f8d39c84d", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -313,7 +313,7 @@ impl Analysis {\n \n     /// Gets the syntax tree of the file.\n     pub fn parse(&self, file_id: FileId) -> TreeArc<SourceFile> {\n-        self.db.source_file(file_id).clone()\n+        self.db.parse(file_id).clone()\n     }\n \n     /// Gets the file's `LineIndex`: data structure to convert between absolute\n@@ -330,21 +330,21 @@ impl Analysis {\n     /// Returns position of the mathcing brace (all types of braces are\n     /// supported).\n     pub fn matching_brace(&self, position: FilePosition) -> Option<TextUnit> {\n-        let file = self.db.source_file(position.file_id);\n+        let file = self.db.parse(position.file_id);\n         ra_ide_api_light::matching_brace(&file, position.offset)\n     }\n \n     /// Returns a syntax tree represented as `String`, for debug purposes.\n     // FIXME: use a better name here.\n     pub fn syntax_tree(&self, file_id: FileId) -> String {\n-        let file = self.db.source_file(file_id);\n+        let file = self.db.parse(file_id);\n         ra_ide_api_light::syntax_tree(&file)\n     }\n \n     /// Returns an edit to remove all newlines in the range, cleaning up minor\n     /// stuff like trailing commas.\n     pub fn join_lines(&self, frange: FileRange) -> SourceChange {\n-        let file = self.db.source_file(frange.file_id);\n+        let file = self.db.parse(frange.file_id);\n         SourceChange::from_local_edit(\n             frange.file_id,\n             ra_ide_api_light::join_lines(&file, frange.range),\n@@ -354,7 +354,7 @@ impl Analysis {\n     /// Returns an edit which should be applied when opening a new line, fixing\n     /// up minor stuff like continuing the comment.\n     pub fn on_enter(&self, position: FilePosition) -> Option<SourceChange> {\n-        let file = self.db.source_file(position.file_id);\n+        let file = self.db.parse(position.file_id);\n         let edit = ra_ide_api_light::on_enter(&file, position.offset)?;\n         Some(SourceChange::from_local_edit(position.file_id, edit))\n     }\n@@ -363,28 +363,28 @@ impl Analysis {\n     /// this works when adding `let =`.\n     // FIXME: use a snippet completion instead of this hack here.\n     pub fn on_eq_typed(&self, position: FilePosition) -> Option<SourceChange> {\n-        let file = self.db.source_file(position.file_id);\n+        let file = self.db.parse(position.file_id);\n         let edit = ra_ide_api_light::on_eq_typed(&file, position.offset)?;\n         Some(SourceChange::from_local_edit(position.file_id, edit))\n     }\n \n     /// Returns an edit which should be applied when a dot ('.') is typed on a blank line, indenting the line appropriately.\n     pub fn on_dot_typed(&self, position: FilePosition) -> Option<SourceChange> {\n-        let file = self.db.source_file(position.file_id);\n+        let file = self.db.parse(position.file_id);\n         let edit = ra_ide_api_light::on_dot_typed(&file, position.offset)?;\n         Some(SourceChange::from_local_edit(position.file_id, edit))\n     }\n \n     /// Returns a tree representation of symbols in the file. Useful to draw a\n     /// file outline.\n     pub fn file_structure(&self, file_id: FileId) -> Vec<StructureNode> {\n-        let file = self.db.source_file(file_id);\n+        let file = self.db.parse(file_id);\n         ra_ide_api_light::file_structure(&file)\n     }\n \n     /// Returns the set of folding ranges.\n     pub fn folding_ranges(&self, file_id: FileId) -> Vec<Fold> {\n-        let file = self.db.source_file(file_id);\n+        let file = self.db.parse(file_id);\n         ra_ide_api_light::folding_ranges(&file)\n     }\n "}, {"sha": "db5ccf96945bde7e835ffbb0bfd161bfd5102763", "filename": "crates/ra_ide_api/src/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frename.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -25,7 +25,7 @@ pub(crate) fn rename(\n     position: FilePosition,\n     new_name: &str,\n ) -> Option<SourceChange> {\n-    let source_file = db.source_file(position.file_id);\n+    let source_file = db.parse(position.file_id);\n     let syntax = source_file.syntax();\n \n     if let Some((ast_name, ast_module)) = find_name_and_module_at_offset(syntax, position) {"}, {"sha": "dc8c40ea6484de9a296f79a2f6e483f988580b83", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -22,7 +22,7 @@ pub enum RunnableKind {\n }\n \n pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n-    let source_file = db.source_file(file_id);\n+    let source_file = db.parse(file_id);\n     source_file\n         .syntax()\n         .descendants()"}, {"sha": "e11eed223c10321570acfdf7a56b6d2fc852c9e3", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -6,7 +6,7 @@ use std::{\n \n use ra_syntax::{AstNode, TreeArc, SourceFile};\n use ra_db::{\n-    SourceFileQuery, FileTextQuery, SourceRootId,\n+    ParseQuery, FileTextQuery, SourceRootId,\n     salsa::{Database, debug::{DebugQueryTable, TableEntry}},\n };\n \n@@ -17,7 +17,7 @@ use crate::{\n \n pub(crate) fn status(db: &RootDatabase) -> String {\n     let files_stats = db.query(FileTextQuery).entries::<FilesStats>();\n-    let syntax_tree_stats = db.query(SourceFileQuery).entries::<SyntaxTreeStats>();\n+    let syntax_tree_stats = db.query(ParseQuery).entries::<SyntaxTreeStats>();\n     let symbols_stats = db\n         .query(LibrarySymbolsQuery)\n         .entries::<LibrarySymbolsStats>();"}, {"sha": "72c93f5304bcfe80312155f7e0c420799cc6bccd", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -61,7 +61,7 @@ pub(crate) trait SymbolsDatabase: hir::db::HirDatabase {\n \n fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex> {\n     db.check_canceled();\n-    let source_file = db.source_file(file_id);\n+    let source_file = db.parse(file_id);\n     let mut symbols = source_file\n         .syntax()\n         .descendants()"}, {"sha": "26bde495b3fcb9c707beabd4475df594f293cda3", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6dea348fa02a7ce8107a1e73917f0597f2a91d/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=8b6dea348fa02a7ce8107a1e73917f0597f2a91d", "patch": "@@ -7,7 +7,7 @@ use crate::{\n };\n \n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n-    let source_file = db.source_file(file_id);\n+    let source_file = db.parse(file_id);\n     let mut res = ra_ide_api_light::highlight(source_file.syntax());\n     for macro_call in source_file\n         .syntax()"}]}