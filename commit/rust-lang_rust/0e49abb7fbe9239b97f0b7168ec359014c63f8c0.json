{"sha": "0e49abb7fbe9239b97f0b7168ec359014c63f8c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNDlhYmI3ZmJlOTIzOWI5N2YwYjcxNjhlYzM1OTAxNGM2M2Y4YzA=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-12T07:24:46Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-04-09T11:45:04Z"}, "message": "Refactor CallInfo function signatures to new FunctionSignature type\n\nThis is used by CallInfo to create a pretty printed function signature that can\nbe used with completions and other places as well.", "tree": {"sha": "b76168a2cf9f09336e446dcc584879a918681055", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b76168a2cf9f09336e446dcc584879a918681055"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e49abb7fbe9239b97f0b7168ec359014c63f8c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e49abb7fbe9239b97f0b7168ec359014c63f8c0", "html_url": "https://github.com/rust-lang/rust/commit/0e49abb7fbe9239b97f0b7168ec359014c63f8c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f700179fc7ed16d2848a6dbc7cf23da3b8df6c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f700179fc7ed16d2848a6dbc7cf23da3b8df6c7", "html_url": "https://github.com/rust-lang/rust/commit/5f700179fc7ed16d2848a6dbc7cf23da3b8df6c7"}], "stats": {"total": 279, "additions": 210, "deletions": 69}, "files": [{"sha": "e3a755b468bd574e50f812e321aee16ef75f465c", "filename": "crates/ra_hir/src/docs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdocs.rs?ref=0e49abb7fbe9239b97f0b7168ec359014c63f8c0", "patch": "@@ -22,6 +22,12 @@ impl Into<String> for Documentation {\n     }\n }\n \n+impl<'a> Into<String> for &'a Documentation {\n+    fn into(self) -> String {\n+        self.contents().into()\n+    }\n+}\n+\n pub trait Docs {\n     fn docs(&self, db: &impl HirDatabase) -> Option<Documentation>;\n }"}, {"sha": "a65119315175c1e4ec30b57875c6e663120a1240", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 52, "deletions": 33, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=0e49abb7fbe9239b97f0b7168ec359014c63f8c0", "patch": "@@ -30,7 +30,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let mut call_info = CallInfo::new(db, function, fn_def)?;\n \n     // If we have a calling expression let's find which argument we are on\n-    let num_params = call_info.parameters.len();\n+    let num_params = call_info.parameters().len();\n     let has_self = fn_def.param_list().and_then(|l| l.self_param()).is_some();\n \n     if num_params == 1 {\n@@ -108,27 +108,26 @@ impl<'a> FnCallNode<'a> {\n \n impl CallInfo {\n     fn new(db: &RootDatabase, function: hir::Function, node: &ast::FnDef) -> Option<Self> {\n-        let label = crate::completion::function_label(node)?;\n+        let sig = crate::completion::function_signature(node)?;\n         let doc = function.docs(db);\n+        let sig = sig.with_doc_opt(doc);\n \n-        Some(CallInfo { parameters: param_list(node), label, doc, active_parameter: None })\n+        Some(CallInfo { signature: sig, active_parameter: None })\n     }\n-}\n \n-fn param_list(node: &ast::FnDef) -> Vec<String> {\n-    let mut res = vec![];\n-    if let Some(param_list) = node.param_list() {\n-        if let Some(self_param) = param_list.self_param() {\n-            res.push(self_param.syntax().text().to_string())\n-        }\n+    fn parameters(&self) -> &[String] {\n+        &self.signature.parameters\n+    }\n \n-        // Maybe use param.pat here? See if we can just extract the name?\n-        //res.extend(param_list.params().map(|p| p.syntax().text().to_string()));\n-        res.extend(\n-            param_list.params().filter_map(|p| p.pat()).map(|pat| pat.syntax().text().to_string()),\n-        );\n+    #[cfg(test)]\n+    fn doc(&self) -> Option<&hir::Documentation> {\n+        self.signature.doc.as_ref()\n+    }\n+\n+    #[cfg(test)]\n+    fn label(&self) -> String {\n+        self.signature.to_string()\n     }\n-    res\n }\n \n #[cfg(test)]\n@@ -151,7 +150,7 @@ mod tests {\n fn bar() { foo(<|>3, ); }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec!(\"x\".to_string(), \"y\".to_string()));\n+        assert_eq!(info.parameters(), [\"x: u32\", \"y: u32\"]);\n         assert_eq!(info.active_parameter, Some(0));\n     }\n \n@@ -162,7 +161,7 @@ fn bar() { foo(<|>3, ); }\"#,\n fn bar() { foo(3, <|>); }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec!(\"x\".to_string(), \"y\".to_string()));\n+        assert_eq!(info.parameters(), [\"x: u32\", \"y: u32\"]);\n         assert_eq!(info.active_parameter, Some(1));\n     }\n \n@@ -173,7 +172,27 @@ fn bar() { foo(3, <|>); }\"#,\n fn bar() { foo(<|>); }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec!(\"x\".to_string(), \"y\".to_string()));\n+        assert_eq!(info.parameters(), [\"x: u32\", \"y: u32\"]);\n+        assert_eq!(info.active_parameter, Some(0));\n+    }\n+\n+    #[test]\n+    fn test_fn_signature_two_args_first_generics() {\n+        let info = call_info(\n+            r#\"fn foo<T, U: Copy + Display>(x: T, y: U) -> u32 where T: Copy + Display, U: Debug {x + y}\n+fn bar() { foo(<|>3, ); }\"#,\n+        );\n+\n+        assert_eq!(info.parameters(), [\"x: T\", \"y: U\"]);\n+        assert_eq!(\n+            info.label(),\n+            r#\"\n+fn foo<T, U: Copy + Display>(x: T, y: U) -> u32\n+where T: Copy + Display,\n+      U: Debug\n+    \"#\n+            .trim()\n+        );\n         assert_eq!(info.active_parameter, Some(0));\n     }\n \n@@ -184,7 +203,7 @@ fn bar() { foo(<|>); }\"#,\n fn bar() {let _ : F = F::new(<|>);}\"#,\n         );\n \n-        assert_eq!(info.parameters, Vec::<String>::new());\n+        assert!(info.parameters().is_empty());\n         assert_eq!(info.active_parameter, None);\n     }\n \n@@ -206,7 +225,7 @@ fn bar() {\n }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec![\"&self\".to_string()]);\n+        assert_eq!(info.parameters(), [\"&self\"]);\n         assert_eq!(info.active_parameter, None);\n     }\n \n@@ -228,7 +247,7 @@ fn bar() {\n }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec![\"&self\".to_string(), \"x\".to_string()]);\n+        assert_eq!(info.parameters(), [\"&self\", \"x: i32\"]);\n         assert_eq!(info.active_parameter, Some(1));\n     }\n \n@@ -248,10 +267,10 @@ fn bar() {\n \"#,\n         );\n \n-        assert_eq!(info.parameters, vec![\"j\".to_string()]);\n+        assert_eq!(info.parameters(), [\"j: u32\"]);\n         assert_eq!(info.active_parameter, Some(0));\n-        assert_eq!(info.label, \"fn foo(j: u32) -> u32\".to_string());\n-        assert_eq!(info.doc.map(|it| it.into()), Some(\"test\".to_string()));\n+        assert_eq!(info.label(), \"fn foo(j: u32) -> u32\");\n+        assert_eq!(info.doc().map(|it| it.into()), Some(\"test\".to_string()));\n     }\n \n     #[test]\n@@ -276,11 +295,11 @@ pub fn do() {\n }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec![\"x\".to_string()]);\n+        assert_eq!(info.parameters(), [\"x: i32\"]);\n         assert_eq!(info.active_parameter, Some(0));\n-        assert_eq!(info.label, \"pub fn add_one(x: i32) -> i32\".to_string());\n+        assert_eq!(info.label(), \"pub fn add_one(x: i32) -> i32\");\n         assert_eq!(\n-            info.doc.map(|it| it.into()),\n+            info.doc().map(|it| it.into()),\n             Some(\n                 r#\"Adds one to the number given.\n \n@@ -322,11 +341,11 @@ pub fn do_it() {\n }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec![\"x\".to_string()]);\n+        assert_eq!(info.parameters(), [\"x: i32\"]);\n         assert_eq!(info.active_parameter, Some(0));\n-        assert_eq!(info.label, \"pub fn add_one(x: i32) -> i32\".to_string());\n+        assert_eq!(info.label(), \"pub fn add_one(x: i32) -> i32\");\n         assert_eq!(\n-            info.doc.map(|it| it.into()),\n+            info.doc().map(|it| it.into()),\n             Some(\n                 r#\"Adds one to the number given.\n \n@@ -375,10 +394,10 @@ pub fn foo() {\n \"#,\n         );\n \n-        assert_eq!(info.parameters, vec![\"&mut self\".to_string(), \"ctx\".to_string()]);\n+        assert_eq!(info.parameters(), [\"&mut self\", \"ctx: &mut Self::Context\"]);\n         assert_eq!(info.active_parameter, Some(1));\n         assert_eq!(\n-            info.doc.map(|it| it.into()),\n+            info.doc().map(|it| it.into()),\n             Some(\n                 r#\"Method is called when writer finishes.\n "}, {"sha": "d8e4410b2cf705a958aa094b6b84d703525b3550", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=0e49abb7fbe9239b97f0b7168ec359014c63f8c0", "patch": "@@ -13,11 +13,12 @@ mod complete_scope;\n mod complete_postfix;\n \n use ra_db::SourceDatabase;\n-use ra_syntax::{ast::{self, AstNode}, SyntaxKind::{ATTR, COMMENT}};\n+use ra_syntax::{ast::{self, AstNode, NameOwner, VisibilityOwner, TypeParamsOwner}, SyntaxKind::{ATTR, COMMENT}};\n \n use crate::{\n     db,\n     FilePosition,\n+    FunctionSignature,\n     completion::{\n         completion_item::{Completions, CompletionKind},\n         completion_context::CompletionContext,\n@@ -71,22 +72,52 @@ pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Opti\n     Some(acc)\n }\n \n-pub fn function_label(node: &ast::FnDef) -> Option<String> {\n-    let label: String = if let Some(body) = node.body() {\n-        let body_range = body.syntax().range();\n-        let label: String = node\n-            .syntax()\n-            .children_with_tokens()\n-            .filter(|child| !child.range().is_subrange(&body_range)) // Filter out body\n-            .filter(|child| !(child.kind() == COMMENT || child.kind() == ATTR)) // Filter out comments and attrs\n-            .map(|node| node.to_string())\n-            .collect();\n-        label\n-    } else {\n-        node.syntax().text().to_string()\n+pub fn generic_parameters<N: TypeParamsOwner>(node: &N) -> Vec<String> {\n+    let mut res = vec![];\n+    if let Some(type_params) = node.type_param_list() {\n+        res.extend(type_params.lifetime_params().map(|p| p.syntax().text().to_string()));\n+        res.extend(type_params.type_params().map(|p| p.syntax().text().to_string()));\n+    }\n+    res\n+}\n+\n+pub fn where_predicates<N: TypeParamsOwner>(node: &N) -> Vec<String> {\n+    let mut res = vec![];\n+    if let Some(clause) = node.where_clause() {\n+        res.extend(clause.predicates().map(|p| p.syntax().text().to_string()));\n+    }\n+    res\n+}\n+\n+pub fn function_signature(node: &ast::FnDef) -> Option<FunctionSignature> {\n+    fn param_list(node: &ast::FnDef) -> Vec<String> {\n+        let mut res = vec![];\n+        if let Some(param_list) = node.param_list() {\n+            if let Some(self_param) = param_list.self_param() {\n+                res.push(self_param.syntax().text().to_string())\n+            }\n+\n+            res.extend(param_list.params().map(|param| param.syntax().text().to_string()));\n+        }\n+        res\n+    }\n+\n+    let sig = FunctionSignature {\n+        visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n+        name: node.name().map(|n| n.text().to_string()),\n+        ret_type: node.ret_type().and_then(|r| r.type_ref()).map(|n| n.syntax().text().to_string()),\n+        parameters: param_list(node),\n+        generic_parameters: generic_parameters(node),\n+        where_predicates: where_predicates(node),\n+        // docs are processed separately\n+        doc: None,\n     };\n \n-    Some(label.trim().to_owned())\n+    Some(sig)\n+}\n+\n+pub fn function_label(node: &ast::FnDef) -> Option<String> {\n+    function_signature(node).map(|n| n.to_string())\n }\n \n pub fn const_label(node: &ast::ConstDef) -> String {"}, {"sha": "9d82f22708f0c3a4ffa7a61142f752cc4fed8f4f", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=0e49abb7fbe9239b97f0b7168ec359014c63f8c0", "patch": "@@ -145,7 +145,7 @@ mod tests {\n         check_reference_completion(\n             \"dont_show_both_completions_for_shadowing\",\n             r\"\n-            fn foo() -> {\n+            fn foo() {\n                 let bar = 92;\n                 {\n                     let bar = 62;"}, {"sha": "60fa72f1bb1f163d09b987f3d2b91e30833bdce9", "filename": "crates/ra_ide_api/src/display.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=0e49abb7fbe9239b97f0b7168ec359014c63f8c0", "patch": "@@ -0,0 +1,51 @@\n+use super::*;\r\n+use std::fmt::{self, Display};\r\n+\r\n+impl Display for FunctionSignature {\r\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\r\n+        if let Some(t) = &self.visibility {\r\n+            write!(f, \"{} \", t)?;\r\n+        }\r\n+\r\n+        if let Some(name) = &self.name {\r\n+            write!(f, \"fn {}\", name)?;\r\n+        }\r\n+\r\n+        if !self.generic_parameters.is_empty() {\r\n+            write!(f, \"<\")?;\r\n+            write_joined(f, &self.generic_parameters, \", \")?;\r\n+            write!(f, \">\")?;\r\n+        }\r\n+\r\n+        write!(f, \"(\")?;\r\n+        write_joined(f, &self.parameters, \", \")?;\r\n+        write!(f, \")\")?;\r\n+\r\n+        if let Some(t) = &self.ret_type {\r\n+            write!(f, \" -> {}\", t)?;\r\n+        }\r\n+\r\n+        if !self.where_predicates.is_empty() {\r\n+            write!(f, \"\\nwhere \")?;\r\n+            write_joined(f, &self.where_predicates, \",\\n      \")?;\r\n+        }\r\n+\r\n+        Ok(())\r\n+    }\r\n+}\r\n+\r\n+fn write_joined<T: Display>(\r\n+    f: &mut fmt::Formatter,\r\n+    items: impl IntoIterator<Item = T>,\r\n+    sep: &str,\r\n+) -> fmt::Result {\r\n+    let mut first = true;\r\n+    for e in items {\r\n+        if !first {\r\n+            write!(f, \"{}\", sep)?;\r\n+        }\r\n+        first = false;\r\n+        write!(f, \"{}\", e)?;\r\n+    }\r\n+    Ok(())\r\n+}\r"}, {"sha": "7f8f454bc706d2d3d201dc3f5bd4f2a1a30ffd51", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=0e49abb7fbe9239b97f0b7168ec359014c63f8c0", "patch": "@@ -37,6 +37,7 @@ mod join_lines;\n mod structure;\n mod typing;\n mod matching_brace;\n+mod display;\n \n #[cfg(test)]\n mod marks;\n@@ -243,10 +244,34 @@ impl<T> RangeInfo<T> {\n \n #[derive(Debug)]\n pub struct CallInfo {\n-    pub label: String,\n+    pub signature: FunctionSignature,\n+    pub active_parameter: Option<usize>,\n+}\n+\n+/// Contains information about a function signature\n+#[derive(Debug)]\n+pub struct FunctionSignature {\n+    /// Optional visibility\n+    pub visibility: Option<String>,\n+    /// Name of the function\n+    pub name: Option<String>,\n+    /// Documentation for the function\n     pub doc: Option<Documentation>,\n+    /// Generic parameters\n+    pub generic_parameters: Vec<String>,\n+    /// Parameters of the function\n     pub parameters: Vec<String>,\n-    pub active_parameter: Option<usize>,\n+    /// Optional return type\n+    pub ret_type: Option<String>,\n+    /// Where predicates\n+    pub where_predicates: Vec<String>,\n+}\n+\n+impl FunctionSignature {\n+    pub(crate) fn with_doc_opt(mut self, doc: Option<Documentation>) -> Self {\n+        self.doc = doc;\n+        self\n+    }\n }\n \n /// `AnalysisHost` stores the current state of the world."}, {"sha": "4d6ede316c834f02bff274630a959a8472951f10", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=0e49abb7fbe9239b97f0b7168ec359014c63f8c0", "patch": "@@ -174,6 +174,28 @@ impl Conv for ra_ide_api::Documentation {\n     }\n }\n \n+impl Conv for ra_ide_api::FunctionSignature {\n+    type Output = lsp_types::SignatureInformation;\n+    fn conv(self) -> Self::Output {\n+        use lsp_types::{ParameterInformation, ParameterLabel, SignatureInformation};\n+\n+        let label = self.to_string();\n+\n+        let documentation = self.doc.map(|it| it.conv());\n+\n+        let parameters: Vec<ParameterInformation> = self\n+            .parameters\n+            .into_iter()\n+            .map(|param| ParameterInformation {\n+                label: ParameterLabel::Simple(param),\n+                documentation: None,\n+            })\n+            .collect();\n+\n+        SignatureInformation { label, documentation, parameters: Some(parameters) }\n+    }\n+}\n+\n impl ConvWith for TextEdit {\n     type Ctx = LineIndex;\n     type Output = Vec<lsp_types::TextEdit>;"}, {"sha": "b96deb061e8605c4e5409011f8e75d0878c8f930", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e49abb7fbe9239b97f0b7168ec359014c63f8c0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=0e49abb7fbe9239b97f0b7168ec359014c63f8c0", "patch": "@@ -3,8 +3,8 @@ use lsp_types::{\n     CodeActionResponse, CodeLens, Command, Diagnostic, DiagnosticSeverity, CodeAction,\n     DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange,\n     FoldingRangeKind, FoldingRangeParams, Hover, HoverContents, Location, MarkupContent,\n-    MarkupKind, ParameterInformation, ParameterLabel, Position, PrepareRenameResponse, Range,\n-    RenameParams, SignatureInformation, SymbolInformation, TextDocumentIdentifier, TextEdit,\n+    MarkupKind, Position, PrepareRenameResponse, Range,\n+    RenameParams,SymbolInformation, TextDocumentIdentifier, TextEdit,\n     WorkspaceEdit,\n };\n use ra_ide_api::{\n@@ -403,26 +403,13 @@ pub fn handle_signature_help(\n ) -> Result<Option<req::SignatureHelp>> {\n     let position = params.try_conv_with(&world)?;\n     if let Some(call_info) = world.analysis().call_info(position)? {\n-        let parameters: Vec<ParameterInformation> = call_info\n-            .parameters\n-            .into_iter()\n-            .map(|param| ParameterInformation {\n-                label: ParameterLabel::Simple(param.clone()),\n-                documentation: None,\n-            })\n-            .collect();\n+        let active_parameter = call_info.active_parameter.map(|it| it as i64);\n+        let sig_info = call_info.signature.conv();\n \n-        let documentation = call_info.doc.map(|it| it.conv());\n-\n-        let sig_info = SignatureInformation {\n-            label: call_info.label,\n-            documentation,\n-            parameters: Some(parameters),\n-        };\n         Ok(Some(req::SignatureHelp {\n             signatures: vec![sig_info],\n             active_signature: Some(0),\n-            active_parameter: call_info.active_parameter.map(|it| it as i64),\n+            active_parameter,\n         }))\n     } else {\n         Ok(None)"}]}