{"sha": "6ba494b68bede3bd8d1288f53137c8895260bec7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYTQ5NGI2OGJlZGUzYmQ4ZDEyODhmNTMxMzdjODg5NTI2MGJlYzc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-03-11T19:11:50Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-03-11T22:28:29Z"}, "message": "Point to let when modifying field of immutable variable\n\nPoint at the immutable local variable when trying to modify one of its\nfields.\n\nGiven a file:\n\n```rust\nstruct Foo {\n    pub v: Vec<String>\n}\n\nfn main() {\n    let f = Foo { v: Vec::new() };\n    f.v.push(\"cat\".to_string());\n}\n```\n\npresent the following output:\n\n```\nerror: cannot borrow immutable field `f.v` as mutable\n --> file.rs:7:13\n  |\n6 |    let f = Foo { v: Vec::new() };\n  |        - this should be `mut`\n7 |    f.v.push(\"cat\".to_string());\n  |    ^^^\n\nerror: aborting due to previous error\n```", "tree": {"sha": "728a1025b58b91fe6dbd443e1ef2abf655427ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/728a1025b58b91fe6dbd443e1ef2abf655427ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ba494b68bede3bd8d1288f53137c8895260bec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba494b68bede3bd8d1288f53137c8895260bec7", "html_url": "https://github.com/rust-lang/rust/commit/6ba494b68bede3bd8d1288f53137c8895260bec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ba494b68bede3bd8d1288f53137c8895260bec7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f573db4f80c75f156df8a743f456bf087ec81dc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f573db4f80c75f156df8a743f456bf087ec81dc2", "html_url": "https://github.com/rust-lang/rust/commit/f573db4f80c75f156df8a743f456bf087ec81dc2"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "7db206296933bc755c64c0a17952156a35de2f91", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ba494b68bede3bd8d1288f53137c8895260bec7/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba494b68bede3bd8d1288f53137c8895260bec7/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6ba494b68bede3bd8d1288f53137c8895260bec7", "patch": "@@ -195,6 +195,21 @@ pub struct cmt_<'tcx> {\n pub type cmt<'tcx> = Rc<cmt_<'tcx>>;\n \n impl<'tcx> cmt_<'tcx> {\n+    pub fn get_def(&self) -> Option<ast::NodeId> {\n+        match self.cat {\n+            Categorization::Deref(ref cmt, ..) |\n+            Categorization::Interior(ref cmt, _) |\n+            Categorization::Downcast(ref cmt, _) => {\n+                if let Categorization::Local(nid) = cmt.cat {\n+                    Some(nid)\n+                } else {\n+                    None\n+                }\n+            }\n+            _ => None\n+        }\n+    }\n+\n     pub fn get_field(&self, name: ast::Name) -> Option<DefId> {\n         match self.cat {\n             Categorization::Deref(ref cmt, ..) |"}, {"sha": "04036d6c6b9e7aa2c8c6a3985e4c16fe40909505", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ba494b68bede3bd8d1288f53137c8895260bec7/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba494b68bede3bd8d1288f53137c8895260bec7/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=6ba494b68bede3bd8d1288f53137c8895260bec7", "patch": "@@ -659,6 +659,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     pub fn bckerr_to_diag(&self, err: &BckError<'tcx>) -> DiagnosticBuilder<'a> {\n         let span = err.span.clone();\n         let mut immutable_field = None;\n+        let mut local_def = None;\n \n         let msg = &match err.code {\n             err_mutbl => {\n@@ -708,6 +709,14 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                 }\n                                 None\n                             });\n+                        local_def = err.cmt.get_def()\n+                            .and_then(|nid| {\n+                                if !self.tcx.hir.is_argument(nid) {\n+                                    Some(self.tcx.hir.span(nid))\n+                                } else {\n+                                    None\n+                                }\n+                            });\n \n                         format!(\"cannot borrow {} as mutable\", descr)\n                     }\n@@ -738,6 +747,9 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         if let Some((span, msg)) = immutable_field {\n             db.span_label(span, &msg);\n         }\n+        if let Some(span) = local_def {\n+            db.span_label(span, &\"this should be `mut`\");\n+        }\n         db\n     }\n "}, {"sha": "1cd322efab57d2c69299f62dc72af8d1c3c58c69", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba494b68bede3bd8d1288f53137c8895260bec7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ba494b68bede3bd8d1288f53137c8895260bec7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=6ba494b68bede3bd8d1288f53137c8895260bec7", "patch": "@@ -1,6 +1,8 @@\n error: cannot borrow immutable field `z.x` as mutable\n   --> $DIR/issue-39544.rs:21:18\n    |\n+20 |     let z = Z { x: X::Y };\n+   |         - this should be `mut`\n 21 |     let _ = &mut z.x;\n    |                  ^^^\n "}]}