{"sha": "91cf68fac569d0817fc8649bff28d727bbed47b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxY2Y2OGZhYzU2OWQwODE3ZmM4NjQ5YmZmMjhkNzI3YmJlZDQ3YjI=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-01-07T16:29:25Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-01-07T17:26:23Z"}, "message": "Add lstat shim for macos", "tree": {"sha": "3b738d2e864d99f9e106037c19ee6b513fc880a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b738d2e864d99f9e106037c19ee6b513fc880a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91cf68fac569d0817fc8649bff28d727bbed47b2", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niI4EABYIADYWIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXhS/QBgcZ2l0QGNocmlz\ndGlhbnBvdmVkYS54eXoACgkQJ1Je9edCClB4DQD/d3zTDc+51Lg+WyuGzQ/07Ie5\nZKoAOiussEG6qhIj6XABAPeZX02yZ+NgtMX4IMFD/x9M6D6/gXrGpnqgFPVprHwP\n=6m3r\n-----END PGP SIGNATURE-----", "payload": "tree 3b738d2e864d99f9e106037c19ee6b513fc880a0\nparent 329310fbd63c564df6dd76f40181668861a7ed16\nauthor Christian Poveda <git@christianpoveda.xyz> 1578414565 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1578417983 -0500\n\nAdd lstat shim for macos\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91cf68fac569d0817fc8649bff28d727bbed47b2", "html_url": "https://github.com/rust-lang/rust/commit/91cf68fac569d0817fc8649bff28d727bbed47b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91cf68fac569d0817fc8649bff28d727bbed47b2/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "329310fbd63c564df6dd76f40181668861a7ed16", "url": "https://api.github.com/repos/rust-lang/rust/commits/329310fbd63c564df6dd76f40181668861a7ed16", "html_url": "https://github.com/rust-lang/rust/commit/329310fbd63c564df6dd76f40181668861a7ed16"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "f3baebad143b3664e04a31cd98286062e6348b7d", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91cf68fac569d0817fc8649bff28d727bbed47b2/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cf68fac569d0817fc8649bff28d727bbed47b2/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=91cf68fac569d0817fc8649bff28d727bbed47b2", "patch": "@@ -504,6 +504,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"lstat$INODE64\" => {\n+                let result = this.lstat(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"clock_gettime\" => {\n                 let result = this.clock_gettime(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;"}, {"sha": "3927f0e649198234eab6101deb33f32d7cf0fa44", "filename": "src/shims/fs.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91cf68fac569d0817fc8649bff28d727bbed47b2/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cf68fac569d0817fc8649bff28d727bbed47b2/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=91cf68fac569d0817fc8649bff28d727bbed47b2", "patch": "@@ -312,6 +312,29 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         buf_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n+        this.check_no_isolation(\"stat\")?;\n+        // `stat` always follows symlinks.\n+        this.stat_or_lstat(true, path_op, buf_op)\n+    }\n+\n+    // `lstat` is used to get symlink metadata.\n+    fn lstat(\n+        &mut self,\n+        path_op: OpTy<'tcx, Tag>,\n+        buf_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+        this.check_no_isolation(\"lstat\")?;\n+        this.stat_or_lstat(false, path_op, buf_op)\n+    }\n+\n+    fn stat_or_lstat(\n+        &mut self,\n+        follow_symlink: bool,\n+        path_op: OpTy<'tcx, Tag>,\n+        buf_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n \n         if this.tcx.sess.target.target.target_os.to_lowercase() != \"macos\" {\n             throw_unsup_format!(\"The `stat` shim is only available for `macos` targets.\")\n@@ -322,8 +345,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let buf = this.deref_operand(buf_op)?;\n \n-        // `stat` always follows symlinks. `lstat` is used to get symlink metadata.\n-        let metadata = match FileMetadata::new(this, path, true)? {\n+        let metadata = match FileMetadata::new(this, path, follow_symlink)? {\n             Some(metadata) => metadata,\n             None => return Ok(-1),\n         };"}]}