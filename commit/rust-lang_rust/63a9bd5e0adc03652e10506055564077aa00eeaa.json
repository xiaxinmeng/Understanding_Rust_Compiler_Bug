{"sha": "63a9bd5e0adc03652e10506055564077aa00eeaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYTliZDVlMGFkYzAzNjUyZTEwNTA2MDU1NTY0MDc3YWEwMGVlYWE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-07T19:30:33Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-07T22:25:00Z"}, "message": "Fix precedence for ranges.\n\nTechnically this is a\n\n[breaking-change]\n\nbut it probably shouldn't affect your code.\n\nCloses #20256", "tree": {"sha": "6428e8d4d879c66786c6af2f69aebf221df9ba6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6428e8d4d879c66786c6af2f69aebf221df9ba6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63a9bd5e0adc03652e10506055564077aa00eeaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63a9bd5e0adc03652e10506055564077aa00eeaa", "html_url": "https://github.com/rust-lang/rust/commit/63a9bd5e0adc03652e10506055564077aa00eeaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63a9bd5e0adc03652e10506055564077aa00eeaa/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e15f04324828924c21b715887a685154f2d6289b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e15f04324828924c21b715887a685154f2d6289b", "html_url": "https://github.com/rust-lang/rust/commit/e15f04324828924c21b715887a685154f2d6289b"}], "stats": {"total": 93, "additions": 75, "deletions": 18}, "files": [{"sha": "d70f4e74b5fd6eedf3811659a8a786758f8205fc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/63a9bd5e0adc03652e10506055564077aa00eeaa/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a9bd5e0adc03652e10506055564077aa00eeaa/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=63a9bd5e0adc03652e10506055564077aa00eeaa", "patch": "@@ -2536,7 +2536,7 @@ impl<'a> Parser<'a> {\n               }\n \n               // expr[...]\n-              // An index expression.\n+              // Could be either an index expression or a slicing expression.\n               token::OpenDelim(token::Bracket) => {\n                 let bracket_pos = self.span.lo;\n                 self.bump();\n@@ -2576,22 +2576,6 @@ impl<'a> Parser<'a> {\n                                    \"use `&expr[]` to construct a slice of the whole of expr\");\n                 }\n               }\n-\n-              // A range expression, either `expr..expr` or `expr..`.\n-              token::DotDot if !self.restrictions.contains(RESTRICTION_NO_DOTS) => {\n-                self.bump();\n-\n-                let opt_end = if self.token.can_begin_expr() {\n-                    let end = self.parse_expr_res(RESTRICTION_NO_DOTS);\n-                    Some(end)\n-                } else {\n-                    None\n-                };\n-\n-                let hi = self.span.hi;\n-                let range = self.mk_range(Some(e), opt_end);\n-                return self.mk_expr(lo, hi, range);\n-              }\n               _ => return e\n             }\n         }\n@@ -2834,7 +2818,7 @@ impl<'a> Parser<'a> {\n           token::DotDot if !self.restrictions.contains(RESTRICTION_NO_DOTS) => {\n             // A range, closed above: `..expr`.\n             self.bump();\n-            let e = self.parse_prefix_expr();\n+            let e = self.parse_expr();\n             hi = e.span.hi;\n             ex = self.mk_range(None, Some(e));\n           }\n@@ -2901,6 +2885,7 @@ impl<'a> Parser<'a> {\n             self.restrictions.contains(RESTRICTION_NO_BAR_OP) {\n             return lhs;\n         }\n+\n         self.expected_tokens.push(TokenType::Operator);\n \n         let cur_opt = self.token.to_binop();\n@@ -2909,6 +2894,7 @@ impl<'a> Parser<'a> {\n                 let cur_prec = operator_prec(cur_op);\n                 if cur_prec > min_prec {\n                     self.bump();\n+                    // TODO\n                     let expr = self.parse_prefix_expr();\n                     let rhs = self.parse_more_binops(expr, cur_prec);\n                     let lhs_span = lhs.span;\n@@ -2970,6 +2956,25 @@ impl<'a> Parser<'a> {\n               let assign_op = self.mk_assign_op(aop, lhs, rhs);\n               self.mk_expr(span.lo, rhs_span.hi, assign_op)\n           }\n+          // TODO\n+          // A range expression, either `expr..expr` or `expr..`.\n+          token::DotDot if !self.restrictions.contains(RESTRICTION_NO_DOTS) => {\n+            self.bump();\n+\n+            let opt_end = if self.token.can_begin_expr() {\n+                // TODO only use of RES...DOT\n+                let end = self.parse_expr_res(RESTRICTION_NO_DOTS);\n+                Some(end)\n+            } else {\n+                None\n+            };\n+\n+            let lo = lhs.span.lo;\n+            let hi = self.span.hi;\n+            let range = self.mk_range(Some(lhs), opt_end);\n+            return self.mk_expr(lo, hi, range);\n+          }\n+\n           _ => {\n               lhs\n           }"}, {"sha": "ea72eb388656c531802528fca76abb261dbf5cbf", "filename": "src/test/run-pass/ranges-precedence.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/63a9bd5e0adc03652e10506055564077aa00eeaa/src%2Ftest%2Frun-pass%2Franges-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a9bd5e0adc03652e10506055564077aa00eeaa/src%2Ftest%2Frun-pass%2Franges-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Franges-precedence.rs?ref=63a9bd5e0adc03652e10506055564077aa00eeaa", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the precedence of ranges is correct\n+\n+#![feature(slicing_syntax)]\n+\n+struct Foo {\n+    foo: uint,\n+}\n+\n+impl Foo {\n+    fn bar(&self) -> uint { 5 }\n+}\n+\n+fn main() {\n+    let x = 1+3..4+5;\n+    assert!(x == (4..9));\n+\n+    let x = 1..4+5;\n+    assert!(x == (1..9));\n+\n+    let x = 1+3..4;\n+    assert!(x == (4..4));\n+    \n+    let a = Foo { foo: 3 };\n+    let x = a.foo..a.bar();\n+    assert!(x == (3..5));\n+\n+    let x = 1+3..;\n+    assert!(x == (4..));\n+    let x = ..1+3;\n+    assert!(x == (..4));\n+\n+    let a = &[0i32, 1, 2, 3, 4, 5, 6];\n+    let x = &a[1+1..2+2];\n+    assert!(x == &a[2..4]);\n+    let x = &a[..1+2];\n+    assert!(x == &a[..3]);\n+    let x = &a[1+2..];\n+    assert!(x == &a[3..]);\n+\n+    for _i in 2+4..10-3 {}\n+}\n+"}]}