{"sha": "116e9831a57dd09b4c580c2f480064299137b0b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNmU5ODMxYTU3ZGQwOWI0YzU4MGMyZjQ4MDA2NDI5OTEzN2IwYjA=", "commit": {"author": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2016-11-18T16:14:42Z"}, "committer": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2017-04-24T10:08:48Z"}, "message": "support `default impl` for specialization\n\nthis commit implements the first step of the `default impl` feature:\nall items in a `default impl` are (implicitly) `default` and hence\nspecializable.\nIn order to test this feature I've copied all the tests provided for the\n`default` method implementation (in run-pass/specialization and\ncompile-fail/specialization directories) and moved the `default` keyword\nfrom the item to the impl.\nSee referenced issue for further info", "tree": {"sha": "7cd1a4b68c97f201a062207064deaa1a5f45fdd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cd1a4b68c97f201a062207064deaa1a5f45fdd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/116e9831a57dd09b4c580c2f480064299137b0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/116e9831a57dd09b4c580c2f480064299137b0b0", "html_url": "https://github.com/rust-lang/rust/commit/116e9831a57dd09b4c580c2f480064299137b0b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/116e9831a57dd09b4c580c2f480064299137b0b0/comments", "author": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15ce54096a589de277771ad1f55a334fe2661a64", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ce54096a589de277771ad1f55a334fe2661a64", "html_url": "https://github.com/rust-lang/rust/commit/15ce54096a589de277771ad1f55a334fe2661a64"}], "stats": {"total": 1119, "additions": 1078, "deletions": 41}, "files": [{"sha": "c416fb60b11ecfd2a1ba0fb8567c9a92590b5d28", "filename": "cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -1 +1 @@\n-Subproject commit 8326a3683a9045d825e4fdc4021af340ee3b3755\n+Subproject commit c416fb60b11ecfd2a1ba0fb8567c9a92590b5d28"}, {"sha": "016cbc514cf44a2bd3fe806e8afa6b9c50287373", "filename": "rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rls?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -1 +1 @@\n-Subproject commit 6ecff95fdc3ee7ceed2b9b0cc1a3a64876860bce\n+Subproject commit 016cbc514cf44a2bd3fe806e8afa6b9c50287373"}, {"sha": "a8fc4c169fac43a5dc204d4fd56ddb1739f8c178", "filename": "src/compiler-rt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -1 +1 @@\n-Subproject commit d30da544a8afc5d78391dee270bdf40e74a215d3\n+Subproject commit a8fc4c169fac43a5dc204d4fd56ddb1739f8c178"}, {"sha": "beea82b9230cd641dd1ca263cf31025ace4aebb5", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -1 +1 @@\n-Subproject commit ad7de198561b3a12217ea2da76d796d9c7fc0ed3\n+Subproject commit beea82b9230cd641dd1ca263cf31025ace4aebb5"}, {"sha": "b060f732145f2fa16df84c74e511df08a3a47c5d", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -1 +1 @@\n-Subproject commit 6b0de90d87dda15e323ef24cdf7ed873ac5cf4d3\n+Subproject commit b060f732145f2fa16df84c74e511df08a3a47c5d"}, {"sha": "e058ca661692a8d01f8cf9d35939dfe3105ce968", "filename": "src/jemalloc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fjemalloc?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -1 +1 @@\n-Subproject commit 11bfb0dcf85f7aa92abd30524bb1e42e18d108c6\n+Subproject commit e058ca661692a8d01f8cf9d35939dfe3105ce968"}, {"sha": "05a2d197356ef253dfd985166576619ac9b6947f", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -1 +1 @@\n-Subproject commit c34a802d1eb037b44c5252078c7270b5472e0f65\n+Subproject commit 05a2d197356ef253dfd985166576619ac9b6947f"}, {"sha": "5fb8170cd6c36bc0537c3dd4f70a2e639c8f190c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -1326,7 +1326,13 @@ impl<'a> LoweringContext<'a> {\n                 hir::ItemDefaultImpl(self.lower_unsafety(unsafety),\n                                      trait_ref)\n             }\n-            ItemKind::Impl(unsafety, polarity, ref generics, ref ifce, ref ty, ref impl_items) => {\n+            ItemKind::Impl(unsafety,\n+                           polarity,\n+                           defaultness,\n+                           ref generics,\n+                           ref ifce,\n+                           ref ty,\n+                           ref impl_items) => {\n                 let new_impl_items = impl_items.iter()\n                                                .map(|item| self.lower_impl_item_ref(item))\n                                                .collect();\n@@ -1340,6 +1346,7 @@ impl<'a> LoweringContext<'a> {\n \n                 hir::ItemImpl(self.lower_unsafety(unsafety),\n                               self.lower_impl_polarity(polarity),\n+                              self.lower_defaultness(defaultness),\n                               self.lower_generics(generics),\n                               ifce,\n                               self.lower_ty(ty),"}, {"sha": "cb7f530b9952f779011e899b13dbde7fde04b977", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -1712,6 +1712,7 @@ pub enum Item_ {\n     /// An implementation, eg `impl<A> Trait for Foo { .. }`\n     ItemImpl(Unsafety,\n              ImplPolarity,\n+             Defaultness,\n              Generics,\n              Option<TraitRef>, // (optional) trait this impl implements\n              P<Ty>, // self"}, {"sha": "dec0753be064cfebe49b65e9ab38369c7bf081f5", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -678,12 +678,14 @@ impl<'a> State<'a> {\n             }\n             hir::ItemImpl(unsafety,\n                           polarity,\n+                          defaultness,\n                           ref generics,\n                           ref opt_trait,\n                           ref ty,\n                           ref impl_items) => {\n                 self.head(\"\")?;\n                 self.print_visibility(&item.vis)?;\n+                self.print_defaultness(defaultness)?;\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"impl\")?;\n \n@@ -820,6 +822,13 @@ impl<'a> State<'a> {\n         }\n     }\n \n+    pub fn print_defaultness(&mut self, defaultness: hir::Defaultness) -> io::Result<()> {\n+        if let hir::Defaultness::Default = defaultness {\n+            self.word_nbsp(\"default\")?;\n+        }\n+        Ok(())\n+    }\n+\n     pub fn print_struct(&mut self,\n                         struct_def: &hir::VariantData,\n                         generics: &hir::Generics,\n@@ -931,11 +940,7 @@ impl<'a> State<'a> {\n         self.hardbreak_if_not_bol()?;\n         self.maybe_print_comment(ii.span.lo)?;\n         self.print_outer_attributes(&ii.attrs)?;\n-\n-        match ii.defaultness {\n-            hir::Defaultness::Default { .. } => self.word_nbsp(\"default\")?,\n-            hir::Defaultness::Final => (),\n-        }\n+        self.print_defaultness(ii.defaultness)?;\n \n         match ii.node {\n             hir::ImplItemKind::Const(ref ty, expr) => {"}, {"sha": "12280acfac21a244667be475dcc637a7e9f680ef", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -50,7 +50,7 @@ fn item_might_be_inlined(item: &hir::Item) -> bool {\n     }\n \n     match item.node {\n-        hir::ItemImpl(_, _, ref generics, ..) |\n+        hir::ItemImpl(_, _, _, ref generics, ..) |\n         hir::ItemFn(.., ref generics, _) => {\n             generics_require_inlining(generics)\n         }\n@@ -186,7 +186,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                             // does too.\n                             let impl_node_id = self.tcx.hir.as_local_node_id(impl_did).unwrap();\n                             match self.tcx.hir.expect_item(impl_node_id).node {\n-                                hir::ItemImpl(_, _, ref generics, ..) => {\n+                                hir::ItemImpl(_, _, _, ref generics, ..) => {\n                                     generics_require_inlining(generics)\n                                 }\n                                 _ => false"}, {"sha": "a8ba708cc2cd41427904d4fdb279b3a53efd2f8b", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -331,7 +331,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             hir::ItemStruct(_, ref generics) |\n             hir::ItemUnion(_, ref generics) |\n             hir::ItemTrait(_, ref generics, ..) |\n-            hir::ItemImpl(_, _, ref generics, ..) => {\n+            hir::ItemImpl(_, _, _, ref generics, ..) => {\n                 // These kinds of items have only early bound lifetime parameters.\n                 let mut index = if let hir::ItemTrait(..) = item.node {\n                     1 // Self comes before lifetimes\n@@ -834,7 +834,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n             match parent.node {\n                 hir::ItemTrait(_, ref generics, ..) |\n-                hir::ItemImpl(_, _, ref generics, ..) => {\n+                hir::ItemImpl(_, _, _, ref generics, ..) => {\n                     index += (generics.lifetimes.len() + generics.ty_params.len()) as u32;\n                 }\n                 _ => {}"}, {"sha": "f417ad5b3d9d5761785644b8e3410266281e39ec", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -33,6 +33,7 @@ use ty::subst::Subst;\n use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder};\n use util::common::FN_OUTPUT_NAME;\n+use hir::{self};\n \n /// Depending on the stage of compilation, we want projection to be\n /// more or less conservative.\n@@ -923,7 +924,28 @@ fn assemble_candidates_from_impls<'cx, 'gcx, 'tcx>(\n                         // being invoked).\n                         node_item.item.defaultness.has_value()\n                     } else {\n-                        node_item.item.defaultness.is_default()\n+                        let is_default = match selcx.tcx()\n+                                                    .map\n+                                                    .as_local_node_id(node_item.node.def_id()) {\n+                            Some(node_id) => {\n+                                let item = selcx.tcx().map.expect_item(node_id);\n+                                if let hir::ItemImpl(_, _, defaultness, ..) = item.node {\n+                                    defaultness.is_default()\n+                                } else {\n+                                    false\n+                                }\n+                            }\n+                            None => {\n+                                selcx.tcx()\n+                                     .global_tcx()\n+                                     .sess\n+                                     .cstore\n+                                     .impl_defaultness(node_item.node.def_id())\n+                                     .is_default()\n+                            }\n+                        };\n+\n+                        node_item.item.defaultness.is_default() || is_default\n                     };\n \n                     // Only reveal a specializable default if we're past type-checking"}, {"sha": "618c1711dad404898a8446d31663a55fde6c01f0", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -90,6 +90,7 @@ provide! { <'tcx> tcx, def_id, cdata\n     associated_item => { cdata.get_associated_item(def_id.index) }\n     impl_trait_ref => { cdata.get_impl_trait(def_id.index, tcx) }\n     impl_polarity => { cdata.get_impl_polarity(def_id.index) }\n+    impl_defaultness => { cdata.get_impl_defaultness(def_id.index) }\n     coerce_unsized_info => {\n         cdata.get_coerce_unsized_info(def_id.index).unwrap_or_else(|| {\n             bug!(\"coerce_unsized_info: `{:?}` is missing its info\", def_id);"}, {"sha": "ff643c17cfa65578f2013dd02590402ecfbddced", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -629,6 +629,10 @@ impl<'a, 'tcx> CrateMetadata {\n         self.get_impl_data(id).polarity\n     }\n \n+    pub fn get_impl_defaultness(&self, id: DefIndex) -> hir::Defaultness {\n+        self.get_impl_data(id).defaultness\n+    }\n+\n     pub fn get_coerce_unsized_info(&self,\n                                    id: DefIndex)\n                                    -> Option<ty::adjustment::CoerceUnsizedInfo> {"}, {"sha": "d55f489107d7f3a0c398b742312cf6bc9fe4b49a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -706,14 +706,15 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n             hir::ItemDefaultImpl(..) => {\n                 let data = ImplData {\n                     polarity: hir::ImplPolarity::Positive,\n+                    defaultness: hir::Defaultness::Final,\n                     parent_impl: None,\n                     coerce_unsized_info: None,\n                     trait_ref: tcx.impl_trait_ref(def_id).map(|trait_ref| self.lazy(&trait_ref)),\n                 };\n \n                 EntryKind::DefaultImpl(self.lazy(&data))\n             }\n-            hir::ItemImpl(_, polarity, ..) => {\n+            hir::ItemImpl(_, polarity, defaultness, ..) => {\n                 let trait_ref = tcx.impl_trait_ref(def_id);\n                 let parent = if let Some(trait_ref) = trait_ref {\n                     let trait_def = tcx.lookup_trait_def(trait_ref.def_id);\n@@ -740,6 +741,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n \n                 let data = ImplData {\n                     polarity: polarity,\n+                    defaultness: defaultness,\n                     parent_impl: parent,\n                     coerce_unsized_info: coerce_unsized_info,\n                     trait_ref: trait_ref.map(|trait_ref| self.lazy(&trait_ref)),"}, {"sha": "933c3482474b5e3ce6673c36254c934bd33133c4", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -406,6 +406,7 @@ impl_stable_hash_for!(struct TraitData<'tcx> {\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct ImplData<'tcx> {\n     pub polarity: hir::ImplPolarity,\n+    pub defaultness: hir::Defaultness,\n     pub parent_impl: Option<DefId>,\n \n     /// This is `Some` only for impls of `CoerceUnsized`."}, {"sha": "36e59b4774ad2457b2ebb40239498e3396c2999c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -429,8 +429,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                                 }\n                             }\n                             None => {\n-                                if let Some(NodeItem(item)) = self.tcx.hir.get_if_local(id) {\n-                                    if let hir::ItemImpl(_, _, _, _, ref ty, _) = item.node {\n+                                if let Some(NodeItem(item)) = self.tcx.map.get_if_local(id) {\n+                                    if let hir::ItemImpl(_, _, _, _, _, ref ty, _) = item.node {\n                                         trait_id = self.lookup_def_id(ty.id);\n                                     }\n                                 }"}, {"sha": "991470ebe6405b72e23f99cb92baba6993a921b4", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -880,7 +880,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                 let parent_node_id = hir_map.get_parent_node(ii.id);\n                 let is_impl_generic = match hir_map.expect_item(parent_node_id) {\n                     &hir::Item {\n-                        node: hir::ItemImpl(_, _, ref generics, ..),\n+                        node: hir::ItemImpl(_, _, _, ref generics, ..),\n                         ..\n                     } => {\n                         generics.is_type_parameterized()\n@@ -911,6 +911,7 @@ fn create_trans_items_for_default_impls<'a, 'tcx>(scx: &SharedCrateContext<'a, '\n     let tcx = scx.tcx();\n     match item.node {\n         hir::ItemImpl(_,\n+                      _,\n                       _,\n                       ref generics,\n                       ..,"}, {"sha": "74886e503a85ee2f0c5114d3c0687858a05dbaf7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -1142,7 +1142,23 @@ fn check_specialization_validity<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     if let Some(parent) = parent {\n         if parent.item.is_final() {\n-            report_forbidden_specialization(tcx, impl_item, parent.node.def_id());\n+            let is_final = match tcx.map.as_local_node_id(parent.node.def_id()) {\n+                Some(node_id) => {\n+                    let item = tcx.map.expect_item(node_id);\n+                    if let hir::ItemImpl(_, _, defaultness, ..) = item.node {\n+                        defaultness.is_final()\n+                    } else {\n+                        true\n+                    }\n+                }\n+                None => {\n+                    tcx.global_tcx().sess.cstore.impl_defaultness(parent.node.def_id()).is_final()\n+                }\n+            };\n+\n+            if is_final {\n+                report_forbidden_specialization(tcx, impl_item, parent.node.def_id());\n+            }\n         }\n     }\n "}, {"sha": "8b8a765dd60a5efe698b0318af575b91284cce5b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -105,11 +105,11 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n             ///\n             /// won't be allowed unless there's an *explicit* implementation of `Send`\n             /// for `T`\n-            hir::ItemImpl(_, hir::ImplPolarity::Positive, _,\n+            hir::ItemImpl(_, hir::ImplPolarity::Positive, _, _,\n                           ref trait_ref, ref self_ty, _) => {\n                 self.check_impl(item, self_ty, trait_ref);\n             }\n-            hir::ItemImpl(_, hir::ImplPolarity::Negative, _, Some(_), ..) => {\n+            hir::ItemImpl(_, hir::ImplPolarity::Negative, _, _, Some(_), ..) => {\n                 // FIXME(#27579) what amount of WF checking do we need for neg impls?\n \n                 let trait_ref = tcx.impl_trait_ref(tcx.hir.local_def_id(item.id)).unwrap();"}, {"sha": "323700f9eafb964d9d7047473739c02ef58aef8d", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -87,7 +87,7 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n             hir::ItemDefaultImpl(unsafety, _) => {\n                 self.check_unsafety_coherence(item, None, unsafety, hir::ImplPolarity::Positive);\n             }\n-            hir::ItemImpl(unsafety, polarity, ref generics, Some(_), _, _) => {\n+            hir::ItemImpl(unsafety, polarity, _, ref generics, ..) => {\n                 self.check_unsafety_coherence(item, Some(generics), unsafety, polarity);\n             }\n             _ => {}"}, {"sha": "71594825cdb01215c8ab5fdcbd2a0a74a526c9fa", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -214,6 +214,7 @@ pub struct Trait {\n pub struct Impl {\n     pub unsafety: hir::Unsafety,\n     pub polarity: hir::ImplPolarity,\n+    pub defaultness: hir::Defaultness,\n     pub generics: hir::Generics,\n     pub trait_: Option<hir::TraitRef>,\n     pub for_: P<hir::Ty>,"}, {"sha": "4ffc8c97c50025d9048f6f77c62a6c37fe5aa882", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -502,7 +502,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.traits.push(t);\n             },\n \n-            hir::ItemImpl(unsafety, polarity, ref gen, ref tr, ref ty, ref item_ids) => {\n+            hir::ItemImpl(unsafety, polarity, defaultness, ref gen, ref tr, ref ty, ref item_ids) => {\n                 // Don't duplicate impls when inlining, we'll pick them up\n                 // regardless of where they're located.\n                 if !self.inlining {\n@@ -512,6 +512,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     let i = Impl {\n                         unsafety: unsafety,\n                         polarity: polarity,\n+                        defaultness: defaultness,\n                         generics: gen.clone(),\n                         trait_: tr.clone(),\n                         for_: ty.clone(),"}, {"sha": "e5bb02fe08230253ddfa15006aa864a9879c0a9d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -1852,6 +1852,7 @@ pub enum ItemKind {\n     /// E.g. `impl<A> Foo<A> { .. }` or `impl<A> Trait for Foo<A> { .. }`\n     Impl(Unsafety,\n              ImplPolarity,\n+             Defaultness,\n              Generics,\n              Option<TraitRef>, // (optional) trait this impl implements\n              P<Ty>, // self"}, {"sha": "152a4e7ee1add2b01a477aaf07afef124bcbb900", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -1215,7 +1215,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                     and possibly buggy\");\n             }\n \n-            ast::ItemKind::Impl(_, polarity, _, _, _, _) => {\n+            ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, _) => {\n                 match polarity {\n                     ast::ImplPolarity::Negative => {\n                         gate_feature_post!(&self, optin_builtin_traits,\n@@ -1225,6 +1225,15 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     },\n                     _ => {}\n                 }\n+\n+                match defaultness {\n+                    ast::Defaultness::Default => {\n+                        gate_feature_post!(&self, specialization,\n+                                      i.span,\n+                                      \"specialization is unstable\");\n+                    }\n+                    _ => {}\n+                }\n             }\n \n             _ => {}"}, {"sha": "58cf50cdc000ce3026dda2ad2ec1814926237378", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -897,9 +897,16 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n         ItemKind::DefaultImpl(unsafety, ref trait_ref) => {\n             ItemKind::DefaultImpl(unsafety, folder.fold_trait_ref((*trait_ref).clone()))\n         }\n-        ItemKind::Impl(unsafety, polarity, generics, ifce, ty, impl_items) => ItemKind::Impl(\n+        ItemKind::Impl(unsafety,\n+                       polarity,\n+                       defaultness,\n+                       generics,\n+                       ifce,\n+                       ty,\n+                       impl_items) => ItemKind::Impl(\n             unsafety,\n             polarity,\n+            defaultness,\n             folder.fold_generics(generics),\n             ifce.map(|trait_ref| folder.fold_trait_ref(trait_ref.clone())),\n             folder.fold_ty(ty),"}, {"sha": "58f81c8b3d7516903c2d608d13466b0c09e5a895", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -4863,7 +4863,9 @@ impl<'a> Parser<'a> {\n     ///    impl<T> Foo { ... }\n     ///    impl<T> ToString for &'static T { ... }\n     ///    impl Send for .. {}\n-    fn parse_item_impl(&mut self, unsafety: ast::Unsafety) -> PResult<'a, ItemInfo> {\n+    fn parse_item_impl(&mut self,\n+                       unsafety: ast::Unsafety,\n+                       defaultness: Defaultness) -> PResult<'a, ItemInfo> {\n         let impl_span = self.span;\n \n         // First, parse type parameters if necessary.\n@@ -4944,7 +4946,7 @@ impl<'a> Parser<'a> {\n             }\n \n             Ok((keywords::Invalid.ident(),\n-             ItemKind::Impl(unsafety, polarity, generics, opt_trait, ty, impl_items),\n+             ItemKind::Impl(unsafety, polarity, defaultness, generics, opt_trait, ty, impl_items),\n              Some(attrs)))\n         }\n     }\n@@ -5756,13 +5758,19 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return Ok(Some(item));\n         }\n-        if self.check_keyword(keywords::Unsafe) &&\n-            self.look_ahead(1, |t| t.is_keyword(keywords::Impl))\n+        if (self.check_keyword(keywords::Unsafe) &&\n+            self.look_ahead(1, |t| t.is_keyword(keywords::Impl))) ||\n+           (self.check_keyword(keywords::Default) &&\n+            self.look_ahead(1, |t| t.is_keyword(keywords::Unsafe)) &&\n+            self.look_ahead(2, |t| t.is_keyword(keywords::Impl)))\n         {\n             // IMPL ITEM\n+            let defaultness = self.parse_defaultness()?;\n             self.expect_keyword(keywords::Unsafe)?;\n             self.expect_keyword(keywords::Impl)?;\n-            let (ident, item_, extra_attrs) = self.parse_item_impl(ast::Unsafety::Unsafe)?;\n+            let (ident,\n+                 item_,\n+                 extra_attrs) = self.parse_item_impl(ast::Unsafety::Unsafe, defaultness)?;\n             let prev_span = self.prev_span;\n             let item = self.mk_item(lo.to(prev_span),\n                                     ident,\n@@ -5856,9 +5864,16 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return Ok(Some(item));\n         }\n-        if self.eat_keyword(keywords::Impl) {\n+        if (self.check_keyword(keywords::Impl)) ||\n+           (self.check_keyword(keywords::Default) &&\n+            self.look_ahead(1, |t| t.is_keyword(keywords::Impl)))\n+        {\n             // IMPL ITEM\n-            let (ident, item_, extra_attrs) = self.parse_item_impl(ast::Unsafety::Normal)?;\n+            let defaultness = self.parse_defaultness()?;\n+            self.expect_keyword(keywords::Impl)?;\n+            let (ident,\n+                 item_,\n+                 extra_attrs) = self.parse_item_impl(ast::Unsafety::Normal, defaultness)?;\n             let prev_span = self.prev_span;\n             let item = self.mk_item(lo.to(prev_span),\n                                     ident,"}, {"sha": "a911c21ed98d05e890c3c84e0c2b86667567c9e7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -1317,12 +1317,14 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::Impl(unsafety,\n                           polarity,\n+                          defaultness,\n                           ref generics,\n                           ref opt_trait,\n                           ref ty,\n                           ref impl_items) => {\n                 self.head(\"\")?;\n                 self.print_visibility(&item.vis)?;\n+                self.print_defaultness(defaultness)?;\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"impl\")?;\n \n@@ -1477,6 +1479,13 @@ impl<'a> State<'a> {\n         }\n     }\n \n+    pub fn print_defaultness(&mut self, defatulness: ast::Defaultness) -> io::Result<()> {\n+        if let ast::Defaultness::Default = defatulness {\n+            try!(self.word_nbsp(\"default\"));\n+        }\n+        Ok(())\n+    }\n+\n     pub fn print_struct(&mut self,\n                         struct_def: &ast::VariantData,\n                         generics: &ast::Generics,\n@@ -1602,9 +1611,7 @@ impl<'a> State<'a> {\n         self.hardbreak_if_not_bol()?;\n         self.maybe_print_comment(ii.span.lo)?;\n         self.print_outer_attributes(&ii.attrs)?;\n-        if let ast::Defaultness::Default = ii.defaultness {\n-            self.word_nbsp(\"default\")?;\n-        }\n+        self.print_defaultness(ii.defaultness)?;\n         match ii.node {\n             ast::ImplItemKind::Const(ref ty, ref expr) => {\n                 self.print_associated_const(ii.ident, &ty, Some(&expr), &ii.vis)?;"}, {"sha": "2e42c6986e64e1d527af2b5699958e6c98e144c5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -266,7 +266,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n         ItemKind::DefaultImpl(_, ref trait_ref) => {\n             visitor.visit_trait_ref(trait_ref)\n         }\n-        ItemKind::Impl(_, _,\n+        ItemKind::Impl(_, _, _,\n                  ref type_parameters,\n                  ref opt_trait_reference,\n                  ref typ,"}, {"sha": "be7883cad5f38ca52bda1c23a70b7dc4e49bded9", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -658,6 +658,7 @@ impl<'a> TraitDef<'a> {\n                 a,\n                 ast::ItemKind::Impl(unsafety,\n                                     ast::ImplPolarity::Positive,\n+                                    ast::Defaultness::Final,\n                                     trait_generics,\n                                     opt_trait_ref,\n                                     self_type,"}, {"sha": "da282f1bb7277b4d30fa1599ee29ad8eb4dd2a92", "filename": "src/rt/hoedown", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fhoedown?ref=15ce54096a589de277771ad1f55a334fe2661a64", "patch": "@@ -1 +0,0 @@\n-Subproject commit da282f1bb7277b4d30fa1599ee29ad8eb4dd2a92"}, {"sha": "ad55f44255b48eec4d3896f532ccd9c4893acf2e", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-default-projection.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-projection.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+// Make sure we can't project defaulted associated types\n+\n+trait Foo {\n+    type Assoc;\n+}\n+\n+default impl<T> Foo for T {\n+    type Assoc = ();\n+}\n+\n+impl Foo for u8 {\n+    type Assoc = String;\n+}\n+\n+fn generic<T>() -> <T as Foo>::Assoc {\n+    // `T` could be some downstream crate type that specializes (or,\n+    // for that matter, `u8`).\n+\n+    () //~ ERROR mismatched types\n+}\n+\n+fn monomorphic() -> () {\n+    // Even though we know that `()` is not specialized in a\n+    // downstream crate, typeck refuses to project here.\n+\n+    generic::<()>() //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+    // No error here, we CAN project from `u8`, as there is no `default`\n+    // in that impl.\n+    let s: String = generic::<u8>();\n+    println!(\"{}\", s); // bad news if this all compiles\n+}"}, {"sha": "7353f7ac8c5c0c38bed49d14b7e70d24f7874660", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-default-types.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-types.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// It should not be possible to use the concrete value of a defaulted\n+// associated type in the impl defining it -- otherwise, what happens\n+// if it's overridden?\n+\n+#![feature(specialization)]\n+\n+trait Example {\n+    type Output;\n+    fn generate(self) -> Self::Output;\n+}\n+\n+default impl<T> Example for T {\n+    type Output = Box<T>;\n+    fn generate(self) -> Self::Output {\n+        Box::new(self) //~ ERROR mismatched types\n+    }\n+}\n+\n+impl Example for bool {\n+    type Output = bool;\n+    fn generate(self) -> bool { self }\n+}\n+\n+fn trouble<T>(t: T) -> Box<T> {\n+    Example::generate(t) //~ ERROR mismatched types\n+}\n+\n+fn weaponize() -> bool {\n+    let b: Box<bool> = trouble(true);\n+    *b\n+}\n+\n+fn main() {\n+    weaponize();\n+}"}, {"sha": "5bab4c5438e51c2708e038c156fd28c0df2c8662", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-feature-gate-default.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-feature-gate-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-feature-gate-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-feature-gate-default.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that specialization must be ungated to use the `default` keyword\n+\n+trait Foo {\n+    fn foo(&self);\n+}\n+\n+default impl<T> Foo for T { //~ ERROR specialization is unstable\n+    fn foo(&self) {}\n+}\n+\n+fn main() {}"}, {"sha": "2874108157d832e73bbd50cb6de5222d568c35a0", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-no-default.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,95 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+// Check a number of scenarios in which one impl tries to override another,\n+// without correctly using `default`.\n+\n+////////////////////////////////////////////////////////////////////////////////\n+// Test 1: one layer of specialization, multiple methods, missing `default`\n+////////////////////////////////////////////////////////////////////////////////\n+\n+trait Foo {\n+    fn foo(&self);\n+    fn bar(&self);\n+}\n+\n+impl<T> Foo for T {\n+    fn foo(&self) {}\n+    fn bar(&self) {}\n+}\n+\n+impl Foo for u8 {}\n+impl Foo for u16 {\n+    fn foo(&self) {} //~ ERROR E0520\n+}\n+impl Foo for u32 {\n+    fn bar(&self) {} //~ ERROR E0520\n+}\n+\n+////////////////////////////////////////////////////////////////////////////////\n+// Test 2: one layer of specialization, missing `default` on associated type\n+////////////////////////////////////////////////////////////////////////////////\n+\n+trait Bar {\n+    type T;\n+}\n+\n+impl<T> Bar for T {\n+    type T = u8;\n+}\n+\n+impl Bar for u8 {\n+    type T = (); //~ ERROR E0520\n+}\n+\n+////////////////////////////////////////////////////////////////////////////////\n+// Test 3a: multiple layers of specialization, missing interior `default`\n+////////////////////////////////////////////////////////////////////////////////\n+\n+trait Baz {\n+    fn baz(&self);\n+}\n+\n+default impl<T> Baz for T {\n+    fn baz(&self) {}\n+}\n+\n+impl<T: Clone> Baz for T {\n+    fn baz(&self) {}\n+}\n+\n+impl Baz for i32 {\n+    fn baz(&self) {} //~ ERROR E0520\n+}\n+\n+////////////////////////////////////////////////////////////////////////////////\n+// Test 3b: multiple layers of specialization, missing interior `default`,\n+// redundant `default` in bottom layer.\n+////////////////////////////////////////////////////////////////////////////////\n+\n+trait Redundant {\n+    fn redundant(&self);\n+}\n+\n+default impl<T> Redundant for T {\n+    fn redundant(&self) {}\n+}\n+\n+impl<T: Clone> Redundant for T {\n+    fn redundant(&self) {}\n+}\n+\n+default impl Redundant for i32 {\n+    fn redundant(&self) {} //~ ERROR E0520\n+}\n+\n+fn main() {}"}, {"sha": "dd060f8ef40dca8ceb23b9bf74b7b4f39458162f", "filename": "src/test/run-pass/specialization/defaultimpl/auxiliary/go_trait.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fgo_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fgo_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fgo_trait.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+// Common code used for tests that model the Fn/FnMut/FnOnce hierarchy.\n+\n+pub trait Go {\n+    fn go(&self, arg: isize);\n+}\n+\n+pub fn go<G:Go>(this: &G, arg: isize) {\n+    this.go(arg)\n+}\n+\n+pub trait GoMut {\n+    fn go_mut(&mut self, arg: isize);\n+}\n+\n+pub fn go_mut<G:GoMut>(this: &mut G, arg: isize) {\n+    this.go_mut(arg)\n+}\n+\n+pub trait GoOnce {\n+    fn go_once(self, arg: isize);\n+}\n+\n+pub fn go_once<G:GoOnce>(this: G, arg: isize) {\n+    this.go_once(arg)\n+}\n+\n+default impl<G> GoMut for G\n+    where G : Go\n+{\n+    fn go_mut(&mut self, arg: isize) {\n+        go(&*self, arg)\n+    }\n+}\n+\n+default impl<G> GoOnce for G\n+    where G : GoMut\n+{\n+    fn go_once(mut self, arg: isize) {\n+        go_mut(&mut self, arg)\n+    }\n+}"}, {"sha": "71dd7c99009ea5a0920c0e35bf943e69c4316b55", "filename": "src/test/run-pass/specialization/defaultimpl/auxiliary/specialization_cross_crate.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fspecialization_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fspecialization_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fspecialization_cross_crate.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,82 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+pub trait Foo {\n+    fn foo(&self) -> &'static str;\n+}\n+\n+default impl<T> Foo for T {\n+    fn foo(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+\n+default impl<T: Clone> Foo for T {\n+    fn foo(&self) -> &'static str {\n+        \"generic Clone\"\n+    }\n+}\n+\n+default impl<T, U> Foo for (T, U) where T: Clone, U: Clone {\n+    fn foo(&self) -> &'static str {\n+        \"generic pair\"\n+    }\n+}\n+\n+default impl<T: Clone> Foo for (T, T) {\n+    fn foo(&self) -> &'static str {\n+        \"generic uniform pair\"\n+    }\n+}\n+\n+default impl Foo for (u8, u32) {\n+    fn foo(&self) -> &'static str {\n+        \"(u8, u32)\"\n+    }\n+}\n+\n+default impl Foo for (u8, u8) {\n+    fn foo(&self) -> &'static str {\n+        \"(u8, u8)\"\n+    }\n+}\n+\n+default impl<T: Clone> Foo for Vec<T> {\n+    fn foo(&self) -> &'static str {\n+        \"generic Vec\"\n+    }\n+}\n+\n+impl Foo for Vec<i32> {\n+    fn foo(&self) -> &'static str {\n+        \"Vec<i32>\"\n+    }\n+}\n+\n+impl Foo for String {\n+    fn foo(&self) -> &'static str {\n+        \"String\"\n+    }\n+}\n+\n+impl Foo for i32 {\n+    fn foo(&self) -> &'static str {\n+        \"i32\"\n+    }\n+}\n+\n+pub trait MyMarker {}\n+default impl<T: Clone + MyMarker> Foo for T {\n+    fn foo(&self) -> &'static str {\n+        \"generic Clone + MyMarker\"\n+    }\n+}"}, {"sha": "9d0ea64fed428d6cefe7beb02a8ddd0ee5f1ad4d", "filename": "src/test/run-pass/specialization/defaultimpl/auxiliary/specialization_cross_crate_defaults.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fspecialization_cross_crate_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fspecialization_cross_crate_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fspecialization_cross_crate_defaults.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(specialization)]\n+\n+// First, test only use of explicit `default` items:\n+\n+pub trait Foo {\n+    fn foo(&self) -> bool;\n+}\n+\n+default impl<T> Foo for T {\n+    fn foo(&self) -> bool { false }\n+}\n+\n+impl Foo for i32 {}\n+\n+impl Foo for i64 {\n+    fn foo(&self) -> bool { true }\n+}\n+\n+// Next, test mixture of explicit `default` and provided methods:\n+\n+pub trait Bar {\n+    fn bar(&self) -> i32 { 0 }\n+}\n+\n+impl<T> Bar for T {} // use the provided method\n+\n+impl Bar for i32 {\n+    fn bar(&self) -> i32 { 1 }\n+}\n+impl<'a> Bar for &'a str {}\n+\n+default impl<T> Bar for Vec<T> {\n+    fn bar(&self) -> i32 { 2 }\n+}\n+impl Bar for Vec<i32> {}\n+impl Bar for Vec<i64> {\n+    fn bar(&self) -> i32 { 3 }\n+}"}, {"sha": "6b999f3835835af47943f4f065fafc89bca17aed", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-allowed-cross-crate.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-allowed-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-allowed-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-allowed-cross-crate.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:go_trait.rs\n+\n+#![feature(specialization)]\n+\n+extern crate go_trait;\n+\n+use go_trait::{Go,GoMut};\n+use std::fmt::Debug;\n+use std::default::Default;\n+\n+struct MyThingy;\n+\n+impl Go for MyThingy {\n+    fn go(&self, arg: isize) { }\n+}\n+\n+impl GoMut for MyThingy {\n+    fn go_mut(&mut self, arg: isize) { }\n+}\n+\n+fn main() { }"}, {"sha": "b99ba3d0f1c931987f4e5ec228c085eea8481568", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-assoc-fns.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-assoc-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-assoc-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-assoc-fns.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that non-method associated functions can be specialized\n+\n+#![feature(specialization)]\n+\n+trait Foo {\n+    fn mk() -> Self;\n+}\n+\n+default impl<T: Default> Foo for T {\n+    fn mk() -> T {\n+        T::default()\n+    }\n+}\n+\n+impl Foo for Vec<u8> {\n+    fn mk() -> Vec<u8> {\n+        vec![0]\n+    }\n+}\n+\n+fn main() {\n+    let v1: Vec<i32> = Foo::mk();\n+    let v2: Vec<u8> = Foo::mk();\n+\n+    assert!(v1.len() == 0);\n+    assert!(v2.len() == 1);\n+}"}, {"sha": "594f1e4fcdfc26b834c9bea5f57cd3482653b6d0", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-basics.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-basics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-basics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-basics.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,106 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+// Tests a variety of basic specialization scenarios and method\n+// dispatch for them.\n+\n+trait Foo {\n+    fn foo(&self) -> &'static str;\n+}\n+\n+default impl<T> Foo for T {\n+    fn foo(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+\n+default impl<T: Clone> Foo for T {\n+    fn foo(&self) -> &'static str {\n+        \"generic Clone\"\n+    }\n+}\n+\n+default impl<T, U> Foo for (T, U) where T: Clone, U: Clone {\n+    fn foo(&self) -> &'static str {\n+        \"generic pair\"\n+    }\n+}\n+\n+default impl<T: Clone> Foo for (T, T) {\n+    fn foo(&self) -> &'static str {\n+        \"generic uniform pair\"\n+    }\n+}\n+\n+default impl Foo for (u8, u32) {\n+    fn foo(&self) -> &'static str {\n+        \"(u8, u32)\"\n+    }\n+}\n+\n+default impl Foo for (u8, u8) {\n+    fn foo(&self) -> &'static str {\n+        \"(u8, u8)\"\n+    }\n+}\n+\n+default impl<T: Clone> Foo for Vec<T> {\n+    fn foo(&self) -> &'static str {\n+        \"generic Vec\"\n+    }\n+}\n+\n+impl Foo for Vec<i32> {\n+    fn foo(&self) -> &'static str {\n+        \"Vec<i32>\"\n+    }\n+}\n+\n+impl Foo for String {\n+    fn foo(&self) -> &'static str {\n+        \"String\"\n+    }\n+}\n+\n+impl Foo for i32 {\n+    fn foo(&self) -> &'static str {\n+        \"i32\"\n+    }\n+}\n+\n+struct NotClone;\n+\n+trait MyMarker {}\n+default impl<T: Clone + MyMarker> Foo for T {\n+    fn foo(&self) -> &'static str {\n+        \"generic Clone + MyMarker\"\n+    }\n+}\n+\n+#[derive(Clone)]\n+struct MarkedAndClone;\n+impl MyMarker for MarkedAndClone {}\n+\n+fn  main() {\n+    assert!(NotClone.foo() == \"generic\");\n+    assert!(0u8.foo() == \"generic Clone\");\n+    assert!(vec![NotClone].foo() == \"generic\");\n+    assert!(vec![0u8].foo() == \"generic Vec\");\n+    assert!(vec![0i32].foo() == \"Vec<i32>\");\n+    assert!(0i32.foo() == \"i32\");\n+    assert!(String::new().foo() == \"String\");\n+    assert!(((), 0).foo() == \"generic pair\");\n+    assert!(((), ()).foo() == \"generic uniform pair\");\n+    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n+    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n+    assert!(MarkedAndClone.foo() == \"generic Clone + MyMarker\");\n+}"}, {"sha": "62c7e3e2e4431065f1d282c8340d7c4037489e40", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-cross-crate-defaults.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-cross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-cross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-cross-crate-defaults.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:specialization_cross_crate_defaults.rs\n+\n+#![feature(specialization)]\n+\n+extern crate specialization_cross_crate_defaults;\n+\n+use specialization_cross_crate_defaults::*;\n+\n+struct LocalDefault;\n+struct LocalOverride;\n+\n+impl Foo for LocalDefault {}\n+\n+impl Foo for LocalOverride {\n+    fn foo(&self) -> bool { true }\n+}\n+\n+fn test_foo() {\n+    assert!(!0i8.foo());\n+    assert!(!0i32.foo());\n+    assert!(0i64.foo());\n+\n+    assert!(!LocalDefault.foo());\n+    assert!(LocalOverride.foo());\n+}\n+\n+fn test_bar() {\n+    assert!(0u8.bar() == 0);\n+    assert!(0i32.bar() == 1);\n+    assert!(\"hello\".bar() == 0);\n+    assert!(vec![()].bar() == 2);\n+    assert!(vec![0i32].bar() == 2);\n+    assert!(vec![0i64].bar() == 3);\n+}\n+\n+fn main() {\n+    test_foo();\n+    test_bar();\n+}"}, {"sha": "b9548539e16490b1fea6deae8f68531571cd8809", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-cross-crate-no-gate.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-cross-crate-no-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-cross-crate-no-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-cross-crate-no-gate.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that specialization works even if only the upstream crate enables it\n+\n+// aux-build:specialization_cross_crate.rs\n+\n+extern crate specialization_cross_crate;\n+\n+use specialization_cross_crate::*;\n+\n+fn  main() {\n+    assert!(0u8.foo() == \"generic Clone\");\n+    assert!(vec![0u8].foo() == \"generic Vec\");\n+    assert!(vec![0i32].foo() == \"Vec<i32>\");\n+    assert!(0i32.foo() == \"i32\");\n+    assert!(String::new().foo() == \"String\");\n+    assert!(((), 0).foo() == \"generic pair\");\n+    assert!(((), ()).foo() == \"generic uniform pair\");\n+    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n+    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n+}"}, {"sha": "7517824b62bba4329007a2fe03bfebd04cc3690a", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-cross-crate.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-cross-crate.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:specialization_cross_crate.rs\n+\n+#![feature(specialization)]\n+\n+extern crate specialization_cross_crate;\n+\n+use specialization_cross_crate::*;\n+\n+struct NotClone;\n+\n+#[derive(Clone)]\n+struct MarkedAndClone;\n+impl MyMarker for MarkedAndClone {}\n+\n+struct MyType<T>(T);\n+default impl<T> Foo for MyType<T> {\n+    fn foo(&self) -> &'static str {\n+        \"generic MyType\"\n+    }\n+}\n+\n+impl Foo for MyType<u8> {\n+    fn foo(&self) -> &'static str {\n+        \"MyType<u8>\"\n+    }\n+}\n+\n+struct MyOtherType;\n+impl Foo for MyOtherType {}\n+\n+fn  main() {\n+    assert!(NotClone.foo() == \"generic\");\n+    assert!(0u8.foo() == \"generic Clone\");\n+    assert!(vec![NotClone].foo() == \"generic\");\n+    assert!(vec![0u8].foo() == \"generic Vec\");\n+    assert!(vec![0i32].foo() == \"Vec<i32>\");\n+    assert!(0i32.foo() == \"i32\");\n+    assert!(String::new().foo() == \"String\");\n+    assert!(((), 0).foo() == \"generic pair\");\n+    assert!(((), ()).foo() == \"generic uniform pair\");\n+    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n+    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n+    assert!(MarkedAndClone.foo() == \"generic Clone + MyMarker\");\n+\n+    assert!(MyType(()).foo() == \"generic MyType\");\n+    assert!(MyType(0u8).foo() == \"MyType<u8>\");\n+    assert!(MyOtherType.foo() == \"generic\");\n+}"}, {"sha": "4ac9afc1c897fa27e4fcfe357475985563a4f588", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-default-methods.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-methods.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,94 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+// Test that default methods are cascaded correctly\n+\n+// First, test only use of explicit `default` items:\n+\n+trait Foo {\n+    fn foo(&self) -> bool;\n+}\n+\n+// Specialization tree for Foo:\n+//\n+//        T\n+//       / \\\n+//    i32   i64\n+\n+default impl<T> Foo for T {\n+    fn foo(&self) -> bool { false }\n+}\n+\n+impl Foo for i32 {}\n+\n+impl Foo for i64 {\n+    fn foo(&self) -> bool { true }\n+}\n+\n+fn test_foo() {\n+    assert!(!0i8.foo());\n+    assert!(!0i32.foo());\n+    assert!(0i64.foo());\n+}\n+\n+// Next, test mixture of explicit `default` and provided methods:\n+\n+trait Bar {\n+    fn bar(&self) -> i32 { 0 }\n+}\n+\n+// Specialization tree for Bar.\n+// Uses of $ designate that method is provided\n+//\n+//           $Bar   (the trait)\n+//             |\n+//             T\n+//            /|\\\n+//           / | \\\n+//          /  |  \\\n+//         /   |   \\\n+//        /    |    \\\n+//       /     |     \\\n+//     $i32   &str  $Vec<T>\n+//                    /\\\n+//                   /  \\\n+//            Vec<i32>  $Vec<i64>\n+\n+// use the provided method\n+impl<T> Bar for T {}\n+\n+impl Bar for i32 {\n+    fn bar(&self) -> i32 { 1 }\n+}\n+impl<'a> Bar for &'a str {}\n+\n+default impl<T> Bar for Vec<T> {\n+    fn bar(&self) -> i32 { 2 }\n+}\n+impl Bar for Vec<i32> {}\n+impl Bar for Vec<i64> {\n+    fn bar(&self) -> i32 { 3 }\n+}\n+\n+fn test_bar() {\n+    assert!(0u8.bar() == 0);\n+    assert!(0i32.bar() == 1);\n+    assert!(\"hello\".bar() == 0);\n+    assert!(vec![()].bar() == 2);\n+    assert!(vec![0i32].bar() == 2);\n+    assert!(vec![0i64].bar() == 3);\n+}\n+\n+fn main() {\n+    test_foo();\n+    test_bar();\n+}"}, {"sha": "f77b88e2f850ae622b604f8840e15e4ff0619896", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-out-of-order.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-out-of-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-out-of-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-out-of-order.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that you can list the more specific impl before the more general one.\n+\n+#![feature(specialization)]\n+\n+trait Foo {\n+    type Out;\n+}\n+\n+impl Foo for bool {\n+    type Out = ();\n+}\n+\n+default impl<T> Foo for T {\n+    type Out = bool;\n+}\n+\n+fn main() {}"}, {"sha": "500cded38c1adfc154a6dae17960e514c2d2d06c", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-overlap-projection.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-overlap-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-overlap-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-overlap-projection.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that impls on projected self types can resolve overlap, even when the\n+// projections involve specialization, so long as the associated type is\n+// provided by the most specialized impl.\n+\n+#![feature(specialization)]\n+\n+trait Assoc {\n+    type Output;\n+}\n+\n+default impl<T> Assoc for T {\n+    type Output = bool;\n+}\n+\n+impl Assoc for u8 { type Output = u8; }\n+impl Assoc for u16 { type Output = u16; }\n+\n+trait Foo {}\n+impl Foo for u32 {}\n+impl Foo for <u8 as Assoc>::Output {}\n+impl Foo for <u16 as Assoc>::Output {}\n+\n+fn main() {}"}, {"sha": "2397c3e2bff5dbd5bde7a67a0ad79e168d5ea5cd", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-projection-alias.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-projection-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-projection-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-projection-alias.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+// Regression test for ICE when combining specialized associated types and type\n+// aliases\n+\n+trait Id_ {\n+    type Out;\n+}\n+\n+type Id<T> = <T as Id_>::Out;\n+\n+default impl<T> Id_ for T {\n+    type Out = T;\n+}\n+\n+fn test_proection() {\n+    let x: Id<bool> = panic!();\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "6a833ba6760f64ab7b6739904e1ee80e876cd9e4", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-projection.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e9831a57dd09b4c580c2f480064299137b0b0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-projection.rs?ref=116e9831a57dd09b4c580c2f480064299137b0b0", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+// Make sure we *can* project non-defaulted associated types\n+// cf compile-fail/specialization-default-projection.rs\n+\n+// First, do so without any use of specialization\n+\n+trait Foo {\n+    type Assoc;\n+}\n+\n+impl<T> Foo for T {\n+    type Assoc = ();\n+}\n+\n+fn generic_foo<T>() -> <T as Foo>::Assoc {\n+    ()\n+}\n+\n+// Next, allow for one layer of specialization\n+\n+trait Bar {\n+    type Assoc;\n+}\n+\n+default impl<T> Bar for T {\n+    type Assoc = ();\n+}\n+\n+impl<T: Clone> Bar for T {\n+    type Assoc = u8;\n+}\n+\n+fn generic_bar_clone<T: Clone>() -> <T as Bar>::Assoc {\n+    0u8\n+}\n+\n+fn main() {\n+}"}]}