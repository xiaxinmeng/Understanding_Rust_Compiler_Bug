{"sha": "8b87e85394aa583b01e53aef06343dd0749a3324", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiODdlODUzOTRhYTU4M2IwMWU1M2FlZjA2MzQzZGQwNzQ5YTMzMjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-08T20:19:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-08T20:19:00Z"}, "message": "Auto merge of #86930 - tspiteri:int_log10, r=kennytm\n\nspecial case for integer log10\n\nNow that #80918 has been merged, this PR provides a faster version of `log10`.\n\nThe PR also adds some tests for values close to all powers of 10.", "tree": {"sha": "8268032841856f0ae88c992936e8b2992832e417", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8268032841856f0ae88c992936e8b2992832e417"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b87e85394aa583b01e53aef06343dd0749a3324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b87e85394aa583b01e53aef06343dd0749a3324", "html_url": "https://github.com/rust-lang/rust/commit/8b87e85394aa583b01e53aef06343dd0749a3324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b87e85394aa583b01e53aef06343dd0749a3324/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "html_url": "https://github.com/rust-lang/rust/commit/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd"}, {"sha": "ed76c11202c66154a5779f45a9ac70eeccdc9d8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed76c11202c66154a5779f45a9ac70eeccdc9d8b", "html_url": "https://github.com/rust-lang/rust/commit/ed76c11202c66154a5779f45a9ac70eeccdc9d8b"}], "stats": {"total": 201, "additions": 198, "deletions": 3}, "files": [{"sha": "a23ca51ef87d023731b027748cdf74e261d61209", "filename": "library/core/src/num/int_log10.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/8b87e85394aa583b01e53aef06343dd0749a3324/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b87e85394aa583b01e53aef06343dd0749a3324/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs?ref=8b87e85394aa583b01e53aef06343dd0749a3324", "patch": "@@ -0,0 +1,134 @@\n+mod unchecked {\n+    // 0 < val <= u8::MAX\n+    pub const fn u8(val: u8) -> u32 {\n+        if val >= 100 {\n+            2\n+        } else if val >= 10 {\n+            1\n+        } else {\n+            0\n+        }\n+    }\n+\n+    // 0 < val <= u16::MAX\n+    pub const fn u16(val: u16) -> u32 {\n+        if val >= 10_000 {\n+            4\n+        } else if val >= 1000 {\n+            3\n+        } else if val >= 100 {\n+            2\n+        } else if val >= 10 {\n+            1\n+        } else {\n+            0\n+        }\n+    }\n+\n+    // 0 < val < 100_000_000\n+    const fn less_than_8(mut val: u32) -> u32 {\n+        let mut log = 0;\n+        if val >= 10_000 {\n+            val /= 10_000;\n+            log += 4;\n+        }\n+        log + if val >= 1000 {\n+            3\n+        } else if val >= 100 {\n+            2\n+        } else if val >= 10 {\n+            1\n+        } else {\n+            0\n+        }\n+    }\n+\n+    // 0 < val <= u32::MAX\n+    pub const fn u32(mut val: u32) -> u32 {\n+        let mut log = 0;\n+        if val >= 100_000_000 {\n+            val /= 100_000_000;\n+            log += 8;\n+        }\n+        log + less_than_8(val)\n+    }\n+\n+    // 0 < val < 10_000_000_000_000_000\n+    const fn less_than_16(mut val: u64) -> u32 {\n+        let mut log = 0;\n+        if val >= 100_000_000 {\n+            val /= 100_000_000;\n+            log += 8;\n+        }\n+        log + less_than_8(val as u32)\n+    }\n+\n+    // 0 < val <= u64::MAX\n+    pub const fn u64(mut val: u64) -> u32 {\n+        let mut log = 0;\n+        if val >= 10_000_000_000_000_000 {\n+            val /= 10_000_000_000_000_000;\n+            log += 16;\n+        }\n+        log + less_than_16(val)\n+    }\n+\n+    // 0 < val <= u128::MAX\n+    pub const fn u128(mut val: u128) -> u32 {\n+        let mut log = 0;\n+        if val >= 100_000_000_000_000_000_000_000_000_000_000 {\n+            val /= 100_000_000_000_000_000_000_000_000_000_000;\n+            log += 32;\n+            return log + less_than_8(val as u32);\n+        }\n+        if val >= 10_000_000_000_000_000 {\n+            val /= 10_000_000_000_000_000;\n+            log += 16;\n+        }\n+        log + less_than_16(val as u64)\n+    }\n+\n+    // 0 < val <= i8::MAX\n+    pub const fn i8(val: i8) -> u32 {\n+        u8(val as u8)\n+    }\n+\n+    // 0 < val <= i16::MAX\n+    pub const fn i16(val: i16) -> u32 {\n+        u16(val as u16)\n+    }\n+\n+    // 0 < val <= i32::MAX\n+    pub const fn i32(val: i32) -> u32 {\n+        u32(val as u32)\n+    }\n+\n+    // 0 < val <= i64::MAX\n+    pub const fn i64(val: i64) -> u32 {\n+        u64(val as u64)\n+    }\n+\n+    // 0 < val <= i128::MAX\n+    pub const fn i128(val: i128) -> u32 {\n+        u128(val as u128)\n+    }\n+}\n+\n+macro_rules! impl_checked {\n+    ($T:ident) => {\n+        pub const fn $T(val: $T) -> Option<$T> {\n+            if val > 0 { Some(unchecked::$T(val) as $T) } else { None }\n+        }\n+    };\n+}\n+\n+impl_checked! { u8 }\n+impl_checked! { u16 }\n+impl_checked! { u32 }\n+impl_checked! { u64 }\n+impl_checked! { u128 }\n+impl_checked! { i8 }\n+impl_checked! { i16 }\n+impl_checked! { i32 }\n+impl_checked! { i64 }\n+impl_checked! { i128 }"}, {"sha": "982729388c87dc6ebbf918bbdd03685849c0abb0", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b87e85394aa583b01e53aef06343dd0749a3324/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b87e85394aa583b01e53aef06343dd0749a3324/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=8b87e85394aa583b01e53aef06343dd0749a3324", "patch": "@@ -1929,7 +1929,10 @@ macro_rules! int_impl {\n                         without modifying the original\"]\n         #[inline]\n         pub const fn checked_log10(self) -> Option<Self> {\n-            self.checked_log(10)\n+            match int_log10::$ActualT(self as $ActualT) {\n+                Some(s) => Some(s as Self),\n+                None => None,\n+            }\n         }\n \n         /// Computes the absolute value of `self`."}, {"sha": "26d84a60702c56b30dfd8f8918021627d9882b18", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b87e85394aa583b01e53aef06343dd0749a3324/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b87e85394aa583b01e53aef06343dd0749a3324/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=8b87e85394aa583b01e53aef06343dd0749a3324", "patch": "@@ -41,6 +41,7 @@ mod int_macros; // import int_impl!\n mod uint_macros; // import uint_impl!\n \n mod error;\n+mod int_log10;\n mod nonzero;\n mod wrapping;\n "}, {"sha": "ca1b05fdfbe48a779471995dd7709c9a8baf7d38", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b87e85394aa583b01e53aef06343dd0749a3324/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b87e85394aa583b01e53aef06343dd0749a3324/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=8b87e85394aa583b01e53aef06343dd0749a3324", "patch": "@@ -1,5 +1,5 @@\n macro_rules! uint_impl {\n-    ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr,\n+    ($SelfT:ty, $ActualT:ident, $BITS:expr, $MaxV:expr,\n         $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n         $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n         $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n@@ -819,7 +819,10 @@ macro_rules! uint_impl {\n                         without modifying the original\"]\n         #[inline]\n         pub const fn checked_log10(self) -> Option<Self> {\n-            self.checked_log(10)\n+            match int_log10::$ActualT(self as $ActualT) {\n+                Some(s) => Some(s as Self),\n+                None => None,\n+            }\n         }\n \n         /// Checked negation. Computes `-self`, returning `None` unless `self =="}, {"sha": "51122c11ce1e29bc19a40e37091e4b1bc1b3cf8e", "filename": "library/core/tests/num/int_log.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8b87e85394aa583b01e53aef06343dd0749a3324/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b87e85394aa583b01e53aef06343dd0749a3324/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs?ref=8b87e85394aa583b01e53aef06343dd0749a3324", "patch": "@@ -97,3 +97,57 @@ fn checked_log10() {\n         assert_eq!(i.checked_log10(), Some((i as f32).log10() as u16));\n     }\n }\n+\n+macro_rules! log10_loop {\n+    ($T:ty, $log10_max:expr) => {\n+        assert_eq!(<$T>::MAX.log10(), $log10_max);\n+        for i in 0..=$log10_max {\n+            let p = (10 as $T).pow(i as u32);\n+            if p >= 10 {\n+                assert_eq!((p - 9).log10(), i - 1);\n+                assert_eq!((p - 1).log10(), i - 1);\n+            }\n+            assert_eq!(p.log10(), i);\n+            assert_eq!((p + 1).log10(), i);\n+            if p >= 10 {\n+                assert_eq!((p + 9).log10(), i);\n+            }\n+\n+            // also check `x.log(10)`\n+            if p >= 10 {\n+                assert_eq!((p - 9).log(10), i - 1);\n+                assert_eq!((p - 1).log(10), i - 1);\n+            }\n+            assert_eq!(p.log(10), i);\n+            assert_eq!((p + 1).log(10), i);\n+            if p >= 10 {\n+                assert_eq!((p + 9).log(10), i);\n+            }\n+        }\n+    };\n+}\n+\n+#[test]\n+fn log10_u8() {\n+    log10_loop! { u8, 2 }\n+}\n+\n+#[test]\n+fn log10_u16() {\n+    log10_loop! { u16, 4 }\n+}\n+\n+#[test]\n+fn log10_u32() {\n+    log10_loop! { u32, 9 }\n+}\n+\n+#[test]\n+fn log10_u64() {\n+    log10_loop! { u64, 19 }\n+}\n+\n+#[test]\n+fn log10_u128() {\n+    log10_loop! { u128, 38 }\n+}"}]}