{"sha": "99b96199a6f47a8ff97c0df8dda849b5f6f58abf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5Yjk2MTk5YTZmNDdhOGZmOTdjMGRmOGRkYTg0OWI1ZjZmNThhYmY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-21T03:15:23Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-14T02:42:12Z"}, "message": "Support effects for particular edges of `SwitchInt`", "tree": {"sha": "818b98caeaa29b019950a38932f3e27204b86487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/818b98caeaa29b019950a38932f3e27204b86487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99b96199a6f47a8ff97c0df8dda849b5f6f58abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99b96199a6f47a8ff97c0df8dda849b5f6f58abf", "html_url": "https://github.com/rust-lang/rust/commit/99b96199a6f47a8ff97c0df8dda849b5f6f58abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99b96199a6f47a8ff97c0df8dda849b5f6f58abf/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce56f622b4cea033ef339461db46a2ab61d29d13", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce56f622b4cea033ef339461db46a2ab61d29d13", "html_url": "https://github.com/rust-lang/rust/commit/ce56f622b4cea033ef339461db46a2ab61d29d13"}], "stats": {"total": 117, "additions": 110, "deletions": 7}, "files": [{"sha": "d41ef2a392cd6a92f21b042ed6402110cedbf601", "filename": "src/librustc_mir/dataflow/generic/engine.rs", "status": "modified", "additions": 70, "deletions": 5, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/99b96199a6f47a8ff97c0df8dda849b5f6f58abf/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b96199a6f47a8ff97c0df8dda849b5f6f58abf/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs?ref=99b96199a6f47a8ff97c0df8dda849b5f6f58abf", "patch": "@@ -5,7 +5,7 @@ use std::fs;\n use std::path::PathBuf;\n \n use rustc::mir::{self, traversal, BasicBlock, Location};\n-use rustc::ty::TyCtxt;\n+use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::work_queue::WorkQueue;\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n@@ -238,10 +238,15 @@ where\n                 }\n             }\n \n-            SwitchInt { ref targets, .. } => {\n-                for target in targets {\n-                    self.propagate_bits_into_entry_set_for(in_out, *target, dirty_list);\n-                }\n+            SwitchInt { ref targets, ref values, ref discr, .. } => {\n+                self.propagate_bits_into_switch_int_successors(\n+                    in_out,\n+                    (bb, bb_data),\n+                    dirty_list,\n+                    discr,\n+                    &*values,\n+                    &*targets,\n+                );\n             }\n \n             Call { cleanup, ref destination, ref func, ref args, .. } => {\n@@ -287,6 +292,66 @@ where\n             dirty_queue.insert(bb);\n         }\n     }\n+\n+    fn propagate_bits_into_switch_int_successors(\n+        &mut self,\n+        in_out: &mut BitSet<A::Idx>,\n+        (bb, bb_data): (BasicBlock, &mir::BasicBlockData<'tcx>),\n+        dirty_list: &mut WorkQueue<BasicBlock>,\n+        switch_on: &mir::Operand<'tcx>,\n+        values: &[u128],\n+        targets: &[BasicBlock],\n+    ) {\n+        match bb_data.statements.last().map(|stmt| &stmt.kind) {\n+            // Look at the last statement to see if it is an assignment of an enum discriminant to\n+            // the local that determines the target of a `SwitchInt` like so:\n+            //   _42 = discriminant(..)\n+            //   SwitchInt(_42, ..)\n+            Some(mir::StatementKind::Assign(box (lhs, mir::Rvalue::Discriminant(enum_))))\n+                if Some(lhs) == switch_on.place() =>\n+            {\n+                let adt = match enum_.ty(self.body, self.tcx).ty.kind {\n+                    ty::Adt(def, _) => def,\n+                    _ => bug!(\"Switch on discriminant of non-ADT\"),\n+                };\n+\n+                // MIR building adds discriminants to the `values` array in the same order as they\n+                // are yielded by `AdtDef::discriminants`. We rely on this to match each\n+                // discriminant in `values` to its corresponding variant in linear time.\n+                let mut tmp = BitSet::new_empty(in_out.domain_size());\n+                let mut discriminants = adt.discriminants(self.tcx);\n+                for (value, target) in values.iter().zip(targets.iter().copied()) {\n+                    let (variant_idx, _) =\n+                        discriminants.find(|&(_, discr)| discr.val == *value).expect(\n+                            \"Order of `AdtDef::discriminants` differed \\\n+                                 from that of `SwitchInt::values`\",\n+                        );\n+\n+                    tmp.overwrite(in_out);\n+                    self.analysis.apply_discriminant_switch_effect(\n+                        &mut tmp,\n+                        bb,\n+                        enum_,\n+                        adt,\n+                        variant_idx,\n+                    );\n+                    self.propagate_bits_into_entry_set_for(&tmp, target, dirty_list);\n+                }\n+\n+                std::mem::drop(tmp);\n+\n+                // Propagate dataflow state along the \"otherwise\" edge.\n+                let otherwise = targets.last().copied().unwrap();\n+                self.propagate_bits_into_entry_set_for(&in_out, otherwise, dirty_list);\n+            }\n+\n+            _ => {\n+                for target in targets.iter().copied() {\n+                    self.propagate_bits_into_entry_set_for(&in_out, target, dirty_list);\n+                }\n+            }\n+        }\n+    }\n }\n \n // Graphviz"}, {"sha": "0f606240aebe750948d3d73c8df77f6f53fa4630", "filename": "src/librustc_mir/dataflow/generic/mod.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/99b96199a6f47a8ff97c0df8dda849b5f6f58abf/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b96199a6f47a8ff97c0df8dda849b5f6f58abf/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs?ref=99b96199a6f47a8ff97c0df8dda849b5f6f58abf", "patch": "@@ -35,7 +35,8 @@\n use std::io;\n \n use rustc::mir::{self, BasicBlock, Location};\n-use rustc::ty::TyCtxt;\n+use rustc::ty::layout::VariantIdx;\n+use rustc::ty::{self, TyCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_index::vec::{Idx, IndexVec};\n@@ -172,7 +173,22 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n         return_place: &mir::Place<'tcx>,\n     );\n \n-    /// Calls the appropriate `Engine` constructor to find the fixpoint for this dataflow problem.\n+    /// Updates the current dataflow state with the effect of taking a particular branch in a\n+    /// `SwitchInt` terminator.\n+    ///\n+    /// Much like `apply_call_return_effect`, this effect is only propagated along a single\n+    /// outgoing edge from this basic block.\n+    fn apply_discriminant_switch_effect(\n+        &self,\n+        _state: &mut BitSet<Self::Idx>,\n+        _block: BasicBlock,\n+        _enum_place: &mir::Place<'tcx>,\n+        _adt: &ty::AdtDef,\n+        _variant: VariantIdx,\n+    ) {\n+    }\n+\n+    /// Creates an `Engine` to find the fixpoint for this dataflow problem.\n     ///\n     /// You shouldn't need to override this outside this module, since the combination of the\n     /// default impl and the one for all `A: GenKillAnalysis` will do the right thing.\n@@ -249,6 +265,17 @@ pub trait GenKillAnalysis<'tcx>: Analysis<'tcx> {\n         args: &[mir::Operand<'tcx>],\n         return_place: &mir::Place<'tcx>,\n     );\n+\n+    /// See `Analysis::apply_discriminant_switch_effect`.\n+    fn discriminant_switch_effect(\n+        &self,\n+        _state: &mut impl GenKill<Self::Idx>,\n+        _block: BasicBlock,\n+        _enum_place: &mir::Place<'tcx>,\n+        _adt: &ty::AdtDef,\n+        _variant: VariantIdx,\n+    ) {\n+    }\n }\n \n impl<A> Analysis<'tcx> for A\n@@ -302,6 +329,17 @@ where\n         self.call_return_effect(state, block, func, args, return_place);\n     }\n \n+    fn apply_discriminant_switch_effect(\n+        &self,\n+        state: &mut BitSet<Self::Idx>,\n+        block: BasicBlock,\n+        enum_place: &mir::Place<'tcx>,\n+        adt: &ty::AdtDef,\n+        variant: VariantIdx,\n+    ) {\n+        self.discriminant_switch_effect(state, block, enum_place, adt, variant);\n+    }\n+\n     fn into_engine(\n         self,\n         tcx: TyCtxt<'tcx>,"}]}