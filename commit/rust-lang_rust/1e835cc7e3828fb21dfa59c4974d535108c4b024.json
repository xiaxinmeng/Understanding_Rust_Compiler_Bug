{"sha": "1e835cc7e3828fb21dfa59c4974d535108c4b024", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlODM1Y2M3ZTM4MjhmYjIxZGZhNTljNDk3NGQ1MzUxMDhjNGIwMjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-07T07:12:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-07T07:12:16Z"}, "message": "auto merge of #19488 : jbranchaud/rust/add-btree-set-doctests, r=alexcrichton\n\nThere is already a test for `union` in the test namespace, but this commit adds a doctest that will appear in the rustdocs.\r\n\r\nSomeone on IRC said, *Write doctests!*, so here I am.\r\n\r\nI am not sure this is the best way to demonstrate the behavior of the union function, so I am open to suggestions for improving this. If I am on the right track I'd be glad to include similar doctests for `intersection`, `difference`, etc.", "tree": {"sha": "14df984e22f9bd45fa57d2069c5406a7fb824dca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14df984e22f9bd45fa57d2069c5406a7fb824dca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e835cc7e3828fb21dfa59c4974d535108c4b024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e835cc7e3828fb21dfa59c4974d535108c4b024", "html_url": "https://github.com/rust-lang/rust/commit/1e835cc7e3828fb21dfa59c4974d535108c4b024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e835cc7e3828fb21dfa59c4974d535108c4b024/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7d18b92f80e52462a5c086bb47252817e6b1b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d18b92f80e52462a5c086bb47252817e6b1b3d", "html_url": "https://github.com/rust-lang/rust/commit/f7d18b92f80e52462a5c086bb47252817e6b1b3d"}, {"sha": "451cc7e5c07ec50ff35b9447999cb3e990cef340", "url": "https://api.github.com/repos/rust-lang/rust/commits/451cc7e5c07ec50ff35b9447999cb3e990cef340", "html_url": "https://github.com/rust-lang/rust/commit/451cc7e5c07ec50ff35b9447999cb3e990cef340"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "3973b4774b3ae9bbfcb3fa08bfe40df4387ea2fe", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1e835cc7e3828fb21dfa59c4974d535108c4b024/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e835cc7e3828fb21dfa59c4974d535108c4b024/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=1e835cc7e3828fb21dfa59c4974d535108c4b024", "patch": "@@ -94,26 +94,92 @@ impl<T> BTreeSet<T> {\n \n impl<T: Ord> BTreeSet<T> {\n     /// Visits the values representing the difference, in ascending order.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut a = BTreeSet::new();\n+    /// a.insert(1u);\n+    /// a.insert(2u);\n+    ///\n+    /// let mut b = BTreeSet::new();\n+    /// b.insert(2u);\n+    /// b.insert(3u);\n+    ///\n+    /// let diff: Vec<uint> = a.difference(&b).cloned().collect();\n+    /// assert_eq!(diff, vec![1u]);\n+    /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn difference<'a>(&'a self, other: &'a BTreeSet<T>) -> DifferenceItems<'a, T> {\n         DifferenceItems{a: self.iter().peekable(), b: other.iter().peekable()}\n     }\n \n     /// Visits the values representing the symmetric difference, in ascending order.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut a = BTreeSet::new();\n+    /// a.insert(1u);\n+    /// a.insert(2u);\n+    ///\n+    /// let mut b = BTreeSet::new();\n+    /// b.insert(2u);\n+    /// b.insert(3u);\n+    ///\n+    /// let sym_diff: Vec<uint> = a.symmetric_difference(&b).cloned().collect();\n+    /// assert_eq!(sym_diff, vec![1u,3]);\n+    /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn symmetric_difference<'a>(&'a self, other: &'a BTreeSet<T>)\n         -> SymDifferenceItems<'a, T> {\n         SymDifferenceItems{a: self.iter().peekable(), b: other.iter().peekable()}\n     }\n \n     /// Visits the values representing the intersection, in ascending order.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut a = BTreeSet::new();\n+    /// a.insert(1u);\n+    /// a.insert(2u);\n+    ///\n+    /// let mut b = BTreeSet::new();\n+    /// b.insert(2u);\n+    /// b.insert(3u);\n+    ///\n+    /// let intersection: Vec<uint> = a.intersection(&b).cloned().collect();\n+    /// assert_eq!(intersection, vec![2u]);\n+    /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn intersection<'a>(&'a self, other: &'a BTreeSet<T>)\n         -> IntersectionItems<'a, T> {\n         IntersectionItems{a: self.iter().peekable(), b: other.iter().peekable()}\n     }\n \n     /// Visits the values representing the union, in ascending order.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut a = BTreeSet::new();\n+    /// a.insert(1u);\n+    ///\n+    /// let mut b = BTreeSet::new();\n+    /// b.insert(2u);\n+    ///\n+    /// let union: Vec<uint> = a.union(&b).cloned().collect();\n+    /// assert_eq!(union, vec![1u,2]);\n+    /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn union<'a>(&'a self, other: &'a BTreeSet<T>) -> UnionItems<'a, T> {\n         UnionItems{a: self.iter().peekable(), b: other.iter().peekable()}"}]}