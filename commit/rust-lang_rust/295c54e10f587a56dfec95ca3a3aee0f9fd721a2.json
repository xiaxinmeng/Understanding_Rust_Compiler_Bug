{"sha": "295c54e10f587a56dfec95ca3a3aee0f9fd721a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NWM1NGUxMGY1ODdhNTZkZmVjOTVjYTNhM2FlZTBmOWZkNzIxYTI=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-01-08T23:19:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-10T19:31:33Z"}, "message": "Remove the assumption that circular_buffer's buffer has a power of two size\n\nIt was not obvious how to make this implementation work when the unit size\nwas not also a power of two, so for now just make the buffer size a multiple\nof the unit size so it can pass all the tests.", "tree": {"sha": "74f9f227ed056f8132424989106019f534c3e0da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74f9f227ed056f8132424989106019f534c3e0da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/295c54e10f587a56dfec95ca3a3aee0f9fd721a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/295c54e10f587a56dfec95ca3a3aee0f9fd721a2", "html_url": "https://github.com/rust-lang/rust/commit/295c54e10f587a56dfec95ca3a3aee0f9fd721a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/295c54e10f587a56dfec95ca3a3aee0f9fd721a2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a077400d4cb1d3af0f70c654bbdef5c77fc1eb2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a077400d4cb1d3af0f70c654bbdef5c77fc1eb2f", "html_url": "https://github.com/rust-lang/rust/commit/a077400d4cb1d3af0f70c654bbdef5c77fc1eb2f"}], "stats": {"total": 118, "additions": 85, "deletions": 33}, "files": [{"sha": "142e7574743cb87193eb35cfd178c66eeec7a09a", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 51, "deletions": 25, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/295c54e10f587a56dfec95ca3a3aee0f9fd721a2/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/295c54e10f587a56dfec95ca3a3aee0f9fd721a2/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=295c54e10f587a56dfec95ca3a3aee0f9fd721a2", "patch": "@@ -4,20 +4,10 @@\n \n #include \"rust_internal.h\"\n \n-bool\n-is_power_of_two(size_t value) {\n-    if (value > 0) {\n-        return (value & (value - 1)) == 0;\n-    }\n-    return false;\n-}\n-\n circular_buffer::circular_buffer(rust_dom *dom, size_t unit_sz) :\n     dom(dom),\n     unit_sz(unit_sz),\n-    _initial_sz(next_power_of_two(\n-               INITIAL_CIRCULAR_BUFFFER_SIZE_IN_UNITS * unit_sz)),\n-    _buffer_sz(_initial_sz),\n+    _buffer_sz(INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS * unit_sz),\n     _next(0),\n     _unread(0),\n     _buffer((uint8_t *)dom->calloc(_buffer_sz)) {\n@@ -46,11 +36,27 @@ circular_buffer::~circular_buffer() {\n void\n circular_buffer::transfer(void *dst) {\n     I(dom, dst);\n-    I(dom, is_power_of_two(_buffer_sz));\n+    I(dom, _unread <= _buffer_sz);\n+\n     uint8_t *ptr = (uint8_t *) dst;\n-    for (size_t i = 0; i < _unread; i += unit_sz) {\n-        memcpy(&ptr[i], &_buffer[(_next + i) & (_buffer_sz - 1)], unit_sz);\n+\n+    // First copy from _next to either the end of the unread\n+    // items or the end of the buffer\n+    size_t head_sz;\n+    if (_next + _unread > _buffer_sz) {\n+        head_sz = _buffer_sz - _next;\n+    } else {\n+        head_sz = _unread;\n     }\n+    I(dom, _next + head_sz <= _buffer_sz);\n+    I(dom, _next < _buffer_sz);\n+    memcpy(ptr, _buffer + _next, head_sz);\n+\n+    // Then copy any other items from the beginning of the buffer\n+    I(dom, _unread >= head_sz);\n+    size_t tail_sz = _unread - head_sz;\n+    I(dom, tail_sz <= _buffer_sz);\n+    memcpy(ptr + head_sz, _buffer, tail_sz);\n }\n \n /**\n@@ -61,11 +67,12 @@ void\n circular_buffer::enqueue(void *src) {\n     I(dom, src);\n     I(dom, _unread <= _buffer_sz);\n+    I(dom, _buffer);\n \n     // Grow if necessary.\n-    if (_next + _unread + unit_sz > _buffer_sz) {\n-        size_t new_buffer_sz = _buffer_sz << 1;\n-        I(dom, new_buffer_sz <= MAX_CIRCULAR_BUFFFER_SIZE);\n+    if (_unread == _buffer_sz) {\n+        size_t new_buffer_sz = _buffer_sz * 2;\n+        I(dom, new_buffer_sz <= MAX_CIRCULAR_BUFFER_SIZE);\n         dom->log(rust_log::MEM | rust_log::COMM,\n                  \"circular_buffer is growing to %d bytes\", new_buffer_sz);\n         void *new_buffer = dom->malloc(new_buffer_sz);\n@@ -81,12 +88,19 @@ circular_buffer::enqueue(void *src) {\n              \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n              _unread, _next, _buffer_sz, unit_sz);\n \n-    I(dom, is_power_of_two(_buffer_sz));\n     I(dom, _unread < _buffer_sz);\n-    I(dom, _next + _unread + unit_sz <= _buffer_sz);\n+    I(dom, _unread + unit_sz <= _buffer_sz);\n \n     // Copy data\n-    size_t i = (_next + _unread) & (_buffer_sz - 1);\n+    size_t i;\n+    if (_next + _unread < _buffer_sz) {\n+        i = _next + _unread;\n+    } else {\n+        I(dom, _next >= unit_sz);\n+        i = _next + _unread - _buffer_sz;\n+        I(dom, i <= _next - unit_sz);\n+    }\n+\n     I(dom, i + unit_sz <= _buffer_sz);\n     memcpy(&_buffer[i], src, unit_sz);\n     _unread += unit_sz;\n@@ -112,22 +126,24 @@ circular_buffer::dequeue(void *dst) {\n              \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n              _unread, _next, _buffer_sz, unit_sz);\n \n+    I(dom, _next + unit_sz <= _buffer_sz);\n     if (dst != NULL) {\n         memcpy(dst, &_buffer[_next], unit_sz);\n     }\n     dom->log(rust_log::MEM | rust_log::COMM,\n              \"shifted data from index %d\", _next);\n     _unread -= unit_sz;\n     _next += unit_sz;\n-    I(dom, _next <= _buffer_sz);\n     if (_next == _buffer_sz) {\n         _next = 0;\n     }\n \n     // Shrink if possible.\n-    if (_buffer_sz > _initial_sz && _unread <= _buffer_sz / 4) {\n-        size_t new_buffer_sz = _buffer_sz >> 1;\n-        I(dom, _initial_sz <= new_buffer_sz);\n+    if (_buffer_sz > INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS * unit_sz &&\n+        _unread <= _buffer_sz / 4) {\n+        size_t new_buffer_sz = _buffer_sz / 2;\n+        I(dom,\n+          INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS * unit_sz <= new_buffer_sz);\n         dom->log(rust_log::MEM | rust_log::COMM,\n                  \"circular_buffer is shrinking to %d bytes\", new_buffer_sz);\n         void *tmp = dom->malloc(new_buffer_sz);\n@@ -137,7 +153,6 @@ circular_buffer::dequeue(void *dst) {\n         _next = 0;\n         _buffer_sz = new_buffer_sz;\n     }\n-\n }\n \n uint8_t *\n@@ -154,3 +169,14 @@ size_t\n circular_buffer::size() {\n     return _unread;\n }\n+\n+//\n+// Local Variables:\n+// mode: C++\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//"}, {"sha": "d44721b5d22533f1efe1f8c04c2d823050ab3d98", "filename": "src/rt/circular_buffer.h", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/295c54e10f587a56dfec95ca3a3aee0f9fd721a2/src%2Frt%2Fcircular_buffer.h", "raw_url": "https://github.com/rust-lang/rust/raw/295c54e10f587a56dfec95ca3a3aee0f9fd721a2/src%2Frt%2Fcircular_buffer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.h?ref=295c54e10f587a56dfec95ca3a3aee0f9fd721a2", "patch": "@@ -7,8 +7,8 @@\n \n class\n circular_buffer : public dom_owned<circular_buffer> {\n-    static const size_t INITIAL_CIRCULAR_BUFFFER_SIZE_IN_UNITS = 8;\n-    static const size_t MAX_CIRCULAR_BUFFFER_SIZE = 1 << 24;\n+    static const size_t INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS = 8;\n+    static const size_t MAX_CIRCULAR_BUFFER_SIZE = 1 << 24;\n \n public:\n     rust_dom *dom;\n@@ -24,12 +24,7 @@ circular_buffer : public dom_owned<circular_buffer> {\n     size_t size();\n \n private:\n-    // Initial size of the buffer in bytes.\n-    size_t _initial_sz;\n-\n-    // Size of the buffer in bytes, should always be a power of two so that\n-    // modulo arithmetic (x % _buffer_sz) can optimized away with\n-    // (x & (_buffer_sz - 1)).\n+    // Size of the buffer in bytes.\n     size_t _buffer_sz;\n \n     // Byte offset within the buffer where to read the next unit of data.\n@@ -42,4 +37,15 @@ circular_buffer : public dom_owned<circular_buffer> {\n     uint8_t *_buffer;\n };\n \n+//\n+// Local Variables:\n+// mode: C++\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//\n+\n #endif /* CIRCULAR_BUFFER_H */"}, {"sha": "542846b4dcdc923170b86573c8378df1f38016ca", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/295c54e10f587a56dfec95ca3a3aee0f9fd721a2/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295c54e10f587a56dfec95ca3a3aee0f9fd721a2/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=295c54e10f587a56dfec95ca3a3aee0f9fd721a2", "patch": "@@ -67,6 +67,25 @@ impure fn test_rotate() {\n     let port[record] myport = port();\n     auto mychan = chan(myport);\n \n+    for each (uint i in _uint.range(0u, 100u)) {\n+        auto val = rec(val1=i as u32,\n+                       val2=i as u32,\n+                       val3=i as u32);\n+        mychan <| val;\n+\n+        auto x <- myport;\n+        check (x.val1 == i as u32);\n+        check (x.val2 == i as u32);\n+        check (x.val3 == i as u32);\n+    }\n+}\n+\n+// Test rotating and growing the buffer when\n+// the unit size is not a power of two\n+impure fn test_rotate_grow() {\n+    let port[record] myport = port();\n+    auto mychan = chan(myport);\n+\n     for each (uint j in _uint.range(0u, 10u)) {\n         for each (uint i in _uint.range(0u, 10u)) {\n             let record val = rec(val1=i as u32,\n@@ -90,6 +109,7 @@ impure fn main() {\n     test_shrink1();\n     test_shrink2();\n     test_rotate();\n+    test_rotate_grow();\n }\n \n // Local Variables:"}]}