{"sha": "5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "node_id": "C_kwDOAAsO6NoAKDVhZWJhN2Y4NmJiMDk5YzA3OWMwNzllNTM4MWEzZDk3NmU2ZjVmZGM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-26T03:30:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-26T03:31:24Z"}, "message": "make a bunch of tests look more like how they did before rustfmt", "tree": {"sha": "b0c3e0f25243e7fadfb3e914879b87901e63798a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0c3e0f25243e7fadfb3e914879b87901e63798a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "html_url": "https://github.com/rust-lang/rust/commit/5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e2dac4787e5470ecd9e245420e8da9528620edd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2dac4787e5470ecd9e245420e8da9528620edd", "html_url": "https://github.com/rust-lang/rust/commit/9e2dac4787e5470ecd9e245420e8da9528620edd"}], "stats": {"total": 169, "additions": 65, "deletions": 104}, "files": [{"sha": "d3f505d2da5cc041f7344f4825b5b5f4643a1d84", "filename": "tests/fail/box-cell-alias.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fbox-cell-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fbox-cell-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbox-cell-alias.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -6,9 +6,7 @@ use std::cell::Cell;\n \n fn helper(val: Box<Cell<u8>>, ptr: *const Cell<u8>) -> u8 {\n     val.set(10);\n-    unsafe {\n-        (*ptr).set(20); //~ ERROR does not exist in the borrow stack\n-    }\n+    unsafe { (*ptr).set(20) }; //~ ERROR does not exist in the borrow stack\n     val.get()\n }\n "}, {"sha": "446aafe640128b339f37d5892749cd05e6cad794", "filename": "tests/fail/box-cell-alias.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fbox-cell-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fbox-cell-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbox-cell-alias.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,11 +1,11 @@\n error: Undefined Behavior: trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/box-cell-alias.rs:LL:CC\n    |\n-LL |         (*ptr).set(20);\n-   |         ^^^^^^^^^^^^^^\n-   |         |\n-   |         trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |         this error occurs as part of a reborrow at ALLOC[0x0..0x1]\n+LL |     unsafe { (*ptr).set(20) };\n+   |              ^^^^^^^^^^^^^^\n+   |              |\n+   |              trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |              this error occurs as part of a reborrow at ALLOC[0x0..0x1]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information"}, {"sha": "4a8d498aa1f52a893fb5d8781b4a5497f3823a88", "filename": "tests/fail/dangling_pointers/maybe_null_pointer_write_zst.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -7,7 +7,5 @@ fn main() {\n     // Also not assigning directly as that's array initialization, not assignment.\n     let zst_val = [1u8; 0];\n     let ptr = (&0u8 as *const u8).wrapping_sub(0x800) as *mut [u8; 0];\n-    unsafe {\n-        *ptr = zst_val; //~ ERROR out-of-bounds\n-    }\n+    unsafe { *ptr = zst_val }; //~ ERROR out-of-bounds\n }"}, {"sha": "41e54735ca925fe859719b3f8409e74a271f2785", "filename": "tests/fail/dangling_pointers/maybe_null_pointer_write_zst.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 1, so pointer at offset -2048 is out-of-bounds\n   --> $DIR/maybe_null_pointer_write_zst.rs:LL:CC\n    |\n-LL |         *ptr = zst_val;\n-   |         ^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC has size 1, so pointer at offset -2048 is out-of-bounds\n+LL |     unsafe { *ptr = zst_val };\n+   |              ^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC has size 1, so pointer at offset -2048 is out-of-bounds\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "f926424a4b67a0d5eda14b512ee0aff10e8ee34c", "filename": "tests/fail/intrinsics/exact_div1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div1.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,7 +1,5 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // divison by 0\n-    unsafe {\n-        std::intrinsics::exact_div(2, 0); //~ ERROR divisor of zero\n-    }\n+    unsafe { std::intrinsics::exact_div(2, 0) }; //~ ERROR divisor of zero\n }"}, {"sha": "59e853d0ececfeedd8d2526fa4377c7b45b10075", "filename": "tests/fail/intrinsics/exact_div1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div1.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: calculating the remainder with a divisor of zero\n   --> $DIR/exact_div1.rs:LL:CC\n    |\n-LL |         std::intrinsics::exact_div(2, 0);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calculating the remainder with a divisor of zero\n+LL |     unsafe { std::intrinsics::exact_div(2, 0) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calculating the remainder with a divisor of zero\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "fc252aa798578da2184454fda029194a0bf787c3", "filename": "tests/fail/intrinsics/exact_div2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div2.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,7 +1,5 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // divison with a remainder\n-    unsafe {\n-        std::intrinsics::exact_div(2u16, 3); //~ ERROR 2_u16 cannot be divided by 3_u16 without remainder\n-    }\n+    unsafe { std::intrinsics::exact_div(2u16, 3) }; //~ ERROR 2_u16 cannot be divided by 3_u16 without remainder\n }"}, {"sha": "dfbcdd1f34f1efde2bf8c9bf076bfa0edbcd2cbc", "filename": "tests/fail/intrinsics/exact_div2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div2.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: exact_div: 2_u16 cannot be divided by 3_u16 without remainder\n   --> $DIR/exact_div2.rs:LL:CC\n    |\n-LL |         std::intrinsics::exact_div(2u16, 3);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ exact_div: 2_u16 cannot be divided by 3_u16 without remainder\n+LL |     unsafe { std::intrinsics::exact_div(2u16, 3) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ exact_div: 2_u16 cannot be divided by 3_u16 without remainder\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "4d2511adc1f587fa4ae4b6733dc89fe3ae6899ff", "filename": "tests/fail/intrinsics/exact_div3.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div3.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,7 +1,5 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // signed divison with a remainder\n-    unsafe {\n-        std::intrinsics::exact_div(-19i8, 2); //~ ERROR -19_i8 cannot be divided by 2_i8 without remainder\n-    }\n+    unsafe { std::intrinsics::exact_div(-19i8, 2) }; //~ ERROR -19_i8 cannot be divided by 2_i8 without remainder\n }"}, {"sha": "c3b908ce0ad55eaa7f0d982af74dca508747ba86", "filename": "tests/fail/intrinsics/exact_div3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div3.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: exact_div: -19_i8 cannot be divided by 2_i8 without remainder\n   --> $DIR/exact_div3.rs:LL:CC\n    |\n-LL |         std::intrinsics::exact_div(-19i8, 2);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ exact_div: -19_i8 cannot be divided by 2_i8 without remainder\n+LL |     unsafe { std::intrinsics::exact_div(-19i8, 2) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ exact_div: -19_i8 cannot be divided by 2_i8 without remainder\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "df6433d1cb22bbebab46c8c64f9722a7ab55ce9e", "filename": "tests/fail/intrinsics/exact_div4.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div4.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,7 +1,5 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // divison of MIN by -1\n-    unsafe {\n-        std::intrinsics::exact_div(i64::MIN, -1); //~ ERROR overflow in signed remainder (dividing MIN by -1)\n-    }\n+    unsafe { std::intrinsics::exact_div(i64::MIN, -1) }; //~ ERROR overflow in signed remainder (dividing MIN by -1)\n }"}, {"sha": "b82950674fbccbdcc1fdec4653aee0eb5fbddd4a", "filename": "tests/fail/intrinsics/exact_div4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fintrinsics%2Fexact_div4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div4.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: overflow in signed remainder (dividing MIN by -1)\n   --> $DIR/exact_div4.rs:LL:CC\n    |\n-LL |         std::intrinsics::exact_div(i64::MIN, -1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow in signed remainder (dividing MIN by -1)\n+LL |     unsafe { std::intrinsics::exact_div(i64::MIN, -1) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow in signed remainder (dividing MIN by -1)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "1f566f18c1f8e6bf48e48963b9233ea21656ea6c", "filename": "tests/fail/stacked_borrows/illegal_write1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -3,9 +3,7 @@ fn main() {\n     let xref = &*target;\n     {\n         let x: *mut u32 = xref as *const _ as *mut _;\n-        unsafe {\n-            *x = 42; // invalidates shared ref, activates raw\n-        }\n+        unsafe { *x = 42 }; // invalidates shared ref, activates raw\n     }\n     let _x = *xref; //~ ERROR borrow stack\n }"}, {"sha": "1731e3c1de13d87bbab136bf3741e775c6a06ba3", "filename": "tests/fail/stacked_borrows/illegal_write1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -17,8 +17,8 @@ LL |     let xref = &*target;\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/illegal_write1.rs:LL:CC\n    |\n-LL |             *x = 42; // invalidates shared ref, activates raw\n-   |             ^^^^^^^\n+LL |         unsafe { *x = 42 }; // invalidates shared ref, activates raw\n+   |                  ^^^^^^^\n    = note: inside `main` at $DIR/illegal_write1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "32dc474385d6c0ad744e56c70fb0e13d0e26e524", "filename": "tests/fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -3,8 +3,6 @@ fn main() {\n     let target2 = target as *mut _;\n     drop(&mut *target); // reborrow\n     // Now make sure our ref is still the only one.\n-    unsafe {\n-        *target2 = 13; //~ ERROR borrow stack\n-    }\n+    unsafe { *target2 = 13 }; //~ ERROR borrow stack\n     let _val = *target;\n }"}, {"sha": "7e896c530ac7330bd164119ebf7f8684e4f598a6", "filename": "tests/fail/stacked_borrows/illegal_write2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,11 +1,11 @@\n error: Undefined Behavior: attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/illegal_write2.rs:LL:CC\n    |\n-LL |         *target2 = 13;\n-   |         ^^^^^^^^^^^^^\n-   |         |\n-   |         attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |         this error occurs as part of an access at ALLOC[0x0..0x4]\n+LL |     unsafe { *target2 = 13 };\n+   |              ^^^^^^^^^^^^^\n+   |              |\n+   |              attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |              this error occurs as part of an access at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information"}, {"sha": "87fdbae7019262bc63a9dfbf9f52832ac6522e02", "filename": "tests/fail/stacked_borrows/illegal_write3.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -3,8 +3,6 @@ fn main() {\n     // Make sure raw ptr with raw tag cannot mutate frozen location without breaking the shared ref.\n     let r#ref = &target; // freeze\n     let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n-    unsafe {\n-        *ptr = 42; //~ ERROR only grants SharedReadOnly permission\n-    }\n+    unsafe { *ptr = 42 }; //~ ERROR only grants SharedReadOnly permission\n     let _val = *r#ref;\n }"}, {"sha": "7e9c82769d6adb1ea6854874b9246d7f6c43b716", "filename": "tests/fail/stacked_borrows/illegal_write3.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,11 +1,11 @@\n error: Undefined Behavior: attempting a write access using <untagged> at ALLOC[0x0], but that tag only grants SharedReadOnly permission for this location\n   --> $DIR/illegal_write3.rs:LL:CC\n    |\n-LL |         *ptr = 42;\n-   |         ^^^^^^^^^\n-   |         |\n-   |         attempting a write access using <untagged> at ALLOC[0x0], but that tag only grants SharedReadOnly permission for this location\n-   |         this error occurs as part of an access at ALLOC[0x0..0x4]\n+LL |     unsafe { *ptr = 42 };\n+   |              ^^^^^^^^^\n+   |              |\n+   |              attempting a write access using <untagged> at ALLOC[0x0], but that tag only grants SharedReadOnly permission for this location\n+   |              this error occurs as part of an access at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information"}, {"sha": "c50b7c5816f63785af44a2791c37ff933f00109b", "filename": "tests/fail/stacked_borrows/illegal_write6.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -7,8 +7,6 @@ fn main() {\n fn foo(a: &mut u32, y: *mut u32) -> u32 {\n     *a = 1;\n     let _b = &*a;\n-    unsafe {\n-        *y = 2; //~ ERROR: not granting access to tag\n-    }\n+    unsafe { *y = 2 }; //~ ERROR: not granting access to tag\n     return *a;\n }"}, {"sha": "11757cca9b65751e31a253c770798db7b607d22d", "filename": "tests/fail/stacked_borrows/illegal_write6.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: not granting access to tag <untagged> because incompatible item is protected: [Unique for <TAG> (call ID)]\n   --> $DIR/illegal_write6.rs:LL:CC\n    |\n-LL |         *y = 2;\n-   |         ^^^^^^ not granting access to tag <untagged> because incompatible item is protected: [Unique for <TAG> (call ID)]\n+LL |     unsafe { *y = 2 };\n+   |              ^^^^^^ not granting access to tag <untagged> because incompatible item is protected: [Unique for <TAG> (call ID)]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n@@ -22,8 +22,7 @@ help: this protector is live for this call\n LL | / fn foo(a: &mut u32, y: *mut u32) -> u32 {\n LL | |     *a = 1;\n LL | |     let _b = &*a;\n-LL | |     unsafe {\n-...  |\n+LL | |     unsafe { *y = 2 };\n LL | |     return *a;\n LL | | }\n    | |_^"}, {"sha": "0b9c058f06ef114db4b4517b78a573811591a2f0", "filename": "tests/fail/stacked_borrows/raw_tracking.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -7,10 +7,6 @@ fn main() {\n     let raw2 = &mut l as *mut _; // invalidates raw1\n     // Without raw pointer tracking, Stacked Borrows cannot distinguish raw1 and raw2, and thus\n     // fails to realize that raw1 should not be used any more.\n-    unsafe {\n-        *raw1 = 13; //~ ERROR does not exist in the borrow stack\n-    }\n-    unsafe {\n-        *raw2 = 13;\n-    }\n+    unsafe { *raw1 = 13 }; //~ ERROR does not exist in the borrow stack\n+    unsafe { *raw2 = 13 };\n }"}, {"sha": "d3674893fab8ef6533d9d84b14ad4f14073106b0", "filename": "tests/fail/stacked_borrows/raw_tracking.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,11 +1,11 @@\n error: Undefined Behavior: attempting a write access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/raw_tracking.rs:LL:CC\n    |\n-LL |         *raw1 = 13;\n-   |         ^^^^^^^^^^\n-   |         |\n-   |         attempting a write access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |         this error occurs as part of an access at ALLOC[0x0..0x4]\n+LL |     unsafe { *raw1 = 13 };\n+   |              ^^^^^^^^^^\n+   |              |\n+   |              attempting a write access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |              this error occurs as part of an access at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information"}, {"sha": "45035683d5c0022c09121395636d2ffcb9bcfdfd", "filename": "tests/fail/stacked_borrows/transmute-is-no-escape.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -10,7 +10,5 @@ fn main() {\n     let _raw: *mut i32 = unsafe { mem::transmute(&mut x[0]) };\n     // `raw` still carries a tag, so we get another pointer to the same location that does not carry a tag\n     let raw = (&mut x[1] as *mut i32).wrapping_offset(-1);\n-    unsafe {\n-        *raw = 13; //~ ERROR borrow stack\n-    }\n+    unsafe { *raw = 13 }; //~ ERROR borrow stack\n }"}, {"sha": "a9682f806ba2b8b685c2b4332aba98e3f3d50771", "filename": "tests/fail/stacked_borrows/transmute-is-no-escape.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,11 +1,11 @@\n error: Undefined Behavior: attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/transmute-is-no-escape.rs:LL:CC\n    |\n-LL |         *raw = 13;\n-   |         ^^^^^^^^^\n-   |         |\n-   |         attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |         this error occurs as part of an access at ALLOC[0x0..0x4]\n+LL |     unsafe { *raw = 13 };\n+   |              ^^^^^^^^^\n+   |              |\n+   |              attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |              this error occurs as part of an access at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information"}, {"sha": "0a326a453e9a480c26a97f9a745c4a8811c5a112", "filename": "tests/fail/unaligned_pointers/intptrcast_alignment_check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -12,8 +12,6 @@ fn main() {\n     // Manually make sure the pointer is properly aligned.\n     let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr + 1 };\n     let u16_ptr = base_addr_aligned as *mut u16;\n-    unsafe {\n-        *u16_ptr = 2; //~ERROR memory with alignment 1, but alignment 2 is required\n-    }\n+    unsafe { *u16_ptr = 2 }; //~ERROR memory with alignment 1, but alignment 2 is required\n     println!(\"{:?}\", x);\n }"}, {"sha": "347486187e1b95063b8606ed8fea743c69fa4882", "filename": "tests/fail/unaligned_pointers/intptrcast_alignment_check.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: accessing memory with alignment ALIGN, but alignment ALIGN is required\n   --> $DIR/intptrcast_alignment_check.rs:LL:CC\n    |\n-LL |         *u16_ptr = 2;\n-   |         ^^^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n+LL |     unsafe { *u16_ptr = 2 };\n+   |              ^^^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n    |\n    = help: this usually indicates that your program performed an invalid operation and caused Undefined Behavior\n    = help: but due to `-Zmiri-symbolic-alignment-check`, alignment errors can also be false positives"}, {"sha": "049c57e61939a23eef7457494573ae7e3cb6b6ba", "filename": "tests/fail/validity/transmute_through_ptr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fvalidity%2Ftransmute_through_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fvalidity%2Ftransmute_through_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Ftransmute_through_ptr.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -6,9 +6,7 @@ enum Bool {\n \n fn evil(x: &mut Bool) {\n     let x = x as *mut _ as *mut u32;\n-    unsafe {\n-        *x = 44; // out-of-bounds enum tag\n-    }\n+    unsafe { *x = 44 }; // out-of-bounds enum tag\n }\n \n #[rustfmt::skip] // rustfmt bug: https://github.com/rust-lang/rustfmt/issues/5391"}, {"sha": "9f92e8994d26695c97aa8458f050bf6efb68c718", "filename": "tests/fail/zst2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fzst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fzst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fzst2.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -11,7 +11,5 @@ fn main() {\n     let mut x_box = Box::new(1u8);\n     let x = &mut *x_box as *mut _ as *mut [u8; 0];\n     drop(x_box);\n-    unsafe {\n-        *x = zst_val; //~ ERROR dereferenced after this allocation got freed\n-    }\n+    unsafe { *x = zst_val }; //~ ERROR dereferenced after this allocation got freed\n }"}, {"sha": "3112a87489a92054edc2488844598d75989df494", "filename": "tests/fail/zst2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fzst2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fzst2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fzst2.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n   --> $DIR/zst2.rs:LL:CC\n    |\n-LL |         *x = zst_val;\n-   |         ^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n+LL |     unsafe { *x = zst_val };\n+   |              ^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "3f3b0af14dbea843de2ec3a28243f70e37cdc1c2", "filename": "tests/fail/zst3.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fzst3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fzst3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fzst3.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -11,12 +11,8 @@ fn main() {\n     let mut x_box = Box::new(1u8);\n     let x = (&mut *x_box as *mut u8).wrapping_offset(1);\n     // This one is just \"at the edge\", but still okay\n-    unsafe {\n-        *(x as *mut [u8; 0]) = zst_val;\n-    }\n+    unsafe { *(x as *mut [u8; 0]) = zst_val };\n     // One byte further is OOB.\n     let x = x.wrapping_offset(1);\n-    unsafe {\n-        *(x as *mut [u8; 0]) = zst_val; //~ ERROR out-of-bounds\n-    }\n+    unsafe { *(x as *mut [u8; 0]) = zst_val }; //~ ERROR out-of-bounds\n }"}, {"sha": "bc3436b14ac008ae262eea7a497a14983161cc47", "filename": "tests/fail/zst3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fzst3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Ffail%2Fzst3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fzst3.stderr?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 1, so pointer at offset 2 is out-of-bounds\n   --> $DIR/zst3.rs:LL:CC\n    |\n-LL |         *(x as *mut [u8; 0]) = zst_val;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC has size 1, so pointer at offset 2 is out-of-bounds\n+LL |     unsafe { *(x as *mut [u8; 0]) = zst_val };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC has size 1, so pointer at offset 2 is out-of-bounds\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "812003ef4d97d1ae057649f590e8b946fc08405e", "filename": "tests/pass/concurrency/data_race.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Fpass%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aeba7f86bb099c079c079e5381a3d976e6f5fdc/tests%2Fpass%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fdata_race.rs?ref=5aeba7f86bb099c079c079e5381a3d976e6f5fdc", "patch": "@@ -18,9 +18,7 @@ fn test_fence_sync() {\n     let evil_ptr = EvilSend(ptr);\n \n     let j1 = spawn(move || {\n-        unsafe {\n-            *evil_ptr.0 = 1;\n-        }\n+        unsafe { *evil_ptr.0 = 1 };\n         fence(Ordering::Release);\n         SYNC.store(1, Ordering::Relaxed)\n     });"}]}