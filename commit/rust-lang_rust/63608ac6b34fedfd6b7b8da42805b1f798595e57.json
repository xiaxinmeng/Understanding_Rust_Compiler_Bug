{"sha": "63608ac6b34fedfd6b7b8da42805b1f798595e57", "node_id": "C_kwDOAAsO6NoAKDYzNjA4YWM2YjM0ZmVkZmQ2YjdiOGRhNDI4MDViMWY3OTg1OTVlNTc", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2021-09-27T23:31:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-27T23:31:24Z"}, "message": "Fix/mismatch types (#94)\n\n* Refactor test.sh script\r\n\r\n* Fix mismatched types error", "tree": {"sha": "8a0aff17c8e70523ffc3f2b34415d536ce5ca3ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a0aff17c8e70523ffc3f2b34415d536ce5ca3ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63608ac6b34fedfd6b7b8da42805b1f798595e57", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhUlRNCRBK7hj4Ov3rIwAA3esIAE9Yv+iETjw8HI8OhNiclOsp\nSPT6CrVGfYjPxCOf2420l7SXbvq7vvlHs3C+AjUO/V5p8jxJqNsOC0RE4W5rhRui\ntzcHUTdviWcQQ10m7JJVfWxfdymBYZskhCzX/X0ZcckpneJpjc+usHckTYoaBF13\nQZ7aFU0RCHzP5I4TCHtRQY5teAAedruZ8fDRyIoBm3sqh7hM1iZ5zXnpz6KLIbIm\nxQUOJbjRFQkdqAP7WU6gz87VPKWLFQ0RBVQvpmV2fhkkSvR6Ncozc49hG+NZfWiM\ngHOr/rCXw/Irsk5y/A4pGOuP5F+f1X9HiURQ59RAACYH+HjQbzulbfakZ5VV6vM=\n=9ze0\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a0aff17c8e70523ffc3f2b34415d536ce5ca3ab\nparent ab4ff2dfe0955ede04c4ddb7373337a6141081b8\nauthor antoyo <antoyo@users.noreply.github.com> 1632785484 -0400\ncommitter GitHub <noreply@github.com> 1632785484 -0400\n\nFix/mismatch types (#94)\n\n* Refactor test.sh script\r\n\r\n* Fix mismatched types error"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63608ac6b34fedfd6b7b8da42805b1f798595e57", "html_url": "https://github.com/rust-lang/rust/commit/63608ac6b34fedfd6b7b8da42805b1f798595e57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63608ac6b34fedfd6b7b8da42805b1f798595e57/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab4ff2dfe0955ede04c4ddb7373337a6141081b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab4ff2dfe0955ede04c4ddb7373337a6141081b8", "html_url": "https://github.com/rust-lang/rust/commit/ab4ff2dfe0955ede04c4ddb7373337a6141081b8"}], "stats": {"total": 206, "additions": 132, "deletions": 74}, "files": [{"sha": "10ee63e2a550cae0069c5928e7396e29ef458163", "filename": "src/builder.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/63608ac6b34fedfd6b7b8da42805b1f798595e57/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63608ac6b34fedfd6b7b8da42805b1f798595e57/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=63608ac6b34fedfd6b7b8da42805b1f798595e57", "patch": "@@ -1051,11 +1051,18 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     /* Comparisons */\n-    fn icmp(&mut self, op: IntPredicate, lhs: RValue<'gcc>, mut rhs: RValue<'gcc>) -> RValue<'gcc> {\n-        if lhs.get_type() != rhs.get_type() {\n+    fn icmp(&mut self, op: IntPredicate, mut lhs: RValue<'gcc>, mut rhs: RValue<'gcc>) -> RValue<'gcc> {\n+        let left_type = lhs.get_type();\n+        let right_type = rhs.get_type();\n+        if left_type != right_type {\n+            // NOTE: because libgccjit cannot compare function pointers.\n+            if left_type.is_function_ptr_type().is_some() && right_type.is_function_ptr_type().is_some() {\n+                lhs = self.context.new_cast(None, lhs, self.usize_type.make_pointer());\n+                rhs = self.context.new_cast(None, rhs, self.usize_type.make_pointer());\n+            }\n             // NOTE: hack because we try to cast a vector type to the same vector type.\n-            if format!(\"{:?}\", lhs.get_type()) != format!(\"{:?}\", rhs.get_type()) {\n-                rhs = self.context.new_cast(None, rhs, lhs.get_type());\n+            else if format!(\"{:?}\", left_type) != format!(\"{:?}\", right_type) {\n+                rhs = self.context.new_cast(None, rhs, left_type);\n             }\n         }\n         self.context.new_comparison(None, op.to_gcc_comparison(), lhs, rhs)\n@@ -1209,6 +1216,17 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n             else {\n                 panic!(\"Unexpected type {:?}\", value_type);\n             };\n+\n+        let lvalue_type = lvalue.to_rvalue().get_type();\n+        let value =\n+            // NOTE: sometimes, rustc will create a value with the wrong type.\n+            if lvalue_type != value.get_type() {\n+                self.context.new_cast(None, value, lvalue_type)\n+            }\n+            else {\n+                value\n+            };\n+\n         self.llbb().add_assignment(None, lvalue, value);\n \n         aggregate_value"}, {"sha": "944d0ce516e0f553b4e2f1a10471a85212eae9f3", "filename": "test.sh", "status": "modified", "additions": 110, "deletions": 70, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/63608ac6b34fedfd6b7b8da42805b1f798595e57/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/63608ac6b34fedfd6b7b8da42805b1f798595e57/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=63608ac6b34fedfd6b7b8da42805b1f798595e57", "patch": "@@ -17,6 +17,7 @@ export LIBRARY_PATH=\"$GCC_PATH\"\n if [[ \"$1\" == \"--release\" ]]; then\n     export CHANNEL='release'\n     CARGO_INCREMENTAL=1 cargo rustc --release\n+    shift\n else\n     echo $LD_LIBRARY_PATH\n     export CHANNEL='debug'\n@@ -25,52 +26,60 @@ fi\n \n source config.sh\n \n-rm -r target/out || true\n-mkdir -p target/out/gccjit\n+function clean() {\n+    rm -r target/out || true\n+    mkdir -p target/out/gccjit\n+}\n \n-echo \"[BUILD] mini_core\"\n-$RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target $TARGET_TRIPLE\n+function mini_tests() {\n+    echo \"[BUILD] mini_core\"\n+    $RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target $TARGET_TRIPLE\n \n-echo \"[BUILD] example\"\n-$RUSTC example/example.rs --crate-type lib --target $TARGET_TRIPLE\n+    echo \"[BUILD] example\"\n+    $RUSTC example/example.rs --crate-type lib --target $TARGET_TRIPLE\n \n-echo \"[AOT] mini_core_hello_world\"\n-$RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/mini_core_hello_world abc bcd\n+    echo \"[AOT] mini_core_hello_world\"\n+    $RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/mini_core_hello_world abc bcd\n+}\n \n-echo \"[BUILD] sysroot\"\n-time ./build_sysroot/build_sysroot.sh\n+function build_sysroot() {\n+    echo \"[BUILD] sysroot\"\n+    time ./build_sysroot/build_sysroot.sh\n+}\n \n-echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n-$RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/arbitrary_self_types_pointers_and_wrappers\n+function std_tests() {\n+    echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n+    $RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/arbitrary_self_types_pointers_and_wrappers\n \n-echo \"[AOT] alloc_system\"\n-$RUSTC example/alloc_system.rs --crate-type lib --target \"$TARGET_TRIPLE\"\n+    echo \"[AOT] alloc_system\"\n+    $RUSTC example/alloc_system.rs --crate-type lib --target \"$TARGET_TRIPLE\"\n \n-echo \"[AOT] alloc_example\"\n-$RUSTC example/alloc_example.rs --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/alloc_example\n+    echo \"[AOT] alloc_example\"\n+    $RUSTC example/alloc_example.rs --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/alloc_example\n \n-echo \"[AOT] dst_field_align\"\n-# FIXME(antoyo): Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed.\n-$RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n+    echo \"[AOT] dst_field_align\"\n+    # FIXME(antoyo): Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed.\n+    $RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n \n-echo \"[AOT] std_example\"\n-$RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/std_example --target $TARGET_TRIPLE\n+    echo \"[AOT] std_example\"\n+    $RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/std_example --target $TARGET_TRIPLE\n \n-echo \"[AOT] subslice-patterns-const-eval\"\n-$RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n+    echo \"[AOT] subslice-patterns-const-eval\"\n+    $RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n \n-echo \"[AOT] track-caller-attribute\"\n-$RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/track-caller-attribute\n+    echo \"[AOT] track-caller-attribute\"\n+    $RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/track-caller-attribute\n \n-echo \"[BUILD] mod_bench\"\n-$RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n+    echo \"[BUILD] mod_bench\"\n+    $RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n+}\n \n # FIXME(antoyo): linker gives multiple definitions error on Linux\n #echo \"[BUILD] sysroot in release mode\"\n@@ -95,11 +104,13 @@ $RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n #fi\n #popd\n \n-pushd build_sysroot/sysroot_src/library/core/tests\n-echo \"[TEST] libcore\"\n-rm -r ./target || true\n-../../../../../cargo.sh test\n-popd\n+function test_libcore() {\n+    pushd build_sysroot/sysroot_src/library/core/tests\n+    echo \"[TEST] libcore\"\n+    rm -r ./target || true\n+    ../../../../../cargo.sh test\n+    popd\n+}\n \n # TODO(antoyo): uncomment when it works.\n #pushd regex\n@@ -130,20 +141,21 @@ popd\n #echo \"[BENCH RUN] mod_bench\"\n #hyperfine --runs ${RUN_RUNS:-10} ./target/out/mod_bench{,_inline} ./target/out/mod_bench_llvm_*\n \n-echo\n-echo \"[TEST] rust-lang/rust\"\n+function test_rustc() {\n+    echo\n+    echo \"[TEST] rust-lang/rust\"\n \n-rust_toolchain=$(cat rust-toolchain)\n+    rust_toolchain=$(cat rust-toolchain)\n \n-git clone https://github.com/rust-lang/rust.git || true\n-cd rust\n-git fetch\n-git checkout $(rustc -V | cut -d' ' -f3 | tr -d '(')\n-export RUSTFLAGS=\n+    git clone https://github.com/rust-lang/rust.git || true\n+    cd rust\n+    git fetch\n+    git checkout $(rustc -V | cut -d' ' -f3 | tr -d '(')\n+    export RUSTFLAGS=\n \n-rm config.toml || true\n+    rm config.toml || true\n \n-cat > config.toml <<EOF\n+    cat > config.toml <<EOF\n [rust]\n codegen-backends = []\n deny-warnings = false\n@@ -154,24 +166,52 @@ local-rebuild = true\n rustc = \"$HOME/.rustup/toolchains/$rust_toolchain-$TARGET_TRIPLE/bin/rustc\"\n EOF\n \n-rustc -V | cut -d' ' -f3 | tr -d '('\n-git checkout $(rustc -V | cut -d' ' -f3 | tr -d '(') src/test\n-\n-for test in $(rg -i --files-with-matches \"//(\\[\\w+\\])?~|// error-pattern:|// build-fail|// run-fail|-Cllvm-args\" src/test/ui); do\n-  rm $test\n-done\n-\n-git checkout -- src/test/ui/issues/auxiliary/issue-3136-a.rs # contains //~ERROR, but shouldn't be removed\n-\n-rm -r src/test/ui/{abi*,extern/,llvm-asm/,panic-runtime/,panics/,unsized-locals/,proc-macro/,threads-sendsync/,thinlto/,simd*,borrowck/,test*,*lto*.rs} || true\n-for test in $(rg --files-with-matches \"catch_unwind|should_panic|thread|lto\" src/test/ui); do\n-  rm $test\n-done\n-git checkout src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice.rs\n-git checkout src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs\n-rm src/test/ui/llvm-asm/llvm-asm-in-out-operand.rs || true # TODO(antoyo): Enable back this test if I ever implement the llvm_asm! macro.\n-\n-RUSTC_ARGS=\"-Zpanic-abort-tests -Zsymbol-mangling-version=v0 -Zcodegen-backend=\"$(pwd)\"/../target/\"$CHANNEL\"/librustc_codegen_gcc.\"$dylib_ext\" --sysroot \"$(pwd)\"/../build_sysroot/sysroot -Cpanic=abort\"\n-\n-echo \"[TEST] rustc test suite\"\n-COMPILETEST_FORCE_STAGE0=1 ./x.py test --run always --stage 0 src/test/ui/ --rustc-args \"$RUSTC_ARGS\"\n+    rustc -V | cut -d' ' -f3 | tr -d '('\n+    git checkout $(rustc -V | cut -d' ' -f3 | tr -d '(') src/test\n+\n+    for test in $(rg -i --files-with-matches \"//(\\[\\w+\\])?~|// error-pattern:|// build-fail|// run-fail|-Cllvm-args\" src/test/ui); do\n+      rm $test\n+    done\n+\n+    git checkout -- src/test/ui/issues/auxiliary/issue-3136-a.rs # contains //~ERROR, but shouldn't be removed\n+\n+    rm -r src/test/ui/{abi*,extern/,llvm-asm/,panic-runtime/,panics/,unsized-locals/,proc-macro/,threads-sendsync/,thinlto/,simd*,borrowck/,test*,*lto*.rs} || true\n+    for test in $(rg --files-with-matches \"catch_unwind|should_panic|thread|lto\" src/test/ui); do\n+      rm $test\n+    done\n+    git checkout src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice.rs\n+    git checkout src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs\n+    rm src/test/ui/llvm-asm/llvm-asm-in-out-operand.rs || true # TODO(antoyo): Enable back this test if I ever implement the llvm_asm! macro.\n+\n+    RUSTC_ARGS=\"-Zpanic-abort-tests -Zsymbol-mangling-version=v0 -Zcodegen-backend=\"$(pwd)\"/../target/\"$CHANNEL\"/librustc_codegen_gcc.\"$dylib_ext\" --sysroot \"$(pwd)\"/../build_sysroot/sysroot -Cpanic=abort\"\n+\n+    echo \"[TEST] rustc test suite\"\n+    COMPILETEST_FORCE_STAGE0=1 ./x.py test --run always --stage 0 src/test/ui/ --rustc-args \"$RUSTC_ARGS\"\n+}\n+\n+function clean_ui_tests() {\n+    find rust/build/x86_64-unknown-linux-gnu/test/ui/ -name stamp -exec rm -rf {} \\;\n+}\n+\n+case $1 in\n+    \"--test-rustc\")\n+        test_rustc\n+        ;;\n+\n+    \"--test-libcore\")\n+        test_libcore\n+        ;;\n+\n+    \"--clean-ui-tests\")\n+        clean_ui_tests\n+        ;;\n+\n+    *)\n+        clean\n+        mini_tests\n+        build_sysroot\n+        std_tests\n+        test_libcore\n+        test_rustc\n+        ;;\n+esac"}]}