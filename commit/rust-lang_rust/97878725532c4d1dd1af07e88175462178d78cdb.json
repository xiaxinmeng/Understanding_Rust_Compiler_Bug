{"sha": "97878725532c4d1dd1af07e88175462178d78cdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ODc4NzI1NTMyYzRkMWRkMWFmMDdlODgxNzU0NjIxNzhkNzhjZGI=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-10-02T01:32:29Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-10-07T23:44:05Z"}, "message": "add token::LIT_STR_RAW(ident, num of # symbols)\n\nTreat it as a synonym for LIT_STR for now.", "tree": {"sha": "22bbce6a302b11127fb7db196995affa8f272b3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22bbce6a302b11127fb7db196995affa8f272b3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97878725532c4d1dd1af07e88175462178d78cdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97878725532c4d1dd1af07e88175462178d78cdb", "html_url": "https://github.com/rust-lang/rust/commit/97878725532c4d1dd1af07e88175462178d78cdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97878725532c4d1dd1af07e88175462178d78cdb/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18099fe085535d3d026db1a771c115b7a7ba6563", "url": "https://api.github.com/repos/rust-lang/rust/commits/18099fe085535d3d026db1a771c115b7a7ba6563", "html_url": "https://github.com/rust-lang/rust/commit/18099fe085535d3d026db1a771c115b7a7ba6563"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "5a3c3a86fed044d7ed7c6aa0ebb4a0f42c5b6d6c", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97878725532c4d1dd1af07e88175462178d78cdb/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97878725532c4d1dd1af07e88175462178d78cdb/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=97878725532c4d1dd1af07e88175462178d78cdb", "patch": "@@ -437,7 +437,8 @@ pub fn get_single_str_from_tts(cx: @ExtCtxt,\n     }\n \n     match tts[0] {\n-        ast::tt_tok(_, token::LIT_STR(ident)) => cx.str_of(ident),\n+        ast::tt_tok(_, token::LIT_STR(ident))\n+        | ast::tt_tok(_, token::LIT_STR_RAW(ident, _)) => cx.str_of(ident),\n         _ => cx.span_fatal(sp, format!(\"{} requires a string.\", name)),\n     }\n }"}, {"sha": "59d55933fa3794a8e225fd9e99be46a7194eeac4", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97878725532c4d1dd1af07e88175462178d78cdb/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97878725532c4d1dd1af07e88175462178d78cdb/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=97878725532c4d1dd1af07e88175462178d78cdb", "patch": "@@ -464,6 +464,13 @@ fn mk_token(cx: @ExtCtxt, sp: Span, tok: &token::Token) -> @ast::Expr {\n                                       ~[mk_ident(cx, sp, ident)]);\n         }\n \n+        LIT_STR_RAW(ident, n) => {\n+            return cx.expr_call_ident(sp,\n+                                      id_ext(\"LIT_STR_RAW\"),\n+                                      ~[mk_ident(cx, sp, ident),\n+                                        cx.expr_uint(sp, n)]);\n+        }\n+\n         IDENT(ident, b) => {\n             return cx.expr_call_ident(sp,\n                                       id_ext(\"IDENT\"),"}, {"sha": "a43e018cf49493e193af3f48aeb19be38435abcd", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97878725532c4d1dd1af07e88175462178d78cdb/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97878725532c4d1dd1af07e88175462178d78cdb/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=97878725532c4d1dd1af07e88175462178d78cdb", "patch": "@@ -883,7 +883,7 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n                                            content_start_bpos,\n                                            content_end_bpos,\n                                            str_to_ident);\n-        return token::LIT_STR(str_content);\n+        return token::LIT_STR_RAW(str_content, hash_count);\n       }\n       '-' => {\n         if nextch(rdr) == '>' {\n@@ -1048,7 +1048,7 @@ mod test {\n         let TokenAndSpan {tok, sp: _} =\n             env.string_reader.next_token();\n         let id = token::str_to_ident(\"\\\"#a\\\\b\\x00c\\\"\");\n-        assert_eq!(tok, token::LIT_STR(id));\n+        assert_eq!(tok, token::LIT_STR_RAW(id, 3));\n     }\n \n     #[test] fn line_doc_comments() {"}, {"sha": "c8689db417c7409defc09796b89b0ecd7d9bfdb8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97878725532c4d1dd1af07e88175462178d78cdb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97878725532c4d1dd1af07e88175462178d78cdb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=97878725532c4d1dd1af07e88175462178d78cdb", "patch": "@@ -1283,6 +1283,7 @@ impl Parser {\n             token::LIT_FLOAT_UNSUFFIXED(s) =>\n                 lit_float_unsuffixed(self.id_to_str(s)),\n             token::LIT_STR(s) => lit_str(self.id_to_str(s)),\n+            token::LIT_STR_RAW(s, _) => lit_str(self.id_to_str(s)),\n             token::LPAREN => { self.expect(&token::RPAREN); lit_nil },\n             _ => { self.unexpected_last(tok); }\n         }\n@@ -4345,7 +4346,8 @@ impl Parser {\n     // parse a string as an ABI spec on an extern type or module\n     fn parse_opt_abis(&self) -> Option<AbiSet> {\n         match *self.token {\n-            token::LIT_STR(s) => {\n+            token::LIT_STR(s)\n+            | token::LIT_STR_RAW(s, _) => {\n                 self.bump();\n                 let the_string = ident_to_str(&s);\n                 let mut abis = AbiSet::empty();\n@@ -4932,7 +4934,8 @@ impl Parser {\n \n     pub fn parse_optional_str(&self) -> Option<@str> {\n         match *self.token {\n-            token::LIT_STR(s) => {\n+            token::LIT_STR(s)\n+            | token::LIT_STR_RAW(s, _) => {\n                 self.bump();\n                 Some(ident_to_str(&s))\n             }"}, {"sha": "ba4c2637d10e337f19753f5219d7ea27e2211f34", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97878725532c4d1dd1af07e88175462178d78cdb/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97878725532c4d1dd1af07e88175462178d78cdb/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=97878725532c4d1dd1af07e88175462178d78cdb", "patch": "@@ -79,6 +79,7 @@ pub enum Token {\n     LIT_FLOAT(ast::Ident, ast::float_ty),\n     LIT_FLOAT_UNSUFFIXED(ast::Ident),\n     LIT_STR(ast::Ident),\n+    LIT_STR_RAW(ast::Ident, uint), /* raw str delimited by n hash symbols */\n \n     /* Name components */\n     // an identifier contains an \"is_mod_name\" boolean,\n@@ -194,6 +195,10 @@ pub fn to_str(input: @ident_interner, t: &Token) -> ~str {\n         body\n       }\n       LIT_STR(ref s) => { format!(\"\\\"{}\\\"\", ident_to_str(s).escape_default()) }\n+      LIT_STR_RAW(ref s, n) => {\n+          format!(\"r{delim}\\\"{string}\\\"{delim}\",\n+                  delim=\"#\".repeat(n), string=ident_to_str(s))\n+      }\n \n       /* Name components */\n       IDENT(s, _) => input.get(s.name).to_owned(),\n@@ -243,6 +248,7 @@ pub fn can_begin_expr(t: &Token) -> bool {\n       LIT_FLOAT(_, _) => true,\n       LIT_FLOAT_UNSUFFIXED(_) => true,\n       LIT_STR(_) => true,\n+      LIT_STR_RAW(_, _) => true,\n       POUND => true,\n       AT => true,\n       NOT => true,\n@@ -284,6 +290,7 @@ pub fn is_lit(t: &Token) -> bool {\n       LIT_FLOAT(_, _) => true,\n       LIT_FLOAT_UNSUFFIXED(_) => true,\n       LIT_STR(_) => true,\n+      LIT_STR_RAW(_, _) => true,\n       _ => false\n     }\n }"}]}