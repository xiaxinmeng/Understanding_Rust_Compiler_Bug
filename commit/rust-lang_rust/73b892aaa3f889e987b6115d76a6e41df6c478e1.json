{"sha": "73b892aaa3f889e987b6115d76a6e41df6c478e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYjg5MmFhYTNmODg5ZTk4N2I2MTE1ZDc2YTZlNDFkZjZjNDc4ZTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-05T13:24:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-05T13:33:05Z"}, "message": "show message in client's UI if workspace fails to load", "tree": {"sha": "3f993ce8e09c703b417c68eaf3b7f26863982535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f993ce8e09c703b417c68eaf3b7f26863982535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73b892aaa3f889e987b6115d76a6e41df6c478e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73b892aaa3f889e987b6115d76a6e41df6c478e1", "html_url": "https://github.com/rust-lang/rust/commit/73b892aaa3f889e987b6115d76a6e41df6c478e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73b892aaa3f889e987b6115d76a6e41df6c478e1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7241274ef052fc3081b6dbc2e80266d6703c80c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7241274ef052fc3081b6dbc2e80266d6703c80c", "html_url": "https://github.com/rust-lang/rust/commit/e7241274ef052fc3081b6dbc2e80266d6703c80c"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "1d39ba4bcdd8f572fe464e734f1abff251feeb93", "filename": "crates/gen_lsp_server/src/msg.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/73b892aaa3f889e987b6115d76a6e41df6c478e1/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b892aaa3f889e987b6115d76a6e41df6c478e1/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs?ref=73b892aaa3f889e987b6115d76a6e41df6c478e1", "patch": "@@ -15,6 +15,24 @@ pub enum RawMessage {\n     Response(RawResponse),\n }\n \n+impl From<RawRequest> for RawMessage {\n+    fn from(raw: RawRequest) -> RawMessage {\n+        RawMessage::Request(raw)\n+    }\n+}\n+\n+impl From<RawNotification> for RawMessage {\n+    fn from(raw: RawNotification) -> RawMessage {\n+        RawMessage::Notification(raw)\n+    }\n+}\n+\n+impl From<RawResponse> for RawMessage {\n+    fn from(raw: RawResponse) -> RawMessage {\n+        RawMessage::Response(raw)\n+    }\n+}\n+\n #[derive(Debug, Serialize, Deserialize, Clone)]\n pub struct RawRequest {\n     pub id: u64,"}, {"sha": "0f8ef10b991b846fc7441a30f50cf7eebb850288", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/73b892aaa3f889e987b6115d76a6e41df6c478e1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b892aaa3f889e987b6115d76a6e41df6c478e1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=73b892aaa3f889e987b6115d76a6e41df6c478e1", "patch": "@@ -63,6 +63,11 @@ pub fn main_loop(\n             Ok(ws) => vec![ws],\n             Err(e) => {\n                 log::error!(\"loading workspace failed: {}\", e);\n+                let msg = RawNotification::new::<req::ShowMessage>(&req::ShowMessageParams {\n+                    typ: req::MessageType::Error,\n+                    message: format!(\"rust-analyzer failed to load workspace: {}\", e),\n+                });\n+                msg_sender.send(msg.into()).unwrap();\n                 Vec::new()\n             }\n         }\n@@ -199,7 +204,7 @@ fn main_loop_inner(\n                         Ok((id, ())) => {\n                             state.collect_garbage();\n                             let resp = RawResponse::ok::<req::CollectGarbage>(id, &());\n-                            msg_sender.send(RawMessage::Response(resp)).unwrap()\n+                            msg_sender.send(resp.into()).unwrap()\n                         }\n                         Err(req) => {\n                             match on_request(state, pending_requests, pool, &task_sender, req)? {\n@@ -211,7 +216,7 @@ fn main_loop_inner(\n                                         ErrorCode::MethodNotFound as i32,\n                                         \"unknown request\".to_string(),\n                                     );\n-                                    msg_sender.send(RawMessage::Response(resp)).unwrap()\n+                                    msg_sender.send(resp.into()).unwrap()\n                                 }\n                             }\n                         }\n@@ -260,11 +265,11 @@ fn on_task(task: Task, msg_sender: &Sender<RawMessage>, pending_requests: &mut F\n     match task {\n         Task::Respond(response) => {\n             if pending_requests.remove(&response.id) {\n-                msg_sender.send(RawMessage::Response(response)).unwrap();\n+                msg_sender.send(response.into()).unwrap();\n             }\n         }\n         Task::Notify(n) => {\n-            msg_sender.send(RawMessage::Notification(n)).unwrap();\n+            msg_sender.send(n.into()).unwrap();\n         }\n     }\n }\n@@ -336,7 +341,7 @@ fn on_notification(\n                     ErrorCode::RequestCanceled as i32,\n                     \"canceled by client\".to_string(),\n                 );\n-                msg_sender.send(RawMessage::Response(response)).unwrap()\n+                msg_sender.send(response.into()).unwrap()\n             }\n             return Ok(());\n         }\n@@ -375,7 +380,7 @@ fn on_notification(\n             }\n             let params = req::PublishDiagnosticsParams { uri, diagnostics: Vec::new() };\n             let not = RawNotification::new::<req::PublishDiagnostics>(&params);\n-            msg_sender.send(RawMessage::Notification(not)).unwrap();\n+            msg_sender.send(not.into()).unwrap();\n             return Ok(());\n         }\n         Err(not) => not,\n@@ -501,7 +506,7 @@ fn feedback(intrnal_mode: bool, msg: &str, sender: &Sender<RawMessage>) {\n         return;\n     }\n     let not = RawNotification::new::<req::InternalFeedback>(&msg.to_string());\n-    sender.send(RawMessage::Notification(not)).unwrap();\n+    sender.send(not.into()).unwrap();\n }\n \n fn is_canceled(e: &failure::Error) -> bool {"}, {"sha": "484fde7e500f253882c055c1f41769758d4875d3", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73b892aaa3f889e987b6115d76a6e41df6c478e1/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b892aaa3f889e987b6115d76a6e41df6c478e1/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=73b892aaa3f889e987b6115d76a6e41df6c478e1", "patch": "@@ -8,7 +8,8 @@ pub use lsp_types::{\n     CompletionParams, CompletionResponse, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n     DocumentSymbolResponse, ExecuteCommandParams, Hover, InitializeResult,\n     PublishDiagnosticsParams, ReferenceParams, SignatureHelp, TextDocumentEdit,\n-    TextDocumentPositionParams, TextEdit, WorkspaceEdit, WorkspaceSymbolParams\n+    TextDocumentPositionParams, TextEdit, WorkspaceEdit, WorkspaceSymbolParams,\n+    MessageType, ShowMessageParams,\n };\n \n pub enum AnalyzerStatus {}"}]}