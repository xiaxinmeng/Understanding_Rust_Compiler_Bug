{"sha": "a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5OGI1MzQwZDE3NjhlNjMxZTJhZmJlOWQwMGYyZjI4MTNlYzFjZmI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-22T09:15:56Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-04T05:00:26Z"}, "message": "typeck/type_of: don't ignore incorrect defining uses of opaque types.", "tree": {"sha": "1005c18fbf5fd8dbe439ae98ca2eb7d5024d21e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1005c18fbf5fd8dbe439ae98ca2eb7d5024d21e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "html_url": "https://github.com/rust-lang/rust/commit/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64651138524b45a7e18bec7dcaf143c7fa4f2794", "url": "https://api.github.com/repos/rust-lang/rust/commits/64651138524b45a7e18bec7dcaf143c7fa4f2794", "html_url": "https://github.com/rust-lang/rust/commit/64651138524b45a7e18bec7dcaf143c7fa4f2794"}], "stats": {"total": 115, "additions": 48, "deletions": 67}, "files": [{"sha": "79782c28253a6dc68b4448423e7b1b45ba30bfa3", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -405,12 +405,12 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n                 let opaque_generics = self.tcx.generics_of(self.def_id);\n                 let mut used_params: FxHashSet<ty::ParamTy> = FxHashSet::default();\n-                let mut has_errors = false;\n+                let mut duplicate_params: FxHashSet<ty::ParamTy> = FxHashSet::default();\n                 for (i, arg) in substs.iter().enumerate() {\n                     // FIXME(eddyb) enforce lifetime and const param 1:1 mapping.\n                     if let GenericArgKind::Type(ty) = arg.unpack() {\n                         if let ty::Param(p) = ty.kind {\n-                            if !used_params.insert(p) {\n+                            if !used_params.insert(p) && duplicate_params.insert(p) {\n                                 // There was already an entry for `p`, meaning a generic parameter\n                                 // was used twice.\n                                 self.tcx.sess.span_err(\n@@ -421,7 +421,6 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                         p,\n                                     ),\n                                 );\n-                                return;\n                             }\n                         } else {\n                             let param = opaque_generics.param_at(i, self.tcx);\n@@ -435,15 +434,10 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                     arg,\n                                 ),\n                             );\n-                            has_errors = true;\n                         }\n                     }\n                 }\n \n-                if has_errors {\n-                    return;\n-                }\n-\n                 if let Some((prev_span, prev_ty)) = self.found {\n                     if *concrete_type != prev_ty {\n                         debug!(\"find_opaque_ty_constraints: span={:?}\", span);"}, {"sha": "3bc40c43d777e09ac04bbbd22832d2e3fb6ff1dc", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -8,8 +8,7 @@ trait TraitWithAssoc {\n }\n \n type Foo<V> = impl Trait<V>;\n-//~^ ERROR could not find defining uses\n-//~| ERROR the trait bound `T: TraitWithAssoc` is not satisfied\n+//~^ ERROR the trait bound `T: TraitWithAssoc` is not satisfied\n \n trait Trait<U> {}\n "}, {"sha": "316ea97efb5d02691cac85e22595111b1aa208b0", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -10,19 +10,13 @@ LL | fn foo_desugared<T: TraitWithAssoc + TraitWithAssoc>(_: T) -> Foo<T::Assoc>\n    |                                    ^^^^^^^^^^^^^^^^\n \n error: defining opaque type use does not fully define opaque type: generic parameter `V` is specified as concrete type `<T as TraitWithAssoc>::Assoc`\n-  --> $DIR/bound_reduction2.rs:18:1\n+  --> $DIR/bound_reduction2.rs:17:1\n    |\n LL | / fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n LL | |     ()\n LL | | }\n    | |_^\n \n-error: could not find defining uses\n-  --> $DIR/bound_reduction2.rs:10:1\n-   |\n-LL | type Foo<V> = impl Trait<V>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "3993cebeb447e0d09590d74932d27f4e42f30fe6", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -6,7 +6,6 @@ fn main() {}\n \n // test that unused generic parameters are ok\n type Two<T, U> = impl Debug;\n-//~^ could not find defining uses\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n //~^ ERROR defining opaque type use restricts opaque type"}, {"sha": "4a02e85faeaa9e4939a6aa91d0cdb1467bc896df", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -1,17 +1,11 @@\n error: defining opaque type use restricts opaque type by using the generic parameter `T` twice\n-  --> $DIR/generic_duplicate_param_use.rs:11:1\n+  --> $DIR/generic_duplicate_param_use.rs:10:1\n    |\n LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n LL | |\n LL | |     t\n LL | | }\n    | |_^\n \n-error: could not find defining uses\n-  --> $DIR/generic_duplicate_param_use.rs:8:1\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "b1d3260eba3455ac346edee31aaaeb25c71de63b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -8,10 +8,11 @@ fn main() {}\n type Two<T, U> = impl Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n-//~^ defining opaque type use restricts opaque type\n+//~^ ERROR defining opaque type use restricts opaque type\n     t\n }\n \n fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n+//~^ ERROR concrete type differs from previous defining opaque type use\n     t\n }"}, {"sha": "f8cc49ba99f8d6347eacc9ce3b73c2fcf9b46278", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -7,5 +7,23 @@ LL | |     t\n LL | | }\n    | |_^\n \n-error: aborting due to previous error\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/generic_duplicate_param_use2.rs:15:1\n+   |\n+LL | / fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n+LL | |\n+LL | |     t\n+LL | | }\n+   | |_^ expected `U`, got `T`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use2.rs:10:1\n+   |\n+LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n+LL | |\n+LL | |     t\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "40f20af07b533355f4ae1e5d6df02a0c3b572390", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -8,15 +8,15 @@ fn main() {}\n type Two<T, U> = impl Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n-//~^ defining opaque type use restricts opaque type\n+//~^ ERROR defining opaque type use restricts opaque type\n     t\n }\n \n fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n+//~^ ERROR concrete type differs from previous defining opaque type use\n     t\n }\n \n fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n-//~^ concrete type differs from previous defining opaque type use\n     u\n }"}, {"sha": "1171befd0b17d4fa5b71edf377b8ed9d472f6c72", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -8,18 +8,19 @@ LL | | }\n    | |_^\n \n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use3.rs:19:1\n+  --> $DIR/generic_duplicate_param_use3.rs:15:1\n    |\n-LL | / fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n+LL | / fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n LL | |\n-LL | |     u\n+LL | |     t\n LL | | }\n-   | |_^ expected `T`, got `U`\n+   | |_^ expected `U`, got `T`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use3.rs:15:1\n+  --> $DIR/generic_duplicate_param_use3.rs:10:1\n    |\n-LL | / fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n+LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n+LL | |\n LL | |     t\n LL | | }\n    | |_^"}, {"sha": "bb68975cd309661ed9187dcfa99f74df1e6e1795", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -3,8 +3,7 @@\n fn main() {}\n \n type Cmp<T> = impl 'static;\n-//~^ ERROR could not find defining uses\n-//~^^ ERROR: at least one trait must be specified\n+//~^ ERROR: at least one trait must be specified\n \n \n // not a defining use, because it doesn't define *all* possible generics"}, {"sha": "553b8381b0ebecb57b090d19e3a543fce995f3fb", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -5,18 +5,12 @@ LL | type Cmp<T> = impl 'static;\n    |               ^^^^^^^^^^^^\n \n error: defining opaque type use does not fully define opaque type: generic parameter `T` is specified as concrete type `u32`\n-  --> $DIR/generic_nondefining_use.rs:11:1\n+  --> $DIR/generic_nondefining_use.rs:10:1\n    |\n LL | / fn cmp() -> Cmp<u32> {\n LL | |     5u32\n LL | | }\n    | |_^\n \n-error: could not find defining uses\n-  --> $DIR/generic_nondefining_use.rs:5:1\n-   |\n-LL | type Cmp<T> = impl 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "06f1f3430b2ccf17c671450a3dda5571563246f7", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -6,7 +6,6 @@ trait IterBits {\n }\n \n type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n-//~^ ERROR could not find defining uses\n \n impl<T: Copy, E> IterBits for T\n where"}, {"sha": "2ed7e1376c17947a7c0db16c7c32d9ac47c30220", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -1,5 +1,5 @@\n error: defining opaque type use does not fully define opaque type: generic parameter `I` is specified as concrete type `u8`\n-  --> $DIR/issue-60564.rs:20:5\n+  --> $DIR/issue-60564.rs:19:5\n    |\n LL | /     fn iter_bits(self, n: u8) -> Self::BitsIter {\n LL | |\n@@ -9,11 +9,5 @@ LL | |             .map(move |shift| ((self >> T::from(shift)) & T::from(1)).try\n LL | |     }\n    | |_____^\n \n-error: could not find defining uses\n-  --> $DIR/issue-60564.rs:8:1\n-   |\n-LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "060336b96612a906ee7be54a7d9b53598f4c26ca", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -4,7 +4,7 @@\n \n #![feature(type_alias_impl_trait)]\n trait Trait<T> {}\n-type Alias<'a, U> = impl Trait<U>; //~ ERROR could not find defining uses\n+type Alias<'a, U> = impl Trait<U>;\n fn f<'a>() -> Alias<'a, ()> {}\n //~^ ERROR defining opaque type use does not fully define opaque type: generic parameter `U`\n "}, {"sha": "f8ad443f72126c271fbce537ef122f7e8d25516c", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -4,11 +4,5 @@ error: defining opaque type use does not fully define opaque type: generic param\n LL | fn f<'a>() -> Alias<'a, ()> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: could not find defining uses\n-  --> $DIR/issue-68368-non-defining-use.rs:7:1\n-   |\n-LL | type Alias<'a, U> = impl Trait<U>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "a5deeb3b7a34dfaf1b661281c7a17dad3bb00325", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a98b5340d1768e631e2afbe9d00f2f2813ec1cfb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr?ref=a98b5340d1768e631e2afbe9d00f2f2813ec1cfb", "patch": "@@ -16,10 +16,11 @@ LL | | }\n    | |_^ expected `(T, i8)`, got `(T, <U as Bar>::Blub)`\n    |\n note: previous use here\n-  --> $DIR/not_a_defining_use.rs:14:1\n+  --> $DIR/not_a_defining_use.rs:9:1\n    |\n-LL | / fn three<T: Debug, U>(t: T) -> Two<T, U> {\n-LL | |     (t, 5i8)\n+LL | / fn two<T: Debug>(t: T) -> Two<T, u32> {\n+LL | |\n+LL | |     (t, 4i8)\n LL | | }\n    | |_^\n "}]}