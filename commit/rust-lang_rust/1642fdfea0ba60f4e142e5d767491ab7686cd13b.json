{"sha": "1642fdfea0ba60f4e142e5d767491ab7686cd13b", "node_id": "C_kwDOAAsO6NoAKDE2NDJmZGZlYTBiYTYwZjRlMTQyZTVkNzY3NDkxYWI3Njg2Y2QxM2I", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-10-31T22:05:48Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-11-12T19:41:46Z"}, "message": "Add `-Zassert-incr-state` to assert state of incremental cache", "tree": {"sha": "e6af7668ee5150dcbbd05cbc4f510af1c4dac02f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6af7668ee5150dcbbd05cbc4f510af1c4dac02f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1642fdfea0ba60f4e142e5d767491ab7686cd13b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1642fdfea0ba60f4e142e5d767491ab7686cd13b", "html_url": "https://github.com/rust-lang/rust/commit/1642fdfea0ba60f4e142e5d767491ab7686cd13b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1642fdfea0ba60f4e142e5d767491ab7686cd13b/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "220ed09b26177ca4b6ab525f403d251024389a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/220ed09b26177ca4b6ab525f403d251024389a41", "html_url": "https://github.com/rust-lang/rust/commit/220ed09b26177ca4b6ab525f403d251024389a41"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "9c6e2aeb50a761a4299a5222ea8050f6539cc79a", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1642fdfea0ba60f4e142e5d767491ab7686cd13b/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1642fdfea0ba60f4e142e5d767491ab7686cd13b/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=1642fdfea0ba60f4e142e5d767491ab7686cd13b", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::dep_graph::{SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::OnDiskCache;\n use rustc_serialize::opaque::Decoder;\n use rustc_serialize::Decodable;\n+use rustc_session::config::IncrementalStateAssertion;\n use rustc_session::Session;\n use std::path::Path;\n \n@@ -16,6 +17,7 @@ use super::work_product;\n \n type WorkProductMap = FxHashMap<WorkProductId, WorkProduct>;\n \n+#[derive(Debug)]\n pub enum LoadResult<T> {\n     Ok { data: T },\n     DataOutOfDate,\n@@ -24,6 +26,26 @@ pub enum LoadResult<T> {\n \n impl<T: Default> LoadResult<T> {\n     pub fn open(self, sess: &Session) -> T {\n+        // Check for errors when using `-Zassert-incremental-state`\n+        match (sess.opts.assert_incr_state, &self) {\n+            (Some(IncrementalStateAssertion::NotLoaded), LoadResult::Ok { .. }) => {\n+                sess.fatal(\n+                    \"We asserted that the incremental cache should not be loaded, \\\n+                         but it was loaded.\",\n+                );\n+            }\n+            (\n+                Some(IncrementalStateAssertion::Loaded),\n+                LoadResult::Error { .. } | LoadResult::DataOutOfDate,\n+            ) => {\n+                sess.fatal(\n+                    \"We asserted that an existing incremental cache directory should \\\n+                         be successfully loaded, but it was not.\",\n+                );\n+            }\n+            _ => {}\n+        };\n+\n         match self {\n             LoadResult::Error { message } => {\n                 sess.warn(&message);\n@@ -33,7 +55,7 @@ impl<T: Default> LoadResult<T> {\n                 if let Err(err) = delete_all_session_dir_contents(sess) {\n                     sess.err(&format!(\n                         \"Failed to delete invalidated or incompatible \\\n-                                      incremental compilation session directory contents `{}`: {}.\",\n+                         incremental compilation session directory contents `{}`: {}.\",\n                         dep_graph_path(sess).display(),\n                         err\n                     ));"}, {"sha": "10c049f01263bdc6b3e93b1797514e7c9172bd00", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1642fdfea0ba60f4e142e5d767491ab7686cd13b/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1642fdfea0ba60f4e142e5d767491ab7686cd13b/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=1642fdfea0ba60f4e142e5d767491ab7686cd13b", "patch": "@@ -635,6 +635,7 @@ fn test_debugging_options_tracking_hash() {\n \n     // Make sure that changing an [UNTRACKED] option leaves the hash unchanged.\n     // This list is in alphabetical order.\n+    untracked!(assert_incr_state, Some(String::from(\"loaded\")));\n     untracked!(ast_json, true);\n     untracked!(ast_json_noexpand, true);\n     untracked!(borrowck, String::from(\"other\"));"}, {"sha": "f6f1d0e4b3678ca4ce40e4c51cf0bde04a587c59", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1642fdfea0ba60f4e142e5d767491ab7686cd13b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1642fdfea0ba60f4e142e5d767491ab7686cd13b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=1642fdfea0ba60f4e142e5d767491ab7686cd13b", "patch": "@@ -165,6 +165,18 @@ pub enum LinkerPluginLto {\n     Disabled,\n }\n \n+/// Used with `-Z assert-incr-state`.\n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum IncrementalStateAssertion {\n+    /// Found and loaded an existing session directory.\n+    ///\n+    /// Note that this says nothing about whether any particular query\n+    /// will be found to be red or green.\n+    Loaded,\n+    /// Did not load an existing session directory.\n+    NotLoaded,\n+}\n+\n impl LinkerPluginLto {\n     pub fn enabled(&self) -> bool {\n         match *self {\n@@ -704,6 +716,7 @@ pub fn host_triple() -> &'static str {\n impl Default for Options {\n     fn default() -> Options {\n         Options {\n+            assert_incr_state: None,\n             crate_types: Vec::new(),\n             optimize: OptLevel::No,\n             debuginfo: DebugInfo::None,\n@@ -1626,6 +1639,21 @@ fn select_debuginfo(\n     }\n }\n \n+crate fn parse_assert_incr_state(\n+    opt_assertion: &Option<String>,\n+    error_format: ErrorOutputType,\n+) -> Option<IncrementalStateAssertion> {\n+    match opt_assertion {\n+        Some(s) if s.as_str() == \"loaded\" => Some(IncrementalStateAssertion::Loaded),\n+        Some(s) if s.as_str() == \"not-loaded\" => Some(IncrementalStateAssertion::NotLoaded),\n+        Some(s) => early_error(\n+            error_format,\n+            &format!(\"unexpected incremental state assertion value: {}\", s),\n+        ),\n+        None => None,\n+    }\n+}\n+\n fn parse_native_lib_kind(\n     matches: &getopts::Matches,\n     kind: &str,\n@@ -2015,6 +2043,9 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let incremental = cg.incremental.as_ref().map(PathBuf::from);\n \n+    let assert_incr_state =\n+        parse_assert_incr_state(&debugging_opts.assert_incr_state, error_format);\n+\n     if debugging_opts.profile && incremental.is_some() {\n         early_error(\n             error_format,\n@@ -2179,6 +2210,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     };\n \n     Options {\n+        assert_incr_state,\n         crate_types,\n         optimize: opt_level,\n         debuginfo,"}, {"sha": "c85ea9e812efe55c85b3dc77d87557c3b6c7395b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1642fdfea0ba60f4e142e5d767491ab7686cd13b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1642fdfea0ba60f4e142e5d767491ab7686cd13b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=1642fdfea0ba60f4e142e5d767491ab7686cd13b", "patch": "@@ -4,7 +4,6 @@ use crate::early_error;\n use crate::lint;\n use crate::search_paths::SearchPath;\n use crate::utils::NativeLib;\n-\n use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy, SanitizerSet};\n use rustc_target::spec::{RelocModel, RelroLevel, SplitDebuginfo, TargetTriple, TlsModel};\n \n@@ -150,6 +149,7 @@ top_level_options!(\n         /// If `Some`, enable incremental compilation, using the given\n         /// directory to store intermediate results.\n         incremental: Option<PathBuf> [UNTRACKED],\n+        assert_incr_state: Option<IncrementalStateAssertion> [UNTRACKED],\n \n         debugging_opts: DebuggingOptions [SUBSTRUCT],\n         prints: Vec<PrintRequest> [UNTRACKED],\n@@ -1042,6 +1042,9 @@ options! {\n         \"make cfg(version) treat the current version as incomplete (default: no)\"),\n     asm_comments: bool = (false, parse_bool, [TRACKED],\n         \"generate comments into the assembly (may change behavior) (default: no)\"),\n+    assert_incr_state: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+        \"assert that the incremental cache is in given state: \\\n+         either `loaded` or `not-loaded`.\"),\n     ast_json: bool = (false, parse_bool, [UNTRACKED],\n         \"print the AST as JSON and halt (default: no)\"),\n     ast_json_noexpand: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "1e7d823050c3dbb4e3f7ce313ef39c3504866a8e", "filename": "src/test/incremental/link_order/auxiliary/my_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1642fdfea0ba60f4e142e5d767491ab7686cd13b/src%2Ftest%2Fincremental%2Flink_order%2Fauxiliary%2Fmy_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1642fdfea0ba60f4e142e5d767491ab7686cd13b/src%2Ftest%2Fincremental%2Flink_order%2Fauxiliary%2Fmy_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Flink_order%2Fauxiliary%2Fmy_lib.rs?ref=1642fdfea0ba60f4e142e5d767491ab7686cd13b", "patch": "@@ -1,3 +1,3 @@\n // no-prefer-dynamic\n-//[cfail1] compile-flags: -lbar -lfoo --crate-type lib\n-//[cfail2] compile-flags: -lfoo -lbar --crate-type lib\n+//[cfail1] compile-flags: -lbar -lfoo --crate-type lib -Zassert-incr-state=not-loaded\n+//[cfail2] compile-flags: -lfoo -lbar --crate-type lib -Zassert-incr-state=not-loaded"}, {"sha": "a7c79e9d751e0e8af468e20ced0b543882f3e018", "filename": "src/test/incremental/struct_change_field_name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1642fdfea0ba60f4e142e5d767491ab7686cd13b/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1642fdfea0ba60f4e142e5d767491ab7686cd13b/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs?ref=1642fdfea0ba60f4e142e5d767491ab7686cd13b", "patch": "@@ -3,6 +3,7 @@\n \n // revisions:rpass1 cfail2\n // compile-flags: -Z query-dep-graph\n+// [cfail2] compile-flags: -Z query-dep-graph -Z assert-incr-state=loaded\n \n #![feature(rustc_attrs)]\n "}]}