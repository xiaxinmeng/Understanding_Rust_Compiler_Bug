{"sha": "da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhODQyYzYyNzhkM2U4ZWMwNjhkNGNjMmI0YzkzYzJlMjkyZjhlNGI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-13T20:16:27Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-17T07:53:07Z"}, "message": "De-@ resolve_lifetime.", "tree": {"sha": "1e488a1e64aa7d4f975120483f3cec7fd898c727", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e488a1e64aa7d4f975120483f3cec7fd898c727"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b", "html_url": "https://github.com/rust-lang/rust/commit/da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90cbe0cad20d2736c7e7ebbffb2c2d84016f9340", "url": "https://api.github.com/repos/rust-lang/rust/commits/90cbe0cad20d2736c7e7ebbffb2c2d84016f9340", "html_url": "https://github.com/rust-lang/rust/commit/90cbe0cad20d2736c7e7ebbffb2c2d84016f9340"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "da424ea2e15746a7419da2e3c81a2b531d1f2555", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b", "patch": "@@ -18,7 +18,6 @@\n  */\n \n use driver::session::Session;\n-use std::cell::RefCell;\n use std::vec_ng::Vec;\n use util::nodemap::NodeMap;\n use syntax::ast;\n@@ -42,7 +41,7 @@ fn lifetime_show(lt_name: &ast::Name) -> token::InternedString {\n \n struct LifetimeContext<'a> {\n     sess: &'a Session,\n-    named_region_map: @RefCell<NamedRegionMap>,\n+    named_region_map: NamedRegionMap,\n }\n \n enum ScopeChain<'a> {\n@@ -60,10 +59,10 @@ enum ScopeChain<'a> {\n \n type Scope<'a> = &'a ScopeChain<'a>;\n \n-pub fn krate(sess: &Session, krate: &ast::Crate) -> @RefCell<NamedRegionMap> {\n+pub fn krate(sess: &Session, krate: &ast::Crate) -> NamedRegionMap {\n     let mut ctxt = LifetimeContext {\n         sess: sess,\n-        named_region_map: @RefCell::new(NodeMap::new())\n+        named_region_map: NodeMap::new()\n     };\n     visit::walk_crate(&mut ctxt, krate, &RootScope);\n     sess.abort_if_errors();\n@@ -236,7 +235,7 @@ impl<'a> LifetimeContext<'a> {\n         debug!(\"popping fn scope id={} due to fn item/method\", n);\n     }\n \n-    fn resolve_lifetime_ref(&self,\n+    fn resolve_lifetime_ref(&mut self,\n                             lifetime_ref: &ast::Lifetime,\n                             scope: Scope) {\n         // Walk up the scope chain, tracking the number of fn scopes\n@@ -292,7 +291,7 @@ impl<'a> LifetimeContext<'a> {\n         self.unresolved_lifetime_ref(lifetime_ref);\n     }\n \n-    fn resolve_free_lifetime_ref(&self,\n+    fn resolve_free_lifetime_ref(&mut self,\n                                  scope_id: ast::NodeId,\n                                  lifetime_ref: &ast::Lifetime,\n                                  scope: Scope) {\n@@ -373,7 +372,7 @@ impl<'a> LifetimeContext<'a> {\n         }\n     }\n \n-    fn insert_lifetime(&self,\n+    fn insert_lifetime(&mut self,\n                        lifetime_ref: &ast::Lifetime,\n                        def: ast::DefRegion) {\n         if lifetime_ref.id == ast::DUMMY_NODE_ID {\n@@ -386,8 +385,7 @@ impl<'a> LifetimeContext<'a> {\n                 lifetime_to_str(lifetime_ref),\n                 lifetime_ref.id,\n                 def);\n-        let mut named_region_map = self.named_region_map.borrow_mut();\n-        named_region_map.get().insert(lifetime_ref.id, def);\n+        self.named_region_map.insert(lifetime_ref.id, def);\n     }\n }\n "}, {"sha": "be74602c2f52e15c36301fb31868d064efc7e1db", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b", "patch": "@@ -261,7 +261,7 @@ pub struct ctxt {\n     sess: Session,\n     def_map: resolve::DefMap,\n \n-    named_region_map: @RefCell<resolve_lifetime::NamedRegionMap>,\n+    named_region_map: resolve_lifetime::NamedRegionMap,\n \n     region_maps: middle::region::RegionMaps,\n \n@@ -1079,7 +1079,7 @@ pub type node_type_table = RefCell<HashMap<uint,t>>;\n \n pub fn mk_ctxt(s: Session,\n                dm: resolve::DefMap,\n-               named_region_map: @RefCell<resolve_lifetime::NamedRegionMap>,\n+               named_region_map: resolve_lifetime::NamedRegionMap,\n                map: ast_map::Map,\n                freevars: freevars::freevar_map,\n                region_maps: middle::region::RegionMaps,"}, {"sha": "658538bcec85c2defe31ce9b733c75d0e021a4f2", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=da842c6278d3e8ec068d4cc2b4c93c2e292f8e4b", "patch": "@@ -79,8 +79,7 @@ pub trait AstConv {\n \n pub fn ast_region_to_region(tcx: &ty::ctxt, lifetime: &ast::Lifetime)\n                             -> ty::Region {\n-    let named_region_map = tcx.named_region_map.borrow();\n-    let r = match named_region_map.get().find(&lifetime.id) {\n+    let r = match tcx.named_region_map.find(&lifetime.id) {\n         None => {\n             // should have been recorded by the `resolve_lifetime` pass\n             tcx.sess.span_bug(lifetime.span, \"unresolved lifetime\");"}]}