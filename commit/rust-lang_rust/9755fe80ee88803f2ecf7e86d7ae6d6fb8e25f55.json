{"sha": "9755fe80ee88803f2ecf7e86d7ae6d6fb8e25f55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NTVmZTgwZWU4ODgwM2YyZWNmN2U4NmQ3YWU2ZDZmYjhlMjVmNTU=", "commit": {"author": {"name": "Ali Raheem", "email": "github@hadoken.cc", "date": "2019-08-07T14:59:18Z"}, "committer": {"name": "Ali Raheem", "email": "github@hadoken.cc", "date": "2019-08-07T14:59:18Z"}, "message": "Add fs::read_dir() and ReadDir warning about iterator order + example", "tree": {"sha": "508f2d03755a2eed39c3edba177cec8197af4125", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/508f2d03755a2eed39c3edba177cec8197af4125"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9755fe80ee88803f2ecf7e86d7ae6d6fb8e25f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9755fe80ee88803f2ecf7e86d7ae6d6fb8e25f55", "html_url": "https://github.com/rust-lang/rust/commit/9755fe80ee88803f2ecf7e86d7ae6d6fb8e25f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9755fe80ee88803f2ecf7e86d7ae6d6fb8e25f55/comments", "author": null, "committer": null, "parents": [{"sha": "d4abb08be6c3a06a14e285396f5e3ef367584f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4abb08be6c3a06a14e285396f5e3ef367584f77", "html_url": "https://github.com/rust-lang/rust/commit/d4abb08be6c3a06a14e285396f5e3ef367584f77"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "2a55c79a93ce46b3956cc73c3da7af556942fd65", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9755fe80ee88803f2ecf7e86d7ae6d6fb8e25f55/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9755fe80ee88803f2ecf7e86d7ae6d6fb8e25f55/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=9755fe80ee88803f2ecf7e86d7ae6d6fb8e25f55", "patch": "@@ -114,6 +114,11 @@ pub struct Metadata(fs_imp::FileAttr);\n /// information like the entry's path and possibly other metadata can be\n /// learned.\n ///\n+/// #### Note: Iteration Order is Implementation-Defined\n+///\n+/// The order in which this iterator returns entries is platform and filesystem\n+/// dependent.\n+///\n /// # Errors\n ///\n /// This [`io::Result`] will be an [`Err`] if there's some sort of intermittent\n@@ -1959,6 +1964,11 @@ pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n+/// #### Note: Iteration Order is Implementation-Defined\n+///\n+/// The order in which this iterator returns entries is platform and filesystem\n+/// dependent.\n+///\n /// # Errors\n ///\n /// This function will return an error in the following situations, but is not\n@@ -1991,6 +2001,28 @@ pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///     Ok(())\n /// }\n /// ```\n+///\n+/// ```rust,no_run\n+/// use std::{fs, io};\n+///\n+/// fn main() -> io::Result<()> {\n+///     // The order read_dir returns entries is not guaranteed. If reproducible\n+///     // ordering is required the entries should be explicitly sorted.\n+///     let mut entries = fs::read_dir(\".\")?\n+///         .map(|res| res.map(|e| e.path()))\n+///         .collect::<Result<Vec<_>, io::Error>>()?;\n+///\n+///     println!(\n+///         \"Entries before sorting (may or may not be sorted already): {:?}\",\n+///         entries\n+///     );\n+///\n+///     entries.sort();\n+///\n+///     println!(\"Entries after sorting: {:?}\", entries);\n+///     Ok(())\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {\n     fs_imp::readdir(path.as_ref()).map(ReadDir)"}]}