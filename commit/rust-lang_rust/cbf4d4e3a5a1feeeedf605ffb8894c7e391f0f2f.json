{"sha": "cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f", "node_id": "C_kwDOAAsO6NoAKGNiZjRkNGUzYTVhMWZlZWVlZGY2MDVmZmI4ODk0YzdlMzkxZjBmMmY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-28T05:59:54Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-28T05:59:54Z"}, "message": "Deny capturing late-bound non-lifetime param in anon const", "tree": {"sha": "f513b1109f2f47fc097e0210f0f2e88d6f7acfc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f513b1109f2f47fc097e0210f0f2e88d6f7acfc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f", "html_url": "https://github.com/rust-lang/rust/commit/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b583ede652936887a85c54bb793251479c82d3ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/b583ede652936887a85c54bb793251479c82d3ee", "html_url": "https://github.com/rust-lang/rust/commit/b583ede652936887a85c54bb793251479c82d3ee"}], "stats": {"total": 126, "additions": 121, "deletions": 5}, "files": [{"sha": "1d313945b529cc0d12fc1b038ab387dd38d62ccb", "filename": "compiler/rustc_hir_analysis/locales/en-US.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl?ref=cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f", "patch": "@@ -147,3 +147,11 @@ hir_analysis_main_function_generic_parameters = `main` function is not allowed t\n \n hir_analysis_variadic_function_compatible_convention = C-variadic function must have a compatible calling convention, like {$conventions}\n     .label = C-variadic function must have a compatible calling convention\n+\n+hir_analysis_cannot_capture_late_bound_ty_in_anon_const =\n+    cannot capture late-bound type parameter in a constant\n+    .label = parameter defined here\n+\n+hir_analysis_cannot_capture_late_bound_const_in_anon_const =\n+    cannot capture late-bound const parameter in a constant\n+    .label = parameter defined here"}, {"sha": "05facea911f4d616e938efdd72741cfba6e8b041", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f", "patch": "@@ -24,6 +24,8 @@ use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use std::fmt;\n \n+use crate::errors;\n+\n trait RegionExt {\n     fn early(param: &GenericParam<'_>) -> (LocalDefId, ResolvedArg);\n \n@@ -161,6 +163,15 @@ enum Scope<'a> {\n         s: ScopeRef<'a>,\n     },\n \n+    /// Disallows capturing non-lifetime binders from parent scopes.\n+    ///\n+    /// This is necessary for something like `for<T> [(); { /* references T */ }]:`,\n+    /// since we don't do something more correct like replacing any captured\n+    /// late-bound vars with early-bound params in the const's own generics.\n+    AnonConstBoundary {\n+        s: ScopeRef<'a>,\n+    },\n+\n     Root {\n         opt_parent_item: Option<LocalDefId>,\n     },\n@@ -211,6 +222,7 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n                 .field(\"s\", &\"..\")\n                 .finish(),\n             Scope::TraitRefBoundary { s: _ } => f.debug_struct(\"TraitRefBoundary\").finish(),\n+            Scope::AnonConstBoundary { s: _ } => f.debug_struct(\"AnonConstBoundary\").finish(),\n             Scope::Root { opt_parent_item } => {\n                 f.debug_struct(\"Root\").field(\"opt_parent_item\", &opt_parent_item).finish()\n             }\n@@ -312,7 +324,9 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n                     break (vec![], BinderScopeType::Normal);\n                 }\n \n-                Scope::Elision { s, .. } | Scope::ObjectLifetimeDefault { s, .. } => {\n+                Scope::Elision { s, .. }\n+                | Scope::ObjectLifetimeDefault { s, .. }\n+                | Scope::AnonConstBoundary { s } => {\n                     scope = s;\n                 }\n \n@@ -1029,6 +1043,12 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n     fn visit_poly_trait_ref(&mut self, trait_ref: &'tcx hir::PolyTraitRef<'tcx>) {\n         self.visit_poly_trait_ref_inner(trait_ref, NonLifetimeBinderAllowed::Allow);\n     }\n+\n+    fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n+        self.with(Scope::AnonConstBoundary { s: self.scope }, |this| {\n+            intravisit::walk_anon_const(this, c);\n+        });\n+    }\n }\n \n fn object_lifetime_default(tcx: TyCtxt<'_>, param_def_id: DefId) -> ObjectLifetimeDefault {\n@@ -1267,7 +1287,8 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n                 Scope::Elision { s, .. }\n                 | Scope::ObjectLifetimeDefault { s, .. }\n                 | Scope::Supertrait { s, .. }\n-                | Scope::TraitRefBoundary { s, .. } => {\n+                | Scope::TraitRefBoundary { s, .. }\n+                | Scope::AnonConstBoundary { s } => {\n                     scope = s;\n                 }\n             }\n@@ -1332,7 +1353,8 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n                 | Scope::Elision { s, .. }\n                 | Scope::ObjectLifetimeDefault { s, .. }\n                 | Scope::Supertrait { s, .. }\n-                | Scope::TraitRefBoundary { s, .. } => {\n+                | Scope::TraitRefBoundary { s, .. }\n+                | Scope::AnonConstBoundary { s } => {\n                     scope = s;\n                 }\n             }\n@@ -1351,6 +1373,7 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n         // search.\n         let mut late_depth = 0;\n         let mut scope = self.scope;\n+        let mut crossed_anon_const = false;\n         let result = loop {\n             match *scope {\n                 Scope::Body { s, .. } => {\n@@ -1384,10 +1407,36 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n                 | Scope::TraitRefBoundary { s, .. } => {\n                     scope = s;\n                 }\n+\n+                Scope::AnonConstBoundary { s } => {\n+                    crossed_anon_const = true;\n+                    scope = s;\n+                }\n             }\n         };\n \n         if let Some(def) = result {\n+            if let ResolvedArg::LateBound(..) = def && crossed_anon_const {\n+                let use_span = self.tcx.hir().span(hir_id);\n+                let def_span = self.tcx.def_span(param_def_id);\n+                match self.tcx.def_kind(param_def_id) {\n+                    DefKind::ConstParam => {\n+                        self.tcx.sess.emit_err(errors::CannotCaptureLateBoundInAnonConst::Const {\n+                            use_span,\n+                            def_span,\n+                        });\n+                    }\n+                    DefKind::TyParam => {\n+                        self.tcx.sess.emit_err(errors::CannotCaptureLateBoundInAnonConst::Type {\n+                            use_span,\n+                            def_span,\n+                        });\n+                    }\n+                    _ => unreachable!(),\n+                }\n+                return;\n+            }\n+\n             self.map.defs.insert(hir_id, def);\n             return;\n         }\n@@ -1465,7 +1514,8 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n                         | Scope::Elision { s, .. }\n                         | Scope::ObjectLifetimeDefault { s, .. }\n                         | Scope::Supertrait { s, .. }\n-                        | Scope::TraitRefBoundary { s, .. } => {\n+                        | Scope::TraitRefBoundary { s, .. }\n+                        | Scope::AnonConstBoundary { s } => {\n                             scope = s;\n                         }\n                     }\n@@ -1701,7 +1751,9 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n \n                 Scope::ObjectLifetimeDefault { lifetime: Some(l), .. } => break l,\n \n-                Scope::Supertrait { s, .. } | Scope::TraitRefBoundary { s, .. } => {\n+                Scope::Supertrait { s, .. }\n+                | Scope::TraitRefBoundary { s, .. }\n+                | Scope::AnonConstBoundary { s } => {\n                     scope = s;\n                 }\n             }"}, {"sha": "3e0692757754fa20e75d40b2c6653da8d10bb3b8", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f", "patch": "@@ -381,3 +381,21 @@ pub(crate) struct VariadicFunctionCompatibleConvention<'a> {\n     pub span: Span,\n     pub conventions: &'a str,\n }\n+\n+#[derive(Diagnostic)]\n+pub(crate) enum CannotCaptureLateBoundInAnonConst {\n+    #[diag(hir_analysis_cannot_capture_late_bound_ty_in_anon_const)]\n+    Type {\n+        #[primary_span]\n+        use_span: Span,\n+        #[label]\n+        def_span: Span,\n+    },\n+    #[diag(hir_analysis_cannot_capture_late_bound_const_in_anon_const)]\n+    Const {\n+        #[primary_span]\n+        use_span: Span,\n+        #[label]\n+        def_span: Span,\n+    },\n+}"}, {"sha": "3903bfe9bcf57af05fab3d57300a1e537033a986", "filename": "tests/ui/traits/non_lifetime_binders/late-bound-in-anon-ct.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Flate-bound-in-anon-ct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Flate-bound-in-anon-ct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Flate-bound-in-anon-ct.rs?ref=cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f", "patch": "@@ -0,0 +1,11 @@\n+#![feature(non_lifetime_binders, generic_const_exprs)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+//~| WARN the feature `generic_const_exprs` is incomplete\n+\n+fn foo() -> usize\n+where\n+    for<T> [i32; { let _: T = todo!(); 0 }]:,\n+    //~^ ERROR cannot capture late-bound type parameter in a constant\n+{}\n+\n+fn main() {}"}, {"sha": "fafff02dea6eebf59b73388020004762b8fae1f0", "filename": "tests/ui/traits/non_lifetime_binders/late-bound-in-anon-ct.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Flate-bound-in-anon-ct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Flate-bound-in-anon-ct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Flate-bound-in-anon-ct.stderr?ref=cbf4d4e3a5a1feeeedf605ffb8894c7e391f0f2f", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/late-bound-in-anon-ct.rs:1:12\n+   |\n+LL | #![feature(non_lifetime_binders, generic_const_exprs)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/late-bound-in-anon-ct.rs:1:34\n+   |\n+LL | #![feature(non_lifetime_binders, generic_const_exprs)]\n+   |                                  ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+\n+error: cannot capture late-bound type parameter in a constant\n+  --> $DIR/late-bound-in-anon-ct.rs:7:27\n+   |\n+LL |     for<T> [i32; { let _: T = todo!(); 0 }]:,\n+   |         -                 ^\n+   |         |\n+   |         parameter defined here\n+\n+error: aborting due to previous error; 2 warnings emitted\n+"}]}