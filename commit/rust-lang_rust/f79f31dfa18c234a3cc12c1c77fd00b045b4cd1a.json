{"sha": "f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OWYzMWRmYTE4YzIzNGEzY2MxMmMxYzc3ZmQwMGIwNDViNGNkMWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T11:14:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-10T12:36:56Z"}, "message": "adjust for rustc changes; normalize mplace before doing freeze-sensitive visit", "tree": {"sha": "8baca82db19886f931943f073daae5ad2efae190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8baca82db19886f931943f073daae5ad2efae190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a", "html_url": "https://github.com/rust-lang/rust/commit/f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd6cf30f6001339aa3d8fb1657521b772e06986a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6cf30f6001339aa3d8fb1657521b772e06986a", "html_url": "https://github.com/rust-lang/rust/commit/dd6cf30f6001339aa3d8fb1657521b772e06986a"}], "stats": {"total": 57, "additions": 26, "deletions": 31}, "files": [{"sha": "d40f4b3e59f643504776fd17ca747f9391ed8618", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a", "patch": "@@ -136,7 +136,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         let place = ecx.mplace_field(argvs_place, idx as u64)?;\n         ecx.write_scalar(Scalar::Ptr(arg), place.into())?;\n     }\n-    ecx.memory_mut().mark_immutable(argvs_place.to_ptr()?.alloc_id)?;\n+    ecx.memory_mut().mark_immutable(argvs_place.ptr.assert_ptr().alloc_id)?;\n     // Write a pointer to that place as the argument.\n     let argv = argvs_place.ptr;\n     ecx.write_scalar(argv, dest)?;"}, {"sha": "fb4106e5db5cd7e02f042c68e38ee85d7a9df4f9", "filename": "src/helpers.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a", "patch": "@@ -116,36 +116,33 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             .map(|(size, _)| size)\n             .unwrap_or_else(|| place.layout.size)\n         );\n-        assert!(size.bytes() > 0);\n+        let place = this.normalize_mplace_ptr(place)?;\n         // Store how far we proceeded into the place so far. Everything to the left of\n         // this offset has already been handled, in the sense that the frozen parts\n         // have had `action` called on them.\n-        let mut end_ptr = place.ptr;\n+        let mut end_ptr = place.ptr.assert_ptr();\n         // Called when we detected an `UnsafeCell` at the given offset and size.\n         // Calls `action` and advances `end_ptr`.\n         let mut unsafe_cell_action = |unsafe_cell_ptr: Scalar<Tag>, unsafe_cell_size: Size| {\n-            if unsafe_cell_size != Size::ZERO {\n-                debug_assert_eq!(unsafe_cell_ptr.to_ptr().unwrap().alloc_id,\n-                    end_ptr.to_ptr().unwrap().alloc_id);\n-                debug_assert_eq!(unsafe_cell_ptr.to_ptr().unwrap().tag,\n-                    end_ptr.to_ptr().unwrap().tag);\n-            }\n+            let unsafe_cell_ptr = unsafe_cell_ptr.assert_ptr();\n+            debug_assert_eq!(unsafe_cell_ptr.alloc_id, end_ptr.alloc_id);\n+            debug_assert_eq!(unsafe_cell_ptr.tag, end_ptr.tag);\n             // We assume that we are given the fields in increasing offset order,\n             // and nothing else changes.\n-            let unsafe_cell_offset = unsafe_cell_ptr.get_ptr_offset(this);\n-            let end_offset = end_ptr.get_ptr_offset(this);\n+            let unsafe_cell_offset = unsafe_cell_ptr.offset;\n+            let end_offset = end_ptr.offset;\n             assert!(unsafe_cell_offset >= end_offset);\n             let frozen_size = unsafe_cell_offset - end_offset;\n             // Everything between the end_ptr and this `UnsafeCell` is frozen.\n             if frozen_size != Size::ZERO {\n-                action(end_ptr.to_ptr()?, frozen_size, /*frozen*/true)?;\n+                action(end_ptr, frozen_size, /*frozen*/true)?;\n             }\n             // This `UnsafeCell` is NOT frozen.\n             if unsafe_cell_size != Size::ZERO {\n-                action(unsafe_cell_ptr.to_ptr()?, unsafe_cell_size, /*frozen*/false)?;\n+                action(unsafe_cell_ptr, unsafe_cell_size, /*frozen*/false)?;\n             }\n             // Update end end_ptr.\n-            end_ptr = unsafe_cell_ptr.ptr_wrapping_offset(unsafe_cell_size, this);\n+            end_ptr = unsafe_cell_ptr.wrapping_offset(unsafe_cell_size, this);\n             // Done\n             Ok(())\n         };\n@@ -234,7 +231,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     layout::FieldPlacement::Arbitrary { .. } => {\n                         // Gather the subplaces and sort them before visiting.\n                         let mut places = fields.collect::<InterpResult<'tcx, Vec<MPlaceTy<'tcx, Tag>>>>()?;\n-                        places.sort_by_key(|place| place.ptr.get_ptr_offset(self.ecx()));\n+                        places.sort_by_key(|place| place.ptr.assert_ptr().offset);\n                         self.walk_aggregate(place, places.into_iter().map(Ok))\n                     }\n                     layout::FieldPlacement::Union { .. } => {"}, {"sha": "fd46eaea9dab8843a74867621e61a07990aea227", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a", "patch": "@@ -842,13 +842,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             },\n             \"GetSystemInfo\" => {\n                 let system_info = this.deref_operand(args[0])?;\n-                let (system_info_ptr, align) = system_info.to_scalar_ptr_align();\n-                let system_info_ptr = this.memory()\n-                    .check_ptr_access(\n-                        system_info_ptr,\n-                        system_info.layout.size,\n-                        align,\n-                    )?\n+                let system_info_ptr = this.check_mplace_access(system_info, None)?\n                     .expect(\"cannot be a ZST\");\n                 // Initialize with `0`.\n                 this.memory_mut().get_mut(system_info_ptr.alloc_id)?"}, {"sha": "6038950bad9f63e4922be71c2544de6f587332a9", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=f79f31dfa18c234a3cc12c1c77fd00b045b4cd1a", "patch": "@@ -166,17 +166,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let elem_size = elem_layout.size.bytes();\n                 let count = this.read_scalar(args[2])?.to_usize(this)?;\n                 let elem_align = elem_layout.align.abi;\n-                // erase tags: this is a raw ptr operation\n+\n+                let size = Size::from_bytes(count * elem_size);\n                 let src = this.read_scalar(args[0])?.not_undef()?;\n+                let src = this.memory().check_ptr_access(src, size, elem_align)?;\n                 let dest = this.read_scalar(args[1])?.not_undef()?;\n-                this.memory_mut().copy(\n-                    src,\n-                    elem_align,\n-                    dest,\n-                    elem_align,\n-                    Size::from_bytes(count * elem_size),\n-                    intrinsic_name.ends_with(\"_nonoverlapping\"),\n-                )?;\n+                let dest = this.memory().check_ptr_access(dest, size, elem_align)?;\n+\n+                if let (Some(src), Some(dest)) = (src, dest) {\n+                    this.memory_mut().copy(\n+                        src,\n+                        dest,\n+                        size,\n+                        intrinsic_name.ends_with(\"_nonoverlapping\"),\n+                    )?;\n+                }\n             }\n \n             \"discriminant_value\" => {"}]}