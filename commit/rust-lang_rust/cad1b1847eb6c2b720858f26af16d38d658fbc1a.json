{"sha": "cad1b1847eb6c2b720858f26af16d38d658fbc1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZDFiMTg0N2ViNmMyYjcyMDg1OGYyNmFmMTZkMzhkNjU4ZmJjMWE=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-03-21T18:40:00Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-06-05T20:09:27Z"}, "message": "Added feature gate.", "tree": {"sha": "6993426884e562b17bf3773aec74fc82b461ffa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6993426884e562b17bf3773aec74fc82b461ffa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cad1b1847eb6c2b720858f26af16d38d658fbc1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cad1b1847eb6c2b720858f26af16d38d658fbc1a", "html_url": "https://github.com/rust-lang/rust/commit/cad1b1847eb6c2b720858f26af16d38d658fbc1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cad1b1847eb6c2b720858f26af16d38d658fbc1a/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01f49f0bb2461ebe1987a40c6afea5b1dd30e881", "url": "https://api.github.com/repos/rust-lang/rust/commits/01f49f0bb2461ebe1987a40c6afea5b1dd30e881", "html_url": "https://github.com/rust-lang/rust/commit/01f49f0bb2461ebe1987a40c6afea5b1dd30e881"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "eab01c0bf99247991a0a73ba7bf4a302a1f96b98", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cad1b1847eb6c2b720858f26af16d38d658fbc1a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad1b1847eb6c2b720858f26af16d38d658fbc1a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=cad1b1847eb6c2b720858f26af16d38d658fbc1a", "patch": "@@ -200,7 +200,7 @@ enum ImplTraitContext<'a> {\n     Disallowed(ImplTraitPosition),\n }\n \n-/// Position in which `impl Trait` is disallowed. Used for error reporting.\n+/// Position in which `impl Trait` is disallowed.\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n enum ImplTraitPosition {\n     /// Disallowed in `let` / `const` / `static` bindings."}, {"sha": "4a95b6f69a161a7834f4908f868c155c3adc9f38", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cad1b1847eb6c2b720858f26af16d38d658fbc1a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad1b1847eb6c2b720858f26af16d38d658fbc1a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=cad1b1847eb6c2b720858f26af16d38d658fbc1a", "patch": "@@ -15,7 +15,10 @@\n use AttributeType::*;\n use AttributeGate::*;\n \n-use crate::ast::{self, NodeId, GenericParam, GenericParamKind, PatKind, RangeEnd};\n+use crate::ast::{\n+    self, AssocTyConstraint, AssocTyConstraintKind, NodeId, GenericParam, GenericParamKind,\n+    PatKind, RangeEnd,\n+};\n use crate::attr;\n use crate::early_buffered_lints::BufferedEarlyLintId;\n use crate::source_map::Spanned;\n@@ -554,6 +557,9 @@ declare_features! (\n     // Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),\n \n+    // Allows the user of associated type bounds.\n+    (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -1917,7 +1923,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             self.builtin_attributes.get(&ident.name).map(|a| *a)\n         });\n \n-        // check for gated attributes\n+        // Check for gated attributes.\n         self.context.check_attribute(attr, attr_info, false);\n \n         if attr.check_name(sym::doc) {\n@@ -2115,7 +2121,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_fn_ret_ty(&mut self, ret_ty: &'a ast::FunctionRetTy) {\n         if let ast::FunctionRetTy::Ty(ref output_ty) = *ret_ty {\n             if let ast::TyKind::Never = output_ty.node {\n-                // Do nothing\n+                // Do nothing.\n             } else {\n                 self.visit_ty(output_ty)\n             }\n@@ -2171,7 +2177,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n             _ => {}\n         }\n-        visit::walk_expr(self, e);\n+        visit::walk_expr(self, e)\n     }\n \n     fn visit_arm(&mut self, arm: &'a ast::Arm) {\n@@ -2220,15 +2226,27 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             gate_feature_post!(&self, c_variadic, span, \"C-variadic functions are unstable\");\n         }\n \n-        visit::walk_fn(self, fn_kind, fn_decl, span);\n+        visit::walk_fn(self, fn_kind, fn_decl, span)\n     }\n \n     fn visit_generic_param(&mut self, param: &'a GenericParam) {\n-        if let GenericParamKind::Const { .. } = param.kind {\n-            gate_feature_post!(&self, const_generics, param.ident.span,\n-                \"const generics are unstable\");\n+        match param.kind {\n+            GenericParamKind::Const { .. } =>\n+                gate_feature_post!(&self, const_generics, param.ident.span,\n+                    \"const generics are unstable\"),\n+            _ => {}\n+        }\n+        visit::walk_generic_param(self, param)\n+    }\n+\n+    fn visit_assoc_ty_constraint(&mut self, constraint: &'a AssocTyConstraint) {\n+        match constraint.kind {\n+            AssocTyConstraintKind::Bound { .. } =>\n+                gate_feature_post!(&self, associated_type_bounds, constraint.span,\n+                    \"associated type bounds are unstable\"),\n+            _ => {}\n         }\n-        visit::walk_generic_param(self, param);\n+        visit::walk_assoc_ty_constraint(self, constraint)\n     }\n \n     fn visit_trait_item(&mut self, ti: &'a ast::TraitItem) {\n@@ -2266,7 +2284,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n             _ => {}\n         }\n-        visit::walk_trait_item(self, ti);\n+        visit::walk_trait_item(self, ti)\n     }\n \n     fn visit_impl_item(&mut self, ii: &'a ast::ImplItem) {\n@@ -2298,15 +2316,15 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n             _ => {}\n         }\n-        visit::walk_impl_item(self, ii);\n+        visit::walk_impl_item(self, ii)\n     }\n \n     fn visit_vis(&mut self, vis: &'a ast::Visibility) {\n         if let ast::VisibilityKind::Crate(ast::CrateSugar::JustCrate) = vis.node {\n             gate_feature_post!(&self, crate_visibility_modifier, vis.span,\n                                \"`crate` visibility modifier is experimental\");\n         }\n-        visit::walk_vis(self, vis);\n+        visit::walk_vis(self, vis)\n     }\n }\n "}]}