{"sha": "ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMGM5MDNmNmEyNWNkOWQ4YzkwMGZiZGUzMzZkNGE0YTViNDNjNTY=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-03-31T18:26:25Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-31T21:16:02Z"}, "message": "More stuff to go with the new expr_call_self AST node", "tree": {"sha": "7401bc79f12a909f271caaed8d29b8913493f4c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7401bc79f12a909f271caaed8d29b8913493f4c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56", "html_url": "https://github.com/rust-lang/rust/commit/ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e939d6f17c8dce7c2154c08ee044b749cbba41f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e939d6f17c8dce7c2154c08ee044b749cbba41f4", "html_url": "https://github.com/rust-lang/rust/commit/e939d6f17c8dce7c2154c08ee044b749cbba41f4"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "38aff67bc9263b613e55e899f68b479bd696751c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56", "patch": "@@ -4444,6 +4444,70 @@ fn trans_call(@block_ctxt cx, @ast.expr f,\n     ret res(bcx, retval);\n }\n \n+fn trans_call_self(@block_ctxt cx, @ast.expr f,\n+                   option.t[ValueRef] lliterbody,\n+                   vec[@ast.expr] args,\n+                   &ast.ann ann) -> result {\n+    log \"translating a self-call\";\n+\n+    auto f_res = trans_lval(cx, f);\n+    auto faddr = f_res.res.val;\n+    auto llenv = C_null(T_opaque_closure_ptr(cx.fcx.ccx.tn));\n+\n+    alt (f_res.llobj) {\n+        case (some[ValueRef](_)) {\n+            // It's a vtbl entry.\n+            faddr = f_res.res.bcx.build.Load(faddr);\n+        }\n+        case (none[ValueRef]) {\n+            // It's a closure.\n+            auto bcx = f_res.res.bcx;\n+            auto pair = faddr;\n+            faddr = bcx.build.GEP(pair, vec(C_int(0),\n+                                            C_int(abi.fn_field_code)));\n+            faddr = bcx.build.Load(faddr);\n+\n+            auto llclosure = bcx.build.GEP(pair,\n+                                           vec(C_int(0),\n+                                               C_int(abi.fn_field_box)));\n+            llenv = bcx.build.Load(llclosure);\n+        }\n+    }\n+    auto fn_ty = ty.expr_ty(f);\n+    auto ret_ty = ty.ann_to_type(ann);\n+    auto args_res = trans_args(f_res.res.bcx,\n+                               llenv, f_res.llobj,\n+                               f_res.generic,\n+                               lliterbody,\n+                               args, fn_ty);\n+\n+    auto bcx = args_res._0;\n+    auto llargs = args_res._1;\n+    auto llretslot = args_res._2;\n+\n+    /*\n+    log \"calling: \" + val_str(cx.fcx.ccx.tn, faddr);\n+\n+    for (ValueRef arg in llargs) {\n+        log \"arg: \" + val_str(cx.fcx.ccx.tn, arg);\n+    }\n+    */\n+\n+    bcx.build.FastCall(faddr, llargs);\n+    auto retval = C_nil();\n+\n+    if (!ty.type_is_nil(ret_ty)) {\n+        retval = load_scalar_or_boxed(bcx, llretslot, ret_ty);\n+        // Retval doesn't correspond to anything really tangible in the frame,\n+        // but it's a ref all the same, so we put a note here to drop it when\n+        // we're done in this scope.\n+        find_scope_cx(cx).cleanups +=\n+            vec(clean(bind drop_ty(_, retval, ret_ty)));\n+    }\n+\n+    ret res(bcx, retval);\n+}\n+\n fn trans_tup(@block_ctxt cx, vec[ast.elt] elts,\n              &ast.ann ann) -> result {\n     auto bcx = cx;\n@@ -4680,6 +4744,10 @@ fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             ret trans_call(cx, f, none[ValueRef], args, ann);\n         }\n \n+        case (ast.expr_call_self(?f, ?args, ?ann)) {\n+            ret trans_call_self(cx, f, none[ValueRef], args, ann);\n+        }\n+\n         case (ast.expr_cast(?e, _, ?ann)) {\n             ret trans_cast(cx, e, ann);\n         }"}, {"sha": "2d17696be88befc241aeaa9dc6ed27ae3202a74e", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56", "patch": "@@ -431,6 +431,13 @@ impure fn print_expr(ps s, &@ast.expr expr) {\n             commasep_exprs(s, args);\n             pclose(s);\n         }\n+        case (ast.expr_call_self(?func,?args,_)) {\n+            wrd(s.s, \"self.\");\n+            print_expr(s, func);\n+            popen(s);\n+            commasep_exprs(s, args);\n+            pclose(s);\n+        }\n         case (ast.expr_bind(?func,?args,_)) {\n             impure fn print_opt(ps s, &option.t[@ast.expr] expr) {\n                 alt (expr) {"}]}