{"sha": "455591d026546c78b5f03a4d013470685bcc2813", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NTU5MWQwMjY1NDZjNzhiNWYwM2E0ZDAxMzQ3MDY4NWJjYzI4MTM=", "commit": {"author": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-04T16:24:38Z"}, "committer": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-04T16:24:38Z"}, "message": "Fix my merge", "tree": {"sha": "6d29b679d8f8d98a73e3c1f29dc2f8ebdb061101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d29b679d8f8d98a73e3c1f29dc2f8ebdb061101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/455591d026546c78b5f03a4d013470685bcc2813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/455591d026546c78b5f03a4d013470685bcc2813", "html_url": "https://github.com/rust-lang/rust/commit/455591d026546c78b5f03a4d013470685bcc2813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/455591d026546c78b5f03a4d013470685bcc2813/comments", "author": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "committer": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efcd2385ea2389f270ff8ac8bc256636f647b130", "url": "https://api.github.com/repos/rust-lang/rust/commits/efcd2385ea2389f270ff8ac8bc256636f647b130", "html_url": "https://github.com/rust-lang/rust/commit/efcd2385ea2389f270ff8ac8bc256636f647b130"}], "stats": {"total": 130, "additions": 0, "deletions": 130}, "files": [{"sha": "f244f2869a60e9421b68f62ed2dbd441ab5d9633", "filename": "src/libstd/json.rs", "status": "modified", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/455591d026546c78b5f03a4d013470685bcc2813/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455591d026546c78b5f03a4d013470685bcc2813/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=455591d026546c78b5f03a4d013470685bcc2813", "patch": "@@ -27,136 +27,6 @@ pub struct Error {\n     line: uint,\n     col: uint,\n     msg: @~str,\n-};\n-\n-/// Serializes a json value into a io::writer\n-fn to_writer(wr: io::Writer, j: Json) {\n-    match j {\n-      Num(n) => wr.write_str(float::to_str(n, 6u)),\n-      String(s) => wr.write_str(escape_str(*s)),\n-      Boolean(b) => wr.write_str(if b { ~\"true\" } else { ~\"false\" }),\n-      List(v) => {\n-        wr.write_char('[');\n-        let mut first = true;\n-        for (*v).each |item| {\n-            if !first {\n-                wr.write_str(~\", \");\n-            }\n-            first = false;\n-            to_writer(wr, *item);\n-        };\n-        wr.write_char(']');\n-      }\n-      Dict(d) => {\n-        if d.size() == 0u {\n-            wr.write_str(~\"{}\");\n-            return;\n-        }\n-\n-        wr.write_str(~\"{ \");\n-        let mut first = true;\n-        for d.each |key, value| {\n-            if !first {\n-                wr.write_str(~\", \");\n-            }\n-            first = false;\n-            wr.write_str(escape_str(key));\n-            wr.write_str(~\": \");\n-            to_writer(wr, value);\n-        };\n-        wr.write_str(~\" }\");\n-      }\n-      Null => wr.write_str(~\"null\")\n-    }\n-}\n-\n-/// Serializes a json value into a io::writer\n-fn to_writer_pretty(wr: io::Writer, j: Json, indent: uint) {\n-    fn spaces(n: uint) -> ~str {\n-        let mut ss = ~\"\";\n-        for n.times { str::push_str(&mut ss, \" \"); }\n-        return ss;\n-    }\n-\n-    match j {\n-      Num(n) => wr.write_str(float::to_str(n, 6u)),\n-      String(s) => wr.write_str(escape_str(*s)),\n-      Boolean(b) => wr.write_str(if b { ~\"true\" } else { ~\"false\" }),\n-      List(vv) => {\n-        if vv.len() == 0u {\n-            wr.write_str(~\"[]\");\n-            return;\n-        }\n-\n-        let inner_indent = indent + 2;\n-\n-        // [\n-        wr.write_str(\"[\\n\");\n-        wr.write_str(spaces(inner_indent));\n-\n-        // [ elem,\n-        //   elem,\n-        //   elem ]\n-        let mut first = true;\n-        for (*vv).each |item| {\n-            if !first {\n-                wr.write_str(~\",\\n\");\n-                wr.write_str(spaces(inner_indent));\n-            }\n-            first = false;\n-            to_writer_pretty(wr, *item, inner_indent);\n-        };\n-\n-        // ]\n-        wr.write_str(\"\\n\");\n-        wr.write_str(spaces(indent));\n-        wr.write_str(~\"]\");\n-      }\n-      Dict(dd) => {\n-        if dd.size() == 0u {\n-            wr.write_str(~\"{}\");\n-            return;\n-        }\n-\n-        let inner_indent = indent + 2;\n-\n-        // convert from a dictionary\n-        let mut pairs = ~[];\n-        for dd.each |key, value| {\n-            vec::push(pairs, (key, value));\n-        }\n-\n-        // sort by key strings\n-        let sorted_pairs = do sort::merge_sort(pairs) |a,b| { *a <= *b };\n-\n-        // {\n-        wr.write_str(~\"{\\n\");\n-        wr.write_str(spaces(inner_indent));\n-\n-        // { k: v,\n-        //   k: v,\n-        //   k: v }\n-        let mut first = true;\n-        for sorted_pairs.each |kv| {\n-            let (key, value) = *kv;\n-            if !first {\n-                wr.write_str(~\",\\n\");\n-                wr.write_str(spaces(inner_indent));\n-            }\n-            first = false;\n-            let key = str::append(escape_str(key), ~\": \");\n-            let key_indent = inner_indent + str::len(key);\n-            wr.write_str(key);\n-            to_writer_pretty(wr, value, key_indent);\n-        };\n-\n-        // }\n-        wr.write_str(~\"\\n\");\n-        wr.write_str(spaces(indent));\n-        wr.write_str(~\"}\");\n-      }\n-      Null => wr.write_str(~\"null\")\n-    }\n }\n \n fn escape_str(s: &str) -> ~str {"}]}