{"sha": "632c0af38ffec6644ec10746ee700f353f7f09b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMmMwYWYzOGZmZWM2NjQ0ZWMxMDc0NmVlNzAwZjM1M2Y3ZjA5YjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-26T00:55:16Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-26T01:13:17Z"}, "message": "borrowck diagnostics: address review comments.", "tree": {"sha": "a0f54183651805d94b4c16e434c294834b8100df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0f54183651805d94b4c16e434c294834b8100df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/632c0af38ffec6644ec10746ee700f353f7f09b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/632c0af38ffec6644ec10746ee700f353f7f09b6", "html_url": "https://github.com/rust-lang/rust/commit/632c0af38ffec6644ec10746ee700f353f7f09b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/632c0af38ffec6644ec10746ee700f353f7f09b6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c70aa344e40a2e034d3deffb18e74d1198ea69de", "url": "https://api.github.com/repos/rust-lang/rust/commits/c70aa344e40a2e034d3deffb18e74d1198ea69de", "html_url": "https://github.com/rust-lang/rust/commit/c70aa344e40a2e034d3deffb18e74d1198ea69de"}], "stats": {"total": 57, "additions": 31, "deletions": 26}, "files": [{"sha": "8f18fb4a30ed3ae5a366b16378d5257e0d3aa4ff", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/632c0af38ffec6644ec10746ee700f353f7f09b6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632c0af38ffec6644ec10746ee700f353f7f09b6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=632c0af38ffec6644ec10746ee700f353f7f09b6", "patch": "@@ -256,8 +256,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             \"report_move_out_while_borrowed: location={:?} place={:?} span={:?} borrow={:?}\",\n             location, place, span, borrow\n         );\n-        let value_msg = self.describe_place_str(place.as_ref());\n-        let borrow_msg = self.describe_place_str(borrow.borrowed_place.as_ref());\n+        let value_msg = self.describe_any_place(place.as_ref());\n+        let borrow_msg = self.describe_any_place(borrow.borrowed_place.as_ref());\n \n         let borrow_spans = self.retrieve_borrow_spans(borrow);\n         let borrow_span = borrow_spans.args_or_use();\n@@ -266,7 +266,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let span = move_spans.args_or_use();\n \n         let mut err =\n-            self.cannot_move_when_borrowed(span, &self.describe_place_str(place.as_ref()));\n+            self.cannot_move_when_borrowed(span, &self.describe_any_place(place.as_ref()));\n         err.span_label(borrow_span, format!(\"borrow of {} occurs here\", borrow_msg));\n         err.span_label(span, format!(\"move out of {} occurs here\", value_msg));\n \n@@ -306,14 +306,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         let mut err = self.cannot_use_when_mutably_borrowed(\n             span,\n-            &self.describe_place_str(place.as_ref()),\n+            &self.describe_any_place(place.as_ref()),\n             borrow_span,\n-            &self.describe_place_str(borrow.borrowed_place.as_ref()),\n+            &self.describe_any_place(borrow.borrowed_place.as_ref()),\n         );\n \n         borrow_spans.var_span_label(&mut err, {\n             let place = &borrow.borrowed_place;\n-            let desc_place = self.describe_place_str(place.as_ref());\n+            let desc_place = self.describe_any_place(place.as_ref());\n             format!(\"borrow occurs due to use of {}{}\", desc_place, borrow_spans.describe())\n         });\n \n@@ -506,7 +506,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             );\n         } else {\n             let borrow_place = &issued_borrow.borrowed_place;\n-            let borrow_place_desc = self.describe_place_str(borrow_place.as_ref());\n+            let borrow_place_desc = self.describe_any_place(borrow_place.as_ref());\n             issued_spans.var_span_label(\n                 &mut err,\n                 format!(\n@@ -647,12 +647,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 && proj_base == target_base.projection\n                             {\n                                 return Some((\n-                                    self.describe_place_str(PlaceRef {\n+                                    self.describe_any_place(PlaceRef {\n                                         local,\n                                         projection: proj_base,\n                                     }),\n-                                    self.describe_place_str(first_borrowed_place.as_ref()),\n-                                    self.describe_place_str(second_borrowed_place.as_ref()),\n+                                    self.describe_any_place(first_borrowed_place.as_ref()),\n+                                    self.describe_any_place(second_borrowed_place.as_ref()),\n                                     union_ty.to_string(),\n                                 ));\n                             }\n@@ -665,7 +665,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // If we didn't find a field access into a union, or both places match, then\n                 // only return the description of the first place.\n                 (\n-                    self.describe_place_str(first_borrowed_place.as_ref()),\n+                    self.describe_any_place(first_borrowed_place.as_ref()),\n                     \"\".to_string(),\n                     \"\".to_string(),\n                     \"\".to_string(),\n@@ -1388,7 +1388,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let loan_spans = self.retrieve_borrow_spans(loan);\n         let loan_span = loan_spans.args_or_use();\n \n-        let descr_place = self.describe_place_str(place.as_ref());\n+        let descr_place = self.describe_any_place(place.as_ref());\n         if loan.kind == BorrowKind::Shallow {\n             if let Some(section) = self.classify_immutable_section(&loan.assigned_place) {\n                 let mut err = self.cannot_mutate_in_immutable_section(\n@@ -1463,8 +1463,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             })\n             | Some(LocalDecl { local_info: LocalInfo::StaticRef { .. }, .. })\n             | Some(LocalDecl { local_info: LocalInfo::Other, .. })\n-            | None => (self.describe_place_str(place.as_ref()), assigned_span),\n-            Some(decl) => (self.describe_place_str(err_place.as_ref()), decl.source_info.span),\n+            | None => (self.describe_any_place(place.as_ref()), assigned_span),\n+            Some(decl) => (self.describe_any_place(err_place.as_ref()), decl.source_info.span),\n         };\n \n         let mut err = self.cannot_reassign_immutable(span, &place_description, from_arg);"}, {"sha": "605093d8acad2fc184fe38b8c4315543af03e738", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/632c0af38ffec6644ec10746ee700f353f7f09b6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632c0af38ffec6644ec10746ee700f353f7f09b6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=632c0af38ffec6644ec10746ee700f353f7f09b6", "patch": "@@ -138,10 +138,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     }\n \n     /// End-user visible description of `place` if one can be found.\n-    /// If the place is a temporary for instance, `value` will be returned.\n-    pub(super) fn describe_place_str(&self, place_ref: PlaceRef<'tcx>) -> String {\n+    /// If the place is a temporary for instance, `\"value\"` will be returned.\n+    pub(super) fn describe_any_place(&self, place_ref: PlaceRef<'tcx>) -> String {\n         match self.describe_place(place_ref) {\n-            Some(descr) => format!(\"`{}`\", descr),\n+            Some(mut descr) => {\n+                // Surround descr with `backticks`.\n+                descr.reserve(2);\n+                descr.insert_str(0, \"`\");\n+                descr.push_str(\"`\");\n+                descr\n+            }\n             None => \"value\".to_string(),\n         }\n     }"}, {"sha": "2cdc1ced0bbeaffb2dd4d093ad525f207ff6c9f3", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/632c0af38ffec6644ec10746ee700f353f7f09b6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632c0af38ffec6644ec10746ee700f353f7f09b6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=632c0af38ffec6644ec10746ee700f353f7f09b6", "patch": "@@ -272,14 +272,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         span: Span,\n     ) -> DiagnosticBuilder<'a> {\n         let description = if place.projection.len() == 1 {\n-            format!(\"static item {}\", self.describe_place_str(place.as_ref()))\n+            format!(\"static item {}\", self.describe_any_place(place.as_ref()))\n         } else {\n             let base_static = PlaceRef { local: place.local, projection: &[ProjectionElem::Deref] };\n \n             format!(\n                 \"{} as {} is a static item\",\n-                self.describe_place_str(place.as_ref()),\n-                self.describe_place_str(base_static),\n+                self.describe_any_place(place.as_ref()),\n+                self.describe_any_place(base_static),\n             )\n         };\n \n@@ -349,7 +349,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let upvar_name = upvar.name;\n                 let upvar_span = self.infcx.tcx.hir().span(upvar_hir_id);\n \n-                let place_name = self.describe_place_str(move_place.as_ref());\n+                let place_name = self.describe_any_place(move_place.as_ref());\n \n                 let place_description =\n                     if self.is_upvar_field_projection(move_place.as_ref()).is_some() {"}, {"sha": "f224041270dcc04b0bfb289a23d58f923d46e8f0", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632c0af38ffec6644ec10746ee700f353f7f09b6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632c0af38ffec6644ec10746ee700f353f7f09b6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=632c0af38ffec6644ec10746ee700f353f7f09b6", "patch": "@@ -170,7 +170,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     &mut err,\n                     format!(\n                         \"mutable borrow occurs due to use of {} in closure\",\n-                        self.describe_place_str(access_place.as_ref()),\n+                        self.describe_any_place(access_place.as_ref()),\n                     ),\n                 );\n                 borrow_span"}, {"sha": "6e6bbabd35b3c4e3b0774ca876e7451be255debf", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/632c0af38ffec6644ec10746ee700f353f7f09b6/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632c0af38ffec6644ec10746ee700f353f7f09b6/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=632c0af38ffec6644ec10746ee700f353f7f09b6", "patch": "@@ -53,7 +53,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         old_load_end_span: Option<Span>,\n     ) -> DiagnosticBuilder<'cx> {\n         let via =\n-            |msg: &str| if msg.is_empty() { msg.to_string() } else { format!(\" (via {})\", msg) };\n+            |msg: &str| if msg.is_empty() { \"\".to_string() } else { format!(\" (via {})\", msg) };\n         let mut err = struct_span_err!(\n             self,\n             new_loan_span,\n@@ -201,13 +201,12 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         old_load_end_span: Option<Span>,\n     ) -> DiagnosticBuilder<'cx> {\n         let via =\n-            |msg: &str| if msg.is_empty() { msg.to_string() } else { format!(\" (via {})\", msg) };\n+            |msg: &str| if msg.is_empty() { \"\".to_string() } else { format!(\" (via {})\", msg) };\n         let mut err = struct_span_err!(\n             self,\n             span,\n             E0502,\n-            \"cannot borrow {}{} as {} because {} is also borrowed \\\n-             as {}{}\",\n+            \"cannot borrow {}{} as {} because {} is also borrowed as {}{}\",\n             desc_new,\n             via(msg_new),\n             kind_new,"}]}