{"sha": "26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YzdlNTVmNDdiZjNhOTNhMmUzNjlkMTYyZGNjMDJkZGYxMDZmM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-25T02:26:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-25T02:26:19Z"}, "message": "Auto merge of #83454 - JohnTitor:rollup-9ae0565, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #83041 (stabilize debug_non_exhaustive)\n - #83349 (Remove Option::{unwrap_none, expect_none}.)\n - #83420 (Add documentation for rustdoc-gui tests)\n - #83421 (Add Result::into_err where the Ok variant is the never type)\n - #83427 (small cleanups in rustc_errors / emitter)\n - #83434 (Update RELEASES.md)\n - #83440 (Use intra-doc link in core::cell)\n - #83442 (LLVMWrapper: attractive nuisance macros)\n\nFailed merges:\n\n - #83438 (Update RELEASES.md)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8b26562d9a9744a79f3d00dd9351e320132f251d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b26562d9a9744a79f3d00dd9351e320132f251d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "html_url": "https://github.com/rust-lang/rust/commit/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e0e2ec268c140e607e1ac7f49f145612d0f597", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e0e2ec268c140e607e1ac7f49f145612d0f597", "html_url": "https://github.com/rust-lang/rust/commit/07e0e2ec268c140e607e1ac7f49f145612d0f597"}, {"sha": "67436c11c2a52e124af92e1e7eb91d81200452d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/67436c11c2a52e124af92e1e7eb91d81200452d7", "html_url": "https://github.com/rust-lang/rust/commit/67436c11c2a52e124af92e1e7eb91d81200452d7"}], "stats": {"total": 237, "additions": 96, "deletions": 141}, "files": [{"sha": "dfb21ed838063bfcfb8798b19f7718d7e56dc9d7", "filename": "RELEASES.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "patch": "@@ -34,7 +34,6 @@ Compiler\n   `aarch64-unknown-linux-gnu_ilp32`, and `aarch64_be-unknown-linux-gnu_ilp32` targets.][81455]\n - [Added tier 3 support for `i386-unknown-linux-gnu` and `i486-unknown-linux-gnu` targets.][80662]\n - [The `target-cpu=native` option will now detect individual features of CPUs.][80749]\n-- [Rust now uses `inline-asm` for stack probes when used with LLVM 11.0.1+][77885]\n \n \\* Refer to Rust's [platform support page][forge-platform-support] for more\n information on Rust's tiered platform support.\n@@ -146,7 +145,6 @@ Internal Only\n [80764]: https://github.com/rust-lang/rust/pull/80764\n [80749]: https://github.com/rust-lang/rust/pull/80749\n [80662]: https://github.com/rust-lang/rust/pull/80662\n-[77885]: https://github.com/rust-lang/rust/pull/77885\n [cargo/8997]: https://github.com/rust-lang/cargo/pull/8997\n [cargo/9112]: https://github.com/rust-lang/cargo/pull/9112\n [feature-resolver@2.0]: https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2"}, {"sha": "66499fbb8da9238f189a771cf6c35c5441ad8f23", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "patch": "@@ -434,34 +434,31 @@ pub trait Emitter {\n         span: &mut MultiSpan,\n         children: &mut Vec<SubDiagnostic>,\n     ) {\n+        let source_map = if let Some(ref sm) = source_map {\n+            sm\n+        } else {\n+            return;\n+        };\n         debug!(\"fix_multispans_in_extern_macros: before: span={:?} children={:?}\", span, children);\n-        for span in iter::once(&mut *span).chain(children.iter_mut().map(|child| &mut child.span)) {\n-            self.fix_multispan_in_extern_macros(source_map, span);\n+        self.fix_multispan_in_extern_macros(source_map, span);\n+        for child in children.iter_mut() {\n+            self.fix_multispan_in_extern_macros(source_map, &mut child.span);\n         }\n         debug!(\"fix_multispans_in_extern_macros: after: span={:?} children={:?}\", span, children);\n     }\n \n     // This \"fixes\" MultiSpans that contain `Span`s pointing to locations inside of external macros.\n     // Since these locations are often difficult to read,\n     // we move these spans from the external macros to their corresponding use site.\n-    fn fix_multispan_in_extern_macros(\n-        &self,\n-        source_map: &Option<Lrc<SourceMap>>,\n-        span: &mut MultiSpan,\n-    ) {\n-        let sm = match source_map {\n-            Some(ref sm) => sm,\n-            None => return,\n-        };\n-\n+    fn fix_multispan_in_extern_macros(&self, source_map: &Lrc<SourceMap>, span: &mut MultiSpan) {\n         // First, find all the spans in external macros and point instead at their use site.\n         let replacements: Vec<(Span, Span)> = span\n             .primary_spans()\n             .iter()\n             .copied()\n             .chain(span.span_labels().iter().map(|sp_label| sp_label.span))\n             .filter_map(|sp| {\n-                if !sp.is_dummy() && sm.is_imported(sp) {\n+                if !sp.is_dummy() && source_map.is_imported(sp) {\n                     let maybe_callsite = sp.source_callsite();\n                     if sp != maybe_callsite {\n                         return Some((sp, maybe_callsite));\n@@ -1232,7 +1229,6 @@ impl EmitterWriter {\n         is_secondary: bool,\n     ) -> io::Result<()> {\n         let mut buffer = StyledBuffer::new();\n-        let header_style = if is_secondary { Style::HeaderMsg } else { Style::MainHeaderMsg };\n \n         if !msp.has_primary_spans() && !msp.has_span_labels() && is_secondary && !self.short_message\n         {\n@@ -1257,6 +1253,7 @@ impl EmitterWriter {\n                 buffer.append(0, &code, Style::Level(*level));\n                 buffer.append(0, \"]\", Style::Level(*level));\n             }\n+            let header_style = if is_secondary { Style::HeaderMsg } else { Style::MainHeaderMsg };\n             if *level != Level::FailureNote {\n                 buffer.append(0, \": \", header_style);\n             }\n@@ -1470,9 +1467,7 @@ impl EmitterWriter {\n                     let mut to_add = FxHashMap::default();\n \n                     for (depth, style) in depths {\n-                        if multilines.get(&depth).is_some() {\n-                            multilines.remove(&depth);\n-                        } else {\n+                        if multilines.remove(&depth).is_none() {\n                             to_add.insert(depth, style);\n                         }\n                     }\n@@ -1726,14 +1721,13 @@ impl EmitterWriter {\n                     if !self.short_message {\n                         draw_col_separator_no_space(&mut buffer, 0, max_line_num_len + 1);\n                     }\n-                    match emit_to_destination(\n+                    if let Err(e) = emit_to_destination(\n                         &buffer.render(),\n                         level,\n                         &mut self.dst,\n                         self.short_message,\n                     ) {\n-                        Ok(()) => (),\n-                        Err(e) => panic!(\"failed to emit error: {}\", e),\n+                        panic!(\"failed to emit error: {}\", e)\n                     }\n                 }\n                 if !self.short_message {"}, {"sha": "0b1b68d83b7b9254a8a9045d0ada18bd99523f27", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "patch": "@@ -33,13 +33,6 @@\n   (LLVM_VERSION_MAJOR > (major) ||                                             \\\n    LLVM_VERSION_MAJOR == (major) && LLVM_VERSION_MINOR >= (minor))\n \n-#define LLVM_VERSION_EQ(major, minor)                                          \\\n-  (LLVM_VERSION_MAJOR == (major) && LLVM_VERSION_MINOR == (minor))\n-\n-#define LLVM_VERSION_LE(major, minor)                                          \\\n-  (LLVM_VERSION_MAJOR < (major) ||                                             \\\n-   LLVM_VERSION_MAJOR == (major) && LLVM_VERSION_MINOR <= (minor))\n-\n #define LLVM_VERSION_LT(major, minor) (!LLVM_VERSION_GE((major), (minor)))\n \n #include \"llvm/IR/LegacyPassManager.h\""}, {"sha": "9a2908c275da802a10c938d8f958efde67a11be9", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "patch": "@@ -188,7 +188,7 @@\n //! [`Rc<T>`]: ../../std/rc/struct.Rc.html\n //! [`RwLock<T>`]: ../../std/sync/struct.RwLock.html\n //! [`Mutex<T>`]: ../../std/sync/struct.Mutex.html\n-//! [`atomic`]: ../../core/sync/atomic/index.html\n+//! [`atomic`]: crate::sync::atomic\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "475ebcf07d5edbadb275f0a271a2f985eb8c9dbf", "filename": "library/core/src/fmt/builders.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs?ref=26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "patch": "@@ -165,7 +165,6 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(debug_non_exhaustive)]\n     /// use std::fmt;\n     ///\n     /// struct Bar {\n@@ -186,7 +185,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     ///     \"Bar { bar: 10, .. }\",\n     /// );\n     /// ```\n-    #[unstable(feature = \"debug_non_exhaustive\", issue = \"67364\")]\n+    #[stable(feature = \"debug_non_exhaustive\", since = \"1.53.0\")]\n     pub fn finish_non_exhaustive(&mut self) -> fmt::Result {\n         self.result = self.result.and_then(|_| {\n             // Draw non-exhaustive dots (`..`), and open brace if necessary (no fields)."}, {"sha": "da2c0cf476d1637a5ffe6e770fd9023bbb936fad", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 93, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "patch": "@@ -150,7 +150,7 @@\n use crate::iter::{FromIterator, FusedIterator, TrustedLen};\n use crate::pin::Pin;\n use crate::{\n-    fmt, hint, mem,\n+    hint, mem,\n     ops::{self, Deref, DerefMut},\n };\n \n@@ -1121,90 +1121,6 @@ impl<T: Clone> Option<&mut T> {\n     }\n }\n \n-impl<T: fmt::Debug> Option<T> {\n-    /// Consumes `self` while expecting [`None`] and returning nothing.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if the value is a [`Some`], with a panic message including the\n-    /// passed message, and the content of the [`Some`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(option_expect_none)]\n-    ///\n-    /// use std::collections::HashMap;\n-    /// let mut squares = HashMap::new();\n-    /// for i in -10..=10 {\n-    ///     // This will not panic, since all keys are unique.\n-    ///     squares.insert(i, i * i).expect_none(\"duplicate key\");\n-    /// }\n-    /// ```\n-    ///\n-    /// ```should_panic\n-    /// #![feature(option_expect_none)]\n-    ///\n-    /// use std::collections::HashMap;\n-    /// let mut sqrts = HashMap::new();\n-    /// for i in -10..=10 {\n-    ///     // This will panic, since both negative and positive `i` will\n-    ///     // insert the same `i * i` key, returning the old `Some(i)`.\n-    ///     sqrts.insert(i * i, i).expect_none(\"duplicate key\");\n-    /// }\n-    /// ```\n-    #[inline]\n-    #[track_caller]\n-    #[unstable(feature = \"option_expect_none\", reason = \"newly added\", issue = \"62633\")]\n-    pub fn expect_none(self, msg: &str) {\n-        if let Some(val) = self {\n-            expect_none_failed(msg, &val);\n-        }\n-    }\n-\n-    /// Consumes `self` while expecting [`None`] and returning nothing.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if the value is a [`Some`], with a custom panic message provided\n-    /// by the [`Some`]'s value.\n-    ///\n-    /// [`Some(v)`]: Some\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(option_unwrap_none)]\n-    ///\n-    /// use std::collections::HashMap;\n-    /// let mut squares = HashMap::new();\n-    /// for i in -10..=10 {\n-    ///     // This will not panic, since all keys are unique.\n-    ///     squares.insert(i, i * i).unwrap_none();\n-    /// }\n-    /// ```\n-    ///\n-    /// ```should_panic\n-    /// #![feature(option_unwrap_none)]\n-    ///\n-    /// use std::collections::HashMap;\n-    /// let mut sqrts = HashMap::new();\n-    /// for i in -10..=10 {\n-    ///     // This will panic, since both negative and positive `i` will\n-    ///     // insert the same `i * i` key, returning the old `Some(i)`.\n-    ///     sqrts.insert(i * i, i).unwrap_none();\n-    /// }\n-    /// ```\n-    #[inline]\n-    #[track_caller]\n-    #[unstable(feature = \"option_unwrap_none\", reason = \"newly added\", issue = \"62633\")]\n-    pub fn unwrap_none(self) {\n-        if let Some(val) = self {\n-            expect_none_failed(\"called `Option::unwrap_none()` on a `Some` value\", &val);\n-        }\n-    }\n-}\n-\n impl<T: Default> Option<T> {\n     /// Returns the contained [`Some`] value or a default\n     ///\n@@ -1321,14 +1237,6 @@ fn expect_failed(msg: &str) -> ! {\n     panic!(\"{}\", msg)\n }\n \n-// This is a separate function to reduce the code size of .expect_none() itself.\n-#[inline(never)]\n-#[cold]\n-#[track_caller]\n-fn expect_none_failed(msg: &str, value: &dyn fmt::Debug) -> ! {\n-    panic!(\"{}: {:?}\", msg, value)\n-}\n-\n /////////////////////////////////////////////////////////////////////////////\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "20f8095b7d1cee998b7115c3949b65514839ed01", "filename": "library/core/src/result.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "patch": "@@ -1167,6 +1167,42 @@ impl<T, E: Into<!>> Result<T, E> {\n     }\n }\n \n+#[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n+impl<T: Into<!>, E> Result<T, E> {\n+    /// Returns the contained [`Err`] value, but never panics.\n+    ///\n+    /// Unlike [`unwrap_err`], this method is known to never panic on the\n+    /// result types it is implemented for. Therefore, it can be used\n+    /// instead of `unwrap_err` as a maintainability safeguard that will fail\n+    /// to compile if the ok type of the `Result` is later changed\n+    /// to a type that can actually occur.\n+    ///\n+    /// [`unwrap_err`]: Result::unwrap_err\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(never_type)]\n+    /// # #![feature(unwrap_infallible)]\n+    ///\n+    /// fn only_bad_news() -> Result<!, String> {\n+    ///     Err(\"Oops, it failed\".into())\n+    /// }\n+    ///\n+    /// let error: String = only_bad_news().into_err();\n+    /// println!(\"{}\", error);\n+    /// ```\n+    #[inline]\n+    pub fn into_err(self) -> E {\n+        match self {\n+            Ok(x) => x.into(),\n+            Err(e) => e,\n+        }\n+    }\n+}\n+\n impl<T: Deref, E> Result<T, E> {\n     /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&<T as Deref>::Target, &E>`.\n     ///"}, {"sha": "4cd79687b53d4c372ace346ad2e67effc279ce91", "filename": "library/core/tests/iter/adapters/chain.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs?ref=26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "patch": "@@ -174,14 +174,14 @@ fn test_iterator_chain_size_hint() {\n fn test_iterator_chain_unfused() {\n     // Chain shouldn't be fused in its second iterator, depending on direction\n     let mut iter = NonFused::new(empty()).chain(Toggle { is_empty: true });\n-    iter.next().unwrap_none();\n-    iter.next().unwrap();\n-    iter.next().unwrap_none();\n+    assert!(iter.next().is_none());\n+    assert!(iter.next().is_some());\n+    assert!(iter.next().is_none());\n \n     let mut iter = Toggle { is_empty: true }.chain(NonFused::new(empty()));\n-    iter.next_back().unwrap_none();\n-    iter.next_back().unwrap();\n-    iter.next_back().unwrap_none();\n+    assert!(iter.next_back().is_none());\n+    assert!(iter.next_back().is_some());\n+    assert!(iter.next_back().is_none());\n }\n \n #[test]"}, {"sha": "0f43964d5cfc42f951fb3bb399f642ed4d3cb426", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "patch": "@@ -20,7 +20,6 @@\n #![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n-#![feature(debug_non_exhaustive)]\n #![feature(dec2flt)]\n #![feature(div_duration)]\n #![feature(duration_consts_2)]\n@@ -68,7 +67,6 @@\n #![feature(unwrap_infallible)]\n #![feature(option_result_unwrap_unchecked)]\n #![feature(result_into_ok_or_err)]\n-#![feature(option_unwrap_none)]\n #![feature(peekable_peek_mut)]\n #![cfg_attr(not(bootstrap), feature(ptr_metadata))]\n #![feature(once_cell)]"}, {"sha": "c461ab380ad3d2641b9bdc24ef3e36dfe5444d5a", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "patch": "@@ -225,6 +225,28 @@ pub fn test_into_ok() {\n     assert_eq!(infallible_op2().into_ok(), 667);\n }\n \n+#[test]\n+pub fn test_into_err() {\n+    fn until_error_op() -> Result<!, isize> {\n+        Err(666)\n+    }\n+\n+    assert_eq!(until_error_op().into_err(), 666);\n+\n+    enum MyNeverToken {}\n+    impl From<MyNeverToken> for ! {\n+        fn from(never: MyNeverToken) -> ! {\n+            match never {}\n+        }\n+    }\n+\n+    fn until_error_op2() -> Result<MyNeverToken, isize> {\n+        Err(667)\n+    }\n+\n+    assert_eq!(until_error_op2().into_err(), 667);\n+}\n+\n #[test]\n fn test_try() {\n     fn try_result_some() -> Option<u8> {"}, {"sha": "7683f792b8dbfbc0b483e8b30e2ab13eef7d36e0", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "patch": "@@ -25,7 +25,6 @@\n #![feature(nll)]\n #![feature(available_concurrency)]\n #![feature(internal_output_capture)]\n-#![feature(option_unwrap_none)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]\n #![feature(termination_trait_lib)]\n@@ -298,8 +297,9 @@ where\n             let test = remaining.pop().unwrap();\n             let event = TestEvent::TeWait(test.desc.clone());\n             notify_about_test_event(event)?;\n-            run_test(opts, !opts.run_tests, test, run_strategy, tx.clone(), Concurrent::No)\n-                .unwrap_none();\n+            let join_handle =\n+                run_test(opts, !opts.run_tests, test, run_strategy, tx.clone(), Concurrent::No);\n+            assert!(join_handle.is_none());\n             let completed_test = rx.recv().unwrap();\n \n             let event = TestEvent::TeResult(completed_test);"}, {"sha": "499a98a3d223793b413d0c6776758b944ed24151", "filename": "src/test/rustdoc-gui/README.md", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/src%2Ftest%2Frustdoc-gui%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/src%2Ftest%2Frustdoc-gui%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2FREADME.md?ref=26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "patch": "@@ -0,0 +1,12 @@\n+The tests present here are used to test the generated HTML from rustdoc. The\n+goal is to prevent unsound/unexpected GUI changes.\n+\n+This is using the [browser-ui-test] framework to do so. It works as follows:\n+\n+It wraps [puppeteer] to send commands to a web browser in order to navigate and\n+test what's being currently displayed in the web page.\n+\n+You can find more information and its documentation in its [repository][browser-ui-test].\n+\n+[browser-ui-test]: https://github.com/GuillaumeGomez/browser-UI-test/\n+[puppeteer]: https://pptr.dev/"}, {"sha": "f0850d5c1f1e95ed85e2d24d40d9745da8362d3b", "filename": "src/test/ui/rfc-2091-track-caller/std-panic-locations.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c7e55f47bf3a93a2e369d162dcc02ddf106f3a/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs?ref=26c7e55f47bf3a93a2e369d162dcc02ddf106f3a", "patch": "@@ -3,7 +3,6 @@\n // revisions: default mir-opt\n //[mir-opt] compile-flags: -Zmir-opt-level=4\n \n-#![feature(option_expect_none, option_unwrap_none)]\n #![allow(unconditional_panic)]\n \n //! Test that panic locations for `#[track_caller]` functions in std have the correct\n@@ -32,10 +31,6 @@ fn main() {\n     assert_panicked(|| nope.unwrap());\n     assert_panicked(|| nope.expect(\"\"));\n \n-    let yep: Option<()> = Some(());\n-    assert_panicked(|| yep.unwrap_none());\n-    assert_panicked(|| yep.expect_none(\"\"));\n-\n     let oops: Result<(), ()> = Err(());\n     assert_panicked(|| oops.unwrap());\n     assert_panicked(|| oops.expect(\"\"));"}]}