{"sha": "9facb15c49488901e0a1a91af016b9516b5a124f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYWNiMTVjNDk0ODg5MDFlMGExYTkxYWYwMTZiOTUxNmI1YTEyNGY=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-02T18:40:42Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-02T18:59:37Z"}, "message": "option::swap_unwrap, the ubiquitous 'option dance'.", "tree": {"sha": "617331803be71c893400dfdecc5631145f4193b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/617331803be71c893400dfdecc5631145f4193b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9facb15c49488901e0a1a91af016b9516b5a124f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9facb15c49488901e0a1a91af016b9516b5a124f", "html_url": "https://github.com/rust-lang/rust/commit/9facb15c49488901e0a1a91af016b9516b5a124f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9facb15c49488901e0a1a91af016b9516b5a124f/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d4742e101f476de072834cb68b6c53dfb59ed07", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d4742e101f476de072834cb68b6c53dfb59ed07", "html_url": "https://github.com/rust-lang/rust/commit/7d4742e101f476de072834cb68b6c53dfb59ed07"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "bb5cca90cd09464cdb772ea380ac9eb3115962af", "filename": "src/libcore/option.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9facb15c49488901e0a1a91af016b9516b5a124f/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9facb15c49488901e0a1a91af016b9516b5a124f/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=9facb15c49488901e0a1a91af016b9516b5a124f", "patch": "@@ -23,7 +23,7 @@ pure fn get<T: copy>(opt: option<T>) -> T {\n      * Fails if the value equals `none`\n      */\n \n-    alt opt { some(x) { return x; } none { fail ~\"option none\"; } }\n+    alt opt { some(x) { return x; } none { fail ~\"option::get none\"; } }\n }\n \n pure fn expect<T: copy>(opt: option<T>, reason: ~str) -> T {\n@@ -112,14 +112,21 @@ pure fn unwrap<T>(-opt: option<T>) -> T {\n     unsafe {\n         let addr = alt opt {\n           some(x) { ptr::addr_of(x) }\n-          none { fail ~\"option none\" }\n+          none { fail ~\"option::unwrap none\" }\n         };\n         let liberated_value = unsafe::reinterpret_cast(*addr);\n         unsafe::forget(opt);\n         return liberated_value;\n     }\n }\n \n+/// The ubiquitous option dance.\n+#[inline(always)]\n+fn swap_unwrap<T>(opt: &mut option<T>) -> T {\n+    if opt.is_none() { fail ~\"option::swap_unwrap none\" }\n+    unwrap(util::replace(opt, none))\n+}\n+\n pure fn unwrap_expect<T>(-opt: option<T>, reason: ~str) -> T {\n     //! As unwrap, but with a specified failure message.\n     if opt.is_none() { fail reason; }\n@@ -204,6 +211,24 @@ fn test_unwrap_resource() {\n     assert *i == 1;\n }\n \n+#[test]\n+fn test_option_dance() {\n+    let x = some(());\n+    let mut y = some(5);\n+    let mut y2 = 0;\n+    do x.iter |_x| {\n+        y2 = swap_unwrap(&mut y);\n+    }\n+    assert y2 == 5;\n+    assert y.is_none();\n+}\n+#[test] #[should_fail] #[ignore(cfg(windows))]\n+fn test_option_too_much_dance() {\n+    let mut y = some(util::noncopyable());\n+    let _y2 = swap_unwrap(&mut y);\n+    let _y3 = swap_unwrap(&mut y);\n+}\n+\n #[test]\n fn test_option_while_some() {\n     let mut i = 0;"}, {"sha": "9b7a644b508bb3f0f10a7274f6ceb8f45fd829a2", "filename": "src/libcore/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9facb15c49488901e0a1a91af016b9516b5a124f/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9facb15c49488901e0a1a91af016b9516b5a124f/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=9facb15c49488901e0a1a91af016b9516b5a124f", "patch": "@@ -9,6 +9,7 @@ pure fn id<T>(+x: T) -> T { x }\n  * Swap the values at two mutable locations of the same type, without\n  * deinitialising or copying either one.\n  */\n+#[inline(always)]\n fn swap<T>(x: &mut T, y: &mut T) {\n     *x <-> *y;\n }\n@@ -17,6 +18,7 @@ fn swap<T>(x: &mut T, y: &mut T) {\n  * Replace the value at a mutable location with a new one, returning the old\n  * value, without deinitialising or copying either one.\n  */\n+#[inline(always)]\n fn replace<T>(dest: &mut T, +src: T) -> T {\n     let mut tmp = src;\n     swap(dest, &mut tmp);"}]}