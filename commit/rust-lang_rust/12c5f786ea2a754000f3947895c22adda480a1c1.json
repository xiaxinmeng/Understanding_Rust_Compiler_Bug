{"sha": "12c5f786ea2a754000f3947895c22adda480a1c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYzVmNzg2ZWEyYTc1NDAwMGYzOTQ3ODk1YzIyYWRkYTQ4MGExYzE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-09T00:13:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-09T00:13:35Z"}, "message": "Rollup merge of #78345 - jyn514:proper-names, r=varkor\n\nFix handling of item names for HIR\n\n- Handle variants, fields, macros in `Node::ident()`\n- Handle the crate root in `opt_item_name`\n- Rewrite `item_name` in terms of `opt_item_name`\n\nI need this for both https://github.com/rust-lang/rust/pull/77820 and https://github.com/rust-lang/rust/pull/78082, so splitting it out into a separate PR so it can land early.", "tree": {"sha": "574c848ea52e13b13b0001a9407d1a9cde6018e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/574c848ea52e13b13b0001a9407d1a9cde6018e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12c5f786ea2a754000f3947895c22adda480a1c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfqImwCRBK7hj4Ov3rIwAAdHIIAFXE3wJPz0DAbaBdE2dkgeUP\nJlHvboFfL0oI/7qdv2T3o/q4A5dMGPCyrG7qQQd8dVVgjUoZrIKU2R5dbCKJEW6Q\nAuSysKiCg12yuTuB4W+WAUFWHzr1Qb02HHPZoAozCZx3P92ceTH8t3/VIlUGu1mD\nnh7vvcPhPMIjPnr3pgfZd2Zi8ywGiYizEJuLs3jxxqqKUL0d7XzCGJ64SkTNlaxU\nWjfYu8FXJoldiYk+rLIw1zhw8PLVcg1QeZfBWyGRe7VccYmWJO9fcgZWX5VHpagU\nE1rbNfFgGOUIr5NYpZXZYopIqINKqhAJPWHmDLBkqgmyy3wfY5TRRqa8KiUyLvA=\n=yQgs\n-----END PGP SIGNATURE-----\n", "payload": "tree 574c848ea52e13b13b0001a9407d1a9cde6018e1\nparent 50086afb5d02f2e4d3913c9b008e76136771326a\nparent f60fd4963207bd6ac4a1c93c7c2674a7c321ffa8\nauthor Dylan DPC <dylan.dpc@gmail.com> 1604880815 +0100\ncommitter GitHub <noreply@github.com> 1604880815 +0100\n\nRollup merge of #78345 - jyn514:proper-names, r=varkor\n\nFix handling of item names for HIR\n\n- Handle variants, fields, macros in `Node::ident()`\n- Handle the crate root in `opt_item_name`\n- Rewrite `item_name` in terms of `opt_item_name`\n\nI need this for both https://github.com/rust-lang/rust/pull/77820 and https://github.com/rust-lang/rust/pull/78082, so splitting it out into a separate PR so it can land early.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12c5f786ea2a754000f3947895c22adda480a1c1", "html_url": "https://github.com/rust-lang/rust/commit/12c5f786ea2a754000f3947895c22adda480a1c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12c5f786ea2a754000f3947895c22adda480a1c1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50086afb5d02f2e4d3913c9b008e76136771326a", "url": "https://api.github.com/repos/rust-lang/rust/commits/50086afb5d02f2e4d3913c9b008e76136771326a", "html_url": "https://github.com/rust-lang/rust/commit/50086afb5d02f2e4d3913c9b008e76136771326a"}, {"sha": "f60fd4963207bd6ac4a1c93c7c2674a7c321ffa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f60fd4963207bd6ac4a1c93c7c2674a7c321ffa8", "html_url": "https://github.com/rust-lang/rust/commit/f60fd4963207bd6ac4a1c93c7c2674a7c321ffa8"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "3c72937ad313435be1f6d0729c6bab4b1d26e06e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12c5f786ea2a754000f3947895c22adda480a1c1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c5f786ea2a754000f3947895c22adda480a1c1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=12c5f786ea2a754000f3947895c22adda480a1c1", "patch": "@@ -2677,6 +2677,9 @@ impl<'hir> Node<'hir> {\n             Node::TraitItem(TraitItem { ident, .. })\n             | Node::ImplItem(ImplItem { ident, .. })\n             | Node::ForeignItem(ForeignItem { ident, .. })\n+            | Node::Field(StructField { ident, .. })\n+            | Node::Variant(Variant { ident, .. })\n+            | Node::MacroDef(MacroDef { ident, .. })\n             | Node::Item(Item { ident, .. }) => Some(*ident),\n             _ => None,\n         }"}, {"sha": "d86e8987195570fb4b1c30dc1a527c37ea6d89ea", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12c5f786ea2a754000f3947895c22adda480a1c1/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c5f786ea2a754000f3947895c22adda480a1c1/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=12c5f786ea2a754000f3947895c22adda480a1c1", "patch": "@@ -478,7 +478,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {\n-        id.as_local().map(|id| self.get(self.local_def_id_to_hir_id(id)))\n+        id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))\n     }\n \n     pub fn get_generics(&self, id: DefId) -> Option<&'hir Generics<'hir>> {"}, {"sha": "0042b4a3a42793aa2fb545b12a182604b2aa27d6", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 43, "deletions": 20, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/12c5f786ea2a754000f3947895c22adda480a1c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c5f786ea2a754000f3947895c22adda480a1c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=12c5f786ea2a754000f3947895c22adda480a1c1", "patch": "@@ -2795,10 +2795,50 @@ impl<'tcx> TyCtxt<'tcx> {\n             .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())\n     }\n \n+    fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {\n+        self.hir().get_if_local(def_id).and_then(|node| node.ident())\n+    }\n+\n+    fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {\n+        if def_id.index == CRATE_DEF_INDEX {\n+            Some(self.original_crate_name(def_id.krate))\n+        } else {\n+            let def_key = self.def_key(def_id);\n+            match def_key.disambiguated_data.data {\n+                // The name of a constructor is that of its parent.\n+                rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {\n+                    krate: def_id.krate,\n+                    index: def_key.parent.unwrap(),\n+                }),\n+                _ => def_key.disambiguated_data.data.get_opt_name(),\n+            }\n+        }\n+    }\n+\n+    /// Look up the name of an item across crates. This does not look at HIR.\n+    ///\n+    /// When possible, this function should be used for cross-crate lookups over\n+    /// [`opt_item_name`] to avoid invalidating the incremental cache. If you\n+    /// need to handle items without a name, or HIR items that will not be\n+    /// serialized cross-crate, or if you need the span of the item, use\n+    /// [`opt_item_name`] instead.\n+    ///\n+    /// [`opt_item_name`]: Self::opt_item_name\n+    pub fn item_name(self, id: DefId) -> Symbol {\n+        // Look at cross-crate items first to avoid invalidating the incremental cache\n+        // unless we have to.\n+        self.item_name_from_def_id(id).unwrap_or_else(|| {\n+            bug!(\"item_name: no name for {:?}\", self.def_path(id));\n+        })\n+    }\n+\n+    /// Look up the name and span of an item or [`Node`].\n+    ///\n+    /// See [`item_name`][Self::item_name] for more information.\n     pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {\n-        def_id\n-            .as_local()\n-            .and_then(|def_id| self.hir().get(self.hir().local_def_id_to_hir_id(def_id)).ident())\n+        // Look at the HIR first so the span will be correct if this is a local item.\n+        self.item_name_from_hir(def_id)\n+            .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))\n     }\n \n     pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {\n@@ -2921,23 +2961,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn item_name(self, id: DefId) -> Symbol {\n-        if id.index == CRATE_DEF_INDEX {\n-            self.original_crate_name(id.krate)\n-        } else {\n-            let def_key = self.def_key(id);\n-            match def_key.disambiguated_data.data {\n-                // The name of a constructor is that of its parent.\n-                rustc_hir::definitions::DefPathData::Ctor => {\n-                    self.item_name(DefId { krate: id.krate, index: def_key.parent.unwrap() })\n-                }\n-                _ => def_key.disambiguated_data.data.get_opt_name().unwrap_or_else(|| {\n-                    bug!(\"item_name: no name for {:?}\", self.def_path(id));\n-                }),\n-            }\n-        }\n-    }\n-\n     /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.\n     pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n         match instance {"}]}