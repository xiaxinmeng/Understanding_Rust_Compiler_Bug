{"sha": "41388bf81a3d5d877de9862657ed8437fc184b44", "node_id": "C_kwDOAAsO6NoAKDQxMzg4YmY4MWEzZDVkODc3ZGU5ODYyNjU3ZWQ4NDM3ZmMxODRiNDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-20T12:35:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-20T12:35:36Z"}, "message": "Auto merge of #12263 - andylizi:hide-type-hint-closure, r=Veykril\n\nfeat: hide type inlay hints for initializations of closures\n\n![hide_closure_initialization](https://user-images.githubusercontent.com/12008103/168470158-6cb77b18-068e-4431-a8b5-e2b22d50d263.gif)\n\nThis PR adds an option to hide the inlay hints for `let IDENT_PAT = CLOSURE_EXPR;`, which is a somewhat common coding pattern. Currently the inlay hints for the assigned variable and the closure expression itself are both displayed, making it rather repetitive.\n\nIn order to be consistent with closure return type hints, only closures with block bodies will be hid by this option.\n\nPersonally I'd feel comfortable making it always enabled (or at least when closure return type hints are enabled), but considering the precedent set in #10761, I introduced an off-by-default option for this.\n\nchangelog feature: option to hide type inlay hints for initializations of closures", "tree": {"sha": "9ab30251802ba3d519427c27197ecf0a7ab173af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ab30251802ba3d519427c27197ecf0a7ab173af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41388bf81a3d5d877de9862657ed8437fc184b44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41388bf81a3d5d877de9862657ed8437fc184b44", "html_url": "https://github.com/rust-lang/rust/commit/41388bf81a3d5d877de9862657ed8437fc184b44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41388bf81a3d5d877de9862657ed8437fc184b44/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5229cebb23671ea1221a81646f757a87d1b339a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5229cebb23671ea1221a81646f757a87d1b339a", "html_url": "https://github.com/rust-lang/rust/commit/f5229cebb23671ea1221a81646f757a87d1b339a"}, {"sha": "2b1c1a934c5f22a3e535e55f91a6b2c05394ab55", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55", "html_url": "https://github.com/rust-lang/rust/commit/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55"}], "stats": {"total": 95, "additions": 90, "deletions": 5}, "files": [{"sha": "3689bd5a42a62b1cae4d66e4f6b213d04a2afdc0", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 72, "deletions": 5, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/41388bf81a3d5d877de9862657ed8437fc184b44/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41388bf81a3d5d877de9862657ed8437fc184b44/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=41388bf81a3d5d877de9862657ed8437fc184b44", "patch": "@@ -26,6 +26,7 @@ pub struct InlayHintsConfig {\n     pub lifetime_elision_hints: LifetimeElisionHints,\n     pub param_names_for_lifetime_elision_hints: bool,\n     pub hide_named_constructor_hints: bool,\n+    pub hide_closure_initialization_hints: bool,\n     pub max_length: Option<usize>,\n     pub closing_brace_hints_min_lines: Option<usize>,\n }\n@@ -467,10 +468,11 @@ fn closure_ret_hints(\n         return None;\n     }\n \n-    let param_list = match closure.body() {\n-        Some(ast::Expr::BlockExpr(_)) => closure.param_list()?,\n-        _ => return None,\n-    };\n+    if !closure_has_block_body(&closure) {\n+        return None;\n+    }\n+\n+    let param_list = closure.param_list()?;\n \n     let closure = sema.descend_node_into_attributes(closure.clone()).pop()?;\n     let ty = sema.type_of_expr(&ast::Expr::ClosureExpr(closure))?.adjusted();\n@@ -693,7 +695,7 @@ fn bind_pat_hints(\n     let desc_pat = descended.as_ref().unwrap_or(pat);\n     let ty = sema.type_of_pat(&desc_pat.clone().into())?.original;\n \n-    if should_not_display_type_hint(sema, pat, &ty) {\n+    if should_not_display_type_hint(sema, config, pat, &ty) {\n         return None;\n     }\n \n@@ -848,6 +850,7 @@ fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &hir\n \n fn should_not_display_type_hint(\n     sema: &Semantics<RootDatabase>,\n+    config: &InlayHintsConfig,\n     bind_pat: &ast::IdentPat,\n     pat_ty: &hir::Type,\n ) -> bool {\n@@ -863,6 +866,18 @@ fn should_not_display_type_hint(\n         }\n     }\n \n+    if config.hide_closure_initialization_hints {\n+        if let Some(parent) = bind_pat.syntax().parent() {\n+            if let Some(it) = ast::LetStmt::cast(parent.clone()) {\n+                if let Some(ast::Expr::ClosureExpr(closure)) = it.initializer() {\n+                    if closure_has_block_body(&closure) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     for node in bind_pat.syntax().ancestors() {\n         match_ast! {\n             match node {\n@@ -889,6 +904,10 @@ fn should_not_display_type_hint(\n     false\n }\n \n+fn closure_has_block_body(closure: &ast::ClosureExpr) -> bool {\n+    matches!(closure.body(), Some(ast::Expr::BlockExpr(_)))\n+}\n+\n fn should_hide_param_name_hint(\n     sema: &Semantics<RootDatabase>,\n     callable: &hir::Callable,\n@@ -1083,6 +1102,7 @@ mod tests {\n         reborrow_hints: ReborrowHints::Always,\n         binding_mode_hints: false,\n         hide_named_constructor_hints: false,\n+        hide_closure_initialization_hints: false,\n         param_names_for_lifetime_elision_hints: false,\n         max_length: None,\n         closing_brace_hints_min_lines: None,\n@@ -2034,6 +2054,53 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn skip_closure_type_hints() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                type_hints: true,\n+                hide_closure_initialization_hints: true,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+//- minicore: fn\n+fn main() {\n+    let multiple_2 = |x: i32| { x * 2 };\n+\n+    let multiple_2 = |x: i32| x * 2;\n+    //  ^^^^^^^^^^ |i32| -> i32\n+\n+    let (not) = (|x: bool| { !x });\n+    //   ^^^ |bool| -> bool\n+\n+    let (is_zero, _b) = (|x: usize| { x == 0 }, false);\n+    //   ^^^^^^^ |usize| -> bool\n+    //            ^^ bool\n+\n+    let plus_one = |x| { x + 1 };\n+    //              ^ u8\n+    foo(plus_one);\n+\n+    let add_mul = bar(|x: u8| { x + 1 });\n+    //  ^^^^^^^ impl FnOnce(u8) -> u8 + ?Sized\n+\n+    let closure = if let Some(6) = add_mul(2).checked_sub(1) {\n+    //  ^^^^^^^ fn(i32) -> i32\n+        |x: i32| { x * 2 }\n+    } else {\n+        |x: i32| { x * 3 }\n+    };\n+}\n+\n+fn foo(f: impl FnOnce(u8) -> u8) {}\n+\n+fn bar(f: impl FnOnce(u8) -> u8) -> impl FnOnce(u8) -> u8 {\n+    move |x: u8| f(x) * 2\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn hint_truncation() {\n         check_with_config("}, {"sha": "006b18b7fddf1167f740e07aff433fe5c72cc71a", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41388bf81a3d5d877de9862657ed8437fc184b44/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41388bf81a3d5d877de9862657ed8437fc184b44/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=41388bf81a3d5d877de9862657ed8437fc184b44", "patch": "@@ -113,6 +113,7 @@ impl StaticIndex<'_> {\n                     lifetime_elision_hints: crate::LifetimeElisionHints::Never,\n                     reborrow_hints: crate::ReborrowHints::Never,\n                     hide_named_constructor_hints: false,\n+                    hide_closure_initialization_hints: false,\n                     param_names_for_lifetime_elision_hints: false,\n                     binding_mode_hints: false,\n                     max_length: Some(25),"}, {"sha": "d7ae4c72f5c56e424b6debdcae88cb12249ad221", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41388bf81a3d5d877de9862657ed8437fc184b44/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41388bf81a3d5d877de9862657ed8437fc184b44/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=41388bf81a3d5d877de9862657ed8437fc184b44", "patch": "@@ -281,6 +281,9 @@ config_data! {\n         inlayHints_renderColons: bool                              = \"true\",\n         /// Whether to show inlay type hints for variables.\n         inlayHints_typeHints_enable: bool                          = \"true\",\n+        /// Whether to hide inlay type hints for `let` statements that initialize to a closure.\n+        /// Only applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`.\n+        inlayHints_typeHints_hideClosureInitialization: bool       = \"false\",\n         /// Whether to hide inlay type hints for constructors.\n         inlayHints_typeHints_hideNamedConstructor: bool            = \"false\",\n \n@@ -1000,6 +1003,9 @@ impl Config {\n                 LifetimeElisionDef::SkipTrivial => ide::LifetimeElisionHints::SkipTrivial,\n             },\n             hide_named_constructor_hints: self.data.inlayHints_typeHints_hideNamedConstructor,\n+            hide_closure_initialization_hints: self\n+                .data\n+                .inlayHints_typeHints_hideClosureInitialization,\n             reborrow_hints: match self.data.inlayHints_reborrowHints_enable {\n                 ReborrowHintsDef::Always => ide::ReborrowHints::Always,\n                 ReborrowHintsDef::Never => ide::ReborrowHints::Never,"}, {"sha": "955f085d3f228afb5b7cc9f1fc3f5420a9da3114", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41388bf81a3d5d877de9862657ed8437fc184b44/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/41388bf81a3d5d877de9862657ed8437fc184b44/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=41388bf81a3d5d877de9862657ed8437fc184b44", "patch": "@@ -407,6 +407,12 @@ Whether to render leading colons for type hints, and trailing colons for paramet\n --\n Whether to show inlay type hints for variables.\n --\n+[[rust-analyzer.inlayHints.typeHints.hideClosureInitialization]]rust-analyzer.inlayHints.typeHints.hideClosureInitialization (default: `false`)::\n++\n+--\n+Whether to hide inlay type hints for `let` statements that initialize to a closure.\n+Only applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`.\n+--\n [[rust-analyzer.inlayHints.typeHints.hideNamedConstructor]]rust-analyzer.inlayHints.typeHints.hideNamedConstructor (default: `false`)::\n +\n --"}, {"sha": "f46c7ea92d3e6e5c3ca60ca1844f13276abd5468", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41388bf81a3d5d877de9862657ed8437fc184b44/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/41388bf81a3d5d877de9862657ed8437fc184b44/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=41388bf81a3d5d877de9862657ed8437fc184b44", "patch": "@@ -868,6 +868,11 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.inlayHints.typeHints.hideClosureInitialization\": {\n+                    \"markdownDescription\": \"Whether to hide inlay type hints for `let` statements that initialize to a closure.\\nOnly applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.inlayHints.typeHints.hideNamedConstructor\": {\n                     \"markdownDescription\": \"Whether to hide inlay type hints for constructors.\",\n                     \"default\": false,"}]}