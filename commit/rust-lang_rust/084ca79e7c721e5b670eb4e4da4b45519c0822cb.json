{"sha": "084ca79e7c721e5b670eb4e4da4b45519c0822cb", "node_id": "C_kwDOAAsO6NoAKDA4NGNhNzllN2M3MjFlNWI2NzBlYjRlNGRhNGI0NTUxOWMwODIyY2I", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-16T02:28:09Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-08T00:18:24Z"}, "message": "When finding a match expr with multiple arms that requires more, suggest it\n\nGiven\n\n```rust\nmatch Some(42) {\n    Some(0) => {}\n    Some(1) => {}\n}\n```\n\nsuggest\n\n```rust\nmatch Some(42) {\n    Some(0) => {}\n    Some(1) => {}\n    None | Some(_) => todo!(),\n}\n```", "tree": {"sha": "4e6caa6b77d1e538e75be51515c4165d621f7081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e6caa6b77d1e538e75be51515c4165d621f7081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/084ca79e7c721e5b670eb4e4da4b45519c0822cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/084ca79e7c721e5b670eb4e4da4b45519c0822cb", "html_url": "https://github.com/rust-lang/rust/commit/084ca79e7c721e5b670eb4e4da4b45519c0822cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/084ca79e7c721e5b670eb4e4da4b45519c0822cb/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2383858f34989f7c6c87da857bd038f5ce0a66b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2383858f34989f7c6c87da857bd038f5ce0a66b0", "html_url": "https://github.com/rust-lang/rust/commit/2383858f34989f7c6c87da857bd038f5ce0a66b0"}], "stats": {"total": 313, "additions": 263, "deletions": 50}, "files": [{"sha": "a0325101c41d922f3b5d8b814af3e2fdf0e131d2", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -604,6 +604,21 @@ fn non_exhaustive_match<'p, 'tcx>(\n                 format!(\"{}{}{} => todo!()\", comma, pre_indentation, pattern),\n             ));\n         }\n+        [.., prev, last] if prev.span.ctxt() == last.span.ctxt() => {\n+            if let Ok(snippet) = sm.span_to_snippet(prev.span.between(last.span)) {\n+                let comma =\n+                    if matches!(last.body.kind, hir::ExprKind::Block(..)) { \"\" } else { \",\" };\n+                suggestion = Some((\n+                    last.span.shrink_to_hi(),\n+                    format!(\n+                        \"{}{}{} => todo!()\",\n+                        comma,\n+                        snippet.strip_prefix(\",\").unwrap_or(&snippet),\n+                        pattern\n+                    ),\n+                ));\n+            }\n+        }\n         _ => {}\n     }\n "}, {"sha": "0ce1f6cf9ada35d4512a294373ed3f04af423401", "filename": "src/test/ui/closures/2229_closure_analysis/match/non-exhaustive-match.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -37,7 +37,10 @@ LL |     let _e = || { match e2 { E2::A => (), E2::B => () } };\n    |                         ^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `E2`, which is marked as non-exhaustive\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL |     let _e = || { match e2 { E2::A => (), E2::B => (), _ => todo!() } };\n+   |                                                      ++++++++++++++\n \n error[E0505]: cannot move out of `e3` because it is borrowed\n   --> $DIR/non-exhaustive-match.rs:46:22"}, {"sha": "6103975df1e76c44da87767147daadd67a5aabc5", "filename": "src/test/ui/match/match_non_exhaustive.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -37,7 +37,10 @@ LL |     match e2 { E2::A => (), E2::B => () };\n    |           ^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `E2`, which is marked as non-exhaustive\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL |     match e2 { E2::A => (), E2::B => (), _ => todo!() };\n+   |                                        ++++++++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6c56873ab2d412443da9cebd7986c7d4629a7158", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -5,7 +5,11 @@ LL |     match Foo::A {\n    |           ^^^^^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `Foo`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Foo::B => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `B` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:14:11\n@@ -19,7 +23,11 @@ LL |     B,\n    |     - not covered\n    |\n    = note: the matched value is of type `Foo`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Foo::C => {}\n+LL +         B => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `B` and `_` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:20:11\n@@ -51,7 +59,11 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     ---- not covered\n    |\n    = note: the matched value is of type `Option<Foo>`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Some(Foo::A) => {}\n+LL +         Some(B) | Some(_) => todo!()\n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "4a3b12d58facf6f95b8d79d1f1901c216775d61a", "filename": "src/test/ui/pattern/usefulness/guards.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -5,7 +5,11 @@ LL |     match 0u8 {\n    |           ^^^ pattern `128_u8..=u8::MAX` not covered\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         128 ..= 255 if true => {}\n+LL +         128_u8..=u8::MAX => todo!()\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "56de29cbd812b98a9d441959f48ad26e9cb512f8", "filename": "src/test/ui/pattern/usefulness/integer-ranges/exhaustiveness.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -96,7 +96,11 @@ LL |     match 0i8 {\n    |           ^^^ pattern `0_i8` not covered\n    |\n    = note: the matched value is of type `i8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         1 ..= i8::MAX => {}\n+LL +         0_i8 => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n   --> $DIR/exhaustiveness.rs:59:8\n@@ -144,7 +148,11 @@ LL |     match (0u8, true) {\n    |           ^^^^^^^^^^^ pattern `(126_u8..=127_u8, false)` not covered\n    |\n    = note: the matched value is of type `(u8, bool)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         (0 ..= 255, true) => {}\n+LL +         (126_u8..=127_u8, false) => todo!()\n+   |\n \n error: aborting due to 12 previous errors\n "}, {"sha": "11a3bf5b1778b8fbbbcab96ed57b65d126b81450", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -153,7 +153,11 @@ LL |     match 0isize {\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         1 ..= isize::MAX => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: type `usize` is non-empty\n   --> $DIR/pointer-sized-int.rs:48:11"}, {"sha": "5ee2f6825ff6f9a781b75ed9d8dbded84da2f3a2", "filename": "src/test/ui/pattern/usefulness/issue-15129.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -5,7 +5,11 @@ LL |     match (T::T1(()), V::V2(true)) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `(T1(()), V2(_))` and `(T2(()), V1(_))` not covered\n    |\n    = note: the matched value is of type `(T, V)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         (T::T2(()), V::V2(b)) => (),\n+LL ~         (T1(()), V2(_)) | (T2(()), V1(_)) => todo!(),\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "ae02d7f7dfca35a418526596f6bdfc4197f1934c", "filename": "src/test/ui/pattern/usefulness/issue-2111.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -5,7 +5,11 @@ LL |     match (a, b) {\n    |           ^^^^^^ patterns `(None, None)` and `(Some(_), Some(_))` not covered\n    |\n    = note: the matched value is of type `(Option<usize>, Option<usize>)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         (Some(_), None) | (None, Some(_)) => {}\n+LL +         (None, None) | (Some(_), Some(_)) => todo!()\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "1c25355b9c452a5c0b7ea6ca61322368d04a6f07", "filename": "src/test/ui/pattern/usefulness/issue-30240.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -18,7 +18,11 @@ LL |     match \"world\" {\n    |           ^^^^^^^ pattern `&_` not covered\n    |\n    = note: the matched value is of type `&str`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         \"hello\" => {}\n+LL +         &_ => todo!()\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3c2d351fe8bd3f4f6f3aed25a58a0b69a545c9de", "filename": "src/test/ui/pattern/usefulness/issue-35609.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -102,7 +102,11 @@ LL |     match Some(A) {\n    |           ^^^^^^^ patterns `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n    |\n    = note: the matched value is of type `Option<Enum>`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         None => (),\n+LL +         _ => todo!()\n+   |\n \n error: aborting due to 8 previous errors\n "}, {"sha": "55794faf243af7c7f5f05ecfc5a04209b86d859a", "filename": "src/test/ui/pattern/usefulness/issue-39362.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -10,7 +10,11 @@ LL |       match f {\n    |             ^ patterns `Bar { bar: C, .. }`, `Bar { bar: D, .. }`, `Bar { bar: E, .. }` and 1 more not covered\n    |\n    = note: the matched value is of type `Foo`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Foo::Bar { bar: Bar::B, .. } => (),\n+LL ~         _ => todo!(),\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "19ee7aaf9beffba6d83e474d9be306d0774c5ca3", "filename": "src/test/ui/pattern/usefulness/issue-4321.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -5,7 +5,11 @@ LL |     println!(\"foo {:}\", match tup {\n    |                               ^^^ pattern `(true, false)` not covered\n    |\n    = note: the matched value is of type `(bool, bool)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         (true, true) => \"baz\",\n+LL +         (true, false) => todo!()\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "02a5ff2a37aef076c74b1f4a8cf5c92f1b0d2554", "filename": "src/test/ui/pattern/usefulness/issue-56379.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -15,7 +15,11 @@ LL |       match Foo::A(true) {\n    |             ^^^^^^^^^^^^ patterns `A(false)`, `B(false)` and `C(false)` not covered\n    |\n    = note: the matched value is of type `Foo`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Foo::C(true) => {}\n+LL +         A(false) | B(false) | C(false) => todo!()\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "396595b26353f42d54fea9f4025eb9182e36a790", "filename": "src/test/ui/pattern/usefulness/issue-72377.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -5,7 +5,11 @@ LL |     match (x, y) {\n    |           ^^^^^^ patterns `(A, Some(A))`, `(A, Some(B))`, `(B, Some(B))` and 2 more not covered\n    |\n    = note: the matched value is of type `(X, Option<X>)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         (X::A, Some(X::C)) | (X::C, Some(X::A)) => false,\n+LL ~         _ => todo!(),\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "65fdb1b54f4f8717c9407f1b43480e90b7531cc9", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -5,7 +5,11 @@ LL |     match (true, false) {\n    |           ^^^^^^^^^^^^^ pattern `(true, false)` not covered\n    |\n    = note: the matched value is of type `(bool, bool)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         (false, true) => (),\n+LL +         (true, false) => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `Some(Some(West))` not covered\n   --> $DIR/match-arm-statics-2.rs:29:11\n@@ -22,7 +26,11 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     not covered\n    |\n    = note: the matched value is of type `Option<Option<Direction>>`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         None => (),\n+LL +         Some(Some(West)) => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n   --> $DIR/match-arm-statics-2.rs:48:11\n@@ -37,7 +45,11 @@ LL |       match (Foo { bar: Some(North), baz: NewBool(true) }) {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n    |\n    = note: the matched value is of type `Foo`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Foo { bar: Some(EAST), .. } => (),\n+LL +         Foo { bar: Some(North), baz: NewBool(true) } => todo!()\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3b1a7e184ba4e366448b464ea1a29e3d43521ccb", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -10,7 +10,11 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     ---- not covered\n    |\n    = note: the matched value is of type `Option<Private>`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         }) => {}\n+LL +         Some(Private { misc: true, .. }) => todo!()\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "3b4fc754dd773afb6acefd8485fabd443b7c02a4", "filename": "src/test/ui/pattern/usefulness/match-slice-patterns.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -5,7 +5,11 @@ LL |     match list {\n    |           ^^^^ pattern `&[_, Some(_), .., None, _]` not covered\n    |\n    = note: the matched value is of type `&[Option<()>]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         &[.., Some(_), _] => {}\n+LL ~         &[_, Some(_), .., None, _] => todo!(),\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e38e12220e337d2cbcc12f4bf2dc756c1a23c86a", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match-nested.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -5,7 +5,11 @@ LL |     match (l1, l2) {\n    |           ^^^^^^^^ pattern `(Some(&[]), Err(_))` not covered\n    |\n    = note: the matched value is of type `(Option<&[T]>, Result<&[T], ()>)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         (None, Ok(&[_, _, ..])) => \"None, Ok(at least two elements)\",\n+LL +         (Some(&[]), Err(_)) => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `A(C)` not covered\n   --> $DIR/non-exhaustive-match-nested.rs:15:11\n@@ -20,7 +24,11 @@ LL |     match x {\n    |           ^ pattern `A(C)` not covered\n    |\n    = note: the matched value is of type `T`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         T::B => { panic!(\"goodbye\"); }\n+LL +         A(C) => todo!()\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "136c653e35d7a92f5fdf9c44f658e928475248b7", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -67,7 +67,11 @@ LL |     match (T::A, T::A) {\n    |           ^^^^^^^^^^^^ patterns `(A, A)` and `(B, B)` not covered\n    |\n    = note: the matched value is of type `(T, T)`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~       (T::B, T::A) => {}\n+LL +       (A, A) | (B, B) => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `B` not covered\n   --> $DIR/non-exhaustive-match.rs:22:11\n@@ -95,7 +99,11 @@ LL |     match *vec {\n    |           ^^^^ pattern `[]` not covered\n    |\n    = note: the matched value is of type `[Option<isize>]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [None] => {}\n+LL +         [] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `[_, _, _, _, ..]` not covered\n   --> $DIR/non-exhaustive-match.rs:46:11\n@@ -104,7 +112,11 @@ LL |     match *vec {\n    |           ^^^^ pattern `[_, _, _, _, ..]` not covered\n    |\n    = note: the matched value is of type `[f32]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [] => (),\n+LL +         [_, _, _, _, ..] => todo!()\n+   |\n \n error: aborting due to 8 previous errors\n "}, {"sha": "cb41ee06b15db9250ec0ed849a0477fc73f890f9", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-witness.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -11,7 +11,11 @@ LL |       match (Foo { first: true, second: None }) {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { first: false, second: Some([_, _, _, _]) }` not covered\n    |\n    = note: the matched value is of type `Foo`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Foo { first: false, second: Some([1, 2, 3, 4]) } => (),\n+LL +         Foo { first: false, second: Some([_, _, _, _]) } => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `Red` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:23:11\n@@ -28,7 +32,11 @@ LL |       match Color::Red {\n    |             ^^^^^^^^^^ pattern `Red` not covered\n    |\n    = note: the matched value is of type `Color`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Color::Green => (),\n+LL +         Red => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `East`, `South` and `West` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:35:11\n@@ -85,7 +93,11 @@ LL |       match Color::Red {\n    |             ^^^^^^^^^^ pattern `CustomRGBA { a: true, .. }` not covered\n    |\n    = note: the matched value is of type `Color`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Color::CustomRGBA { a: false, r: _, g: _, b: _ } => (),\n+LL +         CustomRGBA { a: true, .. } => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `[Second(true), Second(false)]` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:70:11\n@@ -94,7 +106,11 @@ LL |     match *x {\n    |           ^^ pattern `[Second(true), Second(false)]` not covered\n    |\n    = note: the matched value is of type `[Enum]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [_, _, ref tail @ .., _] => (),\n+LL +         [Second(true), Second(false)] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `((), false)` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:83:11"}, {"sha": "dd1f24fdb6779af844a5ed9790d9802bf1e57468", "filename": "src/test/ui/pattern/usefulness/slice-patterns-exhaustiveness.stderr", "status": "modified", "additions": 65, "deletions": 13, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -44,7 +44,11 @@ LL |     match s2 {\n    |           ^^ pattern `&[false, true]` not covered\n    |\n    = note: the matched value is of type `&[bool; 2]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [.., false] => {}\n+LL +         &[false, true] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[false, .., true]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:30:11\n@@ -53,7 +57,11 @@ LL |     match s3 {\n    |           ^^ pattern `&[false, .., true]` not covered\n    |\n    = note: the matched value is of type `&[bool; 3]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [.., false] => {}\n+LL +         &[false, .., true] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[false, .., true]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:35:11\n@@ -62,7 +70,11 @@ LL |     match s {\n    |           ^ pattern `&[false, .., true]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [.., false] => {}\n+LL +         &[false, .., true] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[_, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:42:11\n@@ -84,7 +96,11 @@ LL |     match s {\n    |           ^ pattern `&[_, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [_] => {}\n+LL +         &[_, _, ..] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[false, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:51:11\n@@ -93,7 +109,11 @@ LL |     match s {\n    |           ^ pattern `&[false, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [true, ..] => {}\n+LL +         &[false, ..] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[false, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:56:11\n@@ -102,7 +122,11 @@ LL |     match s {\n    |           ^ pattern `&[false, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [true, ..] => {}\n+LL +         &[false, _, ..] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[_, .., false]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:62:11\n@@ -111,7 +135,11 @@ LL |     match s {\n    |           ^ pattern `&[_, .., false]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [.., true] => {}\n+LL +         &[_, .., false] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[_, _, .., true]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:69:11\n@@ -120,7 +148,11 @@ LL |     match s {\n    |           ^ pattern `&[_, _, .., true]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [.., false] => {}\n+LL +         &[_, _, .., true] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[true, _, .., _]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:76:11\n@@ -129,7 +161,11 @@ LL |     match s {\n    |           ^ pattern `&[true, _, .., _]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [false, .., false] => {}\n+LL +         &[true, _, .., _] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[]` and `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:85:11\n@@ -164,7 +200,11 @@ LL |     match s {\n    |           ^ patterns `&[]` and `&[_, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         &[false] => {}\n+LL +         &[] | &[_, _, ..] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[]` and `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:98:11\n@@ -173,7 +213,11 @@ LL |     match s {\n    |           ^ patterns `&[]` and `&[_, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         CONST => {}\n+LL +         &[] | &[_, _, ..] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:103:11\n@@ -182,7 +226,11 @@ LL |     match s {\n    |           ^ pattern `&[_, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         CONST => {}\n+LL +         &[_, _, ..] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[false]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:108:11\n@@ -191,7 +239,11 @@ LL |     match s {\n    |           ^ pattern `&[false]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         &[_, _, ..] => {}\n+LL +         &[false] => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `&[false]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:121:11"}, {"sha": "a556094c370cdbb68894537f1c0b85ac32535ab4", "filename": "src/test/ui/pattern/usefulness/stable-gated-patterns.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -23,7 +23,11 @@ LL |     match Foo::Stable {\n    |           ^^^^^^^^^^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `Foo`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Foo::Stable2 => {}\n+LL +         _ => todo!()\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "02009ea3eed003981e4f82f1b009ede8d2b69378", "filename": "src/test/ui/pattern/usefulness/struct-like-enum-nonexhaustive.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -12,7 +12,11 @@ LL |       match x {\n    |             ^ pattern `B { x: Some(_) }` not covered\n    |\n    = note: the matched value is of type `A`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         A::B { x: None } => {}\n+LL +         B { x: Some(_) } => todo!()\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "455760d2249611f61a86bb813414653e6c43f748", "filename": "src/test/ui/pattern/usefulness/tuple-struct-nonexhaustive.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -8,7 +8,11 @@ LL |     match x {\n    |           ^ pattern `Foo(_, _)` not covered\n    |\n    = note: the matched value is of type `Foo`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Foo(2, b) => println!(\"{}\", b)\n+LL +         Foo(_, _) => todo!()\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "1f0bf5ccca5b8ad77bd3ea73d0923bc8217f879d", "filename": "src/test/ui/pattern/usefulness/type_polymorphic_byte_str_literals.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -18,7 +18,11 @@ LL |     match data {\n    |           ^^^^ patterns `&[]`, `&[_]`, `&[_, _]` and 1 more not covered\n    |\n    = note: the matched value is of type `&[u8]`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         [_, _, _] => 1,\n+LL ~         _ => todo!(),\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a0717c5e0bff60f3b937980816cead09d0c75536", "filename": "src/test/ui/pattern/usefulness/unstable-gated-patterns.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -10,7 +10,11 @@ LL |     Unstable,\n    |     -------- not covered\n    |\n    = note: the matched value is of type `Foo`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         Foo::Stable2 => {}\n+LL +         Unstable => todo!()\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c8e27d5e3587f9298b6a3f7643bcde463d91a3f2", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/084ca79e7c721e5b670eb4e4da4b45519c0822cb/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr?ref=084ca79e7c721e5b670eb4e4da4b45519c0822cb", "patch": "@@ -19,7 +19,11 @@ LL |     match enum_unit {\n    |           ^^^^^^^^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `NonExhaustiveEnum`, which is marked as non-exhaustive\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   |\n+LL ~         NonExhaustiveEnum::Struct { .. } => \"third\",\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/enum.rs:23:11"}]}