{"sha": "fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMDFlMDRmYmI1YWFkNTM2YzRkNWU4OTU4MWFmMDBhZGJkNmUwY2Y=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-01T13:14:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-05T08:17:48Z"}, "message": "fix validation error on non-integer enum discriminants", "tree": {"sha": "67d29fedde6799bf3f58e2b93e121ff38b523a6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67d29fedde6799bf3f58e2b93e121ff38b523a6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "html_url": "https://github.com/rust-lang/rust/commit/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d24b37a70de0afc2b145aff72964162ec8a4291", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d24b37a70de0afc2b145aff72964162ec8a4291", "html_url": "https://github.com/rust-lang/rust/commit/6d24b37a70de0afc2b145aff72964162ec8a4291"}], "stats": {"total": 137, "additions": 79, "deletions": 58}, "files": [{"sha": "f28aa41ed42221a22053b389bd9cbdc429309312", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -15,7 +15,7 @@ use ty::{Ty, layout};\n use ty::layout::{Size, Align, LayoutError};\n use rustc_target::spec::abi::Abi;\n \n-use super::Pointer;\n+use super::{Pointer, Scalar};\n \n use backtrace::Backtrace;\n \n@@ -240,7 +240,7 @@ pub enum EvalErrorKind<'tcx, O> {\n     InvalidMemoryAccess,\n     InvalidFunctionPointer,\n     InvalidBool,\n-    InvalidDiscriminant(u128),\n+    InvalidDiscriminant(Scalar),\n     PointerOutOfBounds {\n         ptr: Pointer,\n         access: bool,"}, {"sha": "64723405b0358caba089201852cef4b95246f0bd", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_lints)]\n+use std::fmt;\n \n use ty::layout::{HasDataLayout, Size};\n use ty::subst::Substs;\n@@ -99,6 +99,15 @@ pub enum Scalar<Tag=(), Id=AllocId> {\n     Ptr(Pointer<Tag, Id>),\n }\n \n+impl<Tag> fmt::Display for Scalar<Tag> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Scalar::Ptr(_) => write!(f, \"a pointer\"),\n+            Scalar::Bits { bits, .. } => write!(f, \"{}\", bits),\n+        }\n+    }\n+}\n+\n impl<'tcx> Scalar<()> {\n     #[inline]\n     pub fn with_default_tag<Tag>(self) -> Scalar<Tag>"}, {"sha": "83a2d14b7ca4cdf9896d81e46758e697b6b67de0", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -12,6 +12,7 @@\n //! All high-level functions to read from memory work on operands as sources.\n \n use std::convert::TryInto;\n+use std::fmt;\n \n use rustc::{mir, ty};\n use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt};\n@@ -36,6 +37,15 @@ impl<Tag> From<Scalar<Tag>> for ScalarMaybeUndef<Tag> {\n     }\n }\n \n+impl<Tag> fmt::Display for ScalarMaybeUndef<Tag> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            ScalarMaybeUndef::Undef => write!(f, \"uninitialized bytes\"),\n+            ScalarMaybeUndef::Scalar(s) => write!(f, \"{}\", s),\n+        }\n+    }\n+}\n+\n impl<'tcx> ScalarMaybeUndef<()> {\n     #[inline]\n     pub fn with_default_tag<Tag>(self) -> ScalarMaybeUndef<Tag>\n@@ -732,8 +742,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         Ok(match rval.layout.variants {\n             layout::Variants::Single { .. } => bug!(),\n             layout::Variants::Tagged { .. } => {\n+                let bits_discr = match raw_discr.to_bits(discr_val.layout.size) {\n+                    Ok(raw_discr) => raw_discr,\n+                    Err(_) => return err!(InvalidDiscriminant(raw_discr.erase_tag())),\n+                };\n                 let real_discr = if discr_val.layout.ty.is_signed() {\n-                    let i = raw_discr.to_bits(discr_val.layout.size)? as i128;\n+                    let i = bits_discr as i128;\n                     // going from layout tag type to typeck discriminant type\n                     // requires first sign extending with the layout discriminant\n                     let shift = 128 - discr_val.layout.size.bits();\n@@ -748,15 +762,15 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     let truncatee = sexted as u128;\n                     (truncatee << shift) >> shift\n                 } else {\n-                    raw_discr.to_bits(discr_val.layout.size)?\n+                    bits_discr\n                 };\n                 // Make sure we catch invalid discriminants\n                 let index = rval.layout.ty\n                     .ty_adt_def()\n                     .expect(\"tagged layout for non adt\")\n                     .discriminants(self.tcx.tcx)\n                     .position(|var| var.val == real_discr)\n-                    .ok_or_else(|| EvalErrorKind::InvalidDiscriminant(real_discr))?;\n+                    .ok_or_else(|| EvalErrorKind::InvalidDiscriminant(raw_discr.erase_tag()))?;\n                 (real_discr, index)\n             },\n             layout::Variants::NicheFilling {"}, {"sha": "f69b882bef867eca25408eddb4942d11446ed5bd", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -20,7 +20,7 @@ use rustc::mir::interpret::{\n };\n \n use super::{\n-    OpTy, MPlaceTy, Machine, EvalContext, ScalarMaybeUndef, ValueVisitor\n+    OpTy, MPlaceTy, Machine, EvalContext, ValueVisitor\n };\n \n macro_rules! validation_failure {\n@@ -122,17 +122,6 @@ fn path_format(path: &Vec<PathElem>) -> String {\n     out\n }\n \n-fn scalar_format<Tag>(value: ScalarMaybeUndef<Tag>) -> String {\n-    match value {\n-        ScalarMaybeUndef::Undef =>\n-            \"uninitialized bytes\".to_owned(),\n-        ScalarMaybeUndef::Scalar(Scalar::Ptr(_)) =>\n-            \"a pointer\".to_owned(),\n-        ScalarMaybeUndef::Scalar(Scalar::Bits { bits, .. }) =>\n-            bits.to_string(),\n-    }\n-}\n-\n struct ValidityVisitor<'rt, 'a, 'tcx: 'a+'rt, Tag: 'static> {\n     op: OpTy<'tcx, Tag>,\n     /// The `path` may be pushed to, but the part that is present when a function\n@@ -240,7 +229,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n             Err(err) => match err.kind {\n                 EvalErrorKind::InvalidDiscriminant(val) =>\n                     validation_failure!(\n-                        format!(\"invalid enum discriminant {}\", val), self.path\n+                        val, self.path, \"a valid enum discriminant\"\n                     ),\n                 _ => Err(err),\n             }\n@@ -258,12 +247,12 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n             ty::Bool => {\n                 let value = value.to_scalar_or_undef();\n                 try_validation!(value.to_bool(),\n-                    scalar_format(value), self.path, \"a boolean\");\n+                    value, self.path, \"a boolean\");\n             },\n             ty::Char => {\n                 let value = value.to_scalar_or_undef();\n                 try_validation!(value.to_char(),\n-                    scalar_format(value), self.path, \"a valid unicode codepoint\");\n+                    value, self.path, \"a valid unicode codepoint\");\n             },\n             ty::Float(_) | ty::Int(_) | ty::Uint(_) => {\n                 // NOTE: Keep this in sync with the array optimization for int/float\n@@ -273,7 +262,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n                 if self.const_mode {\n                     // Integers/floats in CTFE: Must be scalar bits, pointers are dangerous\n                     try_validation!(value.to_bits(size),\n-                        scalar_format(value), self.path, \"initialized plain bits\");\n+                        value, self.path, \"initialized plain bits\");\n                 } else {\n                     // At run-time, for now, we accept *anything* for these types, including\n                     // undef. We should fix that, but let's start low.\n@@ -389,9 +378,9 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n             ty::FnPtr(_sig) => {\n                 let value = value.to_scalar_or_undef();\n                 let ptr = try_validation!(value.to_ptr(),\n-                    scalar_format(value), self.path, \"a pointer\");\n+                    value, self.path, \"a pointer\");\n                 let _fn = try_validation!(ectx.memory.get_fn(ptr),\n-                    scalar_format(value), self.path, \"a function pointer\");\n+                    value, self.path, \"a function pointer\");\n                 // FIXME: Check if the signature matches\n             }\n             // This should be all the primitive types\n@@ -423,7 +412,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n         }\n         // At least one value is excluded. Get the bits.\n         let value = try_validation!(value.not_undef(),\n-            scalar_format(value), self.path,\n+            value, self.path,\n             format!(\"something in the range {:?}\", layout.valid_range));\n         let bits = match value {\n             Scalar::Ptr(ptr) => {"}, {"sha": "7e82d4fc264f564ca81820fdffe93d4215a3898f", "filename": "src/test/ui/consts/const-eval/double_check2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -5,7 +5,7 @@ LL | / static FOO: (&Foo, &Bar) = unsafe {( //~ undefined behavior\n LL | |     Union { u8: &BAR }.foo,\n LL | |     Union { u8: &BAR }.bar,\n LL | | )};\n-   | |___^ type validation failed: encountered invalid enum discriminant 5 at .1.<deref>\n+   | |___^ type validation failed: encountered 5 at .1.<deref>, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "7b6527464c5483ec5303cf16800478fdd1ff63ff", "filename": "src/test/ui/consts/const-eval/ub-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(const_err)] // make sure we cannot allow away the errors tested here\n+\n #[repr(usize)]\n #[derive(Copy, Clone)]\n enum Enum {"}, {"sha": "4ba30f1a9911af1a2698aedadac3568ff9ae23c8", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -1,21 +1,21 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:22:1\n+  --> $DIR/ub-enum.rs:24:1\n    |\n LL | const BAD_ENUM: Enum = unsafe { TransmuteEnum { a: &1 }.b };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer enum discriminant\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:35:1\n+  --> $DIR/ub-enum.rs:37:1\n    |\n LL | const BAD_ENUM2 : Enum2 = unsafe { TransmuteEnum2 { a: 0 }.b };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid enum discriminant 0\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:45:1\n+  --> $DIR/ub-enum.rs:47:1\n    |\n LL | const BAD_ENUM_CHAR : Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 4294967295 at .Some.0.1, but expected something in the range 0..=1114111"}, {"sha": "8b83a1747cabdebeff01800942f1cee77ca467f9", "filename": "src/test/ui/consts/const-eval/ub-nonnull.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(const_transmute)]\n+#![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;\n use std::ptr::NonNull;"}, {"sha": "7c0ff851d8848c96da8f7caa6c516202b16ca0dc", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -1,21 +1,21 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:17:1\n+  --> $DIR/ub-nonnull.rs:18:1\n    |\n LL | const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:20:1\n+  --> $DIR/ub-nonnull.rs:21:1\n    |\n LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:22:1\n+  --> $DIR/ub-nonnull.rs:23:1\n    |\n LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1"}, {"sha": "c0dd94a375bcbb0c69d36886fa3e582b51a63619", "filename": "src/test/ui/consts/const-eval/ub-ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(const_transmute)]\n+#![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;\n "}, {"sha": "359d1abb5008e4d726b0dce18ec8620f11b1a8b9", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -1,37 +1,37 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:15:1\n+  --> $DIR/ub-ref.rs:16:1\n    |\n LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered unaligned reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:18:1\n+  --> $DIR/ub-ref.rs:19:1\n    |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:21:1\n+  --> $DIR/ub-ref.rs:22:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:24:1\n+  --> $DIR/ub-ref.rs:25:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a raw memory access tried to access part of a pointer value as raw bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:27:1\n+  --> $DIR/ub-ref.rs:28:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered integer pointer in non-ZST reference"}, {"sha": "74713af2ea033114ee9ed28e9b45338efa55f52f", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(const_transmute)]\n+#![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;\n "}, {"sha": "c5ac72b639c05a94292c40ec0722d284d9c6633a", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -1,21 +1,21 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:18:1\n+  --> $DIR/ub-uninhabit.rs:19:1\n    |\n LL | const BAD_BAD_BAD: Bar = unsafe { mem::transmute(()) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:21:1\n+  --> $DIR/ub-uninhabit.rs:22:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:24:1\n+  --> $DIR/ub-uninhabit.rs:25:1\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { mem::transmute(()) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at [0]"}, {"sha": "6661de4ab2cb586bcaa737211848c2a56d51ca7b", "filename": "src/test/ui/consts/const-eval/ub-upvars.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(const_transmute,const_let)]\n+#![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;\n "}, {"sha": "3617a53a9788da4f2fde860a1f3e0ebc480f019d", "filename": "src/test/ui/consts/const-eval/ub-upvars.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-upvars.rs:15:1\n+  --> $DIR/ub-upvars.rs:16:1\n    |\n LL | / const BAD_UPVAR: &FnOnce() = &{ //~ ERROR it is undefined behavior to use this value\n LL | |     let bad_ref: &'static u16 = unsafe { mem::transmute(0usize) };"}, {"sha": "31540b46631c0558b181344158f8588b75131452", "filename": "src/test/ui/consts/const-eval/union-ub-fat-ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.rs?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![allow(unused)]\n+#![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n // normalize-stderr-test \"alignment \\d+\" -> \"alignment N\"\n // normalize-stderr-test \"offset \\d+\" -> \"offset N\""}, {"sha": "9a799b98cfc573e77b2f7971b3f1beccfb77d303", "filename": "src/test/ui/consts/const-eval/union-ub-fat-ptr.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -1,109 +1,109 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:87:1\n+  --> $DIR/union-ub-fat-ptr.rs:88:1\n    |\n LL | const B: &str = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.str};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling (not entirely in bounds) reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:90:1\n+  --> $DIR/union-ub-fat-ptr.rs:91:1\n    |\n LL | const C: &str = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.str};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in fat pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:93:1\n+  --> $DIR/union-ub-fat-ptr.rs:94:1\n    |\n LL | const C2: &MyStr = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.my_str};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in fat pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:99:1\n+  --> $DIR/union-ub-fat-ptr.rs:100:1\n    |\n LL | const B2: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.slice};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling (not entirely in bounds) reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:102:1\n+  --> $DIR/union-ub-fat-ptr.rs:103:1\n    |\n LL | const C3: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.slice};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in fat pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:106:1\n+  --> $DIR/union-ub-fat-ptr.rs:107:1\n    |\n LL | const D: &Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:109:1\n+  --> $DIR/union-ub-fat-ptr.rs:110:1\n    |\n LL | const E: &Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:112:1\n+  --> $DIR/union-ub-fat-ptr.rs:113:1\n    |\n LL | const F: &Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-pointer vtable in fat pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:116:1\n+  --> $DIR/union-ub-fat-ptr.rs:117:1\n    |\n LL | const G: &Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.<dyn-downcast>, but expected something in the range 0..=1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:120:1\n+  --> $DIR/union-ub-fat-ptr.rs:121:1\n    |\n LL | const H: &[bool] = &[unsafe { BoolTransmute { val: 3 }.bl }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>[0], but expected something in the range 0..=1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:126:1\n+  --> $DIR/union-ub-fat-ptr.rs:127:1\n    |\n LL | const I2: &MySliceBool = &MySlice(unsafe { BoolTransmute { val: 3 }.bl }, [false]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.0, but expected something in the range 0..=1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:129:1\n+  --> $DIR/union-ub-fat-ptr.rs:130:1\n    |\n LL | const I3: &MySliceBool = &MySlice(true, [unsafe { BoolTransmute { val: 3 }.bl }]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.1[0], but expected something in the range 0..=1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:133:1\n+  --> $DIR/union-ub-fat-ptr.rs:134:1\n    |\n LL | const J1: &str = unsafe { SliceTransmute { slice: &[0xFF] }.str };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:136:1\n+  --> $DIR/union-ub-fat-ptr.rs:137:1\n    |\n LL | const J2: &MyStr = unsafe { SliceTransmute { slice: &[0xFF] }.my_str };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>.0"}, {"sha": "712147b52e96465dda4024e8aef4f89af5963317", "filename": "src/test/ui/consts/const-eval/union-ub.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(const_err)] // make sure we cannot allow away the errors tested here\n+\n union DummyUnion {\n     u8: u8,\n     bool: bool,"}, {"sha": "2b6f6a47cd92f67c9e31c2fad99384485820afdb", "filename": "src/test/ui/consts/const-eval/union-ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa01e04fbb5aad536c4d5e89581af00adbd6e0cf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr?ref=fa01e04fbb5aad536c4d5e89581af00adbd6e0cf", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub.rs:36:1\n+  --> $DIR/union-ub.rs:38:1\n    |\n LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something in the range 0..=1"}]}