{"sha": "3c7a0aa00ee4d574af36a1ab982a63488acb211a", "node_id": "C_kwDOAAsO6NoAKDNjN2EwYWEwMGVlNGQ1NzRhZjM2YTFhYjk4MmE2MzQ4OGFjYjIxMWE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-03T17:04:24Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-03T19:43:05Z"}, "message": "Diagnose call expression on non-callable things", "tree": {"sha": "ed0480bbeb3a5eb7e133c094a7b2df7529dd0b2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed0480bbeb3a5eb7e133c094a7b2df7529dd0b2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c7a0aa00ee4d574af36a1ab982a63488acb211a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7a0aa00ee4d574af36a1ab982a63488acb211a", "html_url": "https://github.com/rust-lang/rust/commit/3c7a0aa00ee4d574af36a1ab982a63488acb211a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c7a0aa00ee4d574af36a1ab982a63488acb211a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ba876a4a6528a6d1615346776492a41ecf66db2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba876a4a6528a6d1615346776492a41ecf66db2", "html_url": "https://github.com/rust-lang/rust/commit/3ba876a4a6528a6d1615346776492a41ecf66db2"}], "stats": {"total": 97, "additions": 83, "deletions": 14}, "files": [{"sha": "0c7529cffee2624958a76bb0a51b31371b9c1ff9", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c7a0aa00ee4d574af36a1ab982a63488acb211a/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7a0aa00ee4d574af36a1ab982a63488acb211a/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=3c7a0aa00ee4d574af36a1ab982a63488acb211a", "patch": "@@ -170,6 +170,7 @@ pub enum InferenceDiagnostic {\n     // FIXME: Make this proper\n     BreakOutsideOfLoop { expr: ExprId, is_break: bool, bad_value_break: bool },\n     MismatchedArgCount { call_expr: ExprId, expected: usize, found: usize },\n+    ExpectedFunction { call_expr: ExprId, found: Ty },\n }\n \n /// A mismatch between an expected and an inferred type.\n@@ -505,6 +506,14 @@ impl<'a> InferenceContext<'a> {\n             mismatch.expected = table.resolve_completely(mismatch.expected.clone());\n             mismatch.actual = table.resolve_completely(mismatch.actual.clone());\n         }\n+        for diagnostic in &mut result.diagnostics {\n+            match diagnostic {\n+                InferenceDiagnostic::ExpectedFunction { found, .. } => {\n+                    *found = table.resolve_completely(found.clone())\n+                }\n+                _ => (),\n+            }\n+        }\n         for (_, subst) in result.method_resolutions.values_mut() {\n             *subst = table.resolve_completely(subst.clone());\n         }"}, {"sha": "9d75b67bc78935cc7175b6e206ab682e6a47d15e", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c7a0aa00ee4d574af36a1ab982a63488acb211a/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7a0aa00ee4d574af36a1ab982a63488acb211a/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=3c7a0aa00ee4d574af36a1ab982a63488acb211a", "patch": "@@ -364,7 +364,13 @@ impl<'a> InferenceContext<'a> {\n                         }\n                         (params, ret_ty)\n                     }\n-                    None => (Vec::new(), self.err_ty()), // FIXME diagnostic\n+                    None => {\n+                        self.result.diagnostics.push(InferenceDiagnostic::ExpectedFunction {\n+                            call_expr: tgt_expr,\n+                            found: callee_ty.clone(),\n+                        });\n+                        (Vec::new(), self.err_ty())\n+                    }\n                 };\n                 let indices_to_skip = self.check_legacy_const_generics(derefed_callee, args);\n                 self.register_obligations_for_call(&callee_ty);"}, {"sha": "3a6f26a4ea08c725b33b96815e984c6b0f181922", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3c7a0aa00ee4d574af36a1ab982a63488acb211a/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7a0aa00ee4d574af36a1ab982a63488acb211a/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=3c7a0aa00ee4d574af36a1ab982a63488acb211a", "patch": "@@ -31,6 +31,7 @@ macro_rules! diagnostics {\n \n diagnostics![\n     BreakOutsideOfLoop,\n+    ExpectedFunction,\n     InactiveCode,\n     IncorrectCase,\n     InvalidDeriveTarget,\n@@ -130,6 +131,12 @@ pub struct PrivateAssocItem {\n     pub item: AssocItem,\n }\n \n+#[derive(Debug)]\n+pub struct ExpectedFunction {\n+    pub call: InFile<AstPtr<ast::Expr>>,\n+    pub found: Type,\n+}\n+\n #[derive(Debug)]\n pub struct PrivateField {\n     pub expr: InFile<AstPtr<ast::Expr>>,"}, {"sha": "08ccf38b654df155c026f78be0448dd95114b1c6", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3c7a0aa00ee4d574af36a1ab982a63488acb211a/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7a0aa00ee4d574af36a1ab982a63488acb211a/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=3c7a0aa00ee4d574af36a1ab982a63488acb211a", "patch": "@@ -84,9 +84,9 @@ use crate::db::{DefDatabase, HirDatabase};\n pub use crate::{\n     attrs::{HasAttrs, Namespace},\n     diagnostics::{\n-        AnyDiagnostic, BreakOutsideOfLoop, InactiveCode, IncorrectCase, InvalidDeriveTarget,\n-        MacroError, MalformedDerive, MismatchedArgCount, MissingFields, MissingMatchArms,\n-        MissingUnsafe, NoSuchField, PrivateAssocItem, PrivateField,\n+        AnyDiagnostic, BreakOutsideOfLoop, ExpectedFunction, InactiveCode, IncorrectCase,\n+        InvalidDeriveTarget, MacroError, MalformedDerive, MismatchedArgCount, MissingFields,\n+        MissingMatchArms, MissingUnsafe, NoSuchField, PrivateAssocItem, PrivateField,\n         ReplaceFilterMapNextWithFindMap, TypeMismatch, UnimplementedBuiltinMacro,\n         UnresolvedExternCrate, UnresolvedImport, UnresolvedMacroCall, UnresolvedModule,\n         UnresolvedProcMacro,\n@@ -1377,8 +1377,8 @@ impl DefWithBody {\n         let source_map = Lazy::new(|| db.body_with_source_map(self.into()).1);\n         for d in &infer.diagnostics {\n             match d {\n-                hir_ty::InferenceDiagnostic::NoSuchField { expr } => {\n-                    let field = source_map.field_syntax(*expr);\n+                &hir_ty::InferenceDiagnostic::NoSuchField { expr } => {\n+                    let field = source_map.field_syntax(expr);\n                     acc.push(NoSuchField { field }.into())\n                 }\n                 &hir_ty::InferenceDiagnostic::BreakOutsideOfLoop {\n@@ -1391,15 +1391,10 @@ impl DefWithBody {\n                         .expect(\"break outside of loop in synthetic syntax\");\n                     acc.push(BreakOutsideOfLoop { expr, is_break, bad_value_break }.into())\n                 }\n-                hir_ty::InferenceDiagnostic::MismatchedArgCount { call_expr, expected, found } => {\n-                    match source_map.expr_syntax(*call_expr) {\n+                &hir_ty::InferenceDiagnostic::MismatchedArgCount { call_expr, expected, found } => {\n+                    match source_map.expr_syntax(call_expr) {\n                         Ok(source_ptr) => acc.push(\n-                            MismatchedArgCount {\n-                                call_expr: source_ptr,\n-                                expected: *expected,\n-                                found: *found,\n-                            }\n-                            .into(),\n+                            MismatchedArgCount { call_expr: source_ptr, expected, found }.into(),\n                         ),\n                         Err(SyntheticSyntax) => (),\n                     }\n@@ -1423,6 +1418,18 @@ impl DefWithBody {\n                     let item = item.into();\n                     acc.push(PrivateAssocItem { expr_or_pat, item }.into())\n                 }\n+                hir_ty::InferenceDiagnostic::ExpectedFunction { call_expr, found } => {\n+                    let call_expr =\n+                        source_map.expr_syntax(*call_expr).expect(\"unexpected synthetic\");\n+\n+                    acc.push(\n+                        ExpectedFunction {\n+                            call: call_expr,\n+                            found: Type::new(db, DefWithBodyId::from(self), found.clone()),\n+                        }\n+                        .into(),\n+                    )\n+                }\n             }\n         }\n         for (pat_or_expr, mismatch) in infer.type_mismatches() {"}, {"sha": "23bc778da290e8f3ce175f5f0c33f1f15e4e2e01", "filename": "crates/ide-diagnostics/src/handlers/expected_function.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3c7a0aa00ee4d574af36a1ab982a63488acb211a/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fexpected_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7a0aa00ee4d574af36a1ab982a63488acb211a/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fexpected_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fexpected_function.rs?ref=3c7a0aa00ee4d574af36a1ab982a63488acb211a", "patch": "@@ -0,0 +1,38 @@\n+use hir::HirDisplay;\n+\n+use crate::{Diagnostic, DiagnosticsContext};\n+\n+// Diagnostic: expected-function\n+//\n+// This diagnostic is triggered if a call is made on something that is not callable.\n+pub(crate) fn expected_function(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::ExpectedFunction,\n+) -> Diagnostic {\n+    Diagnostic::new(\n+        \"expected-function\",\n+        format!(\"expected function, found {}\", d.found.display(ctx.sema.db)),\n+        ctx.sema.diagnostics_display_range(d.call.clone().map(|it| it.into())).range,\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_diagnostics;\n+\n+    #[test]\n+    fn smoke_test() {\n+        check_diagnostics(\n+            r#\"\n+fn foo() {\n+    let x = 3;\n+    x();\n+ // ^^^ error: expected function, found i32\n+    \"\"();\n+ // ^^^^ error: expected function, found &str\n+    foo();\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "b878119fee1f8cd744afab1504e7762b83a4652e", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7a0aa00ee4d574af36a1ab982a63488acb211a/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7a0aa00ee4d574af36a1ab982a63488acb211a/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=3c7a0aa00ee4d574af36a1ab982a63488acb211a", "patch": "@@ -27,6 +27,7 @@\n \n mod handlers {\n     pub(crate) mod break_outside_of_loop;\n+    pub(crate) mod expected_function;\n     pub(crate) mod inactive_code;\n     pub(crate) mod incorrect_case;\n     pub(crate) mod invalid_derive_target;\n@@ -248,6 +249,7 @@ pub fn diagnostics(\n         #[rustfmt::skip]\n         let d = match diag {\n             AnyDiagnostic::BreakOutsideOfLoop(d) => handlers::break_outside_of_loop::break_outside_of_loop(&ctx, &d),\n+            AnyDiagnostic::ExpectedFunction(d) => handlers::expected_function::expected_function(&ctx, &d),\n             AnyDiagnostic::IncorrectCase(d) => handlers::incorrect_case::incorrect_case(&ctx, &d),\n             AnyDiagnostic::MacroError(d) => handlers::macro_error::macro_error(&ctx, &d),\n             AnyDiagnostic::MalformedDerive(d) => handlers::malformed_derive::malformed_derive(&ctx, &d),"}]}