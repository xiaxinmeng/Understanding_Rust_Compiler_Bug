{"sha": "5cc056a744d1fbdacbdeed65ee62c76362bd68cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYzA1NmE3NDRkMWZiZGFjYmRlZWQ2NWVlNjJjNzYzNjJiZDY4Y2Y=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-14T04:42:44Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-14T04:42:44Z"}, "message": "A few improvements to the `core::hash` top-level docs.\n\nPrimarily opened to address the concerns brought up in\nhttps://github.com/rust-lang/rust/issues/40498.\n\n* run rustfmt on code blocks\n* use `DefaultHasher` instead of deprecated `SipHasher`\n* rename `hash` to `calculate_hash` to prevent confusion with the `hash`\n  method", "tree": {"sha": "403c7162beff5992e1eafd8e2fdec68640073890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/403c7162beff5992e1eafd8e2fdec68640073890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cc056a744d1fbdacbdeed65ee62c76362bd68cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc056a744d1fbdacbdeed65ee62c76362bd68cf", "html_url": "https://github.com/rust-lang/rust/commit/5cc056a744d1fbdacbdeed65ee62c76362bd68cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cc056a744d1fbdacbdeed65ee62c76362bd68cf/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd182c4010b5aee72d070b15e90c98cb0fdc3776", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd182c4010b5aee72d070b15e90c98cb0fdc3776", "html_url": "https://github.com/rust-lang/rust/commit/fd182c4010b5aee72d070b15e90c98cb0fdc3776"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "8c7d83232de4f0a9379c8e8d2dd002104972c15d", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5cc056a744d1fbdacbdeed65ee62c76362bd68cf/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc056a744d1fbdacbdeed65ee62c76362bd68cf/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=5cc056a744d1fbdacbdeed65ee62c76362bd68cf", "patch": "@@ -16,7 +16,8 @@\n //! # Examples\n //!\n //! ```rust\n-//! use std::hash::{Hash, SipHasher, Hasher};\n+//! use std::collections::hash_map::DefaultHasher;\n+//! use std::hash::{Hash, Hasher};\n //!\n //! #[derive(Hash)]\n //! struct Person {\n@@ -25,13 +26,21 @@\n //!     phone: u64,\n //! }\n //!\n-//! let person1 = Person { id: 5, name: \"Janet\".to_string(), phone: 555_666_7777 };\n-//! let person2 = Person { id: 5, name: \"Bob\".to_string(), phone: 555_666_7777 };\n+//! let person1 = Person {\n+//!     id: 5,\n+//!     name: \"Janet\".to_string(),\n+//!     phone: 555_666_7777,\n+//! };\n+//! let person2 = Person {\n+//!     id: 5,\n+//!     name: \"Bob\".to_string(),\n+//!     phone: 555_666_7777,\n+//! };\n //!\n-//! assert!(hash(&person1) != hash(&person2));\n+//! assert!(calculate_hash(&person1) != calculate_hash(&person2));\n //!\n-//! fn hash<T: Hash>(t: &T) -> u64 {\n-//!     let mut s = SipHasher::new();\n+//! fn calculate_hash<T: Hash>(t: &T) -> u64 {\n+//!     let mut s = DefaultHasher::new();\n //!     t.hash(&mut s);\n //!     s.finish()\n //! }\n@@ -43,11 +52,12 @@\n //! [`Hash`]: trait.Hash.html\n //!\n //! ```rust\n-//! use std::hash::{Hash, Hasher, SipHasher};\n+//! use std::collections::hash_map::DefaultHasher;\n+//! use std::hash::{Hash, Hasher};\n //!\n //! struct Person {\n //!     id: u32,\n-//! # #[allow(dead_code)]\n+//!     # #[allow(dead_code)]\n //!     name: String,\n //!     phone: u64,\n //! }\n@@ -59,13 +69,21 @@\n //!     }\n //! }\n //!\n-//! let person1 = Person { id: 5, name: \"Janet\".to_string(), phone: 555_666_7777 };\n-//! let person2 = Person { id: 5, name: \"Bob\".to_string(), phone: 555_666_7777 };\n+//! let person1 = Person {\n+//!     id: 5,\n+//!     name: \"Janet\".to_string(),\n+//!     phone: 555_666_7777,\n+//! };\n+//! let person2 = Person {\n+//!     id: 5,\n+//!     name: \"Bob\".to_string(),\n+//!     phone: 555_666_7777,\n+//! };\n //!\n-//! assert_eq!(hash(&person1), hash(&person2));\n+//! assert_eq!(calculate_hash(&person1), calculate_hash(&person2));\n //!\n-//! fn hash<T: Hash>(t: &T) -> u64 {\n-//!     let mut s = SipHasher::new();\n+//! fn calculate_hash<T: Hash>(t: &T) -> u64 {\n+//!     let mut s = DefaultHasher::new();\n //!     t.hash(&mut s);\n //!     s.finish()\n //! }"}]}