{"sha": "6c57dda44d2c9c12fdaab359c28767e4ccdb671b", "node_id": "C_kwDOAAsO6NoAKDZjNTdkZGE0NGQyYzljMTJmZGFhYjM1OWMyODc2N2U0Y2NkYjY3MWI", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-21T17:41:45Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-21T17:41:45Z"}, "message": "Remove `unique` and move `VerboseTimingGuard` fields into a new struct", "tree": {"sha": "a18c90ef4830c6ab29354245c39f8851d1c64f62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a18c90ef4830c6ab29354245c39f8851d1c64f62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c57dda44d2c9c12fdaab359c28767e4ccdb671b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c57dda44d2c9c12fdaab359c28767e4ccdb671b", "html_url": "https://github.com/rust-lang/rust/commit/6c57dda44d2c9c12fdaab359c28767e4ccdb671b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c57dda44d2c9c12fdaab359c28767e4ccdb671b/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f60d2eb6c19751154a2c752d1c916420c0bb60e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f60d2eb6c19751154a2c752d1c916420c0bb60e6", "html_url": "https://github.com/rust-lang/rust/commit/f60d2eb6c19751154a2c752d1c916420c0bb60e6"}], "stats": {"total": 67, "additions": 32, "deletions": 35}, "files": [{"sha": "24a83ac546f777a7c6f6c4be9541c07d90c3c46c", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c57dda44d2c9c12fdaab359c28767e4ccdb671b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c57dda44d2c9c12fdaab359c28767e4ccdb671b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=6c57dda44d2c9c12fdaab359c28767e4ccdb671b", "patch": "@@ -787,7 +787,6 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n             start_rss.unwrap(),\n             end_rss,\n             tcx.sess.opts.unstable_opts.time_passes_format,\n-            true,\n         );\n     }\n "}, {"sha": "58a0609e29655dff934ab6f553ba6a6ed1918db3", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6c57dda44d2c9c12fdaab359c28767e4ccdb671b/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c57dda44d2c9c12fdaab359c28767e4ccdb671b/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=6c57dda44d2c9c12fdaab359c28767e4ccdb671b", "patch": "@@ -220,7 +220,7 @@ impl SelfProfilerRef {\n         let message_and_format =\n             self.print_verbose_generic_activities.map(|format| (event_label.to_owned(), format));\n \n-        VerboseTimingGuard::start(message_and_format, self.generic_activity(event_label), false)\n+        VerboseTimingGuard::start(message_and_format, self.generic_activity(event_label))\n     }\n \n     /// Like `verbose_generic_activity`, but with an extra arg.\n@@ -239,21 +239,9 @@ impl SelfProfilerRef {\n         VerboseTimingGuard::start(\n             message_and_format,\n             self.generic_activity_with_arg(event_label, event_arg),\n-            false,\n         )\n     }\n \n-    /// Like `verbose_generic_activity`, but `event_label` must be unique for a rustc session.\n-    pub fn unique_verbose_generic_activity(\n-        &self,\n-        event_label: &'static str,\n-    ) -> VerboseTimingGuard<'_> {\n-        let message_and_format =\n-            self.print_verbose_generic_activities.map(|format| (event_label.to_owned(), format));\n-\n-        VerboseTimingGuard::start(message_and_format, self.generic_activity(event_label), true)\n-    }\n-\n     /// Start profiling a generic activity. Profiling continues until the\n     /// TimingGuard returned from this call is dropped.\n     #[inline(always)]\n@@ -729,22 +717,31 @@ impl<'a> TimingGuard<'a> {\n     }\n }\n \n+struct VerboseInfo {\n+    start_time: Instant,\n+    start_rss: Option<usize>,\n+    message: String,\n+    format: TimePassesFormat,\n+}\n+\n #[must_use]\n pub struct VerboseTimingGuard<'a> {\n-    start_and_message: Option<(Instant, Option<usize>, String, TimePassesFormat, bool)>,\n+    info: Option<VerboseInfo>,\n     _guard: TimingGuard<'a>,\n }\n \n impl<'a> VerboseTimingGuard<'a> {\n     pub fn start(\n         message_and_format: Option<(String, TimePassesFormat)>,\n         _guard: TimingGuard<'a>,\n-        unique: bool,\n     ) -> Self {\n         VerboseTimingGuard {\n             _guard,\n-            start_and_message: message_and_format.map(|(msg, format)| {\n-                (Instant::now(), get_resident_set_size(), msg, format, unique)\n+            info: message_and_format.map(|(message, format)| VerboseInfo {\n+                start_time: Instant::now(),\n+                start_rss: get_resident_set_size(),\n+                message,\n+                format,\n             }),\n         }\n     }\n@@ -758,10 +755,10 @@ impl<'a> VerboseTimingGuard<'a> {\n \n impl Drop for VerboseTimingGuard<'_> {\n     fn drop(&mut self) {\n-        if let Some((start_time, start_rss, ref message, format, unique)) = self.start_and_message {\n+        if let Some(info) = &self.info {\n             let end_rss = get_resident_set_size();\n-            let dur = start_time.elapsed();\n-            print_time_passes_entry(message, dur, start_rss, end_rss, format, unique);\n+            let dur = info.start_time.elapsed();\n+            print_time_passes_entry(&info.message, dur, info.start_rss, end_rss, info.format);\n         }\n     }\n }\n@@ -772,18 +769,19 @@ pub fn print_time_passes_entry(\n     start_rss: Option<usize>,\n     end_rss: Option<usize>,\n     format: TimePassesFormat,\n-    unique: bool,\n ) {\n-    if format == TimePassesFormat::Json {\n-        let json = json!({\n-            \"pass\": what,\n-            \"time\": dur.as_secs_f64(),\n-            \"rss_start\": start_rss,\n-            \"rss_end\": end_rss,\n-            \"unique\": unique,\n-        });\n-        eprintln!(\"time: {}\", json.to_string());\n-        return;\n+    match format {\n+        TimePassesFormat::Json => {\n+            let json = json!({\n+                \"pass\": what,\n+                \"time\": dur.as_secs_f64(),\n+                \"rss_start\": start_rss,\n+                \"rss_end\": end_rss,\n+            });\n+            eprintln!(\"time: {}\", json.to_string());\n+            return;\n+        }\n+        TimePassesFormat::Text => (),\n     }\n \n     // Print the pass if its duration is greater than 5 ms, or it changed the"}, {"sha": "ad2c2b13fed57910c3969ba2ba86f62d775e6974", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c57dda44d2c9c12fdaab359c28767e4ccdb671b/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c57dda44d2c9c12fdaab359c28767e4ccdb671b/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=6c57dda44d2c9c12fdaab359c28767e4ccdb671b", "patch": "@@ -1359,7 +1359,7 @@ pub fn main() -> ! {\n \n     if let Some(format) = callbacks.time_passes {\n         let end_rss = get_resident_set_size();\n-        print_time_passes_entry(\"total\", start_time.elapsed(), start_rss, end_rss, format, true);\n+        print_time_passes_entry(\"total\", start_time.elapsed(), start_rss, end_rss, format);\n     }\n \n     process::exit(exit_code)"}, {"sha": "3b3d4ca5d6b21e3c15cf8b70ec8244683eee70e0", "filename": "compiler/rustc_session/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c57dda44d2c9c12fdaab359c28767e4ccdb671b/compiler%2Frustc_session%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c57dda44d2c9c12fdaab359c28767e4ccdb671b/compiler%2Frustc_session%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Futils.rs?ref=6c57dda44d2c9c12fdaab359c28767e4ccdb671b", "patch": "@@ -4,10 +4,10 @@ use std::path::{Path, PathBuf};\n \n impl Session {\n     pub fn timer(&self, what: &'static str) -> VerboseTimingGuard<'_> {\n-        self.prof.unique_verbose_generic_activity(what)\n+        self.prof.verbose_generic_activity(what)\n     }\n     pub fn time<R>(&self, what: &'static str, f: impl FnOnce() -> R) -> R {\n-        self.prof.unique_verbose_generic_activity(what).run(f)\n+        self.prof.verbose_generic_activity(what).run(f)\n     }\n }\n "}]}