{"sha": "d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMTI2ZThlZDNjYzBkNmZjYjlkZDQ0YzM2YTQ2ZjljZTY1MDEwYTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-06T07:43:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-06T07:43:56Z"}, "message": "Auto merge of #67080 - JohnTitor:rollup-2t6fm3u, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #66649 (VxWorks: fix issues in accessing environment variables)\n - #66764 (Tweak wording of `collect()` on bad target type)\n - #66900 (Clean up error codes)\n - #66974 ([CI] fix the `! isCI` check in src/ci/run.sh)\n - #66979 (Add long error for E0631 and update ui tests.)\n - #67017 (cleanup long error explanations)\n - #67021 (Fix docs for formatting delegations)\n - #67041 (add ExitStatusExt into prelude)\n - #67065 (Fix fetching arguments on the wasm32-wasi target)\n - #67066 (Update the revision of wasi-libc used in wasm32-wasi)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "1e574274dfc984cf278d7a39e154b408f1663485", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e574274dfc984cf278d7a39e154b408f1663485"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "html_url": "https://github.com/rust-lang/rust/commit/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b482cdf7ce55e05ee8392e1ade70966e3189cfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b482cdf7ce55e05ee8392e1ade70966e3189cfd", "html_url": "https://github.com/rust-lang/rust/commit/7b482cdf7ce55e05ee8392e1ade70966e3189cfd"}, {"sha": "acd2b0835d1b833b851501a9d255ee7882f45a84", "url": "https://api.github.com/repos/rust-lang/rust/commits/acd2b0835d1b833b851501a9d255ee7882f45a84", "html_url": "https://github.com/rust-lang/rust/commit/acd2b0835d1b833b851501a9d255ee7882f45a84"}], "stats": {"total": 207, "additions": 148, "deletions": 59}, "files": [{"sha": "925d5ca0223b1f8bd7b3cb136ebd23b546331fc4", "filename": "src/ci/docker/dist-various-2/build-wasi-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -12,7 +12,7 @@ export PATH=`pwd`/clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-14.04/bin:$PATH\n git clone https://github.com/CraneStation/wasi-libc\n \n cd wasi-libc\n-git reset --hard a94d2d04e7722b323573da2bd04e909a5763d35b\n+git reset --hard f645f498dfbbbc00a7a97874d33082d3605c3f21\n make -j$(nproc) INSTALL_DIR=/wasm32-wasi install\n \n cd .."}, {"sha": "38d1d2baf25075cc06fb2f296a8a12fa66e82c0c", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -23,7 +23,7 @@ fi\n ci_dir=`cd $(dirname $0) && pwd`\n source \"$ci_dir/shared.sh\"\n \n-if [ ! isCI ] || isCiBranch auto || isCiBranch beta; then\n+if ! isCI || isCiBranch auto || isCiBranch beta; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set build.print-step-timings --enable-verbose-tests\"\n fi\n "}, {"sha": "e2f49ee25a756f92b58b6521852d8fc485035e45", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -662,7 +662,7 @@ pub trait Display {\n ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///\n-///         write!(f, \"{:o}\", val) // delegate to i32's implementation\n+///         fmt::Octal::fmt(&val, f) // delegate to i32's implementation\n ///     }\n /// }\n ///\n@@ -712,7 +712,7 @@ pub trait Octal {\n ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///\n-///         write!(f, \"{:b}\", val) // delegate to i32's implementation\n+///         fmt::Binary::fmt(&val, f) // delegate to i32's implementation\n ///     }\n /// }\n ///\n@@ -771,7 +771,7 @@ pub trait Binary {\n ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///\n-///         write!(f, \"{:x}\", val) // delegate to i32's implementation\n+///         fmt::LowerHex::fmt(&val, f) // delegate to i32's implementation\n ///     }\n /// }\n ///\n@@ -824,7 +824,7 @@ pub trait LowerHex {\n ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///\n-///         write!(f, \"{:X}\", val) // delegate to i32's implementation\n+///         fmt::UpperHex::fmt(&val, f) // delegate to i32's implementation\n ///     }\n /// }\n ///\n@@ -869,7 +869,8 @@ pub trait UpperHex {\n ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         // use `as` to convert to a `*const T`, which implements Pointer, which we can use\n ///\n-///         write!(f, \"{:p}\", self as *const Length)\n+///         let ptr = self as *const Self;\n+///         fmt::Pointer::fmt(&ptr, f)\n ///     }\n /// }\n ///"}, {"sha": "d6ae5cfe9e00e86147358de9996c063e89461f70", "filename": "src/libcore/iter/traits/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -91,9 +91,9 @@\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n-    message=\"a collection of type `{Self}` cannot be built from an iterator \\\n+    message=\"a value of type `{Self}` cannot be built from an iterator \\\n              over elements of type `{A}`\",\n-    label=\"a collection of type `{Self}` cannot be built from `std::iter::Iterator<Item={A}>`\",\n+    label=\"value of type `{Self}` cannot be built from `std::iter::Iterator<Item={A}>`\",\n )]\n pub trait FromIterator<A>: Sized {\n     /// Creates a value from an iterator."}, {"sha": "9e4b704170b9b38271269b01e42f5e8068002484", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -347,6 +347,7 @@ E0622: include_str!(\"./error_codes/E0622.md\"),\n E0623: include_str!(\"./error_codes/E0623.md\"),\n E0624: include_str!(\"./error_codes/E0624.md\"),\n E0626: include_str!(\"./error_codes/E0626.md\"),\n+E0631: include_str!(\"./error_codes/E0631.md\"),\n E0633: include_str!(\"./error_codes/E0633.md\"),\n E0635: include_str!(\"./error_codes/E0635.md\"),\n E0636: include_str!(\"./error_codes/E0636.md\"),\n@@ -580,7 +581,6 @@ E0745: include_str!(\"./error_codes/E0745.md\"),\n     // rustc_const_unstable attribute must be paired with stable/unstable\n     // attribute\n     E0630,\n-    E0631, // type mismatch in closure arguments\n     E0632, // cannot provide explicit generic arguments when `impl Trait` is\n            // used in argument position\n     E0634, // type has conflicting packed representaton hints"}, {"sha": "e289534bf7abd777281cf5a1af3d75aeb0db043f", "filename": "src/librustc_error_codes/error_codes/E0092.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0092.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0092.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0092.md?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -1,4 +1,5 @@\n-You tried to declare an undefined atomic operation function.\n+An undefined atomic operation function was declared.\n+\n Erroneous code example:\n \n ```compile_fail,E0092\n@@ -11,8 +12,8 @@ extern \"rust-intrinsic\" {\n ```\n \n Please check you didn't make a mistake in the function's name. All intrinsic\n-functions are defined in librustc_codegen_llvm/intrinsic.rs and in\n-libcore/intrinsics.rs in the Rust source code. Example:\n+functions are defined in `librustc_codegen_llvm/intrinsic.rs` and in\n+`libcore/intrinsics.rs` in the Rust source code. Example:\n \n ```\n #![feature(intrinsics)]"}, {"sha": "8e7de1a9d37b3101e49fe5bafc24eb4e16d693c6", "filename": "src/librustc_error_codes/error_codes/E0093.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0093.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0093.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0093.md?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -1,4 +1,6 @@\n-You declared an unknown intrinsic function. Erroneous code example:\n+An unknown intrinsic function was declared.\n+\n+Erroneous code example:\n \n ```compile_fail,E0093\n #![feature(intrinsics)]\n@@ -15,8 +17,8 @@ fn main() {\n ```\n \n Please check you didn't make a mistake in the function's name. All intrinsic\n-functions are defined in librustc_codegen_llvm/intrinsic.rs and in\n-libcore/intrinsics.rs in the Rust source code. Example:\n+functions are defined in `librustc_codegen_llvm/intrinsic.rs` and in\n+`libcore/intrinsics.rs` in the Rust source code. Example:\n \n ```\n #![feature(intrinsics)]"}, {"sha": "42baa65bf9faf77782a73dde922f048c23183769", "filename": "src/librustc_error_codes/error_codes/E0094.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0094.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0094.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0094.md?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -1,4 +1,5 @@\n-You gave an invalid number of type parameters to an intrinsic function.\n+An invalid number of type parameters was given to an intrinsic function.\n+\n Erroneous code example:\n \n ```compile_fail,E0094"}, {"sha": "60ca1ddc2830c3958b07f868a01dcbc1a94356dc", "filename": "src/librustc_error_codes/error_codes/E0106.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0106.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0106.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0106.md?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -2,7 +2,7 @@ This error indicates that a lifetime is missing from a type. If it is an error\n inside a function signature, the problem may be with failing to adhere to the\n lifetime elision rules (see below).\n \n-Here are some simple examples of where you'll run into this error:\n+Erroneous code examples:\n \n ```compile_fail,E0106\n struct Foo1 { x: &bool }\n@@ -27,7 +27,7 @@ function signatures which allows you to leave out lifetimes in certain cases.\n For more background on lifetime elision see [the book][book-le].\n \n The lifetime elision rules require that any function signature with an elided\n-output lifetime must either have\n+output lifetime must either have:\n \n  - exactly one input lifetime\n  - or, multiple input lifetimes, but the function must also be a method with a"}, {"sha": "4d22b17fe10166ad26c4c216c8be12fd63bfeb75", "filename": "src/librustc_error_codes/error_codes/E0107.md", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0107.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0107.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0107.md?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -1,4 +1,6 @@\n-This error means that an incorrect number of generic arguments were provided:\n+An incorrect number of generic arguments were provided.\n+\n+Erroneous code example:\n \n ```compile_fail,E0107\n struct Foo<T> { x: T }\n@@ -9,19 +11,34 @@ struct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                   //        expected 1, found 2\n \n fn foo<T, U>(x: T, y: U) {}\n+fn f() {}\n \n fn main() {\n     let x: bool = true;\n     foo::<bool>(x);                 // error: wrong number of type arguments:\n                                     //        expected 2, found 1\n     foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                     //        expected 2, found 3\n+    f::<'static>();                 // error: wrong number of lifetime arguments\n+                                    //        expected 0, found 1\n }\n+```\n+\n+When using/declaring an item with generic arguments, you must provide the exact\n+same number:\n+\n+```\n+struct Foo<T> { x: T }\n+\n+struct Bar<T> { x: Foo<T> }               // ok!\n+struct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n \n+fn foo<T, U>(x: T, y: U) {}\n fn f() {}\n \n fn main() {\n-    f::<'static>(); // error: wrong number of lifetime arguments:\n-                    //        expected 0, found 1\n+    let x: bool = true;\n+    foo::<bool, u32>(x, 12);              // ok!\n+    f();                                  // ok!\n }\n ```"}, {"sha": "2eab9725a6f596765f2b81823683edb6161cb32c", "filename": "src/librustc_error_codes/error_codes/E0109.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0109.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0109.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0109.md?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -1,4 +1,5 @@\n You tried to provide a generic argument to a type which doesn't need it.\n+\n Erroneous code example:\n \n ```compile_fail,E0109"}, {"sha": "ca849c2a128f4776526f49542b1f01f9a1011984", "filename": "src/librustc_error_codes/error_codes/E0116.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0116.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0116.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0116.md?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -1,11 +1,15 @@\n-You can only define an inherent implementation for a type in the same crate\n-where the type was defined. For example, an `impl` block as below is not allowed\n-since `Vec` is defined in the standard library:\n+An inherent implementation was defined for a type outside the current crate.\n+\n+Erroneous code example:\n \n ```compile_fail,E0116\n impl Vec<u8> { } // error\n ```\n \n+You can only define an inherent implementation for a type in the same crate\n+where the type was defined. For example, an `impl` block as above is not allowed\n+since `Vec` is defined in the standard library.\n+\n To fix this problem, you can do either of these things:\n \n  - define a trait that has the desired associated functions/types/constants and"}, {"sha": "7fa211d4a27d422390db0be84cf7904026477973", "filename": "src/librustc_error_codes/error_codes/E0117.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0117.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0117.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0117.md?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -1,3 +1,11 @@\n+The `Drop` trait was implemented on a non-struct type.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0117\n+impl Drop for u32 {}\n+```\n+\n This error indicates a violation of one of Rust's orphan rules for trait\n implementations. The rule prohibits any implementation of a foreign trait (a\n trait defined in another crate) where\n@@ -6,12 +14,6 @@ trait defined in another crate) where\n  - all of the parameters being passed to the trait (if there are any) are also\n    foreign.\n \n-Here's one example of this error:\n-\n-```compile_fail,E0117\n-impl Drop for u32 {}\n-```\n-\n To avoid this kind of error, ensure that at least one local type is referenced\n by the `impl`:\n "}, {"sha": "5cb5f506e0a4bc504be5ad836a481b8c6eb729f9", "filename": "src/librustc_error_codes/error_codes/E0118.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0118.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0118.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0118.md?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -1,5 +1,7 @@\n-You're trying to write an inherent implementation for something which isn't a\n-struct nor an enum. Erroneous code example:\n+An inherent implementation was defined for something which isn't a struct nor\n+an enum.\n+\n+Erroneous code example:\n \n ```compile_fail,E0118\n impl (u8, u8) { // error: no base type found for inherent implementation"}, {"sha": "e596349e5e2d1af00451da2054050a358a362c8d", "filename": "src/librustc_error_codes/error_codes/E0119.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0119.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0119.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0119.md?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -1,5 +1,6 @@\n There are conflicting trait implementations for the same type.\n-Example of erroneous code:\n+\n+Erroneous code example:\n \n ```compile_fail,E0119\n trait MyTrait {"}, {"sha": "6188d5f61a7f9892d83617af173c1c564ca24e94", "filename": "src/librustc_error_codes/error_codes/E0631.md", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0631.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0631.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0631.md?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -0,0 +1,27 @@\n+This error indicates a type mismatch in closure arguments.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0631\n+fn foo<F: Fn(i32)>(f: F) {\n+}\n+\n+fn main() {\n+    foo(|x: &str| {});\n+}\n+```\n+\n+The error occurs because `foo` accepts a closure that takes an `i32` argument,\n+but in `main`, it is passed a closure with a `&str` argument.\n+\n+This can be resolved by changing the type annotation or removing it entirely\n+if it can be inferred.\n+\n+```\n+fn foo<F: Fn(i32)>(f: F) {\n+}\n+\n+fn main() {\n+    foo(|x: i32| {});\n+}\n+```"}, {"sha": "8fa9bd9d1e27f0da8911671268c44e6d08cd2099", "filename": "src/libstd/sys/vxworks/ext/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Fmod.rs?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -18,4 +18,7 @@ pub mod prelude {\n     #[doc(no_inline)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n+    #[doc(no_inline)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub use super::process::ExitStatusExt;\n }"}, {"sha": "71e1d1626c1d0bed0bd8027671a7352cb782f3fa", "filename": "src/libstd/sys/vxworks/os.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -11,14 +11,12 @@ use crate::path::{self, PathBuf, Path};\n use crate::ptr;\n use crate::slice;\n use crate::str;\n-use crate::sys_common::mutex::Mutex;\n+use crate::sys_common::mutex::{Mutex, MutexGuard};\n use crate::sys::cvt;\n /*use sys::fd; this one is probably important */\n use crate::vec;\n \n const TMPBUF_SZ: usize = 128;\n-static ENV_LOCK: Mutex = Mutex::new();\n-\n \n // This is a terrible fix\n use crate::sys::os_str::Buf;\n@@ -200,11 +198,18 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n     &mut environ\n }\n \n+pub unsafe fn env_lock() -> MutexGuard<'static> {\n+    // We never call `ENV_LOCK.init()`, so it is UB to attempt to\n+    // acquire this mutex reentrantly!\n+    static ENV_LOCK: Mutex = Mutex::new();\n+    ENV_LOCK.lock()\n+}\n+\n /// Returns a vector of (variable, value) byte-vector pairs for all the\n /// environment variables of the current process.\n pub fn env() -> Env {\n     unsafe {\n-        let _guard = ENV_LOCK.lock();\n+        let _guard = env_lock();\n         let mut environ = *environ();\n         if environ == ptr::null() {\n             panic!(\"os::env() failure getting env string from OS: {}\",\n@@ -244,7 +249,7 @@ pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n     // always None as well\n     let k = CString::new(k.as_bytes())?;\n     unsafe {\n-        let _guard = ENV_LOCK.lock();\n+        let _guard = env_lock();\n         let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n         let ret = if s.is_null() {\n             None\n@@ -260,7 +265,7 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n     let v = CString::new(v.as_bytes())?;\n \n     unsafe {\n-        let _guard = ENV_LOCK.lock();\n+        let _guard = env_lock();\n         cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(|_| ())\n     }\n }\n@@ -269,7 +274,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n     let nbuf = CString::new(n.as_bytes())?;\n \n     unsafe {\n-        let _guard = ENV_LOCK.lock();\n+        let _guard = env_lock();\n         cvt(libc::unsetenv(nbuf.as_ptr())).map(|_| ())\n     }\n }"}, {"sha": "79bfd770f8ed7db057f48573959e2412ead1fc07", "filename": "src/libstd/sys/vxworks/process/process_vxworks.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -15,6 +15,7 @@ impl Command {\n                  -> io::Result<(Process, StdioPipes)> {\n         use crate::sys::{cvt_r};\n         const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n+        let envp = self.capture_env();\n \n         if self.saw_nul() {\n             return Err(io::Error::new(ErrorKind::InvalidInput,\n@@ -52,12 +53,19 @@ impl Command {\n                 t!(cvt(libc::chdir(cwd.as_ptr())));\n             }\n \n+            let c_envp = envp.as_ref().map(|c| c.as_ptr())\n+                .unwrap_or_else(|| *sys::os::environ() as *const _);\n+            let stack_size = thread::min_stack();\n+\n+            // ensure that access to the environment is synchronized\n+            let _lock = sys::os::env_lock();\n+\n             let ret = libc::rtpSpawn(\n                 self.get_argv()[0],                   // executing program\n                 self.get_argv().as_ptr() as *mut *const c_char, // argv\n-                *sys::os::environ() as *mut *const c_char,\n+                c_envp as *mut *const c_char,\n                 100 as c_int,                         // initial priority\n-                thread::min_stack(),                  // initial stack size.\n+                stack_size,                           // initial stack size.\n                 0,                                    // options\n                 0                                     // task options\n             );"}, {"sha": "02aa68d6f3ab75fc8b7f65fe708157e05dea7abd", "filename": "src/libstd/sys/wasi/args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -26,6 +26,7 @@ fn maybe_args() -> Option<Vec<OsString>> {\n         let mut argv = Vec::with_capacity(argc);\n         let mut buf = Vec::with_capacity(buf_size);\n         wasi::args_get(argv.as_mut_ptr(), buf.as_mut_ptr()).ok()?;\n+        argv.set_len(argc);\n         let mut ret = Vec::with_capacity(argc);\n         for ptr in argv {\n             let s = CStr::from_ptr(ptr.cast());"}, {"sha": "c6d9a61bdd95aa82047d312cba5edc7d4e69b238", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -121,3 +121,4 @@ LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(),\n \n error: aborting due to 11 previous errors\n \n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "7141c047d7f53e4197ce42740949ed910c5d7e42", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -39,3 +39,4 @@ LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "003339584681529f296a311586e29e05d6c8f1d4", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -77,4 +77,5 @@ LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0631.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "1c6564ee426e50b3b7dfcad2746fbaa21a769f8e", "filename": "src/test/ui/closure-expected-type/expect-infer-var-appearing-twice.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -13,3 +13,4 @@ LL |     with_closure(|x: u32, y: i32| {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "2f2871e9f0e90c89e1cfe7a6cbad4d9e544b278f", "filename": "src/test/ui/closures/issue-41366.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -19,4 +19,5 @@ LL |     (&|_|()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0271`.\n+Some errors have detailed explanations: E0271, E0631.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "d90eb53f9006ffe8d2d651257d41e05a9aba2d9c", "filename": "src/test/ui/issues/issue-43623.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -25,4 +25,5 @@ LL |     break_me::<Type, fn(_)>;\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0271`.\n+Some errors have detailed explanations: E0271, E0631.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "d13dcd54a479aa079dde0093cee5101c7e57d786", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -27,4 +27,5 @@ LL |     foo((), drop)\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0271`.\n+Some errors have detailed explanations: E0271, E0631.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "06f5c058f81f541a7fb62d1f172f05078382f2be", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -46,3 +46,4 @@ LL |     bar(f);\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "ed5028247124f6e70ae74cbeacf4f71067327800", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -45,4 +45,5 @@ LL |     baz(f);\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0271`.\n+Some errors have detailed explanations: E0271, E0631.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "f3874c0907be033cb4980cba19d4244bff2e58ab", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -24,4 +24,5 @@ LL |     baz(|_| ());\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0271`.\n+Some errors have detailed explanations: E0271, E0631.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "88c92661994cbac367324c1398f1adf1f13ae32b", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -24,3 +24,4 @@ LL |     apply(&mut 3, takes_imm);\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "da018aa89482c58cdf9a4318973389713ee0e213", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -18,4 +18,5 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0599`.\n+Some errors have detailed explanations: E0599, E0631.\n+For more information about an error, try `rustc --explain E0599`."}, {"sha": "3c999f200d9c7c113837402fd5824dd726e39823", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -12,3 +12,4 @@ LL |     let z = call_it(3, f);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "5380fae5417e463fc7b91d2e26062654ee19bbcb", "filename": "src/test/ui/type/type-check-defaults.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.rs?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -4,9 +4,9 @@ use std::ops::Add;\n \n struct Foo<T, U: FromIterator<T>>(T, U);\n struct WellFormed<Z = Foo<i32, i32>>(Z);\n-//~^ ERROR a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n+//~^ ERROR a value of type `i32` cannot be built from an iterator over elements of type `i32`\n struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n-//~^ ERROR a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n+//~^ ERROR a value of type `i32` cannot be built from an iterator over elements of type `i32`\n \n struct Bounds<T:Copy=String>(T);\n //~^ ERROR the trait bound `std::string::String: std::marker::Copy` is not satisfied [E0277]"}, {"sha": "6f84b37d61249204828d0856763f9353bb552685", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -1,21 +1,21 @@\n-error[E0277]: a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n+error[E0277]: a value of type `i32` cannot be built from an iterator over elements of type `i32`\n   --> $DIR/type-check-defaults.rs:6:19\n    |\n LL | struct Foo<T, U: FromIterator<T>>(T, U);\n    | ---------------------------------------- required by `Foo`\n LL | struct WellFormed<Z = Foo<i32, i32>>(Z);\n-   |                   ^ a collection of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n+   |                   ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `std::iter::FromIterator<i32>` is not implemented for `i32`\n \n-error[E0277]: a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n+error[E0277]: a value of type `i32` cannot be built from an iterator over elements of type `i32`\n   --> $DIR/type-check-defaults.rs:8:27\n    |\n LL | struct Foo<T, U: FromIterator<T>>(T, U);\n    | ---------------------------------------- required by `Foo`\n ...\n LL | struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n-   |                           ^ a collection of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n+   |                           ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `std::iter::FromIterator<i32>` is not implemented for `i32`\n "}, {"sha": "a25e3ba5fa89f9fa269853bbd47e68a41bdb9ce6", "filename": "src/test/ui/type/type-dependent-def-issue-49241.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -3,5 +3,5 @@ fn main() {\n     const l: usize = v.count(); //~ ERROR attempt to use a non-constant value in a constant\n     let s: [u32; l] = v.into_iter().collect();\n     //~^ ERROR evaluation of constant value failed\n-    //~^^ ERROR a collection of type\n+    //~^^ ERROR a value of type\n }"}, {"sha": "18a69c50ebd6ddcde25467adc1aea18a740df40a", "filename": "src/test/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "patch": "@@ -10,11 +10,11 @@ error[E0080]: evaluation of constant value failed\n LL |     let s: [u32; l] = v.into_iter().collect();\n    |                  ^ referenced constant has errors\n \n-error[E0277]: a collection of type `[u32; _]` cannot be built from an iterator over elements of type `{integer}`\n+error[E0277]: a value of type `[u32; _]` cannot be built from an iterator over elements of type `{integer}`\n   --> $DIR/type-dependent-def-issue-49241.rs:4:37\n    |\n LL |     let s: [u32; l] = v.into_iter().collect();\n-   |                                     ^^^^^^^ a collection of type `[u32; _]` cannot be built from `std::iter::Iterator<Item={integer}>`\n+   |                                     ^^^^^^^ value of type `[u32; _]` cannot be built from `std::iter::Iterator<Item={integer}>`\n    |\n    = help: the trait `std::iter::FromIterator<{integer}>` is not implemented for `[u32; _]`\n "}]}