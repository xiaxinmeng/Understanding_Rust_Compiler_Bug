{"sha": "5070dea2366104fb0b5c344ce7f2a5cf8af176b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNzBkZWEyMzY2MTA0ZmIwYjVjMzQ0Y2U3ZjJhNWNmOGFmMTc2YjA=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-04-18T22:56:27Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-04-18T22:56:27Z"}, "message": "Lazily evaluate EvalErrorKind::*.into() calls.\n\neval_context.rs calls `ok_or` in multiple places with an eagerly\nevaluated `EvalErrorKind::*.into()` argument, which calls\nEvalError::from(), which calls env::var(\"MIRI_BACKTRACE\"), which\nallocates a String. This code is hot enough for this to have a\nmeasurable effect on some benchmarks.\n\nThis patch changes the `ok_or` calls into `ok_or_else`, thus avoiding\nthe evaluations when they're not needed. As a result, most of the\nrustc-perf benchmarks get a measurable speedup, particularly the\nshorter-running ones, where the improvement is as high as 6%.", "tree": {"sha": "f124d222d034defe7ca4361f70c017ffef173fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f124d222d034defe7ca4361f70c017ffef173fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5070dea2366104fb0b5c344ce7f2a5cf8af176b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5070dea2366104fb0b5c344ce7f2a5cf8af176b0", "html_url": "https://github.com/rust-lang/rust/commit/5070dea2366104fb0b5c344ce7f2a5cf8af176b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5070dea2366104fb0b5c344ce7f2a5cf8af176b0/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23561c6747b0916e852aaa2a5d04c0b0eeddc6de", "url": "https://api.github.com/repos/rust-lang/rust/commits/23561c6747b0916e852aaa2a5d04c0b0eeddc6de", "html_url": "https://github.com/rust-lang/rust/commit/23561c6747b0916e852aaa2a5d04c0b0eeddc6de"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "c75f112b9e82af676c72c377269d488f9508cc26", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5070dea2366104fb0b5c344ce7f2a5cf8af176b0/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5070dea2366104fb0b5c344ce7f2a5cf8af176b0/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=5070dea2366104fb0b5c344ce7f2a5cf8af176b0", "patch": "@@ -260,7 +260,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             self.param_env,\n             def_id,\n             substs,\n-        ).ok_or(EvalErrorKind::TypeckError.into()) // turn error prop into a panic to expose associated type in const issue\n+        ).ok_or_else(|| EvalErrorKind::TypeckError.into()) // turn error prop into a panic to expose associated type in const issue\n     }\n \n     pub(super) fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n@@ -279,9 +279,9 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         trace!(\"load mir {:?}\", instance);\n         match instance {\n             ty::InstanceDef::Item(def_id) => {\n-                self.tcx.maybe_optimized_mir(def_id).ok_or_else(|| {\n+                self.tcx.maybe_optimized_mir(def_id).ok_or_else(||\n                     EvalErrorKind::NoMirFor(self.tcx.item_path_str(def_id)).into()\n-                })\n+                )\n             }\n             _ => Ok(self.tcx.instance_mir(instance)),\n         }\n@@ -691,7 +691,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                                     self.param_env,\n                                     def_id,\n                                     substs,\n-                                ).ok_or(EvalErrorKind::TypeckError.into());\n+                                ).ok_or_else(|| EvalErrorKind::TypeckError.into());\n                                 let fn_ptr = self.memory.create_fn_alloc(instance?);\n                                 let valty = ValTy {\n                                     value: Value::ByVal(PrimVal::Ptr(fn_ptr)),\n@@ -1699,7 +1699,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n impl<'mir, 'tcx> Frame<'mir, 'tcx> {\n     pub fn get_local(&self, local: mir::Local) -> EvalResult<'tcx, Value> {\n-        self.locals[local].ok_or(EvalErrorKind::DeadLocal.into())\n+        self.locals[local].ok_or_else(|| EvalErrorKind::DeadLocal.into())\n     }\n \n     fn set_local(&mut self, local: mir::Local, value: Value) -> EvalResult<'tcx> {"}]}