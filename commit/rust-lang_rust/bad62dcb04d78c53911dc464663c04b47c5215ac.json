{"sha": "bad62dcb04d78c53911dc464663c04b47c5215ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZDYyZGNiMDRkNzhjNTM5MTFkYzQ2NDY2M2MwNGI0N2M1MjE1YWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-13T06:10:15Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-14T19:06:29Z"}, "message": "rustc: Allow constants to be used in patterns. r=nmatsakis", "tree": {"sha": "4042819ec2da0f78e0b719527a5257d171ff5ad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4042819ec2da0f78e0b719527a5257d171ff5ad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bad62dcb04d78c53911dc464663c04b47c5215ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bad62dcb04d78c53911dc464663c04b47c5215ac", "html_url": "https://github.com/rust-lang/rust/commit/bad62dcb04d78c53911dc464663c04b47c5215ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bad62dcb04d78c53911dc464663c04b47c5215ac/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf002e9d32a9b838f11933f3e1d38b6ffdbc0f98", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf002e9d32a9b838f11933f3e1d38b6ffdbc0f98", "html_url": "https://github.com/rust-lang/rust/commit/cf002e9d32a9b838f11933f3e1d38b6ffdbc0f98"}], "stats": {"total": 230, "additions": 176, "deletions": 54}, "files": [{"sha": "12e8c2b133d896c83d1a749285a5b3c4e77d1b84", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=bad62dcb04d78c53911dc464663c04b47c5215ac", "patch": "@@ -447,8 +447,7 @@ impl gather_loan_ctxt {\n                   alt_id: ast::node_id) {\n         do self.bccx.cat_pattern(discr_cmt, root_pat) |cmt, pat| {\n             match pat.node {\n-              ast::pat_ident(bm, _, _)\n-                    if !self.pat_is_variant_or_struct(pat) => {\n+              ast::pat_ident(bm, _, _) if self.pat_is_binding(pat) => {\n                 match bm {\n                   ast::bind_by_value | ast::bind_by_move => {\n                     // copying does not borrow anything, so no check\n@@ -502,5 +501,9 @@ impl gather_loan_ctxt {\n     fn pat_is_variant_or_struct(&self, pat: @ast::pat) -> bool {\n         pat_util::pat_is_variant_or_struct(self.bccx.tcx.def_map, pat)\n     }\n+\n+    fn pat_is_binding(&self, pat: @ast::pat) -> bool {\n+        pat_util::pat_is_binding(self.bccx.tcx.def_map, pat)\n+    }\n }\n "}, {"sha": "f61cda0586695552f8c327b5ab083af53f79e16e", "filename": "src/librustc/middle/check_alt.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs?ref=bad62dcb04d78c53911dc464663c04b47c5215ac", "patch": "@@ -1,7 +1,7 @@\n use syntax::ast::*;\n use syntax::ast_util::{variant_def_ids, dummy_sp, unguarded_pat};\n use const_eval::{eval_const_expr, const_val, const_int, const_bool,\n-                    compare_const_vals};\n+                 compare_const_vals, lookup_const_by_id};\n use syntax::codemap::span;\n use syntax::print::pprust::pat_to_str;\n use util::ppaux::ty_to_str;\n@@ -229,6 +229,10 @@ fn pat_ctor_id(tcx: ty::ctxt, p: @pat) -> Option<ctor> {\n       pat_ident(_, _, _) | pat_enum(_, _) => {\n         match tcx.def_map.find(pat.id) {\n           Some(def_variant(_, id)) => Some(variant(id)),\n+          Some(def_const(did)) => {\n+            let const_expr = lookup_const_by_id(tcx, did).get();\n+            Some(val(eval_const_expr(tcx, const_expr)))\n+          }\n           _ => None\n         }\n       }\n@@ -255,7 +259,7 @@ fn is_wild(tcx: ty::ctxt, p: @pat) -> bool {\n       pat_wild => { true }\n       pat_ident(_, _, _) => {\n         match tcx.def_map.find(pat.id) {\n-          Some(def_variant(_, _)) => { false }\n+          Some(def_variant(_, _)) | Some(def_const(*)) => { false }\n           _ => { true }\n         }\n       }\n@@ -344,6 +348,20 @@ fn specialize(tcx: ty::ctxt, r: ~[@pat], ctor_id: ctor, arity: uint,\n             if variant(id) == ctor_id { Some(vec::tail(r)) }\n             else { None }\n           }\n+          Some(def_const(did)) => {\n+            let const_expr = lookup_const_by_id(tcx, did).get();\n+            let e_v = eval_const_expr(tcx, const_expr);\n+            let match_ = match ctor_id {\n+                val(v) => compare_const_vals(e_v, v) == 0,\n+                range(c_lo, c_hi) => {\n+                    compare_const_vals(c_lo, e_v) >= 0 &&\n+                        compare_const_vals(c_hi, e_v) <= 0\n+                }\n+                single => true,\n+                _ => fail ~\"type error\"\n+            };\n+            if match_ { Some(vec::tail(r)) } else { None }\n+          }\n           _ => Some(vec::append(vec::from_elem(arity, wild()), vec::tail(r)))\n         }\n       }\n@@ -491,6 +509,7 @@ fn is_refutable(tcx: ty::ctxt, pat: &pat) -> bool {\n             return true;\n         }\n       }\n+      Some(def_const(*)) => return true,\n       _ => ()\n     }\n "}, {"sha": "14a30023560fd6e780605dc1d649112f8e66408e", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=bad62dcb04d78c53911dc464663c04b47c5215ac", "patch": "@@ -149,21 +149,23 @@ fn classify(e: @expr,\n \n fn lookup_const(tcx: ty::ctxt, e: @expr) -> Option<@expr> {\n     match tcx.def_map.find(e.id) {\n-        Some(ast::def_const(def_id)) => {\n-            if ast_util::is_local(def_id) {\n-                match tcx.items.find(def_id.node) {\n-                    None => None,\n-                    Some(ast_map::node_item(it, _)) => match it.node {\n-                        item_const(_, const_expr) => Some(const_expr),\n-                        _ => None\n-                    },\n-                    Some(_) => None\n-                }\n-            }\n-            else { None }\n+        Some(ast::def_const(def_id)) => lookup_const_by_id(tcx, def_id),\n+        _ => None\n+    }\n+}\n+\n+fn lookup_const_by_id(tcx: ty::ctxt, def_id: ast::def_id) -> Option<@expr> {\n+    if ast_util::is_local(def_id) {\n+        match tcx.items.find(def_id.node) {\n+            None => None,\n+            Some(ast_map::node_item(it, _)) => match it.node {\n+                item_const(_, const_expr) => Some(const_expr),\n+                _ => None\n+            },\n+            Some(_) => None\n         }\n-        Some(_) => None,\n-        None => None\n+    } else {\n+        None\n     }\n }\n "}, {"sha": "a9b2864e64200d1d1868b75546a6c73e18857708", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=bad62dcb04d78c53911dc464663c04b47c5215ac", "patch": "@@ -7,7 +7,8 @@ use syntax::codemap::span;\n use std::map::HashMap;\n \n export pat_binding_ids, pat_bindings, pat_id_map, PatIdMap;\n-export pat_is_variant_or_struct, pat_is_binding_or_wild;\n+export pat_is_variant_or_struct, pat_is_binding, pat_is_binding_or_wild;\n+export pat_is_const;\n \n type PatIdMap = std::map::HashMap<ident, node_id>;\n \n@@ -33,9 +34,31 @@ fn pat_is_variant_or_struct(dm: resolve::DefMap, pat: @pat) -> bool {\n     }\n }\n \n+fn pat_is_const(dm: resolve::DefMap, pat: &pat) -> bool {\n+    match pat.node {\n+        pat_ident(_, _, None) => {\n+            match dm.find(pat.id) {\n+                Some(def_const(*)) => true,\n+                _ => false\n+            }\n+        }\n+        _ => false\n+    }\n+}\n+\n+fn pat_is_binding(dm: resolve::DefMap, pat: @pat) -> bool {\n+    match pat.node {\n+        pat_ident(*) => {\n+            !pat_is_variant_or_struct(dm, pat) &&\n+            !pat_is_const(dm, pat)\n+        }\n+        _ => false\n+    }\n+}\n+\n fn pat_is_binding_or_wild(dm: resolve::DefMap, pat: @pat) -> bool {\n     match pat.node {\n-        pat_ident(*) => !pat_is_variant_or_struct(dm, pat),\n+        pat_ident(*) => pat_is_binding(dm, pat),\n         pat_wild => true,\n         _ => false\n     }\n@@ -45,8 +68,7 @@ fn pat_bindings(dm: resolve::DefMap, pat: @pat,\n                 it: fn(binding_mode, node_id, span, @path)) {\n     do walk_pat(pat) |p| {\n         match p.node {\n-          pat_ident(binding_mode, pth, _)\n-                if !pat_is_variant_or_struct(dm, p) => {\n+          pat_ident(binding_mode, pth, _) if pat_is_binding(dm, p) => {\n             it(binding_mode, p.id, p.span, pth);\n           }\n           _ => {}"}, {"sha": "6b5f1c33e6fc8b96652b1d064e1d655ca79b758b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=bad62dcb04d78c53911dc464663c04b47c5215ac", "patch": "@@ -310,7 +310,7 @@ impl AllowCapturingSelfFlag : cmp::Eq {\n \n enum BareIdentifierPatternResolution {\n     FoundStructOrEnumVariant(def),\n-    FoundConst,\n+    FoundConst(def),\n     BareIdentifierPatternUnresolved\n }\n \n@@ -4308,11 +4308,17 @@ impl Resolver {\n                                                         self.session\n                                                         .str_of(ident)));\n                         }\n-                        FoundConst => {\n+                        FoundConst(def) if mode == RefutableMode => {\n+                            debug!(\"(resolving pattern) resolving `%s` to \\\n+                                    constant\",\n+                                    self.session.str_of(ident));\n+\n+                            self.record_def(pattern.id, def);\n+                        }\n+                        FoundConst(_) => {\n                             self.session.span_err(pattern.span,\n-                                                  ~\"pattern variable \\\n-                                                   conflicts with a constant \\\n-                                                   in scope\");\n+                                                  ~\"only refutable patterns \\\n+                                                    allowed here\");\n                         }\n                         BareIdentifierPatternUnresolved => {\n                             debug!(\"(resolving pattern) binding `%s`\",\n@@ -4465,8 +4471,8 @@ impl Resolver {\n                             def @ def_variant(*) | def @ def_class(*) => {\n                                 return FoundStructOrEnumVariant(def);\n                             }\n-                            def_const(*) => {\n-                                return FoundConst;\n+                            def @ def_const(*) => {\n+                                return FoundConst(def);\n                             }\n                             _ => {\n                                 return BareIdentifierPatternUnresolved;"}, {"sha": "a7d29ac09c77deaa8d57ecbb44ccb6207f76c3c2", "filename": "src/librustc/middle/trans/alt.rs", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs?ref=bad62dcb04d78c53911dc464663c04b47c5215ac", "patch": "@@ -158,7 +158,8 @@ fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export.\n // expression.\n enum Lit {\n     UnitLikeStructLit(ast::node_id),    // the node ID of the pattern\n-    ExprLit(@ast::expr)\n+    ExprLit(@ast::expr),\n+    ConstLit(ast::def_id),              // the def ID of the constant\n }\n \n // An option identifying a branch (either a literal, a enum variant or a\n@@ -168,11 +169,43 @@ enum Opt {\n     var(/* disr val */int, /* variant dids */{enm: def_id, var: def_id}),\n     range(@ast::expr, @ast::expr)\n }\n+\n fn opt_eq(tcx: ty::ctxt, a: &Opt, b: &Opt) -> bool {\n     match (*a, *b) {\n-      (lit(ExprLit(a)), lit(ExprLit(b))) =>\n-            const_eval::compare_lit_exprs(tcx, a, b) == 0,\n-      (lit(UnitLikeStructLit(a)), lit(UnitLikeStructLit(b))) => a == b,\n+      (lit(a), lit(b)) => {\n+        match (a, b) {\n+            (UnitLikeStructLit(a), UnitLikeStructLit(b)) => a == b,\n+            _ => {\n+                let a_expr;\n+                match a {\n+                    ExprLit(existing_a_expr) => a_expr = existing_a_expr,\n+                    ConstLit(a_const) => {\n+                        let e = const_eval::lookup_const_by_id(tcx, a_const);\n+                        a_expr = e.get();\n+                    }\n+                    UnitLikeStructLit(_) => {\n+                        fail ~\"UnitLikeStructLit should have been handled \\\n+                               above\"\n+                    }\n+                }\n+\n+                let b_expr;\n+                match b {\n+                    ExprLit(existing_b_expr) => b_expr = existing_b_expr,\n+                    ConstLit(b_const) => {\n+                        let e = const_eval::lookup_const_by_id(tcx, b_const);\n+                        b_expr = e.get();\n+                    }\n+                    UnitLikeStructLit(_) => {\n+                        fail ~\"UnitLikeStructLit should have been handled \\\n+                               above\"\n+                    }\n+                }\n+\n+                const_eval::compare_lit_exprs(tcx, a_expr, b_expr) == 0\n+            }\n+        }\n+      }\n       (range(a1, a2), range(b1, b2)) => {\n         const_eval::compare_lit_exprs(tcx, a1, b1) == 0 &&\n         const_eval::compare_lit_exprs(tcx, a2, b2) == 0\n@@ -200,6 +233,10 @@ fn trans_opt(bcx: block, o: &Opt) -> opt_result {\n             let datumblock = datum::scratch_datum(bcx, struct_ty, true);\n             return single_result(datumblock.to_result(bcx));\n         }\n+        lit(ConstLit(lit_id)) => {\n+            let llval = consts::get_const_val(bcx.ccx(), lit_id);\n+            return single_result(rslt(bcx, llval));\n+        }\n         var(disr_val, _) => {\n             return single_result(rslt(bcx, C_int(ccx, disr_val)));\n         }\n@@ -353,7 +390,7 @@ fn enter_match(bcx: block, dm: DefMap, m: &[@Match/&r],\n                 let self = br.pats[col];\n                 match self.node {\n                     ast::pat_ident(_, path, None) => {\n-                        if !pat_is_variant_or_struct(dm, self) {\n+                        if pat_is_binding(dm, self) {\n                             let binding_info =\n                                 br.data.bindings_map.get(path_to_ident(path));\n                             Store(bcx, val, binding_info.llmatch);\n@@ -388,8 +425,7 @@ fn enter_default(bcx: block, dm: DefMap, m: &[@Match/&r],\n         match p.node {\n           ast::pat_wild | ast::pat_rec(_, _) | ast::pat_tup(_) |\n           ast::pat_struct(*) => Some(~[]),\n-          ast::pat_ident(_, _, None)\n-                if !pat_is_variant_or_struct(dm, p) => Some(~[]),\n+          ast::pat_ident(_, _, None) if pat_is_binding(dm, p) => Some(~[]),\n           _ => None\n         }\n     }\n@@ -451,6 +487,15 @@ fn enter_opt(bcx: block, m: &[@Match/&r], opt: &Opt, col: uint,\n                     None\n                 }\n             }\n+            ast::pat_ident(_, _, None) if pat_is_const(tcx.def_map, p) => {\n+                let const_def = tcx.def_map.get(p.id);\n+                let const_def_id = ast_util::def_id_of_def(const_def);\n+                if opt_eq(tcx, &lit(ConstLit(const_def_id)), opt) {\n+                    Some(~[])\n+                } else {\n+                    None\n+                }\n+            }\n             ast::pat_lit(l) => {\n                 if opt_eq(tcx, &lit(ExprLit(l)), opt) {Some(~[])} else {None}\n             }\n@@ -675,6 +720,10 @@ fn get_options(ccx: @crate_ctxt, m: &[@Match], col: uint) -> ~[Opt] {\n                         add_to_set(ccx.tcx, &found,\n                                    lit(UnitLikeStructLit(cur.id)));\n                     }\n+                    Some(ast::def_const(const_did)) => {\n+                        add_to_set(ccx.tcx, &found,\n+                                   lit(ConstLit(const_did)));\n+                    }\n                     _ => {}\n                 }\n             }"}, {"sha": "dcf5cee952f2979c19190f770759f3ccdf60ea07", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=bad62dcb04d78c53911dc464663c04b47c5215ac", "patch": "@@ -95,6 +95,22 @@ fn const_autoderef(cx: @crate_ctxt, ty: ty::t, v: ValueRef)\n     }\n }\n \n+fn get_const_val(cx: @crate_ctxt, def_id: ast::def_id) -> ValueRef {\n+    if !ast_util::is_local(def_id) {\n+        cx.tcx.sess.bug(~\"cross-crate constants\");\n+    }\n+    if !cx.const_values.contains_key(def_id.node) {\n+        match cx.tcx.items.get(def_id.node) {\n+            ast_map::node_item(@{\n+                node: ast::item_const(_, subexpr), _\n+            }, _) => {\n+                trans_const(cx, subexpr, def_id.node);\n+            }\n+            _ => cx.tcx.sess.bug(~\"expected a const to be an item\")\n+        }\n+    }\n+    cx.const_values.get(def_id.node)\n+}\n \n fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n     let _icx = cx.insn_ctxt(\"const_expr\");\n@@ -359,18 +375,7 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n               C_struct(~[f, C_null(T_opaque_box_ptr(cx))])\n           }\n           Some(ast::def_const(def_id)) => {\n-            assert ast_util::is_local(def_id);\n-            if ! cx.const_values.contains_key(def_id.node) {\n-                match cx.tcx.items.get(def_id.node) {\n-                    ast_map::node_item(@{\n-                        node: ast::item_const(_, subexpr), _\n-                    }, _) => {\n-                        trans_const(cx, subexpr, def_id.node);\n-                    }\n-                    _ => cx.sess.span_bug(e.span, ~\"expected item\")\n-                }\n-            }\n-            cx.const_values.get(def_id.node)\n+            get_const_val(cx, def_id)\n           }\n           _ => cx.sess.span_bug(e.span, ~\"expected a const or fn def\")\n         }"}, {"sha": "970f0670e8646f1a78b9bb0d8217d984569963ed", "filename": "src/librustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=bad62dcb04d78c53911dc464663c04b47c5215ac", "patch": "@@ -389,8 +389,7 @@ fn check_fn(ccx: @crate_ctxt,\n         let visit_pat = fn@(p: @ast::pat, &&e: (), v: visit::vt<()>) {\n             match p.node {\n               ast::pat_ident(_, path, _)\n-                  if !pat_util::pat_is_variant_or_struct(fcx.ccx.tcx.def_map,\n-                                                         p) => {\n+                  if pat_util::pat_is_binding(fcx.ccx.tcx.def_map, p) => {\n                 assign(p.span, p.id, None);\n                 debug!(\"Pattern binding %s is assigned to %s\",\n                        tcx.sess.str_of(path.idents[0]),"}, {"sha": "6131fb531249b04c1496736d539657b94cbe8278", "filename": "src/librustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=bad62dcb04d78c53911dc464663c04b47c5215ac", "patch": "@@ -1,6 +1,6 @@\n use syntax::print::pprust;\n use syntax::ast_util::{walk_pat};\n-use pat_util::{pat_is_variant_or_struct};\n+use pat_util::{pat_is_binding, pat_is_const, pat_is_variant_or_struct};\n \n fn check_alt(fcx: @fn_ctxt,\n              expr: @ast::expr,\n@@ -74,7 +74,7 @@ fn check_legality_of_move_bindings(fcx: @fn_ctxt,\n     if !any_by_move { return; } // pointless micro-optimization\n     for pats.each |pat| {\n         do walk_pat(*pat) |p| {\n-            if !pat_is_variant_or_struct(def_map, p) {\n+            if pat_is_binding(def_map, p) {\n                 match p.node {\n                     ast::pat_ident(ast::bind_by_move, _, sub) => {\n                         // check legality of moving out of the enum\n@@ -391,8 +391,12 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n         }\n         fcx.write_ty(pat.id, b_ty);\n       }\n-      ast::pat_ident(bm, name, sub)\n-            if !pat_is_variant_or_struct(tcx.def_map, pat) => {\n+      ast::pat_ident(*) if pat_is_const(tcx.def_map, pat) => {\n+        let const_did = ast_util::def_id_of_def(tcx.def_map.get(pat.id));\n+        let const_tpt = ty::lookup_item_type(tcx, const_did);\n+        fcx.write_ty(pat.id, const_tpt.ty);\n+      }\n+      ast::pat_ident(bm, name, sub) if pat_is_binding(tcx.def_map, pat) => {\n         let vid = lookup_local(fcx, pat.span, pat.id);\n         let mut typ = ty::mk_var(tcx, vid);\n "}, {"sha": "9ed1411e88ec1b7a2d56ccede652fed4f1c1a64b", "filename": "src/test/run-pass/consts-in-patterns.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad62dcb04d78c53911dc464663c04b47c5215ac/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs?ref=bad62dcb04d78c53911dc464663c04b47c5215ac", "patch": "@@ -0,0 +1,13 @@\n+const FOO: int = 10;\n+const BAR: int = 3;\n+\n+fn main() {\n+    let x: int = 3;\n+    let y = match x {\n+        FOO => 1,\n+        BAR => 2,\n+        _ => 3\n+    };\n+    assert y == 2;\n+}\n+"}]}