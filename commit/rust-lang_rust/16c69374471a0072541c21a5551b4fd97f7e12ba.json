{"sha": "16c69374471a0072541c21a5551b4fd97f7e12ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YzY5Mzc0NDcxYTAwNzI1NDFjMjFhNTU1MWI0ZmQ5N2Y3ZTEyYmE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-25T22:38:33Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T17:28:10Z"}, "message": "Lower impl trait to variables, move away from using placeholders where they don't belong", "tree": {"sha": "72564c6b99eb6f1aaf44f740d654b1725daed0c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72564c6b99eb6f1aaf44f740d654b1725daed0c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16c69374471a0072541c21a5551b4fd97f7e12ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16c69374471a0072541c21a5551b4fd97f7e12ba", "html_url": "https://github.com/rust-lang/rust/commit/16c69374471a0072541c21a5551b4fd97f7e12ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16c69374471a0072541c21a5551b4fd97f7e12ba/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93aa166748eef9560df2435391dc3f3b53f8262d", "url": "https://api.github.com/repos/rust-lang/rust/commits/93aa166748eef9560df2435391dc3f3b53f8262d", "html_url": "https://github.com/rust-lang/rust/commit/93aa166748eef9560df2435391dc3f3b53f8262d"}], "stats": {"total": 408, "additions": 220, "deletions": 188}, "files": [{"sha": "fea122a8b960f70adb5774e79c14e47a13de558e", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=16c69374471a0072541c21a5551b4fd97f7e12ba", "patch": "@@ -12,8 +12,8 @@ use ra_prof::profile;\n use crate::{\n     method_resolution::CrateImplBlocks,\n     traits::{chalk, AssocTyValue, Impl},\n-    CallableDef, FnSig, GenericPredicate, InferenceResult, Substs, TraitRef, Ty, TyDefId, TypeCtor,\n-    ValueTyDefId,\n+    CallableDef, PolyFnSig, GenericPredicate, InferenceResult, Substs, TraitRef, Ty, TyDefId, TypeCtor,\n+    ValueTyDefId, Binders,\n };\n \n #[salsa::query_group(HirDatabaseStorage)]\n@@ -27,14 +27,14 @@ pub trait HirDatabase: DefDatabase {\n \n     #[salsa::invoke(crate::lower::ty_query)]\n     #[salsa::cycle(crate::lower::ty_recover)]\n-    fn ty(&self, def: TyDefId) -> Ty;\n+    fn ty(&self, def: TyDefId) -> Binders<Ty>;\n \n     #[salsa::invoke(crate::lower::value_ty_query)]\n-    fn value_ty(&self, def: ValueTyDefId) -> Ty;\n+    fn value_ty(&self, def: ValueTyDefId) -> Binders<Ty>;\n \n     #[salsa::invoke(crate::lower::impl_self_ty_query)]\n     #[salsa::cycle(crate::lower::impl_self_ty_recover)]\n-    fn impl_self_ty(&self, def: ImplId) -> Ty;\n+    fn impl_self_ty(&self, def: ImplId) -> Binders<Ty>;\n \n     #[salsa::invoke(crate::lower::impl_trait_query)]\n     fn impl_trait(&self, def: ImplId) -> Option<TraitRef>;\n@@ -43,7 +43,7 @@ pub trait HirDatabase: DefDatabase {\n     fn field_types(&self, var: VariantId) -> Arc<ArenaMap<LocalStructFieldId, Ty>>;\n \n     #[salsa::invoke(crate::callable_item_sig)]\n-    fn callable_item_signature(&self, def: CallableDef) -> FnSig;\n+    fn callable_item_signature(&self, def: CallableDef) -> PolyFnSig;\n \n     #[salsa::invoke(crate::lower::generic_predicates_for_param_query)]\n     #[salsa::cycle(crate::lower::generic_predicates_for_param_recover)]"}, {"sha": "f7ef09f0eea7860fb4ad5fca531dc7bde853d3e5", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=16c69374471a0072541c21a5551b4fd97f7e12ba", "patch": "@@ -279,11 +279,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         impl_trait_mode: ImplTraitLoweringMode,\n     ) -> Ty {\n         // FIXME use right resolver for block\n-        let ctx = crate::lower::TyLoweringContext {\n-            db: self.db,\n-            resolver: &self.resolver,\n-            impl_trait_mode,\n-        };\n+        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver).with_impl_trait_mode(impl_trait_mode);\n         let ty = Ty::from_hir(&ctx, type_ref);\n         let ty = self.insert_type_vars(ty);\n         self.normalize_associated_types_in(ty)\n@@ -457,24 +453,20 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             None => return (Ty::Unknown, None),\n         };\n         let resolver = &self.resolver;\n-        let ctx = crate::lower::TyLoweringContext {\n-            db: self.db,\n-            resolver: &self.resolver,\n-            impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-        };\n+        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver);\n         // FIXME: this should resolve assoc items as well, see this example:\n         // https://play.rust-lang.org/?gist=087992e9e22495446c01c0d4e2d69521\n         match resolver.resolve_path_in_type_ns_fully(self.db, path.mod_path()) {\n             Some(TypeNs::AdtId(AdtId::StructId(strukt))) => {\n                 let substs = Ty::substs_from_path(&ctx, path, strukt.into());\n                 let ty = self.db.ty(strukt.into());\n-                let ty = self.insert_type_vars(ty.apply_substs(substs));\n+                let ty = self.insert_type_vars(ty.subst(&substs));\n                 (ty, Some(strukt.into()))\n             }\n             Some(TypeNs::EnumVariantId(var)) => {\n                 let substs = Ty::substs_from_path(&ctx, path, var.into());\n                 let ty = self.db.ty(var.parent.into());\n-                let ty = self.insert_type_vars(ty.apply_substs(substs));\n+                let ty = self.insert_type_vars(ty.subst(&substs));\n                 (ty, Some(var.into()))\n             }\n             Some(_) | None => (Ty::Unknown, None),\n@@ -492,7 +484,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n             self.infer_pat(*pat, &ty, BindingMode::default());\n         }\n-        let return_ty = self.make_ty_with_mode(&data.ret_type, ImplTraitLoweringMode::Placeholder);\n+        let return_ty = self.make_ty_with_mode(&data.ret_type, ImplTraitLoweringMode::Variable);\n         self.return_ty = self.insert_vars_for_impl_trait(return_ty);\n     }\n "}, {"sha": "e1fdb356df8360034a14750fe7ab671677e9bae8", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=16c69374471a0072541c21a5551b4fd97f7e12ba", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     traits::InEnvironment,\n     utils::{generics, variant_data, Generics},\n     ApplicationTy, CallableDef, InferTy, IntTy, Mutability, Obligation, Substs, TraitRef, Ty,\n-    TypeCtor, TypeWalk, Uncertain,\n+    TypeCtor, TypeWalk, Uncertain, Binders,\n };\n \n use super::{BindingMode, Expectation, InferenceContext, InferenceDiagnostic, TypeMismatch};\n@@ -588,10 +588,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.write_method_resolution(tgt_expr, func);\n                 (ty, self.db.value_ty(func.into()), Some(generics(self.db, func.into())))\n             }\n-            None => (receiver_ty, Ty::Unknown, None),\n+            None => (receiver_ty, Binders::new(0, Ty::Unknown), None),\n         };\n         let substs = self.substs_for_method_call(def_generics, generic_args, &derefed_receiver_ty);\n-        let method_ty = method_ty.apply_substs(substs);\n+        let method_ty = method_ty.subst(&substs);\n         let method_ty = self.insert_type_vars(method_ty);\n         self.register_obligations_for_call(&method_ty);\n         let (expected_receiver_ty, param_tys, ret_ty) = match method_ty.callable_sig(self.db) {"}, {"sha": "39aa346eb32085bddabf91b025598b60bac9b187", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 17, "deletions": 38, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=16c69374471a0072541c21a5551b4fd97f7e12ba", "patch": "@@ -10,8 +10,8 @@ use hir_def::{\n use hir_expand::name::Name;\n \n use crate::{\n-    db::HirDatabase, lower::ImplTraitLoweringMode, method_resolution, Substs, Ty, TypeWalk,\n-    ValueTyDefId,\n+    db::HirDatabase, method_resolution, Substs, Ty,\n+    ValueTyDefId\n };\n \n use super::{ExprOrPatId, InferenceContext, TraitRef};\n@@ -42,11 +42,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             let ty = self.make_ty(type_ref);\n             let remaining_segments_for_ty = path.segments().take(path.segments().len() - 1);\n-            let ctx = crate::lower::TyLoweringContext {\n-                db: self.db,\n-                resolver: &resolver,\n-                impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-            };\n+            let ctx = crate::lower::TyLoweringContext::new(self.db, &resolver);\n             let ty = Ty::from_type_relative_path(&ctx, ty, remaining_segments_for_ty);\n             self.resolve_ty_assoc_item(\n                 ty,\n@@ -77,17 +73,16 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             ValueNs::EnumVariantId(it) => it.into(),\n         };\n \n-        let mut ty = self.db.value_ty(typable);\n-        if let Some(self_subst) = self_subst {\n-            ty = ty.subst(&self_subst);\n-        }\n-        let ctx = crate::lower::TyLoweringContext {\n-            db: self.db,\n-            resolver: &self.resolver,\n-            impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-        };\n+        let ty = self.db.value_ty(typable);\n+        // self_subst is just for the parent\n+        let parent_substs = self_subst.unwrap_or_else(Substs::empty);\n+        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver);\n         let substs = Ty::substs_from_path(&ctx, path, typable);\n-        let ty = ty.subst(&substs);\n+        let full_substs = Substs::builder(substs.len())\n+            .use_parent_substs(&parent_substs)\n+            .fill(substs.0[parent_substs.len()..].iter().cloned())\n+            .build();\n+        let ty = ty.subst(&full_substs);\n         Some(ty)\n     }\n \n@@ -111,11 +106,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             (TypeNs::TraitId(trait_), true) => {\n                 let segment =\n                     remaining_segments.last().expect(\"there should be at least one segment here\");\n-                let ctx = crate::lower::TyLoweringContext {\n-                    db: self.db,\n-                    resolver: &self.resolver,\n-                    impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-                };\n+                let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver);\n                 let trait_ref =\n                     TraitRef::from_resolved_path(&ctx, trait_.into(), resolved_segment, None);\n                 self.resolve_trait_assoc_item(trait_ref, segment, id)\n@@ -127,11 +118,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 // as Iterator>::Item::default`)\n                 let remaining_segments_for_ty =\n                     remaining_segments.take(remaining_segments.len() - 1);\n-                let ctx = crate::lower::TyLoweringContext {\n-                    db: self.db,\n-                    resolver: &self.resolver,\n-                    impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-                };\n+                let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver);\n                 let ty = Ty::from_partly_resolved_hir_path(\n                     &ctx,\n                     def,\n@@ -235,28 +222,20 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             .fill(iter::repeat_with(|| self.table.new_type_var()))\n                             .build();\n                         let impl_self_ty = self.db.impl_self_ty(impl_id).subst(&impl_substs);\n-                        let substs = Substs::build_for_def(self.db, item)\n-                            .use_parent_substs(&impl_substs)\n-                            .fill_with_params()\n-                            .build();\n                         self.unify(&impl_self_ty, &ty);\n-                        Some(substs)\n+                        Some(impl_substs)\n                     }\n                     AssocContainerId::TraitId(trait_) => {\n                         // we're picking this method\n                         let trait_substs = Substs::build_for_def(self.db, trait_)\n                             .push(ty.clone())\n                             .fill(std::iter::repeat_with(|| self.table.new_type_var()))\n                             .build();\n-                        let substs = Substs::build_for_def(self.db, item)\n-                            .use_parent_substs(&trait_substs)\n-                            .fill_with_params()\n-                            .build();\n                         self.obligations.push(super::Obligation::Trait(TraitRef {\n                             trait_,\n-                            substs: trait_substs,\n+                            substs: trait_substs.clone(),\n                         }));\n-                        Some(substs)\n+                        Some(trait_substs)\n                     }\n                     AssocContainerId::ContainerId(_) => None,\n                 };"}, {"sha": "79084bb3e0e1a4ce7c7c40859c963b62218160d4", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=16c69374471a0072541c21a5551b4fd97f7e12ba", "patch": "@@ -453,6 +453,30 @@ impl Deref for Substs {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub struct Binders<T> {\n+    pub num_binders: usize,\n+    pub value: T,\n+}\n+\n+impl<T> Binders<T> {\n+    pub fn new(num_binders: usize, value: T) -> Self { Self { num_binders, value } }\n+}\n+\n+impl<T: TypeWalk> Binders<T> {\n+    /// Substitutes all variables.\n+    pub fn subst(self, subst: &Substs) -> T {\n+        assert_eq!(subst.len(), self.num_binders);\n+        self.value.subst_bound_vars(subst)\n+    }\n+\n+    /// Substitutes just a prefix of the variables (shifting the rest).\n+    pub fn subst_prefix(self, subst: &Substs) -> Binders<T> {\n+        assert!(subst.len() < self.num_binders);\n+        Binders::new(self.num_binders - subst.len(), self.value.subst_bound_vars(subst))\n+    }\n+}\n+\n /// A trait with type parameters. This includes the `Self`, so this represents a concrete type implementing the trait.\n /// Name to be bikeshedded: TraitBound? TraitImplements?\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n@@ -553,6 +577,9 @@ pub struct FnSig {\n     params_and_return: Arc<[Ty]>,\n }\n \n+/// A polymorphic function signature.\n+pub type PolyFnSig = Binders<FnSig>;\n+\n impl FnSig {\n     pub fn from_params_and_return(mut params: Vec<Ty>, ret: Ty) -> FnSig {\n         params.push(ret);\n@@ -757,6 +784,9 @@ pub trait TypeWalk {\n                 &mut Ty::Bound(idx) => {\n                     if idx as usize >= binders && (idx as usize - binders) < substs.len() {\n                         *ty = substs.0[idx as usize - binders].clone();\n+                    } else if idx as usize >= binders + substs.len() {\n+                        // shift free binders\n+                        *ty = Ty::Bound(idx - substs.len() as u32);\n                     }\n                 }\n                 _ => {}\n@@ -903,8 +933,8 @@ impl HirDisplay for ApplicationTy {\n                     write!(f, \">\")?;\n                 }\n                 write!(f, \"(\")?;\n-                f.write_joined(sig.params(), \", \")?;\n-                write!(f, \") -> {}\", sig.ret().display(f.db))?;\n+                f.write_joined(sig.value.params(), \", \")?;\n+                write!(f, \") -> {}\", sig.value.ret().display(f.db))?;\n             }\n             TypeCtor::Adt(def_id) => {\n                 let name = match def_id {"}, {"sha": "006101f2f7c8e73347e374941a63dd4db8a95273", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 141, "deletions": 122, "changes": 263, "blob_url": "https://github.com/rust-lang/rust/blob/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=16c69374471a0072541c21a5551b4fd97f7e12ba", "patch": "@@ -28,32 +28,62 @@ use crate::{\n         variant_data,\n     },\n     FnSig, GenericPredicate, ProjectionPredicate, ProjectionTy, Substs, TraitEnvironment, TraitRef,\n-    Ty, TypeCtor, TypeWalk,\n+    Ty, TypeCtor, PolyFnSig, Binders,\n };\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n pub struct TyLoweringContext<'a, DB: HirDatabase> {\n     pub db: &'a DB,\n     pub resolver: &'a Resolver,\n+    /// Note: Conceptually, it's thinkable that we could be in a location where\n+    /// some type params are quantified universally (and should be represented\n+    /// as placeholders), and others are quantified existentially (and should be\n+    /// converted to variables). I think in practice, this isn't possible\n+    /// currently, so this should be fine for now.\n+    pub type_param_mode: TypeParamLoweringMode,\n     pub impl_trait_mode: ImplTraitLoweringMode,\n+    pub impl_trait_counter: std::cell::Cell<u16>,\n }\n \n-#[derive(Clone, Debug)]\n+impl<'a, DB: HirDatabase> TyLoweringContext<'a, DB> {\n+    pub fn new(db: &'a DB, resolver: &'a Resolver) -> Self {\n+        let impl_trait_counter = std::cell::Cell::new(0);\n+        let impl_trait_mode = ImplTraitLoweringMode::Disallowed;\n+        let type_param_mode = TypeParamLoweringMode::Placeholder;\n+        Self { db, resolver, impl_trait_mode, impl_trait_counter, type_param_mode }\n+    }\n+\n+    pub fn with_impl_trait_mode(self, impl_trait_mode: ImplTraitLoweringMode) -> Self {\n+        Self { impl_trait_mode, ..self }\n+    }\n+\n+    pub fn with_type_param_mode(self, type_param_mode: TypeParamLoweringMode) -> Self {\n+        Self { type_param_mode, ..self }\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n pub enum ImplTraitLoweringMode {\n     /// `impl Trait` gets lowered into an opaque type that doesn't unify with\n     /// anything except itself. This is used in places where values flow 'out',\n     /// i.e. for arguments of the function we're currently checking, and return\n     /// types of functions we're calling.\n     Opaque,\n-    /// `impl Trait` gets lowered into a placeholder that can unify with some\n+    /// `impl Trait` gets lowered into a variable that can unify with some\n     /// type. This is used in places where values flow 'in', i.e. for arguments\n     /// of functions we're calling, and the return type of the function we're\n     /// currently checking.\n-    Placeholder,\n+    Variable,\n     /// `impl Trait` is disallowed and will be an error.\n     Disallowed,\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub enum TypeParamLoweringMode {\n+    Placeholder,\n+    Variable,\n+}\n+\n impl Ty {\n     pub fn from_hir(ctx: &TyLoweringContext<'_, impl HirDatabase>, type_ref: &TypeRef) -> Self {\n         match type_ref {\n@@ -101,17 +131,25 @@ impl Ty {\n                         let self_ty = Ty::Bound(0);\n                         let predicates = bounds\n                             .iter()\n-                            .flat_map(|b| GenericPredicate::from_type_bound(ctx, b, self_ty.clone()))\n+                            .flat_map(|b| {\n+                                GenericPredicate::from_type_bound(ctx, b, self_ty.clone())\n+                            })\n                             .collect();\n                         Ty::Opaque(predicates)\n-                    },\n-                    ImplTraitLoweringMode::Placeholder => {\n-                        todo!()\n-                    },\n+                    }\n+                    ImplTraitLoweringMode::Variable => {\n+                        let idx = ctx.impl_trait_counter.get();\n+                        ctx.impl_trait_counter.set(idx + 1);\n+                        let generics =\n+                            generics(ctx.db, ctx.resolver.generic_def().expect(\"generics in scope\"));\n+                        let (self_params, list_params, impl_trait_params) = generics.provenance_split();\n+                        assert!((idx as usize) < impl_trait_params);\n+                        Ty::Bound(idx as u32 + self_params as u32 + list_params as u32)\n+                    }\n                     ImplTraitLoweringMode::Disallowed => {\n                         // FIXME: report error\n                         Ty::Unknown\n-                    },\n+                    }\n                 }\n             }\n             TypeRef::Error => Ty::Unknown,\n@@ -205,12 +243,31 @@ impl Ty {\n                 let generics =\n                     generics(ctx.db, ctx.resolver.generic_def().expect(\"generics in scope\"));\n                 let idx = generics.param_idx(param_id);\n-                // FIXME: maybe return name in resolution?\n-                let name = generics.param_name(param_id);\n-                Ty::Param { idx, name }\n+                match ctx.type_param_mode {\n+                    TypeParamLoweringMode::Placeholder => {\n+                        // FIXME: maybe return name in resolution?\n+                        let name = generics.param_name(param_id);\n+                        Ty::Param { idx, name }\n+                    },\n+                    TypeParamLoweringMode::Variable => Ty::Bound(idx),\n+                }\n             }\n-            TypeNs::SelfType(impl_id) => ctx.db.impl_self_ty(impl_id).clone(),\n-            TypeNs::AdtSelfType(adt) => ctx.db.ty(adt.into()),\n+            TypeNs::SelfType(impl_id) => {\n+                let generics = generics(ctx.db, impl_id.into());\n+                let substs = match ctx.type_param_mode {\n+                    TypeParamLoweringMode::Placeholder => Substs::identity(&generics),\n+                    TypeParamLoweringMode::Variable => Substs::bound_vars(&generics),\n+                };\n+                ctx.db.impl_self_ty(impl_id).subst(&substs)\n+            },\n+            TypeNs::AdtSelfType(adt) => {\n+                let generics = generics(ctx.db, adt.into());\n+                let substs = match ctx.type_param_mode {\n+                    TypeParamLoweringMode::Placeholder => Substs::identity(&generics),\n+                    TypeParamLoweringMode::Variable => Substs::bound_vars(&generics),\n+                };\n+                ctx.db.ty(adt.into()).subst(&substs)\n+            },\n \n             TypeNs::AdtId(it) => Ty::from_hir_path_inner(ctx, resolved_segment, it.into()),\n             TypeNs::BuiltinType(it) => Ty::from_hir_path_inner(ctx, resolved_segment, it.into()),\n@@ -341,7 +398,7 @@ pub(super) fn substs_from_path_segment(\n         // Self type as an implicit first type parameter, but it can't be\n         // actually provided in the type arguments\n         // (well, actually sometimes it can, in the form of type-relative paths: `<Foo as Default>::default()`)\n-        // TODO handle this using type param provenance\n+        // TODO handle this using type param provenance (if there's a self param, and not one provided, add unknown)\n         substs.push(Ty::Unknown);\n     }\n     if let Some(generic_args) = &segment.args_and_bindings {\n@@ -493,7 +550,7 @@ fn assoc_type_bindings_from_type_bound<'a>(\n }\n \n /// Build the signature of a callable item (function, struct or enum variant).\n-pub fn callable_item_sig(db: &impl HirDatabase, def: CallableDef) -> FnSig {\n+pub fn callable_item_sig(db: &impl HirDatabase, def: CallableDef) -> PolyFnSig {\n     match def {\n         CallableDef::FunctionId(f) => fn_sig_for_fn(db, f),\n         CallableDef::StructId(s) => fn_sig_for_struct_constructor(db, s),\n@@ -513,11 +570,7 @@ pub(crate) fn field_types_query(\n         VariantId::EnumVariantId(it) => it.parent.resolver(db),\n     };\n     let mut res = ArenaMap::default();\n-    let ctx = TyLoweringContext {\n-        db,\n-        resolver: &resolver,\n-        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-    };\n+    let ctx = TyLoweringContext::new(db, &resolver);\n     for (field_id, field_data) in var_data.fields().iter() {\n         res.insert(field_id, Ty::from_hir(&ctx, &field_data.type_ref))\n     }\n@@ -538,11 +591,7 @@ pub(crate) fn generic_predicates_for_param_query(\n     param_idx: u32,\n ) -> Arc<[GenericPredicate]> {\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext {\n-        db,\n-        resolver: &resolver,\n-        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-    };\n+    let ctx = TyLoweringContext::new(db, &resolver);\n     resolver\n         .where_predicates_in_scope()\n         // we have to filter out all other predicates *first*, before attempting to lower them\n@@ -562,8 +611,7 @@ pub(crate) fn generic_predicates_for_param_recover(\n \n impl TraitEnvironment {\n     pub fn lower(db: &impl HirDatabase, resolver: &Resolver) -> Arc<TraitEnvironment> {\n-        let ctx =\n-            TyLoweringContext { db, resolver, impl_trait_mode: ImplTraitLoweringMode::Disallowed };\n+        let ctx = TyLoweringContext::new(db, &resolver);\n         let predicates = resolver\n             .where_predicates_in_scope()\n             .flat_map(|pred| GenericPredicate::from_where_predicate(&ctx, pred))\n@@ -579,11 +627,7 @@ pub(crate) fn generic_predicates_query(\n     def: GenericDefId,\n ) -> Arc<[GenericPredicate]> {\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext {\n-        db,\n-        resolver: &resolver,\n-        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-    };\n+    let ctx = TyLoweringContext::new(db, &resolver);\n     resolver\n         .where_predicates_in_scope()\n         .flat_map(|pred| GenericPredicate::from_where_predicate(&ctx, pred))\n@@ -593,11 +637,7 @@ pub(crate) fn generic_predicates_query(\n /// Resolve the default type params from generics\n pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDefId) -> Substs {\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext {\n-        db,\n-        resolver: &resolver,\n-        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-    };\n+    let ctx = TyLoweringContext::new(db, &resolver);\n     let generic_params = generics(db, def.into());\n \n     let defaults = generic_params\n@@ -608,56 +648,46 @@ pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDefId) -\n     Substs(defaults)\n }\n \n-fn fn_sig_for_fn(db: &impl HirDatabase, def: FunctionId) -> FnSig {\n+fn fn_sig_for_fn(db: &impl HirDatabase, def: FunctionId) -> PolyFnSig {\n     let data = db.function_data(def);\n     let resolver = def.resolver(db);\n-    let ctx_params = TyLoweringContext {\n-        db,\n-        resolver: &resolver,\n-        impl_trait_mode: ImplTraitLoweringMode::Placeholder,\n-    };\n+    let ctx_params = TyLoweringContext::new(db, &resolver)\n+        .with_impl_trait_mode(ImplTraitLoweringMode::Variable)\n+        .with_type_param_mode(TypeParamLoweringMode::Variable);\n     let params = data.params.iter().map(|tr| Ty::from_hir(&ctx_params, tr)).collect::<Vec<_>>();\n-    let ctx_ret = TyLoweringContext {\n-        db,\n-        resolver: &resolver,\n-        impl_trait_mode: ImplTraitLoweringMode::Opaque,\n-    };\n+    let ctx_ret = ctx_params.with_impl_trait_mode(ImplTraitLoweringMode::Opaque);\n     let ret = Ty::from_hir(&ctx_ret, &data.ret_type);\n-    FnSig::from_params_and_return(params, ret)\n+    let generics = generics(db, def.into());\n+    let num_binders = generics.len();\n+    Binders::new(num_binders, FnSig::from_params_and_return(params, ret))\n }\n \n /// Build the declared type of a function. This should not need to look at the\n /// function body.\n-fn type_for_fn(db: &impl HirDatabase, def: FunctionId) -> Ty {\n+fn type_for_fn(db: &impl HirDatabase, def: FunctionId) -> Binders<Ty> {\n     let generics = generics(db, def.into());\n-    let substs = Substs::identity(&generics);\n-    Ty::apply(TypeCtor::FnDef(def.into()), substs)\n+    let substs = Substs::bound_vars(&generics);\n+    Binders::new(substs.len(), Ty::apply(TypeCtor::FnDef(def.into()), substs))\n }\n \n /// Build the declared type of a const.\n-fn type_for_const(db: &impl HirDatabase, def: ConstId) -> Ty {\n+fn type_for_const(db: &impl HirDatabase, def: ConstId) -> Binders<Ty> {\n     let data = db.const_data(def);\n+    let generics = generics(db, def.into());\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext {\n-        db,\n-        resolver: &resolver,\n-        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-    };\n+    let ctx = TyLoweringContext::new(db, &resolver)\n+        .with_type_param_mode(TypeParamLoweringMode::Variable);\n \n-    Ty::from_hir(&ctx, &data.type_ref)\n+    Binders::new(generics.len(), Ty::from_hir(&ctx, &data.type_ref))\n }\n \n /// Build the declared type of a static.\n-fn type_for_static(db: &impl HirDatabase, def: StaticId) -> Ty {\n+fn type_for_static(db: &impl HirDatabase, def: StaticId) -> Binders<Ty> {\n     let data = db.static_data(def);\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext {\n-        db,\n-        resolver: &resolver,\n-        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-    };\n+    let ctx = TyLoweringContext::new(db, &resolver);\n \n-    Ty::from_hir(&ctx, &data.type_ref)\n+    Binders::new(0, Ty::from_hir(&ctx, &data.type_ref))\n }\n \n /// Build the declared type of a static.\n@@ -671,79 +701,71 @@ fn type_for_builtin(def: BuiltinType) -> Ty {\n     })\n }\n \n-fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> FnSig {\n+fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> PolyFnSig {\n     let struct_data = db.struct_data(def.into());\n     let fields = struct_data.variant_data.fields();\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext {\n-        db,\n-        resolver: &resolver,\n-        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-    };\n+    let ctx = TyLoweringContext::new(db, &resolver)\n+        .with_type_param_mode(TypeParamLoweringMode::Variable);\n     let params =\n         fields.iter().map(|(_, field)| Ty::from_hir(&ctx, &field.type_ref)).collect::<Vec<_>>();\n     let ret = type_for_adt(db, def.into());\n-    FnSig::from_params_and_return(params, ret)\n+    Binders::new(ret.num_binders, FnSig::from_params_and_return(params, ret.value))\n }\n \n /// Build the type of a tuple struct constructor.\n-fn type_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> Ty {\n+fn type_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> Binders<Ty> {\n     let struct_data = db.struct_data(def.into());\n     if struct_data.variant_data.is_unit() {\n         return type_for_adt(db, def.into()); // Unit struct\n     }\n     let generics = generics(db, def.into());\n-    let substs = Substs::identity(&generics);\n-    Ty::apply(TypeCtor::FnDef(def.into()), substs)\n+    let substs = Substs::bound_vars(&generics);\n+    Binders::new(substs.len(), Ty::apply(TypeCtor::FnDef(def.into()), substs))\n }\n \n-fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId) -> FnSig {\n+fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId) -> PolyFnSig {\n     let enum_data = db.enum_data(def.parent);\n     let var_data = &enum_data.variants[def.local_id];\n     let fields = var_data.variant_data.fields();\n     let resolver = def.parent.resolver(db);\n-    let ctx = TyLoweringContext {\n-        db,\n-        resolver: &resolver,\n-        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-    };\n+    let ctx = TyLoweringContext::new(db, &resolver);\n     let params =\n         fields.iter().map(|(_, field)| Ty::from_hir(&ctx, &field.type_ref)).collect::<Vec<_>>();\n     let generics = generics(db, def.parent.into());\n-    let substs = Substs::identity(&generics);\n+    let substs = Substs::bound_vars(&generics);\n     let ret = type_for_adt(db, def.parent.into()).subst(&substs);\n-    FnSig::from_params_and_return(params, ret)\n+    let num_binders = generics.len();\n+    Binders::new(num_binders, FnSig::from_params_and_return(params, ret))\n }\n \n /// Build the type of a tuple enum variant constructor.\n-fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId) -> Ty {\n+fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId) -> Binders<Ty> {\n     let enum_data = db.enum_data(def.parent);\n     let var_data = &enum_data.variants[def.local_id].variant_data;\n     if var_data.is_unit() {\n         return type_for_adt(db, def.parent.into()); // Unit variant\n     }\n     let generics = generics(db, def.parent.into());\n-    let substs = Substs::identity(&generics);\n-    Ty::apply(TypeCtor::FnDef(EnumVariantId::from(def).into()), substs)\n+    let substs = Substs::bound_vars(&generics);\n+    Binders::new(substs.len(), Ty::apply(TypeCtor::FnDef(EnumVariantId::from(def).into()), substs))\n }\n \n-fn type_for_adt(db: &impl HirDatabase, adt: AdtId) -> Ty {\n+fn type_for_adt(db: &impl HirDatabase, adt: AdtId) -> Binders<Ty> {\n     let generics = generics(db, adt.into());\n-    Ty::apply(TypeCtor::Adt(adt), Substs::identity(&generics))\n+    let substs = Substs::bound_vars(&generics);\n+    Binders::new(substs.len(), Ty::apply(TypeCtor::Adt(adt), substs))\n }\n \n-fn type_for_type_alias(db: &impl HirDatabase, t: TypeAliasId) -> Ty {\n+fn type_for_type_alias(db: &impl HirDatabase, t: TypeAliasId) -> Binders<Ty> {\n     let generics = generics(db, t.into());\n     let resolver = t.resolver(db);\n-    let ctx = TyLoweringContext {\n-        db,\n-        resolver: &resolver,\n-        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-    };\n+    let ctx = TyLoweringContext::new(db, &resolver)\n+        .with_type_param_mode(TypeParamLoweringMode::Variable);\n     let type_ref = &db.type_alias_data(t).type_ref;\n-    let substs = Substs::identity(&generics);\n+    let substs = Substs::bound_vars(&generics);\n     let inner = Ty::from_hir(&ctx, type_ref.as_ref().unwrap_or(&TypeRef::Error));\n-    inner.subst(&substs)\n+    Binders::new(substs.len(), inner)\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -797,19 +819,20 @@ impl_froms!(ValueTyDefId: FunctionId, StructId, EnumVariantId, ConstId, StaticId\n /// `struct Foo(usize)`, we have two types: The type of the struct itself, and\n /// the constructor function `(usize) -> Foo` which lives in the values\n /// namespace.\n-pub(crate) fn ty_query(db: &impl HirDatabase, def: TyDefId) -> Ty {\n+pub(crate) fn ty_query(db: &impl HirDatabase, def: TyDefId) -> Binders<Ty> {\n     match def {\n-        TyDefId::BuiltinType(it) => type_for_builtin(it),\n+        TyDefId::BuiltinType(it) => Binders::new(0, type_for_builtin(it)),\n         TyDefId::AdtId(it) => type_for_adt(db, it),\n         TyDefId::TypeAliasId(it) => type_for_type_alias(db, it),\n     }\n }\n \n-pub(crate) fn ty_recover(_db: &impl HirDatabase, _cycle: &[String], _def: &TyDefId) -> Ty {\n-    Ty::Unknown\n+pub(crate) fn ty_recover(_db: &impl HirDatabase, _cycle: &[String], _def: &TyDefId) -> Binders<Ty> {\n+    // TODO still need correct number of binders here\n+    Binders::new(0, Ty::Unknown)\n }\n \n-pub(crate) fn value_ty_query(db: &impl HirDatabase, def: ValueTyDefId) -> Ty {\n+pub(crate) fn value_ty_query(db: &impl HirDatabase, def: ValueTyDefId) -> Binders<Ty> {\n     match def {\n         ValueTyDefId::FunctionId(it) => type_for_fn(db, it),\n         ValueTyDefId::StructId(it) => type_for_struct_constructor(db, it),\n@@ -819,34 +842,30 @@ pub(crate) fn value_ty_query(db: &impl HirDatabase, def: ValueTyDefId) -> Ty {\n     }\n }\n \n-pub(crate) fn impl_self_ty_query(db: &impl HirDatabase, impl_id: ImplId) -> Ty {\n+pub(crate) fn impl_self_ty_query(db: &impl HirDatabase, impl_id: ImplId) -> Binders<Ty> {\n     let impl_data = db.impl_data(impl_id);\n     let resolver = impl_id.resolver(db);\n-    let ctx = TyLoweringContext {\n-        db,\n-        resolver: &resolver,\n-        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-    };\n-    Ty::from_hir(&ctx, &impl_data.target_type)\n+    let generics = generics(db, impl_id.into());\n+    let ctx = TyLoweringContext::new(db, &resolver)\n+        .with_type_param_mode(TypeParamLoweringMode::Variable);\n+    Binders::new(generics.len(), Ty::from_hir(&ctx, &impl_data.target_type))\n }\n \n pub(crate) fn impl_self_ty_recover(\n-    _db: &impl HirDatabase,\n+    db: &impl HirDatabase,\n     _cycle: &[String],\n-    _impl_id: &ImplId,\n-) -> Ty {\n-    Ty::Unknown\n+    impl_id: &ImplId,\n+) -> Binders<Ty> {\n+    let generics = generics(db, (*impl_id).into());\n+    Binders::new(generics.len(), Ty::Unknown)\n }\n \n pub(crate) fn impl_trait_query(db: &impl HirDatabase, impl_id: ImplId) -> Option<TraitRef> {\n     let impl_data = db.impl_data(impl_id);\n     let resolver = impl_id.resolver(db);\n-    let ctx = TyLoweringContext {\n-        db,\n-        resolver: &resolver,\n-        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n-    };\n-    let self_ty = db.impl_self_ty(impl_id);\n+    let generics = generics(db, impl_id.into());\n+    let ctx = TyLoweringContext::new(db, &resolver);\n+    let self_ty = db.impl_self_ty(impl_id).subst(&Substs::identity(&generics));\n     let target_trait = impl_data.target_trait.as_ref()?;\n     TraitRef::from_hir(&ctx, target_trait, Some(self_ty.clone()))\n }"}, {"sha": "eab2149dc612651f704ee734deaa3fa0b7c45c1f", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=16c69374471a0072541c21a5551b4fd97f7e12ba", "patch": "@@ -65,7 +65,7 @@ impl CrateImplBlocks {\n                     }\n                     None => {\n                         let self_ty = db.impl_self_ty(impl_id);\n-                        if let Some(self_ty_fp) = TyFingerprint::for_impl(&self_ty) {\n+                        if let Some(self_ty_fp) = TyFingerprint::for_impl(&self_ty.value) {\n                             res.impls.entry(self_ty_fp).or_default().push(impl_id);\n                         }\n                     }\n@@ -496,7 +496,7 @@ fn transform_receiver_ty(\n         AssocContainerId::ContainerId(_) => unreachable!(),\n     };\n     let sig = db.callable_item_signature(function_id.into());\n-    Some(sig.params()[0].clone().subst(&substs))\n+    Some(sig.value.params()[0].clone().subst_bound_vars(&substs))\n }\n \n pub fn implements_trait("}, {"sha": "f1238506b838069d8c0cce0b01841e64fab70ec0", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=16c69374471a0072541c21a5551b4fd97f7e12ba", "patch": "@@ -1220,7 +1220,7 @@ fn test() {\n }\n \n #[test]\n-fn infer_impl_generics() {\n+fn infer_impl_generics_basic() {\n     assert_snapshot!(\n         infer(r#\"\n struct A<T1, T2> {"}, {"sha": "f116b95e7699e64eac3abeaa886d300a91a995be", "filename": "crates/ra_hir_ty/src/utils.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c69374471a0072541c21a5551b4fd97f7e12ba/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Futils.rs?ref=16c69374471a0072541c21a5551b4fd97f7e12ba", "patch": "@@ -5,7 +5,7 @@ use std::sync::Arc;\n use hir_def::{\n     adt::VariantData,\n     db::DefDatabase,\n-    generics::{GenericParams, TypeParamData},\n+    generics::{GenericParams, TypeParamData, TypeParamProvenance},\n     path::Path,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n@@ -117,19 +117,31 @@ impl Generics {\n     pub(crate) fn len(&self) -> usize {\n         self.len_split().0\n     }\n+\n     /// (total, parents, child)\n     pub(crate) fn len_split(&self) -> (usize, usize, usize) {\n         let parent = self.parent_generics.as_ref().map_or(0, |p| p.len());\n         let child = self.params.types.len();\n         (parent + child, parent, child)\n     }\n+\n+    /// (self, type param list, impl trait)\n+    pub(crate) fn provenance_split(&self) -> (usize, usize, usize) {\n+        let self_params = self.params.types.iter().filter(|(_, p)| p.provenance == TypeParamProvenance::TraitSelf).count();\n+        let list_params = self.params.types.iter().filter(|(_, p)| p.provenance == TypeParamProvenance::TypeParamList).count();\n+        let impl_trait_params = self.params.types.iter().filter(|(_, p)| p.provenance == TypeParamProvenance::ArgumentImplTrait).count();\n+        (self_params, list_params, impl_trait_params)\n+    }\n+\n     pub(crate) fn param_idx(&self, param: TypeParamId) -> u32 {\n         self.find_param(param).0\n     }\n+\n     pub(crate) fn param_name(&self, param: TypeParamId) -> Name {\n         // FIXME make this return Option\n         self.find_param(param).1.name.clone().unwrap_or_else(Name::missing)\n     }\n+\n     fn find_param(&self, param: TypeParamId) -> (u32, &TypeParamData) {\n         if param.parent == self.def {\n             let (idx, (_local_id, data)) = self"}]}