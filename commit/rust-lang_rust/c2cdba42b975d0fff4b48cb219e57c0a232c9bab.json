{"sha": "c2cdba42b975d0fff4b48cb219e57c0a232c9bab", "node_id": "C_kwDOAAsO6NoAKGMyY2RiYTQyYjk3NWQwZmZmNGI0OGNiMjE5ZTU3YzBhMjMyYzliYWI", "commit": {"author": {"name": "the8472", "email": "the8472@users.noreply.github.com", "date": "2021-09-21T20:53:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-21T20:53:58Z"}, "message": "Rollup merge of #88795 - FabianWolff:issue-88684, r=wesleywiser\n\nPrint a note if a character literal contains a variation selector\n\nFixes #88684.", "tree": {"sha": "6500849b7c67ffc3a80d45f2aca11d7e22c0996e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6500849b7c67ffc3a80d45f2aca11d7e22c0996e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2cdba42b975d0fff4b48cb219e57c0a232c9bab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhSkZmCRBK7hj4Ov3rIwAAXmQIAHv9gHkRccidNEXLX0qDgAWZ\nllJ2Fua7iidY8HVA+rqpgM7OZur1O2H1UAeQtngFr+fXVl5HzoBkACRD5In1LNju\nju7f+KorThtFmiHiHQIvSyCAy9URg6ctw+FiYhu9VDoycN11elgCrvK7cYovo+WR\nksi6rGccrlQ3SU8bG0ojiwuj5mE+rvy9UtiISj8K5TJ+5YeTT0kaYKIcOf7Ib0ZZ\nbzz//4KnZJI9OvOCVFF4Q9P7e+hXIMblMj7wmyor6cZQmOWky6KOVlPB6YMLZRUS\nZamnpRW7o3vN8MGyKwm56LilDkHXtMn6X48ljI9JJBPh8RA7MOLzHx//BAFTkQ0=\n=cHmZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 6500849b7c67ffc3a80d45f2aca11d7e22c0996e\nparent 840acd378a273dab6798352d3d6a087fa09e4806\nparent 0d8245b5b1f587ed2e52b6c97732299bdf7368df\nauthor the8472 <the8472@users.noreply.github.com> 1632257638 +0200\ncommitter GitHub <noreply@github.com> 1632257638 +0200\n\nRollup merge of #88795 - FabianWolff:issue-88684, r=wesleywiser\n\nPrint a note if a character literal contains a variation selector\n\nFixes #88684.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2cdba42b975d0fff4b48cb219e57c0a232c9bab", "html_url": "https://github.com/rust-lang/rust/commit/c2cdba42b975d0fff4b48cb219e57c0a232c9bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2cdba42b975d0fff4b48cb219e57c0a232c9bab/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "840acd378a273dab6798352d3d6a087fa09e4806", "url": "https://api.github.com/repos/rust-lang/rust/commits/840acd378a273dab6798352d3d6a087fa09e4806", "html_url": "https://github.com/rust-lang/rust/commit/840acd378a273dab6798352d3d6a087fa09e4806"}, {"sha": "0d8245b5b1f587ed2e52b6c97732299bdf7368df", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8245b5b1f587ed2e52b6c97732299bdf7368df", "html_url": "https://github.com/rust-lang/rust/commit/0d8245b5b1f587ed2e52b6c97732299bdf7368df"}], "stats": {"total": 151, "additions": 137, "deletions": 14}, "files": [{"sha": "cef5b3a226bff81a65f1fa69da5bdfc227e06a77", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c2cdba42b975d0fff4b48cb219e57c0a232c9bab/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2cdba42b975d0fff4b48cb219e57c0a232c9bab/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=c2cdba42b975d0fff4b48cb219e57c0a232c9bab", "patch": "@@ -3,7 +3,7 @@\n use std::iter::once;\n use std::ops::Range;\n \n-use rustc_errors::{Applicability, Handler};\n+use rustc_errors::{pluralize, Applicability, Handler};\n use rustc_lexer::unescape::{EscapeError, Mode};\n use rustc_span::{BytePos, Span};\n \n@@ -49,24 +49,57 @@ pub(crate) fn emit_unescape_error(\n                 .emit();\n         }\n         EscapeError::MoreThanOneChar => {\n-            let (prefix, msg) = if mode.is_bytes() {\n-                (\"b\", \"if you meant to write a byte string literal, use double quotes\")\n-            } else {\n-                (\"\", \"if you meant to write a `str` literal, use double quotes\")\n-            };\n+            use unicode_normalization::{char::is_combining_mark, UnicodeNormalization};\n \n-            handler\n-                .struct_span_err(\n-                    span_with_quotes,\n-                    \"character literal may only contain one codepoint\",\n-                )\n-                .span_suggestion(\n+            let mut has_help = false;\n+            let mut handler = handler.struct_span_err(\n+                span_with_quotes,\n+                \"character literal may only contain one codepoint\",\n+            );\n+\n+            if lit.chars().skip(1).all(|c| is_combining_mark(c)) {\n+                let escaped_marks =\n+                    lit.chars().skip(1).map(|c| c.escape_default().to_string()).collect::<Vec<_>>();\n+                handler.span_note(\n+                    span,\n+                    &format!(\n+                        \"this `{}` is followed by the combining mark{} `{}`\",\n+                        lit.chars().next().unwrap(),\n+                        pluralize!(escaped_marks.len()),\n+                        escaped_marks.join(\"\"),\n+                    ),\n+                );\n+                let normalized = lit.nfc().to_string();\n+                if normalized.chars().count() == 1 {\n+                    has_help = true;\n+                    handler.span_suggestion(\n+                        span,\n+                        &format!(\n+                            \"consider using the normalized form `{}` of this character\",\n+                            normalized.chars().next().unwrap().escape_default()\n+                        ),\n+                        normalized,\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+\n+            if !has_help {\n+                let (prefix, msg) = if mode.is_bytes() {\n+                    (\"b\", \"if you meant to write a byte string literal, use double quotes\")\n+                } else {\n+                    (\"\", \"if you meant to write a `str` literal, use double quotes\")\n+                };\n+\n+                handler.span_suggestion(\n                     span_with_quotes,\n                     msg,\n                     format!(\"{}\\\"{}\\\"\", prefix, lit),\n                     Applicability::MachineApplicable,\n-                )\n-                .emit();\n+                );\n+            }\n+\n+            handler.emit();\n         }\n         EscapeError::EscapeOnlyChar => {\n             let (c, char_span) = last_char();"}, {"sha": "26ef5ffa11a80ff17b6751e016697f11786d3593", "filename": "src/test/ui/parser/unicode-character-literal.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c2cdba42b975d0fff4b48cb219e57c0a232c9bab/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c2cdba42b975d0fff4b48cb219e57c0a232c9bab/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.fixed?ref=c2cdba42b975d0fff4b48cb219e57c0a232c9bab", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #88684: Improve diagnostics for combining marks\n+// in character literals.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _spade = \"\u2660\ufe0f\";\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: this `\u2660` is followed by the combining mark `\\u{fe0f}`\n+    //~| HELP: if you meant to write a `str` literal, use double quotes\n+\n+    let _s = \"s\u0323\u0307\u0302\u030a\";\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: this `s` is followed by the combining marks `\\u{323}\\u{307}\\u{302}\\u{30a}`\n+    //~| HELP: if you meant to write a `str` literal, use double quotes\n+\n+    let _a = '\u00c5';\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: this `A` is followed by the combining mark `\\u{30a}`\n+    //~| HELP: consider using the normalized form `\\u{c5}` of this character\n+}"}, {"sha": "d331522c04cbb7370e8e3e419a2062fec784a106", "filename": "src/test/ui/parser/unicode-character-literal.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c2cdba42b975d0fff4b48cb219e57c0a232c9bab/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2cdba42b975d0fff4b48cb219e57c0a232c9bab/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.rs?ref=c2cdba42b975d0fff4b48cb219e57c0a232c9bab", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #88684: Improve diagnostics for combining marks\n+// in character literals.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _spade = '\u2660\ufe0f';\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: this `\u2660` is followed by the combining mark `\\u{fe0f}`\n+    //~| HELP: if you meant to write a `str` literal, use double quotes\n+\n+    let _s = 's\u0323\u0307\u0302\u030a';\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: this `s` is followed by the combining marks `\\u{323}\\u{307}\\u{302}\\u{30a}`\n+    //~| HELP: if you meant to write a `str` literal, use double quotes\n+\n+    let _a = 'A\u030a';\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: this `A` is followed by the combining mark `\\u{30a}`\n+    //~| HELP: consider using the normalized form `\\u{c5}` of this character\n+}"}, {"sha": "5cd3bd0fe69d797b43e81038ec8806e438486113", "filename": "src/test/ui/parser/unicode-character-literal.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c2cdba42b975d0fff4b48cb219e57c0a232c9bab/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2cdba42b975d0fff4b48cb219e57c0a232c9bab/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-character-literal.stderr?ref=c2cdba42b975d0fff4b48cb219e57c0a232c9bab", "patch": "@@ -0,0 +1,48 @@\n+error: character literal may only contain one codepoint\n+  --> $DIR/unicode-character-literal.rs:7:18\n+   |\n+LL |     let _spade = '\u2660\ufe0f';\n+   |                  ^^^\n+   |\n+note: this `\u2660` is followed by the combining mark `\\u{fe0f}`\n+  --> $DIR/unicode-character-literal.rs:7:19\n+   |\n+LL |     let _spade = '\u2660\ufe0f';\n+   |                   ^\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+LL |     let _spade = \"\u2660\ufe0f\";\n+   |                  ~~~\n+\n+error: character literal may only contain one codepoint\n+  --> $DIR/unicode-character-literal.rs:12:14\n+   |\n+LL |     let _s = 's\u0323\u0307\u0302\u030a';\n+   |              ^^^\n+   |\n+note: this `s` is followed by the combining marks `\\u{323}\\u{307}\\u{302}\\u{30a}`\n+  --> $DIR/unicode-character-literal.rs:12:15\n+   |\n+LL |     let _s = 's\u0323\u0307\u0302\u030a';\n+   |               ^\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+LL |     let _s = \"s\u0323\u0307\u0302\u030a\";\n+   |              ~~~\n+\n+error: character literal may only contain one codepoint\n+  --> $DIR/unicode-character-literal.rs:17:14\n+   |\n+LL |     let _a = 'A\u030a';\n+   |              ^-^\n+   |               |\n+   |               help: consider using the normalized form `\\u{c5}` of this character: `\u00c5`\n+   |\n+note: this `A` is followed by the combining mark `\\u{30a}`\n+  --> $DIR/unicode-character-literal.rs:17:15\n+   |\n+LL |     let _a = 'A\u030a';\n+   |               ^\n+\n+error: aborting due to 3 previous errors\n+"}]}