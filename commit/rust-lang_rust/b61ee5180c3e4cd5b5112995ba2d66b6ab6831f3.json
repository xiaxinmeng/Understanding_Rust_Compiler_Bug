{"sha": "b61ee5180c3e4cd5b5112995ba2d66b6ab6831f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MWVlNTE4MGMzZTRjZDViNTExMjk5NWJhMmQ2NmI2YWI2ODMxZjM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-10-27T12:30:34Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-07T07:54:38Z"}, "message": "Fix translation item collection for inline and const fns.", "tree": {"sha": "9e57c90fe469a83e2d6fd3c7a64be8369344c4c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e57c90fe469a83e2d6fd3c7a64be8369344c4c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b61ee5180c3e4cd5b5112995ba2d66b6ab6831f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b61ee5180c3e4cd5b5112995ba2d66b6ab6831f3", "html_url": "https://github.com/rust-lang/rust/commit/b61ee5180c3e4cd5b5112995ba2d66b6ab6831f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b61ee5180c3e4cd5b5112995ba2d66b6ab6831f3/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a17e72462fcf4c4b8699fba086ab5363b0bba3bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17e72462fcf4c4b8699fba086ab5363b0bba3bb", "html_url": "https://github.com/rust-lang/rust/commit/a17e72462fcf4c4b8699fba086ab5363b0bba3bb"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "918c97774bccf570757b00c1d758bbf8ef144126", "filename": "src/librustc_trans_utils/collector.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b61ee5180c3e4cd5b5112995ba2d66b6ab6831f3/src%2Flibrustc_trans_utils%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61ee5180c3e4cd5b5112995ba2d66b6ab6831f3/src%2Flibrustc_trans_utils%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fcollector.rs?ref=b61ee5180c3e4cd5b5112995ba2d66b6ab6831f3", "patch": "@@ -324,9 +324,14 @@ fn collect_roots<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut roots = Vec::new();\n \n     {\n+        let entry_fn = tcx.sess.entry_fn.borrow().map(|(node_id, _)| {\n+            tcx.hir.local_def_id(node_id)\n+        });\n+\n         let mut visitor = RootCollector {\n             tcx,\n             mode,\n+            entry_fn,\n             output: &mut roots,\n         };\n \n@@ -875,6 +880,7 @@ struct RootCollector<'b, 'a: 'b, 'tcx: 'a + 'b> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mode: TransItemCollectionMode,\n     output: &'b mut Vec<TransItem<'tcx>>,\n+    entry_fn: Option<DefId>,\n }\n \n impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n@@ -932,10 +938,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                 let tcx = self.tcx;\n                 let def_id = tcx.hir.local_def_id(item.id);\n \n-                if (self.mode == TransItemCollectionMode::Eager ||\n-                    !tcx.is_const_fn(def_id) || tcx.is_exported_symbol(def_id)) &&\n-                   !item_has_type_parameters(tcx, def_id) {\n-\n+                if self.is_root(def_id) {\n                     debug!(\"RootCollector: ItemFn({})\",\n                            def_id_to_string(tcx, def_id));\n \n@@ -957,10 +960,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                 let tcx = self.tcx;\n                 let def_id = tcx.hir.local_def_id(ii.id);\n \n-                if (self.mode == TransItemCollectionMode::Eager ||\n-                    !tcx.is_const_fn(def_id) ||\n-                    tcx.is_exported_symbol(def_id)) &&\n-                   !item_has_type_parameters(tcx, def_id) {\n+                if self.is_root(def_id) {\n                     debug!(\"RootCollector: MethodImplItem({})\",\n                            def_id_to_string(tcx, def_id));\n \n@@ -973,6 +973,20 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n     }\n }\n \n+impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n+    fn is_root(&self, def_id: DefId) -> bool {\n+        !item_has_type_parameters(self.tcx, def_id) && match self.mode {\n+            TransItemCollectionMode::Eager => {\n+                true\n+            }\n+            TransItemCollectionMode::Lazy => {\n+                self.entry_fn == Some(def_id) ||\n+                self.tcx.is_exported_symbol(def_id)\n+            }\n+        }\n+    }\n+}\n+\n fn item_has_type_parameters<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n     let generics = tcx.generics_of(def_id);\n     generics.parent_types as usize + generics.types.len() > 0"}, {"sha": "c460752d75e79c2102847862892a0b7cc179c96d", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b61ee5180c3e4cd5b5112995ba2d66b6ab6831f3/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61ee5180c3e4cd5b5112995ba2d66b6ab6831f3/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=b61ee5180c3e4cd5b5112995ba2d66b6ab6831f3", "patch": "@@ -107,11 +107,11 @@ pub fn find_exported_symbols(tcx: TyCtxt) -> NodeSet {\n                 node: hir::ImplItemKind::Method(..), .. }) => {\n                 let def_id = tcx.hir.local_def_id(id);\n                 let generics = tcx.generics_of(def_id);\n-                let attributes = tcx.get_attrs(def_id);\n                 (generics.parent_types == 0 && generics.types.is_empty()) &&\n                 // Functions marked with #[inline] are only ever translated\n                 // with \"internal\" linkage and are never exported.\n-                !attr::requests_inline(&attributes)\n+                !attr::requests_inline(&tcx.get_attrs(def_id)) &&\n+                !tcx.is_const_fn(def_id)\n             }\n \n             _ => false"}]}