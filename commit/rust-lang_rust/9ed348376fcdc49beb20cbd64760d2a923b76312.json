{"sha": "9ed348376fcdc49beb20cbd64760d2a923b76312", "node_id": "C_kwDOAAsO6NoAKDllZDM0ODM3NmZjZGM0OWJlYjIwY2JkNjQ3NjBkMmE5MjNiNzYzMTI", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-18T11:30:21Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-18T13:25:17Z"}, "message": "require an `ErrorGuaranteed` to taint infcx with errors", "tree": {"sha": "a123a0d74619b08fff4487bd1f7d040a1c9bfb40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a123a0d74619b08fff4487bd1f7d040a1c9bfb40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ed348376fcdc49beb20cbd64760d2a923b76312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed348376fcdc49beb20cbd64760d2a923b76312", "html_url": "https://github.com/rust-lang/rust/commit/9ed348376fcdc49beb20cbd64760d2a923b76312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ed348376fcdc49beb20cbd64760d2a923b76312/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c48039a873f331a4591a499f71161b5c8997af1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c48039a873f331a4591a499f71161b5c8997af1", "html_url": "https://github.com/rust-lang/rust/commit/1c48039a873f331a4591a499f71161b5c8997af1"}], "stats": {"total": 153, "additions": 94, "deletions": 59}, "files": [{"sha": "163170a1d1aa0cfda50cdf3a44854d6ac9a1129f", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -197,7 +197,7 @@ fn do_mir_borrowck<'tcx>(\n     // Gather the upvars of a closure, if any.\n     let tables = tcx.typeck_opt_const_arg(def);\n     if let Some(e) = tables.tainted_by_errors {\n-        infcx.set_tainted_by_errors();\n+        infcx.set_tainted_by_errors(e);\n         errors.set_tainted_by_errors(e);\n     }\n     let upvars: Vec<_> = tables"}, {"sha": "4a12e1b1b92e0f22b180dc566f47f9db2bd989b0", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -303,7 +303,10 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n \n     if !nll_errors.is_empty() {\n         // Suppress unhelpful extra errors in `infer_opaque_types`.\n-        infcx.set_tainted_by_errors();\n+        infcx.set_tainted_by_errors(infcx.tcx.sess.delay_span_bug(\n+            body.span,\n+            \"`compute_regions` tainted `infcx` with errors but did not emit any errors\",\n+        ));\n     }\n \n     let remapped_opaque_tys = regioncx.infer_opaque_types(&infcx, opaque_type_values);"}, {"sha": "83b95fe0e911ec055f08c426b50d498a2f583a66", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -115,7 +115,7 @@ pub trait AstConv<'tcx> {\n     /// (e.g., resolve) that is translated into a ty-error. This is\n     /// used to help suppress derived errors typeck might otherwise\n     /// report.\n-    fn set_tainted_by_errors(&self);\n+    fn set_tainted_by_errors(&self, e: ErrorGuaranteed);\n \n     fn record_ty(&self, hir_id: hir::HirId, ty: Ty<'tcx>, span: Span);\n }\n@@ -2620,8 +2620,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n             }\n             Res::Err => {\n-                self.set_tainted_by_errors();\n-                self.tcx().ty_error()\n+                let e = self\n+                    .tcx()\n+                    .sess\n+                    .delay_span_bug(path.span, \"path with `Res:Err` but no error emitted\");\n+                self.set_tainted_by_errors(e);\n+                self.tcx().ty_error_with_guaranteed(e)\n             }\n             _ => span_bug!(span, \"unexpected resolution: {:?}\", path.res),\n         }"}, {"sha": "a738ee4a14887ae60c0d41d7e2ff8d98aa429750", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -518,7 +518,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n         ty\n     }\n \n-    fn set_tainted_by_errors(&self) {\n+    fn set_tainted_by_errors(&self, _: ErrorGuaranteed) {\n         // There's no obvious place to track this, so just let it go.\n     }\n "}, {"sha": "fc05cbf276e0ea7e5127af7a365ef9198edf0207", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -1544,7 +1544,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 // Mark that we've failed to coerce the types here to suppress\n                 // any superfluous errors we might encounter while trying to\n                 // emit or provide suggestions on how to fix the initial error.\n-                fcx.set_tainted_by_errors();\n+                fcx.set_tainted_by_errors(\n+                    fcx.tcx.sess.delay_span_bug(cause.span, \"coercion error but no error emitted\"),\n+                );\n                 let (expected, found) = if label_expression_as_expected {\n                     // In the case where this is a \"forced unit\", like\n                     // `break`, we want to call the `()` \"expected\""}, {"sha": "5a34ab401749f74491f92a45ec04a1b0786e5434", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -154,7 +154,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Err(e) => e,\n         };\n \n-        self.set_tainted_by_errors();\n+        self.set_tainted_by_errors(self.tcx.sess.delay_span_bug(\n+            expr.span,\n+            \"`TypeError` when attempting coercion but no error emitted\",\n+        ));\n         let expr = expr.peel_drop_temps();\n         let cause = self.misc(expr.span);\n         let expr_ty = self.resolve_vars_with_obligations(checked_ty);"}, {"sha": "752d2e0ff78589046f2c327c51b5bfd0288e60a4", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -527,12 +527,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.resolve_ty_and_res_fully_qualified_call(qpath, expr.hir_id, expr.span);\n         let ty = match res {\n             Res::Err => {\n-                self.set_tainted_by_errors();\n-                tcx.ty_error()\n+                let e =\n+                    self.tcx.sess.delay_span_bug(qpath.span(), \"`Res::Err` but no error emitted\");\n+                self.set_tainted_by_errors(e);\n+                tcx.ty_error_with_guaranteed(e)\n             }\n             Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _) => {\n-                report_unexpected_variant_res(tcx, res, qpath, expr.span);\n-                tcx.ty_error()\n+                let e = report_unexpected_variant_res(tcx, res, qpath, expr.span);\n+                tcx.ty_error_with_guaranteed(e)\n             }\n             _ => self.instantiate_value_path(segs, opt_ty, res, expr.span, expr.hir_id).0,\n         };\n@@ -1962,7 +1964,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr_span: Span,\n     ) {\n         if variant.is_recovered() {\n-            self.set_tainted_by_errors();\n+            self.set_tainted_by_errors(\n+                self.tcx\n+                    .sess\n+                    .delay_span_bug(expr_span, \"parser recovered but no error was emitted\"),\n+            );\n             return;\n         }\n         let mut err = self.err_ctxt().type_error_struct_with_diag("}, {"sha": "c2a5c5b6c1b3c5aca7b5ac8fb401e6fb6c51609e", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -140,8 +140,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"write_ty({:?}, {:?}) in fcx {}\", id, self.resolve_vars_if_possible(ty), self.tag());\n         self.typeck_results.borrow_mut().node_types_mut().insert(id, ty);\n \n-        if ty.references_error() {\n-            self.set_tainted_by_errors();\n+        if let Err(e) = ty.error_reported() {\n+            self.set_tainted_by_errors(e);\n         }\n     }\n \n@@ -1148,9 +1148,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 explicit_late_bound = ExplicitLateBound::Yes;\n             }\n \n-            if let Err(GenericArgCountMismatch { reported: Some(_), .. }) = arg_count.correct {\n+            if let Err(GenericArgCountMismatch { reported: Some(e), .. }) = arg_count.correct {\n                 infer_args_for_err.insert(index);\n-                self.set_tainted_by_errors(); // See issue #53251.\n+                self.set_tainted_by_errors(e); // See issue #53251.\n             }\n         }\n "}, {"sha": "91063b43d6161c56cbd0c42138c9ebf7bd1c41b1", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -512,8 +512,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             tys.into_iter().any(|ty| ty.references_error() || ty.is_ty_var())\n         }\n \n-        self.set_tainted_by_errors();\n         let tcx = self.tcx;\n+        // FIXME: taint after emitting errors and pass through an `ErrorGuaranteed`\n+        self.set_tainted_by_errors(\n+            tcx.sess.delay_span_bug(call_span, \"no errors reported for args\"),\n+        );\n \n         // Get the argument span in the context of the call span so that\n         // suggestions and labels are (more) correct when an arg is a\n@@ -1208,7 +1211,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let (def, ty) = self.finish_resolving_struct_path(qpath, path_span, hir_id);\n         let variant = match def {\n             Res::Err => {\n-                self.set_tainted_by_errors();\n+                self.set_tainted_by_errors(\n+                    self.tcx.sess.delay_span_bug(path_span, \"`Res::Err` but no error emitted\"),\n+                );\n                 return None;\n             }\n             Res::Def(DefKind::Variant, _) => match ty.kind() {"}, {"sha": "177d521d2804cd1e1ff08f4e769229b64fd28f4a", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -4,6 +4,7 @@ mod checks;\n mod suggestions;\n \n pub use _impl::*;\n+use rustc_errors::ErrorGuaranteed;\n pub use suggestions::*;\n \n use crate::coercion::DynamicCoerceMany;\n@@ -289,8 +290,8 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn set_tainted_by_errors(&self) {\n-        self.infcx.set_tainted_by_errors()\n+    fn set_tainted_by_errors(&self, e: ErrorGuaranteed) {\n+        self.infcx.set_tainted_by_errors(e)\n     }\n \n     fn record_ty(&self, hir_id: hir::HirId, ty: Ty<'tcx>, _span: Span) {"}, {"sha": "334d6d0aa6c209838c6a042895e8d94eab3e7742", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -53,7 +53,7 @@ use crate::check::check_fn;\n use crate::coercion::DynamicCoerceMany;\n use crate::gather_locals::GatherLocalsVisitor;\n use rustc_data_structures::unord::UnordSet;\n-use rustc_errors::{struct_span_err, MultiSpan};\n+use rustc_errors::{struct_span_err, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::Visitor;\n@@ -428,7 +428,12 @@ impl<'tcx> EnclosingBreakables<'tcx> {\n     }\n }\n \n-fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, qpath: &hir::QPath<'_>, span: Span) {\n+fn report_unexpected_variant_res(\n+    tcx: TyCtxt<'_>,\n+    res: Res,\n+    qpath: &hir::QPath<'_>,\n+    span: Span,\n+) -> ErrorGuaranteed {\n     struct_span_err!(\n         tcx.sess,\n         span,\n@@ -437,7 +442,7 @@ fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, qpath: &hir::QPath<'\n         res.descr(),\n         rustc_hir_pretty::qpath_to_string(qpath),\n     )\n-    .emit();\n+    .emit()\n }\n \n /// Controls whether the arguments are tupled. This is used for the call"}, {"sha": "a62d43561302bf43d3126b502367f7d21c4c455e", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -839,12 +839,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let (res, opt_ty, segments) = path_resolution;\n         match res {\n             Res::Err => {\n-                self.set_tainted_by_errors();\n-                return tcx.ty_error();\n+                let e = tcx.sess.delay_span_bug(qpath.span(), \"`Res::Err` but no error emitted\");\n+                self.set_tainted_by_errors(e);\n+                return tcx.ty_error_with_guaranteed(e);\n             }\n             Res::Def(DefKind::AssocFn | DefKind::Ctor(_, CtorKind::Fictive | CtorKind::Fn), _) => {\n-                report_unexpected_variant_res(tcx, res, qpath, pat.span);\n-                return tcx.ty_error();\n+                let e = report_unexpected_variant_res(tcx, res, qpath, pat.span);\n+                return tcx.ty_error_with_guaranteed(e);\n             }\n             Res::SelfCtor(..)\n             | Res::Def(\n@@ -985,9 +986,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ti: TopInfo<'tcx>,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n-        let on_error = || {\n+        let on_error = |e| {\n             for pat in subpats {\n-                self.check_pat(pat, tcx.ty_error(), def_bm, ti);\n+                self.check_pat(pat, tcx.ty_error_with_guaranteed(e), def_bm, ti);\n             }\n         };\n         let report_unexpected_res = |res: Res| {\n@@ -1014,36 +1015,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_label(pat.span, \"not a tuple variant or struct\");\n                 }\n             }\n-            err.emit();\n-            on_error();\n+            let e = err.emit();\n+            on_error(e);\n+            e\n         };\n \n         // Resolve the path and check the definition for errors.\n         let (res, opt_ty, segments) =\n             self.resolve_ty_and_res_fully_qualified_call(qpath, pat.hir_id, pat.span);\n         if res == Res::Err {\n-            self.set_tainted_by_errors();\n-            on_error();\n-            return self.tcx.ty_error();\n+            let e = tcx.sess.delay_span_bug(pat.span, \"`Res:Err` but no error emitted\");\n+            self.set_tainted_by_errors(e);\n+            on_error(e);\n+            return tcx.ty_error_with_guaranteed(e);\n         }\n \n         // Type-check the path.\n         let (pat_ty, res) =\n             self.instantiate_value_path(segments, opt_ty, res, pat.span, pat.hir_id);\n         if !pat_ty.is_fn() {\n-            report_unexpected_res(res);\n-            return tcx.ty_error();\n+            let e = report_unexpected_res(res);\n+            return tcx.ty_error_with_guaranteed(e);\n         }\n \n         let variant = match res {\n             Res::Err => {\n-                self.set_tainted_by_errors();\n-                on_error();\n-                return tcx.ty_error();\n+                let e = tcx.sess.delay_span_bug(pat.span, \"`Res::Err` but no error emitted\");\n+                self.set_tainted_by_errors(e);\n+                on_error(e);\n+                return tcx.ty_error_with_guaranteed(e);\n             }\n             Res::Def(DefKind::AssocConst | DefKind::AssocFn, _) => {\n-                report_unexpected_res(res);\n-                return tcx.ty_error();\n+                let e = report_unexpected_res(res);\n+                return tcx.ty_error_with_guaranteed(e);\n             }\n             Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) => tcx.expect_variant_res(res),\n             _ => bug!(\"unexpected pattern resolution: {:?}\", res),\n@@ -1082,9 +1086,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         } else {\n             // Pattern has wrong number of fields.\n-            self.e0023(pat.span, res, qpath, subpats, &variant.fields, expected, had_err);\n-            on_error();\n-            return tcx.ty_error();\n+            let e = self.e0023(pat.span, res, qpath, subpats, &variant.fields, expected, had_err);\n+            on_error(e);\n+            return tcx.ty_error_with_guaranteed(e);\n         }\n         pat_ty\n     }\n@@ -1098,7 +1102,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fields: &'tcx [ty::FieldDef],\n         expected: Ty<'tcx>,\n         had_err: bool,\n-    ) {\n+    ) -> ErrorGuaranteed {\n         let subpats_ending = pluralize!(subpats.len());\n         let fields_ending = pluralize!(fields.len());\n \n@@ -1245,7 +1249,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        err.emit();\n+        err.emit()\n     }\n \n     fn check_pat_tuple("}, {"sha": "b9ed6b28c220d1f47172421bedf05f593f661dd9", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -34,7 +34,7 @@ pub use rustc_middle::ty::IntVarValue;\n use rustc_middle::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n use rustc_middle::ty::{ConstVid, FloatVid, IntVid, TyVid};\n use rustc_span::symbol::Symbol;\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n \n use std::cell::{Cell, RefCell};\n use std::fmt;\n@@ -1224,20 +1224,19 @@ impl<'tcx> InferCtxt<'tcx> {\n \n         if self.tcx.sess.err_count() > self.err_count_on_creation {\n             // errors reported since this infcx was made\n-            self.set_tainted_by_errors();\n-            return self.tainted_by_errors.get();\n+            let e = self.tcx.sess.has_errors().unwrap();\n+            self.set_tainted_by_errors(e);\n+            return Some(e);\n         }\n \n         None\n     }\n \n     /// Set the \"tainted by errors\" flag to true. We call this when we\n     /// observe an error from a prior pass.\n-    pub fn set_tainted_by_errors(&self) {\n-        debug!(\"set_tainted_by_errors()\");\n-        self.tainted_by_errors.set(Some(\n-            self.tcx.sess.delay_span_bug(DUMMY_SP, \"`InferCtxt` incorrectly tainted by errors\"),\n-        ));\n+    pub fn set_tainted_by_errors(&self, e: ErrorGuaranteed) {\n+        debug!(\"set_tainted_by_errors(ErrorGuaranteed)\");\n+        self.tainted_by_errors.set(Some(e));\n     }\n \n     pub fn skip_region_resolution(&self) {"}, {"sha": "bd3c5780b891bb28efae312459722b10febf7e43", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -116,9 +116,9 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n                 Ok(a)\n             }\n \n-            (&ty::Error(_), _) | (_, &ty::Error(_)) => {\n-                infcx.set_tainted_by_errors();\n-                Ok(self.tcx().ty_error())\n+            (&ty::Error(e), _) | (_, &ty::Error(e)) => {\n+                infcx.set_tainted_by_errors(e);\n+                Ok(self.tcx().ty_error_with_guaranteed(e))\n             }\n \n             (&ty::Opaque(a_def_id, _), &ty::Opaque(b_def_id, _)) if a_def_id == b_def_id => {"}, {"sha": "ad0785d3817e1cf386a7be5762d429a456e481ea", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed348376fcdc49beb20cbd64760d2a923b76312/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=9ed348376fcdc49beb20cbd64760d2a923b76312", "patch": "@@ -532,9 +532,12 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         root_obligation: &PredicateObligation<'tcx>,\n         error: &SelectionError<'tcx>,\n     ) {\n-        self.set_tainted_by_errors();\n         let tcx = self.tcx;\n         let mut span = obligation.cause.span;\n+        // FIXME: statically guarantee this by tainting after the diagnostic is emitted\n+        self.set_tainted_by_errors(\n+            tcx.sess.delay_span_bug(span, \"`report_selection_error` did not emit an error\"),\n+        );\n \n         let mut err = match *error {\n             SelectionError::Unimplemented => {"}]}