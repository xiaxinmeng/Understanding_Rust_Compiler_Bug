{"sha": "d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZjhiNDk1YWQ1YzllMzY3NmRkZjdhZjUzYjIzYmI1YjdmMmZkZTA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-20T19:07:36Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-21T14:29:03Z"}, "message": "Ignore type bindings in generic_predicates_for_param\n\nThis allows us to handle more cases without a query cycle, which\nincludes certain cases that rustc accepted. That in turn means we avoid\ntriggering salsa-rs/salsa#257 on valid code (it will still happen if the\nuser writes an actual cycle).\n\nWe actually accept more definitions than rustc now; that's because rustc\nonly ignores bindings when looking up super traits, whereas we now also\nignore them when looking for predicates to disambiguate associated type\nshorthand. We could introduce a separate query for super traits if\nnecessary, but for now I think this should be fine.", "tree": {"sha": "66d68e003d7fa1b311e1b4b99c01de6ea0984372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66d68e003d7fa1b311e1b4b99c01de6ea0984372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0", "html_url": "https://github.com/rust-lang/rust/commit/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0623bb4d71725d6b07e8cef5665094581f951fc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0623bb4d71725d6b07e8cef5665094581f951fc0", "html_url": "https://github.com/rust-lang/rust/commit/0623bb4d71725d6b07e8cef5665094581f951fc0"}], "stats": {"total": 71, "additions": 52, "deletions": 19}, "files": [{"sha": "568cb7eb9b94355ffb0a9c777fcbc5c5a43151ef", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0", "patch": "@@ -2068,7 +2068,10 @@ impl Type {\n                 match pred {\n                     WhereClause::Implemented(trait_ref) => {\n                         cb(type_.clone());\n-                        walk_substs(db, type_, &trait_ref.substitution, cb);\n+                        // skip the self type. it's likely the type we just got the bounds from\n+                        for ty in trait_ref.substitution.iter().skip(1) {\n+                            walk_type(db, &type_.derived(ty.clone()), cb);\n+                        }\n                     }\n                     _ => (),\n                 }"}, {"sha": "9d3b79be39e5b08ef75715f85d235afed53fcdf1", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0", "patch": "@@ -571,13 +571,22 @@ impl HirDisplay for Ty {\n                         write!(f, \"{}\", param_data.name.clone().unwrap_or_else(Name::missing))?\n                     }\n                     TypeParamProvenance::ArgumentImplTrait => {\n-                        let bounds = f.db.generic_predicates_for_param(id);\n                         let substs = Substitution::type_params_for_generics(f.db, &generics);\n-                        write_bounds_like_dyn_trait_with_prefix(\n-                            \"impl\",\n-                            &bounds.iter().map(|b| b.clone().subst(&substs)).collect::<Vec<_>>(),\n-                            f,\n-                        )?;\n+                        let bounds = f\n+                            .db\n+                            .generic_predicates(id.parent)\n+                            .into_iter()\n+                            .map(|pred| pred.clone().subst(&substs))\n+                            .filter(|wc| match &wc {\n+                                WhereClause::Implemented(tr) => tr.self_type_parameter() == self,\n+                                WhereClause::AliasEq(AliasEq {\n+                                    alias: AliasTy::Projection(proj),\n+                                    ty: _,\n+                                }) => proj.self_type_parameter() == self,\n+                                _ => false,\n+                            })\n+                            .collect::<Vec<_>>();\n+                        write_bounds_like_dyn_trait_with_prefix(\"impl\", &bounds, f)?;\n                     }\n                 }\n             }"}, {"sha": "ad908f957b95ab63bc0e8f35d71042bf4e7ee792", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0", "patch": "@@ -940,10 +940,19 @@ impl Ty {\n                 let param_data = &generic_params.types[id.local_id];\n                 match param_data.provenance {\n                     hir_def::generics::TypeParamProvenance::ArgumentImplTrait => {\n+                        let substs = Substitution::type_params(db, id.parent);\n                         let predicates = db\n-                            .generic_predicates_for_param(id)\n+                            .generic_predicates(id.parent)\n                             .into_iter()\n-                            .map(|pred| pred.value.clone())\n+                            .map(|pred| pred.clone().subst(&substs))\n+                            .filter(|wc| match &wc {\n+                                WhereClause::Implemented(tr) => tr.self_type_parameter() == self,\n+                                WhereClause::AliasEq(AliasEq {\n+                                    alias: AliasTy::Projection(proj),\n+                                    ty: _,\n+                                }) => proj.self_type_parameter() == self,\n+                                _ => false,\n+                            })\n                             .collect_vec();\n \n                         Some(predicates)"}, {"sha": "2bdfcd310919c6c75cc69f80fadc4502da7382ad", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0", "patch": "@@ -189,7 +189,10 @@ impl<'a> TyLoweringContext<'a> {\n                 let self_ty =\n                     TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0)).intern(&Interner);\n                 let predicates = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n-                    bounds.iter().flat_map(|b| ctx.lower_type_bound(b, self_ty.clone())).collect()\n+                    bounds\n+                        .iter()\n+                        .flat_map(|b| ctx.lower_type_bound(b, self_ty.clone(), false))\n+                        .collect()\n                 });\n                 TyKind::Dyn(predicates).intern(&Interner)\n             }\n@@ -666,6 +669,7 @@ impl<'a> TyLoweringContext<'a> {\n     pub(crate) fn lower_where_predicate(\n         &'a self,\n         where_predicate: &'a WherePredicate,\n+        ignore_bindings: bool,\n     ) -> impl Iterator<Item = WhereClause> + 'a {\n         match where_predicate {\n             WherePredicate::ForLifetime { target, bound, .. }\n@@ -688,7 +692,9 @@ impl<'a> TyLoweringContext<'a> {\n                         .intern(&Interner)\n                     }\n                 };\n-                self.lower_type_bound(bound, self_ty).collect::<Vec<_>>().into_iter()\n+                self.lower_type_bound(bound, self_ty, ignore_bindings)\n+                    .collect::<Vec<_>>()\n+                    .into_iter()\n             }\n             WherePredicate::Lifetime { .. } => vec![].into_iter(),\n         }\n@@ -698,6 +704,7 @@ impl<'a> TyLoweringContext<'a> {\n         &'a self,\n         bound: &'a TypeBound,\n         self_ty: Ty,\n+        ignore_bindings: bool,\n     ) -> impl Iterator<Item = WhereClause> + 'a {\n         let mut bindings = None;\n         let trait_ref = match bound {\n@@ -711,6 +718,7 @@ impl<'a> TyLoweringContext<'a> {\n         trait_ref.into_iter().chain(\n             bindings\n                 .into_iter()\n+                .filter(move |_| !ignore_bindings)\n                 .flat_map(move |tr| self.assoc_type_bindings_from_type_bound(bound, tr)),\n         )\n     }\n@@ -755,6 +763,7 @@ impl<'a> TyLoweringContext<'a> {\n                     preds.extend(self.lower_type_bound(\n                         bound,\n                         TyKind::Alias(AliasTy::Projection(projection_ty.clone())).intern(&Interner),\n+                        false,\n                     ));\n                 }\n                 preds\n@@ -766,7 +775,7 @@ impl<'a> TyLoweringContext<'a> {\n         let self_ty =\n             TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0)).intern(&Interner);\n         let predicates = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n-            bounds.iter().flat_map(|b| ctx.lower_type_bound(b, self_ty.clone())).collect()\n+            bounds.iter().flat_map(|b| ctx.lower_type_bound(b, self_ty.clone(), false)).collect()\n         });\n         ReturnTypeImplTrait { bounds: Binders::new(1, predicates) }\n     }\n@@ -896,7 +905,9 @@ pub(crate) fn generic_predicates_for_param_query(\n             },\n             WherePredicate::Lifetime { .. } => false,\n         })\n-        .flat_map(|pred| ctx.lower_where_predicate(pred).map(|p| Binders::new(generics.len(), p)))\n+        .flat_map(|pred| {\n+            ctx.lower_where_predicate(pred, true).map(|p| Binders::new(generics.len(), p))\n+        })\n         .collect()\n }\n \n@@ -918,7 +929,7 @@ pub(crate) fn trait_environment_query(\n     let mut traits_in_scope = Vec::new();\n     let mut clauses = Vec::new();\n     for pred in resolver.where_predicates_in_scope() {\n-        for pred in ctx.lower_where_predicate(pred) {\n+        for pred in ctx.lower_where_predicate(pred, false) {\n             if let WhereClause::Implemented(tr) = &pred {\n                 traits_in_scope.push((tr.self_type_parameter().clone(), tr.hir_trait_id()));\n             }\n@@ -967,7 +978,9 @@ pub(crate) fn generic_predicates_query(\n     let generics = generics(db.upcast(), def);\n     resolver\n         .where_predicates_in_scope()\n-        .flat_map(|pred| ctx.lower_where_predicate(pred).map(|p| Binders::new(generics.len(), p)))\n+        .flat_map(|pred| {\n+            ctx.lower_where_predicate(pred, false).map(|p| Binders::new(generics.len(), p))\n+        })\n         .collect()\n }\n "}, {"sha": "37cd04c6f7c34326bce5b5370f9bb8eab274e315", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0", "patch": "@@ -2273,8 +2273,7 @@ fn test<T, U>() where T: Trait<U::Item>, U: Trait<T::Item> {\n \n #[test]\n fn unselected_projection_in_trait_env_cycle_3() {\n-    // this is a cycle, although it would be possible to handle if we didn't go\n-    // into bindings when looking for traits\n+    // this is a cycle for rustc; we currently accept it\n     check_types(\n         r#\"\n //- /main.rs\n@@ -2285,7 +2284,7 @@ trait Trait {\n \n fn test<T>() where T: Trait<OtherItem = T::Item> {\n     let x: T::Item = no_matter;\n-}                   //^ {unknown}\n+}                   //^ Trait::Item<T>\n \"#,\n     );\n }"}, {"sha": "9441456038235a86760ef3fab963a8980c5c4118", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=d8f8b495ad5c9e3676ddf7af53b23bb5b7f2fde0", "patch": "@@ -395,7 +395,7 @@ pub(crate) fn associated_ty_data_query(\n     let bounds = type_alias_data\n         .bounds\n         .iter()\n-        .flat_map(|bound| ctx.lower_type_bound(bound, self_ty.clone()))\n+        .flat_map(|bound| ctx.lower_type_bound(bound, self_ty.clone(), false))\n         .filter_map(|pred| generic_predicate_to_inline_bound(db, &pred, &self_ty))\n         .map(|bound| make_binders(bound.shifted_in(&Interner), 0))\n         .collect();"}]}