{"sha": "c68345e57e82e7233e0f875bd416f46e1f8859e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ODM0NWU1N2U4MmU3MjMzZTBmODc1YmQ0MTZmNDZlMWY4ODU5ZTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-11T17:09:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-11T18:32:54Z"}, "message": "add a log_str() function and allow '%?' in fmt strings to use it", "tree": {"sha": "394fdadbb90e0eb8661e1a9475985f12629ada67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/394fdadbb90e0eb8661e1a9475985f12629ada67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c68345e57e82e7233e0f875bd416f46e1f8859e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c68345e57e82e7233e0f875bd416f46e1f8859e1", "html_url": "https://github.com/rust-lang/rust/commit/c68345e57e82e7233e0f875bd416f46e1f8859e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c68345e57e82e7233e0f875bd416f46e1f8859e1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb", "html_url": "https://github.com/rust-lang/rust/commit/f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "dc613bcbaa699bc9057c35a3cf709afeeb8fed85", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=c68345e57e82e7233e0f875bd416f46e1f8859e1", "patch": "@@ -247,6 +247,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span, pieces: [piece], args: [@ast::expr])\n           ty_bits. { ret make_conv_call(cx, arg.span, \"uint\", cnv, arg); }\n           ty_octal. { ret make_conv_call(cx, arg.span, \"uint\", cnv, arg); }\n           ty_float. { ret make_conv_call(cx, arg.span, \"float\", cnv, arg); }\n+          ty_poly. { ret make_conv_call(cx, arg.span, \"poly\", cnv, arg); }\n           _ { cx.span_unimpl(sp, unsupported); }\n         }\n     }\n@@ -303,6 +304,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span, pieces: [piece], args: [@ast::expr])\n           }\n           ty_octal. { #debug(\"type: octal\"); }\n           ty_float. { #debug(\"type: float\"); }\n+          ty_poly. { #debug(\"type: poly\"); }\n         }\n     }\n     let fmt_sp = args[0].span;"}, {"sha": "0d364878346027f6acf02b322dcff3036c6d6bf8", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=c68345e57e82e7233e0f875bd416f46e1f8859e1", "patch": "@@ -50,6 +50,7 @@ mod ct {\n         ty_hex(caseness);\n         ty_octal;\n         ty_float;\n+        ty_poly;\n         // FIXME: More types\n     }\n     tag flag {\n@@ -249,6 +250,8 @@ mod ct {\n                 ty_octal\n             } else if str::eq(tstr, \"f\") {\n                 ty_float\n+            } else if str::eq(tstr, \"?\") {\n+                ty_poly\n             } else { error(\"unknown type in conversion: \" + tstr) };\n         ret {ty: t, next: i + 1u};\n     }\n@@ -346,6 +349,10 @@ mod rt {\n         }\n         ret pad(cv, s, pad_signed);\n     }\n+    fn conv_poly<T>(cv: conv, v: T) -> str {\n+        let s = sys::log_str(v);\n+        ret conv_str(cv, s);\n+    }\n \n     // Convert an int to string with minimum number of digits. If precision is\n     // 0 and num is 0 then the result is the empty string."}, {"sha": "21032e72122a90827c639f0d080c7b1289d611b8", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=c68345e57e82e7233e0f875bd416f46e1f8859e1", "patch": "@@ -19,6 +19,7 @@ native mod rustrt {\n     fn refcount<T>(t: @T) -> uint;\n     fn do_gc();\n     fn unsupervise();\n+    fn shape_log_str<T>(t: *sys::type_desc, data: T) -> str;\n }\n \n #[abi = \"rust-intrinsic\"]\n@@ -87,6 +88,10 @@ fn unsupervise() -> () {\n     ret rustrt::unsupervise();\n }\n \n+fn log_str<T>(t: T) -> str {\n+    rustrt::shape_log_str(get_type_desc::<T>(), t)\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "ee7e389dc7702b01edd123be0f707a59d506a3f2", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=c68345e57e82e7233e0f875bd416f46e1f8859e1", "patch": "@@ -548,6 +548,24 @@ shape_cmp_type(int8_t *result, const type_desc *tydesc,\n     }\n }\n \n+extern \"C\" rust_str *\n+shape_log_str(const type_desc *tydesc, uint8_t *data) {\n+    rust_task *task = rust_scheduler::get_task();\n+\n+    shape::arena arena;\n+    shape::type_param *params =\n+        shape::type_param::from_tydesc_and_data(tydesc, data, arena);\n+\n+    std::stringstream ss;\n+    shape::log log(task, true, tydesc->shape, params, tydesc->shape_tables,\n+                   data, ss);\n+\n+    log.walk();\n+\n+    int len = ss.str().length();\n+    return make_str(task->kernel, ss.str().c_str(), len, \"log_str\");\n+}\n+\n extern \"C\" void\n shape_log_type(const type_desc *tydesc, uint8_t *data, uint32_t level) {\n     rust_task *task = rust_scheduler::get_task();"}, {"sha": "9b3b4c6f45dd11dfcc818e72c86ca007d810844b", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=c68345e57e82e7233e0f875bd416f46e1f8859e1", "patch": "@@ -191,7 +191,7 @@ inline void reserve_vec(rust_task* task, rust_vec** vpp, size_t size) {\n typedef rust_vec rust_str;\n \n inline rust_str *\n-make_str(rust_kernel* kernel, char* c, size_t strlen, const char* name) {\n+make_str(rust_kernel* kernel, const char* c, size_t strlen, const char* name) {\n     size_t str_fill = strlen + 1;\n     size_t str_alloc = str_fill;\n     rust_str *str = (rust_str *)"}, {"sha": "7e57625fac1aa816f399497ab5f47ddbba81f498", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=c68345e57e82e7233e0f875bd416f46e1f8859e1", "patch": "@@ -48,6 +48,7 @@ rust_task_sleep\n rust_get_task\n set_min_stack\n sched_threads\n+shape_log_str\n squareroot\n start_task\n vec_reserve_shared"}, {"sha": "0fb989aa30855fd39ba260344d2fd4ea34d1407c", "filename": "src/test/run-pass/log-str.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Ftest%2Frun-pass%2Flog-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68345e57e82e7233e0f875bd416f46e1f8859e1/src%2Ftest%2Frun-pass%2Flog-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-str.rs?ref=c68345e57e82e7233e0f875bd416f46e1f8859e1", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    assert \"[1, 2, 3]\" == sys::log_str([1, 2, 3]);\n+    assert #fmt[\"%?/%5?\", [1, 2, 3], \"hi\"] == \"[1, 2, 3]/ \\\"hi\\\"\";\n+}"}]}