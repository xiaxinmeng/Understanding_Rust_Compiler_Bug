{"sha": "57cc8ce1d752e4bba5bfd29b9171e3a7c78a7c7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3Y2M4Y2UxZDc1MmU0YmJhNWJmZDI5YjkxNzFlM2E3Yzc4YTdjN2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-29T16:26:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-29T16:26:36Z"}, "message": "Auto merge of #970 - RalfJung:align_offset, r=RalfJung\n\nmore align_offset tests\n\nCc @christianpoveda", "tree": {"sha": "1d928a18155816b2a4ef62c75a906135a55db67d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d928a18155816b2a4ef62c75a906135a55db67d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57cc8ce1d752e4bba5bfd29b9171e3a7c78a7c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57cc8ce1d752e4bba5bfd29b9171e3a7c78a7c7e", "html_url": "https://github.com/rust-lang/rust/commit/57cc8ce1d752e4bba5bfd29b9171e3a7c78a7c7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57cc8ce1d752e4bba5bfd29b9171e3a7c78a7c7e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea3eee05444b663792353b641173c6202fabfbf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3eee05444b663792353b641173c6202fabfbf5", "html_url": "https://github.com/rust-lang/rust/commit/ea3eee05444b663792353b641173c6202fabfbf5"}, {"sha": "a9c207dce22340fbf2e31399bccbbafb7bfb2358", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c207dce22340fbf2e31399bccbbafb7bfb2358", "html_url": "https://github.com/rust-lang/rust/commit/a9c207dce22340fbf2e31399bccbbafb7bfb2358"}], "stats": {"total": 84, "additions": 78, "deletions": 6}, "files": [{"sha": "736889174839f9f458623f671a12cf51b2187dc3", "filename": "tests/run-pass/align_offset.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/57cc8ce1d752e4bba5bfd29b9171e3a7c78a7c7e/tests%2Frun-pass%2Falign_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57cc8ce1d752e4bba5bfd29b9171e3a7c78a7c7e/tests%2Frun-pass%2Falign_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Falign_offset.rs?ref=57cc8ce1d752e4bba5bfd29b9171e3a7c78a7c7e", "patch": "@@ -0,0 +1,78 @@\n+fn test_align_offset() {\n+    let d = Box::new([0u32; 4]);\n+    // Get u8 pointer to base\n+    let raw = d.as_ptr() as *const u8;\n+\n+    assert_eq!(raw.align_offset(2), 0);\n+    assert_eq!(raw.align_offset(4), 0);\n+    assert_eq!(raw.align_offset(8), usize::max_value()); // requested alignment higher than allocation alignment\n+\n+    assert_eq!(raw.wrapping_offset(1).align_offset(2), 1);\n+    assert_eq!(raw.wrapping_offset(1).align_offset(4), 3);\n+    assert_eq!(raw.wrapping_offset(1).align_offset(8), usize::max_value()); // requested alignment higher than allocation alignment\n+\n+    assert_eq!(raw.wrapping_offset(2).align_offset(2), 0);\n+    assert_eq!(raw.wrapping_offset(2).align_offset(4), 2);\n+    assert_eq!(raw.wrapping_offset(2).align_offset(8), usize::max_value()); // requested alignment higher than allocation alignment\n+}\n+\n+fn test_align_to() {\n+    const N: usize = 4;\n+    let d = Box::new([0u32; N]);\n+    // Get u8 slice covering the entire thing\n+    let s = unsafe { std::slice::from_raw_parts(d.as_ptr() as *const u8, 4 * N) };\n+    let raw = s.as_ptr();\n+\n+    {\n+        let (l, m, r) = unsafe { s.align_to::<u32>() };\n+        assert_eq!(l.len(), 0);\n+        assert_eq!(r.len(), 0);\n+        assert_eq!(m.len(), N);\n+        assert_eq!(raw, m.as_ptr() as *const u8);\n+    }\n+\n+    {\n+        let (l, m, r) = unsafe { s[1..].align_to::<u32>() };\n+        assert_eq!(l.len(), 3);\n+        assert_eq!(m.len(), N-1);\n+        assert_eq!(r.len(), 0);\n+        assert_eq!(raw.wrapping_offset(4), m.as_ptr() as *const u8);\n+    }\n+\n+    {\n+        let (l, m, r) = unsafe { s[..4*N - 1].align_to::<u32>() };\n+        assert_eq!(l.len(), 0);\n+        assert_eq!(m.len(), N-1);\n+        assert_eq!(r.len(), 3);\n+        assert_eq!(raw, m.as_ptr() as *const u8);\n+    }\n+\n+    {\n+        let (l, m, r) = unsafe { s[1..4*N - 1].align_to::<u32>() };\n+        assert_eq!(l.len(), 3);\n+        assert_eq!(m.len(), N-2);\n+        assert_eq!(r.len(), 3);\n+        assert_eq!(raw.wrapping_offset(4), m.as_ptr() as *const u8);\n+    }\n+\n+    {\n+        #[repr(align(8))] struct Align8(u64);\n+        let (l, m, r) = unsafe { s.align_to::<Align8>() }; // requested alignment higher than allocation alignment\n+        assert_eq!(l.len(), 4*N);\n+        assert_eq!(r.len(), 0);\n+        assert_eq!(m.len(), 0);\n+    }\n+}\n+\n+fn test_from_utf8() {\n+    const N: usize = 10;\n+    let vec = vec![0x4141414141414141u64; N];\n+    let content = unsafe { std::slice::from_raw_parts(vec.as_ptr() as *const u8, 8 * N) };\n+    println!(\"{:?}\", std::str::from_utf8(content).unwrap());\n+}\n+\n+fn main() {\n+    test_align_offset();\n+    test_align_to();\n+    test_from_utf8();\n+}"}, {"sha": "66d439948159632e13543778e040edd9f3cfca17", "filename": "tests/run-pass/align_offset.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/57cc8ce1d752e4bba5bfd29b9171e3a7c78a7c7e/tests%2Frun-pass%2Falign_offset.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/57cc8ce1d752e4bba5bfd29b9171e3a7c78a7c7e/tests%2Frun-pass%2Falign_offset.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Falign_offset.stdout?ref=57cc8ce1d752e4bba5bfd29b9171e3a7c78a7c7e", "previous_filename": "tests/run-pass/aligned_utf8_check.stdout"}, {"sha": "6c6ff6b6173cb8b0a2ad98d35f922246feb4712e", "filename": "tests/run-pass/aligned_utf8_check.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea3eee05444b663792353b641173c6202fabfbf5/tests%2Frun-pass%2Faligned_utf8_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3eee05444b663792353b641173c6202fabfbf5/tests%2Frun-pass%2Faligned_utf8_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Faligned_utf8_check.rs?ref=ea3eee05444b663792353b641173c6202fabfbf5", "patch": "@@ -1,6 +0,0 @@\n-fn main() {\n-    const N: usize = 10;\n-    let vec = vec![0x4141414141414141u64; N];\n-    let content = unsafe { std::slice::from_raw_parts(vec.as_ptr() as *const u8, 8 * N) };\n-    println!(\"{:?}\", std::str::from_utf8(content).unwrap());\n-}"}]}