{"sha": "cd54321c085da9e40dd340b738547f7287e3c579", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNTQzMjFjMDg1ZGE5ZTQwZGQzNDBiNzM4NTQ3ZjcyODdlM2M1Nzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-15T17:01:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-15T17:01:07Z"}, "message": "auto merge of #15604 : mrmonday/rust/raw-socket-libc, r=alexcrichton\n\nThis pull request adds some necessary function definitions and types for doing low level networking with Rust.", "tree": {"sha": "8d1970570ff088463d9fdfe9e82dcf2262d1d08e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d1970570ff088463d9fdfe9e82dcf2262d1d08e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd54321c085da9e40dd340b738547f7287e3c579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd54321c085da9e40dd340b738547f7287e3c579", "html_url": "https://github.com/rust-lang/rust/commit/cd54321c085da9e40dd340b738547f7287e3c579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd54321c085da9e40dd340b738547f7287e3c579/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1704ebb798bd55a782b80ae6741c5d11403aaf13", "url": "https://api.github.com/repos/rust-lang/rust/commits/1704ebb798bd55a782b80ae6741c5d11403aaf13", "html_url": "https://github.com/rust-lang/rust/commit/1704ebb798bd55a782b80ae6741c5d11403aaf13"}, {"sha": "e1fc3a6f44b2081b3dc86b6569c3a4f15b9edd5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1fc3a6f44b2081b3dc86b6569c3a4f15b9edd5d", "html_url": "https://github.com/rust-lang/rust/commit/e1fc3a6f44b2081b3dc86b6569c3a4f15b9edd5d"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "d0d6287695d5c3b1c94671f6ce094b64626da5ad", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd54321c085da9e40dd340b738547f7287e3c579/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd54321c085da9e40dd340b738547f7287e3c579/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=cd54321c085da9e40dd340b738547f7287e3c579", "patch": "@@ -109,20 +109,32 @@ pub struct uv_buf_t {\n     pub len: uv_buf_len_t,\n }\n \n+#[cfg(unix)]\n+pub type uv_os_socket_t = c_int;\n+\n // see libuv/include/uv-win.h\n #[cfg(windows)]\n pub struct uv_buf_t {\n     pub len: uv_buf_len_t,\n     pub base: *mut u8,\n }\n \n+#[cfg(windows)]\n+pub type uv_os_socket_t = libc::SOCKET;\n+\n #[repr(C)]\n pub enum uv_run_mode {\n     RUN_DEFAULT = 0,\n     RUN_ONCE,\n     RUN_NOWAIT,\n }\n \n+#[repr(C)]\n+pub enum uv_poll_event {\n+    UV_READABLE = 1,\n+    UV_WRITABLE = 2,\n+}\n+\n pub struct uv_process_options_t {\n     pub exit_cb: uv_exit_cb,\n     pub file: *const libc::c_char,\n@@ -150,6 +162,7 @@ pub type uv_loop_t = c_void;\n pub type uv_idle_t = c_void;\n pub type uv_tcp_t = c_void;\n pub type uv_udp_t = c_void;\n+pub type uv_poll_t = c_void;\n pub type uv_connect_t = c_void;\n pub type uv_connection_t = c_void;\n pub type uv_write_t = c_void;\n@@ -233,6 +246,9 @@ pub type uv_udp_recv_cb = extern \"C\" fn(handle: *mut uv_udp_t,\n                                         addr: *const sockaddr,\n                                         flags: c_uint);\n pub type uv_close_cb = extern \"C\" fn(handle: *mut uv_handle_t);\n+pub type uv_poll_cb = extern \"C\" fn(handle: *mut uv_poll_t,\n+                                    status: c_int,\n+                                    events: c_int);\n pub type uv_walk_cb = extern \"C\" fn(handle: *mut uv_handle_t,\n                                     arg: *mut c_void);\n pub type uv_async_cb = extern \"C\" fn(handle: *mut uv_async_t);\n@@ -651,6 +667,11 @@ extern {\n     pub fn uv_fs_lstat(handle: *mut uv_loop_t, req: *mut uv_fs_t,\n                        file: *const c_char, cb: uv_fs_cb) -> c_int;\n \n+    // poll bindings\n+    pub fn uv_poll_init_socket(l: *mut uv_loop_t, h: *mut uv_poll_t, s: uv_os_socket_t) -> c_int;\n+    pub fn uv_poll_start(h: *mut uv_poll_t, events: c_int, cb: uv_poll_cb) -> c_int;\n+    pub fn uv_poll_stop(h: *mut uv_poll_t) -> c_int;\n+\n     // getaddrinfo\n     pub fn uv_getaddrinfo(loop_: *mut uv_loop_t, req: *mut uv_getaddrinfo_t,\n                           getaddrinfo_cb: uv_getaddrinfo_cb,"}]}