{"sha": "3c155dc7b6ac9368fbe6f3127b42e91b181f2708", "node_id": "C_kwDOAAsO6NoAKDNjMTU1ZGM3YjZhYzkzNjhmYmU2ZjMxMjdiNDJlOTFiMTgxZjI3MDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-30T16:50:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-30T16:50:11Z"}, "message": "Rollup merge of #107465 - WaffleLapkin:has_allow_dead_code_or_lang_attr, r=Nilstrieb\n\n`has_allow_dead_code_or_lang_attr` micro refactor\n\nr? `@Nilstrieb`", "tree": {"sha": "e8f5e7fce84876d9eba2dd741dd81b2c0dd54001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f5e7fce84876d9eba2dd741dd81b2c0dd54001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c155dc7b6ac9368fbe6f3127b42e91b181f2708", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1/VDCRBK7hj4Ov3rIwAAU1MIAC11YVq7ueAEX6N0q8uC8Uro\nCBFOU4QSiauNH9vvjOvM28+SUEyDTtoNGVghEPE/7r2nP0hwq1Yw/9RojTKvWCLi\nrde3NtnZcwCtUuQ1v0J6e43FSsMWcf5yTaTYa1W/HGgvomrC4sQ7P7uUB694D1+K\na2qEXIBLf34Zm2ob8z5h1fETYMx0kC7D6Tfig8AaMBqOFSKIpBbMtLuO8DO0TC5a\n7L6Kjo/Ui8JslTGE5IxdpCzVknnDUQWUJkwp3z4f6jxTO2W3AApwK0UW713/sYhj\nNUNvIHP8UouokXZr1nDfue+lrxeNhRfarwHWmA7yV6Q2oFVFwCCyVEYo0fh/pvM=\n=GuZr\n-----END PGP SIGNATURE-----\n", "payload": "tree e8f5e7fce84876d9eba2dd741dd81b2c0dd54001\nparent c3b1f5428b7ed8b5e75e5ac8e4e26a46093a7965\nparent 48af3a96e6106e67d0518c329f769e669b6e363c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675097411 +0100\ncommitter GitHub <noreply@github.com> 1675097411 +0100\n\nRollup merge of #107465 - WaffleLapkin:has_allow_dead_code_or_lang_attr, r=Nilstrieb\n\n`has_allow_dead_code_or_lang_attr` micro refactor\n\nr? `@Nilstrieb`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c155dc7b6ac9368fbe6f3127b42e91b181f2708", "html_url": "https://github.com/rust-lang/rust/commit/3c155dc7b6ac9368fbe6f3127b42e91b181f2708", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c155dc7b6ac9368fbe6f3127b42e91b181f2708/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3b1f5428b7ed8b5e75e5ac8e4e26a46093a7965", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b1f5428b7ed8b5e75e5ac8e4e26a46093a7965", "html_url": "https://github.com/rust-lang/rust/commit/c3b1f5428b7ed8b5e75e5ac8e4e26a46093a7965"}, {"sha": "48af3a96e6106e67d0518c329f769e669b6e363c", "url": "https://api.github.com/repos/rust-lang/rust/commits/48af3a96e6106e67d0518c329f769e669b6e363c", "html_url": "https://github.com/rust-lang/rust/commit/48af3a96e6106e67d0518c329f769e669b6e363c"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "83adfeb6b10b6ef2c5d317bb28172c131e335fd9", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3c155dc7b6ac9368fbe6f3127b42e91b181f2708/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c155dc7b6ac9368fbe6f3127b42e91b181f2708/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=3c155dc7b6ac9368fbe6f3127b42e91b181f2708", "patch": "@@ -459,30 +459,32 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n }\n \n fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n-    if tcx.has_attr(def_id.to_def_id(), sym::lang) {\n-        return true;\n+    fn has_lang_attr(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n+        tcx.has_attr(def_id.to_def_id(), sym::lang)\n+            // Stable attribute for #[lang = \"panic_impl\"]\n+            || tcx.has_attr(def_id.to_def_id(), sym::panic_handler)\n     }\n \n-    // Stable attribute for #[lang = \"panic_impl\"]\n-    if tcx.has_attr(def_id.to_def_id(), sym::panic_handler) {\n-        return true;\n+    fn has_allow_dead_code(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+        tcx.lint_level_at_node(lint::builtin::DEAD_CODE, hir_id).0 == lint::Allow\n     }\n \n-    if tcx.def_kind(def_id).has_codegen_attrs() {\n-        let cg_attrs = tcx.codegen_fn_attrs(def_id);\n+    fn has_used_like_attr(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n+        tcx.def_kind(def_id).has_codegen_attrs() && {\n+            let cg_attrs = tcx.codegen_fn_attrs(def_id);\n \n-        // #[used], #[no_mangle], #[export_name], etc also keeps the item alive\n-        // forcefully, e.g., for placing it in a specific section.\n-        if cg_attrs.contains_extern_indicator()\n-            || cg_attrs.flags.contains(CodegenFnAttrFlags::USED)\n-            || cg_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n-        {\n-            return true;\n+            // #[used], #[no_mangle], #[export_name], etc also keeps the item alive\n+            // forcefully, e.g., for placing it in a specific section.\n+            cg_attrs.contains_extern_indicator()\n+                || cg_attrs.flags.contains(CodegenFnAttrFlags::USED)\n+                || cg_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n         }\n     }\n \n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    tcx.lint_level_at_node(lint::builtin::DEAD_CODE, hir_id).0 == lint::Allow\n+    has_allow_dead_code(tcx, def_id)\n+        || has_used_like_attr(tcx, def_id)\n+        || has_lang_attr(tcx, def_id)\n }\n \n // These check_* functions seeds items that"}]}