{"sha": "5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYWVkZWEzZGJlYjhmYjI2MzlkM2QxNDJiMDA4MTM1ZjRmZDJiNDM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-09T02:39:26Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-12T17:34:48Z"}, "message": "Detect tuple struct incorrectly used as struct pat", "tree": {"sha": "60c642b2c04e536814c0254837012b3028b8d223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60c642b2c04e536814c0254837012b3028b8d223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "html_url": "https://github.com/rust-lang/rust/commit/5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346aec9b02f3c74f3fce97fd6bda24709d220e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/346aec9b02f3c74f3fce97fd6bda24709d220e49", "html_url": "https://github.com/rust-lang/rust/commit/346aec9b02f3c74f3fce97fd6bda24709d220e49"}], "stats": {"total": 186, "additions": 137, "deletions": 49}, "files": [{"sha": "61a0b5caebec655794a743010b3e2f017b6d88b4", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "patch": "@@ -3996,6 +3996,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_hir\",\n+ \"rustc_hir_pretty\",\n  \"rustc_index\",\n  \"rustc_infer\",\n  \"rustc_middle\","}, {"sha": "2e1b897216bb29f9478a2ce1d9270f0b1a9ce474", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "patch": "@@ -450,6 +450,7 @@ E0765: include_str!(\"./error_codes/E0765.md\"),\n E0766: include_str!(\"./error_codes/E0766.md\"),\n E0767: include_str!(\"./error_codes/E0767.md\"),\n E0768: include_str!(\"./error_codes/E0768.md\"),\n+E0769: include_str!(\"./error_codes/E0769.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "d1995be9899b140a01686d1c7c386c8ce998454a", "filename": "src/librustc_error_codes/error_codes/E0769.md", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Flibrustc_error_codes%2Ferror_codes%2FE0769.md", "raw_url": "https://github.com/rust-lang/rust/raw/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Flibrustc_error_codes%2Ferror_codes%2FE0769.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0769.md?ref=5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "patch": "@@ -0,0 +1,39 @@\n+A tuple struct or tuple variant was used in a pattern as if it were a\n+struct or struct variant.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0769\n+enum E {\n+    A(i32),\n+}\n+let e = E::A(42);\n+match e {\n+    E::A { number } => println!(\"{}\", x),\n+}\n+```\n+\n+To fix this error, you can use the tuple pattern:\n+\n+```\n+# enum E {\n+#     A(i32),\n+# }\n+# let e = E::A(42);\n+match e {\n+    E::A(number) => println!(\"{}\", number),\n+}\n+```\n+\n+Alternatively, you can also use the struct pattern by using the correct\n+field names and binding them to new identifiers:\n+\n+```\n+# enum E {\n+#     A(i32),\n+# }\n+# let e = E::A(42);\n+match e {\n+    E::A { 0: number } => println!(\"{}\", number),\n+}\n+```"}, {"sha": "93b503c976be4c8706ecee600cf78d08cfefe1f1", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "patch": "@@ -18,6 +18,7 @@ rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n+rustc_hir_pretty = { path = \"../librustc_hir_pretty\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_session = { path = \"../librustc_session\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "a654fc3dfc2dffa8d47c6adc9d81dfb36b3e4a4e", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 78, "deletions": 13, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "patch": "@@ -1082,20 +1082,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .filter(|ident| !used_fields.contains_key(&ident))\n             .collect::<Vec<_>>();\n \n-        if !inexistent_fields.is_empty() && !variant.recovered {\n-            self.error_inexistent_fields(\n+        let inexistent_fields_err = if !inexistent_fields.is_empty() && !variant.recovered {\n+            Some(self.error_inexistent_fields(\n                 adt.variant_descr(),\n                 &inexistent_fields,\n                 &mut unmentioned_fields,\n                 variant,\n-            );\n-        }\n+            ))\n+        } else {\n+            None\n+        };\n \n         // Require `..` if struct has non_exhaustive attribute.\n         if variant.is_field_list_non_exhaustive() && !adt.did.is_local() && !etc {\n             self.error_foreign_non_exhaustive_spat(pat, adt.variant_descr(), fields.is_empty());\n         }\n \n+        let mut unmentioned_err = None;\n         // Report an error if incorrect number of the fields were specified.\n         if adt.is_union() {\n             if fields.len() != 1 {\n@@ -1107,7 +1110,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tcx.sess.struct_span_err(pat.span, \"`..` cannot be used in union patterns\").emit();\n             }\n         } else if !etc && !unmentioned_fields.is_empty() {\n-            self.error_unmentioned_fields(pat.span, &unmentioned_fields, variant);\n+            unmentioned_err = Some(self.error_unmentioned_fields(pat.span, &unmentioned_fields));\n+        }\n+        match (inexistent_fields_err, unmentioned_err) {\n+            (Some(mut i), Some(mut u)) => {\n+                if let Some(mut e) = self.error_tuple_variant_as_struct_pat(pat, fields, variant) {\n+                    // We don't want to show the inexistent fields error when this was\n+                    // `Foo { a, b }` when it should have been `Foo(a, b)`.\n+                    i.delay_as_bug();\n+                    u.delay_as_bug();\n+                    e.emit();\n+                } else {\n+                    i.emit();\n+                    u.emit();\n+                }\n+            }\n+            (None, Some(mut err)) | (Some(mut err), None) => {\n+                err.emit();\n+            }\n+            (None, None) => {}\n         }\n         no_field_errors\n     }\n@@ -1154,7 +1175,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         inexistent_fields: &[Ident],\n         unmentioned_fields: &mut Vec<Ident>,\n         variant: &ty::VariantDef,\n-    ) {\n+    ) -> DiagnosticBuilder<'tcx> {\n         let tcx = self.tcx;\n         let (field_names, t, plural) = if inexistent_fields.len() == 1 {\n             (format!(\"a field named `{}`\", inexistent_fields[0]), \"this\", \"\")\n@@ -1221,15 +1242,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     it explicitly.\",\n             );\n         }\n-        err.emit();\n+        err\n+    }\n+\n+    fn error_tuple_variant_as_struct_pat(\n+        &self,\n+        pat: &Pat<'_>,\n+        fields: &'tcx [hir::FieldPat<'tcx>],\n+        variant: &ty::VariantDef,\n+    ) -> Option<DiagnosticBuilder<'tcx>> {\n+        if let (CtorKind::Fn, PatKind::Struct(qpath, ..)) = (variant.ctor_kind, &pat.kind) {\n+            let path = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n+                s.print_qpath(qpath, false)\n+            });\n+            let mut err = struct_span_err!(\n+                self.tcx.sess,\n+                pat.span,\n+                E0769,\n+                \"tuple variant `{}` written as struct variant\",\n+                path\n+            );\n+            let (sugg, appl) = if fields.len() == variant.fields.len() {\n+                (\n+                    fields\n+                        .iter()\n+                        .map(|f| match self.tcx.sess.source_map().span_to_snippet(f.pat.span) {\n+                            Ok(f) => f,\n+                            Err(_) => rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n+                                s.print_pat(f.pat)\n+                            }),\n+                        })\n+                        .collect::<Vec<String>>()\n+                        .join(\", \"),\n+                    Applicability::MachineApplicable,\n+                )\n+            } else {\n+                (\n+                    variant.fields.iter().map(|_| \"_\").collect::<Vec<&str>>().join(\", \"),\n+                    Applicability::MaybeIncorrect,\n+                )\n+            };\n+            err.span_suggestion(\n+                pat.span,\n+                \"use the tuple variant pattern syntax instead\",\n+                format!(\"{}({})\", path, sugg),\n+                appl,\n+            );\n+            return Some(err);\n+        }\n+        None\n     }\n \n     fn error_unmentioned_fields(\n         &self,\n         span: Span,\n         unmentioned_fields: &[Ident],\n-        variant: &ty::VariantDef,\n-    ) {\n+    ) -> DiagnosticBuilder<'tcx> {\n         let field_names = if unmentioned_fields.len() == 1 {\n             format!(\"field `{}`\", unmentioned_fields[0])\n         } else {\n@@ -1248,9 +1316,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             field_names\n         );\n         diag.span_label(span, format!(\"missing {}\", field_names));\n-        if variant.ctor_kind == CtorKind::Fn {\n-            diag.note(\"trying to match a tuple variant with a struct variant pattern\");\n-        }\n         if self.tcx.sess.teach(&diag.get_code().unwrap()) {\n             diag.note(\n                 \"This error indicates that a pattern for a struct fails to specify a \\\n@@ -1259,7 +1324,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ignore unwanted fields.\",\n             );\n         }\n-        diag.emit();\n+        diag\n     }\n \n     fn check_pat_box("}, {"sha": "40304a674a63365b6e6321fd16128427b0ce0326", "filename": "src/test/ui/missing/missing-fields-in-struct-pattern.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Ftest%2Fui%2Fmissing%2Fmissing-fields-in-struct-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Ftest%2Fui%2Fmissing%2Fmissing-fields-in-struct-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-fields-in-struct-pattern.rs?ref=5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "patch": "@@ -2,8 +2,7 @@ struct S(usize, usize, usize, usize);\n \n fn main() {\n     if let S { a, b, c, d } = S(1, 2, 3, 4) {\n-    //~^ ERROR struct `S` does not have fields named `a`, `b`, `c`, `d` [E0026]\n-    //~| ERROR pattern does not mention fields `0`, `1`, `2`, `3` [E0027]\n+    //~^ ERROR tuple variant `S` written as struct variant\n         println!(\"hi\");\n     }\n }"}, {"sha": "6583524aad18f9ba401e3a9e9310549adaf2a9ad", "filename": "src/test/ui/missing/missing-fields-in-struct-pattern.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Ftest%2Fui%2Fmissing%2Fmissing-fields-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Ftest%2Fui%2Fmissing%2Fmissing-fields-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-fields-in-struct-pattern.stderr?ref=5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "patch": "@@ -1,18 +1,9 @@\n-error[E0026]: struct `S` does not have fields named `a`, `b`, `c`, `d`\n-  --> $DIR/missing-fields-in-struct-pattern.rs:4:16\n-   |\n-LL |     if let S { a, b, c, d } = S(1, 2, 3, 4) {\n-   |                ^  ^  ^  ^ struct `S` does not have these fields\n-\n-error[E0027]: pattern does not mention fields `0`, `1`, `2`, `3`\n+error[E0769]: tuple variant `S` written as struct variant\n   --> $DIR/missing-fields-in-struct-pattern.rs:4:12\n    |\n LL |     if let S { a, b, c, d } = S(1, 2, 3, 4) {\n-   |            ^^^^^^^^^^^^^^^^ missing fields `0`, `1`, `2`, `3`\n-   |\n-   = note: trying to match a tuple variant with a struct variant pattern\n+   |            ^^^^^^^^^^^^^^^^ help: use the tuple variant pattern syntax instead: `S(a, b, c, d)`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0026, E0027.\n-For more information about an error, try `rustc --explain E0026`.\n+For more information about this error, try `rustc --explain E0769`."}, {"sha": "cbd39f5f9e6ed5c842acc199414cfb3063475edd", "filename": "src/test/ui/type/type-check/issue-41314.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-41314.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-41314.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-41314.rs?ref=5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "patch": "@@ -4,7 +4,7 @@ enum X {\n \n fn main() {\n     match X::Y(0) {\n-        X::Y { number } => {} //~ ERROR does not have a field named `number`\n-        //~^ ERROR pattern does not mention field `0`\n+        X::Y { number } => {}\n+        //~^ ERROR tuple variant `X::Y` written as struct variant\n     }\n }"}, {"sha": "bd4d2071c2059ac2c9208a87442863114340b098", "filename": "src/test/ui/type/type-check/issue-41314.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-41314.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-41314.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-41314.stderr?ref=5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "patch": "@@ -1,18 +1,9 @@\n-error[E0026]: variant `X::Y` does not have a field named `number`\n-  --> $DIR/issue-41314.rs:7:16\n-   |\n-LL |         X::Y { number } => {}\n-   |                ^^^^^^ variant `X::Y` does not have this field\n-\n-error[E0027]: pattern does not mention field `0`\n+error[E0769]: tuple variant `X::Y` written as struct variant\n   --> $DIR/issue-41314.rs:7:9\n    |\n LL |         X::Y { number } => {}\n-   |         ^^^^^^^^^^^^^^^ missing field `0`\n-   |\n-   = note: trying to match a tuple variant with a struct variant pattern\n+   |         ^^^^^^^^^^^^^^^ help: use the tuple variant pattern syntax instead: `X::Y(number)`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0026, E0027.\n-For more information about an error, try `rustc --explain E0026`.\n+For more information about this error, try `rustc --explain E0769`."}, {"sha": "48654347285d3be45c7a97d9f4641788e03ef972", "filename": "src/test/ui/union/union-fields-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Ftest%2Fui%2Funion%2Funion-fields-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5daedea3dbeb8fb2639d3d142b008135f4fd2b43/src%2Ftest%2Fui%2Funion%2Funion-fields-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-2.stderr?ref=5daedea3dbeb8fb2639d3d142b008135f4fd2b43", "patch": "@@ -48,18 +48,18 @@ error: union patterns should have exactly one field\n LL |     let U { a, b } = u;\n    |         ^^^^^^^^^^\n \n-error[E0026]: union `U` does not have a field named `c`\n-  --> $DIR/union-fields-2.rs:18:19\n-   |\n-LL |     let U { a, b, c } = u;\n-   |                   ^ union `U` does not have this field\n-\n error: union patterns should have exactly one field\n   --> $DIR/union-fields-2.rs:18:9\n    |\n LL |     let U { a, b, c } = u;\n    |         ^^^^^^^^^^^^^\n \n+error[E0026]: union `U` does not have a field named `c`\n+  --> $DIR/union-fields-2.rs:18:19\n+   |\n+LL |     let U { a, b, c } = u;\n+   |                   ^ union `U` does not have this field\n+\n error: union patterns should have exactly one field\n   --> $DIR/union-fields-2.rs:20:9\n    |"}]}