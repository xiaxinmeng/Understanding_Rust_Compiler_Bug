{"sha": "a62c4aa03a3ca224442443dc77cf87803259388d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MmM0YWEwM2EzY2EyMjQ0NDI0NDNkYzc3Y2Y4NzgwMzI1OTM4OGQ=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-06-23T00:27:58Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-06-23T00:27:58Z"}, "message": "Fix rustdoc and remove default impl for FnHeader", "tree": {"sha": "77c5ef08efd73c71d7220e8956137c633e2f42f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77c5ef08efd73c71d7220e8956137c633e2f42f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a62c4aa03a3ca224442443dc77cf87803259388d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a62c4aa03a3ca224442443dc77cf87803259388d", "html_url": "https://github.com/rust-lang/rust/commit/a62c4aa03a3ca224442443dc77cf87803259388d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a62c4aa03a3ca224442443dc77cf87803259388d/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a310abf795a719ed816ab012bfdd23617239180", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a310abf795a719ed816ab012bfdd23617239180", "html_url": "https://github.com/rust-lang/rust/commit/9a310abf795a719ed816ab012bfdd23617239180"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "5e41c51abd98c2e8c596f25f3a386e3257c5cd5f", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a62c4aa03a3ca224442443dc77cf87803259388d/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62c4aa03a3ca224442443dc77cf87803259388d/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a62c4aa03a3ca224442443dc77cf87803259388d", "patch": "@@ -2024,17 +2024,6 @@ pub struct FnHeader {\n     pub abi: Abi,\n }\n \n-impl Default for FnHeader {\n-    fn default() -> FnHeader {\n-        FnHeader {\n-            unsafety: Unsafety::Normal,\n-            constness: Constness::NotConst,\n-            asyncness: IsAsync::NotAsync,\n-            abi: Abi::Rust,\n-        }\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Item_ {\n     /// An `extern crate` item, with optional *original* crate name if the crate was renamed."}, {"sha": "51a7504efcfcb2e5aa55905b5f731de61b422508", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a62c4aa03a3ca224442443dc77cf87803259388d/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62c4aa03a3ca224442443dc77cf87803259388d/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=a62c4aa03a3ca224442443dc77cf87803259388d", "patch": "@@ -459,7 +459,12 @@ impl<'a> State<'a> {\n             hir::ForeignItemFn(ref decl, ref arg_names, ref generics) => {\n                 self.head(\"\")?;\n                 self.print_fn(decl,\n-                              hir::FnHeader::default(),\n+                              hir::FnHeader {\n+                                  unsafety: hir::Unsafety::Normal,\n+                                  constness: hir::Constness::NotConst,\n+                                  abi: Abi::Rust,\n+                                  asyncness: hir::IsAsync::NotAsync,\n+                              },\n                               Some(item.name),\n                               generics,\n                               &item.vis,\n@@ -2253,8 +2258,10 @@ impl<'a> State<'a> {\n         };\n         self.print_fn(decl,\n                       hir::FnHeader {\n-                          unsafety, abi,\n-                          ..hir::FnHeader::default()\n+                          unsafety,\n+                          abi,\n+                          constness: hir::Constness::NotConst,\n+                          asyncness: hir::IsAsync::NotAsync,\n                       },\n                       name,\n                       &generics,"}, {"sha": "ad7389db729ec7f3151300a6ecc5f24c933a23e1", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62c4aa03a3ca224442443dc77cf87803259388d/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62c4aa03a3ca224442443dc77cf87803259388d/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a62c4aa03a3ca224442443dc77cf87803259388d", "patch": "@@ -202,7 +202,7 @@ fn build_external_function(cx: &DocContext, did: DefId) -> clean::Function {\n             unsafety: sig.unsafety(),\n             abi: sig.abi(),\n             constness,\n-            ..hir::FnHeader::default()\n+            asyncness: hir::IsAsync::NotAsync,\n         }\n     }\n }"}, {"sha": "057e7f3ab843354d88dc3d4f15fe261cee302087", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a62c4aa03a3ca224442443dc77cf87803259388d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62c4aa03a3ca224442443dc77cf87803259388d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a62c4aa03a3ca224442443dc77cf87803259388d", "patch": "@@ -2457,7 +2457,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                             unsafety: sig.unsafety(),\n                             abi: sig.abi(),\n                             constness,\n-                            ..hir::FnHeader::default()\n+                            asyncness: hir::IsAsync::NotAsync,\n                         }\n                     })\n                 } else {\n@@ -2467,7 +2467,8 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                         header: hir::FnHeader {\n                             unsafety: sig.unsafety(),\n                             abi: sig.abi(),\n-                            ..hir::FnHeader::default()\n+                            constness: hir::Constness::NotConst,\n+                            asyncness: hir::IsAsync::NotAsync,\n                         }\n                     })\n                 }\n@@ -4007,7 +4008,12 @@ impl Clean<Item> for hir::ForeignItem {\n                 ForeignFunctionItem(Function {\n                     decl,\n                     generics,\n-                    header: hir::FnHeader::default(),\n+                    header: hir::FnHeader {\n+                        unsafety: hir::Unsafety::Unsafe,\n+                        abi: Abi::Rust,\n+                        constness: hir::Constness::NotConst,\n+                        asyncness: hir::IsAsync::NotAsync,\n+                    },\n                 })\n             }\n             hir::ForeignItemStatic(ref ty, mutbl) => {"}, {"sha": "f7be4f58dfb577e2bcd55f473f66695e160dd580", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a62c4aa03a3ca224442443dc77cf87803259388d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62c4aa03a3ca224442443dc77cf87803259388d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a62c4aa03a3ca224442443dc77cf87803259388d", "patch": "@@ -2577,20 +2577,20 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     let name_len = format!(\"{}{}{}{}{:#}fn {}{:#}\",\n                            VisSpace(&it.visibility),\n                            ConstnessSpace(f.header.constness),\n-                           AsyncSpace(f.header.asyncness),\n                            UnsafetySpace(f.header.unsafety),\n+                           AsyncSpace(f.header.asyncness),\n                            AbiSpace(f.header.abi),\n                            it.name.as_ref().unwrap(),\n                            f.generics).len();\n     write!(w, \"{}<pre class='rust fn'>\", render_spotlight_traits(it)?)?;\n     render_attributes(w, it)?;\n     write!(w,\n-           \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n+           \"{vis}{constness}{unsafety}{asyncness}{abi}fn \\\n            {name}{generics}{decl}{where_clause}</pre>\",\n            vis = VisSpace(&it.visibility),\n            constness = ConstnessSpace(f.header.constness),\n-           asyncness = AsyncSpace(f.header.asyncness),\n            unsafety = UnsafetySpace(f.header.unsafety),\n+           asyncness = AsyncSpace(f.header.asyncness),\n            abi = AbiSpace(f.header.abi),\n            name = it.name.as_ref().unwrap(),\n            generics = f.generics,\n@@ -3024,10 +3024,11 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                 href(did).map(|p| format!(\"{}#{}.{}\", p.0, ty, name)).unwrap_or(anchor)\n             }\n         };\n-        let mut head_len = format!(\"{}{}{}{:#}fn {}{:#}\",\n+        let mut head_len = format!(\"{}{}{}{}{:#}fn {}{:#}\",\n                                    VisSpace(&meth.visibility),\n                                    ConstnessSpace(header.constness),\n                                    UnsafetySpace(header.unsafety),\n+                                   AsyncSpace(header.asyncness),\n                                    AbiSpace(header.abi),\n                                    name,\n                                    *g).len();\n@@ -3038,11 +3039,12 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n             (0, true)\n         };\n         render_attributes(w, meth)?;\n-        write!(w, \"{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n+        write!(w, \"{}{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n                VisSpace(&meth.visibility),\n                ConstnessSpace(header.constness),\n                UnsafetySpace(header.unsafety),\n+               AsyncSpace(header.asyncness),\n                AbiSpace(header.abi),\n                href = href,\n                name = name,"}]}