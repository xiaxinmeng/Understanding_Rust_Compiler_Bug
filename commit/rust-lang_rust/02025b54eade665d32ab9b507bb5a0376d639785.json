{"sha": "02025b54eade665d32ab9b507bb5a0376d639785", "node_id": "C_kwDOAAsO6NoAKDAyMDI1YjU0ZWFkZTY2NWQzMmFiOWI1MDdiYjVhMDM3NmQ2Mzk3ODU", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-09-23T11:40:20Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-11-05T22:56:20Z"}, "message": "Use `FmtPrinter` instead of creating `Instance`", "tree": {"sha": "87a105fbfb64d5293cf1a1d12b0ecfe53e16745d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87a105fbfb64d5293cf1a1d12b0ecfe53e16745d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02025b54eade665d32ab9b507bb5a0376d639785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02025b54eade665d32ab9b507bb5a0376d639785", "html_url": "https://github.com/rust-lang/rust/commit/02025b54eade665d32ab9b507bb5a0376d639785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02025b54eade665d32ab9b507bb5a0376d639785/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ec75da7cc466bb4fa61896489e5709ac12c0f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ec75da7cc466bb4fa61896489e5709ac12c0f5", "html_url": "https://github.com/rust-lang/rust/commit/d1ec75da7cc466bb4fa61896489e5709ac12c0f5"}], "stats": {"total": 189, "additions": 156, "deletions": 33}, "files": [{"sha": "52099102dc20a74034c67381df0255969fe7da31", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/02025b54eade665d32ab9b507bb5a0376d639785/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02025b54eade665d32ab9b507bb5a0376d639785/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=02025b54eade665d32ab9b507bb5a0376d639785", "patch": "@@ -22,7 +22,9 @@ use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKin\n use rustc_middle::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::print::with_crate_prefix;\n-use rustc_middle::ty::{self, DefIdTree, GenericArgKind, ToPredicate, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{\n+    self, DefIdTree, GenericArg, GenericArgKind, ToPredicate, Ty, TyCtxt, TypeVisitable,\n+};\n use rustc_middle::ty::{IsSuggestable, ToPolyTraitRef};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Symbol;\n@@ -283,7 +285,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ) {\n                     return None;\n                 }\n-\n                 span = item_name.span;\n \n                 // Don't show generic arguments when the method can't be found in any implementation (#81576).\n@@ -407,35 +408,41 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             (ty::Adt(def, _), ty::Adt(def_actual, substs)) if def == def_actual => {\n                                 // If there are any inferred arguments, (`{integer}`), we should replace\n                                 // them with underscores to allow the compiler to infer them\n-                                let substs = substs\n+                                let infer_substs: Vec<GenericArg<'_>> = substs\n                                     .into_iter()\n-                                    .filter(|arg| !arg.is_suggestable(tcx, true))\n-                                    .map(|arg| match arg.unpack() {\n-                                        GenericArgKind::Lifetime(_) => self\n-                                            .next_region_var(RegionVariableOrigin::MiscVariable(\n-                                                rustc_span::DUMMY_SP,\n-                                            ))\n-                                            .into(),\n-                                        GenericArgKind::Type(_) => self\n-                                            .next_ty_var(TypeVariableOrigin {\n-                                                span: rustc_span::DUMMY_SP,\n-                                                kind: TypeVariableOriginKind::MiscVariable,\n-                                            })\n-                                            .into(),\n-                                        GenericArgKind::Const(arg) => self\n-                                            .next_const_var(\n-                                                arg.ty(),\n-                                                ConstVariableOrigin {\n+                                    .map(|arg| {\n+                                        if !arg.is_suggestable(tcx, true) {\n+                                            match arg.unpack() {\n+                                            GenericArgKind::Lifetime(_) => self\n+                                                .next_region_var(RegionVariableOrigin::MiscVariable(\n+                                                    rustc_span::DUMMY_SP,\n+                                                ))\n+                                                .into(),\n+                                            GenericArgKind::Type(_) => self\n+                                                .next_ty_var(TypeVariableOrigin {\n                                                     span: rustc_span::DUMMY_SP,\n-                                                    kind: ConstVariableOriginKind::MiscVariable,\n-                                                },\n-                                            )\n-                                            .into(),\n+                                                    kind: TypeVariableOriginKind::MiscVariable,\n+                                                })\n+                                                .into(),\n+                                            GenericArgKind::Const(arg) => self\n+                                                .next_const_var(\n+                                                    arg.ty(),\n+                                                    ConstVariableOrigin {\n+                                                        span: rustc_span::DUMMY_SP,\n+                                                        kind: ConstVariableOriginKind::MiscVariable,\n+                                                    },\n+                                                )\n+                                                .into(),\n+                                            }\n+                                        } else {\n+                                            arg\n+                                        }\n                                     })\n                                     .collect::<Vec<_>>();\n-                                format!(\n-                                    \"{}\",\n-                                    ty::Instance::new(def_actual.did(), tcx.intern_substs(&substs))\n+\n+                                tcx.value_path_str_with_substs(\n+                                    def_actual.did(),\n+                                    tcx.intern_substs(&infer_substs),\n                                 )\n                             }\n                             _ => self.ty_to_value_string(ty.peel_refs()),\n@@ -1861,7 +1868,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Print out the type for use in value namespace.\n     fn ty_to_value_string(&self, ty: Ty<'tcx>) -> String {\n         match ty.kind() {\n-            ty::Adt(def, substs) => format!(\"{}\", ty::Instance::new(def.did(), substs)),\n+            ty::Adt(def, substs) => self.tcx.def_path_str_with_substs(def.did(), substs),\n             _ => self.ty_to_string(ty),\n         }\n     }"}, {"sha": "a0efff14f1c8bba2e7952520b5c75febc335d883", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02025b54eade665d32ab9b507bb5a0376d639785/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02025b54eade665d32ab9b507bb5a0376d639785/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=02025b54eade665d32ab9b507bb5a0376d639785", "patch": "@@ -1659,6 +1659,12 @@ impl<'t> TyCtxt<'t> {\n         debug!(\"def_path_str: def_id={:?}, ns={:?}\", def_id, ns);\n         FmtPrinter::new(self, ns).print_def_path(def_id, substs).unwrap().into_buffer()\n     }\n+\n+    pub fn value_path_str_with_substs(self, def_id: DefId, substs: &'t [GenericArg<'t>]) -> String {\n+        let ns = guess_def_namespace(self, def_id);\n+        debug!(\"value_path_str: def_id={:?}, ns={:?}\", def_id, ns);\n+        FmtPrinter::new(self, ns).print_value_path(def_id, substs).unwrap().into_buffer()\n+    }\n }\n \n impl fmt::Write for FmtPrinter<'_, '_> {"}, {"sha": "213d1c72f9ae8b61cf0dfbcf7cfd30639ea6b3e9", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02025b54eade665d32ab9b507bb5a0376d639785/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02025b54eade665d32ab9b507bb5a0376d639785/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs?ref=02025b54eade665d32ab9b507bb5a0376d639785", "patch": "@@ -2,10 +2,25 @@ struct GenericAssocMethod<T>(T);\n \n impl<T> GenericAssocMethod<T> {\n     fn default_hello() {}\n+    fn self_ty_hello(_: T) {}\n+    fn self_ty_ref_hello(_: &T) {}\n }\n \n fn main() {\n-    let x = GenericAssocMethod(33i32);\n+    // Test for inferred types\n+    let x = GenericAssocMethod(33);\n     x.default_hello();\n     //~^ ERROR no method named `default_hello` found\n+    x.self_ty_ref_hello();\n+    //~^ ERROR no method named `self_ty_ref_hello` found\n+    x.self_ty_hello();\n+    //~^ ERROR no method named `self_ty_hello` found\n+    // Test for known types\n+    let y = GenericAssocMethod(33i32);\n+    y.default_hello();\n+    //~^ ERROR no method named `default_hello` found\n+    y.self_ty_ref_hello();\n+    //~^ ERROR no method named `self_ty_ref_hello` found\n+    y.self_ty_hello();\n+    //~^ ERROR no method named `self_ty_hello` found\n }"}, {"sha": "c6d9122228acc95b4a0d7f9feeaed905984fed6b", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.stderr", "status": "modified", "additions": 99, "deletions": 4, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/02025b54eade665d32ab9b507bb5a0376d639785/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02025b54eade665d32ab9b507bb5a0376d639785/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr?ref=02025b54eade665d32ab9b507bb5a0376d639785", "patch": "@@ -1,5 +1,5 @@\n-error[E0599]: no method named `default_hello` found for struct `GenericAssocMethod<i32>` in the current scope\n-  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:9:7\n+error[E0599]: no method named `default_hello` found for struct `GenericAssocMethod<{integer}>` in the current scope\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:12:7\n    |\n LL | struct GenericAssocMethod<T>(T);\n    | ---------------------------- method `default_hello` not found for this struct\n@@ -8,7 +8,7 @@ LL |     x.default_hello();\n    |     --^^^^^^^^^^^^^\n    |     | |\n    |     | this is an associated function, not a method\n-   |     help: use associated function syntax instead: `GenericAssocMethod::default_hello`\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<_>::default_hello`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n@@ -17,6 +17,101 @@ note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n LL |     fn default_hello() {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0599]: no method named `self_ty_ref_hello` found for struct `GenericAssocMethod<{integer}>` in the current scope\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:14:7\n+   |\n+LL | struct GenericAssocMethod<T>(T);\n+   | ---------------------------- method `self_ty_ref_hello` not found for this struct\n+...\n+LL |     x.self_ty_ref_hello();\n+   |     --^^^^^^^^^^^^^^^^^\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<_>::self_ty_ref_hello`\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:6:5\n+   |\n+LL |     fn self_ty_ref_hello(_: &T) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0599]: no method named `self_ty_hello` found for struct `GenericAssocMethod<{integer}>` in the current scope\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:16:7\n+   |\n+LL | struct GenericAssocMethod<T>(T);\n+   | ---------------------------- method `self_ty_hello` not found for this struct\n+...\n+LL |     x.self_ty_hello();\n+   |     --^^^^^^^^^^^^^\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<_>::self_ty_hello`\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:5:5\n+   |\n+LL |     fn self_ty_hello(_: T) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0599]: no method named `default_hello` found for struct `GenericAssocMethod<i32>` in the current scope\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:20:7\n+   |\n+LL | struct GenericAssocMethod<T>(T);\n+   | ---------------------------- method `default_hello` not found for this struct\n+...\n+LL |     y.default_hello();\n+   |     --^^^^^^^^^^^^^\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::default_hello`\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:4:5\n+   |\n+LL |     fn default_hello() {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error[E0599]: no method named `self_ty_ref_hello` found for struct `GenericAssocMethod<i32>` in the current scope\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:22:7\n+   |\n+LL | struct GenericAssocMethod<T>(T);\n+   | ---------------------------- method `self_ty_ref_hello` not found for this struct\n+...\n+LL |     y.self_ty_ref_hello();\n+   |     --^^^^^^^^^^^^^^^^^\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::self_ty_ref_hello`\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:6:5\n+   |\n+LL |     fn self_ty_ref_hello(_: &T) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0599]: no method named `self_ty_hello` found for struct `GenericAssocMethod<i32>` in the current scope\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:24:7\n+   |\n+LL | struct GenericAssocMethod<T>(T);\n+   | ---------------------------- method `self_ty_hello` not found for this struct\n+...\n+LL |     y.self_ty_hello();\n+   |     --^^^^^^^^^^^^^\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::self_ty_hello`\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:5:5\n+   |\n+LL |     fn self_ty_hello(_: T) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}]}