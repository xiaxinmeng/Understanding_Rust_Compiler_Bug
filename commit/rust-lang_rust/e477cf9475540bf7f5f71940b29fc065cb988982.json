{"sha": "e477cf9475540bf7f5f71940b29fc065cb988982", "node_id": "C_kwDOAAsO6NoAKGU0NzdjZjk0NzU1NDBiZjdmNWY3MTk0MGIyOWZjMDY1Y2I5ODg5ODI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-08T02:54:59Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-23T14:46:59Z"}, "message": "Suggest coercion of `Result` using `?`\n\nFix #47560.", "tree": {"sha": "fabee83abc3852c1930ec544b5f112f61845e3a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fabee83abc3852c1930ec544b5f112f61845e3a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e477cf9475540bf7f5f71940b29fc065cb988982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e477cf9475540bf7f5f71940b29fc065cb988982", "html_url": "https://github.com/rust-lang/rust/commit/e477cf9475540bf7f5f71940b29fc065cb988982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e477cf9475540bf7f5f71940b29fc065cb988982/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19423b59440f464c6cbe6be442d447e37b50fe3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/19423b59440f464c6cbe6be442d447e37b50fe3c", "html_url": "https://github.com/rust-lang/rust/commit/19423b59440f464c6cbe6be442d447e37b50fe3c"}], "stats": {"total": 114, "additions": 113, "deletions": 1}, "files": [{"sha": "752e3f79d4abf2545a00bbd5de280dc54a1f1b15", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e477cf9475540bf7f5f71940b29fc065cb988982/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e477cf9475540bf7f5f71940b29fc065cb988982/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=e477cf9475540bf7f5f71940b29fc065cb988982", "patch": "@@ -45,7 +45,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::Expr;\n use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::{Coercion, InferOk, InferResult};\n+use rustc_infer::infer::{Coercion, InferOk, InferResult, TyCtxtInferExt};\n use rustc_infer::traits::Obligation;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::{\n@@ -1565,6 +1565,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             && let hir::ExprKind::Loop(loop_blk, ..) = expression.kind {\n                               intravisit::walk_block(& mut visitor, loop_blk);\n                         }\n+                        if let Some(expr) = expression {\n+                            self.note_result_coercion(fcx, &mut err, expr, expected, found);\n+                        }\n                     }\n                     ObligationCauseCode::ReturnValue(id) => {\n                         err = self.report_return_mismatched_types(\n@@ -1581,6 +1584,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             let id = fcx.tcx.hir().parent_id(id);\n                             unsized_return = self.is_return_ty_unsized(fcx, id);\n                         }\n+                        if let Some(expr) = expression {\n+                            self.note_result_coercion(fcx, &mut err, expr, expected, found);\n+                        }\n                     }\n                     _ => {\n                         err = fcx.err_ctxt().report_mismatched_types(\n@@ -1619,6 +1625,47 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             }\n         }\n     }\n+\n+    fn note_result_coercion(\n+        &self,\n+        fcx: &FnCtxt<'_, 'tcx>,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'tcx>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) {\n+        let ty::Adt(e, substs_e) = expected.kind() else { return; };\n+        let ty::Adt(f, substs_f) = found.kind() else { return; };\n+        if e.did() != f.did() {\n+            return;\n+        }\n+        if Some(e.did()) != fcx.tcx.get_diagnostic_item(sym::Result) {\n+            return;\n+        }\n+        let e = substs_e.type_at(1);\n+        let f = substs_f.type_at(1);\n+        if fcx\n+            .tcx\n+            .infer_ctxt()\n+            .build()\n+            .type_implements_trait(\n+                fcx.tcx.get_diagnostic_item(sym::Into).unwrap(),\n+                [fcx.tcx.erase_regions(f), fcx.tcx.erase_regions(e)],\n+                fcx.param_env,\n+            )\n+            .must_apply_modulo_regions()\n+        {\n+            err.multipart_suggestion(\n+                \"you can rely on the implicit conversion that `?` does to transform the error type\",\n+                vec![\n+                    (expr.span.shrink_to_lo(), \"Ok(\".to_string()),\n+                    (expr.span.shrink_to_hi(), \"?)\".to_string()),\n+                ],\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+    }\n+\n     fn note_unreachable_loop_return(\n         &self,\n         err: &mut Diagnostic,"}, {"sha": "91066262303ec89f749e9b9bc0cf7b413292a5c2", "filename": "tests/ui/type/type-check/coerce-result-return-value.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e477cf9475540bf7f5f71940b29fc065cb988982/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e477cf9475540bf7f5f71940b29fc065cb988982/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.fixed?ref=e477cf9475540bf7f5f71940b29fc065cb988982", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+struct A;\n+struct B;\n+impl From<A> for B {\n+    fn from(_: A) -> Self { B }\n+}\n+fn foo1(x: Result<(), A>) -> Result<(), B> {\n+    Ok(x?) //~ ERROR mismatched types\n+}\n+fn foo2(x: Result<(), A>) -> Result<(), B> {\n+    return Ok(x?); //~ ERROR mismatched types\n+}\n+fn main() {\n+    let _ = foo1(Ok(()));\n+    let _ = foo2(Ok(()));\n+}"}, {"sha": "9a71376f462dcf0277d58073ba21a9f88b9b8e65", "filename": "tests/ui/type/type-check/coerce-result-return-value.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e477cf9475540bf7f5f71940b29fc065cb988982/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e477cf9475540bf7f5f71940b29fc065cb988982/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.rs?ref=e477cf9475540bf7f5f71940b29fc065cb988982", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+struct A;\n+struct B;\n+impl From<A> for B {\n+    fn from(_: A) -> Self { B }\n+}\n+fn foo1(x: Result<(), A>) -> Result<(), B> {\n+    x //~ ERROR mismatched types\n+}\n+fn foo2(x: Result<(), A>) -> Result<(), B> {\n+    return x; //~ ERROR mismatched types\n+}\n+fn main() {\n+    let _ = foo1(Ok(()));\n+    let _ = foo2(Ok(()));\n+}"}, {"sha": "7aebc9dcc7ad813e486215975df09b394f8cb3d8", "filename": "tests/ui/type/type-check/coerce-result-return-value.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e477cf9475540bf7f5f71940b29fc065cb988982/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e477cf9475540bf7f5f71940b29fc065cb988982/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcoerce-result-return-value.stderr?ref=e477cf9475540bf7f5f71940b29fc065cb988982", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value.rs:8:5\n+   |\n+LL | fn foo1(x: Result<(), A>) -> Result<(), B> {\n+   |                              ------------- expected `Result<(), B>` because of return type\n+LL |     x\n+   |     ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected enum `Result<_, B>`\n+              found enum `Result<_, A>`\n+help: you can rely on the implicit conversion that `?` does to transform the error type\n+   |\n+LL |     Ok(x?)\n+   |     +++ ++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/coerce-result-return-value.rs:11:12\n+   |\n+LL | fn foo2(x: Result<(), A>) -> Result<(), B> {\n+   |                              ------------- expected `Result<(), B>` because of return type\n+LL |     return x;\n+   |            ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected enum `Result<_, B>`\n+              found enum `Result<_, A>`\n+help: you can rely on the implicit conversion that `?` does to transform the error type\n+   |\n+LL |     return Ok(x?);\n+   |            +++ ++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}