{"sha": "ebe0407dbf1e0e2135ca75c47d525f6217959eba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZTA0MDdkYmYxZTBlMjEzNWNhNzVjNDdkNTI1ZjYyMTc5NTllYmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-03-04T08:46:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-03-04T09:05:51Z"}, "message": "improve offset_from docs", "tree": {"sha": "fd0252b567cd77c54d1da22e793678e72a4b55cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd0252b567cd77c54d1da22e793678e72a4b55cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebe0407dbf1e0e2135ca75c47d525f6217959eba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe0407dbf1e0e2135ca75c47d525f6217959eba", "html_url": "https://github.com/rust-lang/rust/commit/ebe0407dbf1e0e2135ca75c47d525f6217959eba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebe0407dbf1e0e2135ca75c47d525f6217959eba/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "939b14334dfec68d85b01b62c1be0172cee03339", "url": "https://api.github.com/repos/rust-lang/rust/commits/939b14334dfec68d85b01b62c1be0172cee03339", "html_url": "https://github.com/rust-lang/rust/commit/939b14334dfec68d85b01b62c1be0172cee03339"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "62ca07fc5a4e20f677f2e4c10d2f8c6725d2e3d5", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ebe0407dbf1e0e2135ca75c47d525f6217959eba/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe0407dbf1e0e2135ca75c47d525f6217959eba/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=ebe0407dbf1e0e2135ca75c47d525f6217959eba", "patch": "@@ -320,25 +320,31 @@ impl<T: ?Sized> *const T {\n     /// * Both pointers must be *derived from* a pointer to the same object.\n     ///   (See below for an example.)\n     ///\n-    /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n-    ///\n     /// * The distance between the pointers, in bytes, must be an exact multiple\n     ///   of the size of `T`.\n     ///\n+    /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n+    ///\n     /// * The distance being in bounds cannot rely on \"wrapping around\" the address space.\n     ///\n-    /// The compiler and standard library generally try to ensure allocations\n-    /// never reach a size where an offset is a concern. For instance, `Vec`\n-    /// and `Box` ensure they never allocate more than `isize::MAX` bytes, so\n-    /// `ptr_into_vec.offset_from(vec.as_ptr())` is always safe.\n+    /// Rust types are never larger than `isize::MAX` and Rust allocations never wrap around the\n+    /// address space, so two pointers within some value of any Rust type `T` will always satisfy\n+    /// the last two conditions. The standard library also generally ensures that allocations\n+    /// never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they\n+    /// never allocate more than `isize::MAX` bytes, so `ptr_into_vec.offset_from(vec.as_ptr())`\n+    /// always satisfies the last two conditions.\n     ///\n-    /// Most platforms fundamentally can't even construct such an allocation.\n+    /// Most platforms fundamentally can't even construct such a large allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n     /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n+    /// (Note that [`offset`] and [`add`] also have a similar limitation and hence cannot be used on\n+    /// such large allocations either.)\n+    ///\n+    /// [`add`]: #method.add\n     ///\n     /// # Panics\n     ///"}, {"sha": "a365b66d8fcf4d072fcc2ce5156f4ec4c4660465", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ebe0407dbf1e0e2135ca75c47d525f6217959eba/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe0407dbf1e0e2135ca75c47d525f6217959eba/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=ebe0407dbf1e0e2135ca75c47d525f6217959eba", "patch": "@@ -491,25 +491,31 @@ impl<T: ?Sized> *mut T {\n     /// * Both pointers must be *derived from* a pointer to the same object.\n     ///   (See below for an example.)\n     ///\n-    /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n-    ///\n     /// * The distance between the pointers, in bytes, must be an exact multiple\n     ///   of the size of `T`.\n     ///\n+    /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n+    ///\n     /// * The distance being in bounds cannot rely on \"wrapping around\" the address space.\n     ///\n-    /// The compiler and standard library generally try to ensure allocations\n-    /// never reach a size where an offset is a concern. For instance, `Vec`\n-    /// and `Box` ensure they never allocate more than `isize::MAX` bytes, so\n-    /// `ptr_into_vec.offset_from(vec.as_ptr())` is always safe.\n+    /// Rust types are never larger than `isize::MAX` and Rust allocations never wrap around the\n+    /// address space, so two pointers within some value of any Rust type `T` will always satisfy\n+    /// the last two conditions. The standard library also generally ensures that allocations\n+    /// never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they\n+    /// never allocate more than `isize::MAX` bytes, so `ptr_into_vec.offset_from(vec.as_ptr())`\n+    /// always satisfies the last two conditions.\n     ///\n-    /// Most platforms fundamentally can't even construct such an allocation.\n+    /// Most platforms fundamentally can't even construct such a large allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n     /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n+    /// (Note that [`offset`] and [`add`] also have a similar limitation and hence cannot be used on\n+    /// such large allocations either.)\n+    ///\n+    /// [`add`]: #method.add\n     ///\n     /// # Panics\n     ///"}]}