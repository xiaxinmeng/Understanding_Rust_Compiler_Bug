{"sha": "a97ce8d94b681f8fb23b70260a219e528047e52a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5N2NlOGQ5NGI2ODFmOGZiMjNiNzAyNjBhMjE5ZTUyODA0N2U1MmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-26T18:25:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-26T18:25:51Z"}, "message": "test floating point casting better", "tree": {"sha": "0aeb081049e482968facbaf431498dcc07067e8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aeb081049e482968facbaf431498dcc07067e8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a97ce8d94b681f8fb23b70260a219e528047e52a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a97ce8d94b681f8fb23b70260a219e528047e52a", "html_url": "https://github.com/rust-lang/rust/commit/a97ce8d94b681f8fb23b70260a219e528047e52a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a97ce8d94b681f8fb23b70260a219e528047e52a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d0a457c8b1750e82f19527b18b313f3514633f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0a457c8b1750e82f19527b18b313f3514633f0", "html_url": "https://github.com/rust-lang/rust/commit/0d0a457c8b1750e82f19527b18b313f3514633f0"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "39dc73ed189139f373107112f12bb3958feaafd7", "filename": "tests/run-pass/floats.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a97ce8d94b681f8fb23b70260a219e528047e52a/tests%2Frun-pass%2Ffloats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97ce8d94b681f8fb23b70260a219e528047e52a/tests%2Frun-pass%2Ffloats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloats.rs?ref=a97ce8d94b681f8fb23b70260a219e528047e52a", "patch": "@@ -1,37 +1,84 @@\n fn main() {\n+    // basic arithmetic\n     assert_eq!(6.0_f32*6.0_f32, 36.0_f32);\n     assert_eq!(6.0_f64*6.0_f64, 36.0_f64);\n     assert_eq!(-{5.0_f32}, -5.0_f32);\n+    assert_eq!(-{5.0_f64}, -5.0_f64);\n+    // infinities, NaN\n     assert!((5.0_f32/0.0).is_infinite());\n+    assert!((5.0_f64/0.0).is_infinite());\n     assert!((-5.0_f32).sqrt().is_nan());\n+    assert!((-5.0_f64).sqrt().is_nan());\n+    // byte-level transmute\n     let x: u64 = unsafe { std::mem::transmute(42.0_f64) };\n     let y: f64 = unsafe { std::mem::transmute(x) };\n     assert_eq!(y, 42.0_f64);\n+    let x: u32 = unsafe { std::mem::transmute(42.0_f32) };\n+    let y: f32 = unsafe { std::mem::transmute(x) };\n+    assert_eq!(y, 42.0_f32);\n \n+    // f32 casts\n     assert_eq!(5.0f32 as u32, 5);\n+    assert_eq!(-5.0f32 as u32, 0);\n     assert_eq!(5.0f32 as i32, 5);\n     assert_eq!(-5.0f32 as i32, -5);\n+    assert_eq!(std::f32::MAX as i32, i32::MAX);\n+    assert_eq!(std::f32::INFINITY as i32, i32::MAX);\n+    assert_eq!(std::f32::MAX as u32, u32::MAX);\n+    assert_eq!(std::f32::INFINITY as u32, u32::MAX);\n+    assert_eq!(std::f32::MIN as i32, i32::MIN);\n+    assert_eq!(std::f32::NEG_INFINITY as i32, i32::MIN);\n+    assert_eq!(std::f32::MIN as u32, 0);\n+    assert_eq!(std::f32::NEG_INFINITY as u32, 0);\n+    assert_eq!(std::f32::NAN as i32, 0);\n+    assert_eq!(std::f32::NAN as u32, 0);\n+    assert_eq!(u128::MAX as f32, std::f32::INFINITY);\n+    assert_eq!((u32::MAX-127) as f32 as u32, u32::MAX); // rounding loss\n+    assert_eq!((u32::MAX-128) as f32 as u32, u32::MAX-255); // rounding loss\n \n+    // f64 casts\n+    assert_eq!(5.0f64 as u64, 5);\n+    assert_eq!(-5.0f64 as u64, 0);\n+    assert_eq!(5.0f64 as i64, 5);\n+    assert_eq!(-5.0f64 as i64, -5);\n+    assert_eq!(std::f64::MAX as i64, i64::MAX);\n+    assert_eq!(std::f64::INFINITY as i64, i64::MAX);\n+    assert_eq!(std::f64::MAX as u64, u64::MAX);\n+    assert_eq!(std::f64::INFINITY as u64, u64::MAX);\n+    assert_eq!(std::f64::MIN as i64, i64::MIN);\n+    assert_eq!(std::f64::NEG_INFINITY as i64, i64::MIN);\n+    assert_eq!(std::f64::MIN as u64, 0);\n+    assert_eq!(std::f64::NEG_INFINITY as u64, 0);\n+    assert_eq!(std::f64::NAN as i64, 0);\n+    assert_eq!(std::f64::NAN as u64, 0);\n+    assert_eq!(u128::MAX as f64 as u128, u128::MAX);\n+    assert_eq!((u64::MAX-1023) as f64 as u64, u64::MAX); // rounding loss\n+    assert_eq!((u64::MAX-1024) as f64 as u64, u64::MAX-2047); // rounding loss\n+\n+    // f32 min/max\n     assert_eq!((1.0 as f32).max(-1.0), 1.0);\n     assert_eq!((1.0 as f32).min(-1.0), -1.0);\n     assert_eq!(std::f32::NAN.min(9.0), 9.0);\n     assert_eq!(std::f32::NAN.max(-9.0), -9.0);\n     assert_eq!((9.0 as f32).min(std::f32::NAN), 9.0);\n     assert_eq!((-9.0 as f32).max(std::f32::NAN), -9.0);\n \n+    // f64 min/max\n     assert_eq!((1.0 as f64).max(-1.0), 1.0);\n     assert_eq!((1.0 as f64).min(-1.0), -1.0);\n     assert_eq!(std::f64::NAN.min(9.0), 9.0);\n     assert_eq!(std::f64::NAN.max(-9.0), -9.0);\n     assert_eq!((9.0 as f64).min(std::f64::NAN), 9.0);\n     assert_eq!((-9.0 as f64).max(std::f64::NAN), -9.0);\n \n+    // f32 copysign\n     assert_eq!(3.5_f32.copysign(0.42), 3.5_f32);\n     assert_eq!(3.5_f32.copysign(-0.42), -3.5_f32);\n     assert_eq!((-3.5_f32).copysign(0.42), 3.5_f32);\n     assert_eq!((-3.5_f32).copysign(-0.42), -3.5_f32);\n     assert!(std::f32::NAN.copysign(1.0).is_nan());\n \n+    // f64 copysign\n     assert_eq!(3.5_f64.copysign(0.42), 3.5_f64);\n     assert_eq!(3.5_f64.copysign(-0.42), -3.5_f64);\n     assert_eq!((-3.5_f64).copysign(0.42), 3.5_f64);"}]}