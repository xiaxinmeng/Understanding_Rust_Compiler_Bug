{"sha": "5d415e8d080792615b424f3f0a931058519879b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNDE1ZThkMDgwNzkyNjE1YjQyNGYzZjBhOTMxMDU4NTE5ODc5YjU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-10-11T15:47:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-10-12T00:12:29Z"}, "message": "rustc: Handle #[inline(always)] at -O0\n\nThis commit updates the handling of `#[inline(always)]` functions at -O0 to\nensure that it's always inlined regardless of the number of codegen units used.\n\nCloses #45201", "tree": {"sha": "4f3742e49ab9837e3c9609d6d2f8b24cb4875e62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f3742e49ab9837e3c9609d6d2f8b24cb4875e62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d415e8d080792615b424f3f0a931058519879b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d415e8d080792615b424f3f0a931058519879b5", "html_url": "https://github.com/rust-lang/rust/commit/5d415e8d080792615b424f3f0a931058519879b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d415e8d080792615b424f3f0a931058519879b5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a47c9f870f13603a06ffe63ab4834fc716912843", "url": "https://api.github.com/repos/rust-lang/rust/commits/a47c9f870f13603a06ffe63ab4834fc716912843", "html_url": "https://github.com/rust-lang/rust/commit/a47c9f870f13603a06ffe63ab4834fc716912843"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "060f02ee23e0a83d3a9afe89c93eed138c992101", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5d415e8d080792615b424f3f0a931058519879b5/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d415e8d080792615b424f3f0a931058519879b5/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=5d415e8d080792615b424f3f0a931058519879b5", "patch": "@@ -31,7 +31,7 @@ use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::subst::{Subst, Substs};\n use syntax::ast;\n-use syntax::attr;\n+use syntax::attr::{self, InlineAttr};\n use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;\n use type_of;\n@@ -175,16 +175,32 @@ pub trait TransItemExt<'a, 'tcx>: fmt::Debug {\n \n         match *self.as_trans_item() {\n             TransItem::Fn(ref instance) => {\n-                if self.explicit_linkage(tcx).is_none() &&\n-                    common::requests_inline(tcx, instance)\n+                // If this function isn't inlined or otherwise has explicit\n+                // linkage, then we'll be creating a globally shared version.\n+                if self.explicit_linkage(tcx).is_some() ||\n+                    !common::requests_inline(tcx, instance)\n                 {\n-                    if inline_in_all_cgus {\n-                        InstantiationMode::LocalCopy\n-                    } else {\n+                    return InstantiationMode::GloballyShared  { may_conflict: false }\n+                }\n+\n+                // At this point we don't have explicit linkage and we're an\n+                // inlined function. If we're inlining into all CGUs then we'll\n+                // be creating a local copy per CGU\n+                if inline_in_all_cgus {\n+                    return InstantiationMode::LocalCopy\n+                }\n+\n+                // Finally, if this is `#[inline(always)]` we're sure to respect\n+                // that with an inline copy per CGU, but otherwise we'll be\n+                // creating one copy of this `#[inline]` function which may\n+                // conflict with upstream crates as it could be an exported\n+                // symbol.\n+                let attrs = instance.def.attrs(tcx);\n+                match attr::find_inline_attr(Some(tcx.sess.diagnostic()), &attrs) {\n+                    InlineAttr::Always => InstantiationMode::LocalCopy,\n+                    _ => {\n                         InstantiationMode::GloballyShared  { may_conflict: true }\n                     }\n-                } else {\n-                    InstantiationMode::GloballyShared  { may_conflict: false }\n                 }\n             }\n             TransItem::Static(..) => {"}, {"sha": "84464a627beb10906cd0500f17416439ada47010", "filename": "src/test/codegen-units/partitioning/local-inlining-but-not-all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d415e8d080792615b424f3f0a931058519879b5/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d415e8d080792615b424f3f0a931058519879b5/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs?ref=5d415e8d080792615b424f3f0a931058519879b5", "patch": "@@ -20,7 +20,7 @@\n mod inline {\n \n     //~ TRANS_ITEM fn local_inlining_but_not_all::inline[0]::inlined_function[0] @@ local_inlining_but_not_all-inline[External]\n-    #[inline(always)]\n+    #[inline]\n     pub fn inlined_function()\n     {\n "}, {"sha": "edf88a6327cd2e128779935a33a2420d8d113cb9", "filename": "src/test/run-make/inline-always-many-cgu/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d415e8d080792615b424f3f0a931058519879b5/src%2Ftest%2Frun-make%2Finline-always-many-cgu%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5d415e8d080792615b424f3f0a931058519879b5/src%2Ftest%2Frun-make%2Finline-always-many-cgu%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finline-always-many-cgu%2FMakefile?ref=5d415e8d080792615b424f3f0a931058519879b5", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2\n+\tif grep -w call $(TMPDIR)/*.ll; then \\\n+\t\techo \"found call instruction when one wasn't expected\"; \\\n+\t\texit 1; \\\n+\tfi"}, {"sha": "539dcdfa9b30b7bfff5f4e7a372b465df0e4f876", "filename": "src/test/run-make/inline-always-many-cgu/foo.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5d415e8d080792615b424f3f0a931058519879b5/src%2Ftest%2Frun-make%2Finline-always-many-cgu%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d415e8d080792615b424f3f0a931058519879b5/src%2Ftest%2Frun-make%2Finline-always-many-cgu%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finline-always-many-cgu%2Ffoo.rs?ref=5d415e8d080792615b424f3f0a931058519879b5", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+\n+pub mod a {\n+    #[inline(always)]\n+    pub fn foo() {\n+    }\n+\n+    pub fn bar() {\n+    }\n+}\n+\n+#[no_mangle]\n+pub fn bar() {\n+    a::foo();\n+}"}]}