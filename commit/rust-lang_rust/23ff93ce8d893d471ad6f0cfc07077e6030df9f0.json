{"sha": "23ff93ce8d893d471ad6f0cfc07077e6030df9f0", "node_id": "C_kwDOAAsO6NoAKDIzZmY5M2NlOGQ4OTNkNDcxYWQ2ZjBjZmMwNzA3N2U2MDMwZGY5ZjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-29T22:09:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-29T22:09:24Z"}, "message": "Rollup merge of #102659 - Mark-Simulacrum:relnotes, r=Mark-Simulacrum\n\n1.65.0 release notes\n\nr? `@cuviper` (since you're writing the blog)", "tree": {"sha": "f0d58dc363a80f63a96183de04510aab622f7a58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0d58dc363a80f63a96183de04510aab622f7a58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23ff93ce8d893d471ad6f0cfc07077e6030df9f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjXaSUCRBK7hj4Ov3rIwAANjoIAG0Gcq4uOmvbXHUpMaUGzEAt\nnaL3tPHcI1D5McvMcCs4aBtDyzNpSrqP+JzQyaVzKR+PIpF6cBwdXAYYNINy0hGI\nWugu6+206/lAxxHmLx14vioASkntoaDPAxZGcE/ijb9DelCQFBGlVwXQqlUehWji\nGq22LMUzKmAGskQq6j1/9MnHkDsyv3hLc66wnCXGEemk/zAFYqHjJ8xwf+7yb/hf\nsATar2ZClhpBzuIQNqD6yBoz3MkpJ43Q5HzvjV0eT8j06xl0946MsKsnwmGzc3iX\nXQw86aosX3Gc6bxyFqBqkKMMlsv53+PrKpGLe+/GIZEI0be9q5H9Ls4TvZsIgkw=\n=jzT4\n-----END PGP SIGNATURE-----\n", "payload": "tree f0d58dc363a80f63a96183de04510aab622f7a58\nparent 22e320b2c9b65447c84c4bb8ac1b4b77ae51f997\nparent 3f56a823f29e89014524ac268a30476e88a27d48\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667081364 +0200\ncommitter GitHub <noreply@github.com> 1667081364 +0200\n\nRollup merge of #102659 - Mark-Simulacrum:relnotes, r=Mark-Simulacrum\n\n1.65.0 release notes\n\nr? `@cuviper` (since you're writing the blog)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23ff93ce8d893d471ad6f0cfc07077e6030df9f0", "html_url": "https://github.com/rust-lang/rust/commit/23ff93ce8d893d471ad6f0cfc07077e6030df9f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23ff93ce8d893d471ad6f0cfc07077e6030df9f0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22e320b2c9b65447c84c4bb8ac1b4b77ae51f997", "url": "https://api.github.com/repos/rust-lang/rust/commits/22e320b2c9b65447c84c4bb8ac1b4b77ae51f997", "html_url": "https://github.com/rust-lang/rust/commit/22e320b2c9b65447c84c4bb8ac1b4b77ae51f997"}, {"sha": "3f56a823f29e89014524ac268a30476e88a27d48", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f56a823f29e89014524ac268a30476e88a27d48", "html_url": "https://github.com/rust-lang/rust/commit/3f56a823f29e89014524ac268a30476e88a27d48"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "a3df56f1d2afcaa4fea11229c9f32737867afb09", "filename": "RELEASES.md", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/23ff93ce8d893d471ad6f0cfc07077e6030df9f0/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/23ff93ce8d893d471ad6f0cfc07077e6030df9f0/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=23ff93ce8d893d471ad6f0cfc07077e6030df9f0", "patch": "@@ -1,3 +1,106 @@\n+Version 1.65.0 (2022-11-03)\n+==========================\n+\n+Language\n+--------\n+- [Error on `as` casts of enums with `#[non_exhaustive]` variants](https://github.com/rust-lang/rust/pull/92744/)\n+- [Stabilize `let else`](https://github.com/rust-lang/rust/pull/93628/)\n+- [Stabilize generic associated types (GATs)](https://github.com/rust-lang/rust/pull/96709/)\n+- [Add lints `let_underscore_drop`, `let_underscore_lock`, and `let_underscore_must_use` from Clippy](https://github.com/rust-lang/rust/pull/97739/)\n+- [Stabilize `break`ing from arbitrary labeled blocks (\"label-break-value\")](https://github.com/rust-lang/rust/pull/99332/)\n+- [Uninitialized integers, floats, and raw pointers are now considered immediate UB](https://github.com/rust-lang/rust/pull/98919/).\n+  Usage of `MaybeUninit` is the correct way to work with uninitialized memory.\n+- [Stabilize raw-dylib for Windows x86_64, aarch64, and thumbv7a](https://github.com/rust-lang/rust/pull/99916/)\n+- [Do not allow `Drop` impl on foreign ADTs](https://github.com/rust-lang/rust/pull/99576/)\n+\n+Compiler\n+--------\n+- [Stabilize -Csplit-debuginfo on Linux](https://github.com/rust-lang/rust/pull/98051/)\n+- [Use niche-filling optimization even when multiple variants have data](https://github.com/rust-lang/rust/pull/94075/)\n+- [Associated type projections are now verified to be well-formed prior to resolving the underlying type](https://github.com/rust-lang/rust/pull/99217/#issuecomment-1209365630)\n+- [Stringify non-shorthand visibility correctly](https://github.com/rust-lang/rust/pull/100350/)\n+- [Normalize struct field types when unsizing](https://github.com/rust-lang/rust/pull/101831/)\n+- [Update to LLVM 15](https://github.com/rust-lang/rust/pull/99464/)\n+- [Fix aarch64 call abi to correctly zeroext when needed](https://github.com/rust-lang/rust/pull/97800/)\n+- [debuginfo: Generalize C++-like encoding for enums](https://github.com/rust-lang/rust/pull/98393/)\n+- [Add `special_module_name` lint](https://github.com/rust-lang/rust/pull/94467/)\n+- [Add support for generating unique profraw files by default when using `-C instrument-coverage`](https://github.com/rust-lang/rust/pull/100384/)\n+- [Allow dynamic linking for iOS/tvOS targets](https://github.com/rust-lang/rust/pull/100636/)\n+\n+New targets:\n+\n+- [Add armv4t-none-eabi as a tier 3 target](https://github.com/rust-lang/rust/pull/100244/)\n+- [Add powerpc64-unknown-openbsd and riscv64-unknown-openbsd as tier 3 targets](https://github.com/rust-lang/rust/pull/101025/)\n+  - Refer to Rust's [platform support page][platform-support-doc] for more\n+    information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+\n+- [Don't generate `PartialEq::ne` in derive(PartialEq)](https://github.com/rust-lang/rust/pull/98655/)\n+- [Windows RNG: Use `BCRYPT_RNG_ALG_HANDLE` by default](https://github.com/rust-lang/rust/pull/101325/)\n+- [Forbid mixing `System` with direct system allocator calls](https://github.com/rust-lang/rust/pull/101394/)\n+- [Document no support for writing to non-blocking stdio/stderr](https://github.com/rust-lang/rust/pull/101416/)\n+- [`std::layout::Layout` size must not overflow `isize::MAX` when rounded up to `align`](https://github.com/rust-lang/rust/pull/95295)\n+  This also changes the safety conditions on `Layout::from_size_align_unchecked`.\n+\n+Stabilized APIs\n+---------------\n+\n+- [`std::backtrace::Backtrace`](https://doc.rust-lang.org/stable/std/backtrace/struct.Backtrace.html)\n+- [`Bound::as_ref`](https://doc.rust-lang.org/stable/std/ops/enum.Bound.html#method.as_ref)\n+- [`std::io::read_to_string`](https://doc.rust-lang.org/stable/std/io/fn.read_to_string.html)\n+- [`<*const T>::cast_mut`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.cast_mut)\n+- [`<*mut T>::cast_const`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.cast_const)\n+\n+These APIs are now stable in const contexts:\n+\n+- [`<*const T>::offset_from`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset_from)\n+- [`<*mut T>::offset_from`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset_from)\n+\n+Cargo\n+-----\n+\n+- [Apply GitHub fast path even for partial hashes](https://github.com/rust-lang/cargo/pull/10807/)\n+- [Do not add home bin path to PATH if it's already there](https://github.com/rust-lang/cargo/pull/11023/)\n+- [Take priority into account within the pending queue](https://github.com/rust-lang/cargo/pull/11032/).\n+  This slightly optimizes job scheduling by Cargo, with typically small improvements on larger crate graph builds.\n+\n+Compatibility Notes\n+-------------------\n+\n+- [`std::layout::Layout` size must not overflow `isize::MAX` when rounded up to `align`](https://github.com/rust-lang/rust/pull/95295).\n+  This also changes the safety conditions on `Layout::from_size_align_unchecked`.\n+- [`PollFn` now only implements `Unpin` if the closure is `Unpin`](https://github.com/rust-lang/rust/pull/102737).\n+  This is a possible breaking change if users were relying on the blanket unpin implementation.\n+  See discussion on the PR for details of why this change was made.\n+- [Drop ExactSizeIterator impl from std::char::EscapeAscii](https://github.com/rust-lang/rust/pull/99880)\n+  This is a backwards-incompatible change to the standard library's surface\n+  area, but is unlikely to affect real world usage.\n+- [Do not consider a single repeated lifetime eligible for elision in the return type](https://github.com/rust-lang/rust/pull/103450)\n+  This behavior was unintentionally changed in 1.64.0, and this release reverts that change by making this an error again.\n+- [Reenable disabled early syntax gates as future-incompatibility lints](https://github.com/rust-lang/rust/pull/99935/)\n+- [Update the minimum external LLVM to 13](https://github.com/rust-lang/rust/pull/100460/)\n+- [Don't duplicate file descriptors into stdio fds](https://github.com/rust-lang/rust/pull/101426/)\n+- [Sunset RLS](https://github.com/rust-lang/rust/pull/100863/)\n+- [Deny usage of `#![cfg_attr(..., crate_type = ...)]` to set the crate type](https://github.com/rust-lang/rust/pull/99784/)\n+  This strengthens the forward compatibility lint deprecated_cfg_attr_crate_type_name to deny.\n+- [`llvm-has-rust-patches` allows setting the build system to treat the LLVM as having Rust-specific patches](https://github.com/rust-lang/rust/pull/101072)\n+  This option may need to be set for distributions that are building Rust with a patched LLVM via `llvm-config`, not the built-in LLVM.\n+\n+Internal Changes\n+----------------\n+\n+These changes do not affect any public interfaces of Rust, but they represent\n+significant improvements to the performance or internals of rustc and related\n+tools.\n+\n+- [Add `x.sh` and `x.ps1` shell scripts](https://github.com/rust-lang/rust/pull/99992/)\n+- [compiletest: use target cfg instead of hard-coded tables](https://github.com/rust-lang/rust/pull/100260/)\n+- [Use object instead of LLVM for reading bitcode from rlibs](https://github.com/rust-lang/rust/pull/98100/)\n+- [Enable MIR inlining for optimized compilations](https://github.com/rust-lang/rust/pull/91743)\n+  This provides a 3-10% improvement in compiletimes for real world crates. See [perf results](https://perf.rust-lang.org/compare.html?start=aedf78e56b2279cc869962feac5153b6ba7001ed&end=0075bb4fad68e64b6d1be06bf2db366c30bc75e1&stat=instructions:u).\n+\n Version 1.64.0 (2022-09-22)\n ===========================\n "}]}