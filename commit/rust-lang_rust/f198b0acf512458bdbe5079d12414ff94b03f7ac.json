{"sha": "f198b0acf512458bdbe5079d12414ff94b03f7ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxOThiMGFjZjUxMjQ1OGJkYmU1MDc5ZDEyNDE0ZmY5NGIwM2Y3YWM=", "commit": {"author": {"name": "Sean Silva", "email": "chisophugis@gmail.com", "date": "2018-03-25T05:31:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-25T05:31:17Z"}, "message": "Fix confusing doc for `scan`\n\nThe comment \"the value passed on to the next iteration\" confused me since it sounded more like what Haskell's [scanl](http://hackage.haskell.org/package/base-4.11.0.0/docs/Prelude.html#v:scanl) does where the closure's return value serves as both the \"yielded value\" *and* the new value of the \"state\".\r\n\r\nI tried changing the example to make it clear that the closure's return value is decoupled from the state argument.", "tree": {"sha": "45e7a07bdc3be59104368e740e928cbffc59c7d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45e7a07bdc3be59104368e740e928cbffc59c7d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f198b0acf512458bdbe5079d12414ff94b03f7ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJatzQlCRBK7hj4Ov3rIwAAdHIIAK3Iarnid8YU665oAqwS+gxv\n4Fxh8NFW9pYyRB6f8h7tRPB2IRfvFVTOrJgQOajpKnhozyjuu2aUXpXggnwt/PGH\nbIeBMuuOXtI7Cx5yUO3+1aD3UfzGU/t9o8ZDuOJMG4PYr4yKpUVo/98BudVhH1IJ\nMPSGra+5Y+9IVDzLXDvSazS6GqQZLLmzAkBjonwXKg297p//GZrfgE+2yRfO5nsN\nLp/DmtR+LsPFQ9PXaCD2zK0M+ifThS2MrJymRdT5eX5OBuk8zvVd0WN5xcH98G7x\njjAD1xmNRtsiH64IWaW0t6mc0wgv2EPmuvveTuQhYaIBidntgLEnTq1gfMokt54=\n=h3A2\n-----END PGP SIGNATURE-----\n", "payload": "tree 45e7a07bdc3be59104368e740e928cbffc59c7d9\nparent e5bf0428d134e6f9c1fe54839f249c616b6b0b0b\nauthor Sean Silva <chisophugis@gmail.com> 1521955877 -0700\ncommitter GitHub <noreply@github.com> 1521955877 -0700\n\nFix confusing doc for `scan`\n\nThe comment \"the value passed on to the next iteration\" confused me since it sounded more like what Haskell's [scanl](http://hackage.haskell.org/package/base-4.11.0.0/docs/Prelude.html#v:scanl) does where the closure's return value serves as both the \"yielded value\" *and* the new value of the \"state\".\r\n\r\nI tried changing the example to make it clear that the closure's return value is decoupled from the state argument."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f198b0acf512458bdbe5079d12414ff94b03f7ac", "html_url": "https://github.com/rust-lang/rust/commit/f198b0acf512458bdbe5079d12414ff94b03f7ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f198b0acf512458bdbe5079d12414ff94b03f7ac/comments", "author": {"login": "chisophugis", "id": 358163, "node_id": "MDQ6VXNlcjM1ODE2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/358163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chisophugis", "html_url": "https://github.com/chisophugis", "followers_url": "https://api.github.com/users/chisophugis/followers", "following_url": "https://api.github.com/users/chisophugis/following{/other_user}", "gists_url": "https://api.github.com/users/chisophugis/gists{/gist_id}", "starred_url": "https://api.github.com/users/chisophugis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chisophugis/subscriptions", "organizations_url": "https://api.github.com/users/chisophugis/orgs", "repos_url": "https://api.github.com/users/chisophugis/repos", "events_url": "https://api.github.com/users/chisophugis/events{/privacy}", "received_events_url": "https://api.github.com/users/chisophugis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5bf0428d134e6f9c1fe54839f249c616b6b0b0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5bf0428d134e6f9c1fe54839f249c616b6b0b0b", "html_url": "https://github.com/rust-lang/rust/commit/e5bf0428d134e6f9c1fe54839f249c616b6b0b0b"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "31f77f92435d83ff72a9f04582bb6717f1c1bedd", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f198b0acf512458bdbe5079d12414ff94b03f7ac/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f198b0acf512458bdbe5079d12414ff94b03f7ac/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=f198b0acf512458bdbe5079d12414ff94b03f7ac", "patch": "@@ -974,13 +974,13 @@ pub trait Iterator {\n     ///     // each iteration, we'll multiply the state by the element\n     ///     *state = *state * x;\n     ///\n-    ///     // the value passed on to the next iteration\n-    ///     Some(*state)\n+    ///     // then, we'll yield the negation of the state\n+    ///     Some(-*state)\n     /// });\n     ///\n-    /// assert_eq!(iter.next(), Some(1));\n-    /// assert_eq!(iter.next(), Some(2));\n-    /// assert_eq!(iter.next(), Some(6));\n+    /// assert_eq!(iter.next(), Some(-1));\n+    /// assert_eq!(iter.next(), Some(-2));\n+    /// assert_eq!(iter.next(), Some(-6));\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     #[inline]"}]}