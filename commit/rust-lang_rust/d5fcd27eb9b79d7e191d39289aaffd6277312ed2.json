{"sha": "d5fcd27eb9b79d7e191d39289aaffd6277312ed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZmNkMjdlYjliNzlkN2UxOTFkMzkyODlhYWZmZDYyNzczMTJlZDI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T19:46:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T19:46:26Z"}, "message": "Rollup merge of #52834 - matthewjasper:allow-zst-conflicts, r=pnkfelix\n\n[NLL] Allow conflicting borrows of promoted length zero arrays\n\nThis is currently overkill as there's no way to create two conflicting borrows of any promoted.\nIt is possible that the following code might not fail due to const eval in the future (@oli-obk?). In which case either the array marked needs to not be promoted, or to be checked for conflicts\n\n```rust\nstatic mut A: () = {\n    let mut y = None;\n    let z;\n    let mut done_y = false;\n    loop {\n        let x = &mut [1];  // < this array\n        if done_y {\n            z = x;\n            break;\n        }\n        y = Some(x);\n        done_y = true;\n    }\n    some_const_fn(y, z); // some_const_fn expects that y to not alias z.\n};\n```\n\nr? @pnkfelix  @nikomatsakis\n\ncloses #52671\ncc #51823", "tree": {"sha": "73eaec31d5ce282c3f3ec04cf8cb1a12526d4ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73eaec31d5ce282c3f3ec04cf8cb1a12526d4ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5fcd27eb9b79d7e191d39289aaffd6277312ed2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYg4SCRBK7hj4Ov3rIwAAdHIIABx9WmaUCtao1azH4fIquN9X\n18YZ13SM9MxCvizdIu8tlvUWnFZA6WrNwNM8hHtHRwGaC4QeI9feCZAsEz6aB2zG\ndAG9aab1qi+l4M2DY96qG+2Q9JmVNE/Zq7JCQIjrwtuV30CkqFJQjYJ1DWhViW3l\n/ULPMpCWpIFp0R+5TDWxTu/Yvo3/+dkrNnRjxW6Mf3RoI7FluKEOIrMwAq2sJWfi\n4po5bgLV/W/Fyuy8yoE0PaKEJCXGX4DBaqJHrvO0W2YaXi9a6QDOtPLtr1lz/Ukq\nZBc/2EjFxt7vtK9E0CPJX1VreT6Oy1q5pB2OZSN9uvFfLH+zWR/fp86uc+CczYE=\n=MPWO\n-----END PGP SIGNATURE-----\n", "payload": "tree 73eaec31d5ce282c3f3ec04cf8cb1a12526d4ff5\nparent 4d1ddfe9833b1d179cac07d7718f626f81e09bad\nparent 84dc48522d71ec4531219927155b20c2eadbae70\nauthor Pietro Albini <pietro@pietroalbini.org> 1533152786 +0200\ncommitter GitHub <noreply@github.com> 1533152786 +0200\n\nRollup merge of #52834 - matthewjasper:allow-zst-conflicts, r=pnkfelix\n\n[NLL] Allow conflicting borrows of promoted length zero arrays\n\nThis is currently overkill as there's no way to create two conflicting borrows of any promoted.\nIt is possible that the following code might not fail due to const eval in the future (@oli-obk?). In which case either the array marked needs to not be promoted, or to be checked for conflicts\n\n```rust\nstatic mut A: () = {\n    let mut y = None;\n    let z;\n    let mut done_y = false;\n    loop {\n        let x = &mut [1];  // < this array\n        if done_y {\n            z = x;\n            break;\n        }\n        y = Some(x);\n        done_y = true;\n    }\n    some_const_fn(y, z); // some_const_fn expects that y to not alias z.\n};\n```\n\nr? @pnkfelix  @nikomatsakis\n\ncloses #52671\ncc #51823\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5fcd27eb9b79d7e191d39289aaffd6277312ed2", "html_url": "https://github.com/rust-lang/rust/commit/d5fcd27eb9b79d7e191d39289aaffd6277312ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5fcd27eb9b79d7e191d39289aaffd6277312ed2/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d1ddfe9833b1d179cac07d7718f626f81e09bad", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1ddfe9833b1d179cac07d7718f626f81e09bad", "html_url": "https://github.com/rust-lang/rust/commit/4d1ddfe9833b1d179cac07d7718f626f81e09bad"}, {"sha": "84dc48522d71ec4531219927155b20c2eadbae70", "url": "https://api.github.com/repos/rust-lang/rust/commits/84dc48522d71ec4531219927155b20c2eadbae70", "html_url": "https://github.com/rust-lang/rust/commit/84dc48522d71ec4531219927155b20c2eadbae70"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "640ae31d45b349db89028614c438daca19eca80e", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5fcd27eb9b79d7e191d39289aaffd6277312ed2/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fcd27eb9b79d7e191d39289aaffd6277312ed2/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=d5fcd27eb9b79d7e191d39289aaffd6277312ed2", "patch": "@@ -329,6 +329,13 @@ fn place_element_conflict<'a, 'gcx: 'tcx, 'tcx>(\n         }\n         (Place::Promoted(p1), Place::Promoted(p2)) => {\n             if p1.0 == p2.0 {\n+                if let ty::TyArray(_, size) = p1.1.sty {\n+                    if size.unwrap_usize(tcx) == 0 {\n+                        // Ignore conflicts with promoted [T; 0].\n+                        debug!(\"place_element_conflict: IGNORE-LEN-0-PROMOTED\");\n+                        return Overlap::Disjoint;\n+                    }\n+                }\n                 // the same promoted - base case, equal\n                 debug!(\"place_element_conflict: DISJOINT-OR-EQ-PROMOTED\");\n                 Overlap::EqualOrDisjoint"}, {"sha": "be3855696127158d2ed259e7b81218661693e801", "filename": "src/test/ui/nll/promotable-mutable-zst-doesnt-conflict.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d5fcd27eb9b79d7e191d39289aaffd6277312ed2/src%2Ftest%2Fui%2Fnll%2Fpromotable-mutable-zst-doesnt-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fcd27eb9b79d7e191d39289aaffd6277312ed2/src%2Ftest%2Fui%2Fnll%2Fpromotable-mutable-zst-doesnt-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpromotable-mutable-zst-doesnt-conflict.rs?ref=d5fcd27eb9b79d7e191d39289aaffd6277312ed2", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that mutable promoted length zero arrays don't check for conflicting\n+// access\n+\n+// run-pass\n+\n+#![feature(nll)]\n+\n+pub fn main() {\n+    let mut x: Vec<&[i32; 0]> = Vec::new();\n+    for i in 0..10 {\n+        x.push(&[]);\n+    }\n+}"}]}