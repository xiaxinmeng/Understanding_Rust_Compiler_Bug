{"sha": "fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZWMzZWM1YTc4NzQ3ZWU0NTg1MThlNGJlN2NmZTFiNWVhYzllM2I=", "commit": {"author": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2017-12-25T00:00:04Z"}, "committer": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2018-03-25T22:50:47Z"}, "message": "Implement get_key_value for HashMap, BTreeMap", "tree": {"sha": "9f9486bf7a74f2172b96bcc6fb7ab58e1610d6dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f9486bf7a74f2172b96bcc6fb7ab58e1610d6dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b", "html_url": "https://github.com/rust-lang/rust/commit/fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b/comments", "author": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5631d9ac7745dd6eaea2bc6c236d5f8e54e9a18", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5631d9ac7745dd6eaea2bc6c236d5f8e54e9a18", "html_url": "https://github.com/rust-lang/rust/commit/f5631d9ac7745dd6eaea2bc6c236d5f8e54e9a18"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "cada190032aa064c806545b65c9c96ec05e3b65b", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b", "patch": "@@ -576,6 +576,33 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         }\n     }\n \n+    /// Returns the key-value pair corresponding to the supplied key.\n+    ///\n+    /// The supplied key may be any borrowed form of the map's key type, but the ordering\n+    /// on the borrowed form *must* match the ordering on the key type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_get_key_value)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map = BTreeMap::new();\n+    /// map.insert(1, \"a\");\n+    /// assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\n+    /// assert_eq!(map.get_key_value(&2), None);\n+    /// ```\n+    #[unstable(feature = \"map_get_key_value\", issue = \"49347\")]\n+    pub fn get_key_value<Q: ?Sized>(&self, k: &Q) -> Option<(&K, &V)>\n+        where K: Borrow<Q>,\n+              Q: Ord\n+    {\n+        match search::search_tree(self.root.as_ref(), k) {\n+            Found(handle) => Some(handle.into_kv()),\n+            GoDown(_) => None,\n+        }\n+    }\n+\n     /// Returns `true` if the map contains a value for the specified key.\n     ///\n     /// The key may be any borrowed form of the map's key type, but the ordering"}, {"sha": "f0bb781411fb4103026cf5d3d2954ef9761d8207", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b", "patch": "@@ -1184,6 +1184,34 @@ impl<K, V, S> HashMap<K, V, S>\n         self.search(k).map(|bucket| bucket.into_refs().1)\n     }\n \n+    /// Returns the key-value pair corresponding to the supplied key.\n+    ///\n+    /// The supplied key may be any borrowed form of the map's key type, but\n+    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n+    /// the key type.\n+    ///\n+    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n+    /// [`Hash`]: ../../std/hash/trait.Hash.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_get_key_value)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// map.insert(1, \"a\");\n+    /// assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\n+    /// assert_eq!(map.get_key_value(&2), None);\n+    /// ```\n+    #[unstable(feature = \"map_get_key_value\", issue = \"49347\")]\n+    pub fn get_key_value<Q: ?Sized>(&self, k: &Q) -> Option<(&K, &V)>\n+        where K: Borrow<Q>,\n+              Q: Hash + Eq\n+    {\n+        self.search(k).map(|bucket| bucket.into_refs())\n+    }\n+\n     /// Returns true if the map contains a value for the specified key.\n     ///\n     /// The key may be any borrowed form of the map's key type, but"}]}