{"sha": "7958166300cc92da90b95a8c13cbf8f469832485", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NTgxNjYzMDBjYzkyZGE5MGI5NWE4YzEzY2JmOGY0Njk4MzI0ODU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-02-22T09:26:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-22T09:26:11Z"}, "message": "Rollup merge of #82372 - RalfJung:unsafe-cell, r=KodrAus\n\nimprove UnsafeCell docs\n\nSometimes [questions like this come up](https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/UnsafeCells.20as.20raw.20pointers) because the UnsafeCell docs say \"it's the only legal way to obtain aliasable data that is considered mutable\". That is not entirely correct, since raw pointers also provide that option. So I propose we focus the docs on the interaction of `UnsafeCell` and *shared references* specifically, which is really where they are needed.", "tree": {"sha": "0b95d1d9cc0e5e222aaa8d8824b7088c8b86d3ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b95d1d9cc0e5e222aaa8d8824b7088c8b86d3ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7958166300cc92da90b95a8c13cbf8f469832485", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgM3i0CRBK7hj4Ov3rIwAAdHIIAJR//eq3SA9/ogfRzxx5CF0b\ncDjdfK7fnbjhrwO0JNAjJOhWIeC9uPlC5xxSGjAPEPOL+yzSzXGyV0qTY5TmbVec\nsgLLIUrZStPKyn82BeeIfvvTkjNiCWvPy1CMEf/L6YaUf9nlcEko9bQrprjqPuwr\nPW3nM5swAInqER6Me0kyhhMwlbB+lpJqVF2M1U72vflKN6g6J0TVQraB/pQyKiQ+\naopnMtWLLmy1NvWpArvcEbxYnrhhWJrw9ZjUZVCR7oMx3/6g7QnAAn9R0sHYmpUq\ngPxGRa//7iyROj3rQwzjbpSPIdeekHpxylXIXSRlAqm1uT+Z7E/8uPosDsoAEVg=\n=3OXN\n-----END PGP SIGNATURE-----\n", "payload": "tree 0b95d1d9cc0e5e222aaa8d8824b7088c8b86d3ea\nparent 1870b3bac6f8144316f82d763230c7ad8432c0d0\nparent 12608832c3b624c3d59b1371f3935804e8364127\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1613985971 +0900\ncommitter GitHub <noreply@github.com> 1613985971 +0900\n\nRollup merge of #82372 - RalfJung:unsafe-cell, r=KodrAus\n\nimprove UnsafeCell docs\n\nSometimes [questions like this come up](https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/UnsafeCells.20as.20raw.20pointers) because the UnsafeCell docs say \"it's the only legal way to obtain aliasable data that is considered mutable\". That is not entirely correct, since raw pointers also provide that option. So I propose we focus the docs on the interaction of `UnsafeCell` and *shared references* specifically, which is really where they are needed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7958166300cc92da90b95a8c13cbf8f469832485", "html_url": "https://github.com/rust-lang/rust/commit/7958166300cc92da90b95a8c13cbf8f469832485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7958166300cc92da90b95a8c13cbf8f469832485/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1870b3bac6f8144316f82d763230c7ad8432c0d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1870b3bac6f8144316f82d763230c7ad8432c0d0", "html_url": "https://github.com/rust-lang/rust/commit/1870b3bac6f8144316f82d763230c7ad8432c0d0"}, {"sha": "12608832c3b624c3d59b1371f3935804e8364127", "url": "https://api.github.com/repos/rust-lang/rust/commits/12608832c3b624c3d59b1371f3935804e8364127", "html_url": "https://github.com/rust-lang/rust/commit/12608832c3b624c3d59b1371f3935804e8364127"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "cce1242d84f52ff5496879009ad727ee426337cc", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7958166300cc92da90b95a8c13cbf8f469832485/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7958166300cc92da90b95a8c13cbf8f469832485/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=7958166300cc92da90b95a8c13cbf8f469832485", "patch": "@@ -1619,17 +1619,18 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n \n /// The core primitive for interior mutability in Rust.\n ///\n-/// `UnsafeCell<T>` is a type that wraps some `T` and indicates unsafe interior operations on the\n-/// wrapped type. Types with an `UnsafeCell<T>` field are considered to have an 'unsafe interior'.\n-/// The `UnsafeCell<T>` type is the only legal way to obtain aliasable data that is considered\n-/// mutable. In general, transmuting a `&T` type into a `&mut T` is considered undefined behavior.\n+/// If you have a reference `&T`, then normally in Rust the compiler performs optimizations based on\n+/// the knowledge that `&T` points to immutable data. Mutating that data, for example through an\n+/// alias or by transmuting an `&T` into an `&mut T`, is considered undefined behavior.\n+/// `UnsafeCell<T>` opts-out of the immutability guarantee for `&T`: a shared reference\n+/// `&UnsafeCell<T>` may point to data that is being mutated. This is called \"interior mutability\".\n ///\n-/// If you have a reference `&SomeStruct`, then normally in Rust all fields of `SomeStruct` are\n-/// immutable. The compiler makes optimizations based on the knowledge that `&T` is not mutably\n-/// aliased or mutated, and that `&mut T` is unique. `UnsafeCell<T>` is the only core language\n-/// feature to work around the restriction that `&T` may not be mutated. All other types that\n-/// allow internal mutability, such as `Cell<T>` and `RefCell<T>`, use `UnsafeCell` to wrap their\n-/// internal data. There is *no* legal way to obtain aliasing `&mut`, not even with `UnsafeCell<T>`.\n+/// All other types that allow internal mutability, such as `Cell<T>` and `RefCell<T>`, internally\n+/// use `UnsafeCell` to wrap their data.\n+///\n+/// Note that only the immutability guarantee for shared references is affected by `UnsafeCell`. The\n+/// uniqueness guarantee for mutable references is unaffected. There is *no* legal way to obtain\n+/// aliasing `&mut`, not even with `UnsafeCell<T>`.\n ///\n /// The `UnsafeCell` API itself is technically very simple: [`.get()`] gives you a raw pointer\n /// `*mut T` to its contents. It is up to _you_ as the abstraction designer to use that raw pointer"}]}