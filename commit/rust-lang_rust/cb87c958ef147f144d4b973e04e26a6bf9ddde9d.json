{"sha": "cb87c958ef147f144d4b973e04e26a6bf9ddde9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiODdjOTU4ZWYxNDdmMTQ0ZDRiOTczZTA0ZTI2YTZiZjlkZGRlOWQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-08T23:53:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-08T23:53:52Z"}, "message": "Rollup merge of #68834 - ssomers:btree_first_last_fix68829, r=KodrAus\n\nFix and test implementation of BTreeMap's first/last_entry, pop_first/last\n\nProperly implement and test `first_entry` & `last_entry` to fix problem report #68829", "tree": {"sha": "4d1d53e5a31385b1f079e090a2ba4a5cc50d24cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d1d53e5a31385b1f079e090a2ba4a5cc50d24cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb87c958ef147f144d4b973e04e26a6bf9ddde9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeP0oQCRBK7hj4Ov3rIwAAdHIIADkJ4ue3RJfVmkbDAV+O9ocI\nfZTi09V02T90jjub6BfRdlPfvZVMn+4NDndkr5aIuHhueYQzLdVrJ2A2a9d/mKmV\nIlpfVFM/nKk25G0SAWO50uGAwP1LUj9OtxYZH1f+DZuNUo+eRomQrdUQz8qBzMPJ\nCMkMB/Fq3/oj0clYP2rhcONrtiJqrVmAvPILTZJwvkHpzGRiLRJgntr8u1bUYCng\nX+hVAHa/bxWdqQSGjqNK10/v2G5eKsRsg8iMdsk+uTputAFIl8TpKhtnvIM5IDqO\nR03Zjo+kToavpXBDwF0+7CQ20obrIr4SKId9Uwc6upCMlCw6XWonLJWEC8IKumU=\n=OXnv\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d1d53e5a31385b1f079e090a2ba4a5cc50d24cf\nparent d17bc9f0615b08cb708178a1eec93896457b9d42\nparent fa9bfebfc9256369c03cbe8bba2e737de3cb38fc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581206032 +0100\ncommitter GitHub <noreply@github.com> 1581206032 +0100\n\nRollup merge of #68834 - ssomers:btree_first_last_fix68829, r=KodrAus\n\nFix and test implementation of BTreeMap's first/last_entry, pop_first/last\n\nProperly implement and test `first_entry` & `last_entry` to fix problem report #68829\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb87c958ef147f144d4b973e04e26a6bf9ddde9d", "html_url": "https://github.com/rust-lang/rust/commit/cb87c958ef147f144d4b973e04e26a6bf9ddde9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb87c958ef147f144d4b973e04e26a6bf9ddde9d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d17bc9f0615b08cb708178a1eec93896457b9d42", "url": "https://api.github.com/repos/rust-lang/rust/commits/d17bc9f0615b08cb708178a1eec93896457b9d42", "html_url": "https://github.com/rust-lang/rust/commit/d17bc9f0615b08cb708178a1eec93896457b9d42"}, {"sha": "fa9bfebfc9256369c03cbe8bba2e737de3cb38fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa9bfebfc9256369c03cbe8bba2e737de3cb38fc", "html_url": "https://github.com/rust-lang/rust/commit/fa9bfebfc9256369c03cbe8bba2e737de3cb38fc"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "5b4b1c933472d8abeb16e36df78f8e89db18db56", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb87c958ef147f144d4b973e04e26a6bf9ddde9d/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb87c958ef147f144d4b973e04e26a6bf9ddde9d/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=cb87c958ef147f144d4b973e04e26a6bf9ddde9d", "patch": "@@ -675,13 +675,15 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         T: Ord,\n         K: Borrow<T>,\n     {\n-        match self.length {\n-            0 => None,\n-            _ => Some(OccupiedEntry {\n-                handle: self.root.as_mut().first_kv(),\n+        let front = self.root.as_mut().first_leaf_edge();\n+        if let Ok(kv) = front.right_kv() {\n+            Some(OccupiedEntry {\n+                handle: kv.forget_node_type(),\n                 length: &mut self.length,\n                 _marker: PhantomData,\n-            }),\n+            })\n+        } else {\n+            None\n         }\n     }\n \n@@ -736,13 +738,15 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         T: Ord,\n         K: Borrow<T>,\n     {\n-        match self.length {\n-            0 => None,\n-            _ => Some(OccupiedEntry {\n-                handle: self.root.as_mut().last_kv(),\n+        let back = self.root.as_mut().last_leaf_edge();\n+        if let Ok(kv) = back.left_kv() {\n+            Some(OccupiedEntry {\n+                handle: kv.forget_node_type(),\n                 length: &mut self.length,\n                 _marker: PhantomData,\n-            }),\n+            })\n+        } else {\n+            None\n         }\n     }\n "}, {"sha": "0a26d7bf427ab019eb11850d76722493d225ed47", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb87c958ef147f144d4b973e04e26a6bf9ddde9d/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb87c958ef147f144d4b973e04e26a6bf9ddde9d/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=cb87c958ef147f144d4b973e04e26a6bf9ddde9d", "patch": "@@ -23,6 +23,11 @@ fn test_basic_large() {\n         assert_eq!(map.len(), i + 1);\n     }\n \n+    assert_eq!(map.first_key_value(), Some((&0, &0)));\n+    assert_eq!(map.last_key_value(), Some((&(size - 1), &(10 * (size - 1)))));\n+    assert_eq!(map.first_entry().unwrap().key(), &0);\n+    assert_eq!(map.last_entry().unwrap().key(), &(size - 1));\n+\n     for i in 0..size {\n         assert_eq!(map.get(&i).unwrap(), &(i * 10));\n     }"}, {"sha": "1a2b62d026b2ec969a38ef9186e9eff027a26eeb", "filename": "src/liballoc/tests/btree/set.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cb87c958ef147f144d4b973e04e26a6bf9ddde9d/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb87c958ef147f144d4b973e04e26a6bf9ddde9d/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs?ref=cb87c958ef147f144d4b973e04e26a6bf9ddde9d", "patch": "@@ -487,21 +487,26 @@ fn test_first_last() {\n     a.insert(2);\n     assert_eq!(a.first(), Some(&1));\n     assert_eq!(a.last(), Some(&2));\n-    a.insert(3);\n+    for i in 3..=12 {\n+        a.insert(i);\n+    }\n     assert_eq!(a.first(), Some(&1));\n-    assert_eq!(a.last(), Some(&3));\n-\n-    assert_eq!(a.len(), 3);\n+    assert_eq!(a.last(), Some(&12));\n     assert_eq!(a.pop_first(), Some(1));\n-    assert_eq!(a.len(), 2);\n-    assert_eq!(a.pop_last(), Some(3));\n-    assert_eq!(a.len(), 1);\n+    assert_eq!(a.pop_last(), Some(12));\n     assert_eq!(a.pop_first(), Some(2));\n-    assert_eq!(a.len(), 0);\n-    assert_eq!(a.pop_last(), None);\n-    assert_eq!(a.len(), 0);\n+    assert_eq!(a.pop_last(), Some(11));\n+    assert_eq!(a.pop_first(), Some(3));\n+    assert_eq!(a.pop_last(), Some(10));\n+    assert_eq!(a.pop_first(), Some(4));\n+    assert_eq!(a.pop_first(), Some(5));\n+    assert_eq!(a.pop_first(), Some(6));\n+    assert_eq!(a.pop_first(), Some(7));\n+    assert_eq!(a.pop_first(), Some(8));\n+    assert_eq!(a.clone().pop_last(), Some(9));\n+    assert_eq!(a.pop_first(), Some(9));\n     assert_eq!(a.pop_first(), None);\n-    assert_eq!(a.len(), 0);\n+    assert_eq!(a.pop_last(), None);\n }\n \n fn rand_data(len: usize) -> Vec<u32> {"}]}