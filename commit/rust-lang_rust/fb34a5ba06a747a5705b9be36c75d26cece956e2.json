{"sha": "fb34a5ba06a747a5705b9be36c75d26cece956e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMzRhNWJhMDZhNzQ3YTU3MDViOWJlMzZjNzVkMjZjZWNlOTU2ZTI=", "commit": {"author": {"name": "Avishay Matayev", "email": "me@avishay.dev", "date": "2020-03-03T21:02:51Z"}, "committer": {"name": "Avishay Matayev", "email": "me@avishay.dev", "date": "2020-03-04T09:03:32Z"}, "message": "Support function's completion snippet\n\nNote that `detail` was replced with `function_signature` to avoid\ncalling `from` on FunctionSignature twice.\n\nI didn't add new tests because the current ones seem enough.", "tree": {"sha": "67c52affa3a73a7774605d70d84d51300da2fe1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67c52affa3a73a7774605d70d84d51300da2fe1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb34a5ba06a747a5705b9be36c75d26cece956e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb34a5ba06a747a5705b9be36c75d26cece956e2", "html_url": "https://github.com/rust-lang/rust/commit/fb34a5ba06a747a5705b9be36c75d26cece956e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb34a5ba06a747a5705b9be36c75d26cece956e2/comments", "author": {"login": "Avishayy", "id": 5567310, "node_id": "MDQ6VXNlcjU1NjczMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5567310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Avishayy", "html_url": "https://github.com/Avishayy", "followers_url": "https://api.github.com/users/Avishayy/followers", "following_url": "https://api.github.com/users/Avishayy/following{/other_user}", "gists_url": "https://api.github.com/users/Avishayy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Avishayy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Avishayy/subscriptions", "organizations_url": "https://api.github.com/users/Avishayy/orgs", "repos_url": "https://api.github.com/users/Avishayy/repos", "events_url": "https://api.github.com/users/Avishayy/events{/privacy}", "received_events_url": "https://api.github.com/users/Avishayy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Avishayy", "id": 5567310, "node_id": "MDQ6VXNlcjU1NjczMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5567310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Avishayy", "html_url": "https://github.com/Avishayy", "followers_url": "https://api.github.com/users/Avishayy/followers", "following_url": "https://api.github.com/users/Avishayy/following{/other_user}", "gists_url": "https://api.github.com/users/Avishayy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Avishayy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Avishayy/subscriptions", "organizations_url": "https://api.github.com/users/Avishayy/orgs", "repos_url": "https://api.github.com/users/Avishayy/repos", "events_url": "https://api.github.com/users/Avishayy/events{/privacy}", "received_events_url": "https://api.github.com/users/Avishayy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "437329d3f5b7bb5b703b93c75a97d349eb77d6c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/437329d3f5b7bb5b703b93c75a97d349eb77d6c7", "html_url": "https://github.com/rust-lang/rust/commit/437329d3f5b7bb5b703b93c75a97d349eb77d6c7"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "2b9a0e5560eb7b5b8712dfc9f4d39e2b4c991e6c", "filename": "crates/ra_ide/src/completion/complete_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb34a5ba06a747a5705b9be36c75d26cece956e2/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb34a5ba06a747a5705b9be36c75d26cece956e2/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=fb34a5ba06a747a5705b9be36c75d26cece956e2", "patch": "@@ -38,7 +38,7 @@ mod tests {\n                 label: \"quux(\u2026)\",\n                 source_range: [91; 91),\n                 delete: [91; 91),\n-                insert: \"quux($0)\",\n+                insert: \"quux(${1:x})$0\",\n                 kind: Function,\n                 lookup: \"quux\",\n                 detail: \"fn quux(x: i32)\","}, {"sha": "39d2b1c1993ecb04bab350ddd8b8ff7f99cc2f39", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fb34a5ba06a747a5705b9be36c75d26cece956e2/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb34a5ba06a747a5705b9be36c75d26cece956e2/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=fb34a5ba06a747a5705b9be36c75d26cece956e2", "patch": "@@ -9,7 +9,7 @@ use crate::completion::{\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n };\n \n-use crate::display::{const_label, function_label, macro_label, type_label};\n+use crate::display::{const_label, macro_label, type_label, FunctionSignature};\n \n impl Completions {\n     pub(crate) fn add_field(\n@@ -198,7 +198,7 @@ impl Completions {\n \n         let name = name.unwrap_or_else(|| func.name(ctx.db).to_string());\n         let ast_node = func.source(ctx.db).value;\n-        let detail = function_label(&ast_node);\n+        let function_signature = FunctionSignature::from(&ast_node);\n \n         let mut builder =\n             CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.clone())\n@@ -209,19 +209,27 @@ impl Completions {\n                 })\n                 .set_documentation(func.docs(ctx.db))\n                 .set_deprecated(is_deprecated(func, ctx.db))\n-                .detail(detail);\n+                .detail(function_signature.to_string());\n \n         // Add `<>` for generic types\n         if ctx.use_item_syntax.is_none()\n             && !ctx.is_call\n             && ctx.db.feature_flags.get(\"completion.insertion.add-call-parenthesis\")\n         {\n             tested_by!(inserts_parens_for_function_calls);\n-            let (snippet, label) = if params.is_empty() || has_self_param && params.len() == 1 {\n-                (format!(\"{}()$0\", name), format!(\"{}()\", name))\n-            } else {\n-                (format!(\"{}($0)\", name), format!(\"{}(\u2026)\", name))\n-            };\n+\n+            let (snippet, label) =\n+                if params.is_empty() || has_self_param && params.len() == 1 {\n+                    (format!(\"{}()$0\", name), format!(\"{}()\", name))\n+                } else {\n+                    let function_params_snippet =\n+                        join(function_signature.parameter_names.iter().enumerate().map(\n+                            |(index, param_name)| format!(\"${{{}:{}}}\", index + 1, param_name),\n+                        ))\n+                        .separator(\", \")\n+                        .to_string();\n+                    (format!(\"{}({})$0\", name, function_params_snippet), format!(\"{}(\u2026)\", name))\n+                };\n             builder = builder.lookup_by(name).label(label).insert_snippet(snippet);\n         }\n \n@@ -486,7 +494,7 @@ mod tests {\n                 label: \"with_args(\u2026)\",\n                 source_range: [80; 85),\n                 delete: [80; 85),\n-                insert: \"with_args($0)\",\n+                insert: \"with_args(${1:x}, ${2:y})$0\",\n                 kind: Function,\n                 lookup: \"with_args\",\n                 detail: \"fn with_args(x: i32, y: String)\",\n@@ -630,7 +638,7 @@ mod tests {\n                 label: \"foo(\u2026)\",\n                 source_range: [61; 63),\n                 delete: [61; 63),\n-                insert: \"foo($0)\",\n+                insert: \"foo(${1:xs})$0\",\n                 kind: Function,\n                 lookup: \"foo\",\n                 detail: \"fn foo(xs: Ve)\",\n@@ -659,7 +667,7 @@ mod tests {\n                 label: \"foo(\u2026)\",\n                 source_range: [64; 66),\n                 delete: [64; 66),\n-                insert: \"foo($0)\",\n+                insert: \"foo(${1:xs})$0\",\n                 kind: Function,\n                 lookup: \"foo\",\n                 detail: \"fn foo(xs: Ve)\",\n@@ -687,7 +695,7 @@ mod tests {\n                 label: \"foo(\u2026)\",\n                 source_range: [68; 70),\n                 delete: [68; 70),\n-                insert: \"foo($0)\",\n+                insert: \"foo(${1:xs})$0\",\n                 kind: Function,\n                 lookup: \"foo\",\n                 detail: \"fn foo(xs: Ve)\",\n@@ -715,7 +723,7 @@ mod tests {\n                 label: \"foo(\u2026)\",\n                 source_range: [61; 63),\n                 delete: [61; 63),\n-                insert: \"foo($0)\",\n+                insert: \"foo(${1:xs})$0\",\n                 kind: Function,\n                 lookup: \"foo\",\n                 detail: \"fn foo(xs: Ve<i128>)\","}]}