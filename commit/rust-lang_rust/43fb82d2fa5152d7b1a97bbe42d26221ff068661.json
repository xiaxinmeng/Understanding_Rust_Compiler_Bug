{"sha": "43fb82d2fa5152d7b1a97bbe42d26221ff068661", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZmI4MmQyZmE1MTUyZDdiMWE5N2JiZTQyZDI2MjIxZmYwNjg2NjE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-10-04T09:02:26Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-10-04T10:48:20Z"}, "message": "mir-borrowck: Gather move errors during MoveData construction and report them.\n\nCurrently is using DUMMY_SP as the associated span; a follow-up commit\nwill pass in appropriate spans when constructing the errors.", "tree": {"sha": "daac9f2ae7631cce6b011a141e85eda062dbf2b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daac9f2ae7631cce6b011a141e85eda062dbf2b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43fb82d2fa5152d7b1a97bbe42d26221ff068661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43fb82d2fa5152d7b1a97bbe42d26221ff068661", "html_url": "https://github.com/rust-lang/rust/commit/43fb82d2fa5152d7b1a97bbe42d26221ff068661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43fb82d2fa5152d7b1a97bbe42d26221ff068661/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd7d13c246f7f82fad231babe30b3a30dac988f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd7d13c246f7f82fad231babe30b3a30dac988f", "html_url": "https://github.com/rust-lang/rust/commit/fdd7d13c246f7f82fad231babe30b3a30dac988f"}], "stats": {"total": 134, "additions": 99, "deletions": 35}, "files": [{"sha": "5c45f925dd70d39c958e2647629b6451fa7ef7c9", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/43fb82d2fa5152d7b1a97bbe42d26221ff068661/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fb82d2fa5152d7b1a97bbe42d26221ff068661/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=43fb82d2fa5152d7b1a97bbe42d26221ff068661", "patch": "@@ -30,6 +30,7 @@ use dataflow::{MoveDataParamEnv};\n use dataflow::{BitDenotation, BlockSets, DataflowResults, DataflowResultsConsumer};\n use dataflow::{MaybeInitializedLvals, MaybeUninitializedLvals};\n use dataflow::{Borrows, BorrowData, BorrowIndex};\n+use dataflow::move_paths::{MoveError, IllegalMoveOriginKind};\n use dataflow::move_paths::{HasMoveData, MoveData, MovePathIndex, LookupResult};\n use util::borrowck_errors::{BorrowckErrors, Origin};\n \n@@ -59,7 +60,33 @@ fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     let param_env = tcx.param_env(def_id);\n     tcx.infer_ctxt().enter(|_infcx| {\n \n-        let move_data = MoveData::gather_moves(mir, tcx, param_env);\n+        let move_data = match MoveData::gather_moves(mir, tcx, param_env) {\n+            Ok(move_data) => move_data,\n+            Err((move_data, move_errors)) => {\n+                for move_error in move_errors {\n+                    let (span, kind): (Span, IllegalMoveOriginKind) = match move_error {\n+                        MoveError::UnionMove { .. } =>\n+                            unimplemented!(\"dont know how to report union move errors yet.\"),\n+                        MoveError::IllegalMove { cannot_move_out_of: o } => (o.span, o.kind),\n+                    };\n+                    let origin = Origin::Mir;\n+                    let mut err = match kind {\n+                        IllegalMoveOriginKind::Static =>\n+                            tcx.cannot_move_out_of(span, \"static item\", origin),\n+                        IllegalMoveOriginKind::BorrowedContent =>\n+                            tcx.cannot_move_out_of(span, \"borrowed_content\", origin),\n+                        IllegalMoveOriginKind::InteriorOfTypeWithDestructor { container_ty: ty } =>\n+                            tcx.cannot_move_out_of_interior_of_drop(span, ty, origin),\n+                        IllegalMoveOriginKind::InteriorOfSlice { elem_ty: ty, is_index } =>\n+                            tcx.cannot_move_out_of_interior_noncopy(span, ty, is_index, origin),\n+                        IllegalMoveOriginKind::InteriorOfArray { elem_ty: ty, is_index } =>\n+                            tcx.cannot_move_out_of_interior_noncopy(span, ty, is_index, origin),\n+                    };\n+                    err.emit();\n+                }\n+                move_data\n+            }\n+        };\n         let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n         let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n         let flow_borrows = do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,"}, {"sha": "572fffdf4c00795514f4fd443b5395a5704c49f9", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/43fb82d2fa5152d7b1a97bbe42d26221ff068661/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fb82d2fa5152d7b1a97bbe42d26221ff068661/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=43fb82d2fa5152d7b1a97bbe42d26221ff068661", "patch": "@@ -22,17 +22,15 @@ use std::mem;\n use super::abs_domain::Lift;\n \n use super::{LocationMap, MoveData, MovePath, MovePathLookup, MovePathIndex, MoveOut, MoveOutIndex};\n+use super::{MoveError};\n+use super::IllegalMoveOriginKind::*;\n \n-pub(super) struct MoveDataBuilder<'a, 'tcx: 'a> {\n+struct MoveDataBuilder<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     data: MoveData<'tcx>,\n-}\n-\n-pub enum MovePathError {\n-    IllegalMove,\n-    UnionMove { path: MovePathIndex },\n+    errors: Vec<MoveError<'tcx>>,\n }\n \n impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n@@ -47,6 +45,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             mir,\n             tcx,\n             param_env,\n+            errors: Vec::new(),\n             data: MoveData {\n                 moves: IndexVec::new(),\n                 loc_map: LocationMap::new(mir),\n@@ -94,13 +93,12 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n     ///\n     /// Maybe we should have separate \"borrowck\" and \"moveck\" modes.\n     fn move_path_for(&mut self, lval: &Lvalue<'tcx>)\n-                     -> Result<MovePathIndex, MovePathError>\n+                     -> Result<MovePathIndex, MoveError<'tcx>>\n     {\n         debug!(\"lookup({:?})\", lval);\n         match *lval {\n             Lvalue::Local(local) => Ok(self.data.rev_lookup.locals[local]),\n-            // error: can't move out of a static\n-            Lvalue::Static(..) => Err(MovePathError::IllegalMove),\n+            Lvalue::Static(..) => Err(MoveError::cannot_move_out_of(Static)),\n             Lvalue::Projection(ref proj) => {\n                 self.move_path_for_projection(lval, proj)\n             }\n@@ -116,25 +114,32 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n     fn move_path_for_projection(&mut self,\n                                 lval: &Lvalue<'tcx>,\n                                 proj: &LvalueProjection<'tcx>)\n-                                -> Result<MovePathIndex, MovePathError>\n+                                -> Result<MovePathIndex, MoveError<'tcx>>\n     {\n         let base = try!(self.move_path_for(&proj.base));\n         let lv_ty = proj.base.ty(self.mir, self.tcx).to_ty(self.tcx);\n         match lv_ty.sty {\n-            // error: can't move out of borrowed content\n-            ty::TyRef(..) | ty::TyRawPtr(..) => return Err(MovePathError::IllegalMove),\n-            // error: can't move out of struct with destructor\n+            ty::TyRef(..) | ty::TyRawPtr(..) =>\n+                return Err(MoveError::cannot_move_out_of(BorrowedContent)),\n             ty::TyAdt(adt, _) if adt.has_dtor(self.tcx) && !adt.is_box() =>\n-                return Err(MovePathError::IllegalMove),\n+                return Err(MoveError::cannot_move_out_of(InteriorOfTypeWithDestructor {\n+                    container_ty: lv_ty\n+                })),\n             // move out of union - always move the entire union\n             ty::TyAdt(adt, _) if adt.is_union() =>\n-                return Err(MovePathError::UnionMove { path: base }),\n-            // error: can't move out of a slice\n-            ty::TySlice(..) =>\n-                return Err(MovePathError::IllegalMove),\n-            ty::TyArray(..) => match proj.elem {\n-                // error: can't move out of an array\n-                ProjectionElem::Index(..) => return Err(MovePathError::IllegalMove),\n+                return Err(MoveError::UnionMove { path: base }),\n+            ty::TySlice(elem_ty) =>\n+                return Err(MoveError::cannot_move_out_of(InteriorOfSlice {\n+                    elem_ty, is_index: match proj.elem {\n+                        ProjectionElem::Index(..) => true,\n+                        _ => false\n+                    },\n+                })),\n+            ty::TyArray(elem_ty, _num_elems) => match proj.elem {\n+                ProjectionElem::Index(..) =>\n+                    return Err(MoveError::cannot_move_out_of(InteriorOfArray {\n+                        elem_ty, is_index: true\n+                    })),\n                 _ => {\n                     // FIXME: still badly broken\n                 }\n@@ -156,7 +161,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n         }\n     }\n \n-    fn finalize(self) -> MoveData<'tcx> {\n+    fn finalize(self) -> Result<MoveData<'tcx>, (MoveData<'tcx>, Vec<MoveError<'tcx>>)> {\n         debug!(\"{}\", {\n             debug!(\"moves for {:?}:\", self.mir.span);\n             for (j, mo) in self.data.moves.iter_enumerated() {\n@@ -168,14 +173,20 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             }\n             \"done dumping moves\"\n         });\n-        self.data\n+\n+        if self.errors.len() > 0 {\n+            Err((self.data, self.errors))\n+        } else {\n+            Ok(self.data)\n+        }\n     }\n }\n \n pub(super) fn gather_moves<'a, 'tcx>(mir: &Mir<'tcx>,\n                                      tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      param_env: ty::ParamEnv<'tcx>)\n-                                     -> MoveData<'tcx> {\n+                                     -> Result<MoveData<'tcx>,\n+                                               (MoveData<'tcx>, Vec<MoveError<'tcx>>)> {\n     let mut builder = MoveDataBuilder::new(mir, tcx, param_env);\n \n     for (bb, block) in mir.basic_blocks().iter_enumerated() {\n@@ -317,13 +328,10 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n         }\n \n         let path = match self.move_path_for(lval) {\n-            Ok(path) | Err(MovePathError::UnionMove { path }) => path,\n-            Err(MovePathError::IllegalMove) => {\n-                // Moving out of a bad path. Eventually, this should be a MIR\n-                // borrowck error instead of a bug.\n-                span_bug!(self.mir.span,\n-                          \"Broken MIR: moving out of lvalue {:?}: {:?} at {:?}\",\n-                          lval, lv_ty, loc);\n+            Ok(path) | Err(MoveError::UnionMove { path }) => path,\n+            Err(error @ MoveError::IllegalMove { .. }) => {\n+                self.errors.push(error);\n+                return;\n             }\n         };\n         let move_out = self.data.moves.push(MoveOut { path: path, source: loc });"}, {"sha": "61f64e7373d088bdb71920eb5b9e3c04fe979a41", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/43fb82d2fa5152d7b1a97bbe42d26221ff068661/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fb82d2fa5152d7b1a97bbe42d26221ff068661/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=43fb82d2fa5152d7b1a97bbe42d26221ff068661", "patch": "@@ -13,6 +13,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec};\n+use syntax_pos::{DUMMY_SP, Span};\n \n use std::fmt;\n use std::ops::{Index, IndexMut};\n@@ -227,11 +228,39 @@ impl<'tcx> MovePathLookup<'tcx> {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct IllegalMoveOrigin<'tcx> {\n+    pub(crate) span: Span,\n+    pub(crate) kind: IllegalMoveOriginKind<'tcx>,\n+}\n+\n+#[derive(Debug)]\n+pub(crate) enum IllegalMoveOriginKind<'tcx> {\n+    Static,\n+    BorrowedContent,\n+    InteriorOfTypeWithDestructor { container_ty: ty::Ty<'tcx> },\n+    InteriorOfSlice { elem_ty: ty::Ty<'tcx>, is_index: bool, },\n+    InteriorOfArray { elem_ty: ty::Ty<'tcx>, is_index: bool, },\n+}\n+\n+#[derive(Debug)]\n+pub enum MoveError<'tcx> {\n+    IllegalMove { cannot_move_out_of: IllegalMoveOrigin<'tcx> },\n+    UnionMove { path: MovePathIndex },\n+}\n+\n+impl<'tcx> MoveError<'tcx> {\n+    fn cannot_move_out_of(kind: IllegalMoveOriginKind<'tcx>) -> Self {\n+        let origin = IllegalMoveOrigin { span: DUMMY_SP, kind: kind, };\n+        MoveError::IllegalMove { cannot_move_out_of: origin }\n+    }\n+}\n+\n impl<'a, 'tcx> MoveData<'tcx> {\n     pub fn gather_moves(mir: &Mir<'tcx>,\n                         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         param_env: ty::ParamEnv<'tcx>)\n-                        -> Self {\n+                        -> Result<Self, (Self, Vec<MoveError<'tcx>>)> {\n         builder::gather_moves(mir, tcx, param_env)\n     }\n }"}, {"sha": "be1b794ecdfab698db3816582a3fd4adc2536666", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43fb82d2fa5152d7b1a97bbe42d26221ff068661/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fb82d2fa5152d7b1a97bbe42d26221ff068661/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=43fb82d2fa5152d7b1a97bbe42d26221ff068661", "patch": "@@ -45,7 +45,7 @@ impl MirPass for ElaborateDrops {\n         }\n         let id = src.item_id();\n         let param_env = tcx.param_env(tcx.hir.local_def_id(id));\n-        let move_data = MoveData::gather_moves(mir, tcx, param_env);\n+        let move_data = MoveData::gather_moves(mir, tcx, param_env).unwrap();\n         let elaborate_patch = {\n             let mir = &*mir;\n             let env = MoveDataParamEnv {"}, {"sha": "8d6458d793474e2d414875f30cccffba54d18c44", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43fb82d2fa5152d7b1a97bbe42d26221ff068661/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fb82d2fa5152d7b1a97bbe42d26221ff068661/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=43fb82d2fa5152d7b1a97bbe42d26221ff068661", "patch": "@@ -45,7 +45,7 @@ impl MirPass for SanityCheck {\n \n         let attributes = tcx.get_attrs(def_id);\n         let param_env = tcx.param_env(def_id);\n-        let move_data = MoveData::gather_moves(mir, tcx, param_env);\n+        let move_data = MoveData::gather_moves(mir, tcx, param_env).unwrap();\n         let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n         let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n         let flow_inits ="}]}