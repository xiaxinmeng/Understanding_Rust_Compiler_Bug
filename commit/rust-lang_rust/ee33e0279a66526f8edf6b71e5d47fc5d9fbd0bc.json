{"sha": "ee33e0279a66526f8edf6b71e5d47fc5d9fbd0bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMzNlMDI3OWE2NjUyNmY4ZWRmNmI3MWU1ZDQ3ZmM1ZDlmYmQwYmM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-08T20:55:19Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-12T19:14:53Z"}, "message": "Refactor pretty_print_const.", "tree": {"sha": "27aabf3f410c4cc507dc016e3f632c0b04ab4e10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27aabf3f410c4cc507dc016e3f632c0b04ab4e10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee33e0279a66526f8edf6b71e5d47fc5d9fbd0bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee33e0279a66526f8edf6b71e5d47fc5d9fbd0bc", "html_url": "https://github.com/rust-lang/rust/commit/ee33e0279a66526f8edf6b71e5d47fc5d9fbd0bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee33e0279a66526f8edf6b71e5d47fc5d9fbd0bc/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5fb78482372a9fce3a276a07f99ff994384a343", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fb78482372a9fce3a276a07f99ff994384a343", "html_url": "https://github.com/rust-lang/rust/commit/e5fb78482372a9fce3a276a07f99ff994384a343"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "594550dd967acc0c4b58e95913ed4e2bd464acd5", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ee33e0279a66526f8edf6b71e5d47fc5d9fbd0bc/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee33e0279a66526f8edf6b71e5d47fc5d9fbd0bc/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=ee33e0279a66526f8edf6b71e5d47fc5d9fbd0bc", "patch": "@@ -861,8 +861,6 @@ pub trait PrettyPrinter<'tcx>:\n             return Ok(self);\n         }\n \n-        let u8 = self.tcx().types.u8;\n-\n         match (ct.val, &ct.ty.kind) {\n             (_,  ty::FnDef(did, substs)) => p!(print_value_path(*did, substs)),\n             (ty::ConstKind::Unevaluated(did, substs), _) => {\n@@ -884,13 +882,38 @@ pub trait PrettyPrinter<'tcx>:\n             },\n             (ty::ConstKind::Infer(..), _) =>  p!(write(\"_: \"), print(ct.ty)),\n             (ty::ConstKind::Param(ParamConst { name, .. }), _) => p!(write(\"{}\", name)),\n-            (ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, .. })), ty::Bool) =>\n+            (ty::ConstKind::Value(value), _) => return self.pretty_print_const_value(value, ct.ty),\n+\n+            _ => {\n+                // fallback\n+                p!(write(\"{:?} : \", ct.val), print(ct.ty))\n+            }\n+        };\n+        Ok(self)\n+    }\n+\n+    fn pretty_print_const_value(\n+        mut self,\n+        ct: ConstValue<'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> Result<Self::Const, Self::Error> {\n+        define_scoped_cx!(self);\n+\n+        if self.tcx().sess.verbose() {\n+            p!(write(\"ConstValue({:?}: {:?})\", ct, ty));\n+            return Ok(self);\n+        }\n+\n+        let u8 = self.tcx().types.u8;\n+\n+        match (ct, &ty.kind) {\n+            (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Bool) =>\n                 p!(write(\"{}\", if data == 0 { \"false\" } else { \"true\" })),\n-            (ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, .. })), ty::Float(ast::FloatTy::F32)) =>\n+            (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Float(ast::FloatTy::F32)) =>\n                 p!(write(\"{}f32\", Single::from_bits(data))),\n-            (ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, .. })), ty::Float(ast::FloatTy::F64)) =>\n+            (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Float(ast::FloatTy::F64)) =>\n                 p!(write(\"{}f64\", Double::from_bits(data))),\n-            (ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, .. })), ty::Uint(ui)) => {\n+            (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Uint(ui)) => {\n                 let bit_size = Integer::from_attr(&self.tcx(), UnsignedInt(*ui)).size();\n                 let max = truncate(u128::max_value(), bit_size);\n \n@@ -901,13 +924,13 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(write(\"{}{}\", data, ui_str))\n                 };\n             },\n-            (ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, .. })), ty::Int(i)) => {\n+            (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Int(i)) => {\n                 let bit_size = Integer::from_attr(&self.tcx(), SignedInt(*i))\n                     .size().bits() as u128;\n                 let min = 1u128 << (bit_size - 1);\n                 let max = min - 1;\n \n-                let ty = self.tcx().lift(&ct.ty).unwrap();\n+                let ty = self.tcx().lift(&ty).unwrap();\n                 let size = self.tcx().layout_of(ty::ParamEnv::empty().and(ty))\n                     .unwrap()\n                     .size;\n@@ -918,27 +941,27 @@ pub trait PrettyPrinter<'tcx>:\n                     _ => p!(write(\"{}{}\", sign_extend(data, size) as i128, i_str))\n                 }\n             },\n-            (ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, .. })), ty::Char) =>\n+            (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Char) =>\n                 p!(write(\"{:?}\", ::std::char::from_u32(data as u32).unwrap())),\n-            (ty::ConstKind::Value(ConstValue::Scalar(_)), ty::RawPtr(_)) => p!(write(\"{{pointer}}\")),\n-            (ty::ConstKind::Value(ConstValue::Scalar(Scalar::Ptr(ptr))), ty::FnPtr(_)) => {\n+            (ConstValue::Scalar(_), ty::RawPtr(_)) => p!(write(\"{{pointer}}\")),\n+            (ConstValue::Scalar(Scalar::Ptr(ptr)), ty::FnPtr(_)) => {\n                 let instance = {\n                     let alloc_map = self.tcx().alloc_map.lock();\n                     alloc_map.unwrap_fn(ptr.alloc_id)\n                 };\n                 p!(print_value_path(instance.def_id(), instance.substs));\n             },\n             _ => {\n-                let printed = if let ty::Ref(_, ref_ty, _) = ct.ty.kind {\n-                    let byte_str = match (ct.val, &ref_ty.kind) {\n-                        (ty::ConstKind::Value(ConstValue::Scalar(Scalar::Ptr(ptr))), ty::Array(t, n)) if *t == u8 => {\n+                let printed = if let ty::Ref(_, ref_ty, _) = ty.kind {\n+                    let byte_str = match (ct, &ref_ty.kind) {\n+                        (ConstValue::Scalar(Scalar::Ptr(ptr)), ty::Array(t, n)) if *t == u8 => {\n                             let n = n.eval_usize(self.tcx(), ty::ParamEnv::empty());\n                             Some(self.tcx()\n                                 .alloc_map.lock()\n                                 .unwrap_memory(ptr.alloc_id)\n                                 .get_bytes(&self.tcx(), ptr, Size::from_bytes(n)).unwrap())\n                         },\n-                        (ty::ConstKind::Value(ConstValue::Slice { data, start, end }), ty::Slice(t)) if *t == u8 => {\n+                        (ConstValue::Slice { data, start, end }, ty::Slice(t)) if *t == u8 => {\n                             // The `inspect` here is okay since we checked the bounds, and there are\n                             // no relocations (we have an active slice reference here). We don't use\n                             // this result to affect interpreter execution.\n@@ -956,8 +979,8 @@ pub trait PrettyPrinter<'tcx>:\n                         }\n                         p!(write(\"\\\"\"));\n                         true\n-                    } else if let (ty::ConstKind::Value(ConstValue::Slice { data, start, end }), ty::Str) =\n-                        (ct.val, &ref_ty.kind)\n+                    } else if let (ConstValue::Slice { data, start, end }, ty::Str) =\n+                        (ct, &ref_ty.kind)\n                     {\n                         // The `inspect` here is okay since we checked the bounds, and there are no\n                         // relocations (we have an active `str` reference here). We don't use this\n@@ -975,7 +998,7 @@ pub trait PrettyPrinter<'tcx>:\n                 };\n                 if !printed {\n                     // fallback\n-                    p!(write(\"{:?} : \", ct.val), print(ct.ty))\n+                    p!(write(\"{:?} : \", ct), print(ty))\n                 }\n             }\n         };"}]}