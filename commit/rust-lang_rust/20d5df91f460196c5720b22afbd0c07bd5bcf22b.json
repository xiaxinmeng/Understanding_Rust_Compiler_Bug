{"sha": "20d5df91f460196c5720b22afbd0c07bd5bcf22b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZDVkZjkxZjQ2MDE5NmM1NzIwYjIyYWZiZDBjMDdiZDViY2YyMmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-24T03:40:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-24T03:40:02Z"}, "message": "Rollup merge of #67569 - Mark-Simulacrum:opt-char-encode, r=oli-obk\n\nClean up unsafety in char::encode_utf8\n\nThis originally started as an attempt to allow LLVM to optimize through\nencode_utf8 to detect the try_encode_utf8 case (#52579, #52580), but due to a\ntypo my conclusion that my optimizations were successful was incorrect.\n\nFurthermore, as far as I can tell, this optimization is probably just not\npossible with LLVM today.  This [code](https://rust.godbolt.org/z/JggRj4)\ncompiles down to a long series of compares, notably, two identical series of\ncompares. That essentially means that LLVM is today unable to see that these two\nifs are identical and as such can be merged and then realize that no value of\nthe if condition can result in a call to `please_delete`. As such, for now, we\ndo not attempt to specifically optimize for that case.", "tree": {"sha": "143d6204474c0150d47fe7a97f848cfe13c838b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/143d6204474c0150d47fe7a97f848cfe13c838b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20d5df91f460196c5720b22afbd0c07bd5bcf22b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeAYiSCRBK7hj4Ov3rIwAAdHIIALJZdDuDKms3AmLfA2UFtm5m\nMttaXu9n1awaM/j1cKBtrBNFly2S5155B238/FS/oRE6trROtC3V2kDY+dxeDZJZ\nfz7dmMc6XPedvenFPeaeNkH5b7rp0ppl0INxdvCchea7qlr+D7hOrlCLqbeQGO30\n/IC1kZLrOiE2jt/8bU530x+RsPCU0VWBlioUtuMey5cy+JK/5g6XCDPr5WSPUbqZ\nKQp5wJtZ/8Vc6h7CIt0FiPY2zTV7/1NvGKU0JzWvKmpzjlb1ZE2ITekjtSNY2RAL\nLauWbwPbHPVn55tkMyQdHR04ArF6ZbU0P5D4QWAxaUsikjmAdarAA7j+cpr6k+w=\n=7BrI\n-----END PGP SIGNATURE-----\n", "payload": "tree 143d6204474c0150d47fe7a97f848cfe13c838b9\nparent 75b27ef59cd0eb95b50d0cde14b05e0079b3ebe9\nparent df4d490038c37e441065890fa27ed2ce0bdf83e6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1577158802 +0100\ncommitter GitHub <noreply@github.com> 1577158802 +0100\n\nRollup merge of #67569 - Mark-Simulacrum:opt-char-encode, r=oli-obk\n\nClean up unsafety in char::encode_utf8\n\nThis originally started as an attempt to allow LLVM to optimize through\nencode_utf8 to detect the try_encode_utf8 case (#52579, #52580), but due to a\ntypo my conclusion that my optimizations were successful was incorrect.\n\nFurthermore, as far as I can tell, this optimization is probably just not\npossible with LLVM today.  This [code](https://rust.godbolt.org/z/JggRj4)\ncompiles down to a long series of compares, notably, two identical series of\ncompares. That essentially means that LLVM is today unable to see that these two\nifs are identical and as such can be merged and then realize that no value of\nthe if condition can result in a call to `please_delete`. As such, for now, we\ndo not attempt to specifically optimize for that case.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20d5df91f460196c5720b22afbd0c07bd5bcf22b", "html_url": "https://github.com/rust-lang/rust/commit/20d5df91f460196c5720b22afbd0c07bd5bcf22b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20d5df91f460196c5720b22afbd0c07bd5bcf22b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b27ef59cd0eb95b50d0cde14b05e0079b3ebe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b27ef59cd0eb95b50d0cde14b05e0079b3ebe9", "html_url": "https://github.com/rust-lang/rust/commit/75b27ef59cd0eb95b50d0cde14b05e0079b3ebe9"}, {"sha": "df4d490038c37e441065890fa27ed2ce0bdf83e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/df4d490038c37e441065890fa27ed2ce0bdf83e6", "html_url": "https://github.com/rust-lang/rust/commit/df4d490038c37e441065890fa27ed2ce0bdf83e6"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "fe5d16862a6a673e1d9bdf93bd6a4affa49c77d2", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/20d5df91f460196c5720b22afbd0c07bd5bcf22b/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d5df91f460196c5720b22afbd0c07bd5bcf22b/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=20d5df91f460196c5720b22afbd0c07bd5bcf22b", "patch": "@@ -434,36 +434,35 @@ impl char {\n     #[inline]\n     pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {\n         let code = self as u32;\n-        // SAFETY: each arm checks the size of the slice and only uses `get_unchecked` unsafe ops\n-        unsafe {\n-            let len = if code < MAX_ONE_B && !dst.is_empty() {\n-                *dst.get_unchecked_mut(0) = code as u8;\n-                1\n-            } else if code < MAX_TWO_B && dst.len() >= 2 {\n-                *dst.get_unchecked_mut(0) = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n-                *dst.get_unchecked_mut(1) = (code & 0x3F) as u8 | TAG_CONT;\n-                2\n-            } else if code < MAX_THREE_B && dst.len() >= 3 {\n-                *dst.get_unchecked_mut(0) = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n-                *dst.get_unchecked_mut(1) = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n-                *dst.get_unchecked_mut(2) = (code & 0x3F) as u8 | TAG_CONT;\n-                3\n-            } else if dst.len() >= 4 {\n-                *dst.get_unchecked_mut(0) = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n-                *dst.get_unchecked_mut(1) = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n-                *dst.get_unchecked_mut(2) = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n-                *dst.get_unchecked_mut(3) = (code & 0x3F) as u8 | TAG_CONT;\n-                4\n-            } else {\n-                panic!(\n-                    \"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n-                    from_u32_unchecked(code).len_utf8(),\n-                    code,\n-                    dst.len(),\n-                )\n-            };\n-            from_utf8_unchecked_mut(dst.get_unchecked_mut(..len))\n-        }\n+        let len = self.len_utf8();\n+        match (len, &mut dst[..]) {\n+            (1, [a, ..]) => {\n+                *a = code as u8;\n+            }\n+            (2, [a, b, ..]) => {\n+                *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n+                *b = (code & 0x3F) as u8 | TAG_CONT;\n+            }\n+            (3, [a, b, c, ..]) => {\n+                *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n+                *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n+                *c = (code & 0x3F) as u8 | TAG_CONT;\n+            }\n+            (4, [a, b, c, d, ..]) => {\n+                *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n+                *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n+                *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n+                *d = (code & 0x3F) as u8 | TAG_CONT;\n+            }\n+            _ => panic!(\n+                \"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n+                len,\n+                code,\n+                dst.len(),\n+            ),\n+        };\n+        // SAFETY: We just wrote UTF-8 content in, so converting to str is fine.\n+        unsafe { from_utf8_unchecked_mut(&mut dst[..len]) }\n     }\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer,"}, {"sha": "7d11dd2800fd4df43dd4925b734afe2661311a9b", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20d5df91f460196c5720b22afbd0c07bd5bcf22b/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d5df91f460196c5720b22afbd0c07bd5bcf22b/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=20d5df91f460196c5720b22afbd0c07bd5bcf22b", "patch": "@@ -129,6 +129,7 @@\n #![feature(associated_type_bounds)]\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n+#![feature(slice_patterns)]\n \n #[prelude_import]\n #[allow(unused)]"}]}