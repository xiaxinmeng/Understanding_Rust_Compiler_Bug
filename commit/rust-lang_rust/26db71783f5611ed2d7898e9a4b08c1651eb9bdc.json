{"sha": "26db71783f5611ed2d7898e9a4b08c1651eb9bdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZGI3MTc4M2Y1NjExZWQyZDc4OThlOWE0YjA4YzE2NTFlYjliZGM=", "commit": {"author": {"name": "Michael Layzell", "email": "michael@thelayzells.com", "date": "2015-11-03T18:03:36Z"}, "committer": {"name": "Michael Layzell", "email": "michael@thelayzells.com", "date": "2015-11-03T18:03:36Z"}, "message": "Correct incorrect assertion in VecDeque::wrap_copy", "tree": {"sha": "e132276bcce7f99435bf09226b5ef29a053a4bad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e132276bcce7f99435bf09226b5ef29a053a4bad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26db71783f5611ed2d7898e9a4b08c1651eb9bdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26db71783f5611ed2d7898e9a4b08c1651eb9bdc", "html_url": "https://github.com/rust-lang/rust/commit/26db71783f5611ed2d7898e9a4b08c1651eb9bdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26db71783f5611ed2d7898e9a4b08c1651eb9bdc/comments", "author": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aa1f59e1eddbef7d85f7c4c9606f3941036c541", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa1f59e1eddbef7d85f7c4c9606f3941036c541", "html_url": "https://github.com/rust-lang/rust/commit/4aa1f59e1eddbef7d85f7c4c9606f3941036c541"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "67db0227cbee97945bd085a588199daf9fbba8aa", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26db71783f5611ed2d7898e9a4b08c1651eb9bdc/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26db71783f5611ed2d7898e9a4b08c1651eb9bdc/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=26db71783f5611ed2d7898e9a4b08c1651eb9bdc", "patch": "@@ -148,9 +148,9 @@ impl<T> VecDeque<T> {\n     /// Copies a contiguous block of memory len long from src to dst\n     #[inline]\n     unsafe fn copy(&self, dst: usize, src: usize, len: usize) {\n-        debug_assert!(dst + len <= self.cap(), \"dst={} src={} len={} cap={}\", dst, src, len,\n+        debug_assert!(dst + len <= self.cap(), \"cpy dst={} src={} len={} cap={}\", dst, src, len,\n                       self.cap());\n-        debug_assert!(src + len <= self.cap(), \"dst={} src={} len={} cap={}\", dst, src, len,\n+        debug_assert!(src + len <= self.cap(), \"cpy dst={} src={} len={} cap={}\", dst, src, len,\n                       self.cap());\n         ptr::copy(\n             self.ptr().offset(src as isize),\n@@ -161,9 +161,9 @@ impl<T> VecDeque<T> {\n     /// Copies a contiguous block of memory len long from src to dst\n     #[inline]\n     unsafe fn copy_nonoverlapping(&self, dst: usize, src: usize, len: usize) {\n-        debug_assert!(dst + len <= self.cap(), \"dst={} src={} len={} cap={}\", dst, src, len,\n+        debug_assert!(dst + len <= self.cap(), \"cno dst={} src={} len={} cap={}\", dst, src, len,\n                       self.cap());\n-        debug_assert!(src + len <= self.cap(), \"dst={} src={} len={} cap={}\", dst, src, len,\n+        debug_assert!(src + len <= self.cap(), \"cno dst={} src={} len={} cap={}\", dst, src, len,\n                       self.cap());\n         ptr::copy_nonoverlapping(\n             self.ptr().offset(src as isize),\n@@ -175,9 +175,11 @@ impl<T> VecDeque<T> {\n     /// (abs(dst - src) + len) must be no larger than cap() (There must be at\n     /// most one continuous overlapping region between src and dest).\n     unsafe fn wrap_copy(&self, dst: usize, src: usize, len: usize) {\n-        debug_assert!(\n-            (if src <= dst { dst - src } else { src - dst }) + len <= self.cap(),\n-            \"dst={} src={} len={} cap={}\", dst, src, len, self.cap());\n+        #[allow(dead_code)]\n+        fn diff(a: usize, b: usize) -> usize {if a <= b {b - a} else {a - b}}\n+        debug_assert!(cmp::min(diff(dst, src),\n+                               self.cap() - diff(dst, src)) + len <= self.cap(),\n+                      \"wrc dst={} src={} len={} cap={}\", dst, src, len, self.cap());\n \n         if src == dst || len == 0 { return }\n "}]}