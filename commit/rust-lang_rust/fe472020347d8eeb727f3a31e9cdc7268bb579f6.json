{"sha": "fe472020347d8eeb727f3a31e9cdc7268bb579f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNDcyMDIwMzQ3ZDhlZWI3MjdmM2EzMWU5Y2RjNzI2OGJiNTc5ZjY=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-04-18T02:48:48Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-04-19T00:41:45Z"}, "message": "Merge the Round trait into the Float trait\n\nMove the rounding functions into the `std::num::Float` trait and then remove `std::num::Round`.\n\nThis continues the flattening of the numeric traits tracked in #10387. The aim is to make `std::num` very simple and tied to the built in types, leaving the definition of more complex numeric towers to third-party libraries.\n\n[breaking-change]", "tree": {"sha": "63cabb323fb76aea7150d09744e0d8c8275b40d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63cabb323fb76aea7150d09744e0d8c8275b40d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe472020347d8eeb727f3a31e9cdc7268bb579f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe472020347d8eeb727f3a31e9cdc7268bb579f6", "html_url": "https://github.com/rust-lang/rust/commit/fe472020347d8eeb727f3a31e9cdc7268bb579f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe472020347d8eeb727f3a31e9cdc7268bb579f6/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75683cadf6c4c55360202cd6a0106be80532451", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75683cadf6c4c55360202cd6a0106be80532451", "html_url": "https://github.com/rust-lang/rust/commit/b75683cadf6c4c55360202cd6a0106be80532451"}], "stats": {"total": 224, "additions": 106, "deletions": 118}, "files": [{"sha": "8f2efc8626bfb20765428ad517edc7290029586a", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 35, "deletions": 40, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/fe472020347d8eeb727f3a31e9cdc7268bb579f6/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe472020347d8eeb727f3a31e9cdc7268bb579f6/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=fe472020347d8eeb727f3a31e9cdc7268bb579f6", "patch": "@@ -15,7 +15,7 @@ use Integer;\n use std::cmp;\n use std::fmt;\n use std::from_str::FromStr;\n-use std::num::{Zero,One,ToStrRadix,FromStrRadix,Round};\n+use std::num::{Zero, One, ToStrRadix, FromStrRadix};\n use bigint::{BigInt, BigUint, Sign, Plus, Minus};\n \n /// Represents the ratio between 2 numbers.\n@@ -113,6 +113,40 @@ impl<T: Clone + Integer + Ord>\n     pub fn recip(&self) -> Ratio<T> {\n         Ratio::new_raw(self.denom.clone(), self.numer.clone())\n     }\n+\n+    pub fn floor(&self) -> Ratio<T> {\n+        if *self < Zero::zero() {\n+            Ratio::from_integer((self.numer - self.denom + One::one()) / self.denom)\n+        } else {\n+            Ratio::from_integer(self.numer / self.denom)\n+        }\n+    }\n+\n+    pub fn ceil(&self) -> Ratio<T> {\n+        if *self < Zero::zero() {\n+            Ratio::from_integer(self.numer / self.denom)\n+        } else {\n+            Ratio::from_integer((self.numer + self.denom - One::one()) / self.denom)\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn round(&self) -> Ratio<T> {\n+        if *self < Zero::zero() {\n+            Ratio::from_integer((self.numer - self.denom + One::one()) / self.denom)\n+        } else {\n+            Ratio::from_integer((self.numer + self.denom - One::one()) / self.denom)\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn trunc(&self) -> Ratio<T> {\n+        Ratio::from_integer(self.numer / self.denom)\n+    }\n+\n+    pub fn fract(&self) -> Ratio<T> {\n+        Ratio::new_raw(self.numer % self.denom, self.denom.clone())\n+    }\n }\n \n impl Ratio<BigInt> {\n@@ -238,45 +272,6 @@ impl<T: Clone + Integer + Ord>\n impl<T: Clone + Integer + Ord>\n     Num for Ratio<T> {}\n \n-/* Utils */\n-impl<T: Clone + Integer + Ord>\n-    Round for Ratio<T> {\n-\n-    fn floor(&self) -> Ratio<T> {\n-        if *self < Zero::zero() {\n-            Ratio::from_integer((self.numer - self.denom + One::one()) / self.denom)\n-        } else {\n-            Ratio::from_integer(self.numer / self.denom)\n-        }\n-    }\n-\n-    fn ceil(&self) -> Ratio<T> {\n-        if *self < Zero::zero() {\n-            Ratio::from_integer(self.numer / self.denom)\n-        } else {\n-            Ratio::from_integer((self.numer + self.denom - One::one()) / self.denom)\n-        }\n-    }\n-\n-    #[inline]\n-    fn round(&self) -> Ratio<T> {\n-        if *self < Zero::zero() {\n-            Ratio::from_integer((self.numer - self.denom + One::one()) / self.denom)\n-        } else {\n-            Ratio::from_integer((self.numer + self.denom - One::one()) / self.denom)\n-        }\n-    }\n-\n-    #[inline]\n-    fn trunc(&self) -> Ratio<T> {\n-        Ratio::from_integer(self.numer / self.denom)\n-    }\n-\n-    fn fract(&self) -> Ratio<T> {\n-        Ratio::new_raw(self.numer % self.denom, self.denom.clone())\n-    }\n-}\n-\n /* String conversions */\n impl<T: fmt::Show> fmt::Show for Ratio<T> {\n     /// Renders as `numer/denom`."}, {"sha": "893897e661afc838735db24644a10f5a205d18c7", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fe472020347d8eeb727f3a31e9cdc7268bb579f6/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe472020347d8eeb727f3a31e9cdc7268bb579f6/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=fe472020347d8eeb727f3a31e9cdc7268bb579f6", "patch": "@@ -239,33 +239,6 @@ impl Signed for f32 {\n     fn is_negative(&self) -> bool { *self < 0.0 || (1.0 / *self) == NEG_INFINITY }\n }\n \n-impl Round for f32 {\n-    /// Round half-way cases toward `NEG_INFINITY`\n-    #[inline]\n-    fn floor(&self) -> f32 { unsafe{intrinsics::floorf32(*self)} }\n-\n-    /// Round half-way cases toward `INFINITY`\n-    #[inline]\n-    fn ceil(&self) -> f32 { unsafe{intrinsics::ceilf32(*self)} }\n-\n-    /// Round half-way cases away from `0.0`\n-    #[inline]\n-    fn round(&self) -> f32 { unsafe{intrinsics::roundf32(*self)} }\n-\n-    /// The integer part of the number (rounds towards `0.0`)\n-    #[inline]\n-    fn trunc(&self) -> f32 { unsafe{intrinsics::truncf32(*self)} }\n-\n-    /// The fractional part of the number, satisfying:\n-    ///\n-    /// ```rust\n-    /// let x = 1.65f32;\n-    /// assert!(x == x.trunc() + x.fract())\n-    /// ```\n-    #[inline]\n-    fn fract(&self) -> f32 { *self - self.trunc() }\n-}\n-\n impl Bounded for f32 {\n     #[inline]\n     fn min_value() -> f32 { 1.17549435e-38 }\n@@ -414,6 +387,31 @@ impl Float for f32 {\n         (mantissa as u64, exponent, sign)\n     }\n \n+    /// Round half-way cases toward `NEG_INFINITY`\n+    #[inline]\n+    fn floor(&self) -> f32 { unsafe{intrinsics::floorf32(*self)} }\n+\n+    /// Round half-way cases toward `INFINITY`\n+    #[inline]\n+    fn ceil(&self) -> f32 { unsafe{intrinsics::ceilf32(*self)} }\n+\n+    /// Round half-way cases away from `0.0`\n+    #[inline]\n+    fn round(&self) -> f32 { unsafe{intrinsics::roundf32(*self)} }\n+\n+    /// The integer part of the number (rounds towards `0.0`)\n+    #[inline]\n+    fn trunc(&self) -> f32 { unsafe{intrinsics::truncf32(*self)} }\n+\n+    /// The fractional part of the number, satisfying:\n+    ///\n+    /// ```rust\n+    /// let x = 1.65f32;\n+    /// assert!(x == x.trunc() + x.fract())\n+    /// ```\n+    #[inline]\n+    fn fract(&self) -> f32 { *self - self.trunc() }\n+\n     /// Archimedes' constant\n     #[inline]\n     fn pi() -> f32 { 3.14159265358979323846264338327950288 }"}, {"sha": "cf6fadd38aa440af89c36adb8b493933063f175d", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fe472020347d8eeb727f3a31e9cdc7268bb579f6/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe472020347d8eeb727f3a31e9cdc7268bb579f6/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=fe472020347d8eeb727f3a31e9cdc7268bb579f6", "patch": "@@ -247,33 +247,6 @@ impl Signed for f64 {\n     fn is_negative(&self) -> bool { *self < 0.0 || (1.0 / *self) == NEG_INFINITY }\n }\n \n-impl Round for f64 {\n-    /// Round half-way cases toward `NEG_INFINITY`\n-    #[inline]\n-    fn floor(&self) -> f64 { unsafe{intrinsics::floorf64(*self)} }\n-\n-    /// Round half-way cases toward `INFINITY`\n-    #[inline]\n-    fn ceil(&self) -> f64 { unsafe{intrinsics::ceilf64(*self)} }\n-\n-    /// Round half-way cases away from `0.0`\n-    #[inline]\n-    fn round(&self) -> f64 { unsafe{intrinsics::roundf64(*self)} }\n-\n-    /// The integer part of the number (rounds towards `0.0`)\n-    #[inline]\n-    fn trunc(&self) -> f64 { unsafe{intrinsics::truncf64(*self)} }\n-\n-    /// The fractional part of the number, satisfying:\n-    ///\n-    /// ```rust\n-    /// let x = 1.65f64;\n-    /// assert!(x == x.trunc() + x.fract())\n-    /// ```\n-    #[inline]\n-    fn fract(&self) -> f64 { *self - self.trunc() }\n-}\n-\n impl Bounded for f64 {\n     #[inline]\n     fn min_value() -> f64 { 2.2250738585072014e-308 }\n@@ -420,6 +393,31 @@ impl Float for f64 {\n         (mantissa, exponent, sign)\n     }\n \n+    /// Round half-way cases toward `NEG_INFINITY`\n+    #[inline]\n+    fn floor(&self) -> f64 { unsafe{intrinsics::floorf64(*self)} }\n+\n+    /// Round half-way cases toward `INFINITY`\n+    #[inline]\n+    fn ceil(&self) -> f64 { unsafe{intrinsics::ceilf64(*self)} }\n+\n+    /// Round half-way cases away from `0.0`\n+    #[inline]\n+    fn round(&self) -> f64 { unsafe{intrinsics::roundf64(*self)} }\n+\n+    /// The integer part of the number (rounds towards `0.0`)\n+    #[inline]\n+    fn trunc(&self) -> f64 { unsafe{intrinsics::truncf64(*self)} }\n+\n+    /// The fractional part of the number, satisfying:\n+    ///\n+    /// ```rust\n+    /// let x = 1.65f64;\n+    /// assert!(x == x.trunc() + x.fract())\n+    /// ```\n+    #[inline]\n+    fn fract(&self) -> f64 { *self - self.trunc() }\n+\n     /// Archimedes' constant\n     #[inline]\n     fn pi() -> f64 { 3.14159265358979323846264338327950288 }"}, {"sha": "b3e15a97086749962bf2eb49cd49f940543167db", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fe472020347d8eeb727f3a31e9cdc7268bb579f6/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe472020347d8eeb727f3a31e9cdc7268bb579f6/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=fe472020347d8eeb727f3a31e9cdc7268bb579f6", "patch": "@@ -162,25 +162,6 @@ pub fn abs_sub<T: Signed>(x: T, y: T) -> T {\n /// A trait for values which cannot be negative\n pub trait Unsigned: Num {}\n \n-/// A collection of rounding operations.\n-pub trait Round {\n-    /// Return the largest integer less than or equal to a number.\n-    fn floor(&self) -> Self;\n-\n-    /// Return the smallest integer greater than or equal to a number.\n-    fn ceil(&self) -> Self;\n-\n-    /// Return the nearest integer to a number. Round half-way cases away from\n-    /// `0.0`.\n-    fn round(&self) -> Self;\n-\n-    /// Return the integer part of a number.\n-    fn trunc(&self) -> Self;\n-\n-    /// Return the fractional part of a number.\n-    fn fract(&self) -> Self;\n-}\n-\n /// Raises a value to the power of exp, using exponentiation by squaring.\n ///\n /// # Example\n@@ -347,7 +328,7 @@ pub enum FPCategory {\n //\n // FIXME(#8888): Several of these functions have a parameter named\n //               `unused_self`. Removing it requires #8888 to be fixed.\n-pub trait Float: Signed + Round + Primitive {\n+pub trait Float: Signed + Primitive {\n     /// Returns the maximum of the two numbers.\n     fn max(self, other: Self) -> Self;\n     /// Returns the minimum of the two numbers.\n@@ -431,6 +412,22 @@ pub trait Float: Signed + Round + Primitive {\n     /// Returns the mantissa, exponent and sign as integers, respectively.\n     fn integer_decode(&self) -> (u64, i16, i8);\n \n+    /// Return the largest integer less than or equal to a number.\n+    fn floor(&self) -> Self;\n+\n+    /// Return the smallest integer greater than or equal to a number.\n+    fn ceil(&self) -> Self;\n+\n+    /// Return the nearest integer to a number. Round half-way cases away from\n+    /// `0.0`.\n+    fn round(&self) -> Self;\n+\n+    /// Return the integer part of a number.\n+    fn trunc(&self) -> Self;\n+\n+    /// Return the fractional part of a number.\n+    fn fract(&self) -> Self;\n+\n     /// Archimedes' constant.\n     fn pi() -> Self;\n "}, {"sha": "73dfbdd088e9a62c5498eb55470d13c5833cce90", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe472020347d8eeb727f3a31e9cdc7268bb579f6/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe472020347d8eeb727f3a31e9cdc7268bb579f6/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=fe472020347d8eeb727f3a31e9cdc7268bb579f6", "patch": "@@ -15,7 +15,7 @@ use clone::Clone;\n use container::Container;\n use iter::Iterator;\n use num::{NumCast, Zero, One, cast, Int};\n-use num::{Round, Float, FPNaN, FPInfinite, ToPrimitive};\n+use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use option::{None, Option, Some};\n@@ -258,7 +258,7 @@ pub fn int_to_str_bytes_common<T: Int>(num: T, radix: uint, sign: SignFormat, f:\n  * - Fails if `radix` > 25 and `exp_format` is `ExpBin` due to conflict\n  *   between digit and exponent sign `'p'`.\n  */\n-pub fn float_to_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Float+Round+\n+pub fn float_to_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Float+\n                                   Div<T,T>+Neg<T>+Rem<T,T>+Mul<T,T>>(\n         num: T, radix: uint, negative_zero: bool,\n         sign: SignFormat, digits: SignificantDigits, exp_format: ExponentFormat, exp_upper: bool\n@@ -491,7 +491,7 @@ pub fn float_to_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Float+Round+\n  * `to_str_bytes_common()`, for details see there.\n  */\n #[inline]\n-pub fn float_to_str_common<T:NumCast+Zero+One+Eq+Ord+NumStrConv+Float+Round+\n+pub fn float_to_str_common<T:NumCast+Zero+One+Eq+Ord+NumStrConv+Float+\n                              Div<T,T>+Neg<T>+Rem<T,T>+Mul<T,T>>(\n         num: T, radix: uint, negative_zero: bool,\n         sign: SignFormat, digits: SignificantDigits, exp_format: ExponentFormat, exp_capital: bool"}, {"sha": "724c4ca72ad0e445adb59fcfc7f9cc42166035c8", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe472020347d8eeb727f3a31e9cdc7268bb579f6/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe472020347d8eeb727f3a31e9cdc7268bb579f6/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=fe472020347d8eeb727f3a31e9cdc7268bb579f6", "patch": "@@ -45,7 +45,7 @@ pub use iter::{FromIterator, Extendable};\n pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n pub use num::{Num, NumCast, CheckedAdd, CheckedSub, CheckedMul};\n-pub use num::{Signed, Unsigned, Round};\n+pub use num::{Signed, Unsigned};\n pub use num::{Primitive, Int, Float, ToPrimitive, FromPrimitive};\n pub use path::{GenericPath, Path, PosixPath, WindowsPath};\n pub use ptr::RawPtr;"}]}