{"sha": "e9e6ccc042696e3334abff8319e769cbffa3ede8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZTZjY2MwNDI2OTZlMzMzNGFiZmY4MzE5ZTc2OWNiZmZhM2VkZTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-27T15:46:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T18:01:01Z"}, "message": "introduce `DefIdPass` and remove all impls of `Pass` but `Inline`", "tree": {"sha": "fc92d314fe727d53e5e80907db6aff1434fbc7f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc92d314fe727d53e5e80907db6aff1434fbc7f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9e6ccc042696e3334abff8319e769cbffa3ede8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e6ccc042696e3334abff8319e769cbffa3ede8", "html_url": "https://github.com/rust-lang/rust/commit/e9e6ccc042696e3334abff8319e769cbffa3ede8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9e6ccc042696e3334abff8319e769cbffa3ede8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46b342fbc03664566d65e1b3248f89cbef93ef4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/46b342fbc03664566d65e1b3248f89cbef93ef4c", "html_url": "https://github.com/rust-lang/rust/commit/46b342fbc03664566d65e1b3248f89cbef93ef4c"}], "stats": {"total": 167, "additions": 96, "deletions": 71}, "files": [{"sha": "14ad413c5385e5bc87d6a1c19df0dde95877e288", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 53, "deletions": 27, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e9e6ccc042696e3334abff8319e769cbffa3ede8/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e6ccc042696e3334abff8319e769cbffa3ede8/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=e9e6ccc042696e3334abff8319e769cbffa3ede8", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dep_graph::DepNode;\n use hir;\n use hir::def_id::{DefId, LOCAL_CRATE};\n use hir::map::DefPathData;\n use mir::{Mir, Promoted};\n use ty::TyCtxt;\n+use std::rc::Rc;\n use syntax::ast::NodeId;\n use util::common::time;\n \n@@ -99,51 +99,77 @@ pub trait PassHook {\n }\n \n /// A streamlined trait that you can implement to create a pass; the\n-/// pass will be named after the type, and it will consist of a main\n-/// loop that goes over each available MIR and applies `run_pass`.\n-pub trait MirPass {\n+/// pass will be invoked to process the MIR with the given `def_id`.\n+/// This lets you do things before we fetch the MIR itself.  You may\n+/// prefer `MirPass`.\n+pub trait DefIdPass {\n     fn name<'a>(&'a self) -> Cow<'a, str> {\n         default_name::<Self>()\n     }\n \n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          src: MirSource,\n-                          mir: &mut Mir<'tcx>);\n+                          def_id: DefId);\n }\n \n-impl<T: MirPass> Pass for T {\n+impl<T: DefIdPass> Pass for T {\n     fn name<'a>(&'a self) -> Cow<'a, str> {\n-        MirPass::name(self)\n+        DefIdPass::name(self)\n     }\n \n     fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n-            run_map_pass_task(tcx, self, def_id);\n+            DefIdPass::run_pass(self, tcx, def_id);\n         }\n     }\n }\n \n-fn run_map_pass_task<'a, 'tcx, T: MirPass>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                           pass: &T,\n-                                           def_id: DefId) {\n-    let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n-    let mir = &mut tcx.mir(def_id).borrow_mut();\n+/// A streamlined trait that you can implement to create a pass; the\n+/// pass will be named after the type, and it will consist of a main\n+/// loop that goes over each available MIR and applies `run_pass`.\n+pub trait MirPass: DepGraphSafe {\n+    fn name<'a>(&'a self) -> Cow<'a, str> {\n+        default_name::<Self>()\n+    }\n+\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          source: MirSource,\n+                          mir: &mut Mir<'tcx>);\n+}\n+\n+fn for_each_assoc_mir<'a, 'tcx, OP>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                    def_id: DefId,\n+                                    mut op: OP)\n+    where OP: FnMut(MirSource, &mut Mir<'tcx>)\n+{\n     let id = tcx.hir.as_local_node_id(def_id).expect(\"mir source requires local def-id\");\n     let source = MirSource::from_node(tcx, id);\n-    MirPass::run_pass(pass, tcx, source, mir);\n+    let mir = &mut tcx.mir(def_id).borrow_mut();\n+    op(source, mir);\n+\n+    for (promoted_index, promoted_mir) in mir.promoted.iter_enumerated_mut() {\n+        let promoted_source = MirSource::Promoted(id, promoted_index);\n+        op(promoted_source, promoted_mir);\n+    }\n+}\n+\n+impl<T: MirPass> DefIdPass for T {\n+    fn name<'a>(&'a self) -> Cow<'a, str> {\n+        MirPass::name(self)\n+    }\n \n-    for (i, mir) in mir.promoted.iter_enumerated_mut() {\n-        let source = MirSource::Promoted(id, i);\n-        MirPass::run_pass(pass, tcx, source, mir);\n+    fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n+        for_each_assoc_mir(tcx, def_id, |src, mir| MirPass::run_pass(self, tcx, src, mir));\n     }\n }\n \n /// A manager for MIR passes.\n+#[derive(Clone)]\n pub struct Passes {\n-    passes: Vec<Box<Pass>>,\n-    pass_hooks: Vec<Box<PassHook>>,\n-    plugin_passes: Vec<Box<Pass>>\n+    passes: Vec<Rc<Pass>>,\n+    pass_hooks: Vec<Rc<PassHook>>,\n+    plugin_passes: Vec<Rc<Pass>>\n }\n \n impl<'a, 'tcx> Passes {\n@@ -172,19 +198,19 @@ impl<'a, 'tcx> Passes {\n     }\n \n     /// Pushes a built-in pass.\n-    pub fn push_pass(&mut self, pass: Box<Pass>) {\n-        self.passes.push(pass);\n+    pub fn push_pass<T: Pass + 'static>(&mut self, pass: T) {\n+        self.passes.push(Rc::new(pass));\n     }\n \n     /// Pushes a pass hook.\n-    pub fn push_hook(&mut self, hook: Box<PassHook>) {\n-        self.pass_hooks.push(hook);\n+    pub fn push_hook<T: PassHook + 'static>(&mut self, hook: T) {\n+        self.pass_hooks.push(Rc::new(hook));\n     }\n }\n \n /// Copies the plugin passes.\n-impl ::std::iter::Extend<Box<Pass>> for Passes {\n-    fn extend<I: IntoIterator<Item=Box<Pass>>>(&mut self, it: I) {\n+impl ::std::iter::Extend<Rc<Pass>> for Passes {\n+    fn extend<I: IntoIterator<Item=Rc<Pass>>>(&mut self, it: I) {\n         self.plugin_passes.extend(it);\n     }\n }"}, {"sha": "a9deb52efb68af0cf9ed188d1fcfc7c36c409aa8", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9e6ccc042696e3334abff8319e769cbffa3ede8/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e6ccc042696e3334abff8319e769cbffa3ede8/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=e9e6ccc042696e3334abff8319e769cbffa3ede8", "patch": "@@ -549,7 +549,7 @@ define_maps! { <'tcx>\n     ///\n     /// Note that cross-crate MIR appears to be always borrowed\n     /// (in the `RefCell` sense) to prevent accidental mutation.\n-    [pub] mir: Mir(DefId) -> &'tcx RefCell<mir::Mir<'tcx>>,\n+    [] mir: Mir(DefId) -> &'tcx RefCell<mir::Mir<'tcx>>,\n \n     /// Set of all the def-ids in this crate that have MIR associated with\n     /// them. This includes all the body owners, but also things like struct"}, {"sha": "be344176fd25504242365da61f765047ca5a552e", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e9e6ccc042696e3334abff8319e769cbffa3ede8/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e6ccc042696e3334abff8319e769cbffa3ede8/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=e9e6ccc042696e3334abff8319e769cbffa3ede8", "patch": "@@ -975,12 +975,12 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n             // Push all the built-in validation passes.\n             // NB: if you\u2019re adding an *optimisation* it ought to go to another set of passes\n             // in stage 4 below.\n-            passes.push_hook(box mir::transform::dump_mir::DumpMir);\n-            passes.push_pass(box mir::transform::simplify::SimplifyCfg::new(\"initial\"));\n-            passes.push_pass(box mir::transform::type_check::TypeckMir);\n-            passes.push_pass(box mir::transform::qualify_consts::QualifyAndPromoteConstants);\n-            passes.push_pass(box mir::transform::simplify_branches::SimplifyBranches::new(\"initial\"));\n-            passes.push_pass(box mir::transform::simplify::SimplifyCfg::new(\"qualify-consts\"));\n+            passes.push_hook(mir::transform::dump_mir::DumpMir);\n+            passes.push_pass(mir::transform::simplify::SimplifyCfg::new(\"initial\"));\n+            passes.push_pass(mir::transform::type_check::TypeckMir);\n+            passes.push_pass(mir::transform::qualify_consts::QualifyAndPromoteConstants);\n+            passes.push_pass(mir::transform::simplify_branches::SimplifyBranches::new(\"initial\"));\n+            passes.push_pass(mir::transform::simplify::SimplifyCfg::new(\"qualify-consts\"));\n             // And run everything.\n             passes.run_passes(tcx);\n         });\n@@ -1041,27 +1041,27 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // code.\n     time(time_passes, \"MIR optimisations\", || {\n         let mut passes = ::rustc::mir::transform::Passes::new();\n-        passes.push_hook(box mir::transform::dump_mir::DumpMir);\n-        passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n-        passes.push_pass(box mir::transform::simplify::SimplifyCfg::new(\"no-landing-pads\"));\n+        passes.push_hook(mir::transform::dump_mir::DumpMir);\n+        passes.push_pass(mir::transform::no_landing_pads::NoLandingPads);\n+        passes.push_pass(mir::transform::simplify::SimplifyCfg::new(\"no-landing-pads\"));\n \n         // From here on out, regions are gone.\n-        passes.push_pass(box mir::transform::erase_regions::EraseRegions);\n+        passes.push_pass(mir::transform::erase_regions::EraseRegions);\n \n-        passes.push_pass(box mir::transform::add_call_guards::AddCallGuards);\n-        passes.push_pass(box borrowck::ElaborateDrops);\n-        passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n-        passes.push_pass(box mir::transform::simplify::SimplifyCfg::new(\"elaborate-drops\"));\n+        passes.push_pass(mir::transform::add_call_guards::AddCallGuards);\n+        passes.push_pass(borrowck::ElaborateDrops);\n+        passes.push_pass(mir::transform::no_landing_pads::NoLandingPads);\n+        passes.push_pass(mir::transform::simplify::SimplifyCfg::new(\"elaborate-drops\"));\n \n         // No lifetime analysis based on borrowing can be done from here on out.\n-        passes.push_pass(box mir::transform::inline::Inline);\n-        passes.push_pass(box mir::transform::instcombine::InstCombine);\n-        passes.push_pass(box mir::transform::deaggregator::Deaggregator);\n-        passes.push_pass(box mir::transform::copy_prop::CopyPropagation);\n-\n-        passes.push_pass(box mir::transform::simplify::SimplifyLocals);\n-        passes.push_pass(box mir::transform::add_call_guards::AddCallGuards);\n-        passes.push_pass(box mir::transform::dump_mir::Marker(\"PreTrans\"));\n+        passes.push_pass(mir::transform::inline::Inline);\n+        passes.push_pass(mir::transform::instcombine::InstCombine);\n+        passes.push_pass(mir::transform::deaggregator::Deaggregator);\n+        passes.push_pass(mir::transform::copy_prop::CopyPropagation);\n+\n+        passes.push_pass(mir::transform::simplify::SimplifyLocals);\n+        passes.push_pass(mir::transform::add_call_guards::AddCallGuards);\n+        passes.push_pass(mir::transform::dump_mir::Marker(\"PreTrans\"));\n \n         passes.run_passes(tcx);\n     });"}, {"sha": "43fb0acf2dd86c5f146c1d494f36dd8bfd1294e6", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9e6ccc042696e3334abff8319e769cbffa3ede8/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e6ccc042696e3334abff8319e769cbffa3ede8/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=e9e6ccc042696e3334abff8319e769cbffa3ede8", "patch": "@@ -15,20 +15,20 @@ use std::fmt;\n use std::fs::File;\n use std::io;\n \n-use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::ty::TyCtxt;\n-use rustc::mir::transform::{Pass, PassHook, MirSource};\n+use rustc::mir::transform::{DefIdPass, Pass, PassHook, MirSource};\n use util as mir_util;\n \n pub struct Marker(pub &'static str);\n \n-impl Pass for Marker {\n+impl DefIdPass for Marker {\n     fn name<'a>(&'a self) -> Cow<'a, str> {\n         Cow::Borrowed(self.0)\n     }\n \n-    fn run_pass<'a, 'tcx>(&self, _tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    fn run_pass<'a, 'tcx>(&self, _: TyCtxt<'a, 'tcx, 'tcx>, _: DefId) {\n         // no-op\n     }\n }"}, {"sha": "80ec83fcaefb0b94fb8a50f730169d1f45ab8a49", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e9e6ccc042696e3334abff8319e769cbffa3ede8/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e6ccc042696e3334abff8319e769cbffa3ede8/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=e9e6ccc042696e3334abff8319e769cbffa3ede8", "patch": "@@ -19,15 +19,15 @@ use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc::dep_graph::DepNode;\n use rustc::hir;\n use rustc::hir::map as hir_map;\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::hir::def_id::DefId;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::traits::{self, Reveal};\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::cast::CastTy;\n use rustc::ty::maps::Providers;\n use rustc::mir::*;\n use rustc::mir::traversal::ReversePostorder;\n-use rustc::mir::transform::{Pass, MirSource};\n+use rustc::mir::transform::{DefIdPass, MirSource};\n use rustc::mir::visit::{LvalueContext, Visitor};\n use rustc::middle::lang_items;\n use syntax::abi::Abi;\n@@ -939,25 +939,24 @@ fn qualify_const_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n pub struct QualifyAndPromoteConstants;\n \n-impl Pass for QualifyAndPromoteConstants {\n+impl DefIdPass for QualifyAndPromoteConstants {\n     fn run_pass<'a, 'tcx>(&self,\n-                          tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          def_id: DefId)\n     {\n-        for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n-            let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n-            let id = tcx.hir.as_local_node_id(def_id).unwrap();\n-            let src = MirSource::from_node(tcx, id);\n-\n-            if let MirSource::Const(_) = src {\n-                tcx.mir_const_qualif(def_id);\n-                continue;\n-            }\n-\n-            let mir = &mut tcx.mir(def_id).borrow_mut();\n-            tcx.dep_graph.write(DepNode::Mir(def_id));\n+        let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n+        let id = tcx.hir.as_local_node_id(def_id).unwrap();\n+        let src = MirSource::from_node(tcx, id);\n \n-            self.run_pass(tcx, src, mir);\n+        if let MirSource::Const(_) = src {\n+            tcx.mir_const_qualif(def_id);\n+            return;\n         }\n+\n+        let mir = &mut tcx.mir(def_id).borrow_mut();\n+        tcx.dep_graph.write(DepNode::Mir(def_id));\n+\n+        self.run_pass(tcx, src, mir);\n     }\n }\n "}]}