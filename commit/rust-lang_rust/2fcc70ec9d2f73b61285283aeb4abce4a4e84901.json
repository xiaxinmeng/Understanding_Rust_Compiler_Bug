{"sha": "2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmY2M3MGVjOWQyZjczYjYxMjg1MjgzYWViNGFiY2U0YTRlODQ5MDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-08T19:06:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-09T19:16:09Z"}, "message": "Add a \"system\" ABI\n\nThis adds an other ABI option which allows a custom selection over the target\narchitecture and OS. The only current candidate for this change is that kernel32\non win32 uses stdcall, but on win64 it uses the cdecl calling convention.\nOtherwise everywhere else this is defined as using the Cdecl calling convention.\n\ncc #10049\nCloses #8774", "tree": {"sha": "f5b239596c35f1936d3bd6f9e0f579ef665091a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5b239596c35f1936d3bd6f9e0f579ef665091a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "html_url": "https://github.com/rust-lang/rust/commit/2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d8dc004a021af5807120ae9ef2854ab99350cbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d8dc004a021af5807120ae9ef2854ab99350cbf", "html_url": "https://github.com/rust-lang/rust/commit/9d8dc004a021af5807120ae9ef2854ab99350cbf"}], "stats": {"total": 260, "additions": 151, "deletions": 109}, "files": [{"sha": "7d975d0ef6248026e45bc95b993aa1e76ca600fa", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -418,15 +418,32 @@ calling foreign functions. Some foreign functions, most notably the Windows API,\n conventions. Rust provides a way to tell the compiler which convention to use:\n \n ~~~~\n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"win32\", target_arch = \"x86\")]\n #[link_name = \"kernel32\"]\n extern \"stdcall\" {\n     fn SetEnvironmentVariableA(n: *u8, v: *u8) -> int;\n }\n ~~~~\n \n-This applies to the entire `extern` block, and must be either `\"cdecl\"` or\n-`\"stdcall\"`. The compiler may eventually support other calling conventions.\n+This applies to the entire `extern` block. The list of supported ABI constraints\n+are:\n+\n+* `stdcall`\n+* `aapcs`\n+* `cdecl`\n+* `fastcall`\n+* `Rust`\n+* `rust-intrinsic`\n+* `system`\n+* `C`\n+\n+Most of the abis in this list are self-explanatory, but the `system` abi may\n+seem a little odd. This constraint selects whatever the appropriate ABI is for\n+interoperating with the target's libraries. For example, on win32 with a x86\n+architecture, this means that the abi used would be `stdcall`. On x86_64,\n+however, windows uses the `C` calling convention, so `C` would be used. This\n+means that in our previous example, we could have used `extern \"system\" { ... }`\n+to define a block for all windows systems, not just x86 ones.\n \n # Interoperability with foreign code\n "}, {"sha": "a3ac468a5f02427cbbeaa25b56e973894c9778d7", "filename": "src/librustc/back/arm.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fback%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fback%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farm.rs?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -10,49 +10,49 @@\n \n use back::target_strs;\n use driver::session::sess_os_to_meta_os;\n-use driver::session;\n use metadata::loader::meta_section_name;\n+use syntax::abi;\n \n-pub fn get_target_strs(target_triple: ~str, target_os: session::Os) -> target_strs::t {\n+pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::t {\n     return target_strs::t {\n         module_asm: ~\"\",\n \n         meta_sect_name: meta_section_name(sess_os_to_meta_os(target_os)).to_owned(),\n \n         data_layout: match target_os {\n-          session::OsMacos => {\n+          abi::OsMacos => {\n             ~\"e-p:32:32:32\" +\n                 \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n                 \"-f32:32:32-f64:64:64\" +\n                 \"-v64:64:64-v128:64:128\" +\n                 \"-a0:0:64-n32\"\n           }\n \n-          session::OsWin32 => {\n+          abi::OsWin32 => {\n             ~\"e-p:32:32:32\" +\n                 \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n                 \"-f32:32:32-f64:64:64\" +\n                 \"-v64:64:64-v128:64:128\" +\n                 \"-a0:0:64-n32\"\n           }\n \n-          session::OsLinux => {\n+          abi::OsLinux => {\n             ~\"e-p:32:32:32\" +\n                 \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n                 \"-f32:32:32-f64:64:64\" +\n                 \"-v64:64:64-v128:64:128\" +\n                 \"-a0:0:64-n32\"\n           }\n \n-          session::OsAndroid => {\n+          abi::OsAndroid => {\n             ~\"e-p:32:32:32\" +\n                 \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n                 \"-f32:32:32-f64:64:64\" +\n                 \"-v64:64:64-v128:64:128\" +\n                 \"-a0:0:64-n32\"\n           }\n \n-          session::OsFreebsd => {\n+          abi::OsFreebsd => {\n             ~\"e-p:32:32:32\" +\n                 \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n                 \"-f32:32:32-f64:64:64\" +"}, {"sha": "a33db0128193387feb2338539db28555f993aab6", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -32,6 +32,7 @@ use std::run;\n use std::str;\n use std::vec;\n use std::rt::io::fs;\n+use syntax::abi;\n use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name, path_pretty_name};\n use syntax::attr;\n@@ -864,13 +865,13 @@ pub fn mangle_internal_name_by_path(ccx: &mut CrateContext, path: path) -> ~str\n }\n \n \n-pub fn output_dll_filename(os: session::Os, lm: LinkMeta) -> ~str {\n+pub fn output_dll_filename(os: abi::Os, lm: LinkMeta) -> ~str {\n     let (dll_prefix, dll_suffix) = match os {\n-        session::OsWin32 => (win32::DLL_PREFIX, win32::DLL_SUFFIX),\n-        session::OsMacos => (macos::DLL_PREFIX, macos::DLL_SUFFIX),\n-        session::OsLinux => (linux::DLL_PREFIX, linux::DLL_SUFFIX),\n-        session::OsAndroid => (android::DLL_PREFIX, android::DLL_SUFFIX),\n-        session::OsFreebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n+        abi::OsWin32 => (win32::DLL_PREFIX, win32::DLL_SUFFIX),\n+        abi::OsMacos => (macos::DLL_PREFIX, macos::DLL_SUFFIX),\n+        abi::OsLinux => (linux::DLL_PREFIX, linux::DLL_SUFFIX),\n+        abi::OsAndroid => (android::DLL_PREFIX, android::DLL_SUFFIX),\n+        abi::OsFreebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n     };\n     format!(\"{}{}-{}-{}{}\", dll_prefix, lm.name, lm.extras_hash, lm.vers, dll_suffix)\n }\n@@ -885,7 +886,7 @@ pub fn get_cc_prog(sess: Session) -> ~str {\n     match sess.opts.linker {\n         Some(ref linker) => linker.to_str(),\n         None => match sess.targ_cfg.os {\n-            session::OsAndroid =>\n+            abi::OsAndroid =>\n                 match &sess.opts.android_cross_path {\n                     &Some(ref path) => {\n                         format!(\"{}/bin/arm-linux-androideabi-gcc\", *path)\n@@ -895,7 +896,7 @@ pub fn get_cc_prog(sess: Session) -> ~str {\n                                     (--android-cross-path)\")\n                     }\n                 },\n-            session::OsWin32 => ~\"g++\",\n+            abi::OsWin32 => ~\"g++\",\n             _ => ~\"cc\"\n         }\n     }\n@@ -943,7 +944,7 @@ pub fn link_binary(sess: Session,\n     }\n \n     // Clean up on Darwin\n-    if sess.targ_cfg.os == session::OsMacos {\n+    if sess.targ_cfg.os == abi::OsMacos {\n         // FIXME (#9639): This needs to handle non-utf8 paths\n         run::process_status(\"dsymutil\", [output.as_str().unwrap().to_owned()]);\n     }\n@@ -972,7 +973,7 @@ pub fn link_args(sess: Session,\n     // Converts a library file-stem into a cc -l argument\n     fn unlib(config: @session::config, stem: ~str) -> ~str {\n         if stem.starts_with(\"lib\") &&\n-            config.os != session::OsWin32 {\n+            config.os != abi::OsWin32 {\n             stem.slice(3, stem.len()).to_owned()\n         } else {\n             stem\n@@ -1016,7 +1017,7 @@ pub fn link_args(sess: Session,\n         obj_filename.as_str().unwrap().to_owned()]);\n \n     let lib_cmd = match sess.targ_cfg.os {\n-        session::OsMacos => ~\"-dynamiclib\",\n+        abi::OsMacos => ~\"-dynamiclib\",\n         _ => ~\"-shared\"\n     };\n \n@@ -1067,7 +1068,7 @@ pub fn link_args(sess: Session,\n \n         // On mac we need to tell the linker to let this library\n         // be rpathed\n-        if sess.targ_cfg.os == session::OsMacos {\n+        if sess.targ_cfg.os == abi::OsMacos {\n             // FIXME (#9639): This needs to handle non-utf8 paths\n             args.push(\"-Wl,-install_name,@rpath/\"\n                       + output.filename_str().unwrap());\n@@ -1076,20 +1077,20 @@ pub fn link_args(sess: Session,\n \n     // On linux librt and libdl are an indirect dependencies via rustrt,\n     // and binutils 2.22+ won't add them automatically\n-    if sess.targ_cfg.os == session::OsLinux {\n+    if sess.targ_cfg.os == abi::OsLinux {\n         args.push_all([~\"-lrt\", ~\"-ldl\"]);\n \n         // LLVM implements the `frem` instruction as a call to `fmod`,\n         // which lives in libm. Similar to above, on some linuxes we\n         // have to be explicit about linking to it. See #2510\n         args.push(~\"-lm\");\n     }\n-    else if sess.targ_cfg.os == session::OsAndroid {\n+    else if sess.targ_cfg.os == abi::OsAndroid {\n         args.push_all([~\"-ldl\", ~\"-llog\",  ~\"-lsupc++\", ~\"-lgnustl_shared\"]);\n         args.push(~\"-lm\");\n     }\n \n-    if sess.targ_cfg.os == session::OsFreebsd {\n+    if sess.targ_cfg.os == abi::OsFreebsd {\n         args.push_all([~\"-pthread\", ~\"-lrt\",\n                        ~\"-L/usr/local/lib\", ~\"-lexecinfo\",\n                        ~\"-L/usr/local/lib/gcc46\","}, {"sha": "cbe39efdf8cf0646c0c8e20189f3c0aef559b041", "filename": "src/librustc/back/mips.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fback%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fback%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fmips.rs?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -9,50 +9,50 @@\n // except according to those terms.\n \n use back::target_strs;\n-use driver::session;\n use driver::session::sess_os_to_meta_os;\n use metadata::loader::meta_section_name;\n+use syntax::abi;\n \n-pub fn get_target_strs(target_triple: ~str, target_os: session::Os) -> target_strs::t {\n+pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::t {\n     return target_strs::t {\n         module_asm: ~\"\",\n \n         meta_sect_name: meta_section_name(sess_os_to_meta_os(target_os)).to_owned(),\n \n         data_layout: match target_os {\n-          session::OsMacos => {\n+          abi::OsMacos => {\n             ~\"e-p:32:32:32\" +\n                 \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n                 \"-f32:32:32-f64:64:64\" +\n                 \"-v64:64:64-v128:64:128\" +\n                 \"-a0:0:64-n32\"\n           }\n \n-          session::OsWin32 => {\n+          abi::OsWin32 => {\n             ~\"e-p:32:32:32\" +\n                 \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n                 \"-f32:32:32-f64:64:64\" +\n                 \"-v64:64:64-v128:64:128\" +\n                 \"-a0:0:64-n32\"\n           }\n \n-          session::OsLinux => {\n+          abi::OsLinux => {\n             ~\"e-p:32:32:32\" +\n                 \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n                 \"-f32:32:32-f64:64:64\" +\n                 \"-v64:64:64-v128:64:128\" +\n                 \"-a0:0:64-n32\"\n           }\n \n-          session::OsAndroid => {\n+          abi::OsAndroid => {\n             ~\"e-p:32:32:32\" +\n                 \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n                 \"-f32:32:32-f64:64:64\" +\n                 \"-v64:64:64-v128:64:128\" +\n                 \"-a0:0:64-n32\"\n           }\n \n-          session::OsFreebsd => {\n+          abi::OsFreebsd => {\n             ~\"e-p:32:32:32\" +\n                 \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n                 \"-f32:32:32-f64:64:64\" +"}, {"sha": "5e6a5080dcebe374b8d6061c97f59eb67c5c7f62", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -15,17 +15,18 @@ use metadata::filesearch;\n \n use std::hashmap::HashSet;\n use std::{os, vec};\n+use syntax::abi;\n \n-fn not_win32(os: session::Os) -> bool {\n-  os != session::OsWin32\n+fn not_win32(os: abi::Os) -> bool {\n+  os != abi::OsWin32\n }\n \n pub fn get_rpath_flags(sess: session::Session, out_filename: &Path)\n                     -> ~[~str] {\n     let os = sess.targ_cfg.os;\n \n     // No rpath on windows\n-    if os == session::OsWin32 {\n+    if os == abi::OsWin32 {\n         return ~[];\n     }\n \n@@ -55,7 +56,7 @@ pub fn rpaths_to_flags(rpaths: &[~str]) -> ~[~str] {\n     rpaths.iter().map(|rpath| format!(\"-Wl,-rpath,{}\",*rpath)).collect()\n }\n \n-fn get_rpaths(os: session::Os,\n+fn get_rpaths(os: abi::Os,\n               sysroot: &Path,\n               output: &Path,\n               libs: &[Path],\n@@ -100,13 +101,13 @@ fn get_rpaths(os: session::Os,\n     return rpaths;\n }\n \n-fn get_rpaths_relative_to_output(os: session::Os,\n+fn get_rpaths_relative_to_output(os: abi::Os,\n                                  output: &Path,\n                                  libs: &[Path]) -> ~[~str] {\n     libs.iter().map(|a| get_rpath_relative_to_output(os, output, a)).collect()\n }\n \n-pub fn get_rpath_relative_to_output(os: session::Os,\n+pub fn get_rpath_relative_to_output(os: abi::Os,\n                                     output: &Path,\n                                     lib: &Path)\n                                  -> ~str {\n@@ -116,10 +117,10 @@ pub fn get_rpath_relative_to_output(os: session::Os,\n \n     // Mac doesn't appear to support $ORIGIN\n     let prefix = match os {\n-        session::OsAndroid | session::OsLinux | session::OsFreebsd\n+        abi::OsAndroid | abi::OsLinux | abi::OsFreebsd\n                           => \"$ORIGIN\",\n-        session::OsMacos => \"@loader_path\",\n-        session::OsWin32 => unreachable!()\n+        abi::OsMacos => \"@loader_path\",\n+        abi::OsWin32 => unreachable!()\n     };\n \n     let mut lib = os::make_absolute(lib);\n@@ -169,13 +170,10 @@ pub fn minimize_rpaths(rpaths: &[~str]) -> ~[~str] {\n mod test {\n     use std::os;\n \n-    // FIXME(#2119): the outer attribute should be #[cfg(unix, test)], then\n-    // these redundant #[cfg(test)] blocks can be removed\n-    #[cfg(test)]\n-    #[cfg(test)]\n     use back::rpath::{get_absolute_rpath, get_install_prefix_rpath};\n     use back::rpath::{minimize_rpaths, rpaths_to_flags, get_rpath_relative_to_output};\n     use driver::session;\n+    use syntax::abi;\n \n     #[test]\n     fn test_rpaths_to_flags() {\n@@ -219,7 +217,7 @@ mod test {\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"android\")]\n     fn test_rpath_relative() {\n-      let o = session::OsLinux;\n+      let o = abi::OsLinux;\n       let res = get_rpath_relative_to_output(o,\n             &Path::new(\"bin/rustc\"), &Path::new(\"lib/libstd.so\"));\n       assert_eq!(res.as_slice(), \"$ORIGIN/../lib\");\n@@ -228,7 +226,7 @@ mod test {\n     #[test]\n     #[cfg(target_os = \"freebsd\")]\n     fn test_rpath_relative() {\n-        let o = session::OsFreebsd;\n+        let o = abi::OsFreebsd;\n         let res = get_rpath_relative_to_output(o,\n             &Path::new(\"bin/rustc\"), &Path::new(\"lib/libstd.so\"));\n         assert_eq!(res.as_slice(), \"$ORIGIN/../lib\");\n@@ -237,7 +235,7 @@ mod test {\n     #[test]\n     #[cfg(target_os = \"macos\")]\n     fn test_rpath_relative() {\n-        let o = session::OsMacos;\n+        let o = abi::OsMacos;\n         let res = get_rpath_relative_to_output(o,\n                                                &Path::new(\"bin/rustc\"),\n                                                &Path::new(\"lib/libstd.so\"));"}, {"sha": "b3c92bc40577e69ba22e02419ec6296104c58cdc", "filename": "src/librustc/back/x86.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86.rs?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -11,35 +11,35 @@\n \n use back::target_strs;\n use driver::session::sess_os_to_meta_os;\n-use driver::session;\n use metadata::loader::meta_section_name;\n+use syntax::abi;\n \n-pub fn get_target_strs(target_triple: ~str, target_os: session::Os) -> target_strs::t {\n+pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::t {\n     return target_strs::t {\n         module_asm: ~\"\",\n \n         meta_sect_name: meta_section_name(sess_os_to_meta_os(target_os)).to_owned(),\n \n         data_layout: match target_os {\n-          session::OsMacos => {\n+          abi::OsMacos => {\n             ~\"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\" +\n                 \"-i32:32:32-i64:32:64\" +\n                 \"-f32:32:32-f64:32:64-v64:64:64\" +\n                 \"-v128:128:128-a0:0:64-f80:128:128\" + \"-n8:16:32\"\n           }\n \n-          session::OsWin32 => {\n+          abi::OsWin32 => {\n             ~\"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\"\n           }\n \n-          session::OsLinux => {\n+          abi::OsLinux => {\n             ~\"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\"\n           }\n-          session::OsAndroid => {\n+          abi::OsAndroid => {\n             ~\"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\"\n           }\n \n-          session::OsFreebsd => {\n+          abi::OsFreebsd => {\n             ~\"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\"\n           }\n         },"}, {"sha": "3237085dfb9ece94f1ef5294550e57fc7e5e31a6", "filename": "src/librustc/back/x86_64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86_64.rs?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -11,41 +11,41 @@\n \n use back::target_strs;\n use driver::session::sess_os_to_meta_os;\n-use driver::session;\n use metadata::loader::meta_section_name;\n+use syntax::abi;\n \n-pub fn get_target_strs(target_triple: ~str, target_os: session::Os) -> target_strs::t {\n+pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::t {\n     return target_strs::t {\n         module_asm: ~\"\",\n \n         meta_sect_name: meta_section_name(sess_os_to_meta_os(target_os)).to_owned(),\n \n         data_layout: match target_os {\n-          session::OsMacos => {\n+          abi::OsMacos => {\n             ~\"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n                 \"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n                 \"s0:64:64-f80:128:128-n8:16:32:64\"\n           }\n \n-          session::OsWin32 => {\n+          abi::OsWin32 => {\n             // FIXME: Test this. Copied from linux (#2398)\n             ~\"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n                 \"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n                 \"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n           }\n \n-          session::OsLinux => {\n+          abi::OsLinux => {\n             ~\"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n                 \"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n                 \"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n           }\n-          session::OsAndroid => {\n+          abi::OsAndroid => {\n             ~\"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n                 \"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n                 \"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n           }\n \n-          session::OsFreebsd => {\n+          abi::OsFreebsd => {\n             ~\"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n                 \"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n                 \"s0:64:64-f80:128:128-n8:16:32:64-S128\""}, {"sha": "0fc17e46281816f6c4bdf6b8c4deb94a3697f873", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -69,11 +69,11 @@ pub fn source_name(input: &input) -> @str {\n pub fn default_configuration(sess: Session) ->\n    ast::CrateConfig {\n     let tos = match sess.targ_cfg.os {\n-        session::OsWin32 =>   @\"win32\",\n-        session::OsMacos =>   @\"macos\",\n-        session::OsLinux =>   @\"linux\",\n-        session::OsAndroid => @\"android\",\n-        session::OsFreebsd => @\"freebsd\"\n+        abi::OsWin32 =>   @\"win32\",\n+        abi::OsMacos =>   @\"macos\",\n+        abi::OsLinux =>   @\"linux\",\n+        abi::OsAndroid => @\"android\",\n+        abi::OsFreebsd => @\"freebsd\"\n     };\n \n     // ARM is bi-endian, however using NDK seems to default\n@@ -353,7 +353,7 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n     // segmented stacks are enabled.  However, unwind info directives in assembly\n     // output are OK, so we generate assembly first and then run it through\n     // an external assembler.\n-    if sess.targ_cfg.os == session::OsWin32 &&\n+    if sess.targ_cfg.os == abi::OsWin32 &&\n         (sess.opts.output_type == link::output_type_object ||\n          sess.opts.output_type == link::output_type_exe) {\n         let output_type = link::output_type_assembly;\n@@ -567,19 +567,19 @@ pub fn pretty_print_input(sess: Session,\n                         is_expanded);\n }\n \n-pub fn get_os(triple: &str) -> Option<session::Os> {\n+pub fn get_os(triple: &str) -> Option<abi::Os> {\n     for &(name, os) in os_names.iter() {\n         if triple.contains(name) { return Some(os) }\n     }\n     None\n }\n-static os_names : &'static [(&'static str, session::Os)] = &'static [\n-    (\"mingw32\", session::OsWin32),\n-    (\"win32\",   session::OsWin32),\n-    (\"darwin\",  session::OsMacos),\n-    (\"android\", session::OsAndroid),\n-    (\"linux\",   session::OsLinux),\n-    (\"freebsd\", session::OsFreebsd)];\n+static os_names : &'static [(&'static str, abi::Os)] = &'static [\n+    (\"mingw32\", abi::OsWin32),\n+    (\"win32\",   abi::OsWin32),\n+    (\"darwin\",  abi::OsMacos),\n+    (\"android\", abi::OsAndroid),\n+    (\"linux\",   abi::OsLinux),\n+    (\"freebsd\", abi::OsFreebsd)];\n \n pub fn get_arch(triple: &str) -> Option<abi::Architecture> {\n     for &(arch, abi) in architecture_abis.iter() {"}, {"sha": "57edb355d3265b3034162e2f829cb569745f0aa2", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -31,9 +31,6 @@ use syntax;\n use std::int;\n use std::hashmap::{HashMap,HashSet};\n \n-#[deriving(Eq)]\n-pub enum Os { OsWin32, OsMacos, OsLinux, OsAndroid, OsFreebsd, }\n-\n #[deriving(Clone)]\n pub enum crate_type {\n     bin_crate,\n@@ -42,7 +39,7 @@ pub enum crate_type {\n }\n \n pub struct config {\n-    os: Os,\n+    os: abi::Os,\n     arch: abi::Architecture,\n     target_strs: target_strs::t,\n     int_type: int_ty,\n@@ -410,15 +407,15 @@ pub fn building_library(req_crate_type: crate_type,\n     }\n }\n \n-pub fn sess_os_to_meta_os(os: Os) -> metadata::loader::Os {\n+pub fn sess_os_to_meta_os(os: abi::Os) -> metadata::loader::Os {\n     use metadata::loader;\n \n     match os {\n-        OsWin32 => loader::OsWin32,\n-        OsLinux => loader::OsLinux,\n-        OsAndroid => loader::OsAndroid,\n-        OsMacos => loader::OsMacos,\n-        OsFreebsd => loader::OsFreebsd\n+        abi::OsWin32 => loader::OsWin32,\n+        abi::OsLinux => loader::OsLinux,\n+        abi::OsAndroid => loader::OsAndroid,\n+        abi::OsMacos => loader::OsMacos,\n+        abi::OsFreebsd => loader::OsFreebsd\n     }\n }\n "}, {"sha": "20b630e3063c1f41524d8b95479efe4527674654", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -11,6 +11,7 @@\n \n use driver::session;\n use driver::session::Session;\n+use syntax::abi;\n use syntax::ast::{Crate, NodeId, item, item_fn};\n use syntax::ast_map;\n use syntax::attr;\n@@ -48,7 +49,7 @@ pub fn find_entry_point(session: Session, crate: &Crate, ast_map: ast_map::map)\n \n     // FIXME #4404 android JNI hacks\n     if *session.building_library &&\n-        session.targ_cfg.os != session::OsAndroid {\n+        session.targ_cfg.os != abi::OsAndroid {\n         // No need to find a main function\n         return;\n     }\n@@ -151,7 +152,7 @@ fn configure_main(this: &mut EntryContext) {\n         } else {\n             // If we *are* building a library, then we're on android where we still might\n             // optionally want to translate main $4404\n-            assert_eq!(this.session.targ_cfg.os, session::OsAndroid);\n+            assert_eq!(this.session.targ_cfg.os, abi::OsAndroid);\n         }\n     }\n }"}, {"sha": "8c9cc3b8e13924c1bf617a26eb5c8f2c8cb6310d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -85,7 +85,7 @@ use syntax::parse::token;\n use syntax::parse::token::{special_idents};\n use syntax::print::pprust::stmt_to_str;\n use syntax::{ast, ast_util, codemap, ast_map};\n-use syntax::abi::{X86, X86_64, Arm, Mips, Rust, RustIntrinsic};\n+use syntax::abi::{X86, X86_64, Arm, Mips, Rust, RustIntrinsic, OsWin32, OsAndroid};\n use syntax::visit;\n use syntax::visit::Visitor;\n \n@@ -853,7 +853,8 @@ pub fn trans_external_path(ccx: &mut CrateContext, did: ast::DefId, t: ty::t) ->\n     let name = csearch::get_symbol(ccx.sess.cstore, did);\n     match ty::get(t).sty {\n         ty::ty_bare_fn(ref fn_ty) => {\n-            match fn_ty.abis.for_arch(ccx.sess.targ_cfg.arch) {\n+            match fn_ty.abis.for_target(ccx.sess.targ_cfg.os,\n+                                        ccx.sess.targ_cfg.arch) {\n                 Some(Rust) | Some(RustIntrinsic) => {\n                     get_extern_rust_fn(ccx, fn_ty.sig.inputs, fn_ty.sig.output, name, did)\n                 }\n@@ -2312,7 +2313,7 @@ fn finish_register_fn(ccx: @mut CrateContext, sp: Span, sym: ~str, node_id: ast:\n     // FIXME #4404 android JNI hacks\n     let is_entry = is_entry_fn(&ccx.sess, node_id) && (!*ccx.sess.building_library ||\n                       (*ccx.sess.building_library &&\n-                       ccx.sess.targ_cfg.os == session::OsAndroid));\n+                       ccx.sess.targ_cfg.os == OsAndroid));\n     if is_entry {\n         create_entry_wrapper(ccx, sp, llfn);\n     }\n@@ -2981,7 +2982,7 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     };\n     // On windows we'd like to export the toplevel cratemap\n     // such that we can find it from libstd.\n-    if targ_cfg.os == session::OsWin32 && \"toplevel\" == mapname {\n+    if targ_cfg.os == OsWin32 && \"toplevel\" == mapname {\n         lib::llvm::SetLinkage(map, lib::llvm::DLLExportLinkage);\n     } else {\n         lib::llvm::SetLinkage(map, lib::llvm::ExternalLinkage);\n@@ -3157,7 +3158,7 @@ pub fn trans_crate(sess: session::Session,\n     // __rust_crate_map_toplevel symbol (extra underscore) which it will\n     // subsequently fail to find. So to mitigate that we just introduce\n     // an alias from the symbol it expects to the one that actually exists.\n-    if ccx.sess.targ_cfg.os == session::OsWin32 &&\n+    if ccx.sess.targ_cfg.os == OsWin32 &&\n        !*ccx.sess.building_library {\n \n         let maptype = val_ty(ccx.crate_map).to_ref();"}, {"sha": "f8cc246f6828e1be6058fd43af37731fd3665c87", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-use driver::session::{OsWin32, OsMacos};\n+use syntax::abi::{OsWin32, OsMacos};\n use lib::llvm::*;\n use super::cabi::*;\n use super::common::*;"}, {"sha": "7da80507df07d4842d1a51807638b0fe2e2ada39", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -32,7 +32,7 @@ use syntax::codemap::Span;\n use syntax::{ast};\n use syntax::{attr, ast_map};\n use syntax::parse::token::special_idents;\n-use syntax::abi::{RustIntrinsic, Rust, Stdcall, Fastcall,\n+use syntax::abi::{RustIntrinsic, Rust, Stdcall, Fastcall, System,\n                   Cdecl, Aapcs, C, AbiSet};\n use util::ppaux::{Repr, UserString};\n use middle::trans::type_::Type;\n@@ -75,8 +75,9 @@ struct LlvmSignature {\n \n pub fn llvm_calling_convention(ccx: &mut CrateContext,\n                                abis: AbiSet) -> Option<CallConv> {\n+    let os = ccx.sess.targ_cfg.os;\n     let arch = ccx.sess.targ_cfg.arch;\n-    abis.for_arch(arch).map(|abi| {\n+    abis.for_target(os, arch).map(|abi| {\n         match abi {\n             RustIntrinsic => {\n                 // Intrinsics are emitted by monomorphic fn\n@@ -89,6 +90,9 @@ pub fn llvm_calling_convention(ccx: &mut CrateContext,\n                     format!(\"Foreign functions with Rust ABI\"));\n             }\n \n+            // It's the ABI's job to select this, not us.\n+            System => ccx.sess.bug(\"System abi should be selected elsewhere\"),\n+\n             Stdcall => lib::llvm::X86StdcallCallConv,\n             Fastcall => lib::llvm::X86FastcallCallConv,\n             C => lib::llvm::CCallConv,"}, {"sha": "972d2f43e73f59be67ca8b39bb23a99dc8c078d5", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcc70ec9d2f73b61285283aeb4abce4a4e84901/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=2fcc70ec9d2f73b61285283aeb4abce4a4e84901", "patch": "@@ -10,6 +10,9 @@\n \n use std::to_bytes;\n \n+#[deriving(Eq)]\n+pub enum Os { OsWin32, OsMacos, OsLinux, OsAndroid, OsFreebsd, }\n+\n #[deriving(Eq)]\n pub enum Abi {\n     // NB: This ordering MUST match the AbiDatas array below.\n@@ -24,6 +27,7 @@ pub enum Abi {\n     // Multiplatform ABIs second\n     Rust,\n     C,\n+    System,\n     RustIntrinsic,\n }\n \n@@ -76,6 +80,7 @@ static AbiDatas: &'static [AbiData] = &[\n     // adjusting the indices below.\n     AbiData {abi: Rust, name: \"Rust\", abi_arch: RustArch},\n     AbiData {abi: C, name: \"C\", abi_arch: AllArch},\n+    AbiData {abi: System, name: \"system\", abi_arch: AllArch},\n     AbiData {abi: RustIntrinsic, name: \"rust-intrinsic\", abi_arch: RustArch},\n ];\n \n@@ -125,6 +130,14 @@ impl Abi {\n     pub fn name(&self) -> &'static str {\n         self.data().name\n     }\n+\n+    pub fn for_target(&self, os: Os, arch: Architecture) -> Abi {\n+        match (*self, os, arch) {\n+            (System, OsWin32, X86) => Stdcall,\n+            (System, _, _) => C,\n+            (me, _, _) => me,\n+        }\n+    }\n }\n \n impl Architecture {\n@@ -196,7 +209,7 @@ impl AbiSet {\n         self.bits == 0\n     }\n \n-    pub fn for_arch(&self, arch: Architecture) -> Option<Abi> {\n+    pub fn for_target(&self, os: Os, arch: Architecture) -> Option<Abi> {\n         // NB---Single platform ABIs come first\n \n         let mut res = None;\n@@ -210,7 +223,7 @@ impl AbiSet {\n             }\n         };\n \n-        res\n+        res.map(|r| r.for_target(os, arch))\n     }\n \n     pub fn check_valid(&self) -> Option<(Abi, Abi)> {\n@@ -344,6 +357,11 @@ fn cannot_combine_rust_intrinsic_and_cdecl() {\n     cannot_combine(RustIntrinsic, Cdecl);\n }\n \n+#[test]\n+fn can_combine_system_and_cdecl() {\n+    can_combine(System, Cdecl);\n+}\n+\n #[test]\n fn can_combine_c_and_stdcall() {\n     can_combine(C, Stdcall);\n@@ -382,36 +400,41 @@ fn abi_to_str_rust() {\n #[test]\n fn indices_are_correct() {\n     for (i, abi_data) in AbiDatas.iter().enumerate() {\n-        assert!(i == abi_data.abi.index());\n+        assert_eq!(i, abi_data.abi.index());\n     }\n \n     let bits = 1 << (X86 as u32);\n     let bits = bits | 1 << (X86_64 as u32);\n-    assert!(IntelBits == bits);\n+    assert_eq!(IntelBits, bits);\n \n     let bits = 1 << (Arm as u32);\n-    assert!(ArmBits == bits);\n+    assert_eq!(ArmBits, bits);\n }\n \n #[cfg(test)]\n-fn check_arch(abis: &[Abi], arch: Architecture, expect: Option<Abi>) {\n+fn get_arch(abis: &[Abi], os: Os, arch: Architecture) -> Option<Abi> {\n     let mut set = AbiSet::empty();\n     for &abi in abis.iter() {\n         set.add(abi);\n     }\n-    let r = set.for_arch(arch);\n-    assert!(r == expect);\n+    set.for_target(os, arch)\n }\n \n #[test]\n fn pick_multiplatform() {\n-    check_arch([C, Cdecl], X86, Some(Cdecl));\n-    check_arch([C, Cdecl], X86_64, Some(Cdecl));\n-    check_arch([C, Cdecl], Arm, Some(C));\n+    assert_eq!(get_arch([C, Cdecl], OsLinux, X86), Some(Cdecl));\n+    assert_eq!(get_arch([C, Cdecl], OsLinux, X86_64), Some(Cdecl));\n+    assert_eq!(get_arch([C, Cdecl], OsLinux, Arm), Some(C));\n }\n \n #[test]\n fn pick_uniplatform() {\n-    check_arch([Stdcall], X86, Some(Stdcall));\n-    check_arch([Stdcall], Arm, None);\n+    assert_eq!(get_arch([Stdcall], OsLinux, X86), Some(Stdcall));\n+    assert_eq!(get_arch([Stdcall], OsLinux, Arm), None);\n+    assert_eq!(get_arch([System], OsLinux, X86), Some(C));\n+    assert_eq!(get_arch([System], OsWin32, X86), Some(Stdcall));\n+    assert_eq!(get_arch([System], OsWin32, X86_64), Some(C));\n+    assert_eq!(get_arch([System], OsWin32, Arm), Some(C));\n+    assert_eq!(get_arch([Stdcall], OsWin32, X86), Some(Stdcall));\n+    assert_eq!(get_arch([Stdcall], OsWin32, X86_64), Some(Stdcall));\n }"}]}