{"sha": "9c63137ef3bd4e4d5d62971d22f8af4bcdb39816", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNjMxMzdlZjNiZDRlNGQ1ZDYyOTcxZDIyZjhhZjRiY2RiMzk4MTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-24T22:51:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-24T22:51:57Z"}, "message": "Merge #8978\n\n8978: internal: intern `AttrInput` r=jonas-schievink a=jonas-schievink\n\nsaves ~10 MB on r-a\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "66639f765e543856e9c3321fa92ee8dffe68c316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66639f765e543856e9c3321fa92ee8dffe68c316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c63137ef3bd4e4d5d62971d22f8af4bcdb39816", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrC4NCRBK7hj4Ov3rIwAAtC8IAA+DCvgphD6Gdb5K9tv5fEbQ\ndW22faSK8oRWNlGuARS8nIiZhUq9S5CawuqVTtqGAShR9ohauA6W/Xb48q01N9TA\nuQHHkMC+2CH+yUPB92fyODj9NFRJyQUQnbj7ozJ6g6+Oe1VZsRz+5+DGBqCgfWFr\nOq9XTU+4Yo0KnZ7j72R5pXY7cjVg9k+O1iVlWNaU45E76oaQnoFLpb4SJCOspf8d\nuCMaPIAtB+qzSgDanwnRVPg30ZnkMCLZ9ge0oOJdEYecCQ5+KnDjPnJyb/Dk0fYC\ngDHlCRxX1d6bkC26Zg6ge2qDmnSNoGLWDM/B+fLwjSj+IajbTuWpPWomeCfoywU=\n=fAs7\n-----END PGP SIGNATURE-----\n", "payload": "tree 66639f765e543856e9c3321fa92ee8dffe68c316\nparent 86ca1764b66e65fcb986b7188b6a77e8b53f9758\nparent 31175a7f88bd593bc4ca5a37b24183c62a438366\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621896717 +0000\ncommitter GitHub <noreply@github.com> 1621896717 +0000\n\nMerge #8978\n\n8978: internal: intern `AttrInput` r=jonas-schievink a=jonas-schievink\n\nsaves ~10 MB on r-a\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c63137ef3bd4e4d5d62971d22f8af4bcdb39816", "html_url": "https://github.com/rust-lang/rust/commit/9c63137ef3bd4e4d5d62971d22f8af4bcdb39816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c63137ef3bd4e4d5d62971d22f8af4bcdb39816/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86ca1764b66e65fcb986b7188b6a77e8b53f9758", "url": "https://api.github.com/repos/rust-lang/rust/commits/86ca1764b66e65fcb986b7188b6a77e8b53f9758", "html_url": "https://github.com/rust-lang/rust/commit/86ca1764b66e65fcb986b7188b6a77e8b53f9758"}, {"sha": "31175a7f88bd593bc4ca5a37b24183c62a438366", "url": "https://api.github.com/repos/rust-lang/rust/commits/31175a7f88bd593bc4ca5a37b24183c62a438366", "html_url": "https://github.com/rust-lang/rust/commit/31175a7f88bd593bc4ca5a37b24183c62a438366"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "385ba8c80b504c8b89e6d127c256dbafb1134748", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9c63137ef3bd4e4d5d62971d22f8af4bcdb39816/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c63137ef3bd4e4d5d62971d22f8af4bcdb39816/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=9c63137ef3bd4e4d5d62971d22f8af4bcdb39816", "patch": "@@ -105,7 +105,7 @@ impl RawAttrs {\n                 Either::Left(attr) => Attr::from_src(db, attr, hygiene, id),\n                 Either::Right(comment) => comment.doc_comment().map(|doc| Attr {\n                     id,\n-                    input: Some(AttrInput::Literal(SmolStr::new(doc))),\n+                    input: Some(Interned::new(AttrInput::Literal(SmolStr::new(doc)))),\n                     path: Interned::new(ModPath::from(hir_expand::name!(doc))),\n                 }),\n             })\n@@ -151,7 +151,7 @@ impl RawAttrs {\n                     return smallvec![attr.clone()];\n                 }\n \n-                let subtree = match &attr.input {\n+                let subtree = match attr.input.as_deref() {\n                     Some(AttrInput::TokenTree(it)) => it,\n                     _ => return smallvec![attr.clone()],\n                 };\n@@ -251,7 +251,7 @@ impl Attrs {\n     }\n \n     pub fn docs(&self) -> Option<Documentation> {\n-        let docs = self.by_key(\"doc\").attrs().flat_map(|attr| match attr.input.as_ref()? {\n+        let docs = self.by_key(\"doc\").attrs().flat_map(|attr| match attr.input.as_deref()? {\n             AttrInput::Literal(s) => Some(s),\n             AttrInput::TokenTree(_) => None,\n         });\n@@ -454,7 +454,7 @@ impl AttrsWithOwner {\n         db: &dyn DefDatabase,\n     ) -> Option<(Documentation, DocsRangeMap)> {\n         // FIXME: code duplication in `docs` above\n-        let docs = self.by_key(\"doc\").attrs().flat_map(|attr| match attr.input.as_ref()? {\n+        let docs = self.by_key(\"doc\").attrs().flat_map(|attr| match attr.input.as_deref()? {\n             AttrInput::Literal(s) => Some((s, attr.id)),\n             AttrInput::TokenTree(_) => None,\n         });\n@@ -637,10 +637,10 @@ pub(crate) struct AttrId {\n pub struct Attr {\n     pub(crate) id: AttrId,\n     pub(crate) path: Interned<ModPath>,\n-    pub(crate) input: Option<AttrInput>,\n+    pub(crate) input: Option<Interned<AttrInput>>,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum AttrInput {\n     /// `#[attr = \"string\"]`\n     Literal(SmolStr),\n@@ -670,9 +670,9 @@ impl Attr {\n                 ast::LiteralKind::String(string) => string.value()?.into(),\n                 _ => lit.syntax().first_token()?.text().trim_matches('\"').into(),\n             };\n-            Some(AttrInput::Literal(value))\n+            Some(Interned::new(AttrInput::Literal(value)))\n         } else if let Some(tt) = ast.token_tree() {\n-            Some(AttrInput::TokenTree(ast_to_token_tree(&tt).0))\n+            Some(Interned::new(AttrInput::TokenTree(ast_to_token_tree(&tt).0)))\n         } else {\n             None\n         };\n@@ -688,7 +688,7 @@ impl Attr {\n             return None;\n         }\n \n-        match &self.input {\n+        match self.input.as_deref() {\n             Some(AttrInput::TokenTree(args)) => {\n                 let mut counter = 0;\n                 let paths = args\n@@ -720,7 +720,7 @@ impl Attr {\n     }\n \n     pub fn string_value(&self) -> Option<&SmolStr> {\n-        match self.input.as_ref()? {\n+        match self.input.as_deref()? {\n             AttrInput::Literal(it) => Some(it),\n             _ => None,\n         }\n@@ -735,14 +735,14 @@ pub struct AttrQuery<'a> {\n \n impl<'a> AttrQuery<'a> {\n     pub fn tt_values(self) -> impl Iterator<Item = &'a Subtree> {\n-        self.attrs().filter_map(|attr| match attr.input.as_ref()? {\n+        self.attrs().filter_map(|attr| match attr.input.as_deref()? {\n             AttrInput::TokenTree(it) => Some(it),\n             _ => None,\n         })\n     }\n \n     pub fn string_value(self) -> Option<&'a SmolStr> {\n-        self.attrs().find_map(|attr| match attr.input.as_ref()? {\n+        self.attrs().find_map(|attr| match attr.input.as_deref()? {\n             AttrInput::Literal(it) => Some(it),\n             _ => None,\n         })"}, {"sha": "79ba970e7bfb6362db97cad4a9d7a6e5e429cdcc", "filename": "crates/hir_def/src/intern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c63137ef3bd4e4d5d62971d22f8af4bcdb39816/crates%2Fhir_def%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c63137ef3bd4e4d5d62971d22f8af4bcdb39816/crates%2Fhir_def%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fintern.rs?ref=9c63137ef3bd4e4d5d62971d22f8af4bcdb39816", "patch": "@@ -219,6 +219,7 @@ impl_internable!(\n     crate::type_ref::TypeBound,\n     crate::path::ModPath,\n     crate::path::GenericArgs,\n+    crate::attr::AttrInput,\n     GenericParams,\n     str,\n );"}, {"sha": "2ae740d0e654985bf8faf071c2052612d8c8ac7b", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c63137ef3bd4e4d5d62971d22f8af4bcdb39816/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c63137ef3bd4e4d5d62971d22f8af4bcdb39816/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=9c63137ef3bd4e4d5d62971d22f8af4bcdb39816", "patch": "@@ -285,7 +285,7 @@ impl DefCollector<'_> {\n                 let registered_name = if *attr_name == hir_expand::name![register_attr]\n                     || *attr_name == hir_expand::name![register_tool]\n                 {\n-                    match &attr.input {\n+                    match attr.input.as_deref() {\n                         Some(AttrInput::TokenTree(subtree)) => match &*subtree.token_trees {\n                             [tt::TokenTree::Leaf(tt::Leaf::Ident(name))] => name.as_name(),\n                             _ => continue,"}]}