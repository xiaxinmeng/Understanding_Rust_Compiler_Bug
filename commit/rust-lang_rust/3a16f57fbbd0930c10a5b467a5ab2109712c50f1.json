{"sha": "3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMTZmNTdmYmJkMDkzMGMxMGE1YjQ2N2E1YWIyMTA5NzEyYzUwZjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-10T14:55:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-23T20:42:52Z"}, "message": "extend Terminator into a struct so it can have additional fields", "tree": {"sha": "ea48fe27844a85a8e077646e8436317780b86f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea48fe27844a85a8e077646e8436317780b86f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "html_url": "https://github.com/rust-lang/rust/commit/3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e752d4cde359cebad6decc2e98334ff999031eba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e752d4cde359cebad6decc2e98334ff999031eba", "html_url": "https://github.com/rust-lang/rust/commit/e752d4cde359cebad6decc2e98334ff999031eba"}], "stats": {"total": 336, "additions": 177, "deletions": 159}, "files": [{"sha": "62fea3c6aa831426905672c5d327f97ff3afda39", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -228,8 +228,13 @@ pub struct BasicBlockData<'tcx> {\n     pub is_cleanup: bool,\n }\n \n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub struct Terminator<'tcx> {\n+    pub kind: TerminatorKind<'tcx>\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable)]\n-pub enum Terminator<'tcx> {\n+pub enum TerminatorKind<'tcx> {\n     /// block should have one successor in the graph; we jump there\n     Goto {\n         target: BasicBlock,\n@@ -299,7 +304,17 @@ pub enum Terminator<'tcx> {\n \n impl<'tcx> Terminator<'tcx> {\n     pub fn successors(&self) -> Cow<[BasicBlock]> {\n-        use self::Terminator::*;\n+        self.kind.successors()\n+    }\n+\n+    pub fn successors_mut(&mut self) -> Vec<&mut BasicBlock> {\n+        self.kind.successors_mut()\n+    }\n+}\n+\n+impl<'tcx> TerminatorKind<'tcx> {\n+    pub fn successors(&self) -> Cow<[BasicBlock]> {\n+        use self::TerminatorKind::*;\n         match *self {\n             Goto { target: ref b } => slice::ref_slice(b).into_cow(),\n             If { targets: (b1, b2), .. } => vec![b1, b2].into_cow(),\n@@ -320,7 +335,7 @@ impl<'tcx> Terminator<'tcx> {\n     // FIXME: no mootable cow. I\u2019m honestly not sure what a \u201ccow\u201d between `&mut [BasicBlock]` and\n     // `Vec<&mut BasicBlock>` would look like in the first place.\n     pub fn successors_mut(&mut self) -> Vec<&mut BasicBlock> {\n-        use self::Terminator::*;\n+        use self::TerminatorKind::*;\n         match *self {\n             Goto { target: ref mut b } => vec![b],\n             If { targets: (ref mut b1, ref mut b2), .. } => vec![b1, b2],\n@@ -360,7 +375,7 @@ impl<'tcx> BasicBlockData<'tcx> {\n     }\n }\n \n-impl<'tcx> Debug for Terminator<'tcx> {\n+impl<'tcx> Debug for TerminatorKind<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n         self.fmt_head(fmt)?;\n         let successors = self.successors();\n@@ -387,12 +402,12 @@ impl<'tcx> Debug for Terminator<'tcx> {\n     }\n }\n \n-impl<'tcx> Terminator<'tcx> {\n+impl<'tcx> TerminatorKind<'tcx> {\n     /// Write the \"head\" part of the terminator; that is, its name and the data it uses to pick the\n     /// successor basic block, if any. The only information not inlcuded is the list of possible\n     /// successors, which may be rendered differently between the text and the graphviz format.\n     pub fn fmt_head<W: Write>(&self, fmt: &mut W) -> fmt::Result {\n-        use self::Terminator::*;\n+        use self::TerminatorKind::*;\n         match *self {\n             Goto { .. } => write!(fmt, \"goto\"),\n             If { cond: ref lv, .. } => write!(fmt, \"if({:?})\", lv),\n@@ -419,7 +434,7 @@ impl<'tcx> Terminator<'tcx> {\n \n     /// Return the list of labels for the edges to the successor basic blocks.\n     pub fn fmt_successor_labels(&self) -> Vec<Cow<'static, str>> {\n-        use self::Terminator::*;\n+        use self::TerminatorKind::*;\n         match *self {\n             Return | Resume => vec![],\n             Goto { .. } => vec![\"\".into()],"}, {"sha": "c7e4b825d58a51def5d9ea87bedcc8429209f877", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -138,52 +138,54 @@ macro_rules! make_mir_visitor {\n             fn super_terminator(&mut self,\n                                 block: BasicBlock,\n                                 terminator: &$($mutability)* Terminator<'tcx>) {\n-                match *terminator {\n-                    Terminator::Goto { target } => {\n+                match terminator.kind {\n+                    TerminatorKind::Goto { target } => {\n                         self.visit_branch(block, target);\n                     }\n \n-                    Terminator::If { ref $($mutability)* cond,\n-                                     ref $($mutability)* targets } => {\n+                    TerminatorKind::If { ref $($mutability)* cond,\n+                                         ref $($mutability)* targets } => {\n                         self.visit_operand(cond);\n                         for &target in targets.as_slice() {\n                             self.visit_branch(block, target);\n                         }\n                     }\n \n-                    Terminator::Switch { ref $($mutability)* discr,\n-                                         adt_def: _,\n-                                         ref targets } => {\n+                    TerminatorKind::Switch { ref $($mutability)* discr,\n+                                             adt_def: _,\n+                                             ref targets } => {\n                         self.visit_lvalue(discr, LvalueContext::Inspect);\n                         for &target in targets {\n                             self.visit_branch(block, target);\n                         }\n                     }\n \n-                    Terminator::SwitchInt { ref $($mutability)* discr,\n-                                            switch_ty: _,\n-                                            values: _,\n-                                            ref targets } => {\n+                    TerminatorKind::SwitchInt { ref $($mutability)* discr,\n+                                                switch_ty: _,\n+                                                values: _,\n+                                                ref targets } => {\n                         self.visit_lvalue(discr, LvalueContext::Inspect);\n                         for &target in targets {\n                             self.visit_branch(block, target);\n                         }\n                     }\n \n-                    Terminator::Resume |\n-                    Terminator::Return => {\n+                    TerminatorKind::Resume |\n+                    TerminatorKind::Return => {\n                     }\n \n-                    Terminator::Drop { ref $($mutability)* value, target, unwind } => {\n+                    TerminatorKind::Drop { ref $($mutability)* value,\n+                                           target,\n+                                           unwind } => {\n                         self.visit_lvalue(value, LvalueContext::Drop);\n                         self.visit_branch(block, target);\n                         unwind.map(|t| self.visit_branch(block, t));\n                     }\n \n-                    Terminator::Call { ref $($mutability)* func,\n-                                       ref $($mutability)* args,\n-                                       ref $($mutability)* destination,\n-                                       cleanup } => {\n+                    TerminatorKind::Call { ref $($mutability)* func,\n+                                           ref $($mutability)* args,\n+                                           ref $($mutability)* destination,\n+                                           cleanup } => {\n                         self.visit_operand(func);\n                         for arg in args {\n                             self.visit_operand(arg);"}, {"sha": "3c3a60b995ff0037ea632f66c15d59e96c6df616", "filename": "src/librustc_borrowck/borrowck/mir/dataflow.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -410,29 +410,28 @@ impl<D: BitDenotation> DataflowState<D> {\n         bb: &repr::BasicBlockData,\n         on_return: OnReturn) where OnReturn: Fn(&D, &mut [usize], &repr::Lvalue)\n     {\n-        let term = if let Some(ref term) = bb.terminator { term } else { return };\n-        match *term {\n-            repr::Terminator::Return |\n-            repr::Terminator::Resume => {}\n-            repr::Terminator::Goto { ref target } |\n-            repr::Terminator::Drop { ref target, value: _, unwind: None } => {\n+        match bb.terminator().kind {\n+            repr::TerminatorKind::Return |\n+            repr::TerminatorKind::Resume => {}\n+            repr::TerminatorKind::Goto { ref target } |\n+            repr::TerminatorKind::Drop { ref target, value: _, unwind: None } => {\n                 self.propagate_bits_into_entry_set_for(in_out, changed, target);\n             }\n-            repr::Terminator::Drop { ref target, value: _, unwind: Some(ref unwind) } => {\n+            repr::TerminatorKind::Drop { ref target, value: _, unwind: Some(ref unwind) } => {\n                 self.propagate_bits_into_entry_set_for(in_out, changed, target);\n                 self.propagate_bits_into_entry_set_for(in_out, changed, unwind);\n             }\n-            repr::Terminator::If { ref targets, .. } => {\n+            repr::TerminatorKind::If { ref targets, .. } => {\n                 self.propagate_bits_into_entry_set_for(in_out, changed, &targets.0);\n                 self.propagate_bits_into_entry_set_for(in_out, changed, &targets.1);\n             }\n-            repr::Terminator::Switch { ref targets, .. } |\n-            repr::Terminator::SwitchInt { ref targets, .. } => {\n+            repr::TerminatorKind::Switch { ref targets, .. } |\n+            repr::TerminatorKind::SwitchInt { ref targets, .. } => {\n                 for target in targets {\n                     self.propagate_bits_into_entry_set_for(in_out, changed, target);\n                 }\n             }\n-            repr::Terminator::Call { ref cleanup, ref destination, func: _, args: _ } => {\n+            repr::TerminatorKind::Call { ref cleanup, ref destination, func: _, args: _ } => {\n                 if let Some(ref unwind) = *cleanup {\n                     self.propagate_bits_into_entry_set_for(in_out, changed, unwind);\n                 }"}, {"sha": "0c42ac4fd8430380f74da8f2fe7559f0df0d6403", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 38, "deletions": 40, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -11,7 +11,7 @@\n \n use rustc::middle::ty;\n use rustc::mir::repr::{self, Mir, BasicBlock, Lvalue, Rvalue};\n-use rustc::mir::repr::{StatementKind, Terminator};\n+use rustc::mir::repr::{StatementKind, TerminatorKind};\n use rustc::util::nodemap::FnvHashMap;\n \n use std::cell::{Cell};\n@@ -577,50 +577,48 @@ fn gather_moves<'tcx>(mir: &Mir<'tcx>, tcx: &ty::TyCtxt<'tcx>) -> MoveData<'tcx>\n             }\n         }\n \n-        if let Some(ref term) = bb_data.terminator {\n-            match *term {\n-                Terminator::Goto { target: _ } | Terminator::Resume => { }\n+        match bb_data.terminator().kind {\n+            TerminatorKind::Goto { target: _ } | TerminatorKind::Resume => { }\n \n-                Terminator::Return => {\n-                    let source = Location { block: bb,\n-                                            index: bb_data.statements.len() };\n-                    let lval = &Lvalue::ReturnPointer.deref();\n-                    bb_ctxt.on_move_out_lval(SK::Return, lval, source);\n-                }\n+            TerminatorKind::Return => {\n+                let source = Location { block: bb,\n+                                        index: bb_data.statements.len() };\n+                let lval = &Lvalue::ReturnPointer.deref();\n+                bb_ctxt.on_move_out_lval(SK::Return, lval, source);\n+            }\n \n-                Terminator::If { ref cond, targets: _ } => {\n-                    // The `cond` is always of (copyable) type `bool`,\n-                    // so there will never be anything to move.\n-                    let _ = cond;\n-                }\n+            TerminatorKind::If { ref cond, targets: _ } => {\n+                // The `cond` is always of (copyable) type `bool`,\n+                // so there will never be anything to move.\n+                let _ = cond;\n+            }\n \n-                Terminator::SwitchInt { switch_ty: _, values: _, targets: _, ref discr } |\n-                Terminator::Switch { adt_def: _, targets: _, ref discr } => {\n-                    // The `discr` is not consumed; that is instead\n-                    // encoded on specific match arms (and for\n-                    // SwitchInt`, it is always a copyable integer\n-                    // type anyway).\n-                    let _ = discr;\n-                }\n+            TerminatorKind::SwitchInt { switch_ty: _, values: _, targets: _, ref discr } |\n+            TerminatorKind::Switch { adt_def: _, targets: _, ref discr } => {\n+                // The `discr` is not consumed; that is instead\n+                // encoded on specific match arms (and for\n+                // SwitchInt`, it is always a copyable integer\n+                // type anyway).\n+                let _ = discr;\n+            }\n \n-                Terminator::Drop { value: ref lval, target: _, unwind: _ } => {\n-                    let source = Location { block: bb,\n-                                            index: bb_data.statements.len() };\n-                    bb_ctxt.on_move_out_lval(SK::Drop, lval, source);\n-                }\n+            TerminatorKind::Drop { value: ref lval, target: _, unwind: _ } => {\n+                let source = Location { block: bb,\n+                                        index: bb_data.statements.len() };\n+                bb_ctxt.on_move_out_lval(SK::Drop, lval, source);\n+            }\n \n-                Terminator::Call { ref func, ref args, ref destination, cleanup: _ } => {\n-                    let source = Location { block: bb,\n-                                            index: bb_data.statements.len() };\n-                    bb_ctxt.on_operand(SK::CallFn, func, source);\n-                    for arg in args {\n-                        bb_ctxt.on_operand(SK::CallArg, arg, source);\n-                    }\n-                    if let Some((ref destination, _bb)) = *destination {\n-                        // Create MovePath for `destination`, then\n-                        // discard returned index.\n-                        bb_ctxt.builder.move_path_for(destination);\n-                    }\n+            TerminatorKind::Call { ref func, ref args, ref destination, cleanup: _ } => {\n+                let source = Location { block: bb,\n+                                        index: bb_data.statements.len() };\n+                bb_ctxt.on_operand(SK::CallFn, func, source);\n+                for arg in args {\n+                    bb_ctxt.on_operand(SK::CallArg, arg, source);\n+                }\n+                if let Some((ref destination, _bb)) = *destination {\n+                    // Create MovePath for `destination`, then\n+                    // discard returned index.\n+                    bb_ctxt.builder.move_path_for(destination);\n                 }\n             }\n         }"}, {"sha": "ed99364a0f230c0af02c60d6ea1a7a8e275d294b", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -83,9 +83,11 @@ impl<'tcx> CFG<'tcx> {\n \n     pub fn terminate(&mut self,\n                      block: BasicBlock,\n-                     terminator: Terminator<'tcx>) {\n+                     kind: TerminatorKind<'tcx>) {\n         debug_assert!(self.block_data(block).terminator.is_none(),\n                       \"terminate: block {:?} already has a terminator set\", block);\n-        self.block_data_mut(block).terminator = Some(terminator);\n+        self.block_data_mut(block).terminator = Some(Terminator {\n+            kind: kind\n+        });\n     }\n }"}, {"sha": "fa864625f7f32e1baf86f2d1e1f8a547f20c1272", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -68,7 +68,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n \n                 let (success, failure) = (this.cfg.start_new_block(), this.cfg.start_new_block());\n                 this.cfg.terminate(block,\n-                                   Terminator::If {\n+                                   TerminatorKind::If {\n                                        cond: Operand::Consume(lt),\n                                        targets: (success, failure),\n                                    });"}, {"sha": "0ce2494ee35efc8cde0815e49168eeb29047bcfe", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -53,7 +53,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n \n                 let mut then_block = this.cfg.start_new_block();\n                 let mut else_block = this.cfg.start_new_block();\n-                this.cfg.terminate(block, Terminator::If {\n+                this.cfg.terminate(block, TerminatorKind::If {\n                     cond: operand,\n                     targets: (then_block, else_block)\n                 });\n@@ -70,8 +70,8 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 };\n \n                 let join_block = this.cfg.start_new_block();\n-                this.cfg.terminate(then_block, Terminator::Goto { target: join_block });\n-                this.cfg.terminate(else_block, Terminator::Goto { target: join_block });\n+                this.cfg.terminate(then_block, TerminatorKind::Goto { target: join_block });\n+                this.cfg.terminate(else_block, TerminatorKind::Goto { target: join_block });\n \n                 join_block.unit()\n             }\n@@ -97,10 +97,10 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                     LogicalOp::And => (else_block, false_block),\n                     LogicalOp::Or => (true_block, else_block),\n                 };\n-                this.cfg.terminate(block, Terminator::If { cond: lhs, targets: blocks });\n+                this.cfg.terminate(block, TerminatorKind::If { cond: lhs, targets: blocks });\n \n                 let rhs = unpack!(else_block = this.as_operand(else_block, rhs));\n-                this.cfg.terminate(else_block, Terminator::If {\n+                this.cfg.terminate(else_block, TerminatorKind::If {\n                     cond: rhs,\n                     targets: (true_block, false_block)\n                 });\n@@ -121,8 +121,8 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                         literal: this.hir.false_literal(),\n                     });\n \n-                this.cfg.terminate(true_block, Terminator::Goto { target: join_block });\n-                this.cfg.terminate(false_block, Terminator::Goto { target: join_block });\n+                this.cfg.terminate(true_block, TerminatorKind::Goto { target: join_block });\n+                this.cfg.terminate(false_block, TerminatorKind::Goto { target: join_block });\n \n                 join_block.unit()\n             }\n@@ -146,7 +146,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 let exit_block = this.cfg.start_new_block();\n \n                 // start the loop\n-                this.cfg.terminate(block, Terminator::Goto { target: loop_block });\n+                this.cfg.terminate(block, TerminatorKind::Goto { target: loop_block });\n \n                 let might_break = this.in_loop_scope(loop_block, exit_block, move |this| {\n                     // conduct the test, if necessary\n@@ -159,7 +159,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                         let cond = unpack!(loop_block_end = this.as_operand(loop_block, cond_expr));\n                         body_block = this.cfg.start_new_block();\n                         this.cfg.terminate(loop_block_end,\n-                                           Terminator::If {\n+                                           TerminatorKind::If {\n                                                cond: cond,\n                                                targets: (body_block, exit_block)\n                                            });\n@@ -175,7 +175,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                     let tmp = this.get_unit_temp();\n                     // Execute the body, branching back to the test.\n                     let body_block_end = unpack!(this.into(&tmp, body_block, body));\n-                    this.cfg.terminate(body_block_end, Terminator::Goto { target: loop_block });\n+                    this.cfg.terminate(body_block_end, TerminatorKind::Goto { target: loop_block });\n                 });\n                 // If the loop may reach its exit_block, we assign an empty tuple to the\n                 // destination to keep the MIR well-formed.\n@@ -254,7 +254,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n \n                 let success = this.cfg.start_new_block();\n                 let cleanup = this.diverge_cleanup();\n-                this.cfg.terminate(block, Terminator::Call {\n+                this.cfg.terminate(block, TerminatorKind::Call {\n                     func: fun,\n                     args: args,\n                     cleanup: cleanup,"}, {"sha": "2018d7255f5edd007f8ce7f3ed7c043fbcf761f3", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -97,7 +97,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         for (arm_index, arm_body) in arm_bodies.into_iter().enumerate() {\n             let mut arm_block = arm_blocks.blocks[arm_index];\n             unpack!(arm_block = self.into(destination, arm_block, arm_body));\n-            self.cfg.terminate(arm_block, Terminator::Goto { target: end_block });\n+            self.cfg.terminate(arm_block, TerminatorKind::Goto { target: end_block });\n         }\n \n         end_block.unit()\n@@ -383,7 +383,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         } else {\n             let join_block = self.cfg.start_new_block();\n             for block in otherwise {\n-                self.cfg.terminate(block, Terminator::Goto { target: join_block });\n+                self.cfg.terminate(block, TerminatorKind::Goto { target: join_block });\n             }\n             join_block\n         }\n@@ -555,11 +555,11 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             // guard, this block is simply unreachable\n             let cond = unpack!(block = self.as_operand(block, guard));\n             let otherwise = self.cfg.start_new_block();\n-            self.cfg.terminate(block, Terminator::If { cond: cond,\n+            self.cfg.terminate(block, TerminatorKind::If { cond: cond,\n                                                        targets: (arm_block, otherwise)});\n             Some(otherwise)\n         } else {\n-            self.cfg.terminate(block, Terminator::Goto { target: arm_block });\n+            self.cfg.terminate(block, TerminatorKind::Goto { target: arm_block });\n             None\n         }\n     }"}, {"sha": "74402ccba348f2ab578d38806f9ad27e9d51af47", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -153,7 +153,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 let target_blocks: Vec<_> =\n                     (0..num_enum_variants).map(|_| self.cfg.start_new_block())\n                                           .collect();\n-                self.cfg.terminate(block, Terminator::Switch {\n+                self.cfg.terminate(block, TerminatorKind::Switch {\n                     discr: lvalue.clone(),\n                     adt_def: adt_def,\n                     targets: target_blocks.clone()\n@@ -168,7 +168,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                            .map(|_| self.cfg.start_new_block())\n                            .chain(Some(otherwise))\n                            .collect();\n-                self.cfg.terminate(block, Terminator::SwitchInt {\n+                self.cfg.terminate(block, TerminatorKind::SwitchInt {\n                     discr: lvalue.clone(),\n                     switch_ty: switch_ty,\n                     values: options.clone(),\n@@ -286,7 +286,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 // branch based on result\n                 let target_blocks: Vec<_> = vec![self.cfg.start_new_block(),\n                                                  self.cfg.start_new_block()];\n-                self.cfg.terminate(block, Terminator::If {\n+                self.cfg.terminate(block, TerminatorKind::If {\n                     cond: Operand::Consume(result),\n                     targets: (target_blocks[0], target_blocks[1])\n                 });\n@@ -313,7 +313,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n \n         // branch based on result\n         let target_block = self.cfg.start_new_block();\n-        self.cfg.terminate(block, Terminator::If {\n+        self.cfg.terminate(block, TerminatorKind::If {\n             cond: Operand::Consume(result),\n             targets: (target_block, fail_block)\n         });"}, {"sha": "44bbb2e3f193985010c12c72f80961600364aeba", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -166,8 +166,8 @@ pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n                                                           argument_extent,\n                                                           ast_block));\n \n-    builder.cfg.terminate(block, Terminator::Goto { target: END_BLOCK });\n-    builder.cfg.terminate(END_BLOCK, Terminator::Return);\n+    builder.cfg.terminate(block, TerminatorKind::Goto { target: END_BLOCK });\n+    builder.cfg.terminate(END_BLOCK, TerminatorKind::Return);\n \n     MirPlusPlus {\n         mir: Mir {"}, {"sha": "c6d24591d2ac3de6739435ad96f1d43407782b8e", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -295,7 +295,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 .postdoms\n                 .push(self.cfg.current_location(block));\n         }\n-        self.cfg.terminate(block, Terminator::Goto { target: target });\n+        self.cfg.terminate(block, TerminatorKind::Goto { target: target });\n     }\n \n     // Finding scopes\n@@ -432,7 +432,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n     pub fn build_drop(&mut self, block: BasicBlock, value: Lvalue<'tcx>) -> BlockAnd<()> {\n         let next_target = self.cfg.start_new_block();\n         let diverge_target = self.diverge_cleanup();\n-        self.cfg.terminate(block, Terminator::Drop {\n+        self.cfg.terminate(block, TerminatorKind::Drop {\n             value: value,\n             target: next_target,\n             unwind: diverge_target,\n@@ -474,7 +474,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         self.cfg.push_assign(block, scope_id, span, &tuple_ref, // tuple_ref = &tuple;\n                              Rvalue::Ref(region, BorrowKind::Shared, tuple));\n         let cleanup = self.diverge_cleanup();\n-        self.cfg.terminate(block, Terminator::Call {\n+        self.cfg.terminate(block, TerminatorKind::Call {\n             func: Operand::Constant(func),\n             args: vec![Operand::Consume(tuple_ref), index, len],\n             destination: None,\n@@ -516,7 +516,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         self.cfg.push_assign(block, scope_id, span, &tuple_ref, // tuple_ref = &tuple;\n                              Rvalue::Ref(region, BorrowKind::Shared, tuple));\n         let cleanup = self.diverge_cleanup();\n-        self.cfg.terminate(block, Terminator::Call {\n+        self.cfg.terminate(block, TerminatorKind::Call {\n             func: Operand::Constant(func),\n             args: vec![Operand::Consume(tuple_ref)],\n             cleanup: cleanup,\n@@ -575,7 +575,7 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n             earlier_scopes.iter().rev().flat_map(|s| s.cached_block()).next()\n         });\n         let next = cfg.start_new_block();\n-        cfg.terminate(block, Terminator::Drop {\n+        cfg.terminate(block, TerminatorKind::Drop {\n             value: drop_data.value.clone(),\n             target: next,\n             unwind: on_diverge\n@@ -600,7 +600,7 @@ fn build_diverge_scope<'tcx>(tcx: &TyCtxt<'tcx>,\n     for drop_data in scope.drops.iter_mut().rev() {\n         if let Some(cached_block) = drop_data.cached_block {\n             if let Some((previous_block, previous_value)) = previous {\n-                cfg.terminate(previous_block, Terminator::Drop {\n+                cfg.terminate(previous_block, TerminatorKind::Drop {\n                     value: previous_value,\n                     target: cached_block,\n                     unwind: None\n@@ -613,7 +613,7 @@ fn build_diverge_scope<'tcx>(tcx: &TyCtxt<'tcx>,\n             let block = cfg.start_new_cleanup_block();\n             drop_data.cached_block = Some(block);\n             if let Some((previous_block, previous_value)) = previous {\n-                cfg.terminate(previous_block, Terminator::Drop {\n+                cfg.terminate(previous_block, TerminatorKind::Drop {\n                     value: previous_value,\n                     target: block,\n                     unwind: None\n@@ -628,7 +628,7 @@ fn build_diverge_scope<'tcx>(tcx: &TyCtxt<'tcx>,\n     // Prepare the end target for this chain.\n     let mut target = target.unwrap_or_else(||{\n         let b = cfg.start_new_cleanup_block();\n-        cfg.terminate(b, Terminator::Resume);\n+        cfg.terminate(b, TerminatorKind::Resume);\n         b\n     });\n \n@@ -646,7 +646,7 @@ fn build_diverge_scope<'tcx>(tcx: &TyCtxt<'tcx>,\n \n     if let Some((previous_block, previous_value)) = previous {\n         // Finally, branch into that just-built `target` from the `previous_block`.\n-        cfg.terminate(previous_block, Terminator::Drop {\n+        cfg.terminate(previous_block, TerminatorKind::Drop {\n             value: previous_value,\n             target: target,\n             unwind: None\n@@ -662,14 +662,15 @@ fn build_diverge_scope<'tcx>(tcx: &TyCtxt<'tcx>,\n fn build_free<'tcx>(tcx: &TyCtxt<'tcx>,\n                     unit_temp: Lvalue<'tcx>,\n                     data: &FreeData<'tcx>,\n-                    target: BasicBlock) -> Terminator<'tcx> {\n+                    target: BasicBlock)\n+                    -> TerminatorKind<'tcx> {\n     let free_func = tcx.lang_items.require(lang_items::BoxFreeFnLangItem)\n                        .unwrap_or_else(|e| tcx.sess.fatal(&e));\n     let substs = tcx.mk_substs(Substs::new(\n         VecPerParamSpace::new(vec![], vec![], vec![data.item_ty]),\n         VecPerParamSpace::new(vec![], vec![], vec![])\n     ));\n-    Terminator::Call {\n+    TerminatorKind::Call {\n         func: Operand::Constant(Constant {\n             span: data.span,\n             ty: tcx.lookup_item_type(free_func).ty.subst(tcx, substs),"}, {"sha": "a5e749ea6870eab568244089fe9a07e29da5e2a6", "filename": "src/librustc_mir/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fgraphviz.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -83,7 +83,7 @@ pub fn write_node_label<W: Write, INIT, FINI>(block: BasicBlock,\n     // Terminator head at the bottom, not including the list of successor blocks. Those will be\n     // displayed as labels on the edges between blocks.\n     let mut terminator_head = String::new();\n-    data.terminator().fmt_head(&mut terminator_head).unwrap();\n+    data.terminator().kind.fmt_head(&mut terminator_head).unwrap();\n     write!(w, r#\"<tr><td align=\"left\">{}</td></tr>\"#, dot::escape_html(&terminator_head))?;\n \n     fini(w)?;\n@@ -104,7 +104,7 @@ fn write_node<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<(\n /// Write graphviz DOT edges with labels between the given basic block and all of its successors.\n fn write_edges<W: Write>(source: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> {\n     let terminator = &mir.basic_block_data(source).terminator();\n-    let labels = terminator.fmt_successor_labels();\n+    let labels = terminator.kind.fmt_successor_labels();\n \n     for (&target, label) in terminator.successors().iter().zip(labels) {\n         writeln!(w, r#\"    {} -> {} [label=\"{}\"];\"#, node(source), node(target), label)?;"}, {"sha": "d8aa0d9b72503bd97513dfb28beeaa96521cd65e", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -58,17 +58,17 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n     }\n \n     fn visit_terminator(&mut self, bb: BasicBlock, terminator: &mut Terminator<'tcx>) {\n-        match *terminator {\n-            Terminator::Goto { .. } |\n-            Terminator::Resume |\n-            Terminator::Return |\n-            Terminator::If { .. } |\n-            Terminator::Switch { .. } |\n-            Terminator::Drop { .. } |\n-            Terminator::Call { .. } => {\n+        match terminator.kind {\n+            TerminatorKind::Goto { .. } |\n+            TerminatorKind::Resume |\n+            TerminatorKind::Return |\n+            TerminatorKind::If { .. } |\n+            TerminatorKind::Switch { .. } |\n+            TerminatorKind::Drop { .. } |\n+            TerminatorKind::Call { .. } => {\n                 /* nothing to do */\n             },\n-            Terminator::SwitchInt { ref mut switch_ty, .. } => {\n+            TerminatorKind::SwitchInt { ref mut switch_ty, .. } => {\n                 *switch_ty = self.tcx.erase_regions(switch_ty);\n             },\n         }"}, {"sha": "0e9a18107870eda3c0bdbe7ed2366f0c1908a6ca", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -21,19 +21,19 @@ pub struct NoLandingPads;\n \n impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n     fn visit_terminator(&mut self, bb: BasicBlock, terminator: &mut Terminator<'tcx>) {\n-        match *terminator {\n-            Terminator::Goto { .. } |\n-            Terminator::Resume |\n-            Terminator::Return |\n-            Terminator::If { .. } |\n-            Terminator::Switch { .. } |\n-            Terminator::SwitchInt { .. } => {\n+        match terminator.kind {\n+            TerminatorKind::Goto { .. } |\n+            TerminatorKind::Resume |\n+            TerminatorKind::Return |\n+            TerminatorKind::If { .. } |\n+            TerminatorKind::Switch { .. } |\n+            TerminatorKind::SwitchInt { .. } => {\n                 /* nothing to do */\n             },\n-            Terminator::Drop { ref mut unwind, .. } => {\n+            TerminatorKind::Drop { ref mut unwind, .. } => {\n                 unwind.take();\n             },\n-            Terminator::Call { ref mut cleanup, .. } => {\n+            TerminatorKind::Call { ref mut cleanup, .. } => {\n                 cleanup.take();\n             },\n         }"}, {"sha": "4e192095043eb075b83afa084d81fe04b8ba6405", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -30,8 +30,8 @@ impl SimplifyCfg {\n             let mut seen: Vec<BasicBlock> = Vec::with_capacity(8);\n \n             while mir.basic_block_data(target).statements.is_empty() {\n-                match mir.basic_block_data(target).terminator {\n-                    Some(Terminator::Goto { target: next }) => {\n+                match mir.basic_block_data(target).terminator().kind {\n+                    TerminatorKind::Goto { target: next } => {\n                         if seen.contains(&next) {\n                             return None;\n                         }\n@@ -71,27 +71,27 @@ impl SimplifyCfg {\n         for bb in mir.all_basic_blocks() {\n             let basic_block = mir.basic_block_data_mut(bb);\n             let mut terminator = basic_block.terminator_mut();\n-            *terminator = match *terminator {\n-                Terminator::If { ref targets, .. } if targets.0 == targets.1 => {\n+            terminator.kind = match terminator.kind {\n+                TerminatorKind::If { ref targets, .. } if targets.0 == targets.1 => {\n                     changed = true;\n-                    Terminator::Goto { target: targets.0 }\n+                    TerminatorKind::Goto { target: targets.0 }\n                 }\n \n-                Terminator::If { ref targets, cond: Operand::Constant(Constant {\n+                TerminatorKind::If { ref targets, cond: Operand::Constant(Constant {\n                     literal: Literal::Value {\n                         value: ConstVal::Bool(cond)\n                     }, ..\n                 }) } => {\n                     changed = true;\n                     if cond {\n-                        Terminator::Goto { target: targets.0 }\n+                        TerminatorKind::Goto { target: targets.0 }\n                     } else {\n-                        Terminator::Goto { target: targets.1 }\n+                        TerminatorKind::Goto { target: targets.1 }\n                     }\n                 }\n \n-                Terminator::SwitchInt { ref targets, .. }  if targets.len() == 1 => {\n-                    Terminator::Goto { target: targets[0] }\n+                TerminatorKind::SwitchInt { ref targets, .. } if targets.len() == 1 => {\n+                    TerminatorKind::Goto { target: targets[0] }\n                 }\n                 _ => continue\n             }"}, {"sha": "c0605ebe6d4a89cee8055f72fedd54b6b1457765", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -376,15 +376,15 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         term: &Terminator<'tcx>) {\n         debug!(\"check_terminator: {:?}\", term);\n         let tcx = self.tcx();\n-        match *term {\n-            Terminator::Goto { .. } |\n-            Terminator::Resume |\n-            Terminator::Return |\n-            Terminator::Drop { .. } => {\n+        match term.kind {\n+            TerminatorKind::Goto { .. } |\n+            TerminatorKind::Resume |\n+            TerminatorKind::Return |\n+            TerminatorKind::Drop { .. } => {\n                 // no checks needed for these\n             }\n \n-            Terminator::If { ref cond, .. } => {\n+            TerminatorKind::If { ref cond, .. } => {\n                 let cond_ty = mir.operand_ty(tcx, cond);\n                 match cond_ty.sty {\n                     ty::TyBool => {}\n@@ -393,7 +393,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     }\n                 }\n             }\n-            Terminator::SwitchInt { ref discr, switch_ty, .. } => {\n+            TerminatorKind::SwitchInt { ref discr, switch_ty, .. } => {\n                 let discr_ty = mir.lvalue_ty(tcx, discr).to_ty(tcx);\n                 if let Err(terr) = self.mk_subty(self.last_span, discr_ty, switch_ty) {\n                     span_mirbug!(self, term, \"bad SwitchInt ({:?} on {:?}): {:?}\",\n@@ -406,7 +406,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n                 // FIXME: check the values\n             }\n-            Terminator::Switch { ref discr, adt_def, ref targets } => {\n+            TerminatorKind::Switch { ref discr, adt_def, ref targets } => {\n                 let discr_ty = mir.lvalue_ty(tcx, discr).to_ty(tcx);\n                 match discr_ty.sty {\n                     ty::TyEnum(def, _)\n@@ -418,7 +418,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     }\n                 }\n             }\n-            Terminator::Call { ref func, ref args, ref destination, .. } => {\n+            TerminatorKind::Call { ref func, ref args, ref destination, .. } => {\n                 let func_ty = mir.operand_ty(tcx, func);\n                 debug!(\"check_terminator: call, func_ty={:?}\", func_ty);\n                 let func_ty = match func_ty.sty {"}, {"sha": "0fb4975453a230b43790cda37be3b7d7e6a5f800", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a16f57fbbd0930c10a5b467a5ab2109712c50f1/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=3a16f57fbbd0930c10a5b467a5ab2109712c50f1", "patch": "@@ -56,8 +56,8 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n         debug!(\"trans_block: terminator: {:?}\", data.terminator());\n \n-        match *data.terminator() {\n-            mir::Terminator::Resume => {\n+        match data.terminator().kind {\n+            mir::TerminatorKind::Resume => {\n                 if let Some(cleanup_pad) = cleanup_pad {\n                     bcx.cleanup_ret(cleanup_pad, None);\n                 } else {\n@@ -70,18 +70,18 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 }\n             }\n \n-            mir::Terminator::Goto { target } => {\n+            mir::TerminatorKind::Goto { target } => {\n                 funclet_br(bcx, self.llblock(target));\n             }\n \n-            mir::Terminator::If { ref cond, targets: (true_bb, false_bb) } => {\n+            mir::TerminatorKind::If { ref cond, targets: (true_bb, false_bb) } => {\n                 let cond = self.trans_operand(&bcx, cond);\n                 let lltrue = self.llblock(true_bb);\n                 let llfalse = self.llblock(false_bb);\n                 bcx.cond_br(cond.immediate(), lltrue, llfalse);\n             }\n \n-            mir::Terminator::Switch { ref discr, ref adt_def, ref targets } => {\n+            mir::TerminatorKind::Switch { ref discr, ref adt_def, ref targets } => {\n                 let discr_lvalue = self.trans_lvalue(&bcx, discr);\n                 let ty = discr_lvalue.ty.to_ty(bcx.tcx());\n                 let repr = adt::represent_type(bcx.ccx(), ty);\n@@ -103,7 +103,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 }\n             }\n \n-            mir::Terminator::SwitchInt { ref discr, switch_ty, ref values, ref targets } => {\n+            mir::TerminatorKind::SwitchInt { ref discr, switch_ty, ref values, ref targets } => {\n                 let (otherwise, targets) = targets.split_last().unwrap();\n                 let discr = bcx.load(self.trans_lvalue(&bcx, discr).llval);\n                 let discr = bcx.with_block(|bcx| base::to_immediate(bcx, discr, switch_ty));\n@@ -115,13 +115,13 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 }\n             }\n \n-            mir::Terminator::Return => {\n+            mir::TerminatorKind::Return => {\n                 bcx.with_block(|bcx| {\n                     self.fcx.build_return_block(bcx, DebugLoc::None);\n                 })\n             }\n \n-            mir::Terminator::Drop { ref value, target, unwind } => {\n+            mir::TerminatorKind::Drop { ref value, target, unwind } => {\n                 let lvalue = self.trans_lvalue(&bcx, value);\n                 let ty = lvalue.ty.to_ty(bcx.tcx());\n                 // Double check for necessity to drop\n@@ -152,7 +152,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 }\n             }\n \n-            mir::Terminator::Call { ref func, ref args, ref destination, ref cleanup } => {\n+            mir::TerminatorKind::Call { ref func, ref args, ref destination, ref cleanup } => {\n                 // Create the callee. This is a fn ptr or zero-sized and hence a kind of scalar.\n                 let callee = self.trans_operand(&bcx, func);\n \n@@ -569,3 +569,4 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         self.blocks[bb.index()].llbb\n     }\n }\n+"}]}