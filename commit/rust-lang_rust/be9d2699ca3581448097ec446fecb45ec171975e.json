{"sha": "be9d2699ca3581448097ec446fecb45ec171975e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOWQyNjk5Y2EzNTgxNDQ4MDk3ZWM0NDZmZWNiNDVlYzE3MTk3NWU=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-22T14:20:58Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-22T14:35:29Z"}, "message": "Fix more \u201ca\u201d/\u201can\u201d typos", "tree": {"sha": "522778fd0a90cacd44bcf1161ce61dd143b4ef84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/522778fd0a90cacd44bcf1161ce61dd143b4ef84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be9d2699ca3581448097ec446fecb45ec171975e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be9d2699ca3581448097ec446fecb45ec171975e", "html_url": "https://github.com/rust-lang/rust/commit/be9d2699ca3581448097ec446fecb45ec171975e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be9d2699ca3581448097ec446fecb45ec171975e/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf88b113eab9c36e63f8461f5849138cb60d810a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf88b113eab9c36e63f8461f5849138cb60d810a", "html_url": "https://github.com/rust-lang/rust/commit/bf88b113eab9c36e63f8461f5849138cb60d810a"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "07e1b55afe5be961bf73d46dd2939367bac9bddc", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -558,7 +558,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n     fn range_metadata(&mut self, load: &'ll Value, range: Range<u128>) {\n         if self.sess().target.arch == \"amdgpu\" {\n-            // amdgpu/LLVM does something weird and thinks a i64 value is\n+            // amdgpu/LLVM does something weird and thinks an i64 value is\n             // split into a v2i32, halving the bitwidth LLVM expects,\n             // tripping an assertion. So, for now, just disable this\n             // optimization."}, {"sha": "f7793c58a37a3ea7fa7a4459bdf059df5b647595", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -139,7 +139,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                                 if self.cx().size_of(ret_ty).bytes() < 4 {\n                                     // `va_arg` should not be called on an integer type\n                                     // less than 4 bytes in length. If it is, promote\n-                                    // the integer to a `i32` and truncate the result\n+                                    // the integer to an `i32` and truncate the result\n                                     // back to the smaller type.\n                                     let promoted_result = emit_va_arg(self, args[0], tcx.types.i32);\n                                     self.trunc(promoted_result, llret_ty)"}, {"sha": "5b27a407ad422eb09925e404da83328ba31fc1c9", "filename": "compiler/rustc_data_structures/src/owning_ref/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -1148,7 +1148,7 @@ pub type StringRef = OwningRef<String, str>;\n \n /// Typedef of an owning reference that uses a `Rc` as the owner.\n pub type RcRef<T, U = T> = OwningRef<Rc<T>, U>;\n-/// Typedef of an owning reference that uses a `Arc` as the owner.\n+/// Typedef of an owning reference that uses an `Arc` as the owner.\n pub type ArcRef<T, U = T> = OwningRef<Arc<T>, U>;\n \n /// Typedef of an owning reference that uses a `Ref` as the owner."}, {"sha": "fa081adfb21aafc560a4696add609f428e68f3ed", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -1889,7 +1889,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>\n                 // assigning to (P->variant) is okay if assigning to `P` is okay\n                 //\n-                // FIXME: is this true even if P is a adt with a dtor?\n+                // FIXME: is this true even if P is an adt with a dtor?\n                 { }\n \n                 // assigning to (*P) requires P to be initialized"}, {"sha": "9d923599db7619608399a4299bfcae000b073579", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -1826,7 +1826,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         err.emit();\n     }\n \n-    // FIXME(const_generics): This patches over a ICE caused by non-'static lifetimes in const\n+    // FIXME(const_generics): This patches over an ICE caused by non-'static lifetimes in const\n     // generics. We are disallowing this until we can decide on how we want to handle non-'static\n     // lifetimes in const generics. See issue #74052 for discussion.\n     crate fn emit_non_static_lt_in_const_generic_error(&self, lifetime_ref: &hir::Lifetime) {"}, {"sha": "e5369b4bbfdeafc494ad5b1d796a7925341304dc", "filename": "compiler/rustc_serialize/src/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -1202,7 +1202,7 @@ impl Json {\n         matches!(*self, Json::I64(_) | Json::U64(_) | Json::F64(_))\n     }\n \n-    /// Returns `true` if the Json value is a `i64`.\n+    /// Returns `true` if the Json value is an `i64`.\n     pub fn is_i64(&self) -> bool {\n         matches!(*self, Json::I64(_))\n     }\n@@ -1217,7 +1217,7 @@ impl Json {\n         matches!(*self, Json::F64(_))\n     }\n \n-    /// If the Json value is a number, returns or cast it to a `i64`;\n+    /// If the Json value is a number, returns or cast it to an `i64`;\n     /// returns `None` otherwise.\n     pub fn as_i64(&self) -> Option<i64> {\n         match *self {"}, {"sha": "77c52e51abb2e2b149538199f5d53033ecfc441f", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -45,7 +45,7 @@ impl<T, const N: usize> IntoIter<T, N> {\n     /// use std::array;\n     ///\n     /// for value in array::IntoIter::new([1, 2, 3, 4, 5]) {\n-    ///     // The type of `value` is a `i32` here, instead of `&i32`\n+    ///     // The type of `value` is an `i32` here, instead of `&i32`\n     ///     let _: i32 = value;\n     /// }\n     /// ```"}, {"sha": "0d082648591cef1986dc3041c804aae4ebbd2633", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -939,7 +939,7 @@ impl<'a> From<&'a CString> for Cow<'a, CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Arc<CStr> {\n-    /// Converts a [`CString`] into a [`Arc`]`<CStr>` without copying or allocating.\n+    /// Converts a [`CString`] into an [`Arc`]`<CStr>` without copying or allocating.\n     #[inline]\n     fn from(s: CString) -> Arc<CStr> {\n         let arc: Arc<[u8]> = Arc::from(s.into_inner());"}, {"sha": "f05295f89af1f03997ad8e0491ba151ca22ecd4a", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -897,7 +897,7 @@ impl Clone for Box<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<OsString> for Arc<OsStr> {\n-    /// Converts an [`OsString`] into a [`Arc`]`<OsStr>` without copying or allocating.\n+    /// Converts an [`OsString`] into an [`Arc`]`<OsStr>` without copying or allocating.\n     #[inline]\n     fn from(s: OsString) -> Arc<OsStr> {\n         let arc = s.inner.into_arc();"}, {"sha": "64873b850d3fa2e2a4dd46fcf3bd60042bb93b90", "filename": "library/std/src/sys_common/remutex/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex%2Ftests.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -30,7 +30,7 @@ fn smoke() {\n #[test]\n fn is_mutex() {\n     let m = unsafe {\n-        // FIXME: Simplify this if Arc gets a Arc::get_pin_mut.\n+        // FIXME: Simplify this if Arc gets an Arc::get_pin_mut.\n         let mut m = Arc::new(ReentrantMutex::new(RefCell::new(0)));\n         Pin::new_unchecked(Arc::get_mut_unchecked(&mut m)).init();\n         Pin::new_unchecked(m)\n@@ -52,7 +52,7 @@ fn is_mutex() {\n #[test]\n fn trylock_works() {\n     let m = unsafe {\n-        // FIXME: Simplify this if Arc gets a Arc::get_pin_mut.\n+        // FIXME: Simplify this if Arc gets an Arc::get_pin_mut.\n         let mut m = Arc::new(ReentrantMutex::new(()));\n         Pin::new_unchecked(Arc::get_mut_unchecked(&mut m)).init();\n         Pin::new_unchecked(m)"}, {"sha": "1830909d944606e1799a3acc5f2f48889a6a5ef9", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -22,7 +22,7 @@ use crate::html::render::IndexItem;\n ///\n /// This structure purposefully does not implement `Clone` because it's intended\n /// to be a fairly large and expensive structure to clone. Instead this adheres\n-/// to `Send` so it may be stored in a `Arc` instance and shared among the various\n+/// to `Send` so it may be stored in an `Arc` instance and shared among the various\n /// rendering threads.\n #[derive(Default)]\n crate struct Cache {"}, {"sha": "3a33af2d2eec8d08e8fec5146861abafe75ce1a8", "filename": "src/test/ui/async-await/issues/issue-53249.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -8,7 +8,7 @@ use std::future::Future;\n use std::marker::Unpin;\n use std::pin::Pin;\n \n-// This is a regression test for a ICE/unbounded recursion issue relating to async-await.\n+// This is a regression test for an ICE/unbounded recursion issue relating to async-await.\n \n #[derive(Debug)]\n #[must_use = \"futures do nothing unless polled\"]"}, {"sha": "e59ae297da1a781fdbc324796be8ee73b77600b4", "filename": "src/test/ui/consts/cast-discriminant-zst-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// Test a ZST enum whose dicriminant is ~0i128. This caused an ICE when casting to a i32.\n+// Test a ZST enum whose dicriminant is ~0i128. This caused an ICE when casting to an i32.\n #![feature(bench_black_box)]\n use std::hint::black_box;\n "}, {"sha": "ebea6d3d9d1ea8e4005558791701b560971d3b59", "filename": "src/test/ui/nll/issue-21232-partial-init-and-erroneous-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -1,4 +1,4 @@\n-// This test enumerates various cases of interest where a ADT or tuple is\n+// This test enumerates various cases of interest where an ADT or tuple is\n // partially initialized and then used in some way that is wrong *even*\n // after rust-lang/rust#54987 is implemented.\n //"}, {"sha": "770693d165b7ee142919fdb8bef986260a28462e", "filename": "src/tools/rustfmt/src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9d2699ca3581448097ec446fecb45ec171975e/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9d2699ca3581448097ec446fecb45ec171975e/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs?ref=be9d2699ca3581448097ec446fecb45ec171975e", "patch": "@@ -36,7 +36,7 @@ pub(crate) struct SnippetProvider {\n     big_snippet: Lrc<String>,\n     /// A position of the start of `big_snippet`, used as an offset.\n     start_pos: usize,\n-    /// A end position of the file that this snippet lives.\n+    /// An end position of the file that this snippet lives.\n     end_pos: usize,\n }\n "}]}