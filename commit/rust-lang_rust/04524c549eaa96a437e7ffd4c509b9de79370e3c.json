{"sha": "04524c549eaa96a437e7ffd4c509b9de79370e3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NTI0YzU0OWVhYTk2YTQzN2U3ZmZkNGM1MDliOWRlNzkzNzBlM2M=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-12-03T11:43:50Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-12-03T15:41:55Z"}, "message": "improve cc of function", "tree": {"sha": "8ad6086fb086c8b4d6df0ab003a1cf473ccc9d04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ad6086fb086c8b4d6df0ab003a1cf473ccc9d04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04524c549eaa96a437e7ffd4c509b9de79370e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04524c549eaa96a437e7ffd4c509b9de79370e3c", "html_url": "https://github.com/rust-lang/rust/commit/04524c549eaa96a437e7ffd4c509b9de79370e3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04524c549eaa96a437e7ffd4c509b9de79370e3c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d1b7e1957b647ae17eb26d1e1258c4ca2ba4a16", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1b7e1957b647ae17eb26d1e1258c4ca2ba4a16", "html_url": "https://github.com/rust-lang/rust/commit/3d1b7e1957b647ae17eb26d1e1258c4ca2ba4a16"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "f1c868bec07ebbc27a704b3aa717d2e20063d105", "filename": "src/methods.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/04524c549eaa96a437e7ffd4c509b9de79370e3c/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04524c549eaa96a437e7ffd4c509b9de79370e3c/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=04524c549eaa96a437e7ffd4c509b9de79370e3c", "patch": "@@ -54,20 +54,19 @@ impl LateLintPass for MethodsPass {\n \n         if let ExprMethodCall(ref name, _, ref args) = expr.node {\n             let (obj_ty, ptr_depth) = walk_ptrs_ty_depth(cx.tcx.expr_ty(&args[0]));\n-            if name.node.as_str() == \"unwrap\" {\n-                if match_type(cx, obj_ty, &OPTION_PATH) {\n+            match &*name.node.as_str() {\n+                \"unwrap\" if match_type(cx, obj_ty, &OPTION_PATH) => {\n                     span_lint(cx, OPTION_UNWRAP_USED, expr.span,\n                               \"used unwrap() on an Option value. If you don't want \\\n                                to handle the None case gracefully, consider using \\\n                                expect() to provide a better panic message\");\n-                } else if match_type(cx, obj_ty, &RESULT_PATH) {\n+                },\n+                \"unwrap\" if match_type(cx, obj_ty, &RESULT_PATH) => {\n                     span_lint(cx, RESULT_UNWRAP_USED, expr.span,\n                               \"used unwrap() on a Result value. Graceful handling \\\n                                of Err values is preferred\");\n-                }\n-            }\n-            else if name.node.as_str() == \"to_string\" {\n-                if obj_ty.sty == ty::TyStr {\n+                },\n+                \"to_string\" if obj_ty.sty == ty::TyStr => {\n                     let mut arg_str = snippet(cx, args[0].span, \"_\");\n                     if ptr_depth > 1 {\n                         arg_str = Cow::Owned(format!(\n@@ -77,13 +76,12 @@ impl LateLintPass for MethodsPass {\n                     }\n                     span_lint(cx, STR_TO_STRING, expr.span, &format!(\n                         \"`{}.to_owned()` is faster\", arg_str));\n-                } else if match_type(cx, obj_ty, &STRING_PATH) {\n+                },\n+                \"to_string\" if match_type(cx, obj_ty, &STRING_PATH) => {\n                     span_lint(cx, STRING_TO_STRING, expr.span, \"`String.to_string()` is a no-op; use \\\n                                                                 `clone()` to make a copy\");\n-                }\n-            }\n-            else if name.node.as_str() == \"expect\" {\n-                if let ExprMethodCall(ref inner_name, _, ref inner_args) = args[0].node {\n+                },\n+                \"expect\" => if let ExprMethodCall(ref inner_name, _, ref inner_args) = args[0].node {\n                     if inner_name.node.as_str() == \"ok\"\n                             && match_type(cx, cx.tcx.expr_ty(&inner_args[0]), &RESULT_PATH) {\n                         let result_type = cx.tcx.expr_ty(&inner_args[0]);\n@@ -96,11 +94,9 @@ impl LateLintPass for MethodsPass {\n                             }\n                         }\n                     }\n-                }\n-            }\n-            // check Option.map(_).unwrap_or(_)\n-            else if name.node.as_str() == \"unwrap_or\" {\n-                if let ExprMethodCall(ref inner_name, _, ref inner_args) = args[0].node {\n+                },\n+                // check Option.map(_).unwrap_or(_)\n+                \"unwrap_or\" => if let ExprMethodCall(ref inner_name, _, ref inner_args) = args[0].node {\n                     if inner_name.node.as_str() == \"map\"\n                             && match_type(cx, cx.tcx.expr_ty(&inner_args[0]), &OPTION_PATH) {\n                         // lint message\n@@ -126,11 +122,9 @@ impl LateLintPass for MethodsPass {\n                             span_lint(cx, OPTION_MAP_UNWRAP_OR, expr.span, msg);\n                         };\n                     }\n-                }\n-            }\n-            // check Option.map(_).unwrap_or_else(_)\n-            else if name.node.as_str() == \"unwrap_or_else\" {\n-                if let ExprMethodCall(ref inner_name, _, ref inner_args) = args[0].node {\n+                },\n+                // check Option.map(_).unwrap_or_else(_)\n+                \"unwrap_or_else\" => if let ExprMethodCall(ref inner_name, _, ref inner_args) = args[0].node {\n                     if inner_name.node.as_str() == \"map\"\n                             && match_type(cx, cx.tcx.expr_ty(&inner_args[0]), &OPTION_PATH) {\n                         // lint message\n@@ -156,7 +150,8 @@ impl LateLintPass for MethodsPass {\n                             span_lint(cx, OPTION_MAP_UNWRAP_OR_ELSE, expr.span, msg);\n                         };\n                     }\n-                }\n+                },\n+                _ => {},\n             }\n         }\n     }"}]}