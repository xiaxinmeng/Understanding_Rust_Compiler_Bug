{"sha": "b7404c898a1a6933b71c72428a6dce551bcc1be7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NDA0Yzg5OGExYTY5MzNiNzFjNzI0MjhhNmRjZTU1MWJjYzFiZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-03T20:31:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-03T20:31:43Z"}, "message": "Auto merge of #88572 - matthewjasper:if-let-scoping-fix, r=oli-obk\n\nFix drop handling for `if let` expressions\n\nMIR lowering for `if let` expressions is now more complicated now that\n`if let` exists in HIR. This PR adds a scope for the variables bound in\nan `if let` expression and then uses an approach similar to how we\nhandle loops to ensure that we reliably drop the correct variables.\n\nCloses #88307\ncc `@flip1995` `@richkadel` `@c410-f3r`", "tree": {"sha": "c05765937952ac30c6d3be18c9280ceb23413a1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c05765937952ac30c6d3be18c9280ceb23413a1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7404c898a1a6933b71c72428a6dce551bcc1be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7404c898a1a6933b71c72428a6dce551bcc1be7", "html_url": "https://github.com/rust-lang/rust/commit/b7404c898a1a6933b71c72428a6dce551bcc1be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7404c898a1a6933b71c72428a6dce551bcc1be7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4878034c000a0404a4c83e77eddf493deab550d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4878034c000a0404a4c83e77eddf493deab550d6", "html_url": "https://github.com/rust-lang/rust/commit/4878034c000a0404a4c83e77eddf493deab550d6"}, {"sha": "4e2fd4fcb2a7d2f21029d070ca4583601b271cc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2fd4fcb2a7d2f21029d070ca4583601b271cc1", "html_url": "https://github.com/rust-lang/rust/commit/4e2fd4fcb2a7d2f21029d070ca4583601b271cc1"}], "stats": {"total": 1158, "additions": 596, "deletions": 562}, "files": [{"sha": "21fe894c6fcd3d12838e94bc7f4b3d7981dce5e2", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -1177,6 +1177,7 @@ pub struct Arm<'hir> {\n #[derive(Debug, HashStable_Generic)]\n pub enum Guard<'hir> {\n     If(&'hir Expr<'hir>),\n+    // FIXME use ExprKind::Let for this.\n     IfLet(&'hir Pat<'hir>, &'hir Expr<'hir>),\n }\n "}, {"sha": "bd4e83a42ef515c371bdd9ed0aa702b4d228a537", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -94,6 +94,7 @@ impl fmt::Debug for Scope {\n             ScopeData::CallSite => write!(fmt, \"CallSite({:?})\", self.id),\n             ScopeData::Arguments => write!(fmt, \"Arguments({:?})\", self.id),\n             ScopeData::Destruction => write!(fmt, \"Destruction({:?})\", self.id),\n+            ScopeData::IfThen => write!(fmt, \"IfThen({:?})\", self.id),\n             ScopeData::Remainder(fsi) => write!(\n                 fmt,\n                 \"Remainder {{ block: {:?}, first_statement_index: {}}}\",\n@@ -120,6 +121,10 @@ pub enum ScopeData {\n     /// Scope of destructors for temporaries of node-id.\n     Destruction,\n \n+    /// Scope of the condition and then block of an if expression\n+    /// Used for variables introduced in an if-let expression.\n+    IfThen,\n+\n     /// Scope following a `let id = expr;` binding in a block.\n     Remainder(FirstStatementIndex),\n }"}, {"sha": "91a64e163e7c0172efd2cb58395ed574cd96402b", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -223,6 +223,7 @@ pub enum ExprKind<'tcx> {\n     },\n     /// An `if` expression.\n     If {\n+        if_then_scope: region::Scope,\n         cond: ExprId,\n         then: ExprId,\n         else_opt: Option<ExprId>,"}, {"sha": "22c44beb350ae9234339ea51c2b60c74f4836564", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -52,11 +52,33 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::Match { scrutinee, ref arms } => {\n                 this.match_expr(destination, expr_span, block, &this.thir[scrutinee], arms)\n             }\n-            ExprKind::If { cond, then, else_opt } => {\n-                let local_scope = this.local_scope();\n-                let (mut then_blk, mut else_blk) =\n-                    this.then_else_blocks(block, &this.thir[cond], local_scope, source_info);\n-                unpack!(then_blk = this.expr_into_dest(destination, then_blk, &this.thir[then]));\n+            ExprKind::If { cond, then, else_opt, if_then_scope } => {\n+                let then_blk;\n+                let then_expr = &this.thir[then];\n+                let then_source_info = this.source_info(then_expr.span);\n+                let condition_scope = this.local_scope();\n+\n+                let mut else_blk = unpack!(\n+                    then_blk = this.in_scope(\n+                        (if_then_scope, then_source_info),\n+                        LintLevel::Inherited,\n+                        |this| {\n+                            let (then_block, else_block) =\n+                                this.in_if_then_scope(condition_scope, |this| {\n+                                    let then_blk = unpack!(this.then_else_break(\n+                                        block,\n+                                        &this.thir[cond],\n+                                        condition_scope,\n+                                        condition_scope,\n+                                        then_expr.span,\n+                                    ));\n+                                    this.expr_into_dest(destination, then_blk, then_expr)\n+                                });\n+                            then_block.and(else_block)\n+                        },\n+                    )\n+                );\n+\n                 else_blk = if let Some(else_opt) = else_opt {\n                     unpack!(this.expr_into_dest(destination, else_blk, &this.thir[else_opt]))\n                 } else {\n@@ -81,9 +103,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 join_block.unit()\n             }\n-            ExprKind::Let { ref pat, expr } => {\n-                let (true_block, false_block) =\n-                    this.lower_let(block, &this.thir[expr], pat, expr_span);\n+            ExprKind::Let { expr, ref pat } => {\n+                let scope = this.local_scope();\n+                let (true_block, false_block) = this.in_if_then_scope(scope, |this| {\n+                    this.lower_let_expr(block, &this.thir[expr], pat, scope, expr_span)\n+                });\n \n                 let join_block = this.cfg.start_new_block();\n "}, {"sha": "ec54a2a0ec4eeefebd99d1ecad3dfe6268f28865", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 60, "deletions": 36, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -35,42 +35,48 @@ use std::convert::TryFrom;\n use std::mem;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n-    pub(crate) fn then_else_blocks(\n+    pub(crate) fn then_else_break(\n         &mut self,\n         mut block: BasicBlock,\n         expr: &Expr<'tcx>,\n-        scope: region::Scope,\n-        source_info: SourceInfo,\n-    ) -> (BasicBlock, BasicBlock) {\n+        temp_scope: region::Scope,\n+        break_scope: region::Scope,\n+        variable_scope_span: Span,\n+    ) -> BlockAnd<()> {\n         let this = self;\n         let expr_span = expr.span;\n \n         match expr.kind {\n             ExprKind::Scope { region_scope, lint_level, value } => {\n-                let region_scope = (region_scope, source_info);\n-                let then_block;\n-                let else_block = unpack!(\n-                    then_block = this.in_scope(region_scope, lint_level, |this| {\n-                        let (then_block, else_block) =\n-                            this.then_else_blocks(block, &this.thir[value], scope, source_info);\n-                        then_block.and(else_block)\n-                    })\n-                );\n-                (then_block, else_block)\n+                let region_scope = (region_scope, this.source_info(expr_span));\n+                this.in_scope(region_scope, lint_level, |this| {\n+                    this.then_else_break(\n+                        block,\n+                        &this.thir[value],\n+                        temp_scope,\n+                        break_scope,\n+                        variable_scope_span,\n+                    )\n+                })\n             }\n             ExprKind::Let { expr, ref pat } => {\n-                // FIXME: Use correct span.\n-                this.lower_let(block, &this.thir[expr], pat, expr_span)\n+                this.lower_let_expr(block, &this.thir[expr], pat, break_scope, variable_scope_span)\n             }\n             _ => {\n                 let mutability = Mutability::Mut;\n-                let place = unpack!(block = this.as_temp(block, Some(scope), expr, mutability));\n+                let place =\n+                    unpack!(block = this.as_temp(block, Some(temp_scope), expr, mutability));\n                 let operand = Operand::Move(Place::from(place));\n+\n                 let then_block = this.cfg.start_new_block();\n                 let else_block = this.cfg.start_new_block();\n                 let term = TerminatorKind::if_(this.tcx, operand, then_block, else_block);\n+\n+                let source_info = this.source_info(expr_span);\n                 this.cfg.terminate(block, source_info, term);\n-                (then_block, else_block)\n+                this.break_for_else(else_block, break_scope, source_info);\n+\n+                then_block.unit()\n             }\n         }\n     }\n@@ -302,6 +308,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 let arm_source_info = self.source_info(arm.span);\n                 let arm_scope = (arm.scope, arm_source_info);\n+                let match_scope = self.local_scope();\n                 self.in_scope(arm_scope, arm.lint_level, |this| {\n                     // `try_upvars_resolved` may fail if it is unable to resolve the given\n                     // `PlaceBuilder` inside a closure. In this case, we don't want to include\n@@ -340,6 +347,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         scrutinee_span,\n                         Some(arm.span),\n                         Some(arm.scope),\n+                        Some(match_scope),\n                     );\n \n                     if let Some(source_scope) = scope {\n@@ -384,6 +392,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         scrutinee_span: Span,\n         arm_span: Option<Span>,\n         arm_scope: Option<region::Scope>,\n+        match_scope: Option<region::Scope>,\n     ) -> BasicBlock {\n         if candidate.subcandidates.is_empty() {\n             // Avoid generating another `BasicBlock` when we only have one\n@@ -395,6 +404,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 fake_borrow_temps,\n                 scrutinee_span,\n                 arm_span,\n+                match_scope,\n                 true,\n             )\n         } else {\n@@ -431,6 +441,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         &fake_borrow_temps,\n                         scrutinee_span,\n                         arm_span,\n+                        match_scope,\n                         schedule_drops,\n                     );\n                     if arm_scope.is_none() {\n@@ -616,6 +627,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             irrefutable_pat.span,\n             None,\n             None,\n+            None,\n         )\n         .unit()\n     }\n@@ -1742,13 +1754,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n // Pat binding - used for `let` and function parameters as well.\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n-    pub fn lower_let(\n+    crate fn lower_let_expr(\n         &mut self,\n         mut block: BasicBlock,\n         expr: &Expr<'tcx>,\n         pat: &Pat<'tcx>,\n+        else_target: region::Scope,\n         span: Span,\n-    ) -> (BasicBlock, BasicBlock) {\n+    ) -> BlockAnd<()> {\n         let expr_span = expr.span;\n         let expr_place_builder = unpack!(block = self.lower_scrutinee(block, expr, expr_span));\n         let mut guard_candidate = Candidate::new(expr_place_builder.clone(), &pat, false);\n@@ -1769,6 +1782,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             expr_place = expr_builder.into_place(self.tcx, self.typeck_results);\n             opt_expr_place = Some((Some(&expr_place), expr_span));\n         }\n+        let otherwise_post_guard_block = otherwise_candidate.pre_binding_block.unwrap();\n+        self.break_for_else(otherwise_post_guard_block, else_target, self.source_info(expr_span));\n+\n         self.declare_bindings(None, pat.span.to(span), pat, ArmHasGuard(false), opt_expr_place);\n         let post_guard_block = self.bind_pattern(\n             self.source_info(pat.span),\n@@ -1778,9 +1794,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             expr.span,\n             None,\n             None,\n+            None,\n         );\n-        let otherwise_post_guard_block = otherwise_candidate.pre_binding_block.unwrap();\n-        (post_guard_block, otherwise_post_guard_block)\n+\n+        post_guard_block.unit()\n     }\n \n     /// Initializes each of the bindings from the candidate by\n@@ -1799,6 +1816,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         fake_borrows: &Vec<(Place<'tcx>, Local)>,\n         scrutinee_span: Span,\n         arm_span: Option<Span>,\n+        match_scope: Option<region::Scope>,\n         schedule_drops: bool,\n     ) -> BasicBlock {\n         debug!(\"bind_and_guard_matched_candidate(candidate={:?})\", candidate);\n@@ -1929,17 +1947,25 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.cfg.push_assign(block, scrutinee_source_info, Place::from(temp), borrow);\n             }\n \n-            let (guard_span, (post_guard_block, otherwise_post_guard_block)) = match *guard {\n-                Guard::If(e) => {\n-                    let e = &self.thir[e];\n-                    let source_info = self.source_info(e.span);\n-                    (e.span, self.test_bool(block, e, source_info))\n-                }\n-                Guard::IfLet(ref pat, scrutinee) => {\n-                    let s = &self.thir[scrutinee];\n-                    (s.span, self.lower_let(block, s, pat, arm_span.unwrap()))\n-                }\n-            };\n+            let arm_span = arm_span.unwrap();\n+            let arm_scope = self.local_scope();\n+            let match_scope = match_scope.unwrap();\n+            let mut guard_span = rustc_span::DUMMY_SP;\n+\n+            let (post_guard_block, otherwise_post_guard_block) =\n+                self.in_if_then_scope(match_scope, |this| match *guard {\n+                    Guard::If(e) => {\n+                        let e = &this.thir[e];\n+                        guard_span = e.span;\n+                        this.then_else_break(block, e, arm_scope, match_scope, arm_span)\n+                    }\n+                    Guard::IfLet(ref pat, scrutinee) => {\n+                        let s = &this.thir[scrutinee];\n+                        guard_span = s.span;\n+                        this.lower_let_expr(block, s, pat, match_scope, arm_span)\n+                    }\n+                });\n+\n             let source_info = self.source_info(guard_span);\n             let guard_end = self.source_info(tcx.sess.source_map().end_point(guard_span));\n             let guard_frame = self.guard_context.pop().unwrap();\n@@ -1955,10 +1981,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.cfg.terminate(unreachable, source_info, TerminatorKind::Unreachable);\n                 unreachable\n             });\n-            let outside_scope = self.cfg.start_new_block();\n-            self.exit_top_scope(otherwise_post_guard_block, outside_scope, source_info);\n             self.false_edges(\n-                outside_scope,\n+                otherwise_post_guard_block,\n                 otherwise_block,\n                 candidate.next_candidate_pre_binding_block,\n                 source_info,"}, {"sha": "bd8d14fcd012c2ec5965940a517e50b568c234ef", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 85, "deletions": 65, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -81,6 +81,8 @@ that contains only loops and breakable blocks. It tracks where a `break`,\n \n */\n \n+use std::mem;\n+\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder, CFG};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::IndexVec;\n@@ -93,9 +95,13 @@ use rustc_span::{Span, DUMMY_SP};\n #[derive(Debug)]\n pub struct Scopes<'tcx> {\n     scopes: Vec<Scope>,\n+\n     /// The current set of breakable scopes. See module comment for more details.\n     breakable_scopes: Vec<BreakableScope<'tcx>>,\n \n+    /// The scope of the innermost if-then currently being lowered.\n+    if_then_scope: Option<IfThenScope>,\n+\n     /// Drops that need to be done on unwind paths. See the comment on\n     /// [DropTree] for more details.\n     unwind_drops: DropTree,\n@@ -164,6 +170,14 @@ struct BreakableScope<'tcx> {\n     continue_drops: Option<DropTree>,\n }\n \n+#[derive(Debug)]\n+struct IfThenScope {\n+    /// The if-then scope or arm scope\n+    region_scope: region::Scope,\n+    /// Drops that happen on the `else` path.\n+    else_drops: DropTree,\n+}\n+\n /// The target of an expression that breaks out of a scope\n #[derive(Clone, Copy, Debug)]\n crate enum BreakableTarget {\n@@ -183,6 +197,7 @@ const ROOT_NODE: DropIdx = DropIdx::from_u32(0);\n /// * Drops on unwind paths\n /// * Drops on generator drop paths (when a suspended generator is dropped)\n /// * Drops on return and loop exit paths\n+/// * Drops on the else path in an `if let` chain\n ///\n /// Once no more nodes could be added to the tree, we lower it to MIR in one go\n /// in `build_mir`.\n@@ -394,6 +409,7 @@ impl<'tcx> Scopes<'tcx> {\n         Self {\n             scopes: Vec::new(),\n             breakable_scopes: Vec::new(),\n+            if_then_scope: None,\n             unwind_drops: DropTree::new(),\n             generator_drops: DropTree::new(),\n         }\n@@ -483,6 +499,45 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n+    /// Start an if-then scope which tracks drop for `if` expressions and `if`\n+    /// guards.\n+    ///\n+    /// For an if-let chain:\n+    ///\n+    /// if let Some(x) = a && let Some(y) = b && let Some(z) = c { ... }\n+    ///\n+    /// there are three possible ways the condition can be false and we may have\n+    /// to drop `x`, `x` and `y`, or neither depending on which binding fails.\n+    /// To handle this correctly we use a `DropTree` in a similar way to a\n+    /// `loop` expression and 'break' out on all of the 'else' paths.\n+    ///\n+    /// Notes:\n+    /// - We don't need to keep a stack of scopes in the `Builder` because the\n+    ///   'else' paths will only leave the innermost scope.\n+    /// - This is also used for match guards.\n+    crate fn in_if_then_scope<F>(\n+        &mut self,\n+        region_scope: region::Scope,\n+        f: F,\n+    ) -> (BasicBlock, BasicBlock)\n+    where\n+        F: FnOnce(&mut Builder<'a, 'tcx>) -> BlockAnd<()>,\n+    {\n+        let scope = IfThenScope { region_scope, else_drops: DropTree::new() };\n+        let previous_scope = mem::replace(&mut self.scopes.if_then_scope, Some(scope));\n+\n+        let then_block = unpack!(f(self));\n+\n+        let if_then_scope = mem::replace(&mut self.scopes.if_then_scope, previous_scope).unwrap();\n+        assert!(if_then_scope.region_scope == region_scope);\n+\n+        let else_block = self\n+            .build_exit_tree(if_then_scope.else_drops, None)\n+            .map_or_else(|| self.cfg.start_new_block(), |else_block_and| unpack!(else_block_and));\n+\n+        (then_block, else_block)\n+    }\n+\n     crate fn in_opt_scope<F, R>(\n         &mut self,\n         opt_scope: Option<(region::Scope, SourceInfo)>,\n@@ -651,6 +706,36 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.start_new_block().unit()\n     }\n \n+    crate fn break_for_else(\n+        &mut self,\n+        block: BasicBlock,\n+        target: region::Scope,\n+        source_info: SourceInfo,\n+    ) {\n+        let scope_index = self.scopes.scope_index(target, source_info.span);\n+        let if_then_scope = self\n+            .scopes\n+            .if_then_scope\n+            .as_mut()\n+            .unwrap_or_else(|| span_bug!(source_info.span, \"no if-then scope found\"));\n+\n+        assert_eq!(if_then_scope.region_scope, target, \"breaking to incorrect scope\");\n+\n+        let mut drop_idx = ROOT_NODE;\n+        let drops = &mut if_then_scope.else_drops;\n+        for scope in &self.scopes.scopes[scope_index + 1..] {\n+            for drop in &scope.drops {\n+                drop_idx = drops.add_drop(*drop, drop_idx);\n+            }\n+        }\n+        drops.add_entry(block, drop_idx);\n+\n+        // `build_drop_tree` doesn't have access to our source_info, so we\n+        // create a dummy terminator now. `TerminatorKind::Resume` is used\n+        // because MIR type checking will panic if it hasn't been overwritten.\n+        self.cfg.terminate(block, source_info, TerminatorKind::Resume);\n+    }\n+\n     // Add a dummy `Assign` statement to the CFG, with the span for the source code's `continue`\n     // statement.\n     fn add_dummy_assignment(&mut self, span: &Span, block: BasicBlock, source_info: SourceInfo) {\n@@ -659,16 +744,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.push_assign_unit(block, source_info, temp_place, self.tcx);\n     }\n \n-    crate fn exit_top_scope(\n-        &mut self,\n-        mut block: BasicBlock,\n-        target: BasicBlock,\n-        source_info: SourceInfo,\n-    ) {\n-        block = self.leave_top_scope(block);\n-        self.cfg.terminate(block, source_info, TerminatorKind::Goto { target });\n-    }\n-\n     fn leave_top_scope(&mut self, block: BasicBlock) -> BasicBlock {\n         // If we are emitting a `drop` statement, we need to have the cached\n         // diverge cleanup pads ready in case that drop panics.\n@@ -927,61 +1002,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     // Other\n     // =====\n-    /// Branch based on a boolean condition.\n-    ///\n-    /// This is a special case because the temporary for the condition needs to\n-    /// be dropped on both the true and the false arm.\n-    crate fn test_bool(\n-        &mut self,\n-        mut block: BasicBlock,\n-        condition: &Expr<'tcx>,\n-        source_info: SourceInfo,\n-    ) -> (BasicBlock, BasicBlock) {\n-        let cond = unpack!(block = self.as_local_operand(block, condition));\n-        let true_block = self.cfg.start_new_block();\n-        let false_block = self.cfg.start_new_block();\n-        let term = TerminatorKind::if_(self.tcx, cond.clone(), true_block, false_block);\n-        self.cfg.terminate(block, source_info, term);\n-\n-        match cond {\n-            // Don't try to drop a constant\n-            Operand::Constant(_) => (),\n-            Operand::Copy(place) | Operand::Move(place) => {\n-                if let Some(cond_temp) = place.as_local() {\n-                    // Manually drop the condition on both branches.\n-                    let top_scope = self.scopes.scopes.last_mut().unwrap();\n-                    let top_drop_data = top_scope.drops.pop().unwrap();\n-                    if self.generator_kind.is_some() {\n-                        top_scope.invalidate_cache();\n-                    }\n-\n-                    match top_drop_data.kind {\n-                        DropKind::Value { .. } => {\n-                            bug!(\"Drop scheduled on top of condition variable\")\n-                        }\n-                        DropKind::Storage => {\n-                            let source_info = top_drop_data.source_info;\n-                            let local = top_drop_data.local;\n-                            assert_eq!(local, cond_temp, \"Drop scheduled on top of condition\");\n-                            self.cfg.push(\n-                                true_block,\n-                                Statement { source_info, kind: StatementKind::StorageDead(local) },\n-                            );\n-                            self.cfg.push(\n-                                false_block,\n-                                Statement { source_info, kind: StatementKind::StorageDead(local) },\n-                            );\n-                        }\n-                    }\n-                } else {\n-                    bug!(\"Expected as_local_operand to produce a temporary\");\n-                }\n-            }\n-        }\n-\n-        (true_block, false_block)\n-    }\n-\n     /// Returns the [DropIdx] for the innermost drop if the function unwound at\n     /// this point. The `DropIdx` will be created if it doesn't already exist.\n     fn diverge_cleanup(&mut self) -> DropIdx {"}, {"sha": "66005be05df75683ba3427c2c9719262317287fc", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -594,6 +594,10 @@ impl<'tcx> Cx<'tcx> {\n                 ExprKind::Let { expr: self.mirror_expr(expr), pat: self.pattern_from_hir(pat) }\n             }\n             hir::ExprKind::If(cond, then, else_opt) => ExprKind::If {\n+                if_then_scope: region::Scope {\n+                    id: then.hir_id.local_id,\n+                    data: region::ScopeData::IfThen,\n+                },\n                 cond: self.mirror_expr(cond),\n                 then: self.mirror_expr(then),\n                 else_opt: else_opt.map(|el| self.mirror_expr(el)),"}, {"sha": "51c371b872057ad2a440c91df342438f8ad2c1b3", "filename": "compiler/rustc_mir_build/src/thir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -34,7 +34,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n             visitor.visit_expr(&visitor.thir()[value])\n         }\n         Box { value } => visitor.visit_expr(&visitor.thir()[value]),\n-        If { cond, then, else_opt } => {\n+        If { cond, then, else_opt, if_then_scope: _ } => {\n             visitor.visit_expr(&visitor.thir()[cond]);\n             visitor.visit_expr(&visitor.thir()[then]);\n             if let Some(else_expr) = else_opt {"}, {"sha": "08702cad41c8b92b5e0a80676f16dd22d6e5b6c0", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -391,21 +391,22 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n         }\n \n         hir::ExprKind::If(ref cond, ref then, Some(ref otherwise)) => {\n-            // FIXME(matthewjasper): ideally the scope we use here would only\n-            // contain the condition and then expression. This works, but\n-            // can result in some extra drop flags.\n+            let expr_cx = visitor.cx;\n+            visitor.enter_scope(Scope { id: then.hir_id.local_id, data: ScopeData::IfThen });\n             visitor.cx.var_parent = visitor.cx.parent;\n             visitor.visit_expr(cond);\n-            visitor.cx.var_parent = prev_cx.var_parent;\n             visitor.visit_expr(then);\n+            visitor.cx = expr_cx;\n             visitor.visit_expr(otherwise);\n         }\n \n         hir::ExprKind::If(ref cond, ref then, None) => {\n+            let expr_cx = visitor.cx;\n+            visitor.enter_scope(Scope { id: then.hir_id.local_id, data: ScopeData::IfThen });\n             visitor.cx.var_parent = visitor.cx.parent;\n             visitor.visit_expr(cond);\n-            visitor.cx.var_parent = prev_cx.var_parent;\n             visitor.visit_expr(then);\n+            visitor.cx = expr_cx;\n         }\n \n         _ => intravisit::walk_expr(visitor, expr),"}, {"sha": "8f57d307abf5872f2675f5343660fe59a7a5b927", "filename": "src/test/mir-opt/bool_compare.opt1.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -14,7 +14,7 @@\n -         _2 = Ne(move _3, const true);    // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n +         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n           StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:3:16: 3:17\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:3:5: 3:34\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n       }\n   \n       bb1: {"}, {"sha": "1f5738ae7583737475c7e8739210953870748d07", "filename": "src/test/mir-opt/bool_compare.opt2.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -14,7 +14,7 @@\n -         _2 = Ne(const true, move _3);    // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n +         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n           StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:8:16: 8:17\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:8:5: 8:34\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n       }\n   \n       bb1: {"}, {"sha": "3320509a7b37aa3320c034648e4378194f896892", "filename": "src/test/mir-opt/bool_compare.opt3.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -14,7 +14,7 @@\n -         _2 = Eq(move _3, const false);   // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n +         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n           StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:13:17: 13:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:13:5: 13:35\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n       }\n   \n       bb1: {"}, {"sha": "02049f4126da5b44245007cbb3267914a60ff2cf", "filename": "src/test/mir-opt/bool_compare.opt4.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -14,7 +14,7 @@\n -         _2 = Eq(const false, move _3);   // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n +         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n           StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:18:17: 18:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:18:5: 18:35\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n       }\n   \n       bb1: {"}, {"sha": "544d16a251a82586fa83074d57f7b60b31739eea", "filename": "src/test/mir-opt/const_goto.issue_77355_opt.ConstGoto.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -29,7 +29,7 @@\n -     }\n - \n -     bb3: {\n--         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto.rs:12:5: 12:57\n+-         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb4: {"}, {"sha": "1eb40e50d7aa00dc07e2dabd4d1b52de1269f754", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -9,9 +9,9 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n -         _1 = const <bool as NeedsDrop>::NEEDS; // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n--         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n+-         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n +         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n-+         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n++         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n       }\n   \n       bb1: {"}, {"sha": "de23e5446a0229119b8f7912624e3741cf99f057", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.32bit.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -18,22 +18,22 @@\n           ((_3 as Some).0: bool) = const true; // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n           discriminant(_3) = 1;            // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n -         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n--         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +         _4 = const 1_isize;              // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+         switchInt(const 1_isize) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n++         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n       }\n   \n       bb1: {\n-          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n       }\n   \n       bb2: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+          _2 = const 42_i32;               // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n       bb3: {\n-          _2 = const 42_i32;               // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n+          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n           goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   "}, {"sha": "de23e5446a0229119b8f7912624e3741cf99f057", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.64bit.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -18,22 +18,22 @@\n           ((_3 as Some).0: bool) = const true; // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n           discriminant(_3) = 1;            // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n -         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n--         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +         _4 = const 1_isize;              // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+         switchInt(const 1_isize) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n++         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n       }\n   \n       bb1: {\n-          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n       }\n   \n       bb2: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+          _2 = const 42_i32;               // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n       bb3: {\n-          _2 = const 42_i32;               // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n+          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n           goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   "}, {"sha": "629bed8fec5d4e500ca52ac4295019a954a4c3fd", "filename": "src/test/mir-opt/deaggregator_test_enum_2.test1.Deaggregator.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -12,7 +12,7 @@\n       bb0: {\n           StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n           _3 = _1;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n-          switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n+          switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n       }\n   \n       bb1: {"}, {"sha": "02821a1079e0a219bc25e670e856f3ee8927138a", "filename": "src/test/mir-opt/dest-prop/branch.main.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -36,7 +36,7 @@\n       }\n   \n       bb2: {\n-          switchInt(move _3) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:15:13: 20:6\n+          switchInt(move _3) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:15:16: 15:22\n       }\n   \n       bb3: {"}, {"sha": "174095888b48a4e8290934fa21bebf3fb29ce644", "filename": "src/test/mir-opt/equal_true.opt.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -14,7 +14,7 @@\n -         _2 = Eq(move _3, const true);    // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n +         _2 = move _3;                    // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n           StorageDead(_3);                 // scope 0 at $DIR/equal_true.rs:4:16: 4:17\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/equal_true.rs:4:5: 4:34\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n       }\n   \n       bb1: {"}, {"sha": "fd29e14a04161bcd01daa38ed6377377c7278baf", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -73,25 +73,10 @@\n       bb5: {\n           StorageDead(_8);                 // scope 2 at $DIR/funky_arms.rs:24:44: 24:45\n           _9 = discriminant(_7);           // scope 2 at $DIR/funky_arms.rs:24:12: 24:27\n-          switchInt(move _9) -> [1_isize: bb7, otherwise: bb6]; // scope 2 at $DIR/funky_arms.rs:24:12: 24:27\n+          switchInt(move _9) -> [1_isize: bb6, otherwise: bb8]; // scope 2 at $DIR/funky_arms.rs:24:12: 24:27\n       }\n   \n       bb6: {\n-          StorageLive(_18);                // scope 2 at $DIR/funky_arms.rs:28:46: 28:49\n-          _18 = &mut (*_1);                // scope 2 at $DIR/funky_arms.rs:28:46: 28:49\n-          StorageLive(_19);                // scope 2 at $DIR/funky_arms.rs:28:51: 28:54\n-          _19 = _2;                        // scope 2 at $DIR/funky_arms.rs:28:51: 28:54\n-          StorageLive(_20);                // scope 2 at $DIR/funky_arms.rs:28:56: 28:60\n-          _20 = _6;                        // scope 2 at $DIR/funky_arms.rs:28:56: 28:60\n-          StorageLive(_21);                // scope 2 at $DIR/funky_arms.rs:28:62: 28:67\n-          _21 = _3;                        // scope 2 at $DIR/funky_arms.rs:28:62: 28:67\n-          _0 = float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, move _21) -> bb9; // scope 2 at $DIR/funky_arms.rs:28:9: 28:68\n-                                           // mir::Constant\n-                                           // + span: $DIR/funky_arms.rs:28:9: 28:45\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb7: {\n           StorageLive(_10);                // scope 2 at $DIR/funky_arms.rs:24:17: 24:26\n           _10 = ((_7 as Some).0: usize);   // scope 2 at $DIR/funky_arms.rs:24:17: 24:26\n           StorageLive(_11);                // scope 2 at $DIR/funky_arms.rs:26:43: 26:46\n@@ -110,21 +95,37 @@\n           StorageDead(_15);                // scope 2 at $DIR/funky_arms.rs:26:78: 26:79\n           StorageLive(_17);                // scope 2 at $DIR/funky_arms.rs:26:81: 26:86\n           _17 = _3;                        // scope 2 at $DIR/funky_arms.rs:26:81: 26:86\n-          _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb8; // scope 2 at $DIR/funky_arms.rs:26:9: 26:87\n+          _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb7; // scope 2 at $DIR/funky_arms.rs:26:9: 26:87\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:26:9: 26:42\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, u32, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb8: {\n+      bb7: {\n           StorageDead(_17);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n           StorageDead(_14);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n           StorageDead(_13);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n           StorageDead(_12);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n           StorageDead(_11);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_10);                // scope 2 at $DIR/funky_arms.rs:27:5: 27:6\n           goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:24:5: 29:6\n       }\n   \n+      bb8: {\n+          StorageLive(_18);                // scope 2 at $DIR/funky_arms.rs:28:46: 28:49\n+          _18 = &mut (*_1);                // scope 2 at $DIR/funky_arms.rs:28:46: 28:49\n+          StorageLive(_19);                // scope 2 at $DIR/funky_arms.rs:28:51: 28:54\n+          _19 = _2;                        // scope 2 at $DIR/funky_arms.rs:28:51: 28:54\n+          StorageLive(_20);                // scope 2 at $DIR/funky_arms.rs:28:56: 28:60\n+          _20 = _6;                        // scope 2 at $DIR/funky_arms.rs:28:56: 28:60\n+          StorageLive(_21);                // scope 2 at $DIR/funky_arms.rs:28:62: 28:67\n+          _21 = _3;                        // scope 2 at $DIR/funky_arms.rs:28:62: 28:67\n+          _0 = float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, move _21) -> bb9; // scope 2 at $DIR/funky_arms.rs:28:9: 28:68\n+                                           // mir::Constant\n+                                           // + span: $DIR/funky_arms.rs:28:9: 28:45\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n       bb9: {\n           StorageDead(_21);                // scope 2 at $DIR/funky_arms.rs:28:67: 28:68\n           StorageDead(_20);                // scope 2 at $DIR/funky_arms.rs:28:67: 28:68\n@@ -134,7 +135,6 @@\n       }\n   \n       bb10: {\n-          StorageDead(_10);                // scope 2 at $DIR/funky_arms.rs:29:5: 29:6\n           StorageDead(_6);                 // scope 1 at $DIR/funky_arms.rs:30:1: 30:2\n           StorageDead(_4);                 // scope 0 at $DIR/funky_arms.rs:30:1: 30:2\n           StorageDead(_7);                 // scope 0 at $DIR/funky_arms.rs:30:1: 30:2"}, {"sha": "dddb7acae2b2c21c7bf8e4479051b1700b043f6f", "filename": "src/test/mir-opt/if_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -9,7 +9,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n           _2 = _1;                         // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n       }\n   \n       bb1: {"}, {"sha": "2ff8386b205bd024894f9bfe903e0b4712ede733", "filename": "src/test/mir-opt/if_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -13,7 +13,7 @@\n           _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:53:8: 53:9\n           _2 = Eq(move _3, const -42f32);  // scope 0 at $DIR/if-condition-int.rs:53:8: 53:18\n           StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:53:17: 53:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:53:5: 53:35\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:53:8: 53:18\n       }\n   \n       bb1: {"}, {"sha": "40de48385f02e3894129090d91eb2557ad08b780", "filename": "src/test/mir-opt/if_condition_int.opt_char.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -13,20 +13,20 @@\n           _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:21:8: 21:9\n -         _2 = Eq(move _3, const 'x');     // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n -         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:15: 21:16\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:21:15: 21:16\n-+         switchInt(move _3) -> ['x': bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n++         switchInt(move _3) -> ['x': bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n           _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:21:19: 21:20\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n           _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:21:30: 21:31\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n       }"}, {"sha": "28c36aed84c38270a3b9a705a4e2965416db6a21", "filename": "src/test/mir-opt/if_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -13,20 +13,20 @@\n           _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:25:8: 25:9\n -         _2 = Eq(move _3, const 42_i8);   // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n -         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:14: 25:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:25:14: 25:15\n-+         switchInt(move _3) -> [42_i8: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n++         switchInt(move _3) -> [42_i8: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n           _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:25:18: 25:19\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n           _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:25:29: 25:30\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n       }"}, {"sha": "55932fee9600cb28a3644461026d20246356ee7e", "filename": "src/test/mir-opt/if_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -15,39 +15,39 @@\n           _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:33:8: 33:9\n -         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n -         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:14: 33:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:33:14: 33:15\n-+         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n++         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n           _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:34:9: 34:10\n           goto -> bb6;                     // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n           StorageLive(_4);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n           StorageLive(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:16\n           _5 = _1;                         // scope 0 at $DIR/if-condition-int.rs:35:15: 35:16\n -         _4 = Ne(move _5, const 21_u32);  // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n -         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:21: 35:22\n--         switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n+-         switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:35:21: 35:22\n-+         switchInt(move _5) -> [21_u32: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n++         switchInt(move _5) -> [21_u32: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n       }\n   \n       bb3: {\n-+         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n++         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n           _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:36:9: 36:10\n           goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n       }\n   \n       bb4: {\n-+         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n++         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n           _0 = const 2_u32;                // scope 0 at $DIR/if-condition-int.rs:38:9: 38:10\n           goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n       }"}, {"sha": "c4574b32a59991f086505352cc870fee9c1a7dac", "filename": "src/test/mir-opt/if_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -13,20 +13,20 @@\n           _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:29:8: 29:9\n -         _2 = Eq(move _3, const -42_i32); // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n -         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:15: 29:16\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:29:15: 29:16\n-+         switchInt(move _3) -> [-42_i32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n++         switchInt(move _3) -> [-42_i32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n           _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:29:19: 29:20\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n           _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:29:30: 29:31\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n       }"}, {"sha": "88d9d5622b8ec060a8d3ff45fcb66d7db8069218", "filename": "src/test/mir-opt/if_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -13,20 +13,20 @@\n           _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:12:8: 12:9\n -         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n -         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:14: 12:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:12:14: 12:15\n-+         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n++         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n           _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:12:18: 12:19\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n           _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:12:29: 12:30\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n       }"}, {"sha": "ce30b050d67d976c517c5c8b1afeab6d6fa8e1a7", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -19,7 +19,7 @@\n           _3 = _1;                         // scope 0 at $DIR/inline-diverging.rs:13:8: 13:9\n           _2 = Gt(move _3, const 0_i32);   // scope 0 at $DIR/inline-diverging.rs:13:8: 13:13\n           StorageDead(_3);                 // scope 0 at $DIR/inline-diverging.rs:13:12: 13:13\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/inline-diverging.rs:13:5: 17:6\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/inline-diverging.rs:13:8: 13:13\n       }\n   \n       bb1: {"}, {"sha": "3539fc8b4876c0a8e021c1080103b23c6435356c", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -21,7 +21,7 @@\n       }\n   \n       bb2: {\n-          switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n+          switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n       }\n   \n       bb3: {"}, {"sha": "a2471e4308b0171169deb8cb78fc8ac833ea0cf7", "filename": "src/test/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -26,7 +26,7 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n         StorageLive(_4);                 // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n         _4 = _1;                         // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n-        switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n     }\n \n     bb3: {"}, {"sha": "54930937c9103f6f21a2c9f6f8b8ab25f8ba0b18", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 42, "deletions": 46, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -26,14 +26,14 @@ fn main() -> () {\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n-        _2 = cond() -> [return: bb1, unwind: bb12]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n+        _2 = cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:8:8: 8:12\n                                          // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        switchInt(move _2) -> [false: bb3, otherwise: bb2]; // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+        switchInt(move _2) -> [false: bb7, otherwise: bb2]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n     }\n \n     bb2: {\n@@ -42,22 +42,26 @@ fn main() -> () {\n         _4 = K;                          // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n         _3 = E::F(move _4);              // scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n         StorageDead(_4);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-        goto -> bb15;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb14;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb3: {\n-        _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:14:6: 14:6\n-        goto -> bb9;                     // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+        goto -> bb4;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n     }\n \n     bb4: {\n-        goto -> bb5;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+        StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+        _5 = discriminant(_1);           // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n+        switchInt(move _5) -> [0_isize: bb5, otherwise: bb6]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n     }\n \n     bb5: {\n-        StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-        _5 = discriminant(_1);           // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n-        switchInt(move _5) -> [0_isize: bb7, otherwise: bb6]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n+        StorageLive(_6);                 // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n+        _9 = const false;                // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n+        _6 = move ((_1 as F).0: K);      // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n+        _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:10:29: 13:10\n+        StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n     bb6: {\n@@ -66,91 +70,83 @@ fn main() -> () {\n     }\n \n     bb7: {\n-        StorageLive(_6);                 // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n-        _9 = const false;                // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n-        _6 = move ((_1 as F).0: K);      // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n-        _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:10:29: 13:10\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:14:6: 14:6\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n     bb8: {\n-        StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n-        goto -> bb9;                     // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n-    }\n-\n-    bb9: {\n         StorageDead(_2);                 // scope 1 at $DIR/issue-41888.rs:14:5: 14:6\n-        goto -> bb21;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb20;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb10: {\n+    bb9: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         _9 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         StorageDead(_1);                 // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         return;                          // scope 0 at $DIR/issue-41888.rs:15:2: 15:2\n     }\n \n-    bb11 (cleanup): {\n-        goto -> bb12;                    // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+    bb10 (cleanup): {\n+        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n     }\n \n-    bb12 (cleanup): {\n-        goto -> bb13;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb11 (cleanup): {\n+        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb13 (cleanup): {\n+    bb12 (cleanup): {\n         resume;                          // scope 0 at $DIR/issue-41888.rs:6:1: 15:2\n     }\n \n-    bb14 (cleanup): {\n+    bb13 (cleanup): {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb10;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n-    bb15: {\n+    bb14: {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb4;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb3;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n-    bb16: {\n+    bb15: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb9;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb17 (cleanup): {\n-        goto -> bb13;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb16 (cleanup): {\n+        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb18: {\n-        drop(_1) -> [return: bb16, unwind: bb13]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb17: {\n+        drop(_1) -> [return: bb15, unwind: bb12]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb19 (cleanup): {\n-        drop(_1) -> bb13;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb18 (cleanup): {\n+        drop(_1) -> bb12;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb20: {\n+    bb19: {\n         _10 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _10) -> [0_isize: bb16, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _10) -> [0_isize: bb15, otherwise: bb17]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb21: {\n-        switchInt(_7) -> [false: bb16, otherwise: bb20]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb20: {\n+        switchInt(_7) -> [false: bb15, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb22 (cleanup): {\n+    bb21 (cleanup): {\n         _11 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _11) -> [0_isize: bb17, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _11) -> [0_isize: bb16, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb23 (cleanup): {\n-        switchInt(_7) -> [false: bb13, otherwise: bb22]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb22 (cleanup): {\n+        switchInt(_7) -> [false: bb12, otherwise: bb21]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n }"}, {"sha": "d028f0b989a68b7f1e81bd6521d1286562221cc1", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -43,29 +43,29 @@ fn num_to_digit(_1: char) -> u32 {\n     }\n \n     bb1: {\n-        StorageDead(_11);                // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n+        StorageDead(_11);                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n         StorageLive(_3);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n         StorageLive(_4);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n         _4 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n-        _3 = char::methods::<impl char>::to_digit(move _4, const 8_u32) -> bb3; // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n+        _3 = char::methods::<impl char>::to_digit(move _4, const 8_u32) -> bb2; // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n                                          // mir::Constant\n                                          // + span: $DIR/issue-59352.rs:14:30: 14:38\n                                          // + literal: Const { ty: fn(char, u32) -> std::option::Option<u32> {std::char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {\n-        StorageDead(_11);                // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n-        _0 = const 0_u32;                // scope 0 at $DIR/issue-59352.rs:14:60: 14:61\n-        goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n-    }\n-\n-    bb3: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-59352.rs:14:40: 14:41\n         StorageLive(_10);                // scope 0 at $DIR/issue-59352.rs:14:26: 14:50\n         _10 = discriminant(_3);          // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n         switchInt(move _10) -> [0_isize: bb6, 1_isize: bb8, otherwise: bb7]; // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n     }\n \n+    bb3: {\n+        StorageDead(_11);                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        _0 = const 0_u32;                // scope 0 at $DIR/issue-59352.rs:14:60: 14:61\n+        goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n+    }\n+\n     bb4: {\n         return;                          // scope 0 at $DIR/issue-59352.rs:15:2: 15:2\n     }\n@@ -82,7 +82,7 @@ fn num_to_digit(_1: char) -> u32 {\n         StorageDead(_7);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n         StorageDead(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n         StorageDead(_2);                 // scope 0 at $DIR/issue-59352.rs:14:22: 14:23\n-        switchInt(move _11) -> [1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n+        switchInt(move _11) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n     }\n \n     bb6: {"}, {"sha": "4630c408750141cc7270e76e02f7e179013c6c75", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -32,54 +32,54 @@\n   \n       bb1: {\n           StorageDead(_3);                 // scope 2 at $DIR/issue-75439.rs:7:52: 7:53\n-          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb8]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb2: {\n-          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb8]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb3: {\n-          switchInt(_2[2 of 4]) -> [0_u32: bb6, 4294901760_u32: bb7, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          switchInt(_2[2 of 4]) -> [0_u32: bb5, 4294901760_u32: bb6, otherwise: bb8]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb4: {\n-          discriminant(_0) = 0;            // scope 1 at $DIR/issue-75439.rs:12:9: 12:13\n-          goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:9:5: 13:6\n-      }\n-  \n-      bb5: {\n           StorageLive(_5);                 // scope 1 at $DIR/issue-75439.rs:10:14: 10:38\n           StorageLive(_6);                 // scope 4 at $DIR/issue-75439.rs:10:33: 10:35\n           _6 = _4;                         // scope 4 at $DIR/issue-75439.rs:10:33: 10:35\n-          _5 = transmute::<u32, [u8; 4]>(move _6) -> bb8; // scope 4 at $DIR/issue-75439.rs:10:23: 10:36\n+          _5 = transmute::<u32, [u8; 4]>(move _6) -> bb7; // scope 4 at $DIR/issue-75439.rs:10:23: 10:36\n                                            // mir::Constant\n                                            // + span: $DIR/issue-75439.rs:10:23: 10:32\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) -> [u8; 4] {std::intrinsics::transmute::<u32, [u8; 4]>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb6: {\n+      bb5: {\n           StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n           _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n-          goto -> bb5;                     // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          goto -> bb4;                     // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n-      bb7: {\n+      bb6: {\n           StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n           _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n-          goto -> bb5;                     // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          goto -> bb4;                     // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n-      bb8: {\n+      bb7: {\n           StorageDead(_6);                 // scope 4 at $DIR/issue-75439.rs:10:35: 10:36\n           ((_0 as Some).0: [u8; 4]) = move _5; // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n           discriminant(_0) = 1;            // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n           StorageDead(_5);                 // scope 1 at $DIR/issue-75439.rs:10:38: 10:39\n+          StorageDead(_4);                 // scope 1 at $DIR/issue-75439.rs:11:5: 11:6\n+          goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:9:5: 13:6\n+      }\n+  \n+      bb8: {\n+          discriminant(_0) = 0;            // scope 1 at $DIR/issue-75439.rs:12:9: 12:13\n           goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:9:5: 13:6\n       }\n   \n       bb9: {\n-          StorageDead(_4);                 // scope 1 at $DIR/issue-75439.rs:13:5: 13:6\n           StorageDead(_2);                 // scope 0 at $DIR/issue-75439.rs:14:1: 14:2\n           return;                          // scope 0 at $DIR/issue-75439.rs:14:2: 14:2\n       }"}, {"sha": "9e91603cee943292e50da84cc5b6f8071c58ebfc", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -16,7 +16,7 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n         StorageLive(_2);                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n         _2 = const true;                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n-        switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n     }\n \n     bb1: {"}, {"sha": "25db3b98c2562e1979071cbfed46e2e1a13d13b3", "filename": "src/test/mir-opt/lower_slice_len.bound.LowerSliceLenCalls.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -33,25 +33,25 @@\n           _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:27\n           StorageDead(_5);                 // scope 0 at $DIR/lower_slice_len.rs:5:26: 5:27\n           StorageDead(_4);                 // scope 0 at $DIR/lower_slice_len.rs:5:26: 5:27\n-          switchInt(move _3) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/lower_slice_len.rs:5:5: 9:6\n+          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:27\n       }\n   \n       bb2: {\n           StorageLive(_7);                 // scope 0 at $DIR/lower_slice_len.rs:6:15: 6:20\n           _7 = _1;                         // scope 0 at $DIR/lower_slice_len.rs:6:15: 6:20\n           _8 = Len((*_2));                 // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n           _9 = Lt(_7, _8);                 // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n-          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb4; // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n+          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb3; // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n       }\n   \n       bb3: {\n-          _0 = const 42_u8;                // scope 0 at $DIR/lower_slice_len.rs:8:9: 8:11\n+          _0 = (*_2)[_7];                  // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n+          StorageDead(_7);                 // scope 0 at $DIR/lower_slice_len.rs:7:5: 7:6\n           goto -> bb5;                     // scope 0 at $DIR/lower_slice_len.rs:5:5: 9:6\n       }\n   \n       bb4: {\n-          _0 = (*_2)[_7];                  // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n-          StorageDead(_7);                 // scope 0 at $DIR/lower_slice_len.rs:7:5: 7:6\n+          _0 = const 42_u8;                // scope 0 at $DIR/lower_slice_len.rs:8:9: 8:11\n           goto -> bb5;                     // scope 0 at $DIR/lower_slice_len.rs:5:5: 9:6\n       }\n   "}, {"sha": "0917278875a57ba5c9aa09e6877c828576ee3840", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -85,8 +85,8 @@\n           StorageLive(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n           StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n           _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n--         switchInt(move _10) -> [false: bb10, otherwise: bb9]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(move _10) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         switchInt(move _10) -> [false: bb10, otherwise: bb9]; // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n++         switchInt(move _10) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n       }\n   \n -     bb9: {\n@@ -101,14 +101,13 @@\n -     bb10: {\n +     bb7: {\n           _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n-          StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         switchInt(move _9) -> [false: bb12, otherwise: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n +         switchInt(move _9) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n -     bb11: {\n +     bb8: {\n-          StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n@@ -123,6 +122,7 @@\n   \n -     bb12: {\n +     bb9: {\n+          StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n@@ -141,8 +141,8 @@\n           StorageLive(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n           StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n           _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n--         switchInt(move _13) -> [false: bb15, otherwise: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(move _13) -> [false: bb12, otherwise: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         switchInt(move _13) -> [false: bb15, otherwise: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n++         switchInt(move _13) -> [false: bb12, otherwise: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n       }\n   \n -     bb14: {\n@@ -157,14 +157,13 @@\n -     bb15: {\n +     bb12: {\n           _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n-          StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         switchInt(move _12) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n +         switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n -     bb16: {\n +     bb13: {\n-          StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n@@ -179,6 +178,7 @@\n   \n -     bb17: {\n +     bb14: {\n+          StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n@@ -190,6 +190,7 @@\n +     bb15: {\n           StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         goto -> bb22;                    // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78"}, {"sha": "b2fbe225915b0f0aacbc7f20bc058205cfbfb89b", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -72,7 +72,6 @@ fn full_tested_match() -> () {\n     }\n \n     bb7: {\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n         StorageLive(_5);                 // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n@@ -82,6 +81,7 @@ fn full_tested_match() -> () {\n         _1 = (const 1_i32, move _8);     // scope 2 at $DIR/match_false_edges.rs:16:31: 16:37\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n         goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n     }"}, {"sha": "8ff555dbb871e937055ba9c00c8dcda990585fe1", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -70,7 +70,6 @@ fn full_tested_match2() -> () {\n     }\n \n     bb7: {\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n         StorageLive(_5);                 // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n@@ -80,6 +79,7 @@ fn full_tested_match2() -> () {\n         _1 = (const 1_i32, move _8);     // scope 2 at $DIR/match_false_edges.rs:27:31: 27:37\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n         goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n     }"}, {"sha": "3fb06cfe6385f429ef1c88dd7b28d7109b3b55fa", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -78,13 +78,13 @@ fn main() -> () {\n     }\n \n     bb7: {\n-        StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n         FakeRead(ForGuardBinding, _7);   // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n         _6 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n         _1 = const 1_i32;                // scope 2 at $DIR/match_false_edges.rs:36:32: 36:33\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n+        StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n         goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n     }\n@@ -117,23 +117,24 @@ fn main() -> () {\n     }\n \n     bb11: {\n-        StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n         switchInt(move _12) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n     }\n \n     bb12: {\n-        StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n+        StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n         FakeRead(ForGuardBinding, _11);  // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n         StorageLive(_10);                // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n         _10 = ((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n         _1 = const 3_i32;                // scope 4 at $DIR/match_false_edges.rs:38:33: 38:34\n         StorageDead(_10);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n+        StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n         goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n     }\n \n     bb13: {\n+        StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n         falseEdge -> [real: bb3, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29"}, {"sha": "6cb27d244440dda62d02c17fabc8f9a6b59477c8", "filename": "src/test/mir-opt/match_test.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -75,9 +75,9 @@ fn main() -> () {\n     }\n \n     bb10: {\n-        StorageDead(_9);                 // scope 2 at $DIR/match_test.rs:13:23: 13:24\n         FakeRead(ForMatchGuard, _8);     // scope 2 at $DIR/match_test.rs:13:18: 13:19\n         _3 = const 0_i32;                // scope 2 at $DIR/match_test.rs:13:23: 13:24\n+        StorageDead(_9);                 // scope 2 at $DIR/match_test.rs:13:23: 13:24\n         goto -> bb14;                    // scope 2 at $DIR/match_test.rs:13:23: 13:24\n     }\n "}, {"sha": "4a9982d7699a8fb42f897bbc9c11cf7e2f43507a", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 37, "deletions": 62, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -4,105 +4,80 @@\n   fn match_nested_if() -> bool {\n       let mut _0: bool;                    // return place in scope 0 at $DIR/matches_reduce_branches.rs:39:25: 39:29\n       let _1: bool;                        // in scope 0 at $DIR/matches_reduce_branches.rs:40:9: 40:12\n-      let mut _2: ();                      // in scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:23\n-      let mut _3: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-      let mut _4: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n-      let mut _5: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n-      let mut _6: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n-+     let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n-+     let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n-+     let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-+     let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n+      let mut _2: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n+      let mut _3: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n+      let mut _4: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n++     let mut _5: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n++     let mut _6: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n++     let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n       scope 1 {\n           debug val => _1;                 // in scope 1 at $DIR/matches_reduce_branches.rs:40:9: 40:12\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:9: 40:12\n-          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:23\n-          StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-          StorageLive(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n-          StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n-          StorageLive(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n-          _6 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n--         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n+          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n+          StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n+          StorageLive(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n+          _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n+-         switchInt(move _4) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n -     }\n - \n -     bb1: {\n--         _5 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:41:31: 41:35\n+-         _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:41:31: 41:35\n -         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n -     }\n - \n -     bb2: {\n--         _5 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:41:45: 41:50\n+-         _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:41:45: 41:50\n -         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n -     }\n - \n -     bb3: {\n-+         StorageLive(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n-+         _7 = move _6;                    // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n-+         _5 = Ne(_7, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:41:45: 41:50\n-+         StorageDead(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n-          StorageDead(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:51: 41:52\n--         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n++         StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n++         _5 = move _4;                    // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n++         _3 = Ne(_5, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:41:45: 41:50\n++         StorageDead(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n+          StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:51: 41:52\n+-         switchInt(move _3) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n -     }\n - \n -     bb4: {\n--         _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:41:55: 41:59\n+-         _2 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:41:55: 41:59\n -         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n -     }\n - \n -     bb5: {\n--         _4 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:41:69: 41:74\n+-         _2 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:41:69: 41:74\n -         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n -     }\n - \n -     bb6: {\n-+         StorageLive(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n-+         _8 = move _5;                    // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n-+         _4 = Ne(_8, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:41:69: 41:74\n-+         StorageDead(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n-          StorageDead(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:75: 41:76\n--         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n++         StorageLive(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n++         _6 = move _3;                    // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n++         _2 = Ne(_6, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:41:69: 41:74\n++         StorageDead(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n+          StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:75: 41:76\n+-         switchInt(move _2) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n -     }\n - \n -     bb7: {\n--         _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:42:13: 42:17\n--         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n--     }\n-- \n--     bb8: {\n--         _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:44:13: 44:18\n--         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n--     }\n-- \n--     bb9: {\n-+         StorageLive(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-+         _9 = move _4;                    // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-+         _3 = Ne(_9, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:44:13: 44:18\n-+         StorageDead(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-          StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:45:9: 45:10\n--         switchInt(move _3) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n--     }\n-- \n--     bb10: {\n-+         StorageLive(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-+         _10 = move _3;                   // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-          StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:48:9: 48:10\n++         StorageLive(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n++         _7 = move _2;                    // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:45:9: 45:10\n -         _1 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:47:13: 47:17\n--         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:47:13: 47:17\n+-         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:48:9: 48:10\n -     }\n - \n--     bb11: {\n--         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:48:9: 48:10\n+-     bb8: {\n+-         StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:45:9: 45:10\n -         _1 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n--         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n+-         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n -     }\n - \n--     bb12: {\n-+         _1 = Ne(_10, const false);       // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n-+         StorageDead(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:50:6: 50:7\n+-     bb9: {\n++         _1 = Ne(_7, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n++         StorageDead(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n           _0 = _1;                         // scope 1 at $DIR/matches_reduce_branches.rs:51:5: 51:8\n           StorageDead(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:52:1: 52:2\n           return;                          // scope 0 at $DIR/matches_reduce_branches.rs:52:2: 52:2"}, {"sha": "4a9982d7699a8fb42f897bbc9c11cf7e2f43507a", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 37, "deletions": 62, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -4,105 +4,80 @@\n   fn match_nested_if() -> bool {\n       let mut _0: bool;                    // return place in scope 0 at $DIR/matches_reduce_branches.rs:39:25: 39:29\n       let _1: bool;                        // in scope 0 at $DIR/matches_reduce_branches.rs:40:9: 40:12\n-      let mut _2: ();                      // in scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:23\n-      let mut _3: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-      let mut _4: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n-      let mut _5: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n-      let mut _6: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n-+     let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n-+     let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n-+     let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-+     let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n+      let mut _2: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n+      let mut _3: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n+      let mut _4: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n++     let mut _5: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n++     let mut _6: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n++     let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n       scope 1 {\n           debug val => _1;                 // in scope 1 at $DIR/matches_reduce_branches.rs:40:9: 40:12\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:9: 40:12\n-          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:23\n-          StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-          StorageLive(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n-          StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n-          StorageLive(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n-          _6 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n--         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n+          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n+          StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n+          StorageLive(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n+          _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n+-         switchInt(move _4) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n -     }\n - \n -     bb1: {\n--         _5 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:41:31: 41:35\n+-         _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:41:31: 41:35\n -         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n -     }\n - \n -     bb2: {\n--         _5 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:41:45: 41:50\n+-         _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:41:45: 41:50\n -         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n -     }\n - \n -     bb3: {\n-+         StorageLive(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n-+         _7 = move _6;                    // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n-+         _5 = Ne(_7, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:41:45: 41:50\n-+         StorageDead(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n-          StorageDead(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:51: 41:52\n--         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n++         StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n++         _5 = move _4;                    // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n++         _3 = Ne(_5, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:41:45: 41:50\n++         StorageDead(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n+          StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:51: 41:52\n+-         switchInt(move _3) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n -     }\n - \n -     bb4: {\n--         _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:41:55: 41:59\n+-         _2 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:41:55: 41:59\n -         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n -     }\n - \n -     bb5: {\n--         _4 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:41:69: 41:74\n+-         _2 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:41:69: 41:74\n -         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n -     }\n - \n -     bb6: {\n-+         StorageLive(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n-+         _8 = move _5;                    // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n-+         _4 = Ne(_8, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:41:69: 41:74\n-+         StorageDead(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n-          StorageDead(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:75: 41:76\n--         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n++         StorageLive(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n++         _6 = move _3;                    // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n++         _2 = Ne(_6, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:41:69: 41:74\n++         StorageDead(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:21: 41:52\n+          StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:75: 41:76\n+-         switchInt(move _2) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n -     }\n - \n -     bb7: {\n--         _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:42:13: 42:17\n--         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n--     }\n-- \n--     bb8: {\n--         _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:44:13: 44:18\n--         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n--     }\n-- \n--     bb9: {\n-+         StorageLive(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-+         _9 = move _4;                    // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-+         _3 = Ne(_9, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:44:13: 44:18\n-+         StorageDead(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-          StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:45:9: 45:10\n--         switchInt(move _3) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n--     }\n-- \n--     bb10: {\n-+         StorageLive(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-+         _10 = move _3;                   // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-          StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:48:9: 48:10\n++         StorageLive(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n++         _7 = move _2;                    // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:45:9: 45:10\n -         _1 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:47:13: 47:17\n--         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:47:13: 47:17\n+-         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:48:9: 48:10\n -     }\n - \n--     bb11: {\n--         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:48:9: 48:10\n+-     bb8: {\n+-         StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:45:9: 45:10\n -         _1 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n--         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n+-         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n -     }\n - \n--     bb12: {\n-+         _1 = Ne(_10, const false);       // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n-+         StorageDead(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:50:6: 50:7\n+-     bb9: {\n++         _1 = Ne(_7, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n++         StorageDead(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:18: 41:76\n           _0 = _1;                         // scope 1 at $DIR/matches_reduce_branches.rs:51:5: 51:8\n           StorageDead(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:52:1: 52:2\n           return;                          // scope 0 at $DIR/matches_reduce_branches.rs:52:2: 52:2"}, {"sha": "3ef7844ce434ffe161ca05f57d617bd2a8bd4f3a", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -5,16 +5,16 @@\n | '_#1r | Local | ['_#1r]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0], '_#1r}\n+| '_#0r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '_#1r}\n | '_#2r | U0 | {}\n | '_#3r | U0 | {bb1[0..=7], bb2[0..=2]}\n | '_#4r | U0 | {bb1[1..=7], bb2[0..=2]}\n | '_#5r | U0 | {bb1[4..=7], bb2[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0]}\n-| '_#1r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0]}\n+| '_#0r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n+| '_#1r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n | '_#3r live at {bb1[0]}\n | '_#4r live at {bb1[1..=3]}\n | '_#5r live at {bb1[4..=7], bb2[0..=2]}\n@@ -63,32 +63,32 @@ fn main() -> () {\n         FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n     }\n \n     bb2: {\n         StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n         StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb4, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb3: {\n-        StorageLive(_10);                // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb5, unwind: bb7]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n-                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n+        StorageDead(_9);                 // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        goto -> bb6;                     // bb3[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb4: {\n-        StorageDead(_9);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n-        StorageDead(_8);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n-        goto -> bb6;                     // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n+                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb5: {"}, {"sha": "d6b4a0beebd657a6751de68d0dfde771bd9d252d", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -5,16 +5,16 @@\n | '_#1r | Local | ['_#1r]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0], '_#1r}\n+| '_#0r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '_#1r}\n | '_#2r | U0 | {}\n | '_#3r | U0 | {bb1[0..=7], bb2[0..=2]}\n | '_#4r | U0 | {bb1[1..=7], bb2[0..=2]}\n | '_#5r | U0 | {bb1[4..=7], bb2[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0]}\n-| '_#1r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=1], bb4[0..=3], bb5[0..=2], bb6[0..=5], bb7[0]}\n+| '_#0r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n+| '_#1r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n | '_#3r live at {bb1[0]}\n | '_#4r live at {bb1[1..=3]}\n | '_#5r live at {bb1[4..=7], bb2[0..=2]}\n@@ -63,32 +63,32 @@ fn main() -> () {\n         FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n     }\n \n     bb2: {\n         StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n         StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb4, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb3: {\n-        StorageLive(_10);                // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb5, unwind: bb7]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n-                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n+        StorageDead(_9);                 // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        goto -> bb6;                     // bb3[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb4: {\n-        StorageDead(_9);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n-        StorageDead(_8);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n-        goto -> bb6;                     // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n+                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb5: {"}, {"sha": "249db1c8a5ab29c7dc8c00aad368d0825785823e", "filename": "src/test/mir-opt/not_equal_false.opt.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -14,7 +14,7 @@\n -         _2 = Ne(move _3, const false);   // scope 0 at $DIR/not_equal_false.rs:4:8: 4:18\n +         _2 = move _3;                    // scope 0 at $DIR/not_equal_false.rs:4:8: 4:18\n           StorageDead(_3);                 // scope 0 at $DIR/not_equal_false.rs:4:17: 4:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/not_equal_false.rs:4:5: 4:35\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/not_equal_false.rs:4:8: 4:18\n       }\n   \n       bb1: {"}, {"sha": "eacc99dcf496632f46482177f0e79718f8fc5709", "filename": "src/test/mir-opt/remove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -47,7 +47,6 @@\n       }\n   \n       bb5: {\n-          StorageDead(_8);                 // scope 0 at $DIR/remove_fake_borrows.rs:8:25: 8:26\n -         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n -         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n -         FakeRead(ForMatchGuard, _6);     // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n@@ -57,6 +56,7 @@\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n           _0 = const 0_i32;                // scope 0 at $DIR/remove_fake_borrows.rs:8:25: 8:26\n+          StorageDead(_8);                 // scope 0 at $DIR/remove_fake_borrows.rs:8:25: 8:26\n           goto -> bb7;                     // scope 0 at $DIR/remove_fake_borrows.rs:8:25: 8:26\n       }\n   "}, {"sha": "eac9328500d29eb82525575bfd037f87a10a2fb9", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -21,9 +21,9 @@\n       }\n   \n -     bb2: {\n--         switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:9:9: 11:10\n+-         switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n +     bb1: {\n-+         switchInt(move _2) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_cfg.rs:9:9: 11:10\n++         switchInt(move _2) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n       }\n   \n -     bb3: {"}, {"sha": "f5ac2a41f5f5bf5d98be781f4c634aba5ae7f3a2", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -13,58 +13,62 @@\n       }\n   \n       bb1: {\n--         falseUnwind -> [real: bb2, cleanup: bb10]; // scope 0 at $DIR/simplify_cfg.rs:8:5: 12:6\n+-         falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/simplify_cfg.rs:8:5: 12:6\n -     }\n - \n -     bb2: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n--         _2 = bar() -> [return: bb3, unwind: bb10]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n+-         _2 = bar() -> [return: bb3, unwind: bb11]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n +         _2 = bar() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:9:12: 9:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n -     bb3: {\n--         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:9:9: 11:10\n+-         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n +     bb2: {\n-+         switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:9:9: 11:10\n++         switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n       }\n   \n -     bb4: {\n +     bb3: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:10:13: 10:18\n--         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:10:13: 10:18\n+-         goto -> bb10;                    // scope 0 at $DIR/simplify_cfg.rs:10:13: 10:18\n +         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:11:9: 11:10\n +         return;                          // scope 0 at $DIR/simplify_cfg.rs:13:2: 13:2\n       }\n   \n -     bb5: {\n-+     bb4: {\n-          _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:11:10: 11:10\n--         goto -> bb8;                     // scope 0 at $DIR/simplify_cfg.rs:9:9: 11:10\n+-         goto -> bb8;                     // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n -     }\n - \n -     bb6: {\n -         unreachable;                     // scope 0 at $DIR/simplify_cfg.rs:9:18: 11:10\n -     }\n - \n -     bb7: {\n--         goto -> bb8;                     // scope 0 at $DIR/simplify_cfg.rs:9:9: 11:10\n+-         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:9:9: 11:10\n -     }\n - \n -     bb8: {\n++     bb4: {\n+          _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:11:10: 11:10\n+-         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:9:9: 11:10\n+-     }\n+- \n+-     bb9: {\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:11:9: 11:10\n -         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:8:5: 12:6\n +         goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:8:5: 12:6\n       }\n   \n--     bb9: {\n+-     bb10: {\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:11:9: 11:10\n -         return;                          // scope 0 at $DIR/simplify_cfg.rs:13:2: 13:2\n -     }\n - \n--     bb10 (cleanup): {\n+-     bb11 (cleanup): {\n +     bb5 (cleanup): {\n           resume;                          // scope 0 at $DIR/simplify_cfg.rs:7:1: 13:2\n       }"}, {"sha": "def6f835131c941bdcee89feceb274177384b583", "filename": "src/test/mir-opt/simplify_if.main.SimplifyBranches-after-const-prop.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -9,26 +9,26 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n           _1 = const false;                // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n--         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n-+         goto -> bb2;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+-         switchInt(const false) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n++         goto -> bb3;                     // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n       }\n   \n       bb1: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n-          _2 = noop() -> bb3;              // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n+          _2 = noop() -> bb2;              // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_if.rs:7:9: 7:13\n                                            // + literal: Const { ty: fn() {noop}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {\n-          nop;                             // scope 0 at $DIR/simplify_if.rs:8:6: 8:6\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_if.rs:7:15: 7:16\n+          nop;                             // scope 0 at $DIR/simplify_if.rs:6:14: 8:6\n           goto -> bb4;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_if.rs:7:15: 7:16\n-          nop;                             // scope 0 at $DIR/simplify_if.rs:6:14: 8:6\n+          nop;                             // scope 0 at $DIR/simplify_if.rs:8:6: 8:6\n           goto -> bb4;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n       }\n   "}, {"sha": "fdd838f9a90793eab4f8ffaa744eba35d04b43c1", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -43,11 +43,11 @@\n -         _7 = Gt(move _8, const 42_u8);   // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n -         StorageDead(_8);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:19: 5:20\n -         StorageDead(_7);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:7:9: 7:10\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n           goto -> bb3;                     // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n       }\n   \n       bb3: {\n-          StorageDead(_6);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n           drop(_1) -> bb4;                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:1: 9:2\n       }\n   "}, {"sha": "63356a400d29aa519fa7692796aa9974fb1e44a3", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -27,44 +27,43 @@\n   \n       bb1: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n--         switchInt(move _2) -> [1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n+-         switchInt(move _2) -> [1_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n +         goto -> bb2;                     // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n       }\n   \n       bb2: {\n-          _0 = const ();                   // scope 0 at $DIR/unreachable.rs:19:6: 19:6\n-          StorageDead(_3);                 // scope 0 at $DIR/unreachable.rs:19:5: 19:6\n-          StorageDead(_1);                 // scope 0 at $DIR/unreachable.rs:20:1: 20:2\n-          return;                          // scope 0 at $DIR/unreachable.rs:20:2: 20:2\n--     }\n-- \n--     bb3: {\n -         StorageLive(_3);                 // scope 0 at $DIR/unreachable.rs:9:17: 9:19\n -         _3 = move ((_1 as Some).0: Empty); // scope 0 at $DIR/unreachable.rs:9:17: 9:19\n -         StorageLive(_4);                 // scope 0 at $DIR/unreachable.rs:10:13: 10:19\n -         StorageLive(_5);                 // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -         StorageLive(_6);                 // scope 2 at $DIR/unreachable.rs:12:12: 12:16\n -         _6 = const true;                 // scope 2 at $DIR/unreachable.rs:12:12: 12:16\n--         switchInt(move _6) -> [false: bb5, otherwise: bb4]; // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n+-         switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable.rs:12:12: 12:16\n -     }\n - \n--     bb4: {\n+-     bb3: {\n -         _4 = const 21_i32;               // scope 2 at $DIR/unreachable.rs:13:13: 13:20\n -         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:12:17: 14:10\n--         goto -> bb6;                     // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n+-         goto -> bb5;                     // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - \n--     bb5: {\n+-     bb4: {\n -         _4 = const 42_i32;               // scope 2 at $DIR/unreachable.rs:15:13: 15:20\n -         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:14:16: 16:10\n--         goto -> bb6;                     // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n+-         goto -> bb5;                     // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - \n--     bb6: {\n+-     bb5: {\n -         StorageDead(_6);                 // scope 2 at $DIR/unreachable.rs:16:9: 16:10\n -         StorageDead(_5);                 // scope 2 at $DIR/unreachable.rs:16:9: 16:10\n -         StorageLive(_7);                 // scope 2 at $DIR/unreachable.rs:18:9: 18:21\n -         unreachable;                     // scope 2 at $DIR/unreachable.rs:18:15: 18:17\n+-     }\n+- \n+-     bb6: {\n+          _0 = const ();                   // scope 0 at $DIR/unreachable.rs:19:6: 19:6\n+          StorageDead(_1);                 // scope 0 at $DIR/unreachable.rs:20:1: 20:2\n+          return;                          // scope 0 at $DIR/unreachable.rs:20:2: 20:2\n       }\n   }\n   "}, {"sha": "09eb210f36873a116b48c33f1ef34c76b2135006", "filename": "src/test/mir-opt/unreachable_asm.main.UnreachablePropagation.diff", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -30,39 +30,32 @@\n   \n       bb1: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n-          switchInt(move _2) -> [1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n+          switchInt(move _2) -> [1_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n       }\n   \n       bb2: {\n-          _0 = const ();                   // scope 0 at $DIR/unreachable_asm.rs:23:6: 23:6\n-          StorageDead(_3);                 // scope 0 at $DIR/unreachable_asm.rs:23:5: 23:6\n-          StorageDead(_1);                 // scope 0 at $DIR/unreachable_asm.rs:24:1: 24:2\n-          return;                          // scope 0 at $DIR/unreachable_asm.rs:24:2: 24:2\n-      }\n-  \n-      bb3: {\n           StorageLive(_3);                 // scope 0 at $DIR/unreachable_asm.rs:11:17: 11:19\n           _3 = move ((_1 as Some).0: Empty); // scope 0 at $DIR/unreachable_asm.rs:11:17: 11:19\n           StorageLive(_4);                 // scope 0 at $DIR/unreachable_asm.rs:12:13: 12:19\n           StorageLive(_5);                 // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n           StorageLive(_6);                 // scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n           _6 = const true;                 // scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n-          switchInt(move _6) -> [false: bb5, otherwise: bb4]; // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n+          switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n       }\n   \n-      bb4: {\n+      bb3: {\n           _4 = const 21_i32;               // scope 2 at $DIR/unreachable_asm.rs:15:13: 15:20\n           _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:14:17: 16:10\n-          goto -> bb6;                     // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n+          goto -> bb5;                     // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n       }\n   \n-      bb5: {\n+      bb4: {\n           _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm.rs:17:13: 17:20\n           _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:16:16: 18:10\n-          goto -> bb6;                     // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n+          goto -> bb5;                     // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n       }\n   \n-      bb6: {\n+      bb5: {\n           StorageDead(_6);                 // scope 2 at $DIR/unreachable_asm.rs:18:9: 18:10\n           StorageDead(_5);                 // scope 2 at $DIR/unreachable_asm.rs:18:9: 18:10\n           StorageLive(_7);                 // scope 2 at $DIR/unreachable_asm.rs:21:9: 21:37\n@@ -72,5 +65,11 @@\n           StorageLive(_8);                 // scope 2 at $DIR/unreachable_asm.rs:22:9: 22:21\n           unreachable;                     // scope 2 at $DIR/unreachable_asm.rs:22:15: 22:17\n       }\n+  \n+      bb6: {\n+          _0 = const ();                   // scope 0 at $DIR/unreachable_asm.rs:23:6: 23:6\n+          StorageDead(_1);                 // scope 0 at $DIR/unreachable_asm.rs:24:1: 24:2\n+          return;                          // scope 0 at $DIR/unreachable_asm.rs:24:2: 24:2\n+      }\n   }\n   "}, {"sha": "cdb28ca12cc7ffcbdf8dd63f07580026cbdab0c8", "filename": "src/test/mir-opt/unreachable_asm_2.main.UnreachablePropagation.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -33,53 +33,53 @@\n   \n       bb1: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n-          switchInt(move _2) -> [1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n+-         switchInt(move _2) -> [1_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n++         switchInt(move _2) -> [1_isize: bb2, otherwise: bb5]; // scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n       }\n   \n       bb2: {\n-          _0 = const ();                   // scope 0 at $DIR/unreachable_asm_2.rs:25:6: 25:6\n-          StorageDead(_3);                 // scope 0 at $DIR/unreachable_asm_2.rs:25:5: 25:6\n-          StorageDead(_1);                 // scope 0 at $DIR/unreachable_asm_2.rs:26:1: 26:2\n-          return;                          // scope 0 at $DIR/unreachable_asm_2.rs:26:2: 26:2\n-      }\n-  \n-      bb3: {\n           StorageLive(_3);                 // scope 0 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n           _3 = move ((_1 as Some).0: Empty); // scope 0 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n           StorageLive(_4);                 // scope 0 at $DIR/unreachable_asm_2.rs:12:13: 12:19\n           StorageLive(_5);                 // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n           StorageLive(_6);                 // scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n           _6 = const true;                 // scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n-          switchInt(move _6) -> [false: bb5, otherwise: bb4]; // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+          switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n       }\n   \n-      bb4: {\n+      bb3: {\n           StorageLive(_7);                 // scope 2 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n           llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 3 at $DIR/unreachable_asm_2.rs:16:22: 16:39\n           _7 = const ();                   // scope 3 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n           StorageDead(_7);                 // scope 2 at $DIR/unreachable_asm_2.rs:16:40: 16:41\n           _4 = const 21_i32;               // scope 2 at $DIR/unreachable_asm_2.rs:17:13: 17:20\n           _5 = const ();                   // scope 2 at $DIR/unreachable_asm_2.rs:14:17: 18:10\n--         goto -> bb6;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+-         goto -> bb5;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n +         unreachable;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n       }\n   \n-      bb5: {\n+      bb4: {\n           StorageLive(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n           llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 4 at $DIR/unreachable_asm_2.rs:20:22: 20:39\n           _8 = const ();                   // scope 4 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n           StorageDead(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:40: 20:41\n           _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm_2.rs:21:13: 21:20\n           _5 = const ();                   // scope 2 at $DIR/unreachable_asm_2.rs:18:16: 22:10\n--         goto -> bb6;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n--     }\n-- \n--     bb6: {\n+-         goto -> bb5;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n++         unreachable;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+      }\n+  \n+      bb5: {\n -         StorageDead(_6);                 // scope 2 at $DIR/unreachable_asm_2.rs:22:9: 22:10\n -         StorageDead(_5);                 // scope 2 at $DIR/unreachable_asm_2.rs:22:9: 22:10\n -         StorageLive(_9);                 // scope 2 at $DIR/unreachable_asm_2.rs:24:9: 24:21\n -         unreachable;                     // scope 2 at $DIR/unreachable_asm_2.rs:24:15: 24:17\n-+         unreachable;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+-     }\n+- \n+-     bb6: {\n+          _0 = const ();                   // scope 0 at $DIR/unreachable_asm_2.rs:25:6: 25:6\n+          StorageDead(_1);                 // scope 0 at $DIR/unreachable_asm_2.rs:26:1: 26:2\n+          return;                          // scope 0 at $DIR/unreachable_asm_2.rs:26:2: 26:2\n       }\n   }\n   "}, {"sha": "3e93ae7b1988792fdee5a59804188c8a32226b62", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -29,45 +29,46 @@\n   \n       bb1: {\n           _3 = discriminant(_2);           // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n-          switchInt(move _3) -> [1_isize: bb3, otherwise: bb2]; // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n+-         switchInt(move _3) -> [1_isize: bb2, otherwise: bb6]; // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n++         switchInt(move _3) -> [1_isize: bb2, otherwise: bb5]; // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n       }\n   \n       bb2: {\n-          _0 = const ();                   // scope 1 at $DIR/unreachable_diverging.rs:19:6: 19:6\n-          StorageDead(_4);                 // scope 1 at $DIR/unreachable_diverging.rs:19:5: 19:6\n-          StorageDead(_1);                 // scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n-          StorageDead(_2);                 // scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n-          return;                          // scope 0 at $DIR/unreachable_diverging.rs:20:2: 20:2\n-      }\n-  \n-      bb3: {\n           StorageLive(_4);                 // scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n           _4 = move ((_2 as Some).0: Empty); // scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n           StorageLive(_5);                 // scope 1 at $DIR/unreachable_diverging.rs:15:9: 17:10\n           StorageLive(_6);                 // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13\n           _6 = _1;                         // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13\n--         switchInt(move _6) -> [false: bb5, otherwise: bb4]; // scope 1 at $DIR/unreachable_diverging.rs:15:9: 17:10\n-+         goto -> bb4;                     // scope 1 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+-         switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13\n++         goto -> bb3;                     // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13\n       }\n   \n-      bb4: {\n--         _5 = loop_forever() -> bb6;      // scope 1 at $DIR/unreachable_diverging.rs:16:13: 16:27\n-+         _5 = loop_forever() -> bb5;      // scope 1 at $DIR/unreachable_diverging.rs:16:13: 16:27\n+      bb3: {\n+-         _5 = loop_forever() -> bb5;      // scope 1 at $DIR/unreachable_diverging.rs:16:13: 16:27\n++         _5 = loop_forever() -> bb4;      // scope 1 at $DIR/unreachable_diverging.rs:16:13: 16:27\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:16:13: 16:25\n                                            // + literal: Const { ty: fn() {loop_forever}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb5: {\n+      bb4: {\n -         _5 = const ();                   // scope 1 at $DIR/unreachable_diverging.rs:17:10: 17:10\n--         goto -> bb6;                     // scope 1 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+-         goto -> bb5;                     // scope 1 at $DIR/unreachable_diverging.rs:15:9: 17:10\n -     }\n - \n--     bb6: {\n+-     bb5: {\n           StorageDead(_6);                 // scope 1 at $DIR/unreachable_diverging.rs:17:9: 17:10\n           StorageDead(_5);                 // scope 1 at $DIR/unreachable_diverging.rs:17:9: 17:10\n           StorageLive(_7);                 // scope 1 at $DIR/unreachable_diverging.rs:18:9: 18:22\n           unreachable;                     // scope 1 at $DIR/unreachable_diverging.rs:18:15: 18:19\n       }\n+  \n+-     bb6: {\n++     bb5: {\n+          _0 = const ();                   // scope 1 at $DIR/unreachable_diverging.rs:19:6: 19:6\n+          StorageDead(_1);                 // scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n+          StorageDead(_2);                 // scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n+          return;                          // scope 0 at $DIR/unreachable_diverging.rs:20:2: 20:2\n+      }\n   }\n   "}, {"sha": "8ecda3a1ae2cba28acea5b76e63c1fd1b31fa5c1", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.32bit.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -21,28 +21,28 @@\n           StorageLive(_3);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n           discriminant(_3) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n -         _4 = discriminant(_3);           // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n--         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n +         _4 = const 0_isize;              // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-+         switchInt(const 0_isize) -> [1_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n++         switchInt(const 0_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n       }\n   \n       bb1: {\n-          StorageLive(_7);                 // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n-          nop;                             // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n-          StorageDead(_7);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n-          goto -> bb4;                     // scope 1 at no-location\n+          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb2, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n       }\n   \n       bb2: {\n-          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb3, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-      }\n-  \n-      bb3: {\n           _1 = const 1_i32;                // scope 1 at $DIR/while_let_loops.rs:8:9: 8:15\n           nop;                             // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n           goto -> bb4;                     // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n       }\n   \n+      bb3: {\n+          StorageLive(_7);                 // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n+          nop;                             // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n+          StorageDead(_7);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n+          goto -> bb4;                     // scope 1 at no-location\n+      }\n+  \n       bb4: {\n           StorageDead(_3);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n           StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2"}, {"sha": "8ecda3a1ae2cba28acea5b76e63c1fd1b31fa5c1", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.64bit.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -21,28 +21,28 @@\n           StorageLive(_3);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n           discriminant(_3) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n -         _4 = discriminant(_3);           // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n--         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n +         _4 = const 0_isize;              // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-+         switchInt(const 0_isize) -> [1_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n++         switchInt(const 0_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n       }\n   \n       bb1: {\n-          StorageLive(_7);                 // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n-          nop;                             // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n-          StorageDead(_7);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n-          goto -> bb4;                     // scope 1 at no-location\n+          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb2, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n       }\n   \n       bb2: {\n-          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb3, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-      }\n-  \n-      bb3: {\n           _1 = const 1_i32;                // scope 1 at $DIR/while_let_loops.rs:8:9: 8:15\n           nop;                             // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n           goto -> bb4;                     // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n       }\n   \n+      bb3: {\n+          StorageLive(_7);                 // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n+          nop;                             // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n+          StorageDead(_7);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n+          goto -> bb4;                     // scope 1 at no-location\n+      }\n+  \n       bb4: {\n           StorageDead(_3);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n           StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2"}, {"sha": "9db77d705ff99668492f892110e927a403185c26", "filename": "src/test/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -20,39 +20,39 @@ fn while_loop(_1: bool) -> () {\n \n     bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/while-storage.rs:10:21: 10:22\n-        switchInt(move _2) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/while-storage.rs:10:5: 14:6\n+        switchInt(move _2) -> [false: bb6, otherwise: bb2]; // scope 0 at $DIR/while-storage.rs:10:11: 10:22\n     }\n \n     bb2: {\n         StorageLive(_4);                 // scope 0 at $DIR/while-storage.rs:11:12: 11:23\n         StorageLive(_5);                 // scope 0 at $DIR/while-storage.rs:11:21: 11:22\n         _5 = _1;                         // scope 0 at $DIR/while-storage.rs:11:21: 11:22\n-        _4 = get_bool(move _5) -> bb4;   // scope 0 at $DIR/while-storage.rs:11:12: 11:23\n+        _4 = get_bool(move _5) -> bb3;   // scope 0 at $DIR/while-storage.rs:11:12: 11:23\n                                          // mir::Constant\n                                          // + span: $DIR/while-storage.rs:11:12: 11:20\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb3: {\n-        goto -> bb7;                     // scope 0 at no-location\n-    }\n-\n-    bb4: {\n         StorageDead(_5);                 // scope 0 at $DIR/while-storage.rs:11:22: 11:23\n-        switchInt(move _4) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/while-storage.rs:11:9: 13:10\n+        switchInt(move _4) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/while-storage.rs:11:12: 11:23\n     }\n \n-    bb5: {\n+    bb4: {\n         StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:13:9: 13:10\n         goto -> bb7;                     // scope 0 at no-location\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:13:9: 13:10\n         StorageDead(_2);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n         goto -> bb0;                     // scope 0 at $DIR/while-storage.rs:10:5: 14:6\n     }\n \n+    bb6: {\n+        goto -> bb7;                     // scope 0 at no-location\n+    }\n+\n     bb7: {\n         StorageDead(_2);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n         return;                          // scope 0 at $DIR/while-storage.rs:15:2: 15:2"}, {"sha": "89636294035df53dcdd8167e3e0aa08982b18171", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_inline_crate.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -42,12 +42,12 @@\n    40|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    41|      2|}\n   ------------------\n-  | used_inline_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  | used_inline_crate::used_only_from_bin_crate_generic_function::<&str>:\n   |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   41|      1|}\n   ------------------\n-  | used_inline_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  | used_inline_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   41|      1|}\n@@ -61,12 +61,12 @@\n    46|      4|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n    47|      4|}\n   ------------------\n-  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n   |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   47|      2|}\n   ------------------\n-  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n+  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n   |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   47|      2|}"}, {"sha": "3b5a0f22f28bef1de3913372e13cbb857b825c83", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -1,8 +1,8 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite_loop.rs:7:17\n+  --> $DIR/infinite_loop.rs:7:20\n    |\n LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+   |                    ^^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n \n error: aborting due to previous error\n "}, {"sha": "5e706a4466ea176cf2ba6a4e4f16362f1df5aef9", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -1,19 +1,15 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_eval_limit_reached.rs:6:5\n+  --> $DIR/const_eval_limit_reached.rs:6:11\n    |\n-LL |  / const X: usize = {\n-LL |  |     let mut x = 0;\n-LL |  |     while x != 1000 {\n-   |  |_____^\n-LL | ||\n-LL | ||\n-LL | ||         x += 1;\n-LL | ||     }\n-   | ||_____^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n-LL |  |\n-LL |  |     x\n-LL |  | };\n-   |  |__-\n+LL | / const X: usize = {\n+LL | |     let mut x = 0;\n+LL | |     while x != 1000 {\n+   | |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+LL | |\n+...  |\n+LL | |     x\n+LL | | };\n+   | |__-\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "9c1ac4e0c7ffb9fb5c401fb622e981825c36285c", "filename": "src/test/ui/drop/drop-if-let-binding.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fui%2Fdrop%2Fdrop-if-let-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7404c898a1a6933b71c72428a6dce551bcc1be7/src%2Ftest%2Fui%2Fdrop%2Fdrop-if-let-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdrop-if-let-binding.rs?ref=b7404c898a1a6933b71c72428a6dce551bcc1be7", "patch": "@@ -0,0 +1,7 @@\n+// build-pass\n+// regression test for issue #88307\n+// compile-flags: -C opt-level=s\n+\n+fn main() {\n+    if let Some(_val) = Option::<String>::None {}\n+}"}]}