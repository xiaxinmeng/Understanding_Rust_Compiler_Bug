{"sha": "170b02702277229ccaae3ffed916bf6dc57548fc", "node_id": "C_kwDOAAsO6NoAKDE3MGIwMjcwMjI3NzIyOWNjYWFlM2ZmZWQ5MTZiZjZkYzU3NTQ4ZmM", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-03-02T00:57:23Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-03-07T17:43:28Z"}, "message": "Add comments based on code review feedback", "tree": {"sha": "4d832d855a50cc45417825afdd6a6953cfed94d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d832d855a50cc45417825afdd6a6953cfed94d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/170b02702277229ccaae3ffed916bf6dc57548fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/170b02702277229ccaae3ffed916bf6dc57548fc", "html_url": "https://github.com/rust-lang/rust/commit/170b02702277229ccaae3ffed916bf6dc57548fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/170b02702277229ccaae3ffed916bf6dc57548fc/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f0f46fa4da35bea07c3bedd7bd9e6742d375a27", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0f46fa4da35bea07c3bedd7bd9e6742d375a27", "html_url": "https://github.com/rust-lang/rust/commit/9f0f46fa4da35bea07c3bedd7bd9e6742d375a27"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "74e98f81439d07773a5961a235fd178ee5e03b52", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/170b02702277229ccaae3ffed916bf6dc57548fc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/170b02702277229ccaae3ffed916bf6dc57548fc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=170b02702277229ccaae3ffed916bf6dc57548fc", "patch": "@@ -371,6 +371,14 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n \n         debug!(\"is_borrowed_temporary: {:?}\", self.drop_ranges.is_borrowed_temporary(expr));\n \n+        // Typically, the value produced by an expression is consumed by its parent in some way,\n+        // so we only have to check if the parent contains a yield (note that the parent may, for\n+        // example, store the value into a local variable, but then we already consider local\n+        // variables to be live across their scope).\n+        //\n+        // However, in the case of temporary values, we are going to store the value into a\n+        // temporary on the stack that is live for the current temporary scope and then return a\n+        // reference to it. That value may be live across the entire temporary scope.\n         let scope = if self.drop_ranges.is_borrowed_temporary(expr) {\n             self.region_scope_tree.temporary_scope(expr.hir_id.local_id)\n         } else {"}, {"sha": "e839822602dd6e817dc32b848ce564bf98588800", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/170b02702277229ccaae3ffed916bf6dc57548fc/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/170b02702277229ccaae3ffed916bf6dc57548fc/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=170b02702277229ccaae3ffed916bf6dc57548fc", "patch": "@@ -51,8 +51,8 @@ pub trait Delegate<'tcx> {\n     /// The value found at `place` is being copied.\n     /// `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n     fn copy(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n-        // In most cases, treating a copy as a borrow is the right thing, so we forward\n-        // this to the borrow callback by default.\n+        // In most cases, copying data from `x` is equivalent to doing `*&x`, so by default\n+        // we treat a copy of `x` as a borrow of `x`.\n         self.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow, false)\n     }\n "}]}