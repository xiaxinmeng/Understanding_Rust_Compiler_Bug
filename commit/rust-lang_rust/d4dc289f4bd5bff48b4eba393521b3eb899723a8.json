{"sha": "d4dc289f4bd5bff48b4eba393521b3eb899723a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZGMyODlmNGJkNWJmZjQ4YjRlYmEzOTM1MjFiM2ViODk5NzIzYTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-26T06:49:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-26T06:49:43Z"}, "message": "Auto merge of #45990 - murarth:rc-from-strs, r=alexcrichton\n\nImplement `Rc`/`Arc` conversions for string-like types\n\nProvides the following conversion implementations:\n\n* `From<`{`CString`,`&CStr`}`>` for {`Arc`,`Rc`}`<CStr>`\n* `From<`{`OsString`,`&OsStr`}`>` for {`Arc`,`Rc`}`<OsStr>`\n* `From<`{`PathBuf`,`&Path`}`>` for {`Arc`,`Rc`}`<Path>`\n\nCloses #45008", "tree": {"sha": "4a1bf54316539c23dcc2ad8c9fd1d4ba9e9aa549", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a1bf54316539c23dcc2ad8c9fd1d4ba9e9aa549"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4dc289f4bd5bff48b4eba393521b3eb899723a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4dc289f4bd5bff48b4eba393521b3eb899723a8", "html_url": "https://github.com/rust-lang/rust/commit/d4dc289f4bd5bff48b4eba393521b3eb899723a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4dc289f4bd5bff48b4eba393521b3eb899723a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "html_url": "https://github.com/rust-lang/rust/commit/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9"}, {"sha": "1bbc7764461631100c88f5523238a19bc4767199", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bbc7764461631100c88f5523238a19bc4767199", "html_url": "https://github.com/rust-lang/rust/commit/1bbc7764461631100c88f5523238a19bc4767199"}], "stats": {"total": 283, "additions": 283, "deletions": 0}, "files": [{"sha": "a2022a2eeb23c3d8fc086d4e44419bb5e8aafc80", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=d4dc289f4bd5bff48b4eba393521b3eb899723a8", "patch": "@@ -19,8 +19,10 @@ use memchr;\n use ops;\n use os::raw::c_char;\n use ptr;\n+use rc::Rc;\n use slice;\n use str::{self, Utf8Error};\n+use sync::Arc;\n use sys;\n \n /// A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the\n@@ -704,6 +706,42 @@ impl From<CString> for Box<CStr> {\n     }\n }\n \n+#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+impl From<CString> for Arc<CStr> {\n+    #[inline]\n+    fn from(s: CString) -> Arc<CStr> {\n+        let arc: Arc<[u8]> = Arc::from(s.into_inner());\n+        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const CStr) }\n+    }\n+}\n+\n+#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+impl<'a> From<&'a CStr> for Arc<CStr> {\n+    #[inline]\n+    fn from(s: &CStr) -> Arc<CStr> {\n+        let arc: Arc<[u8]> = Arc::from(s.to_bytes_with_nul());\n+        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const CStr) }\n+    }\n+}\n+\n+#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+impl From<CString> for Rc<CStr> {\n+    #[inline]\n+    fn from(s: CString) -> Rc<CStr> {\n+        let rc: Rc<[u8]> = Rc::from(s.into_inner());\n+        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const CStr) }\n+    }\n+}\n+\n+#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+impl<'a> From<&'a CStr> for Rc<CStr> {\n+    #[inline]\n+    fn from(s: &CStr) -> Rc<CStr> {\n+        let rc: Rc<[u8]> = Rc::from(s.to_bytes_with_nul());\n+        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const CStr) }\n+    }\n+}\n+\n #[stable(feature = \"default_box_extra\", since = \"1.17.0\")]\n impl Default for Box<CStr> {\n     fn default() -> Box<CStr> {\n@@ -1201,6 +1239,8 @@ mod tests {\n     use borrow::Cow::{Borrowed, Owned};\n     use hash::{Hash, Hasher};\n     use collections::hash_map::DefaultHasher;\n+    use rc::Rc;\n+    use sync::Arc;\n \n     #[test]\n     fn c_to_rust() {\n@@ -1337,4 +1377,21 @@ mod tests {\n         let boxed = <Box<CStr>>::default();\n         assert_eq!(boxed.to_bytes_with_nul(), &[0]);\n     }\n+\n+    #[test]\n+    fn into_rc() {\n+        let orig: &[u8] = b\"Hello, world!\\0\";\n+        let cstr = CStr::from_bytes_with_nul(orig).unwrap();\n+        let rc: Rc<CStr> = Rc::from(cstr);\n+        let arc: Arc<CStr> = Arc::from(cstr);\n+\n+        assert_eq!(&*rc, cstr);\n+        assert_eq!(&*arc, cstr);\n+\n+        let rc2: Rc<CStr> = Rc::from(cstr.to_owned());\n+        let arc2: Arc<CStr> = Arc::from(cstr.to_owned());\n+\n+        assert_eq!(&*rc2, cstr);\n+        assert_eq!(&*arc2, cstr);\n+    }\n }"}, {"sha": "cb902461f39fd1b148c1b3e7ad4a08f51998ff4d", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=d4dc289f4bd5bff48b4eba393521b3eb899723a8", "patch": "@@ -13,6 +13,8 @@ use fmt;\n use ops;\n use cmp;\n use hash::{Hash, Hasher};\n+use rc::Rc;\n+use sync::Arc;\n \n use sys::os_str::{Buf, Slice};\n use sys_common::{AsInner, IntoInner, FromInner};\n@@ -592,6 +594,42 @@ impl From<OsString> for Box<OsStr> {\n     }\n }\n \n+#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+impl From<OsString> for Arc<OsStr> {\n+    #[inline]\n+    fn from(s: OsString) -> Arc<OsStr> {\n+        let arc = s.inner.into_arc();\n+        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const OsStr) }\n+    }\n+}\n+\n+#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+impl<'a> From<&'a OsStr> for Arc<OsStr> {\n+    #[inline]\n+    fn from(s: &OsStr) -> Arc<OsStr> {\n+        let arc = s.inner.into_arc();\n+        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const OsStr) }\n+    }\n+}\n+\n+#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+impl From<OsString> for Rc<OsStr> {\n+    #[inline]\n+    fn from(s: OsString) -> Rc<OsStr> {\n+        let rc = s.inner.into_rc();\n+        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const OsStr) }\n+    }\n+}\n+\n+#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+impl<'a> From<&'a OsStr> for Rc<OsStr> {\n+    #[inline]\n+    fn from(s: &OsStr) -> Rc<OsStr> {\n+        let rc = s.inner.into_rc();\n+        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const OsStr) }\n+    }\n+}\n+\n #[stable(feature = \"box_default_extra\", since = \"1.17.0\")]\n impl Default for Box<OsStr> {\n     fn default() -> Box<OsStr> {\n@@ -793,6 +831,9 @@ mod tests {\n     use super::*;\n     use sys_common::{AsInner, IntoInner};\n \n+    use rc::Rc;\n+    use sync::Arc;\n+\n     #[test]\n     fn test_os_string_with_capacity() {\n         let os_string = OsString::with_capacity(0);\n@@ -935,4 +976,21 @@ mod tests {\n         assert_eq!(os_str, os_string);\n         assert!(os_string.capacity() >= 123);\n     }\n+\n+    #[test]\n+    fn into_rc() {\n+        let orig = \"Hello, world!\";\n+        let os_str = OsStr::new(orig);\n+        let rc: Rc<OsStr> = Rc::from(os_str);\n+        let arc: Arc<OsStr> = Arc::from(os_str);\n+\n+        assert_eq!(&*rc, os_str);\n+        assert_eq!(&*arc, os_str);\n+\n+        let rc2: Rc<OsStr> = Rc::from(os_str.to_owned());\n+        let arc2: Arc<OsStr> = Arc::from(os_str.to_owned());\n+\n+        assert_eq!(&*rc2, os_str);\n+        assert_eq!(&*arc2, os_str);\n+    }\n }"}, {"sha": "eb125a4737a1ca0dd614b677a5a5a49a7a075fc4", "filename": "src/libstd/path.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=d4dc289f4bd5bff48b4eba393521b3eb899723a8", "patch": "@@ -86,6 +86,8 @@ use hash::{Hash, Hasher};\n use io;\n use iter::{self, FusedIterator};\n use ops::{self, Deref};\n+use rc::Rc;\n+use sync::Arc;\n \n use ffi::{OsStr, OsString};\n \n@@ -1452,6 +1454,42 @@ impl<'a> From<PathBuf> for Cow<'a, Path> {\n     }\n }\n \n+#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+impl From<PathBuf> for Arc<Path> {\n+    #[inline]\n+    fn from(s: PathBuf) -> Arc<Path> {\n+        let arc: Arc<OsStr> = Arc::from(s.into_os_string());\n+        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const Path) }\n+    }\n+}\n+\n+#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+impl<'a> From<&'a Path> for Arc<Path> {\n+    #[inline]\n+    fn from(s: &Path) -> Arc<Path> {\n+        let arc: Arc<OsStr> = Arc::from(s.as_os_str());\n+        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const Path) }\n+    }\n+}\n+\n+#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+impl From<PathBuf> for Rc<Path> {\n+    #[inline]\n+    fn from(s: PathBuf) -> Rc<Path> {\n+        let rc: Rc<OsStr> = Rc::from(s.into_os_string());\n+        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Path) }\n+    }\n+}\n+\n+#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+impl<'a> From<&'a Path> for Rc<Path> {\n+    #[inline]\n+    fn from(s: &Path) -> Rc<Path> {\n+        let rc: Rc<OsStr> = Rc::from(s.as_os_str());\n+        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Path) }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ToOwned for Path {\n     type Owned = PathBuf;\n@@ -2568,6 +2606,9 @@ impl Error for StripPrefixError {\n mod tests {\n     use super::*;\n \n+    use rc::Rc;\n+    use sync::Arc;\n+\n     macro_rules! t(\n         ($path:expr, iter: $iter:expr) => (\n             {\n@@ -3970,4 +4011,21 @@ mod tests {\n         assert_eq!(format!(\"a{:#<5}b\", Path::new(\"\").display()), \"a#####b\");\n         assert_eq!(format!(\"a{:#<5}b\", Path::new(\"a\").display()), \"aa####b\");\n     }\n+\n+    #[test]\n+    fn into_rc() {\n+        let orig = \"hello/world\";\n+        let path = Path::new(orig);\n+        let rc: Rc<Path> = Rc::from(path);\n+        let arc: Arc<Path> = Arc::from(path);\n+\n+        assert_eq!(&*rc, path);\n+        assert_eq!(&*arc, path);\n+\n+        let rc2: Rc<Path> = Rc::from(path.to_owned());\n+        let arc2: Arc<Path> = Arc::from(path.to_owned());\n+\n+        assert_eq!(&*rc2, path);\n+        assert_eq!(&*arc2, path);\n+    }\n }"}, {"sha": "5c40d42fa0a44d282a57ac5e2906281d64193e80", "filename": "src/libstd/sys/redox/os_str.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs?ref=d4dc289f4bd5bff48b4eba393521b3eb899723a8", "patch": "@@ -15,6 +15,8 @@ use borrow::Cow;\n use fmt;\n use str;\n use mem;\n+use rc::Rc;\n+use sync::Arc;\n use sys_common::{AsInner, IntoInner};\n use std_unicode::lossy::Utf8Lossy;\n \n@@ -123,6 +125,16 @@ impl Buf {\n         let inner: Box<[u8]> = unsafe { mem::transmute(boxed) };\n         Buf { inner: inner.into_vec() }\n     }\n+\n+    #[inline]\n+    pub fn into_arc(&self) -> Arc<Slice> {\n+        self.as_slice().into_arc()\n+    }\n+\n+    #[inline]\n+    pub fn into_rc(&self) -> Rc<Slice> {\n+        self.as_slice().into_rc()\n+    }\n }\n \n impl Slice {\n@@ -156,4 +168,16 @@ impl Slice {\n         let boxed: Box<[u8]> = Default::default();\n         unsafe { mem::transmute(boxed) }\n     }\n+\n+    #[inline]\n+    pub fn into_arc(&self) -> Arc<Slice> {\n+        let arc: Arc<[u8]> = Arc::from(&self.inner);\n+        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const Slice) }\n+    }\n+\n+    #[inline]\n+    pub fn into_rc(&self) -> Rc<Slice> {\n+        let rc: Rc<[u8]> = Rc::from(&self.inner);\n+        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Slice) }\n+    }\n }"}, {"sha": "a27e76a0e3bccbef2a5e24e931a96326e330ea3b", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=d4dc289f4bd5bff48b4eba393521b3eb899723a8", "patch": "@@ -15,6 +15,8 @@ use borrow::Cow;\n use fmt;\n use str;\n use mem;\n+use rc::Rc;\n+use sync::Arc;\n use sys_common::{AsInner, IntoInner};\n use std_unicode::lossy::Utf8Lossy;\n \n@@ -123,6 +125,16 @@ impl Buf {\n         let inner: Box<[u8]> = unsafe { mem::transmute(boxed) };\n         Buf { inner: inner.into_vec() }\n     }\n+\n+    #[inline]\n+    pub fn into_arc(&self) -> Arc<Slice> {\n+        self.as_slice().into_arc()\n+    }\n+\n+    #[inline]\n+    pub fn into_rc(&self) -> Rc<Slice> {\n+        self.as_slice().into_rc()\n+    }\n }\n \n impl Slice {\n@@ -156,4 +168,16 @@ impl Slice {\n         let boxed: Box<[u8]> = Default::default();\n         unsafe { mem::transmute(boxed) }\n     }\n+\n+    #[inline]\n+    pub fn into_arc(&self) -> Arc<Slice> {\n+        let arc: Arc<[u8]> = Arc::from(&self.inner);\n+        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const Slice) }\n+    }\n+\n+    #[inline]\n+    pub fn into_rc(&self) -> Rc<Slice> {\n+        let rc: Rc<[u8]> = Rc::from(&self.inner);\n+        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Slice) }\n+    }\n }"}, {"sha": "0e64b5bc6b8fb862682e25da862456b3ba02b271", "filename": "src/libstd/sys/wasm/os_str.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs?ref=d4dc289f4bd5bff48b4eba393521b3eb899723a8", "patch": "@@ -15,6 +15,8 @@ use borrow::Cow;\n use fmt;\n use str;\n use mem;\n+use rc::Rc;\n+use sync::Arc;\n use sys_common::{AsInner, IntoInner};\n use std_unicode::lossy::Utf8Lossy;\n \n@@ -123,6 +125,16 @@ impl Buf {\n         let inner: Box<[u8]> = unsafe { mem::transmute(boxed) };\n         Buf { inner: inner.into_vec() }\n     }\n+\n+    #[inline]\n+    pub fn into_arc(&self) -> Arc<Slice> {\n+        self.as_slice().into_arc()\n+    }\n+\n+    #[inline]\n+    pub fn into_rc(&self) -> Rc<Slice> {\n+        self.as_slice().into_rc()\n+    }\n }\n \n impl Slice {\n@@ -156,4 +168,16 @@ impl Slice {\n         let boxed: Box<[u8]> = Default::default();\n         unsafe { mem::transmute(boxed) }\n     }\n+\n+    #[inline]\n+    pub fn into_arc(&self) -> Arc<Slice> {\n+        let arc: Arc<[u8]> = Arc::from(&self.inner);\n+        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const Slice) }\n+    }\n+\n+    #[inline]\n+    pub fn into_rc(&self) -> Rc<Slice> {\n+        let rc: Rc<[u8]> = Rc::from(&self.inner);\n+        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Slice) }\n+    }\n }"}, {"sha": "b8d2f7bc53ce721b657bc9b2da4c574fba7e088b", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=d4dc289f4bd5bff48b4eba393521b3eb899723a8", "patch": "@@ -15,6 +15,8 @@ use borrow::Cow;\n use fmt;\n use sys_common::wtf8::{Wtf8, Wtf8Buf};\n use mem;\n+use rc::Rc;\n+use sync::Arc;\n use sys_common::{AsInner, IntoInner};\n \n #[derive(Clone, Hash)]\n@@ -115,6 +117,16 @@ impl Buf {\n         let inner: Box<Wtf8> = unsafe { mem::transmute(boxed) };\n         Buf { inner: Wtf8Buf::from_box(inner) }\n     }\n+\n+    #[inline]\n+    pub fn into_arc(&self) -> Arc<Slice> {\n+        self.as_slice().into_arc()\n+    }\n+\n+    #[inline]\n+    pub fn into_rc(&self) -> Rc<Slice> {\n+        self.as_slice().into_rc()\n+    }\n }\n \n impl Slice {\n@@ -144,4 +156,16 @@ impl Slice {\n     pub fn empty_box() -> Box<Slice> {\n         unsafe { mem::transmute(Wtf8::empty_box()) }\n     }\n+\n+    #[inline]\n+    pub fn into_arc(&self) -> Arc<Slice> {\n+        let arc = self.inner.into_arc();\n+        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const Slice) }\n+    }\n+\n+    #[inline]\n+    pub fn into_rc(&self) -> Rc<Slice> {\n+        let rc = self.inner.into_rc();\n+        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Slice) }\n+    }\n }"}, {"sha": "e212b5006f2d1af4a1a4aea76063bcc77cd69a81", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dc289f4bd5bff48b4eba393521b3eb899723a8/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=d4dc289f4bd5bff48b4eba393521b3eb899723a8", "patch": "@@ -35,8 +35,10 @@ use hash::{Hash, Hasher};\n use iter::FromIterator;\n use mem;\n use ops;\n+use rc::Rc;\n use slice;\n use str;\n+use sync::Arc;\n use sys_common::AsInner;\n \n const UTF8_REPLACEMENT_CHARACTER: &'static str = \"\\u{FFFD}\";\n@@ -641,6 +643,18 @@ impl Wtf8 {\n         let boxed: Box<[u8]> = Default::default();\n         unsafe { mem::transmute(boxed) }\n     }\n+\n+    #[inline]\n+    pub fn into_arc(&self) -> Arc<Wtf8> {\n+        let arc: Arc<[u8]> = Arc::from(&self.bytes);\n+        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const Wtf8) }\n+    }\n+\n+    #[inline]\n+    pub fn into_rc(&self) -> Rc<Wtf8> {\n+        let rc: Rc<[u8]> = Rc::from(&self.bytes);\n+        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Wtf8) }\n+    }\n }\n \n "}]}