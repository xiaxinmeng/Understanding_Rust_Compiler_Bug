{"sha": "4342b717158eeb9aff20d1958229ffcbca17f1c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNDJiNzE3MTU4ZWViOWFmZjIwZDE5NTgyMjlmZmNiY2ExN2YxYzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-16T11:40:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-16T11:40:51Z"}, "message": "Merge #4876\n\n4876: Syntactic highlighting of NAME_REF for injections r=matklad a=ltentrup\n\nThis commit adds a function that tries to determine the syntax highlighting class of NAME_REFs based on the usage.\r\nIt is used for highlighting injections (such as highlighting of doctests) as the semantic logic will most of the time result in unresolved references.\r\nIt also adds a color to unresolved references in HTML encoding.\r\n\r\nFollow up of #4683.\r\nFixes #4809.\n\nCo-authored-by: Leander Tentrup <leander.tentrup@gmail.com>", "tree": {"sha": "ddcbbfe6fcaaac83449fe612c971044e19680365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddcbbfe6fcaaac83449fe612c971044e19680365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4342b717158eeb9aff20d1958229ffcbca17f1c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe6K/DCRBK7hj4Ov3rIwAAdHIIAE9oxkLuHoWdbM3p/0NTkWlQ\nkEmqXbrrDlNoCW+GEALFEOFakg89tcBUoGsF71DOYDfteAxnycHCWogVLDTYvmyQ\nR47EIFo8b7n8y9Jb0GyIYNgxKec96wp79ufZAWv93kngR9EL/AmQBdKyftqn7foW\ntJ5C4h0CjTOf6tyAtSuFWXWppEL3s/MAjBdBDgYPyCheg5p5Whtq0s11kySXJ8+F\n4F4er8bOMa3wZ2QTVCrOLsdnViwDwgWBIrxwGnQrk6WUkyK5N+YINS9FUh1I77U4\n6hRPL3BlZ2GpD+abuB5PF9d6KmVxmJVHLNE0YRdZ+52I8D7qgU0KnbTCYGA1vhQ=\n=6yrs\n-----END PGP SIGNATURE-----\n", "payload": "tree ddcbbfe6fcaaac83449fe612c971044e19680365\nparent 83a16e825da2767aaee1d62447eb94f4d7de8881\nparent c4b3db0c2f307d1d782af88ded260e4c6593cae0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592307651 +0000\ncommitter GitHub <noreply@github.com> 1592307651 +0000\n\nMerge #4876\n\n4876: Syntactic highlighting of NAME_REF for injections r=matklad a=ltentrup\n\nThis commit adds a function that tries to determine the syntax highlighting class of NAME_REFs based on the usage.\r\nIt is used for highlighting injections (such as highlighting of doctests) as the semantic logic will most of the time result in unresolved references.\r\nIt also adds a color to unresolved references in HTML encoding.\r\n\r\nFollow up of #4683.\r\nFixes #4809.\n\nCo-authored-by: Leander Tentrup <leander.tentrup@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4342b717158eeb9aff20d1958229ffcbca17f1c7", "html_url": "https://github.com/rust-lang/rust/commit/4342b717158eeb9aff20d1958229ffcbca17f1c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4342b717158eeb9aff20d1958229ffcbca17f1c7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83a16e825da2767aaee1d62447eb94f4d7de8881", "url": "https://api.github.com/repos/rust-lang/rust/commits/83a16e825da2767aaee1d62447eb94f4d7de8881", "html_url": "https://github.com/rust-lang/rust/commit/83a16e825da2767aaee1d62447eb94f4d7de8881"}, {"sha": "c4b3db0c2f307d1d782af88ded260e4c6593cae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b3db0c2f307d1d782af88ded260e4c6593cae0", "html_url": "https://github.com/rust-lang/rust/commit/c4b3db0c2f307d1d782af88ded260e4c6593cae0"}], "stats": {"total": 118, "additions": 102, "deletions": 16}, "files": [{"sha": "375da1f454ea0948616a7157e10690edee939919", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=4342b717158eeb9aff20d1958229ffcbca17f1c7", "patch": "@@ -440,12 +440,14 @@ impl Analysis {\n \n     /// Computes syntax highlighting for the given file\n     pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n-        self.with_db(|db| syntax_highlighting::highlight(db, file_id, None))\n+        self.with_db(|db| syntax_highlighting::highlight(db, file_id, None, false))\n     }\n \n     /// Computes syntax highlighting for the given file range.\n     pub fn highlight_range(&self, frange: FileRange) -> Cancelable<Vec<HighlightedRange>> {\n-        self.with_db(|db| syntax_highlighting::highlight(db, frange.file_id, Some(frange.range)))\n+        self.with_db(|db| {\n+            syntax_highlighting::highlight(db, frange.file_id, Some(frange.range), false)\n+        })\n     }\n \n     /// Computes syntax highlighting for the given file."}, {"sha": "c5ab5a1d87ba18d94068ec8bceb6514525d998ec", "filename": "crates/ra_ide/src/prime_caches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs?ref=4342b717158eeb9aff20d1958229ffcbca17f1c7", "patch": "@@ -7,6 +7,6 @@ use crate::{FileId, RootDatabase};\n \n pub(crate) fn prime_caches(db: &RootDatabase, files: Vec<FileId>) {\n     for file in files {\n-        let _ = crate::syntax_highlighting::highlight(db, file, None);\n+        let _ = crate::syntax_highlighting::highlight(db, file, None, false);\n     }\n }"}, {"sha": "5228df2674bcd64beb4c942fb623eea3cdc569a3", "filename": "crates/ra_ide/src/snapshots/highlight_doctest.html", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html?ref=4342b717158eeb9aff20d1958229ffcbca17f1c7", "patch": "@@ -25,34 +25,45 @@\n .variable           { color: #DCDCCC; }\n .format_specifier   { color: #CC696B; }\n .mutable            { text-decoration: underline; }\n+.unresolved_reference { color: #FC5555; }\n \n .keyword            { color: #F0DFAF; font-weight: bold; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n </style>\n-<pre><code><span class=\"keyword\">impl</span> <span class=\"unresolved_reference\">Foo</span> {\n+<pre><code><span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> {\n+    <span class=\"field declaration\">bar</span>: <span class=\"builtin_type\">bool</span>,\n+}\n+\n+<span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> {\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"constant declaration\">bar</span>: <span class=\"builtin_type\">bool</span> = <span class=\"bool_literal\">true</span>;\n+\n     <span class=\"comment\">/// Constructs a new `Foo`.</span>\n     <span class=\"comment\">///</span>\n     <span class=\"comment\">/// # Examples</span>\n     <span class=\"comment\">///</span>\n     <span class=\"comment\">/// ```</span>\n     <span class=\"comment\">/// #</span> <span class=\"attribute\">#![</span><span class=\"function attribute\">allow</span><span class=\"attribute\">(unused_mut)]</span>\n-    <span class=\"comment\">/// </span><span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span>: <span class=\"unresolved_reference\">Foo</span> = <span class=\"unresolved_reference\">Foo</span>::<span class=\"unresolved_reference\">new</span>();\n+    <span class=\"comment\">/// </span><span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span>: <span class=\"struct\">Foo</span> = <span class=\"struct\">Foo</span>::<span class=\"function\">new</span>();\n     <span class=\"comment\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">new</span>() -&gt; <span class=\"unresolved_reference\">Foo</span> {\n-        <span class=\"unresolved_reference\">Foo</span> { }\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">new</span>() -&gt; <span class=\"struct\">Foo</span> {\n+        <span class=\"struct\">Foo</span> { <span class=\"field\">bar</span>: <span class=\"bool_literal\">true</span> }\n     }\n \n     <span class=\"comment\">/// `bar` method on `Foo`.</span>\n     <span class=\"comment\">///</span>\n     <span class=\"comment\">/// # Examples</span>\n     <span class=\"comment\">///</span>\n     <span class=\"comment\">/// ```</span>\n-    <span class=\"comment\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">foo</span> = <span class=\"unresolved_reference\">Foo</span>::<span class=\"unresolved_reference\">new</span>();\n+    <span class=\"comment\">/// </span><span class=\"keyword\">use</span> <span class=\"module\">x</span>::<span class=\"module\">y</span>;\n+    <span class=\"comment\">///</span>\n+    <span class=\"comment\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">foo</span> = <span class=\"struct\">Foo</span>::<span class=\"function\">new</span>();\n     <span class=\"comment\">///</span>\n     <span class=\"comment\">/// </span><span class=\"comment\">// calls bar on foo</span>\n     <span class=\"comment\">/// </span><span class=\"macro\">assert!</span>(foo.bar());\n     <span class=\"comment\">///</span>\n+    <span class=\"comment\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">bar</span> = <span class=\"variable\">foo</span>.<span class=\"field\">bar</span> || <span class=\"struct\">Foo</span>::<span class=\"constant\">bar</span>;\n+    <span class=\"comment\">///</span>\n     <span class=\"comment\">/// </span><span class=\"comment\">/* multi-line\n     </span><span class=\"comment\">/// </span><span class=\"comment\">       comment */</span>\n     <span class=\"comment\">///</span>\n@@ -63,7 +74,7 @@\n     <span class=\"comment\">/// ```</span>\n     <span class=\"comment\">///</span>\n     <span class=\"comment\">/// ```</span>\n-    <span class=\"comment\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">foobar</span> = <span class=\"unresolved_reference\">Foo</span>::<span class=\"unresolved_reference\">new</span>().<span class=\"unresolved_reference\">bar</span>();\n+    <span class=\"comment\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">foobar</span> = <span class=\"struct\">Foo</span>::<span class=\"function\">new</span>().<span class=\"function\">bar</span>();\n     <span class=\"comment\">/// ```</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>(&<span class=\"self_keyword\">self</span>) -&gt; <span class=\"builtin_type\">bool</span> {\n         <span class=\"bool_literal\">true</span>"}, {"sha": "e1c9d35233f1b29ce74d1716bb42d84d83b3ccaf", "filename": "crates/ra_ide/src/snapshots/highlight_injection.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html?ref=4342b717158eeb9aff20d1958229ffcbca17f1c7", "patch": "@@ -25,6 +25,7 @@\n .variable           { color: #DCDCCC; }\n .format_specifier   { color: #CC696B; }\n .mutable            { text-decoration: underline; }\n+.unresolved_reference { color: #FC5555; }\n \n .keyword            { color: #F0DFAF; font-weight: bold; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }"}, {"sha": "666b48fd07440e266d9d39e1f91b18932d2925c6", "filename": "crates/ra_ide/src/snapshots/highlight_strings.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html?ref=4342b717158eeb9aff20d1958229ffcbca17f1c7", "patch": "@@ -25,6 +25,7 @@\n .variable           { color: #DCDCCC; }\n .format_specifier   { color: #CC696B; }\n .mutable            { text-decoration: underline; }\n+.unresolved_reference { color: #FC5555; }\n \n .keyword            { color: #F0DFAF; font-weight: bold; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }"}, {"sha": "e1540499b4d7176fd3b5124f62f2eb530d14b41b", "filename": "crates/ra_ide/src/snapshots/highlight_unsafe.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html?ref=4342b717158eeb9aff20d1958229ffcbca17f1c7", "patch": "@@ -25,6 +25,7 @@\n .variable           { color: #DCDCCC; }\n .format_specifier   { color: #CC696B; }\n .mutable            { text-decoration: underline; }\n+.unresolved_reference { color: #FC5555; }\n \n .keyword            { color: #F0DFAF; font-weight: bold; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }"}, {"sha": "52912dc93f945efcfd163defce04eaccf307f14e", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=4342b717158eeb9aff20d1958229ffcbca17f1c7", "patch": "@@ -25,6 +25,7 @@\n .variable           { color: #DCDCCC; }\n .format_specifier   { color: #CC696B; }\n .mutable            { text-decoration: underline; }\n+.unresolved_reference { color: #FC5555; }\n \n .keyword            { color: #F0DFAF; font-weight: bold; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }"}, {"sha": "1d7f04882078d0f586a2c014af71d55d39f4a614", "filename": "crates/ra_ide/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=4342b717158eeb9aff20d1958229ffcbca17f1c7", "patch": "@@ -25,6 +25,7 @@\n .variable           { color: #DCDCCC; }\n .format_specifier   { color: #CC696B; }\n .mutable            { text-decoration: underline; }\n+.unresolved_reference { color: #FC5555; }\n \n .keyword            { color: #F0DFAF; font-weight: bold; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }"}, {"sha": "5a4de450c6de81d47e51969d83296a7e87791872", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=4342b717158eeb9aff20d1958229ffcbca17f1c7", "patch": "@@ -44,6 +44,7 @@ pub(crate) fn highlight(\n     db: &RootDatabase,\n     file_id: FileId,\n     range_to_highlight: Option<TextRange>,\n+    syntactic_name_ref_highlighting: bool,\n ) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n     let sema = Semantics::new(db);\n@@ -104,6 +105,7 @@ pub(crate) fn highlight(\n                     if let Some((highlight, binding_hash)) = highlight_element(\n                         &sema,\n                         &mut bindings_shadow_count,\n+                        syntactic_name_ref_highlighting,\n                         name.syntax().clone().into(),\n                     ) {\n                         stack.add(HighlightedRange {\n@@ -200,9 +202,12 @@ pub(crate) fn highlight(\n \n         let is_format_string = format_string.as_ref() == Some(&element_to_highlight);\n \n-        if let Some((highlight, binding_hash)) =\n-            highlight_element(&sema, &mut bindings_shadow_count, element_to_highlight.clone())\n-        {\n+        if let Some((highlight, binding_hash)) = highlight_element(\n+            &sema,\n+            &mut bindings_shadow_count,\n+            syntactic_name_ref_highlighting,\n+            element_to_highlight.clone(),\n+        ) {\n             stack.add(HighlightedRange { range, highlight, binding_hash });\n             if let Some(string) =\n                 element_to_highlight.as_token().cloned().and_then(ast::String::cast)\n@@ -410,6 +415,7 @@ fn macro_call_range(macro_call: &ast::MacroCall) -> Option<TextRange> {\n fn highlight_element(\n     sema: &Semantics<RootDatabase>,\n     bindings_shadow_count: &mut FxHashMap<Name, u32>,\n+    syntactic_name_ref_highlighting: bool,\n     element: SyntaxElement,\n ) -> Option<(Highlight, Option<u64>)> {\n     let db = sema.db;\n@@ -463,6 +469,7 @@ fn highlight_element(\n                     }\n                     NameRefClass::FieldShorthand { .. } => HighlightTag::Field.into(),\n                 },\n+                None if syntactic_name_ref_highlighting => highlight_name_ref_by_syntax(name_ref),\n                 None => HighlightTag::UnresolvedReference.into(),\n             }\n         }\n@@ -614,3 +621,53 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n \n     tag.into()\n }\n+\n+fn highlight_name_ref_by_syntax(name: ast::NameRef) -> Highlight {\n+    let default = HighlightTag::UnresolvedReference;\n+\n+    let parent = match name.syntax().parent() {\n+        Some(it) => it,\n+        _ => return default.into(),\n+    };\n+\n+    let tag = match parent.kind() {\n+        METHOD_CALL_EXPR => HighlightTag::Function,\n+        FIELD_EXPR => HighlightTag::Field,\n+        PATH_SEGMENT => {\n+            let path = match parent.parent().and_then(ast::Path::cast) {\n+                Some(it) => it,\n+                _ => return default.into(),\n+            };\n+            let expr = match path.syntax().parent().and_then(ast::PathExpr::cast) {\n+                Some(it) => it,\n+                _ => {\n+                    // within path, decide whether it is module or adt by checking for uppercase name\n+                    return if name.text().chars().next().unwrap_or_default().is_uppercase() {\n+                        HighlightTag::Struct\n+                    } else {\n+                        HighlightTag::Module\n+                    }\n+                    .into();\n+                }\n+            };\n+            let parent = match expr.syntax().parent() {\n+                Some(it) => it,\n+                None => return default.into(),\n+            };\n+\n+            match parent.kind() {\n+                CALL_EXPR => HighlightTag::Function,\n+                _ => {\n+                    if name.text().chars().next().unwrap_or_default().is_uppercase() {\n+                        HighlightTag::Struct\n+                    } else {\n+                        HighlightTag::Constant\n+                    }\n+                }\n+            }\n+        }\n+        _ => default,\n+    };\n+\n+    tag.into()\n+}"}, {"sha": "853b4a20f11cc5c690732a4d816cc578998c67a2", "filename": "crates/ra_ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=4342b717158eeb9aff20d1958229ffcbca17f1c7", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n         )\n     }\n \n-    let ranges = highlight(db, file_id, None);\n+    let ranges = highlight(db, file_id, None, false);\n     let text = parse.tree().syntax().to_string();\n     let mut prev_pos = TextSize::from(0);\n     let mut buf = String::new();\n@@ -84,6 +84,7 @@ pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padd\n .variable           { color: #DCDCCC; }\n .format_specifier   { color: #CC696B; }\n .mutable            { text-decoration: underline; }\n+.unresolved_reference { color: #FC5555; }\n \n .keyword            { color: #F0DFAF; font-weight: bold; }\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }"}, {"sha": "a02ffe59ee29a97494583c8bbf828e7683815911", "filename": "crates/ra_ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=4342b717158eeb9aff20d1958229ffcbca17f1c7", "patch": "@@ -137,7 +137,7 @@ pub(super) fn highlight_doc_comment(\n     let (analysis, tmp_file_id) = Analysis::from_single_file(text);\n \n     stack.push();\n-    for mut h in analysis.highlight(tmp_file_id).unwrap() {\n+    for mut h in analysis.with_db(|db| super::highlight(db, tmp_file_id, None, true)).unwrap() {\n         // Determine start offset and end offset in case of multi-line ranges\n         let mut start_offset = None;\n         let mut end_offset = None;"}, {"sha": "062b3ff4ae4fece04faa2bbfbbb319864cb36c5d", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4342b717158eeb9aff20d1958229ffcbca17f1c7/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=4342b717158eeb9aff20d1958229ffcbca17f1c7", "patch": "@@ -287,7 +287,13 @@ fn main() {\n fn test_highlight_doctest() {\n     check_highlighting(\n         r#\"\n+struct Foo {\n+    bar: bool,\n+}\n+\n impl Foo {\n+    pub const bar: bool = true;\n+\n     /// Constructs a new `Foo`.\n     ///\n     /// # Examples\n@@ -297,19 +303,23 @@ impl Foo {\n     /// let mut foo: Foo = Foo::new();\n     /// ```\n     pub const fn new() -> Foo {\n-        Foo { }\n+        Foo { bar: true }\n     }\n \n     /// `bar` method on `Foo`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n+    /// use x::y;\n+    ///\n     /// let foo = Foo::new();\n     ///\n     /// // calls bar on foo\n     /// assert!(foo.bar());\n     ///\n+    /// let bar = foo.bar || Foo::bar;\n+    ///\n     /// /* multi-line\n     ///        comment */\n     ///\n@@ -330,7 +340,7 @@ impl Foo {\n         .trim(),\n         \"crates/ra_ide/src/snapshots/highlight_doctest.html\",\n         false,\n-    )\n+    );\n }\n \n /// Highlights the code given by the `ra_fixture` argument, renders the"}]}