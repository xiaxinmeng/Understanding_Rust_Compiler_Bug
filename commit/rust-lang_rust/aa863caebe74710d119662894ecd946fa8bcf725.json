{"sha": "aa863caebe74710d119662894ecd946fa8bcf725", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhODYzY2FlYmU3NDcxMGQxMTk2NjI4OTRlY2Q5NDZmYThiY2Y3MjU=", "commit": {"author": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2020-10-18T00:26:31Z"}, "committer": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2021-01-06T14:13:38Z"}, "message": "Style nit: replace `for_each` & `return` with `for` & `continue`\n\nCo-Authored-By: Joshua Nelson <jyn514@gmail.com>", "tree": {"sha": "f8c56c7c09bc1c748eacffbebb472ab0d99e78e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8c56c7c09bc1c748eacffbebb472ab0d99e78e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa863caebe74710d119662894ecd946fa8bcf725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa863caebe74710d119662894ecd946fa8bcf725", "html_url": "https://github.com/rust-lang/rust/commit/aa863caebe74710d119662894ecd946fa8bcf725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa863caebe74710d119662894ecd946fa8bcf725/comments", "author": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3a33eb1f9803da21460b675f2452b2784d9f63b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3a33eb1f9803da21460b675f2452b2784d9f63b", "html_url": "https://github.com/rust-lang/rust/commit/d3a33eb1f9803da21460b675f2452b2784d9f63b"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "26302d0ecf2b15507568c8b2378d6426a25e6a02", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa863caebe74710d119662894ecd946fa8bcf725/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa863caebe74710d119662894ecd946fa8bcf725/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=aa863caebe74710d119662894ecd946fa8bcf725", "patch": "@@ -41,17 +41,17 @@ pub use crate::result::Result::{self, Err, Ok};\n pub use core::prelude::v1::{\n     asm, assert, cfg, column, compile_error, concat, concat_idents, env, file, format_args,\n     format_args_nl, global_asm, include, include_bytes, include_str, line, llvm_asm, log_syntax,\n-    module_path, option_env, stringify, trace_macros,\n+    module_path, option_env, stringify, trace_macros, Clone, Copy, Debug, Default, Eq, Hash, Ord,\n+    PartialEq, PartialOrd,\n };\n \n-// FIXME: Attribute and derive macros are not documented because for them rustdoc generates\n+// FIXME: Attribute and internal derive macros are not documented because for them rustdoc generates\n // dead links which fail link checker testing.\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow(deprecated)]\n #[doc(hidden)]\n pub use core::prelude::v1::{\n-    bench, global_allocator, test, test_case, Clone, Copy, Debug, Default, Eq, Hash, Ord,\n-    PartialEq, PartialOrd, RustcDecodable, RustcEncodable,\n+    bench, global_allocator, test, test_case, RustcDecodable, RustcEncodable,\n };\n \n #[unstable("}, {"sha": "beb2c09fecceab320daf3960f5fdde69f674c863", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa863caebe74710d119662894ecd946fa8bcf725/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa863caebe74710d119662894ecd946fa8bcf725/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=aa863caebe74710d119662894ecd946fa8bcf725", "patch": "@@ -169,7 +169,17 @@ crate fn record_extern_fqn(cx: &DocContext<'_>, did: DefId, kind: clean::TypeKin\n         if !s.is_empty() { Some(s) } else { None }\n     });\n     let fqn = if let clean::TypeKind::Macro = kind {\n-        vec![crate_name, relative.last().expect(\"relative was empty\")]\n+        // Check to see if it is a macro 2.0 or built-in macro\n+        if matches!(\n+            cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())),\n+            LoadedMacro::MacroDef(def, _)\n+                if matches!(&def.kind, ast::ItemKind::MacroDef(def)\n+                    if !def.macro_rules)\n+        ) {\n+            once(crate_name).chain(relative).collect()\n+        } else {\n+            vec![crate_name, relative.last().expect(\"relative was empty\")]\n+        }\n     } else {\n         once(crate_name).chain(relative).collect()\n     };"}, {"sha": "1e78a01404815eccdba2d127a4c2056fa0122e67", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aa863caebe74710d119662894ecd946fa8bcf725/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa863caebe74710d119662894ecd946fa8bcf725/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=aa863caebe74710d119662894ecd946fa8bcf725", "patch": "@@ -73,16 +73,15 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // In the case of macros 2.0 (`pub macro`), and for built-in `derive`s or attributes as\n         // well (_e.g._, `Copy`), these are wrongly bundled in there too, so we need to fix that by\n         // moving them back to their correct locations.\n-        krate.exported_macros.iter().for_each(|def| {\n-            let visit_macro = || self.visit_local_macro(def, None);\n+        'exported_macros: for def in krate.exported_macros {\n             // The `def` of a macro in `exported_macros` should correspond to either:\n             //  - a `#[macro-export] macro_rules!` macro,\n             //  - a built-in `derive` (or attribute) macro such as the ones in `::core`,\n             //  - a `pub macro`.\n             // Only the last two need to be fixed, thus:\n             if def.ast.macro_rules {\n-                top_level_module.macros.push(visit_macro());\n-                return;\n+                top_level_module.macros.push((def, None));\n+                continue 'exported_macros;\n             }\n             let tcx = self.cx.tcx;\n             /* Because of #77828 we cannot do the simpler:\n@@ -104,7 +103,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         // `fn f() { pub macro m() {} }`\n                         // then the item is not accessible, and should thus act as if it didn't\n                         // exist (unless \"associated macros\" (inside an `impl`) were a thing\u2026).\n-                        return;\n+                        continue 'exported_macros;\n                     }\n                 };\n                 cur_mod = cur_mod\n@@ -113,8 +112,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     .find(|module| module.name == Some(path_segment_ty_ns))\n                     .unwrap();\n             }\n-            cur_mod.macros.push(visit_macro());\n-        });\n+            cur_mod.macros.push((def, None));\n+        }\n \n         self.cx.renderinfo.get_mut().exact_paths = self.exact_paths;\n "}]}