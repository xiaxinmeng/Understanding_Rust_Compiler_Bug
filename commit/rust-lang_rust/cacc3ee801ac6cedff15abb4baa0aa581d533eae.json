{"sha": "cacc3ee801ac6cedff15abb4baa0aa581d533eae", "node_id": "C_kwDOAAsO6NoAKGNhY2MzZWU4MDFhYzZjZWRmZjE1YWJiNGJhYTBhYTU4MWQ1MzNlYWU", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-08-28T21:48:30Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-10-18T16:35:42Z"}, "message": "Normalize obligations for closure confirmation", "tree": {"sha": "ed0266b2bf396bf3a0a2bc0076fe0deb07f192ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed0266b2bf396bf3a0a2bc0076fe0deb07f192ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cacc3ee801ac6cedff15abb4baa0aa581d533eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cacc3ee801ac6cedff15abb4baa0aa581d533eae", "html_url": "https://github.com/rust-lang/rust/commit/cacc3ee801ac6cedff15abb4baa0aa581d533eae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cacc3ee801ac6cedff15abb4baa0aa581d533eae/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "347d503333a12087f3bf885e4de13f70abdc4018", "url": "https://api.github.com/repos/rust-lang/rust/commits/347d503333a12087f3bf885e4de13f70abdc4018", "html_url": "https://github.com/rust-lang/rust/commit/347d503333a12087f3bf885e4de13f70abdc4018"}], "stats": {"total": 350, "additions": 263, "deletions": 87}, "files": [{"sha": "742005e245f9d160ed91387e209975e1f1ddf0da", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -744,6 +744,7 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(print_def_path(did, substs));\n                     if !substs.as_closure().is_valid() {\n                         p!(\" closure_substs=(unavailable)\");\n+                        p!(write(\" substs={:?}\", substs));\n                     } else {\n                         p!(\" closure_kind_ty=\", print(substs.as_closure().kind_ty()));\n                         p!("}, {"sha": "b8c66931cbe52ef093ce8cfb2629d29f72ec7268", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -1734,7 +1734,7 @@ fn confirm_callable_candidate<'cx, 'tcx>(\n         ty: ret_type,\n     });\n \n-    confirm_param_env_candidate(selcx, obligation, predicate, false)\n+    confirm_param_env_candidate(selcx, obligation, predicate, true)\n }\n \n fn confirm_param_env_candidate<'cx, 'tcx>(\n@@ -1754,8 +1754,18 @@ fn confirm_param_env_candidate<'cx, 'tcx>(\n     );\n \n     let cache_projection = cache_entry.projection_ty;\n-    let obligation_projection = obligation.predicate;\n     let mut nested_obligations = Vec::new();\n+    let obligation_projection = obligation.predicate;\n+    let obligation_projection = ensure_sufficient_stack(|| {\n+        normalize_with_depth_to(\n+            selcx,\n+            obligation.param_env,\n+            obligation.cause.clone(),\n+            obligation.recursion_depth + 1,\n+            obligation_projection,\n+            &mut nested_obligations,\n+        )\n+    });\n     let cache_projection = if potentially_unnormalized_candidate {\n         ensure_sufficient_stack(|| {\n             normalize_with_depth_to(\n@@ -1771,6 +1781,8 @@ fn confirm_param_env_candidate<'cx, 'tcx>(\n         cache_projection\n     };\n \n+    debug!(?cache_projection, ?obligation_projection);\n+\n     match infcx.at(cause, param_env).eq(cache_projection, obligation_projection) {\n         Ok(InferOk { value: _, obligations }) => {\n             nested_obligations.extend(obligations);"}, {"sha": "a4e2e5028333b5252dee3884310a2c513c8d67af", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -620,23 +620,37 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             _ => bug!(\"closure candidate for non-closure {:?}\", obligation),\n         };\n \n+        let obligation_predicate = obligation.predicate.to_poly_trait_ref();\n+        let Normalized { value: obligation_predicate, mut obligations } =\n+            ensure_sufficient_stack(|| {\n+                normalize_with_depth(\n+                    self,\n+                    obligation.param_env,\n+                    obligation.cause.clone(),\n+                    obligation.recursion_depth + 1,\n+                    obligation_predicate,\n+                )\n+            });\n+\n         let trait_ref = self.closure_trait_ref_unnormalized(obligation, substs);\n-        let Normalized { value: trait_ref, mut obligations } = ensure_sufficient_stack(|| {\n-            normalize_with_depth(\n-                self,\n-                obligation.param_env,\n-                obligation.cause.clone(),\n-                obligation.recursion_depth + 1,\n-                trait_ref,\n-            )\n-        });\n+        let Normalized { value: trait_ref, obligations: trait_ref_obligations } =\n+            ensure_sufficient_stack(|| {\n+                normalize_with_depth(\n+                    self,\n+                    obligation.param_env,\n+                    obligation.cause.clone(),\n+                    obligation.recursion_depth + 1,\n+                    trait_ref,\n+                )\n+            });\n \n         debug!(?closure_def_id, ?trait_ref, ?obligations, \"confirm closure candidate obligations\");\n \n+        obligations.extend(trait_ref_obligations);\n         obligations.extend(self.confirm_poly_trait_refs(\n             obligation.cause.clone(),\n             obligation.param_env,\n-            obligation.predicate.to_poly_trait_ref(),\n+            obligation_predicate,\n             trait_ref,\n         )?);\n "}, {"sha": "36d6450c9a2f0ceb45e23cf0fa4599f3019e9bf2", "filename": "src/test/ui/closures/print/closure-print-generic-trim-off-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -9,7 +9,7 @@ LL |         let c1 : () = c;\n    |                  expected due to this\n    |\n    = note: expected unit type `()`\n-                found closure `[mod1::f<T>::{closure#0} closure_substs=(unavailable)]`\n+                found closure `[mod1::f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#25t, extern \"rust-call\" fn(()), _#26t]]`\n help: use parentheses to call this closure\n    |\n LL |         let c1 : () = c();"}, {"sha": "91926f233d394d83762aa3472334b10838e306c0", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -9,7 +9,7 @@ LL |         let c1 : () = c;\n    |                  expected due to this\n    |\n    = note: expected unit type `()`\n-                found closure `[f<T>::{closure#0} closure_substs=(unavailable)]`\n+                found closure `[f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#25t, extern \"rust-call\" fn(()), _#26t]]`\n help: use parentheses to call this closure\n    |\n LL |         let c1 : () = c();"}, {"sha": "083717b333408e46d342f4e6a07b20d72058db87", "filename": "src/test/ui/closures/print/closure-print-verbose.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -7,7 +7,7 @@ LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n    |              expected due to this\n    |\n    = note: expected fn pointer `fn(u8) -> u8`\n-                 found closure `[main::{closure#0} closure_substs=(unavailable)]`\n+                 found closure `[main::{closure#0} closure_substs=(unavailable) substs=[i8, extern \"rust-call\" fn((u8,)) -> u8, _#6t]]`\n note: closures can only be coerced to `fn` types if they do not capture any variables\n   --> $DIR/closure-print-verbose.rs:10:39\n    |"}, {"sha": "3b26a180152cb0761c02a88f243d73856ab41b0c", "filename": "src/test/ui/generic-associated-types/issue-88459.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88459.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88459.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88459.rs?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+trait Trait {\n+    type Assoc<'a>;\n+}\n+\n+fn f<T: Trait>(_: T, _: impl Fn(T::Assoc<'_>)) {}\n+\n+struct Type;\n+\n+impl Trait for Type {\n+    type Assoc<'a> = ();\n+}\n+\n+fn main() {\n+    f(Type, |_|());\n+}"}, {"sha": "f255eac0c4b2caf5730bf459140b3ada39983d25", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-44005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-44005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-44005.rs?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n pub trait Foo<'a> {\n     type Bar;\n     fn foo(&'a self) -> Self::Bar;\n@@ -24,7 +26,6 @@ pub fn catalyst(x: &i32) {\n \n pub fn broken<F: Fn(&i32)>(x: &i32, f: F) {\n     uncallable(x, |y| f(y));\n-    //~^ type mismatch\n }\n \n fn main() {}", "previous_filename": "src/test/ui/issues/issue-44005.rs"}, {"sha": "7c3c72e04cb781d32091328e33310422e858e473", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.rs?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -77,7 +77,7 @@ where P: Execute + 'static {\n }\n \n fn main() {\n-    task(annotate( //~ type mismatch\n+    task(annotate(\n         //~^ the size\n         //~^^ the trait bound\n         Annotate::<RefMutFamily<usize>>::new(),"}, {"sha": "01b14660b6531aa98a6f17f289e90aba6d632ebb", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.stderr", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -1,29 +1,3 @@\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/issue-62529-1.rs:80:10\n-   |\n-LL |       task(annotate(\n-   |  _____----_^\n-   | |     |\n-   | |     required by a bound introduced by this call\n-LL | |\n-LL | |\n-LL | |         Annotate::<RefMutFamily<usize>>::new(),\n-LL | |         |value: &mut usize| {\n-   | |         ------------------- found signature of `for<'r> fn(&'r mut usize) -> _`\n-LL | |             *value = 2;\n-LL | |         }\n-LL | |     ));\n-   | |_____^ expected signature of `for<'r> fn(<RefMutFamily<usize> as FamilyLt<'r>>::Out) -> _`\n-   |\n-note: required by a bound in `annotate`\n-  --> $DIR/issue-62529-1.rs:44:8\n-   |\n-LL | fn annotate<F, Q>(_q: Annotate<Q>, func: F) -> impl Execute + 'static\n-   |    -------- required by a bound in this\n-LL | where\n-LL |     F: for<'r> FnOnce(<<Q as Inject>::I as FamilyLt<'r>>::Out) + 'static,\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `annotate`\n-\n error[E0277]: the size for values of type `impl Execute` cannot be known at compilation time\n   --> $DIR/issue-62529-1.rs:80:10\n    |\n@@ -73,7 +47,6 @@ LL | fn task<P>(processor: P) -> Task\n LL | where P: Execute + 'static {\n    |          ^^^^^^^ required by this bound in `task`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0277, E0631.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3ced40230f012033de6307c24ac43f1001144b1a", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-70120.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-70120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-70120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-70120.rs?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n pub trait MyTrait<'a> {\n     type Output: 'a;\n     fn gimme_value(&self) -> Self::Output;\n@@ -23,7 +25,7 @@ where\n \n fn main() {\n     let struc = MyStruct;\n-    meow(struc, |foo| { //~ type mismatch\n+    meow(struc, |foo| {\n         println!(\"{:?}\", foo);\n     })\n }"}, {"sha": "efc956888ee5ad9fa5a4fa283f64a7922070828e", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-70120.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/347d503333a12087f3bf885e4de13f70abdc4018/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-70120.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/347d503333a12087f3bf885e4de13f70abdc4018/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-70120.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-70120.stderr?ref=347d503333a12087f3bf885e4de13f70abdc4018", "patch": "@@ -1,20 +0,0 @@\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/issue-70120.rs:26:5\n-   |\n-LL |     meow(struc, |foo| {\n-   |     ^^^^        ----- found signature of `for<'r> fn(&'r usize) -> _`\n-   |     |\n-   |     expected signature of `for<'any2> fn(<MyStruct as MyTrait<'any2>>::Output) -> _`\n-   |\n-note: required by a bound in `meow`\n-  --> $DIR/issue-70120.rs:18:8\n-   |\n-LL | fn meow<T, F>(t: T, f: F)\n-   |    ---- required by a bound in this\n-...\n-LL |     F: for<'any2> Fn(<T as MyTrait<'any2>>::Output),\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `meow`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0631`."}, {"sha": "119cec1fa95bfd98b7d6475665193a9722a68f69", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.migrate.stderr", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -0,0 +1,92 @@\n+error: implementation of `Parser` is not general enough\n+  --> $DIR/issue-71955.rs:52:5\n+   |\n+LL |     foo(bar, \"string\", |s| s.len() == 5);\n+   |     ^^^ implementation of `Parser` is not general enough\n+   |\n+   = note: `for<'a> fn(&'a str) -> (&'a str, &'a str) {bar}` must implement `Parser<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+\n+error: implementation of `Parser` is not general enough\n+  --> $DIR/issue-71955.rs:52:5\n+   |\n+LL |     foo(bar, \"string\", |s| s.len() == 5);\n+   |     ^^^ implementation of `Parser` is not general enough\n+   |\n+   = note: `for<'a> fn(&'a str) -> (&'a str, &'a str) {bar}` must implement `Parser<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+\n+error: implementation of `Parser` is not general enough\n+  --> $DIR/issue-71955.rs:52:5\n+   |\n+LL |     foo(bar, \"string\", |s| s.len() == 5);\n+   |     ^^^ implementation of `Parser` is not general enough\n+   |\n+   = note: `for<'a> fn(&'a str) -> (&'a str, &'a str) {bar}` must implement `Parser<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+\n+error: implementation of `Parser` is not general enough\n+  --> $DIR/issue-71955.rs:52:5\n+   |\n+LL |     foo(bar, \"string\", |s| s.len() == 5);\n+   |     ^^^ implementation of `Parser` is not general enough\n+   |\n+   = note: `for<'a> fn(&'a str) -> (&'a str, &'a str) {bar}` must implement `Parser<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+\n+error: implementation of `Parser` is not general enough\n+  --> $DIR/issue-71955.rs:52:5\n+   |\n+LL |     foo(bar, \"string\", |s| s.len() == 5);\n+   |     ^^^ implementation of `Parser` is not general enough\n+   |\n+   = note: `for<'a> fn(&'a str) -> (&'a str, &'a str) {bar}` must implement `Parser<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+\n+error: implementation of `Parser` is not general enough\n+  --> $DIR/issue-71955.rs:58:5\n+   |\n+LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n+   |     ^^^ implementation of `Parser` is not general enough\n+   |\n+   = note: `for<'a> fn(&'a str) -> (&'a str, Wrapper<'a>) {baz}` must implement `Parser<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+\n+error: implementation of `Parser` is not general enough\n+  --> $DIR/issue-71955.rs:58:5\n+   |\n+LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n+   |     ^^^ implementation of `Parser` is not general enough\n+   |\n+   = note: `for<'a> fn(&'a str) -> (&'a str, Wrapper<'a>) {baz}` must implement `Parser<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+\n+error: implementation of `Parser` is not general enough\n+  --> $DIR/issue-71955.rs:58:5\n+   |\n+LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n+   |     ^^^ implementation of `Parser` is not general enough\n+   |\n+   = note: `for<'a> fn(&'a str) -> (&'a str, Wrapper<'a>) {baz}` must implement `Parser<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+\n+error: implementation of `Parser` is not general enough\n+  --> $DIR/issue-71955.rs:58:5\n+   |\n+LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n+   |     ^^^ implementation of `Parser` is not general enough\n+   |\n+   = note: `for<'a> fn(&'a str) -> (&'a str, Wrapper<'a>) {baz}` must implement `Parser<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+\n+error: implementation of `Parser` is not general enough\n+  --> $DIR/issue-71955.rs:58:5\n+   |\n+LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n+   |     ^^^ implementation of `Parser` is not general enough\n+   |\n+   = note: `for<'a> fn(&'a str) -> (&'a str, Wrapper<'a>) {baz}` must implement `Parser<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "69ab446bc7a34eacc72b37a770f7f1b31ad758ae", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.nll.stderr?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -0,0 +1,8 @@\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-71955.rs:42:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "95e3b3d4e1b886db61e612a4ef32ef7fd67dbadc", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -0,0 +1,64 @@\n+// ignore-compare-mode-nll\n+// revisions: migrate nll\n+// [nll]compile-flags: -Zborrowck=mir\n+// check-fail\n+\n+#![feature(rustc_attrs)]\n+\n+trait Parser<'s> {\n+    type Output;\n+\n+    fn call(&self, input: &'s str) -> (&'s str, Self::Output);\n+}\n+\n+impl<'s, F, T> Parser<'s> for F\n+where F: Fn(&'s str) -> (&'s str, T) {\n+    type Output = T;\n+    fn call(&self, input: &'s str) -> (&'s str, T) {\n+        self(input)\n+    }\n+}\n+\n+fn foo<F1, F2>(\n+    f1: F1,\n+    base: &'static str,\n+    f2: F2\n+)\n+where\n+    F1: for<'a> Parser<'a>,\n+    F2: FnOnce(&<F1 as Parser>::Output) -> bool\n+{\n+    let s: String = base.to_owned();\n+    let str_ref = s.as_ref();\n+    let (remaining, produced) = f1.call(str_ref);\n+    assert!(f2(&produced));\n+    assert_eq!(remaining.len(), 0);\n+}\n+\n+struct Wrapper<'a>(&'a str);\n+\n+// Because nll currently succeeds and migrate doesn't\n+#[rustc_error]\n+fn main() {\n+    //[nll]~^ fatal\n+    fn bar<'a>(s: &'a str) -> (&'a str, &'a str) {\n+        (&s[..1], &s[..])\n+    }\n+\n+    fn baz<'a>(s: &'a str) -> (&'a str, Wrapper<'a>) {\n+        (&s[..1], Wrapper(&s[..]))\n+    }\n+\n+    foo(bar, \"string\", |s| s.len() == 5);\n+    //[migrate]~^ ERROR implementation of `Parser` is not general enough\n+    //[migrate]~| ERROR implementation of `Parser` is not general enough\n+    //[migrate]~| ERROR implementation of `Parser` is not general enough\n+    //[migrate]~| ERROR implementation of `Parser` is not general enough\n+    //[migrate]~| ERROR implementation of `Parser` is not general enough\n+    foo(baz, \"string\", |s| s.0.len() == 5);\n+    //[migrate]~^ ERROR implementation of `Parser` is not general enough\n+    //[migrate]~| ERROR implementation of `Parser` is not general enough\n+    //[migrate]~| ERROR implementation of `Parser` is not general enough\n+    //[migrate]~| ERROR implementation of `Parser` is not general enough\n+    //[migrate]~| ERROR implementation of `Parser` is not general enough\n+}"}, {"sha": "93ccb42684c5e6e858dfc0e745f13d4044102ddb", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-74261.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-74261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cacc3ee801ac6cedff15abb4baa0aa581d533eae/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-74261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-74261.rs?ref=cacc3ee801ac6cedff15abb4baa0aa581d533eae", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+\n+use std::marker::PhantomData;\n+\n+trait A<'a> {\n+    type B;\n+    fn b(self) -> Self::B;\n+}\n+\n+struct T;\n+struct S<'a>(PhantomData<&'a ()>);\n+\n+impl<'a> A<'a> for T {\n+    type B = S<'a>;\n+    fn b(self) -> Self::B {\n+        S(PhantomData)\n+    }\n+}\n+\n+fn s<TT, F>(t: TT, f: F)\n+where\n+    TT: for<'a> A<'a>,\n+    F: for<'a> FnOnce(<TT as A<'a>>::B)\n+{\n+    f(t.b());\n+}\n+\n+fn main() {\n+    s(T, |_| {});\n+}"}, {"sha": "307e444e69635d26c8b981168bc19562286eba19", "filename": "src/test/ui/issues/issue-44005.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/347d503333a12087f3bf885e4de13f70abdc4018/src%2Ftest%2Fui%2Fissues%2Fissue-44005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/347d503333a12087f3bf885e4de13f70abdc4018/src%2Ftest%2Fui%2Fissues%2Fissue-44005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44005.stderr?ref=347d503333a12087f3bf885e4de13f70abdc4018", "patch": "@@ -1,20 +0,0 @@\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/issue-44005.rs:26:5\n-   |\n-LL |     uncallable(x, |y| f(y));\n-   |     ^^^^^^^^^^    -------- found signature of `for<'r> fn(&'r i32) -> _`\n-   |     |\n-   |     expected signature of `for<'a> fn(<&i32 as Foo<'a>>::Bar) -> _`\n-   |\n-note: required by a bound in `uncallable`\n-  --> $DIR/issue-44005.rs:16:8\n-   |\n-LL | pub fn uncallable<T, F>(x: T, f: F)\n-   |        ---------- required by a bound in this\n-...\n-LL |     F: for<'a> Fn(<T as Foo<'a>>::Bar),\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `uncallable`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0631`."}]}