{"sha": "6d387463aa074982c8c6427a708cd9a18a6f58dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMzg3NDYzYWEwNzQ5ODJjOGM2NDI3YTcwOGNkOWExOGE2ZjU4ZGM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-05-31T07:25:34Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-05-31T07:44:37Z"}, "message": "Remove GlobalArenas and use Arena instead", "tree": {"sha": "322735e43c45c5720f665f6e423c212b8ff64541", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/322735e43c45c5720f665f6e423c212b8ff64541"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d387463aa074982c8c6427a708cd9a18a6f58dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d387463aa074982c8c6427a708cd9a18a6f58dc", "html_url": "https://github.com/rust-lang/rust/commit/6d387463aa074982c8c6427a708cd9a18a6f58dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d387463aa074982c8c6427a708cd9a18a6f58dc/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ade426ede7bca4a74bc641a12f2e7fe2cc20c47", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ade426ede7bca4a74bc641a12f2e7fe2cc20c47", "html_url": "https://github.com/rust-lang/rust/commit/3ade426ede7bca4a74bc641a12f2e7fe2cc20c47"}], "stats": {"total": 94, "additions": 33, "deletions": 61}, "files": [{"sha": "4a89bf3313b8ac9f0be72a33a94b7c2d7a9a1281", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=6d387463aa074982c8c6427a708cd9a18a6f58dc", "patch": "@@ -19,6 +19,14 @@ use smallvec::SmallVec;\n macro_rules! arena_types {\n     ($macro:path, $args:tt, $tcx:lifetime) => (\n         $macro!($args, [\n+            [] layouts: rustc::ty::layout::LayoutDetails,\n+            [] generics: rustc::ty::Generics,\n+            [] trait_def: rustc::ty::TraitDef,\n+            [] adt_def: rustc::ty::AdtDef,\n+            [] steal_mir: rustc::ty::steal::Steal<rustc::mir::Body<$tcx>>,\n+            [] mir: rustc::mir::Body<$tcx>,\n+            [] tables: rustc::ty::TypeckTables<$tcx>,\n+            [] const_allocs: rustc::mir::interpret::Allocation,\n             [] vtable_method: Option<(\n                 rustc::hir::def_id::DefId,\n                 rustc::ty::subst::SubstsRef<$tcx>"}, {"sha": "6df0323c1bf6f28eac0c33236d6b12f25fd119e6", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=6d387463aa074982c8c6427a708cd9a18a6f58dc", "patch": "@@ -42,7 +42,7 @@ rustc_queries! {\n             load_cached(tcx, id) {\n                 let generics: Option<ty::Generics> = tcx.queries.on_disk_cache\n                                                         .try_load_query_result(tcx, id);\n-                generics.map(|x| tcx.alloc_generics(x))\n+                generics.map(|x| &*tcx.arena.alloc(x))\n             }\n         }\n \n@@ -118,7 +118,7 @@ rustc_queries! {\n             load_cached(tcx, id) {\n                 let mir: Option<crate::mir::Body<'tcx>> = tcx.queries.on_disk_cache\n                                                             .try_load_query_result(tcx, id);\n-                mir.map(|x| tcx.alloc_mir(x))\n+                mir.map(|x| &*tcx.arena.alloc(x))\n             }\n         }\n     }\n@@ -353,7 +353,7 @@ rustc_queries! {\n                     .queries.on_disk_cache\n                     .try_load_query_result(tcx, id);\n \n-                typeck_tables.map(|tables| tcx.alloc_tables(tables))\n+                typeck_tables.map(|tables| &*tcx.arena.alloc(tables))\n             }\n         }\n     }"}, {"sha": "b4823db9920543bfbee5958249f9ed54d9fa757d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 46, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=6d387463aa074982c8c6427a708cd9a18a6f58dc", "patch": "@@ -53,7 +53,7 @@ use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n                                            StableHasher, StableHasherResult,\n                                            StableVec};\n-use arena::{TypedArena, SyncDroplessArena};\n+use arena::SyncDroplessArena;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::sync::{Lrc, Lock, WorkerLocal};\n use std::any::Any;\n@@ -79,37 +79,18 @@ use syntax_pos::Span;\n \n use crate::hir;\n \n-pub struct AllArenas<'tcx> {\n-    pub global: WorkerLocal<GlobalArenas<'tcx>>,\n+pub struct AllArenas {\n     pub interner: SyncDroplessArena,\n }\n \n-impl<'tcx> AllArenas<'tcx> {\n+impl AllArenas {\n     pub fn new() -> Self {\n         AllArenas {\n-            global: WorkerLocal::new(|_| GlobalArenas::default()),\n             interner: SyncDroplessArena::default(),\n         }\n     }\n }\n \n-/// Internal storage\n-#[derive(Default)]\n-pub struct GlobalArenas<'tcx> {\n-    // internings\n-    layout: TypedArena<LayoutDetails>,\n-\n-    // references\n-    generics: TypedArena<ty::Generics>,\n-    trait_def: TypedArena<ty::TraitDef>,\n-    adt_def: TypedArena<ty::AdtDef>,\n-    steal_mir: TypedArena<Steal<Body<'tcx>>>,\n-    mir: TypedArena<Body<'tcx>>,\n-    tables: TypedArena<ty::TypeckTables<'tcx>>,\n-    /// miri allocations\n-    const_allocs: TypedArena<interpret::Allocation>,\n-}\n-\n type InternedSet<'tcx, T> = Lock<FxHashMap<Interned<'tcx, T>, ()>>;\n \n pub struct CtxtInterners<'tcx> {\n@@ -1043,7 +1024,7 @@ impl<'gcx> Deref for TyCtxt<'_, 'gcx, '_> {\n \n pub struct GlobalCtxt<'tcx> {\n     pub arena: WorkerLocal<Arena<'tcx>>,\n-    global_arenas: &'tcx WorkerLocal<GlobalArenas<'tcx>>,\n+\n     global_interners: CtxtInterners<'tcx>,\n \n     cstore: &'tcx CrateStoreDyn,\n@@ -1150,24 +1131,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         &self.hir_map\n     }\n \n-    pub fn alloc_generics(self, generics: ty::Generics) -> &'gcx ty::Generics {\n-        self.global_arenas.generics.alloc(generics)\n-    }\n-\n     pub fn alloc_steal_mir(self, mir: Body<'gcx>) -> &'gcx Steal<Body<'gcx>> {\n-        self.global_arenas.steal_mir.alloc(Steal::new(mir))\n-    }\n-\n-    pub fn alloc_mir(self, mir: Body<'gcx>) -> &'gcx Body<'gcx> {\n-        self.global_arenas.mir.alloc(mir)\n-    }\n-\n-    pub fn alloc_tables(self, tables: ty::TypeckTables<'gcx>) -> &'gcx ty::TypeckTables<'gcx> {\n-        self.global_arenas.tables.alloc(tables)\n-    }\n-\n-    pub fn alloc_trait_def(self, def: ty::TraitDef) -> &'gcx ty::TraitDef {\n-        self.global_arenas.trait_def.alloc(def)\n+        self.arena.alloc(Steal::new(mir))\n     }\n \n     pub fn alloc_adt_def(self,\n@@ -1177,12 +1142,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                          repr: ReprOptions)\n                          -> &'gcx ty::AdtDef {\n         let def = ty::AdtDef::new(self, did, kind, variants, repr);\n-        self.global_arenas.adt_def.alloc(def)\n+        self.arena.alloc(def)\n     }\n \n     pub fn intern_const_alloc(self, alloc: Allocation) -> &'gcx Allocation {\n         self.allocation_interner.borrow_mut().intern(alloc, |alloc| {\n-            self.global_arenas.const_allocs.alloc(alloc)\n+            self.arena.alloc(alloc)\n         })\n     }\n \n@@ -1196,13 +1161,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn intern_stability(self, stab: attr::Stability) -> &'gcx attr::Stability {\n         self.stability_interner.borrow_mut().intern(stab, |stab| {\n-            self.global_interners.arena.alloc(stab)\n+            self.arena.alloc(stab)\n         })\n     }\n \n     pub fn intern_layout(self, layout: LayoutDetails) -> &'gcx LayoutDetails {\n         self.layout_interner.borrow_mut().intern(layout, |layout| {\n-            self.global_arenas.layout.alloc(layout)\n+            self.arena.alloc(layout)\n         })\n     }\n \n@@ -1250,7 +1215,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         cstore: &'tcx CrateStoreDyn,\n         local_providers: ty::query::Providers<'tcx>,\n         extern_providers: ty::query::Providers<'tcx>,\n-        arenas: &'tcx AllArenas<'tcx>,\n+        arenas: &'tcx AllArenas,\n         resolutions: ty::Resolutions,\n         hir: hir_map::Map<'tcx>,\n         on_disk_query_result_cache: query::OnDiskCache<'tcx>,\n@@ -1319,7 +1284,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             sess: s,\n             cstore,\n             arena: WorkerLocal::new(|_| Arena::default()),\n-            global_arenas: &arenas.global,\n             global_interners: interners,\n             dep_graph,\n             common,"}, {"sha": "094e1d05aeb77cc7df48015ecaa37b93f9e35004", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6d387463aa074982c8c6427a708cd9a18a6f58dc", "patch": "@@ -75,7 +75,7 @@ pub use self::sty::TyKind::*;\n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n \n-pub use self::context::{TyCtxt, FreeRegionInfo, GlobalArenas, AllArenas, tls, keep_local};\n+pub use self::context::{TyCtxt, FreeRegionInfo, AllArenas, tls, keep_local};\n pub use self::context::{Lift, TypeckTables, CtxtInterners, GlobalCtxt};\n pub use self::context::{\n     UserTypeAnnotationIndex, UserType, CanonicalUserType,"}, {"sha": "ea977e93cf606ad4bbe4f2174501ea0faa591ec7", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=6d387463aa074982c8c6427a708cd9a18a6f58dc", "patch": "@@ -94,15 +94,15 @@ impl IntoArgs for (CrateNum, DefId) {\n provide! { <'tcx> tcx, def_id, other, cdata,\n     type_of => { cdata.get_type(def_id.index, tcx) }\n     generics_of => {\n-        tcx.alloc_generics(cdata.get_generics(def_id.index, tcx.sess))\n+        tcx.arena.alloc(cdata.get_generics(def_id.index, tcx.sess))\n     }\n     predicates_of => { tcx.arena.alloc(cdata.get_predicates(def_id.index, tcx)) }\n     predicates_defined_on => {\n         tcx.arena.alloc(cdata.get_predicates_defined_on(def_id.index, tcx))\n     }\n     super_predicates_of => { tcx.arena.alloc(cdata.get_super_predicates(def_id.index, tcx)) }\n     trait_def => {\n-        tcx.alloc_trait_def(cdata.get_trait_def(def_id.index, tcx.sess))\n+        tcx.arena.alloc(cdata.get_trait_def(def_id.index, tcx.sess))\n     }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n     adt_destructor => {\n@@ -129,7 +129,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n             bug!(\"get_optimized_mir: missing MIR for `{:?}`\", def_id)\n         });\n \n-        let mir = tcx.alloc_mir(mir);\n+        let mir = tcx.arena.alloc(mir);\n \n         mir\n     }"}, {"sha": "0cefc8c3a92ab2ac3703033f11f865fb0805f0bf", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=6d387463aa074982c8c6427a708cd9a18a6f58dc", "patch": "@@ -125,7 +125,7 @@ fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     debug!(\"make_shim({:?}) = {:?}\", instance, result);\n \n-    tcx.alloc_mir(result)\n+    tcx.arena.alloc(result)\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]"}, {"sha": "82193d98655d6a79b19d73bcf9af49654a434a63", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=6d387463aa074982c8c6427a708cd9a18a6f58dc", "patch": "@@ -290,5 +290,5 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n         &add_call_guards::CriticalCallEdges,\n         &dump_mir::Marker(\"PreCodegen\"),\n     ]);\n-    tcx.alloc_mir(mir)\n+    tcx.arena.alloc(mir)\n }"}, {"sha": "9e60bff200e14a189f399b0b46d2d52bcbc76cda", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=6d387463aa074982c8c6427a708cd9a18a6f58dc", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             item_def_id, wbcx.tables\n         );\n \n-        self.tcx.alloc_tables(wbcx.tables)\n+        self.tcx.arena.alloc(wbcx.tables)\n     }\n }\n "}, {"sha": "c516fbc3bb940ad44460bc716da7e04cf5588e7c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6d387463aa074982c8c6427a708cd9a18a6f58dc", "patch": "@@ -763,7 +763,7 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::\n     let is_marker = tcx.has_attr(def_id, sym::marker);\n     let def_path_hash = tcx.def_path_hash(def_id);\n     let def = ty::TraitDef::new(def_id, unsafety, paren_sugar, is_auto, is_marker, def_path_hash);\n-    tcx.alloc_trait_def(def)\n+    tcx.arena.alloc(def)\n }\n \n fn has_late_bound_regions<'a, 'tcx>(\n@@ -1110,7 +1110,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n         .map(|param| (param.def_id, param.index))\n         .collect();\n \n-    tcx.alloc_generics(ty::Generics {\n+    tcx.arena.alloc(ty::Generics {\n         parent: parent_def_id,\n         parent_count,\n         params,"}, {"sha": "bf6eab4ec914852f51989d9b08aec975eca65db0", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d387463aa074982c8c6427a708cd9a18a6f58dc/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=6d387463aa074982c8c6427a708cd9a18a6f58dc", "patch": "@@ -111,7 +111,7 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n }\n \n /// Represents the #[stable], #[unstable], #[rustc_{deprecated,const_unstable}] attributes.\n-#[derive(RustcEncodable, RustcDecodable, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub feature: Symbol,\n@@ -127,7 +127,7 @@ pub struct Stability {\n }\n \n /// The available stability levels.\n-#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Clone, Debug, Eq, Hash)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue\n     Unstable { reason: Option<Symbol>, issue: u32 },\n@@ -151,7 +151,7 @@ impl StabilityLevel {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Clone, Debug, Eq, Hash)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n pub struct RustcDeprecation {\n     pub since: Symbol,\n     pub reason: Symbol,"}]}