{"sha": "2191c1db08d21aac4d3823a497e429de283e878b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOTFjMWRiMDhkMjFhYWM0ZDM4MjNhNDk3ZTQyOWRlMjgzZTg3OGI=", "commit": {"author": {"name": "Cedric", "email": "cedric.brancourt@gmail.com", "date": "2019-06-18T20:05:27Z"}, "committer": {"name": "Cedric", "email": "cedric.brancourt@gmail.com", "date": "2019-06-18T20:05:27Z"}, "message": "improve indentation", "tree": {"sha": "9ffb7a8df76fb97b81cd758e7466ae9444447911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ffb7a8df76fb97b81cd758e7466ae9444447911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2191c1db08d21aac4d3823a497e429de283e878b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2191c1db08d21aac4d3823a497e429de283e878b", "html_url": "https://github.com/rust-lang/rust/commit/2191c1db08d21aac4d3823a497e429de283e878b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2191c1db08d21aac4d3823a497e429de283e878b/comments", "author": {"login": "Electron-libre", "id": 5979, "node_id": "MDQ6VXNlcjU5Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Electron-libre", "html_url": "https://github.com/Electron-libre", "followers_url": "https://api.github.com/users/Electron-libre/followers", "following_url": "https://api.github.com/users/Electron-libre/following{/other_user}", "gists_url": "https://api.github.com/users/Electron-libre/gists{/gist_id}", "starred_url": "https://api.github.com/users/Electron-libre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Electron-libre/subscriptions", "organizations_url": "https://api.github.com/users/Electron-libre/orgs", "repos_url": "https://api.github.com/users/Electron-libre/repos", "events_url": "https://api.github.com/users/Electron-libre/events{/privacy}", "received_events_url": "https://api.github.com/users/Electron-libre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Electron-libre", "id": 5979, "node_id": "MDQ6VXNlcjU5Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Electron-libre", "html_url": "https://github.com/Electron-libre", "followers_url": "https://api.github.com/users/Electron-libre/followers", "following_url": "https://api.github.com/users/Electron-libre/following{/other_user}", "gists_url": "https://api.github.com/users/Electron-libre/gists{/gist_id}", "starred_url": "https://api.github.com/users/Electron-libre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Electron-libre/subscriptions", "organizations_url": "https://api.github.com/users/Electron-libre/orgs", "repos_url": "https://api.github.com/users/Electron-libre/repos", "events_url": "https://api.github.com/users/Electron-libre/events{/privacy}", "received_events_url": "https://api.github.com/users/Electron-libre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7ecf1c54806d0a2b614510b46d1b25c178450f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ecf1c54806d0a2b614510b46d1b25c178450f0", "html_url": "https://github.com/rust-lang/rust/commit/f7ecf1c54806d0a2b614510b46d1b25c178450f0"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "8edda805592a302b49b56631794e698944865733", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2191c1db08d21aac4d3823a497e429de283e878b/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2191c1db08d21aac4d3823a497e429de283e878b/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=2191c1db08d21aac4d3823a497e429de283e878b", "patch": "@@ -1218,17 +1218,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match variant.ctor_kind {\n             CtorKind::Fn => {\n                 err.span_label(field.ident.span, \"field does not exist\");\n-                err.span_label(\n-                    field.ident.span,\n-                    format!(\"`{adt}` is a tuple {kind_name}, use the appropriate syntax: `{adt}(/* fields */)`\", adt=ty, kind_name=kind_name)\n-                );\n+                err.span_label(field.ident.span, format!(\n+                    \"`{adt}` is a tuple {kind_name}, use the appropriate syntax: `{adt}(/* fields */)`\",\n+                    adt=ty,\n+                    kind_name=kind_name\n+                ));\n             }\n             _ => {\n                 // prevent all specified fields from being suggested\n                 let skip_fields = skip_fields.iter().map(|ref x| x.ident.as_str());\n-                if let Some(field_name) = Self::suggest_field_name(variant,\n-                                                                   &field.ident.as_str(),\n-                                                                   skip_fields.collect()) {\n+                if let Some(field_name) = Self::suggest_field_name(\n+                    variant,\n+                    &field.ident.as_str(),\n+                    skip_fields.collect()\n+                ) {\n                     err.span_suggestion(\n                         field.ident.span,\n                         \"a field with a similar name exists\",\n@@ -1239,12 +1242,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     match ty.sty {\n                         ty::Adt(adt, ..) => {\n                             if adt.is_enum() {\n-                                err.span_label(field.ident.span,\n-                                               format!(\"`{}::{}` does not have this field\",\n-                                                       ty, variant.ident));\n+                                err.span_label(field.ident.span, format!(\n+                                    \"`{}::{}` does not have this field\",\n+                                    ty,\n+                                    variant.ident\n+                                ));\n                             } else {\n-                                err.span_label(field.ident.span,\n-                                               format!(\"`{}` does not have this field\", ty));\n+                                err.span_label(field.ident.span, format!(\n+                                    \"`{}` does not have this field\",\n+                                    ty\n+                                ));\n                             }\n                             let available_field_names = self.available_field_names(variant);\n                             if !available_field_names.is_empty() {"}]}