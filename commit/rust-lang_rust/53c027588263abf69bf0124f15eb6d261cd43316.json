{"sha": "53c027588263abf69bf0124f15eb6d261cd43316", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYzAyNzU4ODI2M2FiZjY5YmYwMTI0ZjE1ZWI2ZDI2MWNkNDMzMTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-23T15:17:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-23T15:17:07Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: RalfJung <post@ralfj.de>", "tree": {"sha": "f6d39875f94fb3d058dfbf3161ef37f617073045", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6d39875f94fb3d058dfbf3161ef37f617073045"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53c027588263abf69bf0124f15eb6d261cd43316", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJccWPzCRBK7hj4Ov3rIwAAdHIIAIloV1Mr+tptFx6UjF/N7FcR\nw1BjJFZPxea35XPEsUyjBr+S5TQtvLgCx4IIgqFTBG8yvi8YfmrckWPKj/kRUp7k\nXVLnycbw2xmYasnfzlGhmUF+zowDhwjmPI/3CKLrpACGuyMtqnBTI+WGr0HdeN8G\ni3w9nQDfAXNzhksVKtivuB3Ti4sLsd5Jfx8djJ4ibbyKN4hiYToFw78UwHEF5Key\neIyB3RVHH8fEE0fuv+pdSzoKN1BtI+UEoICINJ8rP41aIk/lBf16lwjHSEE60lDn\nHhEris7+6UO3G7fSD+iF6BcJP3MNdZvtbjNMrnOGzieWJya2BiIShis3WseFqic=\n=MQg0\n-----END PGP SIGNATURE-----\n", "payload": "tree f6d39875f94fb3d058dfbf3161ef37f617073045\nparent aa4a9b0827f09efa8a06d99df6cae07b21e6729c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550935027 +0100\ncommitter GitHub <noreply@github.com> 1550935027 +0100\n\nApply suggestions from code review\n\nCo-Authored-By: RalfJung <post@ralfj.de>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53c027588263abf69bf0124f15eb6d261cd43316", "html_url": "https://github.com/rust-lang/rust/commit/53c027588263abf69bf0124f15eb6d261cd43316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53c027588263abf69bf0124f15eb6d261cd43316/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa4a9b0827f09efa8a06d99df6cae07b21e6729c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4a9b0827f09efa8a06d99df6cae07b21e6729c", "html_url": "https://github.com/rust-lang/rust/commit/aa4a9b0827f09efa8a06d99df6cae07b21e6729c"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "46ba523c7722bb86f1e6a5b84d422dd3e77e9ceb", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/53c027588263abf69bf0124f15eb6d261cd43316/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53c027588263abf69bf0124f15eb6d261cd43316/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=53c027588263abf69bf0124f15eb6d261cd43316", "patch": "@@ -1064,13 +1064,13 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n /// use std::mem::{self, MaybeUninit};\n ///\n /// let b: bool = unsafe { mem::uninitialized() }; // undefined behavior!\n-/// // equivalent code with `MaybeUninit`\n+/// // The equivalent code with `MaybeUninit`:\n /// let b: bool = unsafe { MaybeUninit::uninitialized().into_initialized() }; // undefined behavior!\n /// ```\n ///\n /// Moreover, uninitialized memory is special in that the compiler knows that\n /// it does not have a fixed value. This makes it undefined behavior to have\n-/// uninitialized data in a variable even if that variable has integer type,\n+/// uninitialized data in a variable even if that variable has an integer type,\n /// which otherwise can hold any bit pattern:\n ///\n /// ```rust,no_run\n@@ -1084,7 +1084,7 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n /// (Notice that the rules around uninitialized integers are not finalized yet, but\n /// until they are, it is advisable to avoid them.)\n ///\n-/// `MaybeUninit` serves to enable unsafe code to deal with uninitialized data.\n+/// `MaybeUninit<T>` serves to enable unsafe code to deal with uninitialized data.\n /// It is a signal to the compiler indicating that the data here might *not*\n /// be initialized:\n ///\n@@ -1107,7 +1107,7 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n #[derive(Copy)]\n-// NOTE after stabilizing `MaybeUninit` proceed to deprecate `mem::uninitialized`\n+// NOTE after stabilizing `MaybeUninit` proceed to deprecate `mem::uninitialized`.\n pub union MaybeUninit<T> {\n     uninit: (),\n     value: ManuallyDrop<T>,\n@@ -1123,7 +1123,7 @@ impl<T: Copy> Clone for MaybeUninit<T> {\n }\n \n impl<T> MaybeUninit<T> {\n-    /// Create a new `MaybeUninit` initialized with the given value.\n+    /// Create a new `MaybeUninit<T>` initialized with the given value.\n     ///\n     /// Note that dropping a `MaybeUninit` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n@@ -1149,13 +1149,13 @@ impl<T> MaybeUninit<T> {\n     /// but `MaybeUninit<&'static i32>::zeroed()` is not because references must not\n     /// be null.\n     ///\n-    /// Note that dropping a `MaybeUninit` will never call `T`'s drop code.\n+    /// Note that dropping a `MaybeUninit<T>` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     ///\n     /// # Example\n     ///\n-    /// Correct usage of this method: initializing a struct with zero, where all\n-    /// fields of the struct can hold 0 as a valid value.\n+    /// Correct usage of this function: initializing a struct with zero, where all\n+    /// fields of the struct can hold the bit-pattern 0 as a valid value.\n     ///\n     /// ```rust\n     /// #![feature(maybe_uninit)]\n@@ -1166,7 +1166,7 @@ impl<T> MaybeUninit<T> {\n     /// assert_eq!(x, (0, false));\n     /// ```\n     ///\n-    /// *Incorrect* usage of this method: initializing a struct with zero, where some fields\n+    /// *Incorrect* usage of this function: initializing a struct with zero, where some fields\n     /// cannot hold 0 as a valid value.\n     ///\n     /// ```rust,no_run\n@@ -1177,7 +1177,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let x = MaybeUninit::<(u8, NotZero)>::zeroed();\n     /// let x = unsafe { x.into_initialized() };\n-    /// // We create a `NotZero` (inside a pair) that does not have a valid discriminant.\n+    /// // Inside a pair, we create a `NotZero` that does not have a valid discriminant.\n     /// // This is undefined behavior.\n     /// ```\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n@@ -1203,7 +1203,7 @@ impl<T> MaybeUninit<T> {\n     }\n \n     /// Gets a pointer to the contained value. Reading from this pointer or turning it\n-    /// into a reference is undefined behavior unless the `MaybeUninit` is initialized.\n+    /// into a reference is undefined behavior unless the `MaybeUninit<T>` is initialized.\n     ///\n     /// # Examples\n     ///\n@@ -1237,7 +1237,7 @@ impl<T> MaybeUninit<T> {\n     }\n \n     /// Gets a mutable pointer to the contained value. Reading from this pointer or turning it\n-    /// into a reference is undefined behavior unless the `MaybeUninit` is initialized.\n+    /// into a reference is undefined behavior unless the `MaybeUninit<T>` is initialized.\n     ///\n     /// # Examples\n     ///\n@@ -1249,7 +1249,8 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninitialized();\n     /// x.set(vec![0,1,2]);\n-    /// // Create a reference into the `MaybeUninit`. This is okay because we initialized it.\n+    /// // Create a reference into the `MaybeUninit<Vec<u32>>`.\n+    /// // This is okay because we initialized it.\n     /// let x_vec = unsafe { &mut *x.as_mut_ptr() };\n     /// x_vec.push(3);\n     /// assert_eq!(x_vec.len(), 4);\n@@ -1303,7 +1304,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let x = MaybeUninit::<Vec<u32>>::uninitialized();\n     /// let x_init = unsafe { x.into_initialized() };\n-    /// // `x` had not been initialized yet, so this last line causes undefined behavior.\n+    /// // `x` had not been initialized yet, so this last line caused undefined behavior.\n     /// ```\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n@@ -1312,16 +1313,16 @@ impl<T> MaybeUninit<T> {\n         ManuallyDrop::into_inner(self.value)\n     }\n \n-    /// Reads the value from the `MaybeUninit` container. The resulting `T` is subject\n+    /// Reads the value from the `MaybeUninit<T>` container. The resulting `T` is subject\n     /// to the usual drop handling.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n-    /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n+    /// It is up to the caller to guarantee that the `MaybeUninit<T>` really is in an initialized\n     /// state. Calling this when the content is not yet fully initialized causes undefined\n     /// behavior.\n     ///\n-    /// Moreover, this leaves a copy of the same data behind in the `MaybeUninit`. When using\n+    /// Moreover, this leaves a copy of the same data behind in the `MaybeUninit<T>`. When using\n     /// multiple copies of the data (by calling `read_initialized` multiple times, or first\n     /// calling `read_initialized` and then [`into_initialized`]), it is your responsibility\n     /// to ensure that that data may indeed be duplicated."}]}