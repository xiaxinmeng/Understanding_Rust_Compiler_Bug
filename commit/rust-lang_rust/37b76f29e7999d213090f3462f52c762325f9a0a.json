{"sha": "37b76f29e7999d213090f3462f52c762325f9a0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3Yjc2ZjI5ZTc5OTlkMjEzMDkwZjM0NjJmNTJjNzYyMzI1ZjlhMGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-13T22:23:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-13T22:23:32Z"}, "message": "Rollup merge of #59796 - oli-obk:const_arg_ice, r=eddyb\n\nRetire `IsNotConst` naming\n\nThis naming scheme caused a lot of confusion lately (including ICEs) due to misrefactored code. Also clean up the initialization code for said flag.\n\nr? @eddyb\n\nprevious discussions: https://github.com/rust-lang/rust/pull/58784#issuecomment-468717439 https://github.com/rust-lang/rust/pull/58403#discussion_r265936336", "tree": {"sha": "2b9bdc90f7d6171fcb8648b8db26ca8a8267a984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b9bdc90f7d6171fcb8648b8db26ca8a8267a984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37b76f29e7999d213090f3462f52c762325f9a0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcsmFkCRBK7hj4Ov3rIwAAdHIIAFml02EIjBNFMjBcgmxO6lbC\nwvvz6nO2JcdgZf0GUoIDWR11wmUC6kL5InW5HVaUBTFIYObZW8zE2ecZ5eentgOf\n4LWzVgrWniMQ/a6D37fyd4k5XPIC61642NxFdiwZYWmZGruI6dVbkzJf0C1ZEhWS\nOFQkYAJhrg9ysSdAERnQlpN1iBGWGN/Lv6n/5hrWQMT5A6B6bXCqq1+X+KcrlbaF\n6/zLKy9poOEeoddPi2mom+RuJjK4HLCHLOwe8I7eM1z8Fkvgz6Y6rUt4AstxzREQ\nZ2sCbAgmyjXgQVE5DZiGNf007sQiRKOX5UkNti945Q9oB+IhFtKdoCpDbvlZvyA=\n=RyAa\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b9bdc90f7d6171fcb8648b8db26ca8a8267a984\nparent d34ebb46602145e45895392da94cc593793cd9c0\nparent f10394ae0c5f2f73d1eba688c2cf5832eb38bc96\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555194212 +0200\ncommitter GitHub <noreply@github.com> 1555194212 +0200\n\nRollup merge of #59796 - oli-obk:const_arg_ice, r=eddyb\n\nRetire `IsNotConst` naming\n\nThis naming scheme caused a lot of confusion lately (including ICEs) due to misrefactored code. Also clean up the initialization code for said flag.\n\nr? @eddyb\n\nprevious discussions: https://github.com/rust-lang/rust/pull/58784#issuecomment-468717439 https://github.com/rust-lang/rust/pull/58403#discussion_r265936336\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37b76f29e7999d213090f3462f52c762325f9a0a", "html_url": "https://github.com/rust-lang/rust/commit/37b76f29e7999d213090f3462f52c762325f9a0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37b76f29e7999d213090f3462f52c762325f9a0a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34ebb46602145e45895392da94cc593793cd9c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34ebb46602145e45895392da94cc593793cd9c0", "html_url": "https://github.com/rust-lang/rust/commit/d34ebb46602145e45895392da94cc593793cd9c0"}, {"sha": "f10394ae0c5f2f73d1eba688c2cf5832eb38bc96", "url": "https://api.github.com/repos/rust-lang/rust/commits/f10394ae0c5f2f73d1eba688c2cf5832eb38bc96", "html_url": "https://github.com/rust-lang/rust/commit/f10394ae0c5f2f73d1eba688c2cf5832eb38bc96"}], "stats": {"total": 96, "additions": 51, "deletions": 45}, "files": [{"sha": "ddf963c7fa9b5bef357f0ab5c1bf176f3471f542", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37b76f29e7999d213090f3462f52c762325f9a0a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b76f29e7999d213090f3462f52c762325f9a0a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=37b76f29e7999d213090f3462f52c762325f9a0a", "patch": "@@ -44,8 +44,8 @@ pub enum TempState {\n impl TempState {\n     pub fn is_promotable(&self) -> bool {\n         debug!(\"is_promotable: self={:?}\", self);\n-        if let TempState::Defined { uses, .. } = *self {\n-            uses > 0\n+        if let TempState::Defined { .. } = *self {\n+            true\n         } else {\n             false\n         }\n@@ -80,9 +80,14 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n                    context: PlaceContext<'tcx>,\n                    location: Location) {\n         debug!(\"visit_local: index={:?} context={:?} location={:?}\", index, context, location);\n-        // We're only interested in temporaries\n-        if self.mir.local_kind(index) != LocalKind::Temp {\n-            return;\n+        // We're only interested in temporaries and the return place\n+        match self.mir.local_kind(index) {\n+            | LocalKind::Temp\n+            | LocalKind::ReturnPointer\n+            => {},\n+            | LocalKind::Arg\n+            | LocalKind::Var\n+            => return,\n         }\n \n         // Ignore drops, if the temp gets promoted,\n@@ -101,7 +106,6 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n         if *temp == TempState::Undefined {\n             match context {\n                 PlaceContext::MutatingUse(MutatingUseContext::Store) |\n-                PlaceContext::MutatingUse(MutatingUseContext::AsmOutput) |\n                 PlaceContext::MutatingUse(MutatingUseContext::Call) => {\n                     *temp = TempState::Defined {\n                         location,"}, {"sha": "3154f8e89e3945921d3928b09a2bab840fc73a83", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 41, "deletions": 39, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/37b76f29e7999d213090f3462f52c762325f9a0a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b76f29e7999d213090f3462f52c762325f9a0a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=37b76f29e7999d213090f3462f52c762325f9a0a", "patch": "@@ -365,11 +365,11 @@ impl Qualif for NeedsDrop {\n     }\n }\n \n-// Not constant at all - non-`const fn` calls, asm!,\n+// Not promotable at all - non-`const fn` calls, asm!,\n // pointer comparisons, ptr-to-int casts, etc.\n-struct IsNotConst;\n+struct IsNotPromotable;\n \n-impl Qualif for IsNotConst {\n+impl Qualif for IsNotPromotable {\n     const IDX: usize = 2;\n \n     fn in_static(cx: &ConstCx<'_, 'tcx>, static_: &Static<'tcx>) -> bool {\n@@ -508,13 +508,17 @@ impl Qualif for IsNotConst {\n     }\n }\n \n-// Refers to temporaries which cannot be promoted as\n-// promote_consts decided they weren't simple enough.\n-// FIXME(oli-obk,eddyb): Remove this flag entirely and\n-// solely process this information via `IsNotConst`.\n-struct IsNotPromotable;\n-\n-impl Qualif for IsNotPromotable {\n+/// Refers to temporaries which cannot be promoted *implicitly*.\n+/// Explicit promotion happens e.g. for constant arguments declared via `rustc_args_required_const`.\n+/// Inside a const context all constness rules\n+/// apply, so implicit promotion simply has to follow the regular constant rules (modulo interior\n+/// mutability or `Drop` rules which are handled `HasMutInterior` and `NeedsDrop` respectively).\n+/// Implicit promotion inside regular functions does not happen if `const fn` calls are involved,\n+/// as the call may be perfectly alright at runtime, but fail at compile time e.g. due to addresses\n+/// being compared inside the function.\n+struct IsNotImplicitlyPromotable;\n+\n+impl Qualif for IsNotImplicitlyPromotable {\n     const IDX: usize = 3;\n \n     fn in_call(\n@@ -550,33 +554,36 @@ macro_rules! static_assert_seq_qualifs {\n         static_assert!(SEQ_QUALIFS: QUALIF_COUNT == $i);\n     };\n }\n-static_assert_seq_qualifs!(0 => HasMutInterior, NeedsDrop, IsNotConst, IsNotPromotable);\n+static_assert_seq_qualifs!(\n+    0 => HasMutInterior, NeedsDrop, IsNotPromotable, IsNotImplicitlyPromotable\n+);\n \n impl ConstCx<'_, 'tcx> {\n     fn qualifs_in_any_value_of_ty(&self, ty: Ty<'tcx>) -> PerQualif<bool> {\n         let mut qualifs = PerQualif::default();\n         qualifs[HasMutInterior] = HasMutInterior::in_any_value_of_ty(self, ty).unwrap_or(false);\n         qualifs[NeedsDrop] = NeedsDrop::in_any_value_of_ty(self, ty).unwrap_or(false);\n-        qualifs[IsNotConst] = IsNotConst::in_any_value_of_ty(self, ty).unwrap_or(false);\n         qualifs[IsNotPromotable] = IsNotPromotable::in_any_value_of_ty(self, ty).unwrap_or(false);\n+        qualifs[IsNotImplicitlyPromotable] =\n+            IsNotImplicitlyPromotable::in_any_value_of_ty(self, ty).unwrap_or(false);\n         qualifs\n     }\n \n     fn qualifs_in_local(&self, local: Local) -> PerQualif<bool> {\n         let mut qualifs = PerQualif::default();\n         qualifs[HasMutInterior] = HasMutInterior::in_local(self, local);\n         qualifs[NeedsDrop] = NeedsDrop::in_local(self, local);\n-        qualifs[IsNotConst] = IsNotConst::in_local(self, local);\n         qualifs[IsNotPromotable] = IsNotPromotable::in_local(self, local);\n+        qualifs[IsNotImplicitlyPromotable] = IsNotImplicitlyPromotable::in_local(self, local);\n         qualifs\n     }\n \n     fn qualifs_in_value(&self, source: ValueSource<'_, 'tcx>) -> PerQualif<bool> {\n         let mut qualifs = PerQualif::default();\n         qualifs[HasMutInterior] = HasMutInterior::in_value(self, source);\n         qualifs[NeedsDrop] = NeedsDrop::in_value(self, source);\n-        qualifs[IsNotConst] = IsNotConst::in_value(self, source);\n         qualifs[IsNotPromotable] = IsNotPromotable::in_value(self, source);\n+        qualifs[IsNotImplicitlyPromotable] = IsNotImplicitlyPromotable::in_value(self, source);\n         qualifs\n     }\n }\n@@ -631,26 +638,21 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n         };\n \n         for (local, decl) in mir.local_decls.iter_enumerated() {\n-            match mir.local_kind(local) {\n-                LocalKind::Arg => {\n-                    let qualifs = cx.qualifs_in_any_value_of_ty(decl.ty);\n-                    for (per_local, qualif) in &mut cx.per_local.as_mut().zip(qualifs).0 {\n-                        if *qualif {\n-                            per_local.insert(local);\n-                        }\n+            if let LocalKind::Arg = mir.local_kind(local) {\n+                let qualifs = cx.qualifs_in_any_value_of_ty(decl.ty);\n+                for (per_local, qualif) in &mut cx.per_local.as_mut().zip(qualifs).0 {\n+                    if *qualif {\n+                        per_local.insert(local);\n                     }\n-                    cx.per_local[IsNotConst].insert(local);\n                 }\n-\n-                LocalKind::Var if mode == Mode::Fn => {\n-                    cx.per_local[IsNotConst].insert(local);\n-                }\n-\n-                LocalKind::Temp if !temps[local].is_promotable() => {\n-                    cx.per_local[IsNotConst].insert(local);\n-                }\n-\n-                _ => {}\n+            }\n+            if !temps[local].is_promotable() {\n+                cx.per_local[IsNotPromotable].insert(local);\n+            }\n+            if let LocalKind::Var = mir.local_kind(local) {\n+                // Sanity check to prevent implicit and explicit promotion of\n+                // named locals\n+                assert!(cx.per_local[IsNotPromotable].contains(local));\n             }\n         }\n \n@@ -698,11 +700,11 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             // the borrowed place is disallowed from being borrowed,\n             // due to either a mutable borrow (with some exceptions),\n             // or an shared borrow of a value with interior mutability.\n-            // Then `HasMutInterior` is replaced with `IsNotConst`,\n+            // Then `HasMutInterior` is replaced with `IsNotPromotable`,\n             // to avoid duplicate errors (e.g. from reborrowing).\n             if qualifs[HasMutInterior] {\n                 qualifs[HasMutInterior] = false;\n-                qualifs[IsNotConst] = true;\n+                qualifs[IsNotPromotable] = true;\n \n                 if self.mode != Mode::Fn {\n                     if let BorrowKind::Mut { .. } = kind {\n@@ -817,15 +819,15 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             }\n         }\n \n-        // Ensure the `IsNotConst` qualification is preserved.\n+        // Ensure the `IsNotPromotable` qualification is preserved.\n         // NOTE(eddyb) this is actually unnecessary right now, as\n         // we never replace the local's qualif, but we might in\n         // the future, and so it serves to catch changes that unset\n         // important bits (in which case, asserting `contains` could\n         // be replaced with calling `insert` to re-set the bit).\n         if kind == LocalKind::Temp {\n             if !self.temp_promotion_state[index].is_promotable() {\n-                assert!(self.cx.per_local[IsNotConst].contains(index));\n+                assert!(self.cx.per_local[IsNotPromotable].contains(index));\n             }\n         }\n     }\n@@ -911,7 +913,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n \n         // Account for errors in consts by using the\n         // conservative type qualification instead.\n-        if qualifs[IsNotConst] {\n+        if qualifs[IsNotPromotable] {\n             qualifs = self.qualifs_in_any_value_of_ty(mir.return_ty());\n         }\n \n@@ -1326,7 +1328,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     // which happens even without the user requesting it.\n                     // We can error out with a hard error if the argument is not\n                     // constant here.\n-                    if !IsNotConst::in_operand(self, arg) {\n+                    if !IsNotPromotable::in_operand(self, arg) {\n                         debug!(\"visit_terminator_kind: candidate={:?}\", candidate);\n                         self.promotion_candidates.push(candidate);\n                     } else {\n@@ -1444,7 +1446,7 @@ fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     if mir.return_ty().references_error() {\n         tcx.sess.delay_span_bug(mir.span, \"mir_const_qualif: Mir had errors\");\n-        return (1 << IsNotConst::IDX, Lrc::new(BitSet::new_empty(0)));\n+        return (1 << IsNotPromotable::IDX, Lrc::new(BitSet::new_empty(0)));\n     }\n \n     Checker::new(tcx, def_id, mir, Mode::Const).check_const()"}]}