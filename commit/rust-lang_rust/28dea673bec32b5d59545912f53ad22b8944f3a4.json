{"sha": "28dea673bec32b5d59545912f53ad22b8944f3a4", "node_id": "C_kwDOAAsO6NoAKDI4ZGVhNjczYmVjMzJiNWQ1OTU0NTkxMmY1M2FkMjJiODk0NGYzYTQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-29T12:33:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-29T12:33:06Z"}, "message": "rustup", "tree": {"sha": "8bd7641328f4ad97edaadad718f2072760340c2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bd7641328f4ad97edaadad718f2072760340c2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28dea673bec32b5d59545912f53ad22b8944f3a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28dea673bec32b5d59545912f53ad22b8944f3a4", "html_url": "https://github.com/rust-lang/rust/commit/28dea673bec32b5d59545912f53ad22b8944f3a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28dea673bec32b5d59545912f53ad22b8944f3a4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b1cc72feab7e5e15d9808c855e1a2ade9057ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b1cc72feab7e5e15d9808c855e1a2ade9057ec", "html_url": "https://github.com/rust-lang/rust/commit/29b1cc72feab7e5e15d9808c855e1a2ade9057ec"}], "stats": {"total": 148, "additions": 73, "deletions": 75}, "files": [{"sha": "4f24d29e34b48fd8df294d7d86e98989a6347795", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28dea673bec32b5d59545912f53ad22b8944f3a4/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/28dea673bec32b5d59545912f53ad22b8944f3a4/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=28dea673bec32b5d59545912f53ad22b8944f3a4", "patch": "@@ -1 +1 @@\n-7f08d04d60d03e1a52dae61ce6aa50996898702b\n+493c960a3e6cdd2e2fbe8b6ea130fadea05f1ab0"}, {"sha": "95252a11342942caefada0c31553f147eb6b3a0e", "filename": "src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28dea673bec32b5d59545912f53ad22b8944f3a4/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dea673bec32b5d59545912f53ad22b8944f3a4/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=28dea673bec32b5d59545912f53ad22b8944f3a4", "patch": "@@ -107,6 +107,10 @@ fn prune_stacktrace<'mir, 'tcx>(\n             // bug in the Rust runtime, we don't prune away every frame.\n             let has_local_frame = stacktrace.iter().any(|frame| ecx.machine.is_local(frame));\n             if has_local_frame {\n+                // Remove all frames marked with `caller_location` -- that attribute indicates we\n+                // usually want to point at the caller, not them.\n+                stacktrace.retain(|frame| !frame.instance.def.requires_caller_location(*ecx.tcx));\n+\n                 // This is part of the logic that `std` uses to select the relevant part of a\n                 // backtrace. But here, we only look for __rust_begin_short_backtrace, not\n                 // __rust_end_short_backtrace because the end symbol comes from a call to the default"}, {"sha": "fa5a6e9c273e58d7a5a2e410825df44f8098e66e", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/28dea673bec32b5d59545912f53ad22b8944f3a4/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dea673bec32b5d59545912f53ad22b8944f3a4/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=28dea673bec32b5d59545912f53ad22b8944f3a4", "patch": "@@ -864,95 +864,95 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // Atomic operations\n-            \"atomic_load\" => this.atomic_load(args, dest, AtomicReadOp::SeqCst)?,\n+            \"atomic_load_seqcst\" => this.atomic_load(args, dest, AtomicReadOp::SeqCst)?,\n             \"atomic_load_relaxed\" => this.atomic_load(args, dest, AtomicReadOp::Relaxed)?,\n-            \"atomic_load_acq\" => this.atomic_load(args, dest, AtomicReadOp::Acquire)?,\n+            \"atomic_load_acquire\" => this.atomic_load(args, dest, AtomicReadOp::Acquire)?,\n \n-            \"atomic_store\" => this.atomic_store(args, AtomicWriteOp::SeqCst)?,\n+            \"atomic_store_seqcst\" => this.atomic_store(args, AtomicWriteOp::SeqCst)?,\n             \"atomic_store_relaxed\" => this.atomic_store(args, AtomicWriteOp::Relaxed)?,\n-            \"atomic_store_rel\" => this.atomic_store(args, AtomicWriteOp::Release)?,\n+            \"atomic_store_release\" => this.atomic_store(args, AtomicWriteOp::Release)?,\n \n-            \"atomic_fence_acq\" => this.atomic_fence(args, AtomicFenceOp::Acquire)?,\n-            \"atomic_fence_rel\" => this.atomic_fence(args, AtomicFenceOp::Release)?,\n+            \"atomic_fence_acquire\" => this.atomic_fence(args, AtomicFenceOp::Acquire)?,\n+            \"atomic_fence_release\" => this.atomic_fence(args, AtomicFenceOp::Release)?,\n             \"atomic_fence_acqrel\" => this.atomic_fence(args, AtomicFenceOp::AcqRel)?,\n-            \"atomic_fence\" => this.atomic_fence(args, AtomicFenceOp::SeqCst)?,\n+            \"atomic_fence_seqcst\" => this.atomic_fence(args, AtomicFenceOp::SeqCst)?,\n \n-            \"atomic_singlethreadfence_acq\" => this.compiler_fence(args, AtomicFenceOp::Acquire)?,\n-            \"atomic_singlethreadfence_rel\" => this.compiler_fence(args, AtomicFenceOp::Release)?,\n+            \"atomic_singlethreadfence_acquire\" => this.compiler_fence(args, AtomicFenceOp::Acquire)?,\n+            \"atomic_singlethreadfence_release\" => this.compiler_fence(args, AtomicFenceOp::Release)?,\n             \"atomic_singlethreadfence_acqrel\" =>\n                 this.compiler_fence(args, AtomicFenceOp::AcqRel)?,\n-            \"atomic_singlethreadfence\" => this.compiler_fence(args, AtomicFenceOp::SeqCst)?,\n+            \"atomic_singlethreadfence_seqcst\" => this.compiler_fence(args, AtomicFenceOp::SeqCst)?,\n \n-            \"atomic_xchg\" => this.atomic_exchange(args, dest, AtomicRwOp::SeqCst)?,\n-            \"atomic_xchg_acq\" => this.atomic_exchange(args, dest, AtomicRwOp::Acquire)?,\n-            \"atomic_xchg_rel\" => this.atomic_exchange(args, dest, AtomicRwOp::Release)?,\n+            \"atomic_xchg_seqcst\" => this.atomic_exchange(args, dest, AtomicRwOp::SeqCst)?,\n+            \"atomic_xchg_acquire\" => this.atomic_exchange(args, dest, AtomicRwOp::Acquire)?,\n+            \"atomic_xchg_release\" => this.atomic_exchange(args, dest, AtomicRwOp::Release)?,\n             \"atomic_xchg_acqrel\" => this.atomic_exchange(args, dest, AtomicRwOp::AcqRel)?,\n             \"atomic_xchg_relaxed\" => this.atomic_exchange(args, dest, AtomicRwOp::Relaxed)?,\n \n             #[rustfmt::skip]\n-            \"atomic_cxchg\" =>\n+            \"atomic_cxchg_seqcst_seqcst\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::SeqCst, AtomicReadOp::SeqCst)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchg_acq\" =>\n+            \"atomic_cxchg_acquire_acquire\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::Acquire, AtomicReadOp::Acquire)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchg_rel\" =>\n+            \"atomic_cxchg_release_relaxed\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::Release, AtomicReadOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchg_acqrel\" =>\n+            \"atomic_cxchg_acqrel_acquire\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::AcqRel, AtomicReadOp::Acquire)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchg_relaxed\" =>\n+            \"atomic_cxchg_relaxed_relaxed\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::Relaxed, AtomicReadOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchg_acq_failrelaxed\" =>\n+            \"atomic_cxchg_acquire_relaxed\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::Acquire, AtomicReadOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchg_acqrel_failrelaxed\" =>\n+            \"atomic_cxchg_acqrel_relaxed\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::AcqRel, AtomicReadOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchg_failrelaxed\" =>\n+            \"atomic_cxchg_seqcst_relaxed\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::SeqCst, AtomicReadOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchg_failacq\" =>\n+            \"atomic_cxchg_seqcst_acquire\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOp::SeqCst, AtomicReadOp::Acquire)?,\n \n             #[rustfmt::skip]\n-            \"atomic_cxchgweak\" =>\n+            \"atomic_cxchgweak_seqcst_seqcst\" =>\n                 this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::SeqCst, AtomicReadOp::SeqCst)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchgweak_acq\" =>\n+            \"atomic_cxchgweak_acquire_acquire\" =>\n                 this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::Acquire, AtomicReadOp::Acquire)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchgweak_rel\" =>\n+            \"atomic_cxchgweak_release_relaxed\" =>\n                 this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::Release, AtomicReadOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchgweak_acqrel\" =>\n+            \"atomic_cxchgweak_acqrel_acquire\" =>\n                 this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::AcqRel, AtomicReadOp::Acquire)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchgweak_relaxed\" =>\n+            \"atomic_cxchgweak_relaxed_relaxed\" =>\n                 this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::Relaxed, AtomicReadOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchgweak_acq_failrelaxed\" =>\n+            \"atomic_cxchgweak_acquire_relaxed\" =>\n                 this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::Acquire, AtomicReadOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchgweak_acqrel_failrelaxed\" =>\n+            \"atomic_cxchgweak_acqrel_relaxed\" =>\n                 this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::AcqRel, AtomicReadOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchgweak_failrelaxed\" =>\n+            \"atomic_cxchgweak_seqcst_relaxed\" =>\n                 this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::SeqCst, AtomicReadOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_cxchgweak_failacq\" =>\n+            \"atomic_cxchgweak_seqcst_acquire\" =>\n                 this.atomic_compare_exchange_weak(args, dest, AtomicRwOp::SeqCst, AtomicReadOp::Acquire)?,\n \n             #[rustfmt::skip]\n-            \"atomic_or\" =>\n+            \"atomic_or_seqcst\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitOr, false), AtomicRwOp::SeqCst)?,\n             #[rustfmt::skip]\n-            \"atomic_or_acq\" =>\n+            \"atomic_or_acquire\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitOr, false), AtomicRwOp::Acquire)?,\n             #[rustfmt::skip]\n-            \"atomic_or_rel\" =>\n+            \"atomic_or_release\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitOr, false), AtomicRwOp::Release)?,\n             #[rustfmt::skip]\n             \"atomic_or_acqrel\" =>\n@@ -961,13 +961,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"atomic_or_relaxed\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitOr, false), AtomicRwOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_xor\" =>\n+            \"atomic_xor_seqcst\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitXor, false), AtomicRwOp::SeqCst)?,\n             #[rustfmt::skip]\n-            \"atomic_xor_acq\" =>\n+            \"atomic_xor_acquire\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitXor, false), AtomicRwOp::Acquire)?,\n             #[rustfmt::skip]\n-            \"atomic_xor_rel\" =>\n+            \"atomic_xor_release\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitXor, false), AtomicRwOp::Release)?,\n             #[rustfmt::skip]\n             \"atomic_xor_acqrel\" =>\n@@ -976,13 +976,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"atomic_xor_relaxed\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitXor, false), AtomicRwOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_and\" =>\n+            \"atomic_and_seqcst\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, false), AtomicRwOp::SeqCst)?,\n             #[rustfmt::skip]\n-            \"atomic_and_acq\" =>\n+            \"atomic_and_acquire\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, false), AtomicRwOp::Acquire)?,\n             #[rustfmt::skip]\n-            \"atomic_and_rel\" =>\n+            \"atomic_and_release\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, false), AtomicRwOp::Release)?,\n             #[rustfmt::skip]\n             \"atomic_and_acqrel\" =>\n@@ -991,13 +991,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"atomic_and_relaxed\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, false), AtomicRwOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_nand\" =>\n+            \"atomic_nand_seqcst\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, true), AtomicRwOp::SeqCst)?,\n             #[rustfmt::skip]\n-            \"atomic_nand_acq\" =>\n+            \"atomic_nand_acquire\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, true), AtomicRwOp::Acquire)?,\n             #[rustfmt::skip]\n-            \"atomic_nand_rel\" =>\n+            \"atomic_nand_release\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, true), AtomicRwOp::Release)?,\n             #[rustfmt::skip]\n             \"atomic_nand_acqrel\" =>\n@@ -1006,13 +1006,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"atomic_nand_relaxed\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::BitAnd, true), AtomicRwOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_xadd\" =>\n+            \"atomic_xadd_seqcst\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Add, false), AtomicRwOp::SeqCst)?,\n             #[rustfmt::skip]\n-            \"atomic_xadd_acq\" =>\n+            \"atomic_xadd_acquire\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Add, false), AtomicRwOp::Acquire)?,\n             #[rustfmt::skip]\n-            \"atomic_xadd_rel\" =>\n+            \"atomic_xadd_release\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Add, false), AtomicRwOp::Release)?,\n             #[rustfmt::skip]\n             \"atomic_xadd_acqrel\" =>\n@@ -1021,42 +1021,42 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"atomic_xadd_relaxed\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Add, false), AtomicRwOp::Relaxed)?,\n             #[rustfmt::skip]\n-            \"atomic_xsub\" =>\n+            \"atomic_xsub_seqcst\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Sub, false), AtomicRwOp::SeqCst)?,\n             #[rustfmt::skip]\n-            \"atomic_xsub_acq\" =>\n+            \"atomic_xsub_acquire\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Sub, false), AtomicRwOp::Acquire)?,\n             #[rustfmt::skip]\n-            \"atomic_xsub_rel\" =>\n+            \"atomic_xsub_release\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Sub, false), AtomicRwOp::Release)?,\n             #[rustfmt::skip]\n             \"atomic_xsub_acqrel\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Sub, false), AtomicRwOp::AcqRel)?,\n             #[rustfmt::skip]\n             \"atomic_xsub_relaxed\" =>\n                 this.atomic_op(args, dest, AtomicOp::MirOp(BinOp::Sub, false), AtomicRwOp::Relaxed)?,\n-            \"atomic_min\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::SeqCst)?,\n-            \"atomic_min_acq\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Acquire)?,\n-            \"atomic_min_rel\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Release)?,\n+            \"atomic_min_seqcst\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::SeqCst)?,\n+            \"atomic_min_acquire\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Acquire)?,\n+            \"atomic_min_release\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Release)?,\n             \"atomic_min_acqrel\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::AcqRel)?,\n             \"atomic_min_relaxed\" =>\n                 this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Relaxed)?,\n-            \"atomic_max\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::SeqCst)?,\n-            \"atomic_max_acq\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Acquire)?,\n-            \"atomic_max_rel\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Release)?,\n+            \"atomic_max_seqcst\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::SeqCst)?,\n+            \"atomic_max_acquire\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Acquire)?,\n+            \"atomic_max_release\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Release)?,\n             \"atomic_max_acqrel\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::AcqRel)?,\n             \"atomic_max_relaxed\" =>\n                 this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Relaxed)?,\n-            \"atomic_umin\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::SeqCst)?,\n-            \"atomic_umin_acq\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Acquire)?,\n-            \"atomic_umin_rel\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Release)?,\n+            \"atomic_umin_seqcst\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::SeqCst)?,\n+            \"atomic_umin_acquire\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Acquire)?,\n+            \"atomic_umin_release\" => this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Release)?,\n             \"atomic_umin_acqrel\" =>\n                 this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::AcqRel)?,\n             \"atomic_umin_relaxed\" =>\n                 this.atomic_op(args, dest, AtomicOp::Min, AtomicRwOp::Relaxed)?,\n-            \"atomic_umax\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::SeqCst)?,\n-            \"atomic_umax_acq\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Acquire)?,\n-            \"atomic_umax_rel\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Release)?,\n+            \"atomic_umax_seqcst\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::SeqCst)?,\n+            \"atomic_umax_acquire\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Acquire)?,\n+            \"atomic_umax_release\" => this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Release)?,\n             \"atomic_umax_acqrel\" =>\n                 this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::AcqRel)?,\n             \"atomic_umax_relaxed\" =>"}, {"sha": "5cf2f26bf1f0305c24bf1193325b4fdbff10e80b", "filename": "tests/fail/data_race/atomic_read_na_write_race1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs?ref=28dea673bec32b5d59545912f53ad22b8944f3a4", "patch": "@@ -1,7 +1,7 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n #![feature(core_intrinsics)]\n \n-use std::intrinsics::atomic_load;\n+use std::intrinsics;\n use std::sync::atomic::AtomicUsize;\n use std::thread::spawn;\n \n@@ -22,7 +22,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             //Equivalent to: (&*c.0).load(Ordering::SeqCst)\n-            atomic_load(c.0 as *mut usize) //~ ERROR Data race detected between Atomic Load on Thread(id = 2) and Write on Thread(id = 1)\n+            intrinsics::atomic_load_seqcst(c.0 as *mut usize) //~ ERROR Data race detected between Atomic Load on Thread(id = 2) and Write on Thread(id = 1)\n         });\n \n         j1.join().unwrap();"}, {"sha": "51cdb239507a57b2fed37895c455ecbb8679906e", "filename": "tests/fail/data_race/atomic_read_na_write_race1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr?ref=28dea673bec32b5d59545912f53ad22b8944f3a4", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: Data race detected between Atomic Load on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n   --> $DIR/atomic_read_na_write_race1.rs:LL:CC\n    |\n-LL |             atomic_load(c.0 as *mut usize)\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Load on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+LL |             intrinsics::atomic_load_seqcst(c.0 as *mut usize)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Load on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "c88dfd39e107213157439f6011b06f8792427859", "filename": "tests/fail/panic/double_panic.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fpanic%2Fdouble_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fpanic%2Fdouble_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fdouble_panic.stderr?ref=28dea673bec32b5d59545912f53ad22b8944f3a4", "patch": "@@ -75,7 +75,6 @@ LL |     ABORT();\n    = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n-   = note: inside `std::rt::begin_panic::<&str>` at RUSTLIB/std/src/panicking.rs:LL:CC\n note: inside `<Foo as std::ops::Drop>::drop` at RUSTLIB/std/src/panic.rs:LL:CC\n   --> $DIR/double_panic.rs:LL:CC\n    |"}, {"sha": "808fccaaeca88c2cb44f5a9e4132fdf395c12d0e", "filename": "tests/fail/panic/panic_abort1.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fpanic%2Fpanic_abort1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fpanic%2Fpanic_abort1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fpanic_abort1.stderr?ref=28dea673bec32b5d59545912f53ad22b8944f3a4", "patch": "@@ -12,7 +12,6 @@ LL |                 ABORT();\n    = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n-   = note: inside `std::rt::begin_panic::<&str>` at RUSTLIB/std/src/panicking.rs:LL:CC\n note: inside `main` at RUSTLIB/std/src/panic.rs:LL:CC\n   --> $DIR/panic_abort1.rs:LL:CC\n    |"}, {"sha": "9b86dc92f7178123a1beffd51057fbd710d91c40", "filename": "tests/fail/panic/panic_abort2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fpanic%2Fpanic_abort2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fpanic%2Fpanic_abort2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fpanic_abort2.stderr?ref=28dea673bec32b5d59545912f53ad22b8944f3a4", "patch": "@@ -13,7 +13,6 @@ LL |                 ABORT();\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n    = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::rt::panic_fmt` at RUSTLIB/core/src/panicking.rs:LL:CC\n note: inside `main` at RUSTLIB/std/src/panic.rs:LL:CC\n   --> $DIR/panic_abort2.rs:LL:CC\n    |"}, {"sha": "2bb50d55bfe428c6285c49c36aa861c19ce4441c", "filename": "tests/fail/panic/panic_abort3.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fpanic%2Fpanic_abort3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fpanic%2Fpanic_abort3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fpanic_abort3.stderr?ref=28dea673bec32b5d59545912f53ad22b8944f3a4", "patch": "@@ -13,8 +13,6 @@ LL |                 ABORT();\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n    = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::rt::panic_fmt` at RUSTLIB/core/src/panicking.rs:LL:CC\n-   = note: inside `core::panicking::panic` at RUSTLIB/core/src/panicking.rs:LL:CC\n note: inside `main` at RUSTLIB/core/src/panic.rs:LL:CC\n   --> $DIR/panic_abort3.rs:LL:CC\n    |"}, {"sha": "8ab57930161206a2f752af65f44b8184803e019e", "filename": "tests/fail/panic/panic_abort4.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fpanic%2Fpanic_abort4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Fpanic%2Fpanic_abort4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fpanic_abort4.stderr?ref=28dea673bec32b5d59545912f53ad22b8944f3a4", "patch": "@@ -13,7 +13,6 @@ LL |                 ABORT();\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n    = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::rt::panic_fmt` at RUSTLIB/core/src/panicking.rs:LL:CC\n note: inside `main` at RUSTLIB/core/src/panic.rs:LL:CC\n   --> $DIR/panic_abort4.rs:LL:CC\n    |"}, {"sha": "74dd0b415c9302b4cbe04aed8b33873d85147d87", "filename": "tests/fail/unaligned_pointers/atomic_unaligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.rs?ref=28dea673bec32b5d59545912f53ad22b8944f3a4", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let z = [0u32; 2];\n     let zptr = &z as *const _ as *const u64;\n     unsafe {\n-        ::std::intrinsics::atomic_load(zptr);\n+        ::std::intrinsics::atomic_load_seqcst(zptr);\n         //~^ERROR accessing memory with alignment 4, but alignment 8 is required\n     }\n }"}, {"sha": "e3b7f4cdbc9a77619aafdbd79c31a6a47d7323e7", "filename": "tests/fail/unaligned_pointers/atomic_unaligned.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28dea673bec32b5d59545912f53ad22b8944f3a4/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.stderr?ref=28dea673bec32b5d59545912f53ad22b8944f3a4", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: accessing memory with alignment ALIGN, but alignment ALIGN is required\n   --> $DIR/atomic_unaligned.rs:LL:CC\n    |\n-LL |         ::std::intrinsics::atomic_load(zptr);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n+LL |         ::std::intrinsics::atomic_load_seqcst(zptr);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n    |\n    = help: this usually indicates that your program performed an invalid operation and caused Undefined Behavior\n    = help: but due to `-Zmiri-symbolic-alignment-check`, alignment errors can also be false positives"}]}