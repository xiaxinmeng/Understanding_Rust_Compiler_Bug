{"sha": "a1f790c8a9018a41820447e468fb4569724ab37b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZjc5MGM4YTkwMThhNDE4MjA0NDdlNDY4ZmI0NTY5NzI0YWIzN2I=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-07-28T22:07:32Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-07-31T16:31:30Z"}, "message": "Fix clippy", "tree": {"sha": "0e6b21de924ed077aa2a5cd93e87e8a52857d085", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e6b21de924ed077aa2a5cd93e87e8a52857d085"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1f790c8a9018a41820447e468fb4569724ab37b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f790c8a9018a41820447e468fb4569724ab37b", "html_url": "https://github.com/rust-lang/rust/commit/a1f790c8a9018a41820447e468fb4569724ab37b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1f790c8a9018a41820447e468fb4569724ab37b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc", "html_url": "https://github.com/rust-lang/rust/commit/c9e45e47d54b20d6c442c6ee1bc2c192e3181fdc"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "a3a3603c4c0ee5617b86c3c2a5e63f4116cce09b", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -21,6 +21,7 @@ use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_parse::parser::ForceCollect;\n use rustc_session::parse::ParseSess;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{BytePos, FilePathMapping, MultiSpan, SourceMap, Span};\n use rustc_span::{sym, FileName, Pos};\n@@ -231,7 +232,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                     fpu.visit_expr(&body.value);\n                     lint_for_missing_headers(\n                         cx,\n-                        item.hir_id(),\n+                        item.def_id,\n                         item.span,\n                         sig,\n                         headers,\n@@ -258,7 +259,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, attrs);\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.hir_id(), item.span, sig, headers, None, None);\n+                lint_for_missing_headers(cx, item.def_id, item.span, sig, headers, None, None);\n             }\n         }\n     }\n@@ -279,7 +280,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n             fpu.visit_expr(&body.value);\n             lint_for_missing_headers(\n                 cx,\n-                item.hir_id(),\n+                item.def_id,\n                 item.span,\n                 sig,\n                 headers,\n@@ -292,14 +293,14 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n \n fn lint_for_missing_headers<'tcx>(\n     cx: &LateContext<'tcx>,\n-    hir_id: hir::HirId,\n+    def_id: LocalDefId,\n     span: impl Into<MultiSpan> + Copy,\n     sig: &hir::FnSig<'_>,\n     headers: DocHeaders,\n     body_id: Option<hir::BodyId>,\n     panic_span: Option<Span>,\n ) {\n-    if !cx.access_levels.is_exported(hir_id) {\n+    if !cx.access_levels.is_exported(def_id) {\n         return; // Private functions do not require doc comments\n     }\n     if !headers.safety && sig.header.unsafety == hir::Unsafety::Unsafe {\n@@ -321,6 +322,7 @@ fn lint_for_missing_headers<'tcx>(\n         );\n     }\n     if !headers.errors {\n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n         if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type) {\n             span_lint(\n                 cx,"}, {"sha": "174260fabd228688c47943efa52d9cae07f84481", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -297,7 +297,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n             }\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            if !(self.avoid_breaking_exported_api && cx.access_levels.is_exported(item.hir_id())) {\n+            if !(self.avoid_breaking_exported_api && cx.access_levels.is_exported(item.def_id)) {\n                 check_variant(cx, self.threshold, def, &item_name, item_name_chars, item.span);\n             }\n         }"}, {"sha": "bb4684ce38b3d7eba4b74988aa8fe5cad9ddf05f", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -71,7 +71,7 @@ impl LateLintPass<'_> for ExhaustiveItems {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         if_chain! {\n             if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n-            if cx.access_levels.is_exported(item.hir_id());\n+            if cx.access_levels.is_exported(item.def_id);\n             let attrs = cx.tcx.hir().attrs(item.hir_id());\n             if !attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {"}, {"sha": "ea6193acbe84518ade96aef8d33277b5c5bedac7", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n-use rustc_hir::def_id::DefIdSet;\n+use rustc_hir::def_id::{DefIdSet, LocalDefId};\n use rustc_hir::{self as hir, def::Res, intravisit, QPath};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::{\n@@ -22,7 +22,7 @@ pub(super) fn check_item(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n     let attrs = cx.tcx.hir().attrs(item.hir_id());\n     let attr = must_use_attr(attrs);\n     if let hir::ItemKind::Fn(ref sig, ref _generics, ref body_id) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.hir_id());\n+        let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n@@ -33,7 +33,7 @@ pub(super) fn check_item(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n                 sig.decl,\n                 cx.tcx.hir().body(*body_id),\n                 item.span,\n-                item.hir_id(),\n+                item.def_id,\n                 item.span.with_hi(sig.decl.output.span().hi()),\n                 \"this function could have a `#[must_use]` attribute\",\n             );\n@@ -43,7 +43,7 @@ pub(super) fn check_item(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n \n pub(super) fn check_impl_item(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n     if let hir::ImplItemKind::Fn(ref sig, ref body_id) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.hir_id());\n+        let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n         let attr = must_use_attr(attrs);\n@@ -55,7 +55,7 @@ pub(super) fn check_impl_item(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<\n                 sig.decl,\n                 cx.tcx.hir().body(*body_id),\n                 item.span,\n-                item.hir_id(),\n+                item.def_id,\n                 item.span.with_hi(sig.decl.output.span().hi()),\n                 \"this method could have a `#[must_use]` attribute\",\n             );\n@@ -65,7 +65,7 @@ pub(super) fn check_impl_item(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<\n \n pub(super) fn check_trait_item(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n     if let hir::TraitItemKind::Fn(ref sig, ref eid) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.hir_id());\n+        let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n \n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n@@ -80,7 +80,7 @@ pub(super) fn check_trait_item(cx: &LateContext<'tcx>, item: &'tcx hir::TraitIte\n                     sig.decl,\n                     body,\n                     item.span,\n-                    item.hir_id(),\n+                    item.def_id,\n                     item.span.with_hi(sig.decl.output.span().hi()),\n                     \"this method could have a `#[must_use]` attribute\",\n                 );\n@@ -132,7 +132,7 @@ fn check_must_use_candidate<'tcx>(\n     decl: &'tcx hir::FnDecl<'_>,\n     body: &'tcx hir::Body<'_>,\n     item_span: Span,\n-    item_id: hir::HirId,\n+    item_id: LocalDefId,\n     fn_span: Span,\n     msg: &str,\n ) {\n@@ -141,7 +141,7 @@ fn check_must_use_candidate<'tcx>(\n         || in_external_macro(cx.sess(), item_span)\n         || returns_unit(decl)\n         || !cx.access_levels.is_exported(item_id)\n-        || is_must_use_ty(cx, return_ty(cx, item_id))\n+        || is_must_use_ty(cx, return_ty(cx, cx.tcx.hir().local_def_id_to_hir_id(item_id)))\n     {\n         return;\n     }"}, {"sha": "f83789bb2199e0e2bfff2fb35eb2d64297c1e7ac", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -1,6 +1,7 @@\n use rustc_hir::{self as hir, intravisit, HirIdSet};\n use rustc_lint::LateContext;\n use rustc_middle::{hir::map::Map, ty};\n+use rustc_span::def_id::LocalDefId;\n \n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::ty::type_is_unsafe_function;\n@@ -21,13 +22,13 @@ pub(super) fn check_fn(\n         intravisit::FnKind::Closure => return,\n     };\n \n-    check_raw_ptr(cx, unsafety, decl, body, hir_id);\n+    check_raw_ptr(cx, unsafety, decl, body, cx.tcx.hir().local_def_id(hir_id));\n }\n \n pub(super) fn check_trait_item(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n     if let hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(eid)) = item.kind {\n         let body = cx.tcx.hir().body(eid);\n-        check_raw_ptr(cx, sig.header.unsafety, sig.decl, body, item.hir_id());\n+        check_raw_ptr(cx, sig.header.unsafety, sig.decl, body, item.def_id);\n     }\n }\n \n@@ -36,10 +37,10 @@ fn check_raw_ptr(\n     unsafety: hir::Unsafety,\n     decl: &'tcx hir::FnDecl<'tcx>,\n     body: &'tcx hir::Body<'tcx>,\n-    hir_id: hir::HirId,\n+    def_id: LocalDefId,\n ) {\n     let expr = &body.value;\n-    if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(hir_id) {\n+    if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(def_id) {\n         let raw_ptrs = iter_input_pats(decl, body)\n             .zip(decl.inputs.iter())\n             .filter_map(|(arg, ty)| raw_ptr_arg(arg, ty))"}, {"sha": "13863ec8381bba34f37939e66b4e3abe8cdbe40b", "filename": "clippy_lints/src/functions/result_unit_err.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -15,7 +15,7 @@ use super::RESULT_UNIT_ERR;\n \n pub(super) fn check_item(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n     if let hir::ItemKind::Fn(ref sig, ref _generics, _) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.hir_id());\n+        let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if is_public {\n             check_result_unit_err(cx, sig.decl, item.span, fn_header_span);\n@@ -25,7 +25,7 @@ pub(super) fn check_item(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n \n pub(super) fn check_impl_item(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n     if let hir::ImplItemKind::Fn(ref sig, _) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.hir_id());\n+        let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if is_public && trait_ref_of_method(cx, item.hir_id()).is_none() {\n             check_result_unit_err(cx, sig.decl, item.span, fn_header_span);\n@@ -35,7 +35,7 @@ pub(super) fn check_impl_item(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<\n \n pub(super) fn check_trait_item(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n     if let hir::TraitItemKind::Fn(ref sig, _) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.hir_id());\n+        let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if is_public {\n             check_result_unit_err(cx, sig.decl, item.span, fn_header_span);"}, {"sha": "57a826d558ea250bbf6faea9af43a8ffbc9bd3b8", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -114,7 +114,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n             }\n         }\n \n-        if !cx.access_levels.is_exported(item.hir_id()) {\n+        if !cx.access_levels.is_exported(item.def_id) {\n             return;\n         }\n "}, {"sha": "a2cbfb1a05eeaec47f6d5979995dcbd4c3383129", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n             if item.ident.name == sym::len;\n             if let ImplItemKind::Fn(sig, _) = &item.kind;\n             if sig.decl.implicit_self.has_implicit_self();\n-            if cx.access_levels.is_exported(item.hir_id());\n+            if cx.access_levels.is_exported(item.def_id);\n             if matches!(sig.decl.output, FnRetTy::Return(_));\n             if let Some(imp) = get_parent_as_impl(cx.tcx, item.hir_id());\n             if imp.of_trait.is_none();\n@@ -207,7 +207,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n         }\n     }\n \n-    if cx.access_levels.is_exported(visited_trait.hir_id())\n+    if cx.access_levels.is_exported(visited_trait.def_id)\n         && trait_items.iter().any(|i| is_named_self(cx, i, sym::len))\n     {\n         let mut current_and_super_traits = DefIdSet::default();\n@@ -331,11 +331,7 @@ fn check_for_is_empty(\n             None,\n             None,\n         ),\n-        Some(is_empty)\n-            if !cx\n-                .access_levels\n-                .is_exported(cx.tcx.hir().local_def_id_to_hir_id(is_empty.def_id.expect_local())) =>\n-        {\n+        Some(is_empty) if !cx.access_levels.is_exported(is_empty.def_id.expect_local()) => {\n             (\n                 format!(\n                     \"{} `{}` has a public `len` method, but a private `is_empty` method\","}, {"sha": "1909fabb22fe77c35785145f963935cd29fbdc8d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -1903,7 +1903,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n             then {\n                 // if this impl block implements a trait, lint in trait definition instead\n-                if !implements_trait && cx.access_levels.is_exported(impl_item.hir_id()) {\n+                if !implements_trait && cx.access_levels.is_exported(impl_item.def_id) {\n                     // check missing trait implementations\n                     for method_config in &TRAIT_METHODS {\n                         if name == method_config.method_name &&\n@@ -1935,7 +1935,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n                 if sig.decl.implicit_self.has_implicit_self()\n                     && !(self.avoid_breaking_exported_api\n-                        && cx.access_levels.is_exported(impl_item.hir_id()))\n+                        && cx.access_levels.is_exported(impl_item.def_id))\n                 {\n                     wrong_self_convention::check(\n                         cx,"}, {"sha": "977e6d966e873779cd4d72e909278e2cbced50ea", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             return;\n         }\n \n-        if !cx.access_levels.is_exported(it.hir_id()) {\n+        if !cx.access_levels.is_exported(it.def_id) {\n             return;\n         }\n         match it.kind {\n@@ -140,7 +140,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         }\n \n         // If the item being implemented is not exported, then we don't need #[inline]\n-        if !cx.access_levels.is_exported(impl_item.hir_id()) {\n+        if !cx.access_levels.is_exported(impl_item.def_id) {\n             return;\n         }\n \n@@ -155,7 +155,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.hir_id()) {\n+            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.def_id) {\n                 // If a trait is being implemented for an item, and the\n                 // trait is not exported, we don't need #[inline]\n                 return;"}, {"sha": "0ad616a39d266bf9657b6875a0c05ce793b1348e", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -99,7 +99,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                         if_chain! {\n                             if sig.decl.inputs.is_empty();\n                             if name == sym::new;\n-                            if cx.access_levels.is_reachable(id);\n+                            if cx.access_levels.is_reachable(impl_item.def_id);\n                             let self_def_id = cx.tcx.hir().local_def_id(cx.tcx.hir().get_parent_item(id));\n                             let self_ty = cx.tcx.type_of(self_def_id);\n                             if TyS::same_type(self_ty, return_ty(cx, id));"}, {"sha": "1222a95d4eaa86852021c60f6cac6bf61dd923ba", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -14,6 +14,7 @@ use rustc_hir::{BindingAnnotation, Body, FnDecl, HirId, Impl, ItemKind, MutTy, M\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span};\n use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n@@ -134,13 +135,12 @@ impl<'tcx> PassByRefOrValue {\n         }\n     }\n \n-    fn check_poly_fn(&mut self, cx: &LateContext<'tcx>, hir_id: HirId, decl: &FnDecl<'_>, span: Option<Span>) {\n-        if self.avoid_breaking_exported_api && cx.access_levels.is_exported(hir_id) {\n+    fn check_poly_fn(&mut self, cx: &LateContext<'tcx>, def_id: LocalDefId, decl: &FnDecl<'_>, span: Option<Span>) {\n+        if self.avoid_breaking_exported_api && cx.access_levels.is_exported(def_id) {\n             return;\n         }\n-        let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n \n-        let fn_sig = cx.tcx.fn_sig(fn_def_id);\n+        let fn_sig = cx.tcx.fn_sig(def_id);\n         let fn_sig = cx.tcx.erase_late_bound_regions(fn_sig);\n \n         let fn_body = cx.enclosing_body.map(|id| cx.tcx.hir().body(id));\n@@ -231,7 +231,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         if let hir::TraitItemKind::Fn(method_sig, _) = &item.kind {\n-            self.check_poly_fn(cx, item.hir_id(), &*method_sig.decl, None);\n+            self.check_poly_fn(cx, item.def_id, &*method_sig.decl, None);\n         }\n     }\n \n@@ -278,6 +278,6 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n             }\n         }\n \n-        self.check_poly_fn(cx, hir_id, decl, Some(span));\n+        self.check_poly_fn(cx, cx.tcx.hir().local_def_id(hir_id), decl, Some(span));\n     }\n }"}, {"sha": "ed2e1f90fa597a76737ddfaf9b38fc7bfd1cebc8", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -41,7 +41,7 @@ impl_lint_pass!(RedundantPubCrate => [REDUNDANT_PUB_CRATE]);\n impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if let VisibilityKind::Crate { .. } = item.vis.node {\n-            if !cx.access_levels.is_exported(item.hir_id()) {\n+            if !cx.access_levels.is_exported(item.def_id) {\n                 if let Some(false) = self.is_exported.last() {\n                     let span = item.span.with_hi(item.ident.span.hi());\n                     let descr = cx.tcx.def_kind(item.def_id).descr(item.def_id.to_def_id());\n@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n         }\n \n         if let ItemKind::Mod { .. } = item.kind {\n-            self.is_exported.push(cx.access_levels.is_exported(item.hir_id()));\n+            self.is_exported.push(cx.access_levels.is_exported(item.def_id));\n         }\n     }\n "}, {"sha": "5ca861a14bf2d121ebf180ebc893e00d790bf726", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -81,7 +81,8 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         // Abort if public function/method or closure.\n         match fn_kind {\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n-                if self.avoid_breaking_exported_api && cx.access_levels.is_exported(hir_id) {\n+                let def_id = cx.tcx.hir().local_def_id(hir_id);\n+                if self.avoid_breaking_exported_api && cx.access_levels.is_exported(def_id) {\n                     return;\n                 }\n             },"}, {"sha": "dbf335a70c83118eee6fcc88f1829ab6e6baffd8", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f790c8a9018a41820447e468fb4569724ab37b/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=a1f790c8a9018a41820447e468fb4569724ab37b", "patch": "@@ -104,7 +104,7 @@ impl LateLintPass<'_> for UpperCaseAcronyms {\n     fn check_item(&mut self, cx: &LateContext<'_>, it: &Item<'_>) {\n         // do not lint public items or in macros\n         if in_external_macro(cx.sess(), it.span)\n-            || (self.avoid_breaking_exported_api && cx.access_levels.is_exported(it.hir_id()))\n+            || (self.avoid_breaking_exported_api && cx.access_levels.is_exported(it.def_id))\n         {\n             return;\n         }"}]}