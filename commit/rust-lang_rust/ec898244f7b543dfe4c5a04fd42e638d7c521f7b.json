{"sha": "ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjODk4MjQ0ZjdiNTQzZGZlNGM1YTA0ZmQ0MmU2MzhkN2M1MjFmN2I=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-18T18:37:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-18T20:09:50Z"}, "message": "Remove seq_kind from ast::expr_vec", "tree": {"sha": "67f8f21d39c8dc25b78cb3dae72a7c3620feb383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67f8f21d39c8dc25b78cb3dae72a7c3620feb383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "html_url": "https://github.com/rust-lang/rust/commit/ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "250cc45c3bf4fc3e623e72b8b36d66a4e0fb1dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/250cc45c3bf4fc3e623e72b8b36d66a4e0fb1dcf", "html_url": "https://github.com/rust-lang/rust/commit/250cc45c3bf4fc3e623e72b8b36d66a4e0fb1dcf"}], "stats": {"total": 61, "additions": 27, "deletions": 34}, "files": [{"sha": "de6d67b46f1da6a7d29d20c9522985570c70f044", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -236,7 +236,7 @@ fn mk_test_desc_vec(cx: &test_ctxt) -> @ast::expr {\n     }\n \n     ret @{id: cx.next_node_id(),\n-          node: ast::expr_vec(descs, ast::imm, ast::sk_unique),\n+          node: ast::expr_vec(descs, ast::imm),\n           span: ast::dummy_sp()};\n }\n "}, {"sha": "6baf08d931b79aca573ad4575ca319460aba11c6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -5123,8 +5123,7 @@ fn trans_expr_out(cx: &@block_ctxt, e: &@ast::expr, output: out_method) ->\n         ret trans_call(cx, f, none::<ValueRef>, args, e.id);\n       }\n       ast::expr_cast(val, _) { ret trans_cast(cx, val, e.id); }\n-      ast::expr_vec(args, _, ast::sk_rc.) { ret trans_vec(cx, args, e.id); }\n-      ast::expr_vec(args, _, ast::sk_unique.) {\n+      ast::expr_vec(args, _) {\n         ret trans_ivec(cx, args, e.id);\n       }\n       ast::expr_rec(args, base) { ret trans_rec(cx, args, base, e.id); }"}, {"sha": "f8875f3ff7ca1facf650ce91113cf0077a724841", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -357,7 +357,7 @@ fn find_pre_post_expr(fcx: &fn_ctxt, e: @expr) {\n           _ { }\n         }\n       }\n-      expr_vec(args, _, _) { find_pre_post_exprs(fcx, args, e.id); }\n+      expr_vec(args, _) { find_pre_post_exprs(fcx, args, e.id); }\n       expr_path(p) {\n         let rslt = expr_pp(fcx.ccx, e);\n         clear_pp(rslt);"}, {"sha": "7bba52ceb6d08d63aa2977bcbf5b1885c973aee7", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -312,7 +312,7 @@ fn find_pre_post_state_expr(fcx: &fn_ctxt, pres: &prestate, e: @expr) ->\n \n \n     alt e.node {\n-      expr_vec(elts, _, _) {\n+      expr_vec(elts, _) {\n         ret find_pre_post_state_exprs(fcx, pres, e.id,\n                                       vec::init_elt(init_assign,\n                                                      vec::len(elts)),"}, {"sha": "7f3af69c2aeafca10e22e4b2836c1ff850931135", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -2181,18 +2181,12 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr,\n         }\n         write::ty_only_fixup(fcx, id, t_1);\n       }\n-      ast::expr_vec(args, mut, kind) {\n+      ast::expr_vec(args, mut) {\n         let t: ty::t = next_ty_var(fcx);\n         for e: @ast::expr in args {\n             bot |= check_expr_with(fcx, e, t);\n         }\n-        let typ;\n-        alt kind {\n-          ast::sk_rc. { typ = ty::mk_vec(tcx, {ty: t, mut: mut}); }\n-          ast::sk_unique. {\n-            typ = ty::mk_ivec(tcx, {ty: t, mut: mut});\n-          }\n-        }\n+        let typ = ty::mk_ivec(tcx, {ty: t, mut: mut});\n         write::ty_only_fixup(fcx, id, typ);\n       }\n       ast::expr_tup(elts) {"}, {"sha": "2bafc3da800cb0e3a2ec1c1f91184e433e17a4dd", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -292,7 +292,7 @@ tag seq_kind { sk_unique; sk_rc; }\n type expr = {id: node_id, node: expr_, span: span};\n \n tag expr_ {\n-    expr_vec([@expr], mutability, seq_kind);\n+    expr_vec([@expr], mutability);\n     expr_rec([field], option::t<@expr>);\n     expr_call(@expr, [@expr]);\n     expr_tup([@expr]);"}, {"sha": "13f87e044c4d6d5dfd366e27a44a0ca897f01820", "filename": "src/comp/syntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -5,7 +5,7 @@ import syntax::ast;\n fn expand_syntax_ext(cx: &ext_ctxt, sp: codemap::span, arg: @ast::expr,\n                      _body: option::t<str>) -> @ast::expr {\n     let args: [@ast::expr] = alt arg.node {\n-      ast::expr_vec(elts, _, _) { elts }\n+      ast::expr_vec(elts, _) { elts }\n       _ { cx.span_fatal(sp, \"#concat_idents requires a vector argument .\") }\n     };\n     let res: ast::ident = \"\";"}, {"sha": "50c5bda58581c9d6b08e2b59de2590172484220b", "filename": "src/comp/syntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -13,7 +13,7 @@ export expand_syntax_ext;\n fn expand_syntax_ext(cx: &ext_ctxt, sp: codemap::span, arg: @ast::expr,\n                      _body: option::t<str>) -> @ast::expr {\n     let args: [@ast::expr] = alt arg.node {\n-      ast::expr_vec(elts, _, _) { elts }\n+      ast::expr_vec(elts, _) { elts }\n       _ { cx.span_fatal(sp, \"#env requires arguments of the form `[...]`.\") }\n     };\n     if vec::len::<@ast::expr>(args) != 1u {"}, {"sha": "738b65c7d91d0c0a622dc9e880de8472f82bd080", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -18,7 +18,7 @@ export expand_syntax_ext;\n fn expand_syntax_ext(cx: &ext_ctxt, sp: span, arg: @ast::expr,\n                      _body: option::t<str>) -> @ast::expr {\n     let args: [@ast::expr] = alt arg.node {\n-      ast::expr_vec(elts, _, _) { elts }\n+      ast::expr_vec(elts, _) { elts }\n       _ { cx.span_fatal(sp, \"#fmt requires arguments of the form `[...]`.\") }\n     };\n     if vec::len::<@ast::expr>(args) == 0u {\n@@ -73,7 +73,7 @@ fn pieces_to_expr(cx: &ext_ctxt, sp: span, pieces: &[piece],\n     }\n     fn make_vec_expr(cx: &ext_ctxt, sp: span, exprs: &[@ast::expr]) ->\n        @ast::expr {\n-        let vecexpr = ast::expr_vec(exprs, ast::imm, ast::sk_unique);\n+        let vecexpr = ast::expr_vec(exprs, ast::imm);\n         ret @{id: cx.next_id(), node: vecexpr, span: sp};\n     }\n     fn make_call(cx: &ext_ctxt, sp: span, fn_path: &[ast::ident],"}, {"sha": "ce24e2605e4054c104b442eaf4ce24965da08c60", "filename": "src/comp/syntax/ext/ident_to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -6,7 +6,7 @@ import syntax::ast;\n fn expand_syntax_ext(cx: &ext_ctxt, sp: codemap::span, arg: @ast::expr,\n                      _body: option::t<str>) -> @ast::expr {\n     let args: [@ast::expr] = alt arg.node {\n-      ast::expr_vec(elts, _, _) { elts }\n+      ast::expr_vec(elts, _) { elts }\n       _ { cx.span_fatal(sp, \"#ident_to_str requires a vector argument .\") }\n     };\n     if vec::len::<@ast::expr>(args) != 1u {"}, {"sha": "6386b628744f8ee7c8a17c95cefd5122115739d1", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -449,7 +449,7 @@ fn p_t_s_rec(cx: &ext_ctxt, m: &matchable, s: &selector, b: &binders) {\n       match_expr(e) {\n         alt e.node {\n           expr_path(p_pth) { p_t_s_r_path(cx, p_pth, s, b); }\n-          expr_vec(p_elts, _, _) {\n+          expr_vec(p_elts, _) {\n             alt elts_to_ell(cx, p_elts) {\n               {pre: pre, rep: some(repeat_me), post: post} {\n                 p_t_s_r_length(cx, vec::len(pre) + vec::len(post),\n@@ -607,7 +607,7 @@ fn p_t_s_r_ellipses(cx: &ext_ctxt, repeat_me: @expr, offset: uint,\n         ret alt m {\n               match_expr(e) {\n                 alt e.node {\n-                  expr_vec(arg_elts, _, _) {\n+                  expr_vec(arg_elts, _) {\n                     let elts = ~[];\n                     let idx = offset;\n                     while idx < vec::len(arg_elts) {\n@@ -636,7 +636,7 @@ fn p_t_s_r_length(cx: &ext_ctxt, len: uint, at_least: bool, s: selector,\n         ret alt m {\n               match_expr(e) {\n                 alt e.node {\n-                  expr_vec(arg_elts, _, _) {\n+                  expr_vec(arg_elts, _) {\n                     let actual_len = vec::len(arg_elts);\n                     if (at_least && actual_len >= len) || actual_len == len {\n                         some(leaf(match_exact))\n@@ -660,7 +660,7 @@ fn p_t_s_r_actual_vector(cx: &ext_ctxt, elts: [@expr], _repeat_after: bool,\n             ret alt m {\n                   match_expr(e) {\n                     alt e.node {\n-                      expr_vec(arg_elts, _, _) {\n+                      expr_vec(arg_elts, _) {\n                         some(leaf(match_expr(arg_elts.(idx))))\n                       }\n                       _ { none }\n@@ -678,7 +678,7 @@ fn p_t_s_r_actual_vector(cx: &ext_ctxt, elts: [@expr], _repeat_after: bool,\n fn add_new_extension(cx: &ext_ctxt, sp: span, arg: @expr,\n                      _body: option::t<str>) -> base::macro_def {\n     let args: [@ast::expr] = alt arg.node {\n-      ast::expr_vec(elts, _, _) { elts }\n+      ast::expr_vec(elts, _) { elts }\n       _ {\n         cx.span_fatal(sp, \"#macro requires arguments of the form `[...]`.\")\n       }\n@@ -688,7 +688,7 @@ fn add_new_extension(cx: &ext_ctxt, sp: span, arg: @expr,\n     let clauses: [@clause] = ~[];\n     for arg: @expr in args {\n         alt arg.node {\n-          expr_vec(elts, mut, seq_kind) {\n+          expr_vec(elts, mut) {\n             if vec::len(elts) != 2u {\n                 cx.span_fatal((*arg).span,\n                               \"extension clause must consist of [\" +"}, {"sha": "5593ddb21c6b29a798188088bd3af5ceb31680e5", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -339,8 +339,8 @@ fn noop_fold_expr(e: &expr_, fld: ast_fold) -> expr_ {\n \n \n     ret alt e {\n-          expr_vec(exprs, mut, seq_kind) {\n-            expr_vec(fld.map_exprs(fld.fold_expr, exprs), mut, seq_kind)\n+          expr_vec(exprs, mut) {\n+            expr_vec(fld.map_exprs(fld.fold_expr, exprs), mut)\n           }\n           expr_rec(fields, maybe_expr) {\n             expr_rec(vec::map(fold_field, fields),"}, {"sha": "9357b11fa0315d95bc3674a2c36e02631b444ed9", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -885,7 +885,7 @@ fn parse_bottom_expr(p: &parser) -> @ast::expr {\n         let es =\n             parse_seq_to_end(token::RBRACKET, some(token::COMMA), parse_expr,\n                              p);\n-        ex = ast::expr_vec(es, mut, ast::sk_unique);\n+        ex = ast::expr_vec(es, mut);\n     } else if (p.peek() == token::POUND_LT) {\n         p.bump();\n         let ty = parse_ty(p, false);\n@@ -909,7 +909,7 @@ fn parse_bottom_expr(p: &parser) -> @ast::expr {\n             let es =\n                 parse_seq_to_end(token::RBRACKET, some(token::COMMA),\n                                  parse_expr, p);\n-            ex = ast::expr_vec(es, mut, ast::sk_unique);\n+            ex = ast::expr_vec(es, mut);\n           }\n           token::LIT_STR(s) {\n             p.bump();\n@@ -1079,7 +1079,7 @@ fn parse_syntax_ext_naked(p: &parser, lo: uint) -> @ast::expr {\n     };\n     let hi = es.span.hi;\n     let e = mk_expr(p, es.span.lo, hi,\n-                    ast::expr_vec(es.node, ast::imm, ast::sk_rc));\n+                    ast::expr_vec(es.node, ast::imm));\n     ret mk_mac_expr(p, lo, hi, ast::mac_invoc(pth, e, none));\n }\n \n@@ -1636,7 +1636,7 @@ fn stmt_ends_with_semi(stmt: &ast::stmt) -> bool {\n       }\n       ast::stmt_expr(e, _) {\n         ret alt e.node {\n-              ast::expr_vec(_, _, _) { true }\n+              ast::expr_vec(_, _) { true }\n               ast::expr_rec(_, _) { true }\n               ast::expr_tup(_) { true }\n               ast::expr_call(_, _) { true }"}, {"sha": "900b141b67fc82bb8aa0661643cbe269eaa84607", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -694,7 +694,7 @@ fn print_mac(s: &ps, m: &ast::mac) {\n         word(s.s, \"#\");\n         print_path(s, path, false);\n         alt (arg.node) {\n-          ast::expr_vec(_,_,_) {}\n+          ast::expr_vec(_,_) {}\n           _ { word(s.s, \" \"); }\n         }\n         print_expr(s, arg);\n@@ -718,7 +718,7 @@ fn print_expr(s: &ps, expr: &@ast::expr) {\n     let ann_node = node_expr(s, expr);\n     s.ann.pre(ann_node);\n     alt expr.node {\n-      ast::expr_vec(exprs, mut, kind) {\n+      ast::expr_vec(exprs, mut) {\n         ibox(s, indent_unit);\n         word(s.s, \"[\");\n         if mut == ast::mut {"}, {"sha": "f7d3832aad6c1e4a0cf86176d1ff73a216883720", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec898244f7b543dfe4c5a04fd42e638d7c521f7b/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=ec898244f7b543dfe4c5a04fd42e638d7c521f7b", "patch": "@@ -245,7 +245,7 @@ fn visit_mac<E>(m: mac, e: &E, v: &vt<E>) {\n \n fn visit_expr<E>(ex: &@expr, e: &E, v: &vt<E>) {\n     alt ex.node {\n-      expr_vec(es, _, _) { visit_exprs(es, e, v); }\n+      expr_vec(es, _) { visit_exprs(es, e, v); }\n       expr_rec(flds, base) {\n         for f: field in flds { v.visit_expr(f.node.expr, e, v); }\n         visit_expr_opt(base, e, v);"}]}