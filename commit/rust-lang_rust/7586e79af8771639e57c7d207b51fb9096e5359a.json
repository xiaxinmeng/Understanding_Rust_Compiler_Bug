{"sha": "7586e79af8771639e57c7d207b51fb9096e5359a", "node_id": "C_kwDOAAsO6NoAKDc1ODZlNzlhZjg3NzE2MzllNTdjN2QyMDdiNTFmYjkwOTZlNTM1OWE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-21T22:38:24Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-23T01:10:43Z"}, "message": "Rename some `ExtCtxt` methods.\n\nThe new names are more accurate.\n\nCo-authored-by: Scott McMurray <scottmcm@users.noreply.github.com>", "tree": {"sha": "1cd9b464b3ff8cf77d091f25a155fe75fe829f24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cd9b464b3ff8cf77d091f25a155fe75fe829f24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7586e79af8771639e57c7d207b51fb9096e5359a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7586e79af8771639e57c7d207b51fb9096e5359a", "html_url": "https://github.com/rust-lang/rust/commit/7586e79af8771639e57c7d207b51fb9096e5359a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7586e79af8771639e57c7d207b51fb9096e5359a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc80ca78b6ec2b6bba02560470347433bcd0bb3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc80ca78b6ec2b6bba02560470347433bcd0bb3c", "html_url": "https://github.com/rust-lang/rust/commit/dc80ca78b6ec2b6bba02560470347433bcd0bb3c"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "b39f35a9d4056cd147996d99637b401d18b7cf27", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7586e79af8771639e57c7d207b51fb9096e5359a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7586e79af8771639e57c7d207b51fb9096e5359a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=7586e79af8771639e57c7d207b51fb9096e5359a", "patch": "@@ -162,14 +162,13 @@ fn decodable_substructure(\n                 cx.expr_match(trait_span, cx.expr_ident(trait_span, variant), arms),\n             );\n             let lambda = cx.lambda(trait_span, vec![blkarg, variant], result);\n-            let variant_vec = cx.expr_vec(trait_span, variants);\n-            let variant_vec = cx.expr_addr_of(trait_span, variant_vec);\n+            let variant_array_ref = cx.expr_array_ref(trait_span, variants);\n             let fn_read_enum_variant_path: Vec<_> =\n                 cx.def_site_path(&[sym::rustc_serialize, sym::Decoder, sym::read_enum_variant]);\n             let result = cx.expr_call_global(\n                 trait_span,\n                 fn_read_enum_variant_path,\n-                vec![blkdecoder, variant_vec, lambda],\n+                vec![blkdecoder, variant_array_ref, lambda],\n             );\n             let fn_read_enum_path: Vec<_> =\n                 cx.def_site_path(&[sym::rustc_serialize, sym::Decoder, sym::read_enum]);"}, {"sha": "6c2ac3435444104b869d285f26056f9a8c014c15", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7586e79af8771639e57c7d207b51fb9096e5359a/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7586e79af8771639e57c7d207b51fb9096e5359a/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=7586e79af8771639e57c7d207b51fb9096e5359a", "patch": "@@ -776,7 +776,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n         // First, build up the static array which will become our precompiled\n         // format \"string\"\n-        let pieces = self.ecx.expr_vec_slice(self.fmtsp, self.str_pieces);\n+        let pieces = self.ecx.expr_array_ref(self.fmtsp, self.str_pieces);\n \n         // We need to construct a &[ArgumentV1] to pass into the fmt::Arguments\n         // constructor. In general the expressions in this slice might be\n@@ -849,7 +849,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             fmt_args.push(Context::format_arg(self.ecx, self.macsp, span, arg_ty, arg));\n         }\n \n-        let args_array = self.ecx.expr_vec(self.macsp, fmt_args);\n+        let args_array = self.ecx.expr_array(self.macsp, fmt_args);\n         let args_slice = self.ecx.expr_addr_of(\n             self.macsp,\n             if no_need_for_match {\n@@ -879,7 +879,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         } else {\n             // Build up the static array which will store our precompiled\n             // nonstandard placeholders, if there are any.\n-            let fmt = self.ecx.expr_vec_slice(self.macsp, self.pieces);\n+            let fmt = self.ecx.expr_array_ref(self.macsp, self.pieces);\n \n             let path = self.ecx.std_path(&[sym::fmt, sym::UnsafeArg, sym::new]);\n             let unsafe_arg = self.ecx.expr_call_global(self.macsp, path, Vec::new());"}, {"sha": "5cfda33491d5b7d6392cdbc0fce93d0f4d4b52af", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7586e79af8771639e57c7d207b51fb9096e5359a/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7586e79af8771639e57c7d207b51fb9096e5359a/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=7586e79af8771639e57c7d207b51fb9096e5359a", "patch": "@@ -317,7 +317,7 @@ fn mk_decls(cx: &mut ExtCtxt<'_>, macros: &[ProcMacro]) -> P<ast::Item> {\n                         proc_macro_ty_method_path(cx, custom_derive),\n                         vec![\n                             cx.expr_str(span, cd.trait_name),\n-                            cx.expr_vec_slice(\n+                            cx.expr_array_ref(\n                                 span,\n                                 cd.attrs.iter().map(|&s| cx.expr_str(span, s)).collect::<Vec<_>>(),\n                             ),\n@@ -362,7 +362,7 @@ fn mk_decls(cx: &mut ExtCtxt<'_>, macros: &[ProcMacro]) -> P<ast::Item> {\n                 ast::Mutability::Not,\n             ),\n             ast::Mutability::Not,\n-            cx.expr_vec_slice(span, decls),\n+            cx.expr_array_ref(span, decls),\n         )\n         .map(|mut i| {\n             let attr = cx.meta_word(span, sym::rustc_proc_macro_decls);"}, {"sha": "27f6ef5877a160084411dd27f75c7e506d6d4c2c", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7586e79af8771639e57c7d207b51fb9096e5359a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7586e79af8771639e57c7d207b51fb9096e5359a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=7586e79af8771639e57c7d207b51fb9096e5359a", "patch": "@@ -351,7 +351,7 @@ fn mk_tests_slice(cx: &TestCtxt<'_>, sp: Span) -> P<ast::Expr> {\n     debug!(\"building test vector from {} tests\", cx.test_cases.len());\n     let ecx = &cx.ext_cx;\n \n-    ecx.expr_vec_slice(\n+    ecx.expr_array_ref(\n         sp,\n         cx.test_cases\n             .iter()"}, {"sha": "17dae915397d61b1ab05a1def3022debaa70783b", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7586e79af8771639e57c7d207b51fb9096e5359a/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7586e79af8771639e57c7d207b51fb9096e5359a/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=7586e79af8771639e57c7d207b51fb9096e5359a", "patch": "@@ -315,12 +315,16 @@ impl<'a> ExtCtxt<'a> {\n         self.expr_lit(sp, ast::LitKind::Bool(value))\n     }\n \n-    pub fn expr_vec(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n+    /// `[expr1, expr2, ...]`\n+    pub fn expr_array(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprKind::Array(exprs))\n     }\n-    pub fn expr_vec_slice(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n-        self.expr_addr_of(sp, self.expr_vec(sp, exprs))\n+\n+    /// `&[expr1, expr2, ...]`\n+    pub fn expr_array_ref(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n+        self.expr_addr_of(sp, self.expr_array(sp, exprs))\n     }\n+\n     pub fn expr_str(&self, sp: Span, s: Symbol) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitKind::Str(s, ast::StrStyle::Cooked))\n     }"}]}