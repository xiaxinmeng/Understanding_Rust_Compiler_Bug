{"sha": "a42729a59d8874f03482275d13010456718d4ad9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MjcyOWE1OWQ4ODc0ZjAzNDgyMjc1ZDEzMDEwNDU2NzE4ZDRhZDk=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-09T18:25:10Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-09T18:26:59Z"}, "message": "Simplify crate graph creation", "tree": {"sha": "0d116d14bec312f35d6592bfef796d6ce6eba001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d116d14bec312f35d6592bfef796d6ce6eba001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a42729a59d8874f03482275d13010456718d4ad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a42729a59d8874f03482275d13010456718d4ad9", "html_url": "https://github.com/rust-lang/rust/commit/a42729a59d8874f03482275d13010456718d4ad9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a42729a59d8874f03482275d13010456718d4ad9/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9970dd316b7e6b2d198dee7318c989fb312c6f5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9970dd316b7e6b2d198dee7318c989fb312c6f5f", "html_url": "https://github.com/rust-lang/rust/commit/9970dd316b7e6b2d198dee7318c989fb312c6f5f"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "6333c15b2bba0cdd0405b13119081a28f732e6c4", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a42729a59d8874f03482275d13010456718d4ad9/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42729a59d8874f03482275d13010456718d4ad9/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=a42729a59d8874f03482275d13010456718d4ad9", "patch": "@@ -137,15 +137,6 @@ impl WorldState {\n             opts\n         };\n \n-        // Create crate graph from all the workspaces\n-        let mut crate_graph = CrateGraph::default();\n-        let mut load = |path: &std::path::Path| {\n-            // Some path from metadata will be non canonicalized, e.g. /foo/../bar/lib.rs\n-            let path = path.canonicalize().ok()?;\n-            let vfs_file = vfs.load(&path);\n-            vfs_file.map(|f| FileId(f.0))\n-        };\n-\n         let proc_macro_client = match &config.proc_macro_srv {\n             None => ProcMacroClient::dummy(),\n             Some((path, args)) => match ProcMacroClient::extern_process(path.into(), args) {\n@@ -161,19 +152,22 @@ impl WorldState {\n             },\n         };\n \n-        workspaces\n-            .iter()\n-            .map(|ws| {\n-                ws.to_crate_graph(\n-                    &default_cfg_options,\n-                    &extern_source_roots,\n-                    &proc_macro_client,\n-                    &mut load,\n-                )\n-            })\n-            .for_each(|graph| {\n-                crate_graph.extend(graph);\n-            });\n+        // Create crate graph from all the workspaces\n+        let mut crate_graph = CrateGraph::default();\n+        let mut load = |path: &Path| {\n+            // Some path from metadata will be non canonicalized, e.g. /foo/../bar/lib.rs\n+            let path = path.canonicalize().ok()?;\n+            let vfs_file = vfs.load(&path);\n+            vfs_file.map(|f| FileId(f.0))\n+        };\n+        for ws in workspaces.iter() {\n+            crate_graph.extend(ws.to_crate_graph(\n+                &default_cfg_options,\n+                &extern_source_roots,\n+                &proc_macro_client,\n+                &mut load,\n+            ));\n+        }\n         change.set_crate_graph(crate_graph);\n \n         let flycheck = config.check.as_ref().and_then(|c| create_flycheck(&workspaces, c));"}]}