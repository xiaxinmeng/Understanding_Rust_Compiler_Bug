{"sha": "f1de13382022143c5ab24758fa60541d4254316a", "node_id": "C_kwDOAAsO6NoAKGYxZGUxMzM4MjAyMjE0M2M1YWIyNDc1OGZhNjA1NDFkNDI1NDMxNmE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-27T19:55:02Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-27T19:55:02Z"}, "message": "Canonicalize rust-project.json manifest path", "tree": {"sha": "66fad909f2d545678780044bbae98216dd84c87c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66fad909f2d545678780044bbae98216dd84c87c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1de13382022143c5ab24758fa60541d4254316a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1de13382022143c5ab24758fa60541d4254316a", "html_url": "https://github.com/rust-lang/rust/commit/f1de13382022143c5ab24758fa60541d4254316a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1de13382022143c5ab24758fa60541d4254316a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "284c1741d6536be6e7d4d4d252c424b90d6f1e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/284c1741d6536be6e7d4d4d252c424b90d6f1e45", "html_url": "https://github.com/rust-lang/rust/commit/284c1741d6536be6e7d4d4d252c424b90d6f1e45"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "ac09121aedf353bb60629ed2d3c422799d4c256b", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1de13382022143c5ab24758fa60541d4254316a/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1de13382022143c5ab24758fa60541d4254316a/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=f1de13382022143c5ab24758fa60541d4254316a", "patch": "@@ -166,6 +166,11 @@ impl AbsPath {\n         AbsPathBuf::try_from(self.0.to_path_buf()).unwrap()\n     }\n \n+    /// Equivalent of [`Path::canonicalize`] for `AbsPath`.\n+    pub fn canonicalize(&self) -> Result<AbsPathBuf, std::io::Error> {\n+        Ok(self.as_ref().canonicalize()?.try_into().unwrap())\n+    }\n+\n     /// Equivalent of [`Path::strip_prefix`] for `AbsPath`.\n     ///\n     /// Returns a relative path."}, {"sha": "d6754116e6089561a08fb34a0da6a1e9831acb5f", "filename": "crates/project-model/src/manifest_path.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1de13382022143c5ab24758fa60541d4254316a/crates%2Fproject-model%2Fsrc%2Fmanifest_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1de13382022143c5ab24758fa60541d4254316a/crates%2Fproject-model%2Fsrc%2Fmanifest_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fmanifest_path.rs?ref=f1de13382022143c5ab24758fa60541d4254316a", "patch": "@@ -34,6 +34,11 @@ impl ManifestPath {\n     pub fn parent(&self) -> &AbsPath {\n         self.file.parent().unwrap()\n     }\n+\n+    /// Equivalent of [`Path::canonicalize`] for `ManifestPath`.\n+    pub fn canonicalize(&self) -> Result<ManifestPath, std::io::Error> {\n+        Ok((&**self).canonicalize()?.try_into().unwrap())\n+    }\n }\n \n impl ops::Deref for ManifestPath {"}, {"sha": "199fa1e5c2c383e18fe12e42851f7d0934e99512", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1de13382022143c5ab24758fa60541d4254316a/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1de13382022143c5ab24758fa60541d4254316a/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=f1de13382022143c5ab24758fa60541d4254316a", "patch": "@@ -4,7 +4,7 @@\n \n use std::{collections::VecDeque, fmt, fs, process::Command, sync::Arc};\n \n-use anyhow::{bail, format_err, Context, Result};\n+use anyhow::{format_err, Context, Result};\n use base_db::{\n     CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency, Edition, Env,\n     FileId, LangCrateOrigin, ProcMacroPaths, TargetLayoutLoadResult,\n@@ -154,12 +154,7 @@ impl ProjectWorkspace {\n     ) -> Result<ProjectWorkspace> {\n         let res = match manifest {\n             ProjectManifest::ProjectJson(project_json) => {\n-                let metadata = fs::symlink_metadata(&project_json).with_context(|| {\n-                    format!(\"Failed to read json file {}\", project_json.display())\n-                })?;\n-                if metadata.is_symlink() {\n-                    bail!(\"The project-json may not currently point to a symlink\");\n-                }\n+                let project_json = project_json.canonicalize()?;\n                 let file = fs::read_to_string(&project_json).with_context(|| {\n                     format!(\"Failed to read json file {}\", project_json.display())\n                 })?;"}]}