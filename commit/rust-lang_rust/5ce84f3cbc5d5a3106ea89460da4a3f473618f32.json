{"sha": "5ce84f3cbc5d5a3106ea89460da4a3f473618f32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZTg0ZjNjYmM1ZDVhMzEwNmVhODk0NjBkYTRhM2Y0NzM2MThmMzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-25T06:40:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-25T07:52:50Z"}, "message": "tweak diagnostics API", "tree": {"sha": "42b6dc5960ef5e588c9609e7c6cc4402a6c0fe22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42b6dc5960ef5e588c9609e7c6cc4402a6c0fe22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ce84f3cbc5d5a3106ea89460da4a3f473618f32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce84f3cbc5d5a3106ea89460da4a3f473618f32", "html_url": "https://github.com/rust-lang/rust/commit/5ce84f3cbc5d5a3106ea89460da4a3f473618f32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ce84f3cbc5d5a3106ea89460da4a3f473618f32/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c4a714328490d7f2626272663827fd51dfab0bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4a714328490d7f2626272663827fd51dfab0bd", "html_url": "https://github.com/rust-lang/rust/commit/4c4a714328490d7f2626272663827fd51dfab0bd"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "d6a51b8332ac244eb7f1f03efdd063bb078deeb1", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5ce84f3cbc5d5a3106ea89460da4a3f473618f32/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce84f3cbc5d5a3106ea89460da4a3f473618f32/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=5ce84f3cbc5d5a3106ea89460da4a3f473618f32", "patch": "@@ -1,9 +1,9 @@\n use std::{fmt, any::Any};\n \n-use ra_syntax::{SyntaxNodePtr, AstPtr, ast};\n+use ra_syntax::{SyntaxNodePtr, TreeArc, AstPtr, TextRange, ast, SyntaxNode};\n use relative_path::RelativePathBuf;\n \n-use crate::HirFileId;\n+use crate::{HirFileId, HirDatabase};\n \n /// Diagnostic defines hir API for errors and warnings.\n ///\n@@ -20,11 +20,18 @@ use crate::HirFileId;\n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n     fn file(&self) -> HirFileId;\n-    fn syntax_node(&self) -> SyntaxNodePtr;\n+    fn syntax_node_ptr(&self) -> SyntaxNodePtr;\n+    fn highlight_range(&self) -> TextRange {\n+        self.syntax_node_ptr().range()\n+    }\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n }\n \n impl dyn Diagnostic {\n+    pub fn syntax_node(&self, db: &impl HirDatabase) -> TreeArc<SyntaxNode> {\n+        let source_file = db.hir_parse(self.file());\n+        self.syntax_node_ptr().to_node(&source_file).to_owned()\n+    }\n     pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {\n         self.as_any().downcast_ref()\n     }\n@@ -77,7 +84,7 @@ impl Diagnostic for NoSuchField {\n     fn file(&self) -> HirFileId {\n         self.file\n     }\n-    fn syntax_node(&self) -> SyntaxNodePtr {\n+    fn syntax_node_ptr(&self) -> SyntaxNodePtr {\n         self.field.into()\n     }\n     fn as_any(&self) -> &(Any + Send + 'static) {\n@@ -99,7 +106,7 @@ impl Diagnostic for UnresolvedModule {\n     fn file(&self) -> HirFileId {\n         self.file\n     }\n-    fn syntax_node(&self) -> SyntaxNodePtr {\n+    fn syntax_node_ptr(&self) -> SyntaxNodePtr {\n         self.decl.into()\n     }\n     fn as_any(&self) -> &(Any + Send + 'static) {"}, {"sha": "aeab6b180026ff8f2e4419016b4d94f2db937643", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ce84f3cbc5d5a3106ea89460da4a3f473618f32/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce84f3cbc5d5a3106ea89460da4a3f473618f32/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=5ce84f3cbc5d5a3106ea89460da4a3f473618f32", "patch": "@@ -9,7 +9,7 @@ use relative_path::RelativePathBuf;\n use test_utils::{parse_fixture, CURSOR_MARKER, extract_offset};\n use rustc_hash::FxHashMap;\n \n-use crate::{db, HirInterner, diagnostics::DiagnosticSink, DefDatabase};\n+use crate::{db, HirInterner, diagnostics::DiagnosticSink};\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n \n@@ -79,9 +79,7 @@ impl MockDatabase {\n             module.diagnostics(\n                 self,\n                 &mut DiagnosticSink::new(|d| {\n-                    let source_file = self.hir_parse(d.file());\n-                    let syntax_node = d.syntax_node().to_node(&source_file);\n-                    buf += &format!(\"{:?}: {}\\n\", syntax_node.text(), d.message());\n+                    buf += &format!(\"{:?}: {}\\n\", d.syntax_node(self).text(), d.message());\n                 }),\n             )\n         }"}, {"sha": "11391ef02e93683470be5285aa0fc4236ae82045", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ce84f3cbc5d5a3106ea89460da4a3f473618f32/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce84f3cbc5d5a3106ea89460da4a3f473618f32/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=5ce84f3cbc5d5a3106ea89460da4a3f473618f32", "patch": "@@ -31,7 +31,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     let mut sink = DiagnosticSink::new(|d| {\n         res.borrow_mut().push(Diagnostic {\n             message: d.message(),\n-            range: d.syntax_node().range(),\n+            range: d.highlight_range(),\n             severity: Severity::Error,\n             fix: None,\n         })\n@@ -46,7 +46,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n             cursor_position: None,\n         };\n         res.borrow_mut().push(Diagnostic {\n-            range: d.syntax_node().range(),\n+            range: d.highlight_range(),\n             message: d.message(),\n             severity: Severity::Error,\n             fix: Some(fix),"}]}