{"sha": "98d68fa6beec87020b89d01c060288794dc948f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZDY4ZmE2YmVlYzg3MDIwYjg5ZDAxYzA2MDI4ODc5NGRjOTQ4ZjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-04T11:46:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-04T11:46:40Z"}, "message": "Cleanup API", "tree": {"sha": "082dd16ab466341d750586e351a111a18d8f353f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/082dd16ab466341d750586e351a111a18d8f353f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98d68fa6beec87020b89d01c060288794dc948f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98d68fa6beec87020b89d01c060288794dc948f1", "html_url": "https://github.com/rust-lang/rust/commit/98d68fa6beec87020b89d01c060288794dc948f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98d68fa6beec87020b89d01c060288794dc948f1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "072ec1a8ae7271324a907ea082521226a6f3d1d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/072ec1a8ae7271324a907ea082521226a6f3d1d4", "html_url": "https://github.com/rust-lang/rust/commit/072ec1a8ae7271324a907ea082521226a6f3d1d4"}], "stats": {"total": 104, "additions": 51, "deletions": 53}, "files": [{"sha": "5a41f702efb7eed123a527b678e243bef561ac1e", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98d68fa6beec87020b89d01c060288794dc948f1/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d68fa6beec87020b89d01c060288794dc948f1/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=98d68fa6beec87020b89d01c060288794dc948f1", "patch": "@@ -68,9 +68,7 @@ pub use crate::{\n     folding_ranges::{Fold, FoldKind},\n     hover::HoverResult,\n     inlay_hints::{InlayHint, InlayKind},\n-    references::{\n-        Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult, SearchScope,\n-    },\n+    references::{Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     ssr::SsrError,\n@@ -88,6 +86,7 @@ pub use ra_ide_db::{\n     feature_flags::FeatureFlags,\n     line_index::{LineCol, LineIndex},\n     line_index_utils::translate_offset_with_edit,\n+    search::SearchScope,\n     symbol_index::Query,\n     RootDatabase,\n };"}, {"sha": "6e2bf4ded9cda11181589430aac41a796b740359", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98d68fa6beec87020b89d01c060288794dc948f1/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d68fa6beec87020b89d01c060288794dc948f1/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=98d68fa6beec87020b89d01c060288794dc948f1", "patch": "@@ -10,11 +10,11 @@\n //! resolved to the search element definition, we get a reference.\n \n mod rename;\n-mod search_scope;\n \n use hir::Semantics;\n use ra_ide_db::{\n     defs::{classify_name, classify_name_ref, Definition},\n+    search::SearchScope,\n     RootDatabase,\n };\n use ra_prof::profile;\n@@ -28,7 +28,7 @@ use crate::{display::TryToNav, FilePosition, FileRange, NavigationTarget, RangeI\n \n pub(crate) use self::rename::rename;\n \n-pub use ra_ide_db::search::{Reference, ReferenceAccess, ReferenceKind, SearchScope};\n+pub use ra_ide_db::search::{Reference, ReferenceAccess, ReferenceKind};\n \n #[derive(Debug, Clone)]\n pub struct ReferenceSearchResult {"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "crates/ra_ide/src/references/search_scope.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/072ec1a8ae7271324a907ea082521226a6f3d1d4/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072ec1a8ae7271324a907ea082521226a6f3d1d4/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=072ec1a8ae7271324a907ea082521226a6f3d1d4", "patch": "@@ -1 +0,0 @@\n-"}, {"sha": "7bd99d4cc5c24649c62b5cbfad6cd76737a10840", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/98d68fa6beec87020b89d01c060288794dc948f1/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d68fa6beec87020b89d01c060288794dc948f1/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=98d68fa6beec87020b89d01c060288794dc948f1", "patch": "@@ -55,16 +55,58 @@ impl SearchScope {\n         SearchScope::new(std::iter::once((file, None)).collect())\n     }\n \n-    pub fn for_def(def: &Definition, db: &RootDatabase) -> SearchScope {\n+    pub fn intersection(&self, other: &SearchScope) -> SearchScope {\n+        let (mut small, mut large) = (&self.entries, &other.entries);\n+        if small.len() > large.len() {\n+            mem::swap(&mut small, &mut large)\n+        }\n+\n+        let res = small\n+            .iter()\n+            .filter_map(|(file_id, r1)| {\n+                let r2 = large.get(file_id)?;\n+                let r = intersect_ranges(*r1, *r2)?;\n+                Some((*file_id, r))\n+            })\n+            .collect();\n+\n+        return SearchScope::new(res);\n+\n+        fn intersect_ranges(\n+            r1: Option<TextRange>,\n+            r2: Option<TextRange>,\n+        ) -> Option<Option<TextRange>> {\n+            match (r1, r2) {\n+                (None, r) | (r, None) => Some(r),\n+                (Some(r1), Some(r2)) => {\n+                    let r = r1.intersection(&r2)?;\n+                    Some(Some(r))\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl IntoIterator for SearchScope {\n+    type Item = (FileId, Option<TextRange>);\n+    type IntoIter = std::collections::hash_map::IntoIter<FileId, Option<TextRange>>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        self.entries.into_iter()\n+    }\n+}\n+\n+impl Definition {\n+    fn search_scope(&self, db: &RootDatabase) -> SearchScope {\n         let _p = profile(\"search_scope\");\n-        let module = match def.module(db) {\n+        let module = match self.module(db) {\n             Some(it) => it,\n             None => return SearchScope::empty(),\n         };\n         let module_src = module.definition_source(db);\n         let file_id = module_src.file_id.original_file(db);\n \n-        if let Definition::Local(var) = def {\n+        if let Definition::Local(var) = self {\n             let range = match var.parent(db) {\n                 DefWithBody::Function(f) => f.source(db).value.syntax().text_range(),\n                 DefWithBody::Const(c) => c.source(db).value.syntax().text_range(),\n@@ -75,7 +117,7 @@ impl SearchScope {\n             return SearchScope::new(res);\n         }\n \n-        let vis = def.visibility(db).as_ref().map(|v| v.syntax().to_string()).unwrap_or_default();\n+        let vis = self.visibility(db).as_ref().map(|v| v.syntax().to_string()).unwrap_or_default();\n \n         if vis.as_str() == \"pub(super)\" {\n             if let Some(parent_module) = module.parent(db) {\n@@ -131,48 +173,6 @@ impl SearchScope {\n         SearchScope::new(res)\n     }\n \n-    pub fn intersection(&self, other: &SearchScope) -> SearchScope {\n-        let (mut small, mut large) = (&self.entries, &other.entries);\n-        if small.len() > large.len() {\n-            mem::swap(&mut small, &mut large)\n-        }\n-\n-        let res = small\n-            .iter()\n-            .filter_map(|(file_id, r1)| {\n-                let r2 = large.get(file_id)?;\n-                let r = intersect_ranges(*r1, *r2)?;\n-                Some((*file_id, r))\n-            })\n-            .collect();\n-\n-        return SearchScope::new(res);\n-\n-        fn intersect_ranges(\n-            r1: Option<TextRange>,\n-            r2: Option<TextRange>,\n-        ) -> Option<Option<TextRange>> {\n-            match (r1, r2) {\n-                (None, r) | (r, None) => Some(r),\n-                (Some(r1), Some(r2)) => {\n-                    let r = r1.intersection(&r2)?;\n-                    Some(Some(r))\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-impl IntoIterator for SearchScope {\n-    type Item = (FileId, Option<TextRange>);\n-    type IntoIter = std::collections::hash_map::IntoIter<FileId, Option<TextRange>>;\n-\n-    fn into_iter(self) -> Self::IntoIter {\n-        self.entries.into_iter()\n-    }\n-}\n-\n-impl Definition {\n     pub fn find_usages(\n         &self,\n         db: &RootDatabase,\n@@ -181,7 +181,7 @@ impl Definition {\n         let _p = profile(\"Definition::find_usages\");\n \n         let search_scope = {\n-            let base = SearchScope::for_def(self, db);\n+            let base = self.search_scope(db);\n             match search_scope {\n                 None => base,\n                 Some(scope) => base.intersection(&scope),"}]}