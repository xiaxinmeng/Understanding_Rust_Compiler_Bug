{"sha": "ea251cbd4a22c7754bb5668b9f25fc0c7b47284c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMjUxY2JkNGEyMmM3NzU0YmI1NjY4YjlmMjVmYzBjN2I0NzI4NGM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-27T19:12:50Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-27T19:12:50Z"}, "message": "Complete modules in item lists", "tree": {"sha": "5956fa2300defdc96f1ecb294db77a1705561527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5956fa2300defdc96f1ecb294db77a1705561527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea251cbd4a22c7754bb5668b9f25fc0c7b47284c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea251cbd4a22c7754bb5668b9f25fc0c7b47284c", "html_url": "https://github.com/rust-lang/rust/commit/ea251cbd4a22c7754bb5668b9f25fc0c7b47284c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea251cbd4a22c7754bb5668b9f25fc0c7b47284c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ad378fec06dae4ba2417f2a109e4759bbcf75db", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad378fec06dae4ba2417f2a109e4759bbcf75db", "html_url": "https://github.com/rust-lang/rust/commit/7ad378fec06dae4ba2417f2a109e4759bbcf75db"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "ec57aee30ef689b22b6577be8302f0392bca3a12", "filename": "crates/ide_completion/src/completions/macro_in_item_position.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea251cbd4a22c7754bb5668b9f25fc0c7b47284c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea251cbd4a22c7754bb5668b9f25fc0c7b47284c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs?ref=ea251cbd4a22c7754bb5668b9f25fc0c7b47284c", "patch": "@@ -2,6 +2,7 @@\n \n use crate::{CompletionContext, Completions};\n \n+// Ideally this should be removed and moved into `(un)qualified_path` respectively\n pub(crate) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &CompletionContext) {\n     // Show only macros in top level.\n     if !ctx.is_new_item {\n@@ -12,6 +13,10 @@ pub(crate) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &Compl\n         if let hir::ScopeDef::MacroDef(mac) = res {\n             acc.add_macro(ctx, Some(name.to_string()), mac);\n         }\n+        // FIXME: This should be done in qualified_path/unqualified_path instead?\n+        if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n+            acc.add_resolution(ctx, name.to_string(), &res);\n+        }\n     })\n }\n "}, {"sha": "7a0e1ead3ffbf5a1dd1b41e18e74d0dcc316fcd1", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ea251cbd4a22c7754bb5668b9f25fc0c7b47284c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea251cbd4a22c7754bb5668b9f25fc0c7b47284c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=ea251cbd4a22c7754bb5668b9f25fc0c7b47284c", "patch": "@@ -7,7 +7,7 @@ use syntax::AstNode;\n use crate::{CompletionContext, Completions};\n \n pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if ctx.is_path_disallowed() {\n+    if ctx.is_path_disallowed() || ctx.expects_item() {\n         return;\n     }\n     let path = match &ctx.path_qual {\n@@ -20,7 +20,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         None => return,\n     };\n     let context_module = ctx.scope.module();\n-    if ctx.expects_item() || ctx.expects_assoc_item() {\n+    if ctx.expects_assoc_item() {\n         if let PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n             let module_scope = module.scope(ctx.db, context_module);\n             for (name, def) in module_scope {\n@@ -636,6 +636,24 @@ impl MyStruct {\n         );\n     }\n \n+    #[test]\n+    #[ignore] // FIXME doesn't complete anything atm\n+    fn completes_in_item_list() {\n+        check(\n+            r#\"\n+struct MyStruct {}\n+macro_rules! foo {}\n+mod bar {}\n+\n+crate::$0\n+\"#,\n+            expect![[r#\"\n+                md bar\n+                ma foo! macro_rules! foo\n+            \"#]],\n+        )\n+    }\n+\n     #[test]\n     fn test_super_super_completion() {\n         check("}, {"sha": "c901b358b2e7966090dcd7975dca1ed4e83691a8", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ea251cbd4a22c7754bb5668b9f25fc0c7b47284c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea251cbd4a22c7754bb5668b9f25fc0c7b47284c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=ea251cbd4a22c7754bb5668b9f25fc0c7b47284c", "patch": "@@ -9,10 +9,10 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     if !ctx.is_trivial_path {\n         return;\n     }\n-    if ctx.is_path_disallowed() {\n+    if ctx.is_path_disallowed() || ctx.expects_item() {\n         return;\n     }\n-    if ctx.expects_item() || ctx.expects_assoc_item() {\n+    if ctx.expects_assoc_item() {\n         ctx.scope.process_all_names(&mut |name, def| {\n             if let ScopeDef::MacroDef(macro_def) = def {\n                 acc.add_macro(ctx, Some(name.to_string()), macro_def);\n@@ -692,4 +692,22 @@ impl MyStruct {\n             \"#]],\n         )\n     }\n+\n+    // FIXME: The completions here currently come from `macro_in_item_position`, but they shouldn't\n+    #[test]\n+    fn completes_in_item_list() {\n+        check(\n+            r#\"\n+struct MyStruct {}\n+macro_rules! foo {}\n+mod bar {}\n+\n+$0\n+\"#,\n+            expect![[r#\"\n+                md bar\n+                ma foo!(\u2026) macro_rules! foo\n+            \"#]],\n+        )\n+    }\n }"}]}