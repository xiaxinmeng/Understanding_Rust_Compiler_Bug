{"sha": "01d95558e62f40f958618292afd4abae2fb3c236", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZDk1NTU4ZTYyZjQwZjk1ODYxODI5MmFmZDRhYmFlMmZiM2MyMzY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-22T17:10:19Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-31T17:39:02Z"}, "message": "Further extract error code switch\n\nRemoves dependency on UnstableFeatures from markdown rendering", "tree": {"sha": "35367b5a621627ce976534ca1772aae50c1929d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35367b5a621627ce976534ca1772aae50c1929d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01d95558e62f40f958618292afd4abae2fb3c236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01d95558e62f40f958618292afd4abae2fb3c236", "html_url": "https://github.com/rust-lang/rust/commit/01d95558e62f40f958618292afd4abae2fb3c236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01d95558e62f40f958618292afd4abae2fb3c236/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03e34f8f816c2594238585bdca39716f4050cb69", "url": "https://api.github.com/repos/rust-lang/rust/commits/03e34f8f816c2594238585bdca39716f4050cb69", "html_url": "https://github.com/rust-lang/rust/commit/03e34f8f816c2594238585bdca39716f4050cb69"}], "stats": {"total": 154, "additions": 96, "deletions": 58}, "files": [{"sha": "67502ab8e1531f515cc73dd972fb220164a98ca1", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01d95558e62f40f958618292afd4abae2fb3c236/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d95558e62f40f958618292afd4abae2fb3c236/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=01d95558e62f40f958618292afd4abae2fb3c236", "patch": "@@ -12,7 +12,8 @@ use std::fs;\n use std::path::Path;\n use std::str;\n use errors;\n-use html::markdown::Markdown;\n+use syntax::feature_gate::UnstableFeatures;\n+use html::markdown::{ErrorCodes, Markdown};\n \n #[derive(Clone)]\n pub struct ExternalHtml {\n@@ -31,22 +32,23 @@ impl ExternalHtml {\n     pub fn load(in_header: &[String], before_content: &[String], after_content: &[String],\n                 md_before_content: &[String], md_after_content: &[String], diag: &errors::Handler)\n             -> Option<ExternalHtml> {\n+        let codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n         load_external_files(in_header, diag)\n             .and_then(|ih|\n                 load_external_files(before_content, diag)\n                     .map(|bc| (ih, bc))\n             )\n             .and_then(|(ih, bc)|\n                 load_external_files(md_before_content, diag)\n-                    .map(|m_bc| (ih, format!(\"{}{}\", bc, Markdown(&m_bc, &[]))))\n+                    .map(|m_bc| (ih, format!(\"{}{}\", bc, Markdown(&m_bc, &[], codes))))\n             )\n             .and_then(|(ih, bc)|\n                 load_external_files(after_content, diag)\n                     .map(|ac| (ih, bc, ac))\n             )\n             .and_then(|(ih, bc, ac)|\n                 load_external_files(md_after_content, diag)\n-                    .map(|m_ac| (ih, bc, format!(\"{}{}\", ac, Markdown(&m_ac, &[]))))\n+                    .map(|m_ac| (ih, bc, format!(\"{}{}\", ac, Markdown(&m_ac, &[], codes))))\n             )\n             .map(|(ih, bc, ac)|\n                 ExternalHtml {"}, {"sha": "f65211f97be58ab5cad2f66938d8f9f03219e8f9", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 54, "deletions": 27, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/01d95558e62f40f958618292afd4abae2fb3c236/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d95558e62f40f958618292afd4abae2fb3c236/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=01d95558e62f40f958618292afd4abae2fb3c236", "patch": "@@ -18,10 +18,10 @@\n //! ```\n //! #![feature(rustc_private)]\n //!\n-//! use rustdoc::html::markdown::Markdown;\n+//! use rustdoc::html::markdown::{Markdown, ErrorCodes};\n //!\n //! let s = \"My *markdown* _text_\";\n-//! let html = format!(\"{}\", Markdown(s, &[]));\n+//! let html = format!(\"{}\", Markdown(s, &[], ErrorCodes::Yes));\n //! // ... something using html\n //! ```\n \n@@ -35,7 +35,6 @@ use std::borrow::Cow;\n use std::ops::Range;\n use std::str;\n \n-use syntax::feature_gate::UnstableFeatures;\n use html::render::derive_id;\n use html::toc::TocBuilder;\n use html::highlight;\n@@ -48,15 +47,37 @@ use pulldown_cmark::{Options, OPTION_ENABLE_FOOTNOTES, OPTION_ENABLE_TABLES};\n /// formatted, this struct will emit the HTML corresponding to the rendered\n /// version of the contained markdown string.\n /// The second parameter is a list of link replacements\n-pub struct Markdown<'a>(pub &'a str, pub &'a [(String, String)]);\n+pub struct Markdown<'a>(pub &'a str, pub &'a [(String, String)], pub ErrorCodes);\n /// A unit struct like `Markdown`, that renders the markdown with a\n /// table of contents.\n-pub struct MarkdownWithToc<'a>(pub &'a str);\n+pub struct MarkdownWithToc<'a>(pub &'a str, pub ErrorCodes);\n /// A unit struct like `Markdown`, that renders the markdown escaping HTML tags.\n-pub struct MarkdownHtml<'a>(pub &'a str);\n+pub struct MarkdownHtml<'a>(pub &'a str, pub ErrorCodes);\n /// A unit struct like `Markdown`, that renders only the first paragraph.\n pub struct MarkdownSummaryLine<'a>(pub &'a str, pub &'a [(String, String)]);\n \n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub enum ErrorCodes {\n+    Yes,\n+    No,\n+}\n+\n+impl ErrorCodes {\n+    pub fn from(b: bool) -> Self {\n+        match b {\n+            true => ErrorCodes::Yes,\n+            false => ErrorCodes::No,\n+        }\n+    }\n+\n+    pub fn as_bool(self) -> bool {\n+        match self {\n+            ErrorCodes::Yes => true,\n+            ErrorCodes::No => false,\n+        }\n+    }\n+}\n+\n /// Controls whether a line will be hidden or shown in HTML output.\n ///\n /// All lines are used in documentation tests.\n@@ -127,14 +148,14 @@ thread_local!(pub static PLAYGROUND: RefCell<Option<(Option<String>, String)>> =\n /// Adds syntax highlighting and playground Run buttons to rust code blocks.\n struct CodeBlocks<'a, I: Iterator<Item = Event<'a>>> {\n     inner: I,\n-    check_error_codes: bool,\n+    check_error_codes: ErrorCodes,\n }\n \n impl<'a, I: Iterator<Item = Event<'a>>> CodeBlocks<'a, I> {\n-    fn new(iter: I) -> Self {\n+    fn new(iter: I, error_codes: ErrorCodes) -> Self {\n         CodeBlocks {\n             inner: iter,\n-            check_error_codes: UnstableFeatures::from_environment().is_nightly_build(),\n+            check_error_codes: error_codes,\n         }\n     }\n }\n@@ -476,9 +497,8 @@ impl fmt::Display for TestableCodeError {\n }\n \n pub fn find_testable_code(\n-    doc: &str, tests: &mut test::Collector\n+    doc: &str, tests: &mut test::Collector, error_codes: ErrorCodes,\n ) -> Result<(), TestableCodeError> {\n-    let is_nightly = UnstableFeatures::from_environment().is_nightly_build();\n     let mut parser = Parser::new(doc);\n     let mut prev_offset = 0;\n     let mut nb_lines = 0;\n@@ -489,7 +509,7 @@ pub fn find_testable_code(\n                 let block_info = if s.is_empty() {\n                     LangString::all_false()\n                 } else {\n-                    LangString::parse(&*s, is_nightly)\n+                    LangString::parse(&*s, error_codes)\n                 };\n                 if !block_info.rust {\n                     continue\n@@ -570,7 +590,8 @@ impl LangString {\n         }\n     }\n \n-    fn parse(string: &str, allow_error_code_check: bool) -> LangString {\n+    fn parse(string: &str, allow_error_code_check: ErrorCodes) -> LangString {\n+        let allow_error_code_check = allow_error_code_check.as_bool();\n         let mut seen_rust_tags = false;\n         let mut seen_other_tags = false;\n         let mut data = LangString::all_false();\n@@ -620,7 +641,7 @@ impl LangString {\n \n impl<'a> fmt::Display for Markdown<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let Markdown(md, links) = *self;\n+        let Markdown(md, links, codes) = *self;\n \n         // This is actually common enough to special-case\n         if md.is_empty() { return Ok(()) }\n@@ -645,15 +666,15 @@ impl<'a> fmt::Display for Markdown<'a> {\n                             CodeBlocks::new(\n                                 LinkReplacer::new(\n                                     HeadingLinks::new(p, None),\n-                                    links))));\n+                                    links), codes)));\n \n         fmt.write_str(&s)\n     }\n }\n \n impl<'a> fmt::Display for MarkdownWithToc<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let MarkdownWithToc(md) = *self;\n+        let MarkdownWithToc(md, codes) = *self;\n \n         let mut opts = Options::empty();\n         opts.insert(OPTION_ENABLE_TABLES);\n@@ -665,8 +686,12 @@ impl<'a> fmt::Display for MarkdownWithToc<'a> {\n \n         let mut toc = TocBuilder::new();\n \n-        html::push_html(&mut s,\n-                        Footnotes::new(CodeBlocks::new(HeadingLinks::new(p, Some(&mut toc)))));\n+        {\n+            let p = HeadingLinks::new(p, Some(&mut toc));\n+            let p = CodeBlocks::new(p, codes);\n+            let p = Footnotes::new(p);\n+            html::push_html(&mut s, p);\n+        }\n \n         write!(fmt, \"<nav id=\\\"TOC\\\">{}</nav>\", toc.into_toc())?;\n \n@@ -676,7 +701,7 @@ impl<'a> fmt::Display for MarkdownWithToc<'a> {\n \n impl<'a> fmt::Display for MarkdownHtml<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let MarkdownHtml(md) = *self;\n+        let MarkdownHtml(md, codes) = *self;\n \n         // This is actually common enough to special-case\n         if md.is_empty() { return Ok(()) }\n@@ -694,8 +719,10 @@ impl<'a> fmt::Display for MarkdownHtml<'a> {\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n-        html::push_html(&mut s,\n-                        Footnotes::new(CodeBlocks::new(HeadingLinks::new(p, None))));\n+        let p = HeadingLinks::new(p, None);\n+        let p = CodeBlocks::new(p, codes);\n+        let p = Footnotes::new(p);\n+        html::push_html(&mut s, p);\n \n         fmt.write_str(&s)\n     }\n@@ -830,7 +857,7 @@ pub fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n \n #[cfg(test)]\n mod tests {\n-    use super::{LangString, Markdown, MarkdownHtml};\n+    use super::{ErrorCodes, LangString, Markdown, MarkdownHtml};\n     use super::plain_summary_line;\n     use html::render::reset_ids;\n \n@@ -839,7 +866,7 @@ mod tests {\n         fn t(s: &str,\n             should_panic: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool,\n             compile_fail: bool, allow_fail: bool, error_codes: Vec<String>) {\n-            assert_eq!(LangString::parse(s, true), LangString {\n+            assert_eq!(LangString::parse(s, ErrorCodes::Yes), LangString {\n                 should_panic,\n                 no_run,\n                 ignore,\n@@ -878,14 +905,14 @@ mod tests {\n     #[test]\n     fn issue_17736() {\n         let markdown = \"# title\";\n-        Markdown(markdown, &[]).to_string();\n+        Markdown(markdown, &[], ErrorCodes::Yes).to_string();\n         reset_ids(true);\n     }\n \n     #[test]\n     fn test_header() {\n         fn t(input: &str, expect: &str) {\n-            let output = Markdown(input, &[]).to_string();\n+            let output = Markdown(input, &[], ErrorCodes::Yes).to_string();\n             assert_eq!(output, expect, \"original: {}\", input);\n             reset_ids(true);\n         }\n@@ -907,7 +934,7 @@ mod tests {\n     #[test]\n     fn test_header_ids_multiple_blocks() {\n         fn t(input: &str, expect: &str) {\n-            let output = Markdown(input, &[]).to_string();\n+            let output = Markdown(input, &[], ErrorCodes::Yes).to_string();\n             assert_eq!(output, expect, \"original: {}\", input);\n         }\n \n@@ -948,7 +975,7 @@ mod tests {\n     #[test]\n     fn test_markdown_html_escape() {\n         fn t(input: &str, expect: &str) {\n-            let output = MarkdownHtml(input).to_string();\n+            let output = MarkdownHtml(input, ErrorCodes::Yes).to_string();\n             assert_eq!(output, expect, \"original: {}\", input);\n         }\n "}, {"sha": "b9b058cb54826f75523212e6b95c431bfaafde3a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/01d95558e62f40f958618292afd4abae2fb3c236/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d95558e62f40f958618292afd4abae2fb3c236/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=01d95558e62f40f958618292afd4abae2fb3c236", "patch": "@@ -56,6 +56,7 @@ use externalfiles::ExternalHtml;\n use serialize::json::{ToJson, Json, as_json};\n use syntax::ast;\n use syntax::codemap::FileName;\n+use syntax::feature_gate::UnstableFeatures;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId};\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n@@ -72,7 +73,7 @@ use html::format::{GenericBounds, WhereClause, href, AbiSpace};\n use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace};\n use html::format::fmt_impl_for_trait_page;\n use html::item_type::ItemType;\n-use html::markdown::{self, Markdown, MarkdownHtml, MarkdownSummaryLine};\n+use html::markdown::{self, Markdown, MarkdownHtml, MarkdownSummaryLine, ErrorCodes};\n use html::{highlight, layout};\n \n use minifier;\n@@ -99,6 +100,7 @@ pub struct Context {\n     /// real location of an item. This is used to allow external links to\n     /// publicly reused items to redirect to the right location.\n     pub render_redirect_pages: bool,\n+    pub codes: ErrorCodes,\n     pub shared: Arc<SharedContext>,\n }\n \n@@ -581,6 +583,7 @@ pub fn run(mut krate: clean::Crate,\n         current: Vec::new(),\n         dst,\n         render_redirect_pages: false,\n+        codes: ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build()),\n         shared: Arc::new(scx),\n     };\n \n@@ -2221,21 +2224,22 @@ fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Re\n fn render_markdown(w: &mut fmt::Formatter,\n                    md_text: &str,\n                    links: Vec<(String, String)>,\n-                   prefix: &str,)\n+                   prefix: &str,\n+                   codes: ErrorCodes)\n                    -> fmt::Result {\n-    write!(w, \"<div class='docblock'>{}{}</div>\", prefix, Markdown(md_text, &links))\n+    write!(w, \"<div class='docblock'>{}{}</div>\", prefix, Markdown(md_text, &links, codes))\n }\n \n fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLink,\n-                  prefix: &str) -> fmt::Result {\n+                  prefix: &str, codes: ErrorCodes) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n         let markdown = if s.contains('\\n') {\n             format!(\"{} [Read more]({})\",\n                     &plain_summary_line(Some(s)), naive_assoc_href(item, link))\n         } else {\n             plain_summary_line(Some(s)).to_string()\n         };\n-        render_markdown(w, &markdown, item.links(), prefix)?;\n+        render_markdown(w, &markdown, item.links(), prefix, codes)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -2261,7 +2265,7 @@ fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n                  cx: &Context, prefix: &str) -> fmt::Result {\n     if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n         debug!(\"Doc block: =====\\n{}\\n=====\", s);\n-        render_markdown(w, &*s, item.links(), prefix)?;\n+        render_markdown(w, &*s, item.links(), prefix, cx.codes)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -2508,6 +2512,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n \n fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<String> {\n     let mut stability = vec![];\n+    let error_codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n \n     if let Some(stab) = item.stability.as_ref() {\n         let deprecated_reason = if show_reason && !stab.deprecated_reason.is_empty() {\n@@ -2521,14 +2526,11 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n             } else {\n                 String::new()\n             };\n+            let html = MarkdownHtml(&deprecated_reason, error_codes);\n             let text = if stability::deprecation_in_effect(&stab.deprecated_since) {\n-                format!(\"Deprecated{}{}\",\n-                        since,\n-                        MarkdownHtml(&deprecated_reason))\n+                format!(\"Deprecated{}{}\", since, html)\n             } else {\n-                format!(\"Deprecating in {}{}\",\n-                        Escape(&stab.deprecated_since),\n-                        MarkdownHtml(&deprecated_reason))\n+                format!(\"Deprecating in {}{}\", Escape(&stab.deprecated_since), html)\n             };\n             stability.push(format!(\"<div class='stab deprecated'>{}</div>\", text))\n         };\n@@ -2559,7 +2561,9 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n                                         This is a nightly-only experimental API. {}\\\n                                         </summary>{}\",\n                                        unstable_extra,\n-                                       MarkdownHtml(&stab.unstable_reason));\n+                                       MarkdownHtml(\n+                                           &stab.unstable_reason,\n+                                           error_codes));\n                     stability.push(format!(\"<div class='stab unstable'><details>{}</details></div>\",\n                                    text));\n                 }\n@@ -2582,11 +2586,11 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n         let text = if stability::deprecation_in_effect(&depr.since) {\n             format!(\"Deprecated{}{}\",\n                     since,\n-                    MarkdownHtml(&note))\n+                    MarkdownHtml(&note, error_codes))\n         } else {\n             format!(\"Deprecating in {}{}\",\n                     Escape(&depr.since),\n-                    MarkdownHtml(&note))\n+                    MarkdownHtml(&note, error_codes))\n         };\n         stability.push(format!(\"<div class='stab deprecated'>{}</div>\", text))\n     }\n@@ -3811,7 +3815,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n         write!(w, \"</span></td></tr></tbody></table></h3>\")?;\n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n             write!(w, \"<div class='docblock'>{}</div>\",\n-                   Markdown(&*dox, &i.impl_item.links()))?;\n+                   Markdown(&*dox, &i.impl_item.links(), cx.codes))?;\n         }\n     }\n \n@@ -3897,7 +3901,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                         } else if show_def_docs {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n-                            document_short(w, it, link, &prefix)?;\n+                            document_short(w, it, link, &prefix, cx.codes)?;\n                         }\n                     }\n                 } else {\n@@ -3909,7 +3913,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             } else {\n                 document_stability(w, cx, item)?;\n                 if show_def_docs {\n-                    document_short(w, item, link, &prefix)?;\n+                    document_short(w, item, link, &prefix, cx.codes)?;\n                 }\n             }\n         }"}, {"sha": "97a3b2c1ea02cdc995b618fc2a1c01189043cb4d", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01d95558e62f40f958618292afd4abae2fb3c236/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d95558e62f40f958618292afd4abae2fb3c236/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=01d95558e62f40f958618292afd4abae2fb3c236", "patch": "@@ -19,14 +19,15 @@ use testing;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::{Externs, CodegenOptions};\n use syntax::codemap::DUMMY_SP;\n+use syntax::feature_gate::UnstableFeatures;\n use syntax::edition::Edition;\n \n use externalfiles::{ExternalHtml, LoadStringError, load_string};\n \n use html::render::reset_ids;\n use html::escape::Escape;\n use html::markdown;\n-use html::markdown::{Markdown, MarkdownWithToc, find_testable_code};\n+use html::markdown::{ErrorCodes, Markdown, MarkdownWithToc, find_testable_code};\n use test::{TestOptions, Collector};\n \n /// Separate any lines at the start of the file that begin with `# ` or `%`.\n@@ -88,10 +89,11 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n \n     reset_ids(false);\n \n+    let error_codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n     let text = if include_toc {\n-        MarkdownWithToc(text).to_string()\n+        MarkdownWithToc(text, error_codes).to_string()\n     } else {\n-        Markdown(text, &[]).to_string()\n+        Markdown(text, &[], error_codes).to_string()\n     };\n \n     let err = write!(\n@@ -157,7 +159,8 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n                                        Some(PathBuf::from(input)),\n                                        linker, edition);\n     collector.set_position(DUMMY_SP);\n-    let res = find_testable_code(&input_str, &mut collector);\n+    let codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n+    let res = find_testable_code(&input_str, &mut collector, codes);\n     if let Err(err) = res {\n         diag.span_warn(DUMMY_SP, &err.to_string());\n     }"}, {"sha": "650a2408aa6edba9d60ab6e73d67902ff8cc4e3a", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01d95558e62f40f958618292afd4abae2fb3c236/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d95558e62f40f958618292afd4abae2fb3c236/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=01d95558e62f40f958618292afd4abae2fb3c236", "patch": "@@ -42,7 +42,7 @@ use errors;\n use errors::emitter::ColorConfig;\n \n use clean::Attributes;\n-use html::markdown::{self, LangString};\n+use html::markdown::{self, ErrorCodes, LangString};\n \n #[derive(Clone, Default)]\n pub struct TestOptions {\n@@ -145,7 +145,8 @@ pub fn run(input_path: &Path,\n             let mut hir_collector = HirCollector {\n                 sess: &sess,\n                 collector: &mut collector,\n-                map: &map\n+                map: &map,\n+                codes: ErrorCodes::from(sess.opts.unstable_features.is_nightly_build()),\n             };\n             hir_collector.visit_testable(\"\".to_string(), &krate.attrs, |this| {\n                 intravisit::walk_crate(this, krate);\n@@ -662,7 +663,8 @@ impl Collector {\n struct HirCollector<'a, 'hir: 'a> {\n     sess: &'a session::Session,\n     collector: &'a mut Collector,\n-    map: &'a hir::map::Map<'hir>\n+    map: &'a hir::map::Map<'hir>,\n+    codes: ErrorCodes,\n }\n \n impl<'a, 'hir> HirCollector<'a, 'hir> {\n@@ -688,7 +690,7 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n         // anything else, this will combine them for us\n         if let Some(doc) = attrs.collapsed_doc_value() {\n             self.collector.set_position(attrs.span.unwrap_or(DUMMY_SP));\n-            let res = markdown::find_testable_code(&doc, self.collector);\n+            let res = markdown::find_testable_code(&doc, self.collector, self.codes);\n             if let Err(err) = res {\n                 self.sess.diagnostic().span_warn(attrs.span.unwrap_or(DUMMY_SP),\n                     &err.to_string());"}, {"sha": "79c5be125b35fda19d51b9a358954f2bf2dccc05", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01d95558e62f40f958618292afd4abae2fb3c236/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d95558e62f40f958618292afd4abae2fb3c236/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=01d95558e62f40f958618292afd4abae2fb3c236", "patch": "@@ -24,7 +24,7 @@ use std::path::PathBuf;\n \n use syntax::diagnostics::metadata::{get_metadata_dir, ErrorMetadataMap, ErrorMetadata};\n \n-use rustdoc::html::markdown::{Markdown, PLAYGROUND};\n+use rustdoc::html::markdown::{Markdown, ErrorCodes, PLAYGROUND};\n use rustc_serialize::json;\n \n enum OutputFormat {\n@@ -100,7 +100,7 @@ impl Formatter for HTMLFormatter {\n \n         // Description rendered as markdown.\n         match info.description {\n-            Some(ref desc) => write!(output, \"{}\", Markdown(desc, &[]))?,\n+            Some(ref desc) => write!(output, \"{}\", Markdown(desc, &[], ErrorCodes::Yes))?,\n             None => write!(output, \"<p>No description.</p>\\n\")?,\n         }\n "}]}