{"sha": "428bb164f33951e561a1eed8e636077ad6ce2506", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOGJiMTY0ZjMzOTUxZTU2MWExZWVkOGU2MzYwNzdhZDZjZTI1MDY=", "commit": {"author": {"name": "Sebastian Wicki", "email": "gandro@gmx.net", "date": "2015-09-22T09:48:00Z"}, "committer": {"name": "Sebastian Wicki", "email": "gandro@gmx.net", "date": "2015-09-22T09:48:00Z"}, "message": "Fix alignment of pthread types on NetBSD", "tree": {"sha": "7d7029072f6568a9a8ea0281bba10d964f624448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d7029072f6568a9a8ea0281bba10d964f624448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/428bb164f33951e561a1eed8e636077ad6ce2506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/428bb164f33951e561a1eed8e636077ad6ce2506", "html_url": "https://github.com/rust-lang/rust/commit/428bb164f33951e561a1eed8e636077ad6ce2506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/428bb164f33951e561a1eed8e636077ad6ce2506/comments", "author": {"login": "gandro", "id": 50564, "node_id": "MDQ6VXNlcjUwNTY0", "avatar_url": "https://avatars.githubusercontent.com/u/50564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gandro", "html_url": "https://github.com/gandro", "followers_url": "https://api.github.com/users/gandro/followers", "following_url": "https://api.github.com/users/gandro/following{/other_user}", "gists_url": "https://api.github.com/users/gandro/gists{/gist_id}", "starred_url": "https://api.github.com/users/gandro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gandro/subscriptions", "organizations_url": "https://api.github.com/users/gandro/orgs", "repos_url": "https://api.github.com/users/gandro/repos", "events_url": "https://api.github.com/users/gandro/events{/privacy}", "received_events_url": "https://api.github.com/users/gandro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gandro", "id": 50564, "node_id": "MDQ6VXNlcjUwNTY0", "avatar_url": "https://avatars.githubusercontent.com/u/50564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gandro", "html_url": "https://github.com/gandro", "followers_url": "https://api.github.com/users/gandro/followers", "following_url": "https://api.github.com/users/gandro/following{/other_user}", "gists_url": "https://api.github.com/users/gandro/gists{/gist_id}", "starred_url": "https://api.github.com/users/gandro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gandro/subscriptions", "organizations_url": "https://api.github.com/users/gandro/orgs", "repos_url": "https://api.github.com/users/gandro/repos", "events_url": "https://api.github.com/users/gandro/events{/privacy}", "received_events_url": "https://api.github.com/users/gandro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "318cd843d1103579291a9f6c9eab8aacce7e9f82", "url": "https://api.github.com/repos/rust-lang/rust/commits/318cd843d1103579291a9f6c9eab8aacce7e9f82", "html_url": "https://github.com/rust-lang/rust/commit/318cd843d1103579291a9f6c9eab8aacce7e9f82"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "954bfbb6b18b7e33d4111014f6558185453cf81f", "filename": "src/libstd/sys/unix/sync.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/428bb164f33951e561a1eed8e636077ad6ce2506/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428bb164f33951e561a1eed8e636077ad6ce2506/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fsync.rs?ref=428bb164f33951e561a1eed8e636077ad6ce2506", "patch": "@@ -254,53 +254,61 @@ mod os {\n mod os {\n     use libc;\n \n-    // size of the type minus width of the magic int field\n+    // size of the type minus width of the magic and alignment field\n     #[cfg(target_arch = \"x86_64\")]\n-    const __PTHREAD_MUTEX_SIZE__: usize = 48 - 4;\n+    const __PTHREAD_MUTEX_SIZE__: usize = 48 - 4 - 8;\n \n     #[cfg(target_arch = \"x86_64\")]\n-    const __PTHREAD_COND_SIZE__: usize = 40 - 4;\n+    const __PTHREAD_MUTEXATTR_SIZE__: usize = 16 - 8; // no magic field\n \n     #[cfg(target_arch = \"x86_64\")]\n-    const __PTHREAD_RWLOCK_SIZE__: usize = 64 - 4;\n+    const __PTHREAD_COND_SIZE__: usize = 40 - 4 - 8;\n+\n+    #[cfg(target_arch = \"x86_64\")]\n+    const __PTHREAD_RWLOCK_SIZE__: usize = 64 - 4 - 8;\n \n     const _PTHREAD_MUTEX_MAGIC_INIT: libc::c_uint = 0x33330003;\n     const _PTHREAD_COND_MAGIC_INIT: libc::c_uint = 0x55550005;\n     const _PTHREAD_RWLOCK_MAGIC_INIT: libc::c_uint = 0x99990009;\n \n-    // note the actual structs are smaller\n-\n-    #[repr(C, packed)]\n+    #[repr(C)]\n     pub struct pthread_mutex_t {\n         __magic: libc::c_uint,\n         __opaque: [u8; __PTHREAD_MUTEX_SIZE__],\n+        __align: libc::c_longlong,\n     }\n-    #[repr(C, packed)]\n+    #[repr(C)]\n     pub struct pthread_mutexattr_t {\n-        __opaque: [u8; 16],\n+        __opaque: [u8; __PTHREAD_MUTEXATTR_SIZE__],\n+        __align: libc::c_longlong,\n     }\n-    #[repr(C, packed)]\n+    #[repr(C)]\n     pub struct pthread_cond_t {\n         __magic: libc::c_uint,\n         __opaque: [u8; __PTHREAD_COND_SIZE__],\n+        __align: libc::c_longlong,\n     }\n-    #[repr(C, packed)]\n+    #[repr(C)]\n     pub struct pthread_rwlock_t {\n         __magic: libc::c_uint,\n         __opaque: [u8; __PTHREAD_RWLOCK_SIZE__],\n+        __align: libc::c_longlong,\n     }\n \n     pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n         __magic: _PTHREAD_MUTEX_MAGIC_INIT,\n         __opaque: [0; __PTHREAD_MUTEX_SIZE__],\n+        __align: 0,\n     };\n     pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n         __magic: _PTHREAD_COND_MAGIC_INIT,\n         __opaque: [0; __PTHREAD_COND_SIZE__],\n+        __align: 0,\n     };\n     pub const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = pthread_rwlock_t {\n         __magic: _PTHREAD_RWLOCK_MAGIC_INIT,\n         __opaque: [0; __PTHREAD_RWLOCK_SIZE__],\n+        __align: 0,\n     };\n \n     pub const PTHREAD_MUTEX_RECURSIVE: libc::c_int = 2;"}]}