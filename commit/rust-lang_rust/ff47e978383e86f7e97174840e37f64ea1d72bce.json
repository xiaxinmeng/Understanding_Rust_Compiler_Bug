{"sha": "ff47e978383e86f7e97174840e37f64ea1d72bce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNDdlOTc4MzgzZTg2ZjdlOTcxNzQ4NDBlMzdmNjRlYTFkNzJiY2U=", "commit": {"author": {"name": "James Addison", "email": "jay@jp-hosting.net", "date": "2021-04-14T11:52:06Z"}, "committer": {"name": "James Addison", "email": "jay@jp-hosting.net", "date": "2021-04-14T11:52:06Z"}, "message": "Merge branch 'master' into compiler/E0384-reduce-assertiveness", "tree": {"sha": "cb27b2fb1fe23dc683b119ca34355ac0bc7db017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb27b2fb1fe23dc683b119ca34355ac0bc7db017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff47e978383e86f7e97174840e37f64ea1d72bce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff47e978383e86f7e97174840e37f64ea1d72bce", "html_url": "https://github.com/rust-lang/rust/commit/ff47e978383e86f7e97174840e37f64ea1d72bce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff47e978383e86f7e97174840e37f64ea1d72bce/comments", "author": {"login": "jayaddison", "id": 55152140, "node_id": "MDQ6VXNlcjU1MTUyMTQw", "avatar_url": "https://avatars.githubusercontent.com/u/55152140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayaddison", "html_url": "https://github.com/jayaddison", "followers_url": "https://api.github.com/users/jayaddison/followers", "following_url": "https://api.github.com/users/jayaddison/following{/other_user}", "gists_url": "https://api.github.com/users/jayaddison/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayaddison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayaddison/subscriptions", "organizations_url": "https://api.github.com/users/jayaddison/orgs", "repos_url": "https://api.github.com/users/jayaddison/repos", "events_url": "https://api.github.com/users/jayaddison/events{/privacy}", "received_events_url": "https://api.github.com/users/jayaddison/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jayaddison", "id": 55152140, "node_id": "MDQ6VXNlcjU1MTUyMTQw", "avatar_url": "https://avatars.githubusercontent.com/u/55152140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayaddison", "html_url": "https://github.com/jayaddison", "followers_url": "https://api.github.com/users/jayaddison/followers", "following_url": "https://api.github.com/users/jayaddison/following{/other_user}", "gists_url": "https://api.github.com/users/jayaddison/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayaddison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayaddison/subscriptions", "organizations_url": "https://api.github.com/users/jayaddison/orgs", "repos_url": "https://api.github.com/users/jayaddison/repos", "events_url": "https://api.github.com/users/jayaddison/events{/privacy}", "received_events_url": "https://api.github.com/users/jayaddison/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "url": "https://api.github.com/repos/rust-lang/rust/commits/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "html_url": "https://github.com/rust-lang/rust/commit/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745"}, {"sha": "d408fdd4a82bc3e7ea61dd81bc9a8781b2bf939d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d408fdd4a82bc3e7ea61dd81bc9a8781b2bf939d", "html_url": "https://github.com/rust-lang/rust/commit/d408fdd4a82bc3e7ea61dd81bc9a8781b2bf939d"}], "stats": {"total": 434, "additions": 299, "deletions": 135}, "files": [{"sha": "024610bc7a417a1bc2761d12c214941a947f036b", "filename": "RELEASES.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -50,6 +50,8 @@ Libraries\n - [`io::Empty` now implements `io::Seek`.][78044]\n - [`rc::Weak<T>` and `sync::Weak<T>`'s methods such as `as_ptr` are now implemented for\n   `T: ?Sized` types.][80764]\n+- [`Div` and `Rem` by their `NonZero` variant is now implemented for all unsigned integers.][79134]\n+\n \n Stabilized APIs\n ---------------\n@@ -72,6 +74,8 @@ Stabilized APIs\n - [`str::split_inclusive`]\n - [`sync::OnceState`]\n - [`task::Wake`]\n+- [`VecDeque::range`]\n+- [`VecDeque::range_mut`]\n \n Cargo\n -----\n@@ -115,6 +119,7 @@ Compatibility Notes\n     - `thumbv7neon-unknown-linux-gnueabihf`\n     - `armv7-unknown-linux-gnueabi`\n     - `x86_64-unknown-linux-gnux32`\n+- [`atomic::spin_loop_hint` has been deprecated.][80966] It's recommended to use `hint::spin_loop` instead.\n \n Internal Only\n -------------\n@@ -145,6 +150,8 @@ Internal Only\n [80764]: https://github.com/rust-lang/rust/pull/80764\n [80749]: https://github.com/rust-lang/rust/pull/80749\n [80662]: https://github.com/rust-lang/rust/pull/80662\n+[79134]: https://github.com/rust-lang/rust/pull/79134\n+[80966]: https://github.com/rust-lang/rust/pull/80966\n [cargo/8997]: https://github.com/rust-lang/cargo/pull/8997\n [cargo/9112]: https://github.com/rust-lang/cargo/pull/9112\n [feature-resolver@2.0]: https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2\n@@ -166,6 +173,8 @@ Internal Only\n [`Seek::stream_position`]: https://doc.rust-lang.org/nightly/std/io/trait.Seek.html#method.stream_position\n [`Peekable::next_if`]: https://doc.rust-lang.org/nightly/std/iter/struct.Peekable.html#method.next_if\n [`Peekable::next_if_eq`]: https://doc.rust-lang.org/nightly/std/iter/struct.Peekable.html#method.next_if_eq\n+[`VecDeque::range`]: https://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.range\n+[`VecDeque::range_mut`]: https://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.range_mut\n \n Version 1.50.0 (2021-02-11)\n ============================"}, {"sha": "c4acaef21dd63a7df5bc41432f524689b915373a", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -857,19 +857,18 @@ declare_lint! {\n     /// ```\n     ///\n     /// This syntax is now a hard error in the 2018 edition. In the 2015\n-    /// edition, this lint is \"allow\" by default, because the old code is\n-    /// still valid, and warning for all old code can be noisy. This lint\n+    /// edition, this lint is \"warn\" by default. This lint\n     /// enables the [`cargo fix`] tool with the `--edition` flag to\n     /// automatically transition old code from the 2015 edition to 2018. The\n-    /// tool will switch this lint to \"warn\" and will automatically apply the\n+    /// tool will run this lint and automatically apply the\n     /// suggested fix from the compiler (which is to add `_` to each\n     /// parameter). This provides a completely automated way to update old\n     /// code for a new edition. See [issue #41686] for more details.\n     ///\n     /// [issue #41686]: https://github.com/rust-lang/rust/issues/41686\n     /// [`cargo fix`]: https://doc.rust-lang.org/cargo/commands/cargo-fix.html\n     pub ANONYMOUS_PARAMETERS,\n-    Allow,\n+    Warn,\n     \"detects anonymous parameters\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n@@ -884,6 +883,10 @@ declare_lint_pass!(\n \n impl EarlyLintPass for AnonymousParameters {\n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n+        if cx.sess.edition() != Edition::Edition2015 {\n+            // This is a hard error in future editions; avoid linting and erroring\n+            return;\n+        }\n         if let ast::AssocItemKind::Fn(box FnKind(_, ref sig, _, _)) = it.kind {\n             for arg in sig.decl.inputs.iter() {\n                 if let ast::PatKind::Ident(_, ident, None) = arg.pat.kind {"}, {"sha": "70a5ac6f15ec221c3ee9c0ab3a9aa1bdf8a0fa13", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -666,21 +666,23 @@ impl<'a> Parser<'a> {\n                     );\n                     match x {\n                         Ok((_, _, false)) => {\n-                            self.bump(); // `>`\n-                            match self.parse_expr() {\n-                                Ok(_) => {\n-                                    e.span_suggestion_verbose(\n-                                        binop.span.shrink_to_lo(),\n-                                        TURBOFISH_SUGGESTION_STR,\n-                                        \"::\".to_string(),\n-                                        Applicability::MaybeIncorrect,\n-                                    );\n-                                    e.emit();\n-                                    *expr = self.mk_expr_err(expr.span.to(self.prev_token.span));\n-                                    return Ok(());\n-                                }\n-                                Err(mut err) => {\n-                                    err.cancel();\n+                            if self.eat(&token::Gt) {\n+                                match self.parse_expr() {\n+                                    Ok(_) => {\n+                                        e.span_suggestion_verbose(\n+                                            binop.span.shrink_to_lo(),\n+                                            TURBOFISH_SUGGESTION_STR,\n+                                            \"::\".to_string(),\n+                                            Applicability::MaybeIncorrect,\n+                                        );\n+                                        e.emit();\n+                                        *expr =\n+                                            self.mk_expr_err(expr.span.to(self.prev_token.span));\n+                                        return Ok(());\n+                                    }\n+                                    Err(mut err) => {\n+                                        err.cancel();\n+                                    }\n                                 }\n                             }\n                         }"}, {"sha": "2af46693449dcfd33a71f751fabdbf2d1b073c2f", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -1446,8 +1446,8 @@ impl Target {\n \n         let get_req_field = |name: &str| {\n             obj.find(name)\n-                .map(|s| s.as_string())\n-                .and_then(|os| os.map(|s| s.to_string()))\n+                .and_then(Json::as_string)\n+                .map(str::to_string)\n                 .ok_or_else(|| format!(\"Field {} in target specification is required\", name))\n         };\n "}, {"sha": "7a297f2c65f13fb68df8c90867fbaea8c079fecf", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -82,7 +82,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         if param_type.is_suggestable() {\n                             err.span_suggestion(\n                                 tcx.def_span(src_def_id),\n-                                \"consider changing this type paramater to a `const`-generic\",\n+                                \"consider changing this type parameter to be a `const` generic\",\n                                 format!(\"const {}: {}\", param_name, param_type),\n                                 Applicability::MaybeIncorrect,\n                             );"}, {"sha": "971244718b4adb30bba476fadef14e9d1a6be2b9", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -940,7 +940,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(btree_retain)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map: BTreeMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\n@@ -949,7 +948,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert!(map.into_iter().eq(vec![(0, 0), (2, 20), (4, 40), (6, 60)]));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"btree_retain\", issue = \"79025\")]\n+    #[stable(feature = \"btree_retain\", since = \"1.53.0\")]\n     pub fn retain<F>(&mut self, mut f: F)\n     where\n         K: Ord,"}, {"sha": "737932d931c0283647c3d06bc5ff5d201c299a9e", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -851,7 +851,6 @@ impl<T> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(btree_retain)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let xs = [1, 2, 3, 4, 5, 6];\n@@ -860,7 +859,7 @@ impl<T> BTreeSet<T> {\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert!(set.iter().eq([2, 4, 6].iter()));\n     /// ```\n-    #[unstable(feature = \"btree_retain\", issue = \"79025\")]\n+    #[stable(feature = \"btree_retain\", since = \"1.53.0\")]\n     pub fn retain<F>(&mut self, mut f: F)\n     where\n         T: Ord,"}, {"sha": "0dab0358d6e3d7dfef36b43a9ac1f3bf434f3ac7", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -2567,7 +2567,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// # let some_predicate = |x: &mut i32| { *x == 2 || *x == 3 || *x == 6 };\n     /// # let mut vec = vec![1, 2, 3, 4, 5, 6];\n     /// let mut i = 0;\n-    /// while i != vec.len() {\n+    /// while i < vec.len() {\n     ///     if some_predicate(&mut vec[i]) {\n     ///         let val = vec.remove(i);\n     ///         // your code here"}, {"sha": "59493bb0425f3534d1c5e1902637b1dbce6d6d32", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -2268,7 +2268,7 @@ impl<T: ?Sized + Debug> Debug for RefMut<'_, T> {\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<T: ?Sized + Debug> Debug for UnsafeCell<T> {\n+impl<T: ?Sized> Debug for UnsafeCell<T> {\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.pad(\"UnsafeCell\")\n     }"}, {"sha": "1ba0b23ae5be3c0d1bb03342bed35084bfcd8235", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -1543,7 +1543,7 @@ extern \"rust-intrinsic\" {\n     /// let num_trailing = unsafe { cttz_nonzero(x) };\n     /// assert_eq!(num_trailing, 3);\n     /// ```\n-    #[rustc_const_unstable(feature = \"const_cttz\", issue = \"none\")]\n+    #[rustc_const_stable(feature = \"const_cttz\", since = \"1.53.0\")]\n     pub fn cttz_nonzero<T: Copy>(x: T) -> T;\n \n     /// Reverses the bytes in an integer type `T`."}, {"sha": "d0c52a445919011f0de0f42eff678082a1a7f38c", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -79,7 +79,6 @@\n #![feature(const_int_unchecked_arith)]\n #![feature(const_mut_refs)]\n #![feature(const_refs_to_cell)]\n-#![feature(const_cttz)]\n #![feature(const_panic)]\n #![feature(const_pin)]\n #![feature(const_fn)]"}, {"sha": "0d6d919d9984d9063fbb5148cb8a4eb113649c2f", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -500,7 +500,6 @@ impl f32 {\n     /// Returns `true` if the number is [subnormal].\n     ///\n     /// ```\n-    /// #![feature(is_subnormal)]\n     /// let min = f32::MIN_POSITIVE; // 1.17549435e-38f32\n     /// let max = f32::MAX;\n     /// let lower_than_min = 1.0e-40_f32;\n@@ -516,7 +515,7 @@ impl f32 {\n     /// assert!(lower_than_min.is_subnormal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n-    #[unstable(feature = \"is_subnormal\", issue = \"79288\")]\n+    #[stable(feature = \"is_subnormal\", since = \"1.53.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n     pub const fn is_subnormal(self) -> bool {"}, {"sha": "42214e7b50de0b477ed508e2df5fe00deaca36b2", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -499,7 +499,6 @@ impl f64 {\n     /// Returns `true` if the number is [subnormal].\n     ///\n     /// ```\n-    /// #![feature(is_subnormal)]\n     /// let min = f64::MIN_POSITIVE; // 2.2250738585072014e-308_f64\n     /// let max = f64::MAX;\n     /// let lower_than_min = 1.0e-308_f64;\n@@ -515,7 +514,7 @@ impl f64 {\n     /// assert!(lower_than_min.is_subnormal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n-    #[unstable(feature = \"is_subnormal\", issue = \"79288\")]\n+    #[stable(feature = \"is_subnormal\", since = \"1.53.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n     pub const fn is_subnormal(self) -> bool {"}, {"sha": "81262a2f91839a65208ee73e05c584fbcdfd8313", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -191,13 +191,12 @@ macro_rules! nonzero_leading_trailing_zeros {\n                 /// Basic usage:\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_leading_trailing_zeros)]\n                 #[doc = concat!(\"let n = std::num::\", stringify!($Ty), \"::new(\", stringify!($LeadingTestExpr), \").unwrap();\")]\n                 ///\n                 /// assert_eq!(n.leading_zeros(), 0);\n                 /// ```\n-                #[unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n-                #[rustc_const_unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n+                #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n                 #[inline]\n                 pub const fn leading_zeros(self) -> u32 {\n                     // SAFETY: since `self` can not be zero it is safe to call ctlz_nonzero\n@@ -214,13 +213,12 @@ macro_rules! nonzero_leading_trailing_zeros {\n                 /// Basic usage:\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_leading_trailing_zeros)]\n                 #[doc = concat!(\"let n = std::num::\", stringify!($Ty), \"::new(0b0101000).unwrap();\")]\n                 ///\n                 /// assert_eq!(n.trailing_zeros(), 3);\n                 /// ```\n-                #[unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n-                #[rustc_const_unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n+                #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n                 #[inline]\n                 pub const fn trailing_zeros(self) -> u32 {\n                     // SAFETY: since `self` can not be zero it is safe to call cttz_nonzero"}, {"sha": "fa6a6c2cccc015184b42537d5b1ab23b13449a15", "filename": "library/core/src/time.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -124,14 +124,13 @@ impl Duration {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(duration_zero)]\n     /// use std::time::Duration;\n     ///\n     /// let duration = Duration::ZERO;\n     /// assert!(duration.is_zero());\n     /// assert_eq!(duration.as_nanos(), 0);\n     /// ```\n-    #[unstable(feature = \"duration_zero\", issue = \"73544\")]\n+    #[stable(feature = \"duration_zero\", since = \"1.53.0\")]\n     pub const ZERO: Duration = Duration::from_nanos(0);\n \n     /// The maximum duration.\n@@ -269,7 +268,6 @@ impl Duration {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(duration_zero)]\n     /// use std::time::Duration;\n     ///\n     /// assert!(Duration::ZERO.is_zero());\n@@ -281,7 +279,8 @@ impl Duration {\n     /// assert!(!Duration::from_nanos(1).is_zero());\n     /// assert!(!Duration::from_secs(1).is_zero());\n     /// ```\n-    #[unstable(feature = \"duration_zero\", issue = \"73544\")]\n+    #[stable(feature = \"duration_zero\", since = \"1.53.0\")]\n+    #[rustc_const_stable(feature = \"duration_zero\", since = \"1.53.0\")]\n     #[inline]\n     pub const fn is_zero(&self) -> bool {\n         self.secs == 0 && self.nanos == 0\n@@ -536,7 +535,6 @@ impl Duration {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(duration_zero)]\n     /// use std::time::Duration;\n     ///\n     /// assert_eq!(Duration::new(0, 1).saturating_sub(Duration::new(0, 0)), Duration::new(0, 1));"}, {"sha": "f6bfe67e1b12c9c7fff5d79aea2a32fba0d7be7f", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -24,7 +24,6 @@\n #![feature(div_duration)]\n #![feature(duration_consts_2)]\n #![feature(duration_constants)]\n-#![feature(duration_zero)]\n #![feature(exact_size_is_empty)]\n #![feature(extern_types)]\n #![feature(flt2dec)]\n@@ -67,7 +66,6 @@\n #![feature(ptr_metadata)]\n #![feature(once_cell)]\n #![feature(unsized_tuple_coercion)]\n-#![feature(nonzero_leading_trailing_zeros)]\n #![feature(const_option)]\n #![feature(integer_atomics)]\n #![feature(slice_group_by)]"}, {"sha": "d8021d3e99a70b8c62625dd616e24f8ad752bfd5", "filename": "library/std/src/io/buffered/bufreader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -234,7 +234,7 @@ impl<R: Seek> BufReader<R> {\n     /// the buffer will not be flushed, allowing for more efficient seeks.\n     /// This method does not return the location of the underlying reader, so the caller\n     /// must track this information themselves if it is required.\n-    #[unstable(feature = \"bufreader_seek_relative\", issue = \"31100\")]\n+    #[stable(feature = \"bufreader_seek_relative\", since = \"1.53.0\")]\n     pub fn seek_relative(&mut self, offset: i64) -> io::Result<()> {\n         let pos = self.pos as u64;\n         if offset < 0 {"}, {"sha": "39ed62425cecf9e150362bb6b4be392bd7e94b54", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -1768,6 +1768,7 @@ mod super_keyword {}\n /// In the 2015 edition the parameters pattern was not needed for traits:\n ///\n /// ```rust,edition2015\n+/// # #![allow(anonymous_parameters)]\n /// trait Tr {\n ///     fn f(i32);\n /// }"}, {"sha": "90603cd983677170eec54427e938a6b92fe20fc4", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -261,7 +261,6 @@\n #![cfg_attr(not(bootstrap), feature(doc_notable_trait))]\n #![feature(dropck_eyepatch)]\n #![feature(duration_constants)]\n-#![feature(duration_zero)]\n #![feature(edition_panic)]\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]"}, {"sha": "ac0d74cbbb9d009cabec9f4a6b9d5c0ec0c4b172", "filename": "src/librustdoc/passes/bare_urls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -73,6 +73,7 @@ impl<'a, 'tcx> DocFolder for BareUrlsLinter<'a, 'tcx> {\n                     .unwrap_or(item.span.inner());\n                 cx.tcx.struct_span_lint_hir(crate::lint::BARE_URLS, hir_id, sp, |lint| {\n                     lint.build(msg)\n+                        .note(\"bare URLs are not automatically turned into clickable links\")\n                         .span_suggestion(\n                             sp,\n                             \"use an automatic link instead\","}, {"sha": "7097a8ddf3a797b7529ca10ec526b2d361de3ede", "filename": "src/test/rustdoc-ui/bare-urls.stderr", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Frustdoc-ui%2Fbare-urls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Frustdoc-ui%2Fbare-urls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fbare-urls.stderr?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -9,102 +9,135 @@ note: the lint level is defined here\n    |\n LL | #![deny(rustdoc::bare_urls)]\n    |         ^^^^^^^^^^^^^^^^^^\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:7:5\n    |\n LL | /// https://somewhere.com/a\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com/a>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:9:5\n    |\n LL | /// https://www.somewhere.com\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://www.somewhere.com>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:11:5\n    |\n LL | /// https://www.somewhere.com/a\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://www.somewhere.com/a>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:13:5\n    |\n LL | /// https://subdomain.example.com\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://subdomain.example.com>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:15:5\n    |\n LL | /// https://somewhere.com?\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com?>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:17:5\n    |\n LL | /// https://somewhere.com/a?\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com/a?>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:19:5\n    |\n LL | /// https://somewhere.com?hello=12\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com?hello=12>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:21:5\n    |\n LL | /// https://somewhere.com/a?hello=12\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com/a?hello=12>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:23:5\n    |\n LL | /// https://example.com?hello=12#xyz\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://example.com?hello=12#xyz>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:25:5\n    |\n LL | /// https://example.com/a?hello=12#xyz\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://example.com/a?hello=12#xyz>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:27:5\n    |\n LL | /// https://example.com#xyz\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://example.com#xyz>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:29:5\n    |\n LL | /// https://example.com/a#xyz\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://example.com/a#xyz>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:31:5\n    |\n LL | /// https://somewhere.com?hello=12&bye=11\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com?hello=12&bye=11>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:33:5\n    |\n LL | /// https://somewhere.com/a?hello=12&bye=11\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com/a?hello=12&bye=11>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:35:5\n    |\n LL | /// https://somewhere.com?hello=12&bye=11#xyz\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com?hello=12&bye=11#xyz>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:37:10\n    |\n LL | /// hey! https://somewhere.com/a?hello=12&bye=11#xyz\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com/a?hello=12&bye=11#xyz>`\n+   |\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: aborting due to 17 previous errors\n "}, {"sha": "3040cad532c826ec4f7ce9d461f15baa9d26f06b", "filename": "src/test/rustdoc-ui/renamed-lint-still-applies.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.stderr?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -31,6 +31,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(rustdoc::non_autolinks)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: bare URLs are not automatically turned into clickable links\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "6936205f8b96daf9dfaddc1770de24238cecf7aa", "filename": "src/test/ui/anon-params/anon-params-edition-hygiene.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-edition-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-edition-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-edition-hygiene.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -2,6 +2,9 @@\n // edition:2018\n // aux-build:anon-params-edition-hygiene.rs\n \n+// This warning is still surfaced\n+#![allow(anonymous_parameters)]\n+\n #[macro_use]\n extern crate anon_params_edition_hygiene;\n "}, {"sha": "2576d1124c85c8bcbbc2a86b0b7538aac17ff721", "filename": "src/test/ui/asm/naked-invalid-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -1,6 +1,6 @@\n // Checks that #[naked] attribute can be placed on function definitions only.\n //\n-// ignore-wasm32 asm unsupported\n+// needs-asm-support\n #![feature(asm)]\n #![feature(naked_functions)]\n #![naked] //~ ERROR should be applied to a function definition"}, {"sha": "c8ee6ad61ec7304ab78d6837bb24486dea612522", "filename": "src/test/ui/const-generics/diagnostics.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -31,9 +31,12 @@ error[E0747]: type provided when a constant was expected\n   --> $DIR/diagnostics.rs:12:19\n    |\n LL | impl<N> Foo for B<N> {}\n-   |      -            ^\n-   |      |\n-   |      help: consider changing this type paramater to a `const`-generic: `const N: u8`\n+   |                   ^\n+   |\n+help: consider changing this type parameter to be a `const` generic\n+   |\n+LL | impl<const N: u8> Foo for B<N> {}\n+   |      ^^^^^^^^^^^\n \n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/diagnostics.rs:16:32"}, {"sha": "2ccc5d27bbb781f5fc5138dc79a25e76c60bcaeb", "filename": "src/test/ui/consts/const-int-unchecked.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -186,4 +186,13 @@ const _: i32 = unsafe { std::intrinsics::unchecked_rem(i32::MIN, -1) };\n //~^ ERROR any use of this value will cause an error\n //~| WARN this was previously accepted by the compiler but is being phased out\n \n+// capture fault with zero value\n+\n+const _: u32 = unsafe { std::intrinsics::ctlz_nonzero(0) };\n+//~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n+const _: u32 = unsafe { std::intrinsics::cttz_nonzero(0) };\n+//~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n+\n fn main() {}"}, {"sha": "999b26543e2d51041141ecb42ad24186ba38c703", "filename": "src/test/ui/consts/const-int-unchecked.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -516,5 +516,27 @@ LL | const _: i32 = unsafe { std::intrinsics::unchecked_rem(i32::MIN, -1) };\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: aborting due to 47 previous errors\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:191:25\n+   |\n+LL | const _: u32 = unsafe { std::intrinsics::ctlz_nonzero(0) };\n+   | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                         |\n+   |                         `ctlz_nonzero` called on 0\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:194:25\n+   |\n+LL | const _: u32 = unsafe { std::intrinsics::cttz_nonzero(0) };\n+   | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                         |\n+   |                         `cttz_nonzero` called on 0\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 49 previous errors\n "}, {"sha": "71ca5b9373a68cec00246844f6d6ba954100c936", "filename": "src/test/ui/feature-gates/feature-gate-naked_functions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -1,3 +1,4 @@\n+// needs-asm-support\n #![feature(asm)]\n \n #[naked]"}, {"sha": "653d7b738da1a21250423c237454fb0f48e4c8e7", "filename": "src/test/ui/feature-gates/feature-gate-naked_functions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the `#[naked]` attribute is an experimental feature\n-  --> $DIR/feature-gate-naked_functions.rs:3:1\n+  --> $DIR/feature-gate-naked_functions.rs:4:1\n    |\n LL | #[naked]\n    | ^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #[naked]\n    = help: add `#![feature(naked_functions)]` to the crate attributes to enable\n \n error[E0658]: the `#[naked]` attribute is an experimental feature\n-  --> $DIR/feature-gate-naked_functions.rs:9:1\n+  --> $DIR/feature-gate-naked_functions.rs:10:1\n    |\n LL | #[naked]\n    | ^^^^^^^^"}, {"sha": "37348e476d408fea0b020d13585ce7c5314046aa", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -12,7 +12,7 @@ trait NonObjectSafe3 {\n }\n \n trait NonObjectSafe4 {\n-    fn foo(&self, &Self);\n+    fn foo(&self, s: &Self);\n }\n \n fn takes_non_object_safe_ref<T>(obj: &dyn NonObjectSafe1) {"}, {"sha": "12195bc1071a08144f9eb6851e0eb96a63a8e2d4", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -57,12 +57,12 @@ LL | fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n    |\n    = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/feature-gate-object_safe_for_dispatch.rs:15:19\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:15:22\n    |\n LL | trait NonObjectSafe4 {\n    |       -------------- this trait cannot be made into an object...\n-LL |     fn foo(&self, &Self);\n-   |                   ^^^^^ ...because method `foo` references the `Self` type in this parameter\n+LL |     fn foo(&self, s: &Self);\n+   |                      ^^^^^ ...because method `foo` references the `Self` type in this parameter\n \n error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:38:16"}, {"sha": "4cdb9f491130c56c4b16de31d78de8009d85956b", "filename": "src/test/ui/issues/issue-78720.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fissues%2Fissue-78720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fissues%2Fissue-78720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78720.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -4,7 +4,7 @@ fn server() -> impl {\n }\n \n trait FilterBase2 {\n-    fn map2<F>(self, F) -> Map2<F> {}\n+    fn map2<F>(self, f: F) -> Map2<F> {}\n     //~^ ERROR mismatched types\n     //~^^ ERROR the size for values of type `Self` cannot be known at compilation time\n }"}, {"sha": "ee15826d189417733605d84161cccb0924275ad5", "filename": "src/test/ui/issues/issue-78720.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fissues%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fissues%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78720.stderr?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -25,28 +25,28 @@ LL | struct Map2<Segment2, F> {\n    |                     ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-78720.rs:7:36\n+  --> $DIR/issue-78720.rs:7:39\n    |\n-LL |     fn map2<F>(self, F) -> Map2<F> {}\n-   |                                    ^^ expected struct `Map2`, found `()`\n+LL |     fn map2<F>(self, f: F) -> Map2<F> {}\n+   |                                       ^^ expected struct `Map2`, found `()`\n    |\n    = note: expected struct `Map2<F>`\n            found unit type `()`\n \n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/issue-78720.rs:7:16\n    |\n-LL |     fn map2<F>(self, F) -> Map2<F> {}\n+LL |     fn map2<F>(self, f: F) -> Map2<F> {}\n    |                ^^^^ doesn't have a size known at compile-time\n    |\n    = help: unsized fn params are gated as an unstable feature\n help: consider further restricting `Self`\n    |\n-LL |     fn map2<F>(self, F) -> Map2<F> where Self: Sized {}\n-   |                                    ^^^^^^^^^^^^^^^^^\n+LL |     fn map2<F>(self, f: F) -> Map2<F> where Self: Sized {}\n+   |                                       ^^^^^^^^^^^^^^^^^\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL |     fn map2<F>(&self, F) -> Map2<F> {}\n+LL |     fn map2<F>(&self, f: F) -> Map2<F> {}\n    |                ^\n \n error: aborting due to 4 previous errors"}, {"sha": "0f20073591598dc13ef724ac434e98ea7a90be75", "filename": "src/test/ui/parser/issue-84117.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fparser%2Fissue-84117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fparser%2Fissue-84117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84117.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+    //~^ ERROR expected one of `>`, a const expression\n+    //~| ERROR expected one of `>`, a const expression, lifetime, or type, found `}`\n+    //~| ERROR expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n+    //~| ERROR expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n+    //~| ERROR expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n+}\n+//~^ ERROR expected one of `,`, `:`, `=`, or `>`, found `}`"}, {"sha": "d667a4977d0d31a815ed0b6aa2da6491ce660575", "filename": "src/test/ui/parser/issue-84117.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fparser%2Fissue-84117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fparser%2Fissue-84117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84117.stderr?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -0,0 +1,49 @@\n+error: expected one of `>`, a const expression, lifetime, or type, found `}`\n+  --> $DIR/issue-84117.rs:2:67\n+   |\n+LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+   |                                         ------------              ^ expected one of `>`, a const expression, lifetime, or type\n+   |                                         |          |\n+   |                                         |          help: use `=` if you meant to assign\n+   |                                         while parsing the type for `inner_local`\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n+  --> $DIR/issue-84117.rs:2:65\n+   |\n+LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+   |                                                                 ^ expected one of 7 possible tokens\n+\n+error: expected one of `,`, `:`, `=`, or `>`, found `}`\n+  --> $DIR/issue-84117.rs:8:1\n+   |\n+LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+   |         ------------ help: use `=` if you meant to assign          - expected one of `,`, `:`, `=`, or `>`\n+   |         |\n+   |         while parsing the type for `outer_local`\n+...\n+LL | }\n+   | ^ unexpected token\n+\n+error: expected one of `>`, a const expression, lifetime, or type, found `}`\n+  --> $DIR/issue-84117.rs:2:67\n+   |\n+LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+   |                                         ------------              ^ expected one of `>`, a const expression, lifetime, or type\n+   |                                         |          |\n+   |                                         |          help: use `=` if you meant to assign\n+   |                                         while parsing the type for `inner_local`\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n+  --> $DIR/issue-84117.rs:2:65\n+   |\n+LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+   |                                                                 ^ expected one of 7 possible tokens\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n+  --> $DIR/issue-84117.rs:2:33\n+   |\n+LL |     let outer_local:e_outer<&str, { let inner_local:e_inner<&str, }\n+   |                                 ^ expected one of 7 possible tokens\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "fe993a6ee13022167ee79b5ea32bb4329145423a", "filename": "src/test/ui/parser/variadic-ffi-semantic-restrictions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -1,4 +1,5 @@\n #![feature(c_variadic)]\n+#![allow(anonymous_parameters)]\n \n fn main() {}\n "}, {"sha": "10fd05c0bef3feaef4e8b811a5deb790f1ca91f9", "filename": "src/test/ui/parser/variadic-ffi-semantic-restrictions.stderr", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -1,203 +1,203 @@\n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:5:19\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:6:19\n    |\n LL | fn f1_1(x: isize, ...) {}\n    |                   ^^^\n \n error: C-variadic function must be declared with at least one named argument\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:8:9\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:9:9\n    |\n LL | fn f1_2(...) {}\n    |         ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:8:9\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:9:9\n    |\n LL | fn f1_2(...) {}\n    |         ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:12:30\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:13:30\n    |\n LL | extern \"C\" fn f2_1(x: isize, ...) {}\n    |                              ^^^\n \n error: C-variadic function must be declared with at least one named argument\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:15:20\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:16:20\n    |\n LL | extern \"C\" fn f2_2(...) {}\n    |                    ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:15:20\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:16:20\n    |\n LL | extern \"C\" fn f2_2(...) {}\n    |                    ^^^\n \n error: `...` must be the last argument of a C-variadic function\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:19:20\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:20:20\n    |\n LL | extern \"C\" fn f2_3(..., x: isize) {}\n    |                    ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:19:20\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:20:20\n    |\n LL | extern \"C\" fn f2_3(..., x: isize) {}\n    |                    ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:23:30\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:24:30\n    |\n LL | extern \"C\" fn f3_1(x: isize, ...) {}\n    |                              ^^^\n \n error: C-variadic function must be declared with at least one named argument\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:26:20\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:27:20\n    |\n LL | extern \"C\" fn f3_2(...) {}\n    |                    ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:26:20\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:27:20\n    |\n LL | extern \"C\" fn f3_2(...) {}\n    |                    ^^^\n \n error: `...` must be the last argument of a C-variadic function\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:30:20\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:31:20\n    |\n LL | extern \"C\" fn f3_3(..., x: isize) {}\n    |                    ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:30:20\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:31:20\n    |\n LL | extern \"C\" fn f3_3(..., x: isize) {}\n    |                    ^^^\n \n error: C-variadic function must be declared with at least one named argument\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:35:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:36:13\n    |\n LL |     fn e_f1(...);\n    |             ^^^\n \n error: `...` must be the last argument of a C-variadic function\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:37:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:38:13\n    |\n LL |     fn e_f2(..., x: isize);\n    |             ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:44:23\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:45:23\n    |\n LL |     fn i_f1(x: isize, ...) {}\n    |                       ^^^\n \n error: C-variadic function must be declared with at least one named argument\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:46:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:47:13\n    |\n LL |     fn i_f2(...) {}\n    |             ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:46:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:47:13\n    |\n LL |     fn i_f2(...) {}\n    |             ^^^\n \n error: `...` must be the last argument of a C-variadic function\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:49:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:50:13\n    |\n LL |     fn i_f3(..., x: isize, ...) {}\n    |             ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:49:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:50:13\n    |\n LL |     fn i_f3(..., x: isize, ...) {}\n    |             ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:49:28\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:50:28\n    |\n LL |     fn i_f3(..., x: isize, ...) {}\n    |                            ^^^\n \n error: `...` must be the last argument of a C-variadic function\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:53:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:54:13\n    |\n LL |     fn i_f4(..., x: isize, ...) {}\n    |             ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:53:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:54:13\n    |\n LL |     fn i_f4(..., x: isize, ...) {}\n    |             ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:53:28\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:54:28\n    |\n LL |     fn i_f4(..., x: isize, ...) {}\n    |                            ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:60:23\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:61:23\n    |\n LL |     fn t_f1(x: isize, ...) {}\n    |                       ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:62:23\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:63:23\n    |\n LL |     fn t_f2(x: isize, ...);\n    |                       ^^^\n \n error: C-variadic function must be declared with at least one named argument\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:64:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:65:13\n    |\n LL |     fn t_f3(...) {}\n    |             ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:64:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:65:13\n    |\n LL |     fn t_f3(...) {}\n    |             ^^^\n \n error: C-variadic function must be declared with at least one named argument\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:67:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:68:13\n    |\n LL |     fn t_f4(...);\n    |             ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:67:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:68:13\n    |\n LL |     fn t_f4(...);\n    |             ^^^\n \n error: `...` must be the last argument of a C-variadic function\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:70:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:71:13\n    |\n LL |     fn t_f5(..., x: isize) {}\n    |             ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:70:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:71:13\n    |\n LL |     fn t_f5(..., x: isize) {}\n    |             ^^^\n \n error: `...` must be the last argument of a C-variadic function\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:73:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:74:13\n    |\n LL |     fn t_f6(..., x: isize);\n    |             ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:73:13\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:74:13\n    |\n LL |     fn t_f6(..., x: isize);\n    |             ^^^"}, {"sha": "6b8df78a061c7194339b14e8d530559a2abdce92", "filename": "src/test/ui/proc-macro/trait-fn-args-2015.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fproc-macro%2Ftrait-fn-args-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fproc-macro%2Ftrait-fn-args-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Ftrait-fn-args-2015.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -3,6 +3,8 @@\n // check-pass\n // aux-build:test-macros.rs\n \n+#![allow(anonymous_parameters)]\n+\n #[macro_use]\n extern crate test_macros;\n "}, {"sha": "9464ffe8722825bfef725b4706c8667fcbc29754", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -1,3 +1,4 @@\n+// needs-asm-support\n #![feature(asm, naked_functions)]\n \n #[track_caller] //~ ERROR cannot use `#[track_caller]` with `#[naked]`"}, {"sha": "5f17d6b2b5173b5f68caaefdb3a58c3fdc4480f6", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -1,11 +1,11 @@\n error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n-  --> $DIR/error-with-naked.rs:3:1\n+  --> $DIR/error-with-naked.rs:4:1\n    |\n LL | #[track_caller]\n    | ^^^^^^^^^^^^^^^\n \n error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n-  --> $DIR/error-with-naked.rs:12:5\n+  --> $DIR/error-with-naked.rs:13:5\n    |\n LL |     #[track_caller]\n    |     ^^^^^^^^^^^^^^^"}, {"sha": "54f2f451bbe53d6396f7f953ad5bdadadb6e4b01", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -1,6 +1,7 @@\n // aux-build:ident-mac.rs\n \n #![feature(c_variadic)]\n+#![allow(anonymous_parameters)]\n \n extern crate ident_mac;\n use ident_mac::id;"}, {"sha": "e74d05d49b8d722b97c508bcce301a524f76cc4f", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -1,173 +1,173 @@\n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:10:23\n+  --> $DIR/proc-macro-cannot-be-used.rs:11:23\n    |\n LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n    |                       ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:10:40\n+  --> $DIR/proc-macro-cannot-be-used.rs:11:40\n    |\n LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n    |                                        ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:14:40\n+  --> $DIR/proc-macro-cannot-be-used.rs:15:40\n    |\n LL | unsafe extern \"C\" fn cvar(arg1: i32, #[id] mut args: ...) {}\n    |                                        ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:17:30\n+  --> $DIR/proc-macro-cannot-be-used.rs:18:30\n    |\n LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n    |                              ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:17:40\n+  --> $DIR/proc-macro-cannot-be-used.rs:18:40\n    |\n LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n    |                                        ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:21:11\n+  --> $DIR/proc-macro-cannot-be-used.rs:22:11\n    |\n LL | fn free(#[id] arg1: u8) {\n    |           ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:23:18\n+  --> $DIR/proc-macro-cannot-be-used.rs:24:18\n    |\n LL |     let lam = |#[id] W(x), #[id] y: usize| ();\n    |                  ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:23:30\n+  --> $DIR/proc-macro-cannot-be-used.rs:24:30\n    |\n LL |     let lam = |#[id] W(x), #[id] y: usize| ();\n    |                              ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:29:20\n+  --> $DIR/proc-macro-cannot-be-used.rs:30:20\n    |\n LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n    |                    ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:29:32\n+  --> $DIR/proc-macro-cannot-be-used.rs:30:32\n    |\n LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n    |                                ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:32:20\n+  --> $DIR/proc-macro-cannot-be-used.rs:33:20\n    |\n LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n    |                    ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:32:33\n+  --> $DIR/proc-macro-cannot-be-used.rs:33:33\n    |\n LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n    |                                 ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:35:24\n+  --> $DIR/proc-macro-cannot-be-used.rs:36:24\n    |\n LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n    |                        ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:35:44\n+  --> $DIR/proc-macro-cannot-be-used.rs:36:44\n    |\n LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n    |                                            ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:38:24\n+  --> $DIR/proc-macro-cannot-be-used.rs:39:24\n    |\n LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n    |                        ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:38:47\n+  --> $DIR/proc-macro-cannot-be-used.rs:39:47\n    |\n LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n    |                                               ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:41:40\n+  --> $DIR/proc-macro-cannot-be-used.rs:42:40\n    |\n LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8) {}\n    |                                        ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:41:56\n+  --> $DIR/proc-macro-cannot-be-used.rs:42:56\n    |\n LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8) {}\n    |                                                        ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:47:17\n+  --> $DIR/proc-macro-cannot-be-used.rs:48:17\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n    |                 ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:47:29\n+  --> $DIR/proc-macro-cannot-be-used.rs:48:29\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n    |                             ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:50:17\n+  --> $DIR/proc-macro-cannot-be-used.rs:51:17\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n    |                 ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:50:30\n+  --> $DIR/proc-macro-cannot-be-used.rs:51:30\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n    |                              ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:53:21\n+  --> $DIR/proc-macro-cannot-be-used.rs:54:21\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n    |                     ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:53:41\n+  --> $DIR/proc-macro-cannot-be-used.rs:54:41\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n    |                                         ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:56:21\n+  --> $DIR/proc-macro-cannot-be-used.rs:57:21\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                     ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:56:44\n+  --> $DIR/proc-macro-cannot-be-used.rs:57:44\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                                            ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:56:60\n+  --> $DIR/proc-macro-cannot-be-used.rs:57:60\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                                                            ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:60:40\n+  --> $DIR/proc-macro-cannot-be-used.rs:61:40\n    |\n LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8);\n    |                                        ^^ not a non-macro attribute\n \n error: expected non-macro attribute, found attribute macro `id`\n-  --> $DIR/proc-macro-cannot-be-used.rs:60:56\n+  --> $DIR/proc-macro-cannot-be-used.rs:61:56\n    |\n LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8);\n    |                                                        ^^ not a non-macro attribute"}, {"sha": "a15c4bd6b7ffcf522d3827b4806d68299d76ef64", "filename": "src/test/ui/specialization/issue-39448.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -18,7 +18,7 @@ impl FromA<u8> for u16 {\n }\n \n trait FromA<T> {\n-    fn from(T) -> Self;\n+    fn from(t: T) -> Self;\n }\n \n impl<T: A, U: A + FromA<T>> FromA<T> for U {"}, {"sha": "7645311496d8ccb138724bd9a7d1cdfbad6d4313", "filename": "src/test/ui/typeck/issue-65611.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -17,7 +17,7 @@ pub unsafe trait Array {\n \n pub trait Index : PartialEq + Copy {\n     fn to_usize(self) -> usize;\n-    fn from(usize) -> Self;\n+    fn from(i: usize) -> Self;\n }\n \n impl Index for usize {"}, {"sha": "363105a9f09c04079ce8a8d4f84a20465640eba0", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -44,6 +44,7 @@ impl EarlyProps {\n         let mut props = EarlyProps::default();\n         let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n         let rustc_has_sanitizer_support = env::var_os(\"RUSTC_SANITIZER_SUPPORT\").is_some();\n+        let has_asm_support = util::has_asm_support(&config.target);\n         let has_asan = util::ASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n         let has_lsan = util::LSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n         let has_msan = util::MSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n@@ -76,6 +77,10 @@ impl EarlyProps {\n                     props.ignore = true;\n                 }\n \n+                if !has_asm_support && config.parse_name_directive(ln, \"needs-asm-support\") {\n+                    props.ignore = true;\n+                }\n+\n                 if !rustc_has_profiler_support && config.parse_needs_profiler_support(ln) {\n                     props.ignore = true;\n                 }"}, {"sha": "c41b43cdd0b53c34283c0226dd5c48788cadf9ee", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -223,6 +223,17 @@ fn sanitizers() {\n     assert!(parse_rs(&config, \"// needs-sanitizer-thread\").ignore);\n }\n \n+#[test]\n+fn asm_support() {\n+    let mut config = config();\n+\n+    config.target = \"avr-unknown-gnu-atmega328\".to_owned();\n+    assert!(parse_rs(&config, \"// needs-asm-support\").ignore);\n+\n+    config.target = \"i686-unknown-netbsd\".to_owned();\n+    assert!(!parse_rs(&config, \"// needs-asm-support\").ignore);\n+}\n+\n #[test]\n fn test_extract_version_range() {\n     use super::{extract_llvm_version, extract_version_range};"}, {"sha": "7dbd70948b84d87a1b834ed10b3dee992153760a", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff47e978383e86f7e97174840e37f64ea1d72bce/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=ff47e978383e86f7e97174840e37f64ea1d72bce", "patch": "@@ -128,6 +128,15 @@ const BIG_ENDIAN: &[&str] = &[\n     \"sparcv9\",\n ];\n \n+static ASM_SUPPORTED_ARCHS: &[&str] = &[\n+    \"x86\", \"x86_64\", \"arm\", \"aarch64\", \"riscv32\", \"riscv64\", \"nvptx64\", \"hexagon\", \"mips\",\n+    \"mips64\", \"spirv\", \"wasm32\",\n+];\n+\n+pub fn has_asm_support(triple: &str) -> bool {\n+    ASM_SUPPORTED_ARCHS.contains(&get_arch(triple))\n+}\n+\n pub fn matches_os(triple: &str, name: &str) -> bool {\n     // For the wasm32 bare target we ignore anything also ignored on emscripten\n     // and then we also recognize `wasm32-bare` as the os for the target"}]}