{"sha": "90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZGU5ZWRjZTU3NmQwM2JkNmU3ZTVkMjk0ZmE0NGQ4ZDFlZjhhNWE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-24T07:55:11Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-24T07:55:11Z"}, "message": "HIR: remove the NodeId find", "tree": {"sha": "c199d524760b5a905b0b2b885659da7b1fe244bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c199d524760b5a905b0b2b885659da7b1fe244bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a", "html_url": "https://github.com/rust-lang/rust/commit/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "url": "https://api.github.com/repos/rust-lang/rust/commits/d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "html_url": "https://github.com/rust-lang/rust/commit/d08bd72e977d05f7fe6d1140e10d7311f64f0f21"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "ea18a73577cf069fc975cf5991c962d8f8b42acf", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a", "patch": "@@ -595,12 +595,6 @@ impl<'hir> Map<'hir> {\n     }\n \n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n-    pub fn find(&self, id: NodeId) -> Option<Node<'hir>> {\n-        let hir_id = self.node_to_hir_id(id);\n-        self.find_by_hir_id(hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn find_by_hir_id(&self, hir_id: HirId) -> Option<Node<'hir>> {\n         let result = self.find_entry(hir_id).and_then(|entry| {\n             if let Node::Crate = entry.node {"}, {"sha": "ff0e6aacef138061bf1ba87f9d4d84208e9ebce3", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a", "patch": "@@ -907,11 +907,11 @@ fn print_with_analysis<'tcx>(\n             let nodeid =\n                 nodeid.expect(\"`pretty flowgraph=..` needs NodeId (int) or unique path \\\n                                 suffix (b::c::d)\");\n-            let node = tcx.hir().find(nodeid).unwrap_or_else(|| {\n+            let hir_id = tcx.hir().node_to_hir_id(nodeid);\n+            let node = tcx.hir().find_by_hir_id(hir_id).unwrap_or_else(|| {\n                 tcx.sess.fatal(&format!(\"--pretty flowgraph couldn't find id: {}\", nodeid))\n             });\n \n-            let hir_id = tcx.hir().node_to_hir_id(nodeid);\n             match blocks::Code::from_node(&tcx.hir(), hir_id) {\n                 Some(code) => {\n                     let variants = gather_flowgraph_variants(tcx.sess);"}, {"sha": "1cc15ca484eca1b47c7053d8ce98021cd1651e00", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a", "patch": "@@ -552,7 +552,6 @@ where\n         .into_iter()\n         .flatten()\n         .map(|(&var_hir_id, &upvar_id)| {\n-            let var_node_id = tcx_hir.hir_to_node_id(var_hir_id);\n             let capture = hir_tables.upvar_capture(upvar_id);\n             let by_ref = match capture {\n                 ty::UpvarCapture::ByValue => false,\n@@ -563,7 +562,7 @@ where\n                 by_ref,\n             };\n             let mut mutability = Mutability::Not;\n-            if let Some(Node::Binding(pat)) = tcx_hir.find(var_node_id) {\n+            if let Some(Node::Binding(pat)) = tcx_hir.find_by_hir_id(var_hir_id) {\n                 if let hir::PatKind::Binding(_, _, ident, _) = pat.node {\n                     debuginfo.debug_name = ident.name;\n                     if let Some(&bm) = hir.tables.pat_binding_modes().get(pat.hir_id) {"}, {"sha": "3d88b2347c17a3ed02b67e59fd62d8ed82dfd755", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a", "patch": "@@ -410,7 +410,10 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                             let mut decl_id = None;\n                             let mut docs = String::new();\n                             let mut attrs = vec![];\n-                            if let Some(Node::ImplItem(item)) = self.tcx.hir().find(id) {\n+                            let hir_id = self.tcx.hir().node_to_hir_id(id);\n+                            if let Some(Node::ImplItem(item)) =\n+                                self.tcx.hir().find_by_hir_id(hir_id)\n+                            {\n                                 docs = self.docs_for_attrs(&item.attrs);\n                                 attrs = item.attrs.to_vec();\n                             }\n@@ -451,8 +454,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     Some(def_id) => {\n                         let mut docs = String::new();\n                         let mut attrs = vec![];\n+                        let hir_id = self.tcx.hir().node_to_hir_id(id);\n \n-                        if let Some(Node::TraitItem(item)) = self.tcx.hir().find(id) {\n+                        if let Some(Node::TraitItem(item)) = self.tcx.hir().find_by_hir_id(hir_id) {\n                             docs = self.docs_for_attrs(&item.attrs);\n                             attrs = item.attrs.to_vec();\n                         }\n@@ -521,7 +525,8 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         }\n         match expr.node {\n             ast::ExprKind::Field(ref sub_ex, ident) => {\n-                let hir_node = match self.tcx.hir().find(sub_ex.id) {\n+                let sub_ex_hir_id = self.tcx.hir().node_to_hir_id(sub_ex.id);\n+                let hir_node = match self.tcx.hir().find_by_hir_id(sub_ex_hir_id) {\n                     Some(Node::Expr(expr)) => expr,\n                     _ => {\n                         debug!("}]}