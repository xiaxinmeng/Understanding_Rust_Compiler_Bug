{"sha": "05bbb480a22d1f752f95591b41b584018966b136", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YmJiNDgwYTIyZDFmNzUyZjk1NTkxYjQxYjU4NDAxODk2NmIxMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-13T18:45:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-13T18:45:56Z"}, "message": "auto merge of #9170 : alexcrichton/rust/flaky-fileinput, r=erickt\n\nThe glob tests cannot change the current working directory because the other tests (namely the fileinput ones) depend on the current working directory not changing.", "tree": {"sha": "5bb94bf48e12dcf12587cf66adc3bd69058ad795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb94bf48e12dcf12587cf66adc3bd69058ad795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05bbb480a22d1f752f95591b41b584018966b136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05bbb480a22d1f752f95591b41b584018966b136", "html_url": "https://github.com/rust-lang/rust/commit/05bbb480a22d1f752f95591b41b584018966b136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05bbb480a22d1f752f95591b41b584018966b136/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c8f503ac543e0ffe18986b8d6f8548df21cefa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8f503ac543e0ffe18986b8d6f8548df21cefa3", "html_url": "https://github.com/rust-lang/rust/commit/7c8f503ac543e0ffe18986b8d6f8548df21cefa3"}, {"sha": "a7215dd284a1d2e15ecbe0c71b7c978fcba5e3ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7215dd284a1d2e15ecbe0c71b7c978fcba5e3ec", "html_url": "https://github.com/rust-lang/rust/commit/a7215dd284a1d2e15ecbe0c71b7c978fcba5e3ec"}], "stats": {"total": 391, "additions": 203, "deletions": 188}, "files": [{"sha": "2cd0fdd4edeb802e7deec24f3b77c5cb0e9d730a", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 0, "deletions": 188, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/05bbb480a22d1f752f95591b41b584018966b136/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05bbb480a22d1f752f95591b41b584018966b136/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=05bbb480a22d1f752f95591b41b584018966b136", "patch": "@@ -516,194 +516,6 @@ mod test {\n     use super::*;\n     use tempfile;\n \n-    #[test]\n-    fn test_relative_pattern() {\n-\n-        fn change_then_remove(p: &Path, f: &fn()) {\n-            do (|| {\n-                unstable::change_dir_locked(p, || f());\n-            }).finally {\n-                os::remove_dir_recursive(p);\n-            }\n-        }\n-\n-        fn mk_file(path: &str, directory: bool) {\n-            if directory {\n-                os::make_dir(&Path(path), 0xFFFF);\n-            } else {\n-                io::mk_file_writer(&Path(path), [io::Create]);\n-            }\n-        }\n-\n-        fn abs_path(path: &str) -> Path {\n-            os::getcwd().push_many(Path(path).components)\n-        }\n-\n-        fn glob_vec(pattern: &str) -> ~[Path] {\n-            glob(pattern).collect()\n-        }\n-\n-        let root = tempfile::mkdtemp(&os::tmpdir(), \"glob-tests\");\n-        let root = root.expect(\"Should have created a temp directory\");\n-\n-        do change_then_remove(&root) {\n-\n-            mk_file(\"aaa\", true);\n-            mk_file(\"aaa/apple\", true);\n-            mk_file(\"aaa/orange\", true);\n-            mk_file(\"aaa/tomato\", true);\n-            mk_file(\"aaa/tomato/tomato.txt\", false);\n-            mk_file(\"aaa/tomato/tomoto.txt\", false);\n-            mk_file(\"bbb\", true);\n-            mk_file(\"bbb/specials\", true);\n-            mk_file(\"bbb/specials/!\", false);\n-\n-            // windows does not allow `*` or `?` characters to exist in filenames\n-            if os::consts::FAMILY != os::consts::windows::FAMILY {\n-                mk_file(\"bbb/specials/*\", false);\n-                mk_file(\"bbb/specials/?\", false);\n-            }\n-\n-            mk_file(\"bbb/specials/[\", false);\n-            mk_file(\"bbb/specials/]\", false);\n-            mk_file(\"ccc\", true);\n-            mk_file(\"xyz\", true);\n-            mk_file(\"xyz/x\", false);\n-            mk_file(\"xyz/y\", false);\n-            mk_file(\"xyz/z\", false);\n-\n-            assert_eq!(glob_vec(\"\"), ~[]);\n-            assert_eq!(glob_vec(\".\"), ~[]);\n-            assert_eq!(glob_vec(\"..\"), ~[]);\n-\n-            assert_eq!(glob_vec(\"aaa\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"aaa/\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"a\"), ~[]);\n-            assert_eq!(glob_vec(\"aa\"), ~[]);\n-            assert_eq!(glob_vec(\"aaaa\"), ~[]);\n-\n-            assert_eq!(glob_vec(\"aaa/apple\"), ~[abs_path(\"aaa/apple\")]);\n-            assert_eq!(glob_vec(\"aaa/apple/nope\"), ~[]);\n-\n-            // windows should support both / and \\ as directory separators\n-            if os::consts::FAMILY == os::consts::windows::FAMILY {\n-                assert_eq!(glob_vec(\"aaa\\\\apple\"), ~[abs_path(\"aaa/apple\")]);\n-            }\n-\n-            assert_eq!(glob_vec(\"???/\"), ~[\n-                abs_path(\"aaa\"),\n-                abs_path(\"bbb\"),\n-                abs_path(\"ccc\"),\n-                abs_path(\"xyz\")]);\n-\n-            assert_eq!(glob_vec(\"aaa/tomato/tom?to.txt\"), ~[\n-                abs_path(\"aaa/tomato/tomato.txt\"),\n-                abs_path(\"aaa/tomato/tomoto.txt\")]);\n-\n-            assert_eq!(glob_vec(\"xyz/?\"), ~[\n-                abs_path(\"xyz/x\"),\n-                abs_path(\"xyz/y\"),\n-                abs_path(\"xyz/z\")]);\n-\n-            assert_eq!(glob_vec(\"a*\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"*a*\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"a*a\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"aaa*\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"*aaa\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"*aaa*\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"*a*a*a*\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"aaa*/\"), ~[abs_path(\"aaa\")]);\n-\n-            assert_eq!(glob_vec(\"aaa/*\"), ~[\n-                abs_path(\"aaa/apple\"),\n-                abs_path(\"aaa/orange\"),\n-                abs_path(\"aaa/tomato\")]);\n-\n-            assert_eq!(glob_vec(\"aaa/*a*\"), ~[\n-                abs_path(\"aaa/apple\"),\n-                abs_path(\"aaa/orange\"),\n-                abs_path(\"aaa/tomato\")]);\n-\n-            assert_eq!(glob_vec(\"*/*/*.txt\"), ~[\n-                abs_path(\"aaa/tomato/tomato.txt\"),\n-                abs_path(\"aaa/tomato/tomoto.txt\")]);\n-\n-            assert_eq!(glob_vec(\"*/*/t[aob]m?to[.]t[!y]t\"), ~[\n-                abs_path(\"aaa/tomato/tomato.txt\"),\n-                abs_path(\"aaa/tomato/tomoto.txt\")]);\n-\n-            assert_eq!(glob_vec(\"aa[a]\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"aa[abc]\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"a[bca]a\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"aa[b]\"), ~[]);\n-            assert_eq!(glob_vec(\"aa[xyz]\"), ~[]);\n-            assert_eq!(glob_vec(\"aa[]]\"), ~[]);\n-\n-            assert_eq!(glob_vec(\"aa[!b]\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"aa[!bcd]\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"a[!bcd]a\"), ~[abs_path(\"aaa\")]);\n-            assert_eq!(glob_vec(\"aa[!a]\"), ~[]);\n-            assert_eq!(glob_vec(\"aa[!abc]\"), ~[]);\n-\n-            assert_eq!(glob_vec(\"bbb/specials/[[]\"), ~[abs_path(\"bbb/specials/[\")]);\n-            assert_eq!(glob_vec(\"bbb/specials/!\"), ~[abs_path(\"bbb/specials/!\")]);\n-            assert_eq!(glob_vec(\"bbb/specials/[]]\"), ~[abs_path(\"bbb/specials/]\")]);\n-\n-            if os::consts::FAMILY != os::consts::windows::FAMILY {\n-                assert_eq!(glob_vec(\"bbb/specials/[*]\"), ~[abs_path(\"bbb/specials/*\")]);\n-                assert_eq!(glob_vec(\"bbb/specials/[?]\"), ~[abs_path(\"bbb/specials/?\")]);\n-            }\n-\n-            if os::consts::FAMILY == os::consts::windows::FAMILY {\n-\n-                assert_eq!(glob_vec(\"bbb/specials/[![]\"), ~[\n-                    abs_path(\"bbb/specials/!\"),\n-                    abs_path(\"bbb/specials/]\")]);\n-\n-                assert_eq!(glob_vec(\"bbb/specials/[!]]\"), ~[\n-                    abs_path(\"bbb/specials/!\"),\n-                    abs_path(\"bbb/specials/[\")]);\n-\n-                assert_eq!(glob_vec(\"bbb/specials/[!!]\"), ~[\n-                    abs_path(\"bbb/specials/[\"),\n-                    abs_path(\"bbb/specials/]\")]);\n-\n-            } else {\n-\n-                assert_eq!(glob_vec(\"bbb/specials/[![]\"), ~[\n-                    abs_path(\"bbb/specials/!\"),\n-                    abs_path(\"bbb/specials/*\"),\n-                    abs_path(\"bbb/specials/?\"),\n-                    abs_path(\"bbb/specials/]\")]);\n-\n-                assert_eq!(glob_vec(\"bbb/specials/[!]]\"), ~[\n-                    abs_path(\"bbb/specials/!\"),\n-                    abs_path(\"bbb/specials/*\"),\n-                    abs_path(\"bbb/specials/?\"),\n-                    abs_path(\"bbb/specials/[\")]);\n-\n-                assert_eq!(glob_vec(\"bbb/specials/[!!]\"), ~[\n-                    abs_path(\"bbb/specials/*\"),\n-                    abs_path(\"bbb/specials/?\"),\n-                    abs_path(\"bbb/specials/[\"),\n-                    abs_path(\"bbb/specials/]\")]);\n-\n-                assert_eq!(glob_vec(\"bbb/specials/[!*]\"), ~[\n-                    abs_path(\"bbb/specials/!\"),\n-                    abs_path(\"bbb/specials/?\"),\n-                    abs_path(\"bbb/specials/[\"),\n-                    abs_path(\"bbb/specials/]\")]);\n-\n-                assert_eq!(glob_vec(\"bbb/specials/[!?]\"), ~[\n-                    abs_path(\"bbb/specials/!\"),\n-                    abs_path(\"bbb/specials/*\"),\n-                    abs_path(\"bbb/specials/[\"),\n-                    abs_path(\"bbb/specials/]\")]);\n-\n-            }\n-        };\n-    }\n-\n     #[test]\n     fn test_absolute_pattern() {\n         // assume that the filesystem is not empty!"}, {"sha": "73b3b16fcae6e248571e59a3f7abf3dd782ca232", "filename": "src/test/run-pass/glob-std.rs", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/05bbb480a22d1f752f95591b41b584018966b136/src%2Ftest%2Frun-pass%2Fglob-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05bbb480a22d1f752f95591b41b584018966b136/src%2Ftest%2Frun-pass%2Fglob-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fglob-std.rs?ref=05bbb480a22d1f752f95591b41b584018966b136", "patch": "@@ -0,0 +1,203 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast windows doesn't like 'extern mod extra'\n+\n+extern mod extra;\n+\n+use extra::glob::*;\n+use extra::tempfile;\n+use std::unstable::finally::Finally;\n+use std::{io, os, unstable};\n+\n+pub fn main() {\n+    fn change_then_remove(p: &Path, f: &fn()) {\n+        do (|| {\n+            unstable::change_dir_locked(p, || f());\n+        }).finally {\n+            os::remove_dir_recursive(p);\n+        }\n+    }\n+\n+    fn mk_file(path: &str, directory: bool) {\n+        if directory {\n+            os::make_dir(&Path(path), 0xFFFF);\n+        } else {\n+            io::mk_file_writer(&Path(path), [io::Create]);\n+        }\n+    }\n+\n+    fn abs_path(path: &str) -> Path {\n+        os::getcwd().push_many(Path(path).components)\n+    }\n+\n+    fn glob_vec(pattern: &str) -> ~[Path] {\n+        glob(pattern).collect()\n+    }\n+\n+    let root = tempfile::mkdtemp(&os::tmpdir(), \"glob-tests\");\n+    let root = root.expect(\"Should have created a temp directory\");\n+\n+    do change_then_remove(&root) {\n+        mk_file(\"aaa\", true);\n+        mk_file(\"aaa/apple\", true);\n+        mk_file(\"aaa/orange\", true);\n+        mk_file(\"aaa/tomato\", true);\n+        mk_file(\"aaa/tomato/tomato.txt\", false);\n+        mk_file(\"aaa/tomato/tomoto.txt\", false);\n+        mk_file(\"bbb\", true);\n+        mk_file(\"bbb/specials\", true);\n+        mk_file(\"bbb/specials/!\", false);\n+\n+        // windows does not allow `*` or `?` characters to exist in filenames\n+        if os::consts::FAMILY != os::consts::windows::FAMILY {\n+            mk_file(\"bbb/specials/*\", false);\n+            mk_file(\"bbb/specials/?\", false);\n+        }\n+\n+        mk_file(\"bbb/specials/[\", false);\n+        mk_file(\"bbb/specials/]\", false);\n+        mk_file(\"ccc\", true);\n+        mk_file(\"xyz\", true);\n+        mk_file(\"xyz/x\", false);\n+        mk_file(\"xyz/y\", false);\n+        mk_file(\"xyz/z\", false);\n+\n+        assert_eq!(glob_vec(\"\"), ~[]);\n+        assert_eq!(glob_vec(\".\"), ~[]);\n+        assert_eq!(glob_vec(\"..\"), ~[]);\n+\n+        assert_eq!(glob_vec(\"aaa\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"aaa/\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"a\"), ~[]);\n+        assert_eq!(glob_vec(\"aa\"), ~[]);\n+        assert_eq!(glob_vec(\"aaaa\"), ~[]);\n+\n+        assert_eq!(glob_vec(\"aaa/apple\"), ~[abs_path(\"aaa/apple\")]);\n+        assert_eq!(glob_vec(\"aaa/apple/nope\"), ~[]);\n+\n+        // windows should support both / and \\ as directory separators\n+        if os::consts::FAMILY == os::consts::windows::FAMILY {\n+            assert_eq!(glob_vec(\"aaa\\\\apple\"), ~[abs_path(\"aaa/apple\")]);\n+        }\n+\n+        assert_eq!(glob_vec(\"???/\"), ~[\n+            abs_path(\"aaa\"),\n+            abs_path(\"bbb\"),\n+            abs_path(\"ccc\"),\n+            abs_path(\"xyz\")]);\n+\n+        assert_eq!(glob_vec(\"aaa/tomato/tom?to.txt\"), ~[\n+            abs_path(\"aaa/tomato/tomato.txt\"),\n+            abs_path(\"aaa/tomato/tomoto.txt\")]);\n+\n+        assert_eq!(glob_vec(\"xyz/?\"), ~[\n+            abs_path(\"xyz/x\"),\n+            abs_path(\"xyz/y\"),\n+            abs_path(\"xyz/z\")]);\n+\n+        assert_eq!(glob_vec(\"a*\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"*a*\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"a*a\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"aaa*\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"*aaa\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"*aaa*\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"*a*a*a*\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"aaa*/\"), ~[abs_path(\"aaa\")]);\n+\n+        assert_eq!(glob_vec(\"aaa/*\"), ~[\n+            abs_path(\"aaa/apple\"),\n+            abs_path(\"aaa/orange\"),\n+            abs_path(\"aaa/tomato\")]);\n+\n+        assert_eq!(glob_vec(\"aaa/*a*\"), ~[\n+            abs_path(\"aaa/apple\"),\n+            abs_path(\"aaa/orange\"),\n+            abs_path(\"aaa/tomato\")]);\n+\n+        assert_eq!(glob_vec(\"*/*/*.txt\"), ~[\n+            abs_path(\"aaa/tomato/tomato.txt\"),\n+            abs_path(\"aaa/tomato/tomoto.txt\")]);\n+\n+        assert_eq!(glob_vec(\"*/*/t[aob]m?to[.]t[!y]t\"), ~[\n+            abs_path(\"aaa/tomato/tomato.txt\"),\n+            abs_path(\"aaa/tomato/tomoto.txt\")]);\n+\n+        assert_eq!(glob_vec(\"aa[a]\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"aa[abc]\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"a[bca]a\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"aa[b]\"), ~[]);\n+        assert_eq!(glob_vec(\"aa[xyz]\"), ~[]);\n+        assert_eq!(glob_vec(\"aa[]]\"), ~[]);\n+\n+        assert_eq!(glob_vec(\"aa[!b]\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"aa[!bcd]\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"a[!bcd]a\"), ~[abs_path(\"aaa\")]);\n+        assert_eq!(glob_vec(\"aa[!a]\"), ~[]);\n+        assert_eq!(glob_vec(\"aa[!abc]\"), ~[]);\n+\n+        assert_eq!(glob_vec(\"bbb/specials/[[]\"), ~[abs_path(\"bbb/specials/[\")]);\n+        assert_eq!(glob_vec(\"bbb/specials/!\"), ~[abs_path(\"bbb/specials/!\")]);\n+        assert_eq!(glob_vec(\"bbb/specials/[]]\"), ~[abs_path(\"bbb/specials/]\")]);\n+\n+        if os::consts::FAMILY != os::consts::windows::FAMILY {\n+            assert_eq!(glob_vec(\"bbb/specials/[*]\"), ~[abs_path(\"bbb/specials/*\")]);\n+            assert_eq!(glob_vec(\"bbb/specials/[?]\"), ~[abs_path(\"bbb/specials/?\")]);\n+        }\n+\n+        if os::consts::FAMILY == os::consts::windows::FAMILY {\n+\n+            assert_eq!(glob_vec(\"bbb/specials/[![]\"), ~[\n+                abs_path(\"bbb/specials/!\"),\n+                abs_path(\"bbb/specials/]\")]);\n+\n+            assert_eq!(glob_vec(\"bbb/specials/[!]]\"), ~[\n+                abs_path(\"bbb/specials/!\"),\n+                abs_path(\"bbb/specials/[\")]);\n+\n+            assert_eq!(glob_vec(\"bbb/specials/[!!]\"), ~[\n+                abs_path(\"bbb/specials/[\"),\n+                abs_path(\"bbb/specials/]\")]);\n+\n+        } else {\n+\n+            assert_eq!(glob_vec(\"bbb/specials/[![]\"), ~[\n+                abs_path(\"bbb/specials/!\"),\n+                abs_path(\"bbb/specials/*\"),\n+                abs_path(\"bbb/specials/?\"),\n+                abs_path(\"bbb/specials/]\")]);\n+\n+            assert_eq!(glob_vec(\"bbb/specials/[!]]\"), ~[\n+                abs_path(\"bbb/specials/!\"),\n+                abs_path(\"bbb/specials/*\"),\n+                abs_path(\"bbb/specials/?\"),\n+                abs_path(\"bbb/specials/[\")]);\n+\n+            assert_eq!(glob_vec(\"bbb/specials/[!!]\"), ~[\n+                abs_path(\"bbb/specials/*\"),\n+                abs_path(\"bbb/specials/?\"),\n+                abs_path(\"bbb/specials/[\"),\n+                abs_path(\"bbb/specials/]\")]);\n+\n+            assert_eq!(glob_vec(\"bbb/specials/[!*]\"), ~[\n+                abs_path(\"bbb/specials/!\"),\n+                abs_path(\"bbb/specials/?\"),\n+                abs_path(\"bbb/specials/[\"),\n+                abs_path(\"bbb/specials/]\")]);\n+\n+            assert_eq!(glob_vec(\"bbb/specials/[!?]\"), ~[\n+                abs_path(\"bbb/specials/!\"),\n+                abs_path(\"bbb/specials/*\"),\n+                abs_path(\"bbb/specials/[\"),\n+                abs_path(\"bbb/specials/]\")]);\n+\n+        }\n+    };\n+}"}]}