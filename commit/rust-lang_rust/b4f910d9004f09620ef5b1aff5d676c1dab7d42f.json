{"sha": "b4f910d9004f09620ef5b1aff5d676c1dab7d42f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZjkxMGQ5MDA0ZjA5NjIwZWY1YjFhZmY1ZDY3NmMxZGFiN2Q0MmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-02T22:08:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-02T22:18:24Z"}, "message": "just use full-normalization when for the impl trait ref\n\nThis seems better because I want to avoid the situation where unresolved\ninference variables make it into the environment.  On the other hand, I\nam not 100% sure that this is correct. My assumption was that the WF\ncheck should ensure that this normalization can succeed. But it occurs\nto me that the WF checks may need to make use of the `specializes`\npredicate themselves, and hence we may have a kind of cycle here (this\nis a bigger problem with spec in any case that we need to resolve).\n\nOn the other hand, this should just cause extra errors I think, so it\nseems like a safe thing to attempt. Certainly all tests pass.", "tree": {"sha": "c811cc429d3c3c71c2b799f5279841671809f032", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c811cc429d3c3c71c2b799f5279841671809f032"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f910d9004f09620ef5b1aff5d676c1dab7d42f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f910d9004f09620ef5b1aff5d676c1dab7d42f", "html_url": "https://github.com/rust-lang/rust/commit/b4f910d9004f09620ef5b1aff5d676c1dab7d42f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f910d9004f09620ef5b1aff5d676c1dab7d42f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9bc86032d0aa20db522e04a550deb1034005784", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9bc86032d0aa20db522e04a550deb1034005784", "html_url": "https://github.com/rust-lang/rust/commit/d9bc86032d0aa20db522e04a550deb1034005784"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "24cafa7f7253a494736da22cd3e4a94ad4f01913", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b4f910d9004f09620ef5b1aff5d676c1dab7d42f/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f910d9004f09620ef5b1aff5d676c1dab7d42f/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=b4f910d9004f09620ef5b1aff5d676c1dab7d42f", "patch": "@@ -25,7 +25,7 @@ use hir::def_id::DefId;\n use infer::{InferCtxt, TypeOrigin};\n use middle::region;\n use ty::subst::{Subst, Substs};\n-use traits::{self, Reveal, ObligationCause, Normalized};\n+use traits::{self, Reveal, ObligationCause};\n use ty::{self, TyCtxt, TypeFoldable};\n use syntax_pos::DUMMY_SP;\n \n@@ -187,21 +187,16 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              .subst(tcx, &penv.free_substs);\n \n     // Create a infcx, taking the predicates of impl1 as assumptions:\n-    let result = tcx.infer_ctxt(None, Some(penv), Reveal::ExactMatch).enter(|mut infcx| {\n-        // Normalize the trait reference, adding any obligations\n-        // that arise into the impl1 assumptions.\n-        let Normalized { value: impl1_trait_ref, obligations: normalization_obligations } = {\n-            let selcx = &mut SelectionContext::new(&infcx);\n-            traits::normalize(selcx, ObligationCause::dummy(), &impl1_trait_ref)\n-        };\n-        infcx.parameter_environment.caller_bounds.extend(normalization_obligations.into_iter().map(|o| {\n-            match tcx.lift_to_global(&o.predicate) {\n-                Some(predicate) => predicate,\n-                None => {\n-                    bug!(\"specializes: obligation `{:?}` has inference types/regions\", o);\n+    let result = tcx.infer_ctxt(None, Some(penv), Reveal::ExactMatch).enter(|infcx| {\n+        // Normalize the trait reference. The WF rules ought to ensure\n+        // that this always succeeds.\n+        let impl1_trait_ref =\n+            match traits::fully_normalize(&infcx, ObligationCause::dummy(), &impl1_trait_ref) {\n+                Ok(impl1_trait_ref) => impl1_trait_ref,\n+                Err(err) => {\n+                    bug!(\"failed to fully normalize {:?}: {:?}\", impl1_trait_ref, err);\n                 }\n-            }\n-        }));\n+            };\n \n         // Attempt to prove that impl2 applies, given all of the above.\n         fulfill_implication(&infcx, impl1_trait_ref, impl2_def_id).is_ok()"}]}