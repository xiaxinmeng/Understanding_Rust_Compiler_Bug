{"sha": "f7393d86580b6b417063b48c9ad4c03829d03713", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MzkzZDg2NTgwYjZiNDE3MDYzYjQ4YzlhZDRjMDM4MjlkMDM3MTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T01:04:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:32Z"}, "message": "librustc: De-`@mut` the method map", "tree": {"sha": "7cde52c30ccb4a6d0420410471b183b485ccc277", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cde52c30ccb4a6d0420410471b183b485ccc277"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7393d86580b6b417063b48c9ad4c03829d03713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7393d86580b6b417063b48c9ad4c03829d03713", "html_url": "https://github.com/rust-lang/rust/commit/f7393d86580b6b417063b48c9ad4c03829d03713", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7393d86580b6b417063b48c9ad4c03829d03713/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9568cdf36661f8cfee72ee15a581c450c5596b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9568cdf36661f8cfee72ee15a581c450c5596b8", "html_url": "https://github.com/rust-lang/rust/commit/b9568cdf36661f8cfee72ee15a581c450c5596b8"}], "stats": {"total": 165, "additions": 109, "deletions": 56}, "files": [{"sha": "3d8fd4fc52b3cd0b86f3651a6de618a9879b6e74", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -990,7 +990,8 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     }\n \n     {\n-        let r = maps.method_map.find(&id);\n+        let method_map = maps.method_map.borrow();\n+        let r = method_map.get().find(&id);\n         for &mme in r.iter() {\n             ebml_w.tag(c::tag_table_method_map, |ebml_w| {\n                 ebml_w.id(id);\n@@ -1274,9 +1275,9 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                         ty_param_defs.get().insert(id, bounds);\n                     }\n                     c::tag_table_method_map => {\n-                        dcx.maps.method_map.insert(\n-                            id,\n-                            val_dsr.read_method_map_entry(xcx));\n+                        let entry = val_dsr.read_method_map_entry(xcx);\n+                        let mut method_map = dcx.maps.method_map.borrow_mut();\n+                        method_map.get().insert(id, entry);\n                     }\n                     c::tag_table_vtable_map => {\n                         let vtable_res ="}, {"sha": "f2a6336f3b842518cd14a0328ea2baa1d201e627", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -767,6 +767,7 @@ fn check_loans_in_expr<'a>(this: &mut CheckLoanCtxt<'a>,\n     this.check_for_conflicting_loans(expr.id);\n     this.check_move_out_from_expr(expr);\n \n+    let method_map = this.bccx.method_map.borrow();\n     match expr.node {\n       ast::ExprSelf |\n       ast::ExprPath(..) => {\n@@ -791,15 +792,15 @@ fn check_loans_in_expr<'a>(this: &mut CheckLoanCtxt<'a>,\n       }\n       ast::ExprIndex(callee_id, _, rval) |\n       ast::ExprBinary(callee_id, _, _, rval)\n-      if this.bccx.method_map.contains_key(&expr.id) => {\n+      if method_map.get().contains_key(&expr.id) => {\n         this.check_call(expr,\n                         None,\n                         callee_id,\n                         expr.span,\n                         [rval]);\n       }\n       ast::ExprUnary(callee_id, _, _) | ast::ExprIndex(callee_id, _, _)\n-      if this.bccx.method_map.contains_key(&expr.id) => {\n+      if method_map.get().contains_key(&expr.id) => {\n         this.check_call(expr,\n                         None,\n                         callee_id,"}, {"sha": "8476b27ddb60348eaca6c1dcd2a384f6ecbf6cc5", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -223,6 +223,7 @@ fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n     }\n \n     // Special checks for various kinds of expressions:\n+    let method_map = this.bccx.method_map.borrow();\n     match ex.node {\n       ast::ExprAddrOf(mutbl, base) => {\n         let base_cmt = this.bccx.cat_expr(base);\n@@ -270,7 +271,7 @@ fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n \n       ast::ExprIndex(_, _, arg) |\n       ast::ExprBinary(_, _, _, arg)\n-      if this.bccx.method_map.contains_key(&ex.id) => {\n+      if method_map.get().contains_key(&ex.id) => {\n           // Arguments in method calls are always passed by ref.\n           //\n           // Currently these do not use adjustments, so we have to"}, {"sha": "0ace7ae7c389b2dcf354412c152db7171f686968", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -519,6 +519,7 @@ impl CFGBuilder {\n     }\n \n     fn is_method_call(&self, expr: &ast::Expr) -> bool {\n-        self.method_map.contains_key(&expr.id)\n+        let method_map = self.method_map.borrow();\n+        method_map.get().contains_key(&expr.id)\n     }\n }"}, {"sha": "840f9ec2475c2f8e0508dcad3f4edf9354e37c37", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -122,7 +122,8 @@ pub fn check_expr(v: &mut CheckCrateVisitor,\n           }\n           ExprLit(@codemap::Spanned {node: lit_str(..), ..}) => { }\n           ExprBinary(..) | ExprUnary(..) => {\n-            if method_map.contains_key(&e.id) {\n+            let method_map = method_map.borrow();\n+            if method_map.get().contains_key(&e.id) {\n                 sess.span_err(e.span, \"user-defined operators are not \\\n                                        allowed in constant expressions\");\n             }"}, {"sha": "4173446cb922c253268ce0ea420df96d177c7867", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -121,7 +121,7 @@ pub fn lookup_variant_by_id(tcx: ty::ctxt,\n         }\n         let maps = astencode::Maps {\n             root_map: @RefCell::new(HashMap::new()),\n-            method_map: @mut HashMap::new(),\n+            method_map: @RefCell::new(HashMap::new()),\n             vtable_map: @RefCell::new(HashMap::new()),\n             write_guard_map: @RefCell::new(HashSet::new()),\n             capture_map: @RefCell::new(HashMap::new())\n@@ -171,7 +171,7 @@ pub fn lookup_const_by_id(tcx: ty::ctxt,\n         }\n         let maps = astencode::Maps {\n             root_map: @RefCell::new(HashMap::new()),\n-            method_map: @mut HashMap::new(),\n+            method_map: @RefCell::new(HashMap::new()),\n             vtable_map: @RefCell::new(HashMap::new()),\n             write_guard_map: @RefCell::new(HashSet::new()),\n             capture_map: @RefCell::new(HashMap::new())"}, {"sha": "f58c40a915461dcbb42d2c740f7f37666214f6c0", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -899,7 +899,8 @@ impl<'a, O:DataFlowOperator> PropagationContext<'a, O> {\n     }\n \n     fn is_method_call(&self, expr: &ast::Expr) -> bool {\n-        self.dfcx.method_map.contains_key(&expr.id)\n+        let method_map = self.dfcx.method_map.borrow();\n+        method_map.get().contains_key(&expr.id)\n     }\n \n     fn reset(&mut self, bits: &mut [uint]) {"}, {"sha": "b35068594805338ddc7dbf272cc3dec2a6c79713", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -134,7 +134,8 @@ impl Visitor<()> for MarkSymbolVisitor {\n     fn visit_expr(&mut self, expr: @ast::Expr, _: ()) {\n         match expr.node {\n             ast::ExprMethodCall(..) => {\n-                match self.method_map.find(&expr.id) {\n+                let method_map = self.method_map.borrow();\n+                match method_map.get().find(&expr.id) {\n                     Some(&typeck::method_map_entry {\n                         origin: typeck::method_static(def_id),\n                         .."}, {"sha": "fd4b97aca18c235ec8e9c943ac05c349293ad2b9", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -1202,7 +1202,8 @@ fn check_stability(cx: &Context, e: &ast::Expr) {\n             }\n         }\n         ast::ExprMethodCall(..) => {\n-            match cx.method_map.find(&e.id) {\n+            let method_map = cx.method_map.borrow();\n+            match method_map.get().find(&e.id) {\n                 Some(&typeck::method_map_entry { origin, .. }) => {\n                     match origin {\n                         typeck::method_static(def_id) => {"}, {"sha": "19a1cee4df6d5b431c97aea11249d05fe9d31a6c", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -390,7 +390,8 @@ impl mem_categorization_ctxt {\n         let expr_ty = self.expr_ty(expr);\n         match expr.node {\n           ast::ExprUnary(_, ast::UnDeref, e_base) => {\n-            if self.method_map.contains_key(&expr.id) {\n+            let method_map = self.method_map.borrow();\n+            if method_map.get().contains_key(&expr.id) {\n                 return self.cat_rvalue_node(expr, expr_ty);\n             }\n \n@@ -401,14 +402,16 @@ impl mem_categorization_ctxt {\n           ast::ExprField(base, f_name, _) => {\n             // Method calls are now a special syntactic form,\n             // so `a.b` should always be a field.\n-            assert!(!self.method_map.contains_key(&expr.id));\n+            let method_map = self.method_map.borrow();\n+            assert!(!method_map.get().contains_key(&expr.id));\n \n             let base_cmt = self.cat_expr(base);\n             self.cat_field(expr, base_cmt, f_name, self.expr_ty(expr))\n           }\n \n           ast::ExprIndex(_, base, _) => {\n-            if self.method_map.contains_key(&expr.id) {\n+            let method_map = self.method_map.borrow();\n+            if method_map.get().contains_key(&expr.id) {\n                 return self.cat_rvalue_node(expr, expr_ty);\n             }\n "}, {"sha": "f36b283f1e43ff091c96171cded4a866a1c39a10", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -130,7 +130,7 @@ and so on.\n use middle::pat_util::{pat_bindings};\n use middle::freevars;\n use middle::ty;\n-use middle::typeck::{method_map};\n+use middle::typeck::method_map;\n use util::ppaux;\n use util::ppaux::Repr;\n use util::common::indenter;\n@@ -591,7 +591,8 @@ impl VisitContext {\n                                    receiver_expr: @Expr,\n                                    arg_exprs: &[@Expr])\n                                    -> bool {\n-        if !self.method_map.contains_key(&expr.id) {\n+        let method_map = self.method_map.borrow();\n+        if !method_map.get().contains_key(&expr.id) {\n             return false;\n         }\n "}, {"sha": "32fdddbc722bc9f138dd39e5d2e61dc9646e8e19", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -622,7 +622,8 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n             ast::ExprField(base, ident, _) => {\n                 // Method calls are now a special syntactic form,\n                 // so `a.b` should always be a field.\n-                assert!(!self.method_map.contains_key(&expr.id));\n+                let method_map = self.method_map.borrow();\n+                assert!(!method_map.get().contains_key(&expr.id));\n \n                 // With type_autoderef, make sure we don't\n                 // allow pointers to violate privacy\n@@ -641,7 +642,8 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n                                            ty::expr_ty(self.tcx, base));\n                 match ty::get(t).sty {\n                     ty::ty_enum(_, _) | ty::ty_struct(_, _) => {\n-                        let entry = match self.method_map.find(&expr.id) {\n+                        let method_map = self.method_map.borrow();\n+                        let entry = match method_map.get().find(&expr.id) {\n                             None => {\n                                 self.tcx.sess.span_bug(expr.span,\n                                                        \"method call not in \\"}, {"sha": "7694a50383add00cce6b514c1aab323006c0fe4a", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -139,7 +139,8 @@ impl Visitor<()> for MarkSymbolVisitor {\n                 }\n             }\n             ast::ExprMethodCall(..) => {\n-                match self.method_map.find(&expr.id) {\n+                let method_map = self.method_map.borrow();\n+                match method_map.get().find(&expr.id) {\n                     Some(&typeck::method_map_entry {\n                         origin: typeck::method_static(def_id),\n                         .."}, {"sha": "a176078a01103194435f0d370c00b7b2b5d1cea1", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -792,7 +792,7 @@ fn Resolver(session: Session,\n \n         graph_root: graph_root,\n \n-        method_map: @mut HashMap::new(),\n+        method_map: @RefCell::new(HashMap::new()),\n         structs: HashSet::new(),\n \n         unresolved_imports: 0,\n@@ -834,7 +834,7 @@ struct Resolver {\n \n     graph_root: @NameBindings,\n \n-    method_map: @mut HashMap<Name, HashSet<DefId>>,\n+    method_map: @RefCell<HashMap<Name, HashSet<DefId>>>,\n     structs: HashSet<DefId>,\n \n     // The number of imports that are currently unresolved.\n@@ -1378,10 +1378,11 @@ impl Resolver {\n \n                 let def_id = local_def(item.id);\n                 for (name, _) in method_names.iter() {\n-                    if !self.method_map.contains_key(name) {\n-                        self.method_map.insert(*name, HashSet::new());\n+                    let mut method_map = self.method_map.borrow_mut();\n+                    if !method_map.get().contains_key(name) {\n+                        method_map.get().insert(*name, HashSet::new());\n                     }\n-                    match self.method_map.find_mut(name) {\n+                    match method_map.get().find_mut(name) {\n                         Some(s) => { s.insert(def_id); },\n                         _ => fail!(\"Can't happen\"),\n                     }\n@@ -1699,10 +1700,11 @@ impl Resolver {\n                   }\n               }\n               for name in interned_method_names.iter() {\n-                  if !self.method_map.contains_key(name) {\n-                      self.method_map.insert(*name, HashSet::new());\n+                  let mut method_map = self.method_map.borrow_mut();\n+                  if !method_map.get().contains_key(name) {\n+                      method_map.get().insert(*name, HashSet::new());\n                   }\n-                  match self.method_map.find_mut(name) {\n+                  match method_map.get().find_mut(name) {\n                       Some(s) => { s.insert(def_id); },\n                       _ => fail!(\"Can't happen\"),\n                   }\n@@ -4833,7 +4835,8 @@ impl Resolver {\n         };\n         match containing_module.kind.get() {\n             TraitModuleKind | ImplModuleKind => {\n-                match self.method_map.find(&ident.name) {\n+                let method_map = self.method_map.borrow();\n+                match method_map.get().find(&ident.name) {\n                     Some(s) => {\n                         match containing_module.def_id.get() {\n                             Some(def_id) if s.contains(&def_id) => {\n@@ -5322,7 +5325,8 @@ impl Resolver {\n \n         let mut found_traits = ~[];\n         let mut search_module = self.current_module;\n-        match self.method_map.find(&name.name) {\n+        let method_map = self.method_map.borrow();\n+        match method_map.get().find(&name.name) {\n             Some(candidate_traits) => loop {\n                 // Look for the current trait.\n                 match self.current_trait_refs {"}, {"sha": "df916f0463bcef67048b15d38b231e65acf96793", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -479,7 +479,11 @@ pub fn trans_method_call(in_cx: @Block,\n         node_id_type(in_cx, callee_id),\n         expr_ty(in_cx, call_ex),\n         |cx| {\n-            match cx.ccx().maps.method_map.find_copy(&call_ex.id) {\n+            let origin_opt = {\n+                let mut method_map = cx.ccx().maps.method_map.borrow_mut();\n+                method_map.get().find_copy(&call_ex.id)\n+            };\n+            match origin_opt {\n                 Some(origin) => {\n                     debug!(\"origin for {}: {}\",\n                            call_ex.repr(in_cx.tcx()),"}, {"sha": "8bc0eaa423cf29e5ef6108932c06140f2da2a7f4", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -590,7 +590,10 @@ fn trans_rvalue_datum_unadjusted(bcx: @Block, expr: &ast::Expr) -> DatumBlock {\n         }\n         ast::ExprBinary(_, op, lhs, rhs) => {\n             // if overloaded, would be RvalueDpsExpr\n-            assert!(!bcx.ccx().maps.method_map.contains_key(&expr.id));\n+            {\n+                let method_map = bcx.ccx().maps.method_map.borrow();\n+                assert!(!method_map.get().contains_key(&expr.id));\n+            }\n \n             return trans_binary(bcx, expr, op, lhs, rhs);\n         }\n@@ -1346,7 +1349,10 @@ fn trans_unary_datum(bcx: @Block,\n     assert!(op != ast::UnDeref);\n \n     // if overloaded, would be RvalueDpsExpr\n-    assert!(!bcx.ccx().maps.method_map.contains_key(&un_expr.id));\n+    {\n+        let method_map = bcx.ccx().maps.method_map.borrow();\n+        assert!(!method_map.get().contains_key(&un_expr.id));\n+    }\n \n     let un_ty = expr_ty(bcx, un_expr);\n     let sub_ty = expr_ty(bcx, sub_expr);\n@@ -1618,7 +1624,10 @@ fn trans_overloaded_op(bcx: @Block,\n                        ret_ty: ty::t,\n                        dest: Dest)\n                        -> @Block {\n-    let origin = bcx.ccx().maps.method_map.get_copy(&expr.id);\n+    let origin = {\n+        let method_map = bcx.ccx().maps.method_map.borrow();\n+        method_map.get().get_copy(&expr.id)\n+    };\n     let fty = node_id_type(bcx, callee_id);\n     callee::trans_call_inner(bcx,\n                              expr.info(),\n@@ -1780,7 +1789,11 @@ fn trans_assign_op(bcx: @Block,\n     let dst_datum = unpack_datum!(bcx, trans_lvalue_unadjusted(bcx, dst));\n \n     // A user-defined operator method\n-    if bcx.ccx().maps.method_map.find(&expr.id).is_some() {\n+    let found = {\n+        let method_map = bcx.ccx().maps.method_map.borrow();\n+        method_map.get().find(&expr.id).is_some()\n+    };\n+    if found {\n         // FIXME(#2528) evaluates the receiver twice!!\n         let scratch = scratch_datum(bcx, dst_datum.ty, \"__assign_op\", false);\n         let bcx = trans_overloaded_op(bcx,"}, {"sha": "4e6020164b35a8a5d33fdb66503ffc47ad701dd9", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -3049,7 +3049,8 @@ pub fn method_call_type_param_defs(tcx: ctxt,\n                                    method_map: typeck::method_map,\n                                    id: ast::NodeId)\n                                    -> Option<@~[TypeParameterDef]> {\n-    method_map.find(&id).map(|method| {\n+    let method_map = method_map.borrow();\n+    method_map.get().find(&id).map(|method| {\n         match method.origin {\n           typeck::method_static(did) => {\n             // n.b.: When we encode impl methods, the bounds\n@@ -3112,14 +3113,17 @@ pub enum ExprKind {\n pub fn expr_kind(tcx: ctxt,\n                  method_map: typeck::method_map,\n                  expr: &ast::Expr) -> ExprKind {\n-    if method_map.contains_key(&expr.id) {\n-        // Overloaded operations are generally calls, and hence they are\n-        // generated via DPS.  However, assign_op (e.g., `x += y`) is an\n-        // exception, as its result is always unit.\n-        return match expr.node {\n-            ast::ExprAssignOp(..) => RvalueStmtExpr,\n-            _ => RvalueDpsExpr\n-        };\n+    {\n+        let method_map = method_map.borrow();\n+        if method_map.get().contains_key(&expr.id) {\n+            // Overloaded operations are generally calls, and hence they are\n+            // generated via DPS.  However, assign_op (e.g., `x += y`) is an\n+            // exception, as its result is always unit.\n+            return match expr.node {\n+                ast::ExprAssignOp(..) => RvalueStmtExpr,\n+                _ => RvalueDpsExpr\n+            };\n+        }\n     }\n \n     match expr.node {"}, {"sha": "b658d20c5abcafc4498b209612cd85288775db32", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -265,7 +265,7 @@ impl Inherited {\n             node_types: RefCell::new(HashMap::new()),\n             node_type_substs: RefCell::new(HashMap::new()),\n             adjustments: RefCell::new(HashMap::new()),\n-            method_map: @mut HashMap::new(),\n+            method_map: @RefCell::new(HashMap::new()),\n             vtable_map: @RefCell::new(HashMap::new()),\n         }\n     }\n@@ -1950,7 +1950,8 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                              AutoderefReceiver) {\n             Some(ref entry) => {\n                 let method_map = fcx.inh.method_map;\n-                method_map.insert(expr.id, (*entry));\n+                let mut method_map = method_map.borrow_mut();\n+                method_map.get().insert(expr.id, (*entry));\n             }\n             None => {\n                 debug!(\"(checking method call) failing expr is {}\", expr.id);\n@@ -2040,7 +2041,10 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n             Some(ref origin) => {\n                 let method_ty = fcx.node_ty(callee_id);\n                 let method_map = fcx.inh.method_map;\n-                method_map.insert(op_ex.id, *origin);\n+                {\n+                    let mut method_map = method_map.borrow_mut();\n+                    method_map.get().insert(op_ex.id, *origin);\n+                }\n                 check_method_argument_types(fcx, op_ex.span,\n                                             method_ty, op_ex, args,\n                                             ast::NoSugar, deref_args)"}, {"sha": "87947a91ccd5cc584916cf4326757a8a4719bbab", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -249,7 +249,10 @@ fn visit_expr(rcx: &mut Rcx, expr: @ast::Expr) {\n     debug!(\"regionck::visit_expr(e={}, repeating_scope={:?})\",\n            expr.repr(rcx.fcx.tcx()), rcx.repeating_scope);\n \n-    let has_method_map = rcx.fcx.inh.method_map.contains_key(&expr.id);\n+    let has_method_map = {\n+        let method_map = rcx.fcx.inh.method_map;\n+        method_map.get().contains_key(&expr.id)\n+    };\n \n     // Record cleanup scopes, which are used by borrowck to decide the\n     // maximum lifetime of a temporary rvalue.  These were derived by\n@@ -1113,7 +1116,8 @@ pub mod guarantor {\n         debug!(\"categorize_unadjusted()\");\n \n         let guarantor = {\n-            if rcx.fcx.inh.method_map.contains_key(&expr.id) {\n+            let method_map = rcx.fcx.inh.method_map.borrow();\n+            if method_map.get().contains_key(&expr.id) {\n                 None\n             } else {\n                 guarantor(rcx, expr)"}, {"sha": "3f371253e0553ca1eb2f4bbff58cdd77c0ad1d7e", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -62,18 +62,23 @@ fn resolve_type_vars_in_types(fcx: @FnCtxt, sp: Span, tys: &[ty::t])\n \n fn resolve_method_map_entry(fcx: @FnCtxt, sp: Span, id: ast::NodeId) {\n     // Resolve any method map entry\n-    match fcx.inh.method_map.find(&id) {\n+    let method_map_entry_opt = {\n+        let method_map = fcx.inh.method_map.borrow();\n+        method_map.get().find_copy(&id)\n+    };\n+    match method_map_entry_opt {\n         None => {}\n         Some(mme) => {\n             {\n                 let r = resolve_type_vars_in_type(fcx, sp, mme.self_ty);\n                 for t in r.iter() {\n                     let method_map = fcx.ccx.method_map;\n-                    let new_entry = method_map_entry { self_ty: *t, ..*mme };\n+                    let new_entry = method_map_entry { self_ty: *t, ..mme };\n                     debug!(\"writeback::resolve_method_map_entry(id={:?}, \\\n                             new_entry={:?})\",\n                            id, new_entry);\n-                    method_map.insert(id, new_entry);\n+                    let mut method_map = method_map.borrow_mut();\n+                    method_map.get().insert(id, new_entry);\n                 }\n             }\n         }"}, {"sha": "176bf72d8a40afe2434a5e45bfc249303ab8f3e5", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7393d86580b6b417063b48c9ad4c03829d03713/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=f7393d86580b6b417063b48c9ad4c03829d03713", "patch": "@@ -160,7 +160,7 @@ pub struct method_map_entry {\n \n // maps from an expression id that corresponds to a method call to the details\n // of the method to be invoked\n-pub type method_map = @mut HashMap<ast::NodeId, method_map_entry>;\n+pub type method_map = @RefCell<HashMap<ast::NodeId, method_map_entry>>;\n \n pub type vtable_param_res = @~[vtable_origin];\n // Resolutions for bounds of all parameters, left to right, for a given path.\n@@ -458,7 +458,7 @@ pub fn check_crate(tcx: ty::ctxt,\n     let time_passes = tcx.sess.time_passes();\n     let ccx = @CrateCtxt {\n         trait_map: trait_map,\n-        method_map: @mut HashMap::new(),\n+        method_map: @RefCell::new(HashMap::new()),\n         vtable_map: @RefCell::new(HashMap::new()),\n         tcx: tcx\n     };"}]}