{"sha": "285ab0266c7dd540d2d8df202cd1773fcd2fc572", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NWFiMDI2NmM3ZGQ1NDBkMmQ4ZGYyMDJjZDE3NzNmY2QyZmM1NzI=", "commit": {"author": {"name": "Abhishek Chanda", "email": "abhishek@cloudscaling.com", "date": "2015-04-21T03:37:58Z"}, "committer": {"name": "Abhishek Chanda", "email": "abhishek@cloudscaling.com", "date": "2015-05-04T02:08:53Z"}, "message": "Add functions to convert IPv4 to long and back", "tree": {"sha": "c9882deae4c7cf7ab076888a6cbf2cd25e5565a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9882deae4c7cf7ab076888a6cbf2cd25e5565a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/285ab0266c7dd540d2d8df202cd1773fcd2fc572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/285ab0266c7dd540d2d8df202cd1773fcd2fc572", "html_url": "https://github.com/rust-lang/rust/commit/285ab0266c7dd540d2d8df202cd1773fcd2fc572", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/285ab0266c7dd540d2d8df202cd1773fcd2fc572/comments", "author": null, "committer": null, "parents": [{"sha": "e959fab4a520ed9c08f8eec0340457fa4b1597f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e959fab4a520ed9c08f8eec0340457fa4b1597f2", "html_url": "https://github.com/rust-lang/rust/commit/e959fab4a520ed9c08f8eec0340457fa4b1597f2"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "b40d56280410262bc871a85a248feae09e585afe", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/285ab0266c7dd540d2d8df202cd1773fcd2fc572/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285ab0266c7dd540d2d8df202cd1773fcd2fc572/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=285ab0266c7dd540d2d8df202cd1773fcd2fc572", "patch": "@@ -171,7 +171,6 @@ impl Ipv4Addr {\n                       ((self.octets()[0] as u16) << 8) | self.octets()[1] as u16,\n                       ((self.octets()[2] as u16) << 8) | self.octets()[3] as u16)\n     }\n-\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -244,6 +243,21 @@ impl FromInner<libc::in_addr> for Ipv4Addr {\n     }\n }\n \n+#[stable(feature = \"ip_u32\", since = \"1.1.0\")]\n+impl From<Ipv4Addr> for u32 {\n+    fn from(ip: Ipv4Addr) -> u32 {\n+        let ip = ip.octets();\n+        ((ip[0] as u32) << 24) + ((ip[1] as u32) << 16) + ((ip[2] as u32) << 8) + (ip[3] as u32)\n+    }\n+}\n+\n+#[stable(feature = \"ip_u32\", since = \"1.1.0\")]\n+impl From<u32> for Ipv4Addr {\n+    fn from(ip: u32) -> Ipv4Addr {\n+        Ipv4Addr::new((ip >> 24) as u8, (ip >> 16) as u8, (ip >> 8) as u8, ip as u8)\n+    }\n+}\n+\n impl Ipv6Addr {\n     /// Creates a new IPv6 address from eight 16-bit segments.\n     ///\n@@ -738,4 +752,16 @@ mod tests {\n         let a = sa4(Ipv4Addr::new(77, 88, 21, 11), 12345);\n         assert_eq!(Ok(vec![a]), tsa(a));\n     }\n+\n+    #[test]\n+    fn test_ipv4_to_int() {\n+        let a = Ipv4Addr::new(127, 0, 0, 1);\n+        assert_eq!(u32::from(a), 2130706433);\n+    }\n+\n+    #[test]\n+    fn test_int_to_ipv4() {\n+        let a = Ipv4Addr::new(127, 0, 0, 1);\n+        assert_eq!(Ipv4Addr::from(2130706433), a);\n+    }\n }"}]}