{"sha": "dc425e2e64863d4e1aa0f2bb41f7bfa3cd14b558", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNDI1ZTJlNjQ4NjNkNGUxYWEwZjJiYjQxZjdiZmEzY2QxNGI1NTg=", "commit": {"author": {"name": "Val Markovic", "email": "val@markovic.io", "date": "2018-07-05T00:26:45Z"}, "committer": {"name": "Val Markovic", "email": "val@markovic.io", "date": "2018-07-05T16:24:03Z"}, "message": "Clarifying how the alignment of the struct works\n\nThe docs were not specifying how to compute the alignment of the struct, so I had to spend some time trying to figure out how that works. Found the answer [on this page](http://camlorn.net/posts/April%202017/rust-struct-field-reordering.html):\n\n> The total size of this struct is 5, but the most-aligned field is b with alignment 2, so we round up to 6 and give the struct an alignment of 2 bytes.", "tree": {"sha": "a0d8472a2f91ff5fafb452e62ffd5a9b00c5547d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0d8472a2f91ff5fafb452e62ffd5a9b00c5547d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc425e2e64863d4e1aa0f2bb41f7bfa3cd14b558", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENOgux9lPBN9A3A/lcsOiu9mvoboFAls+RiMACgkQcsOiu9mv\nobp3LhAAsm7MwYpudNKp2L4NNmItrvCnI/np5EnQ+LNrMLmU4+O3/Xd5C9w86CsF\nULnCbI59J6ylu0RFTE8MRzANyGJRczSPgDNRIpnWmdbRzNFN2mLC1p2tPuc77YVf\naDnyvkfw9+osKzqir4/2vDUlDzDvPtjUoyT1TH+ggwZ5t6eZCVWitwxSbVBpRBct\ny4iPUC2AkX3ALeq4oedJ7+OqUmqZtcx9zxIYX2tKv6BHbi+w4MNmRZL5LDGuFeNP\nA23ksamLhYY1mZBGyAZ7s86elb0/rVXfDVnXi5tWoOgRxiGxNsd863mD5OwKqw6c\nbDNxmIske0yzHW42nS71bphRxHbIb0iE6Ko8UEGC3tTRggIlxWNjtrlOfN+xdfAp\nDrkITf4LNbZ4KwkqO9aIBqewNJlCZwpBJWsuc17uk7Gw6ANcSRlR2XJcz/Vd8rU4\nmPKyj3j0WKXJAZLkK1/POGewgNQmzV52d4kCBzkBAikVL37f12ywQZVWJy8XgTTF\n1uiy7tm9slza4zsSBdcziGX4YSnCcdj4ux/Ty8DKBBhTmtpKMmpUBFJQjVcO2bou\nmlfhJpxcmFyya7PJNbEIr5ONlIIIH3fYXvYQabVAT1TCs9WOX5IJIPR7j7+ECvR2\nNRp0l+9Y66WP9WhHmdprvIzz2NreGYtOEZA7uoG5NHK51nFUl3I=\n=N8aS\n-----END PGP SIGNATURE-----", "payload": "tree a0d8472a2f91ff5fafb452e62ffd5a9b00c5547d\nparent afaa40646542ca1e8fadb7e1d34197237e0fcd19\nauthor Val Markovic <val@markovic.io> 1530750405 -0700\ncommitter Val Markovic <val@markovic.io> 1530807843 -0700\n\nClarifying how the alignment of the struct works\n\nThe docs were not specifying how to compute the alignment of the struct, so I had to spend some time trying to figure out how that works. Found the answer [on this page](http://camlorn.net/posts/April%202017/rust-struct-field-reordering.html):\n\n> The total size of this struct is 5, but the most-aligned field is b with alignment 2, so we round up to 6 and give the struct an alignment of 2 bytes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc425e2e64863d4e1aa0f2bb41f7bfa3cd14b558", "html_url": "https://github.com/rust-lang/rust/commit/dc425e2e64863d4e1aa0f2bb41f7bfa3cd14b558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc425e2e64863d4e1aa0f2bb41f7bfa3cd14b558/comments", "author": {"login": "Valloric", "id": 919444, "node_id": "MDQ6VXNlcjkxOTQ0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/919444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Valloric", "html_url": "https://github.com/Valloric", "followers_url": "https://api.github.com/users/Valloric/followers", "following_url": "https://api.github.com/users/Valloric/following{/other_user}", "gists_url": "https://api.github.com/users/Valloric/gists{/gist_id}", "starred_url": "https://api.github.com/users/Valloric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Valloric/subscriptions", "organizations_url": "https://api.github.com/users/Valloric/orgs", "repos_url": "https://api.github.com/users/Valloric/repos", "events_url": "https://api.github.com/users/Valloric/events{/privacy}", "received_events_url": "https://api.github.com/users/Valloric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Valloric", "id": 919444, "node_id": "MDQ6VXNlcjkxOTQ0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/919444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Valloric", "html_url": "https://github.com/Valloric", "followers_url": "https://api.github.com/users/Valloric/followers", "following_url": "https://api.github.com/users/Valloric/following{/other_user}", "gists_url": "https://api.github.com/users/Valloric/gists{/gist_id}", "starred_url": "https://api.github.com/users/Valloric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Valloric/subscriptions", "organizations_url": "https://api.github.com/users/Valloric/orgs", "repos_url": "https://api.github.com/users/Valloric/repos", "events_url": "https://api.github.com/users/Valloric/events{/privacy}", "received_events_url": "https://api.github.com/users/Valloric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afaa40646542ca1e8fadb7e1d34197237e0fcd19", "url": "https://api.github.com/repos/rust-lang/rust/commits/afaa40646542ca1e8fadb7e1d34197237e0fcd19", "html_url": "https://github.com/rust-lang/rust/commit/afaa40646542ca1e8fadb7e1d34197237e0fcd19"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "8fb4e0d6a02e35cb0e13a7e58851281fc58df04f", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc425e2e64863d4e1aa0f2bb41f7bfa3cd14b558/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc425e2e64863d4e1aa0f2bb41f7bfa3cd14b558/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=dc425e2e64863d4e1aa0f2bb41f7bfa3cd14b558", "patch": "@@ -229,6 +229,8 @@ pub fn forget<T>(t: T) {\n /// 2. Round up the current size to the nearest multiple of the next field's [alignment].\n ///\n /// Finally, round the size of the struct to the nearest multiple of its [alignment].\n+/// The alignment of the struct is usually the largest alignment of all its\n+/// fields; this can be changed with the use of `repr(align(N))`.\n ///\n /// Unlike `C`, zero sized structs are not rounded up to one byte in size.\n ///\n@@ -283,7 +285,8 @@ pub fn forget<T>(t: T) {\n /// // The size of the second field is 2, so add 2 to the size. Size is 4.\n /// // The alignment of the third field is 1, so add 0 to the size for padding. Size is 4.\n /// // The size of the third field is 1, so add 1 to the size. Size is 5.\n-/// // Finally, the alignment of the struct is 2, so add 1 to the size for padding. Size is 6.\n+/// // Finally, the alignment of the struct is 2 (because the largest alignment amongst its\n+/// // fields is 2), so add 1 to the size for padding. Size is 6.\n /// assert_eq!(6, mem::size_of::<FieldStruct>());\n ///\n /// #[repr(C)]"}]}