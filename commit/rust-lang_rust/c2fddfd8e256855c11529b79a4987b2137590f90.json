{"sha": "c2fddfd8e256855c11529b79a4987b2137590f90", "node_id": "C_kwDOAAsO6NoAKGMyZmRkZmQ4ZTI1Njg1NWMxMTUyOWI3OWE0OTg3YjIxMzc1OTBmOTA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-03-24T15:01:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-03-24T15:53:18Z"}, "message": "miri: fix raw pointer dyn receivers", "tree": {"sha": "cbd567b9b53f7f0852145036679841ed09df1365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbd567b9b53f7f0852145036679841ed09df1365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2fddfd8e256855c11529b79a4987b2137590f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2fddfd8e256855c11529b79a4987b2137590f90", "html_url": "https://github.com/rust-lang/rust/commit/c2fddfd8e256855c11529b79a4987b2137590f90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2fddfd8e256855c11529b79a4987b2137590f90/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f421586eed77de266a3f99ffa8a5687b7d2d893c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f421586eed77de266a3f99ffa8a5687b7d2d893c", "html_url": "https://github.com/rust-lang/rust/commit/f421586eed77de266a3f99ffa8a5687b7d2d893c"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "fc83985eaca22fdc5596fc370081327353b70c23", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2fddfd8e256855c11529b79a4987b2137590f90/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fddfd8e256855c11529b79a4987b2137590f90/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=c2fddfd8e256855c11529b79a4987b2137590f90", "patch": "@@ -539,7 +539,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let mut receiver = args[0].clone();\n                 let receiver_place = loop {\n                     match receiver.layout.ty.kind() {\n-                        ty::Ref(..) | ty::RawPtr(..) => break self.deref_operand(&receiver)?,\n+                        ty::Ref(..) | ty::RawPtr(..) => {\n+                            // We do *not* use `deref_operand` here: we don't want to conceptually\n+                            // create a place that must be dereferenceable, since the receiver might\n+                            // be a raw pointer and (for `*const dyn Trait`) we don't need to\n+                            // actually access memory to resolve this method.\n+                            // Also see <https://github.com/rust-lang/miri/issues/2786>.\n+                            let val = self.read_immediate(&receiver)?;\n+                            break self.ref_to_mplace(&val)?;\n+                        }\n                         ty::Dynamic(.., ty::Dyn) => break receiver.assert_mem_place(), // no immediate unsized values\n                         ty::Dynamic(.., ty::DynStar) => {\n                             // Not clear how to handle this, so far we assume the receiver is always a pointer."}, {"sha": "fc58775a195e81914f8c0e09995bcfea87b12fb1", "filename": "src/tools/miri/tests/pass/dyn-arbitrary-self.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c2fddfd8e256855c11529b79a4987b2137590f90/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdyn-arbitrary-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2fddfd8e256855c11529b79a4987b2137590f90/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdyn-arbitrary-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdyn-arbitrary-self.rs?ref=c2fddfd8e256855c11529b79a4987b2137590f90", "patch": "@@ -123,8 +123,35 @@ fn pointers_and_wrappers() {\n     assert_eq!(wpw.wrapper_ptr_wrapper(), 7);\n }\n \n+fn raw_ptr_receiver() {\n+    use std::ptr;\n+\n+    trait Foo {\n+        fn foo(self: *const Self) -> &'static str;\n+    }\n+\n+    impl Foo for i32 {\n+        fn foo(self: *const Self) -> &'static str {\n+            \"I'm an i32!\"\n+        }\n+    }\n+\n+    impl Foo for u32 {\n+        fn foo(self: *const Self) -> &'static str {\n+            \"I'm a u32!\"\n+        }\n+    }\n+\n+    let null_i32 = ptr::null::<i32>() as *const dyn Foo;\n+    let null_u32 = ptr::null::<u32>() as *const dyn Foo;\n+\n+    assert_eq!(\"I'm an i32!\", null_i32.foo());\n+    assert_eq!(\"I'm a u32!\", null_u32.foo());\n+}\n+\n fn main() {\n     pin_box_dyn();\n     stdlib_pointers();\n     pointers_and_wrappers();\n+    raw_ptr_receiver();\n }"}]}