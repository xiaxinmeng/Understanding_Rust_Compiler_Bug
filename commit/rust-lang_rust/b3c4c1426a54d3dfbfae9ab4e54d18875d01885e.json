{"sha": "b3c4c1426a54d3dfbfae9ab4e54d18875d01885e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYzRjMTQyNmE1NGQzZGZiZmFlOWFiNGU1NGQxODg3NWQwMTg4NWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-27T18:28:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-27T18:29:19Z"}, "message": "rustboot: Emit an error message instead of asserting on a type-param mismatch in tag constructors in patterns", "tree": {"sha": "ce1ad72674a2fd62d409512b452719806a7d7375", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce1ad72674a2fd62d409512b452719806a7d7375"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3c4c1426a54d3dfbfae9ab4e54d18875d01885e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3c4c1426a54d3dfbfae9ab4e54d18875d01885e", "html_url": "https://github.com/rust-lang/rust/commit/b3c4c1426a54d3dfbfae9ab4e54d18875d01885e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3c4c1426a54d3dfbfae9ab4e54d18875d01885e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d0da7545588e22c734c21d1bf81d610a3d3f3cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0da7545588e22c734c21d1bf81d610a3d3f3cc", "html_url": "https://github.com/rust-lang/rust/commit/3d0da7545588e22c734c21d1bf81d610a3d3f3cc"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "fa5dcc06a5780dd5a91e0d6f8223977ddbc08a20", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3c4c1426a54d3dfbfae9ab4e54d18875d01885e/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b3c4c1426a54d3dfbfae9ab4e54d18875d01885e/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=b3c4c1426a54d3dfbfae9ab4e54d18875d01885e", "patch": "@@ -768,12 +768,12 @@ let pattern_resolving_visitor\n       end\n   in\n \n-  let resolve_arm { node = arm; id = _ } =\n+  let resolve_arm { node = arm; id = id } =\n     match fst arm with\n         Ast.PAT_tag (lval, pats) ->\n           let lval_nm = lval_to_name lval in\n           let lval_id = lval_base_id lval in\n-          let tag_ctor_id = (lval_item cx lval).id in\n+          let tag_ctor_id = (lval_item ~node_id:id cx lval).id in\n             if defn_id_is_item cx tag_ctor_id\n \n             (* FIXME (issue #76): we should actually check here that the"}, {"sha": "1eb88ab16781ce14918d98c0aade14da8e978d3e", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b3c4c1426a54d3dfbfae9ab4e54d18875d01885e/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b3c4c1426a54d3dfbfae9ab4e54d18875d01885e/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=b3c4c1426a54d3dfbfae9ab4e54d18875d01885e", "patch": "@@ -1406,7 +1406,7 @@ let exports_permit (view:Ast.mod_view) (ident:Ast.ident) : bool =\n ;;\n \n (* NB: this will fail if lval is not an item. *)\n-let rec lval_item (cx:ctxt) (lval:Ast.lval) : Ast.mod_item =\n+let rec lval_item ?node_id:node_id (cx:ctxt) (lval:Ast.lval) : Ast.mod_item =\n   match lval with\n       Ast.LVAL_base _ ->\n         let defn_id = lval_base_defn_id cx lval in\n@@ -1429,9 +1429,13 @@ let rec lval_item (cx:ctxt) (lval:Ast.lval) : Ast.mod_item =\n                 in\n                   match htab_search items i with\n                     | Some sub when exports_permit view i ->\n-                        assert\n-                          ((Array.length sub.node.Ast.decl_params) =\n-                              (Array.length args));\n+                        if Array.length sub.node.Ast.decl_params !=\n+                            (Array.length args) then\n+                          err node_id\n+                            \"%a has %d type-params but %d given\"\n+                            Ast.sprintf_mod_item (\"\", sub)\n+                            (Array.length sub.node.Ast.decl_params)\n+                            (Array.length args);\n                         check_concrete base_item.node.Ast.decl_params sub\n                     | _ -> err (Some (lval_base_id lval))\n                         \"unknown module item '%s'\" i"}]}