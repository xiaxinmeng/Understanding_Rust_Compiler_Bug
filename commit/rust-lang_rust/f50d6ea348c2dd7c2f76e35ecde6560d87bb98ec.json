{"sha": "f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MGQ2ZWEzNDhjMmRkN2MyZjc2ZTM1ZWNkZTY1NjBkODdiYjk4ZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-20T03:07:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-20T03:07:39Z"}, "message": "Auto merge of #66104 - yodaldevoid:generic-arg-disambiguation, r=petrochenkov\n\nGeneric arg disambiguation\n\nUsing the tactic suggested by @petrochenkov in https://github.com/rust-lang/rust/issues/60804#issuecomment-516769465 and on [zulip](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/generic.20argument.20disambiguation), this change checks type arguments to see if they are really incorrectly-parsed const arguments.\n\nit should be noted that `segments.len() == 1 && segments[0].arg.is_none()` was reduced to `segments.len() == 1` as suggested by @petrochenkov in [zulip](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/generic.20argument.20disambiguation/near/177848002). This change allowed a few more existing tests to have their braces removed.\n\nThere are a couple of \"problems\" with these changes that I should note. First, there was a regression in the error messages found in \"src/test/ui/privacy-ns1.rs\" and \"src/test/ui/privacy-ns1.rs\". Second, some braces were unable to be removed from \"src/test/ui/const-generics/fn-const-param-infer.rs\". Those on line 24 caused the statement to stop equating when removed, and those on line 20 cause a statement that should not equate to produce no error when removed.\n\nI have not looked further into any of these issues yet, though I would be willing to look into them before landing this. I simply wanted to get some other eyes on this before going further.\n\nFixes #60804\n\ncc @varkor @jplatte", "tree": {"sha": "3ee8e88d65463afa48968ad77ffbb859586fb179", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ee8e88d65463afa48968ad77ffbb859586fb179"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "html_url": "https://github.com/rust-lang/rust/commit/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8", "html_url": "https://github.com/rust-lang/rust/commit/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8"}, {"sha": "0207a15fa14c2c05e33acac1abd4604fce1f346a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0207a15fa14c2c05e33acac1abd4604fce1f346a", "html_url": "https://github.com/rust-lang/rust/commit/0207a15fa14c2c05e33acac1abd4604fce1f346a"}], "stats": {"total": 319, "additions": 221, "deletions": 98}, "files": [{"sha": "231b054f9748d19d1641dd80f82dd571da18f4a6", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -127,6 +127,34 @@ impl DefKind {\n             _ => \"a\",\n         }\n     }\n+\n+    pub fn matches_ns(&self, ns: Namespace) -> bool {\n+        match self {\n+            DefKind::Mod\n+            | DefKind::Struct\n+            | DefKind::Union\n+            | DefKind::Enum\n+            | DefKind::Variant\n+            | DefKind::Trait\n+            | DefKind::OpaqueTy\n+            | DefKind::TyAlias\n+            | DefKind::ForeignTy\n+            | DefKind::TraitAlias\n+            | DefKind::AssocTy\n+            | DefKind::AssocOpaqueTy\n+            | DefKind::TyParam => ns == Namespace::TypeNS,\n+\n+            DefKind::Fn\n+            | DefKind::Const\n+            | DefKind::ConstParam\n+            | DefKind::Static\n+            | DefKind::Ctor(..)\n+            | DefKind::Method\n+            | DefKind::AssocConst => ns == Namespace::ValueNS,\n+\n+            DefKind::Macro(..) => ns == Namespace::MacroNS,\n+        }\n+    }\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n@@ -427,4 +455,14 @@ impl<Id> Res<Id> {\n             _ => None,\n         }\n     }\n+\n+    pub fn matches_ns(&self, ns: Namespace) -> bool {\n+        match self {\n+            Res::Def(kind, ..) => kind.matches_ns(ns),\n+            Res::PrimTy(..) | Res::SelfTy(..) | Res::ToolMod => ns == Namespace::TypeNS,\n+            Res::SelfCtor(..) | Res::Local(..) => ns == Namespace::ValueNS,\n+            Res::NonMacroAttr(..) => ns == Namespace::MacroNS,\n+            Res::Err => true,\n+        }\n+    }\n }"}, {"sha": "06a7a6bb301de717154b165717ef4391ad9fcdb5", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -1155,13 +1155,64 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_generic_arg(&mut self,\n-                         arg: &ast::GenericArg,\n-                         itctx: ImplTraitContext<'_>)\n-                         -> hir::GenericArg {\n+    fn lower_generic_arg(\n+        &mut self,\n+        arg: &ast::GenericArg,\n+        itctx: ImplTraitContext<'_>\n+    ) -> hir::GenericArg {\n         match arg {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n-            ast::GenericArg::Type(ty) => GenericArg::Type(self.lower_ty_direct(&ty, itctx)),\n+            ast::GenericArg::Type(ty) => {\n+                // We parse const arguments as path types as we cannot distiguish them durring\n+                // parsing. We try to resolve that ambiguity by attempting resolution in both the\n+                // type and value namespaces. If we resolved the path in the value namespace, we\n+                // transform it into a generic const argument.\n+                if let TyKind::Path(ref qself, ref path) = ty.kind {\n+                    if let Some(partial_res) = self.resolver.get_partial_res(ty.id) {\n+                        let res = partial_res.base_res();\n+                        if !res.matches_ns(Namespace::TypeNS) {\n+                            debug!(\n+                                \"lower_generic_arg: Lowering type argument as const argument: {:?}\",\n+                                ty,\n+                            );\n+\n+                            // Construct a AnonConst where the expr is the \"ty\"'s path.\n+\n+                            let parent_def_index =\n+                                self.current_hir_id_owner.last().unwrap().0;\n+                            let node_id = self.resolver.next_node_id();\n+\n+                            // Add a definition for the in-band const def.\n+                            self.resolver.definitions().create_def_with_parent(\n+                                parent_def_index,\n+                                node_id,\n+                                DefPathData::AnonConst,\n+                                ExpnId::root(),\n+                                ty.span,\n+                            );\n+\n+                            let path_expr = Expr {\n+                                id: ty.id,\n+                                kind: ExprKind::Path(qself.clone(), path.clone()),\n+                                span: ty.span,\n+                                attrs: ThinVec::new(),\n+                            };\n+\n+                            let ct = self.with_new_scopes(|this| {\n+                                hir::AnonConst {\n+                                    hir_id: this.lower_node_id(node_id),\n+                                    body: this.lower_const_body(&path_expr),\n+                                }\n+                            });\n+                            return GenericArg::Const(ConstArg {\n+                                value: ct,\n+                                span: ty.span,\n+                            });\n+                        }\n+                    }\n+                }\n+                GenericArg::Type(self.lower_ty_direct(&ty, itctx))\n+            }\n             ast::GenericArg::Const(ct) => {\n                 GenericArg::Const(ConstArg {\n                     value: self.lower_anon_const(&ct),"}, {"sha": "f48df7faea25aa74f952437c729233772ca1ad34", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -546,6 +546,52 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n             self.visit_where_predicate(p);\n         }\n     }\n+\n+    fn visit_generic_arg(&mut self, arg: &'tcx GenericArg) {\n+        debug!(\"visit_generic_arg({:?})\", arg);\n+        match arg {\n+            GenericArg::Type(ref ty) => {\n+                // We parse const arguments as path types as we cannot distiguish them durring\n+                // parsing. We try to resolve that ambiguity by attempting resolution the type\n+                // namespace first, and if that fails we try again in the value namespace. If\n+                // resolution in the value namespace succeeds, we have an generic const argument on\n+                // our hands.\n+                if let TyKind::Path(ref qself, ref path) = ty.kind {\n+                    // We cannot disambiguate multi-segment paths right now as that requires type\n+                    // checking.\n+                    if path.segments.len() == 1 && path.segments[0].args.is_none() {\n+                        let mut check_ns = |ns| self.resolve_ident_in_lexical_scope(\n+                            path.segments[0].ident, ns, None, path.span\n+                        ).is_some();\n+\n+                        if !check_ns(TypeNS) && check_ns(ValueNS) {\n+                            // This must be equivalent to `visit_anon_const`, but we cannot call it\n+                            // directly due to visitor lifetimes so we have to copy-paste some code.\n+                            self.with_constant_rib(|this| {\n+                                this.smart_resolve_path(\n+                                    ty.id,\n+                                    qself.as_ref(),\n+                                    path,\n+                                    PathSource::Expr(None)\n+                                );\n+\n+                                if let Some(ref qself) = *qself {\n+                                    this.visit_ty(&qself.ty);\n+                                }\n+                                this.visit_path(path, ty.id);\n+                            });\n+\n+                            return;\n+                        }\n+                    }\n+                }\n+\n+                self.visit_ty(ty);\n+            }\n+            GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n+            GenericArg::Const(ct) => self.visit_anon_const(ct),\n+        }\n+    }\n }\n \n impl<'a, 'b> LateResolutionVisitor<'a, '_> {"}, {"sha": "c49db39643bc799639676cd117a880c54b4497fd", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -1726,6 +1726,14 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n+        if ns == TypeNS {\n+            if let Some(prim_ty) = self.primitive_type_table.primitive_types.get(&ident.name) {\n+                let binding = (Res::PrimTy(*prim_ty), ty::Visibility::Public,\n+                               DUMMY_SP, ExpnId::root()).to_name_binding(self.arenas);\n+                return Some(LexicalScopeBinding::Item(binding));\n+            }\n+        }\n+\n         None\n     }\n "}, {"sha": "56a58c582f6457af5dd15a39e1502b3fc65725d5", "filename": "src/test/ui/const-generics/const-generic-array-wrapper.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -3,11 +3,11 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n-struct Foo<T, const N: usize>([T; {N}]);\n+struct Foo<T, const N: usize>([T; N]);\n \n-impl<T, const N: usize> Foo<T, {N}> {\n+impl<T, const N: usize> Foo<T, N> {\n     fn foo(&self) -> usize {\n-        {N}\n+        N\n     }\n }\n "}, {"sha": "cd4b19db3533117f6d6bff106ec48ed3911d4112", "filename": "src/test/ui/const-generics/fn-const-param-call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -9,12 +9,12 @@ fn function() -> u32 {\n \n struct Wrapper<const F: fn() -> u32>;\n \n-impl<const F: fn() -> u32> Wrapper<{F}> {\n+impl<const F: fn() -> u32> Wrapper<F> {\n     fn call() -> u32 {\n         F()\n     }\n }\n \n fn main() {\n-    assert_eq!(Wrapper::<{function}>::call(), 17);\n+    assert_eq!(Wrapper::<function>::call(), 17);\n }"}, {"sha": "dc69fa9eea58556eed6d94264fcd2554ebc20b14", "filename": "src/test/ui/const-generics/fn-const-param-infer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -11,15 +11,15 @@ fn generic_arg<T>(val: T) -> bool { true }\n fn generic<T>(val: usize) -> bool { val != 1 }\n \n fn main() {\n-    let _: Option<Checked<{not_one}>> = None;\n-    let _: Checked<{not_one}> = Checked::<{not_one}>;\n-    let _: Checked<{not_one}> = Checked::<{not_two}>; //~ mismatched types\n+    let _: Option<Checked<not_one>> = None;\n+    let _: Checked<not_one> = Checked::<not_one>;\n+    let _: Checked<not_one> = Checked::<not_two>; //~ mismatched types\n \n-    let _ = Checked::<{generic_arg}>;\n+    let _ = Checked::<generic_arg>;\n     let _ = Checked::<{generic_arg::<usize>}>;\n     let _ = Checked::<{generic_arg::<u32>}>;  //~ mismatched types\n \n-    let _ = Checked::<{generic}>; //~ type annotations needed\n+    let _ = Checked::<generic>; //~ type annotations needed\n     let _ = Checked::<{generic::<u16>}>;\n     let _: Checked<{generic::<u16>}> = Checked::<{generic::<u16>}>;\n     let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>; //~ mismatched types"}, {"sha": "e36bb824151f710e5e6dd43c14e801a72927284d", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -7,10 +7,10 @@ LL | #![feature(const_generics, const_compare_raw_pointers)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-const-param-infer.rs:16:33\n+  --> $DIR/fn-const-param-infer.rs:16:31\n    |\n-LL |     let _: Checked<{not_one}> = Checked::<{not_two}>;\n-   |                                 ^^^^^^^^^^^^^^^^^^^^ expected `not_one`, found `not_two`\n+LL |     let _: Checked<not_one> = Checked::<not_two>;\n+   |                               ^^^^^^^^^^^^^^^^^^ expected `not_one`, found `not_two`\n    |\n    = note: expected type `Checked<not_one>`\n               found type `Checked<not_two>`\n@@ -25,10 +25,10 @@ LL |     let _ = Checked::<{generic_arg::<u32>}>;\n               found type `fn(u32) -> bool {generic_arg::<u32>}`\n \n error[E0282]: type annotations needed\n-  --> $DIR/fn-const-param-infer.rs:22:24\n+  --> $DIR/fn-const-param-infer.rs:22:23\n    |\n-LL |     let _ = Checked::<{generic}>;\n-   |                        ^^^^^^^ cannot infer type for `T`\n+LL |     let _ = Checked::<generic>;\n+   |                       ^^^^^^^ cannot infer type for `T`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:25:40"}, {"sha": "87572e51e8142df6b04535d82dadc2cf3d051323", "filename": "src/test/ui/const-generics/impl-const-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -5,7 +5,7 @@\n \n struct S<const X: u32>;\n \n-impl<const X: u32> S<{X}> {\n+impl<const X: u32> S<X> {\n     fn x() -> u32 {\n         X\n     }"}, {"sha": "745dde3c2876661236df9fb48392f1be6d58071a", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -6,7 +6,7 @@ const A: u32 = 3;\n \n struct Const<const P: *const u32>;\n \n-impl<const P: *const u32> Const<{P}> {\n+impl<const P: *const u32> Const<P> {\n     fn get() -> u32 {\n         unsafe {\n             *P"}, {"sha": "7942631bb70b9f632583db09285b74b9f18e4941", "filename": "src/test/ui/const-generics/uninferred-consts-during-codegen-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.rs?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -7,7 +7,7 @@ use std::fmt;\n \n struct Array<T, const N: usize>([T; N]);\n \n-impl<T: fmt::Debug, const N: usize> fmt::Debug for Array<T, {N}> {\n+impl<T: fmt::Debug, const N: usize> fmt::Debug for Array<T, N> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list().entries(self.0.iter()).finish()\n     }"}, {"sha": "614375e5e51d5268d00bae3f37e96a76d9331a31", "filename": "src/test/ui/privacy/privacy-ns1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.rs?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -32,7 +32,8 @@ pub mod foo2 {\n fn test_glob2() {\n     use foo2::*;\n \n-    let _x: Box<Bar>;  //~ ERROR expected type, found function `Bar`\n+    let _x: Box<Bar>;  //~ ERROR wrong number of const arguments: expected 0, found 1\n+    //~^ ERROR wrong number of type arguments: expected 1, found 0\n }\n \n // neither public"}, {"sha": "45ca00f55ab596598b61c54ecaae4cf7e267b246", "filename": "src/test/ui/privacy/privacy-ns1.stderr", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -20,30 +20,8 @@ LL | use foo2::Bar;\n LL | use foo3::Bar;\n    |\n \n-error[E0573]: expected type, found function `Bar`\n-  --> $DIR/privacy-ns1.rs:35:17\n-   |\n-LL |     pub struct Baz;\n-   |     --------------- similarly named struct `Baz` defined here\n-...\n-LL |     let _x: Box<Bar>;\n-   |                 ^^^\n-   |\n-help: a struct with a similar name exists\n-   |\n-LL |     let _x: Box<Baz>;\n-   |                 ^^^\n-help: possible better candidates are found in other modules, you can import them into scope\n-   |\n-LL | use foo1::Bar;\n-   |\n-LL | use foo2::Bar;\n-   |\n-LL | use foo3::Bar;\n-   |\n-\n error[E0425]: cannot find function, tuple struct or tuple variant `Bar` in this scope\n-  --> $DIR/privacy-ns1.rs:50:5\n+  --> $DIR/privacy-ns1.rs:51:5\n    |\n LL |     pub struct Baz;\n    |     --------------- similarly named unit struct `Baz` defined here\n@@ -65,7 +43,7 @@ LL | use foo3::Bar;\n    |\n \n error[E0412]: cannot find type `Bar` in this scope\n-  --> $DIR/privacy-ns1.rs:51:17\n+  --> $DIR/privacy-ns1.rs:52:17\n    |\n LL |     pub struct Baz;\n    |     --------------- similarly named struct `Baz` defined here\n@@ -86,7 +64,19 @@ LL | use foo2::Bar;\n LL | use foo3::Bar;\n    |\n \n-error: aborting due to 4 previous errors\n+error[E0107]: wrong number of const arguments: expected 0, found 1\n+  --> $DIR/privacy-ns1.rs:35:17\n+   |\n+LL |     let _x: Box<Bar>;\n+   |                 ^^^ unexpected const argument\n+\n+error[E0107]: wrong number of type arguments: expected 1, found 0\n+  --> $DIR/privacy-ns1.rs:35:13\n+   |\n+LL |     let _x: Box<Bar>;\n+   |             ^^^^^^^^ expected 1 type argument\n+\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0412, E0423, E0425, E0573.\n-For more information about an error, try `rustc --explain E0412`.\n+Some errors have detailed explanations: E0107, E0412, E0423, E0425.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "0546de873f3404aeaa7ab4092bed04b92f3b0ee7", "filename": "src/test/ui/privacy/privacy-ns2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.rs?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -38,14 +38,16 @@ pub mod foo2 {\n fn test_single2() {\n     use foo2::Bar;\n \n-    let _x : Box<Bar>; //~ ERROR expected type, found function `Bar`\n+    let _x : Box<Bar>; //~ ERROR wrong number of const arguments: expected 0, found 1\n+    //~^ ERROR wrong number of type arguments: expected 1, found 0\n     let _x : Bar(); //~ ERROR expected type, found function `Bar`\n }\n \n fn test_list2() {\n     use foo2::{Bar,Baz};\n \n-    let _x: Box<Bar>; //~ ERROR expected type, found function `Bar`\n+    let _x: Box<Bar>; //~ ERROR wrong number of const arguments: expected 0, found 1\n+    //~^ ERROR wrong number of type arguments: expected 1, found 0\n }\n \n // neither public"}, {"sha": "2871573130a60c8eb97af63ef38c8e75ea97ca4a", "filename": "src/test/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 31, "deletions": 44, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=f50d6ea348c2dd7c2f76e35ecde6560d87bb98ec", "patch": "@@ -36,22 +36,7 @@ LL | use foo3::Bar;\n    |\n \n error[E0573]: expected type, found function `Bar`\n-  --> $DIR/privacy-ns2.rs:41:18\n-   |\n-LL |     let _x : Box<Bar>;\n-   |                  ^^^ not a type\n-   |\n-help: possible better candidates are found in other modules, you can import them into scope\n-   |\n-LL | use foo1::Bar;\n-   |\n-LL | use foo2::Bar;\n-   |\n-LL | use foo3::Bar;\n-   |\n-\n-error[E0573]: expected type, found function `Bar`\n-  --> $DIR/privacy-ns2.rs:42:14\n+  --> $DIR/privacy-ns2.rs:43:14\n    |\n LL |     let _x : Bar();\n    |              ^^^^^ not a type\n@@ -69,47 +54,49 @@ LL | use foo2::Bar;\n LL | use foo3::Bar;\n    |\n \n-error[E0573]: expected type, found function `Bar`\n-  --> $DIR/privacy-ns2.rs:48:17\n-   |\n-LL |     pub struct Baz;\n-   |     --------------- similarly named struct `Baz` defined here\n-...\n-LL |     let _x: Box<Bar>;\n-   |                 ^^^\n-   |\n-help: a struct with a similar name exists\n-   |\n-LL |     let _x: Box<Baz>;\n-   |                 ^^^\n-help: possible better candidates are found in other modules, you can import them into scope\n-   |\n-LL | use foo1::Bar;\n-   |\n-LL | use foo2::Bar;\n-   |\n-LL | use foo3::Bar;\n-   |\n-\n error[E0603]: trait `Bar` is private\n-  --> $DIR/privacy-ns2.rs:61:15\n+  --> $DIR/privacy-ns2.rs:63:15\n    |\n LL |     use foo3::Bar;\n    |               ^^^\n \n error[E0603]: trait `Bar` is private\n-  --> $DIR/privacy-ns2.rs:65:15\n+  --> $DIR/privacy-ns2.rs:67:15\n    |\n LL |     use foo3::Bar;\n    |               ^^^\n \n error[E0603]: trait `Bar` is private\n-  --> $DIR/privacy-ns2.rs:72:16\n+  --> $DIR/privacy-ns2.rs:74:16\n    |\n LL |     use foo3::{Bar,Baz};\n    |                ^^^\n \n-error: aborting due to 8 previous errors\n+error[E0107]: wrong number of const arguments: expected 0, found 1\n+  --> $DIR/privacy-ns2.rs:41:18\n+   |\n+LL |     let _x : Box<Bar>;\n+   |                  ^^^ unexpected const argument\n+\n+error[E0107]: wrong number of type arguments: expected 1, found 0\n+  --> $DIR/privacy-ns2.rs:41:14\n+   |\n+LL |     let _x : Box<Bar>;\n+   |              ^^^^^^^^ expected 1 type argument\n+\n+error[E0107]: wrong number of const arguments: expected 0, found 1\n+  --> $DIR/privacy-ns2.rs:49:17\n+   |\n+LL |     let _x: Box<Bar>;\n+   |                 ^^^ unexpected const argument\n+\n+error[E0107]: wrong number of type arguments: expected 1, found 0\n+  --> $DIR/privacy-ns2.rs:49:13\n+   |\n+LL |     let _x: Box<Bar>;\n+   |             ^^^^^^^^ expected 1 type argument\n+\n+error: aborting due to 10 previous errors\n \n-Some errors have detailed explanations: E0423, E0573, E0603.\n-For more information about an error, try `rustc --explain E0423`.\n+Some errors have detailed explanations: E0107, E0423, E0573, E0603.\n+For more information about an error, try `rustc --explain E0107`."}]}