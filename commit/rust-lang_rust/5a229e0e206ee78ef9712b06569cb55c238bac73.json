{"sha": "5a229e0e206ee78ef9712b06569cb55c238bac73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMjI5ZTBlMjA2ZWU3OGVmOTcxMmIwNjU2OWNiNTVjMjM4YmFjNzM=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-04-13T17:11:11Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-05-13T21:31:58Z"}, "message": "Add tests for global_asm!", "tree": {"sha": "cf13ecf0859c68ae59743eb64d22fea41053a2ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf13ecf0859c68ae59743eb64d22fea41053a2ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a229e0e206ee78ef9712b06569cb55c238bac73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a229e0e206ee78ef9712b06569cb55c238bac73", "html_url": "https://github.com/rust-lang/rust/commit/5a229e0e206ee78ef9712b06569cb55c238bac73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a229e0e206ee78ef9712b06569cb55c238bac73/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5918ee431717a276ea1a9c65d7c0009679a0643b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5918ee431717a276ea1a9c65d7c0009679a0643b", "html_url": "https://github.com/rust-lang/rust/commit/5918ee431717a276ea1a9c65d7c0009679a0643b"}], "stats": {"total": 487, "additions": 455, "deletions": 32}, "files": [{"sha": "3a7f2fa1efb6bddf2bd2ac9be79143e9300fa7b3", "filename": "src/test/assembly/asm/global_asm.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -0,0 +1,14 @@\n+// min-llvm-version: 10.0.1\n+// only-x86_64\n+// assembly-output: emit-asm\n+// compile-flags: -C llvm-args=--x86-asm-syntax=intel\n+\n+#![feature(asm, global_asm)]\n+#![crate_type = \"rlib\"]\n+\n+// CHECK: mov eax, eax\n+global_asm!(\"mov eax, eax\");\n+// CHECK: mov ebx, 5\n+global_asm!(\"mov ebx, {}\", const 5);\n+// CHECK: mov ecx, 5\n+global_asm!(\"movl ${}, %ecx\", const 5, options(att_syntax));"}, {"sha": "b491a70d1e2170cb4e97ac13f78b2a5b249cef7b", "filename": "src/test/ui/asm/bad-arch.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fbad-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fbad-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-arch.rs?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -8,6 +8,10 @@\n macro_rules! asm {\n     () => {};\n }\n+#[rustc_builtin_macro]\n+macro_rules! global_asm {\n+    () => {};\n+}\n #[lang = \"sized\"]\n trait Sized {}\n \n@@ -17,3 +21,6 @@ fn main() {\n         //~^ ERROR asm! is unsupported on this target\n     }\n }\n+\n+global_asm!(\"\");\n+//~^ ERROR asm! is unsupported on this target"}, {"sha": "d006320bf45bf5bff9c75ba05e315ec3cc6ecd4a", "filename": "src/test/ui/asm/bad-arch.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fbad-arch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fbad-arch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-arch.stderr?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -1,8 +1,16 @@\n error[E0472]: asm! is unsupported on this target\n-  --> $DIR/bad-arch.rs:16:9\n+  --> $DIR/bad-arch.rs:20:9\n    |\n LL |         asm!(\"\");\n    |         ^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0472]: asm! is unsupported on this target\n+  --> $DIR/bad-arch.rs:25:1\n+   |\n+LL | global_asm!(\"\");\n+   | ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "923d65bfd96ed8c02c8011fc2bf6d0ff89c992db", "filename": "src/test/ui/asm/bad-options.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fbad-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fbad-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-options.rs?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -1,6 +1,6 @@\n // only-x86_64\n \n-#![feature(asm)]\n+#![feature(asm, global_asm)]\n \n fn main() {\n     let mut foo = 0;\n@@ -16,3 +16,16 @@ fn main() {\n         //~^ ERROR asm outputs are not allowed with the `noreturn` option\n     }\n }\n+\n+global_asm!(\"\", options(nomem));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(readonly));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(noreturn));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(pure));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(nostack));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(preserves_flags));\n+//~^ ERROR expected one of"}, {"sha": "4e27a6e2cb5958b77b5e662af07efc95a7e9cf96", "filename": "src/test/ui/asm/bad-options.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-options.stderr?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -28,5 +28,41 @@ error: asm outputs are not allowed with the `noreturn` option\n LL |         asm!(\"{}\", out(reg) foo, options(noreturn));\n    |                    ^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: expected one of `)` or `att_syntax`, found `nomem`\n+  --> $DIR/bad-options.rs:20:25\n+   |\n+LL | global_asm!(\"\", options(nomem));\n+   |                         ^^^^^ expected one of `)` or `att_syntax`\n+\n+error: expected one of `)` or `att_syntax`, found `readonly`\n+  --> $DIR/bad-options.rs:22:25\n+   |\n+LL | global_asm!(\"\", options(readonly));\n+   |                         ^^^^^^^^ expected one of `)` or `att_syntax`\n+\n+error: expected one of `)` or `att_syntax`, found `noreturn`\n+  --> $DIR/bad-options.rs:24:25\n+   |\n+LL | global_asm!(\"\", options(noreturn));\n+   |                         ^^^^^^^^ expected one of `)` or `att_syntax`\n+\n+error: expected one of `)` or `att_syntax`, found `pure`\n+  --> $DIR/bad-options.rs:26:25\n+   |\n+LL | global_asm!(\"\", options(pure));\n+   |                         ^^^^ expected one of `)` or `att_syntax`\n+\n+error: expected one of `)` or `att_syntax`, found `nostack`\n+  --> $DIR/bad-options.rs:28:25\n+   |\n+LL | global_asm!(\"\", options(nostack));\n+   |                         ^^^^^^^ expected one of `)` or `att_syntax`\n+\n+error: expected one of `)` or `att_syntax`, found `preserves_flags`\n+  --> $DIR/bad-options.rs:30:25\n+   |\n+LL | global_asm!(\"\", options(preserves_flags));\n+   |                         ^^^^^^^^^^^^^^^ expected one of `)` or `att_syntax`\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "4404be4fa3a68020c1d24ed8131630009d4057d0", "filename": "src/test/ui/asm/bad-template.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -1,6 +1,6 @@\n // only-x86_64\n \n-#![feature(asm)]\n+#![feature(asm, global_asm)]\n \n fn main() {\n     let mut foo = 0;\n@@ -26,3 +26,22 @@ fn main() {\n         //~^ ERROR multiple unused asm arguments\n     }\n }\n+\n+const FOO: i32 = 1;\n+global_asm!(\"{}\");\n+//~^ ERROR invalid reference to argument at index 0\n+global_asm!(\"{1}\", const FOO);\n+//~^ ERROR invalid reference to argument at index 1\n+//~^^ ERROR argument never used\n+global_asm!(\"{a}\");\n+//~^ ERROR there is no argument named `a`\n+global_asm!(\"{}\", a = const FOO);\n+//~^ ERROR invalid reference to argument at index 0\n+//~^^ ERROR argument never used\n+global_asm!(\"{1}\", a = const FOO);\n+//~^ ERROR invalid reference to argument at index 1\n+//~^^ ERROR named argument never used\n+global_asm!(\"{:foo}\", const FOO);\n+//~^ ERROR asm template modifier must be a single character\n+global_asm!(\"\", const FOO, const FOO);\n+//~^ ERROR multiple unused asm arguments"}, {"sha": "d95663d2a734a0d920e47955d8671658d469b5c7", "filename": "src/test/ui/asm/bad-template.stderr", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fbad-template.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fbad-template.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.stderr?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -98,5 +98,90 @@ LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    |\n    = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n \n-error: aborting due to 11 previous errors\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:31:14\n+   |\n+LL | global_asm!(\"{}\");\n+   |              ^^ from here\n+   |\n+   = note: no arguments were given\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:33:14\n+   |\n+LL | global_asm!(\"{1}\", const FOO);\n+   |              ^^^ from here\n+   |\n+   = note: there is 1 argument\n+\n+error: argument never used\n+  --> $DIR/bad-template.rs:33:20\n+   |\n+LL | global_asm!(\"{1}\", const FOO);\n+   |                    ^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n+\n+error: there is no argument named `a`\n+  --> $DIR/bad-template.rs:36:14\n+   |\n+LL | global_asm!(\"{a}\");\n+   |              ^^^\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:38:14\n+   |\n+LL | global_asm!(\"{}\", a = const FOO);\n+   |              ^^   ------------- named argument\n+   |              |\n+   |              from here\n+   |\n+   = note: no positional arguments were given\n+note: named arguments cannot be referenced by position\n+  --> $DIR/bad-template.rs:38:19\n+   |\n+LL | global_asm!(\"{}\", a = const FOO);\n+   |                   ^^^^^^^^^^^^^\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:38:19\n+   |\n+LL | global_asm!(\"{}\", a = const FOO);\n+   |                   ^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:41:14\n+   |\n+LL | global_asm!(\"{1}\", a = const FOO);\n+   |              ^^^ from here\n+   |\n+   = note: no positional arguments were given\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:41:20\n+   |\n+LL | global_asm!(\"{1}\", a = const FOO);\n+   |                    ^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: asm template modifier must be a single character\n+  --> $DIR/bad-template.rs:44:16\n+   |\n+LL | global_asm!(\"{:foo}\", const FOO);\n+   |                ^^^\n+\n+error: multiple unused asm arguments\n+  --> $DIR/bad-template.rs:46:17\n+   |\n+LL | global_asm!(\"\", const FOO, const FOO);\n+   |                 ^^^^^^^^^  ^^^^^^^^^ argument never used\n+   |                 |\n+   |                 argument never used\n+   |\n+   = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n+\n+error: aborting due to 21 previous errors\n "}, {"sha": "fd940173c424c53f195e8bf06d1a78c23e215c4c", "filename": "src/test/ui/asm/const.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fconst.rs?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -2,7 +2,7 @@\n // only-x86_64\n // run-pass\n \n-#![feature(asm)]\n+#![feature(asm, global_asm)]\n \n fn const_generic<const X: usize>() -> usize {\n     unsafe {\n@@ -34,3 +34,7 @@ fn main() {\n     let d = const_generic::<5>();\n     assert_eq!(d, 5);\n }\n+\n+global_asm!(\"mov eax, {}\", const 5);\n+global_asm!(\"mov eax, {}\", const constfn(5));\n+global_asm!(\"mov eax, {}\", const constfn(5) + constfn(5));"}, {"sha": "d4444e9c6ccd8ee3098f22628cdf004e668af1af", "filename": "src/test/ui/asm/duplicate-options.fixed", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.fixed?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -1,7 +1,7 @@\n // only-x86_64\n // run-rustfix\n \n-#![feature(asm)]\n+#![feature(asm, global_asm)]\n \n fn main() {\n     unsafe {\n@@ -24,3 +24,6 @@ fn main() {\n         );\n     }\n }\n+\n+global_asm!(\"\", options(att_syntax, ));\n+//~^ ERROR the `att_syntax` option was already provided"}, {"sha": "fd28311984bf18a25254e8c5a2eb5ab32f46ecd5", "filename": "src/test/ui/asm/duplicate-options.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.rs?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -1,7 +1,7 @@\n // only-x86_64\n // run-rustfix\n \n-#![feature(asm)]\n+#![feature(asm, global_asm)]\n \n fn main() {\n     unsafe {\n@@ -24,3 +24,6 @@ fn main() {\n         );\n     }\n }\n+\n+global_asm!(\"\", options(att_syntax, att_syntax));\n+//~^ ERROR the `att_syntax` option was already provided"}, {"sha": "53edf8fb91cf6df19cc48fb8b864b8e5aead7a89", "filename": "src/test/ui/asm/duplicate-options.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.stderr?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -52,5 +52,11 @@ error: the `noreturn` option was already provided\n LL |             options(noreturn),\n    |                     ^^^^^^^^ this option was already provided\n \n-error: aborting due to 9 previous errors\n+error: the `att_syntax` option was already provided\n+  --> $DIR/duplicate-options.rs:28:37\n+   |\n+LL | global_asm!(\"\", options(att_syntax, att_syntax));\n+   |                                     ^^^^^^^^^^ this option was already provided\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "b1685bd4e027a7600815ff3fbff8623bf6f3b05f", "filename": "src/test/ui/asm/inline-syntax.arm.stderr", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -1,5 +1,19 @@\n error: unknown directive\n-  --> $DIR/inline-syntax.rs:25:15\n+.intel_syntax noprefix\n+^\n+error: unknown directive\n+.intel_syntax noprefix\n+^\n+error: unknown directive\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:1\n+   |\n+LL | .intel_syntax noprefix\n+   | ^\n+\n+error: unknown directive\n+  --> $DIR/inline-syntax.rs:29:15\n    |\n LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n    |               ^\n@@ -11,7 +25,7 @@ LL |     .intel_syntax noprefix\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:28:15\n+  --> $DIR/inline-syntax.rs:32:15\n    |\n LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n    |               ^\n@@ -23,7 +37,7 @@ LL |     .intel_syntax aaa noprefix\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:31:15\n+  --> $DIR/inline-syntax.rs:35:15\n    |\n LL |         asm!(\".att_syntax noprefix\", \"nop\");\n    |               ^\n@@ -35,7 +49,7 @@ LL |     .att_syntax noprefix\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:34:15\n+  --> $DIR/inline-syntax.rs:38:15\n    |\n LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n    |               ^\n@@ -47,7 +61,7 @@ LL |     .att_syntax bbb noprefix\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:37:15\n+  --> $DIR/inline-syntax.rs:41:15\n    |\n LL |         asm!(\".intel_syntax noprefix; nop\");\n    |               ^\n@@ -59,7 +73,7 @@ LL |     .intel_syntax noprefix; nop\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:43:13\n+  --> $DIR/inline-syntax.rs:47:13\n    |\n LL |             .intel_syntax noprefix\n    |             ^\n@@ -70,5 +84,5 @@ note: instantiated into assembly here\n LL |             .intel_syntax noprefix\n    |             ^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "2d54ef7bd6b401e46e4bd593d12cf5c0a97c0579", "filename": "src/test/ui/asm/inline-syntax.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -16,6 +16,10 @@\n macro_rules! asm {\n     () => {};\n }\n+#[rustc_builtin_macro]\n+macro_rules! global_asm {\n+    () => {};\n+}\n \n #[lang = \"sized\"]\n trait Sized {}\n@@ -47,3 +51,7 @@ pub fn main() {\n         //[arm]~^^^^ ERROR unknown directive\n     }\n }\n+\n+global_asm!(\".intel_syntax noprefix\", \"nop\");\n+//[x86_64]~^ WARN avoid using `.intel_syntax`\n+// Assembler errors don't have line numbers, so no error on ARM"}, {"sha": "59c95194322aaf2a5bbb4c2aa24ff448a780155b", "filename": "src/test/ui/asm/inline-syntax.x86_64.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -1,40 +1,46 @@\n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:25:15\n+  --> $DIR/inline-syntax.rs:55:14\n    |\n-LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^^\n+LL | global_asm!(\".intel_syntax noprefix\", \"nop\");\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(bad_asm_style)]` on by default\n \n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:28:15\n+  --> $DIR/inline-syntax.rs:29:15\n+   |\n+LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: avoid using `.intel_syntax`, Intel syntax is the default\n+  --> $DIR/inline-syntax.rs:32:15\n    |\n LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\n-  --> $DIR/inline-syntax.rs:31:15\n+  --> $DIR/inline-syntax.rs:35:15\n    |\n LL |         asm!(\".att_syntax noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\n-  --> $DIR/inline-syntax.rs:34:15\n+  --> $DIR/inline-syntax.rs:38:15\n    |\n LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:37:15\n+  --> $DIR/inline-syntax.rs:41:15\n    |\n LL |         asm!(\".intel_syntax noprefix; nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:43:13\n+  --> $DIR/inline-syntax.rs:47:13\n    |\n LL |             .intel_syntax noprefix\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: 6 warnings emitted\n+warning: 7 warnings emitted\n "}, {"sha": "e62e6668415bd55abb64d35f6e46fbccfbfdebe2", "filename": "src/test/ui/asm/parse-error.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -1,6 +1,6 @@\n // only-x86_64\n \n-#![feature(asm)]\n+#![feature(asm, global_asm)]\n \n fn main() {\n     let mut foo = 0;\n@@ -63,3 +63,37 @@ fn main() {\n         //~^ ERROR asm template must be a string literal\n     }\n }\n+\n+const FOO: i32 = 1;\n+const BAR: i32 = 2;\n+global_asm!();\n+//~^ ERROR requires at least a template string argument\n+global_asm!(FOO);\n+//~^ ERROR asm template must be a string literal\n+global_asm!(\"{}\" FOO);\n+//~^ ERROR expected token: `,`\n+global_asm!(\"{}\", FOO);\n+//~^ ERROR expected operand, options, or additional template string\n+global_asm!(\"{}\", const);\n+//~^ ERROR expected expression, found end of macro arguments\n+global_asm!(\"{}\", const(reg) FOO);\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(FOO));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(nomem FOO));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(nomem, FOO));\n+//~^ ERROR expected one of\n+global_asm!(\"{}\", options(), const FOO);\n+//~^ ERROR arguments are not allowed after options\n+global_asm!(\"{a}\", a = const FOO, a = const BAR);\n+//~^ ERROR duplicate argument named `a`\n+//~^^ ERROR argument never used\n+global_asm!(\"\", options(), \"\");\n+//~^ ERROR expected one of\n+global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n+//~^ ERROR expected one of\n+global_asm!(format!(\"{{{}}}\", 0), const FOO);\n+//~^ ERROR asm template must be a string literal\n+global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n+//~^ ERROR asm template must be a string literal"}, {"sha": "1877604a2358d5c24a58e219ebe3ef0ce269d423", "filename": "src/test/ui/asm/parse-error.stderr", "status": "modified", "additions": 107, "deletions": 1, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -164,6 +164,112 @@ LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error: requires at least a template string argument\n+  --> $DIR/parse-error.rs:69:1\n+   |\n+LL | global_asm!();\n+   | ^^^^^^^^^^^^^^\n+\n+error: asm template must be a string literal\n+  --> $DIR/parse-error.rs:71:13\n+   |\n+LL | global_asm!(FOO);\n+   |             ^^^\n+\n+error: expected token: `,`\n+  --> $DIR/parse-error.rs:73:18\n+   |\n+LL | global_asm!(\"{}\" FOO);\n+   |                  ^^^ expected `,`\n+\n+error: expected operand, options, or additional template string\n+  --> $DIR/parse-error.rs:75:19\n+   |\n+LL | global_asm!(\"{}\", FOO);\n+   |                   ^^^ expected operand, options, or additional template string\n+\n+error: expected expression, found end of macro arguments\n+  --> $DIR/parse-error.rs:77:24\n+   |\n+LL | global_asm!(\"{}\", const);\n+   |                        ^ expected expression\n+\n+error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n+  --> $DIR/parse-error.rs:79:30\n+   |\n+LL | global_asm!(\"{}\", const(reg) FOO);\n+   |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n+\n+error: expected one of `)` or `att_syntax`, found `FOO`\n+  --> $DIR/parse-error.rs:81:25\n+   |\n+LL | global_asm!(\"\", options(FOO));\n+   |                         ^^^ expected one of `)` or `att_syntax`\n+\n+error: expected one of `)` or `att_syntax`, found `nomem`\n+  --> $DIR/parse-error.rs:83:25\n+   |\n+LL | global_asm!(\"\", options(nomem FOO));\n+   |                         ^^^^^ expected one of `)` or `att_syntax`\n+\n+error: expected one of `)` or `att_syntax`, found `nomem`\n+  --> $DIR/parse-error.rs:85:25\n+   |\n+LL | global_asm!(\"\", options(nomem, FOO));\n+   |                         ^^^^^ expected one of `)` or `att_syntax`\n+\n+error: arguments are not allowed after options\n+  --> $DIR/parse-error.rs:87:30\n+   |\n+LL | global_asm!(\"{}\", options(), const FOO);\n+   |                   ---------  ^^^^^^^^^ argument\n+   |                   |\n+   |                   previous options\n+\n+error: duplicate argument named `a`\n+  --> $DIR/parse-error.rs:89:35\n+   |\n+LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n+   |                    -------------  ^^^^^^^^^^^^^ duplicate argument\n+   |                    |\n+   |                    previously here\n+\n+error: argument never used\n+  --> $DIR/parse-error.rs:89:35\n+   |\n+LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n+   |                                   ^^^^^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n+\n+error: expected one of `const` or `options`, found `\"\"`\n+  --> $DIR/parse-error.rs:92:28\n+   |\n+LL | global_asm!(\"\", options(), \"\");\n+   |                            ^^ expected one of `const` or `options`\n+\n+error: expected one of `const` or `options`, found `\"{}\"`\n+  --> $DIR/parse-error.rs:94:30\n+   |\n+LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n+   |                              ^^^^ expected one of `const` or `options`\n+\n+error: asm template must be a string literal\n+  --> $DIR/parse-error.rs:96:13\n+   |\n+LL | global_asm!(format!(\"{{{}}}\", 0), const FOO);\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: asm template must be a string literal\n+  --> $DIR/parse-error.rs:98:20\n+   |\n+LL | global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n+   |                    ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:37:37\n    |\n@@ -218,6 +324,6 @@ LL |     let mut bar = 0;\n LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n    |                                          ^^^ non-constant value\n \n-error: aborting due to 31 previous errors\n+error: aborting due to 47 previous errors\n \n For more information about this error, try `rustc --explain E0435`."}, {"sha": "060a88fc937136491ac867585f7b4dc40e7557be", "filename": "src/test/ui/asm/type-check-2.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -1,6 +1,6 @@\n // only-x86_64\n \n-#![feature(asm, repr_simd, never_type)]\n+#![feature(asm, global_asm, repr_simd, never_type)]\n \n #[repr(simd)]\n struct SimdNonCopy(f32, f32, f32, f32);\n@@ -90,3 +90,11 @@ fn main() {\n         asm!(\"{}\", in(reg) u);\n     }\n }\n+\n+// Const operands must be integer or floats, and must be constants.\n+\n+global_asm!(\"{}\", const 0);\n+global_asm!(\"{}\", const 0i32);\n+global_asm!(\"{}\", const 0f32);\n+global_asm!(\"{}\", const 0 as *mut u8);\n+//~^ ERROR asm `const` arguments must be integer or floating-point values"}, {"sha": "f61f690bdb4dddb5cd693b6951f88d6235f74bd2", "filename": "src/test/ui/asm/type-check-2.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -61,6 +61,12 @@ LL |         asm!(\"{}\", inout(reg) r);\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n+error: asm `const` arguments must be integer or floating-point values\n+  --> $DIR/type-check-2.rs:99:19\n+   |\n+LL | global_asm!(\"{}\", const 0 as *mut u8);\n+   |                   ^^^^^^^^^^^^^^^^^^\n+\n error: asm `sym` operand must point to a fn or static\n   --> $DIR/type-check-2.rs:47:24\n    |\n@@ -103,7 +109,7 @@ LL |         let v: Vec<u64> = vec![0, 1, 2];\n LL |         asm!(\"{}\", inout(reg) v[0]);\n    |                               ^ cannot borrow as mutable\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 15 previous errors\n \n Some errors have detailed explanations: E0381, E0596.\n For more information about an error, try `rustc --explain E0381`."}, {"sha": "c2c1885ff166f45136a3eb891cbe2d7171387fea", "filename": "src/test/ui/asm/type-check-3.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.rs?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -1,7 +1,7 @@\n // only-x86_64\n // compile-flags: -C target-feature=+avx512f\n \n-#![feature(asm)]\n+#![feature(asm, global_asm)]\n \n use std::arch::x86_64::{_mm256_setzero_ps, _mm_setzero_ps};\n \n@@ -69,3 +69,21 @@ fn main() {\n         asm!(\"{:r}\", inout(reg) main => val_u64);\n     }\n }\n+\n+// Constants must be... constant\n+\n+static S: i32 = 1;\n+const fn const_foo(x: i32) -> i32 {\n+    x\n+}\n+const fn const_bar<T>(x: T) -> T {\n+    x\n+}\n+global_asm!(\"{}\", const S);\n+//~^ ERROR constants cannot refer to statics\n+global_asm!(\"{}\", const const_foo(0));\n+global_asm!(\"{}\", const const_foo(S));\n+//~^ ERROR constants cannot refer to statics\n+global_asm!(\"{}\", const const_bar(0));\n+global_asm!(\"{}\", const const_bar(S));\n+//~^ ERROR constants cannot refer to statics"}, {"sha": "9f6989ca03d1b666965db31970e35d6f073ebffb", "filename": "src/test/ui/asm/type-check-3.stderr", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a229e0e206ee78ef9712b06569cb55c238bac73/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.stderr?ref=5a229e0e206ee78ef9712b06569cb55c238bac73", "patch": "@@ -114,5 +114,30 @@ LL |         asm!(\"{:r}\", inout(reg) main => val_u32);\n    |\n    = note: asm inout arguments must have the same type, unless they are both pointers or integers of the same size\n \n-error: aborting due to 9 previous errors; 4 warnings emitted\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-3.rs:82:25\n+   |\n+LL | global_asm!(\"{}\", const S);\n+   |                         ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-3.rs:85:35\n+   |\n+LL | global_asm!(\"{}\", const const_foo(S));\n+   |                                   ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-3.rs:88:35\n+   |\n+LL | global_asm!(\"{}\", const const_bar(S));\n+   |                                   ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error: aborting due to 12 previous errors; 4 warnings emitted\n \n+For more information about this error, try `rustc --explain E0013`."}]}