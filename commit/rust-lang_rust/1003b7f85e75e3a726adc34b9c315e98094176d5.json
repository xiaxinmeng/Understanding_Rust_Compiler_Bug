{"sha": "1003b7f85e75e3a726adc34b9c315e98094176d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMDNiN2Y4NWU3NWUzYTcyNmFkYzM0YjljMzE1ZTk4MDk0MTc2ZDU=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-22T18:37:56Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-03T10:33:14Z"}, "message": "Move `BoundTy` to `ty::TyKind`", "tree": {"sha": "7201273d323606fec237458f423dbab23da9fc6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7201273d323606fec237458f423dbab23da9fc6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1003b7f85e75e3a726adc34b9c315e98094176d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1003b7f85e75e3a726adc34b9c315e98094176d5", "html_url": "https://github.com/rust-lang/rust/commit/1003b7f85e75e3a726adc34b9c315e98094176d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1003b7f85e75e3a726adc34b9c315e98094176d5/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "757d6cc91a691c8a749a7b0eee09df494ecdcc3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/757d6cc91a691c8a749a7b0eee09df494ecdcc3b", "html_url": "https://github.com/rust-lang/rust/commit/757d6cc91a691c8a749a7b0eee09df494ecdcc3b"}], "stats": {"total": 167, "additions": 116, "deletions": 51}, "files": [{"sha": "5873dd2eab7d646c781af2c1617d892f06296253", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -852,6 +852,9 @@ for ty::TyKind<'gcx>\n             Param(param_ty) => {\n                 param_ty.hash_stable(hcx, hasher);\n             }\n+            Bound(bound_ty) => {\n+                bound_ty.hash_stable(hcx, hasher);\n+            }\n             Foreign(def_id) => {\n                 def_id.hash_stable(hcx, hasher);\n             }\n@@ -869,7 +872,6 @@ impl_stable_hash_for!(enum ty::InferTy {\n     FreshTy(a),\n     FreshIntTy(a),\n     FreshFloatTy(a),\n-    BoundTy(a),\n });\n \n impl<'a, 'gcx> HashStable<StableHashingContext<'a>>"}, {"sha": "a7634b8bd2a7add505aa71472acba92282d80aa0", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -337,8 +337,8 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                 bug!(\"encountered a fresh type during canonicalization\")\n             }\n \n-            ty::Infer(ty::BoundTy(_)) => {\n-                bug!(\"encountered a canonical type during canonicalization\")\n+            ty::Bound(_) => {\n+                bug!(\"encountered a bound type during canonicalization\")\n             }\n \n             ty::Closure(..)\n@@ -455,7 +455,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n     /// or returns an existing variable if `kind` has already been\n     /// seen. `kind` is expected to be an unbound variable (or\n     /// potentially a free region).\n-    fn canonical_var(&mut self, info: CanonicalVarInfo, kind: Kind<'tcx>) -> BoundTy {\n+    fn canonical_var(&mut self, info: CanonicalVarInfo, kind: Kind<'tcx>) -> BoundTyIndex {\n         let Canonicalizer {\n             variables,\n             query_state,\n@@ -506,10 +506,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n             })\n         };\n \n-        BoundTy {\n-            level: ty::INNERMOST,\n-            var,\n-        }\n+        var\n     }\n \n     /// Shorthand helper that creates a canonical region variable for\n@@ -552,9 +549,8 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n         info: CanonicalVarInfo,\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n-        let b = self.canonical_var(info, r.into());\n-        debug_assert_eq!(ty::INNERMOST, b.level);\n-        self.tcx().mk_region(ty::ReCanonical(b.var))\n+        let var = self.canonical_var(info, r.into());\n+        self.tcx().mk_region(ty::ReCanonical(var))\n     }\n \n     /// Given a type variable `ty_var` of the given kind, first check\n@@ -570,9 +566,8 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n             let info = CanonicalVarInfo {\n                 kind: CanonicalVarKind::Ty(ty_kind),\n             };\n-            let b = self.canonical_var(info, ty_var.into());\n-            debug_assert_eq!(ty::INNERMOST, b.level);\n-            self.tcx().mk_infer(ty::InferTy::BoundTy(b))\n+            let var = self.canonical_var(info, ty_var.into());\n+            self.tcx().mk_ty(ty::Bound(BoundTy::new(ty::INNERMOST, var)))\n         }\n     }\n }"}, {"sha": "27ee33a452ef8d611ff8c5e709895691308e1ee2", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -432,7 +432,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             match result_value.unpack() {\n                 UnpackedKind::Type(result_value) => {\n                     // e.g., here `result_value` might be `?0` in the example above...\n-                    if let ty::Infer(ty::InferTy::BoundTy(b)) = result_value.sty {\n+                    if let ty::Bound(b) = result_value.sty {\n                         // in which case we would set `canonical_vars[0]` to `Some(?U)`.\n                         opt_values[b.var] = Some(*original_value);\n                     }"}, {"sha": "80a2497bbf61338060cca07317720e6d6002ebf8", "filename": "src/librustc/infer/canonical/substitute.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -85,8 +85,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for CanonicalVarValuesSubst<'cx, 'g\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match t.sty {\n-            ty::Infer(ty::InferTy::BoundTy(b)) => {\n-                debug_assert_eq!(ty::INNERMOST, b.level);\n+            ty::Bound(b) => {\n                 match self.var_values.var_values[b.var].unpack() {\n                     UnpackedKind::Type(ty) => ty,\n                     r => bug!(\"{:?} is a type but value is {:?}\", b, r),"}, {"sha": "c12e64b4c2c590dcd28279ca2cf3b93f039327a4", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -171,8 +171,8 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n                 t\n             }\n \n-            ty::Infer(ty::BoundTy(..)) =>\n-                bug!(\"encountered canonical ty during freshening\"),\n+            ty::Bound(..) =>\n+                bug!(\"encountered bound ty during freshening\"),\n \n             ty::Generator(..) |\n             ty::Bool |"}, {"sha": "71b77909b82a8e3de49c1cfbdc483a1c9822232b", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -455,7 +455,7 @@ fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n             false\n         }\n \n-        ty::Infer(..) => match in_crate {\n+        ty::Bound(..) | ty::Infer(..) => match in_crate {\n             InCrate::Local => false,\n             // The inference variable might be unified with a local\n             // type in that remote crate."}, {"sha": "e6ae0557c33af04c46663da4809ed645f544cfac", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -280,7 +280,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 ty::Generator(..) => Some(18),\n                 ty::Foreign(..) => Some(19),\n                 ty::GeneratorWitness(..) => Some(20),\n-                ty::Infer(..) | ty::Error => None,\n+                ty::Bound(..) | ty::Infer(..) | ty::Error => None,\n                 ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n             }\n         }"}, {"sha": "62317f074764f67248c11feff2203734d46e45a4", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -252,6 +252,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) ->\n         | ty::Param(_)\n         | ty::Opaque(..)\n         | ty::Infer(_)\n+        | ty::Bound(..)\n         | ty::Generator(..) => false,\n \n         ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),"}, {"sha": "691c9d9da49bcc9a05c307201e0fdff3d07d544a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -2445,7 +2445,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n             ty::UnnormalizedProjection(..)\n-            | ty::Infer(ty::BoundTy(_))\n+            | ty::Bound(_)\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))\n             | ty::Infer(ty::FreshFloatTy(_)) => {\n@@ -2530,7 +2530,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             ty::UnnormalizedProjection(..)\n-            | ty::Infer(ty::BoundTy(_))\n+            | ty::Bound(_)\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))\n             | ty::Infer(ty::FreshFloatTy(_)) => {\n@@ -2573,7 +2573,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             | ty::Param(..)\n             | ty::Foreign(..)\n             | ty::Projection(..)\n-            | ty::Infer(ty::BoundTy(_))\n+            | ty::Bound(_)\n             | ty::Infer(ty::TyVar(_))\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))"}, {"sha": "05d9d4bc37d79f540e3c887feb5fcc82ae099be7", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -2243,7 +2243,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         sty_debug_print!(\n             self,\n             Adt, Array, Slice, RawPtr, Ref, FnDef, FnPtr,\n-            Generator, GeneratorWitness, Dynamic, Closure, Tuple,\n+            Generator, GeneratorWitness, Dynamic, Closure, Tuple, Bound,\n             Param, Infer, UnnormalizedProjection, Projection, Opaque, Foreign);\n \n         println!(\"Substs interner: #{}\", self.interners.substs.borrow().len());"}, {"sha": "4737c72b1ef0f75bcc2c0ca382ef69c4b769ea54", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -212,7 +212,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::Infer(ty::TyVar(_)) => \"inferred type\".into(),\n             ty::Infer(ty::IntVar(_)) => \"integral variable\".into(),\n             ty::Infer(ty::FloatVar(_)) => \"floating-point variable\".into(),\n-            ty::Infer(ty::BoundTy(_)) |\n+            ty::Bound(_) |\n             ty::Infer(ty::FreshTy(_)) => \"fresh type\".into(),\n             ty::Infer(ty::FreshIntTy(_)) => \"fresh integral type\".into(),\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),"}, {"sha": "380f95993f8fbab345f51c0c1a93e55ec70b425b", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -122,7 +122,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::Foreign(def_id) => {\n             Some(ForeignSimplifiedType(def_id))\n         }\n-        ty::Infer(_) | ty::Error => None,\n+        ty::Bound(..) | ty::Infer(_) | ty::Error => None,\n     }\n }\n "}, {"sha": "92e08878708f675611c207aa1f68521a7bde994a", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -115,14 +115,15 @@ impl FlagComputation {\n                 self.add_substs(&substs.substs);\n             }\n \n+            &ty::Bound(_) => self.add_flags(TypeFlags::HAS_CANONICAL_VARS),\n+\n             &ty::Infer(infer) => {\n                 self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES); // it might, right?\n                 self.add_flags(TypeFlags::HAS_TY_INFER);\n                 match infer {\n                     ty::FreshTy(_) |\n                     ty::FreshIntTy(_) |\n-                    ty::FreshFloatTy(_) |\n-                    ty::BoundTy(_) => {\n+                    ty::FreshFloatTy(_) => {\n                         self.add_flags(TypeFlags::HAS_CANONICAL_VARS);\n                     }\n "}, {"sha": "d44ba03084159ebe6a320e1e41d8f75a77f6b421", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -519,6 +519,7 @@ pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n         ty::Param(_) |\n         ty::Opaque(..) |\n         ty::Infer(_) |\n+        ty::Bound(..) |\n         ty::Error |\n         ty::GeneratorWitness(..) |\n         ty::Never |"}, {"sha": "55005721617350f9ac9a1be12c3fc0cb98f4e6ce", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -1124,9 +1124,14 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 }\n                 tcx.layout_raw(param_env.and(normalized))?\n             }\n-            ty::UnnormalizedProjection(..) | ty::GeneratorWitness(..) | ty::Infer(_) => {\n+\n+            ty::Bound(..) |\n+            ty::UnnormalizedProjection(..) |\n+            ty::GeneratorWitness(..) |\n+            ty::Infer(_) => {\n                 bug!(\"LayoutDetails::compute: unexpected type `{}`\", ty)\n             }\n+\n             ty::Param(_) | ty::Error => {\n                 return Err(LayoutError::Unknown(ty));\n             }\n@@ -1703,7 +1708,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                 }\n             }\n \n-            ty::Projection(_) | ty::UnnormalizedProjection(..) |\n+            ty::Projection(_) | ty::UnnormalizedProjection(..) | ty::Bound(..) |\n             ty::Opaque(..) | ty::Param(_) | ty::Infer(_) | ty::Error => {\n                 bug!(\"TyLayout::field_type: unexpected type `{}`\", this.ty)\n             }"}, {"sha": "6ce65177442dc8eebcda7ce4ad48275aaf5350e0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -63,7 +63,7 @@ use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n \n use hir;\n \n-pub use self::sty::{Binder, BoundTy, BoundTyIndex, DebruijnIndex, INNERMOST};\n+pub use self::sty::{Binder, BoundTy, BoundTyKind, BoundTyIndex, DebruijnIndex, INNERMOST};\n pub use self::sty::{FnSig, GenSig, CanonicalPolyFnSig, PolyFnSig, PolyGenSig};\n pub use self::sty::{InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n pub use self::sty::{ClosureSubsts, GeneratorSubsts, UpvarSubsts, TypeAndMut};\n@@ -2378,6 +2378,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 }\n             }\n \n+            Bound(..) |\n             Infer(..) => {\n                 bug!(\"unexpected type `{:?}` in sized_constraint_for_ty\",\n                      ty)"}, {"sha": "4c820447be234a7eb14f58341cc418759ad00e54", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -156,6 +156,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::FnDef(..) |       // OutlivesFunction (*)\n             ty::FnPtr(_) |        // OutlivesFunction (*)\n             ty::Dynamic(..) |       // OutlivesObject, OutlivesFragment (*)\n+            ty::Bound(..) |\n             ty::Error => {\n                 // (*) Bare functions and traits are both binders. In the\n                 // RFC, this means we would add the bound regions to the"}, {"sha": "59a66513eef0558a274c023b34e3169eeb183bd0", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -734,9 +734,19 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n                 ty::UnnormalizedProjection(data.fold_with(folder))\n             }\n             ty::Opaque(did, substs) => ty::Opaque(did, substs.fold_with(folder)),\n-            ty::Bool | ty::Char | ty::Str | ty::Int(_) |\n-            ty::Uint(_) | ty::Float(_) | ty::Error | ty::Infer(_) |\n-            ty::Param(..) | ty::Never | ty::Foreign(..) => return self\n+\n+            ty::Bool |\n+            ty::Char |\n+            ty::Str |\n+            ty::Int(_) |\n+            ty::Uint(_) |\n+            ty::Float(_) |\n+            ty::Error |\n+            ty::Infer(_) |\n+            ty::Param(..) |\n+            ty::Bound(..) |\n+            ty::Never |\n+            ty::Foreign(..) => return self\n         };\n \n         if self.sty == sty {\n@@ -771,9 +781,19 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n                 data.visit_with(visitor)\n             }\n             ty::Opaque(_, ref substs) => substs.visit_with(visitor),\n-            ty::Bool | ty::Char | ty::Str | ty::Int(_) |\n-            ty::Uint(_) | ty::Float(_) | ty::Error | ty::Infer(_) |\n-            ty::Param(..) | ty::Never | ty::Foreign(..) => false,\n+\n+            ty::Bool |\n+            ty::Char |\n+            ty::Str |\n+            ty::Int(_) |\n+            ty::Uint(_) |\n+            ty::Float(_) |\n+            ty::Error |\n+            ty::Infer(_) |\n+            ty::Bound(..) |\n+            ty::Param(..) |\n+            ty::Never |\n+            ty::Foreign(..) => false,\n         }\n     }\n "}, {"sha": "25f7496e8931c249de5ef5c34b859f0d2c0c4e01", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -188,6 +188,9 @@ pub enum TyKind<'tcx> {\n     /// A type parameter; for example, `T` in `fn f<T>(x: T) {}\n     Param(ParamTy),\n \n+    /// Bound type variable, used only when preparing a trait query.\n+    Bound(BoundTy),\n+\n     /// A type variable used during type checking.\n     Infer(InferTy),\n \n@@ -1219,9 +1222,6 @@ pub enum InferTy {\n     FreshTy(u32),\n     FreshIntTy(u32),\n     FreshFloatTy(u32),\n-\n-    /// Bound type variable, used only when preparing a trait query.\n-    BoundTy(BoundTy),\n }\n \n newtype_index! {\n@@ -1232,9 +1232,28 @@ newtype_index! {\n pub struct BoundTy {\n     pub level: DebruijnIndex,\n     pub var: BoundTyIndex,\n+    pub kind: BoundTyKind,\n }\n \n-impl_stable_hash_for!(struct BoundTy { level, var });\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+pub enum BoundTyKind {\n+    Anon,\n+    Param(InternedString),\n+}\n+\n+impl_stable_hash_for!(struct BoundTy { level, var, kind });\n+impl_stable_hash_for!(enum self::BoundTyKind { Anon, Param(a) });\n+\n+impl BoundTy {\n+    pub fn new(level: DebruijnIndex, var: BoundTyIndex) -> Self {\n+        debug_assert_eq!(ty::INNERMOST, level);\n+        BoundTy {\n+            level,\n+            var,\n+            kind: BoundTyKind::Anon,\n+        }\n+    }\n+}\n \n /// A `ProjectionPredicate` for an `ExistentialTraitRef`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n@@ -1865,6 +1884,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             Tuple(..) |\n             Foreign(..) |\n             Param(_) |\n+            Bound(..) |\n             Infer(_) |\n             Error => {\n                 vec![]\n@@ -1930,7 +1950,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n             ty::Infer(ty::TyVar(_)) => false,\n \n-            ty::Infer(ty::BoundTy(_)) |\n+            ty::Bound(_) |\n             ty::Infer(ty::FreshTy(_)) |\n             ty::Infer(ty::FreshIntTy(_)) |\n             ty::Infer(ty::FreshFloatTy(_)) =>"}, {"sha": "87c2c9b6005aa89875584b0cbade512b4404d73a", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -556,7 +556,7 @@ impl CanonicalUserSubsts<'tcx> {\n         self.value.substs.iter().zip(BoundTyIndex::new(0)..).all(|(kind, cvar)| {\n             match kind.unpack() {\n                 UnpackedKind::Type(ty) => match ty.sty {\n-                    ty::Infer(ty::BoundTy(ref b)) => cvar == b.var,\n+                    ty::Bound(ref b) => cvar == b.var,\n                     _ => false,\n                 },\n "}, {"sha": "0a758285a29b1aaa06d07596ea30911db9427a09", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -951,7 +951,7 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Can refer to a type which may drop.\n         // FIXME(eddyb) check this against a ParamEnv.\n-        ty::Dynamic(..) | ty::Projection(..) | ty::Param(_) |\n+        ty::Dynamic(..) | ty::Projection(..) | ty::Param(_) | ty::Bound(..) |\n         ty::Opaque(..) | ty::Infer(_) | ty::Error => true,\n \n         ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),"}, {"sha": "284c595ee2d965ed6177317bf611106f97725934", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -82,7 +82,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n     match parent_ty.sty {\n         ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) |\n         ty::Str | ty::Infer(_) | ty::Param(_) | ty::Never | ty::Error |\n-        ty::Foreign(..) => {\n+        ty::Bound(..) | ty::Foreign(..) => {\n         }\n         ty::Array(ty, len) => {\n             push_const(stack, len);"}, {"sha": "eb97f1177af1b3a3861cea0ef05191ab4a487403", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -258,6 +258,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                 ty::GeneratorWitness(..) |\n                 ty::Never |\n                 ty::Param(_) |\n+                ty::Bound(..) |\n                 ty::Foreign(..) => {\n                     // WfScalar, WfParameter, etc\n                 }"}, {"sha": "320fee5638e2d8075addf0bd5467e44fbd3d92a6", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -16,7 +16,7 @@ use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use ty::{Bool, Char, Adt};\n use ty::{Error, Str, Array, Slice, Float, FnDef, FnPtr};\n-use ty::{Param, RawPtr, Ref, Never, Tuple};\n+use ty::{Param, Bound, RawPtr, Ref, Never, Tuple};\n use ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Opaque};\n use ty::{UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n use ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n@@ -976,7 +976,6 @@ define_print! {\n                     ty::TyVar(_) => write!(f, \"_\"),\n                     ty::IntVar(_) => write!(f, \"{}\", \"{integer}\"),\n                     ty::FloatVar(_) => write!(f, \"{}\", \"{float}\"),\n-                    ty::BoundTy(_) => write!(f, \"_\"),\n                     ty::FreshTy(v) => write!(f, \"FreshTy({})\", v),\n                     ty::FreshIntTy(v) => write!(f, \"FreshIntTy({})\", v),\n                     ty::FreshFloatTy(v) => write!(f, \"FreshFloatTy({})\", v)\n@@ -988,7 +987,6 @@ define_print! {\n                 ty::TyVar(ref v) => write!(f, \"{:?}\", v),\n                 ty::IntVar(ref v) => write!(f, \"{:?}\", v),\n                 ty::FloatVar(ref v) => write!(f, \"{:?}\", v),\n-                ty::BoundTy(v) => write!(f, \"?{:?}\", v.var.index()),\n                 ty::FreshTy(v) => write!(f, \"FreshTy({:?})\", v),\n                 ty::FreshIntTy(v) => write!(f, \"FreshIntTy({:?})\", v),\n                 ty::FreshFloatTy(v) => write!(f, \"FreshFloatTy({:?})\", v)\n@@ -1119,6 +1117,19 @@ define_print! {\n                 Infer(infer_ty) => write!(f, \"{}\", infer_ty),\n                 Error => write!(f, \"[type error]\"),\n                 Param(ref param_ty) => write!(f, \"{}\", param_ty),\n+                Bound(bound_ty) => {\n+                    match bound_ty.kind {\n+                        ty::BoundTyKind::Anon => {\n+                            if bound_ty.level == ty::INNERMOST {\n+                                write!(f, \"?{}\", bound_ty.var.index())\n+                            } else {\n+                                write!(f, \"?{}_{}\", bound_ty.level.index(), bound_ty.var.index())\n+                            }\n+                        }\n+\n+                        ty::BoundTyKind::Param(p) => write!(f, \"{}\", p),\n+                    }\n+                }\n                 Adt(def, substs) => cx.parameterized(f, substs, def.did, &[]),\n                 Dynamic(data, r) => {\n                     let r = r.print_to_string(cx);"}, {"sha": "eb5ae81b2184024ad6191c52580dc348466a87a2", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -173,6 +173,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         ty::Infer(_) |\n         ty::UnnormalizedProjection(..) |\n         ty::Projection(..) |\n+        ty::Bound(..) |\n         ty::Opaque(..) |\n         ty::GeneratorWitness(..) |\n         ty::Param(_) => {"}, {"sha": "2e19b441d0e3915a0917577692eab39b1e9b8c5c", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -718,6 +718,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n             ty::Param(..) |\n             ty::Infer(..) |\n+            ty::Bound(..) |\n             ty::Error |\n             ty::Closure(..) |\n             ty::Generator(..) |"}, {"sha": "9d69a5669b1c0a85cd8971579b93c849d359371a", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -382,6 +382,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                 self.push_type_params(substs, iter::empty(), output);\n             }\n             ty::Error |\n+            ty::Bound(..) |\n             ty::Infer(_) |\n             ty::UnnormalizedProjection(..) |\n             ty::Projection(..) |"}, {"sha": "bf252053199f8df143035e1b6bfa4c8dcfd4fe0d", "filename": "src/librustc_traits/chalk_context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_traits%2Fchalk_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_traits%2Fchalk_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -506,6 +506,7 @@ impl context::UnificationOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n                     ty::GeneratorWitness(..) |\n                     ty::UnnormalizedProjection(..) |\n                     ty::Infer(..) |\n+                    ty::Bound(..) |\n                     ty::Error => {\n                         bug!(\"unexpected type {:?}\", ty)\n                     }"}, {"sha": "af64522f18398a4a646f88d460e8489263380f41", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -274,7 +274,7 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n \n         ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n \n-        ty::Infer(..) | ty::Error => {\n+        ty::Bound(..) | ty::Infer(..) | ty::Error => {\n             // By the time this code runs, all type variables ought to\n             // be fully resolved.\n             Err(NoSolution)"}, {"sha": "052ca37b313717fa7123762068df759a37a3558c", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -93,6 +93,7 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n             ty::GeneratorWitness(..) |\n             ty::UnnormalizedProjection(..) |\n             ty::Infer(..) |\n+            ty::Bound(..) |\n             ty::Error => {\n                 bug!(\"unexpected type {:?}\", ty);\n             }"}, {"sha": "3f0a3531244424c68a7e2b99e4adcb9e2f0ae564", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ty::Opaque(def_id, substs) => Some(PointerKind::OfOpaque(def_id, substs)),\n             ty::Param(ref p) => Some(PointerKind::OfParam(p)),\n             // Insufficient type information.\n-            ty::Infer(_) => None,\n+            ty::Bound(..) | ty::Infer(_) => None,\n \n             ty::Bool | ty::Char | ty::Int(..) | ty::Uint(..) |\n             ty::Float(_) | ty::Array(..) | ty::GeneratorWitness(..) |"}, {"sha": "b11b034ee13cccd389c72fc0c2f4cfc2f22ef411", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -338,6 +338,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n \n             ty::UnnormalizedProjection(..) |\n             ty::GeneratorWitness(..) |\n+            ty::Bound(..) |\n             ty::Infer(..) => {\n                 bug!(\"unexpected type encountered in \\\n                       variance inference: {}\","}, {"sha": "8391db9a37d50159da62df1bcb6135e65f914707", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1003b7f85e75e3a726adc34b9c315e98094176d5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1003b7f85e75e3a726adc34b9c315e98094176d5", "patch": "@@ -2733,6 +2733,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n             ty::Closure(..) | ty::Generator(..) => Tuple(vec![]), // FIXME(pcwalton)\n \n+            ty::Bound(..) => panic!(\"Bound\"),\n             ty::UnnormalizedProjection(..) => panic!(\"UnnormalizedProjection\"),\n             ty::GeneratorWitness(..) => panic!(\"GeneratorWitness\"),\n             ty::Infer(..) => panic!(\"Infer\"),"}]}