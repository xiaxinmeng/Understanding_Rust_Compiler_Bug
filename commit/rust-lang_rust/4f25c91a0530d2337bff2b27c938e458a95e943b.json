{"sha": "4f25c91a0530d2337bff2b27c938e458a95e943b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMjVjOTFhMDUzMGQyMzM3YmZmMmIyN2M5MzhlNDU4YTk1ZTk0M2I=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-10-29T01:37:58Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-11T20:14:33Z"}, "message": "Fix unwinding logic", "tree": {"sha": "7de994025dc2b7b26208763b216cdf03391eda99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7de994025dc2b7b26208763b216cdf03391eda99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f25c91a0530d2337bff2b27c938e458a95e943b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3JwSkACgkQtAh+UQ6Y\nsWRlRg/+Ml+7HJNR8tDlcTLaK6QWNUzYaIMfgHYLQcmec3IXJQMOSNCciti6YiGm\nc1rp70PuNZ4tdUfw1mAlFL2n7BtkxP9SulgR2+tURiBzUNOtDv0UGI4O4tI8yfMO\nnupVscdIBpK+Tuvyi7G6kdqxgdr2leaxKCgQHO+2lTwnzuiMhfzn4iYwTdXvGFl7\nJLWOQ5fXt94tb+9Gs2S+j0yMjg0H5IrlxzVrPZFsa47TARO/HdlhjZQVVxLnMu9g\nt+fj6Pz8D22EFq/kfK3v52cxKgyVyiC3EoGcBcQYOO4Pf0XbQZBkg52xVTx06cKW\n2RRXfWnppUd3LiKGgYDQL+nPhhWOls+TVaLYjFrOj7cM7nSDU9SkO2dPTqx96lIU\nuZo+LdoSsvhsQDm+nOqSKJAef+HiLuXnczbGRtQRyWhj8J++eVwZnuHKy4cb07NX\nhq4uJ62mYkk8tD9W9eY3IjOqKsKC1TOTtnPGcJ2xu4FGDEF3PE2UbWm4QUwZavGq\n49dQv6w1RB5l3RapR5GRViBBFA3EndjOEICpJQlCfaaTHGXRLtJayD8YE+m2wFPS\nU7Qwew3AuHFuQsmDkdy4j7uoMU7WauHAPMWyugeRufk1NKRYi2Hvh/dLfLoEuEWC\nj909LdwWFvqWNEm53qgp9piiwxFf/DsJh28U7nLNdrPU3hwMsKk=\n=rEs7\n-----END PGP SIGNATURE-----", "payload": "tree 7de994025dc2b7b26208763b216cdf03391eda99\nparent 8df4248c71deba455dab197784708be46da185fc\nauthor Aaron Hill <aa1ronham@gmail.com> 1572313078 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1573503273 -0500\n\nFix unwinding logic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f25c91a0530d2337bff2b27c938e458a95e943b", "html_url": "https://github.com/rust-lang/rust/commit/4f25c91a0530d2337bff2b27c938e458a95e943b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f25c91a0530d2337bff2b27c938e458a95e943b/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8df4248c71deba455dab197784708be46da185fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8df4248c71deba455dab197784708be46da185fc", "html_url": "https://github.com/rust-lang/rust/commit/8df4248c71deba455dab197784708be46da185fc"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "fb3f4f21a973434411f4a07c037a9b843f22f8fa", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c91a0530d2337bff2b27c938e458a95e943b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c91a0530d2337bff2b27c938e458a95e943b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=4f25c91a0530d2337bff2b27c938e458a95e943b", "patch": "@@ -584,7 +584,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let frame = self.stack.pop().expect(\n             \"tried to pop a stack frame, but there were none\",\n         );\n-        let stack_pop_info = M::stack_pop(self, frame.extra)?;\n+        let stack_pop_info = M::stack_pop(self, frame.extra, unwinding)?;\n         match (unwinding, stack_pop_info) {\n             (true, StackPopInfo::StartUnwinding) =>\n                 bug!(\"Attempted to start unwinding while already unwinding!\"),\n@@ -616,7 +616,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Now where do we jump next?\n \n         // Determine if we leave this function normally or via unwinding.\n-        let cur_unwinding = unwinding && stack_pop_info != StackPopInfo::StopUnwinding;\n+        let cur_unwinding = match stack_pop_info {\n+            StackPopInfo::StartUnwinding => true,\n+            StackPopInfo::StopUnwinding => false,\n+            _ => unwinding\n+        };\n+\n         trace!(\"StackPopCleanup: {:?} StackPopInfo: {:?} cur_unwinding = {:?}\",\n                frame.return_to_block, stack_pop_info, cur_unwinding);\n         if cur_unwinding {"}, {"sha": "bed6c0b67eb18ffa8c4ea03099b2010fc331eaad", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c91a0530d2337bff2b27c938e458a95e943b/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c91a0530d2337bff2b27c938e458a95e943b/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=4f25c91a0530d2337bff2b27c938e458a95e943b", "patch": "@@ -270,6 +270,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn stack_pop(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _extra: Self::FrameExtra,\n+        _unwinding: bool\n     ) -> InterpResult<'tcx, StackPopInfo> {\n         // By default, we do not support unwinding from panics\n         Ok(StackPopInfo::Normal)"}, {"sha": "3ee9445f9c0ea81998605d31d62d994cc4fc8b26", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c91a0530d2337bff2b27c938e458a95e943b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c91a0530d2337bff2b27c938e458a95e943b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=4f25c91a0530d2337bff2b27c938e458a95e943b", "patch": "@@ -30,7 +30,7 @@ use crate::interpret::{\n     self, InterpCx, ScalarMaybeUndef, Immediate, OpTy,\n     StackPopCleanup, LocalValue, LocalState, AllocId, Frame,\n     Allocation, MemoryKind, ImmTy, Pointer, Memory, PlaceTy,\n-    StackPopInfo, Operand as InterpOperand,\n+    Operand as InterpOperand,\n };\n use crate::const_eval::error_to_const_error;\n use crate::transform::{MirPass, MirSource};\n@@ -252,15 +252,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n     fn stack_push(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         Ok(())\n     }\n-\n-    /// Called immediately before a stack frame gets popped.\n-    #[inline(always)]\n-    fn stack_pop(\n-        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _extra: ()\n-    ) -> InterpResult<'tcx, StackPopInfo> {\n-        Ok(StackPopInfo::Normal)\n-    }\n }\n \n type Const<'tcx> = OpTy<'tcx>;"}]}