{"sha": "2b3c86cb02803e569d4f5b6891d439c9daa0b90a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiM2M4NmNiMDI4MDNlNTY5ZDRmNWI2ODkxZDQzOWM5ZGFhMGI5MGE=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-17T18:34:25Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-17T21:32:34Z"}, "message": "More and better debug messages for method typechecking", "tree": {"sha": "47057bd9d59bc4bda65afc109b7e7eaa8001d570", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47057bd9d59bc4bda65afc109b7e7eaa8001d570"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b3c86cb02803e569d4f5b6891d439c9daa0b90a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b3c86cb02803e569d4f5b6891d439c9daa0b90a", "html_url": "https://github.com/rust-lang/rust/commit/2b3c86cb02803e569d4f5b6891d439c9daa0b90a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b3c86cb02803e569d4f5b6891d439c9daa0b90a/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f441e8fde85aac3321b1aad42eaa25d88d0a716", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f441e8fde85aac3321b1aad42eaa25d88d0a716", "html_url": "https://github.com/rust-lang/rust/commit/6f441e8fde85aac3321b1aad42eaa25d88d0a716"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "261e6eae9949ce473d69c0241a80843b468a36dc", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2b3c86cb02803e569d4f5b6891d439c9daa0b90a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3c86cb02803e569d4f5b6891d439c9daa0b90a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=2b3c86cb02803e569d4f5b6891d439c9daa0b90a", "patch": "@@ -174,7 +174,11 @@ struct lookup {\n                 (optional_inherent_methods, subtyping_mode);\n \n             // if we found anything, stop before trying borrows\n-            if self.candidates.len() > 0u { break; }\n+            if self.candidates.len() > 0u {\n+                debug!{\"(checking method) found at least one inherent \\\n+                        method; giving up looking now\"};\n+                break;\n+            }\n \n             // Again, look for inherent and extension methods, this time using\n             // assignability.\n@@ -198,7 +202,11 @@ struct lookup {\n                 (optional_inherent_methods, mutable_reference_mode);\n \n             // if we found anything, stop before attempting auto-deref.\n-            if self.candidates.len() > 0u { break; }\n+            if self.candidates.len() > 0u {\n+                debug!{\"(checking method) found at least one inherent \\\n+                        method; giving up looking now\"};\n+                break;\n+            }\n \n             // check whether we can autoderef and if so loop around again.\n             match ty::deref(self.tcx(), self.self_ty, false) {\n@@ -210,7 +218,11 @@ struct lookup {\n             }\n         }\n \n-        if self.candidates.len() == 0u { return none; }\n+        if self.candidates.len() == 0u {\n+            debug!{\"(checking method) couldn't find any candidate methods; \\\n+                    returning none\"};\n+            return none;\n+        }\n \n         if self.candidates.len() > 1u {\n             self.tcx().sess.span_err(\n@@ -270,7 +282,7 @@ struct lookup {\n     }\n \n     fn add_candidates_from_param(n: uint, did: ast::def_id) {\n-        debug!{\"candidates_from_param\"};\n+        debug!{\"add_candidates_from_param\"};\n \n         let tcx = self.tcx();\n         let mut trait_bnd_idx = 0u; // count only trait bounds\n@@ -320,7 +332,7 @@ struct lookup {\n \n     fn add_candidates_from_trait(did: ast::def_id, trait_substs: ty::substs) {\n \n-        debug!{\"method_from_trait\"};\n+        debug!{\"add_candidates_from_trait\"};\n \n         let ms = *ty::trait_methods(self.tcx(), did);\n         for ms.eachi |i, m| {\n@@ -355,7 +367,7 @@ struct lookup {\n \n     fn add_candidates_from_class(did: ast::def_id, class_substs: ty::substs) {\n \n-        debug!{\"method_from_class\"};\n+        debug!{\"add_candidates_from_class\"};\n \n         let ms = *ty::trait_methods(self.tcx(), did);\n "}]}