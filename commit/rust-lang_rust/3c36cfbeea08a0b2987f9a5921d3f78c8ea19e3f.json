{"sha": "3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMzZjZmJlZWEwOGEwYjI5ODdmOWE1OTIxZDNmNzhjOGVhMTllM2Y=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-06-16T01:05:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-16T01:05:57Z"}, "message": "Merge pull request #1688 from topecongiro/overflow-closure\n\nWrap closure in block with a single control flow expr with multi line condition", "tree": {"sha": "a083ec1638ebfe845f58559f1f3d57a8843c7cdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a083ec1638ebfe845f58559f1f3d57a8843c7cdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f", "html_url": "https://github.com/rust-lang/rust/commit/3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "562d218ce93a89ee7d20c8fd18ad97b2a7c893f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/562d218ce93a89ee7d20c8fd18ad97b2a7c893f7", "html_url": "https://github.com/rust-lang/rust/commit/562d218ce93a89ee7d20c8fd18ad97b2a7c893f7"}, {"sha": "e7240f5e24f083aebe3cb32964e943a618210b1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7240f5e24f083aebe3cb32964e943a618210b1e", "html_url": "https://github.com/rust-lang/rust/commit/e7240f5e24f083aebe3cb32964e943a618210b1e"}], "stats": {"total": 463, "additions": 312, "deletions": 151}, "files": [{"sha": "92c62b08125b11035b649c87e74f31406fac2a1e", "filename": "src/expr.rs", "status": "modified", "additions": 289, "deletions": 148, "changes": 437, "blob_url": "https://github.com/rust-lang/rust/blob/3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f", "patch": "@@ -151,41 +151,17 @@ fn format_expr(\n                 shape,\n             )\n         }\n-        ast::ExprKind::While(ref cond, ref block, label) => {\n-            ControlFlow::new_while(None, cond, block, label, expr.span).rewrite(context, shape)\n-        }\n-        ast::ExprKind::WhileLet(ref pat, ref cond, ref block, label) => {\n-            ControlFlow::new_while(Some(pat), cond, block, label, expr.span).rewrite(context, shape)\n-        }\n-        ast::ExprKind::ForLoop(ref pat, ref cond, ref block, label) => {\n-            ControlFlow::new_for(pat, cond, block, label, expr.span).rewrite(context, shape)\n-        }\n-        ast::ExprKind::Loop(ref block, label) => {\n-            ControlFlow::new_loop(block, label, expr.span).rewrite(context, shape)\n+        ast::ExprKind::If(..) |\n+        ast::ExprKind::IfLet(..) |\n+        ast::ExprKind::ForLoop(..) |\n+        ast::ExprKind::Loop(..) |\n+        ast::ExprKind::While(..) |\n+        ast::ExprKind::WhileLet(..) => {\n+            to_control_flow(expr, expr_type).and_then(|control_flow| {\n+                control_flow.rewrite(context, shape)\n+            })\n         }\n         ast::ExprKind::Block(ref block) => block.rewrite(context, shape),\n-        ast::ExprKind::If(ref cond, ref if_block, ref else_block) => {\n-            ControlFlow::new_if(\n-                cond,\n-                None,\n-                if_block,\n-                else_block.as_ref().map(|e| &**e),\n-                expr_type == ExprType::SubExpression,\n-                false,\n-                expr.span,\n-            ).rewrite(context, shape)\n-        }\n-        ast::ExprKind::IfLet(ref pat, ref cond, ref if_block, ref else_block) => {\n-            ControlFlow::new_if(\n-                cond,\n-                Some(pat),\n-                if_block,\n-                else_block.as_ref().map(|e| &**e),\n-                expr_type == ExprType::SubExpression,\n-                false,\n-                expr.span,\n-            ).rewrite(context, shape)\n-        }\n         ast::ExprKind::Match(ref cond, ref arms) => {\n             rewrite_match(context, cond, arms, shape, expr.span)\n         }\n@@ -559,23 +535,15 @@ where\n     Some(result)\n }\n \n-// This functions is pretty messy because of the rules around closures and blocks:\n-// FIXME - the below is probably no longer true in full.\n-//   * if there is a return type, then there must be braces,\n-//   * given a closure with braces, whether that is parsed to give an inner block\n-//     or not depends on if there is a return type and if there are statements\n-//     in that block,\n-//   * if the first expression in the body ends with a block (i.e., is a\n-//     statement without needing a semi-colon), then adding or removing braces\n-//     can change whether it is treated as an expression or statement.\n-fn rewrite_closure(\n+// Return type is (prefix, extra_offset)\n+fn rewrite_closure_fn_decl(\n     capture: ast::CaptureBy,\n     fn_decl: &ast::FnDecl,\n     body: &ast::Expr,\n     span: Span,\n     context: &RewriteContext,\n     shape: Shape,\n-) -> Option<String> {\n+) -> Option<(String, usize)> {\n     let mover = if capture == ast::CaptureBy::Value {\n         \"move \"\n     } else {\n@@ -622,6 +590,8 @@ fn rewrite_closure(\n     };\n     let list_str = try_opt!(write_list(&item_vec, &fmt));\n     let mut prefix = format!(\"{}|{}|\", mover, list_str);\n+    // 1 = space between `|...|` and body.\n+    let extra_offset = extra_offset(&prefix, shape) + 1;\n \n     if !ret_str.is_empty() {\n         if prefix.contains('\\n') {\n@@ -633,8 +603,35 @@ fn rewrite_closure(\n         prefix.push_str(&ret_str);\n     }\n \n+    Some((prefix, extra_offset))\n+}\n+\n+// This functions is pretty messy because of the rules around closures and blocks:\n+// FIXME - the below is probably no longer true in full.\n+//   * if there is a return type, then there must be braces,\n+//   * given a closure with braces, whether that is parsed to give an inner block\n+//     or not depends on if there is a return type and if there are statements\n+//     in that block,\n+//   * if the first expression in the body ends with a block (i.e., is a\n+//     statement without needing a semi-colon), then adding or removing braces\n+//     can change whether it is treated as an expression or statement.\n+fn rewrite_closure(\n+    capture: ast::CaptureBy,\n+    fn_decl: &ast::FnDecl,\n+    body: &ast::Expr,\n+    span: Span,\n+    context: &RewriteContext,\n+    shape: Shape,\n+) -> Option<String> {\n+    let (prefix, extra_offset) = try_opt!(rewrite_closure_fn_decl(\n+        capture,\n+        fn_decl,\n+        body,\n+        span,\n+        context,\n+        shape,\n+    ));\n     // 1 = space between `|...|` and body.\n-    let extra_offset = extra_offset(&prefix, shape) + 1;\n     let body_shape = try_opt!(shape.offset_left(extra_offset));\n \n     if let ast::ExprKind::Block(ref block) = body.node {\n@@ -649,7 +646,12 @@ fn rewrite_closure(\n             block_contains_comment(block, context.codemap) ||\n             prefix.contains('\\n');\n \n-        if ret_str.is_empty() && !needs_block {\n+        let no_return_type = if let ast::FunctionRetTy::Default(_) = fn_decl.output {\n+            true\n+        } else {\n+            false\n+        };\n+        if no_return_type && !needs_block {\n             // lock.stmts.len() == 1\n             if let Some(ref expr) = stmt_expr(&block.stmts[0]) {\n                 if let Some(rw) = rewrite_closure_expr(expr, &prefix, context, body_shape) {\n@@ -671,15 +673,23 @@ fn rewrite_closure(\n         }\n \n         // Either we require a block, or tried without and failed.\n-        return rewrite_closure_block(&block, prefix, context, body_shape);\n-    }\n-\n-    if let Some(rw) = rewrite_closure_expr(body, &prefix, context, body_shape) {\n-        return Some(rw);\n+        rewrite_closure_block(&block, &prefix, context, body_shape)\n+    } else {\n+        rewrite_closure_expr(body, &prefix, context, body_shape).or_else(|| {\n+            // The closure originally had a non-block expression, but we can't fit on\n+            // one line, so we'll insert a block.\n+            rewrite_closure_with_block(context, body_shape, &prefix, body)\n+        })\n     }\n+}\n \n-    // The closure originally had a non-block expression, but we can't fit on\n-    // one line, so we'll insert a block.\n+// Rewrite closure with a single expression wrapping its body with block.\n+fn rewrite_closure_with_block(\n+    context: &RewriteContext,\n+    shape: Shape,\n+    prefix: &str,\n+    body: &ast::Expr,\n+) -> Option<String> {\n     let block = ast::Block {\n         stmts: vec![\n             ast::Stmt {\n@@ -692,48 +702,50 @@ fn rewrite_closure(\n         rules: ast::BlockCheckMode::Default,\n         span: body.span,\n     };\n-    return rewrite_closure_block(&block, prefix, context, body_shape);\n+    rewrite_closure_block(&block, prefix, context, shape)\n+}\n \n-    fn rewrite_closure_expr(\n-        expr: &ast::Expr,\n-        prefix: &str,\n-        context: &RewriteContext,\n-        shape: Shape,\n-    ) -> Option<String> {\n-        let mut rewrite = expr.rewrite(context, shape);\n-        if classify::expr_requires_semi_to_be_stmt(left_most_sub_expr(expr)) {\n-            rewrite = and_one_line(rewrite);\n-        }\n-        rewrite.map(|rw| format!(\"{} {}\", prefix, rw))\n+// Rewrite closure with a single expression without wrapping its body with block.\n+fn rewrite_closure_expr(\n+    expr: &ast::Expr,\n+    prefix: &str,\n+    context: &RewriteContext,\n+    shape: Shape,\n+) -> Option<String> {\n+    let mut rewrite = expr.rewrite(context, shape);\n+    if classify::expr_requires_semi_to_be_stmt(left_most_sub_expr(expr)) {\n+        rewrite = and_one_line(rewrite);\n     }\n+    rewrite.map(|rw| format!(\"{} {}\", prefix, rw))\n+}\n \n-    fn rewrite_closure_block(\n-        block: &ast::Block,\n-        prefix: String,\n-        context: &RewriteContext,\n-        shape: Shape,\n-    ) -> Option<String> {\n-        // Start with visual indent, then fall back to block indent if the\n-        // closure is large.\n-        let block_threshold = context.config.closure_block_indent_threshold();\n-        if block_threshold >= 0 {\n-            if let Some(block_str) = block.rewrite(&context, shape) {\n-                if block_str.matches('\\n').count() <= block_threshold as usize &&\n-                    !need_block_indent(&block_str, shape)\n-                {\n-                    if let Some(block_str) = block_str.rewrite(context, shape) {\n-                        return Some(format!(\"{} {}\", prefix, block_str));\n-                    }\n+// Rewrite closure whose body is block.\n+fn rewrite_closure_block(\n+    block: &ast::Block,\n+    prefix: &str,\n+    context: &RewriteContext,\n+    shape: Shape,\n+) -> Option<String> {\n+    // Start with visual indent, then fall back to block indent if the\n+    // closure is large.\n+    let block_threshold = context.config.closure_block_indent_threshold();\n+    if block_threshold >= 0 {\n+        if let Some(block_str) = block.rewrite(&context, shape) {\n+            if block_str.matches('\\n').count() <= block_threshold as usize &&\n+                !need_block_indent(&block_str, shape)\n+            {\n+                if let Some(block_str) = block_str.rewrite(context, shape) {\n+                    return Some(format!(\"{} {}\", prefix, block_str));\n                 }\n             }\n         }\n-\n-        // The body of the closure is big enough to be block indented, that\n-        // means we must re-format.\n-        let block_shape = shape.block().with_max_width(context.config);\n-        let block_str = try_opt!(block.rewrite(&context, block_shape));\n-        Some(format!(\"{} {}\", prefix, block_str))\n     }\n+\n+    // The body of the closure is big enough to be block indented, that\n+    // means we must re-format.\n+    let block_shape = shape.block().with_max_width(context.config);\n+    let block_str = try_opt!(block.rewrite(&context, block_shape));\n+    Some(format!(\"{} {}\", prefix, block_str))\n }\n \n fn and_one_line(x: Option<String>) -> Option<String> {\n@@ -742,14 +754,14 @@ fn and_one_line(x: Option<String>) -> Option<String> {\n \n fn nop_block_collapse(block_str: Option<String>, budget: usize) -> Option<String> {\n     debug!(\"nop_block_collapse {:?} {}\", block_str, budget);\n-    block_str.map(|block_str| if block_str.starts_with('{') && budget >= 2 &&\n-        (block_str[1..]\n-             .find(|c: char| !c.is_whitespace())\n-             .unwrap() == block_str.len() - 2)\n-    {\n-        \"{}\".to_owned()\n-    } else {\n-        block_str.to_owned()\n+    block_str.map(|block_str| {\n+        if block_str.starts_with('{') && budget >= 2 &&\n+            (block_str[1..].find(|c: char| !c.is_whitespace()).unwrap() == block_str.len() - 2)\n+        {\n+            \"{}\".to_owned()\n+        } else {\n+            block_str.to_owned()\n+        }\n     })\n }\n \n@@ -856,6 +868,32 @@ impl Rewrite for ast::Stmt {\n     }\n }\n \n+// Rewrite condition if the given expression has one.\n+fn rewrite_cond(context: &RewriteContext, expr: &ast::Expr, shape: Shape) -> Option<String> {\n+    match expr.node {\n+        ast::ExprKind::Match(ref cond, _) => {\n+            // `match `cond` {`\n+            let cond_shape = match context.config.control_style() {\n+                Style::Legacy => try_opt!(shape.shrink_left(6).and_then(|s| s.sub_width(2))),\n+                Style::Rfc => try_opt!(shape.offset_left(8)),\n+            };\n+            cond.rewrite(context, cond_shape)\n+        }\n+        ast::ExprKind::Block(ref block) if block.stmts.len() == 1 => {\n+            stmt_expr(&block.stmts[0]).and_then(|e| rewrite_cond(context, e, shape))\n+        }\n+        _ => {\n+            to_control_flow(expr, ExprType::SubExpression).and_then(|control_flow| {\n+                let alt_block_sep = String::from(\"\\n\") +\n+                    &shape.indent.block_only().to_string(context.config);\n+                control_flow\n+                    .rewrite_cond(context, shape, &alt_block_sep)\n+                    .and_then(|rw| Some(rw.0))\n+            })\n+        }\n+    }\n+}\n+\n // Abstraction over control flow expressions\n #[derive(Debug)]\n struct ControlFlow<'a> {\n@@ -873,6 +911,56 @@ struct ControlFlow<'a> {\n     span: Span,\n }\n \n+fn to_control_flow<'a>(expr: &'a ast::Expr, expr_type: ExprType) -> Option<ControlFlow<'a>> {\n+    match expr.node {\n+        ast::ExprKind::If(ref cond, ref if_block, ref else_block) => {\n+            Some(ControlFlow::new_if(\n+                cond,\n+                None,\n+                if_block,\n+                else_block.as_ref().map(|e| &**e),\n+                expr_type == ExprType::SubExpression,\n+                false,\n+                expr.span,\n+            ))\n+        }\n+        ast::ExprKind::IfLet(ref pat, ref cond, ref if_block, ref else_block) => {\n+            Some(ControlFlow::new_if(\n+                cond,\n+                Some(pat),\n+                if_block,\n+                else_block.as_ref().map(|e| &**e),\n+                expr_type == ExprType::SubExpression,\n+                false,\n+                expr.span,\n+            ))\n+        }\n+        ast::ExprKind::ForLoop(ref pat, ref cond, ref block, label) => {\n+            Some(ControlFlow::new_for(pat, cond, block, label, expr.span))\n+        }\n+        ast::ExprKind::Loop(ref block, label) => Some(\n+            ControlFlow::new_loop(block, label, expr.span),\n+        ),\n+        ast::ExprKind::While(ref cond, ref block, label) => Some(ControlFlow::new_while(\n+            None,\n+            cond,\n+            block,\n+            label,\n+            expr.span,\n+        )),\n+        ast::ExprKind::WhileLet(ref pat, ref cond, ref block, label) => {\n+            Some(ControlFlow::new_while(\n+                Some(pat),\n+                cond,\n+                block,\n+                label,\n+                expr.span,\n+            ))\n+        }\n+        _ => None,\n+    }\n+}\n+\n impl<'a> ControlFlow<'a> {\n     fn new_if(\n         cond: &'a ast::Expr,\n@@ -1021,9 +1109,13 @@ impl<'a> ControlFlow<'a> {\n     }\n }\n \n-impl<'a> Rewrite for ControlFlow<'a> {\n-    fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        debug!(\"ControlFlow::rewrite {:?} {:?}\", self, shape);\n+impl<'a> ControlFlow<'a> {\n+    fn rewrite_cond(\n+        &self,\n+        context: &RewriteContext,\n+        shape: Shape,\n+        alt_block_sep: &str,\n+    ) -> Option<(String, usize)> {\n         let constr_shape = if self.nested_if {\n             // We are part of an if-elseif-else chain. Our constraints are tightened.\n             // 7 = \"} else \" .len()\n@@ -1067,38 +1159,13 @@ impl<'a> Rewrite for ControlFlow<'a> {\n         if self.allow_single_line && context.config.single_line_if_else_max_width() > 0 {\n             let trial = self.rewrite_single_line(&pat_expr_string, context, shape.width);\n \n-            if trial.is_some() &&\n-                trial.as_ref().unwrap().len() <= context.config.single_line_if_else_max_width()\n-            {\n-                return trial;\n+            if let Some(cond_str) = trial {\n+                if cond_str.len() <= context.config.single_line_if_else_max_width() {\n+                    return Some((cond_str, 0));\n+                }\n             }\n         }\n \n-        let used_width = if pat_expr_string.contains('\\n') {\n-            last_line_width(&pat_expr_string)\n-        } else {\n-            // 2 = spaces after keyword and condition.\n-            label_string.len() + self.keyword.len() + pat_expr_string.len() + 2\n-        };\n-\n-        let block_width = shape.width.checked_sub(used_width).unwrap_or(0);\n-        // This is used only for the empty block case: `{}`. So, we use 1 if we know\n-        // we should avoid the single line case.\n-        let block_width = if self.else_block.is_some() || self.nested_if {\n-            min(1, block_width)\n-        } else {\n-            block_width\n-        };\n-\n-        let block_shape = Shape {\n-            width: block_width,\n-            ..shape\n-        };\n-        let mut block_context = context.clone();\n-        block_context.is_if_else_block = self.else_block.is_some();\n-\n-        let block_str = try_opt!(self.block.rewrite(&block_context, block_shape));\n-\n         let cond_span = if let Some(cond) = self.cond {\n             cond.span\n         } else {\n@@ -1123,34 +1190,75 @@ impl<'a> Rewrite for ControlFlow<'a> {\n         let after_cond_comment =\n             extract_comment(mk_sp(cond_span.hi, self.block.span.lo), context, shape);\n \n-        let alt_block_sep = String::from(\"\\n\") +\n-            &shape.indent.block_only().to_string(context.config);\n         let block_sep = if self.cond.is_none() && between_kwd_cond_comment.is_some() {\n             \"\"\n         } else if context.config.control_brace_style() == ControlBraceStyle::AlwaysNextLine ||\n                    force_newline_brace\n         {\n-            alt_block_sep.as_str()\n+            alt_block_sep\n         } else {\n             \" \"\n         };\n \n-        let mut result =\n-            format!(\"{}{}{}{}{}{}\",\n-                                 label_string,\n-                                 self.keyword,\n-                                 between_kwd_cond_comment\n-                                     .as_ref()\n-                                     .map_or(if pat_expr_string.is_empty() ||\n-                                                pat_expr_string.starts_with('\\n') {\n-                                                 \"\"\n-                                             } else {\n-                                                 \" \"\n-                                             },\n-                                             |s| &**s),\n-                                 pat_expr_string,\n-                                 after_cond_comment.as_ref().map_or(block_sep, |s| &**s),\n-                                 block_str);\n+        let used_width = if pat_expr_string.contains('\\n') {\n+            last_line_width(&pat_expr_string)\n+        } else {\n+            // 2 = spaces after keyword and condition.\n+            label_string.len() + self.keyword.len() + pat_expr_string.len() + 2\n+        };\n+\n+        Some((\n+            format!(\n+                \"{}{}{}{}{}\",\n+                label_string,\n+                self.keyword,\n+                between_kwd_cond_comment.as_ref().map_or(\n+                    if pat_expr_string.is_empty() ||\n+                        pat_expr_string.starts_with('\\n')\n+                    {\n+                        \"\"\n+                    } else {\n+                        \" \"\n+                    },\n+                    |s| &**s,\n+                ),\n+                pat_expr_string,\n+                after_cond_comment.as_ref().map_or(block_sep, |s| &**s)\n+            ),\n+            used_width,\n+        ))\n+    }\n+}\n+\n+impl<'a> Rewrite for ControlFlow<'a> {\n+    fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n+        debug!(\"ControlFlow::rewrite {:?} {:?}\", self, shape);\n+\n+        let alt_block_sep = String::from(\"\\n\") +\n+            &shape.indent.block_only().to_string(context.config);\n+        let (cond_str, used_width) = try_opt!(self.rewrite_cond(context, shape, &alt_block_sep));\n+        // If `used_width` is 0, it indicates that whole control flow is written in a single line.\n+        if used_width == 0 {\n+            return Some(cond_str);\n+        }\n+\n+        let block_width = shape.width.checked_sub(used_width).unwrap_or(0);\n+        // This is used only for the empty block case: `{}`. So, we use 1 if we know\n+        // we should avoid the single line case.\n+        let block_width = if self.else_block.is_some() || self.nested_if {\n+            min(1, block_width)\n+        } else {\n+            block_width\n+        };\n+        let block_shape = Shape {\n+            width: block_width,\n+            ..shape\n+        };\n+        let mut block_context = context.clone();\n+        block_context.is_if_else_block = self.else_block.is_some();\n+        let block_str = try_opt!(self.block.rewrite(&block_context, block_shape));\n+\n+        let mut result = format!(\"{}{}\", cond_str, block_str);\n \n         if let Some(else_block) = self.else_block {\n             let shape = Shape::indented(shape.indent, context.config);\n@@ -2108,7 +2216,40 @@ fn rewrite_last_arg_with_overflow<'a, T>(\n where\n     T: Rewrite + Spanned + ToExpr + 'a,\n {\n-    let rewrite = last_arg.rewrite(context, shape);\n+    let rewrite = if let Some(expr) = last_arg.to_expr() {\n+        match expr.node {\n+            // When overflowing the closure which consists of a single control flow expression,\n+            // force to use block if its condition uses multi line.\n+            ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) => {\n+                let try_closure_with_block = || {\n+                    let body = match body.node {\n+                        ast::ExprKind::Block(ref block) if block.stmts.len() == 1 => {\n+                            try_opt!(stmt_expr(&block.stmts[0]))\n+                        }\n+                        _ => body,\n+                    };\n+                    let (prefix, extra_offset) = try_opt!(rewrite_closure_fn_decl(\n+                        capture,\n+                        fn_decl,\n+                        body,\n+                        expr.span,\n+                        context,\n+                        shape,\n+                    ));\n+                    let shape = try_opt!(shape.offset_left(extra_offset));\n+                    rewrite_cond(context, body, shape).map_or(None, |cond| if cond.contains('\\n') {\n+                        rewrite_closure_with_block(context, shape, &prefix, body)\n+                    } else {\n+                        None\n+                    })\n+                };\n+                try_closure_with_block().or_else(|| expr.rewrite(context, shape))\n+            }\n+            _ => expr.rewrite(context, shape),\n+        }\n+    } else {\n+        last_arg.rewrite(context, shape)\n+    };\n     let orig_last = last_item.item.clone();\n \n     if let Some(rewrite) = rewrite {"}, {"sha": "e3c06ae7956b92eea551b7bcdb6430c581df99d8", "filename": "src/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f", "patch": "@@ -159,9 +159,9 @@ impl Rewrite for ast::ViewPath {\n     // Returns an empty string when the ViewPath is empty (like foo::bar::{})\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         match self.node {\n-            ast::ViewPath_::ViewPathList(_, ref path_list) if path_list.is_empty() => {\n-                Some(String::new())\n-            }\n+            ast::ViewPath_::ViewPathList(_, ref path_list) if path_list.is_empty() => Some(\n+                String::new(),\n+            ),\n             ast::ViewPath_::ViewPathList(ref path, ref path_list) => {\n                 rewrite_use_list(shape, path, path_list, self.span, context)\n             }"}, {"sha": "5734fd5502df2fb08a93c4c0b874e9da9cd8561a", "filename": "tests/target/issue-1681.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f/tests%2Ftarget%2Fissue-1681.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f/tests%2Ftarget%2Fissue-1681.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1681.rs?ref=3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f", "patch": "@@ -0,0 +1,20 @@\n+// rustfmt-max_width: 80\n+\n+// We would like to surround closure body with block when overflowing the last\n+// argument of function call if the last argument has condition and without\n+// block it may go multi lines.\n+fn foo() {\n+    refmut_map_result(self.cache.borrow_mut(), |cache| {\n+        match cache.entry(cache_key) {\n+            Occupied(entry) => Ok(entry.into_mut()),\n+            Vacant(entry) => {\n+                let statement = {\n+                    let sql = try!(entry.key().sql(source));\n+                    prepare_fn(&sql)\n+                };\n+\n+                Ok(entry.insert(try!(statement)))\n+            }\n+        }\n+    }).map(MaybeCached::Cached)\n+}"}]}