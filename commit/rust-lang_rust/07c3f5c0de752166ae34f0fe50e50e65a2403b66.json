{"sha": "07c3f5c0de752166ae34f0fe50e50e65a2403b66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YzNmNWMwZGU3NTIxNjZhZTM0ZjBmZTUwZTUwZTY1YTI0MDNiNjY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-27T01:12:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-27T17:40:16Z"}, "message": "librustc: Forbid `pub` or `priv` before trait implementations", "tree": {"sha": "2c40b3bb0659ac6ea6dabed650d8e01de199e3f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c40b3bb0659ac6ea6dabed650d8e01de199e3f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07c3f5c0de752166ae34f0fe50e50e65a2403b66", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07c3f5c0de752166ae34f0fe50e50e65a2403b66", "html_url": "https://github.com/rust-lang/rust/commit/07c3f5c0de752166ae34f0fe50e50e65a2403b66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07c3f5c0de752166ae34f0fe50e50e65a2403b66/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "573a31dfa769887f4be77a621ef4cab2d92a74e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/573a31dfa769887f4be77a621ef4cab2d92a74e5", "html_url": "https://github.com/rust-lang/rust/commit/573a31dfa769887f4be77a621ef4cab2d92a74e5"}], "stats": {"total": 592, "additions": 304, "deletions": 288}, "files": [{"sha": "ab604d1f0b6fe3cf44ca4e1dd78fa96bc45d63e6", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -168,7 +168,7 @@ pub mod traits {\n     use kinds::Copy;\n     use ops::Add;\n \n-    pub impl<T:Copy> Add<&[const T],@[T]> for @[T] {\n+    impl<T:Copy> Add<&[const T],@[T]> for @[T] {\n         #[inline(always)]\n         pure fn add(&self, rhs: & &self/[const T]) -> @[T] {\n             append(*self, (*rhs))"}, {"sha": "c4f2704ab9f6efe1c750e567e009d7ae510ce788", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -284,7 +284,7 @@ impl num::One for f32 {\n     static pure fn one() -> f32 { 1.0 }\n }\n \n-pub impl NumCast for f32 {\n+impl NumCast for f32 {\n     /**\n      * Cast `n` to an `f32`\n      */"}, {"sha": "8f3771312e4d6ae530ce84e1a814fa02b0c80a9c", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -299,7 +299,7 @@ impl cmp::Ord for f64 {\n     pure fn gt(&self, other: &f64) -> bool { (*self) > (*other) }\n }\n \n-pub impl NumCast for f64 {\n+impl NumCast for f64 {\n     /**\n      * Cast `n` to an `f64`\n      */"}, {"sha": "1b79ec614d49b2e523fad3cbf9d09b6f3d4cb0d5", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -420,7 +420,7 @@ impl num::One for float {\n     static pure fn one() -> float { 1.0 }\n }\n \n-pub impl NumCast for float {\n+impl NumCast for float {\n     /**\n      * Cast `n` to a `float`\n      */"}, {"sha": "a3def10bda8a55494f5fe81ea2923b3ed5457e25", "filename": "src/libcore/num/int-template/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -17,7 +17,7 @@ mod inst {\n     pub const bits: uint = ::u16::bits;\n }\n \n-pub impl NumCast for i16 {\n+impl NumCast for i16 {\n     /**\n      * Cast `n` to a `i16`\n      */"}, {"sha": "eccd1f6ce3c8a4797e4aabd990c3326899227481", "filename": "src/libcore/num/int-template/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -17,7 +17,7 @@ mod inst {\n     pub const bits: uint = ::u32::bits;\n }\n \n-pub impl NumCast for i32 {\n+impl NumCast for i32 {\n     /**\n      * Cast `n` to a `i32`\n      */"}, {"sha": "05d529cbcf46a56287218023ce0c2c814197f2f0", "filename": "src/libcore/num/int-template/i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -17,7 +17,7 @@ mod inst {\n     pub const bits: uint = ::u64::bits;\n }\n \n-pub impl NumCast for i64 {\n+impl NumCast for i64 {\n     /**\n      * Cast `n` to a `i64`\n      */"}, {"sha": "d8819d4fed0f9c661fca4dac3dc3e7d7dfcdeebf", "filename": "src/libcore/num/int-template/i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -17,7 +17,7 @@ mod inst {\n     pub const bits: uint = ::u8::bits;\n }\n \n-pub impl NumCast for i8 {\n+impl NumCast for i8 {\n     /**\n      * Cast `n` to a `i8`\n      */"}, {"sha": "7e376a47b8966dc3a9d2887a9a8c3a04a57e1126", "filename": "src/libcore/num/int-template/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -58,7 +58,7 @@ mod inst {\n     }\n }\n \n-pub impl NumCast for int {\n+impl NumCast for int {\n     /**\n      * Cast `n` to a `int`\n      */"}, {"sha": "01ec0cc77bf9188dad203e648fff9cb172c94964", "filename": "src/libcore/num/uint-template/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -19,7 +19,7 @@ mod inst {\n     pub const bits: uint = 16;\n }\n \n-pub impl NumCast for u16 {\n+impl NumCast for u16 {\n     /**\n      * Cast `n` to a `u16`\n      */"}, {"sha": "772ef51d30d4ad48ece2480c4d6ccd90c82c499f", "filename": "src/libcore/num/uint-template/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -19,7 +19,7 @@ mod inst {\n     pub const bits: uint = 32;\n }\n \n-pub impl NumCast for u32 {\n+impl NumCast for u32 {\n     /**\n      * Cast `n` to a `u32`\n      */"}, {"sha": "ec7301a01e486b9369c2cf07ef940bb829cff140", "filename": "src/libcore/num/uint-template/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -19,7 +19,7 @@ mod inst {\n     pub const bits: uint = 64;\n }\n \n-pub impl NumCast for u64 {\n+impl NumCast for u64 {\n     /**\n      * Cast `n` to a `u64`\n      */"}, {"sha": "53e4be70727bf0d452f33936494cb3b8449cf894", "filename": "src/libcore/num/uint-template/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -26,7 +26,7 @@ mod inst {\n     pub pure fn is_ascii(x: T) -> bool { return 0 as T == x & 128 as T; }\n }\n \n-pub impl NumCast for u8 {\n+impl NumCast for u8 {\n     /**\n      * Cast `n` to a `u8`\n      */"}, {"sha": "e2a75b25eaeb69b3660f2b5860ea5bb77b6adcf5", "filename": "src/libcore/num/uint-template/uint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -110,7 +110,7 @@ pub mod inst {\n         return true;\n     }\n \n-    pub impl iter::Times for uint {\n+    impl iter::Times for uint {\n         #[inline(always)]\n         /**\n         * A convenience form for basic iteration. Given a uint `x`,\n@@ -209,7 +209,7 @@ pub mod inst {\n     }\n }\n \n-pub impl NumCast for uint {\n+impl NumCast for uint {\n     /**\n      * Cast `n` to a `uint`\n      */"}, {"sha": "1c2df949a2e9c7061eba22c597db41c211041a84", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -56,7 +56,7 @@ pub enum Option<T> {\n     Some(T),\n }\n \n-pub impl<T:Ord> Ord for Option<T> {\n+impl<T:Ord> Ord for Option<T> {\n     pure fn lt(&self, other: &Option<T>) -> bool {\n         match (self, other) {\n             (&None, &None) => false,"}, {"sha": "66be548181956ded778f015f082d702cf19026ef", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -2362,7 +2362,7 @@ pub trait OwnedStr {\n     fn push_char(&mut self, c: char);\n }\n \n-pub impl OwnedStr for ~str {\n+impl OwnedStr for ~str {\n     fn push_str(&mut self, v: &str) {\n         push_str(self, v);\n     }"}, {"sha": "1f0f3b0779cbe3450f2b8ab1e3f6fe2ffcf5a960", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -170,7 +170,7 @@ impl IterBytes for char {\n pub mod x32 {\n     use to_bytes::{Cb, IterBytes};\n \n-    pub impl IterBytes for uint {\n+    impl IterBytes for uint {\n         #[inline(always)]\n         pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n             (*self as u32).iter_bytes(lsb0, f)\n@@ -182,7 +182,7 @@ pub mod x32 {\n pub mod x64 {\n     use to_bytes::{Cb, IterBytes};\n \n-    pub impl IterBytes for uint {\n+    impl IterBytes for uint {\n         #[inline(always)]\n         pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n             (*self as u64).iter_bytes(lsb0, f)"}, {"sha": "eb2a93d86f9a465e9473941af66576657f22307b", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -451,7 +451,7 @@ impl LoanKind {\n \n /// Creates and returns a new root_map\n \n-pub impl to_bytes::IterBytes for root_map_key {\n+impl to_bytes::IterBytes for root_map_key {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.id, &self.derefs, lsb0, f);\n     }"}, {"sha": "3f8ee61e8412dea9ab487a6a0ae18eb0527eb205", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -281,12 +281,12 @@ pub trait ast_node {\n     fn span(&self) -> span;\n }\n \n-pub impl ast_node for @ast::expr {\n+impl ast_node for @ast::expr {\n     fn id(&self) -> ast::node_id { self.id }\n     fn span(&self) -> span { self.span }\n }\n \n-pub impl ast_node for @ast::pat {\n+impl ast_node for @ast::pat {\n     fn id(&self) -> ast::node_id { self.id }\n     fn span(&self) -> span { self.span }\n }\n@@ -295,7 +295,7 @@ pub trait get_type_for_node {\n     fn ty<N:ast_node>(&self, node: N) -> ty::t;\n }\n \n-pub impl get_type_for_node for ty::ctxt {\n+impl get_type_for_node for ty::ctxt {\n     fn ty<N:ast_node>(&self, node: N) -> ty::t {\n         ty::node_id_to_type(*self, node.id())\n     }"}, {"sha": "740a7e043d4dddb0155e628a19aad4f8e1ab96a9", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -107,7 +107,7 @@ pub trait get_insn_ctxt {\n     fn insn_ctxt(&self, s: &str) -> icx_popper;\n }\n \n-pub impl get_insn_ctxt for @CrateContext {\n+impl get_insn_ctxt for @CrateContext {\n     fn insn_ctxt(&self, s: &str) -> icx_popper {\n         debug!(\"new insn_ctxt: %s\", s);\n         if self.sess.count_llvm_insns() {\n@@ -117,13 +117,13 @@ pub impl get_insn_ctxt for @CrateContext {\n     }\n }\n \n-pub impl get_insn_ctxt for block {\n+impl get_insn_ctxt for block {\n     fn insn_ctxt(&self, s: &str) -> icx_popper {\n         self.ccx().insn_ctxt(s)\n     }\n }\n \n-pub impl get_insn_ctxt for fn_ctxt {\n+impl get_insn_ctxt for fn_ctxt {\n     fn insn_ctxt(&self, s: &str) -> icx_popper {\n         self.ccx.insn_ctxt(s)\n     }"}, {"sha": "f8a7f4779764cc9fcfd85528e5327e73eebe7ec1", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -538,13 +538,13 @@ pub trait get_node_info {\n     fn info(&self) -> Option<NodeInfo>;\n }\n \n-pub impl get_node_info for @ast::expr {\n+impl get_node_info for @ast::expr {\n     fn info(&self) -> Option<NodeInfo> {\n         Some(NodeInfo { id: self.id, span: self.span })\n     }\n }\n \n-pub impl get_node_info for ast::blk {\n+impl get_node_info for ast::blk {\n     fn info(&self) -> Option<NodeInfo> {\n         Some(NodeInfo { id: self.node.id, span: self.span })\n     }\n@@ -553,7 +553,7 @@ pub impl get_node_info for ast::blk {\n // XXX: Work around a trait parsing bug. remove after snapshot\n pub type optional_boxed_ast_expr = Option<@ast::expr>;\n \n-pub impl get_node_info for optional_boxed_ast_expr {\n+impl get_node_info for optional_boxed_ast_expr {\n     fn info(&self) -> Option<NodeInfo> {\n         self.chain_ref(|s| s.info())\n     }\n@@ -1275,7 +1275,7 @@ pub struct mono_id_ {\n \n pub type mono_id = @mono_id_;\n \n-pub impl to_bytes::IterBytes for mono_param_id {\n+impl to_bytes::IterBytes for mono_param_id {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match /*bad*/copy *self {\n           mono_precise(t, mids) =>\n@@ -1289,7 +1289,7 @@ pub impl to_bytes::IterBytes for mono_param_id {\n     }\n }\n \n-pub impl to_bytes::IterBytes for mono_id_ {\n+impl to_bytes::IterBytes for mono_id_ {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.def, &self.params, lsb0, f);\n     }"}, {"sha": "07499dac62e148e4fa418cea5c251521e259950b", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -151,14 +151,14 @@ pub impl DatumMode {\n     }\n }\n \n-pub impl cmp::Eq for DatumMode {\n+impl cmp::Eq for DatumMode {\n     pure fn eq(&self, other: &DatumMode) -> bool {\n         (*self) as uint == (*other as uint)\n     }\n     pure fn ne(&self, other: &DatumMode) -> bool { !(*self).eq(other) }\n }\n \n-pub impl to_bytes::IterBytes for DatumMode {\n+impl to_bytes::IterBytes for DatumMode {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as uint).iter_bytes(lsb0, f)\n     }"}, {"sha": "efbbfc46cb94414edbaec5f39114b2008824fa30", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -660,46 +660,46 @@ pub trait Vid {\n     pure fn to_uint(&self) -> uint;\n }\n \n-pub impl Vid for TyVid {\n+impl Vid for TyVid {\n     pure fn to_uint(&self) -> uint { **self }\n }\n \n-pub impl ToStr for TyVid {\n+impl ToStr for TyVid {\n     pure fn to_str(&self) -> ~str { fmt!(\"<V%u>\", self.to_uint()) }\n }\n \n-pub impl Vid for IntVid {\n+impl Vid for IntVid {\n     pure fn to_uint(&self) -> uint { **self }\n }\n \n-pub impl ToStr for IntVid {\n+impl ToStr for IntVid {\n     pure fn to_str(&self) -> ~str { fmt!(\"<VI%u>\", self.to_uint()) }\n }\n \n-pub impl Vid for FloatVid {\n+impl Vid for FloatVid {\n     pure fn to_uint(&self) -> uint { **self }\n }\n \n-pub impl ToStr for FloatVid {\n+impl ToStr for FloatVid {\n     pure fn to_str(&self) -> ~str { fmt!(\"<VF%u>\", self.to_uint()) }\n }\n \n-pub impl Vid for RegionVid {\n+impl Vid for RegionVid {\n     pure fn to_uint(&self) -> uint { **self }\n }\n \n-pub impl ToStr for RegionVid {\n+impl ToStr for RegionVid {\n     pure fn to_str(&self) -> ~str { fmt!(\"%?\", self) }\n }\n \n-pub impl ToStr for FnSig {\n+impl ToStr for FnSig {\n     pure fn to_str(&self) -> ~str {\n         // grr, without tcx not much we can do.\n         return ~\"(...)\";\n     }\n }\n \n-pub impl ToStr for InferTy {\n+impl ToStr for InferTy {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n             TyVar(ref v) => v.to_str(),\n@@ -709,7 +709,7 @@ pub impl ToStr for InferTy {\n     }\n }\n \n-pub impl ToStr for IntVarValue {\n+impl ToStr for IntVarValue {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n             IntType(ref v) => v.to_str(),\n@@ -718,25 +718,25 @@ pub impl ToStr for IntVarValue {\n     }\n }\n \n-pub impl to_bytes::IterBytes for TyVid {\n+impl to_bytes::IterBytes for TyVid {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         self.to_uint().iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl to_bytes::IterBytes for IntVid {\n+impl to_bytes::IterBytes for IntVid {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         self.to_uint().iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl to_bytes::IterBytes for FloatVid {\n+impl to_bytes::IterBytes for FloatVid {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         self.to_uint().iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl to_bytes::IterBytes for RegionVid {\n+impl to_bytes::IterBytes for RegionVid {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         self.to_uint().iter_bytes(lsb0, f)\n     }"}, {"sha": "998c007c86d7db1ab8a63177b7adb71fd05e39d3", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -625,7 +625,7 @@ pub fn check_item(ccx: @mut CrateCtxt, it: @ast::item) {\n     }\n }\n \n-pub impl AstConv for FnCtxt {\n+impl AstConv for FnCtxt {\n     fn tcx(@mut self) -> ty::ctxt { self.ccx.tcx }\n     fn ccx(@mut self) -> @mut CrateCtxt { self.ccx }\n \n@@ -659,7 +659,7 @@ pub impl FnCtxt {\n     }\n }\n \n-pub impl region_scope for @mut FnCtxt {\n+impl region_scope for @mut FnCtxt {\n     pure fn anon_region(&self, span: span) -> Result<ty::Region, ~str> {\n         // XXX: Unsafe to work around purity\n         unsafe {"}, {"sha": "1bbee20e2e26103eef6dc28e5bcadc0cc80da8a5", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -121,7 +121,7 @@ pub impl @mut CrateCtxt {\n     }\n }\n \n-pub impl AstConv for CrateCtxt {\n+impl AstConv for CrateCtxt {\n     fn tcx(@mut self) -> ty::ctxt { self.tcx }\n     fn ccx(@mut self) -> @mut CrateCtxt { self }\n "}, {"sha": "936ca1e829775aba5c2e73e403fa10acf22c5868", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -27,7 +27,7 @@ use std::list;\n \n pub enum Glb = CombineFields;  // \"greatest lower bound\" (common subtype)\n \n-pub impl Combine for Glb {\n+impl Combine for Glb {\n     fn infcx(&self) -> @mut InferCtxt { self.infcx }\n     fn tag(&self) -> ~str { ~\"glb\" }\n     fn a_is_expected(&self) -> bool { self.a_is_expected }"}, {"sha": "8fa887fca0badde4e9ce1cc4e6381d51864cdc43", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -59,7 +59,7 @@ pub trait LatticeValue {\n \n pub type LatticeOp<T> = &fn(cf: &CombineFields, a: &T, b: &T) -> cres<T>;\n \n-pub impl LatticeValue for ty::t {\n+impl LatticeValue for ty::t {\n     static fn sub(&self, cf: &CombineFields, a: &ty::t, b: &ty::t) -> ures {\n         Sub(*cf).tys(*a, *b).to_ures()\n     }\n@@ -305,29 +305,29 @@ pub trait TyLatticeDir {\n     fn ty_bot(&self, t: ty::t) -> cres<ty::t>;\n }\n \n-pub impl LatticeDir for Lub {\n+impl LatticeDir for Lub {\n     fn combine_fields(&self) -> CombineFields { **self }\n     fn bnd<T:Copy>(&self, b: &Bounds<T>) -> Option<T> { b.ub }\n     fn with_bnd<T:Copy>(&self, b: &Bounds<T>, +t: T) -> Bounds<T> {\n         Bounds { ub: Some(t), ..*b }\n     }\n }\n \n-pub impl TyLatticeDir for Lub {\n+impl TyLatticeDir for Lub {\n     fn ty_bot(&self, t: ty::t) -> cres<ty::t> {\n         Ok(t)\n     }\n }\n \n-pub impl LatticeDir for Glb {\n+impl LatticeDir for Glb {\n     fn combine_fields(&self) -> CombineFields { **self }\n     fn bnd<T:Copy>(&self, b: &Bounds<T>) -> Option<T> { b.lb }\n     fn with_bnd<T:Copy>(&self, b: &Bounds<T>, +t: T) -> Bounds<T> {\n         Bounds { lb: Some(t), ..*b }\n     }\n }\n \n-pub impl TyLatticeDir for Glb {\n+impl TyLatticeDir for Glb {\n     fn ty_bot(&self, _t: ty::t) -> cres<ty::t> {\n         Ok(ty::mk_bot(self.infcx.tcx))\n     }"}, {"sha": "2c4fd9f01eea534ce939e240944f54c4f954bd7f", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -32,7 +32,7 @@ pub impl Lub {\n              -> cres<ty::t> { self.bot_ty(b) } // commutative\n }\n \n-pub impl Combine for Lub {\n+impl Combine for Lub {\n     fn infcx(&self) -> @mut InferCtxt { self.infcx }\n     fn tag(&self) -> ~str { ~\"lub\" }\n     fn a_is_expected(&self) -> bool { self.a_is_expected }"}, {"sha": "5552b71d0d771d6bfada7fd8084b77118fa53d59", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -28,7 +28,7 @@ use syntax::ast::{m_const, purity, ret_style};\n \n pub enum Sub = CombineFields;  // \"subtype\", \"subregion\" etc\n \n-pub impl Combine for Sub {\n+impl Combine for Sub {\n     fn infcx(&self) -> @mut InferCtxt { self.infcx }\n     fn tag(&self) -> ~str { ~\"sub\" }\n     fn a_is_expected(&self) -> bool { self.a_is_expected }"}, {"sha": "9b74ac8535148b45738e6ebec74f3ee15f0f9955", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -28,33 +28,33 @@ pub trait InferStr {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str;\n }\n \n-pub impl InferStr for ty::t {\n+impl InferStr for ty::t {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         ty_to_str(cx.tcx, *self)\n     }\n }\n \n-pub impl InferStr for FnSig {\n+impl InferStr for FnSig {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         fmt!(\"(%s) -> %s\",\n              str::connect(self.inputs.map(|a| a.ty.inf_str(cx)), \", \"),\n              self.output.inf_str(cx))\n     }\n }\n \n-pub impl InferStr for ty::mt {\n+impl InferStr for ty::mt {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         mt_to_str(cx.tcx, *self)\n     }\n }\n \n-pub impl InferStr for ty::Region {\n+impl InferStr for ty::Region {\n     fn inf_str(&self, _cx: &InferCtxt) -> ~str {\n         fmt!(\"%?\", *self)\n     }\n }\n \n-pub impl<V:InferStr> InferStr for Bound<V> {\n+impl<V:InferStr> InferStr for Bound<V> {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         match *self {\n           Some(ref v) => v.inf_str(cx),\n@@ -63,15 +63,15 @@ pub impl<V:InferStr> InferStr for Bound<V> {\n     }\n }\n \n-pub impl<T:InferStr> InferStr for Bounds<T> {\n+impl<T:InferStr> InferStr for Bounds<T> {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         fmt!(\"{%s <: %s}\",\n              self.lb.inf_str(cx),\n              self.ub.inf_str(cx))\n     }\n }\n \n-pub impl<V:Vid + ToStr,T:InferStr> InferStr for VarValue<V, T> {\n+impl<V:Vid + ToStr,T:InferStr> InferStr for VarValue<V, T> {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         match *self {\n           Redirect(ref vid) => fmt!(\"Redirect(%s)\", vid.to_str()),\n@@ -81,13 +81,13 @@ pub impl<V:Vid + ToStr,T:InferStr> InferStr for VarValue<V, T> {\n     }\n }\n \n-pub impl InferStr for IntVarValue {\n+impl InferStr for IntVarValue {\n     fn inf_str(&self, _cx: &InferCtxt) -> ~str {\n         self.to_str()\n     }\n }\n \n-pub impl InferStr for ast::float_ty {\n+impl InferStr for ast::float_ty {\n     fn inf_str(&self, _cx: &InferCtxt) -> ~str {\n         self.to_str()\n     }"}, {"sha": "fec3f3d97796239dc7a5a02976cadec7e4f9fc3b", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -237,35 +237,35 @@ pub impl InferCtxt {\n \n // ______________________________________________________________________\n \n-pub impl UnifyVid<Bounds<ty::t>> for ty::TyVid {\n+impl UnifyVid<Bounds<ty::t>> for ty::TyVid {\n     static fn appropriate_vals_and_bindings(&self, infcx: &v/mut InferCtxt)\n         -> &v/mut ValsAndBindings<ty::TyVid, Bounds<ty::t>> {\n         return &mut infcx.ty_var_bindings;\n     }\n }\n \n-pub impl UnifyVid<Option<IntVarValue>> for ty::IntVid {\n+impl UnifyVid<Option<IntVarValue>> for ty::IntVid {\n     static fn appropriate_vals_and_bindings(&self, infcx: &v/mut InferCtxt)\n         -> &v/mut ValsAndBindings<ty::IntVid, Option<IntVarValue>> {\n         return &mut infcx.int_var_bindings;\n     }\n }\n \n-pub impl SimplyUnifiable for IntVarValue {\n+impl SimplyUnifiable for IntVarValue {\n     static fn to_type_err(&self, err: expected_found<IntVarValue>)\n         -> ty::type_err {\n         return ty::terr_int_mismatch(err);\n     }\n }\n \n-pub impl UnifyVid<Option<ast::float_ty>> for ty::FloatVid {\n+impl UnifyVid<Option<ast::float_ty>> for ty::FloatVid {\n     static fn appropriate_vals_and_bindings(&self, infcx: &v/mut InferCtxt)\n         -> &v/mut ValsAndBindings<ty::FloatVid, Option<ast::float_ty>> {\n         return &mut infcx.float_var_bindings;\n     }\n }\n \n-pub impl SimplyUnifiable for ast::float_ty {\n+impl SimplyUnifiable for ast::float_ty {\n     static fn to_type_err(&self, err: expected_found<ast::float_ty>)\n         -> ty::type_err {\n         return ty::terr_float_mismatch(err);"}, {"sha": "628cccfa9a22fbdcf5a356d84f2b6ca094c13336", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -26,7 +26,8 @@ pub trait region_scope {\n }\n \n pub enum empty_rscope { empty_rscope }\n-pub impl region_scope for empty_rscope {\n+\n+impl region_scope for empty_rscope {\n     pure fn anon_region(&self, _span: span) -> Result<ty::Region, ~str> {\n         result::Ok(ty::re_static)\n     }\n@@ -40,7 +41,8 @@ pub impl region_scope for empty_rscope {\n }\n \n pub enum type_rscope = Option<ty::region_variance>;\n-pub impl region_scope for type_rscope {\n+\n+impl region_scope for type_rscope {\n     pure fn anon_region(&self, _span: span) -> Result<ty::Region, ~str> {\n         match **self {\n           Some(_) => result::Ok(ty::re_bound(ty::br_self)),\n@@ -74,7 +76,8 @@ pub fn in_anon_rscope<RS:region_scope + Copy + Durable>(self: RS,\n                                                      -> @anon_rscope {\n     @anon_rscope {anon: r, base: self as region_scope}\n }\n-pub impl region_scope for @anon_rscope {\n+\n+impl region_scope for @anon_rscope {\n     pure fn anon_region(&self, _span: span) -> Result<ty::Region, ~str> {\n         result::Ok(self.anon)\n     }\n@@ -97,7 +100,8 @@ pub fn in_binding_rscope<RS:region_scope + Copy + Durable>(self: RS)\n     let base = self as region_scope;\n     @mut binding_rscope { base: base, anon_bindings: 0 }\n }\n-pub impl region_scope for @mut binding_rscope {\n+\n+impl region_scope for @mut binding_rscope {\n     pure fn anon_region(&self, _span: span) -> Result<ty::Region, ~str> {\n         // XXX: Unsafe to work around purity\n         unsafe {"}, {"sha": "0add79266302794cf2b79e2593bf6330e9c1939a", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -59,7 +59,7 @@ pub struct Config {\n     pandoc_cmd: Option<~str>\n }\n \n-pub impl Clone for Config {\n+impl Clone for Config {\n     fn clone(&self) -> Config { copy *self }\n }\n "}, {"sha": "2ee994bdf32b4a27637e8792470626bc5d5b4c0b", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -258,7 +258,7 @@ pub trait ByteChan {\n \n const CONTINUE: [u8 * 4] = [0xAA, 0xBB, 0xCC, 0xDD];\n \n-pub impl<T,U:Unflattener<T>,P:BytePort> GenericPort<T> for FlatPort<T, U, P> {\n+impl<T,U:Unflattener<T>,P:BytePort> GenericPort<T> for FlatPort<T, U, P> {\n     fn recv() -> T {\n         match self.try_recv() {\n             Some(val) => val,\n@@ -358,7 +358,7 @@ pub mod flatteners {\n         bogus: ()\n     }\n \n-    pub impl<T:Copy + Owned> Unflattener<T> for PodUnflattener<T> {\n+    impl<T:Copy + Owned> Unflattener<T> for PodUnflattener<T> {\n         fn unflatten(&self, buf: ~[u8]) -> T {\n             assert size_of::<T>() != 0;\n             assert size_of::<T>() == buf.len();\n@@ -368,7 +368,7 @@ pub mod flatteners {\n         }\n     }\n \n-    pub impl<T:Copy + Owned> Flattener<T> for PodFlattener<T> {\n+    impl<T:Copy + Owned> Flattener<T> for PodFlattener<T> {\n         fn flatten(&self, val: T) -> ~[u8] {\n             assert size_of::<T>() != 0;\n             let val: *T = ptr::to_unsafe_ptr(&val);\n@@ -406,14 +406,14 @@ pub mod flatteners {\n         serialize_value: SerializeValue<T>\n     }\n \n-    pub impl<D:Decoder,T:Decodable<D>> Unflattener<T>\n+    impl<D:Decoder,T:Decodable<D>> Unflattener<T>\n             for DeserializingUnflattener<D, T> {\n         fn unflatten(&self, buf: ~[u8]) -> T {\n             (self.deserialize_buffer)(buf)\n         }\n     }\n \n-    pub impl<S:Encoder,T:Encodable<S>> Flattener<T>\n+    impl<S:Encoder,T:Encodable<S>> Flattener<T>\n             for SerializingFlattener<S, T> {\n         fn flatten(&self, val: T) -> ~[u8] {\n             (self.serialize_value)(&val)\n@@ -519,7 +519,7 @@ pub mod bytepipes {\n         writer: W\n     }\n \n-    pub impl<R:Reader> BytePort for ReaderBytePort<R> {\n+    impl<R:Reader> BytePort for ReaderBytePort<R> {\n         fn try_recv(&self, count: uint) -> Option<~[u8]> {\n             let mut left = count;\n             let mut bytes = ~[];\n@@ -541,7 +541,7 @@ pub mod bytepipes {\n         }\n     }\n \n-    pub impl<W:Writer> ByteChan for WriterByteChan<W> {\n+    impl<W:Writer> ByteChan for WriterByteChan<W> {\n         fn send(&self, val: ~[u8]) {\n             self.writer.write(val);\n         }\n@@ -572,7 +572,7 @@ pub mod bytepipes {\n         chan: comm::Chan<~[u8]>\n     }\n \n-    pub impl BytePort for PipeBytePort {\n+    impl BytePort for PipeBytePort {\n         fn try_recv(&self, count: uint) -> Option<~[u8]> {\n             if self.buf.len() >= count {\n                 let mut bytes = ::core::util::replace(&mut self.buf, ~[]);\n@@ -604,7 +604,7 @@ pub mod bytepipes {\n         }\n     }\n \n-    pub impl ByteChan for PipeByteChan {\n+    impl ByteChan for PipeByteChan {\n         fn send(&self, val: ~[u8]) {\n             self.chan.send(val)\n         }"}, {"sha": "c6e76aa1a688ceaa7cba9d70e0ebc13007df2908", "filename": "src/libstd/json.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -82,7 +82,7 @@ pub fn Encoder(wr: io::Writer) -> Encoder {\n     Encoder { wr: wr }\n }\n \n-pub impl serialize::Encoder for Encoder {\n+impl serialize::Encoder for Encoder {\n     fn emit_nil(&self) { self.wr.write_str(\"null\") }\n \n     fn emit_uint(&self, v: uint) { self.emit_float(v as float); }\n@@ -217,7 +217,7 @@ pub fn PrettyEncoder(wr: io::Writer) -> PrettyEncoder {\n     PrettyEncoder { wr: wr, indent: 0 }\n }\n \n-pub impl serialize::Encoder for PrettyEncoder {\n+impl serialize::Encoder for PrettyEncoder {\n     fn emit_nil(&self) { self.wr.write_str(\"null\") }\n \n     fn emit_uint(&self, v: uint) { self.emit_float(v as float); }\n@@ -323,7 +323,7 @@ pub impl serialize::Encoder for PrettyEncoder {\n     }\n }\n \n-pub impl<S:serialize::Encoder> serialize::Encodable<S> for Json {\n+impl<S:serialize::Encoder> serialize::Encodable<S> for Json {\n     fn encode(&self, s: &S) {\n         match *self {\n             Number(v) => v.encode(s),\n@@ -768,7 +768,7 @@ priv impl Decoder {\n     }\n }\n \n-pub impl serialize::Decoder for Decoder {\n+impl serialize::Decoder for Decoder {\n     fn read_nil(&self) -> () {\n         debug!(\"read_nil\");\n         match *self.pop() {"}, {"sha": "dd873650b662ee257f6e9f8745962c968e5c5364", "filename": "src/libstd/prettyprint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibstd%2Fprettyprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibstd%2Fprettyprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -22,7 +22,7 @@ pub fn Serializer(wr: io::Writer) -> Serializer {\n     Serializer { wr: wr }\n }\n \n-pub impl serialize::Encoder for Serializer {\n+impl serialize::Encoder for Serializer {\n     fn emit_nil(&self) {\n         self.wr.write_str(~\"()\")\n     }"}, {"sha": "66db951e12bde0fda37db39c60582d65897978eb", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 57, "deletions": 59, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -113,210 +113,210 @@ pub trait Decodable<D:Decoder> {\n     static fn decode(&self, d: &D) -> Self;\n }\n \n-pub impl<S:Encoder> Encodable<S> for uint {\n+impl<S:Encoder> Encodable<S> for uint {\n     fn encode(&self, s: &S) { s.emit_uint(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for uint {\n+impl<D:Decoder> Decodable<D> for uint {\n     static fn decode(&self, d: &D) -> uint {\n         d.read_uint()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for u8 {\n+impl<S:Encoder> Encodable<S> for u8 {\n     fn encode(&self, s: &S) { s.emit_u8(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for u8 {\n+impl<D:Decoder> Decodable<D> for u8 {\n     static fn decode(&self, d: &D) -> u8 {\n         d.read_u8()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for u16 {\n+impl<S:Encoder> Encodable<S> for u16 {\n     fn encode(&self, s: &S) { s.emit_u16(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for u16 {\n+impl<D:Decoder> Decodable<D> for u16 {\n     static fn decode(&self, d: &D) -> u16 {\n         d.read_u16()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for u32 {\n+impl<S:Encoder> Encodable<S> for u32 {\n     fn encode(&self, s: &S) { s.emit_u32(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for u32 {\n+impl<D:Decoder> Decodable<D> for u32 {\n     static fn decode(&self, d: &D) -> u32 {\n         d.read_u32()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for u64 {\n+impl<S:Encoder> Encodable<S> for u64 {\n     fn encode(&self, s: &S) { s.emit_u64(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for u64 {\n+impl<D:Decoder> Decodable<D> for u64 {\n     static fn decode(&self, d: &D) -> u64 {\n         d.read_u64()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for int {\n+impl<S:Encoder> Encodable<S> for int {\n     fn encode(&self, s: &S) { s.emit_int(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for int {\n+impl<D:Decoder> Decodable<D> for int {\n     static fn decode(&self, d: &D) -> int {\n         d.read_int()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for i8 {\n+impl<S:Encoder> Encodable<S> for i8 {\n     fn encode(&self, s: &S) { s.emit_i8(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for i8 {\n+impl<D:Decoder> Decodable<D> for i8 {\n     static fn decode(&self, d: &D) -> i8 {\n         d.read_i8()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for i16 {\n+impl<S:Encoder> Encodable<S> for i16 {\n     fn encode(&self, s: &S) { s.emit_i16(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for i16 {\n+impl<D:Decoder> Decodable<D> for i16 {\n     static fn decode(&self, d: &D) -> i16 {\n         d.read_i16()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for i32 {\n+impl<S:Encoder> Encodable<S> for i32 {\n     fn encode(&self, s: &S) { s.emit_i32(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for i32 {\n+impl<D:Decoder> Decodable<D> for i32 {\n     static fn decode(&self, d: &D) -> i32 {\n         d.read_i32()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for i64 {\n+impl<S:Encoder> Encodable<S> for i64 {\n     fn encode(&self, s: &S) { s.emit_i64(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for i64 {\n+impl<D:Decoder> Decodable<D> for i64 {\n     static fn decode(&self, d: &D) -> i64 {\n         d.read_i64()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for &str {\n+impl<S:Encoder> Encodable<S> for &str {\n     fn encode(&self, s: &S) { s.emit_borrowed_str(*self) }\n }\n \n-pub impl<S:Encoder> Encodable<S> for ~str {\n+impl<S:Encoder> Encodable<S> for ~str {\n     fn encode(&self, s: &S) { s.emit_owned_str(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for ~str {\n+impl<D:Decoder> Decodable<D> for ~str {\n     static fn decode(&self, d: &D) -> ~str {\n         d.read_owned_str()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for @str {\n+impl<S:Encoder> Encodable<S> for @str {\n     fn encode(&self, s: &S) { s.emit_managed_str(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for @str {\n+impl<D:Decoder> Decodable<D> for @str {\n     static fn decode(&self, d: &D) -> @str {\n         d.read_managed_str()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for float {\n+impl<S:Encoder> Encodable<S> for float {\n     fn encode(&self, s: &S) { s.emit_float(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for float {\n+impl<D:Decoder> Decodable<D> for float {\n     static fn decode(&self, d: &D) -> float {\n         d.read_float()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for f32 {\n+impl<S:Encoder> Encodable<S> for f32 {\n     fn encode(&self, s: &S) { s.emit_f32(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for f32 {\n+impl<D:Decoder> Decodable<D> for f32 {\n     static fn decode(&self, d: &D) -> f32 {\n         d.read_f32() }\n }\n \n-pub impl<S:Encoder> Encodable<S> for f64 {\n+impl<S:Encoder> Encodable<S> for f64 {\n     fn encode(&self, s: &S) { s.emit_f64(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for f64 {\n+impl<D:Decoder> Decodable<D> for f64 {\n     static fn decode(&self, d: &D) -> f64 {\n         d.read_f64()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for bool {\n+impl<S:Encoder> Encodable<S> for bool {\n     fn encode(&self, s: &S) { s.emit_bool(*self) }\n }\n \n-pub impl<D:Decoder> Decodable<D> for bool {\n+impl<D:Decoder> Decodable<D> for bool {\n     static fn decode(&self, d: &D) -> bool {\n         d.read_bool()\n     }\n }\n \n-pub impl<S:Encoder> Encodable<S> for () {\n+impl<S:Encoder> Encodable<S> for () {\n     fn encode(&self, s: &S) { s.emit_nil() }\n }\n \n-pub impl<D:Decoder> Decodable<D> for () {\n+impl<D:Decoder> Decodable<D> for () {\n     static fn decode(&self, d: &D) -> () {\n         d.read_nil()\n     }\n }\n \n-pub impl<S:Encoder,T:Encodable<S>> Encodable<S> for &T {\n+impl<S:Encoder,T:Encodable<S>> Encodable<S> for &T {\n     fn encode(&self, s: &S) {\n         s.emit_borrowed(|| (**self).encode(s))\n     }\n }\n \n-pub impl<S:Encoder,T:Encodable<S>> Encodable<S> for ~T {\n+impl<S:Encoder,T:Encodable<S>> Encodable<S> for ~T {\n     fn encode(&self, s: &S) {\n         s.emit_owned(|| (**self).encode(s))\n     }\n }\n \n-pub impl<D:Decoder,T:Decodable<D>> Decodable<D> for ~T {\n+impl<D:Decoder,T:Decodable<D>> Decodable<D> for ~T {\n     static fn decode(&self, d: &D) -> ~T {\n         d.read_owned(|| ~Decodable::decode(d))\n     }\n }\n \n-pub impl<S:Encoder,T:Encodable<S>> Encodable<S> for @T {\n+impl<S:Encoder,T:Encodable<S>> Encodable<S> for @T {\n     fn encode(&self, s: &S) {\n         s.emit_managed(|| (**self).encode(s))\n     }\n }\n \n-pub impl<D:Decoder,T:Decodable<D>> Decodable<D> for @T {\n+impl<D:Decoder,T:Decodable<D>> Decodable<D> for @T {\n     static fn decode(&self, d: &D) -> @T {\n         d.read_managed(|| @Decodable::decode(d))\n     }\n }\n \n-pub impl<S:Encoder,T:Encodable<S>> Encodable<S> for &[T] {\n+impl<S:Encoder,T:Encodable<S>> Encodable<S> for &[T] {\n     fn encode(&self, s: &S) {\n         do s.emit_borrowed_vec(self.len()) {\n             for self.eachi |i, e| {\n@@ -326,7 +326,7 @@ pub impl<S:Encoder,T:Encodable<S>> Encodable<S> for &[T] {\n     }\n }\n \n-pub impl<S:Encoder,T:Encodable<S>> Encodable<S> for ~[T] {\n+impl<S:Encoder,T:Encodable<S>> Encodable<S> for ~[T] {\n     fn encode(&self, s: &S) {\n         do s.emit_owned_vec(self.len()) {\n             for self.eachi |i, e| {\n@@ -336,7 +336,7 @@ pub impl<S:Encoder,T:Encodable<S>> Encodable<S> for ~[T] {\n     }\n }\n \n-pub impl<D:Decoder,T:Decodable<D>> Decodable<D> for ~[T] {\n+impl<D:Decoder,T:Decodable<D>> Decodable<D> for ~[T] {\n     static fn decode(&self, d: &D) -> ~[T] {\n         do d.read_owned_vec |len| {\n             do vec::from_fn(len) |i| {\n@@ -346,7 +346,7 @@ pub impl<D:Decoder,T:Decodable<D>> Decodable<D> for ~[T] {\n     }\n }\n \n-pub impl<S:Encoder,T:Encodable<S>> Encodable<S> for @[T] {\n+impl<S:Encoder,T:Encodable<S>> Encodable<S> for @[T] {\n     fn encode(&self, s: &S) {\n         do s.emit_managed_vec(self.len()) {\n             for self.eachi |i, e| {\n@@ -356,7 +356,7 @@ pub impl<S:Encoder,T:Encodable<S>> Encodable<S> for @[T] {\n     }\n }\n \n-pub impl<D:Decoder,T:Decodable<D>> Decodable<D> for @[T] {\n+impl<D:Decoder,T:Decodable<D>> Decodable<D> for @[T] {\n     static fn decode(&self, d: &D) -> @[T] {\n         do d.read_managed_vec |len| {\n             do at_vec::from_fn(len) |i| {\n@@ -366,7 +366,7 @@ pub impl<D:Decoder,T:Decodable<D>> Decodable<D> for @[T] {\n     }\n }\n \n-pub impl<S:Encoder,T:Encodable<S>> Encodable<S> for Option<T> {\n+impl<S:Encoder,T:Encodable<S>> Encodable<S> for Option<T> {\n     fn encode(&self, s: &S) {\n         do s.emit_enum(~\"option\") {\n             match *self {\n@@ -381,7 +381,7 @@ pub impl<S:Encoder,T:Encodable<S>> Encodable<S> for Option<T> {\n     }\n }\n \n-pub impl<D:Decoder,T:Decodable<D>> Decodable<D> for Option<T> {\n+impl<D:Decoder,T:Decodable<D>> Decodable<D> for Option<T> {\n     static fn decode(&self, d: &D) -> Option<T> {\n         do d.read_enum(~\"option\") {\n             do d.read_enum_variant |i| {\n@@ -396,8 +396,7 @@ pub impl<D:Decoder,T:Decodable<D>> Decodable<D> for Option<T> {\n     }\n }\n \n-pub impl<S:Encoder,T0:Encodable<S>,T1:Encodable<S>> Encodable<S>\n-        for (T0, T1) {\n+impl<S:Encoder,T0:Encodable<S>,T1:Encodable<S>> Encodable<S> for (T0, T1) {\n     fn encode(&self, s: &S) {\n         match *self {\n             (ref t0, ref t1) => {\n@@ -410,8 +409,7 @@ pub impl<S:Encoder,T0:Encodable<S>,T1:Encodable<S>> Encodable<S>\n     }\n }\n \n-pub impl<D:Decoder,T0:Decodable<D>,T1:Decodable<D>> Decodable<D>\n-        for (T0, T1) {\n+impl<D:Decoder,T0:Decodable<D>,T1:Decodable<D>> Decodable<D> for (T0, T1) {\n     static fn decode(&self, d: &D) -> (T0, T1) {\n         do d.read_tup(2) {\n             (\n@@ -422,7 +420,7 @@ pub impl<D:Decoder,T0:Decodable<D>,T1:Decodable<D>> Decodable<D>\n     }\n }\n \n-pub impl<\n+impl<\n     S: Encoder,\n     T0: Encodable<S>,\n     T1: Encodable<S>,\n@@ -441,7 +439,7 @@ pub impl<\n     }\n }\n \n-pub impl<\n+impl<\n     D: Decoder,\n     T0: Decodable<D>,\n     T1: Decodable<D>,\n@@ -458,7 +456,7 @@ pub impl<\n     }\n }\n \n-pub impl<\n+impl<\n     S: Encoder,\n     T0: Encodable<S>,\n     T1: Encodable<S>,\n@@ -479,7 +477,7 @@ pub impl<\n     }\n }\n \n-pub impl<\n+impl<\n     D: Decoder,\n     T0: Decodable<D>,\n     T1: Decodable<D>,\n@@ -498,7 +496,7 @@ pub impl<\n     }\n }\n \n-pub impl<\n+impl<\n     S: Encoder,\n     T0: Encodable<S>,\n     T1: Encodable<S>,\n@@ -521,7 +519,7 @@ pub impl<\n     }\n }\n \n-pub impl<\n+impl<\n     D: Decoder,\n     T0: Decodable<D>,\n     T1: Decodable<D>,\n@@ -552,7 +550,7 @@ pub trait EncoderHelpers {\n     fn emit_from_vec<T>(&self, v: &[T], f: fn(v: &T));\n }\n \n-pub impl<S:Encoder> EncoderHelpers for S {\n+impl<S:Encoder> EncoderHelpers for S {\n     fn emit_from_vec<T>(&self, v: &[T], f: fn(v: &T)) {\n         do self.emit_owned_vec(v.len()) {\n             for v.eachi |i, e| {\n@@ -568,7 +566,7 @@ pub trait DecoderHelpers {\n     fn read_to_vec<T>(&self, f: fn() -> T) -> ~[T];\n }\n \n-pub impl<D:Decoder> DecoderHelpers for D {\n+impl<D:Decoder> DecoderHelpers for D {\n     fn read_to_vec<T>(&self, f: fn() -> T) -> ~[T] {\n         do self.read_owned_vec |len| {\n             do vec::from_fn(len) |i| {"}, {"sha": "c85aa78d9834a9df6a3982b7439e4801b6f9d6fa", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -140,7 +140,7 @@ impl WorkKey {\n \n type WorkMap = LinearMap<WorkKey, ~str>;\n \n-pub impl<S:Encoder> Encodable<S> for WorkMap {\n+impl<S:Encoder> Encodable<S> for WorkMap {\n     fn encode(&self, s: &S) {\n         let mut d = ~[];\n         for self.each |&(k, v)| {\n@@ -151,7 +151,7 @@ pub impl<S:Encoder> Encodable<S> for WorkMap {\n     }\n }\n \n-pub impl<D:Decoder> Decodable<D> for WorkMap {\n+impl<D:Decoder> Decodable<D> for WorkMap {\n     static fn decode(&self, d: &D) -> WorkMap {\n         let v : ~[(WorkKey,~str)] = Decodable::decode(d);\n         let mut w = LinearMap::new();"}, {"sha": "744cb92fb1c2cc3365b71239c66ee4082724eb53", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -61,7 +61,7 @@ type Name = uint;\n // with a macro expansion\n type Mrk = uint;\n \n-pub impl<S:Encoder> Encodable<S> for ident {\n+impl<S:Encoder> Encodable<S> for ident {\n     fn encode(&self, s: &S) {\n         let intr = match unsafe {\n             task::local_data::local_data_get(interner_key!())\n@@ -74,7 +74,7 @@ pub impl<S:Encoder> Encodable<S> for ident {\n     }\n }\n \n-pub impl<D:Decoder> Decodable<D> for ident {\n+impl<D:Decoder> Decodable<D> for ident {\n     static fn decode(d: &D) -> ident {\n         let intr = match unsafe {\n             task::local_data::local_data_get(interner_key!())\n@@ -87,7 +87,7 @@ pub impl<D:Decoder> Decodable<D> for ident {\n     }\n }\n \n-pub impl to_bytes::IterBytes for ident {\n+impl to_bytes::IterBytes for ident {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         self.repr.iter_bytes(lsb0, f)\n     }\n@@ -246,7 +246,7 @@ pub enum binding_mode {\n     bind_infer\n }\n \n-pub impl to_bytes::IterBytes for binding_mode {\n+impl to_bytes::IterBytes for binding_mode {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match *self {\n           bind_by_copy => 0u8.iter_bytes(lsb0, f),\n@@ -291,7 +291,7 @@ pub enum pat_ {\n #[deriving_eq]\n pub enum mutability { m_mutbl, m_imm, m_const, }\n \n-pub impl to_bytes::IterBytes for mutability {\n+impl to_bytes::IterBytes for mutability {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -304,13 +304,13 @@ pub enum Abi {\n     RustAbi\n }\n \n-pub impl to_bytes::IterBytes for Abi {\n+impl to_bytes::IterBytes for Abi {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as uint).iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl ToStr for Abi {\n+impl ToStr for Abi {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n             RustAbi => ~\"\\\"rust\\\"\"\n@@ -327,13 +327,13 @@ pub enum Sigil {\n     ManagedSigil\n }\n \n-pub impl to_bytes::IterBytes for Sigil {\n+impl to_bytes::IterBytes for Sigil {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as uint).iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl ToStr for Sigil {\n+impl ToStr for Sigil {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n             BorrowedSigil => ~\"&\",\n@@ -412,7 +412,7 @@ pub enum inferable<T> {\n     infer(node_id)\n }\n \n-pub impl<T:to_bytes::IterBytes> to_bytes::IterBytes for inferable<T> {\n+impl<T:to_bytes::IterBytes> to_bytes::IterBytes for inferable<T> {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match *self {\n           expl(ref t) =>\n@@ -430,7 +430,7 @@ pub impl<T:to_bytes::IterBytes> to_bytes::IterBytes for inferable<T> {\n #[deriving_eq]\n pub enum rmode { by_ref, by_val, by_copy }\n \n-pub impl to_bytes::IterBytes for rmode {\n+impl to_bytes::IterBytes for rmode {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -771,13 +771,13 @@ pub enum trait_method {\n #[deriving_eq]\n pub enum int_ty { ty_i, ty_char, ty_i8, ty_i16, ty_i32, ty_i64, }\n \n-pub impl ToStr for int_ty {\n+impl ToStr for int_ty {\n     pure fn to_str(&self) -> ~str {\n         ::ast_util::int_ty_to_str(*self)\n     }\n }\n \n-pub impl to_bytes::IterBytes for int_ty {\n+impl to_bytes::IterBytes for int_ty {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -788,13 +788,13 @@ pub impl to_bytes::IterBytes for int_ty {\n #[deriving_eq]\n pub enum uint_ty { ty_u, ty_u8, ty_u16, ty_u32, ty_u64, }\n \n-pub impl ToStr for uint_ty {\n+impl ToStr for uint_ty {\n     pure fn to_str(&self) -> ~str {\n         ::ast_util::uint_ty_to_str(*self)\n     }\n }\n \n-pub impl to_bytes::IterBytes for uint_ty {\n+impl to_bytes::IterBytes for uint_ty {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -805,13 +805,13 @@ pub impl to_bytes::IterBytes for uint_ty {\n #[deriving_eq]\n pub enum float_ty { ty_f, ty_f32, ty_f64, }\n \n-pub impl ToStr for float_ty {\n+impl ToStr for float_ty {\n     pure fn to_str(&self) -> ~str {\n         ::ast_util::float_ty_to_str(*self)\n     }\n }\n \n-pub impl to_bytes::IterBytes for float_ty {\n+impl to_bytes::IterBytes for float_ty {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -865,7 +865,7 @@ pub enum Onceness {\n     Many\n }\n \n-pub impl ToStr for Onceness {\n+impl ToStr for Onceness {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n             Once => ~\"once\",\n@@ -874,7 +874,7 @@ pub impl ToStr for Onceness {\n     }\n }\n \n-pub impl to_bytes::IterBytes for Onceness {\n+impl to_bytes::IterBytes for Onceness {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as uint).iter_bytes(lsb0, f);\n     }\n@@ -924,7 +924,7 @@ pub enum ty_ {\n     ty_infer,\n }\n \n-pub impl to_bytes::IterBytes for Ty {\n+impl to_bytes::IterBytes for Ty {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.span.lo, &self.span.hi, lsb0, f);\n     }\n@@ -960,7 +960,7 @@ pub enum purity {\n     extern_fn, // declared with \"extern fn\"\n }\n \n-pub impl ToStr for purity {\n+impl ToStr for purity {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n             impure_fn => ~\"impure\",\n@@ -971,7 +971,7 @@ pub impl ToStr for purity {\n     }\n }\n \n-pub impl to_bytes::IterBytes for purity {\n+impl to_bytes::IterBytes for purity {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -986,7 +986,7 @@ pub enum ret_style {\n     return_val, // everything else\n }\n \n-pub impl to_bytes::IterBytes for ret_style {\n+impl to_bytes::IterBytes for ret_style {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -1268,7 +1268,7 @@ pub enum item_ {\n #[deriving_eq]\n pub enum struct_mutability { struct_mutable, struct_immutable }\n \n-pub impl to_bytes::IterBytes for struct_mutability {\n+impl to_bytes::IterBytes for struct_mutability {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }"}, {"sha": "959454841a2a72d6ad05c916fd87e67c45705075", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -34,7 +34,7 @@ pub enum path_elt {\n     path_name(ident)\n }\n \n-pub impl cmp::Eq for path_elt {\n+impl cmp::Eq for path_elt {\n     pure fn eq(&self, other: &path_elt) -> bool {\n         match (*self) {\n             path_mod(e0a) => {"}, {"sha": "4c5c4da5142732b6161c3827965bc3dd1f82801f", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -198,7 +198,7 @@ pub pure fn is_call_expr(e: @expr) -> bool {\n }\n \n // This makes def_id hashable\n-pub impl to_bytes::IterBytes for def_id {\n+impl to_bytes::IterBytes for def_id {\n     #[inline(always)]\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.crate, &self.node, lsb0, f);\n@@ -303,7 +303,7 @@ pub trait inlined_item_utils {\n     fn accept<E>(&self, e: E, v: visit::vt<E>);\n }\n \n-pub impl inlined_item_utils for inlined_item {\n+impl inlined_item_utils for inlined_item {\n     fn ident(&self) -> ident {\n         match *self {\n             ii_item(i) => /* FIXME (#2543) */ copy i.ident,"}, {"sha": "65711d9894a73b576e04a9071aee883cc99ecb70", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -46,71 +46,71 @@ pub enum CharPos = uint;\n // XXX: Lots of boilerplate in these impls, but so far my attempts to fix\n // have been unsuccessful\n \n-pub impl Pos for BytePos {\n+impl Pos for BytePos {\n     static pure fn from_uint(n: uint) -> BytePos { BytePos(n) }\n     pure fn to_uint(&self) -> uint { **self }\n }\n \n-pub impl cmp::Eq for BytePos {\n+impl cmp::Eq for BytePos {\n     pure fn eq(&self, other: &BytePos) -> bool { **self == **other }\n     pure fn ne(&self, other: &BytePos) -> bool { !(*self).eq(other) }\n }\n \n-pub impl cmp::Ord for BytePos {\n+impl cmp::Ord for BytePos {\n     pure fn lt(&self, other: &BytePos) -> bool { **self < **other }\n     pure fn le(&self, other: &BytePos) -> bool { **self <= **other }\n     pure fn ge(&self, other: &BytePos) -> bool { **self >= **other }\n     pure fn gt(&self, other: &BytePos) -> bool { **self > **other }\n }\n \n-pub impl Add<BytePos, BytePos> for BytePos {\n+impl Add<BytePos, BytePos> for BytePos {\n     pure fn add(&self, rhs: &BytePos) -> BytePos {\n         BytePos(**self + **rhs)\n     }\n }\n \n-pub impl Sub<BytePos, BytePos> for BytePos {\n+impl Sub<BytePos, BytePos> for BytePos {\n     pure fn sub(&self, rhs: &BytePos) -> BytePos {\n         BytePos(**self - **rhs)\n     }\n }\n \n-pub impl to_bytes::IterBytes for BytePos {\n+impl to_bytes::IterBytes for BytePos {\n     pure fn iter_bytes(&self, +lsb0: bool, &&f: to_bytes::Cb) {\n         (**self).iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl Pos for CharPos {\n+impl Pos for CharPos {\n     static pure fn from_uint(n: uint) -> CharPos { CharPos(n) }\n     pure fn to_uint(&self) -> uint { **self }\n }\n \n-pub impl cmp::Eq for CharPos {\n+impl cmp::Eq for CharPos {\n     pure fn eq(&self, other: &CharPos) -> bool { **self == **other }\n     pure fn ne(&self, other: &CharPos) -> bool { !(*self).eq(other) }\n }\n \n-pub impl cmp::Ord for CharPos {\n+impl cmp::Ord for CharPos {\n     pure fn lt(&self, other: &CharPos) -> bool { **self < **other }\n     pure fn le(&self, other: &CharPos) -> bool { **self <= **other }\n     pure fn ge(&self, other: &CharPos) -> bool { **self >= **other }\n     pure fn gt(&self, other: &CharPos) -> bool { **self > **other }\n }\n \n-pub impl to_bytes::IterBytes for CharPos {\n+impl to_bytes::IterBytes for CharPos {\n     pure fn iter_bytes(&self, +lsb0: bool, &&f: to_bytes::Cb) {\n         (**self).iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl Add<CharPos,CharPos> for CharPos {\n+impl Add<CharPos,CharPos> for CharPos {\n     pure fn add(&self, rhs: &CharPos) -> CharPos {\n         CharPos(**self + **rhs)\n     }\n }\n \n-pub impl Sub<CharPos,CharPos> for CharPos {\n+impl Sub<CharPos,CharPos> for CharPos {\n     pure fn sub(&self, rhs: &CharPos) -> CharPos {\n         CharPos(**self - **rhs)\n     }\n@@ -133,19 +133,19 @@ pub struct span {\n #[deriving_eq]\n pub struct spanned<T> { node: T, span: span }\n \n-pub impl cmp::Eq for span {\n+impl cmp::Eq for span {\n     pure fn eq(&self, other: &span) -> bool {\n         return (*self).lo == (*other).lo && (*self).hi == (*other).hi;\n     }\n     pure fn ne(&self, other: &span) -> bool { !(*self).eq(other) }\n }\n \n-pub impl<S:Encoder> Encodable<S> for span {\n+impl<S:Encoder> Encodable<S> for span {\n     /* Note #1972 -- spans are encoded but not decoded */\n     fn encode(&self, _s: &S) { }\n }\n \n-pub impl<D:Decoder> Decodable<D> for span {\n+impl<D:Decoder> Decodable<D> for span {\n     static fn decode(_d: &D) -> span {\n         dummy_sp()\n     }"}, {"sha": "9e60e2151744b6323f5074041eebec308a7e87b6", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -1192,7 +1192,7 @@ mod test {\n         }\n     }\n \n-    pub impl Encoder for TestEncoder {\n+    impl Encoder for TestEncoder {\n         fn emit_nil(&self) { self.add_to_log(CallToEmitNil) }\n \n         fn emit_uint(&self, +v: uint) {self.add_to_log(CallToEmitUint(v)); }"}, {"sha": "6adea6395a356f6dd71a3df8ae31276d4ac2576d", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -54,7 +54,7 @@ pub trait append_types {\n     fn add_tys(+tys: ~[@ast::Ty]) -> @ast::path;\n }\n \n-pub impl append_types for @ast::path {\n+impl append_types for @ast::path {\n     fn add_ty(ty: @ast::Ty) -> @ast::path {\n         @ast::path { types: vec::append_one(self.types, ty),\n                      .. *self}\n@@ -119,7 +119,7 @@ pub trait ext_ctxt_ast_builder {\n     fn strip_bounds(&self, bounds: &[ast::ty_param]) -> ~[ast::ty_param];\n }\n \n-pub impl ext_ctxt_ast_builder for ext_ctxt {\n+impl ext_ctxt_ast_builder for ext_ctxt {\n     fn ty_option(&self, ty: @ast::Ty) -> @ast::Ty {\n         self.ty_path_ast_builder(path_global(~[\n             self.ident_of(~\"core\"),"}, {"sha": "f456f7b81ae15c5295a1359cd1fe53cc1bdeed8c", "filename": "src/libsyntax/ext/pipes/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -37,7 +37,7 @@ use ext::base::ext_ctxt;\n use ext::pipes::proto::{state, protocol, next_state};\n use ext::pipes::proto;\n \n-pub impl proto::visitor<(), (), ()> for ext_ctxt {\n+impl proto::visitor<(), (), ()> for ext_ctxt {\n     fn visit_proto(&self, _proto: protocol,\n                    _states: &[()]) { }\n "}, {"sha": "9a330db9f1825e7ab804052ce4b6f62d9375bede", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -23,7 +23,7 @@ pub trait proto_parser {\n     fn parse_message(&self, state: state);\n }\n \n-pub impl proto_parser for parser::Parser {\n+impl proto_parser for parser::Parser {\n     fn parse_proto(&self, id: ~str) -> protocol {\n         let proto = protocol(id, *self.span);\n "}, {"sha": "84d46e318b1cdc6b202273dfb49a370d20807bdc", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -46,7 +46,7 @@ pub trait gen_init {\n     fn gen_init_bounded(&self, ext_cx: ext_ctxt) -> @ast::expr;\n }\n \n-pub impl gen_send for message {\n+impl gen_send for message {\n     fn gen_send(&mut self, cx: ext_ctxt, try: bool) -> @ast::item {\n         debug!(\"pipec: gen_send\");\n         let name = self.name();\n@@ -196,7 +196,7 @@ pub impl gen_send for message {\n     }\n }\n \n-pub impl to_type_decls for state {\n+impl to_type_decls for state {\n     fn to_type_decls(&self, cx: ext_ctxt) -> ~[@ast::item] {\n         debug!(\"pipec: to_type_decls\");\n         // This compiles into two different type declarations. Say the\n@@ -307,7 +307,7 @@ pub impl to_type_decls for state {\n     }\n }\n \n-pub impl gen_init for protocol {\n+impl gen_init for protocol {\n     fn gen_init(&self, cx: ext_ctxt) -> @ast::item {\n         let ext_cx = cx;\n "}, {"sha": "d22feff947075d6a4e916d6aa8cf6a795fffd70e", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -21,7 +21,7 @@ use core::to_str::ToStr;\n #[deriving_eq]\n pub enum direction { send, recv }\n \n-pub impl ToStr for direction {\n+impl ToStr for direction {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n           send => ~\"Send\","}, {"sha": "2d8b62629ee277a88329070476b6fefd858c11ec", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -694,7 +694,7 @@ pub fn default_ast_fold() -> ast_fold_fns {\n           new_span: noop_span};\n }\n \n-pub impl ast_fold for ast_fold_fns {\n+impl ast_fold for ast_fold_fns {\n     /* naturally, a macro to write these would be nice */\n     fn fold_crate(c: crate) -> crate {\n         let (n, s) = (self.fold_crate)(c.node, c.span, self as ast_fold);"}, {"sha": "dc5bdeba92a889dea4e6782021709a4d91fd20aa", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -127,7 +127,7 @@ impl reader for StringReader {\n     fn dup(@mut self) -> reader { dup_string_reader(self) as reader }\n }\n \n-pub impl reader for TtReader {\n+impl reader for TtReader {\n     fn is_eof(@mut self) -> bool { self.cur_tok == token::EOF }\n     fn next_token(@mut self) -> TokenAndSpan { tt_next_token(self) }\n     fn fatal(@mut self, m: ~str) -> ! {"}, {"sha": "b384e7ebdd0f430a98e77b16772e2ad0301c683d", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -50,9 +50,10 @@ pub enum ObsoleteSyntax {\n     ObsoleteTraitBoundSeparator,\n     ObsoleteMutOwnedPointer,\n     ObsoleteMutVector,\n+    ObsoleteTraitImplVisibility,\n }\n \n-pub impl to_bytes::IterBytes for ObsoleteSyntax {\n+impl to_bytes::IterBytes for ObsoleteSyntax {\n     #[inline(always)]\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as uint).iter_bytes(lsb0, f);\n@@ -140,6 +141,12 @@ pub impl Parser {\n                  in a mutable location, like a mutable local variable or an \\\n                  `@mut` box\"\n             ),\n+            ObsoleteTraitImplVisibility => (\n+                \"visibility-qualified trait implementation\",\n+                \"`pub` or `priv` is meaningless for trait implementations, \\\n+                 because the `impl...for...` form defines overloads for \\\n+                 methods that already exist; remove the `pub` or `priv`\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "59ad35b38e4ff99a8c61773e679d8c9d5b3bc792", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -76,7 +76,7 @@ use parse::obsolete::{ObsoleteStructCtor, ObsoleteWith};\n use parse::obsolete::{ObsoleteSyntax, ObsoleteLowerCaseKindBounds};\n use parse::obsolete::{ObsoleteUnsafeBlock, ObsoleteImplSyntax};\n use parse::obsolete::{ObsoleteTraitBoundSeparator, ObsoleteMutOwnedPointer};\n-use parse::obsolete::{ObsoleteMutVector};\n+use parse::obsolete::{ObsoleteMutVector, ObsoleteTraitImplVisibility};\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -2942,9 +2942,9 @@ pub impl Parser {\n     }\n \n     // Parses two variants (with the region/type params always optional):\n-    //    impl<T> ~[T] : to_str { ... }\n-    //    impl<T> to_str for ~[T] { ... }\n-    fn parse_item_impl() -> item_info {\n+    //    impl<T> Foo { ... }\n+    //    impl<T> ToStr for ~[T] { ... }\n+    fn parse_item_impl(visibility: ast::visibility) -> item_info {\n         fn wrap_path(p: Parser, pt: @path) -> @Ty {\n             @Ty {\n                 id: p.get_id(),\n@@ -2993,6 +2993,12 @@ pub impl Parser {\n             None\n         };\n \n+        // Do not allow visibility to be specified in `impl...for...`. It is\n+        // meaningless.\n+        if opt_trait.is_some() && visibility != ast::inherited {\n+            self.obsolete(*self.span, ObsoleteTraitImplVisibility);\n+        }\n+\n         let mut meths = ~[];\n         if !self.eat(token::SEMI) {\n             self.expect(token::LBRACE);\n@@ -3860,7 +3866,8 @@ pub impl Parser {\n                                           maybe_append(attrs, extra_attrs)));\n         } else if items_allowed && self.eat_keyword(~\"impl\") {\n             // IMPL ITEM\n-            let (ident, item_, extra_attrs) = self.parse_item_impl();\n+            let (ident, item_, extra_attrs) =\n+                self.parse_item_impl(visibility);\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,\n                                           visibility,\n                                           maybe_append(attrs, extra_attrs)));"}, {"sha": "5006c72ad156b17802945014cf1fc139725f1a48", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -17,7 +17,7 @@ pub mod kitty {\n       name : ~str,\n     }\n \n-    pub impl ToStr for cat {\n+    impl ToStr for cat {\n        pure fn to_str(&self) -> ~str { copy self.name }\n     }\n "}, {"sha": "f578ad82d6d80ca62a106c95179b2e57d9f2722b", "filename": "src/test/auxiliary/crate-method-reexport-grrrrrrr2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -19,7 +19,7 @@ pub mod name_pool {\n         fn add(s: ~str);\n     }\n \n-    pub impl add for name_pool {\n+    impl add for name_pool {\n         fn add(s: ~str) {\n         }\n     }\n@@ -34,7 +34,7 @@ pub mod rust {\n         fn cx();\n     }\n \n-    pub impl cx for rt {\n+    impl cx for rt {\n         fn cx() {\n         }\n     }"}, {"sha": "36343d42b7589390871ceb8c4e4d3305f3d0f6d1", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -16,7 +16,7 @@ pub mod socket {\n         sockfd: libc::c_int,\n     }\n \n-    pub impl Drop for socket_handle {\n+    impl Drop for socket_handle {\n         fn finalize(&self) {\n             /* c::close(self.sockfd); */\n         }"}, {"sha": "0690a017449474558689f591b5965337766bbfdb", "filename": "src/test/auxiliary/issue2170lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -15,7 +15,7 @@ pub struct rsrc {\n   x: i32,\n }\n \n-pub impl Drop for rsrc {\n+impl Drop for rsrc {\n     fn finalize(&self) {\n         foo(self.x);\n     }"}, {"sha": "67da2541ca212af8bc9f7553dfa6524032d3d541", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -17,25 +17,25 @@ pub struct MyInt {\n     val: int\n }\n \n-pub impl Add<MyInt, MyInt> for MyInt {\n+impl Add<MyInt, MyInt> for MyInt {\n     pure fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n-pub impl Sub<MyInt, MyInt> for MyInt {\n+impl Sub<MyInt, MyInt> for MyInt {\n     pure fn sub(&self, other: &MyInt) -> MyInt { mi(self.val - other.val) }\n }\n \n-pub impl Mul<MyInt, MyInt> for MyInt {\n+impl Mul<MyInt, MyInt> for MyInt {\n     pure fn mul(&self, other: &MyInt) -> MyInt { mi(self.val * other.val) }\n }\n \n-pub impl Eq for MyInt {\n+impl Eq for MyInt {\n     pure fn eq(&self, other: &MyInt) -> bool { self.val == other.val }\n \n     pure fn ne(&self, other: &MyInt) -> bool { !self.eq(other) }\n }\n \n-pub impl MyNum for MyInt;\n+impl MyNum for MyInt;\n \n pure fn mi(v: int) -> MyInt { MyInt { val: v } }\n "}, {"sha": "90ca7c1797c3ac7e1ea217b17ac4b4d6e4c5797e", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -19,7 +19,7 @@ trait Hahaha: Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq //~ ERROR Duplicat\n \n enum Lol = int;\n \n-pub impl Hahaha for Lol { }\n+impl Hahaha for Lol { }\n \n impl Eq for Lol {\n     pure fn eq(&self, other: &Lol) -> bool { **self != **other }"}, {"sha": "e2bf708feabc7fb1e108dc0e2d63c796453cfd35", "filename": "src/test/compile-fail/issue-3969.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -16,7 +16,7 @@ trait BikeMethods {\n     fn woops(&const self) -> ~str;\n }\n \n-pub impl BikeMethods for Bike {\n+impl BikeMethods for Bike {\n     static fn woops(&const self) -> ~str { ~\"foo\" }\n     //~^ ERROR method `woops` is declared as static in its impl, but not in its trait\n }"}, {"sha": "4a7263266b78f42539eafb794ae1fc7d6e7e3c28", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -155,7 +155,7 @@ pub mod pipes {\n         p: Option<*packet<T>>,\n     }\n \n-    pub impl<T:Owned> Drop for send_packet<T> {\n+    impl<T:Owned> Drop for send_packet<T> {\n         fn finalize(&self) {\n             unsafe {\n                 if self.p != None {\n@@ -187,7 +187,7 @@ pub mod pipes {\n         p: Option<*packet<T>>,\n     }\n \n-    pub impl<T:Owned> Drop for recv_packet<T> {\n+    impl<T:Owned> Drop for recv_packet<T> {\n         fn finalize(&self) {\n             unsafe {\n                 if self.p != None {"}, {"sha": "8749c1cb1133bed0aa480ae3278e0eaf9a77cbe9", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -79,7 +79,7 @@ pub struct Buffer {\n \n }\n \n-pub impl Drop for Buffer {\n+impl Drop for Buffer {\n     fn finalize(&self) {}\n }\n "}, {"sha": "d1b2870fef627043646bbb4f1484f60c64bebcf2", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -16,12 +16,12 @@ pub trait plus {\n \n mod a {\n     use plus;\n-    pub impl plus for uint { fn plus() -> int { self as int + 20 } }\n+    impl plus for uint { fn plus() -> int { self as int + 20 } }\n }\n \n mod b {\n     use plus;\n-    pub impl plus for ~str { fn plus() -> int { 200 } }\n+    impl plus for ~str { fn plus() -> int { 200 } }\n }\n \n trait uint_utils {"}, {"sha": "20ab9014c700b156a327e659b317a597acde3c7d", "filename": "src/test/run-pass/static-methods-in-traits2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -2,15 +2,15 @@ pub trait Number: NumConv {\n     static pure fn from<T:Number>(n: T) -> Self;\n }\n \n-pub impl Number for float {\n+impl Number for float {\n     static pure fn from<T:Number>(n: T) -> float { n.to_float() }\n }\n \n pub trait NumConv {\n     pure fn to_float(&self) -> float;\n }\n \n-pub impl NumConv for float {\n+impl NumConv for float {\n     pure fn to_float(&self) -> float { *self }\n }\n "}, {"sha": "f20181d22d344d7b3f92464309ab16ce1c483d5e", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -21,84 +21,84 @@ use std::cmp::FuzzyEq;\n pub trait TypeExt {}\n \n \n-pub impl TypeExt for u8 {}\n-pub impl TypeExt for u16 {}\n-pub impl TypeExt for u32 {}\n-pub impl TypeExt for u64 {}\n-pub impl TypeExt for uint {}\n+impl TypeExt for u8 {}\n+impl TypeExt for u16 {}\n+impl TypeExt for u32 {}\n+impl TypeExt for u64 {}\n+impl TypeExt for uint {}\n \n-pub impl TypeExt for i8 {}\n-pub impl TypeExt for i16 {}\n-pub impl TypeExt for i32 {}\n-pub impl TypeExt for i64 {}\n-pub impl TypeExt for int {}\n+impl TypeExt for i8 {}\n+impl TypeExt for i16 {}\n+impl TypeExt for i32 {}\n+impl TypeExt for i64 {}\n+impl TypeExt for int {}\n \n-pub impl TypeExt for f32 {}\n-pub impl TypeExt for f64 {}\n-pub impl TypeExt for float {}\n+impl TypeExt for f32 {}\n+impl TypeExt for f64 {}\n+impl TypeExt for float {}\n \n \n pub trait NumExt: TypeExt Eq Ord NumCast {}\n \n-pub impl NumExt for u8 {}\n-pub impl NumExt for u16 {}\n-pub impl NumExt for u32 {}\n-pub impl NumExt for u64 {}\n-pub impl NumExt for uint {}\n+impl NumExt for u8 {}\n+impl NumExt for u16 {}\n+impl NumExt for u32 {}\n+impl NumExt for u64 {}\n+impl NumExt for uint {}\n \n-pub impl NumExt for i8 {}\n-pub impl NumExt for i16 {}\n-pub impl NumExt for i32 {}\n-pub impl NumExt for i64 {}\n-pub impl NumExt for int {}\n+impl NumExt for i8 {}\n+impl NumExt for i16 {}\n+impl NumExt for i32 {}\n+impl NumExt for i64 {}\n+impl NumExt for int {}\n \n-pub impl NumExt for f32 {}\n-pub impl NumExt for f64 {}\n-pub impl NumExt for float {}\n+impl NumExt for f32 {}\n+impl NumExt for f64 {}\n+impl NumExt for float {}\n \n \n pub trait UnSignedExt: NumExt {}\n \n-pub impl UnSignedExt for u8 {}\n-pub impl UnSignedExt for u16 {}\n-pub impl UnSignedExt for u32 {}\n-pub impl UnSignedExt for u64 {}\n-pub impl UnSignedExt for uint {}\n+impl UnSignedExt for u8 {}\n+impl UnSignedExt for u16 {}\n+impl UnSignedExt for u32 {}\n+impl UnSignedExt for u64 {}\n+impl UnSignedExt for uint {}\n \n \n pub trait SignedExt: NumExt {}\n \n-pub impl SignedExt for i8 {}\n-pub impl SignedExt for i16 {}\n-pub impl SignedExt for i32 {}\n-pub impl SignedExt for i64 {}\n-pub impl SignedExt for int {}\n+impl SignedExt for i8 {}\n+impl SignedExt for i16 {}\n+impl SignedExt for i32 {}\n+impl SignedExt for i64 {}\n+impl SignedExt for int {}\n \n-pub impl SignedExt for f32 {}\n-pub impl SignedExt for f64 {}\n-pub impl SignedExt for float {}\n+impl SignedExt for f32 {}\n+impl SignedExt for f64 {}\n+impl SignedExt for float {}\n \n \n pub trait IntegerExt: NumExt {}\n \n-pub impl IntegerExt for u8 {}\n-pub impl IntegerExt for u16 {}\n-pub impl IntegerExt for u32 {}\n-pub impl IntegerExt for u64 {}\n-pub impl IntegerExt for uint {}\n+impl IntegerExt for u8 {}\n+impl IntegerExt for u16 {}\n+impl IntegerExt for u32 {}\n+impl IntegerExt for u64 {}\n+impl IntegerExt for uint {}\n \n-pub impl IntegerExt for i8 {}\n-pub impl IntegerExt for i16 {}\n-pub impl IntegerExt for i32 {}\n-pub impl IntegerExt for i64 {}\n-pub impl IntegerExt for int {}\n+impl IntegerExt for i8 {}\n+impl IntegerExt for i16 {}\n+impl IntegerExt for i32 {}\n+impl IntegerExt for i64 {}\n+impl IntegerExt for int {}\n \n \n pub trait FloatExt: NumExt FuzzyEq<Self> {}\n \n-pub impl FloatExt for f32 {}\n-pub impl FloatExt for f64 {}\n-pub impl FloatExt for float {}\n+impl FloatExt for f32 {}\n+impl FloatExt for f64 {}\n+impl FloatExt for float {}\n \n \n fn test_float_ext<T:FloatExt>(n: T) { io::println(fmt!(\"%?\", n < n)) }"}, {"sha": "adb9f01fff8a87ca3e865b98e954a05229bc65fa", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -13,7 +13,7 @@ use num::NumCast::from;\n \n pub trait NumExt: Eq Ord NumCast {}\n \n-pub impl NumExt for f32 {}\n+impl NumExt for f32 {}\n \n fn num_eq_one<T:NumExt>(n: T) { io::println(fmt!(\"%?\", n == from(1))) }\n "}, {"sha": "d10126dddb6ccd60abd291f4989a42547ab112fe", "filename": "src/test/run-pass/trait-inheritance-num5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -13,8 +13,8 @@ use num::NumCast::from;\n \n pub trait NumExt: Eq NumCast {}\n \n-pub impl NumExt for f32 {}\n-pub impl NumExt for int {}\n+impl NumExt for f32 {}\n+impl NumExt for int {}\n \n fn num_eq_one<T:NumExt>() -> T {\n     from(1)"}, {"sha": "9565919a5d8c7f5cc8b945007b9287cb2e26dac8", "filename": "src/test/run-pass/trait-static-method-overwriting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c3f5c0de752166ae34f0fe50e50e65a2403b66/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs?ref=07c3f5c0de752166ae34f0fe50e50e65a2403b66", "patch": "@@ -19,7 +19,7 @@ mod base {\n         dummy: (),\n     }\n \n-    pub impl ::base::HasNew<Foo> for Foo {\n+    impl ::base::HasNew<Foo> for Foo {\n         static pure fn new() -> Foo {\n \t\t\tunsafe { io::println(\"Foo\"); }\n             Foo { dummy: () }\n@@ -30,7 +30,7 @@ mod base {\n         dummy: (),\n     }\n \n-    pub impl ::base::HasNew<Bar> for Bar {\n+    impl ::base::HasNew<Bar> for Bar {\n         static pure fn new() -> Bar {\n \t\t\tunsafe { io::println(\"Bar\"); }\n             Bar { dummy: () }"}]}