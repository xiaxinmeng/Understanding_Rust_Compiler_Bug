{"sha": "409c14197372495b26fa8ee9f4b812492a7fb75a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwOWMxNDE5NzM3MjQ5NWIyNmZhOGVlOWY0YjgxMjQ5MmE3ZmI3NWE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-09-10T11:32:45Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-09-10T17:52:00Z"}, "message": "typeck/pat: inaccessible private fields\n\nThis commit adjusts the missing field diagnostic logic for struct\npatterns in typeck to improve the diagnostic when the missing fields are\ninaccessible.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "259350f748628199ced9624412262f215f31d2ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/259350f748628199ced9624412262f215f31d2ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409c14197372495b26fa8ee9f4b812492a7fb75a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl9aZ8AACgkQJZLnbIc4\nH9lWvRAAmT3JGBLGRTUfwHUCw+cJggiBPtNk5MWMx6r/S4aIKr+cix4l7WZIPXgf\nvlPq7QXZfVJky6J6zG/zU+mJH/GjMJiFCTo6UUo8EkF+l5uoKIksU2af/zjzoBI2\nB14V5rcvt72qmppdF14T/Whkljyjd6RMlCLzy5v54irF1uomEij54GpBM4nq0T3C\nwZfKhgA1DKnB8XnS+DnVb8nWTGhSCxw/64TlnqVSgE1rWiqHb42yv3zMdOaDFKbk\nU8yNMEHPT9CBfGixEOnKTDIk+MpdAwU2LxnP9u9PeM00FFexx5HudQovlMc/ZJFH\nEgNBo0FRX57Np9F+uP2VndeYlJnECknn+NIg2kKwI5XEzTyWY2F+EBrZfoWpGw2V\nWba0Hk9HDX6ndFI0OWND0InFWZM2TXvNMrlVWfqiseEDKBJFscMUTEZLNrzDmDl+\nuJDsUUr7e4gwcQBxh9uWbzqaoDmjHuQDGAf/kMw7qUoWYuSim6520y6Cvv0VJinY\nyxYA3BaCu7NJcIbB7jRH4ygV4tTgMFWRiR1RLgJHifBrsNxoiTDAguNOQViXIaDb\nxN4I1g3e7QdkNv0zDKSVYo82WLsd92VdUFRkbKU9UNWkjLXkt+/hb4Rci9PmAWuS\n0NM6PlfKxsfftb1rmTc1mTt5XF+h1wof9cUw7y+pLt6WiCU7ZEg=\n=aR6Y\n-----END PGP SIGNATURE-----", "payload": "tree 259350f748628199ced9624412262f215f31d2ef\nparent c0894e72320a9b8a80f39fae1908d9e83a8b7277\nauthor David Wood <david@davidtw.co> 1599737565 +0100\ncommitter David Wood <david@davidtw.co> 1599760320 +0100\n\ntypeck/pat: inaccessible private fields\n\nThis commit adjusts the missing field diagnostic logic for struct\npatterns in typeck to improve the diagnostic when the missing fields are\ninaccessible.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409c14197372495b26fa8ee9f4b812492a7fb75a", "html_url": "https://github.com/rust-lang/rust/commit/409c14197372495b26fa8ee9f4b812492a7fb75a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409c14197372495b26fa8ee9f4b812492a7fb75a/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0894e72320a9b8a80f39fae1908d9e83a8b7277", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0894e72320a9b8a80f39fae1908d9e83a8b7277", "html_url": "https://github.com/rust-lang/rust/commit/c0894e72320a9b8a80f39fae1908d9e83a8b7277"}], "stats": {"total": 150, "additions": 141, "deletions": 9}, "files": [{"sha": "1896155e327d83946f0ac306ed01aec31e2ed2fa", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 81, "deletions": 9, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/409c14197372495b26fa8ee9f4b812492a7fb75a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409c14197372495b26fa8ee9f4b812492a7fb75a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=409c14197372495b26fa8ee9f4b812492a7fb75a", "patch": "@@ -1078,8 +1078,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut unmentioned_fields = variant\n             .fields\n             .iter()\n-            .map(|field| field.ident.normalize_to_macros_2_0())\n-            .filter(|ident| !used_fields.contains_key(&ident))\n+            .map(|field| (field, field.ident.normalize_to_macros_2_0()))\n+            .filter(|(_, ident)| !used_fields.contains_key(&ident))\n             .collect::<Vec<_>>();\n \n         let inexistent_fields_err = if !(inexistent_fields.is_empty() || variant.is_recovered()) {\n@@ -1110,7 +1110,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tcx.sess.struct_span_err(pat.span, \"`..` cannot be used in union patterns\").emit();\n             }\n         } else if !etc && !unmentioned_fields.is_empty() {\n-            unmentioned_err = Some(self.error_unmentioned_fields(pat, &unmentioned_fields));\n+            let no_accessible_unmentioned_fields = unmentioned_fields\n+                .iter()\n+                .filter(|(field, _)| {\n+                    field.vis.is_accessible_from(tcx.parent_module(pat.hir_id).to_def_id(), tcx)\n+                })\n+                .next()\n+                .is_none();\n+\n+            if no_accessible_unmentioned_fields {\n+                unmentioned_err = Some(self.error_no_accessible_fields(pat, &fields));\n+            } else {\n+                unmentioned_err = Some(self.error_unmentioned_fields(pat, &unmentioned_fields));\n+            }\n         }\n         match (inexistent_fields_err, unmentioned_err) {\n             (Some(mut i), Some(mut u)) => {\n@@ -1173,7 +1185,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         kind_name: &str,\n         inexistent_fields: &[Ident],\n-        unmentioned_fields: &mut Vec<Ident>,\n+        unmentioned_fields: &mut Vec<(&ty::FieldDef, Ident)>,\n         variant: &ty::VariantDef,\n     ) -> DiagnosticBuilder<'tcx> {\n         let tcx = self.tcx;\n@@ -1215,7 +1227,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ),\n             );\n             if plural == \"\" {\n-                let input = unmentioned_fields.iter().map(|field| &field.name);\n+                let input = unmentioned_fields.iter().map(|(_, field)| &field.name);\n                 let suggested_name = find_best_match_for_name(input, ident.name, None);\n                 if let Some(suggested_name) = suggested_name {\n                     err.span_suggestion(\n@@ -1232,7 +1244,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // `smart_resolve_context_dependent_help`.\n                     if suggested_name.to_ident_string().parse::<usize>().is_err() {\n                         // We don't want to throw `E0027` in case we have thrown `E0026` for them.\n-                        unmentioned_fields.retain(|&x| x.name != suggested_name);\n+                        unmentioned_fields.retain(|&(_, x)| x.name != suggested_name);\n                     }\n                 }\n             }\n@@ -1300,17 +1312,77 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         None\n     }\n \n+    /// Returns a diagnostic reporting a struct pattern which is missing an `..` due to\n+    /// inaccessible fields.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// error: pattern requires `..` due to inaccessible fields\n+    ///   --> src/main.rs:10:9\n+    ///    |\n+    /// LL |     let foo::Foo {} = foo::Foo::default();\n+    ///    |         ^^^^^^^^^^^\n+    ///    |\n+    /// help: add a `..`\n+    ///    |\n+    /// LL |     let foo::Foo { .. } = foo::Foo::default();\n+    ///    |                  ^^^^^^\n+    /// ```\n+    fn error_no_accessible_fields(\n+        &self,\n+        pat: &Pat<'_>,\n+        fields: &'tcx [hir::FieldPat<'tcx>],\n+    ) -> DiagnosticBuilder<'tcx> {\n+        let mut err = self\n+            .tcx\n+            .sess\n+            .struct_span_err(pat.span, \"pattern requires `..` due to inaccessible fields\");\n+\n+        if let Some(field) = fields.last() {\n+            err.span_suggestion_verbose(\n+                field.span.shrink_to_hi(),\n+                \"ignore the inaccessible and unused fields\",\n+                \", ..\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            let qpath_span = if let PatKind::Struct(qpath, ..) = &pat.kind {\n+                qpath.span()\n+            } else {\n+                bug!(\"`error_no_accessible_fields` called on non-struct pattern\");\n+            };\n+\n+            // Shrink the span to exclude the `foo:Foo` in `foo::Foo { }`.\n+            let span = pat.span.with_lo(qpath_span.shrink_to_hi().hi());\n+            err.span_suggestion_verbose(\n+                span,\n+                \"ignore the inaccessible and unused fields\",\n+                \" { .. }\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+        err\n+    }\n+\n+    /// Returns a diagnostic reporting a struct pattern which does not mention some fields.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// error[E0027]: pattern does not mention field `you_cant_use_this_field`\n+    ///   --> src/main.rs:15:9\n+    ///    |\n+    /// LL |     let foo::Foo {} = foo::Foo::new();\n+    ///    |         ^^^^^^^^^^^ missing field `you_cant_use_this_field`\n+    /// ```\n     fn error_unmentioned_fields(\n         &self,\n         pat: &Pat<'_>,\n-        unmentioned_fields: &[Ident],\n+        unmentioned_fields: &[(&ty::FieldDef, Ident)],\n     ) -> DiagnosticBuilder<'tcx> {\n         let field_names = if unmentioned_fields.len() == 1 {\n-            format!(\"field `{}`\", unmentioned_fields[0])\n+            format!(\"field `{}`\", unmentioned_fields[0].1)\n         } else {\n             let fields = unmentioned_fields\n                 .iter()\n-                .map(|name| format!(\"`{}`\", name))\n+                .map(|(_, name)| format!(\"`{}`\", name))\n                 .collect::<Vec<String>>()\n                 .join(\", \");\n             format!(\"fields {}\", fields)"}, {"sha": "8103a7ca47d4eff5aece8d46c859e2501517dd6f", "filename": "src/test/ui/issues/issue-76077-1.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/409c14197372495b26fa8ee9f4b812492a7fb75a/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/409c14197372495b26fa8ee9f4b812492a7fb75a/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.fixed?ref=409c14197372495b26fa8ee9f4b812492a7fb75a", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n+\n+pub mod foo {\n+    #[derive(Default)]\n+    pub struct Foo { invisible: bool, }\n+\n+    #[derive(Default)]\n+    pub struct Bar { pub visible: bool, invisible: bool, }\n+}\n+\n+fn main() {\n+    let foo::Foo { .. } = foo::Foo::default();\n+    //~^ ERROR pattern requires `..` due to inaccessible fields\n+\n+    let foo::Bar { visible, .. } = foo::Bar::default();\n+    //~^ ERROR pattern requires `..` due to inaccessible fields\n+}"}, {"sha": "730332853c124bad17d776e1be9ec79895dbe4ce", "filename": "src/test/ui/issues/issue-76077-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/409c14197372495b26fa8ee9f4b812492a7fb75a/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409c14197372495b26fa8ee9f4b812492a7fb75a/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.rs?ref=409c14197372495b26fa8ee9f4b812492a7fb75a", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n+\n+pub mod foo {\n+    #[derive(Default)]\n+    pub struct Foo { invisible: bool, }\n+\n+    #[derive(Default)]\n+    pub struct Bar { pub visible: bool, invisible: bool, }\n+}\n+\n+fn main() {\n+    let foo::Foo {} = foo::Foo::default();\n+    //~^ ERROR pattern requires `..` due to inaccessible fields\n+\n+    let foo::Bar { visible } = foo::Bar::default();\n+    //~^ ERROR pattern requires `..` due to inaccessible fields\n+}"}, {"sha": "4557595529fa23bf1387753ac683f21f0f15b8d7", "filename": "src/test/ui/issues/issue-76077-1.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/409c14197372495b26fa8ee9f4b812492a7fb75a/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/409c14197372495b26fa8ee9f4b812492a7fb75a/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.stderr?ref=409c14197372495b26fa8ee9f4b812492a7fb75a", "patch": "@@ -0,0 +1,24 @@\n+error: pattern requires `..` due to inaccessible fields\n+  --> $DIR/issue-76077-1.rs:13:9\n+   |\n+LL |     let foo::Foo {} = foo::Foo::default();\n+   |         ^^^^^^^^^^^\n+   |\n+help: ignore the inaccessible and unused fields\n+   |\n+LL |     let foo::Foo { .. } = foo::Foo::default();\n+   |                  ^^^^^^\n+\n+error: pattern requires `..` due to inaccessible fields\n+  --> $DIR/issue-76077-1.rs:16:9\n+   |\n+LL |     let foo::Bar { visible } = foo::Bar::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ignore the inaccessible and unused fields\n+   |\n+LL |     let foo::Bar { visible, .. } = foo::Bar::default();\n+   |                           ^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}