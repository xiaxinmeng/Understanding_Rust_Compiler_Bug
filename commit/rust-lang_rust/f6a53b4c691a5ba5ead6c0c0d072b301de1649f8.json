{"sha": "f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YTUzYjRjNjkxYTViYTVlYWQ2YzBjMGQwNzJiMzAxZGUxNjQ5Zjg=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-10-16T19:14:38Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-10-16T19:14:38Z"}, "message": "Review comments", "tree": {"sha": "dc00170f06152ae631e0783a669d12312518fb99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc00170f06152ae631e0783a669d12312518fb99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "html_url": "https://github.com/rust-lang/rust/commit/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba10270c6b7927672da6e73f58ec80afff4a2d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba10270c6b7927672da6e73f58ec80afff4a2d6", "html_url": "https://github.com/rust-lang/rust/commit/eba10270c6b7927672da6e73f58ec80afff4a2d6"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "f6ef98407887eb42150360f9cc419a72ae22df45", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -126,7 +126,7 @@ impl Elaborator<'tcx> {\n     fn elaborate(&mut self, obligation: &PredicateObligation<'tcx>) {\n         let tcx = self.visited.tcx;\n \n-        let bound_predicate = obligation.predicate.bound_atom(tcx);\n+        let bound_predicate = obligation.predicate.bound_atom();\n         match bound_predicate.skip_binder() {\n             ty::PredicateAtom::Trait(data, _) => {\n                 // Get predicates declared on the trait."}, {"sha": "79fd6a176625b791831b8f6bba1a209bc7f96394", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -1058,11 +1058,11 @@ impl<'tcx> Predicate<'tcx> {\n \n     /// Converts this to a `Binder<PredicateAtom<'tcx>>`. If the value was an\n     /// `Atom`, then it is not allowed to contain escaping bound vars.\n-    pub fn bound_atom(self, _tcx: TyCtxt<'tcx>) -> Binder<PredicateAtom<'tcx>> {\n+    pub fn bound_atom(self) -> Binder<PredicateAtom<'tcx>> {\n         match self.kind() {\n             &PredicateKind::ForAll(binder) => binder,\n             &PredicateKind::Atom(atom) => {\n-                assert!(!atom.has_escaping_bound_vars());\n+                debug_assert!(!atom.has_escaping_bound_vars());\n                 Binder::dummy(atom)\n             }\n         }"}, {"sha": "633b9fe9acd1ff047bf3cb5fedf480b636689d01", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -1006,6 +1006,11 @@ impl<T> Binder<T> {\n     /// current `Binder`. This should not be used if the new value *changes*\n     /// the bound variables. Note: the (old or new) value itself does not\n     /// necessarily need to *name* all the bound variables.\n+    ///\n+    /// This currently doesn't do anything different than `bind`, because we\n+    /// don't actually track bound vars. However, semantically, it is different\n+    /// because bound vars aren't allowed to change here, whereas they are\n+    /// in `bind`. This may be (debug) asserted in the future.\n     pub fn rebind<U>(&self, value: U) -> Binder<U> {\n         Binder(value)\n     }"}, {"sha": "93a0073588ec71663a6e573e379fca5a1c4f1c1d", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -642,7 +642,7 @@ impl AutoTraitFinder<'tcx> {\n             // We check this by calling is_of_param on the relevant types\n             // from the various possible predicates\n \n-            let bound_predicate = predicate.bound_atom(select.infcx().tcx);\n+            let bound_predicate = predicate.bound_atom();\n             match bound_predicate.skip_binder() {\n                 ty::PredicateAtom::Trait(p, _) => {\n                     if self.is_param_no_infer(p.trait_ref.substs)"}, {"sha": "f53465266d2ac9fcb1fc263fe43bd9977b81ec9b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -255,7 +255,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                let bound_predicate = obligation.predicate.bound_atom(self.tcx);\n+                let bound_predicate = obligation.predicate.bound_atom();\n                 match bound_predicate.skip_binder() {\n                     ty::PredicateAtom::Trait(trait_predicate, _) => {\n                         let trait_predicate = bound_predicate.rebind(trait_predicate);\n@@ -1079,7 +1079,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n \n         // FIXME: It should be possible to deal with `ForAll` in a cleaner way.\n-        let bound_error = error.bound_atom(self.tcx);\n+        let bound_error = error.bound_atom();\n         let (cond, error) = match (cond.skip_binders(), bound_error.skip_binder()) {\n             (ty::PredicateAtom::Trait(..), ty::PredicateAtom::Trait(error, _)) => {\n                 (cond, bound_error.rebind(error))\n@@ -1091,7 +1091,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         };\n \n         for obligation in super::elaborate_predicates(self.tcx, std::iter::once(cond)) {\n-            let bound_predicate = obligation.predicate.bound_atom(self.tcx);\n+            let bound_predicate = obligation.predicate.bound_atom();\n             if let ty::PredicateAtom::Trait(implication, _) = bound_predicate.skip_binder() {\n                 let error = error.to_poly_trait_ref();\n                 let implication = bound_predicate.rebind(implication.trait_ref);\n@@ -1172,7 +1172,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             //\n             // this can fail if the problem was higher-ranked, in which\n             // cause I have no idea for a good error message.\n-            let bound_predicate = predicate.bound_atom(self.tcx);\n+            let bound_predicate = predicate.bound_atom();\n             if let ty::PredicateAtom::Projection(data) = bound_predicate.skip_binder() {\n                 let mut selcx = SelectionContext::new(self);\n                 let (data, _) = self.replace_bound_vars_with_fresh_vars(\n@@ -1459,7 +1459,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             return;\n         }\n \n-        let bound_predicate = predicate.bound_atom(self.tcx);\n+        let bound_predicate = predicate.bound_atom();\n         let mut err = match bound_predicate.skip_binder() {\n             ty::PredicateAtom::Trait(data, _) => {\n                 let self_ty = data.trait_ref.self_ty();"}, {"sha": "827b1d35f1c2296ddc69fd31fd26b73ac038aac5", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -623,7 +623,7 @@ fn prune_cache_value_obligations<'a, 'tcx>(\n         .obligations\n         .iter()\n         .filter(|obligation| {\n-            let bound_predicate = obligation.predicate.bound_atom(infcx.tcx);\n+            let bound_predicate = obligation.predicate.bound_atom();\n             match bound_predicate.skip_binder() {\n                 // We found a `T: Foo<X = U>` predicate, let's check\n                 // if `U` references any unresolved type\n@@ -908,7 +908,7 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n     let infcx = selcx.infcx();\n     for predicate in env_predicates {\n         debug!(?predicate);\n-        let bound_predicate = predicate.bound_atom(infcx.tcx);\n+        let bound_predicate = predicate.bound_atom();\n         if let ty::PredicateAtom::Projection(data) = predicate.skip_binders() {\n             let data = bound_predicate.rebind(data);\n             let same_def_id = data.projection_def_id() == obligation.predicate.item_def_id;"}, {"sha": "b838602e76ca352a5900b68049418661abad9a33", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -449,8 +449,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         let result = ensure_sufficient_stack(|| {\n-            let bound_predicate =\n-                obligation.predicate.bound_atom_with_opt_escaping(self.infcx().tcx);\n+            let bound_predicate = obligation.predicate.bound_atom();\n             match bound_predicate.skip_binder() {\n                 ty::PredicateAtom::Trait(t, _) => {\n                     let t = bound_predicate.rebind(t);\n@@ -1176,7 +1175,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .iter()\n             .enumerate()\n             .filter_map(|(idx, bound)| {\n-                let bound_predicate = bound.bound_atom(self.infcx.tcx);\n+                let bound_predicate = bound.bound_atom();\n                 if let ty::PredicateAtom::Trait(pred, _) = bound_predicate.skip_binder() {\n                     let bound = bound_predicate.rebind(pred.trait_ref);\n                     if self.infcx.probe(|_| {\n@@ -1568,7 +1567,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         use self::BuiltinImplConditions::{Ambiguous, None, Where};\n \n-        match self_ty.kind() {\n+        match *self_ty.kind() {\n             ty::Infer(ty::IntVar(_))\n             | ty::Infer(ty::FloatVar(_))\n             | ty::FnDef(..)\n@@ -1597,7 +1596,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             ty::Array(element_ty, _) => {\n                 // (*) binder moved here\n-                Where(obligation.predicate.rebind(vec![*element_ty]))\n+                Where(obligation.predicate.rebind(vec![element_ty]))\n             }\n \n             ty::Tuple(tys) => {"}, {"sha": "07e523af3ebf518b5b0ad9413273725379a54024", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -1095,7 +1095,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     obligation.predicate\n                 );\n \n-                let bound_predicate = obligation.predicate.bound_atom(tcx);\n+                let bound_predicate = obligation.predicate.bound_atom();\n                 match bound_predicate.skip_binder() {\n                     ty::PredicateAtom::Trait(pred, _) => {\n                         let pred = bound_predicate.rebind(pred);"}, {"sha": "8cd83c39f9e31a061205264fc8d1fa0a5dfbe693", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     obligation.predicate\n                 );\n \n-                let bound_predicate = obligation.predicate.bound_atom(self.tcx);\n+                let bound_predicate = obligation.predicate.bound_atom();\n                 if let ty::PredicateAtom::Projection(proj_predicate) =\n                     obligation.predicate.skip_binders()\n                 {"}, {"sha": "c1485e3baf6776e2e04e8a18580a4c8a07df662d", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -583,7 +583,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         while !queue.is_empty() {\n             let obligation = queue.remove(0);\n             debug!(\"coerce_unsized resolve step: {:?}\", obligation);\n-            let bound_predicate = obligation.predicate.bound_atom(self.tcx);\n+            let bound_predicate = obligation.predicate.bound_atom();\n             let trait_pred = match bound_predicate.skip_binder() {\n                 ty::PredicateAtom::Trait(trait_pred, _)\n                     if traits.contains(&trait_pred.def_id()) =>"}, {"sha": "5650b2cdd3c98d8b2286c68319834586f57ce2bb", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -226,14 +226,14 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n         // could be extended easily also to the other `Predicate`.\n         let predicate_matches_closure = |p: Predicate<'tcx>| {\n             let mut relator: SimpleEqRelation<'tcx> = SimpleEqRelation::new(tcx, self_param_env);\n-            let bound_predicate = predicate.bound_atom(tcx);\n-            let bound_p = p.bound_atom(tcx);\n-            match (predicate.skip_binders(), p.skip_binders()) {\n+            let predicate = predicate.bound_atom();\n+            let p = p.bound_atom();\n+            match (predicate.skip_binder(), p.skip_binder()) {\n                 (ty::PredicateAtom::Trait(a, _), ty::PredicateAtom::Trait(b, _)) => {\n-                    relator.relate(bound_predicate.rebind(a), bound_p.rebind(b)).is_ok()\n+                    relator.relate(predicate.rebind(a), p.rebind(b)).is_ok()\n                 }\n                 (ty::PredicateAtom::Projection(a), ty::PredicateAtom::Projection(b)) => {\n-                    relator.relate(bound_predicate.rebind(a), bound_p.rebind(b)).is_ok()\n+                    relator.relate(predicate.rebind(a), p.rebind(b)).is_ok()\n                 }\n                 _ => predicate == p,\n             }"}, {"sha": "d403e25939893f4d4f46a93fbfb8cc3046b0550f", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -796,13 +796,12 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         // FIXME: do we want to commit to this behavior for param bounds?\n         debug!(\"assemble_inherent_candidates_from_param(param_ty={:?})\", param_ty);\n \n-        let tcx = self.tcx;\n         let bounds = self.param_env.caller_bounds().iter().filter_map(|predicate| {\n-            let bound_predicate = predicate.bound_atom(tcx);\n+            let bound_predicate = predicate.bound_atom();\n             match bound_predicate.skip_binder() {\n                 ty::PredicateAtom::Trait(trait_predicate, _) => {\n-                    match trait_predicate.trait_ref.self_ty().kind() {\n-                        ty::Param(ref p) if *p == param_ty => {\n+                    match *trait_predicate.trait_ref.self_ty().kind() {\n+                        ty::Param(p) if p == param_ty => {\n                             Some(bound_predicate.rebind(trait_predicate.trait_ref))\n                         }\n                         _ => None,"}, {"sha": "6d2ffadc20c27ad126d016836001771c5fc61121", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -637,7 +637,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     };\n                     let mut format_pred = |pred: ty::Predicate<'tcx>| {\n-                        let bound_predicate = pred.bound_atom(tcx);\n+                        let bound_predicate = pred.bound_atom();\n                         match bound_predicate.skip_binder() {\n                             ty::PredicateAtom::Projection(pred) => {\n                                 let pred = bound_predicate.rebind(pred);"}, {"sha": "e33d8dac1cdcf4a9bbc81f7a5b4d455b428a56a1", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -850,7 +850,7 @@ fn bounds_from_generic_predicates<'tcx>(\n     let mut projections = vec![];\n     for (predicate, _) in predicates.predicates {\n         debug!(\"predicate {:?}\", predicate);\n-        let bound_predicate = predicate.bound_atom(tcx);\n+        let bound_predicate = predicate.bound_atom();\n         match bound_predicate.skip_binder() {\n             ty::PredicateAtom::Trait(trait_predicate, _) => {\n                 let entry = types.entry(trait_predicate.self_ty()).or_default();"}, {"sha": "f39b53f3c826a60b26fd2682c6ab8ca83c5057c0", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a53b4c691a5ba5ead6c0c0d072b301de1649f8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=f6a53b4c691a5ba5ead6c0c0d072b301de1649f8", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         pred: ty::Predicate<'tcx>,\n     ) -> FxHashSet<GenericParamDef> {\n-        let bound_predicate = pred.bound_atom(tcx);\n+        let bound_predicate = pred.bound_atom();\n         let regions = match bound_predicate.skip_binder() {\n             ty::PredicateAtom::Trait(poly_trait_pred, _) => {\n                 tcx.collect_referenced_late_bound_regions(&bound_predicate.rebind(poly_trait_pred))"}]}