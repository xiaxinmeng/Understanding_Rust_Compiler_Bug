{"sha": "d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "node_id": "C_kwDOAAsO6NoAKGQxNDczMWNiM2NlZDgzMThkN2ZjODNjYmU4MzhmMGU3ZjJmYjNiNDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-02T16:17:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-02T16:17:13Z"}, "message": "Auto merge of #89239 - petrochenkov:modcache, r=cjgillot\n\nresolve: Cache module loading for all foreign modules\n\nIt was previously cached for modules loaded from `fn get_module`, but not for modules loaded from `fn build_reduced_graph_for_external_crate_res`.\nThis also makes all foreign modules use their real parent, span and expansion instead of possibly a parent/span/expansion of their reexport.\nModules are also often compared using referential equality (`ptr::eq`), this change makes such comparisons correct in all cases.\n\nAn ICE happening on attempt to decode expansions for foreign enums and traits is avoided.\n\nAlso local enums and traits are now added to the module map.\n\nFollow up to https://github.com/rust-lang/rust/pull/88872.\nr? `@cjgillot`", "tree": {"sha": "9cc833c2e77c8c933b44eb8ef6baafe9bcb77b16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc833c2e77c8c933b44eb8ef6baafe9bcb77b16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "html_url": "https://github.com/rust-lang/rust/commit/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edebf77e0090195bf80c0d8cda821e1bf9d03053", "url": "https://api.github.com/repos/rust-lang/rust/commits/edebf77e0090195bf80c0d8cda821e1bf9d03053", "html_url": "https://github.com/rust-lang/rust/commit/edebf77e0090195bf80c0d8cda821e1bf9d03053"}, {"sha": "d7d07657cd45a71f753a6a613d34dc8323ec3943", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d07657cd45a71f753a6a613d34dc8323ec3943", "html_url": "https://github.com/rust-lang/rust/commit/d7d07657cd45a71f753a6a613d34dc8323ec3943"}], "stats": {"total": 137, "additions": 93, "deletions": 44}, "files": [{"sha": "8dfa839453dba8324cc698971d03fd6d49ed2790", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "patch": "@@ -127,7 +127,6 @@ impl<'a> Resolver<'a> {\n     /// If `def_id` refers to a module (in resolver's sense, i.e. a module item, crate root, enum,\n     /// or trait), then this function returns that module's resolver representation, otherwise it\n     /// returns `None`.\n-    /// FIXME: `Module`s for local enums and traits are not currently found.\n     crate fn get_module(&mut self, def_id: DefId) -> Option<Module<'a>> {\n         if let module @ Some(..) = self.module_map.get(&def_id) {\n             return module.copied();\n@@ -146,17 +145,21 @@ impl<'a> Resolver<'a> {\n                     } else {\n                         def_key.disambiguated_data.data.get_opt_name().expect(\"module without name\")\n                     };\n+                    let expn_id = if def_kind == DefKind::Mod {\n+                        self.cstore().module_expansion_untracked(def_id, &self.session)\n+                    } else {\n+                        // FIXME: Parent expansions for enums and traits are not kept in metadata.\n+                        ExpnId::root()\n+                    };\n \n-                    let module = self.arenas.new_module(\n+                    Some(self.new_module(\n                         parent,\n                         ModuleKind::Def(def_kind, def_id, name),\n-                        self.cstore().module_expansion_untracked(def_id, &self.session),\n+                        expn_id,\n                         self.cstore().get_span_untracked(def_id, &self.session),\n                         // FIXME: Account for `#[no_implicit_prelude]` attributes.\n                         parent.map_or(false, |module| module.no_implicit_prelude),\n-                    );\n-                    self.module_map.insert(def_id, module);\n-                    Some(module)\n+                    ))\n                 }\n                 _ => None,\n             }\n@@ -217,8 +220,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     crate fn build_reduced_graph_external(&mut self, module: Module<'a>) {\n-        let def_id = module.def_id().expect(\"unpopulated module without a def-id\");\n-        for child in self.cstore().item_children_untracked(def_id, self.session) {\n+        for child in self.cstore().item_children_untracked(module.def_id(), self.session) {\n             let parent_scope = ParentScope::module(module, self);\n             BuildReducedGraphVisitor { r: self, parent_scope }\n                 .build_reduced_graph_for_external_crate_res(child);\n@@ -759,7 +761,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             ItemKind::Mod(..) => {\n-                let module = self.r.arenas.new_module(\n+                let module = self.r.new_module(\n                     Some(parent),\n                     ModuleKind::Def(DefKind::Mod, def_id, ident.name),\n                     expansion.to_expn_id(),\n@@ -768,7 +770,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         || self.r.session.contains_name(&item.attrs, sym::no_implicit_prelude),\n                 );\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n-                self.r.module_map.insert(def_id, module);\n \n                 // Descend into the module.\n                 self.parent_scope.module = module;\n@@ -799,7 +800,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             ItemKind::Enum(_, _) => {\n-                let module = self.r.arenas.new_module(\n+                let module = self.r.new_module(\n                     Some(parent),\n                     ModuleKind::Def(DefKind::Enum, def_id, ident.name),\n                     expansion.to_expn_id(),\n@@ -873,7 +874,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n             ItemKind::Trait(..) => {\n                 // Add all the items within to a new module.\n-                let module = self.r.arenas.new_module(\n+                let module = self.r.new_module(\n                     Some(parent),\n                     ModuleKind::Def(DefKind::Trait, def_id, ident.name),\n                     expansion.to_expn_id(),\n@@ -916,7 +917,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let parent = self.parent_scope.module;\n         let expansion = self.parent_scope.expansion;\n         if self.block_needs_anonymous_module(block) {\n-            let module = self.r.arenas.new_module(\n+            let module = self.r.new_module(\n                 Some(parent),\n                 ModuleKind::Block(block.id),\n                 expansion.to_expn_id(),\n@@ -936,15 +937,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let expansion = self.parent_scope.expansion;\n         // Record primary definitions.\n         match res {\n-            Res::Def(kind @ (DefKind::Mod | DefKind::Enum | DefKind::Trait), def_id) => {\n-                let module = self.r.arenas.new_module(\n-                    Some(parent),\n-                    ModuleKind::Def(kind, def_id, ident.name),\n-                    expansion.to_expn_id(),\n-                    span,\n-                    // FIXME: Account for `#[no_implicit_prelude]` attributes.\n-                    parent.no_implicit_prelude,\n-                );\n+            Res::Def(DefKind::Mod | DefKind::Enum | DefKind::Trait, def_id) => {\n+                let module = self.r.expect_module(def_id);\n                 self.r.define(parent, ident, TypeNS, (module, vis, span, expansion));\n             }\n             Res::Def("}, {"sha": "dea47c25a8e0a2721b672de05daf8b15604eb688", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "patch": "@@ -801,7 +801,7 @@ impl<'a> Resolver<'a> {\n             None => worklist_via_import.pop(),\n             Some(x) => Some(x),\n         } {\n-            let in_module_is_extern = !in_module.def_id().unwrap().is_local();\n+            let in_module_is_extern = !in_module.def_id().is_local();\n             // We have to visit module children in deterministic order to avoid\n             // instabilities in reported imports (#43552).\n             in_module.for_each_child(self, |this, ident, ns, name_binding| {\n@@ -884,7 +884,7 @@ impl<'a> Resolver<'a> {\n \n                     if !is_extern_crate_that_also_appears_in_prelude {\n                         // add the module to the lookup\n-                        if seen_modules.insert(module.def_id().unwrap()) {\n+                        if seen_modules.insert(module.def_id()) {\n                             if via_import { &mut worklist_via_import } else { &mut worklist }\n                                 .push((module, path_segments, child_accessible));\n                         }"}, {"sha": "bb34776f0b02d86c8e35493257103490b74ead0b", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "patch": "@@ -989,7 +989,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 }\n \n                 if let ModuleOrUniformRoot::Module(module) = module {\n-                    if module.def_id() == import.parent_scope.module.def_id() {\n+                    if ptr::eq(module, import.parent_scope.module) {\n                         // Importing a module into itself is not allowed.\n                         return Some(UnresolvedImportError {\n                             span: import.span,\n@@ -1341,7 +1341,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         if module.is_trait() {\n             self.r.session.span_err(import.span, \"items in traits are not importable.\");\n             return;\n-        } else if module.def_id() == import.parent_scope.module.def_id() {\n+        } else if ptr::eq(module, import.parent_scope.module) {\n             return;\n         } else if let ImportKind::Glob { is_prelude: true, .. } = import.kind {\n             self.r.prelude = Some(module);\n@@ -1400,7 +1400,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         });\n \n         if !reexports.is_empty() {\n-            if let Some(def_id) = module.def_id() {\n+            if let Some(def_id) = module.opt_def_id() {\n                 // Call to `expect_local` should be fine because current\n                 // code is only called for local modules.\n                 self.r.export_map.insert(def_id.expect_local(), reexports);"}, {"sha": "7b0dd82f0e6d1fde33cbbec9cdbcd7b81d07a97c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "patch": "@@ -1491,7 +1491,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     // form the path\n                     let mut path_segments = path_segments.clone();\n                     path_segments.push(ast::PathSegment::from_ident(ident));\n-                    let module_def_id = module.def_id().unwrap();\n+                    let module_def_id = module.def_id();\n                     if module_def_id == def_id {\n                         let path =\n                             Path { span: name_binding.span, segments: path_segments, tokens: None };"}, {"sha": "04a1fae8fb73091b22215f2d2883ccc791219971", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "patch": "@@ -413,7 +413,7 @@ impl ModuleOrUniformRoot<'_> {\n     fn same_def(lhs: Self, rhs: Self) -> bool {\n         match (lhs, rhs) {\n             (ModuleOrUniformRoot::Module(lhs), ModuleOrUniformRoot::Module(rhs)) => {\n-                lhs.def_id() == rhs.def_id()\n+                ptr::eq(lhs, rhs)\n             }\n             (\n                 ModuleOrUniformRoot::CrateRootAndExternPrelude,\n@@ -602,7 +602,11 @@ impl<'a> ModuleData<'a> {\n         }\n     }\n \n-    fn def_id(&self) -> Option<DefId> {\n+    fn def_id(&self) -> DefId {\n+        self.opt_def_id().expect(\"`ModuleData::def_id` is called on a block module\")\n+    }\n+\n+    fn opt_def_id(&self) -> Option<DefId> {\n         match self.kind {\n             ModuleKind::Def(_, def_id, _) => Some(def_id),\n             _ => None,\n@@ -1071,12 +1075,17 @@ impl<'a> ResolverArenas<'a> {\n         expn_id: ExpnId,\n         span: Span,\n         no_implicit_prelude: bool,\n+        module_map: &mut FxHashMap<DefId, Module<'a>>,\n     ) -> Module<'a> {\n         let module =\n             self.modules.alloc(ModuleData::new(parent, kind, expn_id, span, no_implicit_prelude));\n-        if module.def_id().map_or(true, |def_id| def_id.is_local()) {\n+        let def_id = module.opt_def_id();\n+        if def_id.map_or(true, |def_id| def_id.is_local()) {\n             self.local_modules.borrow_mut().push(module);\n         }\n+        if let Some(def_id) = def_id {\n+            module_map.insert(def_id, module);\n+        }\n         module\n     }\n     fn local_modules(&'a self) -> std::cell::Ref<'a, Vec<Module<'a>>> {\n@@ -1276,22 +1285,23 @@ impl<'a> Resolver<'a> {\n         arenas: &'a ResolverArenas<'a>,\n     ) -> Resolver<'a> {\n         let root_def_id = CRATE_DEF_ID.to_def_id();\n+        let mut module_map = FxHashMap::default();\n         let graph_root = arenas.new_module(\n             None,\n             ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),\n             ExpnId::root(),\n             krate.span,\n             session.contains_name(&krate.attrs, sym::no_implicit_prelude),\n+            &mut module_map,\n         );\n         let empty_module = arenas.new_module(\n             None,\n             ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),\n             ExpnId::root(),\n             DUMMY_SP,\n             true,\n+            &mut FxHashMap::default(),\n         );\n-        let mut module_map = FxHashMap::default();\n-        module_map.insert(root_def_id, graph_root);\n \n         let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);\n         let root = definitions.get_root_def();\n@@ -1434,6 +1444,18 @@ impl<'a> Resolver<'a> {\n         resolver\n     }\n \n+    fn new_module(\n+        &mut self,\n+        parent: Option<Module<'a>>,\n+        kind: ModuleKind,\n+        expn_id: ExpnId,\n+        span: Span,\n+        no_implicit_prelude: bool,\n+    ) -> Module<'a> {\n+        let module_map = &mut self.module_map;\n+        self.arenas.new_module(parent, kind, expn_id, span, no_implicit_prelude, module_map)\n+    }\n+\n     fn create_stable_hashing_context(&self) -> ExpandHasher<'_, 'a> {\n         ExpandHasher {\n             source_map: CachingSourceMapView::new(self.session.source_map()),\n@@ -1570,7 +1592,7 @@ impl<'a> Resolver<'a> {\n \n         if let Some(module) = current_trait {\n             if self.trait_may_have_item(Some(module), assoc_item) {\n-                let def_id = module.def_id().unwrap();\n+                let def_id = module.def_id();\n                 found_traits.push(TraitCandidate { def_id, import_ids: smallvec![] });\n             }\n         }\n@@ -2171,8 +2193,9 @@ impl<'a> Resolver<'a> {\n                 return self.graph_root;\n             }\n         };\n-        let module = self\n-            .expect_module(module.def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id());\n+        let module = self.expect_module(\n+            module.opt_def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id(),\n+        );\n         debug!(\n             \"resolve_crate_root({:?}): got module {:?} ({:?}) (ident.span = {:?})\",\n             ident,\n@@ -2999,7 +3022,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         let container = match parent.kind {\n-            ModuleKind::Def(kind, _, _) => kind.descr(parent.def_id().unwrap()),\n+            ModuleKind::Def(kind, _, _) => kind.descr(parent.def_id()),\n             ModuleKind::Block(..) => \"block\",\n         };\n "}, {"sha": "29af6b38bf47b2243c2e75d577a39b615d67d20e", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "patch": "@@ -601,7 +601,10 @@ pub fn debug_hygiene_data(verbose: bool) -> String {\n                 let expn_data = expn_data.as_ref().expect(\"no expansion data for an expansion ID\");\n                 debug_expn_data((&id.to_expn_id(), expn_data))\n             });\n-            data.foreign_expn_data.iter().for_each(debug_expn_data);\n+            // Sort the hash map for more reproducible output.\n+            let mut foreign_expn_data: Vec<_> = data.foreign_expn_data.iter().collect();\n+            foreign_expn_data.sort_by_key(|(id, _)| (id.krate, id.local_id));\n+            foreign_expn_data.into_iter().for_each(debug_expn_data);\n             s.push_str(\"\\n\\nSyntaxContexts:\");\n             data.syntax_context_data.iter().enumerate().for_each(|(id, ctxt)| {\n                 s.push_str(&format!("}, {"sha": "cab747c2c059149c8fb657ff8eaca4e7ad8b82a7", "filename": "src/test/ui/macros/auxiliary/macro-def-site-super.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fmacro-def-site-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fmacro-def-site-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fmacro-def-site-super.rs?ref=d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "patch": "@@ -0,0 +1,13 @@\n+#![feature(decl_macro)]\n+\n+mod inner1 {\n+    pub struct Struct {}\n+\n+    pub mod inner2 {\n+        pub macro mac() {\n+            super::Struct\n+        }\n+    }\n+}\n+\n+pub use inner1::inner2 as public;"}, {"sha": "716a8ced5bb7427f69ba0a343086a0a14a10256e", "filename": "src/test/ui/macros/macro-def-site-super.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fmacros%2Fmacro-def-site-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fmacros%2Fmacro-def-site-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-def-site-super.rs?ref=d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "patch": "@@ -0,0 +1,10 @@\n+// `super` in a `macro` refers to the parent module of the macro itself and not its reexport.\n+\n+// check-pass\n+// aux-build:macro-def-site-super.rs\n+\n+extern crate macro_def_site_super;\n+\n+type A = macro_def_site_super::public::mac!();\n+\n+fn main() {}"}, {"sha": "62968ea54e0aa289eb3de58809d2febbfd819ba8", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs?ref=d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "patch": "@@ -4,6 +4,7 @@\n // compile-flags: -Z span-debug -Z macro-backtrace -Z unpretty=expanded,hygiene -Z trim-diagnostic-paths=no\n // check-pass\n // normalize-stdout-test \"\\d+#\" -> \"0#\"\n+// normalize-stdout-test \"expn\\d{3,}\" -> \"expnNNN\"\n //\n // We don't care about symbol ids, so we set them all to 0\n // in the stdout"}, {"sha": "7f7a1009c909a6a751d846e4c5ef5bed08d9c704", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "patch": "@@ -1,5 +1,5 @@\n Def site: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5)\n-Input: TokenStream [Ident { ident: \"$crate\", span: $DIR/meta-macro-hygiene.rs:23:37: 23:43 (#4) }, Punct { ch: ':', spacing: Joint, span: $DIR/meta-macro-hygiene.rs:23:43: 23:45 (#4) }, Punct { ch: ':', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:23:43: 23:45 (#4) }, Ident { ident: \"dummy\", span: $DIR/meta-macro-hygiene.rs:23:45: 23:50 (#4) }, Punct { ch: '!', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:23:50: 23:51 (#4) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/meta-macro-hygiene.rs:23:51: 23:53 (#4) }]\n+Input: TokenStream [Ident { ident: \"$crate\", span: $DIR/meta-macro-hygiene.rs:24:37: 24:43 (#4) }, Punct { ch: ':', spacing: Joint, span: $DIR/meta-macro-hygiene.rs:24:43: 24:45 (#4) }, Punct { ch: ':', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:24:43: 24:45 (#4) }, Ident { ident: \"dummy\", span: $DIR/meta-macro-hygiene.rs:24:45: 24:50 (#4) }, Punct { ch: '!', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:24:50: 24:51 (#4) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/meta-macro-hygiene.rs:24:51: 24:53 (#4) }]\n Respanned: TokenStream [Ident { ident: \"$crate\", span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Punct { ch: ':', spacing: Joint, span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Punct { ch: ':', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Ident { ident: \"dummy\", span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Punct { ch: '!', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }]\n #![feature /* 0#0 */(prelude_import)]\n // aux-build:make-macro.rs\n@@ -8,6 +8,7 @@ Respanned: TokenStream [Ident { ident: \"$crate\", span: $DIR/auxiliary/make-macro\n // compile-flags: -Z span-debug -Z macro-backtrace -Z unpretty=expanded,hygiene -Z trim-diagnostic-paths=no\n // check-pass\n // normalize-stdout-test \"\\d+#\" -> \"0#\"\n+// normalize-stdout-test \"expn\\d{3,}\" -> \"expnNNN\"\n //\n // We don't care about symbol ids, so we set them all to 0\n // in the stdout\n@@ -48,6 +49,7 @@ crate0::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt:\n crate0::{{expn2}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"produce_it\")\n crate0::{{expn3}}: parent: crate0::{{expn2}}, call_site_ctxt: #4, def_site_ctxt: #0, kind: Macro(Bang, \"meta_macro::print_def_site\")\n crate0::{{expn4}}: parent: crate0::{{expn3}}, call_site_ctxt: #5, def_site_ctxt: #0, kind: Macro(Bang, \"$crate::dummy\")\n+crate1::{{expnNNN}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"include\")\n crate2::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n \n SyntaxContexts:"}, {"sha": "fa52a975bca85bd03e8a9184f637a0d32d31be1c", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.rs?ref=d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "patch": "@@ -4,6 +4,7 @@\n // compile-flags: -Z span-debug -Z macro-backtrace -Z unpretty=expanded,hygiene\n // compile-flags: -Z trim-diagnostic-paths=no\n // normalize-stdout-test \"\\d+#\" -> \"0#\"\n+// normalize-stdout-test \"expn\\d{3,}\" -> \"expnNNN\"\n // aux-build:test-macros.rs\n \n #![feature(decl_macro)]"}, {"sha": "078038638137327b44fa10c59ecf8ff5262c31af", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.stdout", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout?ref=d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "patch": "@@ -6,19 +6,19 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         stream: TokenStream [\n             Ident {\n                 ident: \"struct\",\n-                span: $DIR/nonterminal-token-hygiene.rs:30:5: 30:11 (#5),\n+                span: $DIR/nonterminal-token-hygiene.rs:31:5: 31:11 (#5),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: $DIR/nonterminal-token-hygiene.rs:30:12: 30:13 (#5),\n+                span: $DIR/nonterminal-token-hygiene.rs:31:12: 31:13 (#5),\n             },\n             Punct {\n                 ch: ';',\n                 spacing: Alone,\n-                span: $DIR/nonterminal-token-hygiene.rs:30:13: 30:14 (#5),\n+                span: $DIR/nonterminal-token-hygiene.rs:31:13: 31:14 (#5),\n             },\n         ],\n-        span: $DIR/nonterminal-token-hygiene.rs:20:27: 20:32 (#6),\n+        span: $DIR/nonterminal-token-hygiene.rs:21:27: 21:32 (#6),\n     },\n ]\n #![feature /* 0#0 */(prelude_import)]\n@@ -29,6 +29,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n // compile-flags: -Z span-debug -Z macro-backtrace -Z unpretty=expanded,hygiene\n // compile-flags: -Z trim-diagnostic-paths=no\n // normalize-stdout-test \"\\d+#\" -> \"0#\"\n+// normalize-stdout-test \"expn\\d{3,}\" -> \"expnNNN\"\n // aux-build:test-macros.rs\n \n #![feature /* 0#0 */(decl_macro)]\n@@ -72,6 +73,7 @@ crate0::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt:\n crate0::{{expn2}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"outer\")\n crate0::{{expn3}}: parent: crate0::{{expn2}}, call_site_ctxt: #4, def_site_ctxt: #4, kind: Macro(Bang, \"inner\")\n crate0::{{expn4}}: parent: crate0::{{expn3}}, call_site_ctxt: #6, def_site_ctxt: #0, kind: Macro(Bang, \"print_bang\")\n+crate1::{{expnNNN}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"include\")\n crate2::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n \n SyntaxContexts:"}, {"sha": "14523afbdac05f75baf12a9077ecafb4d3f469da", "filename": "src/test/ui/use/use-from-trait-xc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fuse%2Fuse-from-trait-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/src%2Ftest%2Fui%2Fuse%2Fuse-from-trait-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-from-trait-xc.stderr?ref=d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "patch": "@@ -38,7 +38,7 @@ error[E0432]: unresolved import `use_from_trait_xc::Baz::new`\n   --> $DIR/use-from-trait-xc.rs:23:5\n    |\n LL | use use_from_trait_xc::Baz::new as baznew;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `new` in `Baz`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `new` in `sub::Baz`\n \n error[E0603]: struct `Foo` is private\n   --> $DIR/use-from-trait-xc.rs:14:24"}]}