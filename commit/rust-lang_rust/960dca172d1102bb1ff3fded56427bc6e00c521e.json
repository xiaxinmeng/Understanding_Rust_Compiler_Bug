{"sha": "960dca172d1102bb1ff3fded56427bc6e00c521e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MGRjYTE3MmQxMTAyYmIxZmYzZmRlZDU2NDI3YmM2ZTAwYzUyMWU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T13:22:52Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-01T07:56:21Z"}, "message": "Rename `const_eval::Evaluator` to `CompileTimeFunctionEvaluator`", "tree": {"sha": "86d48f5f34bd3e7acedbb02015f498185a32ea62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86d48f5f34bd3e7acedbb02015f498185a32ea62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/960dca172d1102bb1ff3fded56427bc6e00c521e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmANCUACgkQpp+NIls6\n19k5LQ/+KVitbHqTU5YmzjiY4AjxhHqjjPOG07RqaqJHJ87VqjT5fnVEI7pIb9lu\n7gX7WC3L7rzaCy8+997/QnJdNUE7HtJ2T9f6VZmQv6S7mgPjyOc0QxBh8DC5A2oM\nFujk/BH7u5yt6X8pOsJr2sHHKZKzyhUJoYS6vsVoz+mrC7pqTSHQIiMgONw9jxIM\nokxXTgrrZjWhGTW9YXb7V2bRBVLe9KyLBnSAk91GUjEH//PtvutCfmT8Ex1RDPVM\ng/Gz4FwPV4f8nHR7sPzzVYC8t5NLi4XiyhX1zJRo1qhbzSLMk4qbNSU8AbRIgKp2\n+vejzuKg8jMH66j+9dtKB/TzbxkXOB6qY/CRkS/IyLp8RtVOuK+DQUBn4fACbmgU\nwCEEIe64mHyuowlF1ftAOX/ewtqkenNBijaYas9GfC2H8QGbRSHRogqR7A8MeU10\n4RfimAY8Vdz92kPKHL8Ha8ftl0UTupUPz02fnV3DW/rZJyG95//coYy1b0JU2U3T\n8y0ajr70VOsevNgyewgWa/VidS5C4io8vx/xlVOsu64OFs6VKVXEAwYBtCX1lYNv\nVe1QbwjcF34yXYrFGdF93fuNXUbBVRbVcVFoDauwngE08nJK8dqpCuF8QG7VETRk\n1SCWGnFvAOWN2+BKH6Ra8cAekaRpWPTlneFQsATMtU53v5kVJg8=\n=ypGQ\n-----END PGP SIGNATURE-----", "payload": "tree 86d48f5f34bd3e7acedbb02015f498185a32ea62\nparent 4a4640a331f20f3099687b99e81c438aedebeb81\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500988972 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1501574181 +0200\n\nRename `const_eval::Evaluator` to `CompileTimeFunctionEvaluator`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/960dca172d1102bb1ff3fded56427bc6e00c521e", "html_url": "https://github.com/rust-lang/rust/commit/960dca172d1102bb1ff3fded56427bc6e00c521e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/960dca172d1102bb1ff3fded56427bc6e00c521e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a4640a331f20f3099687b99e81c438aedebeb81", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4640a331f20f3099687b99e81c438aedebeb81", "html_url": "https://github.com/rust-lang/rust/commit/4a4640a331f20f3099687b99e81c438aedebeb81"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "a9974e5367e9d434c6c16bed4f1e48f6cd224c38", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/960dca172d1102bb1ff3fded56427bc6e00c521e/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/960dca172d1102bb1ff3fded56427bc6e00c521e/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=960dca172d1102bb1ff3fded56427bc6e00c521e", "patch": "@@ -21,7 +21,7 @@ pub fn eval_body_as_primval<'a, 'tcx>(\n     instance: Instance<'tcx>,\n ) -> EvalResult<'tcx, (PrimVal, Ty<'tcx>)> {\n     let limits = super::ResourceLimits::default();\n-    let mut ecx = EvalContext::<Evaluator>::new(tcx, limits, (), ());\n+    let mut ecx = EvalContext::<CompileTimeFunctionEvaluator>::new(tcx, limits, (), ());\n     let cid = GlobalId { instance, promoted: None };\n     if ecx.tcx.has_attr(instance.def_id(), \"linkage\") {\n         return Err(ConstEvalError::NotConst(\"extern global\".to_string()).into());\n@@ -82,7 +82,7 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n     })\n }\n \n-struct Evaluator;\n+struct CompileTimeFunctionEvaluator;\n \n impl<'tcx> Into<EvalError<'tcx>> for ConstEvalError {\n     fn into(self) -> EvalError<'tcx> {\n@@ -124,7 +124,7 @@ impl Error for ConstEvalError {\n     }\n }\n \n-impl<'tcx> super::Machine<'tcx> for Evaluator {\n+impl<'tcx> super::Machine<'tcx> for CompileTimeFunctionEvaluator {\n     type Data = ();\n     type MemoryData = ();\n     fn call_missing_fn<'a>("}]}