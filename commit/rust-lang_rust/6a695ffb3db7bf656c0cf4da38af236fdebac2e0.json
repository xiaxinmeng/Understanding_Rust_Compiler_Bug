{"sha": "6a695ffb3db7bf656c0cf4da38af236fdebac2e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNjk1ZmZiM2RiN2JmNjU2YzBjZjRkYTM4YWYyMzZmZGViYWMyZTA=", "commit": {"author": {"name": "Maxwell Anderson", "email": "maxwell.brayden.anderson@gmail.com", "date": "2018-10-23T21:54:27Z"}, "committer": {"name": "Maxwell Anderson", "email": "maxwell.brayden.anderson@gmail.com", "date": "2018-10-23T21:54:27Z"}, "message": "added float support for mistyped literal lints", "tree": {"sha": "c2ce39c67baccd81a7dc480d301fa5df15ece8ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2ce39c67baccd81a7dc480d301fa5df15ece8ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a695ffb3db7bf656c0cf4da38af236fdebac2e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a695ffb3db7bf656c0cf4da38af236fdebac2e0", "html_url": "https://github.com/rust-lang/rust/commit/6a695ffb3db7bf656c0cf4da38af236fdebac2e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a695ffb3db7bf656c0cf4da38af236fdebac2e0/comments", "author": {"login": "Zaechus", "id": 19353212, "node_id": "MDQ6VXNlcjE5MzUzMjEy", "avatar_url": "https://avatars.githubusercontent.com/u/19353212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zaechus", "html_url": "https://github.com/Zaechus", "followers_url": "https://api.github.com/users/Zaechus/followers", "following_url": "https://api.github.com/users/Zaechus/following{/other_user}", "gists_url": "https://api.github.com/users/Zaechus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zaechus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zaechus/subscriptions", "organizations_url": "https://api.github.com/users/Zaechus/orgs", "repos_url": "https://api.github.com/users/Zaechus/repos", "events_url": "https://api.github.com/users/Zaechus/events{/privacy}", "received_events_url": "https://api.github.com/users/Zaechus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zaechus", "id": 19353212, "node_id": "MDQ6VXNlcjE5MzUzMjEy", "avatar_url": "https://avatars.githubusercontent.com/u/19353212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zaechus", "html_url": "https://github.com/Zaechus", "followers_url": "https://api.github.com/users/Zaechus/followers", "following_url": "https://api.github.com/users/Zaechus/following{/other_user}", "gists_url": "https://api.github.com/users/Zaechus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zaechus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zaechus/subscriptions", "organizations_url": "https://api.github.com/users/Zaechus/orgs", "repos_url": "https://api.github.com/users/Zaechus/repos", "events_url": "https://api.github.com/users/Zaechus/events{/privacy}", "received_events_url": "https://api.github.com/users/Zaechus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83ca8d49841409d88682ade5a9b04a8b2fe6de62", "url": "https://api.github.com/repos/rust-lang/rust/commits/83ca8d49841409d88682ade5a9b04a8b2fe6de62", "html_url": "https://github.com/rust-lang/rust/commit/83ca8d49841409d88682ade5a9b04a8b2fe6de62"}], "stats": {"total": 321, "additions": 185, "deletions": 136}, "files": [{"sha": "357f344919fc39850658d25ed347fdf2c31cfe5c", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 88, "deletions": 76, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/6a695ffb3db7bf656c0cf4da38af236fdebac2e0/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a695ffb3db7bf656c0cf4da38af236fdebac2e0/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=6a695ffb3db7bf656c0cf4da38af236fdebac2e0", "patch": "@@ -7,16 +7,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n //! Lints concerned with the grouping of digits with underscores in integral or\n //! floating-point literal expressions.\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n-use if_chain::if_chain;\n use crate::syntax::ast::*;\n use crate::syntax_pos;\n use crate::utils::{snippet_opt, span_lint_and_sugg};\n+use if_chain::if_chain;\n \n /// **What it does:** Warns if a long integral or floating-point constant does\n /// not contain underscores.\n@@ -41,9 +40,9 @@ declare_clippy_lint! {\n /// **Why is this bad?** This is most probably a typo\n ///\n /// **Known problems:**\n-///\t\t- Recommends a signed suffix, even though the number might be too big and an unsigned\n+/// \t\t- Recommends a signed suffix, even though the number might be too big and an unsigned\n ///\t\tsuffix is required\n-///\t\t- Does not match on `_128` since that is a valid grouping for decimal and octal numbers\n+/// \t\t- Does not match on `_128` since that is a valid grouping for decimal and octal numbers\n ///\n /// **Example:**\n ///\n@@ -168,23 +167,21 @@ impl<'a> DigitInfo<'a> {\n         let len = sans_prefix.len();\n         let mut last_d = '\\0';\n         for (d_idx, d) in sans_prefix.char_indices() {\n-            let suffix_start = if last_d == '_' {\n-                d_idx - 1\n-            } else {\n-                d_idx\n-            };\n-            if float && ((is_possible_float_suffix_index(&sans_prefix, suffix_start, len)) ||\n-                (d == 'f' || d == 'e' || d == 'E')) ||\n-                !float && (d == 'i' || d == 'u' ||\n-                is_possible_suffix_index(&sans_prefix, suffix_start, len)) {\n-                    let (digits, suffix) = sans_prefix.split_at(suffix_start);\n-                    return Self {\n-                        digits,\n-                        radix,\n-                        prefix,\n-                        suffix: Some(suffix),\n-                        float,\n-                    };\n+            let suffix_start = if last_d == '_' { d_idx - 1 } else { d_idx };\n+            if float\n+                && (d == 'f'\n+                    || is_possible_float_suffix_index(&sans_prefix, suffix_start, len)\n+                    || ((d == 'E' || d == 'e') && !has_possible_float_suffix(&sans_prefix)))\n+                || !float && (d == 'i' || d == 'u' || is_possible_suffix_index(&sans_prefix, suffix_start, len))\n+            {\n+                let (digits, suffix) = sans_prefix.split_at(suffix_start);\n+                return Self {\n+                    digits,\n+                    radix,\n+                    prefix,\n+                    suffix: Some(suffix),\n+                    float,\n+                };\n             }\n             last_d = d\n         }\n@@ -226,18 +223,44 @@ impl<'a> DigitInfo<'a> {\n                 .map(|chunk| chunk.into_iter().collect())\n                 .collect::<Vec<String>>()\n                 .join(\"_\");\n+            let suffix_hint = match self.suffix {\n+                Some(suffix) if is_mistyped_float_suffix(suffix) => format!(\"_f{}\", &suffix[1..]),\n+                Some(suffix) => suffix.to_string(),\n+                None => String::new(),\n+            };\n+            format!(\"{}.{}{}\", int_part_hint, frac_part_hint, suffix_hint)\n+        } else if self.float && (self.digits.contains(\"E\") || self.digits.contains(\"E\")) {\n+            let which_e = if self.digits.contains(\"E\") { \"E\" } else { \"e\" };\n+            let parts: Vec<&str> = self.digits.split(which_e).collect();\n+            let filtered_digits_vec_0 = parts[0].chars().filter(|&c| c != '_').rev().collect::<Vec<_>>();\n+            let filtered_digits_vec_1 = parts[1].chars().filter(|&c| c != '_').rev().collect::<Vec<_>>();\n+            let before_e_hint = filtered_digits_vec_0\n+                .chunks(group_size)\n+                .map(|chunk| chunk.into_iter().rev().collect())\n+                .rev()\n+                .collect::<Vec<String>>()\n+                .join(\"_\");\n+            let after_e_hint = filtered_digits_vec_1\n+                .chunks(group_size)\n+                .map(|chunk| chunk.into_iter().rev().collect())\n+                .rev()\n+                .collect::<Vec<String>>()\n+                .join(\"_\");\n+            let suffix_hint = match self.suffix {\n+                Some(suffix) if is_mistyped_float_suffix(suffix) => format!(\"_f{}\", &suffix[1..]),\n+                Some(suffix) => suffix.to_string(),\n+                None => String::new(),\n+            };\n             format!(\n-                \"{}.{}{}\",\n-                int_part_hint,\n-                frac_part_hint,\n-                self.suffix.unwrap_or(\"\")\n+                \"{}{}{}{}{}\",\n+                self.prefix.unwrap_or(\"\"),\n+                before_e_hint,\n+                which_e,\n+                after_e_hint,\n+                suffix_hint\n             )\n         } else {\n-            let filtered_digits_vec = self.digits\n-                .chars()\n-                .filter(|&c| c != '_')\n-                .rev()\n-                .collect::<Vec<_>>();\n+            let filtered_digits_vec = self.digits.chars().filter(|&c| c != '_').rev().collect::<Vec<_>>();\n             let mut hint = filtered_digits_vec\n                 .chunks(group_size)\n                 .map(|chunk| chunk.into_iter().rev().collect())\n@@ -250,21 +273,11 @@ impl<'a> DigitInfo<'a> {\n                 hint = format!(\"{:0>4}{}\", &hint[..nb_digits_to_fill], &hint[nb_digits_to_fill..]);\n             }\n             let suffix_hint = match self.suffix {\n-                Some(suffix) if is_mistyped_float_suffix(suffix) && self.digits.contains(\".\") => {\n-                    format!(\"_f{}\", &suffix[1..])\n-                },\n-                Some(suffix) if is_mistyped_suffix(suffix) => {\n-                    format!(\"_i{}\", &suffix[1..])\n-                },\n+                Some(suffix) if is_mistyped_suffix(suffix) => format!(\"_i{}\", &suffix[1..]),\n                 Some(suffix) => suffix.to_string(),\n-                None => String::new()\n+                None => String::new(),\n             };\n-            format!(\n-                \"{}{}{}\",\n-                self.prefix.unwrap_or(\"\"),\n-                hint,\n-                suffix_hint\n-            )\n+            format!(\"{}{}{}\", self.prefix.unwrap_or(\"\"), hint, suffix_hint)\n         }\n     }\n }\n@@ -274,22 +287,20 @@ enum WarningType {\n     InconsistentDigitGrouping,\n     LargeDigitGroups,\n     DecimalRepresentation,\n-    MistypedLiteralSuffix\n+    MistypedLiteralSuffix,\n }\n \n impl WarningType {\n     crate fn display(&self, grouping_hint: &str, cx: &EarlyContext<'_>, span: syntax_pos::Span) {\n         match self {\n-            WarningType::MistypedLiteralSuffix => {\n-                span_lint_and_sugg(\n-                    cx,\n-                    MISTYPED_LITERAL_SUFFIXES,\n-                    span,\n-                    \"mistyped literal suffix\",\n-                    \"did you mean to write\",\n-                    grouping_hint.to_string()\n-                )\n-            },\n+            WarningType::MistypedLiteralSuffix => span_lint_and_sugg(\n+                cx,\n+                MISTYPED_LITERAL_SUFFIXES,\n+                span,\n+                \"mistyped literal suffix\",\n+                \"did you mean to write\",\n+                grouping_hint.to_string(),\n+            ),\n             WarningType::UnreadableLiteral => span_lint_and_sugg(\n                 cx,\n                 UNREADABLE_LITERAL,\n@@ -331,11 +342,7 @@ pub struct LiteralDigitGrouping;\n \n impl LintPass for LiteralDigitGrouping {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            UNREADABLE_LITERAL,\n-            INCONSISTENT_DIGIT_GROUPING,\n-            LARGE_DIGIT_GROUPS\n-        )\n+        lint_array!(UNREADABLE_LITERAL, INCONSISTENT_DIGIT_GROUPING, LARGE_DIGIT_GROUPS)\n     }\n }\n \n@@ -384,7 +391,7 @@ impl LiteralDigitGrouping {\n \n                         // Lint integral and fractional parts separately, and then check consistency of digit\n                         // groups if both pass.\n-                        let _ = Self::do_lint(parts[0], None)\n+                        let _ = Self::do_lint(parts[0], digit_info.suffix)\n                             .map(|integral_group_size| {\n                                 if parts.len() > 1 {\n                                     // Lint the fractional part of literal just like integral part, but reversed.\n@@ -395,11 +402,11 @@ impl LiteralDigitGrouping {\n                                                                                     fractional_group_size,\n                                                                                     parts[0].len(),\n                                                                                     parts[1].len());\n-                                            if !consistent {\n-                                                WarningType::InconsistentDigitGrouping.display(&digit_info.grouping_hint(),\n-                                                cx,\n-                                                lit.span);\n-                                            }\n+                                                if !consistent {\n+                                                    WarningType::InconsistentDigitGrouping.display(&digit_info.grouping_hint(),\n+                                                    cx,\n+                                                    lit.span);\n+                                                }\n                                         })\n                                     .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(),\n                                     cx,\n@@ -498,9 +505,7 @@ impl EarlyLintPass for LiteralRepresentation {\n \n impl LiteralRepresentation {\n     pub fn new(threshold: u64) -> Self {\n-        Self {\n-            threshold,\n-        }\n+        Self { threshold }\n     }\n     fn check_lit(self, cx: &EarlyContext<'_>, lit: &Lit) {\n         // Lint integral literals.\n@@ -533,7 +538,12 @@ impl LiteralRepresentation {\n     fn do_lint(digits: &str) -> Result<(), WarningType> {\n         if digits.len() == 1 {\n             // Lint for 1 digit literals, if someone really sets the threshold that low\n-            if digits == \"1\" || digits == \"2\" || digits == \"4\" || digits == \"8\" || digits == \"3\" || digits == \"7\"\n+            if digits == \"1\"\n+                || digits == \"2\"\n+                || digits == \"4\"\n+                || digits == \"8\"\n+                || digits == \"3\"\n+                || digits == \"7\"\n                 || digits == \"F\"\n             {\n                 return Err(WarningType::DecimalRepresentation);\n@@ -542,7 +552,7 @@ impl LiteralRepresentation {\n             // Lint for Literals with a hex-representation of 2 or 3 digits\n             let f = &digits[0..1]; // first digit\n             let s = &digits[1..]; // suffix\n-            // Powers of 2\n+                                  // Powers of 2\n             if ((f.eq(\"1\") || f.eq(\"2\") || f.eq(\"4\") || f.eq(\"8\")) && s.chars().all(|c| c == '0'))\n                 // Powers of 2 minus 1\n                 || ((f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && s.chars().all(|c| c == 'F'))\n@@ -554,7 +564,7 @@ impl LiteralRepresentation {\n             let f = &digits[0..1]; // first digit\n             let m = &digits[1..digits.len() - 1]; // middle digits, except last\n             let s = &digits[1..]; // suffix\n-            // Powers of 2 with a margin of +15/-16\n+                                  // Powers of 2 with a margin of +15/-16\n             if ((f.eq(\"1\") || f.eq(\"2\") || f.eq(\"4\") || f.eq(\"8\")) && m.chars().all(|c| c == '0'))\n                 || ((f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && m.chars().all(|c| c == 'F'))\n                 // Lint for representations with only 0s and Fs, while allowing 7 as the first\n@@ -574,15 +584,17 @@ fn is_mistyped_suffix(suffix: &str) -> bool {\n }\n \n fn is_possible_suffix_index(lit: &str, idx: usize, len: usize) -> bool {\n-    ((len > 3 && idx == len - 3) || (len > 2 && idx == len - 2)) &&\n-        is_mistyped_suffix(lit.split_at(idx).1)\n+    ((len > 3 && idx == len - 3) || (len > 2 && idx == len - 2)) && is_mistyped_suffix(lit.split_at(idx).1)\n }\n \n fn is_mistyped_float_suffix(suffix: &str) -> bool {\n     [\"_32\", \"_64\"].contains(&suffix)\n }\n \n fn is_possible_float_suffix_index(lit: &str, idx: usize, len: usize) -> bool {\n-    ((len > 3 && idx == len - 3) || (len > 2 && idx == len - 2)) &&\n-        is_mistyped_float_suffix(lit.split_at(idx).1)\n+    (len > 3 && idx == len - 3) && is_mistyped_float_suffix(lit.split_at(idx).1)\n+}\n+\n+fn has_possible_float_suffix(lit: &str) -> bool {\n+    lit.ends_with(\"_32\") || lit.ends_with(\"_64\")\n }"}, {"sha": "c08c4b693b80d17a73cc03aaa3b7a712e27a42ec", "filename": "tests/ui/literals.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6a695ffb3db7bf656c0cf4da38af236fdebac2e0/tests%2Fui%2Fliterals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a695ffb3db7bf656c0cf4da38af236fdebac2e0/tests%2Fui%2Fliterals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.rs?ref=6a695ffb3db7bf656c0cf4da38af236fdebac2e0", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::mixed_case_hex_literals)]\n #![warn(clippy::unseparated_literal_suffix)]\n #![warn(clippy::zero_prefixed_literal)]\n@@ -65,6 +62,10 @@ fn main() {\n     let fail22 = 3__4___23;\n     let fail23 = 3__16___23;\n \n-    //let fail24 = 1E2_32;\n-    let fail25 = 1.2_32;\n+    let fail24 = 12.34_64;\n+    let fail25 = 1E2_32;\n+    let fail26 = 43E7_64;\n+    let fail27 = 243E17_32;\n+    let fail28 = 241251235E723_64;\n+    let fail29 = 42279.911_32;\n }"}, {"sha": "d2a50e2ded52fde67affa29770dae8c083ae4932", "filename": "tests/ui/literals.stderr", "status": "modified", "additions": 91, "deletions": 55, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/6a695ffb3db7bf656c0cf4da38af236fdebac2e0/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a695ffb3db7bf656c0cf4da38af236fdebac2e0/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=6a695ffb3db7bf656c0cf4da38af236fdebac2e0", "patch": "@@ -1,182 +1,218 @@\n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:24:17\n+  --> $DIR/literals.rs:21:17\n    |\n-24 |     let fail1 = 0xabCD;\n+21 |     let fail1 = 0xabCD;\n    |                 ^^^^^^\n    |\n    = note: `-D clippy::mixed-case-hex-literals` implied by `-D warnings`\n \n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:25:17\n+  --> $DIR/literals.rs:22:17\n    |\n-25 |     let fail2 = 0xabCD_u32;\n+22 |     let fail2 = 0xabCD_u32;\n    |                 ^^^^^^^^^^\n \n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:26:17\n+  --> $DIR/literals.rs:23:17\n    |\n-26 |     let fail2 = 0xabCD_isize;\n+23 |     let fail2 = 0xabCD_isize;\n    |                 ^^^^^^^^^^^^\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/literals.rs:27:27\n+  --> $DIR/literals.rs:24:27\n    |\n-27 |     let fail_multi_zero = 000_123usize;\n+24 |     let fail_multi_zero = 000_123usize;\n    |                           ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unseparated-literal-suffix` implied by `-D warnings`\n \n error: this is a decimal constant\n-  --> $DIR/literals.rs:27:27\n+  --> $DIR/literals.rs:24:27\n    |\n-27 |     let fail_multi_zero = 000_123usize;\n+24 |     let fail_multi_zero = 000_123usize;\n    |                           ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::zero-prefixed-literal` implied by `-D warnings`\n help: if you mean to use a decimal constant, remove the `0` to remove confusion\n    |\n-27 |     let fail_multi_zero = 123usize;\n+24 |     let fail_multi_zero = 123usize;\n    |                           ^^^^^^^^\n help: if you mean to use an octal constant, use `0o`\n    |\n-27 |     let fail_multi_zero = 0o123usize;\n+24 |     let fail_multi_zero = 0o123usize;\n    |                           ^^^^^^^^^^\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/literals.rs:32:17\n+  --> $DIR/literals.rs:29:17\n    |\n-32 |     let fail3 = 1234i32;\n+29 |     let fail3 = 1234i32;\n    |                 ^^^^^^^\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/literals.rs:33:17\n+  --> $DIR/literals.rs:30:17\n    |\n-33 |     let fail4 = 1234u32;\n+30 |     let fail4 = 1234u32;\n    |                 ^^^^^^^\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/literals.rs:34:17\n+  --> $DIR/literals.rs:31:17\n    |\n-34 |     let fail5 = 1234isize;\n+31 |     let fail5 = 1234isize;\n    |                 ^^^^^^^^^\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/literals.rs:35:17\n+  --> $DIR/literals.rs:32:17\n    |\n-35 |     let fail6 = 1234usize;\n+32 |     let fail6 = 1234usize;\n    |                 ^^^^^^^^^\n \n error: float type suffix should be separated by an underscore\n-  --> $DIR/literals.rs:36:17\n+  --> $DIR/literals.rs:33:17\n    |\n-36 |     let fail7 = 1.5f32;\n+33 |     let fail7 = 1.5f32;\n    |                 ^^^^^^\n \n error: this is a decimal constant\n-  --> $DIR/literals.rs:40:17\n+  --> $DIR/literals.rs:37:17\n    |\n-40 |     let fail8 = 0123;\n+37 |     let fail8 = 0123;\n    |                 ^^^^\n help: if you mean to use a decimal constant, remove the `0` to remove confusion\n    |\n-40 |     let fail8 = 123;\n+37 |     let fail8 = 123;\n    |                 ^^^\n help: if you mean to use an octal constant, use `0o`\n    |\n-40 |     let fail8 = 0o123;\n+37 |     let fail8 = 0o123;\n    |                 ^^^^^\n \n error: long literal lacking separators\n-  --> $DIR/literals.rs:51:17\n+  --> $DIR/literals.rs:48:17\n    |\n-51 |     let fail9 = 0xabcdef;\n+48 |     let fail9 = 0xabcdef;\n    |                 ^^^^^^^^ help: consider: `0x00ab_cdef`\n    |\n    = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/literals.rs:52:18\n+  --> $DIR/literals.rs:49:18\n    |\n-52 |     let fail10 = 0xBAFEBAFE;\n+49 |     let fail10 = 0xBAFEBAFE;\n    |                  ^^^^^^^^^^ help: consider: `0xBAFE_BAFE`\n \n error: long literal lacking separators\n-  --> $DIR/literals.rs:53:18\n+  --> $DIR/literals.rs:50:18\n    |\n-53 |     let fail11 = 0xabcdeff;\n+50 |     let fail11 = 0xabcdeff;\n    |                  ^^^^^^^^^ help: consider: `0x0abc_deff`\n \n error: long literal lacking separators\n-  --> $DIR/literals.rs:54:18\n+  --> $DIR/literals.rs:51:18\n    |\n-54 |     let fail12 = 0xabcabcabcabcabcabc;\n+51 |     let fail12 = 0xabcabcabcabcabcabc;\n    |                  ^^^^^^^^^^^^^^^^^^^^ help: consider: `0x00ab_cabc_abca_bcab_cabc`\n \n error: digit groups should be smaller\n-  --> $DIR/literals.rs:55:18\n+  --> $DIR/literals.rs:52:18\n    |\n-55 |     let fail13 = 0x1_23456_78901_usize;\n+52 |     let fail13 = 0x1_23456_78901_usize;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider: `0x0123_4567_8901_usize`\n    |\n    = note: `-D clippy::large-digit-groups` implied by `-D warnings`\n \n error: mistyped literal suffix\n-  --> $DIR/literals.rs:57:18\n+  --> $DIR/literals.rs:54:18\n    |\n-57 |     let fail14 = 2_32;\n+54 |     let fail14 = 2_32;\n    |                  ^^^^ help: did you mean to write: `2_i32`\n    |\n    = note: #[deny(clippy::mistyped_literal_suffixes)] on by default\n \n error: mistyped literal suffix\n-  --> $DIR/literals.rs:58:18\n+  --> $DIR/literals.rs:55:18\n    |\n-58 |     let fail15 = 4_64;\n+55 |     let fail15 = 4_64;\n    |                  ^^^^ help: did you mean to write: `4_i64`\n \n error: mistyped literal suffix\n-  --> $DIR/literals.rs:59:18\n+  --> $DIR/literals.rs:56:18\n    |\n-59 |     let fail16 = 7_8;\n+56 |     let fail16 = 7_8;\n    |                  ^^^ help: did you mean to write: `7_i8`\n \n error: mistyped literal suffix\n-  --> $DIR/literals.rs:60:18\n+  --> $DIR/literals.rs:57:18\n    |\n-60 |     let fail17 = 23_16;\n+57 |     let fail17 = 23_16;\n    |                  ^^^^^ help: did you mean to write: `23_i16`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:62:18\n+  --> $DIR/literals.rs:59:18\n    |\n-62 |     let fail19 = 12_3456_21;\n+59 |     let fail19 = 12_3456_21;\n    |                  ^^^^^^^^^^ help: consider: `12_345_621`\n    |\n    = note: `-D clippy::inconsistent-digit-grouping` implied by `-D warnings`\n \n error: mistyped literal suffix\n-  --> $DIR/literals.rs:63:18\n+  --> $DIR/literals.rs:60:18\n    |\n-63 |     let fail20 = 2__8;\n+60 |     let fail20 = 2__8;\n    |                  ^^^^ help: did you mean to write: `2_i8`\n \n error: mistyped literal suffix\n-  --> $DIR/literals.rs:64:18\n+  --> $DIR/literals.rs:61:18\n    |\n-64 |     let fail21 = 4___16;\n+61 |     let fail21 = 4___16;\n    |                  ^^^^^^ help: did you mean to write: `4_i16`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:65:18\n+  --> $DIR/literals.rs:62:18\n    |\n-65 |     let fail22 = 3__4___23;\n+62 |     let fail22 = 3__4___23;\n    |                  ^^^^^^^^^ help: consider: `3_423`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:66:18\n+  --> $DIR/literals.rs:63:18\n    |\n-66 |     let fail23 = 3__16___23;\n+63 |     let fail23 = 3__16___23;\n    |                  ^^^^^^^^^^ help: consider: `31_623`\n \n-error: aborting due to 25 previous errors\n+error: mistyped literal suffix\n+  --> $DIR/literals.rs:65:18\n+   |\n+65 |     let fail24 = 12.34_64;\n+   |                  ^^^^^^^^ help: did you mean to write: `12.34_f64`\n+\n+error: mistyped literal suffix\n+  --> $DIR/literals.rs:66:18\n+   |\n+66 |     let fail25 = 1E2_32;\n+   |                  ^^^^^^ help: did you mean to write: `1E2_f32`\n+\n+error: mistyped literal suffix\n+  --> $DIR/literals.rs:67:18\n+   |\n+67 |     let fail26 = 43E7_64;\n+   |                  ^^^^^^^ help: did you mean to write: `43E7_f64`\n+\n+error: mistyped literal suffix\n+  --> $DIR/literals.rs:68:18\n+   |\n+68 |     let fail27 = 243E17_32;\n+   |                  ^^^^^^^^^ help: did you mean to write: `243E17_f32`\n+\n+error: mistyped literal suffix\n+  --> $DIR/literals.rs:69:18\n+   |\n+69 |     let fail28 = 241251235E723_64;\n+   |                  ^^^^^^^^^^^^^^^^ help: did you mean to write: `241_251_235E723_f64`\n+\n+error: mistyped literal suffix\n+  --> $DIR/literals.rs:70:18\n+   |\n+70 |     let fail29 = 42279.911_32;\n+   |                  ^^^^^^^^^^^^ help: did you mean to write: `42_279.911_f32`\n+\n+error: aborting due to 31 previous errors\n "}]}