{"sha": "fcfb3e92a016283516d6472eda0a2485453fcbdf", "node_id": "C_kwDOAAsO6NoAKGZjZmIzZTkyYTAxNjI4MzUxNmQ2NDcyZWRhMGEyNDg1NDUzZmNiZGY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-15T05:23:47Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-15T05:23:47Z"}, "message": "Remove some more usages of guess_head_span", "tree": {"sha": "516223615262167213d0dcf879e3d949c0662cf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/516223615262167213d0dcf879e3d949c0662cf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcfb3e92a016283516d6472eda0a2485453fcbdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcfb3e92a016283516d6472eda0a2485453fcbdf", "html_url": "https://github.com/rust-lang/rust/commit/fcfb3e92a016283516d6472eda0a2485453fcbdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcfb3e92a016283516d6472eda0a2485453fcbdf/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b890f34745d4ac1d30e1f6b1d29b551d77da6b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b890f34745d4ac1d30e1f6b1d29b551d77da6b6", "html_url": "https://github.com/rust-lang/rust/commit/4b890f34745d4ac1d30e1f6b1d29b551d77da6b6"}], "stats": {"total": 51, "additions": 19, "deletions": 32}, "files": [{"sha": "39fce3cf76935a31315c8d5f55382dd42a700337", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fcfb3e92a016283516d6472eda0a2485453fcbdf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcfb3e92a016283516d6472eda0a2485453fcbdf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=fcfb3e92a016283516d6472eda0a2485453fcbdf", "patch": "@@ -823,10 +823,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                     ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n                         let found_kind = self.closure_kind(closure_substs).unwrap();\n-                        let closure_span =\n-                            self.tcx.sess.source_map().guess_head_span(\n-                                self.tcx.hir().span_if_local(closure_def_id).unwrap(),\n-                            );\n+                        let closure_span = self.tcx.def_span(closure_def_id);\n                         let mut err = struct_span_err!(\n                             self.tcx.sess,\n                             closure_span,\n@@ -951,9 +948,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     _ => None,\n                 };\n \n-                let found_span = found_did\n-                    .and_then(|did| self.tcx.hir().span_if_local(did))\n-                    .map(|sp| self.tcx.sess.source_map().guess_head_span(sp)); // the sp could be a closure\n+                let found_span = found_did.and_then(|did| self.tcx.hir().span_if_local(did));\n \n                 if self.reported_closure_mismatch.borrow().contains(&(span, found_span)) {\n                     // We check closures twice, with obligations flowing in different directions,"}, {"sha": "57d5e5436a691d1f1e12b675c1e09450014776e5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcfb3e92a016283516d6472eda0a2485453fcbdf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcfb3e92a016283516d6472eda0a2485453fcbdf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=fcfb3e92a016283516d6472eda0a2485453fcbdf", "patch": "@@ -1543,7 +1543,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ty::Generator(..) => \"generator\",\n             _ => \"function\",\n         };\n-        let span = self.tcx.sess.source_map().guess_head_span(span);\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n             span,"}, {"sha": "3a31df32298d76a753fce6a811c74fce2572e304", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fcfb3e92a016283516d6472eda0a2485453fcbdf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcfb3e92a016283516d6472eda0a2485453fcbdf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=fcfb3e92a016283516d6472eda0a2485453fcbdf", "patch": "@@ -171,14 +171,7 @@ fn compare_predicate_entailment<'tcx>(\n     let trait_m_predicates = tcx.predicates_of(trait_m.def_id);\n \n     // Check region bounds.\n-    check_region_bounds_on_impl_item(\n-        tcx,\n-        impl_m_span,\n-        impl_m,\n-        trait_m,\n-        &trait_m_generics,\n-        &impl_m_generics,\n-    )?;\n+    check_region_bounds_on_impl_item(tcx, impl_m, trait_m, &trait_m_generics, &impl_m_generics)?;\n \n     // Create obligations for each predicate declared by the impl\n     // definition in the context of the trait's parameter\n@@ -410,7 +403,6 @@ fn compare_predicate_entailment<'tcx>(\n \n fn check_region_bounds_on_impl_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    span: Span,\n     impl_m: &ty::AssocItem,\n     trait_m: &ty::AssocItem,\n     trait_generics: &ty::Generics,\n@@ -436,23 +428,25 @@ fn check_region_bounds_on_impl_item<'tcx>(\n     // are zero. Since I don't quite know how to phrase things at\n     // the moment, give a kind of vague error message.\n     if trait_params != impl_params {\n-        let item_kind = assoc_item_kind_str(impl_m);\n-        let span = impl_m\n-            .def_id\n-            .as_local()\n-            .and_then(|did| tcx.hir().get_generics(did))\n-            .map_or(span, |g| g.span);\n-        let generics_span = tcx.hir().span_if_local(trait_m.def_id).map(|sp| {\n-            trait_m\n-                .def_id\n-                .as_local()\n-                .and_then(|did| tcx.hir().get_generics(did))\n-                .map_or(sp, |g| g.span)\n-        });\n+        let span = tcx\n+            .hir()\n+            .get_generics(impl_m.def_id.expect_local())\n+            .expect(\"expected impl item to have generics or else we can't compare them\")\n+            .span;\n+        let generics_span = if let Some(local_def_id) = trait_m.def_id.as_local() {\n+            Some(\n+                tcx.hir()\n+                    .get_generics(local_def_id)\n+                    .expect(\"expected trait item to have generics or else we can't compare them\")\n+                    .span,\n+            )\n+        } else {\n+            None\n+        };\n \n         let reported = tcx.sess.emit_err(LifetimesOrBoundsMismatchOnTrait {\n             span,\n-            item_kind,\n+            item_kind: assoc_item_kind_str(impl_m),\n             ident: impl_m.ident(tcx),\n             generics_span,\n         });\n@@ -1201,7 +1195,6 @@ fn compare_type_predicate_entailment<'tcx>(\n \n     check_region_bounds_on_impl_item(\n         tcx,\n-        impl_ty_span,\n         impl_ty,\n         trait_ty,\n         &trait_ty_generics,"}]}