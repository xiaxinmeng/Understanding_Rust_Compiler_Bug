{"sha": "2a69d584d6afc842d6dc8503f3fd3a0a691ea385", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNjlkNTg0ZDZhZmM4NDJkNmRjODUwM2YzZmQzYTBhNjkxZWEzODU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-13T07:54:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-13T07:54:50Z"}, "message": "Add a bit of types", "tree": {"sha": "dad0363b01c01985eb76dd31ee14e370be29df3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dad0363b01c01985eb76dd31ee14e370be29df3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a69d584d6afc842d6dc8503f3fd3a0a691ea385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a69d584d6afc842d6dc8503f3fd3a0a691ea385", "html_url": "https://github.com/rust-lang/rust/commit/2a69d584d6afc842d6dc8503f3fd3a0a691ea385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a69d584d6afc842d6dc8503f3fd3a0a691ea385/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "018255efe3e456aa8d712f68a714d5c6e010d03f", "url": "https://api.github.com/repos/rust-lang/rust/commits/018255efe3e456aa8d712f68a714d5c6e010d03f", "html_url": "https://github.com/rust-lang/rust/commit/018255efe3e456aa8d712f68a714d5c6e010d03f"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "8507a60fb9a5c629e759596b3f115fffae1bb336", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a69d584d6afc842d6dc8503f3fd3a0a691ea385/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a69d584d6afc842d6dc8503f3fd3a0a691ea385/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=2a69d584d6afc842d6dc8503f3fd3a0a691ea385", "patch": "@@ -45,12 +45,12 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n     let cond = if_expr.condition()?;\n \n     // Check if there is an IfLet that we can handle.\n-    let if_let_ident = match cond.pat() {\n+    let bound_ident = match cond.pat() {\n         None => None, // No IfLet, supported.\n         Some(TupleStructPat(pat)) if pat.args().count() == 1 => {\n             let path = pat.path()?;\n             match path.qualifier() {\n-                None => Some(path.syntax().to_string()),\n+                None => Some(path.segment()?.name_ref()?),\n                 Some(_) => return None,\n             }\n         }\n@@ -94,19 +94,19 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n \n     ctx.add_assist(AssistId(\"convert_to_guarded_return\"), \"convert to guarded return\", |edit| {\n         let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n-        let new_block = match if_let_ident {\n+        let new_block = match bound_ident {\n             None => {\n                 // If.\n                 let early_expression = &(early_expression.to_owned() + \";\");\n                 let new_expr =\n                     if_indent_level.increase_indent(make::if_expression(&expr, early_expression));\n                 replace(new_expr.syntax(), &then_block, &parent_block, &if_expr)\n             }\n-            Some(if_let_ident) => {\n+            Some(bound_ident) => {\n                 // If-let.\n                 let new_expr = if_indent_level.increase_indent(make::let_match_early(\n                     expr,\n-                    &if_let_ident,\n+                    &bound_ident.syntax().to_string(),\n                     early_expression,\n                 ));\n                 replace(new_expr.syntax(), &then_block, &parent_block, &if_expr)"}]}