{"sha": "709325af672a5513fb70d31b882784f698a195b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOTMyNWFmNjcyYTU1MTNmYjcwZDMxYjg4Mjc4NGY2OThhMTk1Yjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-07T07:15:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-07T07:15:33Z"}, "message": "Rollup merge of #69782 - matthiaskrgr:redundant_field_name_rep, r=cramertj\n\nDon't redundantly repeat field names (clippy::redundant_field_names)", "tree": {"sha": "7388f999dff88403fe5f26f7b9e89ac7bf4b2f04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7388f999dff88403fe5f26f7b9e89ac7bf4b2f04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/709325af672a5513fb70d31b882784f698a195b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeY0oVCRBK7hj4Ov3rIwAAdHIIAHHT99H6CAVNeUTueB5PbWkI\nU84KQh8/GkagnUMSBOo7axf7XUTBhMu3REHl5/SGHVN1TKiHSzD3Wz2gwKiB32BS\nd1ZzQL2c+e23Wv8+cgRKd3rFq+g4SN5CBQepKl0gyCjCaybhgIxO7CusmWnbJQTq\nStGta31Z156jVjv+JrwcqEgTNBbtyhcaW6zNLDLqbtuJJZLGJFmFr+HJ9Rk3qcY7\nj7gWioynPr154Xis8xNqXi5l263InptQF87lc3FUZe8RFXO5R2zs5wdFdxJKucex\nyoorDHTW3AIM7eM3YiTF3yY1UP1xmv6MYWvUHrE/6b/E0CWLpDY8JO6/66XdoN8=\n=NbGO\n-----END PGP SIGNATURE-----\n", "payload": "tree 7388f999dff88403fe5f26f7b9e89ac7bf4b2f04\nparent ca90c3d0a7f1f6564b3f4c799ede45e07cca99f3\nparent 83980aca2086e5c4dca5aae9a92a065a9ff4ac56\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583565333 +0100\ncommitter GitHub <noreply@github.com> 1583565333 +0100\n\nRollup merge of #69782 - matthiaskrgr:redundant_field_name_rep, r=cramertj\n\nDon't redundantly repeat field names (clippy::redundant_field_names)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/709325af672a5513fb70d31b882784f698a195b7", "html_url": "https://github.com/rust-lang/rust/commit/709325af672a5513fb70d31b882784f698a195b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/709325af672a5513fb70d31b882784f698a195b7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca90c3d0a7f1f6564b3f4c799ede45e07cca99f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca90c3d0a7f1f6564b3f4c799ede45e07cca99f3", "html_url": "https://github.com/rust-lang/rust/commit/ca90c3d0a7f1f6564b3f4c799ede45e07cca99f3"}, {"sha": "83980aca2086e5c4dca5aae9a92a065a9ff4ac56", "url": "https://api.github.com/repos/rust-lang/rust/commits/83980aca2086e5c4dca5aae9a92a065a9ff4ac56", "html_url": "https://github.com/rust-lang/rust/commit/83980aca2086e5c4dca5aae9a92a065a9ff4ac56"}], "stats": {"total": 188, "additions": 88, "deletions": 100}, "files": [{"sha": "8efacf108fc2f160f2c28c85c6d4fe75b6712cad", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -959,7 +959,7 @@ impl<T> LinkedList<T> {\n         let it = self.head;\n         let old_len = self.len;\n \n-        DrainFilter { list: self, it: it, pred: filter, idx: 0, old_len: old_len }\n+        DrainFilter { list: self, it, pred: filter, idx: 0, old_len }\n     }\n }\n "}, {"sha": "7523d9c5ba3b133739f1f28932dc4a4bf5d3413b", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -1659,7 +1659,7 @@ struct SetLenOnDrop<'a> {\n impl<'a> SetLenOnDrop<'a> {\n     #[inline]\n     fn new(len: &'a mut usize) -> Self {\n-        SetLenOnDrop { local_len: *len, len: len }\n+        SetLenOnDrop { local_len: *len, len }\n     }\n \n     #[inline]"}, {"sha": "7495468a05b6ccf74febb12fee681d73ab1c1760", "filename": "src/libproc_macro/diagnostic.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fdiagnostic.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -55,13 +55,15 @@ pub struct Diagnostic {\n }\n \n macro_rules! diagnostic_child_methods {\n-    ($spanned:ident, $regular:ident, $level:expr) => (\n+    ($spanned:ident, $regular:ident, $level:expr) => {\n         /// Adds a new child diagnostic message to `self` with the level\n         /// identified by this method's name with the given `spans` and\n         /// `message`.\n         #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n         pub fn $spanned<S, T>(mut self, spans: S, message: T) -> Diagnostic\n-            where S: MultiSpan, T: Into<String>\n+        where\n+            S: MultiSpan,\n+            T: Into<String>,\n         {\n             self.children.push(Diagnostic::spanned(spans, $level, message));\n             self\n@@ -74,7 +76,7 @@ macro_rules! diagnostic_child_methods {\n             self.children.push(Diagnostic::new($level, message));\n             self\n         }\n-    )\n+    };\n }\n \n /// Iterator over the children diagnostics of a `Diagnostic`.\n@@ -96,7 +98,7 @@ impl Diagnostic {\n     /// Creates a new diagnostic with the given `level` and `message`.\n     #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n     pub fn new<T: Into<String>>(level: Level, message: T) -> Diagnostic {\n-        Diagnostic { level: level, message: message.into(), spans: vec![], children: vec![] }\n+        Diagnostic { level, message: message.into(), spans: vec![], children: vec![] }\n     }\n \n     /// Creates a new diagnostic with the given `level` and `message` pointing to\n@@ -107,12 +109,7 @@ impl Diagnostic {\n         S: MultiSpan,\n         T: Into<String>,\n     {\n-        Diagnostic {\n-            level: level,\n-            message: message.into(),\n-            spans: spans.into_spans(),\n-            children: vec![],\n-        }\n+        Diagnostic { level, message: message.into(), spans: spans.into_spans(), children: vec![] }\n     }\n \n     diagnostic_child_methods!(span_error, error, Level::Error);"}, {"sha": "e1b5ec041db060624fced447af1dd25ef26bdcff", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -192,7 +192,7 @@ impl DefPath {\n             }\n         }\n         data.reverse();\n-        DefPath { data: data, krate: krate }\n+        DefPath { data, krate }\n     }\n \n     /// Returns a string representation of the `DefPath` without"}, {"sha": "4f8efc1607eaa0114bdd1b190c9c00677267cacf", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -258,7 +258,7 @@ pub enum Visibility {\n \n impl<'tcx> CodegenUnit<'tcx> {\n     pub fn new(name: Symbol) -> CodegenUnit<'tcx> {\n-        CodegenUnit { name: name, items: Default::default(), size_estimate: None }\n+        CodegenUnit { name, items: Default::default(), size_estimate: None }\n     }\n \n     pub fn name(&self) -> Symbol {"}, {"sha": "a5efea9e5fa4d73c4ea7720132ca2017f4c35966", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -532,9 +532,9 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n                 nested,\n             }) => tcx.lift(&substs).map(|substs| {\n                 traits::VtableGenerator(traits::VtableGeneratorData {\n-                    generator_def_id: generator_def_id,\n-                    substs: substs,\n-                    nested: nested,\n+                    generator_def_id,\n+                    substs,\n+                    nested,\n                 })\n             }),\n             traits::VtableClosure(traits::VtableClosureData { closure_def_id, substs, nested }) => {"}, {"sha": "48ef81c1d5bf7590086cb62713341d916ff66dd5", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -2256,22 +2256,22 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_mut_ref(self, r: Region<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ref(r, TypeAndMut { ty: ty, mutbl: hir::Mutability::Mut })\n+        self.mk_ref(r, TypeAndMut { ty, mutbl: hir::Mutability::Mut })\n     }\n \n     #[inline]\n     pub fn mk_imm_ref(self, r: Region<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ref(r, TypeAndMut { ty: ty, mutbl: hir::Mutability::Not })\n+        self.mk_ref(r, TypeAndMut { ty, mutbl: hir::Mutability::Not })\n     }\n \n     #[inline]\n     pub fn mk_mut_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ptr(TypeAndMut { ty: ty, mutbl: hir::Mutability::Mut })\n+        self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Mut })\n     }\n \n     #[inline]\n     pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ptr(TypeAndMut { ty: ty, mutbl: hir::Mutability::Not })\n+        self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })\n     }\n \n     #[inline]\n@@ -2393,7 +2393,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {\n-        self.mk_ty(Param(ParamTy { index, name: name }))\n+        self.mk_ty(Param(ParamTy { index, name }))\n     }\n \n     #[inline]"}, {"sha": "445df76cd32beac1adbdb14d4f50791ea6fc1500", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -241,7 +241,7 @@ impl<'tcx> Instance<'tcx> {\n             def_id,\n             substs\n         );\n-        Instance { def: InstanceDef::Item(def_id), substs: substs }\n+        Instance { def: InstanceDef::Item(def_id), substs }\n     }\n \n     pub fn mono(tcx: TyCtxt<'tcx>, def_id: DefId) -> Instance<'tcx> {"}, {"sha": "7bcd63b965534187a00acb4b318abf50a104babd", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -370,7 +370,7 @@ pub trait DefIdTree: Copy {\n \n impl<'tcx> DefIdTree for TyCtxt<'tcx> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n-        self.def_key(id).parent.map(|index| DefId { index: index, ..id })\n+        self.def_key(id).parent.map(|index| DefId { index, ..id })\n     }\n }\n \n@@ -2227,7 +2227,7 @@ impl ReprOptions {\n         if !tcx.consider_optimizing(|| format!(\"Reorder fields of {:?}\", tcx.def_path_str(did))) {\n             flags.insert(ReprFlags::IS_LINEAR);\n         }\n-        ReprOptions { int: size, align: max_align, pack: min_pack, flags: flags }\n+        ReprOptions { int: size, align: max_align, pack: min_pack, flags }\n     }\n \n     #[inline]"}, {"sha": "cbaabd8e1f1373a2c4ae788a2ad36703ece93239", "filename": "src/librustc/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -34,10 +34,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if !value.has_projections() {\n             value\n         } else {\n-            value.fold_with(&mut NormalizeAfterErasingRegionsFolder {\n-                tcx: self,\n-                param_env: param_env,\n-            })\n+            value.fold_with(&mut NormalizeAfterErasingRegionsFolder { tcx: self, param_env })\n         }\n     }\n "}, {"sha": "10f27bf66f38396deaaf5bffb30bb8a12b648cc2", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -287,7 +287,7 @@ impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {\n             Err(TypeError::Traits(expected_found(relation, &a.def_id, &b.def_id)))\n         } else {\n             let substs = relate_substs(relation, None, a.substs, b.substs)?;\n-            Ok(ty::TraitRef { def_id: a.def_id, substs: substs })\n+            Ok(ty::TraitRef { def_id: a.def_id, substs })\n         }\n     }\n }\n@@ -303,7 +303,7 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {\n             Err(TypeError::Traits(expected_found(relation, &a.def_id, &b.def_id)))\n         } else {\n             let substs = relate_substs(relation, None, a.substs, b.substs)?;\n-            Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs: substs })\n+            Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })\n         }\n     }\n }"}, {"sha": "47bf7822b1f552be14615d5133ad5105594a0c4b", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -1193,7 +1193,7 @@ pub struct ParamTy {\n \n impl<'tcx> ParamTy {\n     pub fn new(index: u32, name: Symbol) -> ParamTy {\n-        ParamTy { index, name: name }\n+        ParamTy { index, name }\n     }\n \n     pub fn for_self() -> ParamTy {"}, {"sha": "e0c619fcbd3789176fe641258533a99fdf0f7893", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -482,7 +482,7 @@ impl<'a> TraitDef<'a> {\n                         })\n                         .cloned(),\n                 );\n-                push(Annotatable::Item(P(ast::Item { attrs: attrs, ..(*newitem).clone() })))\n+                push(Annotatable::Item(P(ast::Item { attrs, ..(*newitem).clone() })))\n             }\n             _ => {\n                 // Non-Item derive is an error, but it should have been"}, {"sha": "470a2bb8e1ea5842d145324985ee000fb3f49606", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -148,7 +148,7 @@ impl LlvmType for CastTarget {\n             .prefix\n             .iter()\n             .flat_map(|option_kind| {\n-                option_kind.map(|kind| Reg { kind: kind, size: self.prefix_chunk }.llvm_type(cx))\n+                option_kind.map(|kind| Reg { kind, size: self.prefix_chunk }.llvm_type(cx))\n             })\n             .chain((0..rest_count).map(|_| rest_ll_unit))\n             .collect();"}, {"sha": "04f5b03c0e15cb26eae880e99d5ac5b5e7fe10d1", "filename": "src/librustc_infer/infer/at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fat.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -179,7 +179,7 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n         T: ToTrace<'tcx>,\n     {\n         let trace = ToTrace::to_trace(self.cause, a_is_expected, a, b);\n-        Trace { at: self, trace: trace, a_is_expected }\n+        Trace { at: self, trace, a_is_expected }\n     }\n }\n "}, {"sha": "bb0c124a1892dffe39120a82e68a4a44c6b7aaf6", "filename": "src/librustc_infer/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fequate.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -19,7 +19,7 @@ impl<'combine, 'infcx, 'tcx> Equate<'combine, 'infcx, 'tcx> {\n         fields: &'combine mut CombineFields<'infcx, 'tcx>,\n         a_is_expected: bool,\n     ) -> Equate<'combine, 'infcx, 'tcx> {\n-        Equate { fields: fields, a_is_expected: a_is_expected }\n+        Equate { fields, a_is_expected }\n     }\n }\n "}, {"sha": "cab632935fd8eace53218592333286d34dbfb3d5", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -77,11 +77,11 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             if found_anon_region {\n                                 let is_first = index == 0;\n                                 Some(AnonymousParamInfo {\n-                                    param: param,\n+                                    param,\n                                     param_ty: new_param_ty,\n-                                    param_ty_span: param_ty_span,\n-                                    bound_region: bound_region,\n-                                    is_first: is_first,\n+                                    param_ty_span,\n+                                    bound_region,\n+                                    is_first,\n                                 })\n                             } else {\n                                 None"}, {"sha": "8b26bcef5730459786740e0f52f2f9ebefbade33", "filename": "src/librustc_infer/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fglb.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -18,7 +18,7 @@ impl<'combine, 'infcx, 'tcx> Glb<'combine, 'infcx, 'tcx> {\n         fields: &'combine mut CombineFields<'infcx, 'tcx>,\n         a_is_expected: bool,\n     ) -> Glb<'combine, 'infcx, 'tcx> {\n-        Glb { fields: fields, a_is_expected: a_is_expected }\n+        Glb { fields, a_is_expected }\n     }\n }\n "}, {"sha": "20ddeec68503aa9f9a6ab57fd3a03d2f7240bb56", "filename": "src/librustc_infer/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flub.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -18,7 +18,7 @@ impl<'combine, 'infcx, 'tcx> Lub<'combine, 'infcx, 'tcx> {\n         fields: &'combine mut CombineFields<'infcx, 'tcx>,\n         a_is_expected: bool,\n     ) -> Lub<'combine, 'infcx, 'tcx> {\n-        Lub { fields: fields, a_is_expected: a_is_expected }\n+        Lub { fields, a_is_expected }\n     }\n }\n "}, {"sha": "6ebe3f575976041781f949a37602b05c68ce6abd", "filename": "src/librustc_infer/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -85,7 +85,7 @@ impl<'tcx> TaintSet<'tcx> {\n     fn new(directions: TaintDirections, initial_region: ty::Region<'tcx>) -> Self {\n         let mut regions = FxHashSet::default();\n         regions.insert(initial_region);\n-        TaintSet { directions: directions, regions: regions }\n+        TaintSet { directions, regions }\n     }\n \n     fn fixed_point("}, {"sha": "868b95043796b8b563e39727229ecb818e36bf03", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -766,7 +766,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         b: Region<'tcx>,\n         origin: SubregionOrigin<'tcx>,\n     ) -> Region<'tcx> {\n-        let vars = TwoRegions { a: a, b: b };\n+        let vars = TwoRegions { a, b };\n         if let Some(&c) = self.combine_map(t).get(&vars) {\n             return tcx.mk_region(ReVar(c));\n         }"}, {"sha": "562fbc246f7ee9b700e4cd542c483b382093bb1a", "filename": "src/librustc_infer/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fresolve.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -160,7 +160,7 @@ pub fn fully_resolve<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>, value: &T) -> Fix\n where\n     T: TypeFoldable<'tcx>,\n {\n-    let mut full_resolver = FullTypeResolver { infcx: infcx, err: None };\n+    let mut full_resolver = FullTypeResolver { infcx, err: None };\n     let result = value.fold_with(&mut full_resolver);\n     match full_resolver.err {\n         None => Ok(result),"}, {"sha": "f6fc38b5358871d50a3c0e620e1c2daf683cc013", "filename": "src/librustc_infer/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fsub.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -19,7 +19,7 @@ impl<'combine, 'infcx, 'tcx> Sub<'combine, 'infcx, 'tcx> {\n         f: &'combine mut CombineFields<'infcx, 'tcx>,\n         a_is_expected: bool,\n     ) -> Sub<'combine, 'infcx, 'tcx> {\n-        Sub { fields: f, a_is_expected: a_is_expected }\n+        Sub { fields: f, a_is_expected }\n     }\n \n     fn with_expected_switched<R, F: FnOnce(&mut Self) -> R>(&mut self, f: F) -> R {"}, {"sha": "800f8e91a78016ef1ae4a15ab1a0be7602483eb0", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -619,7 +619,7 @@ impl<'tcx> FulfillmentError<'tcx> {\n         obligation: PredicateObligation<'tcx>,\n         code: FulfillmentErrorCode<'tcx>,\n     ) -> FulfillmentError<'tcx> {\n-        FulfillmentError { obligation: obligation, code: code, points_at_arg_span: false }\n+        FulfillmentError { obligation, code, points_at_arg_span: false }\n     }\n }\n "}, {"sha": "78483cf6577dec47eda044cb6f87ca8d19098a5e", "filename": "src/librustc_infer/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fproject.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -403,7 +403,7 @@ pub type NormalizedTy<'tcx> = Normalized<'tcx, Ty<'tcx>>;\n \n impl<'tcx, T> Normalized<'tcx, T> {\n     pub fn with<U>(self, value: U) -> Normalized<'tcx, U> {\n-        Normalized { value: value, obligations: self.obligations }\n+        Normalized { value, obligations: self.obligations }\n     }\n }\n \n@@ -1291,7 +1291,7 @@ fn confirm_generator_candidate<'cx, 'tcx>(\n                 substs: trait_ref.substs,\n                 item_def_id: obligation.predicate.item_def_id,\n             },\n-            ty: ty,\n+            ty,\n         }\n     });\n "}, {"sha": "c0d8f3cfd4f86611747e7934a3a94f50fb9c7528", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -2923,7 +2923,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::Predicate::ClosureKind(closure_def_id, substs, kind),\n         ));\n \n-        Ok(VtableClosureData { closure_def_id, substs: substs, nested: obligations })\n+        Ok(VtableClosureData { closure_def_id, substs, nested: obligations })\n     }\n \n     /// In the case of closure types and fn pointers,"}, {"sha": "cd4595e76ccec05290006ac934da5f3887e197ef", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -55,7 +55,7 @@ struct PredicateSet<'tcx> {\n \n impl PredicateSet<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> Self {\n-        Self { tcx: tcx, set: Default::default() }\n+        Self { tcx, set: Default::default() }\n     }\n \n     fn insert(&mut self, pred: &ty::Predicate<'tcx>) -> bool {"}, {"sha": "e0db2ae64ff211a048f20874bee92125ebbce251", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -377,10 +377,10 @@ impl<'s> LintLevelsBuilder<'s> {\n         let prev = self.cur;\n         if !specs.is_empty() {\n             self.cur = self.sets.list.len() as u32;\n-            self.sets.list.push(LintSet::Node { specs: specs, parent: prev });\n+            self.sets.list.push(LintSet::Node { specs, parent: prev });\n         }\n \n-        BuilderPush { prev: prev, changed: prev != self.cur }\n+        BuilderPush { prev, changed: prev != self.cur }\n     }\n \n     /// Called after `push` when the scope of a set of attributes are exited."}, {"sha": "7624b1d562f08e43b4527330eee45241f22586d5", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -493,7 +493,7 @@ impl<'tcx> EncodeContext<'tcx> {\n             edition: tcx.sess.edition(),\n             has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),\n             has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),\n-            has_default_lib_allocator: has_default_lib_allocator,\n+            has_default_lib_allocator,\n             plugin_registrar_fn: tcx.plugin_registrar_fn(LOCAL_CRATE).map(|id| id.index),\n             proc_macro_decls_static: if is_proc_macro {\n                 let id = tcx.proc_macro_decls_static(LOCAL_CRATE).unwrap();"}, {"sha": "fefef69d63cbde5c7cddb020c12bbd2255573dbd", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -175,7 +175,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 if self.body.local_decls[local].is_ref_for_guard() =>\n             {\n                 self.append_place_to_string(\n-                    PlaceRef { local: local, projection: &[] },\n+                    PlaceRef { local, projection: &[] },\n                     buf,\n                     autoderef,\n                     &including_downcast,"}, {"sha": "675463cb1c1f98ab85916b4ea8f27554289c20be", "filename": "src/librustc_mir/borrow_check/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fvalues.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -140,7 +140,7 @@ impl<N: Idx> LivenessValues<N> {\n     /// Each of the regions in num_region_variables will be initialized with an\n     /// empty set of points and no causal information.\n     crate fn new(elements: Rc<RegionValueElements>) -> Self {\n-        Self { points: SparseBitMatrix::new(elements.num_points), elements: elements }\n+        Self { points: SparseBitMatrix::new(elements.num_points), elements }\n     }\n \n     /// Iterate through each region that has a value in this set."}, {"sha": "67b00e9ffdd5f2f0366afabebcf62a69d08bf2a7", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -486,7 +486,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             defining_ty,\n             unnormalized_output_ty,\n             unnormalized_input_tys,\n-            yield_ty: yield_ty,\n+            yield_ty,\n         }\n     }\n "}, {"sha": "a9ef7ef6c528a2a93aa79472e0de2de4470a6b33", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -72,7 +72,7 @@ pub struct Edge {\n \n fn outgoing(body: &Body<'_>, bb: BasicBlock) -> Vec<Edge> {\n     (0..body[bb].terminator().successors().count())\n-        .map(|index| Edge { source: bb, index: index })\n+        .map(|index| Edge { source: bb, index })\n         .collect()\n }\n "}, {"sha": "7e36a3cf2bfec646b4fb471c0e8a412c354a6d69", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -474,7 +474,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     }\n \n     fn record_move(&mut self, place: &Place<'tcx>, path: MovePathIndex) {\n-        let move_out = self.builder.data.moves.push(MoveOut { path: path, source: self.loc });\n+        let move_out = self.builder.data.moves.push(MoveOut { path, source: self.loc });\n         debug!(\n             \"gather_move({:?}, {:?}): adding move {:?} of {:?}\",\n             self.loc, place, move_out, path"}, {"sha": "fff9c740f7e493ab944b1e607380b0dae6d933d5", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -655,7 +655,7 @@ where\n             }\n             local => PlaceTy {\n                 // This works even for dead/uninitialized locals; we check further when writing\n-                place: Place::Local { frame: self.cur_frame(), local: local },\n+                place: Place::Local { frame: self.cur_frame(), local },\n                 layout: self.layout_of_local(self.frame(), local, None)?,\n             },\n         };"}, {"sha": "7177bf726d4033b3caf36347b294dcb4be7ed85f", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -13,7 +13,7 @@ pub fn custom_coerce_unsize_info<'tcx>(\n     let def_id = tcx.lang_items().coerce_unsized_trait().unwrap();\n \n     let trait_ref = ty::Binder::bind(ty::TraitRef {\n-        def_id: def_id,\n+        def_id,\n         substs: tcx.mk_substs_trait(source_ty, &[target_ty.into()]),\n     });\n "}, {"sha": "45cecc1b125d88525d0087e48dd725c045bf0ed8", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -75,8 +75,8 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n         {\n             let source_info = SourceInfo {\n                 scope: OUTERMOST_SOURCE_SCOPE,\n-                span: span, // FIXME: Consider using just the span covering the function\n-                            // argument declaration.\n+                span, // FIXME: Consider using just the span covering the function\n+                      // argument declaration.\n             };\n             // Gather all arguments, skip return value.\n             let places = local_decls"}, {"sha": "d060a0eab3db05ed9885d6d92e0dfc057ff8bb2a", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -506,7 +506,7 @@ fn locals_live_across_suspend_points(\n \n     for (block, data) in body.basic_blocks().iter_enumerated() {\n         if let TerminatorKind::Yield { .. } = data.terminator().kind {\n-            let loc = Location { block: block, statement_index: data.statements.len() };\n+            let loc = Location { block, statement_index: data.statements.len() };\n \n             if !movable {\n                 // The `liveness` variable contains the liveness of MIR locals ignoring borrows."}, {"sha": "22ac3410a75ab7d3458ee81a3aa88257adf94e22", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -34,7 +34,7 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n         let attributes = tcx.get_attrs(def_id);\n         let param_env = tcx.param_env(def_id);\n         let move_data = MoveData::gather_moves(body, tcx, param_env).unwrap();\n-        let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n+        let mdpe = MoveDataParamEnv { move_data, param_env };\n \n         let flow_inits = MaybeInitializedPlaces::new(tcx, body, &mdpe)\n             .into_engine(tcx, body, def_id)"}, {"sha": "0b303e230e2875c90b706dfae34318092568477c", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -872,7 +872,7 @@ where\n         debug!(\"drop_flag_reset_block({:?},{:?})\", self, mode);\n \n         let block = self.new_block(unwind, TerminatorKind::Goto { target: succ });\n-        let block_start = Location { block: block, statement_index: 0 };\n+        let block_start = Location { block, statement_index: 0 };\n         self.elaborator.clear_drop_flag(block_start, self.path, mode);\n         block\n     }\n@@ -921,7 +921,7 @@ where\n \n         let call = TerminatorKind::Call {\n             func: Operand::function_handle(tcx, free_func, substs, self.source_info.span),\n-            args: args,\n+            args,\n             destination: Some((unit_temp, target)),\n             cleanup: None,\n             from_hir_call: false,"}, {"sha": "1fd5f3c4395873e105aa40a63929c419fd66e127", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -297,7 +297,7 @@ where\n     writeln!(w, \"{}{:?}{}: {{\", INDENT, block, cleanup_text)?;\n \n     // List of statements in the middle.\n-    let mut current_location = Location { block: block, statement_index: 0 };\n+    let mut current_location = Location { block, statement_index: 0 };\n     for statement in &data.statements {\n         extra_data(PassWhere::BeforeLocation(current_location), w)?;\n         let indented_body = format!(\"{0}{0}{1:?};\", INDENT, statement);"}, {"sha": "80fa0c44860e4ecc4449df16de4412670ff82674", "filename": "src/librustc_mir_build/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // value being matched, taking the variance field into account.\n                 candidate.ascriptions.push(Ascription {\n                     span: user_ty_span,\n-                    user_ty: user_ty,\n+                    user_ty,\n                     source: match_pair.place,\n                     variance,\n                 });"}, {"sha": "d23a2708dc478d2a2bdaf7a101e810757734886b", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -64,10 +64,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             PatKind::Slice { ref prefix, ref slice, ref suffix } => {\n                 let len = prefix.len() + suffix.len();\n                 let op = if slice.is_some() { BinOp::Ge } else { BinOp::Eq };\n-                Test {\n-                    span: match_pair.pattern.span,\n-                    kind: TestKind::Len { len: len as u64, op: op },\n-                }\n+                Test { span: match_pair.pattern.span, kind: TestKind::Len { len: len as u64, op } }\n             }\n \n             PatKind::Or { .. } => bug!(\"or-patterns should have already been handled\"),"}, {"sha": "b60a637471e131e731589ae0835839d449709698", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -418,7 +418,7 @@ struct GuardFrameLocal {\n \n impl GuardFrameLocal {\n     fn new(id: hir::HirId, _binding_mode: BindingMode) -> Self {\n-        GuardFrameLocal { id: id }\n+        GuardFrameLocal { id }\n     }\n }\n "}, {"sha": "8d7225c8c7b51ef3a883014dcf5106b91b173bfa", "filename": "src/librustc_mir_build/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fblock.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -84,7 +84,7 @@ fn mirror_stmts<'a, 'tcx>(\n \n                 result.push(StmtRef::Mirror(Box::new(Stmt {\n                     kind: StmtKind::Let {\n-                        remainder_scope: remainder_scope,\n+                        remainder_scope,\n                         init_scope: region::Scope {\n                             id: hir_id.local_id,\n                             data: region::ScopeData::Node,"}, {"sha": "6b5e927214f5a74b9b34092da5e9fa4722923100", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -2102,7 +2102,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 .is_ok()\n             {\n                 let def_id = module.def_id().unwrap();\n-                found_traits.push(TraitCandidate { def_id: def_id, import_ids: smallvec![] });\n+                found_traits.push(TraitCandidate { def_id, import_ids: smallvec![] });\n             }\n         }\n "}, {"sha": "7281173e9db7842d41fa3faa3054e968d8472436", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -1032,13 +1032,13 @@ struct Shadower {\n }\n \n fn original_label(span: Span) -> Original {\n-    Original { kind: ShadowKind::Label, span: span }\n+    Original { kind: ShadowKind::Label, span }\n }\n fn shadower_label(span: Span) -> Shadower {\n-    Shadower { kind: ShadowKind::Label, span: span }\n+    Shadower { kind: ShadowKind::Label, span }\n }\n fn original_lifetime(span: Span) -> Original {\n-    Original { kind: ShadowKind::Lifetime, span: span }\n+    Original { kind: ShadowKind::Lifetime, span }\n }\n fn shadower_lifetime(param: &hir::GenericParam<'_>) -> Shadower {\n     Shadower { kind: ShadowKind::Lifetime, span: param.span }\n@@ -1347,7 +1347,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let missing_named_lifetime_spots = take(&mut self.missing_named_lifetime_spots);\n         let mut this = LifetimeContext {\n             tcx: *tcx,\n-            map: map,\n+            map,\n             scope: &wrap_scope,\n             trait_ref_hack: self.trait_ref_hack,\n             is_in_fn_syntax: self.is_in_fn_syntax,"}, {"sha": "ec251c224b6907ae258ae9513e331a806c5167a0", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -334,7 +334,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                                     Some(_) => ImplKind::Direct,\n                                     None => ImplKind::Inherent,\n                                 },\n-                                span: span,\n+                                span,\n                                 value: String::new(),\n                                 parent: None,\n                                 children: items"}, {"sha": "2005366f83986da3b91a9e70561f68d45beb2dee", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -793,7 +793,7 @@ impl Sig for ast::ForeignItem {\n                 text.push_str(&name);\n                 text.push(';');\n \n-                Ok(Signature { text: text, defs: defs, refs: vec![] })\n+                Ok(Signature { text, defs, refs: vec![] })\n             }\n             ast::ForeignItemKind::Macro(..) => Err(\"macro\"),\n         }"}, {"sha": "c263da69c3521131cdb846bbf0a02c4dc650c129", "filename": "src/librustc_session/code_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_session%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_session%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fcode_stats.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -70,7 +70,7 @@ impl CodeStats {\n             type_description: type_desc.to_string(),\n             align: align.bytes(),\n             overall_size: overall_size.bytes(),\n-            packed: packed,\n+            packed,\n             opt_discr_size: opt_discr_size.map(|s| s.bytes()),\n             variants,\n         };"}, {"sha": "66cdf46bd4e5febcef386a39b33e75b63562a4d3", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -130,7 +130,7 @@ impl DefId {\n     /// Makes a local `DefId` from the given `DefIndex`.\n     #[inline]\n     pub fn local(index: DefIndex) -> DefId {\n-        DefId { krate: LOCAL_CRATE, index: index }\n+        DefId { krate: LOCAL_CRATE, index }\n     }\n \n     #[inline]"}, {"sha": "8b1ba57e8194561e09e45422891c1ca38aaf0bf5", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -47,7 +47,7 @@ pub fn resolve_instance<'tcx>(\n                 }\n             }\n         };\n-        Some(Instance { def: def, substs: substs })\n+        Some(Instance { def, substs })\n     };\n     debug!(\"resolve(def_id={:?}, substs={:?}) = {:?}\", def_id, substs, result);\n     result"}, {"sha": "7570d9d4b28ac7ceb81bdbf798fd787a18c2787e", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -404,7 +404,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let needs = Needs::maybe_mut_place(mutbl);\n         let ty = self.check_expr_with_expectation_and_needs(&oprnd, hint, needs);\n \n-        let tm = ty::TypeAndMut { ty: ty, mutbl: mutbl };\n+        let tm = ty::TypeAndMut { ty, mutbl };\n         match kind {\n             _ if tm.ty.references_error() => self.tcx.types.err,\n             hir::BorrowKind::Raw => {"}, {"sha": "60c5bcbb78df553e7b683844b4d58262a8bf961f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -4234,7 +4234,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let substs = self.fresh_substs_for_item(span, did);\n         let substd_ty = self.instantiate_type_scheme(span, &substs, &ity);\n \n-        TypeAndSubsts { substs: substs, ty: substd_ty }\n+        TypeAndSubsts { substs, ty: substd_ty }\n     }\n \n     /// Unifies the output type with the expected type early, for more coercions"}, {"sha": "44473fee643c638d3aafce57f8c01bcd1cebf576", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -31,10 +31,10 @@ pub fn infer_predicates<'tcx>(\n         predicates_added = false;\n \n         let mut visitor = InferVisitor {\n-            tcx: tcx,\n+            tcx,\n             global_inferred_outlives: &mut global_inferred_outlives,\n             predicates_added: &mut predicates_added,\n-            explicit_map: explicit_map,\n+            explicit_map,\n         };\n \n         // Visit all the crates and infer predicates"}, {"sha": "41b8e66d265922242d0c7002d325657d4fb37729", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -44,7 +44,7 @@ impl Module<'hir> {\n         vis: &'hir hir::Visibility<'hir>,\n     ) -> Module<'hir> {\n         Module {\n-            name: name,\n+            name,\n             id: hir::CRATE_HIR_ID,\n             vis,\n             where_outer: rustc_span::DUMMY_SP,"}, {"sha": "44f8e8bd1717a97d892553553050476b19c79505", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -2461,7 +2461,7 @@ impl RandomState {\n         KEYS.with(|keys| {\n             let (k0, k1) = keys.get();\n             keys.set((k0.wrapping_add(1), k1));\n-            RandomState { k0: k0, k1: k1 }\n+            RandomState { k0, k1 }\n         })\n     }\n }"}, {"sha": "f36aa1846a16c172333b1397ed01204fbeaa890b", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -96,7 +96,7 @@ impl<T> Cursor<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(inner: T) -> Cursor<T> {\n-        Cursor { pos: 0, inner: inner }\n+        Cursor { pos: 0, inner }\n     }\n \n     /// Consumes this cursor, returning the underlying value."}, {"sha": "0103e4bd628d7e757dc70c14aa78639c53238755", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -371,7 +371,7 @@ where\n     F: FnMut(&R) -> usize,\n {\n     let start_len = buf.len();\n-    let mut g = Guard { len: buf.len(), buf: buf };\n+    let mut g = Guard { len: buf.len(), buf };\n     let ret;\n     loop {\n         if g.len == g.buf.len() {\n@@ -939,7 +939,7 @@ pub trait Read {\n     where\n         Self: Sized,\n     {\n-        Take { inner: self, limit: limit }\n+        Take { inner: self, limit }\n     }\n }\n "}, {"sha": "0cb16b19d7326767cb2282cd74edfea3489f66d0", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -416,7 +416,7 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Mutex<T> {\n \n impl<'mutex, T: ?Sized> MutexGuard<'mutex, T> {\n     unsafe fn new(lock: &'mutex Mutex<T>) -> LockResult<MutexGuard<'mutex, T>> {\n-        poison::map_result(lock.poison.borrow(), |guard| MutexGuard { lock: lock, poison: guard })\n+        poison::map_result(lock.poison.borrow(), |guard| MutexGuard { lock, poison: guard })\n     }\n }\n "}, {"sha": "50f54dbf14306a1644d0ab77345156d2d968c385", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/709325af672a5513fb70d31b882784f698a195b7/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709325af672a5513fb70d31b882784f698a195b7/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=709325af672a5513fb70d31b882784f698a195b7", "patch": "@@ -465,16 +465,13 @@ impl<T> From<T> for RwLock<T> {\n \n impl<'rwlock, T: ?Sized> RwLockReadGuard<'rwlock, T> {\n     unsafe fn new(lock: &'rwlock RwLock<T>) -> LockResult<RwLockReadGuard<'rwlock, T>> {\n-        poison::map_result(lock.poison.borrow(), |_| RwLockReadGuard { lock: lock })\n+        poison::map_result(lock.poison.borrow(), |_| RwLockReadGuard { lock })\n     }\n }\n \n impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n     unsafe fn new(lock: &'rwlock RwLock<T>) -> LockResult<RwLockWriteGuard<'rwlock, T>> {\n-        poison::map_result(lock.poison.borrow(), |guard| RwLockWriteGuard {\n-            lock: lock,\n-            poison: guard,\n-        })\n+        poison::map_result(lock.poison.borrow(), |guard| RwLockWriteGuard { lock, poison: guard })\n     }\n }\n "}]}