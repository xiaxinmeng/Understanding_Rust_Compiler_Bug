{"sha": "0eb537fa31d10896046f747bd4dd4227f4842d99", "node_id": "C_kwDOAAsO6NoAKDBlYjUzN2ZhMzFkMTA4OTYwNDZmNzQ3YmQ0ZGQ0MjI3ZjQ4NDJkOTk", "commit": {"author": {"name": "Noritada Kobayashi", "email": "noritada.kobayashi@gmail.com", "date": "2022-12-11T05:58:49Z"}, "committer": {"name": "Noritada Kobayashi", "email": "noritada.kobayashi@gmail.com", "date": "2022-12-11T05:58:49Z"}, "message": "Add support for list nesting in AsciiDoc-to-Markdown conversion\n\nSupport for following list item types are also added:\n\n  - `-`-prefixed unordered list items\n  - `.`-prefixed ordered list items", "tree": {"sha": "f3545e5d7783d4388bfcb25674e9fa592ea4f6f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3545e5d7783d4388bfcb25674e9fa592ea4f6f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0eb537fa31d10896046f747bd4dd4227f4842d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb537fa31d10896046f747bd4dd4227f4842d99", "html_url": "https://github.com/rust-lang/rust/commit/0eb537fa31d10896046f747bd4dd4227f4842d99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0eb537fa31d10896046f747bd4dd4227f4842d99/comments", "author": {"login": "noritada", "id": 20850, "node_id": "MDQ6VXNlcjIwODUw", "avatar_url": "https://avatars.githubusercontent.com/u/20850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noritada", "html_url": "https://github.com/noritada", "followers_url": "https://api.github.com/users/noritada/followers", "following_url": "https://api.github.com/users/noritada/following{/other_user}", "gists_url": "https://api.github.com/users/noritada/gists{/gist_id}", "starred_url": "https://api.github.com/users/noritada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noritada/subscriptions", "organizations_url": "https://api.github.com/users/noritada/orgs", "repos_url": "https://api.github.com/users/noritada/repos", "events_url": "https://api.github.com/users/noritada/events{/privacy}", "received_events_url": "https://api.github.com/users/noritada/received_events", "type": "User", "site_admin": false}, "committer": {"login": "noritada", "id": 20850, "node_id": "MDQ6VXNlcjIwODUw", "avatar_url": "https://avatars.githubusercontent.com/u/20850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noritada", "html_url": "https://github.com/noritada", "followers_url": "https://api.github.com/users/noritada/followers", "following_url": "https://api.github.com/users/noritada/following{/other_user}", "gists_url": "https://api.github.com/users/noritada/gists{/gist_id}", "starred_url": "https://api.github.com/users/noritada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noritada/subscriptions", "organizations_url": "https://api.github.com/users/noritada/orgs", "repos_url": "https://api.github.com/users/noritada/repos", "events_url": "https://api.github.com/users/noritada/events{/privacy}", "received_events_url": "https://api.github.com/users/noritada/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "240fc255ef82f752f7b4bfaeae9f6024bad7c5e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/240fc255ef82f752f7b4bfaeae9f6024bad7c5e8", "html_url": "https://github.com/rust-lang/rust/commit/240fc255ef82f752f7b4bfaeae9f6024bad7c5e8"}], "stats": {"total": 174, "additions": 124, "deletions": 50}, "files": [{"sha": "6968ae77e41b7453ca51964ccafb2e14774a3d7f", "filename": "xtask/src/publish/notes.rs", "status": "modified", "additions": 124, "deletions": 50, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/0eb537fa31d10896046f747bd4dd4227f4842d99/xtask%2Fsrc%2Fpublish%2Fnotes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eb537fa31d10896046f747bd4dd4227f4842d99/xtask%2Fsrc%2Fpublish%2Fnotes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fpublish%2Fnotes.rs?ref=0eb537fa31d10896046f747bd4dd4227f4842d99", "patch": "@@ -83,38 +83,42 @@ impl<'a, 'b, R: BufRead> Converter<'a, 'b, R> {\n     }\n \n     fn process_list(&mut self) -> anyhow::Result<()> {\n+        let mut nesting = ListNesting::new();\n         while let Some(line) = self.iter.next() {\n             let line = line?;\n             if line.is_empty() {\n                 break;\n             }\n \n-            if let Some(item) = get_list_item(&line) {\n-                self.write_list_item(item);\n+            if let Some((marker, item)) = get_list_item(&line) {\n+                nesting.set_current(marker);\n+                self.write_list_item(item, &nesting);\n             } else if line == \"+\" {\n                 let line = self\n                     .iter\n                     .peek()\n                     .ok_or_else(|| anyhow!(\"list continuation unexpectedly terminated\"))?;\n                 let line = line.as_deref().map_err(|e| anyhow!(\"{e}\"))?;\n+\n+                let indent = nesting.indent();\n                 if line.starts_with('[') {\n                     self.write_line(\"\", 0);\n-                    self.process_source_code_block(1)?;\n+                    self.process_source_code_block(indent)?;\n                 } else if line.starts_with(LISTING_DELIMITER) {\n                     self.write_line(\"\", 0);\n-                    self.process_listing_block(None, 1)?;\n+                    self.process_listing_block(None, indent)?;\n                 } else if line.starts_with('.') {\n                     self.write_line(\"\", 0);\n-                    self.process_block_with_title(1)?;\n+                    self.process_block_with_title(indent)?;\n                 } else if line.starts_with(IMAGE_BLOCK_PREFIX) {\n                     self.write_line(\"\", 0);\n-                    self.process_image_block(None, 1)?;\n+                    self.process_image_block(None, indent)?;\n                 } else if line.starts_with(VIDEO_BLOCK_PREFIX) {\n                     self.write_line(\"\", 0);\n-                    self.process_video_block(None, 1)?;\n+                    self.process_video_block(None, indent)?;\n                 } else {\n                     self.write_line(\"\", 0);\n-                    self.process_paragraph(1)?;\n+                    self.process_paragraph(indent)?;\n                 }\n             } else {\n                 bail!(\"not a list block\")\n@@ -263,36 +267,38 @@ impl<'a, 'b, R: BufRead> Converter<'a, 'b, R> {\n         Ok(())\n     }\n \n-    fn write_title(&mut self, level: usize, title: &str) {\n-        for _ in 0..level {\n+    fn write_title(&mut self, indent: usize, title: &str) {\n+        for _ in 0..indent {\n             self.output.push('#');\n         }\n         self.output.push(' ');\n         self.output.push_str(title);\n         self.output.push('\\n');\n     }\n \n-    fn write_list_item(&mut self, item: &str) {\n-        self.output.push_str(\"- \");\n+    fn write_list_item(&mut self, item: &str, nesting: &ListNesting) {\n+        let (marker, indent) = nesting.marker();\n+        self.write_indent(indent);\n+        self.output.push_str(marker);\n         self.output.push_str(item);\n         self.output.push('\\n');\n     }\n \n-    fn write_caption_line(&mut self, caption: &str, level: usize) {\n-        self.write_indent(level);\n+    fn write_caption_line(&mut self, caption: &str, indent: usize) {\n+        self.write_indent(indent);\n         self.output.push('_');\n         self.output.push_str(caption);\n         self.output.push_str(\"_\\\\\\n\");\n     }\n \n-    fn write_indent(&mut self, level: usize) {\n-        for _ in 0..level {\n-            self.output.push_str(\"  \");\n+    fn write_indent(&mut self, indent: usize) {\n+        for _ in 0..indent {\n+            self.output.push(' ');\n         }\n     }\n \n-    fn write_line(&mut self, line: &str, level: usize) {\n-        self.write_indent(level);\n+    fn write_line(&mut self, line: &str, indent: usize) {\n+        self.write_indent(indent);\n         self.output.push_str(line);\n         self.output.push('\\n');\n     }\n@@ -312,15 +318,31 @@ where\n }\n \n fn get_title(line: &str) -> Option<(usize, &str)> {\n-    const MARKER: char = '=';\n+    strip_prefix_symbol(line, '=')\n+}\n+\n+fn get_list_item(line: &str) -> Option<(ListMarker, &str)> {\n+    const HYPHYEN_MARKER: &'static str = \"- \";\n+    if let Some(text) = line.strip_prefix(HYPHYEN_MARKER) {\n+        Some((ListMarker::Hyphen, text))\n+    } else if let Some((count, text)) = strip_prefix_symbol(line, '*') {\n+        Some((ListMarker::Asterisk(count), text))\n+    } else if let Some((count, text)) = strip_prefix_symbol(line, '.') {\n+        Some((ListMarker::Dot(count), text))\n+    } else {\n+        None\n+    }\n+}\n+\n+fn strip_prefix_symbol(line: &str, symbol: char) -> Option<(usize, &str)> {\n     let mut iter = line.chars();\n-    if iter.next()? != MARKER {\n+    if iter.next()? != symbol {\n         return None;\n     }\n     let mut count = 1;\n     loop {\n         match iter.next() {\n-            Some(MARKER) => {\n+            Some(ch) if ch == symbol => {\n                 count += 1;\n             }\n             Some(' ') => {\n@@ -332,16 +354,6 @@ fn get_title(line: &str) -> Option<(usize, &str)> {\n     Some((count, iter.as_str()))\n }\n \n-fn get_list_item(line: &str) -> Option<&str> {\n-    const MARKER: &'static str = \"* \";\n-    if line.starts_with(MARKER) {\n-        let item = &line[MARKER.len()..];\n-        Some(item)\n-    } else {\n-        None\n-    }\n-}\n-\n fn parse_media_block<'a>(line: &'a str, prefix: &str) -> Option<(&'a str, &'a str)> {\n     if let Some(line) = line.strip_prefix(prefix) {\n         if let Some((url, rest)) = line.split_once('[') {\n@@ -353,6 +365,55 @@ fn parse_media_block<'a>(line: &'a str, prefix: &str) -> Option<(&'a str, &'a st\n     None\n }\n \n+#[derive(Debug)]\n+struct ListNesting(Vec<ListMarker>);\n+\n+impl ListNesting {\n+    fn new() -> Self {\n+        Self(Vec::<ListMarker>::with_capacity(6))\n+    }\n+\n+    fn set_current(&mut self, marker: ListMarker) {\n+        let Self(markers) = self;\n+        if let Some(index) = markers.iter().position(|m| *m == marker) {\n+            markers.truncate(index + 1);\n+        } else {\n+            markers.push(marker);\n+        }\n+    }\n+\n+    fn indent(&self) -> usize {\n+        self.0.iter().map(|m| m.in_markdown().len()).sum()\n+    }\n+\n+    fn marker(&self) -> (&str, usize) {\n+        let Self(markers) = self;\n+        let indent = markers.iter().take(markers.len() - 1).map(|m| m.in_markdown().len()).sum();\n+        let marker = match markers.last() {\n+            None => \"\",\n+            Some(marker) => marker.in_markdown(),\n+        };\n+        (marker, indent)\n+    }\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+enum ListMarker {\n+    Asterisk(usize),\n+    Hyphen,\n+    Dot(usize),\n+}\n+\n+impl ListMarker {\n+    fn in_markdown(&self) -> &str {\n+        match self {\n+            ListMarker::Asterisk(_) => \"- \",\n+            ListMarker::Hyphen => \"- \",\n+            ListMarker::Dot(_) => \"1. \",\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -372,7 +433,19 @@ Release: release:2022-01-01[]\n == New Features\n \n * pr:1111[] foo bar baz\n-* pr:2222[] foo bar baz\n+- hyphen-prefixed list item\n+* nested list item\n+** `foo` -> `foofoo`\n+** `bar` -> `barbar`\n+* listing in the secondary level\n+. install\n+. add to config\n++\n+[source,json]\n+----\n+{\\\"foo\\\":\\\"bar\\\"}\n+----\n+* list item with continuation\n +\n image::https://example.com/animation.gif[]\n +\n@@ -400,15 +473,10 @@ This is a plain listing.\n paragraph\n paragraph\n \n-== Fixes\n+== Another Section\n \n-* pr:3333[] foo bar baz\n-* pr:4444[] foo bar baz\n-\n-== Internal Improvements\n-\n-* pr:5555[] foo bar baz\n-* pr:6666[] foo bar baz\n+* foo bar baz\n+* foo bar baz\n \n The highlight of the month is probably pr:1111[].\n \n@@ -437,7 +505,18 @@ Release: release:2022-01-01[]\n ## New Features\n \n - pr:1111[] foo bar baz\n-- pr:2222[] foo bar baz\n+  - hyphen-prefixed list item\n+- nested list item\n+  - `foo` -> `foofoo`\n+  - `bar` -> `barbar`\n+- listing in the secondary level\n+  1. install\n+  1. add to config\n+\n+     ```json\n+     {\\\"foo\\\":\\\"bar\\\"}\n+     ```\n+- list item with continuation\n \n   ![](https://example.com/animation.gif)\n \n@@ -464,15 +543,10 @@ Release: release:2022-01-01[]\n   paragraph\n   paragraph\n \n-## Fixes\n-\n-- pr:3333[] foo bar baz\n-- pr:4444[] foo bar baz\n-\n-## Internal Improvements\n+## Another Section\n \n-- pr:5555[] foo bar baz\n-- pr:6666[] foo bar baz\n+- foo bar baz\n+- foo bar baz\n \n The highlight of the month is probably pr:1111[].\n "}]}