{"sha": "788533d38091472ed05c8b55fd7a2002c49f4eb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ODUzM2QzODA5MTQ3MmVkMDVjOGI1NWZkN2EyMDAyYzQ5ZjRlYjc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T19:14:49Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T19:58:01Z"}, "message": "Move ProjectionTy methods to extension trait", "tree": {"sha": "25d131cb108e52f8abc585642730c4f29abb3727", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25d131cb108e52f8abc585642730c4f29abb3727"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/788533d38091472ed05c8b55fd7a2002c49f4eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/788533d38091472ed05c8b55fd7a2002c49f4eb7", "html_url": "https://github.com/rust-lang/rust/commit/788533d38091472ed05c8b55fd7a2002c49f4eb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/788533d38091472ed05c8b55fd7a2002c49f4eb7/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c96a7d81e29061537d78b5670a3474cb136422d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c96a7d81e29061537d78b5670a3474cb136422d", "html_url": "https://github.com/rust-lang/rust/commit/8c96a7d81e29061537d78b5670a3474cb136422d"}], "stats": {"total": 75, "additions": 43, "deletions": 32}, "files": [{"sha": "c5890e24dfcb1e95c7d7bbe7e15b4d0231fdb0c6", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=788533d38091472ed05c8b55fd7a2002c49f4eb7", "patch": "@@ -13,7 +13,7 @@ use log::{info, warn};\n \n use crate::{\n     db::HirDatabase, AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds, DebruijnIndex,\n-    InEnvironment, Interner, Solution, Ty, TyBuilder, TyKind,\n+    InEnvironment, Interner, ProjectionTyExt, Solution, Ty, TyBuilder, TyKind,\n };\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;"}, {"sha": "0f4cb43e9236e5858fcd905d101eb2da424a9a9a", "filename": "crates/hir_ty/src/chalk_ext.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs?ref=788533d38091472ed05c8b55fd7a2002c49f4eb7", "patch": "@@ -1,6 +1,11 @@\n //! Various extensions traits for Chalk types.\n \n-use crate::{Interner, Ty, TyKind};\n+use hir_def::{AssocContainerId, Lookup, TraitId};\n+\n+use crate::{\n+    db::HirDatabase, from_assoc_type_id, to_chalk_trait_id, Interner, ProjectionTy, TraitRef, Ty,\n+    TyKind,\n+};\n \n pub trait TyExt {\n     fn is_unit(&self) -> bool;\n@@ -11,3 +16,24 @@ impl TyExt for Ty {\n         matches!(self.kind(&Interner), TyKind::Tuple(0, _))\n     }\n }\n+\n+pub trait ProjectionTyExt {\n+    fn trait_ref(&self, db: &dyn HirDatabase) -> TraitRef;\n+    fn trait_(&self, db: &dyn HirDatabase) -> TraitId;\n+}\n+\n+impl ProjectionTyExt for ProjectionTy {\n+    fn trait_ref(&self, db: &dyn HirDatabase) -> TraitRef {\n+        TraitRef {\n+            trait_id: to_chalk_trait_id(self.trait_(db)),\n+            substitution: self.substitution.clone(),\n+        }\n+    }\n+\n+    fn trait_(&self, db: &dyn HirDatabase) -> TraitId {\n+        match from_assoc_type_id(self.associated_ty_id).lookup(db.upcast()).container {\n+            AssocContainerId::TraitId(it) => it,\n+            _ => panic!(\"projection ty without parent trait\"),\n+        }\n+    }\n+}"}, {"sha": "91d657ce2386389abf892e9a70d2357c30976fef", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=788533d38091472ed05c8b55fd7a2002c49f4eb7", "patch": "@@ -22,7 +22,8 @@ use crate::{\n     lt_from_placeholder_idx, primitive, to_assoc_type_id, traits::chalk::from_chalk,\n     utils::generics, AdtId, AliasEq, AliasTy, CallableDefId, CallableSig, DomainGoal, GenericArg,\n     ImplTraitId, Interner, Lifetime, LifetimeData, LifetimeOutlives, Mutability, OpaqueTy,\n-    ProjectionTy, QuantifiedWhereClause, Scalar, TraitRef, Ty, TyExt, TyKind, WhereClause,\n+    ProjectionTy, ProjectionTyExt, QuantifiedWhereClause, Scalar, TraitRef, Ty, TyExt, TyKind,\n+    WhereClause,\n };\n \n pub struct HirFormatter<'a> {"}, {"sha": "56a9365cb3450b3b228a413dcf91a84a9631af05", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=788533d38091472ed05c8b55fd7a2002c49f4eb7", "patch": "@@ -22,8 +22,8 @@ use crate::{\n     to_chalk_trait_id,\n     traits::{chalk::from_chalk, FnTrait},\n     utils::{generics, variant_data, Generics},\n-    AdtId, Binders, CallableDefId, FnPointer, FnSig, InEnvironment, Interner, Rawness, Scalar,\n-    Substitution, TraitRef, Ty, TyBuilder, TyKind,\n+    AdtId, Binders, CallableDefId, FnPointer, FnSig, InEnvironment, Interner, ProjectionTyExt,\n+    Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyKind,\n };\n \n use super::{"}, {"sha": "928dd76e5c4904b79c6770b96af4f13297aba355", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=788533d38091472ed05c8b55fd7a2002c49f4eb7", "patch": "@@ -43,22 +43,20 @@ use crate::{db::HirDatabase, display::HirDisplay, utils::generics};\n \n pub use autoderef::autoderef;\n pub use builder::TyBuilder;\n-pub use chalk_ext::TyExt;\n+pub use chalk_ext::{ProjectionTyExt, TyExt};\n pub use infer::{could_unify, InferenceResult, InferenceVar};\n pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n     TyDefId, TyLoweringContext, ValueTyDefId,\n };\n-pub use traits::TraitEnvironment;\n+pub use traits::{chalk::Interner, TraitEnvironment};\n pub use types::*;\n pub use walk::TypeWalk;\n \n pub use chalk_ir::{\n     cast::Cast, AdtId, BoundVar, DebruijnIndex, Mutability, Safety, Scalar, TyVariableKind,\n };\n \n-pub use crate::traits::chalk::Interner;\n-\n pub type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n pub type FnDefId = chalk_ir::FnDefId<Interner>;\n@@ -76,26 +74,6 @@ pub type LifetimeOutlives = chalk_ir::LifetimeOutlives<Interner>;\n \n pub type ChalkTraitId = chalk_ir::TraitId<Interner>;\n \n-impl ProjectionTy {\n-    pub fn trait_ref(&self, db: &dyn HirDatabase) -> TraitRef {\n-        TraitRef {\n-            trait_id: to_chalk_trait_id(self.trait_(db)),\n-            substitution: self.substitution.clone(),\n-        }\n-    }\n-\n-    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n-        &self.substitution.interned()[0].assert_ty_ref(interner)\n-    }\n-\n-    fn trait_(&self, db: &dyn HirDatabase) -> TraitId {\n-        match from_assoc_type_id(self.associated_ty_id).lookup(db.upcast()).container {\n-            AssocContainerId::TraitId(it) => it,\n-            _ => panic!(\"projection ty without parent trait\"),\n-        }\n-    }\n-}\n-\n pub type FnSig = chalk_ir::FnSig<Interner>;\n \n impl Substitution {"}, {"sha": "9f10b889f84371281548a4daac731beaa73a5a83", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=788533d38091472ed05c8b55fd7a2002c49f4eb7", "patch": "@@ -10,9 +10,9 @@ use base_db::salsa::InternKey;\n use hir_def::{GenericDefId, TypeAliasId};\n \n use crate::{\n-    db::HirDatabase, primitive::UintTy, AliasTy, CallableDefId, Canonical, DomainGoal, FnPointer,\n-    GenericArg, InEnvironment, OpaqueTy, ProjectionTy, QuantifiedWhereClause, Scalar, Substitution,\n-    TraitRef, Ty, TypeWalk, WhereClause,\n+    chalk_ext::ProjectionTyExt, db::HirDatabase, primitive::UintTy, AliasTy, CallableDefId,\n+    Canonical, DomainGoal, FnPointer, GenericArg, InEnvironment, OpaqueTy, ProjectionTy,\n+    QuantifiedWhereClause, Scalar, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n };\n \n use super::interner::*;"}, {"sha": "bd89991dc6bbe530f01613dcfbed56a9100730b7", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788533d38091472ed05c8b55fd7a2002c49f4eb7/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=788533d38091472ed05c8b55fd7a2002c49f4eb7", "patch": "@@ -29,6 +29,12 @@ pub struct ProjectionTy {\n     pub substitution: Substitution,\n }\n \n+impl ProjectionTy {\n+    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n+        &self.substitution.interned()[0].assert_ty_ref(interner)\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct DynTy {\n     /// The unknown self type."}]}