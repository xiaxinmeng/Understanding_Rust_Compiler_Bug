{"sha": "64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZTk3ZDliMzNhYzdhMzhlYzlmMGFlMTU3NTc3MWNkYWQ0YWZhYzA=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-11-14T02:42:15Z"}, "committer": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-11-28T13:37:08Z"}, "message": "Remove BuiltinBound and BuiltinBounds.", "tree": {"sha": "5553e369ac533cba86775a2e24e0358ed316e33a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5553e369ac533cba86775a2e24e0358ed316e33a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "html_url": "https://github.com/rust-lang/rust/commit/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607af7218b31ed00c8f613deedf8f4f7ae59cd13", "url": "https://api.github.com/repos/rust-lang/rust/commits/607af7218b31ed00c8f613deedf8f4f7ae59cd13", "html_url": "https://github.com/rust-lang/rust/commit/607af7218b31ed00c8f613deedf8f4f7ae59cd13"}], "stats": {"total": 471, "additions": 138, "deletions": 333}, "files": [{"sha": "9c63eac34e4407fb7fa05316092cdcd82601f716", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -24,6 +24,7 @@ use middle::free_region::FreeRegionMap;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::McResult;\n use middle::region::CodeExtent;\n+use middle::lang_items;\n use mir::tcx::LvalueTy;\n use ty::subst::{Kind, Subst, Substs};\n use ty::adjustment;\n@@ -1492,11 +1493,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n+        let copy_def_id = self.tcx.lang_items.require(lang_items::CopyTraitLangItem)\n+            .unwrap_or_else(|msg| self.tcx.sess.fatal(&msg[..]));\n+\n         // this can get called from typeck (by euv), and moves_by_default\n         // rightly refuses to work with inference variables, but\n         // moves_by_default has a cache, which we want to use in other\n         // cases.\n-        !traits::type_known_to_meet_builtin_bound(self, ty, ty::BoundCopy, span)\n+        !traits::type_known_to_meet_bound(self, ty, copy_def_id, span)\n     }\n \n     pub fn node_method_ty(&self, method_call: ty::MethodCall)"}, {"sha": "c0ea8d6b1e38baa4400c1e58323eb11a08fc7a94", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -32,7 +32,6 @@\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n-#![feature(enumset)]\n #![cfg_attr(stage0, feature(item_like_imports))]\n #![feature(libc)]\n #![feature(nonzero)]"}, {"sha": "8d02d63e3a4bb929b89412b6f579a5c470bc8429", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -90,31 +90,6 @@ impl LanguageItems {\n         self.require(OwnedBoxLangItem)\n     }\n \n-    pub fn from_builtin_kind(&self, bound: ty::BuiltinBound)\n-                             -> Result<DefId, String>\n-    {\n-        match bound {\n-            ty::BoundSend => self.require(SendTraitLangItem),\n-            ty::BoundSized => self.require(SizedTraitLangItem),\n-            ty::BoundCopy => self.require(CopyTraitLangItem),\n-            ty::BoundSync => self.require(SyncTraitLangItem),\n-        }\n-    }\n-\n-    pub fn to_builtin_kind(&self, id: DefId) -> Option<ty::BuiltinBound> {\n-        if Some(id) == self.send_trait() {\n-            Some(ty::BoundSend)\n-        } else if Some(id) == self.sized_trait() {\n-            Some(ty::BoundSized)\n-        } else if Some(id) == self.copy_trait() {\n-            Some(ty::BoundCopy)\n-        } else if Some(id) == self.sync_trait() {\n-            Some(ty::BoundSync)\n-        } else {\n-            None\n-        }\n-    }\n-\n     pub fn fn_trait_kind(&self, id: DefId) -> Option<ty::ClosureKind> {\n         let def_id_kinds = [\n             (self.fn_trait(), ty::ClosureKind::Fn),"}, {"sha": "4ac4c31386e716be808d108ec2757d9c508294e4", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -905,16 +905,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ObligationCauseCode::StructInitializerSized => {\n                 err.note(\"structs must have a statically known size to be initialized\");\n             }\n-            ObligationCauseCode::ClosureCapture(var_id, _, builtin_bound) => {\n-                let def_id = tcx.lang_items.from_builtin_kind(builtin_bound).unwrap();\n-                let trait_name = tcx.item_path_str(def_id);\n-                let name = tcx.local_var_name_str(var_id);\n-                err.note(\n-                    &format!(\"the closure that captures `{}` requires that all captured variables \\\n-                              implement the trait `{}`\",\n-                             name,\n-                             trait_name));\n-            }\n             ObligationCauseCode::FieldSized => {\n                 err.note(\"only the last field of a struct may have a dynamically sized type\");\n             }"}, {"sha": "9ff4048f73e77aba27596191205c7b5f297c7530", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -17,8 +17,8 @@ use rustc_data_structures::obligation_forest::{ForestObligation, ObligationProce\n use std::marker::PhantomData;\n use std::mem;\n use syntax::ast;\n-use util::common::ErrorReported;\n use util::nodemap::{FxHashSet, NodeMap};\n+use hir::def_id::DefId;\n \n use super::CodeAmbiguity;\n use super::CodeProjectionError;\n@@ -230,18 +230,21 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n         normalized.value\n     }\n \n-    pub fn register_builtin_bound(&mut self,\n+    pub fn register_bound(&mut self,\n                                   infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                   ty: Ty<'tcx>,\n-                                  builtin_bound: ty::BuiltinBound,\n+                                  def_id: DefId,\n                                   cause: ObligationCause<'tcx>)\n     {\n-        match infcx.tcx.predicate_for_builtin_bound(cause, builtin_bound, 0, ty) {\n-            Ok(predicate) => {\n-                self.register_predicate_obligation(infcx, predicate);\n-            }\n-            Err(ErrorReported) => { }\n-        }\n+        let trait_ref = ty::TraitRef {\n+            def_id: def_id,\n+            substs: infcx.tcx.mk_substs_trait(ty, &[]),\n+        };\n+        self.register_predicate_obligation(infcx, Obligation {\n+            cause: cause,\n+            recursion_depth: 0,\n+            predicate: trait_ref.to_predicate()\n+        });\n     }\n \n     pub fn register_region_obligation(&mut self,"}, {"sha": "bdd0ee75eb195828a4001cddd13018a2b9962ff2", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -19,7 +19,7 @@ use hir;\n use hir::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n use ty::subst::Substs;\n-use ty::{self, Ty, TyCtxt, TypeFoldable};\n+use ty::{self, Ty, TyCtxt, TypeFoldable, ToPredicate};\n use infer::InferCtxt;\n \n use std::rc::Rc;\n@@ -125,10 +125,6 @@ pub enum ObligationCauseCode<'tcx> {\n     ReturnType,                // Return type must be Sized\n     RepeatVec,                 // [T,..n] --> T must be Copy\n \n-    // Captures of variable the given id by a closure (span is the\n-    // span of the closure)\n-    ClosureCapture(ast::NodeId, Span, ty::BuiltinBound),\n-\n     // Types of fields (other than the last) in a struct must be sized.\n     FieldSized,\n \n@@ -369,27 +365,30 @@ pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,\n /// `bound` or is not known to meet bound (note that this is\n /// conservative towards *no impl*, which is the opposite of the\n /// `evaluate` methods).\n-pub fn type_known_to_meet_builtin_bound<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n+pub fn type_known_to_meet_bound<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                                         ty: Ty<'tcx>,\n-                                                        bound: ty::BuiltinBound,\n+                                                        def_id: DefId,\n                                                         span: Span)\n                                                         -> bool\n {\n-    debug!(\"type_known_to_meet_builtin_bound(ty={:?}, bound={:?})\",\n+    debug!(\"type_known_to_meet_bound(ty={:?}, bound={:?})\",\n            ty,\n-           bound);\n-\n-    let cause = ObligationCause::misc(span, ast::DUMMY_NODE_ID);\n-    let obligation =\n-        infcx.tcx.predicate_for_builtin_bound(cause, bound, 0, ty);\n-    let obligation = match obligation {\n-        Ok(o) => o,\n-        Err(..) => return false\n+           infcx.tcx.item_path_str(def_id));\n+\n+    let trait_ref = ty::TraitRef {\n+        def_id: def_id,\n+        substs: infcx.tcx.mk_substs_trait(ty, &[]),\n     };\n+    let obligation = Obligation {\n+        cause: ObligationCause::misc(span, ast::DUMMY_NODE_ID),\n+        recursion_depth: 0,\n+        predicate: trait_ref.to_predicate(),\n+    };\n+\n     let result = SelectionContext::new(infcx)\n         .evaluate_obligation_conservatively(&obligation);\n-    debug!(\"type_known_to_meet_builtin_bound: ty={:?} bound={:?} => {:?}\",\n-           ty, bound, result);\n+    debug!(\"type_known_to_meet_ty={:?} bound={} => {:?}\",\n+           ty, infcx.tcx.item_path_str(def_id), result);\n \n     if result && (ty.has_infer_types() || ty.has_closure_types()) {\n         // Because of inference \"guessing\", selection can sometimes claim\n@@ -404,22 +403,22 @@ pub fn type_known_to_meet_builtin_bound<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'g\n         // anyhow).\n         let cause = ObligationCause::misc(span, ast::DUMMY_NODE_ID);\n \n-        fulfill_cx.register_builtin_bound(infcx, ty, bound, cause);\n+        fulfill_cx.register_bound(infcx, ty, def_id, cause);\n \n         // Note: we only assume something is `Copy` if we can\n         // *definitively* show that it implements `Copy`. Otherwise,\n         // assume it is move; linear is always ok.\n         match fulfill_cx.select_all_or_error(infcx) {\n             Ok(()) => {\n-                debug!(\"type_known_to_meet_builtin_bound: ty={:?} bound={:?} success\",\n+                debug!(\"type_known_to_meet_bound: ty={:?} bound={} success\",\n                        ty,\n-                       bound);\n+                       infcx.tcx.item_path_str(def_id));\n                 true\n             }\n             Err(e) => {\n-                debug!(\"type_known_to_meet_builtin_bound: ty={:?} bound={:?} errors={:?}\",\n+                debug!(\"type_known_to_meet_bound: ty={:?} bound={} errors={:?}\",\n                        ty,\n-                       bound,\n+                       infcx.tcx.item_path_str(def_id),\n                        e);\n                 false\n             }"}, {"sha": "11b23d699de2f15cb3f01a3ffe77440af4661dde", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -1093,8 +1093,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // Other bounds. Consider both in-scope bounds from fn decl\n         // and applicable impls. There is a certain set of precedence rules here.\n \n-        match self.tcx().lang_items.to_builtin_kind(obligation.predicate.def_id()) {\n-            Some(ty::BoundCopy) => {\n+        let def_id = obligation.predicate.def_id();\n+        match obligation.predicate.def_id() {\n+            _ if self.tcx().lang_items.copy_trait() == Some(def_id) => {\n                 debug!(\"obligation self ty is {:?}\",\n                        obligation.predicate.0.self_ty());\n \n@@ -1106,22 +1107,20 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 let copy_conditions = self.copy_conditions(obligation);\n                 self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates)?;\n             }\n-            Some(ty::BoundSized) => {\n+            _ if self.tcx().lang_items.sized_trait() == Some(def_id) => {\n                 // Sized is never implementable by end-users, it is\n                 // always automatically computed.\n                 let sized_conditions = self.sized_conditions(obligation);\n                 self.assemble_builtin_bound_candidates(sized_conditions,\n                                                        &mut candidates)?;\n             }\n \n-            None if self.tcx().lang_items.unsize_trait() ==\n-                    Some(obligation.predicate.def_id()) => {\n+            _ if self.tcx().lang_items.unsize_trait() == Some(def_id) => {\n                 self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n             }\n \n-            Some(ty::BoundSend) |\n-            Some(ty::BoundSync) |\n-            None => {\n+            // For non-builtins and Send/Sync\n+            _ => {\n                 self.assemble_closure_candidates(obligation, &mut candidates)?;\n                 self.assemble_fn_pointer_candidates(obligation, &mut candidates)?;\n                 self.assemble_candidates_from_impls(obligation, &mut candidates)?;\n@@ -2483,7 +2482,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     data_b.auto_traits().collect(),\n                     data_a.projection_bounds.clone(),\n                 ));\n-                let origin = TypeOrigin::Misc(obligation.cause.span);\n                 let InferOk { obligations, .. } =\n                     self.infcx.sub_types(false, &obligation.cause, new_trait, target)\n                     .map_err(|_| Unimplemented)?;"}, {"sha": "dedb126d7ff6d6d40b5e304fa2385caed9fdf6b9", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -190,9 +190,6 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::VariableType(id) => Some(super::VariableType(id)),\n             super::ReturnType => Some(super::ReturnType),\n             super::RepeatVec => Some(super::RepeatVec),\n-            super::ClosureCapture(node_id, span, bound) => {\n-                Some(super::ClosureCapture(node_id, span, bound))\n-            }\n             super::FieldSized => Some(super::FieldSized),\n             super::ConstSized => Some(super::ConstSized),\n             super::SharedStatic => Some(super::SharedStatic),\n@@ -507,7 +504,6 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::VariableType(_) |\n             super::ReturnType |\n             super::RepeatVec |\n-            super::ClosureCapture(..) |\n             super::FieldSized |\n             super::ConstSized |\n             super::SharedStatic |\n@@ -552,7 +548,6 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::VariableType(_) |\n             super::ReturnType |\n             super::RepeatVec |\n-            super::ClosureCapture(..) |\n             super::FieldSized |\n             super::ConstSized |\n             super::SharedStatic |"}, {"sha": "321936fe54be15c37df649761dbfc2ebe66eb002", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -12,7 +12,6 @@ use hir::def_id::DefId;\n use ty::subst::{Subst, Substs};\n use ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n use ty::outlives::Component;\n-use util::common::ErrorReported;\n use util::nodemap::FxHashSet;\n \n use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext, Normalized};\n@@ -408,25 +407,6 @@ pub fn predicate_for_trait_ref<'tcx>(\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    pub fn trait_ref_for_builtin_bound(self,\n-        builtin_bound: ty::BuiltinBound,\n-        param_ty: Ty<'tcx>)\n-        -> Result<ty::TraitRef<'tcx>, ErrorReported>\n-    {\n-        match self.lang_items.from_builtin_kind(builtin_bound) {\n-            Ok(def_id) => {\n-                Ok(ty::TraitRef {\n-                    def_id: def_id,\n-                    substs: self.mk_substs_trait(param_ty, &[])\n-                })\n-            }\n-            Err(e) => {\n-                self.sess.err(&e);\n-                Err(ErrorReported)\n-            }\n-        }\n-    }\n-\n     pub fn predicate_for_trait_def(self,\n         cause: ObligationCause<'tcx>,\n         trait_def_id: DefId,\n@@ -442,17 +422,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         predicate_for_trait_ref(cause, trait_ref, recursion_depth)\n     }\n \n-    pub fn predicate_for_builtin_bound(self,\n-        cause: ObligationCause<'tcx>,\n-        builtin_bound: ty::BuiltinBound,\n-        recursion_depth: usize,\n-        param_ty: Ty<'tcx>)\n-        -> Result<PredicateObligation<'tcx>, ErrorReported>\n-    {\n-        let trait_ref = self.trait_ref_for_builtin_bound(builtin_bound, param_ty)?;\n-        Ok(predicate_for_trait_ref(cause, trait_ref, recursion_depth))\n-    }\n-\n     /// Cast a trait reference into a reference to one of its super\n     /// traits; returns `None` if `target_trait_def_id` is not a\n     /// supertrait."}, {"sha": "8ef13e62901a6e2e28a7cc715f1951fd167fa91c", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -45,7 +45,6 @@ pub enum TypeError<'tcx> {\n     IntMismatch(ExpectedFound<ty::IntVarValue>),\n     FloatMismatch(ExpectedFound<ast::FloatTy>),\n     Traits(ExpectedFound<DefId>),\n-    BuiltinBoundsMismatch(ExpectedFound<ty::BuiltinBounds>),\n     VariadicMismatch(ExpectedFound<bool>),\n     CyclicTy,\n     ProjectionNameMismatched(ExpectedFound<Name>),\n@@ -135,19 +134,6 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                                        format!(\"trait `{}`\",\n                                                tcx.item_path_str(values.found)))\n             }),\n-            BuiltinBoundsMismatch(values) => {\n-                if values.expected.is_empty() {\n-                    write!(f, \"expected no bounds, found `{}`\",\n-                           values.found)\n-                } else if values.found.is_empty() {\n-                    write!(f, \"expected bounds `{}`, found no bounds\",\n-                           values.expected)\n-                } else {\n-                    write!(f, \"expected bounds `{}`, found bounds `{}`\",\n-                           values.expected,\n-                           values.found)\n-                }\n-            }\n             IntMismatch(ref values) => {\n                 write!(f, \"expected `{:?}`, found `{:?}`\",\n                        values.expected,"}, {"sha": "4544cda0ae9aef953785fe78367f4f9f674cc808", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -53,7 +53,6 @@ use hir;\n use hir::itemlikevisit::ItemLikeVisitor;\n \n pub use self::sty::{Binder, DebruijnIndex};\n-pub use self::sty::{BuiltinBound, BuiltinBounds};\n pub use self::sty::{BareFnTy, FnSig, PolyFnSig};\n pub use self::sty::{ClosureTy, InferTy, ParamTy, ProjectionTy, TraitObject};\n pub use self::sty::{ClosureSubsts, TypeAndMut};\n@@ -68,11 +67,6 @@ pub use self::sty::InferTy::*;\n pub use self::sty::Region::*;\n pub use self::sty::TypeVariants::*;\n \n-pub use self::sty::BuiltinBound::Send as BoundSend;\n-pub use self::sty::BuiltinBound::Sized as BoundSized;\n-pub use self::sty::BuiltinBound::Copy as BoundCopy;\n-pub use self::sty::BuiltinBound::Sync as BoundSync;\n-\n pub use self::contents::TypeContents;\n pub use self::context::{TyCtxt, tls};\n pub use self::context::{CtxtArenas, Lift, Tables};"}, {"sha": "02704e94fee98241161c7df135481be357fa2eec", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -302,23 +302,6 @@ impl<'tcx> Relate<'tcx> for Vec<ty::PolyExistentialProjection<'tcx>> {\n     }\n }\n \n-impl<'tcx> Relate<'tcx> for ty::BuiltinBounds {\n-    fn relate<'a, 'gcx, R>(relation: &mut R,\n-                           a: &ty::BuiltinBounds,\n-                           b: &ty::BuiltinBounds)\n-                           -> RelateResult<'tcx, ty::BuiltinBounds>\n-        where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n-    {\n-        // Two sets of builtin bounds are only relatable if they are\n-        // precisely the same (but see the coercion code).\n-        if a != b {\n-            Err(TypeError::BuiltinBoundsMismatch(expected_found(relation, a, b)))\n-        } else {\n-            Ok(*a)\n-        }\n-    }\n-}\n-\n impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {\n     fn relate<'a, 'gcx, R>(relation: &mut R,\n                            a: &ty::TraitRef<'tcx>,"}, {"sha": "e890d750a7b50bb0ff8b2c4d2e398bd264946c41", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -315,7 +315,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             IntMismatch(x) => IntMismatch(x),\n             FloatMismatch(x) => FloatMismatch(x),\n             Traits(x) => Traits(x),\n-            BuiltinBoundsMismatch(x) => BuiltinBoundsMismatch(x),\n             VariadicMismatch(x) => VariadicMismatch(x),\n             CyclicTy => CyclicTy,\n             ProjectionNameMismatched(x) => ProjectionNameMismatched(x),\n@@ -703,16 +702,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::AutoBorrow<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::BuiltinBounds {\n-    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, _folder: &mut F) -> Self {\n-        *self\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n-        false\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::TypeParameterDef {"}, {"sha": "e6411ca1e4f68297f763bf051a3c90de50eb1438", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 69, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -14,13 +14,10 @@ use hir::def_id::DefId;\n \n use middle::region;\n use ty::subst::Substs;\n-use ty::{self, AdtDef, ToPredicate, TypeFlags, Ty, TyCtxt, TypeFoldable};\n+use ty::{self, AdtDef, TypeFlags, Ty, TyCtxt, TypeFoldable};\n use ty::{Slice, TyS};\n-use util::common::ErrorReported;\n \n-use collections::enum_set::{self, EnumSet, CLike};\n use std::fmt;\n-use std::ops;\n use syntax::abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::symbol::{keywords, InternedString};\n@@ -770,71 +767,6 @@ impl<'a, 'tcx, 'gcx> PolyExistentialProjection<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n-pub struct BuiltinBounds(EnumSet<BuiltinBound>);\n-\n-impl<'a, 'gcx, 'tcx> BuiltinBounds {\n-    pub fn empty() -> BuiltinBounds {\n-        BuiltinBounds(EnumSet::new())\n-    }\n-\n-    pub fn iter(&self) -> enum_set::Iter<BuiltinBound> {\n-        self.into_iter()\n-    }\n-\n-    pub fn to_predicates(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                         self_ty: Ty<'tcx>)\n-                         -> Vec<ty::Predicate<'tcx>> {\n-        self.iter().filter_map(|builtin_bound|\n-            match tcx.trait_ref_for_builtin_bound(builtin_bound, self_ty) {\n-                Ok(trait_ref) => Some(trait_ref.to_predicate()),\n-                Err(ErrorReported) => { None }\n-            }\n-        ).collect()\n-    }\n-}\n-\n-impl ops::Deref for BuiltinBounds {\n-    type Target = EnumSet<BuiltinBound>;\n-    fn deref(&self) -> &Self::Target { &self.0 }\n-}\n-\n-impl ops::DerefMut for BuiltinBounds {\n-    fn deref_mut(&mut self) -> &mut Self::Target { &mut self.0 }\n-}\n-\n-impl<'a> IntoIterator for &'a BuiltinBounds {\n-    type Item = BuiltinBound;\n-    type IntoIter = enum_set::Iter<BuiltinBound>;\n-    fn into_iter(self) -> Self::IntoIter {\n-        (**self).into_iter()\n-    }\n-}\n-\n-#[derive(Clone, RustcEncodable, PartialEq, Eq, RustcDecodable, Hash,\n-           Debug, Copy)]\n-pub enum BuiltinBound {\n-    Send = 0,\n-    Sized = 1,\n-    Copy = 2,\n-    Sync = 3,\n-}\n-\n-impl CLike for BuiltinBound {\n-    fn to_usize(&self) -> usize {\n-        *self as usize\n-    }\n-    fn from_usize(v: usize) -> BuiltinBound {\n-        match v {\n-            0 => BuiltinBound::Send,\n-            1 => BuiltinBound::Sized,\n-            2 => BuiltinBound::Copy,\n-            3 => BuiltinBound::Sync,\n-            _ => bug!(\"{} is not a valid BuiltinBound\", v)\n-        }\n-    }\n-}\n-\n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn try_add_builtin_trait(self,\n                                  id: DefId,"}, {"sha": "350426e7f3e827ccdf05d71574a8520c268535b7", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -21,6 +21,7 @@ use ty::fold::TypeVisitor;\n use ty::layout::{Layout, LayoutError};\n use ty::TypeVariants::*;\n use util::nodemap::FxHashMap;\n+use middle::lang_items;\n \n use rustc_const_math::{ConstInt, ConstIsize, ConstUsize};\n \n@@ -599,7 +600,7 @@ impl<'a, 'gcx, 'tcx, H: Hasher> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tc\n impl<'a, 'tcx> ty::TyS<'tcx> {\n     fn impls_bound(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                    param_env: &ParameterEnvironment<'tcx>,\n-                   bound: ty::BuiltinBound,\n+                   def_id: DefId,\n                    cache: &RefCell<FxHashMap<Ty<'tcx>, bool>>,\n                    span: Span) -> bool\n     {\n@@ -611,7 +612,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n         let result =\n             tcx.infer_ctxt(None, Some(param_env.clone()), Reveal::ExactMatch)\n             .enter(|infcx| {\n-                traits::type_known_to_meet_builtin_bound(&infcx, self, bound, span)\n+                traits::type_known_to_meet_bound(&infcx, self, def_id, span)\n             });\n         if self.has_param_types() || self.has_self_ty() {\n             cache.borrow_mut().insert(self, result);\n@@ -644,8 +645,10 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             TyClosure(..) | TyAdt(..) | TyAnon(..) |\n             TyProjection(..) | TyParam(..) | TyInfer(..) | TyError => None\n         }.unwrap_or_else(|| {\n-            !self.impls_bound(tcx, param_env, ty::BoundCopy, &param_env.is_copy_cache, span)\n-        });\n+            !self.impls_bound(tcx, param_env,\n+                              tcx.lang_items.require(lang_items::CopyTraitLangItem)\n+                                .unwrap_or_else(|msg| tcx.sess.fatal(&msg[..])),\n+                              &param_env.is_copy_cache, span) });\n \n         if !self.has_param_types() && !self.has_self_ty() {\n             self.flags.set(self.flags.get() | if result {\n@@ -686,8 +689,9 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             TyAdt(..) | TyProjection(..) | TyParam(..) |\n             TyInfer(..) | TyAnon(..) | TyError => None\n         }.unwrap_or_else(|| {\n-            self.impls_bound(tcx, param_env, ty::BoundSized, &param_env.is_sized_cache, span)\n-        });\n+            self.impls_bound(tcx, param_env, tcx.lang_items.require(lang_items::SizedTraitLangItem)\n+                              .unwrap_or_else(|msg| tcx.sess.fatal(&msg[..])),\n+                              &param_env.is_copy_cache, span) });\n \n         if !self.has_param_types() && !self.has_self_ty() {\n             self.flags.set(self.flags.get() | if result {"}, {"sha": "d0bc2f079770588952d27b49cd6561769fd499dc", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -17,7 +17,7 @@ use ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use std::iter::once;\n use syntax::ast;\n use syntax_pos::Span;\n-use util::common::ErrorReported;\n+use middle::lang_items;\n \n /// Returns the set of obligations needed to make `ty` well-formed.\n /// If `ty` contains unresolved inference variables, this may include\n@@ -282,14 +282,12 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n     fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {\n         if !subty.has_escaping_regions() {\n             let cause = self.cause(cause);\n-            match self.infcx.tcx.trait_ref_for_builtin_bound(ty::BoundSized, subty) {\n-                Ok(trait_ref) => {\n-                    self.out.push(\n-                        traits::Obligation::new(cause,\n-                                                trait_ref.to_predicate()));\n-                }\n-                Err(ErrorReported) => { }\n-            }\n+            let trait_ref = ty::TraitRef {\n+                def_id: self.infcx.tcx.lang_items.require(lang_items::SizedTraitLangItem)\n+                    .unwrap_or_else(|msg| self.infcx.tcx.sess.fatal(&msg[..])),\n+                substs: self.infcx.tcx.mk_substs_trait(subty, &[]),\n+            };\n+            self.out.push(traits::Obligation::new(cause, trait_ref.to_predicate()));\n         }\n     }\n "}, {"sha": "242342a7f93d61fe731269190a60fd6c7ea26dd1", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -683,19 +683,6 @@ impl<'tcx> fmt::Display for ty::FnSig<'tcx> {\n     }\n }\n \n-impl fmt::Display for ty::BuiltinBounds {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let mut bounds = self.iter();\n-        if let Some(bound) = bounds.next() {\n-            write!(f, \"{:?}\", bound)?;\n-            for bound in bounds {\n-                write!(f, \" + {:?}\", bound)?;\n-            }\n-        }\n-        Ok(())\n-    }\n-}\n-\n impl fmt::Debug for ty::TyVid {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"_#{}t\", self.index)"}, {"sha": "9cd92cf1fdcf7b9a7cd97158d8d017b107518a5c", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -29,6 +29,7 @@ use rustc::mir::traversal::ReversePostorder;\n use rustc::mir::transform::{Pass, MirPass, MirSource};\n use rustc::mir::visit::{LvalueContext, Visitor};\n use rustc::util::nodemap::DefIdMap;\n+use rustc::middle::lang_items;\n use syntax::abi::Abi;\n use syntax::feature_gate::UnstableFeatures;\n use syntax_pos::Span;\n@@ -1046,7 +1047,11 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants {\n             tcx.infer_ctxt(None, None, Reveal::NotSpecializable).enter(|infcx| {\n                 let cause = traits::ObligationCause::new(mir.span, id, traits::SharedStatic);\n                 let mut fulfillment_cx = traits::FulfillmentContext::new();\n-                fulfillment_cx.register_builtin_bound(&infcx, ty, ty::BoundSync, cause);\n+                fulfillment_cx.register_bound(&infcx, ty,\n+                                              tcx.lang_items\n+                                                .require(lang_items::SyncTraitLangItem)\n+                                                .unwrap_or_else(|msg| tcx.sess.fatal(&msg[..])),\n+                                              cause);\n                 if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n                     infcx.report_fulfillment_errors(&err);\n                 }"}, {"sha": "197e7793f4b2ad5f4d63aa0b8c783b37912b5a39", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -46,6 +46,7 @@ use rustc::hir;\n use rustc::traits;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::cast::{CastKind, CastTy};\n+use rustc::middle::lang_items;\n use syntax::ast;\n use syntax_pos::Span;\n use util::common::ErrorReported;\n@@ -543,6 +544,8 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn type_is_known_to_be_sized(&self, ty: Ty<'tcx>, span: Span) -> bool {\n-        traits::type_known_to_meet_builtin_bound(self, ty, ty::BoundSized, span)\n+        let lang_item = self.tcx.lang_items.require(lang_items::SizedTraitLangItem)\n+                            .unwrap_or_else(|msg| self.tcx.sess.fatal(&msg[..]));\n+        traits::type_known_to_meet_bound(self, ty, lang_item, span)\n     }\n }"}, {"sha": "be6d65bf511fdb29984c890f8bfca3998dfb4584", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -119,7 +119,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         self.deduce_sig_from_projection(&pb)\n                     })\n                     .next();\n-                let kind = self.tcx.lang_items.fn_trait_kind(object_type.principal().unwrap().def_id());\n+                let kind =\n+                    self.tcx.lang_items.fn_trait_kind(object_type.principal().unwrap().def_id());\n                 (sig, kind)\n             }\n             ty::TyInfer(ty::TyVar(vid)) => self.deduce_expectations_from_obligations(vid),"}, {"sha": "508b0e820cef1afd8eb3a61de240bcf6b2966378", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -379,7 +379,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             match ty.sty {\n                 ty::TyAdt(def, _) => def.did.is_local(),\n \n-                ty::TyTrait(ref tr) => tr.principal().map(|p| p.def_id().is_local()).unwrap_or(false),\n+                ty::TyTrait(ref tr) => tr.principal().map(|p|\n+                                                          p.def_id().is_local()).unwrap_or(false),\n \n                 ty::TyParam(_) => true,\n "}, {"sha": "c921936800b38ab85b7fe379f97fe9eb737767b2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -123,6 +123,7 @@ use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, PatKind};\n use rustc::hir::print as pprust;\n+use rustc::middle::lang_items;\n use rustc_back::slice;\n use rustc_const_eval::eval_length;\n \n@@ -1805,11 +1806,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                               ty: Ty<'tcx>,\n                               span: Span,\n                               code: traits::ObligationCauseCode<'tcx>,\n-                              bound: ty::BuiltinBound)\n+                              def_id: DefId)\n     {\n-        self.register_builtin_bound(\n+        self.register_bound(\n             ty,\n-            bound,\n+            def_id,\n             traits::ObligationCause::new(span, self.body_id, code));\n     }\n \n@@ -1818,16 +1819,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                  span: Span,\n                                  code: traits::ObligationCauseCode<'tcx>)\n     {\n-        self.require_type_meets(ty, span, code, ty::BoundSized);\n+        let lang_item = self.tcx.lang_items.require(lang_items::SizedTraitLangItem)\n+                            .unwrap_or_else(|msg| self.tcx.sess.fatal(&msg[..]));\n+        self.require_type_meets(ty, span, code, lang_item);\n     }\n \n-    pub fn register_builtin_bound(&self,\n+    pub fn register_bound(&self,\n                                   ty: Ty<'tcx>,\n-                                  builtin_bound: ty::BuiltinBound,\n+                                  def_id: DefId,\n                                   cause: traits::ObligationCause<'tcx>)\n     {\n         self.fulfillment_cx.borrow_mut()\n-            .register_builtin_bound(self, ty, builtin_bound, cause);\n+            .register_bound(self, ty, def_id, cause);\n     }\n \n     pub fn register_predicate(&self,\n@@ -3899,7 +3902,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if count > 1 {\n                 // For [foo, ..n] where n > 1, `foo` must have\n                 // Copy type:\n-                self.require_type_meets(t, expr.span, traits::RepeatVec, ty::BoundCopy);\n+                let lang_item = self.tcx.lang_items.require(lang_items::CopyTraitLangItem)\n+                            .unwrap_or_else(|msg| self.tcx.sess.fatal(&msg[..]));\n+                self.require_type_meets(t, expr.span, traits::RepeatVec, lang_item);\n             }\n \n             if element_ty.references_error() {"}, {"sha": "57859f9c84cb69fbab92f3739f6bc0f673b8bddb", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -18,6 +18,7 @@ use middle::region::{CodeExtent};\n use rustc::traits::{self, ObligationCauseCode};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n+use rustc::middle::lang_items;\n \n use syntax::ast;\n use syntax_pos::Span;\n@@ -118,12 +119,13 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n \n                 let trait_ref = ccx.tcx.impl_trait_ref(ccx.tcx.map.local_def_id(item.id)).unwrap();\n                 ccx.tcx.populate_implementations_for_trait_if_necessary(trait_ref.def_id);\n-                match ccx.tcx.lang_items.to_builtin_kind(trait_ref.def_id) {\n-                    Some(ty::BoundSend) | Some(ty::BoundSync) => {}\n-                    Some(_) | None => {\n-                        if !ccx.tcx.trait_has_default_impl(trait_ref.def_id) {\n-                            error_192(ccx, item.span);\n-                        }\n+                let sync_trait = ccx.tcx.lang_items.require(lang_items::SyncTraitLangItem)\n+                    .unwrap_or_else(|msg| ccx.tcx.sess.fatal(&msg[..]));\n+                let send_trait = ccx.tcx.lang_items.require(lang_items::SendTraitLangItem)\n+                    .unwrap_or_else(|msg| ccx.tcx.sess.fatal(&msg[..]));\n+                if trait_ref.def_id != sync_trait && trait_ref.def_id != send_trait {\n+                    if !ccx.tcx.trait_has_default_impl(trait_ref.def_id) {\n+                        error_192(ccx, item.span);\n                     }\n                 }\n             }\n@@ -241,9 +243,10 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n                 // For DST, all intermediate types must be sized.\n                 let unsized_len = if all_sized || variant.fields.is_empty() { 0 } else { 1 };\n                 for field in &variant.fields[..variant.fields.len() - unsized_len] {\n-                    fcx.register_builtin_bound(\n+                    fcx.register_bound(\n                         field.ty,\n-                        ty::BoundSized,\n+                        fcx.tcx.lang_items.require(lang_items::SizedTraitLangItem)\n+                            .unwrap_or_else(|msg| fcx.tcx.sess.fatal(&msg[..])),\n                         traits::ObligationCause::new(field.span,\n                                                      fcx.body_id,\n                                                      traits::FieldSized));"}, {"sha": "5ae233f647939b675041470c7d2ef355616a7374", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -182,14 +182,16 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OverlapChecker<'cx, 'tcx> {\n                     // This is something like impl Trait1 for Trait2. Illegal\n                     // if Trait1 is a supertrait of Trait2 or Trait2 is not object safe.\n \n-                    if data.principal().is_none() || !self.tcx.is_object_safe(data.principal().unwrap().def_id()) {\n+                    if data.principal().is_none() ||\n+                        !self.tcx.is_object_safe(data.principal().unwrap().def_id()) {\n                         // This is an error, but it will be\n                         // reported by wfcheck.  Ignore it\n                         // here. This is tested by\n                         // `coherence-impl-trait-for-trait-object-safe.rs`.\n                     } else {\n                         let mut supertrait_def_ids =\n-                            traits::supertrait_def_ids(self.tcx, data.principal().unwrap().def_id());\n+                            traits::supertrait_def_ids(self.tcx,\n+                                                       data.principal().unwrap().def_id());\n                         if supertrait_def_ids.any(|d| d == trait_def_id) {\n                             span_err!(self.tcx.sess,\n                                       item.span,"}, {"sha": "076d024c1e1bb13774b5f472c1f6b1e24cde70d6", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -376,7 +376,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 let contra = self.contravariant(variance);\n                 self.add_constraints_from_region(generics, data.region_bound, contra);\n \n-                let poly_trait_ref = data.principal().unwrap().with_self_ty(self.tcx(), self.tcx().types.err);\n+                let poly_trait_ref = data.principal().unwrap().with_self_ty(self.tcx(),\n+                    self.tcx().types.err);\n                 self.add_constraints_from_trait_ref(generics, poly_trait_ref.0, variance);\n \n                 for projection in &data.projection_bounds {"}, {"sha": "9d98cdd3f03771d840041b873aff71e466a78376", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 39, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -30,6 +30,7 @@ use syntax_pos::{self, DUMMY_SP, Pos};\n use rustc_trans::back::link;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::resolve_lifetime::DefRegion::*;\n+use rustc::middle::lang_items;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::{self, DefId, DefIndex, CRATE_DEF_INDEX};\n use rustc::hir::print as pprust;\n@@ -593,12 +594,21 @@ pub enum TyParamBound {\n \n impl TyParamBound {\n     fn maybe_sized(cx: &DocContext) -> TyParamBound {\n-        use rustc::hir::TraitBoundModifier as TBM;\n-        let mut sized_bound = ty::BoundSized.clean(cx);\n-        if let TyParamBound::TraitBound(_, ref mut tbm) = sized_bound {\n-            *tbm = TBM::Maybe\n-        };\n-        sized_bound\n+        let did = cx.tcx().lang_items.require(lang_items::SizedTraitLangItem)\n+            .unwrap_or_else(|msg| cx.tcx().sess.fatal(&msg[..]));\n+        let empty = cx.tcx().intern_substs(&[]);\n+        let path = external_path(cx, &cx.tcx().item_name(did).as_str(),\n+            Some(did), false, vec![], empty);\n+        inline::record_extern_fqn(cx, did, TypeKind::Trait);\n+        TraitBound(PolyTrait {\n+            trait_: ResolvedPath {\n+                path: path,\n+                typarams: None,\n+                did: did,\n+                is_generic: false,\n+            },\n+            lifetimes: vec![]\n+        }, hir::TraitBoundModifier::Maybe)\n     }\n \n     fn is_sized_bound(&self, cx: &DocContext) -> bool {\n@@ -675,37 +685,6 @@ fn external_path(cx: &DocContext, name: &str, trait_did: Option<DefId>, has_self\n     }\n }\n \n-impl Clean<TyParamBound> for ty::BuiltinBound {\n-    fn clean(&self, cx: &DocContext) -> TyParamBound {\n-        let tcx = cx.tcx;\n-        let empty = tcx.intern_substs(&[]);\n-        let (did, path) = match *self {\n-            ty::BoundSend =>\n-                (tcx.lang_items.send_trait().unwrap(),\n-                 external_path(cx, \"Send\", None, false, vec![], empty)),\n-            ty::BoundSized =>\n-                (tcx.lang_items.sized_trait().unwrap(),\n-                 external_path(cx, \"Sized\", None, false, vec![], empty)),\n-            ty::BoundCopy =>\n-                (tcx.lang_items.copy_trait().unwrap(),\n-                 external_path(cx, \"Copy\", None, false, vec![], empty)),\n-            ty::BoundSync =>\n-                (tcx.lang_items.sync_trait().unwrap(),\n-                 external_path(cx, \"Sync\", None, false, vec![], empty)),\n-        };\n-        inline::record_extern_fqn(cx, did, TypeKind::Trait);\n-        TraitBound(PolyTrait {\n-            trait_: ResolvedPath {\n-                path: path,\n-                typarams: None,\n-                did: did,\n-                is_generic: false,\n-            },\n-            lifetimes: vec![]\n-        }, hir::TraitBoundModifier::None)\n-    }\n-}\n-\n impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         inline::record_extern_fqn(cx, self.def_id, TypeKind::Trait);\n@@ -1915,8 +1894,8 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                         });\n                     }\n \n-                    let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n-                                             Some(did), false, bindings, obj.principal.0.substs);\n+                    let path = external_path(cx, &cx.tcx().item_name(did).as_str(), Some(did),\n+                        false, bindings, principal.0.substs);\n                     ResolvedPath {\n                         path: path,\n                         typarams: Some(typarams),"}, {"sha": "59a039057f37ffd77595454754d566d5576e9643", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -12,8 +12,8 @@ trait Trait {}\n \n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();\n-    //~^ ERROR `Trait + Sized: std::marker::Sized` is not satisfied\n+    //~^ ERROR the trait bound `Trait + std::marker::Sized: std::marker::Sized` is not satisfied\n     //~| ERROR the trait `std::marker::Sized` cannot be made into an object\n-    //~| ERROR `Trait + Sized: std::marker::Sized` is not satisfied\n+    //~| ERROR the trait bound `Trait + std::marker::Sized: std::marker::Sized` is not satisfied\n     //~| ERROR the trait `std::marker::Sized` cannot be made into an object\n }"}, {"sha": "23cff4ac6ad6c219b55eae24f8c8d515c4d30523", "filename": "src/test/compile-fail/const-unsized.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -11,8 +11,8 @@\n use std::fmt::Debug;\n \n const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n-//~^ ERROR `std::fmt::Debug + Sync + 'static: std::marker::Sized` is not satisfied\n-//~| NOTE the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + Sync + 'static`\n+//~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n+//~| NOTE the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Syn\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n \n@@ -23,8 +23,8 @@ const CONST_FOO: str = *\"foo\";\n //~| NOTE constant expressions must have a statically known size\n \n static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n-//~^ ERROR `std::fmt::Debug + Sync + 'static: std::marker::Sized` is not satisfied\n-//~| NOTE the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + Sync + 'static`\n+//~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n+//~| NOTE the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Syn\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n "}, {"sha": "14ab0dd5f631c84a1439c4bedcf6d923c8530272", "filename": "src/test/compile-fail/issue-32963.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -16,6 +16,6 @@ fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n \n fn main() {\n     size_of_copy::<Misc+Copy>();\n-    //~^ ERROR `Misc + Copy: std::marker::Copy` is not satisfied\n+    //~^ ERROR the trait bound `Misc + std::marker::Copy: std::marker::Copy` is not satisfied\n     //~| ERROR the trait `std::marker::Copy` cannot be made into an object\n }"}, {"sha": "0bfa328751ac15a96cba3869df6bbe3bcc216e48", "filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -21,10 +21,10 @@ fn c(x: Box<Foo+Sync+Send>) {\n }\n \n fn d(x: Box<Foo>) {\n-    a(x); //~  ERROR mismatched types\n-          //~| expected type `Box<Foo + Send + 'static>`\n-          //~| found type `Box<Foo + 'static>`\n-          //~| expected bounds `Send`, found no bounds\n+    a(x); //~ ERROR mismatched types [E0308]\n+          //~| NOTE expected type `Box<Foo + std::marker::Send + 'static>`\n+          //~| NOTE found type `Box<Foo + 'static>`\n+          //~| NOTE expected trait Foo, found a different trait Foo\n }\n \n fn main() { }"}, {"sha": "983c66ec1c40fba449e4ba1490512cd00521d9b3", "filename": "src/test/compile-fail/trait-bounds-not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e97d9b33ac7a38ec9f0ae1575771cdad4afac0/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs?ref=64e97d9b33ac7a38ec9f0ae1575771cdad4afac0", "patch": "@@ -15,7 +15,7 @@ trait Foo {\n // This should emit the less confusing error, not the more confusing one.\n \n fn foo(_x: Foo + Send) {\n-    //~^ ERROR `Foo + Send + 'static: std::marker::Sized` is not satisfied\n+    //~^ ERROR the trait bound `Foo + std::marker::Send + 'static: std::marker::Sized` is not\n }\n \n fn main() { }"}]}