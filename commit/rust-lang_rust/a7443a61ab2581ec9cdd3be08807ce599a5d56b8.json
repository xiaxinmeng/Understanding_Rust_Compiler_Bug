{"sha": "a7443a61ab2581ec9cdd3be08807ce599a5d56b8", "node_id": "C_kwDOAAsO6NoAKGE3NDQzYTYxYWIyNTgxZWM5Y2RkM2JlMDg4MDdjZTU5OWE1ZDU2Yjg", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-10T15:06:17Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-10T15:06:17Z"}, "message": "Move some code into codegen_fn_content", "tree": {"sha": "10310c8dd8c5245788a84ddfa16ea28d2814414f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10310c8dd8c5245788a84ddfa16ea28d2814414f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7443a61ab2581ec9cdd3be08807ce599a5d56b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7443a61ab2581ec9cdd3be08807ce599a5d56b8", "html_url": "https://github.com/rust-lang/rust/commit/a7443a61ab2581ec9cdd3be08807ce599a5d56b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7443a61ab2581ec9cdd3be08807ce599a5d56b8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa6480e43d3b9195fdc2077e32a3ee653409ee89", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6480e43d3b9195fdc2077e32a3ee653409ee89", "html_url": "https://github.com/rust-lang/rust/commit/fa6480e43d3b9195fdc2077e32a3ee653409ee89"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "439b636031befcd45c13ea7c76078a441edda8af", "filename": "src/base.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a7443a61ab2581ec9cdd3be08807ce599a5d56b8/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7443a61ab2581ec9cdd3be08807ce599a5d56b8/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=a7443a61ab2581ec9cdd3be08807ce599a5d56b8", "patch": "@@ -82,27 +82,7 @@ pub(crate) fn codegen_fn<'tcx>(\n         next_ssa_var: 0,\n     };\n \n-    let arg_uninhabited = fx\n-        .mir\n-        .args_iter()\n-        .any(|arg| fx.layout_of(fx.monomorphize(fx.mir.local_decls[arg].ty)).abi.is_uninhabited());\n-\n-    if !crate::constant::check_constants(&mut fx) {\n-        fx.bcx.append_block_params_for_function_params(fx.block_map[START_BLOCK]);\n-        fx.bcx.switch_to_block(fx.block_map[START_BLOCK]);\n-        // compilation should have been aborted\n-        fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n-    } else if arg_uninhabited {\n-        fx.bcx.append_block_params_for_function_params(fx.block_map[START_BLOCK]);\n-        fx.bcx.switch_to_block(fx.block_map[START_BLOCK]);\n-        fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n-    } else {\n-        tcx.sess.time(\"codegen clif ir\", || {\n-            tcx.sess\n-                .time(\"codegen prelude\", || crate::abi::codegen_fn_prelude(&mut fx, start_block));\n-            codegen_fn_content(&mut fx);\n-        });\n-    }\n+    tcx.sess.time(\"codegen clif ir\", || codegen_fn_body(&mut fx, start_block));\n \n     // Recover all necessary data from fx, before accessing func will prevent future access to it.\n     let instance = fx.instance;\n@@ -269,7 +249,27 @@ pub(crate) fn verify_func(\n     });\n }\n \n-fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n+fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n+    if !crate::constant::check_constants(fx) {\n+        fx.bcx.append_block_params_for_function_params(fx.block_map[START_BLOCK]);\n+        fx.bcx.switch_to_block(fx.block_map[START_BLOCK]);\n+        // compilation should have been aborted\n+        fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n+        return;\n+    }\n+\n+    let arg_uninhabited = fx\n+        .mir\n+        .args_iter()\n+        .any(|arg| fx.layout_of(fx.monomorphize(fx.mir.local_decls[arg].ty)).abi.is_uninhabited());\n+    if arg_uninhabited {\n+        fx.bcx.append_block_params_for_function_params(fx.block_map[START_BLOCK]);\n+        fx.bcx.switch_to_block(fx.block_map[START_BLOCK]);\n+        fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n+        return;\n+    }\n+    fx.tcx.sess.time(\"codegen prelude\", || crate::abi::codegen_fn_prelude(fx, start_block));\n+\n     for (bb, bb_data) in fx.mir.basic_blocks().iter_enumerated() {\n         let block = fx.get_block(bb);\n         fx.bcx.switch_to_block(block);"}]}