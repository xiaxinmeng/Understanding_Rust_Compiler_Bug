{"sha": "2a19459ee91ce2ee002c6d5fa4a53bc446d11d60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMTk0NTllZTkxY2UyZWUwMDJjNmQ1ZmE0YTUzYmM0NDZkMTFkNjA=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-24T19:43:22Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-30T10:39:14Z"}, "message": "Avoid failing on incorrect settings response", "tree": {"sha": "693abad2acabf89fdbd49e868c34e06be25785ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/693abad2acabf89fdbd49e868c34e06be25785ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a19459ee91ce2ee002c6d5fa4a53bc446d11d60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a19459ee91ce2ee002c6d5fa4a53bc446d11d60", "html_url": "https://github.com/rust-lang/rust/commit/2a19459ee91ce2ee002c6d5fa4a53bc446d11d60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a19459ee91ce2ee002c6d5fa4a53bc446d11d60/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbef0127ba89e44796ca9594435fd01bbe77c36d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbef0127ba89e44796ca9594435fd01bbe77c36d", "html_url": "https://github.com/rust-lang/rust/commit/fbef0127ba89e44796ca9594435fd01bbe77c36d"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "79ea90cc94b2429c498619af6500cf90bff57370", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a19459ee91ce2ee002c6d5fa4a53bc446d11d60/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a19459ee91ce2ee002c6d5fa4a53bc446d11d60/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=2a19459ee91ce2ee002c6d5fa4a53bc446d11d60", "patch": "@@ -414,18 +414,23 @@ fn loop_turn(\n                     log::error!(\"unexpected response: {:?}\", resp)\n                 }\n \n-                if Some(resp.id) == loop_state.configuration_request_id {\n+                if Some(&resp.id) == loop_state.configuration_request_id.as_ref() {\n                     loop_state.configuration_request_id = None;\n+                    log::debug!(\"config update response: '{:?}\", resp);\n                     let Response { error, result, .. } = resp;\n-                    match (error, result) {\n+\n+                    match (\n+                        error,\n+                        result.map(|result| serde_json::from_value::<Vec<ServerConfig>>(result)),\n+                    ) {\n                         (Some(err), _) => {\n                             log::error!(\"failed to fetch the server settings: {:?}\", err)\n                         }\n-                        (None, Some(result)) => {\n-                            let new_config = serde_json::from_value::<Vec<ServerConfig>>(result)?\n+                        (None, Some(Ok(new_config))) => {\n+                            let new_config = new_config\n                                 .first()\n                                 .expect(\n-                                    \"The client is expected to always send a non-empty config data\",\n+                                    \"the client is expected to always send a non-empty config data\",\n                                 )\n                                 .to_owned();\n                             world_state.update_configuration(\n@@ -434,6 +439,9 @@ fn loop_turn(\n                                 get_feature_flags(&new_config, connection),\n                             );\n                         }\n+                        (None, Some(Err(e))) => {\n+                            log::error!(\"failed to parse client config response: {}\", e)\n+                        }\n                         (None, None) => {\n                             log::error!(\"received empty server settings response from the client\")\n                         }"}]}