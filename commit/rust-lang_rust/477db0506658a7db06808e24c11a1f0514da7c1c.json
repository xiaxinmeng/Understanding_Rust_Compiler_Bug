{"sha": "477db0506658a7db06808e24c11a1f0514da7c1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3N2RiMDUwNjY1OGE3ZGIwNjgwOGUyNGMxMWExZjA1MTRkYTdjMWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-17T09:13:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-17T09:13:42Z"}, "message": "Rollup merge of #62737 - timvermeulen:cycle_try_fold, r=scottmcm\n\nOverride Cycle::try_fold\n\nIt's not very pretty, but I believe this is the simplest way to correctly implement `Cycle::try_fold`. The following may seem correct:\n```rust\nloop {\n    acc = self.iter.try_fold(acc, &mut f)?;\n    self.iter = self.orig.clone();\n}\n```\n...but this loops infinitely in case `self.orig` is empty, as opposed to returning `acc`. So we first have to fully iterate `self.orig` to check whether it is empty or not, and before _that_, we have to iterate the remaining elements of `self.iter`.\n\nThis should always call `self.orig.clone()` the same amount of times as repeated `next()` calls would.\n\nr? @scottmcm", "tree": {"sha": "321b06903cbe9bcb87f348caed4e67ec84edc186", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/321b06903cbe9bcb87f348caed4e67ec84edc186"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/477db0506658a7db06808e24c11a1f0514da7c1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdV8VGCRBK7hj4Ov3rIwAAdHIIAJZECQdw7EFErbewE1wRRWgs\nOOCVFBr0D3fYTcD3BOqp9m1mDZxL0miseIvnswqZLZGuNBUEVHeEMtmmAmkWVTlJ\n8Fle00Ai6f4vjm5xZvhNzlUKHqMc7iHQZ7n81AzoTh+l7xxbqO7sPDMeKcS7oE3L\nYsodZthTLZk+u7r+DQrZbK4ihxaZpBFalZxBdfic9IqinSLZhYIyfTkleA8qnLGS\nBomBpHOS1TNgzk2KtioyyQYR2yHG3InKy7TMvObqe/yXOsTED824YmlPtJjobf1c\nB0hOOgwl8OPFlreOdOi0bMLIID3hXjGZBPZ1gj0N11LZMWaEevTCYUipPansqwA=\n=dJRm\n-----END PGP SIGNATURE-----\n", "payload": "tree 321b06903cbe9bcb87f348caed4e67ec84edc186\nparent e910be8d7c7c3ae00a2839b310cc4062d5de8163\nparent 688c11216aca1d7449b07b3ebbcee3ba114d0d51\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566033222 +0200\ncommitter GitHub <noreply@github.com> 1566033222 +0200\n\nRollup merge of #62737 - timvermeulen:cycle_try_fold, r=scottmcm\n\nOverride Cycle::try_fold\n\nIt's not very pretty, but I believe this is the simplest way to correctly implement `Cycle::try_fold`. The following may seem correct:\n```rust\nloop {\n    acc = self.iter.try_fold(acc, &mut f)?;\n    self.iter = self.orig.clone();\n}\n```\n...but this loops infinitely in case `self.orig` is empty, as opposed to returning `acc`. So we first have to fully iterate `self.orig` to check whether it is empty or not, and before _that_, we have to iterate the remaining elements of `self.iter`.\n\nThis should always call `self.orig.clone()` the same amount of times as repeated `next()` calls would.\n\nr? @scottmcm\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/477db0506658a7db06808e24c11a1f0514da7c1c", "html_url": "https://github.com/rust-lang/rust/commit/477db0506658a7db06808e24c11a1f0514da7c1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/477db0506658a7db06808e24c11a1f0514da7c1c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e910be8d7c7c3ae00a2839b310cc4062d5de8163", "url": "https://api.github.com/repos/rust-lang/rust/commits/e910be8d7c7c3ae00a2839b310cc4062d5de8163", "html_url": "https://github.com/rust-lang/rust/commit/e910be8d7c7c3ae00a2839b310cc4062d5de8163"}, {"sha": "688c11216aca1d7449b07b3ebbcee3ba114d0d51", "url": "https://api.github.com/repos/rust-lang/rust/commits/688c11216aca1d7449b07b3ebbcee3ba114d0d51", "html_url": "https://github.com/rust-lang/rust/commit/688c11216aca1d7449b07b3ebbcee3ba114d0d51"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "a63434abd6c9fc172532d5a27f92c3f0cba96c30", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/477db0506658a7db06808e24c11a1f0514da7c1c/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477db0506658a7db06808e24c11a1f0514da7c1c/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=477db0506658a7db06808e24c11a1f0514da7c1c", "patch": "@@ -405,6 +405,36 @@ impl<I> Iterator for Cycle<I> where I: Clone + Iterator {\n             _ => (usize::MAX, None)\n         }\n     }\n+\n+    #[inline]\n+    fn try_fold<Acc, F, R>(&mut self, mut acc: Acc, mut f: F) -> R\n+    where\n+        F: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>,\n+    {\n+        // fully iterate the current iterator. this is necessary because\n+        // `self.iter` may be empty even when `self.orig` isn't\n+        acc = self.iter.try_fold(acc, &mut f)?;\n+        self.iter = self.orig.clone();\n+\n+        // complete a full cycle, keeping track of whether the cycled\n+        // iterator is empty or not. we need to return early in case\n+        // of an empty iterator to prevent an infinite loop\n+        let mut is_empty = true;\n+        acc = self.iter.try_fold(acc, |acc, x| {\n+            is_empty = false;\n+            f(acc, x)\n+        })?;\n+\n+        if is_empty {\n+            return Try::from_ok(acc);\n+        }\n+\n+        loop {\n+            self.iter = self.orig.clone();\n+            acc = self.iter.try_fold(acc, &mut f)?;\n+        }\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]"}, {"sha": "a1a27e1d5380ff50f4487ede0e7e08aa24f7ed79", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/477db0506658a7db06808e24c11a1f0514da7c1c/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477db0506658a7db06808e24c11a1f0514da7c1c/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=477db0506658a7db06808e24c11a1f0514da7c1c", "patch": "@@ -1152,6 +1152,18 @@ fn test_cycle() {\n     assert_eq!(empty::<i32>().cycle().fold(0, |acc, x| acc + x), 0);\n \n     assert_eq!(once(1).cycle().skip(1).take(4).fold(0, |acc, x| acc + x), 4);\n+\n+    assert_eq!((0..10).cycle().take(5).sum::<i32>(), 10);\n+    assert_eq!((0..10).cycle().take(15).sum::<i32>(), 55);\n+    assert_eq!((0..10).cycle().take(25).sum::<i32>(), 100);\n+\n+    let mut iter = (0..10).cycle();\n+    iter.nth(14);\n+    assert_eq!(iter.take(8).sum::<i32>(), 38);\n+\n+    let mut iter = (0..10).cycle();\n+    iter.nth(9);\n+    assert_eq!(iter.take(3).sum::<i32>(), 3);\n }\n \n #[test]"}]}