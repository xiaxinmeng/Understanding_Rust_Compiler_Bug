{"sha": "653f56af53c01c38f34f0926dd13ee391a290fa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1M2Y1NmFmNTNjMDFjMzhmMzRmMDkyNmRkMTNlZTM5MWEyOTBmYTA=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-17T20:50:28Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:35Z"}, "message": "wf", "tree": {"sha": "cbfc6bbf15c3f73966a37447edc71bb9833f0234", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbfc6bbf15c3f73966a37447edc71bb9833f0234"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/653f56af53c01c38f34f0926dd13ee391a290fa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/653f56af53c01c38f34f0926dd13ee391a290fa0", "html_url": "https://github.com/rust-lang/rust/commit/653f56af53c01c38f34f0926dd13ee391a290fa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/653f56af53c01c38f34f0926dd13ee391a290fa0/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "html_url": "https://github.com/rust-lang/rust/commit/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "333f90d78a79ec718bddcd7d7d5288f84fc2223f", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/653f56af53c01c38f34f0926dd13ee391a290fa0/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653f56af53c01c38f34f0926dd13ee391a290fa0/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=653f56af53c01c38f34f0926dd13ee391a290fa0", "patch": "@@ -88,33 +88,35 @@ pub fn predicate_obligations<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body_id: hir::HirId,\n-    predicate: ty::Predicate<'tcx>,\n+    predicate: &'tcx ty::PredicateKint<'tcx>,\n     span: Span,\n ) -> Vec<traits::PredicateObligation<'tcx>> {\n     let mut wf = WfPredicates { infcx, param_env, body_id, span, out: vec![], item: None };\n \n-    // (*) ok to skip binders, because wf code is prepared for it\n-    match predicate.kind() {\n-        ty::PredicateKind::Trait(t, _) => {\n-            wf.compute_trait_ref(&t.skip_binder().trait_ref, Elaborate::None); // (*)\n+    match predicate {\n+        ty::PredicateKint::ForAll(binder) => {\n+            // It's ok to skip the binder here because wf code is prepared for it\n+            return predicate_obligations(infcx, param_env, body_id, *binder.skip_binder(), span);\n         }\n-        ty::PredicateKind::RegionOutlives(..) => {}\n-        ty::PredicateKind::TypeOutlives(t) => {\n-            wf.compute(t.skip_binder().0.into());\n+        ty::PredicateKint::Trait(t, _) => {\n+            wf.compute_trait_ref(&t.trait_ref, Elaborate::None);\n         }\n-        ty::PredicateKind::Projection(t) => {\n-            let t = t.skip_binder(); // (*)\n+        ty::PredicateKint::RegionOutlives(..) => {}\n+        &ty::PredicateKint::TypeOutlives(ty::OutlivesPredicate(ty, _reg)) => {\n+            wf.compute(ty.into());\n+        }\n+        ty::PredicateKint::Projection(t) => {\n             wf.compute_projection(t.projection_ty);\n             wf.compute(t.ty.into());\n         }\n-        &ty::PredicateKind::WellFormed(arg) => {\n+        &ty::PredicateKint::WellFormed(arg) => {\n             wf.compute(arg);\n         }\n-        ty::PredicateKind::ObjectSafe(_) => {}\n-        ty::PredicateKind::ClosureKind(..) => {}\n-        ty::PredicateKind::Subtype(data) => {\n-            wf.compute(data.skip_binder().a.into()); // (*)\n-            wf.compute(data.skip_binder().b.into()); // (*)\n+        ty::PredicateKint::ObjectSafe(_) => {}\n+        ty::PredicateKint::ClosureKind(..) => {}\n+        &ty::PredicateKint::Subtype(ty::SubtypePredicate { a, b, a_is_expected: _ }) => {\n+            wf.compute(a.into());\n+            wf.compute(b.into());\n         }\n         &ty::PredicateKind::ConstEvaluatable(def, substs) => {\n             let obligations = wf.nominal_obligations(def.did, substs);\n@@ -124,7 +126,7 @@ pub fn predicate_obligations<'a, 'tcx>(\n                 wf.compute(arg);\n             }\n         }\n-        &ty::PredicateKind::ConstEquate(c1, c2) => {\n+        &ty::PredicateKint::ConstEquate(c1, c2) => {\n             wf.compute(c1.into());\n             wf.compute(c2.into());\n         }"}, {"sha": "aa40d7de6e0051c45f5d88946d22eda15782ba22", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/653f56af53c01c38f34f0926dd13ee391a290fa0/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653f56af53c01c38f34f0926dd13ee391a290fa0/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=653f56af53c01c38f34f0926dd13ee391a290fa0", "patch": "@@ -829,7 +829,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n     assert_eq!(predicates.predicates.len(), predicates.spans.len());\n     let wf_obligations =\n         predicates.predicates.iter().zip(predicates.spans.iter()).flat_map(|(&p, &sp)| {\n-            traits::wf::predicate_obligations(fcx, fcx.param_env, fcx.body_id, p, sp)\n+            traits::wf::predicate_obligations(fcx, fcx.param_env, fcx.body_id, p.kint(tcx), sp)\n         });\n \n     for obligation in wf_obligations.chain(default_obligations) {"}]}