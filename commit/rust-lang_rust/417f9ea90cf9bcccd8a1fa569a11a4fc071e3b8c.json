{"sha": "417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxN2Y5ZWE5MGNmOWJjY2NkOGExZmE1NjlhMTFhNGZjMDcxZTNiOGM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-11T17:00:32Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-13T21:04:46Z"}, "message": "Utilize -Zbinary-dep-depinfo for dependency tracking", "tree": {"sha": "350e76bffe06f600a4d925519b73fac673ea4390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/350e76bffe06f600a4d925519b73fac673ea4390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c", "html_url": "https://github.com/rust-lang/rust/commit/417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60960a260f7b5c695fd0717311d72ce62dd4eb43", "url": "https://api.github.com/repos/rust-lang/rust/commits/60960a260f7b5c695fd0717311d72ce62dd4eb43", "html_url": "https://github.com/rust-lang/rust/commit/60960a260f7b5c695fd0717311d72ce62dd4eb43"}], "stats": {"total": 123, "additions": 23, "deletions": 100}, "files": [{"sha": "a38fb2bdc8ebe568f3d86ab3ebef74e80cdb09b3", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 22, "deletions": 65, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c", "patch": "@@ -754,76 +754,20 @@ impl<'a> Builder<'a> {\n         let mut cargo = Command::new(&self.initial_cargo);\n         let out_dir = self.stage_out(compiler, mode);\n \n-        // command specific path, we call clear_if_dirty with this\n-        let mut my_out = match cmd {\n-            \"build\" => self.cargo_out(compiler, mode, target),\n-\n-            // This is the intended out directory for crate documentation.\n-            \"doc\" | \"rustdoc\" =>  self.crate_doc_out(target),\n-\n-            _ => self.stage_out(compiler, mode),\n-        };\n-\n-        // This is for the original compiler, but if we're forced to use stage 1, then\n-        // std/test/rustc stamps won't exist in stage 2, so we need to get those from stage 1, since\n-        // we copy the libs forward.\n-        let cmp = self.compiler_for(compiler.stage, compiler.host, target);\n-\n-        let libstd_stamp = match cmd {\n-            \"check\" | \"clippy\" | \"fix\" => check::libstd_stamp(self, cmp, target),\n-            _ => compile::libstd_stamp(self, cmp, target),\n-        };\n-\n-        let libtest_stamp = match cmd {\n-            \"check\" | \"clippy\" | \"fix\" => check::libtest_stamp(self, cmp, target),\n-            _ => compile::libtest_stamp(self, cmp, target),\n-        };\n-\n-        let librustc_stamp = match cmd {\n-            \"check\" | \"clippy\" | \"fix\" => check::librustc_stamp(self, cmp, target),\n-            _ => compile::librustc_stamp(self, cmp, target),\n-        };\n+        // Codegen backends are not yet tracked by -Zbinary-dep-depinfo,\n+        // so we need to explicitly clear out if they've been updated.\n+        for backend in self.codegen_backends(compiler) {\n+            self.clear_if_dirty(&out_dir, &backend);\n+        }\n \n         if cmd == \"doc\" || cmd == \"rustdoc\" {\n-            if mode == Mode::Rustc || mode == Mode::ToolRustc || mode == Mode::Codegen {\n+            let my_out = match mode {\n                 // This is the intended out directory for compiler documentation.\n-                my_out = self.compiler_doc_out(target);\n-            }\n+                Mode::Rustc | Mode::ToolRustc | Mode::Codegen => self.compiler_doc_out(target),\n+                _ => self.crate_doc_out(target),\n+            };\n             let rustdoc = self.rustdoc(compiler);\n             self.clear_if_dirty(&my_out, &rustdoc);\n-        } else if cmd != \"test\" {\n-            match mode {\n-                Mode::Std => {\n-                    self.clear_if_dirty(&my_out, &self.rustc(compiler));\n-                    for backend in self.codegen_backends(compiler) {\n-                        self.clear_if_dirty(&my_out, &backend);\n-                    }\n-                },\n-                Mode::Test => {\n-                    self.clear_if_dirty(&my_out, &libstd_stamp);\n-                },\n-                Mode::Rustc => {\n-                    self.clear_if_dirty(&my_out, &self.rustc(compiler));\n-                    self.clear_if_dirty(&my_out, &libstd_stamp);\n-                    self.clear_if_dirty(&my_out, &libtest_stamp);\n-                },\n-                Mode::Codegen => {\n-                    self.clear_if_dirty(&my_out, &librustc_stamp);\n-                },\n-                Mode::ToolBootstrap => { },\n-                Mode::ToolStd => {\n-                    self.clear_if_dirty(&my_out, &libstd_stamp);\n-                },\n-                Mode::ToolTest => {\n-                    self.clear_if_dirty(&my_out, &libstd_stamp);\n-                    self.clear_if_dirty(&my_out, &libtest_stamp);\n-                },\n-                Mode::ToolRustc => {\n-                    self.clear_if_dirty(&my_out, &libstd_stamp);\n-                    self.clear_if_dirty(&my_out, &libtest_stamp);\n-                    self.clear_if_dirty(&my_out, &librustc_stamp);\n-                },\n-            }\n         }\n \n         cargo\n@@ -861,6 +805,19 @@ impl<'a> Builder<'a> {\n             },\n         }\n \n+        // This tells Cargo (and in turn, rustc) to output more complete\n+        // dependency information.  Most importantly for rustbuild, this\n+        // includes sysroot artifacts, like libstd, which means that we don't\n+        // need to track those in rustbuild (an error prone process!). This\n+        // feature is currently unstable as there may be some bugs and such, but\n+        // it represents a big improvement in rustbuild's reliability on\n+        // rebuilds, so we're using it here.\n+        //\n+        // For some additional context, see #63470 (the PR originally adding\n+        // this), as well as #63012 which is the tracking issue for this\n+        // feature on the rustc side.\n+        cargo.arg(\"-Zbinary-dep-depinfo\");\n+\n         cargo.arg(\"-j\").arg(self.jobs().to_string());\n         // Remove make-related flags to ensure Cargo can correctly set things up\n         cargo.env_remove(\"MAKEFLAGS\");"}, {"sha": "6e6fea6b831a7507f3835fa21c3032d6f9459b71", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c", "patch": "@@ -245,7 +245,6 @@ impl Step for Rustdoc {\n         let libdir = builder.sysroot_libdir(compiler, target);\n         let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n         add_to_sysroot(&builder, &libdir, &hostdir, &rustdoc_stamp(builder, compiler, target));\n-        builder.cargo(compiler, Mode::ToolRustc, target, \"clean\");\n     }\n }\n "}, {"sha": "e0bdfe28390a6bbab4e5bbd6c58140f103683622", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=417f9ea90cf9bcccd8a1fa569a11a4fc071e3b8c", "patch": "@@ -15,7 +15,7 @@ use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio, exit};\n use std::str;\n \n-use build_helper::{output, mtime, t, up_to_date};\n+use build_helper::{output, t, up_to_date};\n use filetime::FileTime;\n use serde::Deserialize;\n use serde_json;\n@@ -274,8 +274,6 @@ impl Step for StdLink {\n             // for reason why the sanitizers are not built in stage0.\n             copy_apple_sanitizer_dylibs(builder, &builder.native_dir(target), \"osx\", &libdir);\n         }\n-\n-        builder.cargo(target_compiler, Mode::ToolStd, target, \"clean\");\n     }\n }\n \n@@ -480,8 +478,6 @@ impl Step for TestLink {\n             &builder.sysroot_libdir(target_compiler, compiler.host),\n             &libtest_stamp(builder, compiler, target)\n         );\n-\n-        builder.cargo(target_compiler, Mode::ToolTest, target, \"clean\");\n     }\n }\n \n@@ -639,7 +635,6 @@ impl Step for RustcLink {\n             &builder.sysroot_libdir(target_compiler, compiler.host),\n             &librustc_stamp(builder, compiler, target)\n         );\n-        builder.cargo(target_compiler, Mode::ToolRustc, target, \"clean\");\n     }\n }\n \n@@ -1206,41 +1201,13 @@ pub fn run_cargo(builder: &Builder<'_>,\n         deps.push((path_to_add.into(), false));\n     }\n \n-    // Now we want to update the contents of the stamp file, if necessary. First\n-    // we read off the previous contents along with its mtime. If our new\n-    // contents (the list of files to copy) is different or if any dep's mtime\n-    // is newer then we rewrite the stamp file.\n     deps.sort();\n-    let stamp_contents = fs::read(stamp);\n-    let stamp_mtime = mtime(&stamp);\n     let mut new_contents = Vec::new();\n-    let mut max = None;\n-    let mut max_path = None;\n     for (dep, proc_macro) in deps.iter() {\n-        let mtime = mtime(dep);\n-        if Some(mtime) > max {\n-            max = Some(mtime);\n-            max_path = Some(dep.clone());\n-        }\n         new_contents.extend(if *proc_macro { b\"h\" } else { b\"t\" });\n         new_contents.extend(dep.to_str().unwrap().as_bytes());\n         new_contents.extend(b\"\\0\");\n     }\n-    let max = max.unwrap();\n-    let max_path = max_path.unwrap();\n-    let contents_equal = stamp_contents\n-        .map(|contents| contents == new_contents)\n-        .unwrap_or_default();\n-    if contents_equal && max <= stamp_mtime {\n-        builder.verbose(&format!(\"not updating {:?}; contents equal and {:?} <= {:?}\",\n-                stamp, max, stamp_mtime));\n-        return deps.into_iter().map(|(d, _)| d).collect()\n-    }\n-    if max > stamp_mtime {\n-        builder.verbose(&format!(\"updating {:?} as {:?} changed\", stamp, max_path));\n-    } else {\n-        builder.verbose(&format!(\"updating {:?} as deps changed\", stamp));\n-    }\n     t!(fs::write(&stamp, &new_contents));\n     deps.into_iter().map(|(d, _)| d).collect()\n }"}]}