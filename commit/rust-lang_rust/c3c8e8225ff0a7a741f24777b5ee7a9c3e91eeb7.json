{"sha": "c3c8e8225ff0a7a741f24777b5ee7a9c3e91eeb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYzhlODIyNWZmMGE3YTc0MWYyNDc3N2I1ZWU3YTljM2U5MWVlYjc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-07T11:09:31Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-07T11:09:31Z"}, "message": "Free Ty::def_crates", "tree": {"sha": "cb2e469e3a80aaf8dae2f4dbaf3a8bbfb538894f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb2e469e3a80aaf8dae2f4dbaf3a8bbfb538894f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3c8e8225ff0a7a741f24777b5ee7a9c3e91eeb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c8e8225ff0a7a741f24777b5ee7a9c3e91eeb7", "html_url": "https://github.com/rust-lang/rust/commit/c3c8e8225ff0a7a741f24777b5ee7a9c3e91eeb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3c8e8225ff0a7a741f24777b5ee7a9c3e91eeb7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3a5c15d18492f5b9f0c606f988b914918d29ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a5c15d18492f5b9f0c606f988b914918d29ef5", "html_url": "https://github.com/rust-lang/rust/commit/e3a5c15d18492f5b9f0c606f988b914918d29ef5"}], "stats": {"total": 112, "additions": 55, "deletions": 57}, "files": [{"sha": "86b36c565097abfb000e5027e47be6fff7299a0c", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3c8e8225ff0a7a741f24777b5ee7a9c3e91eeb7/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c8e8225ff0a7a741f24777b5ee7a9c3e91eeb7/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c3c8e8225ff0a7a741f24777b5ee7a9c3e91eeb7", "patch": "@@ -53,7 +53,7 @@ use hir_def::{\n use hir_expand::{diagnostics::DiagnosticSink, name::name, MacroDefKind};\n use hir_ty::{\n     autoderef, could_unify,\n-    method_resolution::{self, TyFingerprint},\n+    method_resolution::{self, def_crates, TyFingerprint},\n     primitive::UintTy,\n     subst_prefix,\n     traits::FnTrait,\n@@ -1568,7 +1568,7 @@ impl Impl {\n     }\n \n     pub fn all_for_type(db: &dyn HirDatabase, Type { krate, ty, .. }: Type) -> Vec<Impl> {\n-        let def_crates = match ty.def_crates(db, krate) {\n+        let def_crates = match def_crates(db, &ty, krate) {\n             Some(def_crates) => def_crates,\n             None => return Vec::new(),\n         };\n@@ -1955,7 +1955,7 @@ impl Type {\n         krate: Crate,\n         mut callback: impl FnMut(AssocItem) -> Option<T>,\n     ) -> Option<T> {\n-        for krate in self.ty.def_crates(db, krate.id)? {\n+        for krate in def_crates(db, &self.ty, krate.id)? {\n             let impls = db.inherent_impls_in_crate(krate);\n \n             for impl_def in impls.for_self_ty(&self.ty) {"}, {"sha": "c601f2d539764253281dc2aee7b9f81755bffa95", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 52, "deletions": 54, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c3c8e8225ff0a7a741f24777b5ee7a9c3e91eeb7/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c8e8225ff0a7a741f24777b5ee7a9c3e91eeb7/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=c3c8e8225ff0a7a741f24777b5ee7a9c3e91eeb7", "patch": "@@ -239,15 +239,14 @@ impl InherentImpls {\n     }\n }\n \n-impl Ty {\n-    pub fn def_crates(\n-        &self,\n-        db: &dyn HirDatabase,\n-        cur_crate: CrateId,\n-    ) -> Option<ArrayVec<CrateId, 2>> {\n-        // Types like slice can have inherent impls in several crates, (core and alloc).\n-        // The corresponding impls are marked with lang items, so we can use them to find the required crates.\n-        macro_rules! lang_item_crate {\n+pub fn def_crates(\n+    db: &dyn HirDatabase,\n+    ty: &Ty,\n+    cur_crate: CrateId,\n+) -> Option<ArrayVec<CrateId, 2>> {\n+    // Types like slice can have inherent impls in several crates, (core and alloc).\n+    // The corresponding impls are marked with lang items, so we can use them to find the required crates.\n+    macro_rules! lang_item_crate {\n             ($($name:expr),+ $(,)?) => {{\n                 let mut v = ArrayVec::<LangItemTarget, 2>::new();\n                 $(\n@@ -257,51 +256,50 @@ impl Ty {\n             }};\n         }\n \n-        let mod_to_crate_ids = |module: ModuleId| Some(std::iter::once(module.krate()).collect());\n+    let mod_to_crate_ids = |module: ModuleId| Some(std::iter::once(module.krate()).collect());\n \n-        let lang_item_targets = match self.kind(&Interner) {\n-            TyKind::Adt(AdtId(def_id), _) => {\n-                return mod_to_crate_ids(def_id.module(db.upcast()));\n-            }\n-            TyKind::Foreign(id) => {\n-                return mod_to_crate_ids(\n-                    from_foreign_def_id(*id).lookup(db.upcast()).module(db.upcast()),\n-                );\n-            }\n-            TyKind::Scalar(Scalar::Bool) => lang_item_crate!(\"bool\"),\n-            TyKind::Scalar(Scalar::Char) => lang_item_crate!(\"char\"),\n-            TyKind::Scalar(Scalar::Float(f)) => match f {\n-                // There are two lang items: one in libcore (fXX) and one in libstd (fXX_runtime)\n-                FloatTy::F32 => lang_item_crate!(\"f32\", \"f32_runtime\"),\n-                FloatTy::F64 => lang_item_crate!(\"f64\", \"f64_runtime\"),\n-            },\n-            &TyKind::Scalar(Scalar::Int(t)) => {\n-                lang_item_crate!(primitive::int_ty_to_string(t))\n-            }\n-            &TyKind::Scalar(Scalar::Uint(t)) => {\n-                lang_item_crate!(primitive::uint_ty_to_string(t))\n-            }\n-            TyKind::Str => lang_item_crate!(\"str_alloc\", \"str\"),\n-            TyKind::Slice(_) => lang_item_crate!(\"slice_alloc\", \"slice\"),\n-            TyKind::Raw(Mutability::Not, _) => lang_item_crate!(\"const_ptr\"),\n-            TyKind::Raw(Mutability::Mut, _) => lang_item_crate!(\"mut_ptr\"),\n-            TyKind::Dyn(_) => {\n-                return self.dyn_trait().and_then(|trait_| {\n-                    mod_to_crate_ids(GenericDefId::TraitId(trait_).module(db.upcast()))\n-                });\n-            }\n-            _ => return None,\n-        };\n-        let res = lang_item_targets\n-            .into_iter()\n-            .filter_map(|it| match it {\n-                LangItemTarget::ImplDefId(it) => Some(it),\n-                _ => None,\n-            })\n-            .map(|it| it.lookup(db.upcast()).container.krate())\n-            .collect();\n-        Some(res)\n-    }\n+    let lang_item_targets = match ty.kind(&Interner) {\n+        TyKind::Adt(AdtId(def_id), _) => {\n+            return mod_to_crate_ids(def_id.module(db.upcast()));\n+        }\n+        TyKind::Foreign(id) => {\n+            return mod_to_crate_ids(\n+                from_foreign_def_id(*id).lookup(db.upcast()).module(db.upcast()),\n+            );\n+        }\n+        TyKind::Scalar(Scalar::Bool) => lang_item_crate!(\"bool\"),\n+        TyKind::Scalar(Scalar::Char) => lang_item_crate!(\"char\"),\n+        TyKind::Scalar(Scalar::Float(f)) => match f {\n+            // There are two lang items: one in libcore (fXX) and one in libstd (fXX_runtime)\n+            FloatTy::F32 => lang_item_crate!(\"f32\", \"f32_runtime\"),\n+            FloatTy::F64 => lang_item_crate!(\"f64\", \"f64_runtime\"),\n+        },\n+        &TyKind::Scalar(Scalar::Int(t)) => {\n+            lang_item_crate!(primitive::int_ty_to_string(t))\n+        }\n+        &TyKind::Scalar(Scalar::Uint(t)) => {\n+            lang_item_crate!(primitive::uint_ty_to_string(t))\n+        }\n+        TyKind::Str => lang_item_crate!(\"str_alloc\", \"str\"),\n+        TyKind::Slice(_) => lang_item_crate!(\"slice_alloc\", \"slice\"),\n+        TyKind::Raw(Mutability::Not, _) => lang_item_crate!(\"const_ptr\"),\n+        TyKind::Raw(Mutability::Mut, _) => lang_item_crate!(\"mut_ptr\"),\n+        TyKind::Dyn(_) => {\n+            return ty.dyn_trait().and_then(|trait_| {\n+                mod_to_crate_ids(GenericDefId::TraitId(trait_).module(db.upcast()))\n+            });\n+        }\n+        _ => return None,\n+    };\n+    let res = lang_item_targets\n+        .into_iter()\n+        .filter_map(|it| match it {\n+            LangItemTarget::ImplDefId(it) => Some(it),\n+            _ => None,\n+        })\n+        .map(|it| it.lookup(db.upcast()).container.krate())\n+        .collect();\n+    Some(res)\n }\n \n /// Look up the method with the given name, returning the actual autoderefed\n@@ -628,7 +626,7 @@ fn iterate_inherent_methods(\n     visible_from_module: Option<ModuleId>,\n     callback: &mut dyn FnMut(&Ty, AssocItemId) -> bool,\n ) -> bool {\n-    let def_crates = match self_ty.value.def_crates(db, krate) {\n+    let def_crates = match def_crates(db, &self_ty.value, krate) {\n         Some(k) => k,\n         None => return false,\n     };"}]}