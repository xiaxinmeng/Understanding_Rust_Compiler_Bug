{"sha": "b206aedb1bbdd45578668afd7f5589b1b812fd22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMDZhZWRiMWJiZGQ0NTU3ODY2OGFmZDdmNTU4OWIxYjgxMmZkMjI=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2018-07-13T02:25:02Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2018-07-24T02:55:51Z"}, "message": "make it a migration lint", "tree": {"sha": "b3eb30df63e7c6f0f49c079e0d69eb9565173378", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3eb30df63e7c6f0f49c079e0d69eb9565173378"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b206aedb1bbdd45578668afd7f5589b1b812fd22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b206aedb1bbdd45578668afd7f5589b1b812fd22", "html_url": "https://github.com/rust-lang/rust/commit/b206aedb1bbdd45578668afd7f5589b1b812fd22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b206aedb1bbdd45578668afd7f5589b1b812fd22/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d872727e02d9cc67813fa7f00763e355d39ae06", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d872727e02d9cc67813fa7f00763e355d39ae06", "html_url": "https://github.com/rust-lang/rust/commit/5d872727e02d9cc67813fa7f00763e355d39ae06"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "798c289ac2f9f4f824dafe2c2458304f291e2a99", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b206aedb1bbdd45578668afd7f5589b1b812fd22/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b206aedb1bbdd45578668afd7f5589b1b812fd22/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=b206aedb1bbdd45578668afd7f5589b1b812fd22", "patch": "@@ -44,9 +44,13 @@ extern crate syntax_pos;\n \n use rustc::lint;\n use rustc::lint::{LateContext, LateLintPass, LintPass, LintArray};\n-use rustc::lint::builtin::{BARE_TRAIT_OBJECTS, ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n-                           ELIDED_LIFETIMES_IN_PATHS};\n-use rustc::lint::builtin::MACRO_USE_EXTERN_CRATE;\n+use rustc::lint::builtin::{\n+    BARE_TRAIT_OBJECTS,\n+    ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n+    MACRO_USE_EXTERN_CRATE,\n+    ELIDED_LIFETIMES_IN_PATHS,\n+    parser::QUESTION_MARK_MACRO_SEP\n+};\n use rustc::session;\n use rustc::util;\n use rustc::hir;\n@@ -321,6 +325,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #50504 <https://github.com/rust-lang/rust/issues/50504>\",\n             edition: None,\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(QUESTION_MARK_MACRO_SEP),\n+            reference: \"issue #48075 <https://github.com/rust-lang/rust/issues/48075>\",\n+            edition: Some(Edition::Edition2018),\n+        }\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "a976af1435d2369edaf49596b760d5ff91561cc7", "filename": "src/libsyntax/early_buffered_lints.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b206aedb1bbdd45578668afd7f5589b1b812fd22/src%2Flibsyntax%2Fearly_buffered_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b206aedb1bbdd45578668afd7f5589b1b812fd22/src%2Flibsyntax%2Fearly_buffered_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fearly_buffered_lints.rs?ref=b206aedb1bbdd45578668afd7f5589b1b812fd22", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n //! Allows the buffering of lints for later.\n //!\n //! Since we cannot have a dependency on `librustc`, we implement some types here that are somewhat"}, {"sha": "c9ec2c7d1e86adeef111c98ea0a1112c5260d3cb", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b206aedb1bbdd45578668afd7f5589b1b812fd22/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b206aedb1bbdd45578668afd7f5589b1b812fd22/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=b206aedb1bbdd45578668afd7f5589b1b812fd22", "patch": "@@ -247,6 +247,7 @@ pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item, edition:\n                             features,\n                             &def.attrs,\n                             edition,\n+                            def.id,\n                         )\n                         .pop()\n                         .unwrap();\n@@ -272,6 +273,7 @@ pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item, edition:\n                             features,\n                             &def.attrs,\n                             edition,\n+                            def.id,\n                         ).pop()\n                          .unwrap();\n                     }"}, {"sha": "357fc77a3a79d8c7f8a3df5f72a004132a7131a9", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b206aedb1bbdd45578668afd7f5589b1b812fd22/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b206aedb1bbdd45578668afd7f5589b1b812fd22/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=b206aedb1bbdd45578668afd7f5589b1b812fd22", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use ast::NodeId;\n+use early_buffered_lints::BufferedEarlyLintId;\n use ext::tt::macro_parser;\n use feature_gate::{self, emit_feature_err, Features, GateIssue};\n use parse::{token, ParseSess};\n@@ -175,6 +177,7 @@ impl TokenTree {\n /// - `features`, `attrs`: language feature flags and attributes so that we know whether to use\n ///   unstable features or not.\n /// - `edition`: which edition are we in.\n+/// - `macro_node_id`: the NodeId of the macro we are parsing.\n ///\n /// # Returns\n ///\n@@ -186,6 +189,7 @@ pub fn parse(\n     features: &Features,\n     attrs: &[ast::Attribute],\n     edition: Edition,\n+    macro_node_id: NodeId,\n ) -> Vec<TokenTree> {\n     // Will contain the final collection of `self::TokenTree`\n     let mut result = Vec::new();\n@@ -204,6 +208,7 @@ pub fn parse(\n             features,\n             attrs,\n             edition,\n+            macro_node_id,\n         );\n         match tree {\n             TokenTree::MetaVar(start_sp, ident) if expect_matchers => {\n@@ -265,6 +270,7 @@ fn parse_tree<I>(\n     features: &Features,\n     attrs: &[ast::Attribute],\n     edition: Edition,\n+    macro_node_id: NodeId,\n ) -> TokenTree\n where\n     I: Iterator<Item = tokenstream::TokenTree>,\n@@ -290,10 +296,19 @@ where\n                     features,\n                     attrs,\n                     edition,\n+                    macro_node_id,\n                 );\n                 // Get the Kleene operator and optional separator\n                 let (separator, op) =\n-                    parse_sep_and_kleene_op(trees, span, sess, features, attrs, edition);\n+                    parse_sep_and_kleene_op(\n+                        trees,\n+                        span,\n+                        sess,\n+                        features,\n+                        attrs,\n+                        edition,\n+                        macro_node_id,\n+                    );\n                 // Count the number of captured \"names\" (i.e. named metavars)\n                 let name_captures = macro_parser::count_names(&sequence);\n                 TokenTree::Sequence(\n@@ -350,6 +365,7 @@ where\n                     features,\n                     attrs,\n                     edition,\n+                    macro_node_id,\n                 ),\n             }),\n         ),\n@@ -413,12 +429,20 @@ fn parse_sep_and_kleene_op<I>(\n     features: &Features,\n     attrs: &[ast::Attribute],\n     edition: Edition,\n+    macro_node_id: NodeId,\n ) -> (Option<token::Token>, KleeneOp)\n where\n     I: Iterator<Item = tokenstream::TokenTree>,\n {\n     match edition {\n-        Edition::Edition2015 => parse_sep_and_kleene_op_2015(input, span, sess, features, attrs),\n+        Edition::Edition2015 => parse_sep_and_kleene_op_2015(\n+            input,\n+            span,\n+            sess,\n+            features,\n+            attrs,\n+            macro_node_id,\n+        ),\n         Edition::Edition2018 => parse_sep_and_kleene_op_2018(input, span, sess, features, attrs),\n         _ => unimplemented!(),\n     }\n@@ -431,6 +455,7 @@ fn parse_sep_and_kleene_op_2015<I>(\n     sess: &ParseSess,\n     _features: &Features,\n     _attrs: &[ast::Attribute],\n+    macro_node_id: NodeId,\n ) -> (Option<token::Token>, KleeneOp)\n where\n     I: Iterator<Item = tokenstream::TokenTree>,\n@@ -474,8 +499,10 @@ where\n                     // #2 is a Kleene op, which is the the only valid option\n                     Ok(Ok((op, _))) => {\n                         // Warn that `?` as a separator will be deprecated\n-                        sess.span_diagnostic.span_warn(\n+                        sess.buffer_lint(\n+                            BufferedEarlyLintId::QuestionMarkMacroSep,\n                             op1_span,\n+                            macro_node_id,\n                             \"using `?` as a separator is deprecated and will be \\\n                              a hard error in an upcoming edition\",\n                         );"}]}