{"sha": "3cfe2d0a5d663d29c3d196f9d16e91964780792a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZmUyZDBhNWQ2NjNkMjljM2QxOTZmOWQxNmU5MTk2NDc4MDc5MmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-22T00:31:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-22T00:31:17Z"}, "message": "Merge #8918\n\n8918: fix: fix hang caused by non-unique attribute IDs r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8905 (again)\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "17b90dabb92c14bdd227ed432aede029ba6b6490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17b90dabb92c14bdd227ed432aede029ba6b6490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cfe2d0a5d663d29c3d196f9d16e91964780792a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgqFDVCRBK7hj4Ov3rIwAAWu8IAIvO4W4Zx5iXnfd2KVgY7hi4\nDP7lr2vOzibrVyXlVQWSxUXX1VE+5CbfPxDBn9DoP+GHByWaFtkl4q4k4zoTGNzT\nIppsaspz1i72bPY6OK3KmXybyHJsjQp2QD5YtPiFZcR/i6eyJqvLRMKf2daF30dT\nCc/muIB1BKouPi6NmD4Uj+AX5Rkyp0Fa1cqEUDgR6kywmr3puwxXbuRi0A9wOI/t\ng0GhRlqtkl09B1ME50csa+qlhNyhVH4Fl9+08R5BjnqQS2Jd7NUP6XQkgxZsRBGt\nNWVGBsnwzYp8QOHocGRgEBEToFUy1OgQfgaHLsIQ1vzyeMq9X5bRR7xf3gj9yFM=\n=J1CY\n-----END PGP SIGNATURE-----\n", "payload": "tree 17b90dabb92c14bdd227ed432aede029ba6b6490\nparent ae24651e445444d4ed4275a717ac10980f2957a4\nparent d077b8a7e080ffddda6c88c07d927dc54c8cde33\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621643477 +0000\ncommitter GitHub <noreply@github.com> 1621643477 +0000\n\nMerge #8918\n\n8918: fix: fix hang caused by non-unique attribute IDs r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8905 (again)\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cfe2d0a5d663d29c3d196f9d16e91964780792a", "html_url": "https://github.com/rust-lang/rust/commit/3cfe2d0a5d663d29c3d196f9d16e91964780792a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cfe2d0a5d663d29c3d196f9d16e91964780792a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae24651e445444d4ed4275a717ac10980f2957a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae24651e445444d4ed4275a717ac10980f2957a4", "html_url": "https://github.com/rust-lang/rust/commit/ae24651e445444d4ed4275a717ac10980f2957a4"}, {"sha": "d077b8a7e080ffddda6c88c07d927dc54c8cde33", "url": "https://api.github.com/repos/rust-lang/rust/commits/d077b8a7e080ffddda6c88c07d927dc54c8cde33", "html_url": "https://github.com/rust-lang/rust/commit/d077b8a7e080ffddda6c88c07d927dc54c8cde33"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "014ea4de4ee606f546891f6b9bb58962d28254e2", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3cfe2d0a5d663d29c3d196f9d16e91964780792a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cfe2d0a5d663d29c3d196f9d16e91964780792a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=3cfe2d0a5d663d29c3d196f9d16e91964780792a", "patch": "@@ -16,6 +16,7 @@ use hir_expand::{\n     FragmentKind, HirFileId, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n use hir_expand::{InFile, MacroCallLoc};\n+use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::ast;\n \n@@ -1516,14 +1517,27 @@ impl ModCollector<'_, '_> {\n     fn resolve_attributes(&mut self, attrs: &Attrs, mod_item: ModItem) -> Result<(), ()> {\n         let mut ignore_up_to =\n             self.def_collector.skip_attrs.get(&InFile::new(self.file_id, mod_item)).copied();\n-        for attr in attrs.iter().skip_while(|attr| match ignore_up_to {\n-            Some(id) if attr.id == id => {\n-                ignore_up_to = None;\n-                true\n-            }\n-            Some(_) => true,\n-            None => false,\n-        }) {\n+        let iter = attrs\n+            .iter()\n+            .dedup_by(|a, b| {\n+                // FIXME: this should not be required, all attributes on an item should have a\n+                // unique ID!\n+                // Still, this occurs because `#[cfg_attr]` can \"expand\" to multiple attributes:\n+                //     #[cfg_attr(not(off), unresolved, unresolved)]\n+                //     struct S;\n+                // We should come up with a different way to ID attributes.\n+                a.id == b.id\n+            })\n+            .skip_while(|attr| match ignore_up_to {\n+                Some(id) if attr.id == id => {\n+                    ignore_up_to = None;\n+                    true\n+                }\n+                Some(_) => true,\n+                None => false,\n+            });\n+\n+        for attr in iter {\n             if attr.path.as_ident() == Some(&hir_expand::name![derive]) {\n                 self.collect_derive(attr, mod_item);\n             } else if self.is_builtin_or_registered_attr(&attr.path) {"}, {"sha": "3065efd65e08e155f36b9e95cb689d65f3532b5b", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3cfe2d0a5d663d29c3d196f9d16e91964780792a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cfe2d0a5d663d29c3d196f9d16e91964780792a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=3cfe2d0a5d663d29c3d196f9d16e91964780792a", "patch": "@@ -737,6 +737,7 @@ fn unresolved_attributes_fall_back_track_per_file_moditems() {\n \n #[test]\n fn unresolved_attrs_extern_block_hang() {\n+    // Regression test for https://github.com/rust-analyzer/rust-analyzer/issues/8905\n     check(\n         r#\"\n #[unresolved]\n@@ -790,7 +791,22 @@ fn derive() {}\n             crate\n             S: t v\n         \"#]],\n-    )\n+    );\n+}\n+\n+#[test]\n+fn unresolved_attr_with_cfg_attr_hang() {\n+    // Another regression test for https://github.com/rust-analyzer/rust-analyzer/issues/8905\n+    check(\n+        r#\"\n+#[cfg_attr(not(off), unresolved, unresolved)]\n+struct S;\n+        \"#,\n+        expect![[r#\"\n+            crate\n+            S: t v\n+        \"#]],\n+    );\n }\n \n #[test]"}]}