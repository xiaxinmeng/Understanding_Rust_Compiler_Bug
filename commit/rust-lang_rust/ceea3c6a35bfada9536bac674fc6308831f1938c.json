{"sha": "ceea3c6a35bfada9536bac674fc6308831f1938c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZWEzYzZhMzViZmFkYTk1MzZiYWM2NzRmYzYzMDg4MzFmMTkzOGM=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-04-15T18:12:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-15T18:12:28Z"}, "message": "Rollup merge of #5248 - ThibsG:ConstValues, r=flip1995\n\nAdd lint on large non scalar const\n\nThis PR adds the new lint `non_scalar_const` that aims to warn against `const` declaration of large arrays. For performance, because of inlining, large arrays should be preferably declared as `static`.\n\nNote: i made this one to warn on all const arrays, whether they are in a body function or not. I don't know if this is really necessary, i could just reduce this lint to variables out of function scope.\n\nFixes: #400\n\nchangelog: add new lint for large non-scalar types declared as const", "tree": {"sha": "3cd7f96d7ccd26f7a05f9daf70d2eecd1350d02a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cd7f96d7ccd26f7a05f9daf70d2eecd1350d02a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceea3c6a35bfada9536bac674fc6308831f1938c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJel06MCRBK7hj4Ov3rIwAAdHIIAG9m6VnANy7clkJWG4JUh7TJ\n09cWzTe3YTG4UHQJnEGk2pMCroRFB7O0DJG0ey9sApC2Tg2LvG+FIW7j0S2ot7w+\ncgHqWgCeMA2QtOqZc+P7WzNl4jzlPZJ2XR34RViXVzlkZeEYoUKk/1Ys9wa5Nd+4\nfyb4BnN4wWMboM7KHI0qRcsMTelvxC7VyxobC5MQE4h83VQuMS5VMPc5cGQG6HW+\n8R/GH06GL6d4Zu2gA4NK5sGrLUxk1Htmx2T+4lYsRyWzdoclWL3qQ+2j6+++ufi7\n4nlWUZ935tAdCA1n32KNJXi8fvMcIqd5ovyo0IKqEr4Jo+b6674oiOxDaNMWIFg=\n=2ouC\n-----END PGP SIGNATURE-----\n", "payload": "tree 3cd7f96d7ccd26f7a05f9daf70d2eecd1350d02a\nparent 3481bf4102424d648a3f9efa74558ed17d492d55\nparent 629cc4ada3666865eb90f8425d7ea657710cdc74\nauthor Philipp Krones <hello@philkrones.com> 1586974348 +0200\ncommitter GitHub <noreply@github.com> 1586974348 +0200\n\nRollup merge of #5248 - ThibsG:ConstValues, r=flip1995\n\nAdd lint on large non scalar const\n\nThis PR adds the new lint `non_scalar_const` that aims to warn against `const` declaration of large arrays. For performance, because of inlining, large arrays should be preferably declared as `static`.\n\nNote: i made this one to warn on all const arrays, whether they are in a body function or not. I don't know if this is really necessary, i could just reduce this lint to variables out of function scope.\n\nFixes: #400\n\nchangelog: add new lint for large non-scalar types declared as const\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceea3c6a35bfada9536bac674fc6308831f1938c", "html_url": "https://github.com/rust-lang/rust/commit/ceea3c6a35bfada9536bac674fc6308831f1938c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceea3c6a35bfada9536bac674fc6308831f1938c/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3481bf4102424d648a3f9efa74558ed17d492d55", "url": "https://api.github.com/repos/rust-lang/rust/commits/3481bf4102424d648a3f9efa74558ed17d492d55", "html_url": "https://github.com/rust-lang/rust/commit/3481bf4102424d648a3f9efa74558ed17d492d55"}, {"sha": "629cc4ada3666865eb90f8425d7ea657710cdc74", "url": "https://api.github.com/repos/rust-lang/rust/commits/629cc4ada3666865eb90f8425d7ea657710cdc74", "html_url": "https://github.com/rust-lang/rust/commit/629cc4ada3666865eb90f8425d7ea657710cdc74"}], "stats": {"total": 258, "additions": 253, "deletions": 5}, "files": [{"sha": "65eab69667f29bc248ea6f9b177e5cd44601c86b", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ceea3c6a35bfada9536bac674fc6308831f1938c/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/ceea3c6a35bfada9536bac674fc6308831f1938c/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=ceea3c6a35bfada9536bac674fc6308831f1938c", "patch": "@@ -1320,6 +1320,7 @@ Released 2018-09-13\n [`iter_skip_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_next\n [`iterator_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iterator_step_by_zero\n [`just_underscores_and_digits`]: https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits\n+[`large_const_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_const_arrays\n [`large_digit_groups`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_digit_groups\n [`large_enum_variant`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant\n [`large_stack_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays"}, {"sha": "4c3030cf2e7c443892539caa1ba1dc5a5b17c6b4", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/ceea3c6a35bfada9536bac674fc6308831f1938c/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea3c6a35bfada9536bac674fc6308831f1938c/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=ceea3c6a35bfada9536bac674fc6308831f1938c", "patch": "@@ -0,0 +1,85 @@\n+use crate::rustc_target::abi::LayoutOf;\n+use crate::utils::span_lint_and_then;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::mir::interpret::ConstValue;\n+use rustc_middle::ty::{self, ConstKind};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{BytePos, Pos, Span};\n+use rustc_typeck::hir_ty_to_ty;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for large `const` arrays that should\n+    /// be defined as `static` instead.\n+    ///\n+    /// **Why is this bad?** Performance: const variables are inlined upon use.\n+    /// Static items result in only one instance and has a fixed location in memory.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// // Bad\n+    /// pub const a = [0u32; 1_000_000];\n+    ///\n+    /// // Good\n+    /// pub static a = [0u32; 1_000_000];\n+    /// ```\n+    pub LARGE_CONST_ARRAYS,\n+    perf,\n+    \"large non-scalar const array may cause performance overhead\"\n+}\n+\n+pub struct LargeConstArrays {\n+    maximum_allowed_size: u64,\n+}\n+\n+impl LargeConstArrays {\n+    #[must_use]\n+    pub fn new(maximum_allowed_size: u64) -> Self {\n+        Self { maximum_allowed_size }\n+    }\n+}\n+\n+impl_lint_pass!(LargeConstArrays => [LARGE_CONST_ARRAYS]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeConstArrays {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n+        if_chain! {\n+            if !item.span.from_expansion();\n+            if let ItemKind::Const(hir_ty, _) = &item.kind;\n+            let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n+            if let ty::Array(element_type, cst) = ty.kind;\n+            if let ConstKind::Value(val) = cst.val;\n+            if let ConstValue::Scalar(element_count) = val;\n+            if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n+            if let Ok(element_size) = cx.layout_of(element_type).map(|l| l.size.bytes());\n+            if self.maximum_allowed_size < element_count * element_size;\n+\n+            then {\n+                let hi_pos = item.ident.span.lo() - BytePos::from_usize(1);\n+                let sugg_span = Span::new(\n+                    hi_pos - BytePos::from_usize(\"const\".len()),\n+                    hi_pos,\n+                    item.span.ctxt(),\n+                );\n+                span_lint_and_then(\n+                    cx,\n+                    LARGE_CONST_ARRAYS,\n+                    item.span,\n+                    \"large array defined as const\",\n+                    |db| {\n+                        db.span_suggestion(\n+                            sugg_span,\n+                            \"make this a static item\",\n+                            \"static\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "1158e70b7a3f68235524bbe6cabca8bf4375cce4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceea3c6a35bfada9536bac674fc6308831f1938c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea3c6a35bfada9536bac674fc6308831f1938c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ceea3c6a35bfada9536bac674fc6308831f1938c", "patch": "@@ -232,6 +232,7 @@ mod inline_fn_without_body;\n mod int_plus_one;\n mod integer_division;\n mod items_after_statements;\n+mod large_const_arrays;\n mod large_enum_variant;\n mod large_stack_arrays;\n mod len_zero;\n@@ -582,6 +583,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &int_plus_one::INT_PLUS_ONE,\n         &integer_division::INTEGER_DIVISION,\n         &items_after_statements::ITEMS_AFTER_STATEMENTS,\n+        &large_const_arrays::LARGE_CONST_ARRAYS,\n         &large_enum_variant::LARGE_ENUM_VARIANT,\n         &large_stack_arrays::LARGE_STACK_ARRAYS,\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n@@ -1026,6 +1028,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box to_digit_is_some::ToDigitIsSome);\n     let array_size_threshold = conf.array_size_threshold;\n     store.register_late_pass(move || box large_stack_arrays::LargeStackArrays::new(array_size_threshold));\n+    store.register_late_pass(move || box large_const_arrays::LargeConstArrays::new(array_size_threshold));\n     store.register_late_pass(move || box floating_point_arithmetic::FloatingPointArithmetic);\n     store.register_early_pass(|| box as_conversions::AsConversions);\n     store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n@@ -1225,6 +1228,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n         LintId::of(&inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n         LintId::of(&int_plus_one::INT_PLUS_ONE),\n+        LintId::of(&large_const_arrays::LARGE_CONST_ARRAYS),\n         LintId::of(&large_enum_variant::LARGE_ENUM_VARIANT),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n@@ -1656,6 +1660,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&bytecount::NAIVE_BYTECOUNT),\n         LintId::of(&entry::MAP_ENTRY),\n         LintId::of(&escape::BOXED_LOCAL),\n+        LintId::of(&large_const_arrays::LARGE_CONST_ARRAYS),\n         LintId::of(&large_enum_variant::LARGE_ENUM_VARIANT),\n         LintId::of(&loops::MANUAL_MEMCPY),\n         LintId::of(&loops::NEEDLESS_COLLECT),"}, {"sha": "afcfe34f5be8fefe2584eba81c75993cb1878b0c", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceea3c6a35bfada9536bac674fc6308831f1938c/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea3c6a35bfada9536bac674fc6308831f1938c/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=ceea3c6a35bfada9536bac674fc6308831f1938c", "patch": "@@ -150,7 +150,7 @@ define_Conf! {\n     (trivial_copy_size_limit, \"trivial_copy_size_limit\": Option<u64>, None),\n     /// Lint: TOO_MANY_LINES. The maximum number of lines a function or method can have\n     (too_many_lines_threshold, \"too_many_lines_threshold\": u64, 100),\n-    /// Lint: LARGE_STACK_ARRAYS. The maximum allowed size for arrays on the stack\n+    /// Lint: LARGE_STACK_ARRAYS, LARGE_CONST_ARRAYS. The maximum allowed size for arrays on the stack\n     (array_size_threshold, \"array_size_threshold\": u64, 512_000),\n     /// Lint: VEC_BOX. The size of the boxed type in bytes, where boxing in a `Vec` is allowed\n     (vec_box_size_threshold, \"vec_box_size_threshold\": u64, 4096),"}, {"sha": "ca1faf6cfb7db84ca99449e161e40be723506bb0", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ceea3c6a35bfada9536bac674fc6308831f1938c/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea3c6a35bfada9536bac674fc6308831f1938c/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=ceea3c6a35bfada9536bac674fc6308831f1938c", "patch": "@@ -948,6 +948,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"non_expressive_names\",\n     },\n+    Lint {\n+        name: \"large_const_arrays\",\n+        group: \"perf\",\n+        desc: \"large non-scalar const array may cause performance overhead\",\n+        deprecation: None,\n+        module: \"large_const_arrays\",\n+    },\n     Lint {\n         name: \"large_digit_groups\",\n         group: \"pedantic\","}, {"sha": "c5af07c8a1728bc671c4837ccb7d7bec70150ae5", "filename": "tests/ui/large_const_arrays.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ceea3c6a35bfada9536bac674fc6308831f1938c/tests%2Fui%2Flarge_const_arrays.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ceea3c6a35bfada9536bac674fc6308831f1938c/tests%2Fui%2Flarge_const_arrays.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_const_arrays.fixed?ref=ceea3c6a35bfada9536bac674fc6308831f1938c", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+\n+#![warn(clippy::large_const_arrays)]\n+#![allow(dead_code)]\n+\n+#[derive(Clone, Copy)]\n+pub struct S {\n+    pub data: [u64; 32],\n+}\n+\n+// Should lint\n+pub(crate) static FOO_PUB_CRATE: [u32; 1_000_000] = [0u32; 1_000_000];\n+pub static FOO_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+static FOO: [u32; 1_000_000] = [0u32; 1_000_000];\n+\n+// Good\n+pub(crate) const G_FOO_PUB_CRATE: [u32; 1_000] = [0u32; 1_000];\n+pub const G_FOO_PUB: [u32; 1_000] = [0u32; 1_000];\n+const G_FOO: [u32; 1_000] = [0u32; 1_000];\n+\n+fn main() {\n+    // Should lint\n+    pub static BAR_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+    static BAR: [u32; 1_000_000] = [0u32; 1_000_000];\n+    pub static BAR_STRUCT_PUB: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+    static BAR_STRUCT: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+    pub static BAR_S_PUB: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+    static BAR_S: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+\n+    // Good\n+    pub const G_BAR_PUB: [u32; 1_000] = [0u32; 1_000];\n+    const G_BAR: [u32; 1_000] = [0u32; 1_000];\n+    pub const G_BAR_STRUCT_PUB: [S; 500] = [S { data: [0; 32] }; 500];\n+    const G_BAR_STRUCT: [S; 500] = [S { data: [0; 32] }; 500];\n+    pub const G_BAR_S_PUB: [Option<&str>; 200] = [Some(\"str\"); 200];\n+    const G_BAR_S: [Option<&str>; 200] = [Some(\"str\"); 200];\n+}"}, {"sha": "a160b9f8ad5b0249adeb8099f4dbcfa40c8abe51", "filename": "tests/ui/large_const_arrays.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ceea3c6a35bfada9536bac674fc6308831f1938c/tests%2Fui%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceea3c6a35bfada9536bac674fc6308831f1938c/tests%2Fui%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_const_arrays.rs?ref=ceea3c6a35bfada9536bac674fc6308831f1938c", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+\n+#![warn(clippy::large_const_arrays)]\n+#![allow(dead_code)]\n+\n+#[derive(Clone, Copy)]\n+pub struct S {\n+    pub data: [u64; 32],\n+}\n+\n+// Should lint\n+pub(crate) const FOO_PUB_CRATE: [u32; 1_000_000] = [0u32; 1_000_000];\n+pub const FOO_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+const FOO: [u32; 1_000_000] = [0u32; 1_000_000];\n+\n+// Good\n+pub(crate) const G_FOO_PUB_CRATE: [u32; 1_000] = [0u32; 1_000];\n+pub const G_FOO_PUB: [u32; 1_000] = [0u32; 1_000];\n+const G_FOO: [u32; 1_000] = [0u32; 1_000];\n+\n+fn main() {\n+    // Should lint\n+    pub const BAR_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+    const BAR: [u32; 1_000_000] = [0u32; 1_000_000];\n+    pub const BAR_STRUCT_PUB: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+    const BAR_STRUCT: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+    pub const BAR_S_PUB: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+    const BAR_S: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+\n+    // Good\n+    pub const G_BAR_PUB: [u32; 1_000] = [0u32; 1_000];\n+    const G_BAR: [u32; 1_000] = [0u32; 1_000];\n+    pub const G_BAR_STRUCT_PUB: [S; 500] = [S { data: [0; 32] }; 500];\n+    const G_BAR_STRUCT: [S; 500] = [S { data: [0; 32] }; 500];\n+    pub const G_BAR_S_PUB: [Option<&str>; 200] = [Some(\"str\"); 200];\n+    const G_BAR_S: [Option<&str>; 200] = [Some(\"str\"); 200];\n+}"}, {"sha": "3fb0acbca67de8225e1df60c6ba873cedd6fdc82", "filename": "tests/ui/large_const_arrays.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/ceea3c6a35bfada9536bac674fc6308831f1938c/tests%2Fui%2Flarge_const_arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceea3c6a35bfada9536bac674fc6308831f1938c/tests%2Fui%2Flarge_const_arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_const_arrays.stderr?ref=ceea3c6a35bfada9536bac674fc6308831f1938c", "patch": "@@ -0,0 +1,76 @@\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:12:1\n+   |\n+LL | pub(crate) const FOO_PUB_CRATE: [u32; 1_000_000] = [0u32; 1_000_000];\n+   | ^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            |\n+   |            help: make this a static item: `static`\n+   |\n+   = note: `-D clippy::large-const-arrays` implied by `-D warnings`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:13:1\n+   |\n+LL | pub const FOO_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+   | ^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:14:1\n+   |\n+LL | const FOO: [u32; 1_000_000] = [0u32; 1_000_000];\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:23:5\n+   |\n+LL |     pub const BAR_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+   |     ^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:24:5\n+   |\n+LL |     const BAR: [u32; 1_000_000] = [0u32; 1_000_000];\n+   |     -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:25:5\n+   |\n+LL |     pub const BAR_STRUCT_PUB: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+   |     ^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:26:5\n+   |\n+LL |     const BAR_STRUCT: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+   |     -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:27:5\n+   |\n+LL |     pub const BAR_S_PUB: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+   |     ^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:28:5\n+   |\n+LL |     const BAR_S: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+   |     -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: make this a static item: `static`\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "d0d9beb9b2d9fa686d907f650dfb55343d62feb0", "filename": "util/lintlib.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceea3c6a35bfada9536bac674fc6308831f1938c/util%2Flintlib.py", "raw_url": "https://github.com/rust-lang/rust/raw/ceea3c6a35bfada9536bac674fc6308831f1938c/util%2Flintlib.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Flintlib.py?ref=ceea3c6a35bfada9536bac674fc6308831f1938c", "patch": "@@ -14,7 +14,7 @@\n group_re = re.compile(r'''\\s*([a-z_][a-z_0-9]+)''')\n conf_re = re.compile(r'''define_Conf! {\\n([^}]*)\\n}''', re.MULTILINE)\n confvar_re = re.compile(\n-    r'''/// Lint: (\\w+)\\. (.*)\\n\\s*\\([^,]+,\\s+\"([^\"]+)\":\\s+([^,]+),\\s+([^\\.\\)]+).*\\),''', re.MULTILINE)\n+    r'''/// Lint: ([\\w,\\s]+)\\. (.*)\\n\\s*\\([^,]+,\\s+\"([^\"]+)\":\\s+([^,]+),\\s+([^\\.\\)]+).*\\),''', re.MULTILINE)\n comment_re = re.compile(r'''\\s*/// ?(.*)''')\n \n lint_levels = {\n@@ -93,9 +93,9 @@ def parse_configs(path):\n     match = re.search(conf_re, contents)\n     confvars = re.findall(confvar_re, match.group(1))\n \n-    for (lint, doc, name, ty, default) in confvars:\n-        configs[lint.lower()] = Config(name.replace(\"_\", \"-\"), ty, doc, default)\n-\n+    for (lints, doc, name, ty, default) in confvars:\n+        for lint in lints.split(','):\n+            configs[lint.strip().lower()] = Config(name.replace(\"_\", \"-\"), ty, doc, default)\n     return configs\n \n "}]}