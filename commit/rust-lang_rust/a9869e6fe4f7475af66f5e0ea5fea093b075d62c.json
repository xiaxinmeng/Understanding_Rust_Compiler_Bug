{"sha": "a9869e6fe4f7475af66f5e0ea5fea093b075d62c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ODY5ZTZmZTRmNzQ3NWFmNjZmNWUwZWE1ZmVhMDkzYjA3NWQ2MmM=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-02T10:44:21Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-02T10:44:21Z"}, "message": "Merge pull request #280 from Manishearth/fx-279\n\nOnly handle ranges starting with 0 for needless_range_loop (fixes #279)", "tree": {"sha": "cf119251d8515a16f2fe3b0a5e6fad62ee41495b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf119251d8515a16f2fe3b0a5e6fad62ee41495b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9869e6fe4f7475af66f5e0ea5fea093b075d62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9869e6fe4f7475af66f5e0ea5fea093b075d62c", "html_url": "https://github.com/rust-lang/rust/commit/a9869e6fe4f7475af66f5e0ea5fea093b075d62c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9869e6fe4f7475af66f5e0ea5fea093b075d62c/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb3b9b35da833bd62704c5cb9cb1985f8dfb5d45", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb3b9b35da833bd62704c5cb9cb1985f8dfb5d45", "html_url": "https://github.com/rust-lang/rust/commit/eb3b9b35da833bd62704c5cb9cb1985f8dfb5d45"}, {"sha": "73c34e12b324038e3c501faf63de1a3d618f22b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/73c34e12b324038e3c501faf63de1a3d618f22b5", "html_url": "https://github.com/rust-lang/rust/commit/73c34e12b324038e3c501faf63de1a3d618f22b5"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "3e1e669ea48f5c5606b7b07133c23c981d693ca2", "filename": "src/loops.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a9869e6fe4f7475af66f5e0ea5fea093b075d62c/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9869e6fe4f7475af66f5e0ea5fea093b075d62c/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=a9869e6fe4f7475af66f5e0ea5fea093b075d62c", "patch": "@@ -37,26 +37,32 @@ impl LintPass for LoopsPass {\n         if let Some((pat, arg, body)) = recover_for_loop(expr) {\n             // check for looping over a range and then indexing a sequence with it\n             // -> the iteratee must be a range literal\n-            if let ExprRange(_, _) = arg.node {\n-                // the var must be a single name\n-                if let PatIdent(_, ref ident, _) = pat.node {\n-                    let mut visitor = VarVisitor { cx: cx, var: ident.node.name,\n-                                                   indexed: HashSet::new(), nonindex: false };\n-                    walk_expr(&mut visitor, body);\n-                    // linting condition: we only indexed one variable\n-                    if visitor.indexed.len() == 1 {\n-                        let indexed = visitor.indexed.into_iter().next().expect(\n-                            \"Len was nonzero, but no contents found\");\n-                        if visitor.nonindex {\n-                            span_lint(cx, NEEDLESS_RANGE_LOOP, expr.span, &format!(\n-                                \"the loop variable `{}` is used to index `{}`. Consider using \\\n-                                 `for ({}, item) in {}.iter().enumerate()` or similar iterators\",\n-                                ident.node.name, indexed, ident.node.name, indexed));\n-                        } else {\n-                            span_lint(cx, NEEDLESS_RANGE_LOOP, expr.span, &format!(\n-                                \"the loop variable `{}` is only used to index `{}`. \\\n-                                 Consider using `for item in &{}` or similar iterators\",\n-                                ident.node.name, indexed, indexed));\n+            if let ExprRange(Some(ref l), _) = arg.node {\n+                // Range should start with `0`\n+                if let ExprLit(ref lit) = l.node {\n+                    if let LitInt(0, _) = lit.node {\n+\n+                        // the var must be a single name\n+                        if let PatIdent(_, ref ident, _) = pat.node {\n+                            let mut visitor = VarVisitor { cx: cx, var: ident.node.name,\n+                                                           indexed: HashSet::new(), nonindex: false };\n+                            walk_expr(&mut visitor, body);\n+                            // linting condition: we only indexed one variable\n+                            if visitor.indexed.len() == 1 {\n+                                let indexed = visitor.indexed.into_iter().next().expect(\n+                                    \"Len was nonzero, but no contents found\");\n+                                if visitor.nonindex {\n+                                    span_lint(cx, NEEDLESS_RANGE_LOOP, expr.span, &format!(\n+                                        \"the loop variable `{}` is used to index `{}`. Consider using \\\n+                                         `for ({}, item) in {}.iter().enumerate()` or similar iterators\",\n+                                        ident.node.name, indexed, ident.node.name, indexed));\n+                                } else {\n+                                    span_lint(cx, NEEDLESS_RANGE_LOOP, expr.span, &format!(\n+                                        \"the loop variable `{}` is only used to index `{}`. \\\n+                                         Consider using `for item in &{}` or similar iterators\",\n+                                        ident.node.name, indexed, indexed));\n+                                }\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "4d0c22fff0b7380a96e99a850abab42a5c9b6ec7", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9869e6fe4f7475af66f5e0ea5fea093b075d62c/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9869e6fe4f7475af66f5e0ea5fea093b075d62c/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=a9869e6fe4f7475af66f5e0ea5fea093b075d62c", "patch": "@@ -30,6 +30,10 @@ fn main() {\n         println!(\"{} {}\", vec[i], vec2[i]);\n     }\n \n+    for i in 5..vec.len() {      // not an error, not starting with 0\n+        println!(\"{}\", vec[i]);\n+    }\n+\n     for _v in vec.iter() { } //~ERROR it is more idiomatic to loop over `&vec`\n     for _v in vec.iter_mut() { } //~ERROR it is more idiomatic to loop over `&mut vec`\n "}]}