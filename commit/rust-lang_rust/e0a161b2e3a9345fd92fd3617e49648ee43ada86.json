{"sha": "e0a161b2e3a9345fd92fd3617e49648ee43ada86", "node_id": "C_kwDOAAsO6NoAKGUwYTE2MWIyZTNhOTM0NWZkOTJmZDM2MTdlNDk2NDhlZTQzYWRhODY", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-03T15:07:34Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-03T15:07:34Z"}, "message": "fix: treat enum variants as generic item on their own", "tree": {"sha": "5e2bf48d4f8b61355b6c724435c6038ad9301228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e2bf48d4f8b61355b6c724435c6038ad9301228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0a161b2e3a9345fd92fd3617e49648ee43ada86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmM6+zIACgkQ4laYqTBY\nYXEADw/8Cr25E5wcGx2URrLCygJ+pYFroesde9jKtD/zwcnW83ZqhiS8LhCDU7sA\nDM76LH9Ne/HCeYSTgVCtws6du4C8ss93cwjLc4SkJ2EER1SZENoeCd9Qodyy09JF\nNKp0qXPTIr62MjY3Rzz4rPuNAuIodyEYX+bmaX2CPNnDGHsY3ASoxPWE5aFBxS5y\niA/nR3Od56YF85dydnYayYrfPJDi6ypFD5Mu+alzta1pYe4stne5Ocwgy8ZwcoSC\nEFKQvBmQuXryHztctz92IYUtQaJJcnDA5GHIiz+1FV5svjVZp9JiYEfICgWeYV90\nFoIem5xPRzVc6gwgsXBqMz0v/Fg8MAV1mTSXH1I+uiU/+ogLBbHzL8WJtJPrdSo1\nOFHri896IG/akDqpZrQDvfSmIQo3LZfD0yuHzCvbnOT6bERygde0NRZBzaPzFv2w\ncYrP89YWWWRyIzGe61N+LBXQ5+up7pBmsJkaXGd/m5Yd+fhPJtXnDgxWTqhie0I8\n9qNBne4C6GhLNh1b0qLf/taYe+iBkITTe2YWabaRjqF9zk8c6r4RrIbhbMdCEd0O\n8582IcB6oNEz5p33pUXvS12+ElV8b7szvhWTdH+8oyeqReHCTRx+9dd2RFHEkJn7\nR7aSBFZI3YSpaFXBMBzBC2g3wVIZJDSCOdKxbPOgAiyhsPDN/h8=\n=7QRA\n-----END PGP SIGNATURE-----", "payload": "tree 5e2bf48d4f8b61355b6c724435c6038ad9301228\nparent 7556f74b1691276d12e4cf96eb2df8f74836cdc1\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1664809654 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1664809654 +0900\n\nfix: treat enum variants as generic item on their own\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a161b2e3a9345fd92fd3617e49648ee43ada86", "html_url": "https://github.com/rust-lang/rust/commit/e0a161b2e3a9345fd92fd3617e49648ee43ada86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0a161b2e3a9345fd92fd3617e49648ee43ada86/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7556f74b1691276d12e4cf96eb2df8f74836cdc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7556f74b1691276d12e4cf96eb2df8f74836cdc1", "html_url": "https://github.com/rust-lang/rust/commit/7556f74b1691276d12e4cf96eb2df8f74836cdc1"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "9ae752556d890df8161c55ea7f937f2fec581aa1", "filename": "crates/hir-ty/src/builder.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0a161b2e3a9345fd92fd3617e49648ee43ada86/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0a161b2e3a9345fd92fd3617e49648ee43ada86/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs?ref=e0a161b2e3a9345fd92fd3617e49648ee43ada86", "patch": "@@ -192,9 +192,7 @@ impl TyBuilder<()> {\n         parent_subst: Option<Substitution>,\n     ) -> TyBuilder<()> {\n         let generics = generics(db.upcast(), def.into());\n-        // FIXME: this assertion should hold but some adjustment around\n-        // `ValueTyDefId::EnumVariantId` is needed.\n-        // assert!(generics.parent_generics().is_some() == parent_subst.is_some());\n+        assert!(generics.parent_generics().is_some() == parent_subst.is_some());\n         let params = generics\n             .iter_self()\n             .map(|(id, data)| match data {"}, {"sha": "a77dd910ff7143cbb08b9069656d7b5ca0b30e3d", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e0a161b2e3a9345fd92fd3617e49648ee43ada86/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0a161b2e3a9345fd92fd3617e49648ee43ada86/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=e0a161b2e3a9345fd92fd3617e49648ee43ada86", "patch": "@@ -653,22 +653,26 @@ impl<'a> TyLoweringContext<'a> {\n         infer_args: bool,\n     ) -> Substitution {\n         let last = path.segments().last().expect(\"path should have at least one segment\");\n-        let generic_def = resolved.to_generic_def_id();\n-        let segment = match resolved {\n-            ValueTyDefId::EnumVariantId(_) => {\n+        let (segment, generic_def) = match resolved {\n+            ValueTyDefId::FunctionId(it) => (last, Some(it.into())),\n+            ValueTyDefId::StructId(it) => (last, Some(it.into())),\n+            ValueTyDefId::UnionId(it) => (last, Some(it.into())),\n+            ValueTyDefId::ConstId(it) => (last, Some(it.into())),\n+            ValueTyDefId::StaticId(_) => (last, None),\n+            ValueTyDefId::EnumVariantId(var) => {\n                 // the generic args for an enum variant may be either specified\n                 // on the segment referring to the enum, or on the segment\n                 // referring to the variant. So `Option::<T>::None` and\n                 // `Option::None::<T>` are both allowed (though the former is\n                 // preferred). See also `def_ids_for_path_segments` in rustc.\n                 let len = path.segments().len();\n                 let penultimate = len.checked_sub(2).and_then(|idx| path.segments().get(idx));\n-                match penultimate {\n+                let segment = match penultimate {\n                     Some(segment) if segment.args_and_bindings.is_some() => segment,\n                     _ => last,\n-                }\n+                };\n+                (segment, Some(var.parent.into()))\n             }\n-            _ => last,\n         };\n         self.substs_from_path_segment(segment, generic_def, infer_args, None)\n     }\n@@ -1660,7 +1664,7 @@ impl ValueTyDefId {\n             Self::FunctionId(id) => Some(id.into()),\n             Self::StructId(id) => Some(id.into()),\n             Self::UnionId(id) => Some(id.into()),\n-            Self::EnumVariantId(var) => Some(var.parent.into()),\n+            Self::EnumVariantId(var) => Some(var.into()),\n             Self::ConstId(id) => Some(id.into()),\n             Self::StaticId(_) => None,\n         }"}]}