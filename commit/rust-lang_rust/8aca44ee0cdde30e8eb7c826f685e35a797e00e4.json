{"sha": "8aca44ee0cdde30e8eb7c826f685e35a797e00e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhY2E0NGVlMGNkZGUzMGU4ZWI3YzgyNmY2ODVlMzVhNzk3ZTAwZTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-29T20:59:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-29T21:28:37Z"}, "message": "core: Don't normalize paths by default. Add a normalize method", "tree": {"sha": "f48054f0eb750cce0623699ccc4f637230e465bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f48054f0eb750cce0623699ccc4f637230e465bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aca44ee0cdde30e8eb7c826f685e35a797e00e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aca44ee0cdde30e8eb7c826f685e35a797e00e4", "html_url": "https://github.com/rust-lang/rust/commit/8aca44ee0cdde30e8eb7c826f685e35a797e00e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aca44ee0cdde30e8eb7c826f685e35a797e00e4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd12188c0765e095e8bed00864f30de15e884c33", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd12188c0765e095e8bed00864f30de15e884c33", "html_url": "https://github.com/rust-lang/rust/commit/fd12188c0765e095e8bed00864f30de15e884c33"}], "stats": {"total": 77, "additions": 52, "deletions": 25}, "files": [{"sha": "9afa3d830a313b1667406714317f79b72d7846d0", "filename": "src/libcore/path.rs", "status": "modified", "additions": 47, "deletions": 22, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/8aca44ee0cdde30e8eb7c826f685e35a797e00e4/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aca44ee0cdde30e8eb7c826f685e35a797e00e4/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=8aca44ee0cdde30e8eb7c826f685e35a797e00e4", "patch": "@@ -32,6 +32,8 @@ trait GenericPath {\n     pure fn push_rel((&self)) -> self;\n     pure fn push_many((&[~str])) -> self;\n     pure fn pop() -> self;\n+\n+    pure fn normalize() -> self;\n }\n \n #[cfg(windows)]\n@@ -68,7 +70,7 @@ impl PosixPath : GenericPath {\n         let mut components = str::split_nonempty(s, |c| c == '/');\n         let is_absolute = (s.len() != 0 && s[0] == '/' as u8);\n         return PosixPath { is_absolute: is_absolute,\n-                           components: normalize(components) }\n+                           components: components }\n     }\n \n     pure fn dirname() -> ~str {\n@@ -175,14 +177,13 @@ impl PosixPath : GenericPath {\n     }\n \n     pure fn push_many(cs: &[~str]) -> PosixPath {\n-        return PosixPath { components: normalize(self.components + cs),\n+        return PosixPath { components: self.components + cs,\n                            ..self }\n     }\n \n     pure fn push(s: &str) -> PosixPath {\n         let mut cs = self.components;\n         unchecked { vec::push(cs, move str::from_slice(s)); }\n-        cs = normalize(cs);\n         return PosixPath { components: move cs,\n                            ..self }\n     }\n@@ -194,6 +195,13 @@ impl PosixPath : GenericPath {\n         }\n         return PosixPath { components: move cs, ..self }\n     }\n+\n+    pure fn normalize() -> PosixPath {\n+        return PosixPath {\n+            components: normalize(self.components),\n+            ..self\n+        }\n+    }\n }\n \n \n@@ -251,7 +259,7 @@ impl WindowsPath : GenericPath {\n         return WindowsPath { host: host,\n                              device: device,\n                              is_absolute: is_absolute,\n-                             components: normalize(components) }\n+                             components: components }\n     }\n \n     pure fn dirname() -> ~str {\n@@ -358,14 +366,13 @@ impl WindowsPath : GenericPath {\n     }\n \n     pure fn push_many(cs: &[~str]) -> WindowsPath {\n-        return WindowsPath { components: normalize(self.components + cs),\n+        return WindowsPath { components: self.components + cs,\n                             ..self }\n     }\n \n     pure fn push(s: &str) -> WindowsPath {\n         let mut cs = self.components;\n         unchecked { vec::push(cs, move str::from_slice(s)); }\n-        cs = normalize(cs);\n         return WindowsPath { components: move cs,\n                              ..self }\n     }\n@@ -377,6 +384,13 @@ impl WindowsPath : GenericPath {\n         }\n         return WindowsPath { components: move cs, ..self }\n     }\n+\n+    pure fn normalize() -> WindowsPath {\n+        return WindowsPath {\n+            components: normalize(self.components),\n+            ..self\n+        }\n+    }\n }\n \n \n@@ -399,19 +413,22 @@ pure fn normalize(components: &[~str]) -> ~[~str] {\n \n mod posix {\n \n-    #[test]\n-    fn test_posix_paths() {\n-        fn mk(s: &str) -> PosixPath { from_str::<PosixPath>(s) }\n-        fn t(wp: &PosixPath, s: &str) {\n-            let ss = wp.to_str();\n-            let sss = str::from_slice(s);\n-            if (ss != sss) {\n-                debug!(\"got %s\", ss);\n-                debug!(\"expected %s\", sss);\n-                assert ss == sss;\n-            }\n+    #[cfg(test)]\n+    fn mk(s: &str) -> PosixPath { from_str::<PosixPath>(s) }\n+\n+    #[cfg(test)]\n+    fn t(wp: &PosixPath, s: &str) {\n+        let ss = wp.to_str();\n+        let sss = str::from_slice(s);\n+        if (ss != sss) {\n+            debug!(\"got %s\", ss);\n+            debug!(\"expected %s\", sss);\n+            assert ss == sss;\n         }\n+    }\n \n+    #[test]\n+    fn test_posix_paths() {\n         t(&(mk(\"hi\")), \"hi\");\n         t(&(mk(\"/lib\")), \"/lib\");\n         t(&(mk(\"hi/there\")), \"hi/there\");\n@@ -425,13 +442,10 @@ mod posix {\n             .with_dirname(\"hi\")), \"hi/there.txt\");\n \n         t(&(mk(\"hi/there.txt\")\n-            .with_dirname(\".\")), \"there.txt\");\n-\n-        t(&(mk(\"a/b/../c/././/../foo.txt/\")),\n-          \"a/foo.txt\");\n+            .with_dirname(\".\")), \"./there.txt\");\n \n         t(&(mk(\"a/b/c\")\n-            .push(\"..\")), \"a/b\");\n+            .push(\"..\")), \"a/b/c/..\");\n \n         t(&(mk(\"there.txt\")\n             .with_filetype(\"o\")), \"there.o\");\n@@ -461,6 +475,17 @@ mod posix {\n \n     }\n \n+    #[test]\n+    fn test_normalize() {\n+        t(&(mk(\"hi/there.txt\")\n+            .with_dirname(\".\").normalize()), \"there.txt\");\n+\n+        t(&(mk(\"a/b/../c/././/../foo.txt/\").normalize()),\n+          \"a/foo.txt\");\n+\n+        t(&(mk(\"a/b/c\")\n+            .push(\"..\").normalize()), \"a/b\");\n+    }\n }\n \n // Various windows helpers, and tests for the impl."}, {"sha": "fa02b617606d809b094ffcf582f966b282e5bac1", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8aca44ee0cdde30e8eb7c826f685e35a797e00e4/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aca44ee0cdde30e8eb7c826f685e35a797e00e4/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=8aca44ee0cdde30e8eb7c826f685e35a797e00e4", "patch": "@@ -117,6 +117,8 @@ fn get_rpath_relative_to_output(os: session::os,\n fn get_relative_to(abs1: &Path, abs2: &Path) -> Path {\n     assert abs1.is_absolute;\n     assert abs2.is_absolute;\n+    let abs1 = abs1.normalize();\n+    let abs2 = abs2.normalize();\n     debug!(\"finding relative path from %s to %s\",\n            abs1.to_str(), abs2.to_str());\n     let split1 = abs1.components;\n@@ -295,7 +297,7 @@ mod test {\n       let o = session::os_linux;\n       let res = get_rpath_relative_to_output(o,\n             &Path(\"bin/rustc\"), &Path(\"lib/libstd.so\"));\n-      assert res == Path(\"$ORIGIN/../lib\");\n+      assert res.to_str() == ~\"$ORIGIN/../lib\";\n     }\n \n     #[test]\n@@ -304,7 +306,7 @@ mod test {\n         let o = session::os_freebsd;\n         let res = get_rpath_relative_to_output(o,\n             &Path(\"bin/rustc\"), &Path(\"lib/libstd.so\"));\n-        assert res == Path(\"$ORIGIN/../lib\");\n+        assert res.to_str() == ~\"$ORIGIN/../lib\";\n     }\n \n     #[test]\n@@ -315,7 +317,7 @@ mod test {\n         let res = get_rpath_relative_to_output(o,\n                                                &Path(\"bin/rustc\"),\n                                                &Path(\"lib/libstd.so\"));\n-        assert res == Path(\"@executable_path/../lib\");\n+        assert res.to_str() == ~\"@executable_path/../lib\";\n     }\n \n     #[test]"}]}