{"sha": "6e22c0a8e1799e0d14f4845060f6857d8921b283", "node_id": "C_kwDOAAsO6NoAKDZlMjJjMGE4ZTE3OTllMGQxNGY0ODQ1MDYwZjY4NTdkODkyMWIyODM", "commit": {"author": {"name": "Ellis Hoag", "email": "ellis.sparky.hoag@gmail.com", "date": "2022-09-12T00:34:51Z"}, "committer": {"name": "Ellis Hoag", "email": "ellis.sparky.hoag@gmail.com", "date": "2022-09-24T17:25:19Z"}, "message": "impl SessionDiagnostic for LayoutError and Spanned<T>", "tree": {"sha": "3de0f7df487e8f5f062187deaf4c5ddbe78847aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3de0f7df487e8f5f062187deaf4c5ddbe78847aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e22c0a8e1799e0d14f4845060f6857d8921b283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e22c0a8e1799e0d14f4845060f6857d8921b283", "html_url": "https://github.com/rust-lang/rust/commit/6e22c0a8e1799e0d14f4845060f6857d8921b283", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e22c0a8e1799e0d14f4845060f6857d8921b283/comments", "author": {"login": "ellishg", "id": 8961915, "node_id": "MDQ6VXNlcjg5NjE5MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8961915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ellishg", "html_url": "https://github.com/ellishg", "followers_url": "https://api.github.com/users/ellishg/followers", "following_url": "https://api.github.com/users/ellishg/following{/other_user}", "gists_url": "https://api.github.com/users/ellishg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ellishg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ellishg/subscriptions", "organizations_url": "https://api.github.com/users/ellishg/orgs", "repos_url": "https://api.github.com/users/ellishg/repos", "events_url": "https://api.github.com/users/ellishg/events{/privacy}", "received_events_url": "https://api.github.com/users/ellishg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ellishg", "id": 8961915, "node_id": "MDQ6VXNlcjg5NjE5MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8961915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ellishg", "html_url": "https://github.com/ellishg", "followers_url": "https://api.github.com/users/ellishg/followers", "following_url": "https://api.github.com/users/ellishg/following{/other_user}", "gists_url": "https://api.github.com/users/ellishg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ellishg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ellishg/subscriptions", "organizations_url": "https://api.github.com/users/ellishg/orgs", "repos_url": "https://api.github.com/users/ellishg/repos", "events_url": "https://api.github.com/users/ellishg/events{/privacy}", "received_events_url": "https://api.github.com/users/ellishg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "249e46bfbae66d18a96771dd2c3bdaf0f8fc25b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/249e46bfbae66d18a96771dd2c3bdaf0f8fc25b4", "html_url": "https://github.com/rust-lang/rust/commit/249e46bfbae66d18a96771dd2c3bdaf0f8fc25b4"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "14de0cee28e9d12ef9ec2fac0295a1772b32b76d", "filename": "compiler/rustc_codegen_gcc/src/context.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6e22c0a8e1799e0d14f4845060f6857d8921b283/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e22c0a8e1799e0d14f4845060f6857d8921b283/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs?ref=6e22c0a8e1799e0d14f4845060f6857d8921b283", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::mir::mono::CodegenUnit;\n use rustc_middle::ty::{self, Instance, ParamEnv, PolyExistentialTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::layout::{FnAbiError, FnAbiOfHelpers, FnAbiRequest, HasParamEnv, HasTyCtxt, LayoutError, TyAndLayout, LayoutOfHelpers};\n use rustc_session::Session;\n-use rustc_span::Span;\n+use rustc_span::{Span, source_map::respan};\n use rustc_target::abi::{call::FnAbi, HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n use rustc_target::spec::{HasTargetSpec, Target, TlsModel};\n \n@@ -478,6 +478,23 @@ impl<'gcc, 'tcx> LayoutOfHelpers<'tcx> for CodegenCx<'gcc, 'tcx> {\n     #[inline]\n     fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n         if let LayoutError::SizeOverflow(_) = err {\n+            let _ = respan(span, err);\n+            //             error: lifetime may not live long enough\n+            //    --> src/context.rs:483:13\n+            //     |\n+            // 475 | impl<'gcc, 'tcx> LayoutOfHelpers<'tcx> for CodegenCx<'gcc, 'tcx> {\n+            //     |      ----  ---- lifetime `'tcx` defined here\n+            //     |      |\n+            //     |      lifetime `'gcc` defined here\n+            // ...\n+            // 483 |             self.sess().emit_fatal(respan(span, err))\n+            //     |             ^^^^^^^^^^^ argument requires that `'gcc` must outlive `'tcx`\n+            //     |\n+            //     = help: consider adding the following bound: `'gcc: 'tcx`\n+            //     = note: requirement occurs because of the type `CodegenCx<'_, '_>`, which makes the generic argument `'_` invariant\n+            //     = note: the struct `CodegenCx<'gcc, 'tcx>` is invariant over the parameter `'gcc`\n+            //     = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n+            // self.sess().emit_fatal(respan(span, err))\n             self.sess().emit_fatal(LayoutSizeOverflow { span, error: err.to_string() })\n         } else {\n             span_bug!(span, \"failed to get layout for `{}`: {}\", ty, err)"}, {"sha": "322841888889df780537e403e517b262e921100d", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e22c0a8e1799e0d14f4845060f6857d8921b283/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e22c0a8e1799e0d14f4845060f6857d8921b283/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=6e22c0a8e1799e0d14f4845060f6857d8921b283", "patch": "@@ -7,12 +7,15 @@ use crate::ty::{\n };\n use rustc_ast as ast;\n use rustc_attr as attr;\n+use rustc_errors::Handler;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_session::{config::OptLevel, DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+use rustc_session::{\n+    config::OptLevel, DataTypeKind, FieldInfo, SessionDiagnostic, SizeKind, VariantInfo,\n+};\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::call::{\n@@ -206,6 +209,12 @@ pub enum LayoutError<'tcx> {\n     NormalizationFailure(Ty<'tcx>, NormalizationError<'tcx>),\n }\n \n+impl<'a> SessionDiagnostic<'a, !> for LayoutError<'a> {\n+    fn into_diagnostic(self, handler: &'a Handler) -> rustc_errors::DiagnosticBuilder<'a, !> {\n+        handler.struct_fatal(self.to_string())\n+    }\n+}\n+\n impl<'tcx> fmt::Display for LayoutError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {"}, {"sha": "21c1ff999f6654046d0329be4db10bf22454cca7", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6e22c0a8e1799e0d14f4845060f6857d8921b283/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e22c0a8e1799e0d14f4845060f6857d8921b283/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=6e22c0a8e1799e0d14f4845060f6857d8921b283", "patch": "@@ -33,7 +33,7 @@ use rustc_errors::{\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n use rustc_span::edition::Edition;\n-use rustc_span::source_map::{FileLoader, RealFileLoader, SourceMap, Span};\n+use rustc_span::source_map::{FileLoader, RealFileLoader, SourceMap, Span, Spanned};\n use rustc_span::{sym, SourceFileHashAlgorithm, Symbol};\n use rustc_target::asm::InlineAsmArch;\n use rustc_target::spec::{CodeModel, PanicStrategy, RelocModel, RelroLevel};\n@@ -223,6 +223,27 @@ pub struct PerfStats {\n     pub normalize_projection_ty: AtomicUsize,\n }\n \n+/// Trait implemented by error types. This should not be implemented manually. Instead, use\n+/// `#[derive(SessionDiagnostic)]` -- see [rustc_macros::SessionDiagnostic].\n+#[rustc_diagnostic_item = \"SessionDiagnostic\"]\n+pub trait SessionDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n+    /// Write out as a diagnostic out of `Handler`.\n+    #[must_use]\n+    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, T>;\n+}\n+\n+impl<'a, T, E> SessionDiagnostic<'a, E> for Spanned<T>\n+where\n+    T: SessionDiagnostic<'a, E>,\n+    E: EmissionGuarantee,\n+{\n+    fn into_diagnostic(self, handler: &'a Handler) -> rustc_errors::DiagnosticBuilder<'a, E> {\n+        let mut diag = self.node.into_diagnostic(handler);\n+        diag.set_span(self.span);\n+        diag\n+    }\n+}\n+\n impl Session {\n     pub fn miri_unleashed_feature(&self, span: Span, feature_gate: Option<Symbol>) {\n         self.miri_unleashed_features.lock().push((span, feature_gate));"}]}