{"sha": "b84bdf1dae14a935a26cc3860f389242a85a1215", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NGJkZjFkYWUxNGE5MzVhMjZjYzM4NjBmMzg5MjQyYTg1YTEyMTU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-25T22:19:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T17:51:37Z"}, "message": "Access attrs directly from HirId in rustc_lint::late.", "tree": {"sha": "404bff45bd33e3f4013b1ab3508901d85c773dcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/404bff45bd33e3f4013b1ab3508901d85c773dcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b84bdf1dae14a935a26cc3860f389242a85a1215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b84bdf1dae14a935a26cc3860f389242a85a1215", "html_url": "https://github.com/rust-lang/rust/commit/b84bdf1dae14a935a26cc3860f389242a85a1215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b84bdf1dae14a935a26cc3860f389242a85a1215/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a21af67e3770f413afea9e74fb4a29540d6c85d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a21af67e3770f413afea9e74fb4a29540d6c85d", "html_url": "https://github.com/rust-lang/rust/commit/4a21af67e3770f413afea9e74fb4a29540d6c85d"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "e6b4a418309d66708474b6df60124fca781a3605", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b84bdf1dae14a935a26cc3860f389242a85a1215/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b84bdf1dae14a935a26cc3860f389242a85a1215/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=b84bdf1dae14a935a26cc3860f389242a85a1215", "patch": "@@ -53,10 +53,11 @@ impl<'tcx, T: LateLintPass<'tcx>> LateContextAndPass<'tcx, T> {\n     /// Merge the lints specified by any lint attributes into the\n     /// current lint context, call the provided function, then reset the\n     /// lints in effect to their previous state.\n-    fn with_lint_attrs<F>(&mut self, id: hir::HirId, attrs: &'tcx [ast::Attribute], f: F)\n+    fn with_lint_attrs<F>(&mut self, id: hir::HirId, f: F)\n     where\n         F: FnOnce(&mut Self),\n     {\n+        let attrs = self.context.tcx.hir().attrs(id);\n         let prev = self.context.last_node_with_lint_attrs;\n         self.context.last_node_with_lint_attrs = id;\n         self.enter_attrs(attrs);\n@@ -125,7 +126,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        self.with_lint_attrs(param.hir_id, &param.attrs, |cx| {\n+        self.with_lint_attrs(param.hir_id, |cx| {\n             lint_callback!(cx, check_param, param);\n             hir_visit::walk_param(cx, param);\n         });\n@@ -142,7 +143,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         self.context.generics = it.kind.generics();\n         let old_cached_typeck_results = self.context.cached_typeck_results.take();\n         let old_enclosing_body = self.context.enclosing_body.take();\n-        self.with_lint_attrs(it.hir_id(), &it.attrs, |cx| {\n+        self.with_lint_attrs(it.hir_id(), |cx| {\n             cx.with_param_env(it.hir_id(), |cx| {\n                 lint_callback!(cx, check_item, it);\n                 hir_visit::walk_item(cx, it);\n@@ -155,7 +156,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {\n-        self.with_lint_attrs(it.hir_id(), &it.attrs, |cx| {\n+        self.with_lint_attrs(it.hir_id(), |cx| {\n             cx.with_param_env(it.hir_id(), |cx| {\n                 lint_callback!(cx, check_foreign_item, it);\n                 hir_visit::walk_foreign_item(cx, it);\n@@ -170,19 +171,17 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n-        self.with_lint_attrs(e.hir_id, &e.attrs, |cx| {\n+        self.with_lint_attrs(e.hir_id, |cx| {\n             lint_callback!(cx, check_expr, e);\n             hir_visit::walk_expr(cx, e);\n             lint_callback!(cx, check_expr_post, e);\n         })\n     }\n \n     fn visit_stmt(&mut self, s: &'tcx hir::Stmt<'tcx>) {\n-        let get_item = |id: hir::ItemId| self.context.tcx.hir().item(id);\n-        let attrs = &s.kind.attrs(get_item);\n         // See `EarlyContextAndPass::visit_stmt` for an explanation\n         // of why we call `walk_stmt` outside of `with_lint_attrs`\n-        self.with_lint_attrs(s.hir_id, attrs, |cx| {\n+        self.with_lint_attrs(s.hir_id, |cx| {\n             lint_callback!(cx, check_stmt, s);\n         });\n         hir_visit::walk_stmt(self, s);\n@@ -222,7 +221,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n-        self.with_lint_attrs(s.hir_id, &s.attrs, |cx| {\n+        self.with_lint_attrs(s.hir_id, |cx| {\n             lint_callback!(cx, check_struct_field, s);\n             hir_visit::walk_struct_field(cx, s);\n         })\n@@ -234,7 +233,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         g: &'tcx hir::Generics<'tcx>,\n         item_id: hir::HirId,\n     ) {\n-        self.with_lint_attrs(v.id, &v.attrs, |cx| {\n+        self.with_lint_attrs(v.id, |cx| {\n             lint_callback!(cx, check_variant, v);\n             hir_visit::walk_variant(cx, v, g, item_id);\n             lint_callback!(cx, check_variant_post, v);\n@@ -257,7 +256,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {\n-        self.with_lint_attrs(l.hir_id, &l.attrs, |cx| {\n+        self.with_lint_attrs(l.hir_id, |cx| {\n             lint_callback!(cx, check_local, l);\n             hir_visit::walk_local(cx, l);\n         })\n@@ -301,7 +300,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         let generics = self.context.generics.take();\n         self.context.generics = Some(&trait_item.generics);\n-        self.with_lint_attrs(trait_item.hir_id(), &trait_item.attrs, |cx| {\n+        self.with_lint_attrs(trait_item.hir_id(), |cx| {\n             cx.with_param_env(trait_item.hir_id(), |cx| {\n                 lint_callback!(cx, check_trait_item, trait_item);\n                 hir_visit::walk_trait_item(cx, trait_item);\n@@ -314,7 +313,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         let generics = self.context.generics.take();\n         self.context.generics = Some(&impl_item.generics);\n-        self.with_lint_attrs(impl_item.hir_id(), &impl_item.attrs, |cx| {\n+        self.with_lint_attrs(impl_item.hir_id(), |cx| {\n             cx.with_param_env(impl_item.hir_id(), |cx| {\n                 lint_callback!(cx, check_impl_item, impl_item);\n                 hir_visit::walk_impl_item(cx, impl_item);\n@@ -440,7 +439,7 @@ fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T)\n     let mut cx = LateContextAndPass { context, pass };\n \n     // Visit the whole crate.\n-    cx.with_lint_attrs(hir::CRATE_HIR_ID, &krate.item.attrs, |cx| {\n+    cx.with_lint_attrs(hir::CRATE_HIR_ID, |cx| {\n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n         lint_callback!(cx, check_crate, krate);"}]}