{"sha": "e9e1900af7eea8ec67fdc763291a085323b6c7af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZTE5MDBhZjdlZWE4ZWM2N2ZkYzc2MzI5MWEwODUzMjNiNmM3YWY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T10:07:14Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:43Z"}, "message": "Use () for plugin_registrar_fn.", "tree": {"sha": "1555ba17685b26426682b080386d63f8606b6de4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1555ba17685b26426682b080386d63f8606b6de4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9e1900af7eea8ec67fdc763291a085323b6c7af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e1900af7eea8ec67fdc763291a085323b6c7af", "html_url": "https://github.com/rust-lang/rust/commit/e9e1900af7eea8ec67fdc763291a085323b6c7af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9e1900af7eea8ec67fdc763291a085323b6c7af/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "url": "https://api.github.com/repos/rust-lang/rust/commits/829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "html_url": "https://github.com/rust-lang/rust/commit/829a9d33a9f08ecdf52f95b07da5e355c3d3966d"}], "stats": {"total": 57, "additions": 20, "deletions": 37}, "files": [{"sha": "7cae637a49d340647b77398f564fc532387204d8", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=e9e1900af7eea8ec67fdc763291a085323b6c7af", "patch": "@@ -137,8 +137,8 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n         reachable_non_generics.insert(id, SymbolExportLevel::C);\n     }\n \n-    if let Some(id) = tcx.plugin_registrar_fn(LOCAL_CRATE) {\n-        reachable_non_generics.insert(id, SymbolExportLevel::C);\n+    if let Some(id) = tcx.plugin_registrar_fn(()) {\n+        reachable_non_generics.insert(id.to_def_id(), SymbolExportLevel::C);\n     }\n \n     reachable_non_generics"}, {"sha": "948aad966fafc11a9f3cab7f581eef9942c24a44", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=e9e1900af7eea8ec67fdc763291a085323b6c7af", "patch": "@@ -822,9 +822,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n             {\n                 entry_point = sess.time(\"looking_for_entry_point\", || tcx.entry_fn(()));\n \n-                sess.time(\"looking_for_plugin_registrar\", || {\n-                    plugin::build::find_plugin_registrar(tcx)\n-                });\n+                sess.time(\"looking_for_plugin_registrar\", || tcx.ensure().plugin_registrar_fn(()));\n \n                 sess.time(\"looking_for_derive_registrar\", || proc_macro_decls::find(tcx));\n "}, {"sha": "6975ecef1c26261794eafaecf30dba5963ccd80a", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e9e1900af7eea8ec67fdc763291a085323b6c7af", "patch": "@@ -185,11 +185,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     native_libraries => { Lrc::new(cdata.get_native_libraries(tcx.sess)) }\n     foreign_modules => { cdata.get_foreign_modules(tcx) }\n-    plugin_registrar_fn => {\n-        cdata.root.plugin_registrar_fn.map(|index| {\n-            DefId { krate: def_id.krate, index }\n-        })\n-    }\n     proc_macro_decls_static => {\n         cdata.root.proc_macro_data.as_ref().map(|data| {\n             DefId {"}, {"sha": "55b6672afb9f01808130d18ec0bff347ebe57612", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=e9e1900af7eea8ec67fdc763291a085323b6c7af", "patch": "@@ -653,7 +653,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),\n             has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),\n             has_default_lib_allocator,\n-            plugin_registrar_fn: tcx.plugin_registrar_fn(LOCAL_CRATE).map(|id| id.index),\n             proc_macro_data,\n             compiler_builtins: tcx.sess.contains_name(&attrs, sym::compiler_builtins),\n             needs_allocator: tcx.sess.contains_name(&attrs, sym::needs_allocator),"}, {"sha": "d67dc362391a3e30c4d0e37f373da483bc738a49", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=e9e1900af7eea8ec67fdc763291a085323b6c7af", "patch": "@@ -209,7 +209,6 @@ crate struct CrateRoot<'tcx> {\n     has_global_allocator: bool,\n     has_panic_handler: bool,\n     has_default_lib_allocator: bool,\n-    plugin_registrar_fn: Option<DefIndex>,\n \n     crate_deps: Lazy<[CrateDep]>,\n     dylib_dependency_formats: Lazy<[Option<LinkagePreference>]>,"}, {"sha": "e1d56311ae1805e9ccaa2f9cb6ebbe41e8947f88", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=e9e1900af7eea8ec67fdc763291a085323b6c7af", "patch": "@@ -1204,7 +1204,7 @@ rustc_queries! {\n     query entry_fn(_: ()) -> Option<(DefId, EntryFnType)> {\n         desc { \"looking up the entry function of a crate\" }\n     }\n-    query plugin_registrar_fn(_: CrateNum) -> Option<DefId> {\n+    query plugin_registrar_fn(_: ()) -> Option<LocalDefId> {\n         desc { \"looking up the plugin registrar for a crate\" }\n     }\n     query proc_macro_decls_static(_: CrateNum) -> Option<DefId> {"}, {"sha": "b95c4a720195a4daabdf7627aae16c74e37fb4c9", "filename": "compiler/rustc_plugin_impl/src/build.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_plugin_impl%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_plugin_impl%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_plugin_impl%2Fsrc%2Fbuild.rs?ref=e9e1900af7eea8ec67fdc763291a085323b6c7af", "patch": "@@ -1,7 +1,7 @@\n //! Used by `rustc` when compiling a plugin crate.\n \n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n@@ -31,33 +31,25 @@ impl<'v, 'tcx> ItemLikeVisitor<'v> for RegistrarFinder<'tcx> {\n }\n \n /// Finds the function marked with `#[plugin_registrar]`, if any.\n-pub fn find_plugin_registrar(tcx: TyCtxt<'_>) -> Option<DefId> {\n-    tcx.plugin_registrar_fn(LOCAL_CRATE)\n-}\n-\n-fn plugin_registrar_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<DefId> {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n+fn plugin_registrar_fn(tcx: TyCtxt<'_>, (): ()) -> Option<LocalDefId> {\n     let mut finder = RegistrarFinder { tcx, registrars: Vec::new() };\n     tcx.hir().krate().visit_all_item_likes(&mut finder);\n \n-    match finder.registrars.len() {\n-        0 => None,\n-        1 => {\n-            let (def_id, _) = finder.registrars.pop().unwrap();\n-            Some(def_id.to_def_id())\n-        }\n-        _ => {\n-            let diagnostic = tcx.sess.diagnostic();\n-            let mut e = diagnostic.struct_err(\"multiple plugin registration functions found\");\n-            for &(_, span) in &finder.registrars {\n-                e.span_note(span, \"one is here\");\n-            }\n-            e.emit();\n-            diagnostic.abort_if_errors();\n-            unreachable!();\n+    let (def_id, span) = finder.registrars.pop()?;\n+\n+    if !finder.registrars.is_empty() {\n+        let diagnostic = tcx.sess.diagnostic();\n+        let mut e = diagnostic.struct_err(\"multiple plugin registration functions found\");\n+        e.span_note(span, \"one is here\");\n+        for &(_, span) in &finder.registrars {\n+            e.span_note(span, \"one is here\");\n         }\n+        e.emit();\n+        diagnostic.abort_if_errors();\n+        unreachable!();\n     }\n+\n+    Some(def_id)\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "afb83d08e62015cb0cebeb68b011d83591bc8cbd", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e1900af7eea8ec67fdc763291a085323b6c7af/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=e9e1900af7eea8ec67fdc763291a085323b6c7af", "patch": "@@ -165,7 +165,7 @@ fn compute_symbol_name(\n \n     // FIXME(eddyb) Precompute a custom symbol name based on attributes.\n     let is_foreign = if let Some(def_id) = def_id.as_local() {\n-        if tcx.plugin_registrar_fn(LOCAL_CRATE) == Some(def_id.to_def_id()) {\n+        if tcx.plugin_registrar_fn(()) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n             return tcx.sess.generate_plugin_registrar_symbol(disambiguator);\n         }"}]}