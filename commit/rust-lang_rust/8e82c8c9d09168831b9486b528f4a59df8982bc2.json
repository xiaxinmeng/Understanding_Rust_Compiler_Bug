{"sha": "8e82c8c9d09168831b9486b528f4a59df8982bc2", "node_id": "C_kwDOAAsO6NoAKDhlODJjOGM5ZDA5MTY4ODMxYjk0ODZiNTI4ZjRhNTlkZjg5ODJiYzI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-14T17:24:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-14T17:24:44Z"}, "message": "Rollup merge of #108044 - RalfJung:from-addr-invalid, r=oli-obk\n\ninterpret: rename Pointer::from_addr \u2192 from_addr_invalid\n\nThis function corresponds to `ptr::invalid` in the standard library; the previous name was not clear enough IMO.", "tree": {"sha": "a84aef0bdca3abccbf10354fa951d7cccb03004e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a84aef0bdca3abccbf10354fa951d7cccb03004e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e82c8c9d09168831b9486b528f4a59df8982bc2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj68PcCRBK7hj4Ov3rIwAAskUIALIADuSiOJBpnPmxEeM8UI5t\ngtzDWI1q7vjORg/HsvV4gq/xYnJxU+yKVZdqIYiTdpZMQznGwoyGdRzn3HOBiVt+\nOEImfgcqEY+/QSUbfeQfwFlBOXsnwqXcttNTzkS7o2hUlsSDpUpsMb+DTbSdGA1u\nTiosj+rBvNEshPTg++0eu1ZV1CD9v9f6ppyNRf7CDrXiRErLpzKSSr5sxi8f5u1l\n67w5q3F2NNyyZR9WBo3/+WYkQpBr5GDVy4GjuV7bYPIgvG0ky8AB7bGQjFQr8bCc\nzvslpNRgyKKJ8PeZULHQC8NrRg01cSJYmXPJDvm8V8QqYbUw89phmj3kt1ffHXE=\n=XZGS\n-----END PGP SIGNATURE-----\n", "payload": "tree a84aef0bdca3abccbf10354fa951d7cccb03004e\nparent 9b39568e64442128318c981e74e4d4b11652c896\nparent 91d25168cd85d712bbc3435ad8e9f76733b802b4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676395484 +0100\ncommitter GitHub <noreply@github.com> 1676395484 +0100\n\nRollup merge of #108044 - RalfJung:from-addr-invalid, r=oli-obk\n\ninterpret: rename Pointer::from_addr \u2192 from_addr_invalid\n\nThis function corresponds to `ptr::invalid` in the standard library; the previous name was not clear enough IMO.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e82c8c9d09168831b9486b528f4a59df8982bc2", "html_url": "https://github.com/rust-lang/rust/commit/8e82c8c9d09168831b9486b528f4a59df8982bc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e82c8c9d09168831b9486b528f4a59df8982bc2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b39568e64442128318c981e74e4d4b11652c896", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b39568e64442128318c981e74e4d4b11652c896", "html_url": "https://github.com/rust-lang/rust/commit/9b39568e64442128318c981e74e4d4b11652c896"}, {"sha": "91d25168cd85d712bbc3435ad8e9f76733b802b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/91d25168cd85d712bbc3435ad8e9f76733b802b4", "html_url": "https://github.com/rust-lang/rust/commit/91d25168cd85d712bbc3435ad8e9f76733b802b4"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "5b7b0dc66d1871fd5cfddc090893e92f98e5c14f", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e82c8c9d09168831b9486b528f4a59df8982bc2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e82c8c9d09168831b9486b528f4a59df8982bc2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=8e82c8c9d09168831b9486b528f4a59df8982bc2", "patch": "@@ -517,7 +517,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         // Allow these casts, but make the pointer not dereferenceable.\n         // (I.e., they behave like transmutation.)\n         // This is correct because no pointers can ever be exposed in compile-time evaluation.\n-        Ok(Pointer::from_addr(addr))\n+        Ok(Pointer::from_addr_invalid(addr))\n     }\n \n     #[inline(always)]"}, {"sha": "f83e5ba59dc3e87bca3cc4ba31bbcee71067efb8", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e82c8c9d09168831b9486b528f4a59df8982bc2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e82c8c9d09168831b9486b528f4a59df8982bc2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=8e82c8c9d09168831b9486b528f4a59df8982bc2", "patch": "@@ -178,7 +178,7 @@ impl<'tcx, Prov: Provenance> MPlaceTy<'tcx, Prov> {\n     pub fn fake_alloc_zst(layout: TyAndLayout<'tcx>) -> Self {\n         assert!(layout.is_zst());\n         let align = layout.align.abi;\n-        let ptr = Pointer::from_addr(align.bytes()); // no provenance, absolute address\n+        let ptr = Pointer::from_addr_invalid(align.bytes()); // no provenance, absolute address\n         MPlaceTy { mplace: MemPlace { ptr, meta: MemPlaceMeta::None }, layout, align }\n     }\n "}, {"sha": "c5137cf0666ea9e189d9261e1bc9b7871c2e473a", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e82c8c9d09168831b9486b528f4a59df8982bc2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e82c8c9d09168831b9486b528f4a59df8982bc2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=8e82c8c9d09168831b9486b528f4a59df8982bc2", "patch": "@@ -323,7 +323,7 @@ impl fmt::Display for UndefinedBehaviorInfo {\n                 write!(\n                     f,\n                     \"{msg}{pointer} is a dangling pointer (it has no provenance)\",\n-                    pointer = Pointer::<Option<AllocId>>::from_addr(*i),\n+                    pointer = Pointer::<Option<AllocId>>::from_addr_invalid(*i),\n                 )\n             }\n             AlignmentCheckFailed { required, has } => write!("}, {"sha": "ab667c22a14534d6312fad598781a5651e72da6f", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e82c8c9d09168831b9486b528f4a59df8982bc2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e82c8c9d09168831b9486b528f4a59df8982bc2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=8e82c8c9d09168831b9486b528f4a59df8982bc2", "patch": "@@ -251,14 +251,16 @@ impl<Prov> Pointer<Option<Prov>> {\n }\n \n impl<Prov> Pointer<Option<Prov>> {\n+    /// Creates a pointer to the given address, with invalid provenance (i.e., cannot be used for\n+    /// any memory access).\n     #[inline(always)]\n-    pub fn from_addr(addr: u64) -> Self {\n+    pub fn from_addr_invalid(addr: u64) -> Self {\n         Pointer { provenance: None, offset: Size::from_bytes(addr) }\n     }\n \n     #[inline(always)]\n     pub fn null() -> Self {\n-        Pointer::from_addr(0)\n+        Pointer::from_addr_invalid(0)\n     }\n }\n "}, {"sha": "77594e3440e3605f03679c4dc50f2929f0c2f02c", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e82c8c9d09168831b9486b528f4a59df8982bc2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e82c8c9d09168831b9486b528f4a59df8982bc2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=8e82c8c9d09168831b9486b528f4a59df8982bc2", "patch": "@@ -322,7 +322,7 @@ impl<'tcx, Prov: Provenance> Scalar<Prov> {\n             Right(ptr) => Ok(ptr.into()),\n             Left(bits) => {\n                 let addr = u64::try_from(bits).unwrap();\n-                Ok(Pointer::from_addr(addr))\n+                Ok(Pointer::from_addr_invalid(addr))\n             }\n         }\n     }"}]}