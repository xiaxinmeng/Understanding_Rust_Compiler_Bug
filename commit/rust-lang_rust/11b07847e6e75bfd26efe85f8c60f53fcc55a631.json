{"sha": "11b07847e6e75bfd26efe85f8c60f53fcc55a631", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYjA3ODQ3ZTZlNzViZmQyNmVmZTg1ZjhjNjBmNTNmY2M1NWE2MzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-12T10:31:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-12T10:31:15Z"}, "message": "auto merge of #10435 : jayanderson/rust/docs, r=huonw\n\nThis fills in some missing docs in the nums package. Let me know if this is on the right track for what's wanted for docs. I can probably fill in more in the future. Thanks.\r\n\r\n(As a side note the precedence of the unary negative operator '-' tripped me up for a bit. Essentially I would expect `-25.0f32.sqrt()` to result in NaN instead of `-5.0`.)", "tree": {"sha": "11b54b879920374ed0d3eb266e9b476e59172c6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11b54b879920374ed0d3eb266e9b476e59172c6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11b07847e6e75bfd26efe85f8c60f53fcc55a631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11b07847e6e75bfd26efe85f8c60f53fcc55a631", "html_url": "https://github.com/rust-lang/rust/commit/11b07847e6e75bfd26efe85f8c60f53fcc55a631", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11b07847e6e75bfd26efe85f8c60f53fcc55a631/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34035036e372bd514d99f27826b3c37404cc2914", "url": "https://api.github.com/repos/rust-lang/rust/commits/34035036e372bd514d99f27826b3c37404cc2914", "html_url": "https://github.com/rust-lang/rust/commit/34035036e372bd514d99f27826b3c37404cc2914"}, {"sha": "8a4be8080b434fec90d8b519414f27e219971ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4be8080b434fec90d8b519414f27e219971ace", "html_url": "https://github.com/rust-lang/rust/commit/8a4be8080b434fec90d8b519414f27e219971ace"}], "stats": {"total": 133, "additions": 131, "deletions": 2}, "files": [{"sha": "873d66d401e104a55c5403679a20d5c1fe1cdc95", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 131, "deletions": 2, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/11b07847e6e75bfd26efe85f8c60f53fcc55a631/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b07847e6e75bfd26efe85f8c60f53fcc55a631/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=11b07847e6e75bfd26efe85f8c60f53fcc55a631", "patch": "@@ -136,26 +136,87 @@ pub trait Integer: Num\n /// Calculates the Lowest Common Multiple (LCM) of the number and `other`.\n #[inline(always)] pub fn lcm<T: Integer>(x: T, y: T) -> T { x.lcm(&y) }\n \n+/// A collection of rounding operations.\n pub trait Round {\n+    /// Return the largest integer less than or equal to a number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert_approx_eq!(1.3f32.floor(), 1.0);\n+    /// assert_approx_eq!((-1.3f32).floor(), -2.0);\n+    /// ```\n     fn floor(&self) -> Self;\n+\n+    /// Return the smallest integer greater than or equal to a number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert_approx_eq!(1.3f32.ceil(), 2.0);\n+    /// assert_approx_eq!((-1.3f32).ceil(), -1.0);\n+    /// ```\n     fn ceil(&self) -> Self;\n+\n+    /// Return the nearest integer to a number. Round half-way cases away from\n+    /// `0.0`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert_approx_eq!(1.3f32.round(), 1.0);\n+    /// assert_approx_eq!((-1.3f32).round(), -1.0);\n+    /// assert_approx_eq!(1.5f32.round(), 2.0);\n+    /// assert_approx_eq!((-1.5f32).round(), -2.0);\n+    /// ```\n     fn round(&self) -> Self;\n+\n+    /// Return the integer part of a number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert_approx_eq!(1.3f32.round(), 1.0);\n+    /// assert_approx_eq!((-1.3f32).round(), -1.0);\n+    /// assert_approx_eq!(1.5f32.round(), 1.0);\n+    /// assert_approx_eq!((-1.5f32).round(), -1.0);\n+    /// ```\n     fn trunc(&self) -> Self;\n+\n+    /// Return the fractional part of a number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert_approx_eq!(1.3f32.round(), 0.3);\n+    /// assert_approx_eq!((-1.3f32).round(), -0.3);\n+    /// assert_approx_eq!(1.5f32.round(), 0.5);\n+    /// assert_approx_eq!((-1.5f32).round(), -0.5);\n+    /// ```\n     fn fract(&self) -> Self;\n }\n \n+/// Trait for common fractional operations.\n pub trait Fractional: Num\n                     + Orderable\n                     + Round\n                     + Div<Self,Self> {\n+    /// Take the reciprocal (inverse) of a number, `1/x`.\n     fn recip(&self) -> Self;\n }\n \n+/// A collection of algebraic operations.\n pub trait Algebraic {\n+    /// Raise a number to a power.\n     fn pow(&self, n: &Self) -> Self;\n+    /// Take the squre root of a number.\n     fn sqrt(&self) -> Self;\n+    /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     fn rsqrt(&self) -> Self;\n+    /// Take the cubic root of a number.\n     fn cbrt(&self) -> Self;\n+    /// Calculate the length of the hypotenuse of a right-angle triangle given\n+    /// legs of length `x` and `y`.\n     fn hypot(&self, other: &Self) -> Self;\n }\n \n@@ -178,16 +239,42 @@ pub trait Algebraic {\n /// `y`.\n #[inline(always)] pub fn hypot<T: Algebraic>(x: T, y: T) -> T { x.hypot(&y) }\n \n+/// A trait for trigonometric functions.\n pub trait Trigonometric {\n+    /// Computes the sine of a number (in radians).\n     fn sin(&self) -> Self;\n+    /// Computes the cosine of a number (in radians).\n     fn cos(&self) -> Self;\n+    /// Computes the tangent of a number (in radians).\n     fn tan(&self) -> Self;\n \n+    /// Computes the arcsine of a number. Return value is in radians in\n+    /// the range [-pi/2, pi/2] or NaN if the number is outside the range\n+    /// [-1, 1].\n     fn asin(&self) -> Self;\n+    /// Computes the arccosine of a number. Return value is in radians in\n+    /// the range [0, pi] or NaN if the number is outside the range\n+    /// [-1, 1].\n     fn acos(&self) -> Self;\n+    /// Computes the arctangent of a number. Return value is in radians in the\n+    /// range [-pi/2, pi/2];\n     fn atan(&self) -> Self;\n \n+    /// Computes the four quadrant arctangent of a number, `y`, and another\n+    /// number `x`. Return value is in radians in the range [-pi, pi];\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let y = 3f32.sqrt();\n+    /// let x = 1f32;\n+    /// assert_approx_eq!(y.atan2(&x), f32::consts::PI / 3f32);\n+    /// assert_approx_eq!((-y).atan2(&(-x)), - 2f32 * f32::consts::PI / 3f32);\n+    /// ```\n     fn atan2(&self, other: &Self) -> Self;\n+\n+    /// Simultaneously computes the sine and cosine of the number, `x`. Returns\n+    /// `(sin(x), cos(x))`.\n     fn sin_cos(&self) -> (Self, Self);\n }\n \n@@ -210,13 +297,20 @@ pub trait Trigonometric {\n /// Simultaneously computes the sine and cosine of the number.\n #[inline(always)] pub fn sin_cos<T: Trigonometric>(value: T) -> (T, T) { value.sin_cos() }\n \n+/// A trait exponential functions.\n pub trait Exponential {\n+    /// Returns `e^(self)`, (the exponential function).\n     fn exp(&self) -> Self;\n+    /// Returns 2 raised to the power of the number, `2^(self)`.\n     fn exp2(&self) -> Self;\n \n+    /// Returns the natural logarithm of the number.\n     fn ln(&self) -> Self;\n+    /// Returns the logarithm of the number with respect to an arbitrary base.\n     fn log(&self, base: &Self) -> Self;\n+    /// Returns the base 2 logarithm of the number.\n     fn log2(&self) -> Self;\n+    /// Returns the base 10 logarithm of the number.\n     fn log10(&self) -> Self;\n }\n \n@@ -234,19 +328,26 @@ pub trait Exponential {\n /// Returns the base 10 logarithm of the number.\n #[inline(always)] pub fn log10<T: Exponential>(value: T) -> T { value.log10() }\n \n+/// A trait hyperbolic functions.\n pub trait Hyperbolic: Exponential {\n+    /// Hyperbolic sine function.\n     fn sinh(&self) -> Self;\n+    /// Hyperbolic cosine function.\n     fn cosh(&self) -> Self;\n+    /// Hyperbolic tangent function.\n     fn tanh(&self) -> Self;\n \n+    /// Inverse hyperbolic sine function.\n     fn asinh(&self) -> Self;\n+    /// Inverse hyperbolic cosine function.\n     fn acosh(&self) -> Self;\n+    /// Inverse hyperbolic tangent function.\n     fn atanh(&self) -> Self;\n }\n \n-/// Hyperbolic cosine function.\n-#[inline(always)] pub fn sinh<T: Hyperbolic>(value: T) -> T { value.sinh() }\n /// Hyperbolic sine function.\n+#[inline(always)] pub fn sinh<T: Hyperbolic>(value: T) -> T { value.sinh() }\n+/// Hyperbolic cosine function.\n #[inline(always)] pub fn cosh<T: Hyperbolic>(value: T) -> T { value.cosh() }\n /// Hyperbolic tangent function.\n #[inline(always)] pub fn tanh<T: Hyperbolic>(value: T) -> T { value.tanh() }\n@@ -285,7 +386,10 @@ pub trait Real: Signed\n     fn ln_10() -> Self;\n \n     // Angular conversions\n+\n+    /// Convert radians to degrees.\n     fn to_degrees(&self) -> Self;\n+    /// Convert degrees to radians.\n     fn to_radians(&self) -> Self;\n }\n \n@@ -315,9 +419,34 @@ pub trait Bitwise: Not<Self>\n                  + Shl<Self,Self>\n                  + Shr<Self,Self> {}\n \n+/// A trait for common counting operations on bits.\n pub trait BitCount {\n+    /// Returns the number of bits set in the number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let n = 0b0101000u16;\n+    /// assert_eq!(n.population_count(), 2);\n+    /// ```\n     fn population_count(&self) -> Self;\n+    /// Returns the number of leading zeros in the number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let n = 0b0101000u16;\n+    /// assert_eq!(n.leading_zeros(), 10);\n+    /// ```\n     fn leading_zeros(&self) -> Self;\n+    /// Returns the number of trailing zeros in the number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let n = 0b0101000u16;\n+    /// assert_eq!(n.trailing_zeros(), 3);\n+    /// ```\n     fn trailing_zeros(&self) -> Self;\n }\n "}]}