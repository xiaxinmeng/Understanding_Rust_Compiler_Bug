{"sha": "7912e33ed66beb0976715207cdaa308c9b38c719", "node_id": "C_kwDOAAsO6NoAKDc5MTJlMzNlZDY2YmViMDk3NjcxNTIwN2NkYWEzMDhjOWIzOGM3MTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T12:04:13Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T15:50:49Z"}, "message": "fix clippy::needless_borrow", "tree": {"sha": "1c932abd9b4f5405414f0b6a8aef33a1f6379bc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c932abd9b4f5405414f0b6a8aef33a1f6379bc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7912e33ed66beb0976715207cdaa308c9b38c719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7912e33ed66beb0976715207cdaa308c9b38c719", "html_url": "https://github.com/rust-lang/rust/commit/7912e33ed66beb0976715207cdaa308c9b38c719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7912e33ed66beb0976715207cdaa308c9b38c719/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff7e057dca58865a670581ab5dcaa006ed17696c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff7e057dca58865a670581ab5dcaa006ed17696c", "html_url": "https://github.com/rust-lang/rust/commit/ff7e057dca58865a670581ab5dcaa006ed17696c"}], "stats": {"total": 151, "additions": 74, "deletions": 77}, "files": [{"sha": "236487d8e52eb66ff5a90c8a803789b4c5f3c3f2", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -398,7 +398,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     }\n \n     pub fn scope_at_offset(&self, node: &SyntaxNode, offset: TextSize) -> SemanticsScope<'db> {\n-        self.imp.scope_at_offset(&node, offset)\n+        self.imp.scope_at_offset(node, offset)\n     }\n \n     pub fn scope_for_def(&self, def: Trait) -> SemanticsScope<'db> {"}, {"sha": "499817b6b8a31e5ce8867588b5ee63910be1d1a2", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -603,7 +603,7 @@ fn resolve_hir_path_(\n         // within the trait's associated types.\n         if let (Some(unresolved), &TypeNs::TraitId(trait_id)) = (&unresolved, &ty) {\n             if let Some(type_alias_id) =\n-                db.trait_data(trait_id).associated_type_by_name(&unresolved.name)\n+                db.trait_data(trait_id).associated_type_by_name(unresolved.name)\n             {\n                 return Some(PathResolution::Def(ModuleDefId::from(type_alias_id).into()));\n             }"}, {"sha": "81054f83b0edb0005c58a4d2b93be535e25cdf40", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -667,7 +667,7 @@ impl DocsRangeMap {\n         let InFile { file_id, value: source } = self.source_map.source_of_id(idx);\n         match source {\n             Either::Left(attr) => {\n-                let string = get_doc_string_in_attr(&attr)?;\n+                let string = get_doc_string_in_attr(attr)?;\n                 let text_range = string.open_quote_text_range()?;\n                 let range = TextRange::at(\n                     text_range.end() + original_line_src_range.start() + relative_range.start(),"}, {"sha": "6d7b98f3b166ff4a49d4976f749994702f66f6f2", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -72,7 +72,7 @@ impl TypeOrConstParamData {\n \n     pub fn type_param(&self) -> Option<&TypeParamData> {\n         match self {\n-            TypeOrConstParamData::TypeParamData(x) => Some(&x),\n+            TypeOrConstParamData::TypeParamData(x) => Some(x),\n             TypeOrConstParamData::ConstParamData(_) => None,\n         }\n     }"}, {"sha": "34bea5bd4595ff25395369e38cdbacd79e3cfa23", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -500,7 +500,7 @@ impl<'a> Printer<'a> {\n                     if i != 0 {\n                         w!(self, \", \");\n                     }\n-                    self.print_type_ref(&typeref);\n+                    self.print_type_ref(typeref);\n                 }\n                 if *varargs {\n                     if !args.is_empty() {\n@@ -509,7 +509,7 @@ impl<'a> Printer<'a> {\n                     w!(self, \"...\");\n                 }\n                 w!(self, \") -> \");\n-                self.print_type_ref(&return_type);\n+                self.print_type_ref(return_type);\n             }\n             TypeRef::Macro(_ast_id) => {\n                 w!(self, \"<macro>\");"}, {"sha": "489a3c67e54ac0ae7deb9fe62ebc580dbe82f55f", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -191,7 +191,7 @@ pub fn identity_when_valid(_attr: TokenStream, item: TokenStream) -> TokenStream\n             if let Some((tree, map, _)) = arg.as_deref() {\n                 let tt_range = call.token_tree().unwrap().syntax().text_range();\n                 let mut ranges = Vec::new();\n-                extract_id_ranges(&mut ranges, &map, &tree);\n+                extract_id_ranges(&mut ranges, map, tree);\n                 for (range, id) in ranges {\n                     let idx = (tt_range.start() + range.end()).into();\n                     text_edits.push((idx..idx, format!(\"#{}\", id.0)));\n@@ -269,7 +269,7 @@ fn reindent(indent: IndentLevel, pp: String) -> String {\n     let mut res = lines.next().unwrap().to_string();\n     for line in lines {\n         if line.trim().is_empty() {\n-            res.push_str(&line)\n+            res.push_str(line)\n         } else {\n             format_to!(res, \"{}{}\", indent, line)\n         }"}, {"sha": "027c410cdf5275a65beb87c405fa2c3b98079430", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -245,7 +245,7 @@ impl TypeRef {\n             f(type_ref);\n             match type_ref {\n                 TypeRef::Fn(params, _) => {\n-                    params.iter().for_each(|(_, param_type)| go(&param_type, f))\n+                    params.iter().for_each(|(_, param_type)| go(param_type, f))\n                 }\n                 TypeRef::Tuple(types) => types.iter().for_each(|t| go(t, f)),\n                 TypeRef::RawPtr(type_ref, _)"}, {"sha": "ac07daa0ab33cedf5fe5719c751cc0428a7c006a", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -149,11 +149,11 @@ pub fn expand_speculative(\n     let token_range = token_to_map.text_range();\n \n     // Build the subtree and token mapping for the speculative args\n-    let censor = censor_for_macro_input(&loc, &speculative_args);\n-    let mut fixups = fixup::fixup_syntax(&speculative_args);\n+    let censor = censor_for_macro_input(&loc, speculative_args);\n+    let mut fixups = fixup::fixup_syntax(speculative_args);\n     fixups.replace.extend(censor.into_iter().map(|node| (node, Vec::new())));\n     let (mut tt, spec_args_tmap, _) = mbe::syntax_node_to_token_tree_with_modifications(\n-        &speculative_args,\n+        speculative_args,\n         fixups.token_map,\n         fixups.next_id,\n         fixups.replace,"}, {"sha": "a24c24cfb06264d8f449bb7bba7d72e52be58e0b", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -207,7 +207,7 @@ fn eager_macro_recur(\n \n     // Collect replacement\n     for child in children {\n-        let def = match child.path().and_then(|path| ModPath::from_src(db, path, &hygiene)) {\n+        let def = match child.path().and_then(|path| ModPath::from_src(db, path, hygiene)) {\n             Some(path) => macro_resolver(path.clone()).ok_or_else(|| UnresolvedMacro { path })?,\n             None => {\n                 diagnostic_sink(ExpandError::Other(\"malformed macro invocation\".into()));"}, {"sha": "0139c5d589d38624947e26f5b96b9daacc6de42f", "filename": "crates/hir_ty/src/consteval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -293,7 +293,7 @@ pub fn eval_const(expr: &Expr, ctx: &mut ConstEvalCtx<'_>) -> Result<ComputedExp\n \n pub fn eval_usize(expr: Idx<Expr>, mut ctx: ConstEvalCtx<'_>) -> Option<u64> {\n     let expr = &ctx.exprs[expr];\n-    if let Ok(ce) = eval_const(&expr, &mut ctx) {\n+    if let Ok(ce) = eval_const(expr, &mut ctx) {\n         match ce {\n             ComputedExpr::Literal(Literal::Int(x, _)) => return x.try_into().ok(),\n             ComputedExpr::Literal(Literal::Uint(x, _)) => return x.try_into().ok(),"}, {"sha": "fdf884a76d3c24f62634470c64b67a9dd7bcb721", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -693,7 +693,7 @@ fn iterate_method_candidates_with_autoref(\n     iterate_method_candidates_by_receiver(\n         receiver_ty,\n         first_adjustment.clone(),\n-        &rest,\n+        rest,\n         db,\n         env.clone(),\n         traits_in_scope,\n@@ -973,7 +973,7 @@ fn iterate_inherent_methods(\n                 // already happens in `is_valid_candidate` above; if not, we\n                 // check it here\n                 if receiver_ty.is_none()\n-                    && inherent_impl_substs(db, env.clone(), impl_def, &self_ty).is_none()\n+                    && inherent_impl_substs(db, env.clone(), impl_def, self_ty).is_none()\n                 {\n                     cov_mark::hit!(impl_self_type_match_without_receiver);\n                     continue;\n@@ -1152,7 +1152,7 @@ pub fn implements_trait(\n     env: Arc<TraitEnvironment>,\n     trait_: TraitId,\n ) -> bool {\n-    let goal = generic_implements_goal(db, env.clone(), trait_, &ty);\n+    let goal = generic_implements_goal(db, env.clone(), trait_, ty);\n     let solution = db.trait_solve(env.krate, goal.cast(Interner));\n \n     solution.is_some()\n@@ -1164,7 +1164,7 @@ pub fn implements_trait_unique(\n     env: Arc<TraitEnvironment>,\n     trait_: TraitId,\n ) -> bool {\n-    let goal = generic_implements_goal(db, env.clone(), trait_, &ty);\n+    let goal = generic_implements_goal(db, env.clone(), trait_, ty);\n     let solution = db.trait_solve(env.krate, goal.cast(Interner));\n \n     matches!(solution, Some(crate::Solution::Unique(_)))"}, {"sha": "ec0435aad06a313940ae38247f7ec193a65c8481", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -145,7 +145,7 @@ pub(crate) fn hover(\n     if result.is_none() {\n         // fallbacks, show keywords or types\n \n-        let res = descended.iter().find_map(|token| render::keyword(sema, config, &token));\n+        let res = descended.iter().find_map(|token| render::keyword(sema, config, token));\n         if let Some(res) = res {\n             return Some(RangeInfo::new(original_token.text_range(), res));\n         }"}, {"sha": "b2b74ccce325c11f4b38cf917a2be5bc90f9f629", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -103,7 +103,7 @@ pub(super) fn try_expr(\n \n     let adts = inner_ty.as_adt().zip(body_ty.as_adt());\n     if let Some((hir::Adt::Enum(inner), hir::Adt::Enum(body))) = adts {\n-        let famous_defs = FamousDefs(sema, sema.scope(&try_expr.syntax()).krate());\n+        let famous_defs = FamousDefs(sema, sema.scope(try_expr.syntax()).krate());\n         // special case for two options, there is no value in showing them\n         if let Some(option_enum) = famous_defs.core_option_Option() {\n             if inner == option_enum && body == option_enum {"}, {"sha": "2070cca142e5bd8e225b31b9f66fb0d9c8d18ceb", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n     let match_arm_list = match_expr.match_arm_list()?;\n     let target_range = ctx.sema.original_range(match_expr.syntax()).range;\n \n-    if let None = cursor_at_trivial_match_arm_list(&ctx, &match_expr, &match_arm_list) {\n+    if let None = cursor_at_trivial_match_arm_list(ctx, &match_expr, &match_arm_list) {\n         let arm_list_range = ctx.sema.original_range(match_arm_list.syntax()).range;\n         let cursor_in_range = arm_list_range.contains_range(ctx.selection_trimmed());\n         if cursor_in_range {"}, {"sha": "4cc4860ed582874174afef8bfe056e20df1a1d9c", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -1448,7 +1448,7 @@ fn make_body(\n                 .filter(|it| text_range.contains_range(it.text_range()))\n                 .map(|it| match &it {\n                     syntax::NodeOrToken::Node(n) => syntax::NodeOrToken::Node(\n-                        rewrite_body_segment(ctx, &fun.params, &handler, &n),\n+                        rewrite_body_segment(ctx, &fun.params, &handler, n),\n                     ),\n                     _ => it,\n                 })"}, {"sha": "d8dda784c55823191ba302b674c566d318ca0235", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -103,7 +103,7 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     //for change_visibility and usages for first point mentioned above in the process\n     let (usages_to_be_processed, record_fields) = module.get_usages_and_record_fields(ctx);\n \n-    let import_paths_to_be_removed = module.resolve_imports(curr_parent_module, &ctx);\n+    let import_paths_to_be_removed = module.resolve_imports(curr_parent_module, ctx);\n     module.body_items = module.change_visibility(record_fields)?;\n     if module.body_items.len() == 0 {\n         return None;\n@@ -203,7 +203,7 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n \n                 builder.delete(node_to_be_removed.text_range());\n                 // Remove preceding indentation from node\n-                if let Some(range) = indent_range_before_given_node(&node_to_be_removed) {\n+                if let Some(range) = indent_range_before_given_node(node_to_be_removed) {\n                     builder.delete(range);\n                 }\n \n@@ -700,7 +700,7 @@ fn does_source_exists_outside_sel_in_same_mod(\n             if let Some(ast_module) = &curr_parent_module {\n                 if let Some(hir_module) = x.parent(ctx.db()) {\n                     have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, hir_module, ctx).is_some();\n+                        compare_hir_and_ast_module(ast_module, hir_module, ctx).is_some();\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n                     have_same_parent = source_file_id == curr_file_id;\n@@ -725,7 +725,7 @@ fn does_source_exists_outside_sel_in_same_mod(\n                 let have_same_parent;\n                 if let Some(ast_module) = &curr_parent_module {\n                     have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n                     have_same_parent = source_file_id == curr_file_id;\n@@ -742,7 +742,7 @@ fn does_source_exists_outside_sel_in_same_mod(\n                 let have_same_parent;\n                 if let Some(ast_module) = &curr_parent_module {\n                     have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n                     have_same_parent = source_file_id == curr_file_id;\n@@ -759,7 +759,7 @@ fn does_source_exists_outside_sel_in_same_mod(\n                 let have_same_parent;\n                 if let Some(ast_module) = &curr_parent_module {\n                     have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n                     have_same_parent = source_file_id == curr_file_id;\n@@ -776,7 +776,7 @@ fn does_source_exists_outside_sel_in_same_mod(\n                 let have_same_parent;\n                 if let Some(ast_module) = &curr_parent_module {\n                     have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n                     have_same_parent = source_file_id == curr_file_id;\n@@ -793,7 +793,7 @@ fn does_source_exists_outside_sel_in_same_mod(\n                 let have_same_parent;\n                 if let Some(ast_module) = &curr_parent_module {\n                     have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n                     have_same_parent = source_file_id == curr_file_id;\n@@ -810,7 +810,7 @@ fn does_source_exists_outside_sel_in_same_mod(\n                 let have_same_parent;\n                 if let Some(ast_module) = &curr_parent_module {\n                     have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n                     have_same_parent = source_file_id == curr_file_id;\n@@ -827,7 +827,7 @@ fn does_source_exists_outside_sel_in_same_mod(\n                 let have_same_parent;\n                 if let Some(ast_module) = &curr_parent_module {\n                     have_same_parent =\n-                        compare_hir_and_ast_module(&ast_module, x.module(ctx.db()), ctx).is_some();\n+                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n                     have_same_parent = source_file_id == curr_file_id;"}, {"sha": "ecf9feb0e5519358f6454ea537c7e9b8de32e691", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         }\n     }\n \n-    let reference_modifier = match get_receiver_type(&ctx, &to_extract) {\n+    let reference_modifier = match get_receiver_type(ctx, &to_extract) {\n         Some(receiver_type) if receiver_type.is_mutable_reference() => \"&mut \",\n         Some(receiver_type) if receiver_type.is_reference() => \"&\",\n         _ => \"\","}, {"sha": "15a07492ec039745f86494d92d1c699ae9a2abb9", "filename": "crates/ide_assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn generate_documentation_template(\n \n     let parent_syntax = ast_func.syntax();\n     let text_range = parent_syntax.text_range();\n-    let indent_level = IndentLevel::from_node(&parent_syntax);\n+    let indent_level = IndentLevel::from_node(parent_syntax);\n \n     acc.add(\n         AssistId(\"generate_documentation_template\", AssistKind::Generate),\n@@ -202,7 +202,7 @@ fn all_parent_mods_public(hir_func: &hir::Function, ctx: &AssistContext) -> bool\n \n /// Returns the name of the current crate\n fn crate_name(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<String> {\n-    let krate = ctx.sema.scope(&ast_func.syntax()).module()?.krate();\n+    let krate = ctx.sema.scope(ast_func.syntax()).module()?.krate();\n     Some(krate.display_name(ctx.db())?.to_string())\n }\n \n@@ -338,7 +338,7 @@ fn function_call(\n     is_unsafe: bool,\n ) -> Option<String> {\n     let name = ast_func.name()?;\n-    let arguments = arguments_from_params(&param_list);\n+    let arguments = arguments_from_params(param_list);\n     let function_call = if param_list.self_param().is_some() {\n         format!(\"{}.{}({})\", self_name?, name, arguments)\n     } else if let Some(implementation) = self_partial_type(ast_func) {"}, {"sha": "1bcddeb9ac9f2b4c20a8496a25de144865c56232", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -305,7 +305,7 @@ fn inline(\n     let body = fn_body.clone_for_update();\n     let usages_for_locals = |local| {\n         Definition::Local(local)\n-            .usages(&sema)\n+            .usages(sema)\n             .all()\n             .references\n             .remove(&function_def_file_id)\n@@ -369,12 +369,12 @@ fn inline(\n             // inline single use literals\n             [usage] if matches!(expr, ast::Expr::Literal(_)) => {\n                 cov_mark::hit!(inline_call_inline_literal);\n-                inline_direct(usage, &expr);\n+                inline_direct(usage, expr);\n             }\n             // inline direct local arguments\n-            [_, ..] if expr_as_name_ref(&expr).is_some() => {\n+            [_, ..] if expr_as_name_ref(expr).is_some() => {\n                 cov_mark::hit!(inline_call_inline_locals);\n-                usages.into_iter().for_each(|usage| inline_direct(usage, &expr));\n+                usages.into_iter().for_each(|usage| inline_direct(usage, expr));\n             }\n             // can't inline, emit a let statement\n             _ => {"}, {"sha": "83d7f0338a84ca57e036805945c4e9adeaf593ed", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n     }\n     let current_expr = current_arm.expr()?;\n     let current_text_range = current_arm.syntax().text_range();\n-    let current_arm_types = get_arm_types(&ctx, &current_arm);\n+    let current_arm_types = get_arm_types(ctx, &current_arm);\n \n     // We check if the following match arms match this one. We could, but don't,\n     // compare to the previous match arm as well.\n@@ -99,7 +99,7 @@ fn are_same_types(\n     arm: &ast::MatchArm,\n     ctx: &AssistContext,\n ) -> bool {\n-    let arm_types = get_arm_types(&ctx, &arm);\n+    let arm_types = get_arm_types(ctx, arm);\n     for (other_arm_type_name, other_arm_type) in arm_types {\n         match (current_arm_types.get(&other_arm_type_name), other_arm_type) {\n             (Some(Some(current_arm_type)), Some(other_arm_type))\n@@ -163,7 +163,7 @@ fn get_arm_types(\n         }\n     }\n \n-    recurse(&mut mapping, &context, &arm.pat());\n+    recurse(&mut mapping, context, &arm.pat());\n     mapping\n }\n "}, {"sha": "0f232caab631f68701668427c7d27465db51ed96", "filename": "crates/ide_assists/src/handlers/qualify_method_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn qualify_method_call(acc: &mut Assists, ctx: &AssistContext) -> Opt\n     let range = call.syntax().text_range();\n     let resolved_call = ctx.sema.resolve_method_call(&call)?;\n \n-    let current_module = ctx.sema.scope(&call.syntax()).module()?;\n+    let current_module = ctx.sema.scope(call.syntax()).module()?;\n     let target_module_def = ModuleDef::from(resolved_call);\n     let item_in_ns = ItemInNs::from(target_module_def);\n     let receiver_path = current_module"}, {"sha": "944346b555f230f72116cc3d21d350012482503d", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -406,7 +406,7 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n     }\n \n     fn gen_record_pat_field(field_name: &str, pat_name: &str) -> ast::RecordPatField {\n-        let pat = make::ext::simple_ident_pat(make::name(&pat_name));\n+        let pat = make::ext::simple_ident_pat(make::name(pat_name));\n         let name_ref = make::name_ref(field_name);\n         make::record_pat_field(name_ref, pat.into())\n     }\n@@ -455,10 +455,10 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                             let field_name = field.name()?.to_string();\n \n                             let l_name = &format!(\"l_{}\", field_name);\n-                            l_fields.push(gen_record_pat_field(&field_name, &l_name));\n+                            l_fields.push(gen_record_pat_field(&field_name, l_name));\n \n                             let r_name = &format!(\"r_{}\", field_name);\n-                            r_fields.push(gen_record_pat_field(&field_name, &r_name));\n+                            r_fields.push(gen_record_pat_field(&field_name, r_name));\n \n                             let lhs = make::expr_path(make::ext::ident_path(l_name));\n                             let rhs = make::expr_path(make::ext::ident_path(r_name));"}, {"sha": "58d0a39949603f62eb075a3bb67a0acd27c8f1aa", "filename": "crates/ide_completion/src/completions/attribute/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n         Some(\"target_endian\") => [\"little\", \"big\"].into_iter().for_each(add_completion),\n         Some(name) => {\n             if let Some(krate) = ctx.krate {\n-                krate.potential_cfg(ctx.db).get_cfg_values(&name).cloned().for_each(|s| {\n+                krate.potential_cfg(ctx.db).get_cfg_values(name).cloned().for_each(|s| {\n                     let insert_text = format!(r#\"\"{}\"\"#, s);\n                     let mut item =\n                         CompletionItem::new(SymbolKind::BuiltinAttr, ctx.source_range(), s);"}, {"sha": "c5bc91d73d0dbf322052dcef349e8a07501e2b0b", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -31,7 +31,7 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n             CompletionItem::new(CompletionItemKind::Binding, ctx.source_range(), label)\n         };\n         let mut item = match &comma_wrapper {\n-            Some(fmt) => mk_item(&fmt(&label)),\n+            Some(fmt) => mk_item(&fmt(label)),\n             None => mk_item(label),\n         };\n         item.lookup_by(lookup);\n@@ -40,7 +40,7 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n \n     match param_kind {\n         ParamKind::Function(function) => {\n-            fill_fn_params(ctx, function, &param_list, add_new_item_to_acc);\n+            fill_fn_params(ctx, function, param_list, add_new_item_to_acc);\n         }\n         ParamKind::Closure(closure) => {\n             let stmt_list = closure.syntax().ancestors().find_map(ast::StmtList::cast)?;"}, {"sha": "ead957a3f1a76362b253dfecd394e8aa7ec14a9c", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -51,7 +51,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         None => return,\n     };\n \n-    let postfix_snippet = match build_postfix_snippet_builder(ctx, cap, &dot_receiver) {\n+    let postfix_snippet = match build_postfix_snippet_builder(ctx, cap, dot_receiver) {\n         Some(it) => it,\n         None => return,\n     };\n@@ -265,7 +265,7 @@ fn add_custom_postfix_completions(\n                 Some(imports) => imports,\n                 None => return,\n             };\n-            let body = snippet.postfix_snippet(&receiver_text);\n+            let body = snippet.postfix_snippet(receiver_text);\n             let mut builder =\n                 postfix_snippet(trigger, snippet.description.as_deref().unwrap_or_default(), &body);\n             builder.documentation(Documentation::new(format!(\"```rust\\n{}\\n```\", body)));"}, {"sha": "ad93be4210a79ec2d1f3ae58fa40319a8f4a52fd", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -74,7 +74,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         }\n         _ => {\n             // Add associated types on type parameters and `Self`.\n-            ctx.scope.assoc_type_shorthand_candidates(&resolution, |_, alias| {\n+            ctx.scope.assoc_type_shorthand_candidates(resolution, |_, alias| {\n                 acc.add_type_alias(ctx, alias);\n                 None::<()>\n             });"}, {"sha": "673ee51f78fa60a0463d7213c7fa96d6d78d2bda", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -112,7 +112,7 @@ fn add_custom_completions(\n                 None => return,\n             };\n             let body = snip.snippet();\n-            let mut builder = snippet(ctx, cap, &trigger, &body);\n+            let mut builder = snippet(ctx, cap, trigger, &body);\n             builder.documentation(Documentation::new(format!(\"```rust\\n{}\\n```\", body)));\n             for import in imports.into_iter() {\n                 builder.add_import(import);"}, {"sha": "fc48e642f0da06a18ea7b0cb3c34807e147a0712", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -150,9 +150,9 @@ impl IdentClass {\n         sema: &Semantics<RootDatabase>,\n         lifetime: &ast::Lifetime,\n     ) -> Option<IdentClass> {\n-        NameRefClass::classify_lifetime(sema, &lifetime)\n+        NameRefClass::classify_lifetime(sema, lifetime)\n             .map(IdentClass::NameRefClass)\n-            .or_else(|| NameClass::classify_lifetime(sema, &lifetime).map(IdentClass::NameClass))\n+            .or_else(|| NameClass::classify_lifetime(sema, lifetime).map(IdentClass::NameClass))\n     }\n \n     pub fn definitions(self) -> ArrayVec<Definition, 2> {"}, {"sha": "9a9097ba5e25ecdf9092eb14b27ad9199fcebfbe", "filename": "crates/ide_db/src/imports/merge_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_db%2Fsrc%2Fimports%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_db%2Fsrc%2Fimports%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports%2Fmerge_imports.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -75,7 +75,7 @@ fn try_merge_trees_mut(lhs: &ast::UseTree, rhs: &ast::UseTree, merge: MergeBehav\n         lhs.split_prefix(&lhs_prefix);\n         rhs.split_prefix(&rhs_prefix);\n     }\n-    recursive_merge(&lhs, &rhs, merge)\n+    recursive_merge(lhs, rhs, merge)\n }\n \n /// Recursively merges rhs to lhs\n@@ -157,7 +157,7 @@ fn recursive_merge(lhs: &ast::UseTree, rhs: &ast::UseTree, merge: MergeBehavior)\n                 }\n                 lhs_t.split_prefix(&lhs_prefix);\n                 rhs_t.split_prefix(&rhs_prefix);\n-                recursive_merge(&lhs_t, &rhs_t, merge)?;\n+                recursive_merge(lhs_t, &rhs_t, merge)?;\n             }\n             Err(_)\n                 if merge == MergeBehavior::Module"}, {"sha": "0f1dd96f6ffe1d79c6f3c3bb645da9c0252f19bd", "filename": "crates/ide_db/src/syntax_helpers/insert_whitespace_into_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -69,7 +69,7 @@ pub fn insert_ws_into(syn: SyntaxNode) -> SyntaxNode {\n                 if indent > 0 {\n                     mods.push(do_indent(after, tok, indent));\n                 }\n-                mods.push(do_nl(after, &tok));\n+                mods.push(do_nl(after, tok));\n             }\n             R_CURLY if is_last(|it| it != L_CURLY, true) => {\n                 indent = indent.saturating_sub(1);"}, {"sha": "1555bad54e8941e00d3236924f3a0c34b4da41f7", "filename": "crates/ide_db/src/tests/sourcegen_lints.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -85,18 +85,18 @@ fn generate_lint_descriptor(buf: &mut String) {\n         .sorted_by(|(ident, ..), (ident2, ..)| ident.cmp(ident2))\n         .collect::<Vec<_>>();\n     for (name, description, ..) in &lints {\n-        push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description);\n+        push_lint_completion(buf, &name.replace(\"-\", \"_\"), description);\n     }\n     buf.push_str(\"];\\n\");\n     buf.push_str(r#\"pub const DEFAULT_LINT_GROUPS: &[LintGroup] = &[\"#);\n     for (name, description, children) in &lints {\n         if !children.is_empty() {\n             // HACK: warnings is emitted with a general description, not with its members\n             if name == &\"warnings\" {\n-                push_lint_group(buf, &name, &description, &Vec::new());\n+                push_lint_group(buf, name, description, &Vec::new());\n                 continue;\n             }\n-            push_lint_group(buf, &name.replace(\"-\", \"_\"), &description, children);\n+            push_lint_group(buf, &name.replace(\"-\", \"_\"), description, children);\n         }\n     }\n     buf.push('\\n');\n@@ -136,14 +136,14 @@ fn generate_lint_descriptor(buf: &mut String) {\n         .collect::<Vec<_>>();\n \n     for (name, description, ..) in &lints_rustdoc {\n-        push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description)\n+        push_lint_completion(buf, &name.replace(\"-\", \"_\"), description)\n     }\n     buf.push_str(\"];\\n\");\n \n     buf.push_str(r#\"pub const RUSTDOC_LINT_GROUPS: &[LintGroup] = &[\"#);\n     for (name, description, children) in &lints_rustdoc {\n         if !children.is_empty() {\n-            push_lint_group(buf, &name.replace(\"-\", \"_\"), &description, children);\n+            push_lint_group(buf, &name.replace(\"-\", \"_\"), description, children);\n         }\n     }\n     buf.push('\\n');"}, {"sha": "21a0aa4284a57df6964b27743819127aa62de79e", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -170,9 +170,9 @@ fn convert_tokens<C: TokenConvertor>(conv: &mut C) -> tt::Subtree {\n             Some(it) => it,\n             None => break,\n         };\n-        let synth_id = token.synthetic_id(&conv);\n+        let synth_id = token.synthetic_id(conv);\n \n-        let kind = token.kind(&conv);\n+        let kind = token.kind(conv);\n         if kind == COMMENT {\n             if let Some(tokens) = conv.convert_doc_comment(&token) {\n                 // FIXME: There has to be a better way to do this\n@@ -227,7 +227,7 @@ fn convert_tokens<C: TokenConvertor>(conv: &mut C) -> tt::Subtree {\n                 continue;\n             }\n \n-            let spacing = match conv.peek().map(|next| next.kind(&conv)) {\n+            let spacing = match conv.peek().map(|next| next.kind(conv)) {\n                 Some(kind)\n                     if !kind.is_trivia()\n                         && kind.is_punct()\n@@ -240,7 +240,7 @@ fn convert_tokens<C: TokenConvertor>(conv: &mut C) -> tt::Subtree {\n                 }\n                 _ => tt::Spacing::Alone,\n             };\n-            let char = match token.to_char(&conv) {\n+            let char = match token.to_char(conv) {\n                 Some(c) => c,\n                 None => {\n                     panic!(\"Token from lexer must be single char: token = {:#?}\", token);"}, {"sha": "f9c2b9fda3aeed294fbb9d8a281bd3b75ae085d1", "filename": "crates/proc_macro_api/src/msg.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -74,14 +74,11 @@ pub trait Message: Serialize + DeserializeOwned {\n impl Message for Request {}\n impl Message for Response {}\n \n-fn read_json<'a>(\n-    inp: &mut impl BufRead,\n-    mut buf: &'a mut String,\n-) -> io::Result<Option<&'a String>> {\n+fn read_json<'a>(inp: &mut impl BufRead, buf: &'a mut String) -> io::Result<Option<&'a String>> {\n     loop {\n         buf.clear();\n \n-        inp.read_line(&mut buf)?;\n+        inp.read_line(buf)?;\n         buf.pop(); // Remove trailing '\\n'\n \n         if buf.is_empty() {"}, {"sha": "2b6c070fece3f746c0ca48e6c2940e8c801d5ea1", "filename": "crates/proc_macro_srv/src/dylib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -121,7 +121,7 @@ impl ProcMacroLibraryLibloading {\n         let abs_file: &AbsPath = file.try_into().map_err(|_| {\n             invalid_data_err(format!(\"expected an absolute path, got {}\", file.display()))\n         })?;\n-        let version_info = read_dylib_info(&abs_file)?;\n+        let version_info = read_dylib_info(abs_file)?;\n \n         let lib = load_library(file).map_err(invalid_data_err)?;\n         let abi = Abi::from_lib(&lib, symbol_name, version_info)?;"}, {"sha": "dd59923cb34f147d754f8dffca1600abe0d98cb3", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -24,15 +24,15 @@ fn diagnostic_severity(\n             // HACK: special case for `warnings` rustc lint.\n             Some(code)\n                 if config.warnings_as_hint.iter().any(|lint| {\n-                    lint == \"warnings\" || ide_db::helpers::lint_eq_or_in_group(&code.code, &lint)\n+                    lint == \"warnings\" || ide_db::helpers::lint_eq_or_in_group(&code.code, lint)\n                 }) =>\n             {\n                 lsp_types::DiagnosticSeverity::HINT\n             }\n             // HACK: special case for `warnings` rustc lint.\n             Some(code)\n                 if config.warnings_as_info.iter().any(|lint| {\n-                    lint == \"warnings\" || ide_db::helpers::lint_eq_or_in_group(&code.code, &lint)\n+                    lint == \"warnings\" || ide_db::helpers::lint_eq_or_in_group(&code.code, lint)\n                 }) =>\n             {\n                 lsp_types::DiagnosticSeverity::INFORMATION"}, {"sha": "8a7ee7e9c237b92e2aa9771522526398b1ef574b", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912e33ed66beb0976715207cdaa308c9b38c719/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=7912e33ed66beb0976715207cdaa308c9b38c719", "patch": "@@ -48,7 +48,7 @@ impl<'a> RequestDispatcher<'a> {\n         };\n         let _pctx = stdx::panic_context::enter(panic_context);\n \n-        let result = f(&mut self.global_state, params);\n+        let result = f(self.global_state, params);\n         let response = result_to_response::<R>(id, result);\n \n         self.global_state.respond(response);"}]}