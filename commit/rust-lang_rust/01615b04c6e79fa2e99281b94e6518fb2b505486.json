{"sha": "01615b04c6e79fa2e99281b94e6518fb2b505486", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNjE1YjA0YzZlNzlmYTJlOTkyODFiOTRlNjUxOGZiMmI1MDU0ODY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-17T14:48:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T14:09:13Z"}, "message": "Convert required suffixes into a use of `as`.", "tree": {"sha": "cea7e95885d82fb27f7005cecf3e2d646f06d373", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cea7e95885d82fb27f7005cecf3e2d646f06d373"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01615b04c6e79fa2e99281b94e6518fb2b505486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01615b04c6e79fa2e99281b94e6518fb2b505486", "html_url": "https://github.com/rust-lang/rust/commit/01615b04c6e79fa2e99281b94e6518fb2b505486", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01615b04c6e79fa2e99281b94e6518fb2b505486/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b5720a15fd7e8ae3883dcaee556b000e962b052", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5720a15fd7e8ae3883dcaee556b000e962b052", "html_url": "https://github.com/rust-lang/rust/commit/2b5720a15fd7e8ae3883dcaee556b000e962b052"}], "stats": {"total": 204, "additions": 102, "deletions": 102}, "files": [{"sha": "8b5e46f85fa6ac181b1e7968adaa364214c407ad", "filename": "src/libcoretest/any.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Flibcoretest%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Flibcoretest%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fany.rs?ref=01615b04c6e79fa2e99281b94e6518fb2b505486", "patch": "@@ -35,7 +35,7 @@ fn any_referenced() {\n \n #[test]\n fn any_owning() {\n-    let (a, b, c) = (box 5us as Box<Any>, box TEST as Box<Any>, box Test as Box<Any>);\n+    let (a, b, c) = (box 5_usize as Box<Any>, box TEST as Box<Any>, box Test as Box<Any>);\n \n     assert!(a.is::<uint>());\n     assert!(!b.is::<uint>());\n@@ -52,7 +52,7 @@ fn any_owning() {\n \n #[test]\n fn any_downcast_ref() {\n-    let a = &5us as &Any;\n+    let a = &5_usize as &Any;\n \n     match a.downcast_ref::<uint>() {\n         Some(&5) => {}\n@@ -67,8 +67,8 @@ fn any_downcast_ref() {\n \n #[test]\n fn any_downcast_mut() {\n-    let mut a = 5us;\n-    let mut b = box 7us;\n+    let mut a = 5_usize;\n+    let mut b = box 7_usize;\n \n     let a_r = &mut a as &mut Any;\n     let tmp: &mut uint = &mut *b;\n@@ -113,7 +113,7 @@ fn any_downcast_mut() {\n \n #[test]\n fn any_fixed_vec() {\n-    let test = [0us; 8];\n+    let test = [0_usize; 8];\n     let test = &test as &Any;\n     assert!(test.is::<[uint; 8]>());\n     assert!(!test.is::<[uint; 10]>());"}, {"sha": "bc8461b0b9e09cf9c8c43d8a5d4752be40731959", "filename": "src/libcoretest/fmt/num.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Flibcoretest%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Flibcoretest%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fnum.rs?ref=01615b04c6e79fa2e99281b94e6518fb2b505486", "patch": "@@ -16,68 +16,68 @@ fn test_format_int() {\n     // Formatting integers should select the right implementation based off\n     // the type of the argument. Also, hex/octal/binary should be defined\n     // for integers, but they shouldn't emit the negative sign.\n-    assert!(format!(\"{}\", 1is) == \"1\");\n+    assert!(format!(\"{}\", 1isize) == \"1\");\n     assert!(format!(\"{}\", 1i8) == \"1\");\n     assert!(format!(\"{}\", 1i16) == \"1\");\n     assert!(format!(\"{}\", 1i32) == \"1\");\n     assert!(format!(\"{}\", 1i64) == \"1\");\n-    assert!(format!(\"{}\", -1is) == \"-1\");\n+    assert!(format!(\"{}\", -1isize) == \"-1\");\n     assert!(format!(\"{}\", -1i8) == \"-1\");\n     assert!(format!(\"{}\", -1i16) == \"-1\");\n     assert!(format!(\"{}\", -1i32) == \"-1\");\n     assert!(format!(\"{}\", -1i64) == \"-1\");\n-    assert!(format!(\"{:?}\", 1is) == \"1\");\n+    assert!(format!(\"{:?}\", 1isize) == \"1\");\n     assert!(format!(\"{:?}\", 1i8) == \"1\");\n     assert!(format!(\"{:?}\", 1i16) == \"1\");\n     assert!(format!(\"{:?}\", 1i32) == \"1\");\n     assert!(format!(\"{:?}\", 1i64) == \"1\");\n-    assert!(format!(\"{:b}\", 1is) == \"1\");\n+    assert!(format!(\"{:b}\", 1isize) == \"1\");\n     assert!(format!(\"{:b}\", 1i8) == \"1\");\n     assert!(format!(\"{:b}\", 1i16) == \"1\");\n     assert!(format!(\"{:b}\", 1i32) == \"1\");\n     assert!(format!(\"{:b}\", 1i64) == \"1\");\n-    assert!(format!(\"{:x}\", 1is) == \"1\");\n+    assert!(format!(\"{:x}\", 1isize) == \"1\");\n     assert!(format!(\"{:x}\", 1i8) == \"1\");\n     assert!(format!(\"{:x}\", 1i16) == \"1\");\n     assert!(format!(\"{:x}\", 1i32) == \"1\");\n     assert!(format!(\"{:x}\", 1i64) == \"1\");\n-    assert!(format!(\"{:X}\", 1is) == \"1\");\n+    assert!(format!(\"{:X}\", 1isize) == \"1\");\n     assert!(format!(\"{:X}\", 1i8) == \"1\");\n     assert!(format!(\"{:X}\", 1i16) == \"1\");\n     assert!(format!(\"{:X}\", 1i32) == \"1\");\n     assert!(format!(\"{:X}\", 1i64) == \"1\");\n-    assert!(format!(\"{:o}\", 1is) == \"1\");\n+    assert!(format!(\"{:o}\", 1isize) == \"1\");\n     assert!(format!(\"{:o}\", 1i8) == \"1\");\n     assert!(format!(\"{:o}\", 1i16) == \"1\");\n     assert!(format!(\"{:o}\", 1i32) == \"1\");\n     assert!(format!(\"{:o}\", 1i64) == \"1\");\n \n-    assert!(format!(\"{}\", 1us) == \"1\");\n+    assert!(format!(\"{}\", 1usize) == \"1\");\n     assert!(format!(\"{}\", 1u8) == \"1\");\n     assert!(format!(\"{}\", 1u16) == \"1\");\n     assert!(format!(\"{}\", 1u32) == \"1\");\n     assert!(format!(\"{}\", 1u64) == \"1\");\n-    assert!(format!(\"{:?}\", 1us) == \"1\");\n+    assert!(format!(\"{:?}\", 1usize) == \"1\");\n     assert!(format!(\"{:?}\", 1u8) == \"1\");\n     assert!(format!(\"{:?}\", 1u16) == \"1\");\n     assert!(format!(\"{:?}\", 1u32) == \"1\");\n     assert!(format!(\"{:?}\", 1u64) == \"1\");\n-    assert!(format!(\"{:b}\", 1us) == \"1\");\n+    assert!(format!(\"{:b}\", 1usize) == \"1\");\n     assert!(format!(\"{:b}\", 1u8) == \"1\");\n     assert!(format!(\"{:b}\", 1u16) == \"1\");\n     assert!(format!(\"{:b}\", 1u32) == \"1\");\n     assert!(format!(\"{:b}\", 1u64) == \"1\");\n-    assert!(format!(\"{:x}\", 1us) == \"1\");\n+    assert!(format!(\"{:x}\", 1usize) == \"1\");\n     assert!(format!(\"{:x}\", 1u8) == \"1\");\n     assert!(format!(\"{:x}\", 1u16) == \"1\");\n     assert!(format!(\"{:x}\", 1u32) == \"1\");\n     assert!(format!(\"{:x}\", 1u64) == \"1\");\n-    assert!(format!(\"{:X}\", 1us) == \"1\");\n+    assert!(format!(\"{:X}\", 1usize) == \"1\");\n     assert!(format!(\"{:X}\", 1u8) == \"1\");\n     assert!(format!(\"{:X}\", 1u16) == \"1\");\n     assert!(format!(\"{:X}\", 1u32) == \"1\");\n     assert!(format!(\"{:X}\", 1u64) == \"1\");\n-    assert!(format!(\"{:o}\", 1us) == \"1\");\n+    assert!(format!(\"{:o}\", 1usize) == \"1\");\n     assert!(format!(\"{:o}\", 1u8) == \"1\");\n     assert!(format!(\"{:o}\", 1u16) == \"1\");\n     assert!(format!(\"{:o}\", 1u32) == \"1\");"}, {"sha": "fd0d3c676a45ab4d1c0c50cb20087092526576dd", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=01615b04c6e79fa2e99281b94e6518fb2b505486", "patch": "@@ -46,17 +46,17 @@ fn test_writer_hasher() {\n \n     assert_eq!(hash(&()), 0);\n \n-    assert_eq!(hash(&5u8), 5);\n-    assert_eq!(hash(&5u16), 5);\n-    assert_eq!(hash(&5u32), 5);\n-    assert_eq!(hash(&5u64), 5);\n-    assert_eq!(hash(&5us), 5);\n-\n-    assert_eq!(hash(&5i8), 5);\n-    assert_eq!(hash(&5i16), 5);\n-    assert_eq!(hash(&5i32), 5);\n-    assert_eq!(hash(&5i64), 5);\n-    assert_eq!(hash(&5is), 5);\n+    assert_eq!(hash(&5_u8), 5);\n+    assert_eq!(hash(&5_u16), 5);\n+    assert_eq!(hash(&5_u32), 5);\n+    assert_eq!(hash(&5_u64), 5);\n+    assert_eq!(hash(&5_usize), 5);\n+\n+    assert_eq!(hash(&5_i8), 5);\n+    assert_eq!(hash(&5_i16), 5);\n+    assert_eq!(hash(&5_i32), 5);\n+    assert_eq!(hash(&5_i64), 5);\n+    assert_eq!(hash(&5_isize), 5);\n \n     assert_eq!(hash(&false), 0);\n     assert_eq!(hash(&true), 1);\n@@ -76,12 +76,12 @@ fn test_writer_hasher() {\n     // FIXME (#18248) Add tests for hashing Rc<str> and Rc<[T]>\n \n     unsafe {\n-        let ptr: *const i32 = mem::transmute(5us);\n+        let ptr: *const i32 = mem::transmute(5_usize);\n         assert_eq!(hash(&ptr), 5);\n     }\n \n     unsafe {\n-        let ptr: *mut i32 = mem::transmute(5us);\n+        let ptr: *mut i32 = mem::transmute(5_usize);\n         assert_eq!(hash(&ptr), 5);\n     }\n }"}, {"sha": "eb51046d7c9a75ad2e918255266a87cf9e69d8cf", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=01615b04c6e79fa2e99281b94e6518fb2b505486", "patch": "@@ -494,13 +494,12 @@ pub struct BoxPointers;\n impl BoxPointers {\n     fn check_heap_type<'a, 'tcx>(&self, cx: &Context<'a, 'tcx>,\n                                  span: Span, ty: Ty<'tcx>) {\n-        let mut n_uniq = 0us;\n+        let mut n_uniq: usize = 0;\n         ty::fold_ty(cx.tcx, ty, |t| {\n             match t.sty {\n                 ty::ty_uniq(_) => {\n                     n_uniq += 1;\n                 }\n-\n                 _ => ()\n             };\n             t"}, {"sha": "68b28784b4254de9460c6048e62a1460503513a2", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=01615b04c6e79fa2e99281b94e6518fb2b505486", "patch": "@@ -3905,12 +3905,12 @@ mod tests {\n \n         assert_eq!(array2.to_json(), array2);\n         assert_eq!(object.to_json(), object);\n-        assert_eq!(3_i.to_json(), I64(3));\n+        assert_eq!(3_isize.to_json(), I64(3));\n         assert_eq!(4_i8.to_json(), I64(4));\n         assert_eq!(5_i16.to_json(), I64(5));\n         assert_eq!(6_i32.to_json(), I64(6));\n         assert_eq!(7_i64.to_json(), I64(7));\n-        assert_eq!(8_u.to_json(), U64(8));\n+        assert_eq!(8_usize.to_json(), U64(8));\n         assert_eq!(9_u8.to_json(), U64(9));\n         assert_eq!(10_u16.to_json(), U64(10));\n         assert_eq!(11_u32.to_json(), U64(11));\n@@ -3924,22 +3924,22 @@ mod tests {\n         assert_eq!(false.to_json(), Boolean(false));\n         assert_eq!(\"abc\".to_json(), String(\"abc\".to_string()));\n         assert_eq!(\"abc\".to_string().to_json(), String(\"abc\".to_string()));\n-        assert_eq!((1us, 2us).to_json(), array2);\n-        assert_eq!((1us, 2us, 3us).to_json(), array3);\n-        assert_eq!([1us, 2us].to_json(), array2);\n-        assert_eq!((&[1us, 2us, 3us]).to_json(), array3);\n-        assert_eq!((vec![1us, 2us]).to_json(), array2);\n-        assert_eq!(vec!(1us, 2us, 3us).to_json(), array3);\n+        assert_eq!((1_usize, 2_usize).to_json(), array2);\n+        assert_eq!((1_usize, 2_usize, 3_usize).to_json(), array3);\n+        assert_eq!([1_usize, 2_usize].to_json(), array2);\n+        assert_eq!((&[1_usize, 2_usize, 3_usize]).to_json(), array3);\n+        assert_eq!((vec![1_usize, 2_usize]).to_json(), array2);\n+        assert_eq!(vec!(1_usize, 2_usize, 3_usize).to_json(), array3);\n         let mut tree_map = BTreeMap::new();\n-        tree_map.insert(\"a\".to_string(), 1us);\n+        tree_map.insert(\"a\".to_string(), 1 as usize);\n         tree_map.insert(\"b\".to_string(), 2);\n         assert_eq!(tree_map.to_json(), object);\n         let mut hash_map = HashMap::new();\n-        hash_map.insert(\"a\".to_string(), 1us);\n+        hash_map.insert(\"a\".to_string(), 1 as usize);\n         hash_map.insert(\"b\".to_string(), 2);\n         assert_eq!(hash_map.to_json(), object);\n         assert_eq!(Some(15).to_json(), I64(15));\n-        assert_eq!(Some(15us).to_json(), U64(15));\n+        assert_eq!(Some(15 as usize).to_json(), U64(15));\n         assert_eq!(None::<int>.to_json(), Null);\n     }\n "}, {"sha": "c94c16498332924e2fd5348fc12e317983c792e3", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=01615b04c6e79fa2e99281b94e6518fb2b505486", "patch": "@@ -1123,20 +1123,20 @@ mod tests {\n         ($_20:expr) => ({\n             let _20 = $_20;\n \n-            assert_eq!(20u,   _20.to_uint().unwrap());\n-            assert_eq!(20u8,  _20.to_u8().unwrap());\n-            assert_eq!(20u16, _20.to_u16().unwrap());\n-            assert_eq!(20u32, _20.to_u32().unwrap());\n-            assert_eq!(20u64, _20.to_u64().unwrap());\n-            assert_eq!(20,   _20.to_int().unwrap());\n-            assert_eq!(20i8,  _20.to_i8().unwrap());\n-            assert_eq!(20i16, _20.to_i16().unwrap());\n-            assert_eq!(20i32, _20.to_i32().unwrap());\n-            assert_eq!(20i64, _20.to_i64().unwrap());\n-            assert_eq!(20f32, _20.to_f32().unwrap());\n-            assert_eq!(20f64, _20.to_f64().unwrap());\n-\n-            assert_eq!(_20, NumCast::from(20u).unwrap());\n+            assert_eq!(20usize, _20.to_uint().unwrap());\n+            assert_eq!(20u8,    _20.to_u8().unwrap());\n+            assert_eq!(20u16,   _20.to_u16().unwrap());\n+            assert_eq!(20u32,   _20.to_u32().unwrap());\n+            assert_eq!(20u64,   _20.to_u64().unwrap());\n+            assert_eq!(20,      _20.to_int().unwrap());\n+            assert_eq!(20i8,    _20.to_i8().unwrap());\n+            assert_eq!(20i16,   _20.to_i16().unwrap());\n+            assert_eq!(20i32,   _20.to_i32().unwrap());\n+            assert_eq!(20i64,   _20.to_i64().unwrap());\n+            assert_eq!(20f32,   _20.to_f32().unwrap());\n+            assert_eq!(20f64,   _20.to_f64().unwrap());\n+\n+            assert_eq!(_20, NumCast::from(20usize).unwrap());\n             assert_eq!(_20, NumCast::from(20u8).unwrap());\n             assert_eq!(_20, NumCast::from(20u16).unwrap());\n             assert_eq!(_20, NumCast::from(20u32).unwrap());\n@@ -1164,18 +1164,18 @@ mod tests {\n         })\n     }\n \n-    #[test] fn test_u8_cast()    { test_cast_20!(20u8)  }\n-    #[test] fn test_u16_cast()   { test_cast_20!(20u16) }\n-    #[test] fn test_u32_cast()   { test_cast_20!(20u32) }\n-    #[test] fn test_u64_cast()   { test_cast_20!(20u64) }\n-    #[test] fn test_uint_cast()  { test_cast_20!(20u)   }\n-    #[test] fn test_i8_cast()    { test_cast_20!(20i8)  }\n-    #[test] fn test_i16_cast()   { test_cast_20!(20i16) }\n-    #[test] fn test_i32_cast()   { test_cast_20!(20i32) }\n-    #[test] fn test_i64_cast()   { test_cast_20!(20i64) }\n-    #[test] fn test_int_cast()   { test_cast_20!(20)   }\n-    #[test] fn test_f32_cast()   { test_cast_20!(20f32) }\n-    #[test] fn test_f64_cast()   { test_cast_20!(20f64) }\n+    #[test] fn test_u8_cast()    { test_cast_20!(20u8)    }\n+    #[test] fn test_u16_cast()   { test_cast_20!(20u16)   }\n+    #[test] fn test_u32_cast()   { test_cast_20!(20u32)   }\n+    #[test] fn test_u64_cast()   { test_cast_20!(20u64)   }\n+    #[test] fn test_uint_cast()  { test_cast_20!(20usize) }\n+    #[test] fn test_i8_cast()    { test_cast_20!(20i8)    }\n+    #[test] fn test_i16_cast()   { test_cast_20!(20i16)   }\n+    #[test] fn test_i32_cast()   { test_cast_20!(20i32)   }\n+    #[test] fn test_i64_cast()   { test_cast_20!(20i64)   }\n+    #[test] fn test_int_cast()   { test_cast_20!(20)      }\n+    #[test] fn test_f32_cast()   { test_cast_20!(20f32)   }\n+    #[test] fn test_f64_cast()   { test_cast_20!(20f64)   }\n \n     #[test]\n     fn test_cast_range_int_min() {\n@@ -1548,18 +1548,18 @@ mod tests {\n     #[test]\n     fn test_saturating_add_uint() {\n         use uint::MAX;\n-        assert_eq!(3u.saturating_add(5u), 8u);\n-        assert_eq!(3u.saturating_add(MAX-1), MAX);\n+        assert_eq!(3_usize.saturating_add(5_usize), 8_usize);\n+        assert_eq!(3_usize.saturating_add(MAX-1), MAX);\n         assert_eq!(MAX.saturating_add(MAX), MAX);\n         assert_eq!((MAX-2).saturating_add(1), MAX-1);\n     }\n \n     #[test]\n     fn test_saturating_sub_uint() {\n         use uint::MAX;\n-        assert_eq!(5u.saturating_sub(3u), 2u);\n-        assert_eq!(3u.saturating_sub(5u), 0u);\n-        assert_eq!(0u.saturating_sub(1u), 0u);\n+        assert_eq!(5_usize.saturating_sub(3_usize), 2_usize);\n+        assert_eq!(3_usize.saturating_sub(5_usize), 0_usize);\n+        assert_eq!(0_usize.saturating_sub(1_usize), 0_usize);\n         assert_eq!((MAX-1).saturating_sub(MAX), 0);\n     }\n \n@@ -1602,14 +1602,14 @@ mod tests {\n \n     #[test]\n     fn test_checked_sub() {\n-        assert_eq!(5u.checked_sub(0), Some(5));\n-        assert_eq!(5u.checked_sub(1), Some(4));\n-        assert_eq!(5u.checked_sub(2), Some(3));\n-        assert_eq!(5u.checked_sub(3), Some(2));\n-        assert_eq!(5u.checked_sub(4), Some(1));\n-        assert_eq!(5u.checked_sub(5), Some(0));\n-        assert_eq!(5u.checked_sub(6), None);\n-        assert_eq!(5u.checked_sub(7), None);\n+        assert_eq!(5_usize.checked_sub(0), Some(5));\n+        assert_eq!(5_usize.checked_sub(1), Some(4));\n+        assert_eq!(5_usize.checked_sub(2), Some(3));\n+        assert_eq!(5_usize.checked_sub(3), Some(2));\n+        assert_eq!(5_usize.checked_sub(4), Some(1));\n+        assert_eq!(5_usize.checked_sub(5), Some(0));\n+        assert_eq!(5_usize.checked_sub(6), None);\n+        assert_eq!(5_usize.checked_sub(7), None);\n     }\n \n     #[test]"}, {"sha": "01481af817b7e5caa4bc303c4b1742a1db947603", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=01615b04c6e79fa2e99281b94e6518fb2b505486", "patch": "@@ -20,8 +20,8 @@ pub fn main() {\n     let x: isize;\n     let y: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5us)); //~ ERROR input operand constraint contains '='\n-        asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5us)); //~ ERROR input operand constraint contains '+'\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5_usize)); //~ ERROR operand constraint contains '='\n+        asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5_usize)); //~ ERROR operand constraint contains '+'\n     }\n     foo(x);\n     foo(y);"}, {"sha": "a29ead02b611b8001456393e91ca38ad17fd5e5d", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=01615b04c6e79fa2e99281b94e6518fb2b505486", "patch": "@@ -21,7 +21,7 @@ pub fn main() {\n     let mut x: isize = 0;\n     unsafe {\n         // extra colon\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5us), \"0\"(x) : : \"cc\");\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n         //~^ WARNING unrecognized option\n     }\n     assert_eq!(x, 5);"}, {"sha": "ff56fb14f7d5753cc2b42845b0fe60482dfcf481", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=01615b04c6e79fa2e99281b94e6518fb2b505486", "patch": "@@ -21,7 +21,8 @@ pub fn main() {\n     x = 1; //~ NOTE prior assignment occurs here\n     foo(x);\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5us)); //~ ERROR re-assignment of immutable variable `x`\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize));\n+        //~^ ERROR re-assignment of immutable variable `x`\n     }\n     foo(x);\n }"}, {"sha": "17c19c77ab9abd6ebe988e00b0b72132ef849870", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=01615b04c6e79fa2e99281b94e6518fb2b505486", "patch": "@@ -19,7 +19,7 @@ fn foo(x: isize) { println!(\"{}\", x); }\n pub fn main() {\n     let x: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5us)); //~ ERROR output operand constraint lacks '='\n+        asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5_usize)); //~ ERROR output operand constraint lacks '='\n     }\n     foo(x);\n }"}, {"sha": "06f14158b91577f7b4219f5b2bcc767e231fc511", "filename": "src/test/compile-fail/issue-13058.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs?ref=01615b04c6e79fa2e99281b94e6518fb2b505486", "patch": "@@ -34,7 +34,7 @@ fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n }\n \n fn main() {\n-    check((3us, 5us));\n+    check((3_usize, 5_usize));\n //~^ ERROR mismatched types\n //~| expected `&_`\n //~| found `(usize, usize)`"}, {"sha": "b817371b8703a2bb7d08b5abebab1a1d0c82a51f", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=01615b04c6e79fa2e99281b94e6518fb2b505486", "patch": "@@ -23,7 +23,7 @@\n pub fn foo(_: [i32; (3 as usize)]) { }\n \n pub fn bar() {\n-    const FOO: usize = ((5us as usize) - (4us as usize) as usize);\n+    const FOO: usize = ((5usize as usize) - (4usize as usize) as usize);\n     let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n \n     let _: [(); (1us as usize)] = ([(() as ())] as [(); 1]);"}, {"sha": "c414d735f7c522b3efb0482daffaae3110047a73", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01615b04c6e79fa2e99281b94e6518fb2b505486/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=01615b04c6e79fa2e99281b94e6518fb2b505486", "patch": "@@ -21,22 +21,22 @@ use std::num::ToPrimitive;\n pub fn main() {\n // ints\n     // num\n-    assert_eq!(15is.add(6is), 21is);\n-    assert_eq!(15i8.add(6i8), 21i8);\n-    assert_eq!(15i16.add(6i16), 21i16);\n-    assert_eq!(15i32.add(6i32), 21i32);\n-    assert_eq!(15i64.add(6i64), 21i64);\n+    assert_eq!(15_isize.add(6_isize), 21_isize);\n+    assert_eq!(15_i8.add(6i8), 21_i8);\n+    assert_eq!(15_i16.add(6i16), 21_i16);\n+    assert_eq!(15_i32.add(6i32), 21_i32);\n+    assert_eq!(15_i64.add(6i64), 21_i64);\n \n // uints\n     // num\n-    assert_eq!(15us.add(6us), 21us);\n-    assert_eq!(15u8.add(6u8), 21u8);\n-    assert_eq!(15u16.add(6u16), 21u16);\n-    assert_eq!(15u32.add(6u32), 21u32);\n-    assert_eq!(15u64.add(6u64), 21u64);\n+    assert_eq!(15_usize.add(6us), 21_usize);\n+    assert_eq!(15_u8.add(6u8), 21_u8);\n+    assert_eq!(15_u16.add(6u16), 21_u16);\n+    assert_eq!(15_u32.add(6u32), 21_u32);\n+    assert_eq!(15_u64.add(6u64), 21_u64);\n \n // floats\n     // num\n-    assert_eq!(10f32.to_i32().unwrap(), 10);\n-    assert_eq!(10f64.to_i32().unwrap(), 10);\n+    assert_eq!(10_f32.to_i32().unwrap(), 10);\n+    assert_eq!(10_f64.to_i32().unwrap(), 10);\n }"}]}