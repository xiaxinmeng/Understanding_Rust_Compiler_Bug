{"sha": "c04b561e7e7d031d7e1be9307fb8d539765768ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNGI1NjFlN2U3ZDAzMWQ3ZTFiZTkzMDdmYjhkNTM5NzY1NzY4ZmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-26T13:03:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-26T13:22:24Z"}, "message": "Remove the need to manually sync config in package.json", "tree": {"sha": "ae162d1da52b375e1a1bf88f5de56b5021c38d79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae162d1da52b375e1a1bf88f5de56b5021c38d79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c04b561e7e7d031d7e1be9307fb8d539765768ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c04b561e7e7d031d7e1be9307fb8d539765768ff", "html_url": "https://github.com/rust-lang/rust/commit/c04b561e7e7d031d7e1be9307fb8d539765768ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c04b561e7e7d031d7e1be9307fb8d539765768ff/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21660f1d979be43af579277ef487118d68533d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/21660f1d979be43af579277ef487118d68533d41", "html_url": "https://github.com/rust-lang/rust/commit/21660f1d979be43af579277ef487118d68533d41"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "071fde64dead0e7e808d5d4fe3ded46cf6fb689a", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c04b561e7e7d031d7e1be9307fb8d539765768ff/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04b561e7e7d031d7e1be9307fb8d539765768ff/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c04b561e7e7d031d7e1be9307fb8d539765768ff", "patch": "@@ -39,7 +39,7 @@ config_data! {\n         /// Automatically refresh project info via `cargo metadata` on\n         /// `Cargo.toml` changes.\n         cargo_autoreload: bool           = \"true\",\n-        /// Activate all available features.\n+        /// Activate all available features (`--all-features`).\n         cargo_allFeatures: bool          = \"false\",\n         /// List of features to activate.\n         cargo_features: Vec<String>      = \"[]\",\n@@ -55,10 +55,10 @@ config_data! {\n \n         /// Run specified `cargo check` command for diagnostics on save.\n         checkOnSave_enable: bool                         = \"true\",\n-        /// Check with all features (will be passed as `--all-features`).\n+        /// Check with all features (`--all-features`).\n         /// Defaults to `#rust-analyzer.cargo.allFeatures#`.\n         checkOnSave_allFeatures: Option<bool>            = \"null\",\n-        /// Check all targets and tests (will be passed as `--all-targets`).\n+        /// Check all targets and tests (`--all-targets`).\n         checkOnSave_allTargets: bool                     = \"true\",\n         /// Cargo command to use for `cargo check`.\n         checkOnSave_command: String                      = \"\\\"check\\\"\",\n@@ -156,7 +156,7 @@ config_data! {\n         /// `rust-project.json`, or JSON objects in `rust-project.json` format.\n         linkedProjects: Vec<ManifestOrProjectJson> = \"[]\",\n \n-        /// Number of syntax trees rust-analyzer keeps in memory.  Defaults to 128.\n+        /// Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.\n         lruCapacity: Option<usize>                 = \"null\",\n \n         /// Whether to show `can't find Cargo.toml` error message.\n@@ -844,15 +844,32 @@ mod tests {\n     fn schema_in_sync_with_package_json() {\n         let s = Config::json_schema();\n         let schema = format!(\"{:#}\", s);\n-        let schema = schema.trim_start_matches('{').trim_end_matches('}');\n-\n-        let package_json = project_dir().join(\"editors/code/package.json\");\n-        let package_json = fs::read_to_string(&package_json).unwrap();\n-\n-        let p = remove_ws(&package_json);\n+        let mut schema = schema\n+            .trim_start_matches('{')\n+            .trim_end_matches('}')\n+            .replace(\"  \", \"    \")\n+            .replace(\"\\n\", \"\\n            \")\n+            .trim_start_matches('\\n')\n+            .trim_end()\n+            .to_string();\n+        schema.push_str(\",\\n\");\n+\n+        let package_json_path = project_dir().join(\"editors/code/package.json\");\n+        let mut package_json = fs::read_to_string(&package_json_path).unwrap();\n+\n+        let start_marker = \"                \\\"$generated-start\\\": false,\\n\";\n+        let end_marker = \"                \\\"$generated-end\\\": false\\n\";\n+\n+        let start = package_json.find(start_marker).unwrap() + start_marker.len();\n+        let end = package_json.find(end_marker).unwrap();\n+        let p = remove_ws(&package_json[start..end]);\n         let s = remove_ws(&schema);\n \n-        assert!(p.contains(&s), \"update config in package.json. New config:\\n{:#}\", schema);\n+        if !p.contains(&s) {\n+            package_json.replace_range(start..end, &schema);\n+            fs::write(&package_json_path, &mut package_json).unwrap();\n+            panic!(\"new config, updating package.json\")\n+        }\n     }\n \n     #[test]"}, {"sha": "1974082da575b32a13501a9b1033e7c525e9ecc5", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c04b561e7e7d031d7e1be9307fb8d539765768ff/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/c04b561e7e7d031d7e1be9307fb8d539765768ff/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=c04b561e7e7d031d7e1be9307fb8d539765768ff", "patch": "@@ -7,7 +7,7 @@\n [[rust-analyzer.cargo.autoreload]]rust-analyzer.cargo.autoreload (default: `true`)::\n  Automatically refresh project info via `cargo metadata` on  `Cargo.toml` changes.\n [[rust-analyzer.cargo.allFeatures]]rust-analyzer.cargo.allFeatures (default: `false`)::\n- Activate all available features.\n+ Activate all available features (`--all-features`).\n [[rust-analyzer.cargo.features]]rust-analyzer.cargo.features (default: `[]`)::\n  List of features to activate.\n [[rust-analyzer.cargo.loadOutDirsFromCheck]]rust-analyzer.cargo.loadOutDirsFromCheck (default: `false`)::\n@@ -21,9 +21,9 @@\n [[rust-analyzer.checkOnSave.enable]]rust-analyzer.checkOnSave.enable (default: `true`)::\n  Run specified `cargo check` command for diagnostics on save.\n [[rust-analyzer.checkOnSave.allFeatures]]rust-analyzer.checkOnSave.allFeatures (default: `null`)::\n- Check with all features (will be passed as `--all-features`).  Defaults to `#rust-analyzer.cargo.allFeatures#`.\n+ Check with all features (`--all-features`).  Defaults to `#rust-analyzer.cargo.allFeatures#`.\n [[rust-analyzer.checkOnSave.allTargets]]rust-analyzer.checkOnSave.allTargets (default: `true`)::\n- Check all targets and tests (will be passed as `--all-targets`).\n+ Check all targets and tests (`--all-targets`).\n [[rust-analyzer.checkOnSave.command]]rust-analyzer.checkOnSave.command (default: `\"check\"`)::\n  Cargo command to use for `cargo check`.\n [[rust-analyzer.checkOnSave.noDefaultFeatures]]rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n@@ -91,7 +91,7 @@\n [[rust-analyzer.linkedProjects]]rust-analyzer.linkedProjects (default: `[]`)::\n  Disable project auto-discovery in favor of explicitly specified set  of projects.\\n\\nElements must be paths pointing to `Cargo.toml`,  `rust-project.json`, or JSON objects in `rust-project.json` format.\n [[rust-analyzer.lruCapacity]]rust-analyzer.lruCapacity (default: `null`)::\n- Number of syntax trees rust-analyzer keeps in memory.  Defaults to 128.\n+ Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.\n [[rust-analyzer.notifications.cargoTomlNotFound]]rust-analyzer.notifications.cargoTomlNotFound (default: `true`)::\n  Whether to show `can't find Cargo.toml` error message.\n [[rust-analyzer.procMacro.enable]]rust-analyzer.procMacro.enable (default: `false`)::"}, {"sha": "ee54638f1836996361956b9af93a0dc2fcb8543f", "filename": "editors/code/package.json", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c04b561e7e7d031d7e1be9307fb8d539765768ff/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/c04b561e7e7d031d7e1be9307fb8d539765768ff/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=c04b561e7e7d031d7e1be9307fb8d539765768ff", "patch": "@@ -349,6 +349,7 @@\n                     \"default\": {},\n                     \"markdownDescription\": \"Optional settings passed to the debug engine. Example: `{ \\\"lldb\\\": { \\\"terminal\\\":\\\"external\\\"} }`\"\n                 },\n+                \"$generated-start\": false,\n                 \"rust-analyzer.assist.importMergeBehavior\": {\n                     \"markdownDescription\": \"The strategy to use when inserting new imports or merging imports.\",\n                     \"default\": \"full\",\n@@ -390,7 +391,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.cargo.allFeatures\": {\n-                    \"markdownDescription\": \"Activate all available features.\",\n+                    \"markdownDescription\": \"Activate all available features (`--all-features`).\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n@@ -431,15 +432,15 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.checkOnSave.allFeatures\": {\n-                    \"markdownDescription\": \"Check with all features (will be passed as `--all-features`). Defaults to `#rust-analyzer.cargo.allFeatures#`.\",\n+                    \"markdownDescription\": \"Check with all features (`--all-features`). Defaults to `#rust-analyzer.cargo.allFeatures#`.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n                         \"boolean\"\n                     ]\n                 },\n                 \"rust-analyzer.checkOnSave.allTargets\": {\n-                    \"markdownDescription\": \"Check all targets and tests (will be passed as `--all-targets`).\",\n+                    \"markdownDescription\": \"Check all targets and tests (`--all-targets`).\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n@@ -650,7 +651,7 @@\n                     }\n                 },\n                 \"rust-analyzer.lruCapacity\": {\n-                    \"markdownDescription\": \"Number of syntax trees rust-analyzer keeps in memory.  Defaults to 128.\",\n+                    \"markdownDescription\": \"Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n@@ -718,7 +719,8 @@\n                     \"items\": {\n                         \"type\": \"string\"\n                     }\n-                }\n+                },\n+                \"$generated-end\": false\n             }\n         },\n         \"problemPatterns\": ["}]}