{"sha": "5bd5ea21ea97800e4173a8793beebc424d45358b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZDVlYTIxZWE5NzgwMGU0MTczYTg3OTNiZWViYzQyNGQ0NTM1OGI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-08T15:57:09Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-08T15:59:20Z"}, "message": "Remove unwrap_none as it won't be stabilized.\n\nThis upgrades to the latest rustc to be able to use try_insert()\ninstead.", "tree": {"sha": "61c77febab4fdc4aaef1c045bac70025e5f45585", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c77febab4fdc4aaef1c045bac70025e5f45585"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bd5ea21ea97800e4173a8793beebc424d45358b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd5ea21ea97800e4173a8793beebc424d45358b", "html_url": "https://github.com/rust-lang/rust/commit/5bd5ea21ea97800e4173a8793beebc424d45358b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bd5ea21ea97800e4173a8793beebc424d45358b/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a0e366ccf36e845d12d959e50b29b49ef66342d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0e366ccf36e845d12d959e50b29b49ef66342d", "html_url": "https://github.com/rust-lang/rust/commit/0a0e366ccf36e845d12d959e50b29b49ef66342d"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "e518870d5b77972ba158521277ca076a6d29bf23", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bd5ea21ea97800e4173a8793beebc424d45358b/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/5bd5ea21ea97800e4173a8793beebc424d45358b/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=5bd5ea21ea97800e4173a8793beebc424d45358b", "patch": "@@ -1 +1 @@\n-09db05762b283bed62d4f92729cfee4646519833\n+1d6b0f626aad4ee9f2eaec4d5582f45620ccab80"}, {"sha": "07356ab02032718e8c074b583d34d988105649c2", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=5bd5ea21ea97800e4173a8793beebc424d45358b", "patch": "@@ -179,7 +179,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             )?;\n             this.write_immediate(*arg, &callee_arg)?;\n         }\n-        callee_args.next().expect_none(\"callee has more arguments than expected\");\n+        assert_eq!(callee_args.next(), None, \"callee has more arguments than expected\");\n \n         Ok(())\n     }"}, {"sha": "7fc080a937f0013d8d1bcc6fc801ab3705bd6a26", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5bd5ea21ea97800e4173a8793beebc424d45358b", "patch": "@@ -1,6 +1,6 @@\n #![feature(rustc_private)]\n-#![feature(option_expect_none, option_unwrap_none)]\n #![feature(map_first_last)]\n+#![feature(map_try_insert)]\n #![feature(never_type)]\n #![feature(or_patterns)]\n #![feature(try_blocks)]"}, {"sha": "1415f7506a4ec6c29ed7b8cb27e43f717f02aa36", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=5bd5ea21ea97800e4173a8793beebc424d45358b", "patch": "@@ -179,8 +179,8 @@ impl MemoryExtra {\n         this.memory\n             .extra\n             .extern_statics\n-            .insert(Symbol::intern(name), ptr.alloc_id)\n-            .unwrap_none();\n+            .try_insert(Symbol::intern(name), ptr.alloc_id)\n+            .unwrap();\n     }\n \n     /// Sets up the \"extern statics\" for this machine."}, {"sha": "def2aca292a53b87f500663b5dc063c3d4f22da6", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=5bd5ea21ea97800e4173a8793beebc424d45358b", "patch": "@@ -223,7 +223,7 @@ impl<'tcx> FileHandler {\n             self.handles.last_key_value().map(|(fd, _)| fd.checked_add(1).unwrap()).unwrap_or(min_fd)\n         });\n \n-        self.handles.insert(new_fd, file_handle).unwrap_none();\n+        self.handles.try_insert(new_fd, file_handle).unwrap();\n         new_fd\n     }\n }\n@@ -381,7 +381,7 @@ impl DirHandler {\n     fn insert_new(&mut self, read_dir: ReadDir) -> u64 {\n         let id = self.next_id;\n         self.next_id += 1;\n-        self.streams.insert(id, read_dir).unwrap_none();\n+        self.streams.try_insert(id, read_dir).unwrap();\n         id\n     }\n }"}, {"sha": "36bae2af9cd03a8784c5e5ce3906c84da7bb6e97", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=5bd5ea21ea97800e4173a8793beebc424d45358b", "patch": "@@ -65,7 +65,7 @@ impl<'tcx> TlsData<'tcx> {\n     pub fn create_tls_key(&mut self, dtor: Option<ty::Instance<'tcx>>, max_size: Size) -> InterpResult<'tcx, TlsKey> {\n         let new_key = self.next_key;\n         self.next_key += 1;\n-        self.keys.insert(new_key, TlsEntry { data: Default::default(), dtor }).unwrap_none();\n+        self.keys.try_insert(new_key, TlsEntry { data: Default::default(), dtor }).unwrap();\n         trace!(\"New TLS key allocated: {} with dtor {:?}\", new_key, dtor);\n \n         if max_size.bits() < 128 && new_key >= (1u128 << max_size.bits() as u128) {"}, {"sha": "fbcd265baa113179aa5041b1c9ef1662e35fa878", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=5bd5ea21ea97800e4173a8793beebc424d45358b", "patch": "@@ -201,7 +201,7 @@ impl GlobalState {\n         self.base_ptr_ids.get(&id).copied().unwrap_or_else(|| {\n             let tag = Tag::Tagged(self.new_ptr());\n             trace!(\"New allocation {:?} has base tag {:?}\", id, tag);\n-            self.base_ptr_ids.insert(id, tag).unwrap_none();\n+            self.base_ptr_ids.try_insert(id, tag).unwrap();\n             tag\n         })\n     }"}, {"sha": "4fe44ef9d4a7d50832f5a7cfe3393f06cfcb4beb", "filename": "src/thread.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd5ea21ea97800e4173a8793beebc424d45358b/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=5bd5ea21ea97800e4173a8793beebc424d45358b", "patch": "@@ -257,8 +257,8 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     fn set_thread_local_alloc_id(&self, def_id: DefId, new_alloc_id: AllocId) {\n         self.thread_local_alloc_ids\n             .borrow_mut()\n-            .insert((def_id, self.active_thread), new_alloc_id)\n-            .unwrap_none();\n+            .try_insert((def_id, self.active_thread), new_alloc_id)\n+            .unwrap();\n     }\n \n     /// Borrow the stack of the active thread.\n@@ -404,8 +404,8 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         callback: TimeoutCallback<'mir, 'tcx>,\n     ) {\n         self.timeout_callbacks\n-            .insert(thread, TimeoutCallbackInfo { call_time, callback })\n-            .unwrap_none();\n+            .try_insert(thread, TimeoutCallbackInfo { call_time, callback })\n+            .unwrap();\n     }\n \n     /// Unregister the callback for the `thread`."}, {"sha": "e3050ad11835e8418013a3b951a094297553b865", "filename": "tests/run-pass/panic/std-panic-locations.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bd5ea21ea97800e4173a8793beebc424d45358b/tests%2Frun-pass%2Fpanic%2Fstd-panic-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd5ea21ea97800e4173a8793beebc424d45358b/tests%2Frun-pass%2Fpanic%2Fstd-panic-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fstd-panic-locations.rs?ref=5bd5ea21ea97800e4173a8793beebc424d45358b", "patch": "@@ -1,4 +1,3 @@\n-#![feature(option_expect_none, option_unwrap_none)]\n //! Test that panic locations for `#[track_caller]` functions in std have the correct\n //! location reported.\n \n@@ -25,10 +24,6 @@ fn main() {\n     assert_panicked(|| nope.unwrap());\n     assert_panicked(|| nope.expect(\"\"));\n \n-    let yep: Option<()> = Some(());\n-    assert_panicked(|| yep.unwrap_none());\n-    assert_panicked(|| yep.expect_none(\"\"));\n-\n     let oops: Result<(), ()> = Err(());\n     assert_panicked(|| oops.unwrap());\n     assert_panicked(|| oops.expect(\"\"));"}]}