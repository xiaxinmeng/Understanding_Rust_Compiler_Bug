{"sha": "6f4ec72362c2cf223b85d4fae9a1592a02e80317", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNGVjNzIzNjJjMmNmMjIzYjg1ZDRmYWU5YTE1OTJhMDJlODAzMTc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-01T16:23:22Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:43Z"}, "message": "std::rand: add & split some tests.", "tree": {"sha": "dc08d372ff759d5269bc3f626354136e74a2cdbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc08d372ff759d5269bc3f626354136e74a2cdbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f4ec72362c2cf223b85d4fae9a1592a02e80317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f4ec72362c2cf223b85d4fae9a1592a02e80317", "html_url": "https://github.com/rust-lang/rust/commit/6f4ec72362c2cf223b85d4fae9a1592a02e80317", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f4ec72362c2cf223b85d4fae9a1592a02e80317/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e3b33a0954f2494278d74344792f4b84a44120", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e3b33a0954f2494278d74344792f4b84a44120", "html_url": "https://github.com/rust-lang/rust/commit/29e3b33a0954f2494278d74344792f4b84a44120"}], "stats": {"total": 89, "additions": 82, "deletions": 7}, "files": [{"sha": "0166f83f8c468a5cf64989c7249ca8fc3bf0c8ad", "filename": "src/libstd/rand/isaac.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6f4ec72362c2cf223b85d4fae9a1592a02e80317/src%2Flibstd%2Frand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f4ec72362c2cf223b85d4fae9a1592a02e80317/src%2Flibstd%2Frand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fisaac.rs?ref=6f4ec72362c2cf223b85d4fae9a1592a02e80317", "patch": "@@ -408,33 +408,58 @@ mod test {\n     use vec;\n \n     #[test]\n-    fn test_rng_seeded() {\n+    fn test_rng_32_rand_seeded() {\n         let s = unsafe {seed::<u32>(256)};\n         let mut ra: IsaacRng = SeedableRng::from_seed(s.as_slice());\n         let mut rb: IsaacRng = SeedableRng::from_seed(s.as_slice());\n         assert_eq!(ra.gen_ascii_str(100u), rb.gen_ascii_str(100u));\n-\n+    }\n+    #[test]\n+    fn test_rng_64_rand_seeded() {\n         let s = unsafe {seed::<u64>(256)};\n         let mut ra: Isaac64Rng = SeedableRng::from_seed(s.as_slice());\n         let mut rb: Isaac64Rng = SeedableRng::from_seed(s.as_slice());\n         assert_eq!(ra.gen_ascii_str(100u), rb.gen_ascii_str(100u));\n     }\n \n     #[test]\n-    fn test_rng_seeded_custom_seed() {\n-        // much shorter than generated seeds which are 1024 & 2048\n-        // bytes resp.\n+    fn test_rng_32_seeded() {\n         let seed = &[2, 32, 4, 32, 51];\n         let mut ra: IsaacRng = SeedableRng::from_seed(seed);\n         let mut rb: IsaacRng = SeedableRng::from_seed(seed);\n         assert_eq!(ra.gen_ascii_str(100u), rb.gen_ascii_str(100u));\n-\n+    }\n+    #[test]\n+    fn test_rng_64_seeded() {\n         let seed = &[2, 32, 4, 32, 51];\n         let mut ra: Isaac64Rng = SeedableRng::from_seed(seed);\n         let mut rb: Isaac64Rng = SeedableRng::from_seed(seed);\n         assert_eq!(ra.gen_ascii_str(100u), rb.gen_ascii_str(100u));\n     }\n \n+    #[test]\n+    fn test_rng_32_reseed() {\n+        let s = unsafe {seed::<u32>(256)};\n+        let mut r: IsaacRng = SeedableRng::from_seed(s.as_slice());\n+        let string1 = r.gen_ascii_str(100);\n+\n+        r.reseed(s);\n+\n+        let string2 = r.gen_ascii_str(100);\n+        assert_eq!(string1, string2);\n+    }\n+    #[test]\n+    fn test_rng_64_reseed() {\n+        let s = unsafe {seed::<u64>(256)};\n+        let mut r: Isaac64Rng = SeedableRng::from_seed(s.as_slice());\n+        let string1 = r.gen_ascii_str(100);\n+\n+        r.reseed(s);\n+\n+        let string2 = r.gen_ascii_str(100);\n+        assert_eq!(string1, string2);\n+    }\n+\n     #[test]\n     fn test_rng_32_true_values() {\n         let seed = &[2, 32, 4, 32, 51];"}, {"sha": "97d723bc7a0b6f73875d90d34696b692866f5618", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f4ec72362c2cf223b85d4fae9a1592a02e80317/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f4ec72362c2cf223b85d4fae9a1592a02e80317/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=6f4ec72362c2cf223b85d4fae9a1592a02e80317", "patch": "@@ -1141,6 +1141,26 @@ mod test {\n         }));\n     }\n \n+    #[test]\n+    fn test_std_rng_seeded() {\n+        let s = unsafe {seed::<uint>(256)};\n+        let mut ra: StdRng = SeedableRng::from_seed(s.as_slice());\n+        let mut rb: StdRng = SeedableRng::from_seed(s.as_slice());\n+        assert_eq!(ra.gen_ascii_str(100u), rb.gen_ascii_str(100u));\n+    }\n+\n+    #[test]\n+    fn test_std_rng_reseed() {\n+        let s = unsafe {seed::<uint>(256)};\n+        let mut r: StdRng = SeedableRng::from_seed(s.as_slice());\n+        let string1 = r.gen_ascii_str(100);\n+\n+        r.reseed(s);\n+\n+        let string2 = r.gen_ascii_str(100);\n+        assert_eq!(string1, string2);\n+    }\n+\n     #[test]\n     fn test_seed_task_rng() {\n         seed_task_rng([1]);"}, {"sha": "c3ceb1b8aa57aa98f67e9c6b9812d44d4928a5ef", "filename": "src/libstd/rand/reseeding.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6f4ec72362c2cf223b85d4fae9a1592a02e80317/src%2Flibstd%2Frand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f4ec72362c2cf223b85d4fae9a1592a02e80317/src%2Flibstd%2Frand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freseeding.rs?ref=6f4ec72362c2cf223b85d4fae9a1592a02e80317", "patch": "@@ -108,11 +108,14 @@ impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {\n         *rng = Default::default();\n     }\n }\n+impl Default for ReseedWithDefault {\n+    fn default() -> ReseedWithDefault { ReseedWithDefault }\n+}\n \n #[cfg(test)]\n mod test {\n     use super::*;\n-    use rand::Rng;\n+    use rand::{SeedableRng, Rng};\n     use default::Default;\n     use iter::range;\n     use option::{None, Some};\n@@ -133,6 +136,15 @@ mod test {\n             Counter { i: 0 }\n         }\n     }\n+    impl SeedableRng<u32> for Counter {\n+        fn reseed(&mut self, seed: u32) {\n+            self.i = seed;\n+        }\n+        fn from_seed(seed: u32) -> Counter {\n+            Counter { i: seed }\n+        }\n+    }\n+    type MyRng = ReseedingRng<Counter, ReseedWithDefault>;\n \n     #[test]\n     fn test_reseeding() {\n@@ -144,4 +156,22 @@ mod test {\n             i += 1;\n         }\n     }\n+\n+    #[test]\n+    fn test_rng_seeded() {\n+        let mut ra: MyRng = SeedableRng::from_seed(2);\n+        let mut rb: MyRng = SeedableRng::from_seed(2);\n+        assert_eq!(ra.gen_ascii_str(100u), rb.gen_ascii_str(100u));\n+    }\n+\n+    #[test]\n+    fn test_rng_reseed() {\n+        let mut r: MyRng = SeedableRng::from_seed(3);\n+        let string1 = r.gen_ascii_str(100);\n+\n+        r.reseed(3);\n+\n+        let string2 = r.gen_ascii_str(100);\n+        assert_eq!(string1, string2);\n+    }\n }"}]}