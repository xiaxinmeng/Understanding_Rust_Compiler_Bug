{"sha": "49e89772f63e10ebeb3c8720bd0b0ef8244f6c4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZTg5NzcyZjYzZTEwZWJlYjNjODcyMGJkMGIwZWY4MjQ0ZjZjNGE=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-10-28T01:26:12Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-10-28T12:32:22Z"}, "message": "Preliminary enum variant support", "tree": {"sha": "692c35449952ec6fc3a92fb0f7fbece9ba3f5ec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/692c35449952ec6fc3a92fb0f7fbece9ba3f5ec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49e89772f63e10ebeb3c8720bd0b0ef8244f6c4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49e89772f63e10ebeb3c8720bd0b0ef8244f6c4a", "html_url": "https://github.com/rust-lang/rust/commit/49e89772f63e10ebeb3c8720bd0b0ef8244f6c4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49e89772f63e10ebeb3c8720bd0b0ef8244f6c4a/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55d4b06a53246c144be900877e6ac03237d6f8b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/55d4b06a53246c144be900877e6ac03237d6f8b4", "html_url": "https://github.com/rust-lang/rust/commit/55d4b06a53246c144be900877e6ac03237d6f8b4"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "e6bdaae6a6c52069fd313f2f0bfe33c70f3457a9", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/49e89772f63e10ebeb3c8720bd0b0ef8244f6c4a/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e89772f63e10ebeb3c8720bd0b0ef8244f6c4a/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=49e89772f63e10ebeb3c8720bd0b0ef8244f6c4a", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n                     (CallInfo::with_fn(db, it), it.data(db).has_self_param())\n                 }\n                 hir::CallableDef::Struct(it) => (CallInfo::with_struct(db, it), false),\n-                hir::CallableDef::EnumVariant(_it) => return None,\n+                hir::CallableDef::EnumVariant(it) => (CallInfo::with_enum_variant(db, it), false),\n             }\n         }\n         FnCallNode::MethodCallExpr(expr) => {\n@@ -129,6 +129,12 @@ impl CallInfo {\n         CallInfo { signature, active_parameter: None }\n     }\n \n+    fn with_enum_variant(db: &RootDatabase, variant: hir::EnumVariant) -> Self {\n+        let signature = FunctionSignature::from_enum_variant(db, variant);\n+\n+        CallInfo { signature, active_parameter: None }\n+    }\n+\n     fn parameters(&self) -> &[String] {\n         &self.signature.parameters\n     }\n@@ -485,4 +491,28 @@ fn main() {\n         assert_eq!(info.doc().map(|it| it.into()), Some(\"A cool tuple struct\".to_string()));\n         assert_eq!(info.active_parameter, Some(1));\n     }\n+\n+    #[test]\n+    fn works_for_enum_variants() {\n+        let info = call_info(\n+            r#\"\n+enum E {\n+    /// A Variant\n+    A(i32),\n+    /// Another\n+    B,\n+    /// And C\n+    C(a: i32, b: i32)\n+}\n+\n+fn main() {\n+    let a = E::A(<|>);\n+}\n+            \"#,\n+        );\n+\n+        assert_eq!(info.label(), \"E::A(0: i32)\");\n+        assert_eq!(info.doc().map(|it| it.into()), Some(\"A Variant\".to_string()));\n+        assert_eq!(info.active_parameter, Some(0));\n+    }\n }"}, {"sha": "6b169b3ae5ac3909633374e2a2386dc851fee272", "filename": "crates/ra_ide_api/src/display/function_signature.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/49e89772f63e10ebeb3c8720bd0b0ef8244f6c4a/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e89772f63e10ebeb3c8720bd0b0ef8244f6c4a/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=49e89772f63e10ebeb3c8720bd0b0ef8244f6c4a", "patch": "@@ -16,6 +16,7 @@ use crate::{\n pub enum SigKind {\n     Function,\n     Struct,\n+    EnumVariant,\n }\n \n /// Contains information about a function signature\n@@ -70,13 +71,46 @@ impl FunctionSignature {\n             visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n             name: node.name().map(|n| n.text().to_string()),\n             ret_type: node.name().map(|n| n.text().to_string()),\n-            parameters: /*param_list(node)*/ params,\n+            parameters: params,\n             generic_parameters: generic_parameters(&node),\n             where_predicates: where_predicates(&node),\n             doc: None,\n         }\n         .with_doc_opt(doc)\n     }\n+\n+    pub(crate) fn from_enum_variant(db: &db::RootDatabase, variant: hir::EnumVariant) -> Self {\n+        let doc = variant.docs(db);\n+\n+        let parent_name = match variant.parent_enum(db).name(db) {\n+            Some(name) => name.to_string(),\n+            None => \"missing\".into(),\n+        };\n+\n+        let name = format!(\"{}::{}\", parent_name, variant.name(db).unwrap());\n+\n+        let params = variant\n+            .fields(db)\n+            .into_iter()\n+            .map(|field: hir::StructField| {\n+                let name = field.name(db);\n+                let ty = field.ty(db);\n+                format!(\"{}: {}\", name, ty.display(db))\n+            })\n+            .collect();\n+\n+        FunctionSignature {\n+            kind: SigKind::EnumVariant,\n+            visibility: None,\n+            name: Some(name),\n+            ret_type: None,\n+            parameters: params,\n+            generic_parameters: vec![],\n+            where_predicates: vec![],\n+            doc: None,\n+        }\n+        .with_doc_opt(doc)\n+    }\n }\n \n impl From<&'_ ast::FnDef> for FunctionSignature {\n@@ -120,6 +154,7 @@ impl Display for FunctionSignature {\n             match self.kind {\n                 SigKind::Function => write!(f, \"fn {}\", name)?,\n                 SigKind::Struct => write!(f, \"struct {}\", name)?,\n+                SigKind::EnumVariant => write!(f, \"{}\", name)?,\n             }\n         }\n "}]}