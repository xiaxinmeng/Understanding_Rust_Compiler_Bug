{"sha": "5ef0c7a21387c219478754393bf9ac1b1cebf0d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZjBjN2EyMTM4N2MyMTk0Nzg3NTQzOTNiZjlhYzFiMWNlYmYwZDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-01T21:11:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-01T21:11:06Z"}, "message": "Merge #8283\n\n8283: Resolve associated types r=flodiebold a=Veykril\n\nPrior we were only resolving paths until the first type was found, then discarding the result if the path wasn't fully consumed. That of course causes associated types to not resolve. Fixes #5003\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "a154c84cb2baee3f83d5b5da331f0cee5ef8ef2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a154c84cb2baee3f83d5b5da331f0cee5ef8ef2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ef0c7a21387c219478754393bf9ac1b1cebf0d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZjbrCRBK7hj4Ov3rIwAAdHIIAJLbytmmPUKNdsZ4hYhuopUO\ntE2HI9WP8MoYwWtDVkqG4sfKMw2KHhBb//oFRz3h4DJ8rqfLIjV78Fv+uZTEkSho\nUlejq8YelTt8eM6fdUQNC38O53SnBFx5T/XY7PSh5rERL/3HK3tLrXOA/PL9jC9o\nuarbmWSYdQ+ES7pH4BsLgV9mEmwgWz+UX/5elSDS65d7U0uheiiuZ9UHZAWgC6lT\njxhL0dkk6yjUtQP+OYoTC60UUKSn0PUYnZ8D+PJGJ6ZxiFLM3LVE8e2VWXz1n9/0\nhXhBrHMiL9+2vNr6MHOhfLUBxFQ9tHH01PlGlA5j8QvZYlcxWYkMNt3bm+N1SY4=\n=TrBl\n-----END PGP SIGNATURE-----\n", "payload": "tree a154c84cb2baee3f83d5b5da331f0cee5ef8ef2f\nparent 1c936dcbe1be90e094ac436a0b62ec070bd6953d\nparent 9fe10a96069ea0f617ff86049bb50922b5424fae\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617311466 +0000\ncommitter GitHub <noreply@github.com> 1617311466 +0000\n\nMerge #8283\n\n8283: Resolve associated types r=flodiebold a=Veykril\n\nPrior we were only resolving paths until the first type was found, then discarding the result if the path wasn't fully consumed. That of course causes associated types to not resolve. Fixes #5003\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef0c7a21387c219478754393bf9ac1b1cebf0d4", "html_url": "https://github.com/rust-lang/rust/commit/5ef0c7a21387c219478754393bf9ac1b1cebf0d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ef0c7a21387c219478754393bf9ac1b1cebf0d4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c936dcbe1be90e094ac436a0b62ec070bd6953d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c936dcbe1be90e094ac436a0b62ec070bd6953d", "html_url": "https://github.com/rust-lang/rust/commit/1c936dcbe1be90e094ac436a0b62ec070bd6953d"}, {"sha": "9fe10a96069ea0f617ff86049bb50922b5424fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe10a96069ea0f617ff86049bb50922b5424fae", "html_url": "https://github.com/rust-lang/rust/commit/9fe10a96069ea0f617ff86049bb50922b5424fae"}], "stats": {"total": 103, "additions": 96, "deletions": 7}, "files": [{"sha": "3bf722d2a708c7473b726c2d11328ab017cbf506", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ef0c7a21387c219478754393bf9ac1b1cebf0d4/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef0c7a21387c219478754393bf9ac1b1cebf0d4/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=5ef0c7a21387c219478754393bf9ac1b1cebf0d4", "patch": "@@ -76,9 +76,11 @@ impl PathResolution {\n     pub fn assoc_type_shorthand_candidates<R>(\n         &self,\n         db: &dyn HirDatabase,\n-        mut cb: impl FnMut(TypeAlias) -> Option<R>,\n+        mut cb: impl FnMut(&Name, TypeAlias) -> Option<R>,\n     ) -> Option<R> {\n-        associated_type_shorthand_candidates(db, self.in_type_ns()?, |_, _, id| cb(id.into()))\n+        associated_type_shorthand_candidates(db, self.in_type_ns()?, |name, _, id| {\n+            cb(name, id.into())\n+        })\n     }\n }\n "}, {"sha": "8e9ea0a0388701126a42c627b95886b7da683775", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5ef0c7a21387c219478754393bf9ac1b1cebf0d4/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef0c7a21387c219478754393bf9ac1b1cebf0d4/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=5ef0c7a21387c219478754393bf9ac1b1cebf0d4", "patch": "@@ -20,7 +20,7 @@ use hir_def::{\n use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n use hir_ty::{\n     diagnostics::{record_literal_missing_fields, record_pattern_missing_fields},\n-    InferenceResult, Substitution,\n+    InferenceResult, Substitution, TyLoweringContext,\n };\n use syntax::{\n     ast::{self, AstNode},\n@@ -466,7 +466,21 @@ fn resolve_hir_path_(\n     prefer_value_ns: bool,\n ) -> Option<PathResolution> {\n     let types = || {\n-        resolver.resolve_path_in_type_ns_fully(db.upcast(), path.mod_path()).map(|ty| match ty {\n+        let (ty, unresolved) = match path.type_anchor() {\n+            Some(type_ref) => {\n+                let (_, res) = TyLoweringContext::new(db, resolver).lower_ty_ext(type_ref);\n+                res.map(|ty_ns| (ty_ns, path.segments().first()))\n+            }\n+            None => {\n+                let (ty, remaining) =\n+                    resolver.resolve_path_in_type_ns(db.upcast(), path.mod_path())?;\n+                match remaining {\n+                    Some(remaining) if remaining > 1 => None,\n+                    _ => Some((ty, path.segments().get(1))),\n+                }\n+            }\n+        }?;\n+        let res = match ty {\n             TypeNs::SelfType(it) => PathResolution::SelfType(it.into()),\n             TypeNs::GenericParam(id) => PathResolution::TypeParam(TypeParam { id }),\n             TypeNs::AdtSelfType(it) | TypeNs::AdtId(it) => {\n@@ -476,7 +490,17 @@ fn resolve_hir_path_(\n             TypeNs::TypeAliasId(it) => PathResolution::Def(TypeAlias::from(it).into()),\n             TypeNs::BuiltinType(it) => PathResolution::Def(BuiltinType::from(it).into()),\n             TypeNs::TraitId(it) => PathResolution::Def(Trait::from(it).into()),\n-        })\n+        };\n+        match unresolved {\n+            Some(unresolved) => res\n+                .assoc_type_shorthand_candidates(db, |name, alias| {\n+                    (name == unresolved.name).then(|| alias)\n+                })\n+                .map(TypeAlias::from)\n+                .map(Into::into)\n+                .map(PathResolution::Def),\n+            None => Some(res),\n+        }\n     };\n \n     let body_owner = resolver.body_owner();"}, {"sha": "14f34d73c687189e18fd7edd0a42d1f4fdeee766", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ef0c7a21387c219478754393bf9ac1b1cebf0d4/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef0c7a21387c219478754393bf9ac1b1cebf0d4/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=5ef0c7a21387c219478754393bf9ac1b1cebf0d4", "patch": "@@ -146,7 +146,7 @@ impl<'a> TyLoweringContext<'a> {\n         self.lower_ty_ext(type_ref).0\n     }\n \n-    fn lower_ty_ext(&self, type_ref: &TypeRef) -> (Ty, Option<TypeNs>) {\n+    pub fn lower_ty_ext(&self, type_ref: &TypeRef) -> (Ty, Option<TypeNs>) {\n         let mut res = None;\n         let ty = match type_ref {\n             TypeRef::Never => TyKind::Never.intern(&Interner),"}, {"sha": "28e2e17dc22f2ad0f5c7f8721aa715c63d99a383", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5ef0c7a21387c219478754393bf9ac1b1cebf0d4/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef0c7a21387c219478754393bf9ac1b1cebf0d4/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=5ef0c7a21387c219478754393bf9ac1b1cebf0d4", "patch": "@@ -3834,4 +3834,67 @@ fn foo() {}\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn hover_generic_assoc() {\n+        check(\n+            r#\"\n+fn foo<T: A>() where T::Assoc$0: {}\n+\n+trait A {\n+    type Assoc;\n+}\"#,\n+            expect![[r#\"\n+                *Assoc*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                type Assoc\n+                ```\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+fn foo<T: A>() {\n+    let _: <T>::Assoc$0;\n+}\n+\n+trait A {\n+    type Assoc;\n+}\"#,\n+            expect![[r#\"\n+                *Assoc*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                type Assoc\n+                ```\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+trait A where\n+    Self::Assoc$0: ,\n+{\n+    type Assoc;\n+}\"#,\n+            expect![[r#\"\n+                *Assoc*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                type Assoc\n+                ```\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "969249df6035a528154aab0cabe98f8b1c1dd246", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ef0c7a21387c219478754393bf9ac1b1cebf0d4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef0c7a21387c219478754393bf9ac1b1cebf0d4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=5ef0c7a21387c219478754393bf9ac1b1cebf0d4", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n     };\n \n     // Add associated types on type parameters and `Self`.\n-    resolution.assoc_type_shorthand_candidates(ctx.db, |alias| {\n+    resolution.assoc_type_shorthand_candidates(ctx.db, |_, alias| {\n         acc.add_type_alias(ctx, alias);\n         None::<()>\n     });"}]}