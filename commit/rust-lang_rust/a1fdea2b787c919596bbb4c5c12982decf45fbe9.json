{"sha": "a1fdea2b787c919596bbb4c5c12982decf45fbe9", "node_id": "C_kwDOAAsO6NoAKGExZmRlYTJiNzg3YzkxOTU5NmJiYjRjNWMxMjk4MmRlY2Y0NWZiZTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-15T18:11:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-15T18:11:36Z"}, "message": "Rollup merge of #100514 - compiler-errors:issue-100191, r=spastorino\n\nDelay span bug when failing to normalize negative coherence impl subject due to other malformed impls\n\nFixes #100191\n\nr? ``@spastorino``", "tree": {"sha": "499f2ef906cffe718a62686c48db65c47c1d0192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/499f2ef906cffe718a62686c48db65c47c1d0192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1fdea2b787c919596bbb4c5c12982decf45fbe9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+oxYCRBK7hj4Ov3rIwAApJwIAKyL3SgUc68pu4OeYOcNH4mh\nYz2MG09r/NS1v0usORJvYGfOlo1xByX3jIXrnu/DlFIMNiY7HqPq+KV1TgHA8/2F\nNmjRC0vwAS091ddGsBjy1cpqHvESLqHaGHaFMSFlf+BEUNd9CSLmY1EGZStLSe35\nkTvGFpwqRA6ytssgP1rqAomIZxrxsNMTwsvgjknLyFG6BNP4yJftrT81ytr5QxkM\noDhJzH8+n+D56yM4HGOrBS0MwYzaqUbrhwWOVJnEuBUy8PG2SSs0AzB5NLmUfe7N\n3L4ghWRpCW/gybURYsvHz5bEtNWkveEyz1w7z+m/L42BW1WROCXlLV+bFOk9qCU=\n=y4RK\n-----END PGP SIGNATURE-----\n", "payload": "tree 499f2ef906cffe718a62686c48db65c47c1d0192\nparent e369ec871e7194ea3f97704651f08edd974c1135\nparent c436930f91a4befefa602f2d64d06fc9613d507b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660587096 +0200\ncommitter GitHub <noreply@github.com> 1660587096 +0200\n\nRollup merge of #100514 - compiler-errors:issue-100191, r=spastorino\n\nDelay span bug when failing to normalize negative coherence impl subject due to other malformed impls\n\nFixes #100191\n\nr? ``@spastorino``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1fdea2b787c919596bbb4c5c12982decf45fbe9", "html_url": "https://github.com/rust-lang/rust/commit/a1fdea2b787c919596bbb4c5c12982decf45fbe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1fdea2b787c919596bbb4c5c12982decf45fbe9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e369ec871e7194ea3f97704651f08edd974c1135", "url": "https://api.github.com/repos/rust-lang/rust/commits/e369ec871e7194ea3f97704651f08edd974c1135", "html_url": "https://github.com/rust-lang/rust/commit/e369ec871e7194ea3f97704651f08edd974c1135"}, {"sha": "c436930f91a4befefa602f2d64d06fc9613d507b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c436930f91a4befefa602f2d64d06fc9613d507b", "html_url": "https://github.com/rust-lang/rust/commit/c436930f91a4befefa602f2d64d06fc9613d507b"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "9bb41b900b89a35f34a6d8f393dfadea91a20de0", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1fdea2b787c919596bbb4c5c12982decf45fbe9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fdea2b787c919596bbb4c5c12982decf45fbe9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=a1fdea2b787c919596bbb4c5c12982decf45fbe9", "patch": "@@ -307,7 +307,13 @@ fn negative_impl<'cx, 'tcx>(\n             tcx.impl_subject(impl1_def_id),\n         ) {\n             Ok(s) => s,\n-            Err(err) => bug!(\"failed to fully normalize {:?}: {:?}\", impl1_def_id, err),\n+            Err(err) => {\n+                tcx.sess.delay_span_bug(\n+                    tcx.def_span(impl1_def_id),\n+                    format!(\"failed to fully normalize {:?}: {:?}\", impl1_def_id, err),\n+                );\n+                return false;\n+            }\n         };\n \n         // Attempt to prove that impl2 applies, given all of the above."}, {"sha": "1c8316f87fa073ef9bdf16e5503df9942beaaf0d", "filename": "src/test/ui/coherence/issue-100191-2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1fdea2b787c919596bbb4c5c12982decf45fbe9/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fdea2b787c919596bbb4c5c12982decf45fbe9/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.rs?ref=a1fdea2b787c919596bbb4c5c12982decf45fbe9", "patch": "@@ -0,0 +1,12 @@\n+//~ ERROR overflow evaluating the requirement `T: Trait<_>`\n+\n+#![feature(specialization, with_negative_coherence)]\n+#![allow(incomplete_features)]\n+\n+pub trait Trait<T> {}\n+\n+default impl<T, U> Trait<T> for U {}\n+\n+impl<T> Trait<<T as Iterator>::Item> for T {}\n+\n+fn main() {}"}, {"sha": "ea09fb15bdfa3460b0b61025f5c443d5a19b35e6", "filename": "src/test/ui/coherence/issue-100191-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a1fdea2b787c919596bbb4c5c12982decf45fbe9/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1fdea2b787c919596bbb4c5c12982decf45fbe9/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.stderr?ref=a1fdea2b787c919596bbb4c5c12982decf45fbe9", "patch": "@@ -0,0 +1,14 @@\n+error[E0275]: overflow evaluating the requirement `T: Trait<_>`\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_100191_2`)\n+note: required because of the requirements on the impl of `Trait<_>` for `T`\n+  --> $DIR/issue-100191-2.rs:8:20\n+   |\n+LL | default impl<T, U> Trait<T> for U {}\n+   |                    ^^^^^^^^     ^\n+   = note: 128 redundant requirements hidden\n+   = note: required because of the requirements on the impl of `Trait<_>` for `T`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "e8597fde54d3ba133ec922311d78233642e949cc", "filename": "src/test/ui/coherence/issue-100191.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a1fdea2b787c919596bbb4c5c12982decf45fbe9/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fdea2b787c919596bbb4c5c12982decf45fbe9/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191.rs?ref=a1fdea2b787c919596bbb4c5c12982decf45fbe9", "patch": "@@ -0,0 +1,21 @@\n+#![crate_type = \"lib\"]\n+#![feature(specialization, with_negative_coherence)]\n+#![allow(incomplete_features)]\n+\n+trait X {}\n+trait Y: X {}\n+trait Z {\n+    type Assoc: Y;\n+}\n+struct A<T>(T);\n+\n+impl<T> Y for T where T: X {}\n+impl<T: X> Z for A<T> {\n+    type Assoc = T;\n+}\n+\n+// this impl is invalid, but causes an ICE anyway\n+impl<T> From<<A<T> as Z>::Assoc> for T {}\n+//~^ ERROR type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+\n+fn main() {}"}, {"sha": "1adb0f1e4fa7b288ffd6338b6e26e54bcce3702c", "filename": "src/test/ui/coherence/issue-100191.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1fdea2b787c919596bbb4c5c12982decf45fbe9/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1fdea2b787c919596bbb4c5c12982decf45fbe9/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191.stderr?ref=a1fdea2b787c919596bbb4c5c12982decf45fbe9", "patch": "@@ -0,0 +1,12 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+  --> $DIR/issue-100191.rs:18:6\n+   |\n+LL | impl<T> From<<A<T> as Z>::Assoc> for T {}\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}]}