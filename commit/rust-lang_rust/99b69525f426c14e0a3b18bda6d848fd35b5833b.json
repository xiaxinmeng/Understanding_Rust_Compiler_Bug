{"sha": "99b69525f426c14e0a3b18bda6d848fd35b5833b", "node_id": "C_kwDOAAsO6NoAKDk5YjY5NTI1ZjQyNmMxNGUwYTNiMThiZGE2ZDg0OGZkMzViNTgzM2I", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-06T17:36:25Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-06T17:36:25Z"}, "message": "hir_def::expr -> hir_def::hir, hir_def::type_ref -> hir_def::hir::type_ref", "tree": {"sha": "931ea8eb3a38db77ec9c751b57fd7a09f1ec4613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/931ea8eb3a38db77ec9c751b57fd7a09f1ec4613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99b69525f426c14e0a3b18bda6d848fd35b5833b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99b69525f426c14e0a3b18bda6d848fd35b5833b", "html_url": "https://github.com/rust-lang/rust/commit/99b69525f426c14e0a3b18bda6d848fd35b5833b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99b69525f426c14e0a3b18bda6d848fd35b5833b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7c104b3ada66276ff70fb81aa81d4f75d9d2ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7c104b3ada66276ff70fb81aa81d4f75d9d2ca", "html_url": "https://github.com/rust-lang/rust/commit/8e7c104b3ada66276ff70fb81aa81d4f75d9d2ca"}], "stats": {"total": 190, "additions": 96, "deletions": 94}, "files": [{"sha": "faa3a8931b039c39d64507a0b92cc164843016dd", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -25,7 +25,7 @@ use syntax::{ast, AstPtr, SyntaxNode, SyntaxNodePtr};\n use crate::{\n     attr::Attrs,\n     db::DefDatabase,\n-    expr::{\n+    hir::{\n         dummy_expr_id, Binding, BindingId, Expr, ExprId, Label, LabelId, Pat, PatId, RecordFieldPat,\n     },\n     item_scope::BuiltinShadowMode,"}, {"sha": "8d12d728f7cc3a1defe8f918d62e6ff3a5952743", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -33,7 +33,7 @@ use crate::{\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinUint},\n     data::adt::StructKind,\n     db::DefDatabase,\n-    expr::{\n+    hir::{\n         dummy_expr_id, Array, Binding, BindingAnnotation, BindingId, ClosureKind, Expr, ExprId,\n         FloatTypeWrapper, Label, LabelId, Literal, MatchArm, Movability, Pat, PatId,\n         RecordFieldPat, RecordLitField, Statement,"}, {"sha": "0a5bcb557978f83fcb752fcfa1cca58339801b52", "filename": "crates/hir-def/src/body/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -5,7 +5,7 @@ use std::fmt::{self, Write};\n use syntax::ast::HasName;\n \n use crate::{\n-    expr::{Array, BindingAnnotation, BindingId, ClosureKind, Literal, Movability, Statement},\n+    hir::{Array, BindingAnnotation, BindingId, ClosureKind, Literal, Movability, Statement},\n     pretty::{print_generic_args, print_path, print_type_ref},\n     type_ref::TypeRef,\n };"}, {"sha": "f3f9aa79461f1f2ddbeb6a38dd1e201c7a53ed47", "filename": "crates/hir-def/src/body/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -8,7 +8,7 @@ use rustc_hash::FxHashMap;\n use crate::{\n     body::Body,\n     db::DefDatabase,\n-    expr::{Binding, BindingId, Expr, ExprId, LabelId, Pat, PatId, Statement},\n+    hir::{Binding, BindingId, Expr, ExprId, LabelId, Pat, PatId, Statement},\n     BlockId, DefWithBodyId,\n };\n "}, {"sha": "cdd3a93a2936f37fff52fc5ac50b4409eb907d4c", "filename": "crates/hir-def/src/hir.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fhir.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -12,6 +12,8 @@\n //!\n //! See also a neighboring `body` module.\n \n+pub mod type_ref;\n+\n use std::fmt;\n \n use hir_expand::name::Name;\n@@ -28,10 +30,10 @@ use crate::{\n \n pub use syntax::ast::{ArithOp, BinaryOp, CmpOp, LogicOp, Ordering, RangeOp, UnaryOp};\n \n-pub type ExprId = Idx<Expr>;\n-\n pub type BindingId = Idx<Binding>;\n \n+pub type ExprId = Idx<Expr>;\n+\n /// FIXME: this is a hacky function which should be removed\n pub(crate) fn dummy_expr_id() -> ExprId {\n     ExprId::from_raw(RawIdx::from(u32::MAX))", "previous_filename": "crates/hir-def/src/expr.rs"}, {"sha": "0e2c0d864dc13c6590177890b71b2ad35fa58041", "filename": "crates/hir-def/src/hir/type_ref.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fhir%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fhir%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fhir%2Ftype_ref.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -13,7 +13,7 @@ use syntax::ast::{self, HasName};\n use crate::{\n     body::LowerCtx,\n     builtin_type::{BuiltinInt, BuiltinType, BuiltinUint},\n-    expr::Literal,\n+    hir::Literal,\n     path::Path,\n };\n ", "previous_filename": "crates/hir-def/src/type_ref.rs"}, {"sha": "9e1a52900e8598cf8c6aa715f319a1ef96ab2d2b", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -18,7 +18,6 @@ pub mod db;\n \n pub mod attr;\n pub mod path;\n-pub mod type_ref;\n pub mod builtin_type;\n pub mod builtin_attr;\n pub mod per_ns;\n@@ -34,7 +33,8 @@ pub mod generics;\n pub mod lang_item;\n pub mod layout;\n \n-pub mod expr;\n+pub mod hir;\n+pub use self::hir::type_ref;\n pub mod body;\n pub mod resolver;\n "}, {"sha": "670495e4d16fa17302f1ce080b88c049c743a59f", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -12,8 +12,8 @@ use crate::{\n     body::scope::{ExprScopes, ScopeId},\n     builtin_type::BuiltinType,\n     db::DefDatabase,\n-    expr::{BindingId, ExprId, LabelId},\n     generics::{GenericParams, TypeOrConstParamData},\n+    hir::{BindingId, ExprId, LabelId},\n     item_scope::{BuiltinShadowMode, BUILTIN_SCOPE},\n     lang_item::LangItemTarget,\n     nameres::DefMap,"}, {"sha": "c30a99e06ca5445000666a0a607d6ddadef792ed", "filename": "crates/hir-ty/src/chalk_db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -9,7 +9,7 @@ use chalk_solve::rust_ir::{self, OpaqueTyDatumBound, WellKnownTrait};\n \n use base_db::CrateId;\n use hir_def::{\n-    expr::Movability,\n+    hir::Movability,\n     lang_item::{lang_attr, LangItem, LangItemTarget},\n     AssocItemId, BlockId, GenericDefId, HasModule, ItemContainerId, Lookup, TypeAliasId,\n };\n@@ -415,8 +415,8 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         let input_output = crate::make_type_and_const_binders(it, input_output);\n \n         let movability = match self.db.body(parent)[expr] {\n-            hir_def::expr::Expr::Closure {\n-                closure_kind: hir_def::expr::ClosureKind::Generator(movability),\n+            hir_def::hir::Expr::Closure {\n+                closure_kind: hir_def::hir::ClosureKind::Generator(movability),\n                 ..\n             } => movability,\n             _ => unreachable!(\"non generator expression interned as generator\"),"}, {"sha": "78033b4e89b59157370e83eb169ab277ca615400", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -3,7 +3,7 @@\n use base_db::CrateId;\n use chalk_ir::{BoundVar, DebruijnIndex, GenericArgData};\n use hir_def::{\n-    expr::Expr,\n+    hir::Expr,\n     path::Path,\n     resolver::{Resolver, ValueNs},\n     type_ref::ConstRef,"}, {"sha": "e11770e12313afa611124930aadceb67d035fd43", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -6,7 +6,7 @@ use std::sync::Arc;\n use base_db::{impl_intern_key, salsa, CrateId, Upcast};\n use hir_def::{\n     db::DefDatabase,\n-    expr::ExprId,\n+    hir::ExprId,\n     layout::{Layout, LayoutError, TargetDataLayout},\n     AdtId, BlockId, ConstId, ConstParamId, DefWithBodyId, EnumVariantId, FunctionId, GenericDefId,\n     ImplId, LifetimeParamId, LocalFieldId, TypeOrConstParamId, VariantId,"}, {"sha": "b3a699e2d1b343909f9b28e9cc807dc1964e80e5", "filename": "crates/hir-ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -17,7 +17,7 @@ use std::fmt;\n use base_db::CrateId;\n use hir_def::{\n     data::adt::VariantData,\n-    expr::{Pat, PatId},\n+    hir::{Pat, PatId},\n     src::HasSource,\n     AdtId, AttrDefId, ConstId, EnumId, FunctionId, ItemContainerId, Lookup, ModuleDefId, StaticId,\n     StructId,"}, {"sha": "d39e077b716ff195c0c9d970b1e21b08ccf69d35", "filename": "crates/hir-ty/src/diagnostics/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -27,7 +27,7 @@ use crate::{\n \n pub(crate) use hir_def::{\n     body::Body,\n-    expr::{Expr, ExprId, MatchArm, Pat, PatId},\n+    hir::{Expr, ExprId, MatchArm, Pat, PatId},\n     LocalFieldId, VariantId,\n };\n "}, {"sha": "202f4aa66bcecee5b8c38e1021486d4ed3d04441", "filename": "crates/hir-ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -1,6 +1,6 @@\n //! Validation of matches.\n //!\n-//! This module provides lowering from [hir_def::expr::Pat] to [self::Pat] and match\n+//! This module provides lowering from [hir_def::hir::Pat] to [self::Pat] and match\n //! checking algorithm.\n //!\n //! It is modeled on the rustc module `rustc_mir_build::thir::pattern`.\n@@ -12,7 +12,7 @@ pub(crate) mod usefulness;\n \n use chalk_ir::Mutability;\n use hir_def::{\n-    body::Body, data::adt::VariantData, expr::PatId, AdtId, EnumVariantId, LocalFieldId, VariantId,\n+    body::Body, data::adt::VariantData, hir::PatId, AdtId, EnumVariantId, LocalFieldId, VariantId,\n };\n use hir_expand::name::Name;\n use stdx::{always, never};\n@@ -125,15 +125,15 @@ impl<'a> PatCtxt<'a> {\n         let variant = self.infer.variant_resolution_for_pat(pat);\n \n         let kind = match self.body[pat] {\n-            hir_def::expr::Pat::Wild => PatKind::Wild,\n+            hir_def::hir::Pat::Wild => PatKind::Wild,\n \n-            hir_def::expr::Pat::Lit(expr) => self.lower_lit(expr),\n+            hir_def::hir::Pat::Lit(expr) => self.lower_lit(expr),\n \n-            hir_def::expr::Pat::Path(ref path) => {\n+            hir_def::hir::Pat::Path(ref path) => {\n                 return self.lower_path(pat, path);\n             }\n \n-            hir_def::expr::Pat::Tuple { ref args, ellipsis } => {\n+            hir_def::hir::Pat::Tuple { ref args, ellipsis } => {\n                 let arity = match *ty.kind(Interner) {\n                     TyKind::Tuple(arity, _) => arity,\n                     _ => {\n@@ -146,7 +146,7 @@ impl<'a> PatCtxt<'a> {\n                 PatKind::Leaf { subpatterns }\n             }\n \n-            hir_def::expr::Pat::Bind { id, subpat, .. } => {\n+            hir_def::hir::Pat::Bind { id, subpat, .. } => {\n                 let bm = self.infer.pat_binding_modes[&pat];\n                 let name = &self.body.bindings[id].name;\n                 match (bm, ty.kind(Interner)) {\n@@ -161,13 +161,13 @@ impl<'a> PatCtxt<'a> {\n                 PatKind::Binding { name: name.clone(), subpattern: self.lower_opt_pattern(subpat) }\n             }\n \n-            hir_def::expr::Pat::TupleStruct { ref args, ellipsis, .. } if variant.is_some() => {\n+            hir_def::hir::Pat::TupleStruct { ref args, ellipsis, .. } if variant.is_some() => {\n                 let expected_len = variant.unwrap().variant_data(self.db.upcast()).fields().len();\n                 let subpatterns = self.lower_tuple_subpats(args, expected_len, ellipsis);\n                 self.lower_variant_or_leaf(pat, ty, subpatterns)\n             }\n \n-            hir_def::expr::Pat::Record { ref args, .. } if variant.is_some() => {\n+            hir_def::hir::Pat::Record { ref args, .. } if variant.is_some() => {\n                 let variant_data = variant.unwrap().variant_data(self.db.upcast());\n                 let subpatterns = args\n                     .iter()\n@@ -187,12 +187,12 @@ impl<'a> PatCtxt<'a> {\n                     }\n                 }\n             }\n-            hir_def::expr::Pat::TupleStruct { .. } | hir_def::expr::Pat::Record { .. } => {\n+            hir_def::hir::Pat::TupleStruct { .. } | hir_def::hir::Pat::Record { .. } => {\n                 self.errors.push(PatternError::UnresolvedVariant);\n                 PatKind::Wild\n             }\n \n-            hir_def::expr::Pat::Or(ref pats) => PatKind::Or { pats: self.lower_patterns(pats) },\n+            hir_def::hir::Pat::Or(ref pats) => PatKind::Or { pats: self.lower_patterns(pats) },\n \n             _ => {\n                 self.errors.push(PatternError::Unimplemented);\n@@ -279,8 +279,8 @@ impl<'a> PatCtxt<'a> {\n         }\n     }\n \n-    fn lower_lit(&mut self, expr: hir_def::expr::ExprId) -> PatKind {\n-        use hir_def::expr::{Expr, Literal::Bool};\n+    fn lower_lit(&mut self, expr: hir_def::hir::ExprId) -> PatKind {\n+        use hir_def::hir::{Expr, Literal::Bool};\n \n         match self.body[expr] {\n             Expr::Literal(Bool(value)) => PatKind::LiteralBool { value },"}, {"sha": "7c38e6583a75f2b128b89b259b88763980a1c674", "filename": "crates/hir-ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -3,7 +3,7 @@\n \n use hir_def::{\n     body::Body,\n-    expr::{Expr, ExprId, UnaryOp},\n+    hir::{Expr, ExprId, UnaryOp},\n     resolver::{resolver_for_expr, ResolveValueResult, ValueNs},\n     DefWithBodyId,\n };"}, {"sha": "76fd3effc058ad97fc4c1c5193565e5812c1ea40", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -18,12 +18,12 @@ use std::{convert::identity, ops::Index};\n \n use chalk_ir::{cast::Cast, DebruijnIndex, Mutability, Safety, Scalar, TypeFlags};\n use either::Either;\n-use hir_def::expr::LabelId;\n+use hir_def::hir::LabelId;\n use hir_def::{\n     body::Body,\n     builtin_type::{BuiltinInt, BuiltinType, BuiltinUint},\n     data::{ConstData, StaticData},\n-    expr::{BindingAnnotation, BindingId, ExprId, ExprOrPatId, PatId},\n+    hir::{BindingAnnotation, BindingId, ExprId, ExprOrPatId, PatId},\n     lang_item::{LangItem, LangItemTarget},\n     layout::Integer,\n     path::{ModPath, Path},"}, {"sha": "916f29466f373099996202cf02161a3126c4d170", "filename": "crates/hir-ty/src/infer/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -1,7 +1,7 @@\n //! Inference of closure parameter types based on the closure's expected type.\n \n use chalk_ir::{cast::Cast, AliasEq, AliasTy, FnSubst, WhereClause};\n-use hir_def::{expr::ExprId, HasModule};\n+use hir_def::{hir::ExprId, HasModule};\n use smallvec::SmallVec;\n \n use crate::{"}, {"sha": "f2e1ab269c71c5299e452840ffb35ef33fe37943", "filename": "crates/hir-ty/src/infer/coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -9,7 +9,7 @@ use std::{iter, sync::Arc};\n \n use chalk_ir::{cast::Cast, BoundVar, Goal, Mutability, TyVariableKind};\n use hir_def::{\n-    expr::ExprId,\n+    hir::ExprId,\n     lang_item::{LangItem, LangItemTarget},\n };\n use stdx::always;"}, {"sha": "7180b88d6a6ede89b0f19c8a92959a447cffe195", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -10,10 +10,10 @@ use chalk_ir::{\n     cast::Cast, fold::Shift, DebruijnIndex, GenericArgData, Mutability, TyKind, TyVariableKind,\n };\n use hir_def::{\n-    expr::{\n+    generics::TypeOrConstParamData,\n+    hir::{\n         ArithOp, Array, BinaryOp, ClosureKind, Expr, ExprId, LabelId, Literal, Statement, UnaryOp,\n     },\n-    generics::TypeOrConstParamData,\n     lang_item::LangItem,\n     path::{GenericArg, GenericArgs},\n     BlockId, ConstParamId, FieldId, ItemContainerId, Lookup,"}, {"sha": "52f35634215220ceacfc50b35c993ad707bff55b", "filename": "crates/hir-ty/src/infer/mutability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fmutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fmutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fmutability.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -3,7 +3,7 @@\n \n use chalk_ir::Mutability;\n use hir_def::{\n-    expr::{Array, BindingAnnotation, Expr, ExprId, PatId, Statement, UnaryOp},\n+    hir::{Array, BindingAnnotation, Expr, ExprId, PatId, Statement, UnaryOp},\n     lang_item::LangItem,\n };\n use hir_expand::name;"}, {"sha": "ce179210d34f1cd5a7d49dfa87316a42e55537a3", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -5,7 +5,7 @@ use std::iter::repeat_with;\n use chalk_ir::Mutability;\n use hir_def::{\n     body::Body,\n-    expr::{Binding, BindingAnnotation, BindingId, Expr, ExprId, ExprOrPatId, Literal, Pat, PatId},\n+    hir::{Binding, BindingAnnotation, BindingId, Expr, ExprId, ExprOrPatId, Literal, Pat, PatId},\n     path::Path,\n };\n use hir_expand::name::Name;"}, {"sha": "50fe5a724d090ede9e2ccb87057d1092575fe2f1", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -44,7 +44,7 @@ use chalk_ir::{\n     NoSolution, TyData,\n };\n use either::Either;\n-use hir_def::{expr::ExprId, type_ref::Rawness, TypeOrConstParamId};\n+use hir_def::{hir::ExprId, type_ref::Rawness, TypeOrConstParamId};\n use hir_expand::name;\n use la_arena::{Arena, Idx};\n use mir::MirEvalError;"}, {"sha": "ab5f199a0383b5ec16690a668ad76bbbee7d32ca", "filename": "crates/hir-ty/src/mir.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -7,7 +7,7 @@ use crate::{\n };\n use chalk_ir::Mutability;\n use hir_def::{\n-    expr::{BindingId, Expr, ExprId, Ordering, PatId},\n+    hir::{BindingId, Expr, ExprId, Ordering, PatId},\n     DefWithBodyId, FieldId, UnionId, VariantId,\n };\n use la_arena::{Arena, ArenaMap, Idx, RawIdx};\n@@ -588,32 +588,32 @@ impl Display for BinOp {\n     }\n }\n \n-impl From<hir_def::expr::ArithOp> for BinOp {\n-    fn from(value: hir_def::expr::ArithOp) -> Self {\n+impl From<hir_def::hir::ArithOp> for BinOp {\n+    fn from(value: hir_def::hir::ArithOp) -> Self {\n         match value {\n-            hir_def::expr::ArithOp::Add => BinOp::Add,\n-            hir_def::expr::ArithOp::Mul => BinOp::Mul,\n-            hir_def::expr::ArithOp::Sub => BinOp::Sub,\n-            hir_def::expr::ArithOp::Div => BinOp::Div,\n-            hir_def::expr::ArithOp::Rem => BinOp::Rem,\n-            hir_def::expr::ArithOp::Shl => BinOp::Shl,\n-            hir_def::expr::ArithOp::Shr => BinOp::Shr,\n-            hir_def::expr::ArithOp::BitXor => BinOp::BitXor,\n-            hir_def::expr::ArithOp::BitOr => BinOp::BitOr,\n-            hir_def::expr::ArithOp::BitAnd => BinOp::BitAnd,\n+            hir_def::hir::ArithOp::Add => BinOp::Add,\n+            hir_def::hir::ArithOp::Mul => BinOp::Mul,\n+            hir_def::hir::ArithOp::Sub => BinOp::Sub,\n+            hir_def::hir::ArithOp::Div => BinOp::Div,\n+            hir_def::hir::ArithOp::Rem => BinOp::Rem,\n+            hir_def::hir::ArithOp::Shl => BinOp::Shl,\n+            hir_def::hir::ArithOp::Shr => BinOp::Shr,\n+            hir_def::hir::ArithOp::BitXor => BinOp::BitXor,\n+            hir_def::hir::ArithOp::BitOr => BinOp::BitOr,\n+            hir_def::hir::ArithOp::BitAnd => BinOp::BitAnd,\n         }\n     }\n }\n \n-impl From<hir_def::expr::CmpOp> for BinOp {\n-    fn from(value: hir_def::expr::CmpOp) -> Self {\n+impl From<hir_def::hir::CmpOp> for BinOp {\n+    fn from(value: hir_def::hir::CmpOp) -> Self {\n         match value {\n-            hir_def::expr::CmpOp::Eq { negated: false } => BinOp::Eq,\n-            hir_def::expr::CmpOp::Eq { negated: true } => BinOp::Ne,\n-            hir_def::expr::CmpOp::Ord { ordering: Ordering::Greater, strict: false } => BinOp::Ge,\n-            hir_def::expr::CmpOp::Ord { ordering: Ordering::Greater, strict: true } => BinOp::Gt,\n-            hir_def::expr::CmpOp::Ord { ordering: Ordering::Less, strict: false } => BinOp::Le,\n-            hir_def::expr::CmpOp::Ord { ordering: Ordering::Less, strict: true } => BinOp::Lt,\n+            hir_def::hir::CmpOp::Eq { negated: false } => BinOp::Eq,\n+            hir_def::hir::CmpOp::Eq { negated: true } => BinOp::Ne,\n+            hir_def::hir::CmpOp::Ord { ordering: Ordering::Greater, strict: false } => BinOp::Ge,\n+            hir_def::hir::CmpOp::Ord { ordering: Ordering::Greater, strict: true } => BinOp::Gt,\n+            hir_def::hir::CmpOp::Ord { ordering: Ordering::Less, strict: false } => BinOp::Le,\n+            hir_def::hir::CmpOp::Ord { ordering: Ordering::Less, strict: true } => BinOp::Lt,\n         }\n     }\n }"}, {"sha": "7f3fdf343a2d8ad4a2627961d155f1f8bd70ca70", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -6,7 +6,7 @@ use chalk_ir::{BoundVar, ConstData, DebruijnIndex, TyKind};\n use hir_def::{\n     body::Body,\n     data::adt::{StructKind, VariantData},\n-    expr::{\n+    hir::{\n         Array, BindingAnnotation, BindingId, ExprId, LabelId, Literal, MatchArm, Pat, PatId,\n         RecordFieldPat, RecordLitField,\n     },\n@@ -713,20 +713,20 @@ impl MirLowerCtx<'_> {\n                 Ok(Some(current))\n             }\n             Expr::Box { .. } => not_supported!(\"box expression\"),\n-            Expr::Field { .. } | Expr::Index { .. } | Expr::UnaryOp { op: hir_def::expr::UnaryOp::Deref, .. } => {\n+            Expr::Field { .. } | Expr::Index { .. } | Expr::UnaryOp { op: hir_def::hir::UnaryOp::Deref, .. } => {\n                 let Some((p, current)) = self.lower_expr_as_place_without_adjust(current, expr_id, true)? else {\n                     return Ok(None);\n                 };\n                 self.push_assignment(current, place, Operand::Copy(p).into(), expr_id.into());\n                 Ok(Some(current))\n             }\n-            Expr::UnaryOp { expr, op: op @ (hir_def::expr::UnaryOp::Not | hir_def::expr::UnaryOp::Neg) } => {\n+            Expr::UnaryOp { expr, op: op @ (hir_def::hir::UnaryOp::Not | hir_def::hir::UnaryOp::Neg) } => {\n                 let Some((operand, current)) = self.lower_expr_to_some_operand(*expr, current)? else {\n                     return Ok(None);\n                 };\n                 let operation = match op {\n-                    hir_def::expr::UnaryOp::Not => UnOp::Not,\n-                    hir_def::expr::UnaryOp::Neg => UnOp::Neg,\n+                    hir_def::hir::UnaryOp::Not => UnOp::Not,\n+                    hir_def::hir::UnaryOp::Neg => UnOp::Neg,\n                     _ => unreachable!(),\n                 };\n                 self.push_assignment(\n@@ -739,7 +739,7 @@ impl MirLowerCtx<'_> {\n             },\n             Expr::BinaryOp { lhs, rhs, op } => {\n                 let op = op.ok_or(MirLowerError::IncompleteExpr)?;\n-                if let hir_def::expr::BinaryOp::Assignment { op } = op {\n+                if let hir_def::hir::BinaryOp::Assignment { op } = op {\n                     if op.is_some() {\n                         not_supported!(\"assignment with arith op (like +=)\");\n                     }\n@@ -765,13 +765,13 @@ impl MirLowerCtx<'_> {\n                     place,\n                     Rvalue::CheckedBinaryOp(\n                         match op {\n-                            hir_def::expr::BinaryOp::LogicOp(op) => match op {\n-                                hir_def::expr::LogicOp::And => BinOp::BitAnd, // FIXME: make these short circuit\n-                                hir_def::expr::LogicOp::Or => BinOp::BitOr,\n+                            hir_def::hir::BinaryOp::LogicOp(op) => match op {\n+                                hir_def::hir::LogicOp::And => BinOp::BitAnd, // FIXME: make these short circuit\n+                                hir_def::hir::LogicOp::Or => BinOp::BitOr,\n                             },\n-                            hir_def::expr::BinaryOp::ArithOp(op) => BinOp::from(op),\n-                            hir_def::expr::BinaryOp::CmpOp(op) => BinOp::from(op),\n-                            hir_def::expr::BinaryOp::Assignment { .. } => unreachable!(), // handled above\n+                            hir_def::hir::BinaryOp::ArithOp(op) => BinOp::from(op),\n+                            hir_def::hir::BinaryOp::CmpOp(op) => BinOp::from(op),\n+                            hir_def::hir::BinaryOp::Assignment { .. } => unreachable!(), // handled above\n                         },\n                         lhs_op,\n                         rhs_op,\n@@ -910,7 +910,7 @@ impl MirLowerCtx<'_> {\n             .size\n             .bytes_usize();\n         let bytes = match l {\n-            hir_def::expr::Literal::String(b) => {\n+            hir_def::hir::Literal::String(b) => {\n                 let b = b.as_bytes();\n                 let mut data = vec![];\n                 data.extend(0usize.to_le_bytes());\n@@ -919,19 +919,19 @@ impl MirLowerCtx<'_> {\n                 mm.insert(0, b.to_vec());\n                 return Ok(Operand::from_concrete_const(data, mm, ty));\n             }\n-            hir_def::expr::Literal::ByteString(b) => {\n+            hir_def::hir::Literal::ByteString(b) => {\n                 let mut data = vec![];\n                 data.extend(0usize.to_le_bytes());\n                 data.extend(b.len().to_le_bytes());\n                 let mut mm = MemoryMap::default();\n                 mm.insert(0, b.to_vec());\n                 return Ok(Operand::from_concrete_const(data, mm, ty));\n             }\n-            hir_def::expr::Literal::Char(c) => u32::from(*c).to_le_bytes().into(),\n-            hir_def::expr::Literal::Bool(b) => vec![*b as u8],\n-            hir_def::expr::Literal::Int(x, _) => x.to_le_bytes()[0..size].into(),\n-            hir_def::expr::Literal::Uint(x, _) => x.to_le_bytes()[0..size].into(),\n-            hir_def::expr::Literal::Float(f, _) => match size {\n+            hir_def::hir::Literal::Char(c) => u32::from(*c).to_le_bytes().into(),\n+            hir_def::hir::Literal::Bool(b) => vec![*b as u8],\n+            hir_def::hir::Literal::Int(x, _) => x.to_le_bytes()[0..size].into(),\n+            hir_def::hir::Literal::Uint(x, _) => x.to_le_bytes()[0..size].into(),\n+            hir_def::hir::Literal::Float(f, _) => match size {\n                 8 => f.into_f64().to_le_bytes().into(),\n                 4 => f.into_f32().to_le_bytes().into(),\n                 _ => {\n@@ -1218,14 +1218,14 @@ impl MirLowerCtx<'_> {\n \n     fn lower_block_to_place(\n         &mut self,\n-        statements: &[hir_def::expr::Statement],\n+        statements: &[hir_def::hir::Statement],\n         mut current: BasicBlockId,\n         tail: Option<ExprId>,\n         place: Place,\n     ) -> Result<Option<Idx<BasicBlock>>> {\n         for statement in statements.iter() {\n             match statement {\n-                hir_def::expr::Statement::Let { pat, initializer, else_branch, type_ref: _ } => {\n+                hir_def::hir::Statement::Let { pat, initializer, else_branch, type_ref: _ } => {\n                     if let Some(expr_id) = initializer {\n                         let else_block;\n                         let Some((init_place, c)) =\n@@ -1261,7 +1261,7 @@ impl MirLowerCtx<'_> {\n                         });\n                     }\n                 }\n-                hir_def::expr::Statement::Expr { expr, has_semi: _ } => {\n+                hir_def::hir::Statement::Expr { expr, has_semi: _ } => {\n                     let Some((_, c)) = self.lower_expr_as_place(current, *expr, true)? else {\n                         return Ok(None);\n                     };"}, {"sha": "a1574f55936933955a1ab01479f8bb8374d0f013", "filename": "crates/hir-ty/src/mir/lower/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fas_place.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -141,7 +141,7 @@ impl MirLowerCtx<'_> {\n                 }\n             }\n             Expr::UnaryOp { expr, op } => match op {\n-                hir_def::expr::UnaryOp::Deref => {\n+                hir_def::hir::UnaryOp::Deref => {\n                     if !matches!(\n                         self.expr_ty(*expr).kind(Interner),\n                         TyKind::Ref(..) | TyKind::Raw(..)"}, {"sha": "d6253b378b2c0e266bf5cceb10da216296184e69", "filename": "crates/hir-ty/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Fpretty.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -2,7 +2,7 @@\n \n use std::fmt::{Debug, Display, Write};\n \n-use hir_def::{body::Body, expr::BindingId};\n+use hir_def::{body::Body, hir::BindingId};\n use hir_expand::name::Name;\n use la_arena::ArenaMap;\n "}, {"sha": "1e46bb1d04092ad8c1b54e6c8bc22c95e7f49972", "filename": "crates/hir-ty/src/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -17,7 +17,7 @@ use expect_test::Expect;\n use hir_def::{\n     body::{Body, BodySourceMap, SyntheticSyntax},\n     db::{DefDatabase, InternDatabase},\n-    expr::{ExprId, PatId},\n+    hir::{ExprId, PatId},\n     item_scope::ItemScope,\n     nameres::DefMap,\n     src::HasSource,\n@@ -198,8 +198,8 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n \n         for (expr_or_pat, mismatch) in inference_result.type_mismatches() {\n             let Some(node) = (match expr_or_pat {\n-                hir_def::expr::ExprOrPatId::ExprId(expr) => expr_node(&body_source_map, expr, &db),\n-                hir_def::expr::ExprOrPatId::PatId(pat) => pat_node(&body_source_map, pat, &db),\n+                hir_def::hir::ExprOrPatId::ExprId(expr) => expr_node(&body_source_map, expr, &db),\n+                hir_def::hir::ExprOrPatId::PatId(pat) => pat_node(&body_source_map, pat, &db),\n             }) else { continue; };\n             let range = node.as_ref().original_file_range(&db);\n             let actual = format!("}, {"sha": "883e6a29b06a64bc1225210e03e21aae83b2e7f4", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -4,7 +4,7 @@\n //! are splitting the hir.\n \n use hir_def::{\n-    expr::{BindingId, LabelId},\n+    hir::{BindingId, LabelId},\n     AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, GenericDefId, GenericParamId,\n     ModuleDefId, VariantId,\n };"}, {"sha": "bb78ee549becce745782cb219f80f040e25bbe1b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -41,8 +41,8 @@ use either::Either;\n use hir_def::{\n     body::{BodyDiagnostic, SyntheticSyntax},\n     data::adt::VariantData,\n-    expr::{BindingAnnotation, BindingId, ExprOrPatId, LabelId, Pat},\n     generics::{LifetimeParamData, TypeOrConstParamData, TypeParamProvenance},\n+    hir::{BindingAnnotation, BindingId, ExprOrPatId, LabelId, Pat},\n     item_tree::ItemTreeNode,\n     lang_item::{LangItem, LangItemTarget},\n     layout::{Layout, LayoutError, ReprOptions},"}, {"sha": "5b1d7649fa3e107cf2228ba71f3a610d9eb66694", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -8,7 +8,7 @@ use base_db::{FileId, FileRange};\n use either::Either;\n use hir_def::{\n     body,\n-    expr::Expr,\n+    hir::Expr,\n     macro_id_to_def_id,\n     resolver::{self, HasResolver, Resolver, TypeNs},\n     type_ref::Mutability,"}, {"sha": "68593411403d6275554fd9311ba70e74859453af", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -89,7 +89,7 @@ use base_db::FileId;\n use hir_def::{\n     child_by_source::ChildBySource,\n     dyn_map::DynMap,\n-    expr::{BindingId, LabelId},\n+    hir::{BindingId, LabelId},\n     keys::{self, Key},\n     AdtId, ConstId, ConstParamId, DefWithBodyId, EnumId, EnumVariantId, FieldId, FunctionId,\n     GenericDefId, GenericParamId, ImplId, LifetimeParamId, MacroId, ModuleId, StaticId, StructId,"}, {"sha": "1c50d81e1bd927f310e7cee4e25766d2cbb557e6", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -17,7 +17,7 @@ use hir_def::{\n         scope::{ExprScopes, ScopeId},\n         Body, BodySourceMap,\n     },\n-    expr::{ExprId, Pat, PatId},\n+    hir::{ExprId, Pat, PatId},\n     lang_item::LangItem,\n     macro_id_to_def_id,\n     path::{ModPath, Path, PathKind},"}, {"sha": "bd477775717251dbe70a2543721a8fbf8c9bb4ac", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b69525f426c14e0a3b18bda6d848fd35b5833b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=99b69525f426c14e0a3b18bda6d848fd35b5833b", "patch": "@@ -13,7 +13,7 @@ use hir::{\n };\n use hir_def::{\n     body::{BodySourceMap, SyntheticSyntax},\n-    expr::{ExprId, PatId},\n+    hir::{ExprId, PatId},\n     FunctionId,\n };\n use hir_ty::{Interner, TyExt, TypeFlags};"}]}